{
  "domains": [
    {
      "commands": [
        { "name": "clearMessages", "description": "Does nothing." },
        {
          "name": "disable",
          "description": "Disables console domain, prevents further console messages from being reported to the client."
        },
        {
          "name": "enable",
          "description": "Enables console domain, sends the messages collected so far to the client by means of the\n`messageAdded` notification."
        }
      ],
      "description": "This domain is deprecated - use Runtime or Log instead.",
      "deprecated": true,
      "domain": "Console",
      "dependencies": ["Runtime"],
      "events": [
        {
          "name": "messageAdded",
          "parameters": [
            {
              "$ref": "ConsoleMessage",
              "name": "message",
              "description": "Console message that has been added."
            }
          ],
          "description": "Issued when new console message is added."
        }
      ],
      "types": [
        {
          "properties": [
            {
              "enum": [
                "xml",
                "javascript",
                "network",
                "console-api",
                "storage",
                "appcache",
                "rendering",
                "security",
                "other",
                "deprecation",
                "worker"
              ],
              "type": "string",
              "name": "source",
              "description": "Message source."
            },
            {
              "enum": ["log", "warning", "error", "debug", "info"],
              "type": "string",
              "name": "level",
              "description": "Message severity."
            },
            {
              "type": "string",
              "name": "text",
              "description": "Message text."
            },
            {
              "type": "string",
              "optional": true,
              "name": "url",
              "description": "URL of the message origin."
            },
            {
              "type": "integer",
              "optional": true,
              "name": "line",
              "description": "Line number in the resource that generated this message (1-based)."
            },
            {
              "type": "integer",
              "optional": true,
              "name": "column",
              "description": "Column number in the resource that generated this message (1-based)."
            }
          ],
          "type": "object",
          "id": "ConsoleMessage",
          "description": "Console message."
        }
      ]
    },
    {
      "commands": [
        {
          "name": "continueToLocation",
          "parameters": [
            {
              "$ref": "Location",
              "name": "location",
              "description": "Location to continue to."
            },
            {
              "type": "string",
              "enum": ["any", "current"],
              "optional": true,
              "name": "targetCallFrames"
            }
          ],
          "description": "Continues execution until specific location is reached."
        },
        {
          "name": "disable",
          "description": "Disables debugger for given page."
        },
        {
          "returns": [
            {
              "$ref": "Runtime.UniqueDebuggerId",
              "name": "debuggerId",
              "experimental": true,
              "description": "Unique identifier of the debugger."
            }
          ],
          "name": "enable",
          "parameters": [
            {
              "type": "number",
              "optional": true,
              "name": "maxScriptsCacheSize",
              "experimental": true,
              "description": "The maximum size in bytes of collected scripts (not referenced by other heap objects)\nthe debugger can hold. Puts no limit if paramter is omitted."
            }
          ],
          "description": "Enables debugger for the given page. Clients should not assume that the debugging has been\nenabled until the result for this command is received."
        },
        {
          "returns": [
            {
              "$ref": "Runtime.RemoteObject",
              "name": "result",
              "description": "Object wrapper for the evaluation result."
            },
            {
              "$ref": "Runtime.ExceptionDetails",
              "optional": true,
              "name": "exceptionDetails",
              "description": "Exception details."
            }
          ],
          "name": "evaluateOnCallFrame",
          "parameters": [
            {
              "$ref": "CallFrameId",
              "name": "callFrameId",
              "description": "Call frame identifier to evaluate on."
            },
            {
              "type": "string",
              "name": "expression",
              "description": "Expression to evaluate."
            },
            {
              "type": "string",
              "optional": true,
              "name": "objectGroup",
              "description": "String object group name to put result into (allows rapid releasing resulting object handles\nusing `releaseObjectGroup`)."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "includeCommandLineAPI",
              "description": "Specifies whether command line API should be available to the evaluated expression, defaults\nto false."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "silent",
              "description": "In silent mode exceptions thrown during evaluation are not reported and do not pause\nexecution. Overrides `setPauseOnException` state."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "returnByValue",
              "description": "Whether the result is expected to be a JSON object that should be sent by value."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "generatePreview",
              "experimental": true,
              "description": "Whether preview should be generated for the result."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "throwOnSideEffect",
              "description": "Whether to throw an exception if side effect cannot be ruled out during evaluation."
            },
            {
              "$ref": "Runtime.TimeDelta",
              "optional": true,
              "name": "timeout",
              "experimental": true,
              "description": "Terminate execution after timing out (number of milliseconds)."
            }
          ],
          "description": "Evaluates expression on a given call frame."
        },
        {
          "returns": [
            {
              "$ref": "Runtime.RemoteObject",
              "name": "result",
              "description": "Object wrapper for the evaluation result."
            },
            {
              "$ref": "Runtime.ExceptionDetails",
              "optional": true,
              "name": "exceptionDetails",
              "description": "Exception details."
            }
          ],
          "parameters": [
            {
              "$ref": "CallFrameId",
              "name": "callFrameId",
              "description": "WebAssembly call frame identifier to evaluate on."
            },
            {
              "type": "binary",
              "name": "evaluator",
              "description": "Code of the evaluator module."
            },
            {
              "$ref": "Runtime.TimeDelta",
              "optional": true,
              "name": "timeout",
              "experimental": true,
              "description": "Terminate execution after timing out (number of milliseconds)."
            }
          ],
          "name": "executeWasmEvaluator",
          "experimental": true,
          "description": "Execute a Wasm Evaluator module on a given call frame."
        },
        {
          "returns": [
            {
              "items": { "$ref": "BreakLocation" },
              "type": "array",
              "name": "locations",
              "description": "List of the possible breakpoint locations."
            }
          ],
          "name": "getPossibleBreakpoints",
          "parameters": [
            {
              "$ref": "Location",
              "name": "start",
              "description": "Start of range to search possible breakpoint locations in."
            },
            {
              "$ref": "Location",
              "optional": true,
              "name": "end",
              "description": "End of range to search possible breakpoint locations in (excluding). When not specified, end\nof scripts is used as end of range."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "restrictToFunction",
              "description": "Only consider locations which are in the same (non-nested) function as start."
            }
          ],
          "description": "Returns possible locations for breakpoint. scriptId in start and end range locations should be\nthe same."
        },
        {
          "returns": [
            {
              "type": "string",
              "name": "scriptSource",
              "description": "Script source (empty in case of Wasm bytecode)."
            },
            {
              "type": "binary",
              "optional": true,
              "name": "bytecode",
              "description": "Wasm bytecode."
            }
          ],
          "name": "getScriptSource",
          "parameters": [
            {
              "$ref": "Runtime.ScriptId",
              "name": "scriptId",
              "description": "Id of the script to get source for."
            }
          ],
          "description": "Returns source for the script with given id."
        },
        {
          "deprecated": true,
          "returns": [
            {
              "type": "binary",
              "name": "bytecode",
              "description": "Script source."
            }
          ],
          "name": "getWasmBytecode",
          "parameters": [
            {
              "$ref": "Runtime.ScriptId",
              "name": "scriptId",
              "description": "Id of the Wasm script to get source for."
            }
          ],
          "description": "This command is deprecated. Use getScriptSource instead."
        },
        {
          "returns": [{ "name": "stackTrace", "$ref": "Runtime.StackTrace" }],
          "parameters": [
            { "name": "stackTraceId", "$ref": "Runtime.StackTraceId" }
          ],
          "name": "getStackTrace",
          "experimental": true,
          "description": "Returns stack trace with given `stackTraceId`."
        },
        {
          "name": "pause",
          "description": "Stops on the next JavaScript statement."
        },
        {
          "deprecated": true,
          "parameters": [
            {
              "$ref": "Runtime.StackTraceId",
              "name": "parentStackTraceId",
              "description": "Debugger will pause when async call with given stack trace is started."
            }
          ],
          "name": "pauseOnAsyncCall",
          "experimental": true
        },
        {
          "name": "removeBreakpoint",
          "parameters": [{ "name": "breakpointId", "$ref": "BreakpointId" }],
          "description": "Removes JavaScript breakpoint."
        },
        {
          "returns": [
            {
              "items": { "$ref": "CallFrame" },
              "type": "array",
              "name": "callFrames",
              "description": "New stack trace."
            },
            {
              "$ref": "Runtime.StackTrace",
              "optional": true,
              "name": "asyncStackTrace",
              "description": "Async stack trace, if any."
            },
            {
              "$ref": "Runtime.StackTraceId",
              "optional": true,
              "name": "asyncStackTraceId",
              "experimental": true,
              "description": "Async stack trace, if any."
            }
          ],
          "name": "restartFrame",
          "parameters": [
            {
              "$ref": "CallFrameId",
              "name": "callFrameId",
              "description": "Call frame identifier to evaluate on."
            }
          ],
          "description": "Restarts particular call frame from the beginning."
        },
        {
          "name": "resume",
          "parameters": [
            {
              "type": "boolean",
              "optional": true,
              "name": "terminateOnResume",
              "description": "Set to true to terminate execution upon resuming execution. In contrast\nto Runtime.terminateExecution, this will allows to execute further\nJavaScript (i.e. via evaluation) until execution of the paused code\nis actually resumed, at which point termination is triggered.\nIf execution is currently not paused, this parameter has no effect."
            }
          ],
          "description": "Resumes JavaScript execution."
        },
        {
          "returns": [
            {
              "items": { "$ref": "SearchMatch" },
              "type": "array",
              "name": "result",
              "description": "List of search matches."
            }
          ],
          "name": "searchInContent",
          "parameters": [
            {
              "$ref": "Runtime.ScriptId",
              "name": "scriptId",
              "description": "Id of the script to search in."
            },
            {
              "type": "string",
              "name": "query",
              "description": "String to search for."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "caseSensitive",
              "description": "If true, search is case sensitive."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "isRegex",
              "description": "If true, treats string parameter as regex."
            }
          ],
          "description": "Searches for given string in script content."
        },
        {
          "name": "setAsyncCallStackDepth",
          "parameters": [
            {
              "type": "integer",
              "name": "maxDepth",
              "description": "Maximum depth of async call stacks. Setting to `0` will effectively disable collecting async\ncall stacks (default)."
            }
          ],
          "description": "Enables or disables async call stacks tracking."
        },
        {
          "parameters": [
            {
              "items": { "type": "string" },
              "type": "array",
              "name": "patterns",
              "description": "Array of regexps that will be used to check script url for blackbox state."
            }
          ],
          "name": "setBlackboxPatterns",
          "experimental": true,
          "description": "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in\nscripts with url matching one of the patterns. VM will try to leave blackboxed script by\nperforming 'step in' several times, finally resorting to 'step out' if unsuccessful."
        },
        {
          "parameters": [
            {
              "$ref": "Runtime.ScriptId",
              "name": "scriptId",
              "description": "Id of the script."
            },
            {
              "items": { "$ref": "ScriptPosition" },
              "type": "array",
              "name": "positions"
            }
          ],
          "name": "setBlackboxedRanges",
          "experimental": true,
          "description": "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted\nscripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful.\nPositions array contains positions where blackbox state is changed. First interval isn't\nblackboxed. Array should be sorted."
        },
        {
          "returns": [
            {
              "$ref": "BreakpointId",
              "name": "breakpointId",
              "description": "Id of the created breakpoint for further reference."
            },
            {
              "$ref": "Location",
              "name": "actualLocation",
              "description": "Location this breakpoint resolved into."
            }
          ],
          "name": "setBreakpoint",
          "parameters": [
            {
              "$ref": "Location",
              "name": "location",
              "description": "Location to set breakpoint in."
            },
            {
              "type": "string",
              "optional": true,
              "name": "condition",
              "description": "Expression to use as a breakpoint condition. When specified, debugger will only stop on the\nbreakpoint if this expression evaluates to true."
            }
          ],
          "description": "Sets JavaScript breakpoint at a given location."
        },
        {
          "returns": [
            {
              "$ref": "BreakpointId",
              "name": "breakpointId",
              "description": "Id of the created breakpoint for further reference."
            }
          ],
          "name": "setInstrumentationBreakpoint",
          "parameters": [
            {
              "enum": [
                "beforeScriptExecution",
                "beforeScriptWithSourceMapExecution"
              ],
              "type": "string",
              "name": "instrumentation",
              "description": "Instrumentation name."
            }
          ],
          "description": "Sets instrumentation breakpoint."
        },
        {
          "returns": [
            {
              "$ref": "BreakpointId",
              "name": "breakpointId",
              "description": "Id of the created breakpoint for further reference."
            },
            {
              "items": { "$ref": "Location" },
              "type": "array",
              "name": "locations",
              "description": "List of the locations this breakpoint resolved into upon addition."
            }
          ],
          "name": "setBreakpointByUrl",
          "parameters": [
            {
              "type": "integer",
              "name": "lineNumber",
              "description": "Line number to set breakpoint at."
            },
            {
              "type": "string",
              "optional": true,
              "name": "url",
              "description": "URL of the resources to set breakpoint on."
            },
            {
              "type": "string",
              "optional": true,
              "name": "urlRegex",
              "description": "Regex pattern for the URLs of the resources to set breakpoints on. Either `url` or\n`urlRegex` must be specified."
            },
            {
              "type": "string",
              "optional": true,
              "name": "scriptHash",
              "description": "Script hash of the resources to set breakpoint on."
            },
            {
              "type": "integer",
              "optional": true,
              "name": "columnNumber",
              "description": "Offset in the line to set breakpoint at."
            },
            {
              "type": "string",
              "optional": true,
              "name": "condition",
              "description": "Expression to use as a breakpoint condition. When specified, debugger will only stop on the\nbreakpoint if this expression evaluates to true."
            }
          ],
          "description": "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this\ncommand is issued, all existing parsed scripts will have breakpoints resolved and returned in\n`locations` property. Further matching script parsing will result in subsequent\n`breakpointResolved` events issued. This logical breakpoint will survive page reloads."
        },
        {
          "returns": [
            {
              "$ref": "BreakpointId",
              "name": "breakpointId",
              "description": "Id of the created breakpoint for further reference."
            }
          ],
          "parameters": [
            {
              "$ref": "Runtime.RemoteObjectId",
              "name": "objectId",
              "description": "Function object id."
            },
            {
              "type": "string",
              "optional": true,
              "name": "condition",
              "description": "Expression to use as a breakpoint condition. When specified, debugger will\nstop on the breakpoint if this expression evaluates to true."
            }
          ],
          "name": "setBreakpointOnFunctionCall",
          "experimental": true,
          "description": "Sets JavaScript breakpoint before each call to the given function.\nIf another function was created from the same source as a given one,\ncalling it will also trigger the breakpoint."
        },
        {
          "name": "setBreakpointsActive",
          "parameters": [
            {
              "type": "boolean",
              "name": "active",
              "description": "New value for breakpoints active state."
            }
          ],
          "description": "Activates / deactivates all breakpoints on the page."
        },
        {
          "name": "setPauseOnExceptions",
          "parameters": [
            {
              "enum": ["none", "uncaught", "all"],
              "type": "string",
              "name": "state",
              "description": "Pause on exceptions mode."
            }
          ],
          "description": "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or\nno exceptions. Initial pause on exceptions state is `none`."
        },
        {
          "parameters": [
            {
              "$ref": "Runtime.CallArgument",
              "name": "newValue",
              "description": "New return value."
            }
          ],
          "name": "setReturnValue",
          "experimental": true,
          "description": "Changes return value in top frame. Available only at return break position."
        },
        {
          "returns": [
            {
              "type": "array",
              "items": { "$ref": "CallFrame" },
              "optional": true,
              "name": "callFrames",
              "description": "New stack trace in case editing has happened while VM was stopped."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "stackChanged",
              "description": "Whether current call stack  was modified after applying the changes."
            },
            {
              "$ref": "Runtime.StackTrace",
              "optional": true,
              "name": "asyncStackTrace",
              "description": "Async stack trace, if any."
            },
            {
              "$ref": "Runtime.StackTraceId",
              "optional": true,
              "name": "asyncStackTraceId",
              "experimental": true,
              "description": "Async stack trace, if any."
            },
            {
              "$ref": "Runtime.ExceptionDetails",
              "optional": true,
              "name": "exceptionDetails",
              "description": "Exception details if any."
            }
          ],
          "name": "setScriptSource",
          "parameters": [
            {
              "$ref": "Runtime.ScriptId",
              "name": "scriptId",
              "description": "Id of the script to edit."
            },
            {
              "type": "string",
              "name": "scriptSource",
              "description": "New content of the script."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "dryRun",
              "description": "If true the change will not actually be applied. Dry run may be used to get result\ndescription without actually modifying the code."
            }
          ],
          "description": "Edits JavaScript source live."
        },
        {
          "name": "setSkipAllPauses",
          "parameters": [
            {
              "type": "boolean",
              "name": "skip",
              "description": "New value for skip pauses state."
            }
          ],
          "description": "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."
        },
        {
          "name": "setVariableValue",
          "parameters": [
            {
              "type": "integer",
              "name": "scopeNumber",
              "description": "0-based number of scope as was listed in scope chain. Only 'local', 'closure' and 'catch'\nscope types are allowed. Other scopes could be manipulated manually."
            },
            {
              "type": "string",
              "name": "variableName",
              "description": "Variable name."
            },
            {
              "$ref": "Runtime.CallArgument",
              "name": "newValue",
              "description": "New variable value."
            },
            {
              "$ref": "CallFrameId",
              "name": "callFrameId",
              "description": "Id of callframe that holds variable."
            }
          ],
          "description": "Changes value of variable in a callframe. Object-based scopes are not supported and must be\nmutated manually."
        },
        {
          "name": "stepInto",
          "parameters": [
            {
              "type": "boolean",
              "optional": true,
              "name": "breakOnAsyncCall",
              "experimental": true,
              "description": "Debugger will pause on the execution of the first async task which was scheduled\nbefore next pause."
            }
          ],
          "description": "Steps into the function call."
        },
        { "name": "stepOut", "description": "Steps out of the function call." },
        { "name": "stepOver", "description": "Steps over the statement." }
      ],
      "description": "Debugger domain exposes JavaScript debugging capabilities. It allows setting and removing\nbreakpoints, stepping through execution, exploring stack traces, etc.",
      "domain": "Debugger",
      "dependencies": ["Runtime"],
      "events": [
        {
          "name": "breakpointResolved",
          "parameters": [
            {
              "$ref": "BreakpointId",
              "name": "breakpointId",
              "description": "Breakpoint unique identifier."
            },
            {
              "$ref": "Location",
              "name": "location",
              "description": "Actual breakpoint location."
            }
          ],
          "description": "Fired when breakpoint is resolved to an actual script and location."
        },
        {
          "name": "paused",
          "parameters": [
            {
              "items": { "$ref": "CallFrame" },
              "type": "array",
              "name": "callFrames",
              "description": "Call stack the virtual machine stopped on."
            },
            {
              "enum": [
                "ambiguous",
                "assert",
                "debugCommand",
                "DOM",
                "EventListener",
                "exception",
                "instrumentation",
                "OOM",
                "other",
                "promiseRejection",
                "XHR"
              ],
              "type": "string",
              "name": "reason",
              "description": "Pause reason."
            },
            {
              "type": "object",
              "optional": true,
              "name": "data",
              "description": "Object containing break-specific auxiliary properties."
            },
            {
              "type": "array",
              "items": { "type": "string" },
              "optional": true,
              "name": "hitBreakpoints",
              "description": "Hit breakpoints IDs"
            },
            {
              "$ref": "Runtime.StackTrace",
              "optional": true,
              "name": "asyncStackTrace",
              "description": "Async stack trace, if any."
            },
            {
              "$ref": "Runtime.StackTraceId",
              "optional": true,
              "name": "asyncStackTraceId",
              "experimental": true,
              "description": "Async stack trace, if any."
            },
            {
              "name": "asyncCallStackTraceId",
              "deprecated": true,
              "description": "Never present, will be removed.",
              "optional": true,
              "experimental": true,
              "$ref": "Runtime.StackTraceId"
            }
          ],
          "description": "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."
        },
        {
          "name": "resumed",
          "description": "Fired when the virtual machine resumed execution."
        },
        {
          "name": "scriptFailedToParse",
          "parameters": [
            {
              "$ref": "Runtime.ScriptId",
              "name": "scriptId",
              "description": "Identifier of the script parsed."
            },
            {
              "type": "string",
              "name": "url",
              "description": "URL or name of the script parsed (if any)."
            },
            {
              "type": "integer",
              "name": "startLine",
              "description": "Line offset of the script within the resource with given URL (for script tags)."
            },
            {
              "type": "integer",
              "name": "startColumn",
              "description": "Column offset of the script within the resource with given URL."
            },
            {
              "type": "integer",
              "name": "endLine",
              "description": "Last line of the script."
            },
            {
              "type": "integer",
              "name": "endColumn",
              "description": "Length of the last line of the script."
            },
            {
              "$ref": "Runtime.ExecutionContextId",
              "name": "executionContextId",
              "description": "Specifies script creation context."
            },
            {
              "type": "string",
              "name": "hash",
              "description": "Content hash of the script."
            },
            {
              "type": "object",
              "optional": true,
              "name": "executionContextAuxData",
              "description": "Embedder-specific auxiliary data."
            },
            {
              "type": "string",
              "optional": true,
              "name": "sourceMapURL",
              "description": "URL of source map associated with script (if any)."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "hasSourceURL",
              "description": "True, if this script has sourceURL."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "isModule",
              "description": "True, if this script is ES6 module."
            },
            {
              "type": "integer",
              "optional": true,
              "name": "length",
              "description": "This script length."
            },
            {
              "$ref": "Runtime.StackTrace",
              "optional": true,
              "name": "stackTrace",
              "experimental": true,
              "description": "JavaScript top stack frame of where the script parsed event was triggered if available."
            },
            {
              "type": "integer",
              "optional": true,
              "name": "codeOffset",
              "experimental": true,
              "description": "If the scriptLanguage is WebAssembly, the code section offset in the module."
            },
            {
              "$ref": "Debugger.ScriptLanguage",
              "optional": true,
              "name": "scriptLanguage",
              "experimental": true,
              "description": "The language of the script."
            }
          ],
          "description": "Fired when virtual machine fails to parse the script."
        },
        {
          "name": "scriptParsed",
          "parameters": [
            {
              "$ref": "Runtime.ScriptId",
              "name": "scriptId",
              "description": "Identifier of the script parsed."
            },
            {
              "type": "string",
              "name": "url",
              "description": "URL or name of the script parsed (if any)."
            },
            {
              "type": "integer",
              "name": "startLine",
              "description": "Line offset of the script within the resource with given URL (for script tags)."
            },
            {
              "type": "integer",
              "name": "startColumn",
              "description": "Column offset of the script within the resource with given URL."
            },
            {
              "type": "integer",
              "name": "endLine",
              "description": "Last line of the script."
            },
            {
              "type": "integer",
              "name": "endColumn",
              "description": "Length of the last line of the script."
            },
            {
              "$ref": "Runtime.ExecutionContextId",
              "name": "executionContextId",
              "description": "Specifies script creation context."
            },
            {
              "type": "string",
              "name": "hash",
              "description": "Content hash of the script."
            },
            {
              "type": "object",
              "optional": true,
              "name": "executionContextAuxData",
              "description": "Embedder-specific auxiliary data."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "isLiveEdit",
              "experimental": true,
              "description": "True, if this script is generated as a result of the live edit operation."
            },
            {
              "type": "string",
              "optional": true,
              "name": "sourceMapURL",
              "description": "URL of source map associated with script (if any)."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "hasSourceURL",
              "description": "True, if this script has sourceURL."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "isModule",
              "description": "True, if this script is ES6 module."
            },
            {
              "type": "integer",
              "optional": true,
              "name": "length",
              "description": "This script length."
            },
            {
              "$ref": "Runtime.StackTrace",
              "optional": true,
              "name": "stackTrace",
              "experimental": true,
              "description": "JavaScript top stack frame of where the script parsed event was triggered if available."
            },
            {
              "type": "integer",
              "optional": true,
              "name": "codeOffset",
              "experimental": true,
              "description": "If the scriptLanguage is WebAssembly, the code section offset in the module."
            },
            {
              "$ref": "Debugger.ScriptLanguage",
              "optional": true,
              "name": "scriptLanguage",
              "experimental": true,
              "description": "The language of the script."
            },
            {
              "$ref": "Debugger.DebugSymbols",
              "optional": true,
              "name": "debugSymbols",
              "experimental": true,
              "description": "If the scriptLanguage is WebASsembly, the source of debug symbols for the module."
            }
          ],
          "description": "Fired when virtual machine parses script. This event is also fired for all known and uncollected\nscripts upon enabling debugger."
        }
      ],
      "types": [
        {
          "type": "string",
          "id": "BreakpointId",
          "description": "Breakpoint identifier."
        },
        {
          "type": "string",
          "id": "CallFrameId",
          "description": "Call frame identifier."
        },
        {
          "properties": [
            {
              "$ref": "Runtime.ScriptId",
              "name": "scriptId",
              "description": "Script identifier as reported in the `Debugger.scriptParsed`."
            },
            {
              "type": "integer",
              "name": "lineNumber",
              "description": "Line number in the script (0-based)."
            },
            {
              "type": "integer",
              "optional": true,
              "name": "columnNumber",
              "description": "Column number in the script (0-based)."
            }
          ],
          "type": "object",
          "id": "Location",
          "description": "Location in the source code."
        },
        {
          "properties": [
            { "type": "integer", "name": "lineNumber" },
            { "type": "integer", "name": "columnNumber" }
          ],
          "type": "object",
          "id": "ScriptPosition",
          "experimental": true,
          "description": "Location in the source code."
        },
        {
          "properties": [
            {
              "$ref": "CallFrameId",
              "name": "callFrameId",
              "description": "Call frame identifier. This identifier is only valid while the virtual machine is paused."
            },
            {
              "type": "string",
              "name": "functionName",
              "description": "Name of the JavaScript function called on this call frame."
            },
            {
              "$ref": "Location",
              "optional": true,
              "name": "functionLocation",
              "description": "Location in the source code."
            },
            {
              "$ref": "Location",
              "name": "location",
              "description": "Location in the source code."
            },
            {
              "type": "string",
              "name": "url",
              "description": "JavaScript script name or url."
            },
            {
              "items": { "$ref": "Scope" },
              "type": "array",
              "name": "scopeChain",
              "description": "Scope chain for this call frame."
            },
            {
              "$ref": "Runtime.RemoteObject",
              "name": "this",
              "description": "`this` object for this call frame."
            },
            {
              "$ref": "Runtime.RemoteObject",
              "optional": true,
              "name": "returnValue",
              "description": "The value being returned, if the function is at return point."
            }
          ],
          "type": "object",
          "id": "CallFrame",
          "description": "JavaScript call frame. Array of call frames form the call stack."
        },
        {
          "properties": [
            {
              "enum": [
                "global",
                "local",
                "with",
                "closure",
                "catch",
                "block",
                "script",
                "eval",
                "module",
                "wasm-expression-stack"
              ],
              "type": "string",
              "name": "type",
              "description": "Scope type."
            },
            {
              "$ref": "Runtime.RemoteObject",
              "name": "object",
              "description": "Object representing the scope. For `global` and `with` scopes it represents the actual\nobject; for the rest of the scopes, it is artificial transient object enumerating scope\nvariables as its properties."
            },
            { "type": "string", "optional": true, "name": "name" },
            {
              "$ref": "Location",
              "optional": true,
              "name": "startLocation",
              "description": "Location in the source code where scope starts"
            },
            {
              "$ref": "Location",
              "optional": true,
              "name": "endLocation",
              "description": "Location in the source code where scope ends"
            }
          ],
          "type": "object",
          "id": "Scope",
          "description": "Scope description."
        },
        {
          "properties": [
            {
              "type": "number",
              "name": "lineNumber",
              "description": "Line number in resource content."
            },
            {
              "type": "string",
              "name": "lineContent",
              "description": "Line with match content."
            }
          ],
          "type": "object",
          "id": "SearchMatch",
          "description": "Search match for resource."
        },
        {
          "type": "object",
          "id": "BreakLocation",
          "properties": [
            {
              "$ref": "Runtime.ScriptId",
              "name": "scriptId",
              "description": "Script identifier as reported in the `Debugger.scriptParsed`."
            },
            {
              "type": "integer",
              "name": "lineNumber",
              "description": "Line number in the script (0-based)."
            },
            {
              "type": "integer",
              "optional": true,
              "name": "columnNumber",
              "description": "Column number in the script (0-based)."
            },
            {
              "type": "string",
              "enum": ["debuggerStatement", "call", "return"],
              "optional": true,
              "name": "type"
            }
          ]
        },
        {
          "enum": ["JavaScript", "WebAssembly"],
          "type": "string",
          "id": "ScriptLanguage",
          "description": "Enum of possible script languages."
        },
        {
          "properties": [
            {
              "enum": ["None", "SourceMap", "EmbeddedDWARF", "ExternalDWARF"],
              "type": "string",
              "name": "type",
              "description": "Type of the debug symbols."
            },
            {
              "type": "string",
              "optional": true,
              "name": "externalURL",
              "description": "URL of the external symbol source."
            }
          ],
          "type": "object",
          "id": "DebugSymbols",
          "description": "Debug symbols available for a wasm script."
        }
      ]
    },
    {
      "commands": [
        {
          "name": "addInspectedHeapObject",
          "parameters": [
            {
              "$ref": "HeapSnapshotObjectId",
              "name": "heapObjectId",
              "description": "Heap snapshot object id to be accessible by means of $x command line API."
            }
          ],
          "description": "Enables console to refer to the node with given id via $x (see Command Line API for more details\n$x functions)."
        },
        { "name": "collectGarbage" },
        { "name": "disable" },
        { "name": "enable" },
        {
          "returns": [
            {
              "$ref": "HeapSnapshotObjectId",
              "name": "heapSnapshotObjectId",
              "description": "Id of the heap snapshot object corresponding to the passed remote object id."
            }
          ],
          "name": "getHeapObjectId",
          "parameters": [
            {
              "$ref": "Runtime.RemoteObjectId",
              "name": "objectId",
              "description": "Identifier of the object to get heap object id for."
            }
          ]
        },
        {
          "returns": [
            {
              "$ref": "Runtime.RemoteObject",
              "name": "result",
              "description": "Evaluation result."
            }
          ],
          "name": "getObjectByHeapObjectId",
          "parameters": [
            { "name": "objectId", "$ref": "HeapSnapshotObjectId" },
            {
              "type": "string",
              "optional": true,
              "name": "objectGroup",
              "description": "Symbolic group name that can be used to release multiple objects."
            }
          ]
        },
        {
          "returns": [
            {
              "$ref": "SamplingHeapProfile",
              "name": "profile",
              "description": "Return the sampling profile being collected."
            }
          ],
          "name": "getSamplingProfile"
        },
        {
          "name": "startSampling",
          "parameters": [
            {
              "type": "number",
              "optional": true,
              "name": "samplingInterval",
              "description": "Average sample interval in bytes. Poisson distribution is used for the intervals. The\ndefault value is 32768 bytes."
            }
          ]
        },
        {
          "name": "startTrackingHeapObjects",
          "parameters": [
            { "type": "boolean", "optional": true, "name": "trackAllocations" }
          ]
        },
        {
          "returns": [
            {
              "$ref": "SamplingHeapProfile",
              "name": "profile",
              "description": "Recorded sampling heap profile."
            }
          ],
          "name": "stopSampling"
        },
        {
          "name": "stopTrackingHeapObjects",
          "parameters": [
            {
              "type": "boolean",
              "optional": true,
              "name": "reportProgress",
              "description": "If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken\nwhen the tracking is stopped."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "treatGlobalObjectsAsRoots"
            }
          ]
        },
        {
          "name": "takeHeapSnapshot",
          "parameters": [
            {
              "type": "boolean",
              "optional": true,
              "name": "reportProgress",
              "description": "If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "treatGlobalObjectsAsRoots",
              "description": "If true, a raw snapshot without artifical roots will be generated"
            }
          ]
        }
      ],
      "domain": "HeapProfiler",
      "dependencies": ["Runtime"],
      "experimental": true,
      "events": [
        {
          "name": "addHeapSnapshotChunk",
          "parameters": [{ "type": "string", "name": "chunk" }]
        },
        {
          "name": "heapStatsUpdate",
          "parameters": [
            {
              "items": { "type": "integer" },
              "type": "array",
              "name": "statsUpdate",
              "description": "An array of triplets. Each triplet describes a fragment. The first integer is the fragment\nindex, the second integer is a total count of objects for the fragment, the third integer is\na total size of the objects for the fragment."
            }
          ],
          "description": "If heap objects tracking has been started then backend may send update for one or more fragments"
        },
        {
          "name": "lastSeenObjectId",
          "parameters": [
            { "type": "integer", "name": "lastSeenObjectId" },
            { "type": "number", "name": "timestamp" }
          ],
          "description": "If heap objects tracking has been started then backend regularly sends a current value for last\nseen object id and corresponding timestamp. If the were changes in the heap since last event\nthen one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."
        },
        {
          "name": "reportHeapSnapshotProgress",
          "parameters": [
            { "type": "integer", "name": "done" },
            { "type": "integer", "name": "total" },
            { "type": "boolean", "optional": true, "name": "finished" }
          ]
        },
        { "name": "resetProfiles" }
      ],
      "types": [
        {
          "type": "string",
          "id": "HeapSnapshotObjectId",
          "description": "Heap snapshot object id."
        },
        {
          "properties": [
            {
              "$ref": "Runtime.CallFrame",
              "name": "callFrame",
              "description": "Function location."
            },
            {
              "type": "number",
              "name": "selfSize",
              "description": "Allocations size in bytes for the node excluding children."
            },
            {
              "type": "integer",
              "name": "id",
              "description": "Node id. Ids are unique across all profiles collected between startSampling and stopSampling."
            },
            {
              "items": { "$ref": "SamplingHeapProfileNode" },
              "type": "array",
              "name": "children",
              "description": "Child nodes."
            }
          ],
          "type": "object",
          "id": "SamplingHeapProfileNode",
          "description": "Sampling Heap Profile node. Holds callsite information, allocation statistics and child nodes."
        },
        {
          "properties": [
            {
              "type": "number",
              "name": "size",
              "description": "Allocation size in bytes attributed to the sample."
            },
            {
              "type": "integer",
              "name": "nodeId",
              "description": "Id of the corresponding profile tree node."
            },
            {
              "type": "number",
              "name": "ordinal",
              "description": "Time-ordered sample ordinal number. It is unique across all profiles retrieved\nbetween startSampling and stopSampling."
            }
          ],
          "type": "object",
          "id": "SamplingHeapProfileSample",
          "description": "A single sample from a sampling profile."
        },
        {
          "properties": [
            { "name": "head", "$ref": "SamplingHeapProfileNode" },
            {
              "items": { "$ref": "SamplingHeapProfileSample" },
              "type": "array",
              "name": "samples"
            }
          ],
          "type": "object",
          "id": "SamplingHeapProfile",
          "description": "Sampling profile."
        }
      ]
    },
    {
      "domain": "Profiler",
      "dependencies": ["Runtime", "Debugger"],
      "commands": [
        { "name": "disable" },
        { "name": "enable" },
        {
          "returns": [
            {
              "items": { "$ref": "ScriptCoverage" },
              "type": "array",
              "name": "result",
              "description": "Coverage data for the current isolate."
            }
          ],
          "name": "getBestEffortCoverage",
          "description": "Collect coverage data for the current isolate. The coverage data may be incomplete due to\ngarbage collection."
        },
        {
          "name": "setSamplingInterval",
          "parameters": [
            {
              "type": "integer",
              "name": "interval",
              "description": "New sampling interval in microseconds."
            }
          ],
          "description": "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."
        },
        { "name": "start" },
        {
          "returns": [
            {
              "type": "number",
              "name": "timestamp",
              "description": "Monotonically increasing time (in seconds) when the coverage update was taken in the backend."
            }
          ],
          "name": "startPreciseCoverage",
          "parameters": [
            {
              "type": "boolean",
              "optional": true,
              "name": "callCount",
              "description": "Collect accurate call counts beyond simple 'covered' or 'not covered'."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "detailed",
              "description": "Collect block-based coverage."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "allowTriggeredUpdates",
              "description": "Allow the backend to send updates on its own initiative"
            }
          ],
          "description": "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code\ncoverage may be incomplete. Enabling prevents running optimized code and resets execution\ncounters."
        },
        {
          "name": "startTypeProfile",
          "experimental": true,
          "description": "Enable type profile."
        },
        {
          "returns": [
            {
              "$ref": "Profile",
              "name": "profile",
              "description": "Recorded profile."
            }
          ],
          "name": "stop"
        },
        {
          "name": "stopPreciseCoverage",
          "description": "Disable precise code coverage. Disabling releases unnecessary execution count records and allows\nexecuting optimized code."
        },
        {
          "name": "stopTypeProfile",
          "experimental": true,
          "description": "Disable type profile. Disabling releases type profile data collected so far."
        },
        {
          "returns": [
            {
              "items": { "$ref": "ScriptCoverage" },
              "type": "array",
              "name": "result",
              "description": "Coverage data for the current isolate."
            },
            {
              "type": "number",
              "name": "timestamp",
              "description": "Monotonically increasing time (in seconds) when the coverage update was taken in the backend."
            }
          ],
          "name": "takePreciseCoverage",
          "description": "Collect coverage data for the current isolate, and resets execution counters. Precise code\ncoverage needs to have started."
        },
        {
          "returns": [
            {
              "items": { "$ref": "ScriptTypeProfile" },
              "type": "array",
              "name": "result",
              "description": "Type profile for all scripts since startTypeProfile() was turned on."
            }
          ],
          "name": "takeTypeProfile",
          "experimental": true,
          "description": "Collect type profile."
        },
        {
          "name": "enableRuntimeCallStats",
          "experimental": true,
          "description": "Enable run time call stats collection."
        },
        {
          "name": "disableRuntimeCallStats",
          "experimental": true,
          "description": "Disable run time call stats collection."
        },
        {
          "returns": [
            {
              "items": { "$ref": "CounterInfo" },
              "type": "array",
              "name": "result",
              "description": "Collected counter information."
            }
          ],
          "name": "getRuntimeCallStats",
          "experimental": true,
          "description": "Retrieve run time call stats."
        }
      ],
      "types": [
        {
          "properties": [
            {
              "type": "integer",
              "name": "id",
              "description": "Unique id of the node."
            },
            {
              "$ref": "Runtime.CallFrame",
              "name": "callFrame",
              "description": "Function location."
            },
            {
              "type": "integer",
              "optional": true,
              "name": "hitCount",
              "description": "Number of samples where this node was on top of the call stack."
            },
            {
              "type": "array",
              "items": { "type": "integer" },
              "optional": true,
              "name": "children",
              "description": "Child node ids."
            },
            {
              "type": "string",
              "optional": true,
              "name": "deoptReason",
              "description": "The reason of being not optimized. The function may be deoptimized or marked as don't\noptimize."
            },
            {
              "type": "array",
              "items": { "$ref": "PositionTickInfo" },
              "optional": true,
              "name": "positionTicks",
              "description": "An array of source position ticks."
            }
          ],
          "type": "object",
          "id": "ProfileNode",
          "description": "Profile node. Holds callsite information, execution statistics and child nodes."
        },
        {
          "properties": [
            {
              "items": { "$ref": "ProfileNode" },
              "type": "array",
              "name": "nodes",
              "description": "The list of profile nodes. First item is the root node."
            },
            {
              "type": "number",
              "name": "startTime",
              "description": "Profiling start timestamp in microseconds."
            },
            {
              "type": "number",
              "name": "endTime",
              "description": "Profiling end timestamp in microseconds."
            },
            {
              "type": "array",
              "items": { "type": "integer" },
              "optional": true,
              "name": "samples",
              "description": "Ids of samples top nodes."
            },
            {
              "type": "array",
              "items": { "type": "integer" },
              "optional": true,
              "name": "timeDeltas",
              "description": "Time intervals between adjacent samples in microseconds. The first delta is relative to the\nprofile startTime."
            }
          ],
          "type": "object",
          "id": "Profile",
          "description": "Profile."
        },
        {
          "properties": [
            {
              "type": "integer",
              "name": "line",
              "description": "Source line number (1-based)."
            },
            {
              "type": "integer",
              "name": "ticks",
              "description": "Number of samples attributed to the source line."
            }
          ],
          "type": "object",
          "id": "PositionTickInfo",
          "description": "Specifies a number of samples attributed to a certain source position."
        },
        {
          "properties": [
            {
              "type": "integer",
              "name": "startOffset",
              "description": "JavaScript script source offset for the range start."
            },
            {
              "type": "integer",
              "name": "endOffset",
              "description": "JavaScript script source offset for the range end."
            },
            {
              "type": "integer",
              "name": "count",
              "description": "Collected execution count of the source range."
            }
          ],
          "type": "object",
          "id": "CoverageRange",
          "description": "Coverage data for a source range."
        },
        {
          "properties": [
            {
              "type": "string",
              "name": "functionName",
              "description": "JavaScript function name."
            },
            {
              "items": { "$ref": "CoverageRange" },
              "type": "array",
              "name": "ranges",
              "description": "Source ranges inside the function with coverage data."
            },
            {
              "type": "boolean",
              "name": "isBlockCoverage",
              "description": "Whether coverage data for this function has block granularity."
            }
          ],
          "type": "object",
          "id": "FunctionCoverage",
          "description": "Coverage data for a JavaScript function."
        },
        {
          "properties": [
            {
              "$ref": "Runtime.ScriptId",
              "name": "scriptId",
              "description": "JavaScript script id."
            },
            {
              "type": "string",
              "name": "url",
              "description": "JavaScript script name or url."
            },
            {
              "items": { "$ref": "FunctionCoverage" },
              "type": "array",
              "name": "functions",
              "description": "Functions contained in the script that has coverage data."
            }
          ],
          "type": "object",
          "id": "ScriptCoverage",
          "description": "Coverage data for a JavaScript script."
        },
        {
          "properties": [
            {
              "type": "string",
              "name": "name",
              "description": "Name of a type collected with type profiling."
            }
          ],
          "type": "object",
          "id": "TypeObject",
          "experimental": true,
          "description": "Describes a type collected during runtime."
        },
        {
          "properties": [
            {
              "type": "integer",
              "name": "offset",
              "description": "Source offset of the parameter or end of function for return values."
            },
            {
              "items": { "$ref": "TypeObject" },
              "type": "array",
              "name": "types",
              "description": "The types for this parameter or return value."
            }
          ],
          "type": "object",
          "id": "TypeProfileEntry",
          "experimental": true,
          "description": "Source offset and types for a parameter or return value."
        },
        {
          "properties": [
            {
              "$ref": "Runtime.ScriptId",
              "name": "scriptId",
              "description": "JavaScript script id."
            },
            {
              "type": "string",
              "name": "url",
              "description": "JavaScript script name or url."
            },
            {
              "items": { "$ref": "TypeProfileEntry" },
              "type": "array",
              "name": "entries",
              "description": "Type profile entries for parameters and return values of the functions in the script."
            }
          ],
          "type": "object",
          "id": "ScriptTypeProfile",
          "experimental": true,
          "description": "Type profile data collected during runtime for a JavaScript script."
        },
        {
          "properties": [
            {
              "type": "string",
              "name": "name",
              "description": "Counter name."
            },
            {
              "type": "integer",
              "name": "value",
              "description": "Counter value."
            }
          ],
          "type": "object",
          "id": "CounterInfo",
          "experimental": true,
          "description": "Collected counter information."
        }
      ],
      "events": [
        {
          "name": "consoleProfileFinished",
          "parameters": [
            { "type": "string", "name": "id" },
            {
              "$ref": "Debugger.Location",
              "name": "location",
              "description": "Location of console.profileEnd()."
            },
            { "name": "profile", "$ref": "Profile" },
            {
              "type": "string",
              "optional": true,
              "name": "title",
              "description": "Profile title passed as an argument to console.profile()."
            }
          ]
        },
        {
          "name": "consoleProfileStarted",
          "parameters": [
            { "type": "string", "name": "id" },
            {
              "$ref": "Debugger.Location",
              "name": "location",
              "description": "Location of console.profile()."
            },
            {
              "type": "string",
              "optional": true,
              "name": "title",
              "description": "Profile title passed as an argument to console.profile()."
            }
          ],
          "description": "Sent when new profile recording is started using console.profile() call."
        },
        {
          "parameters": [
            {
              "type": "number",
              "name": "timestamp",
              "description": "Monotonically increasing time (in seconds) when the coverage update was taken in the backend."
            },
            {
              "type": "string",
              "name": "occassion",
              "description": "Identifier for distinguishing coverage events."
            },
            {
              "items": { "$ref": "ScriptCoverage" },
              "type": "array",
              "name": "result",
              "description": "Coverage data for the current isolate."
            }
          ],
          "name": "preciseCoverageDeltaUpdate",
          "experimental": true,
          "description": "Reports coverage delta since the last poll (either from an event like this, or from\n`takePreciseCoverage` for the current isolate. May only be sent if precise code\ncoverage has been started. This event can be trigged by the embedder to, for example,\ntrigger collection of coverage data immediatelly at a certain point in time."
        }
      ]
    },
    {
      "commands": [
        {
          "returns": [
            {
              "$ref": "RemoteObject",
              "name": "result",
              "description": "Promise result. Will contain rejected value if promise was rejected."
            },
            {
              "$ref": "ExceptionDetails",
              "optional": true,
              "name": "exceptionDetails",
              "description": "Exception details if stack strace is available."
            }
          ],
          "name": "awaitPromise",
          "parameters": [
            {
              "$ref": "RemoteObjectId",
              "name": "promiseObjectId",
              "description": "Identifier of the promise."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "returnByValue",
              "description": "Whether the result is expected to be a JSON object that should be sent by value."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "generatePreview",
              "description": "Whether preview should be generated for the result."
            }
          ],
          "description": "Add handler to promise with given promise object id."
        },
        {
          "returns": [
            {
              "$ref": "RemoteObject",
              "name": "result",
              "description": "Call result."
            },
            {
              "$ref": "ExceptionDetails",
              "optional": true,
              "name": "exceptionDetails",
              "description": "Exception details."
            }
          ],
          "name": "callFunctionOn",
          "parameters": [
            {
              "type": "string",
              "name": "functionDeclaration",
              "description": "Declaration of the function to call."
            },
            {
              "$ref": "RemoteObjectId",
              "optional": true,
              "name": "objectId",
              "description": "Identifier of the object to call function on. Either objectId or executionContextId should\nbe specified."
            },
            {
              "type": "array",
              "items": { "$ref": "CallArgument" },
              "optional": true,
              "name": "arguments",
              "description": "Call arguments. All call arguments must belong to the same JavaScript world as the target\nobject."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "silent",
              "description": "In silent mode exceptions thrown during evaluation are not reported and do not pause\nexecution. Overrides `setPauseOnException` state."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "returnByValue",
              "description": "Whether the result is expected to be a JSON object which should be sent by value."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "generatePreview",
              "experimental": true,
              "description": "Whether preview should be generated for the result."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "userGesture",
              "description": "Whether execution should be treated as initiated by user in the UI."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "awaitPromise",
              "description": "Whether execution should `await` for resulting value and return once awaited promise is\nresolved."
            },
            {
              "$ref": "ExecutionContextId",
              "optional": true,
              "name": "executionContextId",
              "description": "Specifies execution context which global object will be used to call function on. Either\nexecutionContextId or objectId should be specified."
            },
            {
              "type": "string",
              "optional": true,
              "name": "objectGroup",
              "description": "Symbolic group name that can be used to release multiple objects. If objectGroup is not\nspecified and objectId is, objectGroup will be inherited from object."
            }
          ],
          "description": "Calls function with given declaration on the given object. Object group of the result is\ninherited from the target object."
        },
        {
          "returns": [
            {
              "$ref": "ScriptId",
              "optional": true,
              "name": "scriptId",
              "description": "Id of the script."
            },
            {
              "$ref": "ExceptionDetails",
              "optional": true,
              "name": "exceptionDetails",
              "description": "Exception details."
            }
          ],
          "name": "compileScript",
          "parameters": [
            {
              "type": "string",
              "name": "expression",
              "description": "Expression to compile."
            },
            {
              "type": "string",
              "name": "sourceURL",
              "description": "Source url to be set for the script."
            },
            {
              "type": "boolean",
              "name": "persistScript",
              "description": "Specifies whether the compiled script should be persisted."
            },
            {
              "$ref": "ExecutionContextId",
              "optional": true,
              "name": "executionContextId",
              "description": "Specifies in which execution context to perform script run. If the parameter is omitted the\nevaluation will be performed in the context of the inspected page."
            }
          ],
          "description": "Compiles expression."
        },
        {
          "name": "disable",
          "description": "Disables reporting of execution contexts creation."
        },
        {
          "name": "discardConsoleEntries",
          "description": "Discards collected exceptions and console API calls."
        },
        {
          "name": "enable",
          "description": "Enables reporting of execution contexts creation by means of `executionContextCreated` event.\nWhen the reporting gets enabled the event will be sent immediately for each existing execution\ncontext."
        },
        {
          "returns": [
            {
              "$ref": "RemoteObject",
              "name": "result",
              "description": "Evaluation result."
            },
            {
              "$ref": "ExceptionDetails",
              "optional": true,
              "name": "exceptionDetails",
              "description": "Exception details."
            }
          ],
          "name": "evaluate",
          "parameters": [
            {
              "type": "string",
              "name": "expression",
              "description": "Expression to evaluate."
            },
            {
              "type": "string",
              "optional": true,
              "name": "objectGroup",
              "description": "Symbolic group name that can be used to release multiple objects."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "includeCommandLineAPI",
              "description": "Determines whether Command Line API should be available during the evaluation."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "silent",
              "description": "In silent mode exceptions thrown during evaluation are not reported and do not pause\nexecution. Overrides `setPauseOnException` state."
            },
            {
              "$ref": "ExecutionContextId",
              "optional": true,
              "name": "contextId",
              "description": "Specifies in which execution context to perform evaluation. If the parameter is omitted the\nevaluation will be performed in the context of the inspected page."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "returnByValue",
              "description": "Whether the result is expected to be a JSON object that should be sent by value."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "generatePreview",
              "experimental": true,
              "description": "Whether preview should be generated for the result."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "userGesture",
              "description": "Whether execution should be treated as initiated by user in the UI."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "awaitPromise",
              "description": "Whether execution should `await` for resulting value and return once awaited promise is\nresolved."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "throwOnSideEffect",
              "experimental": true,
              "description": "Whether to throw an exception if side effect cannot be ruled out during evaluation.\nThis implies `disableBreaks` below."
            },
            {
              "$ref": "TimeDelta",
              "optional": true,
              "name": "timeout",
              "experimental": true,
              "description": "Terminate execution after timing out (number of milliseconds)."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "disableBreaks",
              "experimental": true,
              "description": "Disable breakpoints during execution."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "replMode",
              "experimental": true,
              "description": "Setting this flag to true enables `let` re-declaration and top-level `await`.\nNote that `let` variables can only be re-declared if they originate from\n`replMode` themselves."
            }
          ],
          "description": "Evaluates expression on global object."
        },
        {
          "returns": [
            { "type": "string", "name": "id", "description": "The isolate id." }
          ],
          "name": "getIsolateId",
          "experimental": true,
          "description": "Returns the isolate id."
        },
        {
          "returns": [
            {
              "type": "number",
              "name": "usedSize",
              "description": "Used heap size in bytes."
            },
            {
              "type": "number",
              "name": "totalSize",
              "description": "Allocated heap size in bytes."
            }
          ],
          "name": "getHeapUsage",
          "experimental": true,
          "description": "Returns the JavaScript heap usage.\nIt is the total usage of the corresponding isolate not scoped to a particular Runtime."
        },
        {
          "returns": [
            {
              "items": { "$ref": "PropertyDescriptor" },
              "type": "array",
              "name": "result",
              "description": "Object properties."
            },
            {
              "type": "array",
              "items": { "$ref": "InternalPropertyDescriptor" },
              "optional": true,
              "name": "internalProperties",
              "description": "Internal object properties (only of the element itself)."
            },
            {
              "name": "privateProperties",
              "items": { "$ref": "PrivatePropertyDescriptor" },
              "optional": true,
              "type": "array",
              "experimental": true,
              "description": "Object private properties."
            },
            {
              "$ref": "ExceptionDetails",
              "optional": true,
              "name": "exceptionDetails",
              "description": "Exception details."
            }
          ],
          "name": "getProperties",
          "parameters": [
            {
              "$ref": "RemoteObjectId",
              "name": "objectId",
              "description": "Identifier of the object to return properties for."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "ownProperties",
              "description": "If true, returns properties belonging only to the element itself, not to its prototype\nchain."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "accessorPropertiesOnly",
              "experimental": true,
              "description": "If true, returns accessor properties (with getter/setter) only; internal properties are not\nreturned either."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "generatePreview",
              "experimental": true,
              "description": "Whether preview should be generated for the results."
            }
          ],
          "description": "Returns properties of a given object. Object group of the result is inherited from the target\nobject."
        },
        {
          "returns": [
            { "items": { "type": "string" }, "type": "array", "name": "names" }
          ],
          "name": "globalLexicalScopeNames",
          "parameters": [
            {
              "$ref": "ExecutionContextId",
              "optional": true,
              "name": "executionContextId",
              "description": "Specifies in which execution context to lookup global scope variables."
            }
          ],
          "description": "Returns all let, const and class variables from global scope."
        },
        {
          "returns": [
            {
              "$ref": "RemoteObject",
              "name": "objects",
              "description": "Array with objects."
            }
          ],
          "name": "queryObjects",
          "parameters": [
            {
              "$ref": "RemoteObjectId",
              "name": "prototypeObjectId",
              "description": "Identifier of the prototype to return objects for."
            },
            {
              "type": "string",
              "optional": true,
              "name": "objectGroup",
              "description": "Symbolic group name that can be used to release the results."
            }
          ]
        },
        {
          "name": "releaseObject",
          "parameters": [
            {
              "$ref": "RemoteObjectId",
              "name": "objectId",
              "description": "Identifier of the object to release."
            }
          ],
          "description": "Releases remote object with given id."
        },
        {
          "name": "releaseObjectGroup",
          "parameters": [
            {
              "type": "string",
              "name": "objectGroup",
              "description": "Symbolic object group name."
            }
          ],
          "description": "Releases all remote objects that belong to a given group."
        },
        {
          "name": "runIfWaitingForDebugger",
          "description": "Tells inspected instance to run if it was waiting for debugger to attach."
        },
        {
          "returns": [
            {
              "$ref": "RemoteObject",
              "name": "result",
              "description": "Run result."
            },
            {
              "$ref": "ExceptionDetails",
              "optional": true,
              "name": "exceptionDetails",
              "description": "Exception details."
            }
          ],
          "name": "runScript",
          "parameters": [
            {
              "$ref": "ScriptId",
              "name": "scriptId",
              "description": "Id of the script to run."
            },
            {
              "$ref": "ExecutionContextId",
              "optional": true,
              "name": "executionContextId",
              "description": "Specifies in which execution context to perform script run. If the parameter is omitted the\nevaluation will be performed in the context of the inspected page."
            },
            {
              "type": "string",
              "optional": true,
              "name": "objectGroup",
              "description": "Symbolic group name that can be used to release multiple objects."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "silent",
              "description": "In silent mode exceptions thrown during evaluation are not reported and do not pause\nexecution. Overrides `setPauseOnException` state."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "includeCommandLineAPI",
              "description": "Determines whether Command Line API should be available during the evaluation."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "returnByValue",
              "description": "Whether the result is expected to be a JSON object which should be sent by value."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "generatePreview",
              "description": "Whether preview should be generated for the result."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "awaitPromise",
              "description": "Whether execution should `await` for resulting value and return once awaited promise is\nresolved."
            }
          ],
          "description": "Runs script with given id in a given context."
        },
        {
          "redirect": "Debugger",
          "name": "setAsyncCallStackDepth",
          "parameters": [
            {
              "type": "integer",
              "name": "maxDepth",
              "description": "Maximum depth of async call stacks. Setting to `0` will effectively disable collecting async\ncall stacks (default)."
            }
          ],
          "description": "Enables or disables async call stacks tracking."
        },
        {
          "parameters": [{ "type": "boolean", "name": "enabled" }],
          "name": "setCustomObjectFormatterEnabled",
          "experimental": true
        },
        {
          "parameters": [{ "type": "integer", "name": "size" }],
          "name": "setMaxCallStackSizeToCapture",
          "experimental": true
        },
        {
          "name": "terminateExecution",
          "experimental": true,
          "description": "Terminate current or next JavaScript execution.\nWill cancel the termination when the outer-most script execution ends."
        },
        {
          "parameters": [
            { "type": "string", "name": "name" },
            {
              "optional": true,
              "name": "executionContextId",
              "$ref": "ExecutionContextId"
            }
          ],
          "name": "addBinding",
          "experimental": true,
          "description": "If executionContextId is empty, adds binding with the given name on the\nglobal objects of all inspected contexts, including those created later,\nbindings survive reloads.\nIf executionContextId is specified, adds binding only on global object of\ngiven execution context.\nBinding function takes exactly one argument, this argument should be string,\nin case of any other input, function throws an exception.\nEach binding function call produces Runtime.bindingCalled notification."
        },
        {
          "parameters": [{ "type": "string", "name": "name" }],
          "name": "removeBinding",
          "experimental": true,
          "description": "This method does not remove binding function from global object but\nunsubscribes current runtime agent from Runtime.bindingCalled notifications."
        }
      ],
      "domain": "Runtime",
      "description": "Runtime domain exposes JavaScript runtime by means of remote evaluation and mirror objects.\nEvaluation results are returned as mirror object that expose object type, string representation\nand unique identifier that can be used for further object reference. Original objects are\nmaintained in memory unless they are either explicitly released or are released along with the\nother objects in their object group.",
      "types": [
        {
          "type": "string",
          "id": "ScriptId",
          "description": "Unique script identifier."
        },
        {
          "type": "string",
          "id": "RemoteObjectId",
          "description": "Unique object identifier."
        },
        {
          "type": "string",
          "id": "UnserializableValue",
          "description": "Primitive value which cannot be JSON-stringified. Includes values `-0`, `NaN`, `Infinity`,\n`-Infinity`, and bigint literals."
        },
        {
          "properties": [
            {
              "enum": [
                "object",
                "function",
                "undefined",
                "string",
                "number",
                "boolean",
                "symbol",
                "bigint",
                "wasm"
              ],
              "type": "string",
              "name": "type",
              "description": "Object type."
            },
            {
              "type": "string",
              "enum": [
                "array",
                "null",
                "node",
                "regexp",
                "date",
                "map",
                "set",
                "weakmap",
                "weakset",
                "iterator",
                "generator",
                "error",
                "proxy",
                "promise",
                "typedarray",
                "arraybuffer",
                "dataview",
                "i32",
                "i64",
                "f32",
                "f64",
                "v128",
                "anyref"
              ],
              "optional": true,
              "name": "subtype",
              "description": "Object subtype hint. Specified for `object` or `wasm` type values only."
            },
            {
              "type": "string",
              "optional": true,
              "name": "className",
              "description": "Object class (constructor) name. Specified for `object` type values only."
            },
            {
              "type": "any",
              "optional": true,
              "name": "value",
              "description": "Remote object value in case of primitive values or JSON values (if it was requested)."
            },
            {
              "$ref": "UnserializableValue",
              "optional": true,
              "name": "unserializableValue",
              "description": "Primitive value which can not be JSON-stringified does not have `value`, but gets this\nproperty."
            },
            {
              "type": "string",
              "optional": true,
              "name": "description",
              "description": "String representation of the object."
            },
            {
              "$ref": "RemoteObjectId",
              "optional": true,
              "name": "objectId",
              "description": "Unique object identifier (for non-primitive values)."
            },
            {
              "$ref": "ObjectPreview",
              "optional": true,
              "name": "preview",
              "experimental": true,
              "description": "Preview containing abbreviated property values. Specified for `object` type values only."
            },
            {
              "optional": true,
              "name": "customPreview",
              "experimental": true,
              "$ref": "CustomPreview"
            }
          ],
          "type": "object",
          "id": "RemoteObject",
          "description": "Mirror object referencing original JavaScript object."
        },
        {
          "type": "object",
          "id": "CustomPreview",
          "experimental": true,
          "properties": [
            {
              "type": "string",
              "name": "header",
              "description": "The JSON-stringified result of formatter.header(object, config) call.\nIt contains json ML array that represents RemoteObject."
            },
            {
              "$ref": "RemoteObjectId",
              "optional": true,
              "name": "bodyGetterId",
              "description": "If formatter returns true as a result of formatter.hasBody call then bodyGetterId will\ncontain RemoteObjectId for the function that returns result of formatter.body(object, config) call.\nThe result value is json ML array."
            }
          ]
        },
        {
          "properties": [
            {
              "enum": [
                "object",
                "function",
                "undefined",
                "string",
                "number",
                "boolean",
                "symbol",
                "bigint"
              ],
              "type": "string",
              "name": "type",
              "description": "Object type."
            },
            {
              "type": "string",
              "enum": [
                "array",
                "null",
                "node",
                "regexp",
                "date",
                "map",
                "set",
                "weakmap",
                "weakset",
                "iterator",
                "generator",
                "error"
              ],
              "optional": true,
              "name": "subtype",
              "description": "Object subtype hint. Specified for `object` type values only."
            },
            {
              "type": "string",
              "optional": true,
              "name": "description",
              "description": "String representation of the object."
            },
            {
              "type": "boolean",
              "name": "overflow",
              "description": "True iff some of the properties or entries of the original object did not fit."
            },
            {
              "items": { "$ref": "PropertyPreview" },
              "type": "array",
              "name": "properties",
              "description": "List of the properties."
            },
            {
              "type": "array",
              "items": { "$ref": "EntryPreview" },
              "optional": true,
              "name": "entries",
              "description": "List of the entries. Specified for `map` and `set` subtype values only."
            }
          ],
          "type": "object",
          "id": "ObjectPreview",
          "experimental": true,
          "description": "Object containing abbreviated remote object value."
        },
        {
          "type": "object",
          "id": "PropertyPreview",
          "experimental": true,
          "properties": [
            {
              "type": "string",
              "name": "name",
              "description": "Property name."
            },
            {
              "enum": [
                "object",
                "function",
                "undefined",
                "string",
                "number",
                "boolean",
                "symbol",
                "accessor",
                "bigint"
              ],
              "type": "string",
              "name": "type",
              "description": "Object type. Accessor means that the property itself is an accessor property."
            },
            {
              "type": "string",
              "optional": true,
              "name": "value",
              "description": "User-friendly property value string."
            },
            {
              "$ref": "ObjectPreview",
              "optional": true,
              "name": "valuePreview",
              "description": "Nested value preview."
            },
            {
              "type": "string",
              "enum": [
                "array",
                "null",
                "node",
                "regexp",
                "date",
                "map",
                "set",
                "weakmap",
                "weakset",
                "iterator",
                "generator",
                "error"
              ],
              "optional": true,
              "name": "subtype",
              "description": "Object subtype hint. Specified for `object` type values only."
            }
          ]
        },
        {
          "type": "object",
          "id": "EntryPreview",
          "experimental": true,
          "properties": [
            {
              "$ref": "ObjectPreview",
              "optional": true,
              "name": "key",
              "description": "Preview of the key. Specified for map-like collection entries."
            },
            {
              "$ref": "ObjectPreview",
              "name": "value",
              "description": "Preview of the value."
            }
          ]
        },
        {
          "properties": [
            {
              "type": "string",
              "name": "name",
              "description": "Property name or symbol description."
            },
            {
              "$ref": "RemoteObject",
              "optional": true,
              "name": "value",
              "description": "The value associated with the property."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "writable",
              "description": "True if the value associated with the property may be changed (data descriptors only)."
            },
            {
              "$ref": "RemoteObject",
              "optional": true,
              "name": "get",
              "description": "A function which serves as a getter for the property, or `undefined` if there is no getter\n(accessor descriptors only)."
            },
            {
              "$ref": "RemoteObject",
              "optional": true,
              "name": "set",
              "description": "A function which serves as a setter for the property, or `undefined` if there is no setter\n(accessor descriptors only)."
            },
            {
              "type": "boolean",
              "name": "configurable",
              "description": "True if the type of this property descriptor may be changed and if the property may be\ndeleted from the corresponding object."
            },
            {
              "type": "boolean",
              "name": "enumerable",
              "description": "True if this property shows up during enumeration of the properties on the corresponding\nobject."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "wasThrown",
              "description": "True if the result was thrown during the evaluation."
            },
            {
              "type": "boolean",
              "optional": true,
              "name": "isOwn",
              "description": "True if the property is owned for the object."
            },
            {
              "$ref": "RemoteObject",
              "optional": true,
              "name": "symbol",
              "description": "Property symbol object, if the property is of the `symbol` type."
            }
          ],
          "type": "object",
          "id": "PropertyDescriptor",
          "description": "Object property descriptor."
        },
        {
          "properties": [
            {
              "type": "string",
              "name": "name",
              "description": "Conventional property name."
            },
            {
              "$ref": "RemoteObject",
              "optional": true,
              "name": "value",
              "description": "The value associated with the property."
            }
          ],
          "type": "object",
          "id": "InternalPropertyDescriptor",
          "description": "Object internal property descriptor. This property isn't normally visible in JavaScript code."
        },
        {
          "properties": [
            {
              "type": "string",
              "name": "name",
              "description": "Private property name."
            },
            {
              "$ref": "RemoteObject",
              "optional": true,
              "name": "value",
              "description": "The value associated with the private property."
            },
            {
              "$ref": "RemoteObject",
              "optional": true,
              "name": "get",
              "description": "A function which serves as a getter for the private property,\nor `undefined` if there is no getter (accessor descriptors only)."
            },
            {
              "$ref": "RemoteObject",
              "optional": true,
              "name": "set",
              "description": "A function which serves as a setter for the private property,\nor `undefined` if there is no setter (accessor descriptors only)."
            }
          ],
          "type": "object",
          "id": "PrivatePropertyDescriptor",
          "experimental": true,
          "description": "Object private field descriptor."
        },
        {
          "properties": [
            {
              "type": "any",
              "optional": true,
              "name": "value",
              "description": "Primitive value or serializable javascript object."
            },
            {
              "$ref": "UnserializableValue",
              "optional": true,
              "name": "unserializableValue",
              "description": "Primitive value which can not be JSON-stringified."
            },
            {
              "$ref": "RemoteObjectId",
              "optional": true,
              "name": "objectId",
              "description": "Remote object handle."
            }
          ],
          "type": "object",
          "id": "CallArgument",
          "description": "Represents function call argument. Either remote object id `objectId`, primitive `value`,\nunserializable primitive value or neither of (for undefined) them should be specified."
        },
        {
          "type": "integer",
          "id": "ExecutionContextId",
          "description": "Id of an execution context."
        },
        {
          "properties": [
            {
              "$ref": "ExecutionContextId",
              "name": "id",
              "description": "Unique id of the execution context. It can be used to specify in which execution context\nscript evaluation should be performed."
            },
            {
              "type": "string",
              "name": "origin",
              "description": "Execution context origin."
            },
            {
              "type": "string",
              "name": "name",
              "description": "Human readable name describing given context."
            },
            {
              "type": "object",
              "optional": true,
              "name": "auxData",
              "description": "Embedder-specific auxiliary data."
            }
          ],
          "type": "object",
          "id": "ExecutionContextDescription",
          "description": "Description of an isolated world."
        },
        {
          "properties": [
            {
              "type": "integer",
              "name": "exceptionId",
              "description": "Exception id."
            },
            {
              "type": "string",
              "name": "text",
              "description": "Exception text, which should be used together with exception object when available."
            },
            {
              "type": "integer",
              "name": "lineNumber",
              "description": "Line number of the exception location (0-based)."
            },
            {
              "type": "integer",
              "name": "columnNumber",
              "description": "Column number of the exception location (0-based)."
            },
            {
              "$ref": "ScriptId",
              "optional": true,
              "name": "scriptId",
              "description": "Script ID of the exception location."
            },
            {
              "type": "string",
              "optional": true,
              "name": "url",
              "description": "URL of the exception location, to be used when the script was not reported."
            },
            {
              "$ref": "StackTrace",
              "optional": true,
              "name": "stackTrace",
              "description": "JavaScript stack trace if available."
            },
            {
              "$ref": "RemoteObject",
              "optional": true,
              "name": "exception",
              "description": "Exception object if available."
            },
            {
              "$ref": "ExecutionContextId",
              "optional": true,
              "name": "executionContextId",
              "description": "Identifier of the context where exception happened."
            }
          ],
          "type": "object",
          "id": "ExceptionDetails",
          "description": "Detailed information about exception (or error) that was thrown during script compilation or\nexecution."
        },
        {
          "type": "number",
          "id": "Timestamp",
          "description": "Number of milliseconds since epoch."
        },
        {
          "type": "number",
          "id": "TimeDelta",
          "description": "Number of milliseconds."
        },
        {
          "properties": [
            {
              "type": "string",
              "name": "functionName",
              "description": "JavaScript function name."
            },
            {
              "$ref": "ScriptId",
              "name": "scriptId",
              "description": "JavaScript script id."
            },
            {
              "type": "string",
              "name": "url",
              "description": "JavaScript script name or url."
            },
            {
              "type": "integer",
              "name": "lineNumber",
              "description": "JavaScript script line number (0-based)."
            },
            {
              "type": "integer",
              "name": "columnNumber",
              "description": "JavaScript script column number (0-based)."
            }
          ],
          "type": "object",
          "id": "CallFrame",
          "description": "Stack entry for runtime errors and assertions."
        },
        {
          "properties": [
            {
              "type": "string",
              "optional": true,
              "name": "description",
              "description": "String label of this stack trace. For async traces this may be a name of the function that\ninitiated the async call."
            },
            {
              "items": { "$ref": "CallFrame" },
              "type": "array",
              "name": "callFrames",
              "description": "JavaScript function name."
            },
            {
              "$ref": "StackTrace",
              "optional": true,
              "name": "parent",
              "description": "Asynchronous JavaScript stack trace that preceded this stack, if available."
            },
            {
              "$ref": "StackTraceId",
              "optional": true,
              "name": "parentId",
              "experimental": true,
              "description": "Asynchronous JavaScript stack trace that preceded this stack, if available."
            }
          ],
          "type": "object",
          "id": "StackTrace",
          "description": "Call frames for assertions or error messages."
        },
        {
          "type": "string",
          "id": "UniqueDebuggerId",
          "experimental": true,
          "description": "Unique identifier of current debugger."
        },
        {
          "properties": [
            { "type": "string", "name": "id" },
            {
              "optional": true,
              "name": "debuggerId",
              "$ref": "UniqueDebuggerId"
            }
          ],
          "type": "object",
          "id": "StackTraceId",
          "experimental": true,
          "description": "If `debuggerId` is set stack trace comes from another debugger and can be resolved there. This\nallows to track cross-debugger calls. See `Runtime.StackTrace` and `Debugger.paused` for usages."
        }
      ],
      "events": [
        {
          "parameters": [
            { "type": "string", "name": "name" },
            { "type": "string", "name": "payload" },
            {
              "$ref": "ExecutionContextId",
              "name": "executionContextId",
              "description": "Identifier of the context where the call was made."
            }
          ],
          "name": "bindingCalled",
          "experimental": true,
          "description": "Notification is issued every time when binding is called."
        },
        {
          "name": "consoleAPICalled",
          "parameters": [
            {
              "enum": [
                "log",
                "debug",
                "info",
                "error",
                "warning",
                "dir",
                "dirxml",
                "table",
                "trace",
                "clear",
                "startGroup",
                "startGroupCollapsed",
                "endGroup",
                "assert",
                "profile",
                "profileEnd",
                "count",
                "timeEnd"
              ],
              "type": "string",
              "name": "type",
              "description": "Type of the call."
            },
            {
              "items": { "$ref": "RemoteObject" },
              "type": "array",
              "name": "args",
              "description": "Call arguments."
            },
            {
              "$ref": "ExecutionContextId",
              "name": "executionContextId",
              "description": "Identifier of the context where the call was made."
            },
            {
              "$ref": "Timestamp",
              "name": "timestamp",
              "description": "Call timestamp."
            },
            {
              "$ref": "StackTrace",
              "optional": true,
              "name": "stackTrace",
              "description": "Stack trace captured when the call was made. The async stack chain is automatically reported for\nthe following call types: `assert`, `error`, `trace`, `warning`. For other types the async call\nchain can be retrieved using `Debugger.getStackTrace` and `stackTrace.parentId` field."
            },
            {
              "type": "string",
              "optional": true,
              "name": "context",
              "experimental": true,
              "description": "Console context descriptor for calls on non-default console context (not console.*):\n'anonymous#unique-logger-id' for call on unnamed context, 'name#unique-logger-id' for call\non named context."
            }
          ],
          "description": "Issued when console API was called."
        },
        {
          "name": "exceptionRevoked",
          "parameters": [
            {
              "type": "string",
              "name": "reason",
              "description": "Reason describing why exception was revoked."
            },
            {
              "type": "integer",
              "name": "exceptionId",
              "description": "The id of revoked exception, as reported in `exceptionThrown`."
            }
          ],
          "description": "Issued when unhandled exception was revoked."
        },
        {
          "name": "exceptionThrown",
          "parameters": [
            {
              "$ref": "Timestamp",
              "name": "timestamp",
              "description": "Timestamp of the exception."
            },
            { "name": "exceptionDetails", "$ref": "ExceptionDetails" }
          ],
          "description": "Issued when exception was thrown and unhandled."
        },
        {
          "name": "executionContextCreated",
          "parameters": [
            {
              "$ref": "ExecutionContextDescription",
              "name": "context",
              "description": "A newly created execution context."
            }
          ],
          "description": "Issued when new execution context is created."
        },
        {
          "name": "executionContextDestroyed",
          "parameters": [
            {
              "$ref": "ExecutionContextId",
              "name": "executionContextId",
              "description": "Id of the destroyed context"
            }
          ],
          "description": "Issued when execution context is destroyed."
        },
        {
          "name": "executionContextsCleared",
          "description": "Issued when all executionContexts were cleared in browser"
        },
        {
          "name": "inspectRequested",
          "parameters": [
            { "name": "object", "$ref": "RemoteObject" },
            { "type": "object", "name": "hints" }
          ],
          "description": "Issued when object should be inspected (for example, as a result of inspect() command line API\ncall)."
        }
      ]
    },
    {
      "deprecated": true,
      "domain": "Schema",
      "commands": [
        {
          "returns": [
            {
              "items": { "$ref": "Domain" },
              "type": "array",
              "name": "domains",
              "description": "List of supported domains."
            }
          ],
          "name": "getDomains",
          "description": "Returns supported domains."
        }
      ],
      "description": "This domain is deprecated.",
      "types": [
        {
          "properties": [
            { "type": "string", "name": "name", "description": "Domain name." },
            {
              "type": "string",
              "name": "version",
              "description": "Domain version."
            }
          ],
          "type": "object",
          "id": "Domain",
          "description": "Description of the protocol domain."
        }
      ]
    },
    {
      "experimental": true,
      "commands": [
        {
          "returns": [
            {
              "items": { "type": "string" },
              "type": "array",
              "name": "categories",
              "description": "A list of supported tracing categories."
            }
          ],
          "name": "getCategories",
          "description": "Gets supported tracing categories."
        },
        {
          "name": "start",
          "parameters": [{ "name": "traceConfig", "$ref": "TraceConfig" }],
          "description": "Start trace events collection."
        },
        {
          "name": "stop",
          "description": "Stop trace events collection. Remaining collected events will be sent as a sequence of\ndataCollected events followed by tracingComplete event."
        }
      ],
      "domain": "NodeTracing",
      "types": [
        {
          "type": "object",
          "id": "TraceConfig",
          "properties": [
            {
              "optional": true,
              "enum": [
                "recordUntilFull",
                "recordContinuously",
                "recordAsMuchAsPossible"
              ],
              "type": "string",
              "name": "recordMode",
              "description": "Controls how the trace buffer stores data."
            },
            {
              "items": { "type": "string" },
              "type": "array",
              "name": "includedCategories",
              "description": "Included category filters."
            }
          ]
        }
      ],
      "events": [
        {
          "name": "dataCollected",
          "parameters": [
            { "items": { "type": "object" }, "type": "array", "name": "value" }
          ],
          "description": "Contains an bucket of collected trace events."
        },
        {
          "name": "tracingComplete",
          "description": "Signals that tracing is stopped and there is no trace buffers pending flush, all data were\ndelivered via dataCollected events."
        }
      ]
    },
    {
      "commands": [
        {
          "name": "sendMessageToWorker",
          "parameters": [
            { "type": "string", "name": "message" },
            {
              "description": "Identifier of the session.",
              "name": "sessionId",
              "$ref": "SessionID"
            }
          ],
          "description": "Sends protocol message over session with given id."
        },
        {
          "name": "enable",
          "parameters": [
            {
              "type": "boolean",
              "name": "waitForDebuggerOnStart",
              "description": "Whether to new workers should be paused until the frontend sends `Runtime.runIfWaitingForDebugger`\nmessage to run them."
            }
          ],
          "description": "Instructs the inspector to attach to running workers. Will also attach to new workers\nas they start"
        },
        {
          "name": "disable",
          "description": "Detaches from all running workers and disables attaching to new workers as they are started."
        },
        {
          "name": "detach",
          "parameters": [{ "name": "sessionId", "$ref": "SessionID" }],
          "description": "Detached from the worker with given sessionId."
        }
      ],
      "description": "Support for sending messages to Node worker Inspector instances.",
      "domain": "NodeWorker",
      "experimental": true,
      "events": [
        {
          "name": "attachedToWorker",
          "parameters": [
            {
              "description": "Identifier assigned to the session used to send/receive messages.",
              "name": "sessionId",
              "$ref": "SessionID"
            },
            { "name": "workerInfo", "$ref": "WorkerInfo" },
            { "type": "boolean", "name": "waitingForDebugger" }
          ],
          "description": "Issued when attached to a worker."
        },
        {
          "name": "detachedFromWorker",
          "parameters": [
            {
              "description": "Detached session identifier.",
              "name": "sessionId",
              "$ref": "SessionID"
            }
          ],
          "description": "Issued when detached from the worker."
        },
        {
          "name": "receivedMessageFromWorker",
          "parameters": [
            {
              "description": "Identifier of a session which sends a message.",
              "name": "sessionId",
              "$ref": "SessionID"
            },
            { "type": "string", "name": "message" }
          ],
          "description": "Notifies about a new protocol message received from the session\n(session ID is provided in attachedToWorker notification)."
        }
      ],
      "types": [
        { "type": "string", "id": "WorkerID" },
        {
          "type": "string",
          "id": "SessionID",
          "description": "Unique identifier of attached debugging session."
        },
        {
          "type": "object",
          "id": "WorkerInfo",
          "properties": [
            { "name": "workerId", "$ref": "WorkerID" },
            { "type": "string", "name": "type" },
            { "type": "string", "name": "title" },
            { "type": "string", "name": "url" }
          ]
        }
      ]
    },
    {
      "events": [
        {
          "name": "waitingForDisconnect",
          "description": "This event is fired instead of `Runtime.executionContextDestroyed` when\nenabled.\nIt is fired when the Node process finished all code execution and is\nwaiting for all frontends to disconnect."
        }
      ],
      "commands": [
        {
          "name": "notifyWhenWaitingForDisconnect",
          "parameters": [{ "type": "boolean", "name": "enabled" }],
          "description": "Enable the `NodeRuntime.waitingForDisconnect`."
        }
      ],
      "domain": "NodeRuntime",
      "experimental": true,
      "description": "Support for inspecting node process state."
    }
  ],
  "version": { "major": "1", "minor": "0" }
}
