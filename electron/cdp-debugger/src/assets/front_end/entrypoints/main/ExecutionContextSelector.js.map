{
  "version": 3,
  "sources": ["../../../../../../front_end/entrypoints/main/ExecutionContextSelector.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Common from '../../core/common/common.js';\nimport type * as UI from '../../ui/legacy/legacy.js';\n\nexport class ExecutionContextSelector implements SDK.TargetManager.SDKModelObserver<SDK.RuntimeModel.RuntimeModel> {\n  #targetManager: SDK.TargetManager.TargetManager;\n  #context: UI.Context.Context;\n  #lastSelectedContextId?: string;\n  #ignoreContextChanged?: boolean;\n\n  constructor(targetManager: SDK.TargetManager.TargetManager, context: UI.Context.Context) {\n    context.addFlavorChangeListener(SDK.RuntimeModel.ExecutionContext, this.#executionContextChanged, this);\n    context.addFlavorChangeListener(SDK.Target.Target, this.#targetChanged, this);\n\n    targetManager.addModelListener(\n        SDK.RuntimeModel.RuntimeModel, SDK.RuntimeModel.Events.ExecutionContextCreated, this.#onExecutionContextCreated,\n        this);\n    targetManager.addModelListener(\n        SDK.RuntimeModel.RuntimeModel, SDK.RuntimeModel.Events.ExecutionContextDestroyed,\n        this.#onExecutionContextDestroyed, this);\n    targetManager.addModelListener(\n        SDK.RuntimeModel.RuntimeModel, SDK.RuntimeModel.Events.ExecutionContextOrderChanged,\n        this.#onExecutionContextOrderChanged, this);\n    this.#targetManager = targetManager;\n    this.#context = context;\n    targetManager.observeModels(SDK.RuntimeModel.RuntimeModel, this);\n  }\n\n  modelAdded(runtimeModel: SDK.RuntimeModel.RuntimeModel): void {\n    // Defer selecting default target since we need all clients to get their\n    // targetAdded notifications first.\n    queueMicrotask(deferred.bind(this));\n\n    function deferred(this: ExecutionContextSelector): void {\n      // We always want the second context for the service worker targets.\n      if (!this.#context.flavor(SDK.Target.Target)) {\n        this.#context.setFlavor(SDK.Target.Target, runtimeModel.target());\n      }\n    }\n  }\n\n  modelRemoved(runtimeModel: SDK.RuntimeModel.RuntimeModel): void {\n    const currentExecutionContext = this.#context.flavor(SDK.RuntimeModel.ExecutionContext);\n    if (currentExecutionContext && currentExecutionContext.runtimeModel === runtimeModel) {\n      this.#currentExecutionContextGone();\n    }\n\n    const models = this.#targetManager.models(SDK.RuntimeModel.RuntimeModel);\n    if (this.#context.flavor(SDK.Target.Target) === runtimeModel.target() && models.length) {\n      this.#context.setFlavor(SDK.Target.Target, models[0].target());\n    }\n  }\n\n  #executionContextChanged({\n    data: newContext,\n  }: Common.EventTarget.EventTargetEvent<SDK.RuntimeModel.ExecutionContext|null>): void {\n    if (newContext) {\n      this.#context.setFlavor(SDK.Target.Target, newContext.target());\n      if (!this.#ignoreContextChanged) {\n        this.#lastSelectedContextId = this.#contextPersistentId(newContext);\n      }\n    }\n  }\n\n  #contextPersistentId(executionContext: SDK.RuntimeModel.ExecutionContext): string {\n    return executionContext.isDefault ? executionContext.target().name() + ':' + executionContext.frameId : '';\n  }\n\n  #targetChanged({data: newTarget}: Common.EventTarget.EventTargetEvent<SDK.Target.Target|null>): void {\n    const currentContext = this.#context.flavor(SDK.RuntimeModel.ExecutionContext);\n\n    if (!newTarget || (currentContext && currentContext.target() === newTarget)) {\n      return;\n    }\n\n    const runtimeModel = newTarget.model(SDK.RuntimeModel.RuntimeModel);\n    const executionContexts = runtimeModel ? runtimeModel.executionContexts() : [];\n    if (!executionContexts.length) {\n      return;\n    }\n\n    let newContext: SDK.RuntimeModel.ExecutionContext|null = null;\n    for (let i = 0; i < executionContexts.length && !newContext; ++i) {\n      if (this.#shouldSwitchToContext(executionContexts[i])) {\n        newContext = executionContexts[i];\n      }\n    }\n    for (let i = 0; i < executionContexts.length && !newContext; ++i) {\n      if (this.#isDefaultContext(executionContexts[i])) {\n        newContext = executionContexts[i];\n      }\n    }\n    this.#ignoreContextChanged = true;\n    this.#context.setFlavor(SDK.RuntimeModel.ExecutionContext, newContext || executionContexts[0]);\n    this.#ignoreContextChanged = false;\n  }\n\n  #shouldSwitchToContext(executionContext: SDK.RuntimeModel.ExecutionContext): boolean {\n    if (this.#lastSelectedContextId && this.#lastSelectedContextId === this.#contextPersistentId(executionContext)) {\n      return true;\n    }\n    return !this.#lastSelectedContextId && this.#isDefaultContext(executionContext);\n  }\n\n  #isDefaultContext(executionContext: SDK.RuntimeModel.ExecutionContext): boolean {\n    if (!executionContext.isDefault || !executionContext.frameId) {\n      return false;\n    }\n    if (executionContext.target().parentTarget()) {\n      return false;\n    }\n    const resourceTreeModel = executionContext.target().model(SDK.ResourceTreeModel.ResourceTreeModel);\n    const frame = resourceTreeModel && resourceTreeModel.frameForId(executionContext.frameId);\n    return Boolean(frame?.isTopFrame());\n  }\n\n  #onExecutionContextCreated(event: Common.EventTarget.EventTargetEvent<SDK.RuntimeModel.ExecutionContext>): void {\n    this.#switchContextIfNecessary(event.data);\n  }\n\n  #onExecutionContextDestroyed(event: Common.EventTarget.EventTargetEvent<SDK.RuntimeModel.ExecutionContext>): void {\n    const executionContext = event.data;\n    if (this.#context.flavor(SDK.RuntimeModel.ExecutionContext) === executionContext) {\n      this.#currentExecutionContextGone();\n    }\n  }\n\n  #onExecutionContextOrderChanged(event: Common.EventTarget.EventTargetEvent<SDK.RuntimeModel.RuntimeModel>): void {\n    const runtimeModel = event.data;\n    const executionContexts = runtimeModel.executionContexts();\n    for (let i = 0; i < executionContexts.length; i++) {\n      if (this.#switchContextIfNecessary(executionContexts[i])) {\n        break;\n      }\n    }\n  }\n\n  #switchContextIfNecessary(executionContext: SDK.RuntimeModel.ExecutionContext): boolean {\n    if (!this.#context.flavor(SDK.RuntimeModel.ExecutionContext) || this.#shouldSwitchToContext(executionContext)) {\n      this.#ignoreContextChanged = true;\n      this.#context.setFlavor(SDK.RuntimeModel.ExecutionContext, executionContext);\n      this.#ignoreContextChanged = false;\n      return true;\n    }\n    return false;\n  }\n\n  #currentExecutionContextGone(): void {\n    const runtimeModels = this.#targetManager.models(SDK.RuntimeModel.RuntimeModel);\n    let newContext: SDK.RuntimeModel.ExecutionContext|null = null;\n    for (let i = 0; i < runtimeModels.length && !newContext; ++i) {\n      const executionContexts = runtimeModels[i].executionContexts();\n      for (const executionContext of executionContexts) {\n        if (this.#isDefaultContext(executionContext)) {\n          newContext = executionContext;\n          break;\n        }\n      }\n    }\n    if (!newContext) {\n      for (let i = 0; i < runtimeModels.length && !newContext; ++i) {\n        const executionContexts = runtimeModels[i].executionContexts();\n        if (executionContexts.length) {\n          newContext = executionContexts[0];\n          break;\n        }\n      }\n    }\n    this.#ignoreContextChanged = true;\n    this.#context.setFlavor(SDK.RuntimeModel.ExecutionContext, newContext);\n    this.#ignoreContextChanged = false;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
