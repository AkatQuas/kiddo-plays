{
  "version": 3,
  "sources": ["../../../../../../front_end/entrypoints/wasmparser_worker/WasmParserWorker.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2020 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as WasmParser from '../../third_party/wasmparser/wasmparser.js';\n\nexport function dissambleWASM(\n    params: {\n      content: string,\n    },\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    postMessage: (arg0: any) => void): void {\n  try {\n    const dataBuffer = Common.Base64.decode(params.content);\n\n    let parser: WasmParser.WasmParser.BinaryReader = new WasmParser.WasmParser.BinaryReader();\n    parser.setData(dataBuffer, 0, dataBuffer.byteLength);\n    const nameGenerator = new WasmParser.WasmDis.DevToolsNameGenerator();\n    nameGenerator.read(parser);\n\n    const data = new Uint8Array(dataBuffer);\n    parser = new WasmParser.WasmParser.BinaryReader();\n    const dis = new WasmParser.WasmDis.WasmDisassembler();\n    dis.addOffsets = true;\n    dis.exportMetadata = nameGenerator.getExportMetadata();\n    dis.nameResolver = nameGenerator.getNameResolver();\n    const lines = [];\n    const offsets = [];\n    const functionBodyOffsets = [];\n    let chunkSize: number = 128 * 1024;\n    let buffer: Uint8Array = new Uint8Array(chunkSize);\n    let pendingSize = 0;\n    let offsetInModule = 0;\n    for (let i = 0; i < data.length;) {\n      if (chunkSize > data.length - i) {\n        chunkSize = data.length - i;\n      }\n      const bufferSize = pendingSize + chunkSize;\n      if (buffer.byteLength < bufferSize) {\n        const newBuffer = new Uint8Array(bufferSize);\n        newBuffer.set(buffer);\n        buffer = newBuffer;\n      }\n      while (pendingSize < bufferSize) {\n        buffer[pendingSize++] = data[i++];\n      }\n      parser.setData(buffer.buffer, 0, bufferSize, i === data.length);\n\n      // The disassemble will attemp to fetch the data as much as possible.\n      const finished = dis.disassembleChunk(parser, offsetInModule);\n\n      const result = (dis.getResult() as {\n        lines: Array<string>,\n        offsets: Array<number>,\n        functionBodyOffsets: Array<{\n          start: number,\n          end: number,\n        }>,\n      });\n\n      for (const line of result.lines) {\n        lines.push(line);\n      }\n      for (const offset of result.offsets) {\n        offsets.push(offset);\n      }\n      for (const functionBodyOffset of result.functionBodyOffsets) {\n        functionBodyOffsets.push(functionBodyOffset);\n      }\n\n      if (finished) {\n        break;\n      }\n\n      if (parser.position === 0) {\n        // Parser did not consume anything, needs more data.\n        pendingSize = bufferSize;\n        continue;\n      }\n\n      // Shift the data to the beginning of the buffer.\n      const pending = parser.data.subarray(parser.position, parser.length);\n      pendingSize = pending.length;\n      buffer.set(pending);\n      offsetInModule += parser.position;\n\n      const percentage = Math.floor((offsetInModule / data.length) * 100);\n      postMessage({event: 'progress', params: {percentage}});\n    }\n\n    postMessage({event: 'progress', params: {percentage: 100}});\n\n    postMessage({method: 'disassemble', result: {lines, offsets, functionBodyOffsets}});\n  } catch (error) {\n    postMessage({method: 'disassemble', error});\n  }\n}\n"],
  "mappings": "AA8BA;AACA;AAEO,8BACH,QAKA,aAAwC;AAC1C,MAAI;AACF,UAAM,aAAa,OAAO,OAAO,OAAO,OAAO;AAE/C,QAAI,SAA6C,IAAI,WAAW,WAAW;AAC3E,WAAO,QAAQ,YAAY,GAAG,WAAW;AACzC,UAAM,gBAAgB,IAAI,WAAW,QAAQ;AAC7C,kBAAc,KAAK;AAEnB,UAAM,OAAO,IAAI,WAAW;AAC5B,aAAS,IAAI,WAAW,WAAW;AACnC,UAAM,MAAM,IAAI,WAAW,QAAQ;AACnC,QAAI,aAAa;AACjB,QAAI,iBAAiB,cAAc;AACnC,QAAI,eAAe,cAAc;AACjC,UAAM,QAAQ;AACd,UAAM,UAAU;AAChB,UAAM,sBAAsB;AAC5B,QAAI,YAAoB,MAAM;AAC9B,QAAI,SAAqB,IAAI,WAAW;AACxC,QAAI,cAAc;AAClB,QAAI,iBAAiB;AACrB,aAAS,IAAI,GAAG,IAAI,KAAK,UAAS;AAChC,UAAI,YAAY,KAAK,SAAS,GAAG;AAC/B,oBAAY,KAAK,SAAS;AAAA;AAE5B,YAAM,aAAa,cAAc;AACjC,UAAI,OAAO,aAAa,YAAY;AAClC,cAAM,YAAY,IAAI,WAAW;AACjC,kBAAU,IAAI;AACd,iBAAS;AAAA;AAEX,aAAO,cAAc,YAAY;AAC/B,eAAO,iBAAiB,KAAK;AAAA;AAE/B,aAAO,QAAQ,OAAO,QAAQ,GAAG,YAAY,MAAM,KAAK;AAGxD,YAAM,WAAW,IAAI,iBAAiB,QAAQ;AAE9C,YAAM,SAAU,IAAI;AASpB,iBAAW,QAAQ,OAAO,OAAO;AAC/B,cAAM,KAAK;AAAA;AAEb,iBAAW,UAAU,OAAO,SAAS;AACnC,gBAAQ,KAAK;AAAA;AAEf,iBAAW,sBAAsB,OAAO,qBAAqB;AAC3D,4BAAoB,KAAK;AAAA;AAG3B,UAAI,UAAU;AACZ;AAAA;AAGF,UAAI,OAAO,aAAa,GAAG;AAEzB,sBAAc;AACd;AAAA;AAIF,YAAM,UAAU,OAAO,KAAK,SAAS,OAAO,UAAU,OAAO;AAC7D,oBAAc,QAAQ;AACtB,aAAO,IAAI;AACX,wBAAkB,OAAO;AAEzB,YAAM,aAAa,KAAK,MAAO,iBAAiB,KAAK,SAAU;AAC/D,kBAAY,EAAC,OAAO,YAAY,QAAQ,EAAC;AAAA;AAG3C,gBAAY,EAAC,OAAO,YAAY,QAAQ,EAAC,YAAY;AAErD,gBAAY,EAAC,QAAQ,eAAe,QAAQ,EAAC,OAAO,SAAS;AAAA,WACtD,OAAP;AACA,gBAAY,EAAC,QAAQ,eAAe;AAAA;AAAA;",
  "names": []
}
