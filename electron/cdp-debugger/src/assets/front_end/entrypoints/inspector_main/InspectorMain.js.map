{
  "version": 3,
  "sources": ["../../../../../../front_end/entrypoints/inspector_main/InspectorMain.ts"],
  "sourcesContent": ["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as MobileThrottling from '../../panels/mobile_throttling/mobile_throttling.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport nodeIconStyles from './nodeIcon.css.js';\n\nimport type * as Protocol from '../../generated/protocol.js';\n\nconst UIStrings = {\n  /**\n  * @description Text that refers to the main target. The main target is the primary webpage that\n  * DevTools is connected to. This text is used in various places in the UI as a label/name to inform\n  * the user which target/webpage they are currently connected to, as DevTools may connect to multiple\n  * targets at the same time in some scenarios.\n  */\n  main: 'Main',\n  /**\n  * @description A warning shown to the user when JavaScript is disabled on the webpage that\n  * DevTools is connected to.\n  */\n  javascriptIsDisabled: 'JavaScript is disabled',\n  /**\n  * @description A message that prompts the user to open devtools for a specific environment (Node.js)\n  */\n  openDedicatedTools: 'Open dedicated DevTools for `Node.js`',\n};\nconst str_ = i18n.i18n.registerUIStrings('entrypoints/inspector_main/InspectorMain.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet inspectorMainImplInstance: InspectorMainImpl;\n\nexport class InspectorMainImpl implements Common.Runnable.Runnable {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): InspectorMainImpl {\n    const {forceNew} = opts;\n    if (!inspectorMainImplInstance || forceNew) {\n      inspectorMainImplInstance = new InspectorMainImpl();\n    }\n\n    return inspectorMainImplInstance;\n  }\n\n  async run(): Promise<void> {\n    let firstCall = true;\n    await SDK.Connections.initMainConnection(async () => {\n      const type = Root.Runtime.Runtime.queryParam('v8only') ? SDK.Target.Type.Node : SDK.Target.Type.Frame;\n      const waitForDebuggerInPage =\n          type === SDK.Target.Type.Frame && Root.Runtime.Runtime.queryParam('panel') === 'sources';\n      const target = SDK.TargetManager.TargetManager.instance().createTarget(\n          'main', i18nString(UIStrings.main), type, null, undefined, waitForDebuggerInPage);\n\n      // Only resume target during the first connection,\n      // subsequent connections are due to connection hand-over,\n      // there is no need to pause in debugger.\n      if (!firstCall) {\n        return;\n      }\n      firstCall = false;\n\n      if (waitForDebuggerInPage) {\n        const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n        if (debuggerModel) {\n          if (!debuggerModel.isReadyToPause()) {\n            await debuggerModel.once(SDK.DebuggerModel.Events.DebuggerIsReadyToPause);\n          }\n          debuggerModel.pause();\n        }\n      }\n\n      void target.runtimeAgent().invoke_runIfWaitingForDebugger();\n    }, Components.TargetDetachedDialog.TargetDetachedDialog.webSocketConnectionLost);\n\n    new SourcesPanelIndicator();\n    new BackendSettingsSync();\n    new MobileThrottling.NetworkPanelIndicator.NetworkPanelIndicator();\n\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.ReloadInspectedPage, ({data: hard}) => {\n          SDK.ResourceTreeModel.ResourceTreeModel.reloadAllPages(hard);\n        });\n  }\n}\n\nCommon.Runnable.registerEarlyInitializationRunnable(InspectorMainImpl.instance);\n\nlet reloadActionDelegateInstance: ReloadActionDelegate;\n\nexport class ReloadActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ReloadActionDelegate {\n    const {forceNew} = opts;\n    if (!reloadActionDelegateInstance || forceNew) {\n      reloadActionDelegateInstance = new ReloadActionDelegate();\n    }\n\n    return reloadActionDelegateInstance;\n  }\n\n  handleAction(context: UI.Context.Context, actionId: string): boolean {\n    switch (actionId) {\n      case 'inspector_main.reload':\n        SDK.ResourceTreeModel.ResourceTreeModel.reloadAllPages(false);\n        return true;\n      case 'inspector_main.hard-reload':\n        SDK.ResourceTreeModel.ResourceTreeModel.reloadAllPages(true);\n        return true;\n    }\n    return false;\n  }\n}\n\nlet focusDebuggeeActionDelegateInstance: FocusDebuggeeActionDelegate;\n\nexport class FocusDebuggeeActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): FocusDebuggeeActionDelegate {\n    const {forceNew} = opts;\n    if (!focusDebuggeeActionDelegateInstance || forceNew) {\n      focusDebuggeeActionDelegateInstance = new FocusDebuggeeActionDelegate();\n    }\n\n    return focusDebuggeeActionDelegateInstance;\n  }\n  handleAction(_context: UI.Context.Context, _actionId: string): boolean {\n    const mainTarget = SDK.TargetManager.TargetManager.instance().mainTarget();\n    if (!mainTarget) {\n      return false;\n    }\n    void mainTarget.pageAgent().invoke_bringToFront();\n    return true;\n  }\n}\n\nlet nodeIndicatorInstance: NodeIndicator;\n\nexport class NodeIndicator implements UI.Toolbar.Provider {\n  readonly #element: Element;\n  readonly #button: UI.Toolbar.ToolbarItem;\n  private constructor() {\n    const element = document.createElement('div');\n    const shadowRoot =\n        UI.Utils.createShadowRootWithCoreStyles(element, {cssFile: [nodeIconStyles], delegatesFocus: undefined});\n    this.#element = shadowRoot.createChild('div', 'node-icon');\n    element.addEventListener(\n        'click', () => Host.InspectorFrontendHost.InspectorFrontendHostInstance.openNodeFrontend(), false);\n    this.#button = new UI.Toolbar.ToolbarItem(element);\n    this.#button.setTitle(i18nString(UIStrings.openDedicatedTools));\n    SDK.TargetManager.TargetManager.instance().addEventListener(\n        SDK.TargetManager.Events.AvailableTargetsChanged, event => this.#update(event.data));\n    this.#button.setVisible(false);\n    this.#update([]);\n  }\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): NodeIndicator {\n    const {forceNew} = opts;\n    if (!nodeIndicatorInstance || forceNew) {\n      nodeIndicatorInstance = new NodeIndicator();\n    }\n\n    return nodeIndicatorInstance;\n  }\n\n  #update(targetInfos: Protocol.Target.TargetInfo[]): void {\n    const hasNode = Boolean(targetInfos.find(target => target.type === 'node' && !target.attached));\n    this.#element.classList.toggle('inactive', !hasNode);\n    if (hasNode) {\n      this.#button.setVisible(true);\n    }\n  }\n\n  item(): UI.Toolbar.ToolbarItem|null {\n    return this.#button;\n  }\n}\n\nexport class SourcesPanelIndicator {\n  constructor() {\n    Common.Settings.Settings.instance()\n        .moduleSetting('javaScriptDisabled')\n        .addChangeListener(javaScriptDisabledChanged);\n    javaScriptDisabledChanged();\n\n    function javaScriptDisabledChanged(): void {\n      let icon: UI.Icon.Icon|null = null;\n      const javaScriptDisabled = Common.Settings.Settings.instance().moduleSetting('javaScriptDisabled').get();\n      if (javaScriptDisabled) {\n        icon = UI.Icon.Icon.create('smallicon-warning');\n        UI.Tooltip.Tooltip.install(icon, i18nString(UIStrings.javascriptIsDisabled));\n      }\n      UI.InspectorView.InspectorView.instance().setPanelIcon('sources', icon);\n    }\n  }\n}\n\nexport class BackendSettingsSync implements SDK.TargetManager.Observer {\n  readonly #autoAttachSetting: Common.Settings.Setting<boolean>;\n  readonly #adBlockEnabledSetting: Common.Settings.Setting<boolean>;\n  readonly #emulatePageFocusSetting: Common.Settings.Setting<boolean>;\n\n  constructor() {\n    this.#autoAttachSetting = Common.Settings.Settings.instance().moduleSetting('autoAttachToCreatedPages');\n    this.#autoAttachSetting.addChangeListener(this.#updateAutoAttach, this);\n    this.#updateAutoAttach();\n\n    this.#adBlockEnabledSetting = Common.Settings.Settings.instance().moduleSetting('network.adBlockingEnabled');\n    this.#adBlockEnabledSetting.addChangeListener(this.#update, this);\n\n    this.#emulatePageFocusSetting = Common.Settings.Settings.instance().moduleSetting('emulatePageFocus');\n    this.#emulatePageFocusSetting.addChangeListener(this.#update, this);\n\n    SDK.TargetManager.TargetManager.instance().observeTargets(this);\n  }\n\n  #updateTarget(target: SDK.Target.Target): void {\n    if (target.type() !== SDK.Target.Type.Frame || target.parentTarget()) {\n      return;\n    }\n    void target.pageAgent().invoke_setAdBlockingEnabled({enabled: this.#adBlockEnabledSetting.get()});\n    void target.emulationAgent().invoke_setFocusEmulationEnabled({enabled: this.#emulatePageFocusSetting.get()});\n  }\n\n  #updateAutoAttach(): void {\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.setOpenNewWindowForPopups(this.#autoAttachSetting.get());\n  }\n\n  #update(): void {\n    for (const target of SDK.TargetManager.TargetManager.instance().targets()) {\n      this.#updateTarget(target);\n    }\n  }\n\n  targetAdded(target: SDK.Target.Target): void {\n    this.#updateTarget(target);\n  }\n\n  targetRemoved(_target: SDK.Target.Target): void {\n  }\n}\n\nSDK.ChildTargetManager.ChildTargetManager.install();\n"],
  "mappings": "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",
  "names": []
}
