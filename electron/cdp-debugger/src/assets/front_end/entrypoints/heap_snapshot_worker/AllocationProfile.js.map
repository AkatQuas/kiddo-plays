{
  "version": 3,
  "sources": ["../../../../../../front_end/entrypoints/heap_snapshot_worker/AllocationProfile.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as HeapSnapshotModel from '../../models/heap_snapshot_model/heap_snapshot_model.js';\n\nexport class AllocationProfile {\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  readonly #strings: any;\n  #nextNodeId: number;\n  #functionInfos: FunctionAllocationInfo[];\n  #idToNode: {[x: number]: BottomUpAllocationNode|null};\n  readonly #idToTopDownNode: {[x: number]: TopDownAllocationNode};\n  #collapsedTopNodeIdToFunctionInfo: {[x: number]: FunctionAllocationInfo};\n  #traceTops: HeapSnapshotModel.HeapSnapshotModel.SerializedAllocationNode[]|null;\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(profile: any, liveObjectStats: any) {\n    this.#strings = profile.strings;\n\n    this.#nextNodeId = 1;\n    this.#functionInfos = [];\n\n    this.#idToNode = {};\n\n    this.#idToTopDownNode = {};\n\n    this.#collapsedTopNodeIdToFunctionInfo = {};\n\n    this.#traceTops = null;\n\n    this.#buildFunctionAllocationInfos(profile);\n    this.#buildAllocationTree(profile, liveObjectStats);\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  #buildFunctionAllocationInfos(profile: any): void {\n    const strings = this.#strings;\n\n    const functionInfoFields = profile.snapshot.meta.trace_function_info_fields;\n    const functionNameOffset = functionInfoFields.indexOf('name');\n    const scriptNameOffset = functionInfoFields.indexOf('script_name');\n    const scriptIdOffset = functionInfoFields.indexOf('script_id');\n    const lineOffset = functionInfoFields.indexOf('line');\n    const columnOffset = functionInfoFields.indexOf('column');\n    const functionInfoFieldCount = functionInfoFields.length;\n\n    const rawInfos = profile.trace_function_infos;\n    const infoLength = rawInfos.length;\n    const functionInfos = this.#functionInfos = new Array(infoLength / functionInfoFieldCount);\n    let index = 0;\n    for (let i = 0; i < infoLength; i += functionInfoFieldCount) {\n      functionInfos[index++] = new FunctionAllocationInfo(\n          strings[rawInfos[i + functionNameOffset]], strings[rawInfos[i + scriptNameOffset]],\n          rawInfos[i + scriptIdOffset], rawInfos[i + lineOffset], rawInfos[i + columnOffset]);\n    }\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  #buildAllocationTree(profile: any, liveObjectStats: any): TopDownAllocationNode {\n    const traceTreeRaw = profile.trace_tree;\n    const functionInfos = this.#functionInfos;\n    const idToTopDownNode = this.#idToTopDownNode;\n\n    const traceNodeFields = profile.snapshot.meta.trace_node_fields;\n    const nodeIdOffset = traceNodeFields.indexOf('id');\n    const functionInfoIndexOffset = traceNodeFields.indexOf('function_info_index');\n    const allocationCountOffset = traceNodeFields.indexOf('count');\n    const allocationSizeOffset = traceNodeFields.indexOf('size');\n    const childrenOffset = traceNodeFields.indexOf('children');\n    const nodeFieldCount = traceNodeFields.length;\n\n    function traverseNode(\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        rawNodeArray: any, nodeOffset: any, parent: TopDownAllocationNode|null): TopDownAllocationNode {\n      const functionInfo = functionInfos[rawNodeArray[nodeOffset + functionInfoIndexOffset]];\n      const id = rawNodeArray[nodeOffset + nodeIdOffset];\n      const stats = liveObjectStats[id];\n      const liveCount = stats ? stats.count : 0;\n      const liveSize = stats ? stats.size : 0;\n      const result = new TopDownAllocationNode(\n          id, functionInfo, rawNodeArray[nodeOffset + allocationCountOffset],\n          rawNodeArray[nodeOffset + allocationSizeOffset], liveCount, liveSize, parent);\n      idToTopDownNode[id] = result;\n      functionInfo.addTraceTopNode(result);\n\n      const rawChildren = rawNodeArray[nodeOffset + childrenOffset];\n      for (let i = 0; i < rawChildren.length; i += nodeFieldCount) {\n        result.children.push(traverseNode(rawChildren, i, result));\n      }\n\n      return result;\n    }\n\n    return traverseNode(traceTreeRaw, 0, null);\n  }\n\n  serializeTraceTops(): HeapSnapshotModel.HeapSnapshotModel.SerializedAllocationNode[] {\n    if (this.#traceTops) {\n      return this.#traceTops;\n    }\n\n    const result: HeapSnapshotModel.HeapSnapshotModel.SerializedAllocationNode[] = this.#traceTops = [];\n    const functionInfos = this.#functionInfos;\n    for (let i = 0; i < functionInfos.length; i++) {\n      const info = functionInfos[i];\n      if (info.totalCount === 0) {\n        continue;\n      }\n      const nodeId = this.#nextNodeId++;\n      const isRoot = i === 0;\n      result.push(this.#serializeNode(\n          nodeId, info, info.totalCount, info.totalSize, info.totalLiveCount, info.totalLiveSize, !isRoot));\n      this.#collapsedTopNodeIdToFunctionInfo[nodeId] = info;\n    }\n    result.sort(function(a, b) {\n      return b.size - a.size;\n    });\n    return result;\n  }\n\n  serializeCallers(nodeId: number): HeapSnapshotModel.HeapSnapshotModel.AllocationNodeCallers {\n    let node = this.#ensureBottomUpNode(nodeId);\n    const nodesWithSingleCaller = [];\n    while (node.callers().length === 1) {\n      node = node.callers()[0];\n      nodesWithSingleCaller.push(this.#serializeCaller(node));\n    }\n\n    const branchingCallers = [];\n    const callers = node.callers();\n    for (let i = 0; i < callers.length; i++) {\n      branchingCallers.push(this.#serializeCaller(callers[i]));\n    }\n\n    return new HeapSnapshotModel.HeapSnapshotModel.AllocationNodeCallers(nodesWithSingleCaller, branchingCallers);\n  }\n\n  serializeAllocationStack(traceNodeId: number): HeapSnapshotModel.HeapSnapshotModel.AllocationStackFrame[] {\n    let node: (TopDownAllocationNode|null)|TopDownAllocationNode = this.#idToTopDownNode[traceNodeId];\n    const result = [];\n    while (node) {\n      const functionInfo = node.functionInfo;\n      result.push(new HeapSnapshotModel.HeapSnapshotModel.AllocationStackFrame(\n          functionInfo.functionName, functionInfo.scriptName, functionInfo.scriptId, functionInfo.line,\n          functionInfo.column));\n      node = node.parent;\n    }\n    return result;\n  }\n\n  traceIds(allocationNodeId: number): number[] {\n    return this.#ensureBottomUpNode(allocationNodeId).traceTopIds;\n  }\n\n  #ensureBottomUpNode(nodeId: number): BottomUpAllocationNode {\n    let node = this.#idToNode[nodeId];\n    if (!node) {\n      const functionInfo = this.#collapsedTopNodeIdToFunctionInfo[nodeId];\n      node = functionInfo.bottomUpRoot();\n      delete this.#collapsedTopNodeIdToFunctionInfo[nodeId];\n      this.#idToNode[nodeId] = node;\n    }\n    return node as BottomUpAllocationNode;\n  }\n\n  #serializeCaller(node: BottomUpAllocationNode): HeapSnapshotModel.HeapSnapshotModel.SerializedAllocationNode {\n    const callerId = this.#nextNodeId++;\n    this.#idToNode[callerId] = node;\n    return this.#serializeNode(\n        callerId, node.functionInfo, node.allocationCount, node.allocationSize, node.liveCount, node.liveSize,\n        node.hasCallers());\n  }\n\n  #serializeNode(\n      nodeId: number, functionInfo: FunctionAllocationInfo, count: number, size: number, liveCount: number,\n      liveSize: number, hasChildren: boolean): HeapSnapshotModel.HeapSnapshotModel.SerializedAllocationNode {\n    return new HeapSnapshotModel.HeapSnapshotModel.SerializedAllocationNode(\n        nodeId, functionInfo.functionName, functionInfo.scriptName, functionInfo.scriptId, functionInfo.line,\n        functionInfo.column, count, size, liveCount, liveSize, hasChildren);\n  }\n}\n\nexport class TopDownAllocationNode {\n  id: number;\n  functionInfo: FunctionAllocationInfo;\n  allocationCount: number;\n  allocationSize: number;\n  liveCount: number;\n  liveSize: number;\n  parent: TopDownAllocationNode|null;\n  children: TopDownAllocationNode[];\n  constructor(\n      id: number, functionInfo: FunctionAllocationInfo, count: number, size: number, liveCount: number,\n      liveSize: number, parent: TopDownAllocationNode|null) {\n    this.id = id;\n    this.functionInfo = functionInfo;\n    this.allocationCount = count;\n    this.allocationSize = size;\n    this.liveCount = liveCount;\n    this.liveSize = liveSize;\n    this.parent = parent;\n\n    this.children = [];\n  }\n}\n\nexport class BottomUpAllocationNode {\n  functionInfo: FunctionAllocationInfo;\n  allocationCount: number;\n  allocationSize: number;\n  liveCount: number;\n  liveSize: number;\n  traceTopIds: number[];\n  readonly #callersInternal: BottomUpAllocationNode[];\n  constructor(functionInfo: FunctionAllocationInfo) {\n    this.functionInfo = functionInfo;\n    this.allocationCount = 0;\n    this.allocationSize = 0;\n    this.liveCount = 0;\n    this.liveSize = 0;\n\n    this.traceTopIds = [];\n\n    this.#callersInternal = [];\n  }\n\n  addCaller(traceNode: TopDownAllocationNode): BottomUpAllocationNode {\n    const functionInfo = traceNode.functionInfo;\n    let result;\n    for (let i = 0; i < this.#callersInternal.length; i++) {\n      const caller = this.#callersInternal[i];\n      if (caller.functionInfo === functionInfo) {\n        result = caller;\n        break;\n      }\n    }\n    if (!result) {\n      result = new BottomUpAllocationNode(functionInfo);\n      this.#callersInternal.push(result);\n    }\n    return result;\n  }\n\n  callers(): BottomUpAllocationNode[] {\n    return this.#callersInternal;\n  }\n\n  hasCallers(): boolean {\n    return this.#callersInternal.length > 0;\n  }\n}\n\nexport class FunctionAllocationInfo {\n  functionName: string;\n  scriptName: string;\n  scriptId: number;\n  line: number;\n  column: number;\n  totalCount: number;\n  totalSize: number;\n  totalLiveCount: number;\n  totalLiveSize: number;\n  #traceTops: TopDownAllocationNode[];\n  #bottomUpTree?: BottomUpAllocationNode;\n  constructor(functionName: string, scriptName: string, scriptId: number, line: number, column: number) {\n    this.functionName = functionName;\n    this.scriptName = scriptName;\n    this.scriptId = scriptId;\n    this.line = line;\n    this.column = column;\n    this.totalCount = 0;\n    this.totalSize = 0;\n    this.totalLiveCount = 0;\n    this.totalLiveSize = 0;\n\n    this.#traceTops = [];\n  }\n\n  addTraceTopNode(node: TopDownAllocationNode): void {\n    if (node.allocationCount === 0) {\n      return;\n    }\n    this.#traceTops.push(node);\n    this.totalCount += node.allocationCount;\n    this.totalSize += node.allocationSize;\n    this.totalLiveCount += node.liveCount;\n    this.totalLiveSize += node.liveSize;\n  }\n\n  bottomUpRoot(): BottomUpAllocationNode|null {\n    if (!this.#traceTops.length) {\n      return null;\n    }\n    if (!this.#bottomUpTree) {\n      this.#buildAllocationTraceTree();\n    }\n    return this.#bottomUpTree as BottomUpAllocationNode;\n  }\n\n  #buildAllocationTraceTree(): void {\n    this.#bottomUpTree = new BottomUpAllocationNode(this);\n\n    for (let i = 0; i < this.#traceTops.length; i++) {\n      let node: (TopDownAllocationNode|null)|TopDownAllocationNode = this.#traceTops[i];\n      let bottomUpNode: BottomUpAllocationNode = this.#bottomUpTree;\n      const count = node.allocationCount;\n      const size = node.allocationSize;\n      const liveCount = node.liveCount;\n      const liveSize = node.liveSize;\n      const traceId = node.id;\n      while (true) {\n        bottomUpNode.allocationCount += count;\n        bottomUpNode.allocationSize += size;\n        bottomUpNode.liveCount += liveCount;\n        bottomUpNode.liveSize += liveSize;\n        bottomUpNode.traceTopIds.push(traceId);\n        node = node.parent;\n        if (node === null) {\n          break;\n        }\n\n        bottomUpNode = bottomUpNode.addCaller(node);\n      }\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
