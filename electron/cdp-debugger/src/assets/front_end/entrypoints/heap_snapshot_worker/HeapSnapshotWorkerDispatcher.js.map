{
  "version": 3,
  "sources": ["../../../../../../front_end/entrypoints/heap_snapshot_worker/HeapSnapshotWorkerDispatcher.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport type * as HeapSnapshotModel from '../../models/heap_snapshot_model/heap_snapshot_model.js';\ninterface DispatcherResponse {\n  callId?: number;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  result: any;\n  error?: string;\n  errorCallStack?: Object;\n  errorMethodName?: string;\n}\nexport class HeapSnapshotWorkerDispatcher {\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  #objects: any[];\n  readonly #global: Worker;\n  readonly #postMessage: Function;\n  constructor(globalObject: Worker, postMessage: Function) {\n    this.#objects = [];\n    this.#global = globalObject;\n    this.#postMessage = postMessage;\n  }\n\n  #findFunction(name: string): Function {\n    const path = name.split('.');\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let result = (this.#global as any);\n    for (let i = 0; i < path.length; ++i) {\n      result = result[path[i]];\n    }\n    return result as Function;\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  sendEvent(name: string, data: any): void {\n    this.#postMessage({eventName: name, data: data});\n  }\n\n  dispatchMessage({data}: {data: HeapSnapshotModel.HeapSnapshotModel.WorkerCommand}): void {\n    const response: DispatcherResponse =\n        {callId: data.callId, result: null, error: undefined, errorCallStack: undefined, errorMethodName: undefined};\n    try {\n      switch (data.disposition) {\n        case 'create': {\n          const constructorFunction = this.#findFunction(data.methodName);\n          // @ts-ignore\n          this.#objects[data.objectId] = new constructorFunction(this);\n          break;\n        }\n        case 'dispose': {\n          delete this.#objects[data.objectId];\n          break;\n        }\n        case 'getter': {\n          const object = this.#objects[data.objectId];\n          const result = object[data.methodName];\n          response.result = result;\n          break;\n        }\n        case 'factory': {\n          const object = this.#objects[data.objectId];\n          const result = object[data.methodName].apply(object, data.methodArguments);\n          if (result) {\n            this.#objects[data.newObjectId] = result;\n          }\n          response.result = Boolean(result);\n          break;\n        }\n        case 'method': {\n          const object = this.#objects[data.objectId];\n          response.result = object[data.methodName].apply(object, data.methodArguments);\n          break;\n        }\n        case 'evaluateForTest': {\n          try {\n            response.result = self.eval(data.source);\n          } catch (error) {\n            response.result = error.toString();\n          }\n          break;\n        }\n      }\n    } catch (error) {\n      response.error = error.toString();\n      response.errorCallStack = error.stack;\n      if (data.methodName) {\n        response.errorMethodName = data.methodName;\n      }\n    }\n    this.#postMessage(response);\n  }\n}\n"],
  "mappings": "AAwCO,0CAAmC;AAAA;AAAA;AAAA;AAAA,EAMxC,YAAY,cAAsB,aAAuB;AACvD,oBAAgB;AAChB,mBAAe;AACf,wBAAoB;AAAA;AAAA,gBAGR,MAAwB;AACpC,UAAM,OAAO,KAAK,MAAM;AAGxB,QAAI,SAAU;AACd,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AACpC,eAAS,OAAO,KAAK;AAAA;AAEvB,WAAO;AAAA;AAAA,EAKT,UAAU,MAAc,MAAiB;AACvC,sBAAkB,EAAC,WAAW,MAAM;AAAA;AAAA,EAGtC,gBAAgB,EAAC,QAAwE;AACvF,UAAM,WACF,EAAC,QAAQ,KAAK,QAAQ,QAAQ,MAAM,OAAO,QAAW,gBAAgB,QAAW,iBAAiB;AACtG,QAAI;AACF,cAAQ,KAAK;AAAA,aACN,UAAU;AACb,gBAAM,sBAAsB,mBAAmB,KAAK;AAEpD,wBAAc,KAAK,YAAY,IAAI,oBAAoB;AACvD;AAAA;AAAA,aAEG,WAAW;AACd,iBAAO,cAAc,KAAK;AAC1B;AAAA;AAAA,aAEG,UAAU;AACb,gBAAM,SAAS,cAAc,KAAK;AAClC,gBAAM,SAAS,OAAO,KAAK;AAC3B,mBAAS,SAAS;AAClB;AAAA;AAAA,aAEG,WAAW;AACd,gBAAM,SAAS,cAAc,KAAK;AAClC,gBAAM,SAAS,OAAO,KAAK,YAAY,MAAM,QAAQ,KAAK;AAC1D,cAAI,QAAQ;AACV,0BAAc,KAAK,eAAe;AAAA;AAEpC,mBAAS,SAAS,QAAQ;AAC1B;AAAA;AAAA,aAEG,UAAU;AACb,gBAAM,SAAS,cAAc,KAAK;AAClC,mBAAS,SAAS,OAAO,KAAK,YAAY,MAAM,QAAQ,KAAK;AAC7D;AAAA;AAAA,aAEG,mBAAmB;AACtB,cAAI;AACF,qBAAS,SAAS,KAAK,KAAK,KAAK;AAAA,mBAC1B,OAAP;AACA,qBAAS,SAAS,MAAM;AAAA;AAE1B;AAAA;AAAA;AAAA,aAGG,OAAP;AACA,eAAS,QAAQ,MAAM;AACvB,eAAS,iBAAiB,MAAM;AAChC,UAAI,KAAK,YAAY;AACnB,iBAAS,kBAAkB,KAAK;AAAA;AAAA;AAGpC,sBAAkB;AAAA;AAAA;",
  "names": []
}
