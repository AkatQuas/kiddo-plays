{
  "version": 3,
  "sources": ["../../../../../../front_end/entrypoints/node_app/NodeConnectionsPanel.ts"],
  "sourcesContent": ["// Copyright 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport nodeConnectionsPanelStyles from './nodeConnectionsPanel.css.js';\nimport type * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Node Connections Panel of the Sources panel when debugging a Node.js app\n  */\n  nodejsDebuggingGuide: 'Node.js debugging guide',\n  /**\n  *@description Text in Node Connections Panel of the Sources panel when debugging a Node.js app\n  *@example {Node.js debugging guide} PH1\n  */\n  specifyNetworkEndpointAnd:\n      'Specify network endpoint and DevTools will connect to it automatically. Read {PH1} to learn more.',\n  /**\n  *@description Placeholder text content in Node Connections Panel of the Sources panel when debugging a Node.js app\n  */\n  noConnectionsSpecified: 'No connections specified',\n  /**\n  *@description Text of add network target button in Node Connections Panel of the Sources panel when debugging a Node.js app\n  */\n  addConnection: 'Add connection',\n  /**\n  *@description Text in Node Connections Panel of the Sources panel when debugging a Node.js app\n  */\n  networkAddressEgLocalhost: 'Network address (e.g. localhost:9229)',\n};\nconst str_ = i18n.i18n.registerUIStrings('entrypoints/node_app/NodeConnectionsPanel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet nodeConnectionsPanelInstance: NodeConnectionsPanel;\n\nexport class NodeConnectionsPanel extends UI.Panel.Panel {\n  #config!: Adb.Config;\n  readonly #networkDiscoveryView: NodeConnectionsView;\n  private constructor() {\n    super('node-connection');\n\n    this.contentElement.classList.add('node-panel');\n\n    const container = this.contentElement.createChild('div', 'node-panel-center');\n\n    const image = (container.createChild('img', 'node-panel-logo') as HTMLImageElement);\n    image.src = 'https://nodejs.org/static/images/logos/nodejs-new-pantone-black.svg';\n\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.DevicesDiscoveryConfigChanged, this.#devicesDiscoveryConfigChanged, this);\n\n    this.contentElement.tabIndex = 0;\n    this.setDefaultFocusedElement(this.contentElement);\n\n    // Trigger notification once.\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.setDevicesUpdatesEnabled(false);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.setDevicesUpdatesEnabled(true);\n\n    this.#networkDiscoveryView = new NodeConnectionsView(config => {\n      this.#config.networkDiscoveryConfig = config;\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.setDevicesDiscoveryConfig(this.#config);\n    });\n    this.#networkDiscoveryView.show(container);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): NodeConnectionsPanel {\n    const {forceNew} = opts;\n    if (!nodeConnectionsPanelInstance || forceNew) {\n      nodeConnectionsPanelInstance = new NodeConnectionsPanel();\n    }\n\n    return nodeConnectionsPanelInstance;\n  }\n\n  #devicesDiscoveryConfigChanged({data: config}: Common.EventTarget.EventTargetEvent<Adb.Config>): void {\n    this.#config = config;\n    this.#networkDiscoveryView.discoveryConfigChanged(this.#config.networkDiscoveryConfig);\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([nodeConnectionsPanelStyles]);\n  }\n}\n\nexport class NodeConnectionsView extends UI.Widget.VBox implements UI.ListWidget.Delegate<Adb.PortForwardingRule> {\n  readonly #callback: (arg0: Adb.NetworkDiscoveryConfig) => void;\n  readonly #list: UI.ListWidget.ListWidget<Adb.PortForwardingRule>;\n  #editor: UI.ListWidget.Editor<Adb.PortForwardingRule>|null;\n  #networkDiscoveryConfig: {\n    address: string,\n  }[];\n  constructor(callback: (arg0: Adb.NetworkDiscoveryConfig) => void) {\n    super();\n    this.#callback = callback;\n    this.element.classList.add('network-discovery-view');\n\n    const networkDiscoveryFooter = this.element.createChild('div', 'network-discovery-footer');\n    const documentationLink =\n        UI.XLink.XLink.create('https://nodejs.org/en/docs/inspector/', i18nString(UIStrings.nodejsDebuggingGuide));\n    networkDiscoveryFooter.appendChild(\n        i18n.i18n.getFormatLocalizedString(str_, UIStrings.specifyNetworkEndpointAnd, {PH1: documentationLink}));\n\n    this.#list = new UI.ListWidget.ListWidget(this);\n\n    this.#list.element.classList.add('network-discovery-list');\n    const placeholder = document.createElement('div');\n    placeholder.classList.add('network-discovery-list-empty');\n    placeholder.textContent = i18nString(UIStrings.noConnectionsSpecified);\n    this.#list.setEmptyPlaceholder(placeholder);\n    this.#list.show(this.element);\n    this.#editor = null;\n\n    const addButton = UI.UIUtils.createTextButton(\n        i18nString(UIStrings.addConnection), this.#addNetworkTargetButtonClicked.bind(this),\n        'add-network-target-button', true /* primary */);\n    this.element.appendChild(addButton);\n\n    this.#networkDiscoveryConfig = [];\n\n    this.element.classList.add('node-frontend');\n  }\n\n  #update(): void {\n    const config = this.#networkDiscoveryConfig.map(item => item.address);\n    this.#callback.call(null, config);\n  }\n\n  #addNetworkTargetButtonClicked(): void {\n    this.#list.addNewItem(this.#networkDiscoveryConfig.length, {address: '', port: ''});\n  }\n\n  discoveryConfigChanged(networkDiscoveryConfig: Adb.NetworkDiscoveryConfig): void {\n    this.#networkDiscoveryConfig = [];\n    this.#list.clear();\n    for (const address of networkDiscoveryConfig) {\n      const item = {address: address, port: ''};\n      this.#networkDiscoveryConfig.push(item);\n      this.#list.appendItem(item, true);\n    }\n  }\n\n  renderItem(rule: Adb.PortForwardingRule, _editable: boolean): Element {\n    const element = document.createElement('div');\n    element.classList.add('network-discovery-list-item');\n    element.createChild('div', 'network-discovery-value network-discovery-address').textContent = rule.address;\n    return element;\n  }\n\n  removeItemRequested(rule: Adb.PortForwardingRule, index: number): void {\n    this.#networkDiscoveryConfig.splice(index, 1);\n    this.#list.removeItem(index);\n    this.#update();\n  }\n\n  commitEdit(rule: Adb.PortForwardingRule, editor: UI.ListWidget.Editor<Adb.PortForwardingRule>, isNew: boolean): void {\n    rule.address = editor.control('address').value.trim();\n    if (isNew) {\n      this.#networkDiscoveryConfig.push(rule);\n    }\n    this.#update();\n  }\n\n  beginEdit(rule: Adb.PortForwardingRule): UI.ListWidget.Editor<Adb.PortForwardingRule> {\n    const editor = this.#createEditor();\n    editor.control('address').value = rule.address;\n    return editor;\n  }\n\n  #createEditor(): UI.ListWidget.Editor<Adb.PortForwardingRule> {\n    if (this.#editor) {\n      return this.#editor;\n    }\n\n    const editor = new UI.ListWidget.Editor<Adb.PortForwardingRule>();\n    this.#editor = editor;\n    const content = editor.contentElement();\n    const fields = content.createChild('div', 'network-discovery-edit-row');\n    const input =\n        editor.createInput('address', 'text', i18nString(UIStrings.networkAddressEgLocalhost), addressValidator);\n    fields.createChild('div', 'network-discovery-value network-discovery-address').appendChild(input);\n    return editor;\n\n    function addressValidator(_rule: Adb.PortForwardingRule, _index: number, input: UI.ListWidget.EditorControl):\n        UI.ListWidget.ValidatorResult {\n      const match = input.value.trim().match(/^([a-zA-Z0-9\\.\\-_]+):(\\d+)$/);\n      if (!match) {\n        return {\n          valid: false,\n          errorMessage: undefined,\n        };\n      }\n      const port = parseInt(match[2], 10);\n      return {\n        valid: port <= 65535,\n        errorMessage: undefined,\n      };\n    }\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.#list.registerCSSFiles([nodeConnectionsPanelStyles]);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
