{
  "version": 3,
  "sources": ["../../../../../../front_end/entrypoints/node_app/NodeMain.ts"],
  "sourcesContent": ["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport type * as ProtocolClient from '../../core/protocol_client/protocol_client.js';\nimport * as SDK from '../../core/sdk/sdk.js';\n\nconst UIStrings = {\n  /**\n  *@description Text that refers to the main target\n  */\n  main: 'Main',\n  /**\n  *@description Text in Node Main of the Sources panel when debugging a Node.js app\n  *@example {example.com} PH1\n  */\n  nodejsS: 'Node.js: {PH1}',\n};\nconst str_ = i18n.i18n.registerUIStrings('entrypoints/node_app/NodeMain.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet nodeMainImplInstance: NodeMainImpl;\n\nexport class NodeMainImpl implements Common.Runnable.Runnable {\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): NodeMainImpl {\n    const {forceNew} = opts;\n    if (!nodeMainImplInstance || forceNew) {\n      nodeMainImplInstance = new NodeMainImpl();\n    }\n    return nodeMainImplInstance;\n  }\n  async run(): Promise<void> {\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.ConnectToNodeJSFromFrontend);\n    void SDK.Connections.initMainConnection(async () => {\n      const target = SDK.TargetManager.TargetManager.instance().createTarget(\n          'main', i18nString(UIStrings.main), SDK.Target.Type.Browser, null);\n      target.setInspectedURL('Node.js' as Platform.DevToolsPath.UrlString);\n    }, Components.TargetDetachedDialog.TargetDetachedDialog.webSocketConnectionLost);\n  }\n}\n\nexport class NodeChildTargetManager extends SDK.SDKModel.SDKModel<void> implements ProtocolProxyApi.TargetDispatcher {\n  readonly #targetManager: SDK.TargetManager.TargetManager;\n  readonly #parentTarget: SDK.Target.Target;\n  readonly #targetAgent: ProtocolProxyApi.TargetApi;\n  readonly #childTargets: Map<Protocol.Target.SessionID, SDK.Target.Target>;\n  readonly #childConnections: Map<string, NodeConnection>;\n  constructor(parentTarget: SDK.Target.Target) {\n    super(parentTarget);\n    this.#targetManager = parentTarget.targetManager();\n    this.#parentTarget = parentTarget;\n    this.#targetAgent = parentTarget.targetAgent();\n    this.#childTargets = new Map();\n    this.#childConnections = new Map();\n\n    parentTarget.registerTargetDispatcher(this);\n    void this.#targetAgent.invoke_setDiscoverTargets({discover: true});\n\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.DevicesDiscoveryConfigChanged, this.#devicesDiscoveryConfigChanged, this);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.setDevicesUpdatesEnabled(false);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.setDevicesUpdatesEnabled(true);\n  }\n\n  #devicesDiscoveryConfigChanged({data: config}: Common.EventTarget.EventTargetEvent<Adb.Config>): void {\n    const locations = [];\n    for (const address of config.networkDiscoveryConfig) {\n      const parts = address.split(':');\n      const port = parseInt(parts[1], 10);\n      if (parts[0] && port) {\n        locations.push({host: parts[0], port: port});\n      }\n    }\n    void this.#targetAgent.invoke_setRemoteLocations({locations});\n  }\n\n  dispose(): void {\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.removeEventListener(\n        Host.InspectorFrontendHostAPI.Events.DevicesDiscoveryConfigChanged, this.#devicesDiscoveryConfigChanged, this);\n\n    for (const sessionId of this.#childTargets.keys()) {\n      this.detachedFromTarget({sessionId});\n    }\n  }\n\n  targetCreated({targetInfo}: Protocol.Target.TargetCreatedEvent): void {\n    if (targetInfo.type === 'node' && !targetInfo.attached) {\n      void this.#targetAgent.invoke_attachToTarget({targetId: targetInfo.targetId, flatten: false});\n    }\n  }\n\n  targetInfoChanged(_event: Protocol.Target.TargetInfoChangedEvent): void {\n  }\n\n  targetDestroyed(_event: Protocol.Target.TargetDestroyedEvent): void {\n  }\n\n  attachedToTarget({sessionId, targetInfo}: Protocol.Target.AttachedToTargetEvent): void {\n    const name = i18nString(UIStrings.nodejsS, {PH1: targetInfo.url});\n    const connection = new NodeConnection(this.#targetAgent, sessionId);\n    this.#childConnections.set(sessionId, connection);\n    const target = this.#targetManager.createTarget(\n        targetInfo.targetId, name, SDK.Target.Type.Node, this.#parentTarget, undefined, undefined, connection);\n    this.#childTargets.set(sessionId, target);\n    void target.runtimeAgent().invoke_runIfWaitingForDebugger();\n  }\n\n  detachedFromTarget({sessionId}: Protocol.Target.DetachedFromTargetEvent): void {\n    const childTarget = this.#childTargets.get(sessionId);\n    if (childTarget) {\n      childTarget.dispose('target terminated');\n    }\n    this.#childTargets.delete(sessionId);\n    this.#childConnections.delete(sessionId);\n  }\n\n  receivedMessageFromTarget({sessionId, message}: Protocol.Target.ReceivedMessageFromTargetEvent): void {\n    const connection = this.#childConnections.get(sessionId);\n    const onMessage = connection ? connection.onMessage : null;\n    if (onMessage) {\n      onMessage.call(null, message);\n    }\n  }\n\n  targetCrashed(_event: Protocol.Target.TargetCrashedEvent): void {\n  }\n}\n\nexport class NodeConnection implements ProtocolClient.InspectorBackend.Connection {\n  readonly #targetAgent: ProtocolProxyApi.TargetApi;\n  readonly #sessionId: Protocol.Target.SessionID;\n  onMessage: ((arg0: (Object|string)) => void)|null;\n  #onDisconnect: ((arg0: string) => void)|null;\n  constructor(targetAgent: ProtocolProxyApi.TargetApi, sessionId: Protocol.Target.SessionID) {\n    this.#targetAgent = targetAgent;\n    this.#sessionId = sessionId;\n    this.onMessage = null;\n    this.#onDisconnect = null;\n  }\n\n  setOnMessage(onMessage: (arg0: (Object|string)) => void): void {\n    this.onMessage = onMessage;\n  }\n\n  setOnDisconnect(onDisconnect: (arg0: string) => void): void {\n    this.#onDisconnect = onDisconnect;\n  }\n\n  sendRawMessage(message: string): void {\n    void this.#targetAgent.invoke_sendMessageToTarget({message, sessionId: this.#sessionId});\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.#onDisconnect) {\n      this.#onDisconnect.call(null, 'force disconnect');\n    }\n    this.#onDisconnect = null;\n    this.onMessage = null;\n    await this.#targetAgent.invoke_detachFromTarget({sessionId: this.#sessionId});\n  }\n}\n\nSDK.SDKModel.SDKModel.register(NodeChildTargetManager, {capabilities: SDK.Target.Capability.Target, autostart: true});\n"],
  "mappings": "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",
  "names": []
}
