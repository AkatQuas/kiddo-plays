{
  "version": 3,
  "sources": ["../../../../../../front_end/entrypoints/formatter_worker/JavaScriptFormatter.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Acorn from '../../third_party/acorn/acorn.js';\n\nimport type {TokenOrComment} from './AcornTokenizer.js';\nimport {AcornTokenizer, ECMA_VERSION} from './AcornTokenizer.js';\nimport {ESTreeWalker} from './ESTreeWalker.js';\nimport type {FormattedContentBuilder} from './FormattedContentBuilder.js';\n\nexport class JavaScriptFormatter {\n  readonly #builder: FormattedContentBuilder;\n  #tokenizer!: AcornTokenizer;\n  #content!: string;\n  #fromOffset!: number;\n  #lastLineNumber!: number;\n  #toOffset?: number;\n  constructor(builder: FormattedContentBuilder) {\n    this.#builder = builder;\n  }\n\n  format(text: string, lineEndings: number[], fromOffset: number, toOffset: number): void {\n    this.#fromOffset = fromOffset;\n    this.#toOffset = toOffset;\n    this.#content = text.substring(this.#fromOffset, this.#toOffset);\n    this.#lastLineNumber = 0;\n    this.#tokenizer = new AcornTokenizer(this.#content);\n    const ast = Acorn.parse(this.#content, {\n      ranges: false,\n      preserveParens: true,\n      allowImportExportEverywhere: true,\n      ecmaVersion: ECMA_VERSION,\n      allowHashBang: true,\n    });\n    const walker = new ESTreeWalker(this.#beforeVisit.bind(this), this.#afterVisit.bind(this));\n    // @ts-ignore Technically, the acorn Node type is a subclass of Acorn.ESTree.Node.\n    // However, the acorn package currently exports its type without specifying\n    // this relationship. So while this is allowed on runtime, we can't properly\n    // typecheck it.\n    walker.walk(ast);\n  }\n\n  #push(token: Acorn.Token|Acorn.Comment|null, format: string): void {\n    for (let i = 0; i < format.length; ++i) {\n      if (format[i] === 's') {\n        this.#builder.addSoftSpace();\n      } else if (format[i] === 'S') {\n        this.#builder.addHardSpace();\n      } else if (format[i] === 'n') {\n        this.#builder.addNewLine();\n      } else if (format[i] === '>') {\n        this.#builder.increaseNestingLevel();\n      } else if (format[i] === '<') {\n        this.#builder.decreaseNestingLevel();\n      } else if (format[i] === 't') {\n        if (this.#tokenizer.tokenLineStart() - this.#lastLineNumber > 1) {\n          this.#builder.addNewLine(true);\n        }\n        this.#lastLineNumber = this.#tokenizer.tokenLineEnd();\n        if (token) {\n          this.#builder.addToken(this.#content.substring(token.start, token.end), this.#fromOffset + token.start);\n        }\n      }\n    }\n  }\n\n  #beforeVisit(node: Acorn.ESTree.Node): undefined {\n    if (!node.parent) {\n      return;\n    }\n    let token;\n    while ((token = this.#tokenizer.peekToken()) && token.start < node.start) {\n      const token = (this.#tokenizer.nextToken() as TokenOrComment);\n      // @ts-ignore Same reason as above about Acorn types and ESTree types\n      const format = this.#formatToken(node.parent, token);\n      this.#push(token, format);\n    }\n    return;\n  }\n\n  #afterVisit(node: Acorn.ESTree.Node): void {\n    let token;\n    while ((token = this.#tokenizer.peekToken()) && token.start < node.end) {\n      const token = (this.#tokenizer.nextToken() as TokenOrComment);\n      const format = this.#formatToken(node, token);\n      this.#push(token, format);\n    }\n    this.#push(null, this.#finishNode(node));\n  }\n\n  #inForLoopHeader(node: Acorn.ESTree.Node): boolean {\n    const parent = node.parent;\n    if (!parent) {\n      return false;\n    }\n    if (parent.type === 'ForStatement') {\n      const parentNode = (parent as Acorn.ESTree.ForStatement);\n      return node === parentNode.init || node === parentNode.test || node === parentNode.update;\n    }\n    if (parent.type === 'ForInStatement' || parent.type === 'ForOfStatement') {\n      const parentNode = (parent as Acorn.ESTree.ForInStatement | Acorn.ESTree.ForOfStatement);\n      return node === parentNode.left || node === parentNode.right;\n    }\n    return false;\n  }\n\n  #formatToken(node: Acorn.ESTree.Node, tokenOrComment: TokenOrComment): string {\n    const AT = AcornTokenizer;\n    if (AT.lineComment(tokenOrComment)) {\n      return 'tn';\n    }\n    if (AT.blockComment(tokenOrComment)) {\n      return 'tn';\n    }\n    const token = (tokenOrComment as Acorn.Token);\n    if (node.type === 'ContinueStatement' || node.type === 'BreakStatement') {\n      return node.label && AT.keyword(token) ? 'ts' : 't';\n    }\n    if (node.type === 'Identifier') {\n      return 't';\n    }\n    if (node.type === 'PrivateIdentifier') {\n      return 't';\n    }\n    if (node.type === 'ReturnStatement') {\n      if (AT.punctuator(token, ';')) {\n        return 't';\n      }\n      return node.argument ? 'ts' : 't';\n    }\n    if (node.type === 'AwaitExpression') {\n      if (AT.punctuator(token, ';')) {\n        return 't';\n      }\n      return node.argument ? 'ts' : 't';\n    }\n    if (node.type === 'Property') {\n      if (AT.punctuator(token, ':')) {\n        return 'ts';\n      }\n      return 't';\n    }\n    if (node.type === 'ArrayExpression') {\n      if (AT.punctuator(token, ',')) {\n        return 'ts';\n      }\n      return 't';\n    }\n    if (node.type === 'LabeledStatement') {\n      if (AT.punctuator(token, ':')) {\n        return 'ts';\n      }\n    } else if (\n        node.type === 'LogicalExpression' || node.type === 'AssignmentExpression' || node.type === 'BinaryExpression') {\n      if (AT.punctuator(token) && !AT.punctuator(token, '()')) {\n        return 'sts';\n      }\n    } else if (node.type === 'ConditionalExpression') {\n      if (AT.punctuator(token, '?:')) {\n        return 'sts';\n      }\n    } else if (node.type === 'VariableDeclarator') {\n      if (AT.punctuator(token, '=')) {\n        return 'sts';\n      }\n    } else if (node.type === 'ObjectPattern') {\n      if (node.parent && node.parent.type === 'VariableDeclarator' && AT.punctuator(token, '{')) {\n        return 'st';\n      }\n      if (AT.punctuator(token, ',')) {\n        return 'ts';\n      }\n    } else if (node.type === 'FunctionDeclaration') {\n      if (AT.punctuator(token, ',)')) {\n        return 'ts';\n      }\n    } else if (node.type === 'FunctionExpression') {\n      if (AT.punctuator(token, ',)')) {\n        return 'ts';\n      }\n      if (AT.keyword(token, 'function')) {\n        return node.id ? 'ts' : 't';\n      }\n    } else if (node.type === 'WithStatement') {\n      if (AT.punctuator(token, ')')) {\n        return node.body && node.body.type === 'BlockStatement' ? 'ts' : 'tn>';\n      }\n    } else if (node.type === 'SwitchStatement') {\n      if (AT.punctuator(token, '{')) {\n        return 'tn>';\n      }\n      if (AT.punctuator(token, '}')) {\n        return 'n<tn';\n      }\n      if (AT.punctuator(token, ')')) {\n        return 'ts';\n      }\n    } else if (node.type === 'SwitchCase') {\n      if (AT.keyword(token, 'case')) {\n        return 'n<ts';\n      }\n      if (AT.keyword(token, 'default')) {\n        return 'n<t';\n      }\n      if (AT.punctuator(token, ':')) {\n        return 'tn>';\n      }\n    } else if (node.type === 'VariableDeclaration') {\n      if (AT.punctuator(token, ',')) {\n        let allVariablesInitialized = true;\n        const declarations = (node.declarations as Acorn.ESTree.Node[]);\n        for (let i = 0; i < declarations.length; ++i) {\n          // @ts-ignore We are doing a subtype check, without properly checking whether\n          // it exists. We can't fix that, unless we use proper typechecking\n          allVariablesInitialized = allVariablesInitialized && Boolean(declarations[i].init);\n        }\n        return !this.#inForLoopHeader(node) && allVariablesInitialized ? 'nSSts' : 'ts';\n      }\n    } else if (node.type === 'PropertyDefinition') {\n      if (AT.punctuator(token, '=')) {\n        return 'sts';\n      }\n      if (AT.punctuator(token, ';')) {\n        return 'tn';\n      }\n    } else if (node.type === 'BlockStatement') {\n      if (AT.punctuator(token, '{')) {\n        return node.body.length ? 'tn>' : 't';\n      }\n      if (AT.punctuator(token, '}')) {\n        return node.body.length ? 'n<t' : 't';\n      }\n    } else if (node.type === 'CatchClause') {\n      if (AT.punctuator(token, ')')) {\n        return 'ts';\n      }\n    } else if (node.type === 'ObjectExpression') {\n      if (!node.properties.length) {\n        return 't';\n      }\n      if (AT.punctuator(token, '{')) {\n        return 'tn>';\n      }\n      if (AT.punctuator(token, '}')) {\n        return 'n<t';\n      }\n      if (AT.punctuator(token, ',')) {\n        return 'tn';\n      }\n    } else if (node.type === 'IfStatement') {\n      if (AT.punctuator(token, ')')) {\n        return node.consequent && node.consequent.type === 'BlockStatement' ? 'ts' : 'tn>';\n      }\n\n      if (AT.keyword(token, 'else')) {\n        const preFormat = node.consequent && node.consequent.type === 'BlockStatement' ? 'st' : 'n<t';\n        let postFormat = 'n>';\n        if (node.alternate && (node.alternate.type === 'BlockStatement' || node.alternate.type === 'IfStatement')) {\n          postFormat = 's';\n        }\n        return preFormat + postFormat;\n      }\n    } else if (node.type === 'CallExpression') {\n      if (AT.punctuator(token, ',')) {\n        return 'ts';\n      }\n    } else if (node.type === 'SequenceExpression' && AT.punctuator(token, ',')) {\n      return node.parent && node.parent.type === 'SwitchCase' ? 'ts' : 'tn';\n    } else if (node.type === 'ForStatement' || node.type === 'ForOfStatement' || node.type === 'ForInStatement') {\n      if (AT.punctuator(token, ';')) {\n        return 'ts';\n      }\n      if (AT.keyword(token, 'in') || AT.identifier(token, 'of')) {\n        return 'sts';\n      }\n\n      if (AT.punctuator(token, ')')) {\n        return node.body && node.body.type === 'BlockStatement' ? 'ts' : 'tn>';\n      }\n    } else if (node.type === 'WhileStatement') {\n      if (AT.punctuator(token, ')')) {\n        return node.body && node.body.type === 'BlockStatement' ? 'ts' : 'tn>';\n      }\n    } else if (node.type === 'DoWhileStatement') {\n      const blockBody = node.body && node.body.type === 'BlockStatement';\n      if (AT.keyword(token, 'do')) {\n        return blockBody ? 'ts' : 'tn>';\n      }\n      if (AT.keyword(token, 'while')) {\n        return blockBody ? 'sts' : 'n<ts';\n      }\n      if (AT.punctuator(token, ';')) {\n        return 'tn';\n      }\n    } else if (node.type === 'ClassBody') {\n      if (AT.punctuator(token, '{')) {\n        return 'stn>';\n      }\n      if (AT.punctuator(token, '}')) {\n        return '<ntn';\n      }\n      return 't';\n    } else if (node.type === 'YieldExpression') {\n      return 't';\n    } else if (node.type === 'Super') {\n      return 't';\n    } else if (node.type === 'ImportExpression') {\n      return 't';\n    } else if (node.type === 'ExportAllDeclaration') {\n      if (AT.punctuator(token, '*')) {\n        return 'sts';\n      }\n      return 't';\n    } else if (node.type === 'ExportNamedDeclaration' || node.type === 'ImportDeclaration') {\n      if (AT.punctuator(token, '{')) {\n        return 'st';\n      }\n      if (AT.punctuator(token, ',')) {\n        return 'ts';\n      }\n      if (AT.punctuator(token, '}')) {\n        return node.source ? 'ts' : 't';\n      }\n      if (AT.punctuator(token, '*')) {\n        return 'sts';\n      }\n      return 't';\n    }\n    return AT.keyword(token) && !AT.keyword(token, 'this') ? 'ts' : 't';\n  }\n\n  #finishNode(node: Acorn.ESTree.Node): string {\n    if (node.type === 'WithStatement') {\n      if (node.body && node.body.type !== 'BlockStatement') {\n        return 'n<';\n      }\n    } else if (node.type === 'VariableDeclaration') {\n      if (!this.#inForLoopHeader(node)) {\n        return 'n';\n      }\n    } else if (node.type === 'ForStatement' || node.type === 'ForOfStatement' || node.type === 'ForInStatement') {\n      if (node.body && node.body.type !== 'BlockStatement') {\n        return 'n<';\n      }\n    } else if (node.type === 'BlockStatement') {\n      if (node.parent && node.parent.type === 'IfStatement') {\n        const parentNode = (node.parent as Acorn.ESTree.IfStatement);\n        if (parentNode.alternate && parentNode.consequent === node) {\n          return '';\n        }\n      }\n      if (node.parent && node.parent.type === 'FunctionExpression' && node.parent.parent &&\n          node.parent.parent.type === 'Property') {\n        return '';\n      }\n      if (node.parent && node.parent.type === 'FunctionExpression' && node.parent.parent &&\n          node.parent.parent.type === 'VariableDeclarator') {\n        return '';\n      }\n      if (node.parent && node.parent.type === 'FunctionExpression' && node.parent.parent &&\n          node.parent.parent.type === 'CallExpression') {\n        return '';\n      }\n      if (node.parent && node.parent.type === 'DoWhileStatement') {\n        return '';\n      }\n      if (node.parent && node.parent.type === 'TryStatement') {\n        const parentNode = (node.parent as Acorn.ESTree.TryStatement);\n        if (parentNode.block === node) {\n          return 's';\n        }\n      }\n      if (node.parent && node.parent.type === 'CatchClause') {\n        const parentNode = (node.parent as Acorn.ESTree.CatchClause);\n        // @ts-ignore We are doing a subtype check, without properly checking whether\n        // it exists. We can't fix that, unless we use proper typechecking\n        if (parentNode.parent && parentNode.parent.finalizer) {\n          return 's';\n        }\n      }\n      return 'n';\n    } else if (node.type === 'WhileStatement') {\n      if (node.body && node.body.type !== 'BlockStatement') {\n        return 'n<';\n      }\n    } else if (node.type === 'IfStatement') {\n      if (node.alternate) {\n        if (node.alternate.type !== 'BlockStatement' && node.alternate.type !== 'IfStatement') {\n          return '<';\n        }\n      } else if (node.consequent) {\n        if (node.consequent.type !== 'BlockStatement') {\n          return '<';\n        }\n      }\n    } else if (\n        node.type === 'BreakStatement' || node.type === 'ContinueStatement' || node.type === 'ThrowStatement' ||\n        node.type === 'ReturnStatement' || node.type === 'ExpressionStatement') {\n      return 'n';\n    } else if (\n        node.type === 'ImportDeclaration' || node.type === 'ExportAllDeclaration' ||\n        node.type === 'ExportDefaultDeclaration' || node.type === 'ExportNamedDeclaration') {\n      return 'n';\n    }\n    return '';\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
