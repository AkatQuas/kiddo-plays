{
  "version": 3,
  "sources": ["../../../../../../front_end/entrypoints/formatter_worker/HTMLOutline.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\n\nimport {javaScriptOutline} from './JavaScriptOutline.js';\nexport interface Item {\n  title: string;\n  subtitle?: string;\n  line: number;\n  column: number;\n}\n\nexport function htmlOutline(content: string, chunkCallback: (arg0: {\n                                               chunk: Array<Item>,\n                                               isLastChunk: boolean,\n                                             }) => void): void {\n  const SCRIPT_OPENING_TAG = /<script[^>]*>/im;\n  const SCRIPT_CLOSING_TAG = /<\\/script\\s*>/im;\n\n  const textCursor = new TextUtils.TextCursor.TextCursor(Platform.StringUtilities.findLineEndingIndexes(content));\n  while (true) {\n    // Look for the opening <script> tag.\n    const openingMatch = SCRIPT_OPENING_TAG.exec(content.substring(textCursor.offset()));\n    if (!openingMatch) {\n      break;\n    }\n    const scriptStart = textCursor.offset() + openingMatch.index + openingMatch[0].length;\n    textCursor.advance(scriptStart);\n    const scriptLine = textCursor.lineNumber();\n    const scriptColumn = textCursor.columnNumber();\n    // Look for the closing </script> tag.\n    const closingMatch = SCRIPT_CLOSING_TAG.exec(content.substring(textCursor.offset()));\n    if (!closingMatch) {\n      break;\n    }\n    const scriptEnd = textCursor.offset() + closingMatch.index;\n    textCursor.advance(scriptEnd + closingMatch[0].length);\n    const scriptContent = content.substring(scriptStart, scriptEnd);\n    javaScriptOutline(scriptContent, ({chunk}) => {\n      chunk.forEach(item => {\n        if (item.line === 0) {\n          item.column += scriptColumn;\n        }\n        item.line += scriptLine;\n      });\n      chunkCallback({chunk, isLastChunk: false});\n    });\n  }\n  chunkCallback({chunk: [], isLastChunk: true});\n}\n"],
  "mappings": "AAIA;AACA;AAEA;AAQO,4BAAqB,SAAiB,eAGkB;AAC7D,QAAM,qBAAqB;AAC3B,QAAM,qBAAqB;AAE3B,QAAM,aAAa,IAAI,UAAU,WAAW,WAAW,SAAS,gBAAgB,sBAAsB;AACtG,SAAO,MAAM;AAEX,UAAM,eAAe,mBAAmB,KAAK,QAAQ,UAAU,WAAW;AAC1E,QAAI,CAAC,cAAc;AACjB;AAAA;AAEF,UAAM,cAAc,WAAW,WAAW,aAAa,QAAQ,aAAa,GAAG;AAC/E,eAAW,QAAQ;AACnB,UAAM,aAAa,WAAW;AAC9B,UAAM,eAAe,WAAW;AAEhC,UAAM,eAAe,mBAAmB,KAAK,QAAQ,UAAU,WAAW;AAC1E,QAAI,CAAC,cAAc;AACjB;AAAA;AAEF,UAAM,YAAY,WAAW,WAAW,aAAa;AACrD,eAAW,QAAQ,YAAY,aAAa,GAAG;AAC/C,UAAM,gBAAgB,QAAQ,UAAU,aAAa;AACrD,sBAAkB,eAAe,CAAC,EAAC,YAAW;AAC5C,YAAM,QAAQ,UAAQ;AACpB,YAAI,KAAK,SAAS,GAAG;AACnB,eAAK,UAAU;AAAA;AAEjB,aAAK,QAAQ;AAAA;AAEf,oBAAc,EAAC,OAAO,aAAa;AAAA;AAAA;AAGvC,gBAAc,EAAC,OAAO,IAAI,aAAa;AAAA;",
  "names": []
}
