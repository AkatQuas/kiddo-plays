{
  "version": 3,
  "sources": ["../../../../../../front_end/entrypoints/formatter_worker/FormattedContentBuilder.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nexport class FormattedContentBuilder {\n  #lastOriginalPosition = 0;\n  #formattedContent: string[] = [];\n  #formattedContentLength = 0;\n  #lastFormattedPosition = 0;\n  #nestingLevel = 0;\n  #newLines = 0;\n  #enforceSpaceBetweenWords = true;\n  #softSpace = false;\n  #hardSpaces = 0;\n  #cachedIndents = new Map<number, string>();\n\n  mapping = {original: [0], formatted: [0]};\n\n  constructor(private indentString: string) {\n  }\n\n  setEnforceSpaceBetweenWords(value: boolean): boolean {\n    const oldValue = this.#enforceSpaceBetweenWords;\n    this.#enforceSpaceBetweenWords = value;\n    return oldValue;\n  }\n\n  addToken(token: string, offset: number): void {\n    const last = this.#formattedContent[this.#formattedContent.length - 1];\n    if (this.#enforceSpaceBetweenWords && last && /\\w/.test(last[last.length - 1]) && /\\w/.test(token)) {\n      this.addSoftSpace();\n    }\n\n    this.#appendFormatting();\n\n    // Insert token.\n    this.#addMappingIfNeeded(offset);\n    this.#addText(token);\n  }\n\n  addSoftSpace(): void {\n    if (!this.#hardSpaces) {\n      this.#softSpace = true;\n    }\n  }\n\n  addHardSpace(): void {\n    this.#softSpace = false;\n    ++this.#hardSpaces;\n  }\n\n  addNewLine(noSquash?: boolean): void {\n    // Avoid leading newlines.\n    if (!this.#formattedContentLength) {\n      return;\n    }\n    if (noSquash) {\n      ++this.#newLines;\n    } else {\n      this.#newLines = this.#newLines || 1;\n    }\n  }\n\n  increaseNestingLevel(): void {\n    this.#nestingLevel += 1;\n  }\n\n  decreaseNestingLevel(): void {\n    if (this.#nestingLevel > 0) {\n      this.#nestingLevel -= 1;\n    }\n  }\n\n  content(): string {\n    return this.#formattedContent.join('') + (this.#newLines ? '\\n' : '');\n  }\n\n  #appendFormatting(): void {\n    if (this.#newLines) {\n      for (let i = 0; i < this.#newLines; ++i) {\n        this.#addText('\\n');\n      }\n      this.#addText(this.#indent());\n    } else if (this.#softSpace) {\n      this.#addText(' ');\n    }\n    if (this.#hardSpaces) {\n      for (let i = 0; i < this.#hardSpaces; ++i) {\n        this.#addText(' ');\n      }\n    }\n    this.#newLines = 0;\n    this.#softSpace = false;\n    this.#hardSpaces = 0;\n  }\n\n  #indent(): string {\n    const cachedValue = this.#cachedIndents.get(this.#nestingLevel);\n    if (cachedValue) {\n      return cachedValue;\n    }\n\n    let fullIndent = '';\n    for (let i = 0; i < this.#nestingLevel; ++i) {\n      fullIndent += this.indentString;\n    }\n\n    // Cache a maximum of 20 nesting level indents.\n    if (this.#nestingLevel <= 20) {\n      this.#cachedIndents.set(this.#nestingLevel, fullIndent);\n    }\n    return fullIndent;\n  }\n\n  #addText(text: string): void {\n    this.#formattedContent.push(text);\n    this.#formattedContentLength += text.length;\n  }\n\n  #addMappingIfNeeded(originalPosition: number): void {\n    if (originalPosition - this.#lastOriginalPosition === this.#formattedContentLength - this.#lastFormattedPosition) {\n      return;\n    }\n    this.mapping.original.push(originalPosition);\n    this.#lastOriginalPosition = originalPosition;\n    this.mapping.formatted.push(this.#formattedContentLength);\n    this.#lastFormattedPosition = this.#formattedContentLength;\n  }\n}\n"],
  "mappings": "AAIO,qCAA8B;AAAA,EAcnC,YAAoB,cAAsB;AAAtB;AAAA;AAAA,0BAbI;AAAA,sBACM;AAAA,4BACJ;AAAA,2BACD;AAAA,kBACT;AAAA,cACJ;AAAA,8BACgB;AAAA,eACf;AAAA,gBACC;AAAA,mBACG,oBAAI;AAAA,EAErB,UAAU,EAAC,UAAU,CAAC,IAAI,WAAW,CAAC;AAAA,EAKtC,4BAA4B,OAAyB;AACnD,UAAM,WAAW;AACjB,qCAAiC;AACjC,WAAO;AAAA;AAAA,EAGT,SAAS,OAAe,QAAsB;AAC5C,UAAM,OAAO,uBAAuB,uBAAuB,SAAS;AACpE,QAAI,kCAAkC,QAAQ,KAAK,KAAK,KAAK,KAAK,SAAS,OAAO,KAAK,KAAK,QAAQ;AAClG,WAAK;AAAA;AAGP;AAGA,6BAAyB;AACzB,kBAAc;AAAA;AAAA,EAGhB,eAAqB;AACnB,QAAI,CAAC,kBAAkB;AACrB,wBAAkB;AAAA;AAAA;AAAA,EAItB,eAAqB;AACnB,sBAAkB;AAClB,MAAE;AAAA;AAAA,EAGJ,WAAW,UAA0B;AAEnC,QAAI,CAAC,8BAA8B;AACjC;AAAA;AAEF,QAAI,UAAU;AACZ,QAAE;AAAA,WACG;AACL,uBAAiB,kBAAkB;AAAA;AAAA;AAAA,EAIvC,uBAA6B;AAC3B,0BAAsB;AAAA;AAAA,EAGxB,uBAA6B;AAC3B,QAAI,qBAAqB,GAAG;AAC1B,4BAAsB;AAAA;AAAA;AAAA,EAI1B,UAAkB;AAChB,WAAO,uBAAuB,KAAK,MAAO,kBAAiB,OAAO;AAAA;AAAA,sBAG1C;AACxB,QAAI,gBAAgB;AAClB,eAAS,IAAI,GAAG,IAAI,gBAAgB,EAAE,GAAG;AACvC,sBAAc;AAAA;AAEhB,oBAAc;AAAA,eACL,iBAAiB;AAC1B,oBAAc;AAAA;AAEhB,QAAI,kBAAkB;AACpB,eAAS,IAAI,GAAG,IAAI,kBAAkB,EAAE,GAAG;AACzC,sBAAc;AAAA;AAAA;AAGlB,qBAAiB;AACjB,sBAAkB;AAClB,uBAAmB;AAAA;AAAA,YAGH;AAChB,UAAM,cAAc,oBAAoB,IAAI;AAC5C,QAAI,aAAa;AACf,aAAO;AAAA;AAGT,QAAI,aAAa;AACjB,aAAS,IAAI,GAAG,IAAI,oBAAoB,EAAE,GAAG;AAC3C,oBAAc,KAAK;AAAA;AAIrB,QAAI,sBAAsB,IAAI;AAC5B,0BAAoB,IAAI,oBAAoB;AAAA;AAE9C,WAAO;AAAA;AAAA,WAGA,MAAoB;AAC3B,2BAAuB,KAAK;AAC5B,oCAAgC,KAAK;AAAA;AAAA,sBAGnB,kBAAgC;AAClD,QAAI,mBAAmB,+BAA+B,+BAA+B,6BAA6B;AAChH;AAAA;AAEF,SAAK,QAAQ,SAAS,KAAK;AAC3B,iCAA6B;AAC7B,SAAK,QAAQ,UAAU,KAAK;AAC5B,kCAA8B;AAAA;AAAA;",
  "names": []
}
