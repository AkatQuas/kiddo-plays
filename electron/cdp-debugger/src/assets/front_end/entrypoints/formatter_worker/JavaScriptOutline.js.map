{
  "version": 3,
  "sources": ["../../../../../../front_end/entrypoints/formatter_worker/JavaScriptOutline.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as AcornLoose from '../../third_party/acorn-loose/acorn-loose.js';\nimport * as Acorn from '../../third_party/acorn/acorn.js';\n\nimport {ECMA_VERSION} from './AcornTokenizer.js';\nimport {ESTreeWalker} from './ESTreeWalker.js';\nimport type {ChunkCallback} from './FormatterWorker.js';\n\nexport interface Item {\n  title: string;\n  subtitle?: string;\n  line: number;\n  column: number;\n}\n\nexport function javaScriptOutline(content: string, chunkCallback: ChunkCallback): void {\n  const chunkSize = 100000;\n  let chunk: Item[] = [];\n  let lastReportedOffset = 0;\n\n  let ast;\n  try {\n    ast = Acorn.parse(content, {ecmaVersion: ECMA_VERSION, ranges: false});\n  } catch (e) {\n    ast = AcornLoose.AcornLoose.parse(content, {ecmaVersion: ECMA_VERSION, ranges: false});\n  }\n\n  const contentLineEndings = Platform.StringUtilities.findLineEndingIndexes(content);\n  const textCursor = new TextUtils.TextCursor.TextCursor(contentLineEndings);\n  const walker = new ESTreeWalker(beforeVisit);\n\n  // @ts-ignore Technically, the acorn Node type is a subclass of Acorn.ESTree.Node.\n  // However, the acorn package currently exports its type without specifying\n  // this relationship. So while this is allowed on runtime, we can't properly\n  // typecheck it.\n  walker.walk(ast);\n\n  chunkCallback({chunk, isLastChunk: true});\n\n  function beforeVisit(node: Acorn.ESTree.Node): undefined {\n    if (node.type === 'ClassDeclaration') {\n      reportClass((node.id as Acorn.ESTree.Node));\n    } else if (node.type === 'VariableDeclarator' && node.init && isClassNode(node.init)) {\n      reportClass((node.id as Acorn.ESTree.Node));\n    } else if (node.type === 'AssignmentExpression' && isNameNode(node.left) && isClassNode(node.right)) {\n      reportClass((node.left as Acorn.ESTree.Node));\n    } else if (node.type === 'Property' && isNameNode(node.key) && isClassNode(node.value)) {\n      reportClass((node.key as Acorn.ESTree.Node));\n    } else if (node.type === 'FunctionDeclaration') {\n      reportFunction((node.id as Acorn.ESTree.Node), node);\n    } else if (node.type === 'VariableDeclarator' && node.init && isFunctionNode(node.init)) {\n      reportFunction((node.id as Acorn.ESTree.Node), (node.init as Acorn.ESTree.Node));\n    } else if (node.type === 'AssignmentExpression' && isNameNode(node.left) && isFunctionNode(node.right)) {\n      reportFunction((node.left as Acorn.ESTree.Node), (node.right as Acorn.ESTree.Node));\n    } else if (\n        (node.type === 'MethodDefinition' || node.type === 'Property') && isNameNode(node.key) &&\n        isFunctionNode(node.value)) {\n      const namePrefix = [];\n      if (node.kind === 'get' || node.kind === 'set') {\n        namePrefix.push(node.kind);\n      }\n      if ('static' in node && node.static) {\n        namePrefix.push('static');\n      }\n      reportFunction((node.key as Acorn.ESTree.Node), node.value, namePrefix.join(' '));\n    }\n\n    return undefined;\n  }\n\n  function reportClass(nameNode: Acorn.ESTree.Node): void {\n    const name = 'class ' + stringifyNameNode(nameNode);\n    textCursor.advance(nameNode.start);\n    addOutlineItem(name);\n  }\n\n  function reportFunction(nameNode: Acorn.ESTree.Node, functionNode: Acorn.ESTree.Node, namePrefix?: string): void {\n    let name = stringifyNameNode(nameNode);\n    const functionDeclarationNode = (functionNode as Acorn.ESTree.FunctionDeclaration);\n    if (functionDeclarationNode.generator) {\n      name = '*' + name;\n    }\n    if (namePrefix) {\n      name = namePrefix + ' ' + name;\n    }\n    if (functionDeclarationNode.async) {\n      name = 'async ' + name;\n    }\n\n    textCursor.advance(nameNode.start);\n    addOutlineItem(name, stringifyArguments((functionDeclarationNode.params as Acorn.ESTree.Node[])));\n  }\n\n  function isNameNode(node: Acorn.ESTree.Node): boolean {\n    if (!node) {\n      return false;\n    }\n    if (node.type === 'MemberExpression') {\n      return !node.computed && node.property.type === 'Identifier';\n    }\n    return node.type === 'Identifier';\n  }\n\n  function isFunctionNode(node: Acorn.ESTree.Node): boolean {\n    if (!node) {\n      return false;\n    }\n    return node.type === 'FunctionExpression' || node.type === 'ArrowFunctionExpression';\n  }\n\n  function isClassNode(node: Acorn.ESTree.Node): boolean {\n    return node !== undefined && node.type === 'ClassExpression';\n  }\n\n  function stringifyNameNode(node: Acorn.ESTree.Node): string {\n    if (node.type === 'MemberExpression') {\n      node = (node.property as Acorn.ESTree.Node);\n    }\n    console.assert(node.type === 'Identifier', 'Cannot extract identifier from unknown type: ' + node.type);\n    const identifier = (node as Acorn.ESTree.Identifier);\n    return identifier.name;\n  }\n\n  function stringifyArguments(params: Acorn.ESTree.Node[]): string {\n    const result = [];\n    for (const param of params) {\n      if (param.type === 'Identifier') {\n        result.push(param.name);\n      } else if (param.type === 'RestElement' && param.argument.type === 'Identifier') {\n        result.push('...' + param.argument.name);\n      } else {\n        console.error('Error: unexpected function parameter type: ' + param.type);\n      }\n    }\n    return '(' + result.join(', ') + ')';\n  }\n\n  function addOutlineItem(title: string, subtitle?: string): void {\n    const line = textCursor.lineNumber();\n    const column = textCursor.columnNumber();\n    chunk.push({title, subtitle, line, column});\n    if (textCursor.offset() - lastReportedOffset >= chunkSize) {\n      chunkCallback({chunk, isLastChunk: false});\n      chunk = [];\n      lastReportedOffset = textCursor.offset();\n    }\n  }\n}\n"],
  "mappings": "AAIA;AACA;AACA;AACA;AAEA;AACA;AAUO,kCAA2B,SAAiB,eAAoC;AACrF,QAAM,YAAY;AAClB,MAAI,QAAgB;AACpB,MAAI,qBAAqB;AAEzB,MAAI;AACJ,MAAI;AACF,UAAM,MAAM,MAAM,SAAS,EAAC,aAAa,cAAc,QAAQ;AAAA,WACxD,GAAP;AACA,UAAM,WAAW,WAAW,MAAM,SAAS,EAAC,aAAa,cAAc,QAAQ;AAAA;AAGjF,QAAM,qBAAqB,SAAS,gBAAgB,sBAAsB;AAC1E,QAAM,aAAa,IAAI,UAAU,WAAW,WAAW;AACvD,QAAM,SAAS,IAAI,aAAa;AAMhC,SAAO,KAAK;AAEZ,gBAAc,EAAC,OAAO,aAAa;AAEnC,uBAAqB,MAAoC;AACvD,QAAI,KAAK,SAAS,oBAAoB;AACpC,kBAAa,KAAK;AAAA,eACT,KAAK,SAAS,wBAAwB,KAAK,QAAQ,YAAY,KAAK,OAAO;AACpF,kBAAa,KAAK;AAAA,eACT,KAAK,SAAS,0BAA0B,WAAW,KAAK,SAAS,YAAY,KAAK,QAAQ;AACnG,kBAAa,KAAK;AAAA,eACT,KAAK,SAAS,cAAc,WAAW,KAAK,QAAQ,YAAY,KAAK,QAAQ;AACtF,kBAAa,KAAK;AAAA,eACT,KAAK,SAAS,uBAAuB;AAC9C,qBAAgB,KAAK,IAA0B;AAAA,eACtC,KAAK,SAAS,wBAAwB,KAAK,QAAQ,eAAe,KAAK,OAAO;AACvF,qBAAgB,KAAK,IAA2B,KAAK;AAAA,eAC5C,KAAK,SAAS,0BAA0B,WAAW,KAAK,SAAS,eAAe,KAAK,QAAQ;AACtG,qBAAgB,KAAK,MAA6B,KAAK;AAAA,eAEpD,MAAK,SAAS,sBAAsB,KAAK,SAAS,eAAe,WAAW,KAAK,QAClF,eAAe,KAAK,QAAQ;AAC9B,YAAM,aAAa;AACnB,UAAI,KAAK,SAAS,SAAS,KAAK,SAAS,OAAO;AAC9C,mBAAW,KAAK,KAAK;AAAA;AAEvB,UAAI,YAAY,QAAQ,KAAK,QAAQ;AACnC,mBAAW,KAAK;AAAA;AAElB,qBAAgB,KAAK,KAA2B,KAAK,OAAO,WAAW,KAAK;AAAA;AAG9E,WAAO;AAAA;AAGT,uBAAqB,UAAmC;AACtD,UAAM,OAAO,WAAW,kBAAkB;AAC1C,eAAW,QAAQ,SAAS;AAC5B,mBAAe;AAAA;AAGjB,0BAAwB,UAA6B,cAAiC,YAA2B;AAC/G,QAAI,OAAO,kBAAkB;AAC7B,UAAM,0BAA2B;AACjC,QAAI,wBAAwB,WAAW;AACrC,aAAO,MAAM;AAAA;AAEf,QAAI,YAAY;AACd,aAAO,aAAa,MAAM;AAAA;AAE5B,QAAI,wBAAwB,OAAO;AACjC,aAAO,WAAW;AAAA;AAGpB,eAAW,QAAQ,SAAS;AAC5B,mBAAe,MAAM,mBAAoB,wBAAwB;AAAA;AAGnE,sBAAoB,MAAkC;AACpD,QAAI,CAAC,MAAM;AACT,aAAO;AAAA;AAET,QAAI,KAAK,SAAS,oBAAoB;AACpC,aAAO,CAAC,KAAK,YAAY,KAAK,SAAS,SAAS;AAAA;AAElD,WAAO,KAAK,SAAS;AAAA;AAGvB,0BAAwB,MAAkC;AACxD,QAAI,CAAC,MAAM;AACT,aAAO;AAAA;AAET,WAAO,KAAK,SAAS,wBAAwB,KAAK,SAAS;AAAA;AAG7D,uBAAqB,MAAkC;AACrD,WAAO,SAAS,UAAa,KAAK,SAAS;AAAA;AAG7C,6BAA2B,MAAiC;AAC1D,QAAI,KAAK,SAAS,oBAAoB;AACpC,aAAQ,KAAK;AAAA;AAEf,YAAQ,OAAO,KAAK,SAAS,cAAc,kDAAkD,KAAK;AAClG,UAAM,aAAc;AACpB,WAAO,WAAW;AAAA;AAGpB,8BAA4B,QAAqC;AAC/D,UAAM,SAAS;AACf,eAAW,SAAS,QAAQ;AAC1B,UAAI,MAAM,SAAS,cAAc;AAC/B,eAAO,KAAK,MAAM;AAAA,iBACT,MAAM,SAAS,iBAAiB,MAAM,SAAS,SAAS,cAAc;AAC/E,eAAO,KAAK,QAAQ,MAAM,SAAS;AAAA,aAC9B;AACL,gBAAQ,MAAM,gDAAgD,MAAM;AAAA;AAAA;AAGxE,WAAO,MAAM,OAAO,KAAK,QAAQ;AAAA;AAGnC,0BAAwB,OAAe,UAAyB;AAC9D,UAAM,OAAO,WAAW;AACxB,UAAM,SAAS,WAAW;AAC1B,UAAM,KAAK,EAAC,OAAO,UAAU,MAAM;AACnC,QAAI,WAAW,WAAW,sBAAsB,WAAW;AACzD,oBAAc,EAAC,OAAO,aAAa;AACnC,cAAQ;AACR,2BAAqB,WAAW;AAAA;AAAA;AAAA;",
  "names": []
}
