{
  "version": 3,
  "sources": ["../../../../../../front_end/entrypoints/formatter_worker/CSSRuleParser.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type {Chunk, ChunkCallback} from './FormatterWorker.js';\nimport {createTokenizer} from './FormatterWorker.js';\n\nexport const CSSParserStates = {\n  Initial: 'Initial',\n  Selector: 'Selector',\n  Style: 'Style',\n  PropertyName: 'PropertyName',\n  PropertyValue: 'PropertyValue',\n  AtRule: 'AtRule',\n};\n\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Rule = any;\n\ninterface Property {\n  name: string;\n  value: string;\n  range: Range;\n  nameRange: Range;\n  valueRange?: Range;\n}\n\ninterface Range {\n  startLine: number;\n  startColumn: number;\n  endLine: number;\n  endColumn: number;\n}\n\nexport function parseCSS(text: string, chunkCallback: ChunkCallback): void {\n  const chunkSize = 100000;  // characters per data chunk\n  const lines = text.split('\\n');\n  let rules: Rule[] = [];\n  let processedChunkCharacters = 0;\n\n  let state: string = CSSParserStates.Initial;\n  let rule: Rule;\n  let property: Property;\n  const UndefTokenType = new Set();\n\n  let disabledRules: Rule[] = [];\n\n  function disabledRulesCallback(chunk: Chunk): void {\n    disabledRules = disabledRules.concat(chunk.chunk);\n  }\n\n  function cssTrim(tokenValue: string): string {\n    // https://drafts.csswg.org/css-syntax/#whitespace\n    const re = /^(?:\\r?\\n|[\\t\\f\\r ])+|(?:\\r?\\n|[\\t\\f\\r ])+$/g;\n    return tokenValue.replace(re, '');\n  }\n\n  function processToken(tokenValue: string, tokenTypes: string|null, column: number, newColumn: number): void {\n    const tokenType = tokenTypes ? new Set(tokenTypes.split(' ')) : UndefTokenType;\n    switch (state) {\n      case CSSParserStates.Initial:\n        if (tokenType.has('qualifier') || tokenType.has('builtin') || tokenType.has('tag')) {\n          rule = {\n            selectorText: tokenValue,\n            lineNumber: lineNumber,\n            columnNumber: column,\n            properties: [],\n          };\n          state = CSSParserStates.Selector;\n        } else if (tokenType.has('def')) {\n          rule = {\n            atRule: tokenValue,\n            lineNumber: lineNumber,\n            columnNumber: column,\n          };\n          state = CSSParserStates.AtRule;\n        }\n        break;\n      case CSSParserStates.Selector:\n        if (tokenValue === '{' && tokenType === UndefTokenType) {\n          rule.selectorText = cssTrim(rule.selectorText);\n          rule.styleRange = createRange(lineNumber, newColumn);\n          state = CSSParserStates.Style;\n        } else {\n          rule.selectorText += tokenValue;\n        }\n        break;\n      case CSSParserStates.AtRule:\n        if ((tokenValue === ';' || tokenValue === '{') && tokenType === UndefTokenType) {\n          rule.atRule = cssTrim(rule.atRule);\n          rules.push(rule);\n          state = CSSParserStates.Initial;\n        } else {\n          rule.atRule += tokenValue;\n        }\n        break;\n      case CSSParserStates.Style:\n        if (tokenType.has('meta') || tokenType.has('property') || tokenType.has('variable-2')) {\n          property = {\n            name: tokenValue,\n            value: '',\n            range: createRange(lineNumber, column),\n            nameRange: createRange(lineNumber, column),\n          };\n          state = CSSParserStates.PropertyName;\n        } else if (tokenValue === '}' && tokenType === UndefTokenType) {\n          rule.styleRange.endLine = lineNumber;\n          rule.styleRange.endColumn = column;\n          rules.push(rule);\n          state = CSSParserStates.Initial;\n        } else if (tokenType.has('comment')) {\n          // The |processToken| is called per-line, so no token spans more than one line.\n          // Support only a one-line comments.\n          if (tokenValue.substring(0, 2) !== '/*' || tokenValue.substring(tokenValue.length - 2) !== '*/') {\n            break;\n          }\n          const uncommentedText = tokenValue.substring(2, tokenValue.length - 2);\n          const fakeRule = 'a{\\n' + uncommentedText + '}';\n          disabledRules = [];\n          parseCSS(fakeRule, disabledRulesCallback);\n          if (disabledRules.length === 1 && disabledRules[0].properties.length === 1) {\n            const disabledProperty = disabledRules[0].properties[0];\n            disabledProperty.disabled = true;\n            disabledProperty.range = createRange(lineNumber, column);\n            disabledProperty.range.endColumn = newColumn;\n            const lineOffset = lineNumber - 1;\n            const columnOffset = column + 2;\n            disabledProperty.nameRange.startLine += lineOffset;\n            disabledProperty.nameRange.startColumn += columnOffset;\n            disabledProperty.nameRange.endLine += lineOffset;\n            disabledProperty.nameRange.endColumn += columnOffset;\n            disabledProperty.valueRange.startLine += lineOffset;\n            disabledProperty.valueRange.startColumn += columnOffset;\n            disabledProperty.valueRange.endLine += lineOffset;\n            disabledProperty.valueRange.endColumn += columnOffset;\n            rule.properties.push(disabledProperty);\n          }\n        }\n        break;\n      case CSSParserStates.PropertyName:\n        if (tokenValue === ':' && tokenType === UndefTokenType) {\n          property.name = property.name;\n          property.nameRange.endLine = lineNumber;\n          property.nameRange.endColumn = column;\n          property.valueRange = createRange(lineNumber, newColumn);\n          state = CSSParserStates.PropertyValue;\n        } else if (tokenType.has('property')) {\n          property.name += tokenValue;\n        }\n        break;\n      case CSSParserStates.PropertyValue:\n        if ((tokenValue === ';' || tokenValue === '}') && tokenType === UndefTokenType) {\n          property.value = property.value;\n          // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n          // @ts-expect-error\n          property.valueRange.endLine = lineNumber;\n          // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n          // @ts-expect-error\n          property.valueRange.endColumn = column;\n          property.range.endLine = lineNumber;\n          property.range.endColumn = tokenValue === ';' ? newColumn : column;\n          rule.properties.push(property);\n          if (tokenValue === '}') {\n            rule.styleRange.endLine = lineNumber;\n            rule.styleRange.endColumn = column;\n            rules.push(rule);\n            state = CSSParserStates.Initial;\n          } else {\n            state = CSSParserStates.Style;\n          }\n        } else if (!tokenType.has('comment')) {\n          property.value += tokenValue;\n        }\n        break;\n      default:\n        console.assert(false, 'Unknown CSS parser state.');\n    }\n    processedChunkCharacters += newColumn - column;\n    if (processedChunkCharacters > chunkSize) {\n      chunkCallback({chunk: rules, isLastChunk: false});\n      rules = [];\n      processedChunkCharacters = 0;\n    }\n  }\n  const tokenizer = createTokenizer('text/css');\n  let lineNumber: number;\n  for (lineNumber = 0; lineNumber < lines.length; ++lineNumber) {\n    const line = lines[lineNumber];\n    tokenizer(line, processToken);\n    processToken('\\n', null, line.length, line.length + 1);\n  }\n  chunkCallback({chunk: rules, isLastChunk: true});\n\n  function createRange(lineNumber: number, columnNumber: number): Range {\n    return {startLine: lineNumber, startColumn: columnNumber, endLine: lineNumber, endColumn: columnNumber};\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
