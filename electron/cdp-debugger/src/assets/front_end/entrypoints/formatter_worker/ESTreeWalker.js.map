{
  "version": 3,
  "sources": ["../../../../../../front_end/entrypoints/formatter_worker/ESTreeWalker.ts"],
  "sourcesContent": ["// Copyright (c) 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Acorn from '../../third_party/acorn/acorn.js';\n\nconst SkipSubTreeObject: Object = {};\n\nexport class ESTreeWalker {\n  readonly #beforeVisit: (arg0: Acorn.ESTree.Node) => (Object | undefined);\n  readonly #afterVisit: Function;\n  #walkNulls: boolean;\n\n  constructor(\n      beforeVisit: (arg0: Acorn.ESTree.Node) => (Object | undefined),\n      afterVisit?: ((arg0: Acorn.ESTree.Node) => void)) {\n    this.#beforeVisit = beforeVisit;\n    this.#afterVisit = afterVisit || function(): void {};\n    this.#walkNulls = false;\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static get SkipSubtree(): Object {\n    return SkipSubTreeObject;\n  }\n\n  setWalkNulls(value: boolean): void {\n    this.#walkNulls = value;\n  }\n\n  walk(ast: Acorn.ESTree.Node): void {\n    this.#innerWalk(ast, null);\n  }\n\n  #innerWalk(node: Acorn.ESTree.Node, parent: Acorn.ESTree.Node|null): void {\n    if (!node && parent && this.#walkNulls) {\n      const result = ({raw: 'null', value: null, parent: null} as Acorn.ESTree.SimpleLiteral);\n      // Otherwise Closure can't handle the definition\n      result.type = 'Literal';\n\n      node = result;\n    }\n\n    if (!node) {\n      return;\n    }\n    node.parent = parent;\n\n    if (this.#beforeVisit.call(null, node) === ESTreeWalker.SkipSubtree) {\n      this.#afterVisit.call(null, node);\n      return;\n    }\n\n    const walkOrder = _walkOrder[node.type];\n    if (!walkOrder) {\n      console.error('Walk order not defined for ' + node.type);\n      return;\n    }\n\n    if (node.type === 'TemplateLiteral') {\n      const templateLiteral = (node as Acorn.ESTree.TemplateLiteral);\n      const expressionsLength = templateLiteral.expressions.length;\n      for (let i = 0; i < expressionsLength; ++i) {\n        this.#innerWalk(templateLiteral.quasis[i], templateLiteral);\n        this.#innerWalk(templateLiteral.expressions[i], templateLiteral);\n      }\n      this.#innerWalk(templateLiteral.quasis[expressionsLength], templateLiteral);\n    } else {\n      for (let i = 0; i < walkOrder.length; ++i) {\n        // @ts-ignore We are doing type traversal here, but the strings\n        // in _walkOrder are not mapping. Preferably, we would use the\n        // properties as defined in the types, but we can't do that yet.\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const entity = (node[walkOrder[i]] as any);\n        if (Array.isArray(entity)) {\n          this.#walkArray((entity as Acorn.ESTree.Node[]), node);\n        } else {\n          this.#innerWalk((entity as Acorn.ESTree.Node), node);\n        }\n      }\n    }\n\n    this.#afterVisit.call(null, node);\n  }\n\n  #walkArray(nodeArray: Acorn.ESTree.Node[], parentNode: Acorn.ESTree.Node|null): void {\n    for (let i = 0; i < nodeArray.length; ++i) {\n      this.#innerWalk(nodeArray[i], parentNode);\n    }\n  }\n}\n\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst _walkOrder = {\n  'AwaitExpression': ['argument'],\n  'ArrayExpression': ['elements'],\n  'ArrayPattern': ['elements'],\n  'ArrowFunctionExpression': ['params', 'body'],\n  'AssignmentExpression': ['left', 'right'],\n  'AssignmentPattern': ['left', 'right'],\n  'BinaryExpression': ['left', 'right'],\n  'BlockStatement': ['body'],\n  'BreakStatement': ['label'],\n  'CallExpression': ['callee', 'arguments'],\n  'CatchClause': ['param', 'body'],\n  'ClassBody': ['body'],\n  'ClassDeclaration': ['id', 'superClass', 'body'],\n  'ClassExpression': ['id', 'superClass', 'body'],\n  'ChainExpression': ['expression'],\n  'ConditionalExpression': ['test', 'consequent', 'alternate'],\n  'ContinueStatement': ['label'],\n  'DebuggerStatement': [],\n  'DoWhileStatement': ['body', 'test'],\n  'EmptyStatement': [],\n  'ExpressionStatement': ['expression'],\n  'ForInStatement': ['left', 'right', 'body'],\n  'ForOfStatement': ['left', 'right', 'body'],\n  'ForStatement': ['init', 'test', 'update', 'body'],\n  'FunctionDeclaration': ['id', 'params', 'body'],\n  'FunctionExpression': ['id', 'params', 'body'],\n  'Identifier': [],\n  'ImportDeclaration': ['specifiers', 'source'],\n  'ImportDefaultSpecifier': ['local'],\n  'ImportNamespaceSpecifier': ['local'],\n  'ImportSpecifier': ['imported', 'local'],\n  'ImportExpression': ['source'],\n  'ExportAllDeclaration': ['source'],\n  'ExportDefaultDeclaration': ['declaration'],\n  'ExportNamedDeclaration': ['specifiers', 'source', 'declaration'],\n  'ExportSpecifier': ['exported', 'local'],\n  'IfStatement': ['test', 'consequent', 'alternate'],\n  'LabeledStatement': ['label', 'body'],\n  'Literal': [],\n  'LogicalExpression': ['left', 'right'],\n  'MemberExpression': ['object', 'property'],\n  'MetaProperty': ['meta', 'property'],\n  'MethodDefinition': ['key', 'value'],\n  'NewExpression': ['callee', 'arguments'],\n  'ObjectExpression': ['properties'],\n  'ObjectPattern': ['properties'],\n  'ParenthesizedExpression': ['expression'],\n  'PrivateIdentifier': [],\n  'PropertyDefinition': ['key', 'value'],\n  'Program': ['body'],\n  'Property': ['key', 'value'],\n  'RestElement': ['argument'],\n  'ReturnStatement': ['argument'],\n  'SequenceExpression': ['expressions'],\n  'SpreadElement': ['argument'],\n  'Super': [],\n  'SwitchCase': ['test', 'consequent'],\n  'SwitchStatement': ['discriminant', 'cases'],\n  'TaggedTemplateExpression': ['tag', 'quasi'],\n  'TemplateElement': [],\n  'TemplateLiteral': ['quasis', 'expressions'],\n  'ThisExpression': [],\n  'ThrowStatement': ['argument'],\n  'TryStatement': ['block', 'handler', 'finalizer'],\n  'UnaryExpression': ['argument'],\n  'UpdateExpression': ['argument'],\n  'VariableDeclaration': ['declarations'],\n  'VariableDeclarator': ['id', 'init'],\n  'WhileStatement': ['test', 'body'],\n  'WithStatement': ['object', 'body'],\n  'YieldExpression': ['argument'],\n};\n"],
  "mappings": "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",
  "names": []
}
