{
  "version": 3,
  "sources": ["../../../../../../front_end/entrypoints/lighthouse_worker/LighthouseWorkerService.ts"],
  "sourcesContent": ["// Copyright (c) 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Root from '../../core/root/root.js';\nimport * as Puppeteer from '../../services/puppeteer/puppeteer.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\n\nfunction disableLoggingForTest(): void {\n  console.log = (): void => undefined;  // eslint-disable-line no-console\n}\n\n/**\n * LegacyPort is provided to Lighthouse as the CDP connection in legacyNavigation mode.\n * Its complement is https://github.com/GoogleChrome/lighthouse/blob/v9.3.1/lighthouse-core/gather/connections/raw.js\n * It speaks pure CDP via notifyFrontendViaWorkerMessage\n *\n * Any message that comes back from Lighthouse has to go via a so-called \"port\".\n * This class holds the relevant callbacks that Lighthouse provides and that\n * can be called in the onmessage callback of the worker, so that the frontend\n * can communicate to Lighthouse. Lighthouse itself communicates to the frontend\n * via status updates defined below.\n */\nclass LegacyPort {\n  onMessage?: (message: string) => void;\n  onClose?: () => void;\n  on(eventName: string, callback: (arg?: string) => void): void {\n    if (eventName === 'message') {\n      this.onMessage = callback;\n    } else if (eventName === 'close') {\n      this.onClose = callback;\n    }\n  }\n\n  send(message: string): void {\n    notifyFrontendViaWorkerMessage('sendProtocolMessage', {message});\n  }\n  close(): void {\n  }\n}\n\n/**\n * ConnectionProxy is a SDK interface, but the implementation has no knowledge it's a parallelConnection.\n * The CDP traffic is smuggled back and forth by the system described in LighthouseProtocolService\n*/\nclass ConnectionProxy implements SDK.Connections.ParallelConnectionInterface {\n  sessionId: string;\n  onMessage: ((arg0: Object) => void)|null;\n  onDisconnect: ((arg0: string) => void)|null;\n\n  constructor(sessionId: string) {\n    this.sessionId = sessionId;\n    this.onMessage = null;\n    this.onDisconnect = null;\n  }\n\n  setOnMessage(onMessage: (arg0: (Object|string)) => void): void {\n    this.onMessage = onMessage;\n  }\n\n  setOnDisconnect(onDisconnect: (arg0: string) => void): void {\n    this.onDisconnect = onDisconnect;\n  }\n\n  getOnDisconnect(): (((arg0: string) => void)|null) {\n    return this.onDisconnect;\n  }\n\n  getSessionId(): string {\n    return this.sessionId;\n  }\n\n  sendRawMessage(message: string): void {\n    notifyFrontendViaWorkerMessage('sendProtocolMessage', {message});\n  }\n\n  async disconnect(): Promise<void> {\n    this.onDisconnect?.('force disconnect');\n    this.onDisconnect = null;\n    this.onMessage = null;\n  }\n}\n\nconst legacyPort = new LegacyPort();\nlet cdpConnection: ConnectionProxy|undefined;\nlet endTimespan: (() => unknown)|undefined;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function invokeLH(action: string, args: any): Promise<unknown> {\n  if (Root.Runtime.Runtime.queryParam('isUnderTest')) {\n    disableLoggingForTest();\n    args.flags.maxWaitForLoad = 2 * 1000;\n  }\n\n  // @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\n  self.listenForStatus(message => {\n    notifyFrontendViaWorkerMessage('statusUpdate', {message: message[1]});\n  });\n\n  let puppeteerConnection: Awaited<ReturnType<typeof Puppeteer.PuppeteerConnection['getPuppeteerConnection']>>|\n      undefined;\n\n  try {\n    // For timespan we only need to perform setup on startTimespan.\n    // Config, flags, locale, etc. should be stored in the closure of endTimespan.\n    if (action === 'endTimespan') {\n      if (!endTimespan) {\n        throw new Error('Cannot end a timespan before starting one');\n      }\n      const result = await endTimespan();\n      endTimespan = undefined;\n      return result;\n    }\n\n    const locale = await fetchLocaleData(args.locales);\n    const flags = args.flags;\n    flags.logLevel = flags.logLevel || 'info';\n    flags.channel = 'devtools';\n    flags.locale = locale;\n\n    // TODO: Remove this filter once pubads is mode restricted\n    // https://github.com/googleads/publisher-ads-lighthouse-plugin/pull/339\n    if (action === 'startTimespan' || action === 'snapshot') {\n      args.categoryIDs = args.categoryIDs.filter((c: string) => c !== 'lighthouse-plugin-publisher-ads');\n    }\n\n    // @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\n    const config = self.createConfig(args.categoryIDs, flags.emulatedFormFactor);\n    const url = args.url;\n\n    // Handle legacy Lighthouse runner path.\n    if (action === 'navigation' && flags.legacyNavigation) {\n      // @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\n      const connection = self.setUpWorkerConnection(legacyPort);\n      // @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\n      return await self.runLighthouse(url, flags, config, connection);\n    }\n\n    const {mainTargetId, mainFrameId, mainSessionId} = args.target;\n    cdpConnection = new ConnectionProxy(mainSessionId);\n    puppeteerConnection =\n        await Puppeteer.PuppeteerConnection.getPuppeteerConnection(cdpConnection, mainFrameId, mainTargetId);\n    const {page} = puppeteerConnection;\n    const configContext = {\n      logLevel: flags.logLevel,\n      settingsOverrides: flags,\n    };\n\n    if (action === 'snapshot') {\n      // @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\n      return await self.runLighthouseSnapshot({config, page, configContext});\n    }\n\n    if (action === 'startTimespan') {\n      // @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\n      const timespan = await self.startLighthouseTimespan({config, page, configContext});\n      endTimespan = timespan.endTimespan;\n      return;\n    }\n\n    // @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\n    return await self.runLighthouseNavigation(url, {config, page, configContext});\n  } catch (err) {\n    return ({\n      fatal: true,\n      message: err.message,\n      stack: err.stack,\n    });\n  } finally {\n    // endTimespan will need to use the same connection as startTimespan.\n    if (action !== 'startTimespan') {\n      puppeteerConnection?.browser.disconnect();\n    }\n  }\n}\n\n/**\n * Finds a locale supported by Lighthouse from the user's system locales.\n * If no matching locale is found, or if fetching locale data fails, this function returns nothing\n * and Lighthouse will use `en-US` by default.\n */\nasync function fetchLocaleData(locales: string[]): Promise<string|void> {\n  // @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\n  const locale = self.lookupLocale(locales);\n\n  // If the locale is en-US, no need to fetch locale data.\n  if (locale === 'en-US' || locale === 'en') {\n    return;\n  }\n\n  // Try to load the locale data.\n  try {\n    const remoteBase = Root.Runtime.getRemoteBase();\n    let localeUrl: string;\n    if (remoteBase && remoteBase.base) {\n      localeUrl = `${remoteBase.base}third_party/lighthouse/locales/${locale}.json`;\n    } else {\n      localeUrl = new URL(`../../third_party/lighthouse/locales/${locale}.json`, import.meta.url).toString();\n    }\n\n    const timeoutPromise = new Promise<string>(\n        (resolve, reject) => setTimeout(() => reject(new Error('timed out fetching locale')), 5000));\n    const localeData = await Promise.race([timeoutPromise, fetch(localeUrl).then(result => result.json())]);\n    // @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\n    self.registerLocaleData(locale, localeData);\n    return locale;\n  } catch (err) {\n    console.error(err);\n  }\n\n  return;\n}\n\n/**\n * `notifyFrontendViaWorkerMessage` and `onFrontendMessage` work with the FE's ProtocolService.\n *\n * onFrontendMessage takes action-wrapped messages and either invoking lighthouse or delivering it CDP traffic.\n * notifyFrontendViaWorkerMessage posts action-wrapped messages to the FE.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction notifyFrontendViaWorkerMessage(action: string, args: any): void {\n  self.postMessage(JSON.stringify({action, args}));\n}\n\nasync function onFrontendMessage(event: MessageEvent): Promise<void> {\n  const messageFromFrontend = JSON.parse(event.data);\n  switch (messageFromFrontend.action) {\n    case 'startTimespan':\n    case 'endTimespan':\n    case 'snapshot':\n    case 'navigation': {\n      const result = await invokeLH(messageFromFrontend.action, messageFromFrontend.args);\n      self.postMessage(JSON.stringify({id: messageFromFrontend.id, result}));\n      break;\n    }\n    case 'dispatchProtocolMessage': {\n      cdpConnection?.onMessage?.(\n          JSON.parse(messageFromFrontend.args.message),\n      );\n      legacyPort.onMessage?.(messageFromFrontend.args.message);\n      break;\n    }\n    default: {\n      throw new Error(`Unknown event: ${event.data}`);\n    }\n  }\n}\n\nself.onmessage = onFrontendMessage;\n\n// Make lighthouse and traceviewer happy.\n// @ts-ignore https://github.com/GoogleChrome/lighthouse/issues/11628\nglobalThis.global = self;\n// @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\nglobalThis.global.isVinn = true;\n// @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\nglobalThis.global.document = {};\n// @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\nglobalThis.global.document.documentElement = {};\n// @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\nglobalThis.global.document.documentElement.style = {\n  WebkitAppearance: 'WebkitAppearance',\n};\n"],
  "mappings": "AAIA;AACA;AAGA,iCAAuC;AACrC,UAAQ,MAAM,MAAY;AAAA;AAc5B,iBAAiB;AAAA,EACf;AAAA,EACA;AAAA,EACA,GAAG,WAAmB,UAAwC;AAC5D,QAAI,cAAc,WAAW;AAC3B,WAAK,YAAY;AAAA,eACR,cAAc,SAAS;AAChC,WAAK,UAAU;AAAA;AAAA;AAAA,EAInB,KAAK,SAAuB;AAC1B,mCAA+B,uBAAuB,EAAC;AAAA;AAAA,EAEzD,QAAc;AAAA;AAAA;AAQhB,sBAA6E;AAAA,EAC3E;AAAA,EACA;AAAA,EACA;AAAA,EAEA,YAAY,WAAmB;AAC7B,SAAK,YAAY;AACjB,SAAK,YAAY;AACjB,SAAK,eAAe;AAAA;AAAA,EAGtB,aAAa,WAAkD;AAC7D,SAAK,YAAY;AAAA;AAAA,EAGnB,gBAAgB,cAA4C;AAC1D,SAAK,eAAe;AAAA;AAAA,EAGtB,kBAAmD;AACjD,WAAO,KAAK;AAAA;AAAA,EAGd,eAAuB;AACrB,WAAO,KAAK;AAAA;AAAA,EAGd,eAAe,SAAuB;AACpC,mCAA+B,uBAAuB,EAAC;AAAA;AAAA,QAGnD,aAA4B;AAChC,SAAK,eAAe;AACpB,SAAK,eAAe;AACpB,SAAK,YAAY;AAAA;AAAA;AAIrB,MAAM,aAAa,IAAI;AACvB,IAAI;AACJ,IAAI;AAGJ,wBAAwB,QAAgB,MAA6B;AACnE,MAAI,KAAK,QAAQ,QAAQ,WAAW,gBAAgB;AAClD;AACA,SAAK,MAAM,iBAAiB,IAAI;AAAA;AAIlC,OAAK,gBAAgB,aAAW;AAC9B,mCAA+B,gBAAgB,EAAC,SAAS,QAAQ;AAAA;AAGnE,MAAI;AAGJ,MAAI;AAGF,QAAI,WAAW,eAAe;AAC5B,UAAI,CAAC,aAAa;AAChB,cAAM,IAAI,MAAM;AAAA;AAElB,YAAM,SAAS,MAAM;AACrB,oBAAc;AACd,aAAO;AAAA;AAGT,UAAM,SAAS,MAAM,gBAAgB,KAAK;AAC1C,UAAM,QAAQ,KAAK;AACnB,UAAM,WAAW,MAAM,YAAY;AACnC,UAAM,UAAU;AAChB,UAAM,SAAS;AAIf,QAAI,WAAW,mBAAmB,WAAW,YAAY;AACvD,WAAK,cAAc,KAAK,YAAY,OAAO,CAAC,MAAc,MAAM;AAAA;AAIlE,UAAM,SAAS,KAAK,aAAa,KAAK,aAAa,MAAM;AACzD,UAAM,MAAM,KAAK;AAGjB,QAAI,WAAW,gBAAgB,MAAM,kBAAkB;AAErD,YAAM,aAAa,KAAK,sBAAsB;AAE9C,aAAO,MAAM,KAAK,cAAc,KAAK,OAAO,QAAQ;AAAA;AAGtD,UAAM,EAAC,cAAc,aAAa,kBAAiB,KAAK;AACxD,oBAAgB,IAAI,gBAAgB;AACpC,0BACI,MAAM,UAAU,oBAAoB,uBAAuB,eAAe,aAAa;AAC3F,UAAM,EAAC,SAAQ;AACf,UAAM,gBAAgB;AAAA,MACpB,UAAU,MAAM;AAAA,MAChB,mBAAmB;AAAA;AAGrB,QAAI,WAAW,YAAY;AAEzB,aAAO,MAAM,KAAK,sBAAsB,EAAC,QAAQ,MAAM;AAAA;AAGzD,QAAI,WAAW,iBAAiB;AAE9B,YAAM,WAAW,MAAM,KAAK,wBAAwB,EAAC,QAAQ,MAAM;AACnE,oBAAc,SAAS;AACvB;AAAA;AAIF,WAAO,MAAM,KAAK,wBAAwB,KAAK,EAAC,QAAQ,MAAM;AAAA,WACvD,KAAP;AACA,WAAQ;AAAA,MACN,OAAO;AAAA,MACP,SAAS,IAAI;AAAA,MACb,OAAO,IAAI;AAAA;AAAA,YAEb;AAEA,QAAI,WAAW,iBAAiB;AAC9B,2BAAqB,QAAQ;AAAA;AAAA;AAAA;AAUnC,+BAA+B,SAAyC;AAEtE,QAAM,SAAS,KAAK,aAAa;AAGjC,MAAI,WAAW,WAAW,WAAW,MAAM;AACzC;AAAA;AAIF,MAAI;AACF,UAAM,aAAa,KAAK,QAAQ;AAChC,QAAI;AACJ,QAAI,cAAc,WAAW,MAAM;AACjC,kBAAY,GAAG,WAAW,sCAAsC;AAAA,WAC3D;AACL,kBAAY,IAAI,IAAI,wCAAwC,eAAe,YAAY,KAAK;AAAA;AAG9F,UAAM,iBAAiB,IAAI,QACvB,CAAC,SAAS,WAAW,WAAW,MAAM,OAAO,IAAI,MAAM,+BAA+B;AAC1F,UAAM,aAAa,MAAM,QAAQ,KAAK,CAAC,gBAAgB,MAAM,WAAW,KAAK,YAAU,OAAO;AAE9F,SAAK,mBAAmB,QAAQ;AAChC,WAAO;AAAA,WACA,KAAP;AACA,YAAQ,MAAM;AAAA;AAGhB;AAAA;AAUF,wCAAwC,QAAgB,MAAiB;AACvE,OAAK,YAAY,KAAK,UAAU,EAAC,QAAQ;AAAA;AAG3C,iCAAiC,OAAoC;AACnE,QAAM,sBAAsB,KAAK,MAAM,MAAM;AAC7C,UAAQ,oBAAoB;AAAA,SACrB;AAAA,SACA;AAAA,SACA;AAAA,SACA,cAAc;AACjB,YAAM,SAAS,MAAM,SAAS,oBAAoB,QAAQ,oBAAoB;AAC9E,WAAK,YAAY,KAAK,UAAU,EAAC,IAAI,oBAAoB,IAAI;AAC7D;AAAA;AAAA,SAEG,2BAA2B;AAC9B,qBAAe,YACX,KAAK,MAAM,oBAAoB,KAAK;AAExC,iBAAW,YAAY,oBAAoB,KAAK;AAChD;AAAA;AAAA,aAEO;AACP,YAAM,IAAI,MAAM,kBAAkB,MAAM;AAAA;AAAA;AAAA;AAK9C,KAAK,YAAY;AAIjB,WAAW,SAAS;AAEpB,WAAW,OAAO,SAAS;AAE3B,WAAW,OAAO,WAAW;AAE7B,WAAW,OAAO,SAAS,kBAAkB;AAE7C,WAAW,OAAO,SAAS,gBAAgB,QAAQ;AAAA,EACjD,kBAAkB;AAAA;",
  "names": []
}
