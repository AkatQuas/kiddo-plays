{
  "version": 3,
  "sources": ["../../../../../../front_end/legacy_test_runner/test_runner/test_runner.js"],
  "sourcesContent": ["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n// @ts-nocheck This file is not checked by TypeScript as it has a lot of legacy code.\nimport * as Platform from '../../core/platform/platform.js';\nimport * as TestRunner from './TestRunner.js';\n\nexport {\n  TestRunner,\n};\n\nself.Platform = self.Platform || {};\nself.Platform.StringUtilities = Platform.StringUtilities;\n\n/**\n * @param {!SDK.Target} target\n */\nfunction _setupTestHelpers(target) {\n  self.TestRunner.BrowserAgent = target.browserAgent();\n  self.TestRunner.CSSAgent = target.cssAgent();\n  self.TestRunner.DeviceOrientationAgent = target.deviceOrientationAgent();\n  self.TestRunner.DOMAgent = target.domAgent();\n  self.TestRunner.DOMDebuggerAgent = target.domdebuggerAgent();\n  self.TestRunner.DebuggerAgent = target.debuggerAgent();\n  self.TestRunner.EmulationAgent = target.emulationAgent();\n  self.TestRunner.HeapProfilerAgent = target.heapProfilerAgent();\n  self.TestRunner.InputAgent = target.inputAgent();\n  self.TestRunner.InspectorAgent = target.inspectorAgent();\n  self.TestRunner.NetworkAgent = target.networkAgent();\n  self.TestRunner.OverlayAgent = target.overlayAgent();\n  self.TestRunner.PageAgent = target.pageAgent();\n  self.TestRunner.ProfilerAgent = target.profilerAgent();\n  self.TestRunner.RuntimeAgent = target.runtimeAgent();\n  self.TestRunner.TargetAgent = target.targetAgent();\n\n  self.TestRunner.networkManager = target.model(SDK.NetworkManager);\n  self.TestRunner.securityOriginManager = target.model(SDK.SecurityOriginManager);\n  self.TestRunner.resourceTreeModel = target.model(SDK.ResourceTreeModel);\n  self.TestRunner.debuggerModel = target.model(SDK.DebuggerModel);\n  self.TestRunner.runtimeModel = target.model(SDK.RuntimeModel);\n  self.TestRunner.domModel = target.model(SDK.DOMModel);\n  self.TestRunner.domDebuggerModel = target.model(SDK.DOMDebuggerModel);\n  self.TestRunner.cssModel = target.model(SDK.CSSModel);\n  self.TestRunner.cpuProfilerModel = target.model(SDK.CPUProfilerModel);\n  self.TestRunner.overlayModel = target.model(SDK.OverlayModel);\n  self.TestRunner.serviceWorkerManager = target.model(SDK.ServiceWorkerManager);\n  self.TestRunner.tracingManager = target.model(SDK.TracingManager);\n  self.TestRunner.mainTarget = target;\n}\n\nexport async function _executeTestScript() {\n  const testScriptURL = /** @type {string} */ (Root.Runtime.queryParam('test'));\n  if (TestRunner.isDebugTest()) {\n    /* eslint-disable no-console */\n    TestRunner.setInnerResult(console.log);\n    TestRunner.setInnerCompleteTest(() => console.log('Test completed'));\n    /* eslint-enable no-console */\n\n    // Auto-start unit tests\n    self.test = async function() {\n      await import(testScriptURL);\n    };\n    return;\n  }\n\n  try {\n    await import(testScriptURL);\n  } catch (err) {\n    TestRunner.addResult('TEST ENDED EARLY DUE TO UNCAUGHT ERROR:');\n    TestRunner.addResult(err && err.stack || err);\n    TestRunner.addResult('=== DO NOT COMMIT THIS INTO -expected.txt ===');\n    TestRunner.completeTest();\n  }\n}\n\n/** @type {boolean} */\nlet _startedTest = false;\n\n/**\n * @implements {SDK.TargetManager.Observer}\n */\nexport class _TestObserver {\n  /**\n   * @param {!SDK.Target} target\n   * @override\n   */\n  targetAdded(target) {\n    if (target.id() === 'main') {\n      _setupTestHelpers(target);\n    }\n    if (_startedTest) {\n      return;\n    }\n    _startedTest = true;\n    TestRunner\n        .loadHTML(`\n      <head>\n        <base href=\"${TestRunner.url()}\">\n      </head>\n      <body>\n      </body>\n    `).then(() => _executeTestScript());\n  }\n\n  /**\n   * @param {!SDK.Target} target\n   * @override\n   */\n  targetRemoved(target) {\n  }\n}\n\nSDK.targetManager.observeTargets(new _TestObserver());\n"],
  "mappings": "AAKA;AACA;AAEA;AAAA;AAAA;AAIA,KAAK,WAAW,KAAK,YAAY;AACjC,KAAK,SAAS,kBAAkB,SAAS;AAKzC,2BAA2B,QAAQ;AACjC,OAAK,WAAW,eAAe,OAAO;AACtC,OAAK,WAAW,WAAW,OAAO;AAClC,OAAK,WAAW,yBAAyB,OAAO;AAChD,OAAK,WAAW,WAAW,OAAO;AAClC,OAAK,WAAW,mBAAmB,OAAO;AAC1C,OAAK,WAAW,gBAAgB,OAAO;AACvC,OAAK,WAAW,iBAAiB,OAAO;AACxC,OAAK,WAAW,oBAAoB,OAAO;AAC3C,OAAK,WAAW,aAAa,OAAO;AACpC,OAAK,WAAW,iBAAiB,OAAO;AACxC,OAAK,WAAW,eAAe,OAAO;AACtC,OAAK,WAAW,eAAe,OAAO;AACtC,OAAK,WAAW,YAAY,OAAO;AACnC,OAAK,WAAW,gBAAgB,OAAO;AACvC,OAAK,WAAW,eAAe,OAAO;AACtC,OAAK,WAAW,cAAc,OAAO;AAErC,OAAK,WAAW,iBAAiB,OAAO,MAAM,IAAI;AAClD,OAAK,WAAW,wBAAwB,OAAO,MAAM,IAAI;AACzD,OAAK,WAAW,oBAAoB,OAAO,MAAM,IAAI;AACrD,OAAK,WAAW,gBAAgB,OAAO,MAAM,IAAI;AACjD,OAAK,WAAW,eAAe,OAAO,MAAM,IAAI;AAChD,OAAK,WAAW,WAAW,OAAO,MAAM,IAAI;AAC5C,OAAK,WAAW,mBAAmB,OAAO,MAAM,IAAI;AACpD,OAAK,WAAW,WAAW,OAAO,MAAM,IAAI;AAC5C,OAAK,WAAW,mBAAmB,OAAO,MAAM,IAAI;AACpD,OAAK,WAAW,eAAe,OAAO,MAAM,IAAI;AAChD,OAAK,WAAW,uBAAuB,OAAO,MAAM,IAAI;AACxD,OAAK,WAAW,iBAAiB,OAAO,MAAM,IAAI;AAClD,OAAK,WAAW,aAAa;AAAA;AAG/B,2CAA2C;AACzC,QAAM,gBAAuC,KAAK,QAAQ,WAAW;AACrE,MAAI,WAAW,eAAe;AAE5B,eAAW,eAAe,QAAQ;AAClC,eAAW,qBAAqB,MAAM,QAAQ,IAAI;AAIlD,SAAK,OAAO,iBAAiB;AAC3B,YAAM,OAAO;AAAA;AAEf;AAAA;AAGF,MAAI;AACF,UAAM,OAAO;AAAA,WACN,KAAP;AACA,eAAW,UAAU;AACrB,eAAW,UAAU,OAAO,IAAI,SAAS;AACzC,eAAW,UAAU;AACrB,eAAW;AAAA;AAAA;AAKf,IAAI,eAAe;AAKZ,2BAAoB;AAAA,EAKzB,YAAY,QAAQ;AAClB,QAAI,OAAO,SAAS,QAAQ;AAC1B,wBAAkB;AAAA;AAEpB,QAAI,cAAc;AAChB;AAAA;AAEF,mBAAe;AACf,eACK,SAAS;AAAA;AAAA,sBAEI,WAAW;AAAA;AAAA;AAAA;AAAA,OAI1B,KAAK,MAAM;AAAA;AAAA,EAOhB,cAAc,QAAQ;AAAA;AAAA;AAIxB,IAAI,cAAc,eAAe,IAAI;",
  "names": []
}
