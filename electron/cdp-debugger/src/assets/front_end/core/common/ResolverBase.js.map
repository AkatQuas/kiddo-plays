{
  "version": 3,
  "sources": ["../../../../../../front_end/core/common/ResolverBase.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\ninterface PromiseInfo<T> {\n  promise: Promise<T>;\n  resolve: (obj: T) => void;\n  reject: (error: Error) => void;\n}\n\n/**\n  * A class that facilitates resolving a id to an object of type T. If the id does not yet resolve, a promise\n  * is created that gets resolved once `onResolve` is called with the corresponding id.\n  *\n  * This class enables clients to control the duration of the wait and the lifetime of the associated\n  * promises by using the `clear` method on this class.\n  */\nexport abstract class ResolverBase<Id, T> {\n  #unresolvedIds: Map<Id, PromiseInfo<T>> = new Map();\n\n  protected abstract getForId(id: Id): T|null;\n  protected abstract startListening(): void;\n  protected abstract stopListening(): void;\n\n  /**\n   * Returns a promise that resolves once the `id` can be resolved to an object.\n   */\n  async waitFor(id: Id): Promise<T> {\n    const obj = this.getForId(id);\n    if (!obj) {\n      return this.getOrCreatePromise(id);\n    }\n    return obj;\n  }\n\n  /**\n   * Resolve the `id`. Returns the object immediatelly if it can be resolved,\n   * and otherwise waits for the object to appear and calls `callback` once\n   * it is resolved.\n   */\n  tryGet(id: Id, callback: (t: T) => void): T|null {\n    const obj = this.getForId(id);\n    if (!obj) {\n      const swallowTheError = (): void => {};\n      void this.getOrCreatePromise(id).catch(swallowTheError).then(obj => {\n        if (obj) {\n          callback(obj);\n        }\n      });\n      return null;\n    }\n    return obj;\n  }\n\n  /**\n   * Aborts all waiting and rejects all unresolved promises.\n   */\n  clear(): void {\n    this.stopListening();\n    for (const [id, {reject}] of this.#unresolvedIds.entries()) {\n      reject(new Error(`Object with ${id} never resolved.`));\n    }\n    this.#unresolvedIds.clear();\n  }\n\n  private getOrCreatePromise(id: Id): Promise<T> {\n    const promiseInfo = this.#unresolvedIds.get(id);\n    if (promiseInfo) {\n      return promiseInfo.promise;\n    }\n    let resolve: (value: T) => void = () => {};\n    let reject: (error: Error) => void = () => {};\n    const promise = new Promise<T>((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n    this.#unresolvedIds.set(id, {promise, resolve, reject});\n    this.startListening();\n    return promise;\n  }\n\n  protected onResolve(id: Id, t: T): void {\n    const promiseInfo = this.#unresolvedIds.get(id);\n    this.#unresolvedIds.delete(id);\n    if (this.#unresolvedIds.size === 0) {\n      this.stopListening();\n    }\n    promiseInfo?.resolve(t);\n  }\n}\n"],
  "mappings": "AAiBO,0BAAmC;AAAA,mBACE,oBAAI;AAAA,QASxC,QAAQ,IAAoB;AAChC,UAAM,MAAM,KAAK,SAAS;AAC1B,QAAI,CAAC,KAAK;AACR,aAAO,KAAK,mBAAmB;AAAA;AAEjC,WAAO;AAAA;AAAA,EAQT,OAAO,IAAQ,UAAkC;AAC/C,UAAM,MAAM,KAAK,SAAS;AAC1B,QAAI,CAAC,KAAK;AACR,YAAM,kBAAkB,MAAY;AAAA;AACpC,WAAK,KAAK,mBAAmB,IAAI,MAAM,iBAAiB,KAAK,UAAO;AAClE,YAAI,MAAK;AACP,mBAAS;AAAA;AAAA;AAGb,aAAO;AAAA;AAET,WAAO;AAAA;AAAA,EAMT,QAAc;AACZ,SAAK;AACL,eAAW,CAAC,IAAI,EAAC,aAAY,oBAAoB,WAAW;AAC1D,aAAO,IAAI,MAAM,eAAe;AAAA;AAElC,wBAAoB;AAAA;AAAA,EAGd,mBAAmB,IAAoB;AAC7C,UAAM,cAAc,oBAAoB,IAAI;AAC5C,QAAI,aAAa;AACf,aAAO,YAAY;AAAA;AAErB,QAAI,UAA8B,MAAM;AAAA;AACxC,QAAI,SAAiC,MAAM;AAAA;AAC3C,UAAM,UAAU,IAAI,QAAW,CAAC,KAAK,QAAQ;AAC3C,gBAAU;AACV,eAAS;AAAA;AAEX,wBAAoB,IAAI,IAAI,EAAC,SAAS,SAAS;AAC/C,SAAK;AACL,WAAO;AAAA;AAAA,EAGC,UAAU,IAAQ,GAAY;AACtC,UAAM,cAAc,oBAAoB,IAAI;AAC5C,wBAAoB,OAAO;AAC3B,QAAI,oBAAoB,SAAS,GAAG;AAClC,WAAK;AAAA;AAEP,iBAAa,QAAQ;AAAA;AAAA;",
  "names": []
}
