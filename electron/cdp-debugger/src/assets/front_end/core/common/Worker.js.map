{
  "version": 3,
  "sources": ["../../../../../../front_end/core/common/Worker.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2014 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nexport class WorkerWrapper {\n  readonly #workerPromise: Promise<Worker>;\n  #disposed?: boolean;\n\n  private constructor(workerLocation: URL) {\n    this.#workerPromise = new Promise(fulfill => {\n      const worker = new Worker(workerLocation, {type: 'module'});\n      worker.onmessage = (event: MessageEvent<unknown>): void => {\n        console.assert(event.data === 'workerReady');\n        worker.onmessage = null;\n        fulfill(worker);\n      };\n    });\n  }\n\n  static fromURL(url: URL): WorkerWrapper {\n    return new WorkerWrapper(url);\n  }\n\n  postMessage(message: unknown): void {\n    void this.#workerPromise.then(worker => {\n      if (!this.#disposed) {\n        worker.postMessage(message);\n      }\n    });\n  }\n\n  dispose(): void {\n    this.#disposed = true;\n    void this.#workerPromise.then(worker => worker.terminate());\n  }\n\n  terminate(): void {\n    this.dispose();\n  }\n\n  set onmessage(listener: (event: MessageEvent) => void) {\n    void this.#workerPromise.then(worker => {\n      worker.onmessage = listener;\n    });\n  }\n\n  set onerror(listener: (event: Event) => void) {\n    void this.#workerPromise.then(worker => {\n      worker.onerror = listener;\n    });\n  }\n}\n"],
  "mappings": "AA8BO,2BAAoB;AAAA;AAAA;AAAA,EAIjB,YAAY,gBAAqB;AACvC,0BAAsB,IAAI,QAAQ,aAAW;AAC3C,YAAM,SAAS,IAAI,OAAO,gBAAgB,EAAC,MAAM;AACjD,aAAO,YAAY,CAAC,UAAuC;AACzD,gBAAQ,OAAO,MAAM,SAAS;AAC9B,eAAO,YAAY;AACnB,gBAAQ;AAAA;AAAA;AAAA;AAAA,SAKP,QAAQ,KAAyB;AACtC,WAAO,IAAI,cAAc;AAAA;AAAA,EAG3B,YAAY,SAAwB;AAClC,SAAK,oBAAoB,KAAK,YAAU;AACtC,UAAI,CAAC,gBAAgB;AACnB,eAAO,YAAY;AAAA;AAAA;AAAA;AAAA,EAKzB,UAAgB;AACd,qBAAiB;AACjB,SAAK,oBAAoB,KAAK,YAAU,OAAO;AAAA;AAAA,EAGjD,YAAkB;AAChB,SAAK;AAAA;AAAA,MAGH,UAAU,UAAyC;AACrD,SAAK,oBAAoB,KAAK,YAAU;AACtC,aAAO,YAAY;AAAA;AAAA;AAAA,MAInB,QAAQ,UAAkC;AAC5C,SAAK,oBAAoB,KAAK,YAAU;AACtC,aAAO,UAAU;AAAA;AAAA;AAAA;",
  "names": []
}
