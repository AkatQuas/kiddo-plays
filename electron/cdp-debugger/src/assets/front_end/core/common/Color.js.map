{
  "version": 3,
  "sources": ["../../../../../../front_end/core/common/Color.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2009 Apple Inc.  All rights reserved.\n * Copyright (C) 2009 Joseph Pecoraro\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Platform from '../platform/platform.js';\n\nimport {\n  blendColors,\n  contrastRatioAPCA,\n  desiredLuminanceAPCA,\n  luminance,\n  luminanceAPCA,\n  rgbaToHsla,\n  rgbaToHwba,\n} from './ColorUtils.js';\n\nexport class Color {\n  #hslaInternal: number[]|undefined;\n  #hwbaInternal: number[]|undefined;\n  #rgbaInternal: number[];\n  #originalText: string|null;\n  readonly #originalTextIsValid: boolean;\n  #formatInternal: Format;\n\n  constructor(rgba: number[], format: Format, originalText?: string) {\n    this.#hslaInternal = undefined;\n    this.#hwbaInternal = undefined;\n    this.#rgbaInternal = rgba;\n    this.#originalText = originalText || null;\n    this.#originalTextIsValid = Boolean(this.#originalText);\n    this.#formatInternal = format;\n    if (typeof this.#rgbaInternal[3] === 'undefined') {\n      this.#rgbaInternal[3] = 1;\n    }\n\n    for (let i = 0; i < 4; ++i) {\n      if (this.#rgbaInternal[i] < 0) {\n        this.#rgbaInternal[i] = 0;\n        this.#originalTextIsValid = false;\n      }\n      if (this.#rgbaInternal[i] > 1) {\n        this.#rgbaInternal[i] = 1;\n        this.#originalTextIsValid = false;\n      }\n    }\n  }\n\n  static parse(text: string): Color|null {\n    // Simple - #hex, nickname\n    const value = text.toLowerCase().replace(/\\s+/g, '');\n    const simple = /^(?:#([0-9a-f]{3,4}|[0-9a-f]{6}|[0-9a-f]{8})|(\\w+))$/i;\n    let match = value.match(simple);\n    if (match) {\n      if (match[1]) {  // hex\n        let hex = match[1].toLowerCase();\n        let format;\n        if (hex.length === 3) {\n          format = Format.ShortHEX;\n          hex = hex.charAt(0) + hex.charAt(0) + hex.charAt(1) + hex.charAt(1) + hex.charAt(2) + hex.charAt(2);\n        } else if (hex.length === 4) {\n          format = Format.ShortHEXA;\n          hex = hex.charAt(0) + hex.charAt(0) + hex.charAt(1) + hex.charAt(1) + hex.charAt(2) + hex.charAt(2) +\n              hex.charAt(3) + hex.charAt(3);\n        } else if (hex.length === 6) {\n          format = Format.HEX;\n        } else {\n          format = Format.HEXA;\n        }\n        const r = parseInt(hex.substring(0, 2), 16);\n        const g = parseInt(hex.substring(2, 4), 16);\n        const b = parseInt(hex.substring(4, 6), 16);\n        let a = 1;\n        if (hex.length === 8) {\n          a = parseInt(hex.substring(6, 8), 16) / 255;\n        }\n        return new Color([r / 255, g / 255, b / 255, a], format, text);\n      }\n\n      if (match[2]) {  // nickname\n        const nickname = match[2].toLowerCase();\n        const rgba = Nicknames.get(nickname);\n        if (rgba !== undefined) {\n          const color = Color.fromRGBA(rgba);\n          color.#formatInternal = Format.Nickname;\n          color.#originalText = text;\n          return color;\n        }\n        return null;\n      }\n\n      return null;\n    }\n\n    // rgb/rgba(), hsl/hsla(), hwb/hwba()\n    match = text.toLowerCase().match(/^\\s*(?:(rgba?)|(hsla?)|(hwba?))\\((.*)\\)\\s*$/);\n    if (match) {\n      // hwb(a) must have white space delimiters between its parameters.\n      const values = this.splitColorFunctionParameters(match[4], !match[3]);\n      if (!values) {\n        return null;\n      }\n      const hasAlpha = (values[3] !== undefined);\n\n      if (match[1]) {  // rgb/rgba\n        const rgba = [\n          Color.parseRgbNumeric(values[0]),\n          Color.parseRgbNumeric(values[1]),\n          Color.parseRgbNumeric(values[2]),\n          hasAlpha ? Color.parseAlphaNumeric(values[3]) : 1,\n        ];\n        if (rgba.indexOf(null) > -1) {\n          return null;\n        }\n        return new Color((rgba as number[]), hasAlpha ? Format.RGBA : Format.RGB, text);\n      }\n\n      if (match[2] || match[3]) {  // hsl/hsla or hwb/hwba\n        const parameters = [\n          Color.parseHueNumeric(values[0]),\n          Color.parseSatLightNumeric(values[1]),\n          Color.parseSatLightNumeric(values[2]),\n          hasAlpha ? Color.parseAlphaNumeric(values[3]) : 1,\n        ];\n        if (parameters.indexOf(null) > -1) {\n          return null;\n        }\n        const rgba: number[] = [];\n        if (match[2]) {\n          Color.hsl2rgb((parameters as number[]), rgba);\n          return new Color(rgba, hasAlpha ? Format.HSLA : Format.HSL, text);\n        }\n        Color.hwb2rgb((parameters as number[]), rgba);\n        return new Color(rgba, hasAlpha ? Format.HWBA : Format.HWB, text);\n      }\n    }\n\n    return null;\n  }\n\n  static fromRGBA(rgba: number[]): Color {\n    return new Color([rgba[0] / 255, rgba[1] / 255, rgba[2] / 255, rgba[3]], Format.RGBA);\n  }\n\n  static fromHSVA(hsva: number[]): Color {\n    const rgba: number[] = [];\n    Color.hsva2rgba(hsva, rgba);\n    return new Color(rgba, Format.HSLA);\n  }\n\n  /**\n   * Split the color parameters of (e.g.) rgb(a), hsl(a), hwb(a) functions.\n   */\n  static splitColorFunctionParameters(content: string, allowCommas: boolean): string[]|null {\n    const components = content.trim();\n    let values: string[] = [];\n\n    if (allowCommas) {\n      values = components.split(/\\s*,\\s*/);\n    }\n    if (!allowCommas || values.length === 1) {\n      values = components.split(/\\s+/);\n      if (values[3] === '/') {\n        values.splice(3, 1);\n        if (values.length !== 4) {\n          return null;\n        }\n      } else if (\n          (values.length > 2 && values[2].indexOf('/') !== -1) ||\n          (values.length > 3 && values[3].indexOf('/') !== -1)) {\n        const alpha = values.slice(2, 4).join('');\n        values = values.slice(0, 2).concat(alpha.split(/\\//)).concat(values.slice(4));\n      } else if (values.length >= 4) {\n        return null;\n      }\n    }\n    if (values.length !== 3 && values.length !== 4 || values.indexOf('') > -1) {\n      return null;\n    }\n    return values;\n  }\n\n  static parsePercentOrNumber(value: string): number|null {\n    // @ts-ignore: isNaN can accept strings\n    if (isNaN(value.replace('%', ''))) {\n      return null;\n    }\n    const parsed = parseFloat(value);\n\n    if (value.indexOf('%') !== -1) {\n      if (value.indexOf('%') !== value.length - 1) {\n        return null;\n      }\n      return parsed / 100;\n    }\n    return parsed;\n  }\n\n  static parseRgbNumeric(value: string): number|null {\n    const parsed = Color.parsePercentOrNumber(value);\n    if (parsed === null) {\n      return null;\n    }\n\n    if (value.indexOf('%') !== -1) {\n      return parsed;\n    }\n    return parsed / 255;\n  }\n\n  static parseHueNumeric(value: string): number|null {\n    const angle = value.replace(/(deg|g?rad|turn)$/, '');\n    // @ts-ignore: isNaN can accept strings\n    if (isNaN(angle) || value.match(/\\s+(deg|g?rad|turn)/)) {\n      return null;\n    }\n    const number = parseFloat(angle);\n\n    if (value.indexOf('turn') !== -1) {\n      return number % 1;\n    }\n    if (value.indexOf('grad') !== -1) {\n      return (number / 400) % 1;\n    }\n    if (value.indexOf('rad') !== -1) {\n      return (number / (2 * Math.PI)) % 1;\n    }\n    return (number / 360) % 1;\n  }\n\n  static parseSatLightNumeric(value: string): number|null {\n    // @ts-ignore: isNaN can accept strings\n    if (value.indexOf('%') !== value.length - 1 || isNaN(value.replace('%', ''))) {\n      return null;\n    }\n    const parsed = parseFloat(value);\n    return Math.min(1, parsed / 100);\n  }\n\n  static parseAlphaNumeric(value: string): number|null {\n    return Color.parsePercentOrNumber(value);\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static hsva2hsla(hsva: number[], out_hsla: number[]): void {\n    const h = hsva[0];\n    let s: 0|number = hsva[1];\n    const v = hsva[2];\n\n    const t = (2 - s) * v;\n    if (v === 0 || s === 0) {\n      s = 0;\n    } else {\n      s *= v / (t < 1 ? t : 2 - t);\n    }\n\n    out_hsla[0] = h;\n    out_hsla[1] = s;\n    out_hsla[2] = t / 2;\n    out_hsla[3] = hsva[3];\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static hsl2rgb(hsl: number[], out_rgb: number[]): void {\n    const h = hsl[0];\n    let s: 0|number = hsl[1];\n    const l = hsl[2];\n\n    function hue2rgb(p: number, q: number, h: number): number {\n      if (h < 0) {\n        h += 1;\n      } else if (h > 1) {\n        h -= 1;\n      }\n\n      if ((h * 6) < 1) {\n        return p + (q - p) * h * 6;\n      }\n      if ((h * 2) < 1) {\n        return q;\n      }\n      if ((h * 3) < 2) {\n        return p + (q - p) * ((2 / 3) - h) * 6;\n      }\n      return p;\n    }\n\n    if (s < 0) {\n      s = 0;\n    }\n\n    let q;\n    if (l <= 0.5) {\n      q = l * (1 + s);\n    } else {\n      q = l + s - (l * s);\n    }\n\n    const p = 2 * l - q;\n\n    const tr = h + (1 / 3);\n    const tg = h;\n    const tb = h - (1 / 3);\n\n    out_rgb[0] = hue2rgb(p, q, tr);\n    out_rgb[1] = hue2rgb(p, q, tg);\n    out_rgb[2] = hue2rgb(p, q, tb);\n    out_rgb[3] = hsl[3];\n  }\n\n  // See https://drafts.csswg.org/css-color-4/#hwb-to-rgb for formula reference.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static hwb2rgb(hwb: number[], out_rgb: number[]): void {\n    const h = hwb[0];\n    const w = hwb[1];\n    const b = hwb[2];\n\n    if (w + b >= 1) {\n      out_rgb[0] = out_rgb[1] = out_rgb[2] = w / (w + b);\n      out_rgb[3] = hwb[3];\n    } else {\n      Color.hsl2rgb([h, 1, 0.5, hwb[3]], out_rgb);\n      for (let i = 0; i < 3; ++i) {\n        out_rgb[i] += w - (w + b) * out_rgb[i];\n      }\n    }\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static hsva2rgba(hsva: number[], out_rgba: number[]): void {\n    Color.hsva2hsla(hsva, _tmpHSLA);\n    Color.hsl2rgb(_tmpHSLA, out_rgba);\n\n    for (let i = 0; i < _tmpHSLA.length; i++) {\n      _tmpHSLA[i] = 0;\n    }\n  }\n\n  /**\n   * Compute a desired luminance given a given luminance and a desired contrast\n   * ratio.\n   */\n  static desiredLuminance(luminance: number, contrast: number, lighter: boolean): number {\n    function computeLuminance(): number {\n      if (lighter) {\n        return (luminance + 0.05) * contrast - 0.05;\n      }\n      return (luminance + 0.05) / contrast - 0.05;\n    }\n    let desiredLuminance = computeLuminance();\n    if (desiredLuminance < 0 || desiredLuminance > 1) {\n      lighter = !lighter;\n      desiredLuminance = computeLuminance();\n    }\n    return desiredLuminance;\n  }\n\n  /**\n   * Approach a value of the given component of `candidateHSVA` such that the\n   * calculated luminance of `candidateHSVA` approximates `desiredLuminance`.\n   */\n  static approachColorValue(\n      candidateHSVA: number[], bgRGBA: number[], index: number, desiredLuminance: number,\n      candidateLuminance: (arg0: Array<number>) => number): number|null {\n    const epsilon = 0.0002;\n\n    let x = candidateHSVA[index];\n    let multiplier = 1;\n    let dLuminance: number = candidateLuminance(candidateHSVA) - desiredLuminance;\n    let previousSign = Math.sign(dLuminance);\n\n    for (let guard = 100; guard; guard--) {\n      if (Math.abs(dLuminance) < epsilon) {\n        candidateHSVA[index] = x;\n        return x;\n      }\n\n      const sign = Math.sign(dLuminance);\n      if (sign !== previousSign) {\n        // If `x` overshoots the correct value, halve the step size.\n        multiplier /= 2;\n        previousSign = sign;\n      } else if (x < 0 || x > 1) {\n        // If there is no overshoot and `x` is out of bounds, there is no\n        // acceptable value for `x`.\n        return null;\n      }\n\n      // Adjust `x` by a multiple of `dLuminance` to decrease step size as\n      // the computed luminance converges on `desiredLuminance`.\n      x += multiplier * (index === 2 ? -dLuminance : dLuminance);\n\n      candidateHSVA[index] = x;\n\n      dLuminance = candidateLuminance(candidateHSVA) - desiredLuminance;\n    }\n\n    return null;\n  }\n\n  static findFgColorForContrast(fgColor: Color, bgColor: Color, requiredContrast: number): Color|null {\n    const candidateHSVA = fgColor.hsva();\n    const bgRGBA = bgColor.rgba();\n\n    const candidateLuminance = (candidateHSVA: number[]): number => {\n      return luminance(blendColors(Color.fromHSVA(candidateHSVA).rgba(), bgRGBA));\n    };\n\n    const bgLuminance = luminance(bgColor.rgba());\n    const fgLuminance = candidateLuminance(candidateHSVA);\n    const fgIsLighter = fgLuminance > bgLuminance;\n\n    const desiredLuminance = Color.desiredLuminance(bgLuminance, requiredContrast, fgIsLighter);\n\n    const saturationComponentIndex = 1;\n    const valueComponentIndex = 2;\n\n    if (Color.approachColorValue(candidateHSVA, bgRGBA, valueComponentIndex, desiredLuminance, candidateLuminance)) {\n      return Color.fromHSVA(candidateHSVA);\n    }\n\n    candidateHSVA[valueComponentIndex] = 1;\n    if (Color.approachColorValue(\n            candidateHSVA, bgRGBA, saturationComponentIndex, desiredLuminance, candidateLuminance)) {\n      return Color.fromHSVA(candidateHSVA);\n    }\n\n    return null;\n  }\n\n  static findFgColorForContrastAPCA(fgColor: Color, bgColor: Color, requiredContrast: number): Color|null {\n    const candidateHSVA = fgColor.hsva();\n    const bgRGBA = bgColor.rgba();\n\n    const candidateLuminance = (candidateHSVA: number[]): number => {\n      return luminanceAPCA(Color.fromHSVA(candidateHSVA).rgba());\n    };\n\n    const bgLuminance = luminanceAPCA(bgColor.rgba());\n    const fgLuminance = candidateLuminance(candidateHSVA);\n    const fgIsLighter = fgLuminance >= bgLuminance;\n    const desiredLuminance = desiredLuminanceAPCA(bgLuminance, requiredContrast, fgIsLighter);\n\n    const saturationComponentIndex = 1;\n    const valueComponentIndex = 2;\n\n    if (Color.approachColorValue(candidateHSVA, bgRGBA, valueComponentIndex, desiredLuminance, candidateLuminance)) {\n      const candidate = Color.fromHSVA(candidateHSVA);\n      if (Math.abs(contrastRatioAPCA(bgColor.rgba(), candidate.rgba())) >= requiredContrast) {\n        return candidate;\n      }\n    }\n\n    candidateHSVA[valueComponentIndex] = 1;\n    if (Color.approachColorValue(\n            candidateHSVA, bgRGBA, saturationComponentIndex, desiredLuminance, candidateLuminance)) {\n      const candidate = Color.fromHSVA(candidateHSVA);\n      if (Math.abs(contrastRatioAPCA(bgColor.rgba(), candidate.rgba())) >= requiredContrast) {\n        return candidate;\n      }\n    }\n\n    return null;\n  }\n\n  format(): Format {\n    return this.#formatInternal;\n  }\n\n  /** HSLA with components within [0..1]\n     */\n  hsla(): number[] {\n    if (this.#hslaInternal) {\n      return this.#hslaInternal;\n    }\n    this.#hslaInternal = rgbaToHsla(this.#rgbaInternal);\n    return this.#hslaInternal;\n  }\n\n  canonicalHSLA(): number[] {\n    const hsla = this.hsla();\n    return [Math.round(hsla[0] * 360), Math.round(hsla[1] * 100), Math.round(hsla[2] * 100), hsla[3]];\n  }\n\n  /** HSVA with components within [0..1]\n     */\n  hsva(): number[] {\n    const hsla = this.hsla();\n    const h = hsla[0];\n    let s = hsla[1];\n    const l = hsla[2];\n\n    s *= l < 0.5 ? l : 1 - l;\n    return [h, s !== 0 ? 2 * s / (l + s) : 0, (l + s), hsla[3]];\n  }\n\n  /** HWBA with components within [0..1]\n     */\n  hwba(): number[] {\n    if (this.#hwbaInternal) {\n      return this.#hwbaInternal;\n    }\n    this.#hwbaInternal = rgbaToHwba(this.#rgbaInternal);\n    return this.#hwbaInternal;\n  }\n\n  canonicalHWBA(): number[] {\n    const hwba = this.hwba();\n    return [Math.round(hwba[0] * 360), Math.round(hwba[1] * 100), Math.round(hwba[2] * 100), hwba[3]];\n  }\n\n  hasAlpha(): boolean {\n    return this.#rgbaInternal[3] !== 1;\n  }\n\n  detectHEXFormat(): Format {\n    let canBeShort = true;\n    for (let i = 0; i < 4; ++i) {\n      const c = Math.round(this.#rgbaInternal[i] * 255);\n      if (c % 17) {\n        canBeShort = false;\n        break;\n      }\n    }\n\n    const hasAlpha = this.hasAlpha();\n    const cf = Format;\n    if (canBeShort) {\n      return hasAlpha ? cf.ShortHEXA : cf.ShortHEX;\n    }\n    return hasAlpha ? cf.HEXA : cf.HEX;\n  }\n\n  asString(format?: string|null): string|null {\n    if (format === this.#formatInternal && this.#originalTextIsValid) {\n      return this.#originalText;\n    }\n\n    if (!format) {\n      format = this.#formatInternal;\n    }\n\n    function toRgbValue(value: number): number {\n      return Math.round(value * 255);\n    }\n\n    function toHexValue(value: number): string {\n      const hex = Math.round(value * 255).toString(16);\n      return hex.length === 1 ? '0' + hex : hex;\n    }\n\n    function toShortHexValue(value: number): string {\n      return (Math.round(value * 255) / 17).toString(16);\n    }\n\n    switch (format) {\n      case Format.Original: {\n        return this.#originalText;\n      }\n      case Format.RGB:\n      case Format.RGBA: {\n        const start = Platform.StringUtilities.sprintf(\n            'rgb(%d %d %d', toRgbValue(this.#rgbaInternal[0]), toRgbValue(this.#rgbaInternal[1]),\n            toRgbValue(this.#rgbaInternal[2]));\n        if (this.hasAlpha()) {\n          return start + Platform.StringUtilities.sprintf(' / %d%)', Math.round(this.#rgbaInternal[3] * 100));\n        }\n        return start + ')';\n      }\n      case Format.HSL:\n      case Format.HSLA: {\n        const hsla = this.hsla();\n        const start = Platform.StringUtilities.sprintf(\n            'hsl(%ddeg %d% %d%', Math.round(hsla[0] * 360), Math.round(hsla[1] * 100), Math.round(hsla[2] * 100));\n        if (this.hasAlpha()) {\n          return start + Platform.StringUtilities.sprintf(' / %d%)', Math.round(hsla[3] * 100));\n        }\n        return start + ')';\n      }\n      case Format.HWB:\n      case Format.HWBA: {\n        const hwba = this.hwba();\n        const start = Platform.StringUtilities.sprintf(\n            'hwb(%ddeg %d% %d%', Math.round(hwba[0] * 360), Math.round(hwba[1] * 100), Math.round(hwba[2] * 100));\n        if (this.hasAlpha()) {\n          return start + Platform.StringUtilities.sprintf(' / %d%)', Math.round(hwba[3] * 100));\n        }\n        return start + ')';\n      }\n      case Format.HEXA: {\n        return Platform.StringUtilities\n            .sprintf(\n                '#%s%s%s%s', toHexValue(this.#rgbaInternal[0]), toHexValue(this.#rgbaInternal[1]),\n                toHexValue(this.#rgbaInternal[2]), toHexValue(this.#rgbaInternal[3]))\n            .toLowerCase();\n      }\n      case Format.HEX: {\n        if (this.hasAlpha()) {\n          return null;\n        }\n        return Platform.StringUtilities\n            .sprintf(\n                '#%s%s%s', toHexValue(this.#rgbaInternal[0]), toHexValue(this.#rgbaInternal[1]),\n                toHexValue(this.#rgbaInternal[2]))\n            .toLowerCase();\n      }\n      case Format.ShortHEXA: {\n        const hexFormat = this.detectHEXFormat();\n        if (hexFormat !== Format.ShortHEXA && hexFormat !== Format.ShortHEX) {\n          return null;\n        }\n        return Platform.StringUtilities\n            .sprintf(\n                '#%s%s%s%s', toShortHexValue(this.#rgbaInternal[0]), toShortHexValue(this.#rgbaInternal[1]),\n                toShortHexValue(this.#rgbaInternal[2]), toShortHexValue(this.#rgbaInternal[3]))\n            .toLowerCase();\n      }\n      case Format.ShortHEX: {\n        if (this.hasAlpha()) {\n          return null;\n        }\n        if (this.detectHEXFormat() !== Format.ShortHEX) {\n          return null;\n        }\n        return Platform.StringUtilities\n            .sprintf(\n                '#%s%s%s', toShortHexValue(this.#rgbaInternal[0]), toShortHexValue(this.#rgbaInternal[1]),\n                toShortHexValue(this.#rgbaInternal[2]))\n            .toLowerCase();\n      }\n      case Format.Nickname: {\n        return this.nickname();\n      }\n    }\n\n    return this.#originalText;\n  }\n\n  rgba(): number[] {\n    return this.#rgbaInternal.slice();\n  }\n\n  canonicalRGBA(): number[] {\n    const rgba = new Array(4);\n    for (let i = 0; i < 3; ++i) {\n      rgba[i] = Math.round(this.#rgbaInternal[i] * 255);\n    }\n    rgba[3] = this.#rgbaInternal[3];\n    return rgba;\n  }\n\n  /** nickname\n     */\n  nickname(): string|null {\n    return RGBAToNickname.get(String(this.canonicalRGBA())) || null;\n  }\n\n  toProtocolRGBA(): {\n    r: number,\n    g: number,\n    b: number,\n    a: (number|undefined),\n  } {\n    const rgba = this.canonicalRGBA();\n    const result: {\n      r: number,\n      g: number,\n      b: number,\n      a: number|undefined,\n    } = {r: rgba[0], g: rgba[1], b: rgba[2], a: undefined};\n    if (rgba[3] !== 1) {\n      result.a = rgba[3];\n    }\n    return result;\n  }\n\n  invert(): Color {\n    const rgba = [];\n    rgba[0] = 1 - this.#rgbaInternal[0];\n    rgba[1] = 1 - this.#rgbaInternal[1];\n    rgba[2] = 1 - this.#rgbaInternal[2];\n    rgba[3] = this.#rgbaInternal[3];\n    return new Color(rgba, Format.RGBA);\n  }\n\n  setAlpha(alpha: number): Color {\n    const rgba = this.#rgbaInternal.slice();\n    rgba[3] = alpha;\n    return new Color(rgba, Format.RGBA);\n  }\n\n  blendWith(fgColor: Color): Color {\n    const rgba: number[] = blendColors(fgColor.#rgbaInternal, this.#rgbaInternal);\n    return new Color(rgba, Format.RGBA);\n  }\n\n  blendWithAlpha(alpha: number): Color {\n    const rgba = this.#rgbaInternal.slice();\n    rgba[3] *= alpha;\n    return new Color(rgba, Format.RGBA);\n  }\n\n  setFormat(format: Format): void {\n    this.#formatInternal = format;\n  }\n\n  equal(other: Color): boolean {\n    return this.#rgbaInternal.every((v, i) => v === other.#rgbaInternal[i]) &&\n        this.#formatInternal === other.#formatInternal;\n  }\n}\n\nexport const Regex: RegExp =\n    /((?:rgb|hsl|hwb)a?\\([^)]+\\)|#[0-9a-fA-F]{8}|#[0-9a-fA-F]{6}|#[0-9a-fA-F]{3,4}|\\b[a-zA-Z]+\\b(?!-))/g;\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Format {\n  Original = 'original',\n  Nickname = 'nickname',\n  HEX = 'hex',\n  ShortHEX = 'shorthex',\n  HEXA = 'hexa',\n  ShortHEXA = 'shorthexa',\n  RGB = 'rgb',\n  RGBA = 'rgba',\n  HSL = 'hsl',\n  HSLA = 'hsla',\n  HWB = 'hwb',\n  HWBA = 'hwba',\n}\n\nconst COLOR_TO_RGBA_ENTRIES: Array<readonly[string, number[]]> = [\n  ['aliceblue', [240, 248, 255]],\n  ['antiquewhite', [250, 235, 215]],\n  ['aqua', [0, 255, 255]],\n  ['aquamarine', [127, 255, 212]],\n  ['azure', [240, 255, 255]],\n  ['beige', [245, 245, 220]],\n  ['bisque', [255, 228, 196]],\n  ['black', [0, 0, 0]],\n  ['blanchedalmond', [255, 235, 205]],\n  ['blue', [0, 0, 255]],\n  ['blueviolet', [138, 43, 226]],\n  ['brown', [165, 42, 42]],\n  ['burlywood', [222, 184, 135]],\n  ['cadetblue', [95, 158, 160]],\n  ['chartreuse', [127, 255, 0]],\n  ['chocolate', [210, 105, 30]],\n  ['coral', [255, 127, 80]],\n  ['cornflowerblue', [100, 149, 237]],\n  ['cornsilk', [255, 248, 220]],\n  ['crimson', [237, 20, 61]],\n  ['cyan', [0, 255, 255]],\n  ['darkblue', [0, 0, 139]],\n  ['darkcyan', [0, 139, 139]],\n  ['darkgoldenrod', [184, 134, 11]],\n  ['darkgray', [169, 169, 169]],\n  ['darkgrey', [169, 169, 169]],\n  ['darkgreen', [0, 100, 0]],\n  ['darkkhaki', [189, 183, 107]],\n  ['darkmagenta', [139, 0, 139]],\n  ['darkolivegreen', [85, 107, 47]],\n  ['darkorange', [255, 140, 0]],\n  ['darkorchid', [153, 50, 204]],\n  ['darkred', [139, 0, 0]],\n  ['darksalmon', [233, 150, 122]],\n  ['darkseagreen', [143, 188, 143]],\n  ['darkslateblue', [72, 61, 139]],\n  ['darkslategray', [47, 79, 79]],\n  ['darkslategrey', [47, 79, 79]],\n  ['darkturquoise', [0, 206, 209]],\n  ['darkviolet', [148, 0, 211]],\n  ['deeppink', [255, 20, 147]],\n  ['deepskyblue', [0, 191, 255]],\n  ['dimgray', [105, 105, 105]],\n  ['dimgrey', [105, 105, 105]],\n  ['dodgerblue', [30, 144, 255]],\n  ['firebrick', [178, 34, 34]],\n  ['floralwhite', [255, 250, 240]],\n  ['forestgreen', [34, 139, 34]],\n  ['fuchsia', [255, 0, 255]],\n  ['gainsboro', [220, 220, 220]],\n  ['ghostwhite', [248, 248, 255]],\n  ['gold', [255, 215, 0]],\n  ['goldenrod', [218, 165, 32]],\n  ['gray', [128, 128, 128]],\n  ['grey', [128, 128, 128]],\n  ['green', [0, 128, 0]],\n  ['greenyellow', [173, 255, 47]],\n  ['honeydew', [240, 255, 240]],\n  ['hotpink', [255, 105, 180]],\n  ['indianred', [205, 92, 92]],\n  ['indigo', [75, 0, 130]],\n  ['ivory', [255, 255, 240]],\n  ['khaki', [240, 230, 140]],\n  ['lavender', [230, 230, 250]],\n  ['lavenderblush', [255, 240, 245]],\n  ['lawngreen', [124, 252, 0]],\n  ['lemonchiffon', [255, 250, 205]],\n  ['lightblue', [173, 216, 230]],\n  ['lightcoral', [240, 128, 128]],\n  ['lightcyan', [224, 255, 255]],\n  ['lightgoldenrodyellow', [250, 250, 210]],\n  ['lightgreen', [144, 238, 144]],\n  ['lightgray', [211, 211, 211]],\n  ['lightgrey', [211, 211, 211]],\n  ['lightpink', [255, 182, 193]],\n  ['lightsalmon', [255, 160, 122]],\n  ['lightseagreen', [32, 178, 170]],\n  ['lightskyblue', [135, 206, 250]],\n  ['lightslategray', [119, 136, 153]],\n  ['lightslategrey', [119, 136, 153]],\n  ['lightsteelblue', [176, 196, 222]],\n  ['lightyellow', [255, 255, 224]],\n  ['lime', [0, 255, 0]],\n  ['limegreen', [50, 205, 50]],\n  ['linen', [250, 240, 230]],\n  ['magenta', [255, 0, 255]],\n  ['maroon', [128, 0, 0]],\n  ['mediumaquamarine', [102, 205, 170]],\n  ['mediumblue', [0, 0, 205]],\n  ['mediumorchid', [186, 85, 211]],\n  ['mediumpurple', [147, 112, 219]],\n  ['mediumseagreen', [60, 179, 113]],\n  ['mediumslateblue', [123, 104, 238]],\n  ['mediumspringgreen', [0, 250, 154]],\n  ['mediumturquoise', [72, 209, 204]],\n  ['mediumvioletred', [199, 21, 133]],\n  ['midnightblue', [25, 25, 112]],\n  ['mintcream', [245, 255, 250]],\n  ['mistyrose', [255, 228, 225]],\n  ['moccasin', [255, 228, 181]],\n  ['navajowhite', [255, 222, 173]],\n  ['navy', [0, 0, 128]],\n  ['oldlace', [253, 245, 230]],\n  ['olive', [128, 128, 0]],\n  ['olivedrab', [107, 142, 35]],\n  ['orange', [255, 165, 0]],\n  ['orangered', [255, 69, 0]],\n  ['orchid', [218, 112, 214]],\n  ['palegoldenrod', [238, 232, 170]],\n  ['palegreen', [152, 251, 152]],\n  ['paleturquoise', [175, 238, 238]],\n  ['palevioletred', [219, 112, 147]],\n  ['papayawhip', [255, 239, 213]],\n  ['peachpuff', [255, 218, 185]],\n  ['peru', [205, 133, 63]],\n  ['pink', [255, 192, 203]],\n  ['plum', [221, 160, 221]],\n  ['powderblue', [176, 224, 230]],\n  ['purple', [128, 0, 128]],\n  ['rebeccapurple', [102, 51, 153]],\n  ['red', [255, 0, 0]],\n  ['rosybrown', [188, 143, 143]],\n  ['royalblue', [65, 105, 225]],\n  ['saddlebrown', [139, 69, 19]],\n  ['salmon', [250, 128, 114]],\n  ['sandybrown', [244, 164, 96]],\n  ['seagreen', [46, 139, 87]],\n  ['seashell', [255, 245, 238]],\n  ['sienna', [160, 82, 45]],\n  ['silver', [192, 192, 192]],\n  ['skyblue', [135, 206, 235]],\n  ['slateblue', [106, 90, 205]],\n  ['slategray', [112, 128, 144]],\n  ['slategrey', [112, 128, 144]],\n  ['snow', [255, 250, 250]],\n  ['springgreen', [0, 255, 127]],\n  ['steelblue', [70, 130, 180]],\n  ['tan', [210, 180, 140]],\n  ['teal', [0, 128, 128]],\n  ['thistle', [216, 191, 216]],\n  ['tomato', [255, 99, 71]],\n  ['turquoise', [64, 224, 208]],\n  ['violet', [238, 130, 238]],\n  ['wheat', [245, 222, 179]],\n  ['white', [255, 255, 255]],\n  ['whitesmoke', [245, 245, 245]],\n  ['yellow', [255, 255, 0]],\n  ['yellowgreen', [154, 205, 50]],\n  ['transparent', [0, 0, 0, 0]],\n];\n\nPlatform.DCHECK(() => {\n  return COLOR_TO_RGBA_ENTRIES.every(([nickname]) => nickname.toLowerCase() === nickname);\n}, 'All color nicknames must be lowercase.');\n\nexport const Nicknames = new Map(COLOR_TO_RGBA_ENTRIES);\n\nconst RGBAToNickname = new Map(\n    // Default opacity to 1 if the color only specified 3 channels\n    COLOR_TO_RGBA_ENTRIES.map(([nickname, [r, g, b, a = 1]]) => {\n      return [String([r, g, b, a]), nickname];\n    }),\n);\n\nconst LAYOUT_LINES_HIGHLIGHT_COLOR = [127, 32, 210];\n\nexport const PageHighlight = {\n  Content: Color.fromRGBA([111, 168, 220, .66]),\n  ContentLight: Color.fromRGBA([111, 168, 220, .5]),\n  ContentOutline: Color.fromRGBA([9, 83, 148]),\n  Padding: Color.fromRGBA([147, 196, 125, .55]),\n  PaddingLight: Color.fromRGBA([147, 196, 125, .4]),\n  Border: Color.fromRGBA([255, 229, 153, .66]),\n  BorderLight: Color.fromRGBA([255, 229, 153, .5]),\n  Margin: Color.fromRGBA([246, 178, 107, .66]),\n  MarginLight: Color.fromRGBA([246, 178, 107, .5]),\n  EventTarget: Color.fromRGBA([255, 196, 196, .66]),\n  Shape: Color.fromRGBA([96, 82, 177, 0.8]),\n  ShapeMargin: Color.fromRGBA([96, 82, 127, .6]),\n  CssGrid: Color.fromRGBA([0x4b, 0, 0x82, 1]),\n  LayoutLine: Color.fromRGBA([...LAYOUT_LINES_HIGHLIGHT_COLOR, 1]),\n  GridBorder: Color.fromRGBA([...LAYOUT_LINES_HIGHLIGHT_COLOR, 1]),\n  GapBackground: Color.fromRGBA([...LAYOUT_LINES_HIGHLIGHT_COLOR, .3]),\n  GapHatch: Color.fromRGBA([...LAYOUT_LINES_HIGHLIGHT_COLOR, .8]),\n  GridAreaBorder: Color.fromRGBA([26, 115, 232, 1]),\n};\n\nexport const SourceOrderHighlight = {\n  ParentOutline: Color.fromRGBA([224, 90, 183, 1]),\n  ChildOutline: Color.fromRGBA([0, 120, 212, 1]),\n};\n\nexport const IsolationModeHighlight = {\n  Resizer: Color.fromRGBA([222, 225, 230, 1]),  // --color-background-elevation-2\n  ResizerHandle: Color.fromRGBA([166, 166, 166, 1]),\n  Mask: Color.fromRGBA([248, 249, 249, 1]),\n};\n\nexport class Generator {\n  readonly #hueSpace: number|{\n    min: number,\n    max: number,\n    count: (number|undefined),\n  };\n  readonly #satSpace: number|{\n    min: number,\n    max: number,\n    count: (number|undefined),\n  };\n  readonly #lightnessSpace: number|{\n    min: number,\n    max: number,\n    count: (number|undefined),\n  };\n  readonly #alphaSpace: number|{\n    min: number,\n    max: number,\n    count: (number|undefined),\n  };\n  readonly #colors: Map<string, string>;\n  constructor(\n      hueSpace?: number|{\n        min: number,\n        max: number,\n        count: (number|undefined),\n      },\n      satSpace?: number|{\n        min: number,\n        max: number,\n        count: (number|undefined),\n      },\n      lightnessSpace?: number|{\n        min: number,\n        max: number,\n        count: (number|undefined),\n      },\n      alphaSpace?: number|{\n        min: number,\n        max: number,\n        count: (number|undefined),\n      }) {\n    this.#hueSpace = hueSpace || {min: 0, max: 360, count: undefined};\n    this.#satSpace = satSpace || 67;\n    this.#lightnessSpace = lightnessSpace || 80;\n    this.#alphaSpace = alphaSpace || 1;\n    this.#colors = new Map();\n  }\n\n  setColorForID(id: string, color: string): void {\n    this.#colors.set(id, color);\n  }\n\n  colorForID(id: string): string {\n    let color = this.#colors.get(id);\n    if (!color) {\n      color = this.generateColorForID(id);\n      this.#colors.set(id, color);\n    }\n    return color;\n  }\n\n  private generateColorForID(id: string): string {\n    const hash = Platform.StringUtilities.hashCode(id);\n    const h = this.indexToValueInSpace(hash, this.#hueSpace);\n    const s = this.indexToValueInSpace(hash >> 8, this.#satSpace);\n    const l = this.indexToValueInSpace(hash >> 16, this.#lightnessSpace);\n    const a = this.indexToValueInSpace(hash >> 24, this.#alphaSpace);\n    const start = `hsl(${h}deg ${s}% ${l}%`;\n    if (a !== 1) {\n      return `${start} / ${Math.floor(a * 100)}%)`;\n    }\n    return `${start})`;\n  }\n\n  private indexToValueInSpace(index: number, space: number|{\n    min: number,\n    max: number,\n    count: (number|undefined),\n  }): number {\n    if (typeof space === 'number') {\n      return space;\n    }\n    const count = space.count || space.max - space.min;\n    index %= count;\n    return space.min + Math.floor(index / (count - 1) * (space.max - space.min));\n  }\n}\n\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst _tmpHSLA = [0, 0, 0, 0];\n"],
  "mappings": "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",
  "names": []
}
