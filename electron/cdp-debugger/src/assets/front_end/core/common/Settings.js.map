{
  "version": 3,
  "sources": ["../../../../../../front_end/core/common/Settings.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2009 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport type * as Platform from '../platform/platform.js';\nimport * as Root from '../root/root.js';\n\nimport type {Color} from './Color.js';\nimport {Format} from './Color.js';\nimport {Console} from './Console.js';\nimport type {GenericEvents, EventDescriptor, EventTargetEvent} from './EventTarget.js';\nimport {ObjectWrapper} from './Object.js';\nimport {\n  getLocalizedSettingsCategory,\n  getRegisteredSettings,\n  maybeRemoveSettingExtension,\n  type RegExpSettingItem,\n  registerSettingExtension,\n  registerSettingsForTest,\n  resetSettings,\n  SettingCategory,\n  type SettingExtensionOption,\n  type SettingRegistration,\n  SettingType,\n} from './SettingRegistration.js';\n\nlet settingsInstance: Settings|undefined;\n\nexport class Settings {\n  readonly #sessionStorage: SettingsStorage;\n  settingNameSet: Set<string>;\n  orderValuesBySettingCategory: Map<SettingCategory, Set<number>>;\n  #eventSupport: ObjectWrapper<GenericEvents>;\n  #registry: Map<string, Setting<unknown>>;\n  readonly moduleSettings: Map<string, Setting<unknown>>;\n\n  private constructor(\n      private readonly syncedStorage: SettingsStorage, readonly globalStorage: SettingsStorage,\n      private readonly localStorage: SettingsStorage) {\n    this.#sessionStorage = new SettingsStorage({});\n\n    this.settingNameSet = new Set();\n\n    this.orderValuesBySettingCategory = new Map();\n\n    this.#eventSupport = new ObjectWrapper<GenericEvents>();\n    this.#registry = new Map();\n    this.moduleSettings = new Map();\n\n    for (const registration of getRegisteredSettings()) {\n      const {settingName, defaultValue, storageType} = registration;\n      const isRegex = registration.settingType === SettingType.REGEX;\n\n      const setting = isRegex && typeof defaultValue === 'string' ?\n          this.createRegExpSetting(settingName, defaultValue, undefined, storageType) :\n          this.createSetting(settingName, defaultValue, storageType);\n\n      if (Root.Runtime.Runtime.platform() === 'mac' && registration.titleMac) {\n        setting.setTitleFunction(registration.titleMac);\n      } else {\n        setting.setTitleFunction(registration.title);\n      }\n      if (registration.userActionCondition) {\n        setting.setRequiresUserAction(Boolean(Root.Runtime.Runtime.queryParam(registration.userActionCondition)));\n      }\n      setting.setRegistration(registration);\n\n      this.registerModuleSetting(setting);\n    }\n  }\n\n  static hasInstance(): boolean {\n    return typeof settingsInstance !== 'undefined';\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n    syncedStorage: SettingsStorage|null,\n    globalStorage: SettingsStorage|null,\n    localStorage: SettingsStorage|null,\n  } = {forceNew: null, syncedStorage: null, globalStorage: null, localStorage: null}): Settings {\n    const {forceNew, syncedStorage, globalStorage, localStorage} = opts;\n    if (!settingsInstance || forceNew) {\n      if (!syncedStorage || !globalStorage || !localStorage) {\n        throw new Error(`Unable to create settings: global and local storage must be provided: ${new Error().stack}`);\n      }\n\n      settingsInstance = new Settings(syncedStorage, globalStorage, localStorage);\n    }\n\n    return settingsInstance;\n  }\n\n  static removeInstance(): void {\n    settingsInstance = undefined;\n  }\n\n  private registerModuleSetting(setting: Setting<unknown>): void {\n    const settingName = setting.name;\n    const category = setting.category();\n    const order = setting.order();\n    if (this.settingNameSet.has(settingName)) {\n      throw new Error(`Duplicate Setting name '${settingName}'`);\n    }\n    if (category && order) {\n      const orderValues = this.orderValuesBySettingCategory.get(category) || new Set();\n      if (orderValues.has(order)) {\n        throw new Error(`Duplicate order value '${order}' for settings category '${category}'`);\n      }\n      orderValues.add(order);\n      this.orderValuesBySettingCategory.set(category, orderValues);\n    }\n    this.settingNameSet.add(settingName);\n    this.moduleSettings.set(setting.name, setting);\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  moduleSetting<T = any>(settingName: string): Setting<T> {\n    const setting = this.moduleSettings.get(settingName) as Setting<T>;\n    if (!setting) {\n      throw new Error('No setting registered: ' + settingName);\n    }\n    return setting;\n  }\n\n  settingForTest(settingName: string): Setting<unknown> {\n    const setting = this.#registry.get(settingName);\n    if (!setting) {\n      throw new Error('No setting registered: ' + settingName);\n    }\n    return setting;\n  }\n\n  createSetting<T>(key: string, defaultValue: T, storageType?: SettingStorageType): Setting<T> {\n    const storage = this.storageFromType(storageType);\n    let setting = (this.#registry.get(key) as Setting<T>);\n    if (!setting) {\n      setting = new Setting(key, defaultValue, this.#eventSupport, storage);\n      this.#registry.set(key, setting);\n    }\n    return setting;\n  }\n\n  createLocalSetting<T>(key: string, defaultValue: T): Setting<T> {\n    return this.createSetting(key, defaultValue, SettingStorageType.Local);\n  }\n\n  createRegExpSetting(key: string, defaultValue: string, regexFlags?: string, storageType?: SettingStorageType):\n      RegExpSetting {\n    if (!this.#registry.get(key)) {\n      this.#registry.set(\n          key, new RegExpSetting(key, defaultValue, this.#eventSupport, this.storageFromType(storageType), regexFlags));\n    }\n    return this.#registry.get(key) as RegExpSetting;\n  }\n\n  clearAll(): void {\n    this.globalStorage.removeAll();\n    this.localStorage.removeAll();\n    const versionSetting = Settings.instance().createSetting(VersionController.currentVersionName, 0);\n    versionSetting.set(VersionController.currentVersion);\n  }\n\n  private storageFromType(storageType?: SettingStorageType): SettingsStorage {\n    switch (storageType) {\n      case SettingStorageType.Local:\n        return this.localStorage;\n      case SettingStorageType.Session:\n        return this.#sessionStorage;\n      case SettingStorageType.Global:\n        return this.globalStorage;\n      case SettingStorageType.Synced:\n        return this.syncedStorage;\n    }\n    return this.globalStorage;\n  }\n\n  getRegistry(): Map<string, Setting<unknown>> {\n    return this.#registry;\n  }\n}\n\nexport interface SettingsBackingStore {\n  register(setting: string): void;\n  get(setting: string): Promise<string>;\n  set(setting: string, value: string): void;\n  remove(setting: string): void;\n  clear(): void;\n}\n\nexport const NOOP_STORAGE: SettingsBackingStore = {\n  register: () => {},\n  set: () => {},\n  get: () => Promise.resolve(''),\n  remove: () => {},\n  clear: () => {},\n};\n\nexport class SettingsStorage {\n  constructor(\n      private object: Record<string, string>, private readonly backingStore: SettingsBackingStore = NOOP_STORAGE,\n      private readonly storagePrefix: string = '') {\n  }\n\n  register(name: string): void {\n    name = this.storagePrefix + name;\n    this.backingStore.register(name);\n  }\n\n  set(name: string, value: string): void {\n    name = this.storagePrefix + name;\n    this.object[name] = value;\n    this.backingStore.set(name, value);\n  }\n\n  has(name: string): boolean {\n    name = this.storagePrefix + name;\n    return name in this.object;\n  }\n\n  get(name: string): string {\n    name = this.storagePrefix + name;\n    return this.object[name];\n  }\n\n  async forceGet(originalName: string): Promise<string> {\n    const name = this.storagePrefix + originalName;\n    const value = await this.backingStore.get(name);\n    if (value && value !== this.object[name]) {\n      this.set(originalName, value);\n    } else if (!value) {\n      this.remove(originalName);\n    }\n    return value;\n  }\n\n  remove(name: string): void {\n    name = this.storagePrefix + name;\n    delete this.object[name];\n    this.backingStore.remove(name);\n  }\n\n  removeAll(): void {\n    this.object = {};\n    this.backingStore.clear();\n  }\n\n  dumpSizes(): void {\n    Console.instance().log('Ten largest settings: ');\n\n    const sizes: {\n      [x: string]: number,\n      // @ts-expect-error __proto__ optimization\n    } = {__proto__: null};\n    for (const key in this.object) {\n      sizes[key] = this.object[key].length;\n    }\n    const keys = Object.keys(sizes);\n\n    function comparator(key1: string, key2: string): number {\n      return sizes[key2] - sizes[key1];\n    }\n\n    keys.sort(comparator);\n\n    for (let i = 0; i < 10 && i < keys.length; ++i) {\n      Console.instance().log('Setting: \\'' + keys[i] + '\\', size: ' + sizes[keys[i]]);\n    }\n  }\n}\n\nfunction removeSetting(setting: Setting<unknown>): void {\n  const name = setting.name;\n  const settings = Settings.instance();\n\n  settings.getRegistry().delete(name);\n  settings.moduleSettings.delete(name);\n\n  setting.storage.remove(name);\n}\n\nexport class Setting<V> {\n  #titleFunction?: () => Platform.UIString.LocalizedString;\n  #titleInternal!: string;\n  #registration: SettingRegistration|null = null;\n  #requiresUserAction?: boolean;\n  #value?: V;\n  // TODO(crbug.com/1172300) Type cannot be inferred without changes to consumers. See above.\n  #serializer: Serializer<unknown, V> = JSON;\n  #hadUserAction?: boolean;\n  #disabled?: boolean;\n\n  constructor(\n      readonly name: string, readonly defaultValue: V, private readonly eventSupport: ObjectWrapper<GenericEvents>,\n      readonly storage: SettingsStorage) {\n    storage.register(name);\n  }\n\n  setSerializer(serializer: Serializer<unknown, V>): void {\n    this.#serializer = serializer;\n  }\n\n  addChangeListener(listener: (arg0: EventTargetEvent<V>) => void, thisObject?: Object): EventDescriptor {\n    return this.eventSupport.addEventListener(this.name, listener, thisObject);\n  }\n\n  removeChangeListener(listener: (arg0: EventTargetEvent<V>) => void, thisObject?: Object): void {\n    this.eventSupport.removeEventListener(this.name, listener, thisObject);\n  }\n\n  title(): string {\n    if (this.#titleInternal) {\n      return this.#titleInternal;\n    }\n    if (this.#titleFunction) {\n      return this.#titleFunction();\n    }\n    return '';\n  }\n\n  setTitleFunction(titleFunction: (() => Platform.UIString.LocalizedString)|undefined): void {\n    if (titleFunction) {\n      this.#titleFunction = titleFunction;\n    }\n  }\n\n  setTitle(title: string): void {\n    this.#titleInternal = title;\n  }\n\n  setRequiresUserAction(requiresUserAction: boolean): void {\n    this.#requiresUserAction = requiresUserAction;\n  }\n\n  disabled(): boolean {\n    return this.#disabled || false;\n  }\n\n  setDisabled(disabled: boolean): void {\n    this.#disabled = disabled;\n    this.eventSupport.dispatchEventToListeners(this.name);\n  }\n\n  get(): V {\n    if (this.#requiresUserAction && !this.#hadUserAction) {\n      return this.defaultValue;\n    }\n\n    if (typeof this.#value !== 'undefined') {\n      return this.#value;\n    }\n\n    this.#value = this.defaultValue;\n    if (this.storage.has(this.name)) {\n      try {\n        this.#value = this.#serializer.parse(this.storage.get(this.name));\n      } catch (e) {\n        this.storage.remove(this.name);\n      }\n    }\n    return this.#value;\n  }\n\n  async forceGet(): Promise<V> {\n    const name = this.name;\n    const oldValue = this.storage.get(name);\n    const value = await this.storage.forceGet(name);\n    this.#value = this.defaultValue;\n    if (value) {\n      try {\n        this.#value = this.#serializer.parse(value);\n      } catch (e) {\n        this.storage.remove(this.name);\n      }\n    }\n\n    if (oldValue !== value) {\n      this.eventSupport.dispatchEventToListeners(this.name, this.#value);\n    }\n\n    return this.#value;\n  }\n\n  set(value: V): void {\n    this.#hadUserAction = true;\n    this.#value = value;\n    try {\n      const settingString = this.#serializer.stringify(value);\n      try {\n        this.storage.set(this.name, settingString);\n      } catch (e) {\n        this.printSettingsSavingError(e.message, this.name, settingString);\n      }\n    } catch (e) {\n      Console.instance().error('Cannot stringify setting with name: ' + this.name + ', error: ' + e.message);\n    }\n    this.eventSupport.dispatchEventToListeners(this.name, value);\n  }\n\n  setRegistration(registration: SettingRegistration): void {\n    this.#registration = registration;\n  }\n\n  type(): SettingType|null {\n    if (this.#registration) {\n      return this.#registration.settingType;\n    }\n    return null;\n  }\n\n  options(): SimpleSettingOption[] {\n    if (this.#registration && this.#registration.options) {\n      return this.#registration.options.map(opt => {\n        const {value, title, text, raw} = opt;\n        return {\n          value: value,\n          title: title(),\n          text: typeof text === 'function' ? text() : text,\n          raw: raw,\n        };\n      });\n    }\n    return [];\n  }\n\n  reloadRequired(): boolean|null {\n    if (this.#registration) {\n      return this.#registration.reloadRequired || null;\n    }\n    return null;\n  }\n\n  category(): SettingCategory|null {\n    if (this.#registration) {\n      return this.#registration.category || null;\n    }\n    return null;\n  }\n\n  tags(): string|null {\n    if (this.#registration && this.#registration.tags) {\n      // Get localized keys and separate by null character to prevent fuzzy matching from matching across them.\n      return this.#registration.tags.map(tag => tag()).join('\\0');\n    }\n    return null;\n  }\n\n  order(): number|null {\n    if (this.#registration) {\n      return this.#registration.order || null;\n    }\n    return null;\n  }\n\n  private printSettingsSavingError(message: string, name: string, value: string): void {\n    const errorMessage =\n        'Error saving setting with name: ' + this.name + ', value length: ' + value.length + '. Error: ' + message;\n    console.error(errorMessage);\n    Console.instance().error(errorMessage);\n    this.storage.dumpSizes();\n  }\n}\n\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport class RegExpSetting extends Setting<any> {\n  #regexFlags: string|undefined;\n  #regex?: RegExp|null;\n\n  constructor(\n      name: string, defaultValue: string, eventSupport: ObjectWrapper<GenericEvents>, storage: SettingsStorage,\n      regexFlags?: string) {\n    super(name, defaultValue ? [{pattern: defaultValue}] : [], eventSupport, storage);\n    this.#regexFlags = regexFlags;\n  }\n\n  get(): string {\n    const result = [];\n    const items = this.getAsArray();\n    for (let i = 0; i < items.length; ++i) {\n      const item = items[i];\n      if (item.pattern && !item.disabled) {\n        result.push(item.pattern);\n      }\n    }\n    return result.join('|');\n  }\n\n  getAsArray(): RegExpSettingItem[] {\n    return super.get();\n  }\n\n  set(value: string): void {\n    this.setAsArray([{pattern: value, disabled: false}]);\n  }\n\n  setAsArray(value: RegExpSettingItem[]): void {\n    this.#regex = undefined;\n    super.set(value);\n  }\n\n  asRegExp(): RegExp|null {\n    if (typeof this.#regex !== 'undefined') {\n      return this.#regex;\n    }\n    this.#regex = null;\n    try {\n      const pattern = this.get();\n      if (pattern) {\n        this.#regex = new RegExp(pattern, this.#regexFlags || '');\n      }\n    } catch (e) {\n    }\n    return this.#regex;\n  }\n}\n\nexport class VersionController {\n  static get currentVersionName(): string {\n    return 'inspectorVersion';\n  }\n\n  static get currentVersion(): number {\n    return 31;\n  }\n\n  updateVersion(): void {\n    const localStorageVersion = window.localStorage ? window.localStorage[VersionController.currentVersionName] : 0;\n    const versionSetting = Settings.instance().createSetting(VersionController.currentVersionName, 0);\n    const currentVersion = VersionController.currentVersion;\n    const oldVersion = versionSetting.get() || parseInt(localStorageVersion || '0', 10);\n    if (oldVersion === 0) {\n      // First run, no need to do anything.\n      versionSetting.set(currentVersion);\n      return;\n    }\n    const methodsToRun = this.methodsToRunToUpdateVersion(oldVersion, currentVersion);\n    for (const method of methodsToRun) {\n      // @ts-ignore Special version method matching\n      this[method].call(this);\n    }\n    versionSetting.set(currentVersion);\n  }\n\n  private methodsToRunToUpdateVersion(oldVersion: number, currentVersion: number): string[] {\n    const result = [];\n    for (let i = oldVersion; i < currentVersion; ++i) {\n      result.push('updateVersionFrom' + i + 'To' + (i + 1));\n    }\n    return result;\n  }\n\n  private updateVersionFrom0To1(): void {\n    this.clearBreakpointsWhenTooMany(Settings.instance().createLocalSetting('breakpoints', []), 500000);\n  }\n\n  private updateVersionFrom1To2(): void {\n    Settings.instance().createSetting('previouslyViewedFiles', []).set([]);\n  }\n\n  private updateVersionFrom2To3(): void {\n    Settings.instance().createSetting('fileSystemMapping', {}).set({});\n    removeSetting(Settings.instance().createSetting('fileMappingEntries', []));\n  }\n\n  private updateVersionFrom3To4(): void {\n    const advancedMode = Settings.instance().createSetting('showHeaSnapshotObjectsHiddenProperties', false);\n    moduleSetting('showAdvancedHeapSnapshotProperties').set(advancedMode.get());\n    removeSetting(advancedMode);\n  }\n\n  private updateVersionFrom4To5(): void {\n    const settingNames: {\n      [x: string]: string,\n    } = {\n      'FileSystemViewSidebarWidth': 'fileSystemViewSplitViewState',\n      'elementsSidebarWidth': 'elementsPanelSplitViewState',\n      'StylesPaneSplitRatio': 'stylesPaneSplitViewState',\n      'heapSnapshotRetainersViewSize': 'heapSnapshotSplitViewState',\n      'InspectorView.splitView': 'InspectorView.splitViewState',\n      'InspectorView.screencastSplitView': 'InspectorView.screencastSplitViewState',\n      'Inspector.drawerSplitView': 'Inspector.drawerSplitViewState',\n      'layerDetailsSplitView': 'layerDetailsSplitViewState',\n      'networkSidebarWidth': 'networkPanelSplitViewState',\n      'sourcesSidebarWidth': 'sourcesPanelSplitViewState',\n      'scriptsPanelNavigatorSidebarWidth': 'sourcesPanelNavigatorSplitViewState',\n      'sourcesPanelSplitSidebarRatio': 'sourcesPanelDebuggerSidebarSplitViewState',\n      'timeline-details': 'timelinePanelDetailsSplitViewState',\n      'timeline-split': 'timelinePanelRecorsSplitViewState',\n      'timeline-view': 'timelinePanelTimelineStackSplitViewState',\n      'auditsSidebarWidth': 'auditsPanelSplitViewState',\n      'layersSidebarWidth': 'layersPanelSplitViewState',\n      'profilesSidebarWidth': 'profilesPanelSplitViewState',\n      'resourcesSidebarWidth': 'resourcesPanelSplitViewState',\n    };\n    const empty = {};\n    for (const oldName in settingNames) {\n      const newName = settingNames[oldName];\n      const oldNameH = oldName + 'H';\n\n      let newValue: {}|null = null;\n      const oldSetting = Settings.instance().createSetting(oldName, empty);\n      if (oldSetting.get() !== empty) {\n        newValue = newValue || {};\n        // @ts-expect-error\n        newValue.vertical = {};\n        // @ts-expect-error\n        newValue.vertical.size = oldSetting.get();\n        removeSetting(oldSetting);\n      }\n      const oldSettingH = Settings.instance().createSetting(oldNameH, empty);\n      if (oldSettingH.get() !== empty) {\n        newValue = newValue || {};\n        // @ts-expect-error\n        newValue.horizontal = {};\n        // @ts-expect-error\n        newValue.horizontal.size = oldSettingH.get();\n        removeSetting(oldSettingH);\n      }\n      if (newValue) {\n        Settings.instance().createSetting(newName, {}).set(newValue);\n      }\n    }\n  }\n\n  private updateVersionFrom5To6(): void {\n    const settingNames: {\n      [x: string]: string,\n    } = {\n      'debuggerSidebarHidden': 'sourcesPanelSplitViewState',\n      'navigatorHidden': 'sourcesPanelNavigatorSplitViewState',\n      'WebInspector.Drawer.showOnLoad': 'Inspector.drawerSplitViewState',\n    };\n\n    for (const oldName in settingNames) {\n      const oldSetting = Settings.instance().createSetting(oldName, null);\n      if (oldSetting.get() === null) {\n        removeSetting(oldSetting);\n        continue;\n      }\n\n      const newName = settingNames[oldName];\n      const invert = oldName === 'WebInspector.Drawer.showOnLoad';\n      const hidden = oldSetting.get() !== invert;\n      removeSetting(oldSetting);\n      const showMode = hidden ? 'OnlyMain' : 'Both';\n\n      const newSetting = Settings.instance().createSetting(newName, {});\n      const newValue = newSetting.get() || {};\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n      // @ts-expect-error\n      newValue.vertical = newValue.vertical || {};\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n      // @ts-expect-error\n      newValue.vertical.showMode = showMode;\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n      // @ts-expect-error\n      newValue.horizontal = newValue.horizontal || {};\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n      // @ts-expect-error\n      newValue.horizontal.showMode = showMode;\n      newSetting.set(newValue);\n    }\n  }\n\n  private updateVersionFrom6To7(): void {\n    const settingNames = {\n      'sourcesPanelNavigatorSplitViewState': 'sourcesPanelNavigatorSplitViewState',\n      'elementsPanelSplitViewState': 'elementsPanelSplitViewState',\n      'stylesPaneSplitViewState': 'stylesPaneSplitViewState',\n      'sourcesPanelDebuggerSidebarSplitViewState': 'sourcesPanelDebuggerSidebarSplitViewState',\n    };\n\n    const empty = {};\n    for (const name in settingNames) {\n      const setting =\n          Settings.instance().createSetting<{vertical?: {size?: number}, horizontal?: {size?: number}}>(name, empty);\n      const value = setting.get();\n      if (value === empty) {\n        continue;\n      }\n      // Zero out saved percentage sizes, and they will be restored to defaults.\n      if (value.vertical && value.vertical.size && value.vertical.size < 1) {\n        value.vertical.size = 0;\n      }\n      if (value.horizontal && value.horizontal.size && value.horizontal.size < 1) {\n        value.horizontal.size = 0;\n      }\n      setting.set(value);\n    }\n  }\n\n  private updateVersionFrom7To8(): void {\n  }\n\n  private updateVersionFrom8To9(): void {\n    const settingNames = ['skipStackFramesPattern', 'workspaceFolderExcludePattern'];\n\n    for (let i = 0; i < settingNames.length; ++i) {\n      const setting = Settings.instance().createSetting<string|unknown[]>(settingNames[i], '');\n      let value = setting.get();\n      if (!value) {\n        return;\n      }\n      if (typeof value === 'string') {\n        value = [value];\n      }\n      for (let j = 0; j < value.length; ++j) {\n        if (typeof value[j] === 'string') {\n          value[j] = {pattern: value[j]};\n        }\n      }\n      setting.set(value);\n    }\n  }\n\n  private updateVersionFrom9To10(): void {\n    // This one is localStorage specific, which is fine.\n    if (!window.localStorage) {\n      return;\n    }\n    for (const key in window.localStorage) {\n      if (key.startsWith('revision-history')) {\n        window.localStorage.removeItem(key);\n      }\n    }\n  }\n\n  private updateVersionFrom10To11(): void {\n    const oldSettingName = 'customDevicePresets';\n    const newSettingName = 'customEmulatedDeviceList';\n    const oldSetting = Settings.instance().createSetting<unknown>(oldSettingName, undefined);\n    const list = oldSetting.get();\n    if (!Array.isArray(list)) {\n      return;\n    }\n    const newList = [];\n    for (let i = 0; i < list.length; ++i) {\n      const value = list[i];\n      const device: {\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        [x: string]: any,\n      } = {};\n      device['title'] = value['title'];\n      device['type'] = 'unknown';\n      device['user-agent'] = value['userAgent'];\n      device['capabilities'] = [];\n      if (value['touch']) {\n        device['capabilities'].push('touch');\n      }\n      if (value['mobile']) {\n        device['capabilities'].push('mobile');\n      }\n      device['screen'] = {};\n      device['screen']['vertical'] = {width: value['width'], height: value['height']};\n      device['screen']['horizontal'] = {width: value['height'], height: value['width']};\n      device['screen']['device-pixel-ratio'] = value['deviceScaleFactor'];\n      device['modes'] = [];\n      device['show-by-default'] = true;\n      device['show'] = 'Default';\n      newList.push(device);\n    }\n    if (newList.length) {\n      Settings.instance().createSetting<unknown[]>(newSettingName, []).set(newList);\n    }\n    removeSetting(oldSetting);\n  }\n\n  private updateVersionFrom11To12(): void {\n    this.migrateSettingsFromLocalStorage();\n  }\n\n  private updateVersionFrom12To13(): void {\n    this.migrateSettingsFromLocalStorage();\n    removeSetting(Settings.instance().createSetting('timelineOverviewMode', ''));\n  }\n\n  private updateVersionFrom13To14(): void {\n    const defaultValue = {'throughput': -1, 'latency': 0};\n    Settings.instance().createSetting('networkConditions', defaultValue).set(defaultValue);\n  }\n\n  private updateVersionFrom14To15(): void {\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const setting = Settings.instance().createLocalSetting<any>('workspaceExcludedFolders', {});\n    const oldValue = setting.get();\n    const newValue: {\n      [x: string]: string[],\n    } = {};\n    for (const fileSystemPath in oldValue) {\n      newValue[fileSystemPath] = [];\n      for (const entry of oldValue[fileSystemPath]) {\n        newValue[fileSystemPath].push(entry.path);\n      }\n    }\n    setting.set(newValue);\n  }\n\n  private updateVersionFrom15To16(): void {\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const setting = Settings.instance().createSetting<any>('InspectorView.panelOrder', {});\n    const tabOrders = setting.get();\n    for (const key of Object.keys(tabOrders)) {\n      tabOrders[key] = (tabOrders[key] + 1) * 10;\n    }\n    setting.set(tabOrders);\n  }\n\n  private updateVersionFrom16To17(): void {\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const setting = Settings.instance().createSetting<any>('networkConditionsCustomProfiles', []);\n    const oldValue = setting.get();\n    const newValue = [];\n    if (Array.isArray(oldValue)) {\n      for (const preset of oldValue) {\n        if (typeof preset.title === 'string' && typeof preset.value === 'object' &&\n            typeof preset.value.throughput === 'number' && typeof preset.value.latency === 'number') {\n          newValue.push({\n            title: preset.title,\n            value: {download: preset.value.throughput, upload: preset.value.throughput, latency: preset.value.latency},\n          });\n        }\n      }\n    }\n    setting.set(newValue);\n  }\n\n  private updateVersionFrom17To18(): void {\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const setting = Settings.instance().createLocalSetting<any>('workspaceExcludedFolders', {});\n    const oldValue = setting.get();\n    const newValue: {\n      [x: string]: string,\n    } = {};\n    for (const oldKey in oldValue) {\n      let newKey = oldKey.replace(/\\\\/g, '/');\n      if (!newKey.startsWith('file://')) {\n        if (newKey.startsWith('/')) {\n          newKey = 'file://' + newKey;\n        } else {\n          newKey = 'file:///' + newKey;\n        }\n      }\n      newValue[newKey] = oldValue[oldKey];\n    }\n    setting.set(newValue);\n  }\n\n  private updateVersionFrom18To19(): void {\n    const defaultColumns = {status: true, type: true, initiator: true, size: true, time: true};\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const visibleColumnSettings = Settings.instance().createSetting<any>('networkLogColumnsVisibility', defaultColumns);\n    const visibleColumns = visibleColumnSettings.get();\n    visibleColumns.name = true;\n    visibleColumns.timeline = true;\n\n    const configs: {\n      [x: string]: {\n        visible: number,\n      },\n    } = {};\n    for (const columnId in visibleColumns) {\n      if (!visibleColumns.hasOwnProperty(columnId)) {\n        continue;\n      }\n      configs[columnId.toLowerCase()] = {visible: visibleColumns[columnId]};\n    }\n    const newSetting = Settings.instance().createSetting('networkLogColumns', {});\n    newSetting.set(configs);\n    removeSetting(visibleColumnSettings);\n  }\n\n  private updateVersionFrom19To20(): void {\n    const oldSetting = Settings.instance().createSetting('InspectorView.panelOrder', {});\n    const newSetting = Settings.instance().createSetting('panel-tabOrder', {});\n    newSetting.set(oldSetting.get());\n    removeSetting(oldSetting);\n  }\n\n  private updateVersionFrom20To21(): void {\n    const networkColumns = Settings.instance().createSetting('networkLogColumns', {});\n    const columns = (networkColumns.get() as {\n      [x: string]: string,\n    });\n    delete columns['timeline'];\n    delete columns['waterfall'];\n    networkColumns.set(columns);\n  }\n\n  private updateVersionFrom21To22(): void {\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const breakpointsSetting = Settings.instance().createLocalSetting<any>('breakpoints', []);\n    const breakpoints = breakpointsSetting.get();\n    for (const breakpoint of breakpoints) {\n      breakpoint['url'] = breakpoint['sourceFileId'];\n      delete breakpoint['sourceFileId'];\n    }\n    breakpointsSetting.set(breakpoints);\n  }\n\n  private updateVersionFrom22To23(): void {\n    // This update is no-op.\n  }\n\n  private updateVersionFrom23To24(): void {\n    const oldSetting = Settings.instance().createSetting('searchInContentScripts', false);\n    const newSetting = Settings.instance().createSetting('searchInAnonymousAndContentScripts', false);\n    newSetting.set(oldSetting.get());\n    removeSetting(oldSetting);\n  }\n\n  private updateVersionFrom24To25(): void {\n    const defaultColumns = {status: true, type: true, initiator: true, size: true, time: true};\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const networkLogColumnsSetting = Settings.instance().createSetting<any>('networkLogColumns', defaultColumns);\n    const columns = networkLogColumnsSetting.get();\n    delete columns.product;\n    networkLogColumnsSetting.set(columns);\n  }\n\n  private updateVersionFrom25To26(): void {\n    const oldSetting = Settings.instance().createSetting('messageURLFilters', {});\n    const urls = Object.keys(oldSetting.get());\n    const textFilter = urls.map(url => `-url:${url}`).join(' ');\n    if (textFilter) {\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const textFilterSetting = Settings.instance().createSetting<any>('console.textFilter', '');\n      const suffix = textFilterSetting.get() ? ` ${textFilterSetting.get()}` : '';\n      textFilterSetting.set(`${textFilter}${suffix}`);\n    }\n    removeSetting(oldSetting);\n  }\n\n  private updateVersionFrom26To27(): void {\n    function renameKeyInObjectSetting(settingName: string, from: string, to: string): void {\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const setting = Settings.instance().createSetting<any>(settingName, {});\n      const value = setting.get();\n      if (from in value) {\n        value[to] = value[from];\n        delete value[from];\n        setting.set(value);\n      }\n    }\n\n    function renameInStringSetting(settingName: string, from: string, to: string): void {\n      const setting = Settings.instance().createSetting(settingName, '');\n      const value = setting.get();\n      if (value === from) {\n        setting.set(to);\n      }\n    }\n\n    renameKeyInObjectSetting('panel-tabOrder', 'audits2', 'audits');\n    renameKeyInObjectSetting('panel-closeableTabs', 'audits2', 'audits');\n    renameInStringSetting('panel-selectedTab', 'audits2', 'audits');\n  }\n\n  private updateVersionFrom27To28(): void {\n    const setting = Settings.instance().createSetting('uiTheme', 'systemPreferred');\n    if (setting.get() === 'default') {\n      setting.set('systemPreferred');\n    }\n  }\n\n  private updateVersionFrom28To29(): void {\n    function renameKeyInObjectSetting(settingName: string, from: string, to: string): void {\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const setting = Settings.instance().createSetting<any>(settingName, {});\n      const value = setting.get();\n      if (from in value) {\n        value[to] = value[from];\n        delete value[from];\n        setting.set(value);\n      }\n    }\n\n    function renameInStringSetting(settingName: string, from: string, to: string): void {\n      const setting = Settings.instance().createSetting(settingName, '');\n      const value = setting.get();\n      if (value === from) {\n        setting.set(to);\n      }\n    }\n\n    renameKeyInObjectSetting('panel-tabOrder', 'audits', 'lighthouse');\n    renameKeyInObjectSetting('panel-closeableTabs', 'audits', 'lighthouse');\n    renameInStringSetting('panel-selectedTab', 'audits', 'lighthouse');\n  }\n\n  private updateVersionFrom29To30(): void {\n    // Create new location agnostic setting\n    const closeableTabSetting = Settings.instance().createSetting('closeableTabs', {});\n\n    // Read current settings\n    const panelCloseableTabSetting = Settings.instance().createSetting('panel-closeableTabs', {});\n    const drawerCloseableTabSetting = Settings.instance().createSetting('drawer-view-closeableTabs', {});\n    const openTabsInPanel = panelCloseableTabSetting.get();\n    const openTabsInDrawer = panelCloseableTabSetting.get();\n\n    // Set #value of new setting\n    const newValue = Object.assign(openTabsInDrawer, openTabsInPanel);\n    closeableTabSetting.set(newValue);\n\n    // Remove old settings\n    removeSetting(panelCloseableTabSetting);\n    removeSetting(drawerCloseableTabSetting);\n  }\n\n  private updateVersionFrom30To31(): void {\n    // Remove recorder_recordings setting that was used for storing recordings\n    // by an old recorder experiment.\n    const recordingsSetting = Settings.instance().createSetting('recorder_recordings', []);\n    removeSetting(recordingsSetting);\n  }\n\n  private migrateSettingsFromLocalStorage(): void {\n    // This step migrates all the settings except for the ones below into the browser profile.\n    const localSettings = new Set<string>([\n      'advancedSearchConfig',\n      'breakpoints',\n      'consoleHistory',\n      'domBreakpoints',\n      'eventListenerBreakpoints',\n      'fileSystemMapping',\n      'lastSelectedSourcesSidebarPaneTab',\n      'previouslyViewedFiles',\n      'savedURLs',\n      'watchExpressions',\n      'workspaceExcludedFolders',\n      'xhrBreakpoints',\n    ]);\n    if (!window.localStorage) {\n      return;\n    }\n\n    for (const key in window.localStorage) {\n      if (localSettings.has(key)) {\n        continue;\n      }\n      const value = window.localStorage[key];\n      window.localStorage.removeItem(key);\n      Settings.instance().globalStorage.set(key, value);\n    }\n  }\n\n  private clearBreakpointsWhenTooMany(breakpointsSetting: Setting<unknown[]>, maxBreakpointsCount: number): void {\n    // If there are too many breakpoints in a storage, it is likely due to a recent bug that caused\n    // periodical breakpoints duplication leading to inspector slowness.\n    if (breakpointsSetting.get().length > maxBreakpointsCount) {\n      breakpointsSetting.set([]);\n    }\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum SettingStorageType {\n  /**\n   * Synced storage persists settings with the active Chrome profile but also\n   * syncs the settings across devices via Chrome Sync.\n   */\n  Synced = 'Synced',\n  /** Global storage persists settings with the active Chrome profile */\n  Global = 'Global',\n  /** Uses Window.localStorage */\n  Local = 'Local',\n  /** Session storage dies when DevTools window closes */\n  Session = 'Session',\n}\n\nexport function moduleSetting(settingName: string): Setting<unknown> {\n  return Settings.instance().moduleSetting(settingName);\n}\n\nexport function settingForTest(settingName: string): Setting<unknown> {\n  return Settings.instance().settingForTest(settingName);\n}\n\nexport function detectColorFormat(color: Color): Format {\n  const cf = Format;\n  let format;\n  const formatSetting = Settings.instance().moduleSetting('colorFormat').get();\n  if (formatSetting === cf.Original) {\n    format = cf.Original;\n  } else if (formatSetting === cf.RGB) {\n    format = cf.RGB;\n  } else if (formatSetting === cf.HSL) {\n    format = cf.HSL;\n  } else if (formatSetting === cf.HWB) {\n    format = cf.HWB;\n  } else if (formatSetting === cf.HEX) {\n    format = color.detectHEXFormat();\n  } else {\n    format = cf.RGB;\n  }\n\n  return format;\n}\n\nexport {\n  getLocalizedSettingsCategory,\n  getRegisteredSettings,\n  maybeRemoveSettingExtension,\n  registerSettingExtension,\n  RegExpSettingItem,\n  SettingCategory,\n  SettingExtensionOption,\n  SettingRegistration,\n  SettingType,\n  registerSettingsForTest,\n  resetSettings,\n};\n\nexport interface Serializer<I, O> {\n  stringify: (value: I) => string;\n  parse: (value: string) => O;\n}\n\nexport interface SimpleSettingOption {\n  value: string|boolean;\n  title: string;\n  text?: string;\n  raw?: boolean;\n}\n"],
  "mappings": "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",
  "names": []
}
