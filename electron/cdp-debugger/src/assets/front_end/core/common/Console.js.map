{
  "version": 3,
  "sources": ["../../../../../../front_end/core/common/Console.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {ObjectWrapper} from './Object.js';\nimport {reveal} from './Revealer.js';\n\nlet consoleInstance: Console;\n\nexport class Console extends ObjectWrapper<EventTypes> {\n  readonly #messagesInternal: Message[];\n  /**\n   * Instantiable via the instance() factory below.\n   */\n  private constructor() {\n    super();\n    this.#messagesInternal = [];\n  }\n\n  static instance({forceNew}: {\n    forceNew: boolean,\n  } = {forceNew: false}): Console {\n    if (!consoleInstance || forceNew) {\n      consoleInstance = new Console();\n    }\n\n    return consoleInstance;\n  }\n\n  addMessage(text: string, level: MessageLevel, show?: boolean): void {\n    const message = new Message(text, level || MessageLevel.Info, Date.now(), show || false);\n    this.#messagesInternal.push(message);\n    this.dispatchEventToListeners(Events.MessageAdded, message);\n  }\n\n  log(text: string): void {\n    this.addMessage(text, MessageLevel.Info);\n  }\n\n  warn(text: string): void {\n    this.addMessage(text, MessageLevel.Warning);\n  }\n\n  error(text: string): void {\n    this.addMessage(text, MessageLevel.Error, true);\n  }\n\n  messages(): Message[] {\n    return this.#messagesInternal;\n  }\n\n  show(): void {\n    void this.showPromise();\n  }\n\n  showPromise(): Promise<void> {\n    return reveal(this);\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  MessageAdded = 'messageAdded',\n}\n\nexport type EventTypes = {\n  [Events.MessageAdded]: Message,\n};\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum MessageLevel {\n  Info = 'info',\n  Warning = 'warning',\n  Error = 'error',\n}\n\nexport class Message {\n  text: string;\n  level: MessageLevel;\n  timestamp: number;\n  show: boolean;\n  constructor(text: string, level: MessageLevel, timestamp: number, show: boolean) {\n    this.text = text;\n    this.level = level;\n    this.timestamp = (typeof timestamp === 'number') ? timestamp : Date.now();\n    this.show = show;\n  }\n}\n"],
  "mappings": "AAIA;AACA;AAEA,IAAI;AAEG,6BAAsB,cAA0B;AAAA;AAAA,EAK7C,cAAc;AACpB;AACA,6BAAyB;AAAA;AAAA,SAGpB,SAAS,EAAC,aAEb,EAAC,UAAU,SAAiB;AAC9B,QAAI,CAAC,mBAAmB,UAAU;AAChC,wBAAkB,IAAI;AAAA;AAGxB,WAAO;AAAA;AAAA,EAGT,WAAW,MAAc,OAAqB,MAAsB;AAClE,UAAM,UAAU,IAAI,QAAQ,MAAM,SAAS,aAAa,MAAM,KAAK,OAAO,QAAQ;AAClF,2BAAuB,KAAK;AAC5B,SAAK,yBAAyB,OAAO,cAAc;AAAA;AAAA,EAGrD,IAAI,MAAoB;AACtB,SAAK,WAAW,MAAM,aAAa;AAAA;AAAA,EAGrC,KAAK,MAAoB;AACvB,SAAK,WAAW,MAAM,aAAa;AAAA;AAAA,EAGrC,MAAM,MAAoB;AACxB,SAAK,WAAW,MAAM,aAAa,OAAO;AAAA;AAAA,EAG5C,WAAsB;AACpB,WAAO;AAAA;AAAA,EAGT,OAAa;AACX,SAAK,KAAK;AAAA;AAAA,EAGZ,cAA6B;AAC3B,WAAO,OAAO;AAAA;AAAA;AAMX,WAAK,SAAL,kBAAK,YAAL;AACL,4BAAe;AADL;AAAA;AAUL,WAAK,eAAL,kBAAK,kBAAL;AACL,0BAAO;AACP,6BAAU;AACV,2BAAQ;AAHE;AAAA;AAML,qBAAc;AAAA,EACnB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,YAAY,MAAc,OAAqB,WAAmB,MAAe;AAC/E,SAAK,OAAO;AACZ,SAAK,QAAQ;AACb,SAAK,YAAa,OAAO,cAAc,WAAY,YAAY,KAAK;AACpE,SAAK,OAAO;AAAA;AAAA;",
  "names": []
}
