{
  "version": 3,
  "sources": ["../../../../../../front_end/core/common/Throttler.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nexport type FinishCallback = (err: Error) => void;\n\nexport class Throttler {\n  readonly #timeout: number;\n  #isRunningProcess: boolean;\n  #asSoonAsPossible: boolean;\n  #process: (() => (Promise<unknown>))|null;\n  #lastCompleteTime: number;\n  #schedulePromise: Promise<unknown>;\n  #scheduleResolve!: (value: unknown) => void;\n  #processTimeout?: number;\n\n  constructor(timeout: number) {\n    this.#timeout = timeout;\n    this.#isRunningProcess = false;\n    this.#asSoonAsPossible = false;\n    this.#process = null;\n    this.#lastCompleteTime = 0;\n\n    this.#schedulePromise = new Promise(fulfill => {\n      this.#scheduleResolve = fulfill;\n    });\n  }\n\n  private processCompleted(): void {\n    this.#lastCompleteTime = this.getTime();\n    this.#isRunningProcess = false;\n    if (this.#process) {\n      this.innerSchedule(false);\n    }\n    this.processCompletedForTests();\n  }\n\n  private processCompletedForTests(): void {\n    // For sniffing in tests.\n  }\n\n  get process(): (() => (Promise<unknown>))|null {\n    return this.#process;\n  }\n\n  private onTimeout(): void {\n    this.#processTimeout = undefined;\n    this.#asSoonAsPossible = false;\n    this.#isRunningProcess = true;\n\n    void Promise.resolve()\n        .then(this.#process)\n        .catch(console.error.bind(console))\n        .then(this.processCompleted.bind(this))\n        .then(this.#scheduleResolve);\n    this.#schedulePromise = new Promise(fulfill => {\n      this.#scheduleResolve = fulfill;\n    });\n    this.#process = null;\n  }\n\n  schedule(process: () => (Promise<unknown>), asSoonAsPossible?: boolean): Promise<void> {\n    // Deliberately skip previous #process.\n    this.#process = process;\n\n    // Run the first scheduled task instantly.\n    const hasScheduledTasks = Boolean(this.#processTimeout) || this.#isRunningProcess;\n    const okToFire = this.getTime() - this.#lastCompleteTime > this.#timeout;\n    asSoonAsPossible = Boolean(asSoonAsPossible) || (!hasScheduledTasks && okToFire);\n\n    const forceTimerUpdate = asSoonAsPossible && !this.#asSoonAsPossible;\n    this.#asSoonAsPossible = this.#asSoonAsPossible || asSoonAsPossible;\n\n    this.innerSchedule(forceTimerUpdate);\n\n    return this.#schedulePromise as Promise<void>;\n  }\n\n  private innerSchedule(forceTimerUpdate: boolean): void {\n    if (this.#isRunningProcess) {\n      return;\n    }\n    if (this.#processTimeout && !forceTimerUpdate) {\n      return;\n    }\n    if (this.#processTimeout) {\n      this.clearTimeout(this.#processTimeout);\n    }\n\n    const timeout = this.#asSoonAsPossible ? 0 : this.#timeout;\n    this.#processTimeout = this.setTimeout(this.onTimeout.bind(this), timeout);\n  }\n\n  private clearTimeout(timeoutId: number): void {\n    clearTimeout(timeoutId);\n  }\n\n  private setTimeout(operation: () => void, timeout: number): number {\n    return window.setTimeout(operation, timeout);\n  }\n\n  private getTime(): number {\n    return window.performance.now();\n  }\n}\n"],
  "mappings": "AAMO,uBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUrB,YAAY,SAAiB;AAC3B,oBAAgB;AAChB,6BAAyB;AACzB,6BAAyB;AACzB,oBAAgB;AAChB,6BAAyB;AAEzB,4BAAwB,IAAI,QAAQ,aAAW;AAC7C,8BAAwB;AAAA;AAAA;AAAA,EAIpB,mBAAyB;AAC/B,6BAAyB,KAAK;AAC9B,6BAAyB;AACzB,QAAI,eAAe;AACjB,WAAK,cAAc;AAAA;AAErB,SAAK;AAAA;AAAA,EAGC,2BAAiC;AAAA;AAAA,MAIrC,UAA2C;AAC7C,WAAO;AAAA;AAAA,EAGD,YAAkB;AACxB,2BAAuB;AACvB,6BAAyB;AACzB,6BAAyB;AAEzB,SAAK,QAAQ,UACR,KAAK,eACL,MAAM,QAAQ,MAAM,KAAK,UACzB,KAAK,KAAK,iBAAiB,KAAK,OAChC,KAAK;AACV,4BAAwB,IAAI,QAAQ,aAAW;AAC7C,8BAAwB;AAAA;AAE1B,oBAAgB;AAAA;AAAA,EAGlB,SAAS,SAAmC,kBAA2C;AAErF,oBAAgB;AAGhB,UAAM,oBAAoB,QAAQ,yBAAyB;AAC3D,UAAM,WAAW,KAAK,YAAY,yBAAyB;AAC3D,uBAAmB,QAAQ,qBAAsB,CAAC,qBAAqB;AAEvE,UAAM,mBAAmB,oBAAoB,CAAC;AAC9C,6BAAyB,0BAA0B;AAEnD,SAAK,cAAc;AAEnB,WAAO;AAAA;AAAA,EAGD,cAAc,kBAAiC;AACrD,QAAI,wBAAwB;AAC1B;AAAA;AAEF,QAAI,wBAAwB,CAAC,kBAAkB;AAC7C;AAAA;AAEF,QAAI,sBAAsB;AACxB,WAAK,aAAa;AAAA;AAGpB,UAAM,UAAU,yBAAyB,IAAI;AAC7C,2BAAuB,KAAK,WAAW,KAAK,UAAU,KAAK,OAAO;AAAA;AAAA,EAG5D,aAAa,WAAyB;AAC5C,iBAAa;AAAA;AAAA,EAGP,WAAW,WAAuB,SAAyB;AACjE,WAAO,OAAO,WAAW,WAAW;AAAA;AAAA,EAG9B,UAAkB;AACxB,WAAO,OAAO,YAAY;AAAA;AAAA;",
  "names": []
}
