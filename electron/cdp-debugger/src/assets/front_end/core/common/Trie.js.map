{
  "version": 3,
  "sources": ["../../../../../../front_end/core/common/Trie.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nexport class Trie {\n  #size!: number;\n  #root: number;\n  #edges!: {\n    [x: string]: number,\n  }[];\n  #isWord!: boolean[];\n  #wordsInSubtree!: number[];\n  #freeNodes!: number[];\n\n  constructor() {\n    this.#root = 0;\n    this.clear();\n  }\n\n  add(word: string): void {\n    let node: number = this.#root;\n    ++this.#wordsInSubtree[this.#root];\n    for (let i = 0; i < word.length; ++i) {\n      const edge = word[i];\n      let next: number = this.#edges[node][edge];\n      if (!next) {\n        if (this.#freeNodes.length) {\n          next = (this.#freeNodes.pop() as number);\n        } else {\n          next = this.#size++;\n          this.#isWord.push(false);\n          this.#wordsInSubtree.push(0);\n          this.#edges.push(Object.create(null));\n        }\n        this.#edges[node][edge] = next;\n      }\n      ++this.#wordsInSubtree[next];\n      node = next;\n    }\n    this.#isWord[node] = true;\n  }\n\n  remove(word: string): boolean {\n    if (!this.has(word)) {\n      return false;\n    }\n    let node: number = this.#root;\n    --this.#wordsInSubtree[this.#root];\n    for (let i = 0; i < word.length; ++i) {\n      const edge = word[i];\n      const next = this.#edges[node][edge];\n      if (!--this.#wordsInSubtree[next]) {\n        delete this.#edges[node][edge];\n        this.#freeNodes.push(next);\n      }\n      node = next;\n    }\n    this.#isWord[node] = false;\n    return true;\n  }\n\n  has(word: string): boolean {\n    let node: number = this.#root;\n    for (let i = 0; i < word.length; ++i) {\n      node = this.#edges[node][word[i]];\n      if (!node) {\n        return false;\n      }\n    }\n    return this.#isWord[node];\n  }\n\n  words(prefix?: string): string[] {\n    prefix = prefix || '';\n    let node: number = this.#root;\n    for (let i = 0; i < prefix.length; ++i) {\n      node = this.#edges[node][prefix[i]];\n      if (!node) {\n        return [];\n      }\n    }\n    const results: string[] = [];\n    this.dfs(node, prefix, results);\n    return results;\n  }\n\n  private dfs(node: number, prefix: string, results: string[]): void {\n    if (this.#isWord[node]) {\n      results.push(prefix);\n    }\n    const edges = this.#edges[node];\n    for (const edge in edges) {\n      this.dfs(edges[edge], prefix + edge, results);\n    }\n  }\n\n  longestPrefix(word: string, fullWordOnly: boolean): string {\n    let node: number = this.#root;\n    let wordIndex = 0;\n    for (let i = 0; i < word.length; ++i) {\n      node = this.#edges[node][word[i]];\n      if (!node) {\n        break;\n      }\n      if (!fullWordOnly || this.#isWord[node]) {\n        wordIndex = i + 1;\n      }\n    }\n    return word.substring(0, wordIndex);\n  }\n\n  clear(): void {\n    this.#size = 1;\n    this.#root = 0;\n    this.#edges = [Object.create(null)];\n    this.#isWord = [false];\n    this.#wordsInSubtree = [0];\n    this.#freeNodes = [];\n  }\n}\n"],
  "mappings": "AAIO,kBAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUhB,cAAc;AACZ,iBAAa;AACb,SAAK;AAAA;AAAA,EAGP,IAAI,MAAoB;AACtB,QAAI,OAAe;AACnB,MAAE,qBAAqB;AACvB,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AACpC,YAAM,OAAO,KAAK;AAClB,UAAI,OAAe,YAAY,MAAM;AACrC,UAAI,CAAC,MAAM;AACT,YAAI,gBAAgB,QAAQ;AAC1B,iBAAQ,gBAAgB;AAAA,eACnB;AACL,iBAAO;AACP,uBAAa,KAAK;AAClB,+BAAqB,KAAK;AAC1B,sBAAY,KAAK,uBAAO,OAAO;AAAA;AAEjC,oBAAY,MAAM,QAAQ;AAAA;AAE5B,QAAE,qBAAqB;AACvB,aAAO;AAAA;AAET,iBAAa,QAAQ;AAAA;AAAA,EAGvB,OAAO,MAAuB;AAC5B,QAAI,CAAC,KAAK,IAAI,OAAO;AACnB,aAAO;AAAA;AAET,QAAI,OAAe;AACnB,MAAE,qBAAqB;AACvB,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AACpC,YAAM,OAAO,KAAK;AAClB,YAAM,OAAO,YAAY,MAAM;AAC/B,UAAI,CAAC,EAAE,qBAAqB,OAAO;AACjC,eAAO,YAAY,MAAM;AACzB,wBAAgB,KAAK;AAAA;AAEvB,aAAO;AAAA;AAET,iBAAa,QAAQ;AACrB,WAAO;AAAA;AAAA,EAGT,IAAI,MAAuB;AACzB,QAAI,OAAe;AACnB,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AACpC,aAAO,YAAY,MAAM,KAAK;AAC9B,UAAI,CAAC,MAAM;AACT,eAAO;AAAA;AAAA;AAGX,WAAO,aAAa;AAAA;AAAA,EAGtB,MAAM,QAA2B;AAC/B,aAAS,UAAU;AACnB,QAAI,OAAe;AACnB,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,EAAE,GAAG;AACtC,aAAO,YAAY,MAAM,OAAO;AAChC,UAAI,CAAC,MAAM;AACT,eAAO;AAAA;AAAA;AAGX,UAAM,UAAoB;AAC1B,SAAK,IAAI,MAAM,QAAQ;AACvB,WAAO;AAAA;AAAA,EAGD,IAAI,MAAc,QAAgB,SAAyB;AACjE,QAAI,aAAa,OAAO;AACtB,cAAQ,KAAK;AAAA;AAEf,UAAM,QAAQ,YAAY;AAC1B,eAAW,QAAQ,OAAO;AACxB,WAAK,IAAI,MAAM,OAAO,SAAS,MAAM;AAAA;AAAA;AAAA,EAIzC,cAAc,MAAc,cAA+B;AACzD,QAAI,OAAe;AACnB,QAAI,YAAY;AAChB,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AACpC,aAAO,YAAY,MAAM,KAAK;AAC9B,UAAI,CAAC,MAAM;AACT;AAAA;AAEF,UAAI,CAAC,gBAAgB,aAAa,OAAO;AACvC,oBAAY,IAAI;AAAA;AAAA;AAGpB,WAAO,KAAK,UAAU,GAAG;AAAA;AAAA,EAG3B,QAAc;AACZ,iBAAa;AACb,iBAAa;AACb,kBAAc,CAAC,uBAAO,OAAO;AAC7B,mBAAe,CAAC;AAChB,2BAAuB,CAAC;AACxB,sBAAkB;AAAA;AAAA;",
  "names": []
}
