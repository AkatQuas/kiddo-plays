{
  "version": 3,
  "sources": ["../../../../../../front_end/core/common/ColorUtils.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/**\n * Combine the two given colors according to alpha blending.\n */\nexport function blendColors(fgRGBA: number[], bgRGBA: number[]): number[] {\n  const alpha = fgRGBA[3];\n  return [\n    ((1 - alpha) * bgRGBA[0]) + (alpha * fgRGBA[0]),\n    ((1 - alpha) * bgRGBA[1]) + (alpha * fgRGBA[1]),\n    ((1 - alpha) * bgRGBA[2]) + (alpha * fgRGBA[2]),\n    alpha + (bgRGBA[3] * (1 - alpha)),\n  ];\n}\n\nfunction rgbToHue([r, g, b]: number[]): number {\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const diff = max - min;\n\n  let h;\n  if (min === max) {\n    h = 0;\n  } else if (r === max) {\n    h = ((1 / 6 * (g - b) / diff) + 1) % 1;\n  } else if (g === max) {\n    h = (1 / 6 * (b - r) / diff) + 1 / 3;\n  } else {\n    h = (1 / 6 * (r - g) / diff) + 2 / 3;\n  }\n  return h;\n}\n\nexport function rgbaToHsla([r, g, b, a]: number[]): number[] {\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const diff = max - min;\n  const sum = max + min;\n\n  const h = rgbToHue([r, g, b]);\n  const l = 0.5 * sum;\n\n  let s;\n  if (l === 0) {\n    s = 0;\n  } else if (l === 1) {\n    s = 0;\n  } else if (l <= 0.5) {\n    s = diff / sum;\n  } else {\n    s = diff / (2 - sum);\n  }\n\n  return [h, s, l, a];\n}\n\nexport function rgbaToHwba([r, g, b, a]: number[]): number[] {\n  const h = rgbToHue([r, g, b]);\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n\n  return [h, min, 1 - max, a];\n}\n\n/**\n* Calculate the luminance of this color using the WCAG algorithm.\n* See http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n*/\nexport function luminance([rSRGB, gSRGB, bSRGB]: number[]): number {\n  const r = rSRGB <= 0.03928 ? rSRGB / 12.92 : Math.pow(((rSRGB + 0.055) / 1.055), 2.4);\n  const g = gSRGB <= 0.03928 ? gSRGB / 12.92 : Math.pow(((gSRGB + 0.055) / 1.055), 2.4);\n  const b = bSRGB <= 0.03928 ? bSRGB / 12.92 : Math.pow(((bSRGB + 0.055) / 1.055), 2.4);\n\n  return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n}\n\n/**\n * Calculate the contrast ratio between a foreground and a background color.\n * Returns the ratio to 1, for example for two two colors with a contrast ratio of 21:1, this function will return 21.\n * See http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n */\nexport function contrastRatio(fgRGBA: number[], bgRGBA: number[]): number {\n  const blendedFg = blendColors(fgRGBA, bgRGBA);\n  const fgLuminance = luminance(blendedFg);\n  const bgLuminance = luminance(bgRGBA);\n  const contrastRatio = (Math.max(fgLuminance, bgLuminance) + 0.05) / (Math.min(fgLuminance, bgLuminance) + 0.05);\n  return contrastRatio;\n}\n\n// Constants for basic APCA version.\n// See https://github.com/Myndex/SAPC-APCA\nconst mainTRC = 2.4;\nconst normBgExp = 0.55;\nconst normFgExp = 0.58;\nconst revBgExp = 0.62;\nconst revFgExp = 0.57;\nconst blkThrs = 0.03;\nconst blkClmp = 1.45;\nconst scaleBoW = 1.25;\nconst scaleWoB = 1.25;\nconst deltaLuminanceMin = 0.0005;\nconst loConThresh = 0.078;\nconst loConFactor = 12.82051282051282;\nconst loConOffset = 0.06;\nconst loClip = 0.001;\n\n/**\n* Calculate relative luminance of a color.\n* See https://github.com/Myndex/SAPC-APCA\n*/\nexport function luminanceAPCA([rSRGB, gSRGB, bSRGB]: number[]): number {\n  const r = Math.pow(rSRGB, mainTRC);\n  const g = Math.pow(gSRGB, mainTRC);\n  const b = Math.pow(bSRGB, mainTRC);\n\n  return 0.2126729 * r + 0.7151522 * g + 0.0721750 * b;\n}\n\n/**\n * Calculate the contrast ratio between a foreground and a background color.\n * Returns the percentage of the predicted visual contrast.\n * See https://github.com/Myndex/SAPC-APCA\n */\nexport function contrastRatioAPCA(fgRGBA: number[], bgRGBA: number[]): number {\n  const blendedFg = blendColors(fgRGBA, bgRGBA);\n  return contrastRatioByLuminanceAPCA(luminanceAPCA(blendedFg), luminanceAPCA(bgRGBA));\n}\n\nfunction clampLuminance(value: number): number {\n  return value > blkThrs ? value : (value + Math.pow(blkThrs - value, blkClmp));\n}\n\nexport function contrastRatioByLuminanceAPCA(fgLuminance: number, bgLuminance: number): number {\n  fgLuminance = clampLuminance(fgLuminance);\n  bgLuminance = clampLuminance(bgLuminance);\n  if (Math.abs(fgLuminance - bgLuminance) < deltaLuminanceMin) {\n    return 0;\n  }\n  let result = 0;\n  if (bgLuminance >= fgLuminance) {  // Black text on white.\n    result = (Math.pow(bgLuminance, normBgExp) - Math.pow(fgLuminance, normFgExp)) * scaleBoW;\n    result = result < loClip ?\n        0 :\n        (result < loConThresh ? result - result * loConFactor * loConOffset : result - loConOffset);\n  } else {\n    // White text on black.\n    result = (Math.pow(bgLuminance, revBgExp) - Math.pow(fgLuminance, revFgExp)) * scaleWoB;\n    result = result > -loClip ?\n        0 :\n        (result > -loConThresh ? result - result * loConFactor * loConOffset : result + loConOffset);\n  }\n  return result * 100;\n}\n\n/**\n * Compute a desired luminance given a given luminance and a desired contrast\n * percentage according to APCA.\n */\nexport function desiredLuminanceAPCA(luminance: number, contrast: number, lighter: boolean): number {\n  luminance = clampLuminance(luminance);\n  contrast /= 100;\n  function computeLuminance(): number {\n    if (!lighter) {  // Black text on white.\n      return Math.pow(Math.abs(Math.pow(luminance, normBgExp) - (contrast + loConOffset) / scaleBoW), 1 / normFgExp);\n    }\n    // White text on black.\n    return Math.pow(Math.abs(Math.pow(luminance, revBgExp) - (-contrast - loConOffset) / scaleWoB), 1 / revFgExp);\n  }\n  let desiredLuminance = computeLuminance();\n  if (desiredLuminance < 0 || desiredLuminance > 1) {\n    lighter = !lighter;\n    desiredLuminance = computeLuminance();\n  }\n  return desiredLuminance;\n}\n\n// clang-format off\nconst contrastAPCALookupTable = [\n  // See https://github.com/Myndex/SAPC-APCA\n  // font size in px | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 weights\n  [12, -1, -1, -1, -1, 100, 90, 80, -1, -1],\n  [14, -1, -1, -1, 100, 90, 80, 60, 60, -1],\n  [16, -1, -1, 100, 90, 80, 60, 55, 50, 50],\n  [18, -1, -1, 90, 80, 60, 55, 50, 40, 40],\n  [24, -1, 100, 80, 60, 55, 50, 40, 38, 35],\n  [30, -1, 90, 70, 55, 50, 40, 38, 35, 40],\n  [36, -1, 80, 60, 50, 40, 38, 35, 30, 25],\n  [48, 100, 70, 55, 40, 38, 35, 30, 25, 20],\n  [60, 90, 60, 50, 38, 35, 30, 25, 20, 20],\n  [72, 80, 55, 40, 35, 30, 25, 20, 20, 20],\n  [96, 70, 50, 35, 30, 25, 20, 20, 20, 20],\n  [120, 60, 40, 30, 25, 20, 20, 20, 20, 20],\n];\n// clang-format on\n\ncontrastAPCALookupTable.reverse();\n\nexport function getAPCAThreshold(fontSize: string, fontWeight: string): number|null {\n  const size = parseFloat(fontSize.replace('px', ''));\n  const weight = parseFloat(fontWeight);\n\n  // Go over the table backwards to find the first matching font size and then the weight.\n  // Fonts larger than 96px, use the thresholds for 96px.\n  // Fonts smaller than 12px, don't get any threshold meaning the font size needs to be increased.\n  for (const [rowSize, ...rowWeights] of contrastAPCALookupTable) {\n    if (size >= rowSize) {\n      for (const [idx, keywordWeight] of [900, 800, 700, 600, 500, 400, 300, 200, 100].entries()) {\n        if (weight >= keywordWeight) {\n          const threshold = rowWeights[rowWeights.length - 1 - idx];\n          return threshold === -1 ? null : threshold;\n        }\n      }\n    }\n  }\n\n  return null;\n}\n\nexport function isLargeFont(fontSize: string, fontWeight: string): boolean {\n  const boldWeights = ['bold', 'bolder', '600', '700', '800', '900'];\n\n  const fontSizePx = parseFloat(fontSize.replace('px', ''));\n  const isBold = (boldWeights.indexOf(fontWeight) !== -1);\n\n  const fontSizePt = fontSizePx * 72 / 96;\n  if (isBold) {\n    return fontSizePt >= 14;\n  }\n  return fontSizePt >= 18;\n}\n\nconst contrastThresholds = {\n  largeFont: {aa: 3.0, aaa: 4.5},\n  normalFont: {aa: 4.5, aaa: 7.0},\n};\n\nexport function getContrastThreshold(fontSize: string, fontWeight: string): {\n  aa: number,\n  aaa: number,\n} {\n  if (isLargeFont(fontSize, fontWeight)) {\n    return contrastThresholds.largeFont;\n  }\n  return contrastThresholds.normalFont;\n}\n"],
  "mappings": "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",
  "names": []
}
