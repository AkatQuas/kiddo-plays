{
  "version": 3,
  "sources": ["../../../../../../front_end/core/common/TextDictionary.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport {Trie} from './Trie.js';\n\nexport class TextDictionary {\n  readonly words: Map<string, number>;\n  readonly index: Trie;\n  constructor() {\n    this.words = new Map();\n    this.index = new Trie();\n  }\n\n  addWord(word: string): void {\n    let count = this.words.get(word) || 0;\n    ++count;\n    this.words.set(word, count);\n    this.index.add(word);\n  }\n\n  removeWord(word: string): void {\n    let count = this.words.get(word) || 0;\n    if (!count) {\n      return;\n    }\n    if (count === 1) {\n      this.words.delete(word);\n      this.index.remove(word);\n      return;\n    }\n    --count;\n    this.words.set(word, count);\n  }\n\n  wordsWithPrefix(prefix: string): string[] {\n    return this.index.words(prefix);\n  }\n\n  hasWord(word: string): boolean {\n    return this.words.has(word);\n  }\n\n  wordCount(word: string): number {\n    return this.words.get(word) || 0;\n  }\n\n  reset(): void {\n    this.words.clear();\n    this.index.clear();\n  }\n}\n"],
  "mappings": "AA8BA;AAEO,4BAAqB;AAAA,EACjB;AAAA,EACA;AAAA,EACT,cAAc;AACZ,SAAK,QAAQ,oBAAI;AACjB,SAAK,QAAQ,IAAI;AAAA;AAAA,EAGnB,QAAQ,MAAoB;AAC1B,QAAI,QAAQ,KAAK,MAAM,IAAI,SAAS;AACpC,MAAE;AACF,SAAK,MAAM,IAAI,MAAM;AACrB,SAAK,MAAM,IAAI;AAAA;AAAA,EAGjB,WAAW,MAAoB;AAC7B,QAAI,QAAQ,KAAK,MAAM,IAAI,SAAS;AACpC,QAAI,CAAC,OAAO;AACV;AAAA;AAEF,QAAI,UAAU,GAAG;AACf,WAAK,MAAM,OAAO;AAClB,WAAK,MAAM,OAAO;AAClB;AAAA;AAEF,MAAE;AACF,SAAK,MAAM,IAAI,MAAM;AAAA;AAAA,EAGvB,gBAAgB,QAA0B;AACxC,WAAO,KAAK,MAAM,MAAM;AAAA;AAAA,EAG1B,QAAQ,MAAuB;AAC7B,WAAO,KAAK,MAAM,IAAI;AAAA;AAAA,EAGxB,UAAU,MAAsB;AAC9B,WAAO,KAAK,MAAM,IAAI,SAAS;AAAA;AAAA,EAGjC,QAAc;AACZ,SAAK,MAAM;AACX,SAAK,MAAM;AAAA;AAAA;",
  "names": []
}
