{
  "version": 3,
  "sources": ["../../../../../../front_end/core/common/Revealer.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../i18n/i18n.js';\nimport type * as Platform from '../platform/platform.js';\n\nconst UIStrings = {\n  /**\n  *@description The UI destination when right clicking an item that can be revealed\n  */\n  elementsPanel: 'Elements panel',\n  /**\n  *@description The UI destination when right clicking an item that can be revealed\n  */\n  stylesSidebar: 'styles sidebar',\n  /**\n  *@description The UI destination when right clicking an item that can be revealed\n  */\n  changesDrawer: 'Changes drawer',\n  /**\n  *@description The UI destination when right clicking an item that can be revealed\n  */\n  issuesView: 'Issues view',\n  /**\n  *@description The UI destination when right clicking an item that can be revealed\n  */\n  networkPanel: 'Network panel',\n  /**\n  *@description The UI destination when right clicking an item that can be revealed\n  */\n  applicationPanel: 'Application panel',\n  /**\n  *@description The UI destination when right clicking an item that can be revealed\n  */\n  sourcesPanel: 'Sources panel',\n};\nconst str_ = i18n.i18n.registerUIStrings('core/common/Revealer.ts', UIStrings);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nexport abstract class Revealer {\n  abstract reveal(object: Object, omitFocus?: boolean): Promise<void>;\n}\n\nexport let reveal = async function(revealable: Object|null, omitFocus?: boolean): Promise<void> {\n  if (!revealable) {\n    return Promise.reject(new Error('Can\\'t reveal ' + revealable));\n  }\n  const revealers =\n      await Promise.all(getApplicableRegisteredRevealers(revealable).map(registration => registration.loadRevealer()));\n\n  return reveal(revealers);\n  function reveal(revealers: Revealer[]): Promise<void> {\n    const promises = [];\n    for (let i = 0; i < revealers.length; ++i) {\n      promises.push(revealers[i].reveal((revealable as Object), omitFocus));\n    }\n    return Promise.race(promises);\n  }\n};\n\nexport function setRevealForTest(newReveal: (arg0: Object|null, arg1?: boolean|undefined) => Promise<undefined>): void {\n  reveal = newReveal;\n}\n\nexport const revealDestination = function(revealable: Object|null): string|null {\n  const extension = revealable ? getApplicableRegisteredRevealers(revealable)[0] : registeredRevealers[0];\n  if (!extension) {\n    return null;\n  }\n  return extension.destination?.() || null;\n};\n\nconst registeredRevealers: RevealerRegistration[] = [];\n\nexport function registerRevealer(registration: RevealerRegistration): void {\n  registeredRevealers.push(registration);\n}\n\nfunction getApplicableRegisteredRevealers(revealable: Object): RevealerRegistration[] {\n  return registeredRevealers.filter(isRevealerApplicableToContextTypes);\n\n  function isRevealerApplicableToContextTypes(revealerRegistration: RevealerRegistration): boolean {\n    if (!revealerRegistration.contextTypes) {\n      return true;\n    }\n    for (const contextType of revealerRegistration.contextTypes()) {\n      if (revealable instanceof contextType) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\nexport interface RevealerRegistration {\n  contextTypes: () => Array<Function>;\n  loadRevealer: () => Promise<Revealer>;\n  destination?: RevealerDestination;\n}\n\nexport const RevealerDestination = {\n  ELEMENTS_PANEL: i18nLazyString(UIStrings.elementsPanel),\n  STYLES_SIDEBAR: i18nLazyString(UIStrings.stylesSidebar),\n  CHANGES_DRAWER: i18nLazyString(UIStrings.changesDrawer),\n  ISSUES_VIEW: i18nLazyString(UIStrings.issuesView),\n  NETWORK_PANEL: i18nLazyString(UIStrings.networkPanel),\n  APPLICATION_PANEL: i18nLazyString(UIStrings.applicationPanel),\n  SOURCES_PANEL: i18nLazyString(UIStrings.sourcesPanel),\n};\n\nexport type RevealerDestination = () => Platform.UIString.LocalizedString;\n"],
  "mappings": "AAIA;AAGA,MAAM,YAAY;AAAA,EAIhB,eAAe;AAAA,EAIf,eAAe;AAAA,EAIf,eAAe;AAAA,EAIf,YAAY;AAAA,EAIZ,cAAc;AAAA,EAId,kBAAkB;AAAA,EAIlB,cAAc;AAAA;AAEhB,MAAM,OAAO,KAAK,KAAK,kBAAkB,2BAA2B;AACpE,MAAM,iBAAiB,KAAK,KAAK,iCAAiC,KAAK,QAAW;AAE3E,sBAAwB;AAAA;AAIxB,WAAI,SAAS,eAAe,YAAyB,WAAoC;AAC9F,MAAI,CAAC,YAAY;AACf,WAAO,QAAQ,OAAO,IAAI,MAAM,kBAAmB;AAAA;AAErD,QAAM,YACF,MAAM,QAAQ,IAAI,iCAAiC,YAAY,IAAI,kBAAgB,aAAa;AAEpG,SAAO,QAAO;AACd,mBAAgB,YAAsC;AACpD,UAAM,WAAW;AACjB,aAAS,IAAI,GAAG,IAAI,WAAU,QAAQ,EAAE,GAAG;AACzC,eAAS,KAAK,WAAU,GAAG,OAAQ,YAAuB;AAAA;AAE5D,WAAO,QAAQ,KAAK;AAAA;AAAA;AAIjB,iCAA0B,WAAsF;AACrH,WAAS;AAAA;AAGJ,aAAM,oBAAoB,SAAS,YAAsC;AAC9E,QAAM,YAAY,aAAa,iCAAiC,YAAY,KAAK,oBAAoB;AACrG,MAAI,CAAC,WAAW;AACd,WAAO;AAAA;AAET,SAAO,UAAU,mBAAmB;AAAA;AAGtC,MAAM,sBAA8C;AAE7C,iCAA0B,cAA0C;AACzE,sBAAoB,KAAK;AAAA;AAG3B,0CAA0C,YAA4C;AACpF,SAAO,oBAAoB,OAAO;AAElC,8CAA4C,sBAAqD;AAC/F,QAAI,CAAC,qBAAqB,cAAc;AACtC,aAAO;AAAA;AAET,eAAW,eAAe,qBAAqB,gBAAgB;AAC7D,UAAI,sBAAsB,aAAa;AACrC,eAAO;AAAA;AAAA;AAGX,WAAO;AAAA;AAAA;AASJ,aAAM,sBAAsB;AAAA,EACjC,gBAAgB,eAAe,UAAU;AAAA,EACzC,gBAAgB,eAAe,UAAU;AAAA,EACzC,gBAAgB,eAAe,UAAU;AAAA,EACzC,aAAa,eAAe,UAAU;AAAA,EACtC,eAAe,eAAe,UAAU;AAAA,EACxC,mBAAmB,eAAe,UAAU;AAAA,EAC5C,eAAe,eAAe,UAAU;AAAA;",
  "names": []
}
