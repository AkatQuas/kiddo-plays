{
  "version": 3,
  "sources": ["../../../../../../front_end/core/common/SimpleHistoryManager.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2014 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nexport interface HistoryEntry {\n  valid(): boolean;\n\n  reveal(): void;\n}\n\nexport class SimpleHistoryManager {\n  #entries: HistoryEntry[];\n  #activeEntryIndex: number;\n  #coalescingReadonly: number;\n  readonly #historyDepth: number;\n  constructor(historyDepth: number) {\n    this.#entries = [];\n    this.#activeEntryIndex = -1;\n\n    // Lock is used to make sure that reveal() does not\n    // make any changes to the history while we are\n    // rolling back or rolling over.\n    this.#coalescingReadonly = 0;\n    this.#historyDepth = historyDepth;\n  }\n\n  private readOnlyLock(): void {\n    ++this.#coalescingReadonly;\n  }\n\n  private releaseReadOnlyLock(): void {\n    --this.#coalescingReadonly;\n  }\n\n  private getPreviousValidIndex(): number {\n    if (this.empty()) {\n      return -1;\n    }\n\n    let revealIndex = this.#activeEntryIndex - 1;\n    while (revealIndex >= 0 && !this.#entries[revealIndex].valid()) {\n      --revealIndex;\n    }\n    if (revealIndex < 0) {\n      return -1;\n    }\n\n    return revealIndex;\n  }\n\n  private getNextValidIndex(): number {\n    let revealIndex = this.#activeEntryIndex + 1;\n\n    while (revealIndex < this.#entries.length && !this.#entries[revealIndex].valid()) {\n      ++revealIndex;\n    }\n    if (revealIndex >= this.#entries.length) {\n      return -1;\n    }\n\n    return revealIndex;\n  }\n\n  private readOnly(): boolean {\n    return Boolean(this.#coalescingReadonly);\n  }\n\n  filterOut(filterOutCallback: (arg0: HistoryEntry) => boolean): void {\n    if (this.readOnly()) {\n      return;\n    }\n    const filteredEntries = [];\n    let removedBeforeActiveEntry = 0;\n    for (let i = 0; i < this.#entries.length; ++i) {\n      if (!filterOutCallback(this.#entries[i])) {\n        filteredEntries.push(this.#entries[i]);\n      } else if (i <= this.#activeEntryIndex) {\n        ++removedBeforeActiveEntry;\n      }\n    }\n    this.#entries = filteredEntries;\n    this.#activeEntryIndex = Math.max(0, this.#activeEntryIndex - removedBeforeActiveEntry);\n  }\n\n  empty(): boolean {\n    return !this.#entries.length;\n  }\n\n  active(): HistoryEntry|null {\n    return this.empty() ? null : this.#entries[this.#activeEntryIndex];\n  }\n\n  push(entry: HistoryEntry): void {\n    if (this.readOnly()) {\n      return;\n    }\n    if (!this.empty()) {\n      this.#entries.splice(this.#activeEntryIndex + 1);\n    }\n    this.#entries.push(entry);\n    if (this.#entries.length > this.#historyDepth) {\n      this.#entries.shift();\n    }\n    this.#activeEntryIndex = this.#entries.length - 1;\n  }\n\n  canRollback(): boolean {\n    return this.getPreviousValidIndex() >= 0;\n  }\n\n  canRollover(): boolean {\n    return this.getNextValidIndex() >= 0;\n  }\n\n  rollback(): boolean {\n    const revealIndex = this.getPreviousValidIndex();\n    if (revealIndex === -1) {\n      return false;\n    }\n    this.readOnlyLock();\n    this.#activeEntryIndex = revealIndex;\n    this.#entries[revealIndex].reveal();\n    this.releaseReadOnlyLock();\n\n    return true;\n  }\n\n  rollover(): boolean {\n    const revealIndex = this.getNextValidIndex();\n    if (revealIndex === -1) {\n      return false;\n    }\n\n    this.readOnlyLock();\n    this.#activeEntryIndex = revealIndex;\n    this.#entries[revealIndex].reveal();\n    this.releaseReadOnlyLock();\n\n    return true;\n  }\n}\n"],
  "mappings": "AAoCO,kCAA2B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKhC,YAAY,cAAsB;AAChC,oBAAgB;AAChB,6BAAyB;AAKzB,+BAA2B;AAC3B,yBAAqB;AAAA;AAAA,EAGf,eAAqB;AAC3B,MAAE;AAAA;AAAA,EAGI,sBAA4B;AAClC,MAAE;AAAA;AAAA,EAGI,wBAAgC;AACtC,QAAI,KAAK,SAAS;AAChB,aAAO;AAAA;AAGT,QAAI,cAAc,yBAAyB;AAC3C,WAAO,eAAe,KAAK,CAAC,cAAc,aAAa,SAAS;AAC9D,QAAE;AAAA;AAEJ,QAAI,cAAc,GAAG;AACnB,aAAO;AAAA;AAGT,WAAO;AAAA;AAAA,EAGD,oBAA4B;AAClC,QAAI,cAAc,yBAAyB;AAE3C,WAAO,cAAc,cAAc,UAAU,CAAC,cAAc,aAAa,SAAS;AAChF,QAAE;AAAA;AAEJ,QAAI,eAAe,cAAc,QAAQ;AACvC,aAAO;AAAA;AAGT,WAAO;AAAA;AAAA,EAGD,WAAoB;AAC1B,WAAO,QAAQ;AAAA;AAAA,EAGjB,UAAU,mBAA0D;AAClE,QAAI,KAAK,YAAY;AACnB;AAAA;AAEF,UAAM,kBAAkB;AACxB,QAAI,2BAA2B;AAC/B,aAAS,IAAI,GAAG,IAAI,cAAc,QAAQ,EAAE,GAAG;AAC7C,UAAI,CAAC,kBAAkB,cAAc,KAAK;AACxC,wBAAgB,KAAK,cAAc;AAAA,iBAC1B,KAAK,wBAAwB;AACtC,UAAE;AAAA;AAAA;AAGN,oBAAgB;AAChB,6BAAyB,KAAK,IAAI,GAAG,yBAAyB;AAAA;AAAA,EAGhE,QAAiB;AACf,WAAO,CAAC,cAAc;AAAA;AAAA,EAGxB,SAA4B;AAC1B,WAAO,KAAK,UAAU,OAAO,cAAc;AAAA;AAAA,EAG7C,KAAK,OAA2B;AAC9B,QAAI,KAAK,YAAY;AACnB;AAAA;AAEF,QAAI,CAAC,KAAK,SAAS;AACjB,oBAAc,OAAO,yBAAyB;AAAA;AAEhD,kBAAc,KAAK;AACnB,QAAI,cAAc,SAAS,oBAAoB;AAC7C,oBAAc;AAAA;AAEhB,6BAAyB,cAAc,SAAS;AAAA;AAAA,EAGlD,cAAuB;AACrB,WAAO,KAAK,2BAA2B;AAAA;AAAA,EAGzC,cAAuB;AACrB,WAAO,KAAK,uBAAuB;AAAA;AAAA,EAGrC,WAAoB;AAClB,UAAM,cAAc,KAAK;AACzB,QAAI,gBAAgB,IAAI;AACtB,aAAO;AAAA;AAET,SAAK;AACL,6BAAyB;AACzB,kBAAc,aAAa;AAC3B,SAAK;AAEL,WAAO;AAAA;AAAA,EAGT,WAAoB;AAClB,UAAM,cAAc,KAAK;AACzB,QAAI,gBAAgB,IAAI;AACtB,aAAO;AAAA;AAGT,SAAK;AACL,6BAAyB;AACzB,kBAAc,aAAa;AAC3B,SAAK;AAEL,WAAO;AAAA;AAAA;",
  "names": []
}
