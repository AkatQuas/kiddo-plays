{
  "version": 3,
  "sources": ["../../../../../../front_end/core/common/ParsedURL.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Platform from '../platform/platform.js';\n\n/**\n * http://tools.ietf.org/html/rfc3986#section-5.2.4\n */\nexport function normalizePath(path: string): string {\n  if (path.indexOf('..') === -1 && path.indexOf('.') === -1) {\n    return path;\n  }\n\n  // Remove leading slash (will be added back below) so we\n  // can handle all (including empty) segments consistently.\n  const segments = (path[0] === '/' ? path.substring(1) : path).split('/');\n  const normalizedSegments = [];\n  for (const segment of segments) {\n    if (segment === '.') {\n      continue;\n    } else if (segment === '..') {\n      normalizedSegments.pop();\n    } else {\n      normalizedSegments.push(segment);\n    }\n  }\n  let normalizedPath = normalizedSegments.join('/');\n  if (path[0] === '/' && normalizedPath) {\n    normalizedPath = '/' + normalizedPath;\n  }\n  if (normalizedPath[normalizedPath.length - 1] !== '/' &&\n      ((path[path.length - 1] === '/') || (segments[segments.length - 1] === '.') ||\n       (segments[segments.length - 1] === '..'))) {\n    normalizedPath = normalizedPath + '/';\n  }\n\n  return normalizedPath;\n}\n\n/**\n * File paths in DevTools that are represented either as unencoded absolute or relative paths, or encoded paths, or URLs.\n * @example\n * RawPathString: \u201C/Hello World/file.js\u201D\n * EncodedPathString: \u201C/Hello%20World/file.js\u201D\n * UrlString: \u201Cfile:///Hello%20World/file/js\u201D\n */\ntype BrandedPathString =\n    Platform.DevToolsPath.UrlString|Platform.DevToolsPath.RawPathString|Platform.DevToolsPath.EncodedPathString;\n\nexport class ParsedURL {\n  isValid: boolean;\n  url: string;\n  scheme: string;\n  user: string;\n  host: string;\n  port: string;\n  path: string;\n  queryParams: string;\n  fragment: string;\n  folderPathComponents: string;\n  lastPathComponent: string;\n  readonly blobInnerScheme: string|undefined;\n  #displayNameInternal?: string;\n  #dataURLDisplayNameInternal?: string;\n\n  constructor(url: string) {\n    this.isValid = false;\n    this.url = url;\n    this.scheme = '';\n    this.user = '';\n    this.host = '';\n    this.port = '';\n    this.path = '';\n    this.queryParams = '';\n    this.fragment = '';\n    this.folderPathComponents = '';\n    this.lastPathComponent = '';\n\n    const isBlobUrl = this.url.startsWith('blob:');\n    const urlToMatch = isBlobUrl ? url.substring(5) : url;\n    const match = urlToMatch.match(ParsedURL.urlRegex());\n    if (match) {\n      this.isValid = true;\n      if (isBlobUrl) {\n        this.blobInnerScheme = match[2].toLowerCase();\n        this.scheme = 'blob';\n      } else {\n        this.scheme = match[2].toLowerCase();\n      }\n      this.user = match[3] ?? '';\n      this.host = match[4] ?? '';\n      this.port = match[5] ?? '';\n      this.path = match[6] ?? '/';\n      this.queryParams = match[7] ?? '';\n      this.fragment = match[8] ?? '';\n    } else {\n      if (this.url.startsWith('data:')) {\n        this.scheme = 'data';\n        return;\n      }\n      if (this.url.startsWith('blob:')) {\n        this.scheme = 'blob';\n        return;\n      }\n      if (this.url === 'about:blank') {\n        this.scheme = 'about';\n        return;\n      }\n      this.path = this.url;\n    }\n\n    const lastSlashIndex = this.path.lastIndexOf('/');\n    if (lastSlashIndex !== -1) {\n      this.folderPathComponents = this.path.substring(0, lastSlashIndex);\n      this.lastPathComponent = this.path.substring(lastSlashIndex + 1);\n    } else {\n      this.lastPathComponent = this.path;\n    }\n  }\n\n  static fromString(string: string): ParsedURL|null {\n    const parsedURL = new ParsedURL(string.toString());\n    if (parsedURL.isValid) {\n      return parsedURL;\n    }\n    return null;\n  }\n\n  static preEncodeSpecialCharactersInPath(path: string): string {\n    // Based on net::FilePathToFileURL. Ideally we would handle\n    // '\\\\' as well on non-Windows file systems.\n    for (const specialChar of ['%', ';', '#', '?', ' ']) {\n      (path as string) = path.replaceAll(specialChar, encodeURIComponent(specialChar));\n    }\n    return path;\n  }\n\n  static rawPathToEncodedPathString(path: Platform.DevToolsPath.RawPathString):\n      Platform.DevToolsPath.EncodedPathString {\n    const partiallyEncoded = ParsedURL.preEncodeSpecialCharactersInPath(path);\n    if (path.startsWith('/')) {\n      return new URL(partiallyEncoded, 'file:///').pathname as Platform.DevToolsPath.EncodedPathString;\n    }\n    // URL prepends a '/'\n    return new URL('/' + partiallyEncoded, 'file:///').pathname.substr(1) as Platform.DevToolsPath.EncodedPathString;\n  }\n\n  /**\n   * @param name Must not be encoded\n   */\n  static encodedFromParentPathAndName(parentPath: Platform.DevToolsPath.EncodedPathString, name: string):\n      Platform.DevToolsPath.EncodedPathString {\n    return ParsedURL.concatenate(parentPath, '/', encodeURIComponent(name));\n  }\n\n  /**\n   * @param name Must not be encoded\n   */\n  static urlFromParentUrlAndName(parentUrl: Platform.DevToolsPath.UrlString, name: string):\n      Platform.DevToolsPath.UrlString {\n    return ParsedURL.concatenate(parentUrl, '/', ParsedURL.preEncodeSpecialCharactersInPath(name));\n  }\n\n  static encodedPathToRawPathString(encPath: Platform.DevToolsPath.EncodedPathString):\n      Platform.DevToolsPath.RawPathString {\n    return decodeURIComponent(encPath) as Platform.DevToolsPath.RawPathString;\n  }\n\n  static rawPathToUrlString(fileSystemPath: Platform.DevToolsPath.RawPathString): Platform.DevToolsPath.UrlString {\n    let preEncodedPath: string = ParsedURL.preEncodeSpecialCharactersInPath(\n        fileSystemPath.replace(/\\\\/g, '/') as Platform.DevToolsPath.RawPathString);\n    preEncodedPath = preEncodedPath.replace(/\\\\/g, '/');\n    if (!preEncodedPath.startsWith('file://')) {\n      if (preEncodedPath.startsWith('/')) {\n        preEncodedPath = 'file://' + preEncodedPath;\n      } else {\n        preEncodedPath = 'file:///' + preEncodedPath;\n      }\n    }\n    return new URL(preEncodedPath).toString() as Platform.DevToolsPath.UrlString;\n  }\n\n  static relativePathToUrlString(\n      relativePath: Platform.DevToolsPath.RawPathString,\n      baseURL: Platform.DevToolsPath.UrlString): Platform.DevToolsPath.UrlString {\n    const preEncodedPath: string = ParsedURL.preEncodeSpecialCharactersInPath(\n        relativePath.replace(/\\\\/g, '/') as Platform.DevToolsPath.RawPathString);\n    return new URL(preEncodedPath, baseURL).toString() as Platform.DevToolsPath.UrlString;\n  }\n\n  static urlToRawPathString(fileURL: Platform.DevToolsPath.UrlString, isWindows?: boolean):\n      Platform.DevToolsPath.RawPathString {\n    console.assert(fileURL.startsWith('file://'), 'This must be a file URL.');\n    const decodedFileURL = decodeURIComponent(fileURL);\n    if (isWindows) {\n      return decodedFileURL.substr('file:///'.length).replace(/\\//g, '\\\\') as Platform.DevToolsPath.RawPathString;\n    }\n    return decodedFileURL.substr('file://'.length) as Platform.DevToolsPath.RawPathString;\n  }\n\n  static sliceUrlToEncodedPathString(url: Platform.DevToolsPath.UrlString, start: number):\n      Platform.DevToolsPath.EncodedPathString {\n    return url.substring(start) as Platform.DevToolsPath.EncodedPathString;\n  }\n\n  static substr<DevToolsPathType extends BrandedPathString>(\n      devToolsPath: DevToolsPathType, from: number, length?: number): DevToolsPathType {\n    return devToolsPath.substr(from, length) as DevToolsPathType;\n  }\n\n  static substring<DevToolsPathType extends BrandedPathString>(\n      devToolsPath: DevToolsPathType, start: number, end?: number): DevToolsPathType {\n    return devToolsPath.substring(start, end) as DevToolsPathType;\n  }\n\n  static prepend<DevToolsPathType extends BrandedPathString>(prefix: string, devToolsPath: DevToolsPathType):\n      DevToolsPathType {\n    return prefix + devToolsPath as DevToolsPathType;\n  }\n\n  static concatenate<DevToolsPathType extends BrandedPathString>(\n      devToolsPath: DevToolsPathType, ...appendage: string[]): DevToolsPathType {\n    return devToolsPath.concat(...appendage) as DevToolsPathType;\n  }\n\n  static trim<DevToolsPathType extends BrandedPathString>(devToolsPath: DevToolsPathType): DevToolsPathType {\n    return devToolsPath.trim() as DevToolsPathType;\n  }\n\n  static slice<DevToolsPathType extends BrandedPathString>(\n      devToolsPath: DevToolsPathType, start?: number, end?: number): DevToolsPathType {\n    return devToolsPath.slice(start, end) as DevToolsPathType;\n  }\n\n  static join<DevToolsPathType extends BrandedPathString>(devToolsPaths: DevToolsPathType[], separator?: string):\n      DevToolsPathType {\n    return devToolsPaths.join(separator) as DevToolsPathType;\n  }\n\n  static split<DevToolsPathType extends BrandedPathString>(\n      devToolsPath: DevToolsPathType, separator: string|RegExp, limit?: number): DevToolsPathType[] {\n    return devToolsPath.split(separator, limit) as DevToolsPathType[];\n  }\n\n  static toLowerCase<DevToolsPathType extends BrandedPathString>(devToolsPath: DevToolsPathType): DevToolsPathType {\n    return devToolsPath.toLowerCase() as DevToolsPathType;\n  }\n\n  static isValidUrlString(str: string): str is Platform.DevToolsPath.UrlString {\n    return new ParsedURL(str).isValid;\n  }\n\n  static urlWithoutHash(url: string): string {\n    const hashIndex = url.indexOf('#');\n    if (hashIndex !== -1) {\n      return url.substr(0, hashIndex);\n    }\n    return url;\n  }\n\n  static urlRegex(): RegExp {\n    if (ParsedURL.urlRegexInstance) {\n      return ParsedURL.urlRegexInstance;\n    }\n    // RegExp groups:\n    // 1 - scheme, hostname, ?port\n    // 2 - scheme (using the RFC3986 grammar)\n    // 3 - ?user:password\n    // 4 - hostname\n    // 5 - ?port\n    // 6 - ?path\n    // 7 - ?query\n    // 8 - ?fragment\n    const schemeRegex = /([A-Za-z][A-Za-z0-9+.-]*):\\/\\//;\n    const userRegex = /(?:([A-Za-z0-9\\-._~%!$&'()*+,;=:]*)@)?/;\n    const hostRegex = /((?:\\[::\\d?\\])|(?:[^\\s\\/:]*))/;\n    const portRegex = /(?::([\\d]+))?/;\n    const pathRegex = /(\\/[^#?]*)?/;\n    const queryRegex = /(?:\\?([^#]*))?/;\n    const fragmentRegex = /(?:#(.*))?/;\n\n    ParsedURL.urlRegexInstance = new RegExp(\n        '^(' + schemeRegex.source + userRegex.source + hostRegex.source + portRegex.source + ')' + pathRegex.source +\n        queryRegex.source + fragmentRegex.source + '$');\n    return ParsedURL.urlRegexInstance;\n  }\n\n  static extractPath(url: Platform.DevToolsPath.UrlString): Platform.DevToolsPath.EncodedPathString {\n    const parsedURL = this.fromString(url);\n    return (parsedURL ? parsedURL.path : '') as Platform.DevToolsPath.EncodedPathString;\n  }\n\n  static extractOrigin(url: Platform.DevToolsPath.UrlString): Platform.DevToolsPath.UrlString {\n    const parsedURL = this.fromString(url);\n    return parsedURL ? parsedURL.securityOrigin() : Platform.DevToolsPath.EmptyUrlString;\n  }\n\n  static extractExtension(url: string): string {\n    url = ParsedURL.urlWithoutHash(url);\n    const indexOfQuestionMark = url.indexOf('?');\n    if (indexOfQuestionMark !== -1) {\n      url = url.substr(0, indexOfQuestionMark);\n    }\n    const lastIndexOfSlash = url.lastIndexOf('/');\n    if (lastIndexOfSlash !== -1) {\n      url = url.substr(lastIndexOfSlash + 1);\n    }\n    const lastIndexOfDot = url.lastIndexOf('.');\n    if (lastIndexOfDot !== -1) {\n      url = url.substr(lastIndexOfDot + 1);\n      const lastIndexOfPercent = url.indexOf('%');\n      if (lastIndexOfPercent !== -1) {\n        return url.substr(0, lastIndexOfPercent);\n      }\n      return url;\n    }\n    return '';\n  }\n\n  static extractName(url: string): string {\n    let index = url.lastIndexOf('/');\n    const pathAndQuery = index !== -1 ? url.substr(index + 1) : url;\n    index = pathAndQuery.indexOf('?');\n    return index < 0 ? pathAndQuery : pathAndQuery.substr(0, index);\n  }\n\n  static completeURL(baseURL: Platform.DevToolsPath.UrlString, href: string): Platform.DevToolsPath.UrlString|null {\n    // Return special URLs as-is.\n    const trimmedHref = href.trim();\n    if (trimmedHref.startsWith('data:') || trimmedHref.startsWith('blob:') || trimmedHref.startsWith('javascript:') ||\n        trimmedHref.startsWith('mailto:')) {\n      return href as Platform.DevToolsPath.UrlString;\n    }\n\n    // Return absolute URLs with normalized path and other components as-is.\n    const parsedHref = this.fromString(trimmedHref);\n    if (parsedHref && parsedHref.scheme) {\n      const securityOrigin = parsedHref.securityOrigin();\n      const pathText = normalizePath(parsedHref.path);\n      const queryText = parsedHref.queryParams && `?${parsedHref.queryParams}`;\n      const fragmentText = parsedHref.fragment && `#${parsedHref.fragment}`;\n      return securityOrigin + pathText + queryText + fragmentText as Platform.DevToolsPath.UrlString;\n    }\n\n    const parsedURL = this.fromString(baseURL);\n    if (!parsedURL) {\n      return null;\n    }\n\n    if (parsedURL.isDataURL()) {\n      return href as Platform.DevToolsPath.UrlString;\n    }\n\n    if (href.length > 1 && href.charAt(0) === '/' && href.charAt(1) === '/') {\n      // href starts with \"//\" which is a full URL with the protocol dropped (use the baseURL protocol).\n      return parsedURL.scheme + ':' + href as Platform.DevToolsPath.UrlString;\n    }\n\n    const securityOrigin = parsedURL.securityOrigin();\n    const pathText = parsedURL.path;\n    const queryText = parsedURL.queryParams ? '?' + parsedURL.queryParams : '';\n\n    // Empty href resolves to a URL without fragment.\n    if (!href.length) {\n      return securityOrigin + pathText + queryText as Platform.DevToolsPath.UrlString;\n    }\n\n    if (href.charAt(0) === '#') {\n      return securityOrigin + pathText + queryText + href as Platform.DevToolsPath.UrlString;\n    }\n\n    if (href.charAt(0) === '?') {\n      return securityOrigin + pathText + href as Platform.DevToolsPath.UrlString;\n    }\n\n    const hrefMatches = href.match(/^[^#?]*/);\n    if (!hrefMatches || !href.length) {\n      throw new Error('Invalid href');\n    }\n    let hrefPath: string = hrefMatches[0];\n    const hrefSuffix = href.substring(hrefPath.length);\n    if (hrefPath.charAt(0) !== '/') {\n      hrefPath = parsedURL.folderPathComponents + '/' + hrefPath;\n    }\n    return securityOrigin + normalizePath(hrefPath) + hrefSuffix as Platform.DevToolsPath.UrlString;\n  }\n\n  static splitLineAndColumn(string: string): {\n    url: Platform.DevToolsPath.UrlString,\n    lineNumber: (number|undefined),\n    columnNumber: (number|undefined),\n  } {\n    // Only look for line and column numbers in the path to avoid matching port numbers.\n    const beforePathMatch = string.match(ParsedURL.urlRegex());\n    let beforePath = '';\n    let pathAndAfter: string = string;\n    if (beforePathMatch) {\n      beforePath = beforePathMatch[1];\n      pathAndAfter = string.substring(beforePathMatch[1].length);\n    }\n\n    const lineColumnRegEx = /(?::(\\d+))?(?::(\\d+))?$/;\n    const lineColumnMatch = lineColumnRegEx.exec(pathAndAfter);\n    let lineNumber;\n    let columnNumber;\n    console.assert(Boolean(lineColumnMatch));\n    if (!lineColumnMatch) {\n      return {url: string as Platform.DevToolsPath.UrlString, lineNumber: 0, columnNumber: 0};\n    }\n\n    if (typeof (lineColumnMatch[1]) === 'string') {\n      lineNumber = parseInt(lineColumnMatch[1], 10);\n      // Immediately convert line and column to 0-based numbers.\n      lineNumber = isNaN(lineNumber) ? undefined : lineNumber - 1;\n    }\n    if (typeof (lineColumnMatch[2]) === 'string') {\n      columnNumber = parseInt(lineColumnMatch[2], 10);\n      columnNumber = isNaN(columnNumber) ? undefined : columnNumber - 1;\n    }\n\n    let url: Platform.DevToolsPath.UrlString =\n        beforePath + pathAndAfter.substring(0, pathAndAfter.length - lineColumnMatch[0].length) as\n        Platform.DevToolsPath.UrlString;\n    if (lineColumnMatch[1] === undefined && lineColumnMatch[2] === undefined) {\n      const wasmCodeOffsetRegex = /wasm-function\\[\\d+\\]:0x([a-z0-9]+)$/g;\n      const wasmCodeOffsetMatch = wasmCodeOffsetRegex.exec(pathAndAfter);\n      if (wasmCodeOffsetMatch && typeof (wasmCodeOffsetMatch[1]) === 'string') {\n        url = ParsedURL.removeWasmFunctionInfoFromURL(url);\n        columnNumber = parseInt(wasmCodeOffsetMatch[1], 16);\n        columnNumber = isNaN(columnNumber) ? undefined : columnNumber;\n      }\n    }\n\n    return {url, lineNumber, columnNumber};\n  }\n\n  static removeWasmFunctionInfoFromURL(url: string): Platform.DevToolsPath.UrlString {\n    const wasmFunctionRegEx = /:wasm-function\\[\\d+\\]/;\n    const wasmFunctionIndex = url.search(wasmFunctionRegEx);\n    if (wasmFunctionIndex === -1) {\n      return url as Platform.DevToolsPath.UrlString;\n    }\n    return ParsedURL.substring(url as Platform.DevToolsPath.UrlString, 0, wasmFunctionIndex);\n  }\n\n  private static beginsWithWindowsDriveLetter(url: string): boolean {\n    return /^[A-Za-z]:/.test(url);\n  }\n\n  private static beginsWithScheme(url: string): boolean {\n    return /^[A-Za-z][A-Za-z0-9+.-]*:/.test(url);\n  }\n\n  static isRelativeURL(url: string): boolean {\n    return !this.beginsWithScheme(url) || this.beginsWithWindowsDriveLetter(url);\n  }\n\n  get displayName(): string {\n    if (this.#displayNameInternal) {\n      return this.#displayNameInternal;\n    }\n\n    if (this.isDataURL()) {\n      return this.dataURLDisplayName();\n    }\n    if (this.isBlobURL()) {\n      return this.url;\n    }\n    if (this.isAboutBlank()) {\n      return this.url;\n    }\n\n    this.#displayNameInternal = this.lastPathComponent;\n    if (!this.#displayNameInternal) {\n      this.#displayNameInternal = (this.host || '') + '/';\n    }\n    if (this.#displayNameInternal === '/') {\n      this.#displayNameInternal = this.url;\n    }\n    return this.#displayNameInternal;\n  }\n\n  dataURLDisplayName(): string {\n    if (this.#dataURLDisplayNameInternal) {\n      return this.#dataURLDisplayNameInternal;\n    }\n    if (!this.isDataURL()) {\n      return '';\n    }\n    this.#dataURLDisplayNameInternal = Platform.StringUtilities.trimEndWithMaxLength(this.url, 20);\n    return this.#dataURLDisplayNameInternal;\n  }\n\n  isAboutBlank(): boolean {\n    return this.url === 'about:blank';\n  }\n\n  isDataURL(): boolean {\n    return this.scheme === 'data';\n  }\n\n  isHttpOrHttps(): boolean {\n    return this.scheme === 'http' || this.scheme === 'https';\n  }\n\n  isBlobURL(): boolean {\n    return this.url.startsWith('blob:');\n  }\n\n  lastPathComponentWithFragment(): string {\n    return this.lastPathComponent + (this.fragment ? '#' + this.fragment : '');\n  }\n\n  domain(): string {\n    if (this.isDataURL()) {\n      return 'data:';\n    }\n    return this.host + (this.port ? ':' + this.port : '');\n  }\n\n  securityOrigin(): Platform.DevToolsPath.UrlString {\n    if (this.isDataURL()) {\n      return 'data:' as Platform.DevToolsPath.UrlString;\n    }\n    const scheme = this.isBlobURL() ? this.blobInnerScheme : this.scheme;\n    return scheme + '://' + this.domain() as Platform.DevToolsPath.UrlString;\n  }\n\n  urlWithoutScheme(): string {\n    if (this.scheme && this.url.startsWith(this.scheme + '://')) {\n      return this.url.substring(this.scheme.length + 3);\n    }\n    return this.url;\n  }\n\n  static urlRegexInstance: RegExp|null = null;\n}\n"],
  "mappings": "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",
  "names": []
}
