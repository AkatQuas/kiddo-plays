{
  "version": 3,
  "sources": ["../../../../../../front_end/core/common/Mutex.ts"],
  "sourcesContent": ["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\ntype ReleaseFn = () => void;\n\n/**\n * Use Mutex class to coordinate local concurrent operations.\n * Once `acquire` promise resolves, you hold the lock and must\n * call `release` function returned by `acquire` to release the\n * lock. Failing to `release` the lock may lead to deadlocks.\n */\nexport class Mutex {\n  #locked = false;\n  #acquiringQueue: Array<(release: ReleaseFn) => void> = [];\n\n  acquire(): Promise<ReleaseFn> {\n    let resolver = (_release: ReleaseFn): void => {};\n    const promise = new Promise<ReleaseFn>((resolve): void => {\n      resolver = resolve;\n    });\n    this.#acquiringQueue.push(resolver);\n    this.#processAcquiringQueue();\n    return promise;\n  }\n\n  #processAcquiringQueue(): void {\n    if (this.#locked) {\n      return;\n    }\n    const nextAquirePromise = this.#acquiringQueue.shift();\n    if (nextAquirePromise) {\n      this.#locked = true;\n      nextAquirePromise(this.#release.bind(this));\n    }\n  }\n\n  #release(): void {\n    this.#locked = false;\n    this.#processAcquiringQueue();\n  }\n}\n"],
  "mappings": "AAYO,mBAAY;AAAA,YACP;AAAA,oBAC6C;AAAA,EAEvD,UAA8B;AAC5B,QAAI,WAAW,CAAC,aAA8B;AAAA;AAC9C,UAAM,UAAU,IAAI,QAAmB,CAAC,YAAkB;AACxD,iBAAW;AAAA;AAEb,yBAAqB,KAAK;AAC1B;AACA,WAAO;AAAA;AAAA,2BAGsB;AAC7B,QAAI,cAAc;AAChB;AAAA;AAEF,UAAM,oBAAoB,qBAAqB;AAC/C,QAAI,mBAAmB;AACrB,qBAAe;AACf,wBAAkB,cAAc,KAAK;AAAA;AAAA;AAAA,aAIxB;AACf,mBAAe;AACf;AAAA;AAAA;",
  "names": []
}
