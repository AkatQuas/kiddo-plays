{
  "version": 3,
  "sources": ["../../../../../../front_end/core/root/Runtime.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../platform/platform.js';\n\nconst queryParamsObject = new URLSearchParams(location.search);\n\nlet runtimePlatform = '';\n\nlet runtimeInstance: Runtime|undefined;\n\nexport function getRemoteBase(location: string = self.location.toString()): {\n  base: string,\n  version: string,\n}|null {\n  const url = new URL(location);\n  const remoteBase = url.searchParams.get('remoteBase');\n  if (!remoteBase) {\n    return null;\n  }\n\n  const version = /\\/serve_file\\/(@[0-9a-zA-Z]+)\\/?$/.exec(remoteBase);\n  if (!version) {\n    return null;\n  }\n\n  return {base: `${url.origin}/remote/serve_file/${version[1]}/`, version: version[1]};\n}\n\nexport class Runtime {\n  private constructor() {\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  }|undefined = {forceNew: null}): Runtime {\n    const {forceNew} = opts;\n    if (!runtimeInstance || forceNew) {\n      runtimeInstance = new Runtime();\n    }\n\n    return runtimeInstance;\n  }\n\n  static removeInstance(): void {\n    runtimeInstance = undefined;\n  }\n\n  static queryParam(name: string): string|null {\n    return queryParamsObject.get(name);\n  }\n\n  static setQueryParamForTesting(name: string, value: string): void {\n    queryParamsObject.set(name, value);\n  }\n\n  static experimentsSetting(): {\n    [x: string]: boolean,\n  } {\n    try {\n      return JSON.parse(\n                 self.localStorage && self.localStorage['experiments'] ? self.localStorage['experiments'] : '{}') as {\n        [x: string]: boolean,\n      };\n    } catch (e) {\n      console.error('Failed to parse localStorage[\\'experiments\\']');\n      return {};\n    }\n  }\n\n  static setPlatform(platform: string): void {\n    runtimePlatform = platform;\n  }\n\n  static platform(): string {\n    return runtimePlatform;\n  }\n\n  static isDescriptorEnabled(descriptor: {\n    experiment: ((string | undefined)|null),\n    condition: ((string | undefined)|null),\n  }): boolean {\n    const activatorExperiment = descriptor['experiment'];\n    if (activatorExperiment === '*') {\n      return true;\n    }\n    if (activatorExperiment && activatorExperiment.startsWith('!') &&\n        experiments.isEnabled(activatorExperiment.substring(1))) {\n      return false;\n    }\n    if (activatorExperiment && !activatorExperiment.startsWith('!') && !experiments.isEnabled(activatorExperiment)) {\n      return false;\n    }\n    const condition = descriptor['condition'];\n    if (condition && !condition.startsWith('!') && !Runtime.queryParam(condition)) {\n      return false;\n    }\n    if (condition && condition.startsWith('!') && Runtime.queryParam(condition.substring(1))) {\n      return false;\n    }\n    return true;\n  }\n\n  loadLegacyModule(modulePath: string): Promise<void> {\n    return import(`../../${modulePath}`);\n  }\n}\n\nexport interface Option {\n  title: string;\n  value: string|boolean;\n  raw?: boolean;\n  text?: string;\n}\n\nexport class ExperimentsSupport {\n  #experiments: Experiment[];\n  #experimentNames: Set<string>;\n  #enabledTransiently: Set<string>;\n  readonly #enabledByDefault: Set<string>;\n  readonly #serverEnabled: Set<string>;\n  constructor() {\n    this.#experiments = [];\n    this.#experimentNames = new Set();\n    this.#enabledTransiently = new Set();\n    this.#enabledByDefault = new Set();\n    this.#serverEnabled = new Set();\n  }\n\n  allConfigurableExperiments(): Experiment[] {\n    const result = [];\n    for (const experiment of this.#experiments) {\n      if (!this.#enabledTransiently.has(experiment.name)) {\n        result.push(experiment);\n      }\n    }\n    return result;\n  }\n\n  enabledExperiments(): Experiment[] {\n    return this.#experiments.filter(experiment => experiment.isEnabled());\n  }\n\n  private setExperimentsSetting(value: Object): void {\n    if (!self.localStorage) {\n      return;\n    }\n    self.localStorage['experiments'] = JSON.stringify(value);\n  }\n\n  register(experimentName: string, experimentTitle: string, unstable?: boolean, docLink?: string): void {\n    Platform.DCHECK(\n        () => !this.#experimentNames.has(experimentName), 'Duplicate registration of experiment ' + experimentName);\n    this.#experimentNames.add(experimentName);\n    this.#experiments.push(new Experiment(\n        this, experimentName, experimentTitle, Boolean(unstable),\n        docLink as Platform.DevToolsPath.UrlString ?? Platform.DevToolsPath.EmptyUrlString));\n  }\n\n  isEnabled(experimentName: string): boolean {\n    this.checkExperiment(experimentName);\n    // Check for explicitly disabled #experiments first - the code could call setEnable(false) on the experiment enabled\n    // by default and we should respect that.\n    if (Runtime.experimentsSetting()[experimentName] === false) {\n      return false;\n    }\n    if (this.#enabledTransiently.has(experimentName) || this.#enabledByDefault.has(experimentName)) {\n      return true;\n    }\n    if (this.#serverEnabled.has(experimentName)) {\n      return true;\n    }\n\n    return Boolean(Runtime.experimentsSetting()[experimentName]);\n  }\n\n  setEnabled(experimentName: string, enabled: boolean): void {\n    this.checkExperiment(experimentName);\n    const experimentsSetting = Runtime.experimentsSetting();\n    experimentsSetting[experimentName] = enabled;\n    this.setExperimentsSetting(experimentsSetting);\n  }\n\n  enableExperimentsTransiently(experimentNames: string[]): void {\n    for (const experimentName of experimentNames) {\n      this.checkExperiment(experimentName);\n      this.#enabledTransiently.add(experimentName);\n    }\n  }\n\n  enableExperimentsByDefault(experimentNames: string[]): void {\n    for (const experimentName of experimentNames) {\n      this.checkExperiment(experimentName);\n      this.#enabledByDefault.add(experimentName);\n    }\n  }\n\n  setServerEnabledExperiments(experimentNames: string[]): void {\n    for (const experiment of experimentNames) {\n      this.checkExperiment(experiment);\n      this.#serverEnabled.add(experiment);\n    }\n  }\n\n  enableForTest(experimentName: string): void {\n    this.checkExperiment(experimentName);\n    this.#enabledTransiently.add(experimentName);\n  }\n\n  disableForTest(experimentName: string): void {\n    this.checkExperiment(experimentName);\n    this.#enabledTransiently.delete(experimentName);\n  }\n\n  clearForTest(): void {\n    this.#experiments = [];\n    this.#experimentNames.clear();\n    this.#enabledTransiently.clear();\n    this.#enabledByDefault.clear();\n    this.#serverEnabled.clear();\n  }\n\n  cleanUpStaleExperiments(): void {\n    const experimentsSetting = Runtime.experimentsSetting();\n    const cleanedUpExperimentSetting: {\n      [x: string]: boolean,\n    } = {};\n    for (const {name: experimentName} of this.#experiments) {\n      if (experimentsSetting.hasOwnProperty(experimentName)) {\n        const isEnabled = experimentsSetting[experimentName];\n        if (isEnabled || this.#enabledByDefault.has(experimentName)) {\n          cleanedUpExperimentSetting[experimentName] = isEnabled;\n        }\n      }\n    }\n    this.setExperimentsSetting(cleanedUpExperimentSetting);\n  }\n\n  private checkExperiment(experimentName: string): void {\n    Platform.DCHECK(() => this.#experimentNames.has(experimentName), 'Unknown experiment ' + experimentName);\n  }\n}\n\nexport class Experiment {\n  name: string;\n  title: string;\n  unstable: boolean;\n  docLink?: Platform.DevToolsPath.UrlString;\n  readonly #experiments: ExperimentsSupport;\n  constructor(\n      experiments: ExperimentsSupport, name: string, title: string, unstable: boolean,\n      docLink: Platform.DevToolsPath.UrlString) {\n    this.name = name;\n    this.title = title;\n    this.unstable = unstable;\n    this.docLink = docLink;\n    this.#experiments = experiments;\n  }\n\n  isEnabled(): boolean {\n    return this.#experiments.isEnabled(this.name);\n  }\n\n  setEnabled(enabled: boolean): void {\n    this.#experiments.setEnabled(this.name, enabled);\n  }\n}\n\n// This must be constructed after the query parameters have been parsed.\nexport const experiments = new ExperimentsSupport();\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum ExperimentName {\n  CAPTURE_NODE_CREATION_STACKS = 'captureNodeCreationStacks',\n  CSS_OVERVIEW = 'cssOverview',\n  LIVE_HEAP_PROFILE = 'liveHeapProfile',\n  DEVELOPER_RESOURCES_VIEW = 'developerResourcesView',\n  TIMELINE_REPLAY_EVENT = 'timelineReplayEvent',\n  CSP_VIOLATIONS_VIEW = 'cspViolationsView',\n  WASM_DWARF_DEBUGGING = 'wasmDWARFDebugging',\n  ALL = '*',\n  PROTOCOL_MONITOR = 'protocolMonitor',\n  WEBAUTHN_PANE = 'webauthnPane',\n  SYNC_SETTINGS = 'syncSettings',\n  FULL_ACCESSIBILITY_TREE = 'fullAccessibilityTree',\n  PRECISE_CHANGES = 'preciseChanges',\n  STYLES_PANE_CSS_CHANGES = 'stylesPaneCSSChanges',\n  HEADER_OVERRIDES = 'headerOverrides',\n  CSS_LAYERS = 'cssLayers',\n  EYEDROPPER_COLOR_PICKER = 'eyedropperColorPicker',\n  INSTRUMENTATION_BREAKPOINTS = 'instrumentationBreakpoints',\n  CSS_AUTHORING_HINTS = 'cssAuthoringHints',\n  AUTHORED_DEPLOYED_GROUPING = 'authoredDeployedGrouping',\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum ConditionName {\n  CAN_DOCK = 'can_dock',\n  NOT_SOURCES_HIDE_ADD_FOLDER = '!sources.hide_add_folder',\n}\n"],
  "mappings": "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",
  "names": []
}
