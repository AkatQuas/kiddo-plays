{
  "version": 3,
  "sources": ["../../../../../../front_end/core/host/InspectorFrontendHost.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2009 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport * as Common from '../common/common.js';\nimport * as i18n from '../i18n/i18n.js';\nimport * as Platform from '../platform/platform.js';\nimport * as Root from '../root/root.js';\n\nimport type {\n  CanShowSurveyResult, ContextMenuDescriptor, EnumeratedHistogram, EventTypes, ExtensionDescriptor,\n  InspectorFrontendHostAPI, LoadNetworkResourceResult, ShowSurveyResult,\n  SyncInformation} from './InspectorFrontendHostAPI.js';\nimport {EventDescriptors, Events} from './InspectorFrontendHostAPI.js';\nimport {streamWrite as resourceLoaderStreamWrite} from './ResourceLoader.js';\n\nconst UIStrings = {\n  /**\n  *@description Document title in Inspector Frontend Host of the DevTools window\n  *@example {example.com} PH1\n  */\n  devtoolsS: 'DevTools - {PH1}',\n};\nconst str_ = i18n.i18n.registerUIStrings('core/host/InspectorFrontendHost.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst MAX_RECORDED_HISTOGRAMS_SIZE = 100;\nconst OVERRIDES_FILE_SYSTEM_PATH = '/overrides' as Platform.DevToolsPath.RawPathString;\n\nexport class InspectorFrontendHostStub implements InspectorFrontendHostAPI {\n  readonly #urlsBeingSaved: Map<Platform.DevToolsPath.RawPathString|Platform.DevToolsPath.UrlString, string[]>;\n  events!: Common.EventTarget.EventTarget<EventTypes>;\n  #fileSystem: FileSystem|null = null;\n\n  recordedEnumeratedHistograms: {actionName: EnumeratedHistogram, actionCode: number}[] = [];\n  recordedPerformanceHistograms: {histogramName: string, duration: number}[] = [];\n\n  constructor() {\n    function stopEventPropagation(this: InspectorFrontendHostAPI, event: KeyboardEvent): void {\n      // Let browser handle Ctrl+/Ctrl- shortcuts in hosted mode.\n      const zoomModifier = this.platform() === 'mac' ? event.metaKey : event.ctrlKey;\n      if (zoomModifier && (event.key === '+' || event.key === '-')) {\n        event.stopPropagation();\n      }\n    }\n    document.addEventListener('keydown', event => {\n      stopEventPropagation.call(this, (event as KeyboardEvent));\n    }, true);\n    this.#urlsBeingSaved = new Map();\n  }\n\n  platform(): string {\n    const userAgent = navigator.userAgent;\n    if (userAgent.includes('Windows NT')) {\n      return 'windows';\n    }\n    if (userAgent.includes('Mac OS X')) {\n      return 'mac';\n    }\n    return 'linux';\n  }\n\n  loadCompleted(): void {\n  }\n\n  bringToFront(): void {\n  }\n\n  closeWindow(): void {\n  }\n\n  setIsDocked(isDocked: boolean, callback: () => void): void {\n    window.setTimeout(callback, 0);\n  }\n\n  showSurvey(trigger: string, callback: (arg0: ShowSurveyResult) => void): void {\n    window.setTimeout(() => callback({surveyShown: false}), 0);\n  }\n\n  canShowSurvey(trigger: string, callback: (arg0: CanShowSurveyResult) => void): void {\n    window.setTimeout(() => callback({canShowSurvey: false}), 0);\n  }\n\n  /**\n   * Requests inspected page to be placed atop of the inspector frontend with specified bounds.\n   */\n  setInspectedPageBounds(bounds: {\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n  }): void {\n  }\n\n  inspectElementCompleted(): void {\n  }\n\n  setInjectedScriptForOrigin(origin: string, script: string): void {\n  }\n\n  inspectedURLChanged(url: Platform.DevToolsPath.UrlString): void {\n    document.title = i18nString(UIStrings.devtoolsS, {PH1: url.replace(/^https?:\\/\\//, '')});\n  }\n\n  copyText(text: string|null|undefined): void {\n    if (text === undefined || text === null) {\n      return;\n    }\n    void navigator.clipboard.writeText(text);\n  }\n\n  openInNewTab(url: Platform.DevToolsPath.UrlString): void {\n    window.open(url, '_blank');\n  }\n\n  showItemInFolder(fileSystemPath: Platform.DevToolsPath.RawPathString): void {\n    Common.Console.Console.instance().error(\n        'Show item in folder is not enabled in hosted mode. Please inspect using chrome://inspect');\n  }\n\n  save(url: Platform.DevToolsPath.RawPathString|Platform.DevToolsPath.UrlString, content: string, forceSaveAs: boolean):\n      void {\n    let buffer = this.#urlsBeingSaved.get(url);\n    if (!buffer) {\n      buffer = [];\n      this.#urlsBeingSaved.set(url, buffer);\n    }\n    buffer.push(content);\n    this.events.dispatchEventToListeners(Events.SavedURL, {url, fileSystemPath: url});\n  }\n\n  append(url: Platform.DevToolsPath.RawPathString|Platform.DevToolsPath.UrlString, content: string): void {\n    const buffer = this.#urlsBeingSaved.get(url);\n    if (buffer) {\n      buffer.push(content);\n      this.events.dispatchEventToListeners(Events.AppendedToURL, url);\n    }\n  }\n\n  close(url: Platform.DevToolsPath.RawPathString|Platform.DevToolsPath.UrlString): void {\n    const buffer = this.#urlsBeingSaved.get(url) || [];\n    this.#urlsBeingSaved.delete(url);\n    let fileName = '';\n\n    if (url) {\n      try {\n        const trimmed = Platform.StringUtilities.trimURL(url);\n        fileName = Platform.StringUtilities.removeURLFragment(trimmed);\n      } catch (error) {\n        // If url is not a valid URL, it is probably a filename.\n        fileName = url;\n      }\n    }\n\n    const link = document.createElement('a');\n    link.download = fileName;\n    const blob = new Blob([buffer.join('')], {type: 'text/plain'});\n    const blobUrl = URL.createObjectURL(blob);\n    link.href = blobUrl;\n    link.click();\n    URL.revokeObjectURL(blobUrl);\n  }\n\n  sendMessageToBackend(message: string): void {\n  }\n\n  recordEnumeratedHistogram(actionName: EnumeratedHistogram, actionCode: number, bucketSize: number): void {\n    if (this.recordedEnumeratedHistograms.length >= MAX_RECORDED_HISTOGRAMS_SIZE) {\n      this.recordedEnumeratedHistograms.shift();\n    }\n    this.recordedEnumeratedHistograms.push({actionName, actionCode});\n  }\n\n  recordPerformanceHistogram(histogramName: string, duration: number): void {\n    if (this.recordedPerformanceHistograms.length >= MAX_RECORDED_HISTOGRAMS_SIZE) {\n      this.recordedPerformanceHistograms.shift();\n    }\n    this.recordedPerformanceHistograms.push({histogramName, duration});\n  }\n\n  recordUserMetricsAction(umaName: string): void {\n  }\n\n  requestFileSystems(): void {\n    this.events.dispatchEventToListeners(Events.FileSystemsLoaded, []);\n  }\n\n  addFileSystem(type?: string): void {\n    const onFileSystem = (fs: FileSystem): void => {\n      this.#fileSystem = fs;\n      const fileSystem = {\n        fileSystemName: 'sandboxedRequestedFileSystem',\n        fileSystemPath: OVERRIDES_FILE_SYSTEM_PATH,\n        rootURL: 'filesystem:devtools://devtools/isolated/',\n        type: 'overrides',\n      };\n      this.events.dispatchEventToListeners(Events.FileSystemAdded, {fileSystem});\n    };\n    window.webkitRequestFileSystem(window.TEMPORARY, 1024 * 1024, onFileSystem);\n  }\n\n  removeFileSystem(fileSystemPath: Platform.DevToolsPath.RawPathString): void {\n    const removalCallback = (entries: Entry[]): void => {\n      entries.forEach(entry => {\n        if (entry.isDirectory) {\n          (entry as DirectoryEntry).removeRecursively(() => {});\n        } else if (entry.isFile) {\n          entry.remove(() => {});\n        }\n      });\n    };\n\n    if (this.#fileSystem) {\n      this.#fileSystem.root.createReader().readEntries(removalCallback);\n    }\n\n    this.#fileSystem = null;\n    this.events.dispatchEventToListeners(Events.FileSystemRemoved, OVERRIDES_FILE_SYSTEM_PATH);\n  }\n\n  isolatedFileSystem(fileSystemId: string, registeredName: string): FileSystem|null {\n    return this.#fileSystem;\n  }\n\n  loadNetworkResource(\n      url: string, headers: string, streamId: number, callback: (arg0: LoadNetworkResourceResult) => void): void {\n    fetch(url)\n        .then(result => result.text())\n        .then(function(text) {\n          resourceLoaderStreamWrite(streamId, text);\n          callback({\n            statusCode: 200,\n            headers: undefined,\n            messageOverride: undefined,\n            netError: undefined,\n            netErrorName: undefined,\n            urlValid: undefined,\n          });\n        })\n        .catch(function() {\n          callback({\n            statusCode: 404,\n            headers: undefined,\n            messageOverride: undefined,\n            netError: undefined,\n            netErrorName: undefined,\n            urlValid: undefined,\n          });\n        });\n  }\n\n  registerPreference(name: string, options: {synced?: boolean}): void {\n  }\n\n  getPreferences(callback: (arg0: {\n                   [x: string]: string,\n                 }) => void): void {\n    const prefs: {\n      [x: string]: string,\n    } = {};\n    for (const name in window.localStorage) {\n      prefs[name] = window.localStorage[name];\n    }\n    callback(prefs);\n  }\n\n  getPreference(name: string, callback: (arg0: string) => void): void {\n    callback(window.localStorage[name]);\n  }\n\n  setPreference(name: string, value: string): void {\n    window.localStorage[name] = value;\n  }\n\n  removePreference(name: string): void {\n    delete window.localStorage[name];\n  }\n\n  clearPreferences(): void {\n    window.localStorage.clear();\n  }\n\n  getSyncInformation(callback: (arg0: SyncInformation) => void): void {\n    callback({\n      isSyncActive: false,\n      arePreferencesSynced: false,\n    });\n  }\n\n  upgradeDraggedFileSystemPermissions(fileSystem: FileSystem): void {\n  }\n\n  indexPath(requestId: number, fileSystemPath: Platform.DevToolsPath.RawPathString, excludedFolders: string): void {\n  }\n\n  stopIndexing(requestId: number): void {\n  }\n\n  searchInPath(requestId: number, fileSystemPath: Platform.DevToolsPath.RawPathString, query: string): void {\n  }\n\n  zoomFactor(): number {\n    return 1;\n  }\n\n  zoomIn(): void {\n  }\n\n  zoomOut(): void {\n  }\n\n  resetZoom(): void {\n  }\n\n  setWhitelistedShortcuts(shortcuts: string): void {\n  }\n\n  setEyeDropperActive(active: boolean): void {\n  }\n\n  showCertificateViewer(certChain: string[]): void {\n  }\n\n  reattach(callback: () => void): void {\n  }\n\n  readyForTest(): void {\n  }\n\n  connectionReady(): void {\n  }\n\n  setOpenNewWindowForPopups(value: boolean): void {\n  }\n\n  setDevicesDiscoveryConfig(config: Adb.Config): void {\n  }\n\n  setDevicesUpdatesEnabled(enabled: boolean): void {\n  }\n\n  performActionOnRemotePage(pageId: string, action: string): void {\n  }\n\n  openRemotePage(browserId: string, url: string): void {\n  }\n\n  openNodeFrontend(): void {\n  }\n\n  showContextMenuAtPoint(x: number, y: number, items: ContextMenuDescriptor[], document: Document): void {\n    throw 'Soft context menu should be used';\n  }\n\n  isHostedMode(): boolean {\n    return true;\n  }\n\n  setAddExtensionCallback(callback: (arg0: ExtensionDescriptor) => void): void {\n    // Extensions are not supported in hosted mode.\n  }\n\n  async initialTargetId(): Promise<string|null> {\n    return null;\n  }\n}\n\n// @ts-ignore Global injected by devtools-compatibility.js\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport let InspectorFrontendHostInstance: InspectorFrontendHostStub = window.InspectorFrontendHost;\n\nclass InspectorFrontendAPIImpl {\n  constructor() {\n    for (const descriptor of EventDescriptors) {\n      // @ts-ignore Dispatcher magic\n      this[descriptor[1]] = this.dispatch.bind(this, descriptor[0], descriptor[2], descriptor[3]);\n    }\n  }\n\n  private dispatch(name: symbol, signature: string[], runOnceLoaded: boolean, ...params: string[]): void {\n    // Single argument methods get dispatched with the param.\n    if (signature.length < 2) {\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        InspectorFrontendHostInstance.events.dispatchEventToListeners<any>(name, params[0]);\n      } catch (error) {\n        console.error(error + ' ' + error.stack);\n      }\n      return;\n    }\n    const data: {\n      [x: string]: string,\n    } = {};\n    for (let i = 0; i < signature.length; ++i) {\n      data[signature[i]] = params[i];\n    }\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      InspectorFrontendHostInstance.events.dispatchEventToListeners<any>(name, data);\n    } catch (error) {\n      console.error(error + ' ' + error.stack);\n    }\n  }\n\n  streamWrite(id: number, chunk: string): void {\n    resourceLoaderStreamWrite(id, chunk);\n  }\n}\n\n(function(): void {\n\nfunction initializeInspectorFrontendHost(): void {\n  let proto;\n  if (!InspectorFrontendHostInstance) {\n    // Instantiate stub for web-hosted mode if necessary.\n    // @ts-ignore Global injected by devtools-compatibility.js\n    window.InspectorFrontendHost = InspectorFrontendHostInstance = new InspectorFrontendHostStub();\n  } else {\n    // Otherwise add stubs for missing methods that are declared in the interface.\n    proto = InspectorFrontendHostStub.prototype;\n    for (const name of Object.getOwnPropertyNames(proto)) {\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n      // @ts-expect-error\n      const stub = proto[name];\n      // @ts-ignore Global injected by devtools-compatibility.js\n      if (typeof stub !== 'function' || InspectorFrontendHostInstance[name]) {\n        continue;\n      }\n\n      console.error(`Incompatible embedder: method Host.InspectorFrontendHost.${name} is missing. Using stub instead.`);\n      // @ts-ignore Global injected by devtools-compatibility.js\n      InspectorFrontendHostInstance[name] = stub;\n    }\n  }\n\n  // Attach the events object.\n  InspectorFrontendHostInstance.events = new Common.ObjectWrapper.ObjectWrapper();\n}\n\n// FIXME: This file is included into both apps, since the devtools_app needs the InspectorFrontendHostAPI only,\n// so the host instance should not be initialized there.\ninitializeInspectorFrontendHost();\n// @ts-ignore Global injected by devtools-compatibility.js\nwindow.InspectorFrontendAPI = new InspectorFrontendAPIImpl();\n})();\n\nexport function isUnderTest(prefs?: {\n  [x: string]: string,\n}): boolean {\n  // Integration tests rely on test queryParam.\n  if (Root.Runtime.Runtime.queryParam('test')) {\n    return true;\n  }\n  // Browser tests rely on prefs.\n  if (prefs) {\n    return prefs['isUnderTest'] === 'true';\n  }\n  return Common.Settings.Settings.hasInstance() &&\n      Common.Settings.Settings.instance().createSetting('isUnderTest', false).get();\n}\n"],
  "mappings": "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",
  "names": []
}
