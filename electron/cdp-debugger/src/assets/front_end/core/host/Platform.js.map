{
  "version": 3,
  "sources": ["../../../../../../front_end/core/host/Platform.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2014 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport {InspectorFrontendHostInstance} from './InspectorFrontendHost.js';\n\nlet _platform: string;\n\nexport function platform(): string {\n  if (!_platform) {\n    _platform = InspectorFrontendHostInstance.platform();\n  }\n  return _platform;\n}\n\nlet _isMac: boolean|undefined;\n\nexport function isMac(): boolean {\n  if (typeof _isMac === 'undefined') {\n    _isMac = platform() === 'mac';\n  }\n\n  return _isMac;\n}\n\nlet _isWin: boolean|undefined;\n\nexport function isWin(): boolean {\n  if (typeof _isWin === 'undefined') {\n    _isWin = platform() === 'windows';\n  }\n\n  return _isWin;\n}\n\n// In Chrome Layout tests the imported 'Platform' object is not writable/\n// configurable, which prevents us from monkey-patching 'Platform''s methods.\n// We circumvent this by adding 'setPlatformForTests'.\nexport function setPlatformForTests(platform: string): void {\n  _platform = platform;\n  _isMac = undefined;\n  _isWin = undefined;\n}\n\nlet _isCustomDevtoolsFrontend: boolean;\n\nexport function isCustomDevtoolsFrontend(): boolean {\n  if (typeof _isCustomDevtoolsFrontend === 'undefined') {\n    _isCustomDevtoolsFrontend = window.location.toString().startsWith('devtools://devtools/custom/');\n  }\n  return _isCustomDevtoolsFrontend;\n}\n\nlet _fontFamily: string;\n\nexport function fontFamily(): string {\n  if (_fontFamily) {\n    return _fontFamily;\n  }\n  switch (platform()) {\n    case 'linux':\n      _fontFamily = 'Roboto, Ubuntu, Arial, sans-serif';\n      break;\n    case 'mac':\n      _fontFamily = '\\'Lucida Grande\\', sans-serif';\n      break;\n    case 'windows':\n      _fontFamily = '\\'Segoe UI\\', Tahoma, sans-serif';\n      break;\n  }\n  return _fontFamily;\n}\n"],
  "mappings": "AAgCA;AAEA,IAAI;AAEG,2BAA4B;AACjC,MAAI,CAAC,WAAW;AACd,gBAAY,8BAA8B;AAAA;AAE5C,SAAO;AAAA;AAGT,IAAI;AAEG,wBAA0B;AAC/B,MAAI,OAAO,WAAW,aAAa;AACjC,aAAS,eAAe;AAAA;AAG1B,SAAO;AAAA;AAGT,IAAI;AAEG,wBAA0B;AAC/B,MAAI,OAAO,WAAW,aAAa;AACjC,aAAS,eAAe;AAAA;AAG1B,SAAO;AAAA;AAMF,oCAA6B,WAAwB;AAC1D,cAAY;AACZ,WAAS;AACT,WAAS;AAAA;AAGX,IAAI;AAEG,2CAA6C;AAClD,MAAI,OAAO,8BAA8B,aAAa;AACpD,gCAA4B,OAAO,SAAS,WAAW,WAAW;AAAA;AAEpE,SAAO;AAAA;AAGT,IAAI;AAEG,6BAA8B;AACnC,MAAI,aAAa;AACf,WAAO;AAAA;AAET,UAAQ;AAAA,SACD;AACH,oBAAc;AACd;AAAA,SACG;AACH,oBAAc;AACd;AAAA,SACG;AACH,oBAAc;AACd;AAAA;AAEJ,SAAO;AAAA;",
  "names": []
}
