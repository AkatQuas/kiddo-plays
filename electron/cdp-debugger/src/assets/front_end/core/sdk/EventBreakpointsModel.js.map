{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/EventBreakpointsModel.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../common/common.js';\nimport * as i18n from '../i18n/i18n.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\n\nimport {CategorizedBreakpoint} from './CategorizedBreakpoint.js';\nimport type {Target} from './Target.js';\nimport {Capability} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\nimport type {SDKModelObserver} from './TargetManager.js';\nimport {TargetManager} from './TargetManager.js';\n\nconst UIStrings = {\n  /**\n   * @description Category of breakpoints\n   */\n  auctionWorklet: 'Ad Auction Worklet',\n\n  /**\n   * @description Name of a breakpoint type.\n   * https://github.com/WICG/turtledove/blob/main/FLEDGE.md#32-on-device-bidding\n   */\n  beforeBidderWorkletBiddingStart: 'Bidder Bidding Phase Start',\n\n  /**\n   * @description Name of a breakpoint type.\n   * https://github.com/WICG/turtledove/blob/main/FLEDGE.md#52-buyer-reporting-on-render-and-ad-events\n   */\n  beforeBidderWorkletReportingStart: 'Bidder Reporting Phase Start',\n\n  /**\n   * @description Name of a breakpoint type.\n   * https://github.com/WICG/turtledove/blob/main/FLEDGE.md#23-scoring-bids\n   */\n  beforeSellerWorkletScoringStart: 'Seller Scoring Phase Start',\n\n  /**\n   * @description Name of a breakpoint type.\n   * https://github.com/WICG/turtledove/blob/main/FLEDGE.md#51-seller-reporting-on-render\n   */\n  beforeSellerWorkletReportingStart: 'Seller Reporting Phase Start',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/EventBreakpointsModel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst enum InstrumentationNames {\n  BeforeBidderWorkletBiddingStart = 'beforeBidderWorkletBiddingStart',\n  BeforeBidderWorkletReportingStart = 'beforeBidderWorkletReportingStart',\n  BeforeSellerWorkletScoringStart = 'beforeSellerWorkletScoringStart',\n  BeforeSellerWorkletReportingStart = 'beforeSellerWorkletReportingStart',\n}\n\nfunction getTitleForInstrumentationName(instrumentationName: InstrumentationNames): Common.UIString.LocalizedString {\n  switch (instrumentationName) {\n    case InstrumentationNames.BeforeBidderWorkletBiddingStart:\n      return i18nString(UIStrings.beforeBidderWorkletBiddingStart);\n\n    case InstrumentationNames.BeforeBidderWorkletReportingStart:\n      return i18nString(UIStrings.beforeBidderWorkletReportingStart);\n\n    case InstrumentationNames.BeforeSellerWorkletScoringStart:\n      return i18nString(UIStrings.beforeSellerWorkletScoringStart);\n\n    case InstrumentationNames.BeforeSellerWorkletReportingStart:\n      return i18nString(UIStrings.beforeSellerWorkletReportingStart);\n  }\n}\n\nexport class EventBreakpointsModel extends SDKModel<void> {\n  readonly agent: ProtocolProxyApi.EventBreakpointsApi;\n\n  constructor(target: Target) {\n    super(target);\n    this.agent = target.eventBreakpointsAgent();\n  }\n}\n\n// This implementation (as opposed to similar class in DOMDebuggerModel) is for\n// instrumentation breakpoints in targets that run JS but do not have a DOM.\nclass EventListenerBreakpoint extends CategorizedBreakpoint {\n  readonly instrumentationName: string;\n  constructor(instrumentationName: InstrumentationNames, category: string) {\n    super(category, getTitleForInstrumentationName(instrumentationName));\n    this.instrumentationName = instrumentationName;\n  }\n\n  setEnabled(enabled: boolean): void {\n    if (this.enabled() === enabled) {\n      return;\n    }\n    super.setEnabled(enabled);\n    for (const model of TargetManager.instance().models(EventBreakpointsModel)) {\n      this.updateOnModel(model);\n    }\n  }\n\n  updateOnModel(model: EventBreakpointsModel): void {\n    if (this.enabled()) {\n      void model.agent.invoke_setInstrumentationBreakpoint({eventName: this.instrumentationName});\n    } else {\n      void model.agent.invoke_removeInstrumentationBreakpoint({eventName: this.instrumentationName});\n    }\n  }\n\n  static readonly instrumentationPrefix = 'instrumentation:';\n}\n\nlet eventBreakpointManagerInstance: EventBreakpointsManager;\n\nexport class EventBreakpointsManager implements SDKModelObserver<EventBreakpointsModel> {\n  readonly #eventListenerBreakpointsInternal: EventListenerBreakpoint[] = [];\n\n  constructor() {\n    this.createInstrumentationBreakpoints(i18nString(UIStrings.auctionWorklet), [\n      InstrumentationNames.BeforeBidderWorkletBiddingStart,\n      InstrumentationNames.BeforeBidderWorkletReportingStart,\n      InstrumentationNames.BeforeSellerWorkletScoringStart,\n      InstrumentationNames.BeforeSellerWorkletReportingStart,\n    ]);\n\n    TargetManager.instance().observeModels(EventBreakpointsModel, this);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): EventBreakpointsManager {\n    const {forceNew} = opts;\n    if (!eventBreakpointManagerInstance || forceNew) {\n      eventBreakpointManagerInstance = new EventBreakpointsManager();\n    }\n\n    return eventBreakpointManagerInstance;\n  }\n\n  private createInstrumentationBreakpoints(category: string, instrumentationNames: InstrumentationNames[]): void {\n    for (const instrumentationName of instrumentationNames) {\n      this.#eventListenerBreakpointsInternal.push(new EventListenerBreakpoint(instrumentationName, category));\n    }\n  }\n\n  eventListenerBreakpoints(): EventListenerBreakpoint[] {\n    return this.#eventListenerBreakpointsInternal.slice();\n  }\n\n  resolveEventListenerBreakpointTitle(auxData: {\n    eventName: string,\n  }): string|null {\n    const breakpoint = this.resolveEventListenerBreakpoint(auxData);\n    return breakpoint ? breakpoint.title() : null;\n  }\n\n  resolveEventListenerBreakpoint(auxData: {eventName: string}): EventListenerBreakpoint|null {\n    const eventName = auxData.eventName;\n    if (!eventName.startsWith(EventListenerBreakpoint.instrumentationPrefix)) {\n      return null;\n    }\n\n    const instrumentationName = eventName.substring(EventListenerBreakpoint.instrumentationPrefix.length);\n    return this.#eventListenerBreakpointsInternal.find(b => b.instrumentationName === instrumentationName) || null;\n  }\n\n  modelAdded(eventBreakpointModel: EventBreakpointsModel): void {\n    for (const breakpoint of this.#eventListenerBreakpointsInternal) {\n      if (breakpoint.enabled()) {\n        breakpoint.updateOnModel(eventBreakpointModel);\n      }\n    }\n  }\n\n  modelRemoved(_eventBreakpointModel: EventBreakpointsModel): void {\n  }\n}\n\nSDKModel.register(EventBreakpointsModel, {capabilities: Capability.EventBreakpoints, autostart: false});\n"],
  "mappings": "AAKA;AAGA;AAEA;AACA;AAEA;AAEA,MAAM,YAAY;AAAA,EAIhB,gBAAgB;AAAA,EAMhB,iCAAiC;AAAA,EAMjC,mCAAmC;AAAA,EAMnC,iCAAiC;AAAA,EAMjC,mCAAmC;AAAA;AAGrC,MAAM,OAAO,KAAK,KAAK,kBAAkB,qCAAqC;AAC9E,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAEhE,IAAW,uBAAX,kBAAW,0BAAX;AACE,6DAAkC;AAClC,+DAAoC;AACpC,6DAAkC;AAClC,+DAAoC;AAJ3B;AAAA;AAOX,wCAAwC,qBAA4E;AAClH,UAAQ;AAAA,SACD;AACH,aAAO,WAAW,UAAU;AAAA,SAEzB;AACH,aAAO,WAAW,UAAU;AAAA,SAEzB;AACH,aAAO,WAAW,UAAU;AAAA,SAEzB;AACH,aAAO,WAAW,UAAU;AAAA;AAAA;AAI3B,2CAAoC,SAAe;AAAA,EAC/C;AAAA,EAET,YAAY,QAAgB;AAC1B,UAAM;AACN,SAAK,QAAQ,OAAO;AAAA;AAAA;AAMxB,sCAAsC,sBAAsB;AAAA,EACjD;AAAA,EACT,YAAY,qBAA2C,UAAkB;AACvE,UAAM,UAAU,+BAA+B;AAC/C,SAAK,sBAAsB;AAAA;AAAA,EAG7B,WAAW,SAAwB;AACjC,QAAI,KAAK,cAAc,SAAS;AAC9B;AAAA;AAEF,UAAM,WAAW;AACjB,eAAW,SAAS,cAAc,WAAW,OAAO,wBAAwB;AAC1E,WAAK,cAAc;AAAA;AAAA;AAAA,EAIvB,cAAc,OAAoC;AAChD,QAAI,KAAK,WAAW;AAClB,WAAK,MAAM,MAAM,oCAAoC,EAAC,WAAW,KAAK;AAAA,WACjE;AACL,WAAK,MAAM,MAAM,uCAAuC,EAAC,WAAW,KAAK;AAAA;AAAA;AAAA,SAI7D,wBAAwB;AAAA;AAG1C,IAAI;AAEG,qCAAiF;AAAA,sCACd;AAAA,EAExE,cAAc;AACZ,SAAK,iCAAiC,WAAW,UAAU,iBAAiB;AAAA,MAC1E;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;AAGF,kBAAc,WAAW,cAAc,uBAAuB;AAAA;AAAA,SAGzD,SAAS,OAEZ,EAAC,UAAU,QAAgC;AAC7C,UAAM,EAAC,aAAY;AACnB,QAAI,CAAC,kCAAkC,UAAU;AAC/C,uCAAiC,IAAI;AAAA;AAGvC,WAAO;AAAA;AAAA,EAGD,iCAAiC,UAAkB,sBAAoD;AAC7G,eAAW,uBAAuB,sBAAsB;AACtD,6CAAuC,KAAK,IAAI,wBAAwB,qBAAqB;AAAA;AAAA;AAAA,EAIjG,2BAAsD;AACpD,WAAO,uCAAuC;AAAA;AAAA,EAGhD,oCAAoC,SAEpB;AACd,UAAM,aAAa,KAAK,+BAA+B;AACvD,WAAO,aAAa,WAAW,UAAU;AAAA;AAAA,EAG3C,+BAA+B,SAA4D;AACzF,UAAM,YAAY,QAAQ;AAC1B,QAAI,CAAC,UAAU,WAAW,wBAAwB,wBAAwB;AACxE,aAAO;AAAA;AAGT,UAAM,sBAAsB,UAAU,UAAU,wBAAwB,sBAAsB;AAC9F,WAAO,uCAAuC,KAAK,OAAK,EAAE,wBAAwB,wBAAwB;AAAA;AAAA,EAG5G,WAAW,sBAAmD;AAC5D,eAAW,cAAc,wCAAwC;AAC/D,UAAI,WAAW,WAAW;AACxB,mBAAW,cAAc;AAAA;AAAA;AAAA;AAAA,EAK/B,aAAa,uBAAoD;AAAA;AAAA;AAInE,SAAS,SAAS,uBAAuB,EAAC,cAAc,WAAW,kBAAkB,WAAW;",
  "names": []
}
