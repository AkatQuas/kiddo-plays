{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/CSSStyleDeclaration.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport {cssMetadata} from './CSSMetadata.js';\nimport type {CSSModel, Edit} from './CSSModel.js';\nimport {CSSProperty} from './CSSProperty.js';\nimport type {CSSRule} from './CSSRule.js';\nimport type {Target} from './Target.js';\n\nexport class CSSStyleDeclaration {\n  readonly #cssModelInternal: CSSModel;\n  parentRule: CSSRule|null;\n  #allPropertiesInternal!: CSSProperty[];\n  styleSheetId!: Protocol.CSS.StyleSheetId|undefined;\n  range!: TextUtils.TextRange.TextRange|null;\n  cssText!: string|undefined;\n  #shorthandValues!: Map<string, string>;\n  #shorthandIsImportant!: Set<string>;\n  #activePropertyMap!: Map<string, CSSProperty>;\n  #leadingPropertiesInternal!: CSSProperty[]|null;\n  type: Type;\n  constructor(cssModel: CSSModel, parentRule: CSSRule|null, payload: Protocol.CSS.CSSStyle, type: Type) {\n    this.#cssModelInternal = cssModel;\n    this.parentRule = parentRule;\n    this.reinitialize(payload);\n    this.type = type;\n  }\n\n  rebase(edit: Edit): void {\n    if (this.styleSheetId !== edit.styleSheetId || !this.range) {\n      return;\n    }\n    if (edit.oldRange.equal(this.range)) {\n      this.reinitialize((edit.payload as Protocol.CSS.CSSStyle));\n    } else {\n      this.range = this.range.rebaseAfterTextEdit(edit.oldRange, edit.newRange);\n      for (let i = 0; i < this.#allPropertiesInternal.length; ++i) {\n        this.#allPropertiesInternal[i].rebase(edit);\n      }\n    }\n  }\n\n  private reinitialize(payload: Protocol.CSS.CSSStyle): void {\n    this.styleSheetId = payload.styleSheetId;\n    this.range = payload.range ? TextUtils.TextRange.TextRange.fromObject(payload.range) : null;\n\n    const shorthandEntries = payload.shorthandEntries;\n    this.#shorthandValues = new Map();\n    this.#shorthandIsImportant = new Set();\n    for (let i = 0; i < shorthandEntries.length; ++i) {\n      this.#shorthandValues.set(shorthandEntries[i].name, shorthandEntries[i].value);\n      if (shorthandEntries[i].important) {\n        this.#shorthandIsImportant.add(shorthandEntries[i].name);\n      }\n    }\n\n    this.#allPropertiesInternal = [];\n\n    if (payload.cssText && this.range) {\n      const cssText = new TextUtils.Text.Text(payload.cssText);\n      let start: {\n        line: number,\n        column: number,\n      }|{\n        line: number,\n        column: number,\n      } = {line: this.range.startLine, column: this.range.startColumn};\n      for (const cssProperty of payload.cssProperties) {\n        const range = cssProperty.range;\n        if (range) {\n          parseUnusedText.call(this, cssText, start.line, start.column, range.startLine, range.startColumn);\n          start = {line: range.endLine, column: range.endColumn};\n        }\n        this.#allPropertiesInternal.push(\n            CSSProperty.parsePayload(this, this.#allPropertiesInternal.length, cssProperty));\n      }\n      parseUnusedText.call(this, cssText, start.line, start.column, this.range.endLine, this.range.endColumn);\n    } else {\n      for (const cssProperty of payload.cssProperties) {\n        this.#allPropertiesInternal.push(\n            CSSProperty.parsePayload(this, this.#allPropertiesInternal.length, cssProperty));\n      }\n    }\n\n    this.generateSyntheticPropertiesIfNeeded();\n    this.computeInactiveProperties();\n\n    this.#activePropertyMap = new Map();\n    for (const property of this.#allPropertiesInternal) {\n      if (!property.activeInStyle()) {\n        continue;\n      }\n      this.#activePropertyMap.set(property.name, property);\n    }\n\n    this.cssText = payload.cssText;\n    this.#leadingPropertiesInternal = null;\n\n    function parseUnusedText(\n        this: CSSStyleDeclaration, cssText: TextUtils.Text.Text, startLine: number, startColumn: number,\n        endLine: number, endColumn: number): void {\n      const tr = new TextUtils.TextRange.TextRange(startLine, startColumn, endLine, endColumn);\n      if (!this.range) {\n        return;\n      }\n      const missingText = cssText.extract(tr.relativeTo(this.range.startLine, this.range.startColumn));\n\n      // Try to fit the malformed css into properties.\n      const lines = missingText.split('\\n');\n      let lineNumber = 0;\n      let inComment = false;\n      for (const line of lines) {\n        let column = 0;\n        for (const property of line.split(';')) {\n          const strippedProperty = stripComments(property, inComment);\n          const trimmedProperty = strippedProperty.text.trim();\n          inComment = strippedProperty.inComment;\n\n          if (trimmedProperty) {\n            let name;\n            let value;\n            const colonIndex = trimmedProperty.indexOf(':');\n            if (colonIndex === -1) {\n              name = trimmedProperty;\n              value = '';\n            } else {\n              name = trimmedProperty.substring(0, colonIndex).trim();\n              value = trimmedProperty.substring(colonIndex + 1).trim();\n            }\n            const range = new TextUtils.TextRange.TextRange(lineNumber, column, lineNumber, column + property.length);\n            this.#allPropertiesInternal.push(new CSSProperty(\n                this, this.#allPropertiesInternal.length, name, value, false, false, false, false, property,\n                range.relativeFrom(startLine, startColumn)));\n          }\n          column += property.length + 1;\n        }\n        lineNumber++;\n      }\n    }\n\n    function stripComments(text: string, inComment: boolean): {\n      text: string,\n      inComment: boolean,\n    } {\n      let output = '';\n      for (let i = 0; i < text.length; i++) {\n        if (!inComment && text.substring(i, i + 2) === '/*') {\n          inComment = true;\n          i++;\n        } else if (inComment && text.substring(i, i + 2) === '*/') {\n          inComment = false;\n          i++;\n        } else if (!inComment) {\n          output += text[i];\n        }\n      }\n      return {text: output, inComment};\n    }\n  }\n\n  private generateSyntheticPropertiesIfNeeded(): void {\n    if (this.range) {\n      return;\n    }\n\n    if (!this.#shorthandValues.size) {\n      return;\n    }\n\n    const propertiesSet = new Set<string>();\n    for (const property of this.#allPropertiesInternal) {\n      propertiesSet.add(property.name);\n    }\n\n    const generatedProperties = [];\n    // For style-based properties, generate #shorthands with values when possible.\n    for (const property of this.#allPropertiesInternal) {\n      // For style-based properties, try generating #shorthands.\n      const shorthands = cssMetadata().getShorthands(property.name) || [];\n      for (const shorthand of shorthands) {\n        if (propertiesSet.has(shorthand)) {\n          continue;\n        }  // There already is a shorthand this #longhands falls under.\n        const shorthandValue = this.#shorthandValues.get(shorthand);\n        if (!shorthandValue) {\n          continue;\n        }  // Never generate synthetic #shorthands when no value is available.\n\n        // Generate synthetic shorthand we have a value for.\n        const shorthandImportance = Boolean(this.#shorthandIsImportant.has(shorthand));\n        const shorthandProperty = new CSSProperty(\n            this, this.allProperties().length, shorthand, shorthandValue, shorthandImportance, false, true, false);\n        generatedProperties.push(shorthandProperty);\n        propertiesSet.add(shorthand);\n      }\n    }\n    this.#allPropertiesInternal = this.#allPropertiesInternal.concat(generatedProperties);\n  }\n\n  private computeLeadingProperties(): CSSProperty[] {\n    function propertyHasRange(property: CSSProperty): boolean {\n      return Boolean(property.range);\n    }\n\n    if (this.range) {\n      return this.#allPropertiesInternal.filter(propertyHasRange);\n    }\n\n    const leadingProperties = [];\n    for (const property of this.#allPropertiesInternal) {\n      const shorthands = cssMetadata().getShorthands(property.name) || [];\n      let belongToAnyShorthand = false;\n      for (const shorthand of shorthands) {\n        if (this.#shorthandValues.get(shorthand)) {\n          belongToAnyShorthand = true;\n          break;\n        }\n      }\n      if (!belongToAnyShorthand) {\n        leadingProperties.push(property);\n      }\n    }\n\n    return leadingProperties;\n  }\n\n  leadingProperties(): CSSProperty[] {\n    if (!this.#leadingPropertiesInternal) {\n      this.#leadingPropertiesInternal = this.computeLeadingProperties();\n    }\n    return this.#leadingPropertiesInternal;\n  }\n\n  target(): Target {\n    return this.#cssModelInternal.target();\n  }\n\n  cssModel(): CSSModel {\n    return this.#cssModelInternal;\n  }\n\n  private computeInactiveProperties(): void {\n    const activeProperties = new Map<string, CSSProperty>();\n    for (let i = 0; i < this.#allPropertiesInternal.length; ++i) {\n      const property = this.#allPropertiesInternal[i];\n      if (property.disabled || !property.parsedOk) {\n        property.setActive(false);\n        continue;\n      }\n      const metadata = cssMetadata();\n      const canonicalName = metadata.canonicalPropertyName(property.name);\n      const longhands = metadata.getLonghands(canonicalName);\n      if (longhands) {\n        for (const longhand of longhands) {\n          const activeLonghand = activeProperties.get(longhand);\n          if (activeLonghand && activeLonghand.range && (!activeLonghand.important || property.important)) {\n            activeLonghand.setActive(false);\n            activeProperties.delete(longhand);\n          }\n        }\n      }\n      const activeProperty = activeProperties.get(canonicalName);\n      if (!activeProperty) {\n        activeProperties.set(canonicalName, property);\n      } else if (!property.range) {\n        // For some -webkit- properties, the backend returns also the canonical\n        // property. e.g. if you set in the css only the property\n        // -webkit-background-clip, the backend will return\n        // -webkit-background-clip and background-clip.\n        // This behavior will invalidate -webkit-background-clip (only visually,\n        // the property will be correctly applied)\n        // So this is checking if the property is visible or not in the\n        // styles panel and if not, it will not deactivate the \"activeProperty\".\n        property.setActive(false);\n      } else if (!activeProperty.important || property.important) {\n        activeProperty.setActive(false);\n        activeProperties.set(canonicalName, property);\n      } else {\n        property.setActive(false);\n      }\n    }\n  }\n\n  allProperties(): CSSProperty[] {\n    return this.#allPropertiesInternal;\n  }\n\n  hasActiveProperty(name: string): boolean {\n    return this.#activePropertyMap.has(name);\n  }\n\n  getPropertyValue(name: string): string {\n    const property = this.#activePropertyMap.get(name);\n    return property ? property.value : '';\n  }\n\n  isPropertyImplicit(name: string): boolean {\n    const property = this.#activePropertyMap.get(name);\n    return property ? property.implicit : false;\n  }\n\n  longhandProperties(name: string): CSSProperty[] {\n    const longhands = cssMetadata().getLonghands(name.toLowerCase());\n    const result = [];\n    for (let i = 0; longhands && i < longhands.length; ++i) {\n      const property = this.#activePropertyMap.get(longhands[i]);\n      if (property) {\n        result.push(property);\n      }\n    }\n    return result;\n  }\n\n  propertyAt(index: number): CSSProperty|null {\n    return (index < this.allProperties().length) ? this.allProperties()[index] : null;\n  }\n\n  pastLastSourcePropertyIndex(): number {\n    for (let i = this.allProperties().length - 1; i >= 0; --i) {\n      if (this.allProperties()[i].range) {\n        return i + 1;\n      }\n    }\n    return 0;\n  }\n\n  private insertionRange(index: number): TextUtils.TextRange.TextRange {\n    const property = this.propertyAt(index);\n    if (property && property.range) {\n      return property.range.collapseToStart();\n    }\n    if (!this.range) {\n      throw new Error('CSSStyleDeclaration.range is null');\n    }\n    return this.range.collapseToEnd();\n  }\n\n  newBlankProperty(index?: number): CSSProperty {\n    index = (typeof index === 'undefined') ? this.pastLastSourcePropertyIndex() : index;\n    const property = new CSSProperty(this, index, '', '', false, false, true, false, '', this.insertionRange(index));\n    return property;\n  }\n\n  setText(text: string, majorChange: boolean): Promise<boolean> {\n    if (!this.range || !this.styleSheetId) {\n      return Promise.resolve(false);\n    }\n    return this.#cssModelInternal.setStyleText(this.styleSheetId, this.range, text, majorChange);\n  }\n\n  insertPropertyAt(index: number, name: string, value: string, userCallback?: ((arg0: boolean) => void)): void {\n    void this.newBlankProperty(index).setText(name + ': ' + value + ';', false, true).then(userCallback);\n  }\n\n  appendProperty(name: string, value: string, userCallback?: ((arg0: boolean) => void)): void {\n    this.insertPropertyAt(this.allProperties().length, name, value, userCallback);\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Type {\n  Regular = 'Regular',\n  Inline = 'Inline',\n  Attributes = 'Attributes',\n}\n"],
  "mappings": "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",
  "names": []
}
