{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/TargetManager.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as Platform from '../platform/platform.js';\nimport type * as ProtocolClient from '../protocol_client/protocol_client.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport {Type as TargetType} from './Target.js';\nimport {Target} from './Target.js';\nimport type {SDKModel} from './SDKModel.js';\nimport * as Root from '../root/root.js';\nimport * as Host from '../host/host.js';\n\nlet targetManagerInstance: TargetManager|undefined;\n\nexport class TargetManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  #targetsInternal: Set<Target>;\n  readonly #observers: Set<Observer>;\n  #modelListeners: Platform.MapUtilities.Multimap<string|symbol|number, {\n    modelClass: new(arg1: Target) => SDKModel,\n    thisObject: (Object|undefined),\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: Common.EventTarget.EventListener<any, any>,\n  }>;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  readonly #modelObservers: Platform.MapUtilities.Multimap<new(arg1: Target) => SDKModel, SDKModelObserver<any>>;\n  #isSuspended: boolean;\n  #browserTargetInternal: Target|null;\n\n  private constructor() {\n    super();\n    this.#targetsInternal = new Set();\n    this.#observers = new Set();\n    this.#modelListeners = new Platform.MapUtilities.Multimap();\n    this.#modelObservers = new Platform.MapUtilities.Multimap();\n    this.#isSuspended = false;\n    this.#browserTargetInternal = null;\n  }\n\n  static instance({forceNew}: {\n    forceNew: boolean,\n  } = {forceNew: false}): TargetManager {\n    if (!targetManagerInstance || forceNew) {\n      targetManagerInstance = new TargetManager();\n    }\n\n    return targetManagerInstance;\n  }\n\n  static removeInstance(): void {\n    targetManagerInstance = undefined;\n  }\n\n  onInspectedURLChange(target: Target): void {\n    this.dispatchEventToListeners(Events.InspectedURLChanged, target);\n  }\n\n  onNameChange(target: Target): void {\n    this.dispatchEventToListeners(Events.NameChanged, target);\n  }\n\n  async suspendAllTargets(reason?: string): Promise<void> {\n    if (this.#isSuspended) {\n      return;\n    }\n    this.#isSuspended = true;\n    this.dispatchEventToListeners(Events.SuspendStateChanged);\n    const suspendPromises = Array.from(this.#targetsInternal.values(), target => target.suspend(reason));\n    await Promise.all(suspendPromises);\n  }\n\n  async resumeAllTargets(): Promise<void> {\n    if (!this.#isSuspended) {\n      return;\n    }\n    this.#isSuspended = false;\n    this.dispatchEventToListeners(Events.SuspendStateChanged);\n    const resumePromises = Array.from(this.#targetsInternal.values(), target => target.resume());\n    await Promise.all(resumePromises);\n  }\n\n  allTargetsSuspended(): boolean {\n    return this.#isSuspended;\n  }\n\n  models<T extends SDKModel>(modelClass: new(arg1: Target) => T): T[] {\n    const result = [];\n    for (const target of this.#targetsInternal) {\n      const model = target.model(modelClass);\n      if (model) {\n        result.push(model);\n      }\n    }\n    return result;\n  }\n\n  inspectedURL(): string {\n    const mainTarget = this.mainTarget();\n    return mainTarget ? mainTarget.inspectedURL() : '';\n  }\n\n  observeModels<T extends SDKModel>(modelClass: new(arg1: Target) => T, observer: SDKModelObserver<T>): void {\n    const models = this.models(modelClass);\n    this.#modelObservers.set(modelClass, observer);\n    for (const model of models) {\n      observer.modelAdded(model);\n    }\n  }\n\n  unobserveModels<T extends SDKModel>(modelClass: new(arg1: Target) => SDKModel, observer: SDKModelObserver<T>): void {\n    this.#modelObservers.delete(modelClass, observer);\n  }\n\n  modelAdded(target: Target, modelClass: new(arg1: Target) => SDKModel, model: SDKModel): void {\n    for (const observer of this.#modelObservers.get(modelClass).values()) {\n      observer.modelAdded(model);\n    }\n  }\n\n  private modelRemoved(target: Target, modelClass: new(arg1: Target) => SDKModel, model: SDKModel): void {\n    for (const observer of this.#modelObservers.get(modelClass).values()) {\n      observer.modelRemoved(model);\n    }\n  }\n\n  addModelListener<Events, T extends keyof Events>(\n      modelClass: new(arg1: Target) => SDKModel<Events>, eventType: T,\n      listener: Common.EventTarget.EventListener<Events, T>, thisObject?: Object): void {\n    for (const model of this.models(modelClass)) {\n      model.addEventListener(eventType, listener, thisObject);\n    }\n    this.#modelListeners.set(eventType, {modelClass: modelClass, thisObject: thisObject, listener: listener});\n  }\n\n  removeModelListener<Events, T extends keyof Events>(\n      modelClass: new(arg1: Target) => SDKModel<Events>, eventType: T,\n      listener: Common.EventTarget.EventListener<Events, T>, thisObject?: Object): void {\n    if (!this.#modelListeners.has(eventType)) {\n      return;\n    }\n\n    for (const model of this.models(modelClass)) {\n      model.removeEventListener(eventType, listener, thisObject);\n    }\n\n    for (const info of this.#modelListeners.get(eventType)) {\n      if (info.modelClass === modelClass && info.listener === listener && info.thisObject === thisObject) {\n        this.#modelListeners.delete(eventType, info);\n      }\n    }\n  }\n\n  observeTargets(targetObserver: Observer): void {\n    if (this.#observers.has(targetObserver)) {\n      throw new Error('Observer can only be registered once');\n    }\n    for (const target of this.#targetsInternal) {\n      targetObserver.targetAdded(target);\n    }\n    this.#observers.add(targetObserver);\n  }\n\n  unobserveTargets(targetObserver: Observer): void {\n    this.#observers.delete(targetObserver);\n  }\n\n  createTarget(\n      id: Protocol.Target.TargetID|'main', name: string, type: TargetType, parentTarget: Target|null,\n      sessionId?: string, waitForDebuggerInPage?: boolean, connection?: ProtocolClient.InspectorBackend.Connection,\n      targetInfo?: Protocol.Target.TargetInfo): Target {\n    const target = new Target(\n        this, id, name, type, parentTarget, sessionId || '', this.#isSuspended, connection || null, targetInfo);\n    if (waitForDebuggerInPage) {\n      void target.pageAgent().invoke_waitForDebugger();\n    }\n    target.createModels(new Set(this.#modelObservers.keysArray()));\n    this.#targetsInternal.add(target);\n\n    // Iterate over a copy. #observers might be modified during iteration.\n    for (const observer of [...this.#observers]) {\n      observer.targetAdded(target);\n    }\n\n    for (const [modelClass, model] of target.models().entries()) {\n      this.modelAdded(target, modelClass, model);\n    }\n\n    for (const key of this.#modelListeners.keysArray()) {\n      for (const info of this.#modelListeners.get(key)) {\n        const model = target.model(info.modelClass);\n        if (model) {\n          model.addEventListener(key, info.listener, info.thisObject);\n        }\n      }\n    }\n\n    return target;\n  }\n\n  removeTarget(target: Target): void {\n    if (!this.#targetsInternal.has(target)) {\n      return;\n    }\n\n    this.#targetsInternal.delete(target);\n    for (const modelClass of target.models().keys()) {\n      const model = (target.models().get(modelClass) as SDKModel);\n      this.modelRemoved(target, modelClass, model);\n    }\n\n    // Iterate over a copy. #observers might be modified during iteration.\n    for (const observer of [...this.#observers]) {\n      observer.targetRemoved(target);\n    }\n\n    for (const key of this.#modelListeners.keysArray()) {\n      for (const info of this.#modelListeners.get(key)) {\n        const model = target.model(info.modelClass);\n        if (model) {\n          model.removeEventListener(key, info.listener, info.thisObject);\n        }\n      }\n    }\n  }\n\n  targets(): Target[] {\n    return [...this.#targetsInternal];\n  }\n\n  targetById(id: string): Target|null {\n    // TODO(dgozman): add a map #id -> #target.\n    return this.targets().find(target => target.id() === id) || null;\n  }\n\n  mainTarget(): Target|null {\n    return this.#targetsInternal.size ? this.#targetsInternal.values().next().value : null;\n  }\n\n  browserTarget(): Target|null {\n    return this.#browserTargetInternal;\n  }\n\n  async maybeAttachInitialTarget(): Promise<boolean> {\n    if (!Boolean(Root.Runtime.Runtime.queryParam('browserConnection'))) {\n      return false;\n    }\n    if (!this.#browserTargetInternal) {\n      this.#browserTargetInternal = new Target(\n          this, /* #id*/ 'main', /* #name*/ 'browser', TargetType.Browser, /* #parentTarget*/ null,\n          /* #sessionId */ '', /* suspended*/ false, /* #connection*/ null, /* targetInfo*/ undefined);\n      this.#browserTargetInternal.createModels(new Set(this.#modelObservers.keysArray()));\n    }\n    const targetId =\n        await Host.InspectorFrontendHost.InspectorFrontendHostInstance.initialTargetId() as Protocol.Target.TargetID;\n    // Do not await for Target.autoAttachRelated to return, as it goes throguh the renderer and we don't want to block early\n    // at front-end initialization if a renderer is stuck. The rest of #target discovery and auto-attach process should happen\n    // asynchronously upon Target.attachedToTarget.\n    void this.#browserTargetInternal.targetAgent().invoke_autoAttachRelated({\n      targetId,\n      waitForDebuggerOnStart: true,\n    });\n    return true;\n  }\n\n  clearAllTargetsForTest(): void {\n    this.#targetsInternal.clear();\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  AvailableTargetsChanged = 'AvailableTargetsChanged',\n  InspectedURLChanged = 'InspectedURLChanged',\n  NameChanged = 'NameChanged',\n  SuspendStateChanged = 'SuspendStateChanged',\n}\n\nexport type EventTypes = {\n  [Events.AvailableTargetsChanged]: Protocol.Target.TargetInfo[],\n  [Events.InspectedURLChanged]: Target,\n  [Events.NameChanged]: Target,\n  [Events.SuspendStateChanged]: void,\n};\n\nexport class Observer {\n  targetAdded(_target: Target): void {\n  }\n  targetRemoved(_target: Target): void {\n  }\n}\n\nexport class SDKModelObserver<T> {\n  modelAdded(_model: T): void {\n  }\n  modelRemoved(_model: T): void {\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
