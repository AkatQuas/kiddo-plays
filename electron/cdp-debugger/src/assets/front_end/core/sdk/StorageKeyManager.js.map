{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/StorageKeyManager.ts"],
  "sourcesContent": ["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type {Target} from './Target.js';\nimport {Capability} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\n\nexport class StorageKeyManager extends SDKModel<EventTypes> {\n  #mainStorageKeyInternal: string;\n  #storageKeysInternal: Set<string>;\n  constructor(target: Target) {\n    super(target);\n\n    this.#mainStorageKeyInternal = '';\n    this.#storageKeysInternal = new Set();\n  }\n\n  updateStorageKeys(storageKeys: Set<string>): void {\n    const oldStorageKeys = this.#storageKeysInternal;\n    this.#storageKeysInternal = storageKeys;\n\n    for (const storageKey of oldStorageKeys) {\n      if (!this.#storageKeysInternal.has(storageKey)) {\n        this.dispatchEventToListeners(Events.StorageKeyRemoved, storageKey);\n      }\n    }\n\n    for (const storageKey of this.#storageKeysInternal) {\n      if (!oldStorageKeys.has(storageKey)) {\n        this.dispatchEventToListeners(Events.StorageKeyAdded, storageKey);\n      }\n    }\n  }\n\n  storageKeys(): string[] {\n    return [...this.#storageKeysInternal];\n  }\n\n  mainStorageKey(): string {\n    return this.#mainStorageKeyInternal;\n  }\n\n  setMainStorageKey(storageKey: string): void {\n    this.#mainStorageKeyInternal = storageKey;\n    this.dispatchEventToListeners(Events.MainStorageKeyChanged, {\n      mainStorageKey: this.#mainStorageKeyInternal,\n    });\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  StorageKeyAdded = 'StorageKeyAdded',\n  StorageKeyRemoved = 'StorageKeyRemoved',\n  MainStorageKeyChanged = 'MainStorageKeyChanged',\n}\n\nexport interface MainStorageKeyChangedEvent {\n  mainStorageKey: string;\n}\n\nexport type EventTypes = {\n  [Events.StorageKeyAdded]: string,\n  [Events.StorageKeyRemoved]: string,\n  [Events.MainStorageKeyChanged]: MainStorageKeyChangedEvent,\n};\n\n// TODO(jarhar): this is the one of the two usages of Capability.None. Do something about it!\nSDKModel.register(StorageKeyManager, {capabilities: Capability.None, autostart: false});\n"],
  "mappings": "AAKA;AACA;AAEO,uCAAgC,SAAqB;AAAA;AAAA;AAAA,EAG1D,YAAY,QAAgB;AAC1B,UAAM;AAEN,mCAA+B;AAC/B,gCAA4B,oBAAI;AAAA;AAAA,EAGlC,kBAAkB,aAAgC;AAChD,UAAM,iBAAiB;AACvB,gCAA4B;AAE5B,eAAW,cAAc,gBAAgB;AACvC,UAAI,CAAC,0BAA0B,IAAI,aAAa;AAC9C,aAAK,yBAAyB,OAAO,mBAAmB;AAAA;AAAA;AAI5D,eAAW,cAAc,2BAA2B;AAClD,UAAI,CAAC,eAAe,IAAI,aAAa;AACnC,aAAK,yBAAyB,OAAO,iBAAiB;AAAA;AAAA;AAAA;AAAA,EAK5D,cAAwB;AACtB,WAAO,CAAC,GAAG;AAAA;AAAA,EAGb,iBAAyB;AACvB,WAAO;AAAA;AAAA,EAGT,kBAAkB,YAA0B;AAC1C,mCAA+B;AAC/B,SAAK,yBAAyB,OAAO,uBAAuB;AAAA,MAC1D,gBAAgB;AAAA;AAAA;AAAA;AAOf,WAAK,SAAL,kBAAK,YAAL;AACL,+BAAkB;AAClB,iCAAoB;AACpB,qCAAwB;AAHd;AAAA;AAiBZ,SAAS,SAAS,mBAAmB,EAAC,cAAc,WAAW,MAAM,WAAW;",
  "names": []
}
