{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/LayerTreeBase.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport type {DOMNode} from './DOMModel.js';\nimport {DOMModel} from './DOMModel.js';\nimport type {SnapshotWithRect} from './PaintProfiler.js';\nimport type {Target} from './Target.js';\n\nexport interface Layer {\n  id(): string;\n  parentId(): string|null;\n  parent(): Layer|null;\n  isRoot(): boolean;\n  children(): Layer[];\n  addChild(child: Layer): void;\n  node(): DOMNode|null;\n  nodeForSelfOrAncestor(): DOMNode|null;\n  offsetX(): number;\n  offsetY(): number;\n  width(): number;\n  height(): number;\n  transform(): number[]|null;\n  quad(): number[];\n  anchorPoint(): number[];\n  invisible(): boolean;\n  paintCount(): number;\n  lastPaintRect(): Protocol.DOM.Rect|null;\n  scrollRects(): Protocol.LayerTree.ScrollRect[];\n  stickyPositionConstraint(): StickyPositionConstraint|null;\n  gpuMemoryUsage(): number;\n  requestCompositingReasonIds(): Promise<string[]>;\n  drawsContent(): boolean;\n  snapshots(): Promise<SnapshotWithRect|null>[];\n}\n\nexport namespace Layer {\n  // TODO(crbug.com/1167717): Make this a const enum again\n  // eslint-disable-next-line rulesdir/const_enum\n  export enum ScrollRectType {\n    NonFastScrollable = 'NonFastScrollable',\n    TouchEventHandler = 'TouchEventHandler',\n    WheelEventHandler = 'WheelEventHandler',\n    RepaintsOnScroll = 'RepaintsOnScroll',\n    MainThreadScrollingReason = 'MainThreadScrollingReason',\n  }\n}\n\nexport class StickyPositionConstraint {\n  readonly #stickyBoxRectInternal: Protocol.DOM.Rect;\n  readonly #containingBlockRectInternal: Protocol.DOM.Rect;\n  readonly #nearestLayerShiftingStickyBoxInternal: Layer|null;\n  readonly #nearestLayerShiftingContainingBlockInternal: Layer|null;\n\n  constructor(layerTree: LayerTreeBase|null, constraint: Protocol.LayerTree.StickyPositionConstraint) {\n    this.#stickyBoxRectInternal = constraint.stickyBoxRect;\n    this.#containingBlockRectInternal = constraint.containingBlockRect;\n    this.#nearestLayerShiftingStickyBoxInternal = null;\n    if (layerTree && constraint.nearestLayerShiftingStickyBox) {\n      this.#nearestLayerShiftingStickyBoxInternal = layerTree.layerById(constraint.nearestLayerShiftingStickyBox);\n    }\n\n    this.#nearestLayerShiftingContainingBlockInternal = null;\n    if (layerTree && constraint.nearestLayerShiftingContainingBlock) {\n      this.#nearestLayerShiftingContainingBlockInternal =\n          layerTree.layerById(constraint.nearestLayerShiftingContainingBlock);\n    }\n  }\n\n  stickyBoxRect(): Protocol.DOM.Rect {\n    return this.#stickyBoxRectInternal;\n  }\n\n  containingBlockRect(): Protocol.DOM.Rect {\n    return this.#containingBlockRectInternal;\n  }\n\n  nearestLayerShiftingStickyBox(): Layer|null {\n    return this.#nearestLayerShiftingStickyBoxInternal;\n  }\n\n  nearestLayerShiftingContainingBlock(): Layer|null {\n    return this.#nearestLayerShiftingContainingBlockInternal;\n  }\n}\n\nexport class LayerTreeBase {\n  readonly #targetInternal: Target|null;\n  #domModel: DOMModel|null;\n  layersById: Map<string|number, Layer>;\n  #rootInternal: Layer|null;\n  #contentRootInternal: Layer|null;\n  readonly #backendNodeIdToNodeInternal: Map<Protocol.DOM.BackendNodeId, DOMNode|null>;\n  #viewportSizeInternal?: {\n    width: number,\n    height: number,\n  };\n\n  constructor(target: Target|null) {\n    this.#targetInternal = target;\n    this.#domModel = target ? target.model(DOMModel) : null;\n    this.layersById = new Map();\n    this.#rootInternal = null;\n    this.#contentRootInternal = null;\n    this.#backendNodeIdToNodeInternal = new Map();\n  }\n\n  target(): Target|null {\n    return this.#targetInternal;\n  }\n\n  root(): Layer|null {\n    return this.#rootInternal;\n  }\n\n  setRoot(root: Layer|null): void {\n    this.#rootInternal = root;\n  }\n\n  contentRoot(): Layer|null {\n    return this.#contentRootInternal;\n  }\n\n  setContentRoot(contentRoot: Layer|null): void {\n    this.#contentRootInternal = contentRoot;\n  }\n\n  forEachLayer<T>(callback: (arg0: Layer) => T, root?: Layer|null): T|boolean {\n    if (!root) {\n      root = this.root();\n      if (!root) {\n        return false;\n      }\n    }\n    return callback(root) || root.children().some(this.forEachLayer.bind(this, callback));\n  }\n\n  layerById(id: string): Layer|null {\n    return this.layersById.get(id) || null;\n  }\n\n  async resolveBackendNodeIds(requestedNodeIds: Set<Protocol.DOM.BackendNodeId>): Promise<void> {\n    if (!requestedNodeIds.size || !this.#domModel) {\n      return;\n    }\n\n    const nodesMap = await this.#domModel.pushNodesByBackendIdsToFrontend(requestedNodeIds);\n\n    if (!nodesMap) {\n      return;\n    }\n    for (const nodeId of nodesMap.keys()) {\n      this.#backendNodeIdToNodeInternal.set(nodeId, nodesMap.get(nodeId) || null);\n    }\n  }\n\n  backendNodeIdToNode(): Map<Protocol.DOM.BackendNodeId, DOMNode|null> {\n    return this.#backendNodeIdToNodeInternal;\n  }\n\n  setViewportSize(viewportSize: {\n    width: number,\n    height: number,\n  }): void {\n    this.#viewportSizeInternal = viewportSize;\n  }\n\n  viewportSize(): {\n    width: number,\n    height: number,\n  }|undefined {\n    return this.#viewportSizeInternal;\n  }\n\n  private nodeForId(id: Protocol.DOM.NodeId): DOMNode|null {\n    return this.#domModel ? this.#domModel.nodeForId(id) : null;\n  }\n}\n"],
  "mappings": "AAOA;AA+BO,WAAU;AAAV,EAAU,WAAV;AAGE,MAAK;AAAL,IAAK,oBAAL;AACL,2CAAoB;AACpB,2CAAoB;AACpB,2CAAoB;AACpB,0CAAmB;AACnB,mDAA4B;AAAA,KALlB;AAAA,GAHG;AAYV,sCAA+B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMpC,YAAY,WAA+B,YAAyD;AAClG,kCAA8B,WAAW;AACzC,wCAAoC,WAAW;AAC/C,kDAA8C;AAC9C,QAAI,aAAa,WAAW,+BAA+B;AACzD,oDAA8C,UAAU,UAAU,WAAW;AAAA;AAG/E,wDAAoD;AACpD,QAAI,aAAa,WAAW,qCAAqC;AAC/D,0DACI,UAAU,UAAU,WAAW;AAAA;AAAA;AAAA,EAIvC,gBAAmC;AACjC,WAAO;AAAA;AAAA,EAGT,sBAAyC;AACvC,WAAO;AAAA;AAAA,EAGT,gCAA4C;AAC1C,WAAO;AAAA;AAAA,EAGT,sCAAkD;AAChD,WAAO;AAAA;AAAA;AAIJ,2BAAoB;AAAA;AAAA;AAAA,EAGzB;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,YAAY,QAAqB;AAC/B,2BAAuB;AACvB,qBAAiB,SAAS,OAAO,MAAM,YAAY;AACnD,SAAK,aAAa,oBAAI;AACtB,yBAAqB;AACrB,gCAA4B;AAC5B,wCAAoC,oBAAI;AAAA;AAAA,EAG1C,SAAsB;AACpB,WAAO;AAAA;AAAA,EAGT,OAAmB;AACjB,WAAO;AAAA;AAAA,EAGT,QAAQ,MAAwB;AAC9B,yBAAqB;AAAA;AAAA,EAGvB,cAA0B;AACxB,WAAO;AAAA;AAAA,EAGT,eAAe,aAA+B;AAC5C,gCAA4B;AAAA;AAAA,EAG9B,aAAgB,UAA8B,MAA8B;AAC1E,QAAI,CAAC,MAAM;AACT,aAAO,KAAK;AACZ,UAAI,CAAC,MAAM;AACT,eAAO;AAAA;AAAA;AAGX,WAAO,SAAS,SAAS,KAAK,WAAW,KAAK,KAAK,aAAa,KAAK,MAAM;AAAA;AAAA,EAG7E,UAAU,IAAwB;AAChC,WAAO,KAAK,WAAW,IAAI,OAAO;AAAA;AAAA,QAG9B,sBAAsB,kBAAkE;AAC5F,QAAI,CAAC,iBAAiB,QAAQ,CAAC,gBAAgB;AAC7C;AAAA;AAGF,UAAM,WAAW,MAAM,eAAe,gCAAgC;AAEtE,QAAI,CAAC,UAAU;AACb;AAAA;AAEF,eAAW,UAAU,SAAS,QAAQ;AACpC,wCAAkC,IAAI,QAAQ,SAAS,IAAI,WAAW;AAAA;AAAA;AAAA,EAI1E,sBAAqE;AACnE,WAAO;AAAA;AAAA,EAGT,gBAAgB,cAGP;AACP,iCAA6B;AAAA;AAAA,EAG/B,eAGY;AACV,WAAO;AAAA;AAAA,EAGD,UAAU,IAAuC;AACvD,WAAO,iBAAiB,eAAe,UAAU,MAAM;AAAA;AAAA;",
  "names": []
}
