{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/Connections.ts"],
  "sourcesContent": ["// Copyright (c) 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport type * as Platform from '../platform/platform.js';\nimport * as Host from '../host/host.js';\nimport * as ProtocolClient from '../protocol_client/protocol_client.js';\nimport * as Root from '../root/root.js';\n\nimport {TargetManager} from './TargetManager.js';\n\nexport class MainConnection implements ProtocolClient.InspectorBackend.Connection {\n  onMessage: ((arg0: (Object|string)) => void)|null;\n  #onDisconnect: ((arg0: string) => void)|null;\n  #messageBuffer: string;\n  #messageSize: number;\n  readonly #eventListeners: Common.EventTarget.EventDescriptor[];\n  constructor() {\n    this.onMessage = null;\n    this.#onDisconnect = null;\n    this.#messageBuffer = '';\n    this.#messageSize = 0;\n    this.#eventListeners = [\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n          Host.InspectorFrontendHostAPI.Events.DispatchMessage, this.dispatchMessage, this),\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n          Host.InspectorFrontendHostAPI.Events.DispatchMessageChunk, this.dispatchMessageChunk, this),\n    ];\n  }\n\n  setOnMessage(onMessage: (arg0: (Object|string)) => void): void {\n    this.onMessage = onMessage;\n  }\n\n  setOnDisconnect(onDisconnect: (arg0: string) => void): void {\n    this.#onDisconnect = onDisconnect;\n  }\n\n  sendRawMessage(message: string): void {\n    if (this.onMessage) {\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.sendMessageToBackend(message);\n    }\n  }\n\n  private dispatchMessage(event: Common.EventTarget.EventTargetEvent<string>): void {\n    if (this.onMessage) {\n      this.onMessage.call(null, event.data);\n    }\n  }\n\n  private dispatchMessageChunk(\n      event: Common.EventTarget.EventTargetEvent<Host.InspectorFrontendHostAPI.DispatchMessageChunkEvent>): void {\n    const {messageChunk, messageSize} = event.data;\n    if (messageSize) {\n      this.#messageBuffer = '';\n      this.#messageSize = messageSize;\n    }\n    this.#messageBuffer += messageChunk;\n    if (this.#messageBuffer.length === this.#messageSize && this.onMessage) {\n      this.onMessage.call(null, this.#messageBuffer);\n      this.#messageBuffer = '';\n      this.#messageSize = 0;\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    const onDisconnect = this.#onDisconnect;\n    Common.EventTarget.removeEventListeners(this.#eventListeners);\n    this.#onDisconnect = null;\n    this.onMessage = null;\n\n    if (onDisconnect) {\n      onDisconnect.call(null, 'force disconnect');\n    }\n  }\n}\n\nexport class WebSocketConnection implements ProtocolClient.InspectorBackend.Connection {\n  #socket: WebSocket|null;\n  onMessage: ((arg0: (Object|string)) => void)|null;\n  #onDisconnect: ((arg0: string) => void)|null;\n  #onWebSocketDisconnect: (() => void)|null;\n  #connected: boolean;\n  #messages: string[];\n  constructor(url: Platform.DevToolsPath.UrlString, onWebSocketDisconnect: () => void) {\n    this.#socket = new WebSocket(url);\n    this.#socket.onerror = this.onError.bind(this);\n    this.#socket.onopen = this.onOpen.bind(this);\n    this.#socket.onmessage = (messageEvent: MessageEvent<string>): void => {\n      if (this.onMessage) {\n        this.onMessage.call(null, messageEvent.data);\n      }\n    };\n    this.#socket.onclose = this.onClose.bind(this);\n\n    this.onMessage = null;\n    this.#onDisconnect = null;\n    this.#onWebSocketDisconnect = onWebSocketDisconnect;\n    this.#connected = false;\n    this.#messages = [];\n  }\n\n  setOnMessage(onMessage: (arg0: (Object|string)) => void): void {\n    this.onMessage = onMessage;\n  }\n\n  setOnDisconnect(onDisconnect: (arg0: string) => void): void {\n    this.#onDisconnect = onDisconnect;\n  }\n\n  private onError(): void {\n    if (this.#onWebSocketDisconnect) {\n      this.#onWebSocketDisconnect.call(null);\n    }\n    if (this.#onDisconnect) {\n      // This is called if error occurred while connecting.\n      this.#onDisconnect.call(null, 'connection failed');\n    }\n    this.close();\n  }\n\n  private onOpen(): void {\n    this.#connected = true;\n    if (this.#socket) {\n      this.#socket.onerror = console.error;\n      for (const message of this.#messages) {\n        this.#socket.send(message);\n      }\n    }\n    this.#messages = [];\n  }\n\n  private onClose(): void {\n    if (this.#onWebSocketDisconnect) {\n      this.#onWebSocketDisconnect.call(null);\n    }\n    if (this.#onDisconnect) {\n      this.#onDisconnect.call(null, 'websocket closed');\n    }\n    this.close();\n  }\n\n  private close(callback?: (() => void)): void {\n    if (this.#socket) {\n      this.#socket.onerror = null;\n      this.#socket.onopen = null;\n      this.#socket.onclose = callback || null;\n      this.#socket.onmessage = null;\n      this.#socket.close();\n      this.#socket = null;\n    }\n    this.#onWebSocketDisconnect = null;\n  }\n\n  sendRawMessage(message: string): void {\n    if (this.#connected && this.#socket) {\n      this.#socket.send(message);\n    } else {\n      this.#messages.push(message);\n    }\n  }\n\n  disconnect(): Promise<void> {\n    return new Promise(fulfill => {\n      this.close(() => {\n        if (this.#onDisconnect) {\n          this.#onDisconnect.call(null, 'force disconnect');\n        }\n        fulfill();\n      });\n    });\n  }\n}\n\nexport class StubConnection implements ProtocolClient.InspectorBackend.Connection {\n  onMessage: ((arg0: (Object|string)) => void)|null;\n  #onDisconnect: ((arg0: string) => void)|null;\n  constructor() {\n    this.onMessage = null;\n    this.#onDisconnect = null;\n  }\n\n  setOnMessage(onMessage: (arg0: (Object|string)) => void): void {\n    this.onMessage = onMessage;\n  }\n\n  setOnDisconnect(onDisconnect: (arg0: string) => void): void {\n    this.#onDisconnect = onDisconnect;\n  }\n\n  sendRawMessage(message: string): void {\n    window.setTimeout(this.respondWithError.bind(this, message), 0);\n  }\n\n  private respondWithError(message: string): void {\n    const messageObject = JSON.parse(message);\n    const error = {\n      message: 'This is a stub connection, can\\'t dispatch message.',\n      code: ProtocolClient.InspectorBackend.DevToolsStubErrorCode,\n      data: messageObject,\n    };\n    if (this.onMessage) {\n      this.onMessage.call(null, {id: messageObject.id, error: error});\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.#onDisconnect) {\n      this.#onDisconnect.call(null, 'force disconnect');\n    }\n    this.#onDisconnect = null;\n    this.onMessage = null;\n  }\n}\n\nexport interface ParallelConnectionInterface extends ProtocolClient.InspectorBackend.Connection {\n  getSessionId: () => string;\n  getOnDisconnect: () => ((arg0: string) => void) | null;\n}\n\nexport class ParallelConnection implements ParallelConnectionInterface {\n  readonly #connection: ProtocolClient.InspectorBackend.Connection;\n  #sessionId: string;\n  onMessage: ((arg0: Object) => void)|null;\n  #onDisconnect: ((arg0: string) => void)|null;\n  constructor(connection: ProtocolClient.InspectorBackend.Connection, sessionId: string) {\n    this.#connection = connection;\n    this.#sessionId = sessionId;\n    this.onMessage = null;\n    this.#onDisconnect = null;\n  }\n\n  setOnMessage(onMessage: (arg0: Object) => void): void {\n    this.onMessage = onMessage;\n  }\n\n  setOnDisconnect(onDisconnect: (arg0: string) => void): void {\n    this.#onDisconnect = onDisconnect;\n  }\n\n  getOnDisconnect(): ((arg0: string) => void)|null {\n    return this.#onDisconnect;\n  }\n\n  sendRawMessage(message: string): void {\n    const messageObject = JSON.parse(message);\n    // If the message isn't for a specific session, it must be for the root session.\n    if (!messageObject.sessionId) {\n      messageObject.sessionId = this.#sessionId;\n    }\n    this.#connection.sendRawMessage(JSON.stringify(messageObject));\n  }\n\n  getSessionId(): string {\n    return this.#sessionId;\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.#onDisconnect) {\n      this.#onDisconnect.call(null, 'force disconnect');\n    }\n    this.#onDisconnect = null;\n    this.onMessage = null;\n  }\n}\n\nexport async function initMainConnection(\n    createMainTarget: () => Promise<void>, websocketConnectionLost: () => void): Promise<void> {\n  ProtocolClient.InspectorBackend.Connection.setFactory(createMainConnection.bind(null, websocketConnectionLost));\n  await createMainTarget();\n  Host.InspectorFrontendHost.InspectorFrontendHostInstance.connectionReady();\n  Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n      Host.InspectorFrontendHostAPI.Events.ReattachMainTarget, () => {\n        const target = TargetManager.instance().mainTarget();\n        if (target) {\n          const router = target.router();\n          if (router) {\n            void router.connection().disconnect();\n          }\n        }\n        void createMainTarget();\n      });\n}\n\nfunction createMainConnection(websocketConnectionLost: () => void): ProtocolClient.InspectorBackend.Connection {\n  const wsParam = Root.Runtime.Runtime.queryParam('ws');\n  const wssParam = Root.Runtime.Runtime.queryParam('wss');\n  if (wsParam || wssParam) {\n    const ws = (wsParam ? `ws://${wsParam}` : `wss://${wssParam}`) as Platform.DevToolsPath.UrlString;\n    return new WebSocketConnection(ws, websocketConnectionLost);\n  }\n  if (Host.InspectorFrontendHost.InspectorFrontendHostInstance.isHostedMode()) {\n    return new StubConnection();\n  }\n\n  return new MainConnection();\n}\n"],
  "mappings": "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",
  "names": []
}
