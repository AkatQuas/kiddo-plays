{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/CSSPropertyParser.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst globalValues = new Set<string>(['inherit', 'initial', 'unset']);\n\nconst tagRegexp = /[\\x20-\\x7E]{4}/;\nconst numRegexp = /[+-]?(?:\\d*\\.)?\\d+(?:[eE]\\d+)?/;\nconst fontVariationSettingsRegexp =\n    new RegExp(`(?:'(${tagRegexp.source})')|(?:\"(${tagRegexp.source})\")\\\\s+(${numRegexp.source})`);\n\n/**\n * Extracts information about font variation settings assuming\n * value is valid according to the spec: https://drafts.csswg.org/css-fonts-4/#font-variation-settings-def\n */\nexport function parseFontVariationSettings(value: string): {\n  tag: string,\n  value: number,\n}[] {\n  if (globalValues.has(value.trim()) || value.trim() === 'normal') {\n    return [];\n  }\n  const results = [];\n  for (const setting of splitByComma(stripComments(value))) {\n    const match = setting.match(fontVariationSettingsRegexp);\n    if (match) {\n      results.push({\n        tag: match[1] || match[2],\n        value: parseFloat(match[3]),\n      });\n    }\n  }\n  return results;\n}\n\n// \"str\" or 'str'\nconst fontFamilyRegexp = /^\"(.+)\"|'(.+)'$/;\n\n/**\n * Extracts font families assuming the value is valid according to\n * the spec: https://drafts.csswg.org/css-fonts-4/#font-family-prop\n */\nexport function parseFontFamily(value: string): string[] {\n  if (globalValues.has(value.trim())) {\n    return [];\n  }\n  const results = [];\n  for (const family of splitByComma(stripComments(value))) {\n    const match = family.match(fontFamilyRegexp);\n    if (match) {\n      // Either the 1st or 2nd group matches if the value is in quotes\n      results.push(match[1] || match[2]);\n    } else {\n      // Value without without quotes.\n      results.push(family);\n    }\n  }\n  return results;\n}\n\n/**\n * Splits a list of values by comma and trims parts\n */\nexport function splitByComma(value: string): string[] {\n  return value.split(',').map(part => part.trim());\n}\n\nexport function stripComments(value: string): string {\n  return value.replaceAll(/(\\/\\*(?:.|\\s)*?\\*\\/)/g, '');\n}\n"],
  "mappings": "AAIA,MAAM,eAAe,oBAAI,IAAY,CAAC,WAAW,WAAW;AAE5D,MAAM,YAAY;AAClB,MAAM,YAAY;AAClB,MAAM,8BACF,IAAI,OAAO,QAAQ,UAAU,kBAAkB,UAAU,iBAAiB,UAAU;AAMjF,2CAAoC,OAGvC;AACF,MAAI,aAAa,IAAI,MAAM,WAAW,MAAM,WAAW,UAAU;AAC/D,WAAO;AAAA;AAET,QAAM,UAAU;AAChB,aAAW,WAAW,aAAa,cAAc,SAAS;AACxD,UAAM,QAAQ,QAAQ,MAAM;AAC5B,QAAI,OAAO;AACT,cAAQ,KAAK;AAAA,QACX,KAAK,MAAM,MAAM,MAAM;AAAA,QACvB,OAAO,WAAW,MAAM;AAAA;AAAA;AAAA;AAI9B,SAAO;AAAA;AAIT,MAAM,mBAAmB;AAMlB,gCAAyB,OAAyB;AACvD,MAAI,aAAa,IAAI,MAAM,SAAS;AAClC,WAAO;AAAA;AAET,QAAM,UAAU;AAChB,aAAW,UAAU,aAAa,cAAc,SAAS;AACvD,UAAM,QAAQ,OAAO,MAAM;AAC3B,QAAI,OAAO;AAET,cAAQ,KAAK,MAAM,MAAM,MAAM;AAAA,WAC1B;AAEL,cAAQ,KAAK;AAAA;AAAA;AAGjB,SAAO;AAAA;AAMF,6BAAsB,OAAyB;AACpD,SAAO,MAAM,MAAM,KAAK,IAAI,UAAQ,KAAK;AAAA;AAGpC,8BAAuB,OAAuB;AACnD,SAAO,MAAM,WAAW,yBAAyB;AAAA;",
  "names": []
}
