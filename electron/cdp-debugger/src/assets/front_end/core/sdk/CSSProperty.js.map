{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/CSSProperty.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Common from '../common/common.js';\nimport * as HostModule from '../host/host.js';\nimport * as Platform from '../platform/platform.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport {cssMetadata, GridAreaRowRegex} from './CSSMetadata.js';\nimport type {Edit} from './CSSModel.js';\nimport type {CSSStyleDeclaration} from './CSSStyleDeclaration.js';\n\nexport class CSSProperty {\n  ownerStyle: CSSStyleDeclaration;\n  index: number;\n  name: string;\n  value: string;\n  important: boolean;\n  disabled: boolean;\n  parsedOk: boolean;\n  implicit: boolean;\n  text: string|null|undefined;\n  range: TextUtils.TextRange.TextRange|null;\n  #active: boolean;\n  #nameRangeInternal: TextUtils.TextRange.TextRange|null;\n  #valueRangeInternal: TextUtils.TextRange.TextRange|null;\n  #invalidString?: Common.UIString.LocalizedString;\n\n  constructor(\n      ownerStyle: CSSStyleDeclaration, index: number, name: string, value: string, important: boolean,\n      disabled: boolean, parsedOk: boolean, implicit: boolean, text?: string|null, range?: Protocol.CSS.SourceRange) {\n    this.ownerStyle = ownerStyle;\n    this.index = index;\n    this.name = name;\n    this.value = value;\n    this.important = important;\n    this.disabled = disabled;\n    this.parsedOk = parsedOk;\n    this.implicit = implicit;  // A longhand, implicitly set by missing values of shorthand.\n    this.text = text;\n    this.range = range ? TextUtils.TextRange.TextRange.fromObject(range) : null;\n    this.#active = true;\n    this.#nameRangeInternal = null;\n    this.#valueRangeInternal = null;\n  }\n\n  static parsePayload(ownerStyle: CSSStyleDeclaration, index: number, payload: Protocol.CSS.CSSProperty): CSSProperty {\n    // The following default field values are used in the payload:\n    // important: false\n    // parsedOk: true\n    // implicit: false\n    // disabled: false\n    const result = new CSSProperty(\n        ownerStyle, index, payload.name, payload.value, payload.important || false, payload.disabled || false,\n        ('parsedOk' in payload) ? Boolean(payload.parsedOk) : true, Boolean(payload.implicit), payload.text,\n        payload.range);\n    return result;\n  }\n\n  private ensureRanges(): void {\n    if (this.#nameRangeInternal && this.#valueRangeInternal) {\n      return;\n    }\n    const range = this.range;\n    const text = this.text ? new TextUtils.Text.Text(this.text) : null;\n    if (!range || !text) {\n      return;\n    }\n\n    const nameIndex = text.value().indexOf(this.name);\n    const valueIndex = text.value().lastIndexOf(this.value);\n    if (nameIndex === -1 || valueIndex === -1 || nameIndex > valueIndex) {\n      return;\n    }\n\n    const nameSourceRange = new TextUtils.TextRange.SourceRange(nameIndex, this.name.length);\n    const valueSourceRange = new TextUtils.TextRange.SourceRange(valueIndex, this.value.length);\n\n    this.#nameRangeInternal = rebase(text.toTextRange(nameSourceRange), range.startLine, range.startColumn);\n    this.#valueRangeInternal = rebase(text.toTextRange(valueSourceRange), range.startLine, range.startColumn);\n\n    function rebase(oneLineRange: TextUtils.TextRange.TextRange, lineOffset: number, columnOffset: number):\n        TextUtils.TextRange.TextRange {\n      if (oneLineRange.startLine === 0) {\n        oneLineRange.startColumn += columnOffset;\n        oneLineRange.endColumn += columnOffset;\n      }\n      oneLineRange.startLine += lineOffset;\n      oneLineRange.endLine += lineOffset;\n      return oneLineRange;\n    }\n  }\n\n  nameRange(): TextUtils.TextRange.TextRange|null {\n    this.ensureRanges();\n    return this.#nameRangeInternal;\n  }\n\n  valueRange(): TextUtils.TextRange.TextRange|null {\n    this.ensureRanges();\n    return this.#valueRangeInternal;\n  }\n\n  rebase(edit: Edit): void {\n    if (this.ownerStyle.styleSheetId !== edit.styleSheetId) {\n      return;\n    }\n    if (this.range) {\n      this.range = this.range.rebaseAfterTextEdit(edit.oldRange, edit.newRange);\n    }\n  }\n\n  setActive(active: boolean): void {\n    this.#active = active;\n  }\n\n  get propertyText(): string|null {\n    if (this.text !== undefined) {\n      return this.text;\n    }\n\n    if (this.name === '') {\n      return '';\n    }\n    return this.name + ': ' + this.value + (this.important ? ' !important' : '') + ';';\n  }\n\n  activeInStyle(): boolean {\n    return this.#active;\n  }\n\n  trimmedValueWithoutImportant(): string {\n    const important = '!important';\n    return this.value.endsWith(important) ? this.value.slice(0, -important.length).trim() : this.value.trim();\n  }\n\n  async setText(propertyText: string, majorChange: boolean, overwrite?: boolean): Promise<boolean> {\n    if (!this.ownerStyle) {\n      throw new Error('No ownerStyle for property');\n    }\n\n    if (!this.ownerStyle.styleSheetId) {\n      throw new Error('No owner style id');\n    }\n\n    if (!this.range || !this.ownerStyle.range) {\n      throw new Error('Style not editable');\n    }\n\n    if (majorChange) {\n      HostModule.userMetrics.actionTaken(HostModule.UserMetrics.Action.StyleRuleEdited);\n      if (this.name.startsWith('--')) {\n        HostModule.userMetrics.actionTaken(HostModule.UserMetrics.Action.CustomPropertyEdited);\n      }\n    }\n\n    if (overwrite && propertyText === this.propertyText) {\n      this.ownerStyle.cssModel().domModel().markUndoableState(!majorChange);\n      return true;\n    }\n\n    const range = this.range.relativeTo(this.ownerStyle.range.startLine, this.ownerStyle.range.startColumn);\n    const indentation = this.ownerStyle.cssText ?\n        this.detectIndentation(this.ownerStyle.cssText) :\n        Common.Settings.Settings.instance().moduleSetting('textEditorIndent').get();\n    const endIndentation = this.ownerStyle.cssText ? indentation.substring(0, this.ownerStyle.range.endColumn) : '';\n    const text = new TextUtils.Text.Text(this.ownerStyle.cssText || '');\n    const newStyleText = text.replaceRange(range, Platform.StringUtilities.sprintf(';%s;', propertyText));\n    const styleText = await CSSProperty.formatStyle(newStyleText, indentation, endIndentation);\n    return this.ownerStyle.setText(styleText, majorChange);\n  }\n\n  static async formatStyle(styleText: string, indentation: string, endIndentation: string): Promise<string> {\n    const doubleIndent = indentation.substring(endIndentation.length) + indentation;\n    if (indentation) {\n      indentation = '\\n' + indentation;\n    }\n    let result = '';\n    let propertyName = '';\n    let propertyText = '';\n    let insideProperty = false;\n    let needsSemi = false;\n    const tokenize = TextUtils.CodeMirrorUtils.createCssTokenizer();\n\n    await tokenize('*{' + styleText + '}', processToken);\n    if (insideProperty) {\n      result += propertyText;\n    }\n    result = result.substring(2, result.length - 1).trimEnd();\n    return result + (indentation ? '\\n' + endIndentation : '');\n\n    function processToken(token: string, tokenType: string|null): void {\n      if (!insideProperty) {\n        const disabledProperty = tokenType?.includes('comment') && isDisabledProperty(token);\n        const isPropertyStart =\n            (tokenType?.includes('string') || tokenType?.includes('meta') || tokenType?.includes('property') ||\n             tokenType?.includes('variableName'));\n        if (disabledProperty) {\n          result = result.trimEnd() + indentation + token;\n        } else if (isPropertyStart) {\n          insideProperty = true;\n          propertyText = token;\n        } else if (token !== ';' || needsSemi) {\n          result += token;\n          if (token.trim() && !(tokenType?.includes('comment'))) {\n            needsSemi = token !== ';';\n          }\n        }\n        if (token === '{' && !tokenType) {\n          needsSemi = false;\n        }\n        return;\n      }\n\n      if (token === '}' || token === ';') {\n        // While `propertyText` can generally be trimmed, doing so\n        // breaks valid CSS declarations such as `--foo:  ;` which would\n        // then produce invalid CSS of the form `--foo:;`. This\n        // implementation takes special care to restore a single\n        // whitespace token in this edge case. https://crbug.com/1071296\n        const trimmedPropertyText = propertyText.trim();\n        result = result.trimEnd() + indentation + trimmedPropertyText + (trimmedPropertyText.endsWith(':') ? ' ' : '') +\n            token;\n        needsSemi = false;\n        insideProperty = false;\n        propertyName = '';\n        return;\n      }\n      if (cssMetadata().isGridAreaDefiningProperty(propertyName)) {\n        const rowResult = GridAreaRowRegex.exec(token);\n        if (rowResult && rowResult.index === 0 && !propertyText.trimEnd().endsWith(']')) {\n          propertyText = propertyText.trimEnd() + '\\n' + doubleIndent;\n        }\n      }\n      if (!propertyName && token === ':') {\n        propertyName = propertyText;\n      }\n      propertyText += token;\n    }\n\n    function isDisabledProperty(text: string): boolean {\n      const colon = text.indexOf(':');\n      if (colon === -1) {\n        return false;\n      }\n      const propertyName = text.substring(2, colon).trim();\n      return cssMetadata().isCSSPropertyName(propertyName);\n    }\n  }\n\n  private detectIndentation(text: string): string {\n    const lines = text.split('\\n');\n    if (lines.length < 2) {\n      return '';\n    }\n    return TextUtils.TextUtils.Utils.lineIndent(lines[1]);\n  }\n\n  setValue(newValue: string, majorChange: boolean, overwrite: boolean, userCallback?: ((arg0: boolean) => void)): void {\n    const text = this.name + ': ' + newValue + (this.important ? ' !important' : '') + ';';\n    void this.setText(text, majorChange, overwrite).then(userCallback);\n  }\n\n  async setDisabled(disabled: boolean): Promise<boolean> {\n    if (!this.ownerStyle) {\n      return false;\n    }\n    if (disabled === this.disabled) {\n      return true;\n    }\n    if (!this.text) {\n      return true;\n    }\n    const propertyText = this.text.trim();\n    // Ensure that if we try to enable/disable a property that has no semicolon (which is only legal\n    // in the last position of a css rule), we add it. This ensures that if we then later try\n    // to re-enable/-disable the rule, we end up with legal syntax (if the user adds more properties\n    // after the disabled rule).\n    const appendSemicolonIfMissing = (propertyText: string): string =>\n        propertyText + (propertyText.endsWith(';') ? '' : ';');\n    let text: string;\n    if (disabled) {\n      text = '/* ' + appendSemicolonIfMissing(propertyText) + ' */';\n    } else {\n      text = appendSemicolonIfMissing(this.text.substring(2, propertyText.length - 2).trim());\n    }\n    return this.setText(text, true, true);\n  }\n\n  /**\n   * This stores the warning string when a CSS Property is improperly parsed.\n   */\n  setDisplayedStringForInvalidProperty(invalidString: Common.UIString.LocalizedString): void {\n    this.#invalidString = invalidString;\n  }\n\n  /**\n   * Retrieve the warning string for a screen reader to announce when editing the property.\n   */\n  getInvalidStringForInvalidProperty(): Common.UIString.LocalizedString|undefined {\n    return this.#invalidString;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
