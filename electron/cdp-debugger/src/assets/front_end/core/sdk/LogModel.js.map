{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/LogModel.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../host/host.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport type {Target} from './Target.js';\nimport {Capability} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\n\nexport class LogModel extends SDKModel<EventTypes> implements ProtocolProxyApi.LogDispatcher {\n  readonly #logAgent: ProtocolProxyApi.LogApi;\n  constructor(target: Target) {\n    super(target);\n    target.registerLogDispatcher(this);\n    this.#logAgent = target.logAgent();\n    void this.#logAgent.invoke_enable();\n    if (!Host.InspectorFrontendHost.isUnderTest()) {\n      void this.#logAgent.invoke_startViolationsReport({\n        config: [\n          {name: Protocol.Log.ViolationSettingName.LongTask, threshold: 200},\n          {name: Protocol.Log.ViolationSettingName.LongLayout, threshold: 30},\n          {name: Protocol.Log.ViolationSettingName.BlockedEvent, threshold: 100},\n          {name: Protocol.Log.ViolationSettingName.BlockedParser, threshold: -1},\n          {name: Protocol.Log.ViolationSettingName.Handler, threshold: 150},\n          {name: Protocol.Log.ViolationSettingName.RecurringHandler, threshold: 50},\n          {name: Protocol.Log.ViolationSettingName.DiscouragedAPIUse, threshold: -1},\n        ],\n      });\n    }\n  }\n\n  entryAdded({entry}: Protocol.Log.EntryAddedEvent): void {\n    this.dispatchEventToListeners(Events.EntryAdded, {logModel: this, entry});\n  }\n\n  requestClear(): void {\n    void this.#logAgent.invoke_clear();\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  EntryAdded = 'EntryAdded',\n}\n\nexport interface EntryAddedEvent {\n  logModel: LogModel;\n  entry: Protocol.Log.LogEntry;\n}\n\nexport type EventTypes = {\n  [Events.EntryAdded]: EntryAddedEvent,\n};\n\nSDKModel.register(LogModel, {capabilities: Capability.Log, autostart: true});\n"],
  "mappings": "AAIA;AAEA;AAGA;AACA;AAEO,8BAAuB,SAA+D;AAAA;AAAA,EAE3F,YAAY,QAAgB;AAC1B,UAAM;AACN,WAAO,sBAAsB;AAC7B,qBAAiB,OAAO;AACxB,SAAK,eAAe;AACpB,QAAI,CAAC,KAAK,sBAAsB,eAAe;AAC7C,WAAK,eAAe,6BAA6B;AAAA,QAC/C,QAAQ;AAAA,UACN,EAAC,MAAM,SAAS,IAAI,qBAAqB,UAAU,WAAW;AAAA,UAC9D,EAAC,MAAM,SAAS,IAAI,qBAAqB,YAAY,WAAW;AAAA,UAChE,EAAC,MAAM,SAAS,IAAI,qBAAqB,cAAc,WAAW;AAAA,UAClE,EAAC,MAAM,SAAS,IAAI,qBAAqB,eAAe,WAAW;AAAA,UACnE,EAAC,MAAM,SAAS,IAAI,qBAAqB,SAAS,WAAW;AAAA,UAC7D,EAAC,MAAM,SAAS,IAAI,qBAAqB,kBAAkB,WAAW;AAAA,UACtE,EAAC,MAAM,SAAS,IAAI,qBAAqB,mBAAmB,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,EAM/E,WAAW,EAAC,SAA4C;AACtD,SAAK,yBAAyB,OAAO,YAAY,EAAC,UAAU,MAAM;AAAA;AAAA,EAGpE,eAAqB;AACnB,SAAK,eAAe;AAAA;AAAA;AAMjB,WAAK,SAAL,kBAAK,YAAL;AACL,0BAAa;AADH;AAAA;AAaZ,SAAS,SAAS,UAAU,EAAC,cAAc,WAAW,KAAK,WAAW;",
  "names": []
}
