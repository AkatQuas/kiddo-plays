{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/NetworkManager.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the #name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport type * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Common from '../common/common.js';\nimport * as Host from '../host/host.js';\nimport * as i18n from '../i18n/i18n.js';\nimport * as Platform from '../platform/platform.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport {Cookie} from './Cookie.js';\nimport type {\n  BlockedCookieWithReason, ContentData, ExtraRequestInfo, ExtraResponseInfo, MIME_TYPE, NameValue, WebBundleInfo,\n  WebBundleInnerRequestInfo} from './NetworkRequest.js';\nimport {Events as NetworkRequestEvents, NetworkRequest} from './NetworkRequest.js';\nimport type {Target} from './Target.js';\nimport {Capability} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\nimport type {SDKModelObserver} from './TargetManager.js';\nimport {TargetManager} from './TargetManager.js';\nimport type {Serializer} from '../common/Settings.js';\n\nconst UIStrings = {\n  /**\n  *@description Explanation why no content is shown for WebSocket connection.\n  */\n  noContentForWebSocket: 'Content for WebSockets is currently not supported',\n  /**\n  *@description Explanation why no content is shown for redirect response.\n  */\n  noContentForRedirect: 'No content available because this request was redirected',\n  /**\n  *@description Explanation why no content is shown for preflight request.\n  */\n  noContentForPreflight: 'No content available for preflight request',\n  /**\n  *@description Text to indicate that network throttling is disabled\n  */\n  noThrottling: 'No throttling',\n  /**\n  *@description Text to indicate the network connectivity is offline\n  */\n  offline: 'Offline',\n  /**\n  *@description Text in Network Manager\n  */\n  slowG: 'Slow 3G',\n  /**\n  *@description Text in Network Manager\n  */\n  fastG: 'Fast 3G',\n  /**\n  *@description Text in Network Manager\n  *@example {https://example.com} PH1\n  */\n  requestWasBlockedByDevtoolsS: 'Request was blocked by DevTools: \"{PH1}\"',\n  /**\n  *@description Text in Network Manager\n  *@example {https://example.com} PH1\n  *@example {application} PH2\n  */\n  crossoriginReadBlockingCorb:\n      'Cross-Origin Read Blocking (CORB) blocked cross-origin response {PH1} with MIME type {PH2}. See https://www.chromestatus.com/feature/5629709824032768 for more details.',\n  /**\n  *@description Message in Network Manager\n  *@example {XHR} PH1\n  *@example {GET} PH2\n  *@example {https://example.com} PH3\n  */\n  sFailedLoadingSS: '{PH1} failed loading: {PH2} \"{PH3}\".',\n  /**\n  *@description Message in Network Manager\n  *@example {XHR} PH1\n  *@example {GET} PH2\n  *@example {https://example.com} PH3\n  */\n  sFinishedLoadingSS: '{PH1} finished loading: {PH2} \"{PH3}\".',\n};\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/NetworkManager.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nconst requestToManagerMap = new WeakMap<NetworkRequest, NetworkManager>();\n\nconst CONNECTION_TYPES = new Map([\n  ['2g', Protocol.Network.ConnectionType.Cellular2g],\n  ['3g', Protocol.Network.ConnectionType.Cellular3g],\n  ['4g', Protocol.Network.ConnectionType.Cellular4g],\n  ['bluetooth', Protocol.Network.ConnectionType.Bluetooth],\n  ['wifi', Protocol.Network.ConnectionType.Wifi],\n  ['wimax', Protocol.Network.ConnectionType.Wimax],\n]);\n\nexport class NetworkManager extends SDKModel<EventTypes> {\n  readonly dispatcher: NetworkDispatcher;\n  readonly fetchDispatcher: FetchDispatcher;\n  readonly #networkAgent: ProtocolProxyApi.NetworkApi;\n  readonly #bypassServiceWorkerSetting: Common.Settings.Setting<boolean>;\n\n  constructor(target: Target) {\n    super(target);\n    this.dispatcher = new NetworkDispatcher(this);\n    this.fetchDispatcher = new FetchDispatcher(target.fetchAgent());\n    this.#networkAgent = target.networkAgent();\n    target.registerNetworkDispatcher(this.dispatcher);\n    target.registerFetchDispatcher(this.fetchDispatcher);\n    if (Common.Settings.Settings.instance().moduleSetting('cacheDisabled').get()) {\n      void this.#networkAgent.invoke_setCacheDisabled({cacheDisabled: true});\n    }\n\n    void this.#networkAgent.invoke_enable({maxPostDataSize: MAX_EAGER_POST_REQUEST_BODY_LENGTH});\n    void this.#networkAgent.invoke_setAttachDebugStack({enabled: true});\n\n    this.#bypassServiceWorkerSetting = Common.Settings.Settings.instance().createSetting('bypassServiceWorker', false);\n    if (this.#bypassServiceWorkerSetting.get()) {\n      this.bypassServiceWorkerChanged();\n    }\n    this.#bypassServiceWorkerSetting.addChangeListener(this.bypassServiceWorkerChanged, this);\n\n    Common.Settings.Settings.instance()\n        .moduleSetting('cacheDisabled')\n        .addChangeListener(this.cacheDisabledSettingChanged, this);\n  }\n\n  static forRequest(request: NetworkRequest): NetworkManager|null {\n    return requestToManagerMap.get(request) || null;\n  }\n\n  static canReplayRequest(request: NetworkRequest): boolean {\n    return Boolean(requestToManagerMap.get(request)) && Boolean(request.backendRequestId()) && !request.isRedirect() &&\n        request.resourceType() === Common.ResourceType.resourceTypes.XHR;\n  }\n\n  static replayRequest(request: NetworkRequest): void {\n    const manager = requestToManagerMap.get(request);\n    const requestId = request.backendRequestId();\n    if (!manager || !requestId || request.isRedirect()) {\n      return;\n    }\n    void manager.#networkAgent.invoke_replayXHR({requestId});\n  }\n\n  static async searchInRequest(request: NetworkRequest, query: string, caseSensitive: boolean, isRegex: boolean):\n      Promise<TextUtils.ContentProvider.SearchMatch[]> {\n    const manager = NetworkManager.forRequest(request);\n    const requestId = request.backendRequestId();\n    if (!manager || !requestId || request.isRedirect()) {\n      return [];\n    }\n    const response = await manager.#networkAgent.invoke_searchInResponseBody(\n        {requestId, query: query, caseSensitive: caseSensitive, isRegex: isRegex});\n    return response.result || [];\n  }\n\n  static async requestContentData(request: NetworkRequest): Promise<ContentData> {\n    if (request.resourceType() === Common.ResourceType.resourceTypes.WebSocket) {\n      return {error: i18nString(UIStrings.noContentForWebSocket), content: null, encoded: false};\n    }\n    if (!request.finished) {\n      await request.once(NetworkRequestEvents.FinishedLoading);\n    }\n    if (request.isRedirect()) {\n      return {error: i18nString(UIStrings.noContentForRedirect), content: null, encoded: false};\n    }\n    if (request.isPreflightRequest()) {\n      return {error: i18nString(UIStrings.noContentForPreflight), content: null, encoded: false};\n    }\n    const manager = NetworkManager.forRequest(request);\n    if (!manager) {\n      return {error: 'No network manager for request', content: null, encoded: false};\n    }\n    const requestId = request.backendRequestId();\n    if (!requestId) {\n      return {error: 'No backend request id for request', content: null, encoded: false};\n    }\n    const response = await manager.#networkAgent.invoke_getResponseBody({requestId});\n    const error = response.getError() || null;\n    return {error: error, content: error ? null : response.body, encoded: response.base64Encoded};\n  }\n\n  static async requestPostData(request: NetworkRequest): Promise<string|null> {\n    const manager = NetworkManager.forRequest(request);\n    if (!manager) {\n      console.error('No network manager for request');\n      return null;\n    }\n    const requestId = request.backendRequestId();\n    if (!requestId) {\n      console.error('No backend request id for request');\n      return null;\n    }\n    try {\n      const {postData} = await manager.#networkAgent.invoke_getRequestPostData({requestId});\n      return postData;\n    } catch (e) {\n      return e.message;\n    }\n  }\n\n  static connectionType(conditions: Conditions): Protocol.Network.ConnectionType {\n    if (!conditions.download && !conditions.upload) {\n      return Protocol.Network.ConnectionType.None;\n    }\n    const title =\n        typeof conditions.title === 'function' ? conditions.title().toLowerCase() : conditions.title.toLowerCase();\n    for (const [name, protocolType] of CONNECTION_TYPES) {\n      if (title.includes(name)) {\n        return protocolType;\n      }\n    }\n    return Protocol.Network.ConnectionType.Other;\n  }\n\n  static lowercaseHeaders(headers: Protocol.Network.Headers): Protocol.Network.Headers {\n    const newHeaders: Protocol.Network.Headers = {};\n    for (const headerName in headers) {\n      newHeaders[headerName.toLowerCase()] = headers[headerName];\n    }\n    return newHeaders;\n  }\n\n  requestForURL(url: Platform.DevToolsPath.UrlString): NetworkRequest|null {\n    return this.dispatcher.requestForURL(url);\n  }\n\n  requestforId(id: string): NetworkRequest|null {\n    return this.dispatcher.requestForId(id);\n  }\n\n  private cacheDisabledSettingChanged({data: enabled}: Common.EventTarget.EventTargetEvent<boolean>): void {\n    void this.#networkAgent.invoke_setCacheDisabled({cacheDisabled: enabled});\n  }\n\n  dispose(): void {\n    Common.Settings.Settings.instance()\n        .moduleSetting('cacheDisabled')\n        .removeChangeListener(this.cacheDisabledSettingChanged, this);\n  }\n\n  private bypassServiceWorkerChanged(): void {\n    void this.#networkAgent.invoke_setBypassServiceWorker({bypass: this.#bypassServiceWorkerSetting.get()});\n  }\n\n  async getSecurityIsolationStatus(frameId: Protocol.Page.FrameId|\n                                   null): Promise<Protocol.Network.SecurityIsolationStatus|null> {\n    const result = await this.#networkAgent.invoke_getSecurityIsolationStatus({frameId: frameId ?? undefined});\n    if (result.getError()) {\n      return null;\n    }\n    return result.status;\n  }\n\n  async enableReportingApi(enable: boolean = true): Promise<Promise<Protocol.ProtocolResponseWithError>> {\n    return this.#networkAgent.invoke_enableReportingApi({enable});\n  }\n\n  async loadNetworkResource(\n      frameId: Protocol.Page.FrameId|null, url: Platform.DevToolsPath.UrlString,\n      options: Protocol.Network.LoadNetworkResourceOptions): Promise<Protocol.Network.LoadNetworkResourcePageResult> {\n    const result = await this.#networkAgent.invoke_loadNetworkResource({frameId: frameId ?? undefined, url, options});\n    if (result.getError()) {\n      throw new Error(result.getError());\n    }\n    return result.resource;\n  }\n\n  clearRequests(): void {\n    this.dispatcher.clearRequests();\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  RequestStarted = 'RequestStarted',\n  RequestUpdated = 'RequestUpdated',\n  RequestFinished = 'RequestFinished',\n  RequestUpdateDropped = 'RequestUpdateDropped',\n  ResponseReceived = 'ResponseReceived',\n  MessageGenerated = 'MessageGenerated',\n  RequestRedirected = 'RequestRedirected',\n  LoadingFinished = 'LoadingFinished',\n  ReportingApiReportAdded = 'ReportingApiReportAdded',\n  ReportingApiReportUpdated = 'ReportingApiReportUpdated',\n  ReportingApiEndpointsChangedForOrigin = 'ReportingApiEndpointsChangedForOrigin',\n}\n\nexport interface RequestStartedEvent {\n  request: NetworkRequest;\n  originalRequest: Protocol.Network.Request|null;\n}\n\nexport interface ResponseReceivedEvent {\n  request: NetworkRequest;\n  response: Protocol.Network.Response;\n}\n\nexport interface MessageGeneratedEvent {\n  message: Common.UIString.LocalizedString;\n  requestId: string;\n  warning: boolean;\n}\n\nexport type EventTypes = {\n  [Events.RequestStarted]: RequestStartedEvent,\n  [Events.RequestUpdated]: NetworkRequest,\n  [Events.RequestFinished]: NetworkRequest,\n  [Events.RequestUpdateDropped]: RequestUpdateDroppedEventData,\n  [Events.ResponseReceived]: ResponseReceivedEvent,\n  [Events.MessageGenerated]: MessageGeneratedEvent,\n  [Events.RequestRedirected]: NetworkRequest,\n  [Events.LoadingFinished]: NetworkRequest,\n  [Events.ReportingApiReportAdded]: Protocol.Network.ReportingApiReport,\n  [Events.ReportingApiReportUpdated]: Protocol.Network.ReportingApiReport,\n  [Events.ReportingApiEndpointsChangedForOrigin]: Protocol.Network.ReportingApiEndpointsChangedForOriginEvent,\n};\n\nexport const NoThrottlingConditions: Conditions = {\n  title: i18nLazyString(UIStrings.noThrottling),\n  i18nTitleKey: UIStrings.noThrottling,\n  download: -1,\n  upload: -1,\n  latency: 0,\n};\n\nexport const OfflineConditions: Conditions = {\n  title: i18nLazyString(UIStrings.offline),\n  i18nTitleKey: UIStrings.offline,\n  download: 0,\n  upload: 0,\n  latency: 0,\n};\n\nexport const Slow3GConditions: Conditions = {\n  title: i18nLazyString(UIStrings.slowG),\n  i18nTitleKey: UIStrings.slowG,\n  download: 500 * 1000 / 8 * .8,\n  upload: 500 * 1000 / 8 * .8,\n  latency: 400 * 5,\n};\n\nexport const Fast3GConditions: Conditions = {\n  title: i18nLazyString(UIStrings.fastG),\n  i18nTitleKey: UIStrings.fastG,\n  download: 1.6 * 1000 * 1000 / 8 * .9,\n  upload: 750 * 1000 / 8 * .9,\n  latency: 150 * 3.75,\n};\n\nconst MAX_EAGER_POST_REQUEST_BODY_LENGTH = 64 * 1024;  // bytes\n\nexport class FetchDispatcher implements ProtocolProxyApi.FetchDispatcher {\n  readonly #fetchAgent: ProtocolProxyApi.FetchApi;\n\n  constructor(agent: ProtocolProxyApi.FetchApi) {\n    this.#fetchAgent = agent;\n  }\n\n  requestPaused({requestId, request, resourceType, responseStatusCode, responseHeaders}:\n                    Protocol.Fetch.RequestPausedEvent): void {\n    void MultitargetNetworkManager.instance().requestIntercepted(new InterceptedRequest(\n        this.#fetchAgent, request, resourceType, requestId, responseStatusCode, responseHeaders));\n  }\n\n  authRequired({}: Protocol.Fetch.AuthRequiredEvent): void {\n  }\n}\n\nexport class NetworkDispatcher implements ProtocolProxyApi.NetworkDispatcher {\n  readonly #manager: NetworkManager;\n  #requestsById: Map<string, NetworkRequest>;\n  #requestsByURL: Map<Platform.DevToolsPath.UrlString, NetworkRequest>;\n  #requestIdToExtraInfoBuilder: Map<string, ExtraInfoBuilder>;\n  readonly #requestIdToTrustTokenEvent: Map<string, Protocol.Network.TrustTokenOperationDoneEvent>;\n  constructor(manager: NetworkManager) {\n    this.#manager = manager;\n    this.#requestsById = new Map();\n    this.#requestsByURL = new Map();\n    this.#requestIdToExtraInfoBuilder = new Map();\n    /**\n     * In case of an early abort or a cache hit, the Trust Token done event is\n     * reported before the request itself is created in `requestWillBeSent`.\n     * This causes the event to be lost as no `NetworkRequest` instance has been\n     * created yet.\n     * This map caches the events temporarliy and populates the NetworKRequest\n     * once it is created in `requestWillBeSent`.\n     */\n    this.#requestIdToTrustTokenEvent = new Map();\n\n    MultitargetNetworkManager.instance().addEventListener(\n        MultitargetNetworkManager.Events.RequestIntercepted, this.#markAsIntercepted.bind(this));\n  }\n\n  #markAsIntercepted(event: Common.EventTarget.EventTargetEvent<Platform.DevToolsPath.UrlString>): void {\n    const request = this.requestForURL(event.data);\n    if (request) {\n      request.setWasIntercepted(true);\n    }\n  }\n\n  private headersMapToHeadersArray(headersMap: Protocol.Network.Headers): NameValue[] {\n    const result = [];\n    for (const name in headersMap) {\n      const values = headersMap[name].split('\\n');\n      for (let i = 0; i < values.length; ++i) {\n        result.push({name: name, value: values[i]});\n      }\n    }\n    return result;\n  }\n\n  private updateNetworkRequestWithRequest(networkRequest: NetworkRequest, request: Protocol.Network.Request): void {\n    networkRequest.requestMethod = request.method;\n    networkRequest.setRequestHeaders(this.headersMapToHeadersArray(request.headers));\n    networkRequest.setRequestFormData(Boolean(request.hasPostData), request.postData || null);\n    networkRequest.setInitialPriority(request.initialPriority);\n    networkRequest.mixedContentType = request.mixedContentType || Protocol.Security.MixedContentType.None;\n    networkRequest.setReferrerPolicy(request.referrerPolicy);\n    networkRequest.setIsSameSite(request.isSameSite || false);\n  }\n\n  private updateNetworkRequestWithResponse(networkRequest: NetworkRequest, response: Protocol.Network.Response): void {\n    if (response.url && networkRequest.url() !== response.url) {\n      networkRequest.setUrl(response.url as Platform.DevToolsPath.UrlString);\n    }\n    networkRequest.mimeType = (response.mimeType as MIME_TYPE);\n    if (!networkRequest.statusCode) {\n      networkRequest.statusCode = response.status;\n    }\n    if (!networkRequest.statusText) {\n      networkRequest.statusText = response.statusText;\n    }\n    if (!networkRequest.hasExtraResponseInfo() || networkRequest.wasIntercepted()) {\n      networkRequest.responseHeaders = this.headersMapToHeadersArray(response.headers);\n    }\n\n    if (response.encodedDataLength >= 0) {\n      networkRequest.setTransferSize(response.encodedDataLength);\n    }\n\n    if (response.requestHeaders && !networkRequest.hasExtraRequestInfo()) {\n      // TODO(http://crbug.com/1004979): Stop using response.requestHeaders and\n      //   response.requestHeadersText once shared workers\n      //   emit Network.*ExtraInfo events for their network #requests.\n      networkRequest.setRequestHeaders(this.headersMapToHeadersArray(response.requestHeaders));\n      networkRequest.setRequestHeadersText(response.requestHeadersText || '');\n    }\n\n    networkRequest.connectionReused = response.connectionReused;\n    networkRequest.connectionId = String(response.connectionId);\n    if (response.remoteIPAddress) {\n      networkRequest.setRemoteAddress(response.remoteIPAddress, response.remotePort || -1);\n    }\n\n    if (response.fromServiceWorker) {\n      networkRequest.fetchedViaServiceWorker = true;\n    }\n\n    if (response.fromDiskCache) {\n      networkRequest.setFromDiskCache();\n    }\n\n    if (response.fromPrefetchCache) {\n      networkRequest.setFromPrefetchCache();\n    }\n\n    if (response.cacheStorageCacheName) {\n      networkRequest.setResponseCacheStorageCacheName(response.cacheStorageCacheName);\n    }\n\n    if (response.responseTime) {\n      networkRequest.setResponseRetrievalTime(new Date(response.responseTime));\n    }\n\n    networkRequest.timing = response.timing;\n\n    networkRequest.protocol = response.protocol || '';\n\n    if (response.serviceWorkerResponseSource) {\n      networkRequest.setServiceWorkerResponseSource(response.serviceWorkerResponseSource);\n    }\n\n    networkRequest.setSecurityState(response.securityState);\n\n    if (response.securityDetails) {\n      networkRequest.setSecurityDetails(response.securityDetails);\n    }\n\n    const newResourceType = Common.ResourceType.ResourceType.fromMimeTypeOverride(networkRequest.mimeType);\n    if (newResourceType) {\n      networkRequest.setResourceType(newResourceType);\n    }\n  }\n\n  requestForId(id: string): NetworkRequest|null {\n    return this.#requestsById.get(id) || null;\n  }\n\n  requestForURL(url: Platform.DevToolsPath.UrlString): NetworkRequest|null {\n    return this.#requestsByURL.get(url) || null;\n  }\n\n  resourceChangedPriority({requestId, newPriority}: Protocol.Network.ResourceChangedPriorityEvent): void {\n    const networkRequest = this.#requestsById.get(requestId);\n    if (networkRequest) {\n      networkRequest.setPriority(newPriority);\n    }\n  }\n\n  signedExchangeReceived({requestId, info}: Protocol.Network.SignedExchangeReceivedEvent): void {\n    // While loading a signed exchange, a signedExchangeReceived event is sent\n    // between two requestWillBeSent events.\n    // 1. The first requestWillBeSent is sent while starting the navigation (or\n    //    prefetching).\n    // 2. This signedExchangeReceived event is sent when the browser detects the\n    //    signed exchange.\n    // 3. The second requestWillBeSent is sent with the generated redirect\n    //    response and a new redirected request which URL is the inner request\n    //    URL of the signed exchange.\n    let networkRequest = this.#requestsById.get(requestId);\n    // |requestId| is available only for navigation #requests. If the request was\n    // sent from a renderer process for prefetching, it is not available. In the\n    // case, need to fallback to look for the URL.\n    // TODO(crbug/841076): Sends the request ID of prefetching to the browser\n    // process and DevTools to find the matching request.\n    if (!networkRequest) {\n      networkRequest = this.#requestsByURL.get(info.outerResponse.url as Platform.DevToolsPath.UrlString);\n      if (!networkRequest) {\n        return;\n      }\n    }\n    networkRequest.setSignedExchangeInfo(info);\n    networkRequest.setResourceType(Common.ResourceType.resourceTypes.SignedExchange);\n\n    this.updateNetworkRequestWithResponse(networkRequest, info.outerResponse);\n    this.updateNetworkRequest(networkRequest);\n    this.#manager.dispatchEventToListeners(\n        Events.ResponseReceived, {request: networkRequest, response: info.outerResponse});\n  }\n\n  requestWillBeSent(\n      {requestId, loaderId, documentURL, request, timestamp, wallTime, initiator, redirectResponse, type, frameId}:\n          Protocol.Network.RequestWillBeSentEvent): void {\n    let networkRequest = this.#requestsById.get(requestId);\n    if (networkRequest) {\n      // FIXME: move this check to the backend.\n      if (!redirectResponse) {\n        return;\n      }\n      // If signedExchangeReceived event has already been sent for the request,\n      // ignores the internally generated |redirectResponse|. The\n      // |outerResponse| of SignedExchangeInfo was set to |networkRequest| in\n      // signedExchangeReceived().\n      if (!networkRequest.signedExchangeInfo()) {\n        this.responseReceived({\n          requestId,\n          loaderId,\n          timestamp,\n          type: type || Protocol.Network.ResourceType.Other,\n          response: redirectResponse,\n          hasExtraInfo: false,\n          frameId,\n        });\n      }\n      networkRequest = this.appendRedirect(requestId, timestamp, request.url as Platform.DevToolsPath.UrlString);\n      this.#manager.dispatchEventToListeners(Events.RequestRedirected, networkRequest);\n    } else {\n      networkRequest = NetworkRequest.create(\n          requestId, request.url as Platform.DevToolsPath.UrlString, documentURL as Platform.DevToolsPath.UrlString,\n          frameId ?? null, loaderId, initiator);\n      requestToManagerMap.set(networkRequest, this.#manager);\n    }\n    networkRequest.hasNetworkData = true;\n    this.updateNetworkRequestWithRequest(networkRequest, request);\n    networkRequest.setIssueTime(timestamp, wallTime);\n    networkRequest.setResourceType(\n        type ? Common.ResourceType.resourceTypes[type] : Common.ResourceType.resourceTypes.Other);\n    if (request.trustTokenParams) {\n      networkRequest.setTrustTokenParams(request.trustTokenParams);\n    }\n    const maybeTrustTokenEvent = this.#requestIdToTrustTokenEvent.get(requestId);\n    if (maybeTrustTokenEvent) {\n      networkRequest.setTrustTokenOperationDoneEvent(maybeTrustTokenEvent);\n      this.#requestIdToTrustTokenEvent.delete(requestId);\n    }\n\n    this.getExtraInfoBuilder(requestId).addRequest(networkRequest);\n\n    this.startNetworkRequest(networkRequest, request);\n  }\n\n  requestServedFromCache({requestId}: Protocol.Network.RequestServedFromCacheEvent): void {\n    const networkRequest = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.setFromMemoryCache();\n  }\n\n  responseReceived({requestId, loaderId, timestamp, type, response, frameId}: Protocol.Network.ResponseReceivedEvent):\n      void {\n    const networkRequest = this.#requestsById.get(requestId);\n    const lowercaseHeaders = NetworkManager.lowercaseHeaders(response.headers);\n    if (!networkRequest) {\n      const lastModifiedHeader = lowercaseHeaders['last-modified'];\n      // We missed the requestWillBeSent.\n      const eventData: RequestUpdateDroppedEventData = {\n        url: response.url as Platform.DevToolsPath.UrlString,\n        frameId: frameId ?? null,\n        loaderId: loaderId,\n        resourceType: type,\n        mimeType: response.mimeType,\n        lastModified: lastModifiedHeader ? new Date(lastModifiedHeader) : null,\n      };\n      this.#manager.dispatchEventToListeners(Events.RequestUpdateDropped, eventData);\n      return;\n    }\n\n    networkRequest.responseReceivedTime = timestamp;\n    networkRequest.setResourceType(Common.ResourceType.resourceTypes[type]);\n\n    this.updateNetworkRequestWithResponse(networkRequest, response);\n\n    this.updateNetworkRequest(networkRequest);\n    this.#manager.dispatchEventToListeners(Events.ResponseReceived, {request: networkRequest, response});\n  }\n\n  dataReceived({requestId, timestamp, dataLength, encodedDataLength}: Protocol.Network.DataReceivedEvent): void {\n    let networkRequest: NetworkRequest|null|undefined = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      networkRequest = this.maybeAdoptMainResourceRequest(requestId);\n    }\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.resourceSize += dataLength;\n    if (encodedDataLength !== -1) {\n      networkRequest.increaseTransferSize(encodedDataLength);\n    }\n    networkRequest.endTime = timestamp;\n\n    this.updateNetworkRequest(networkRequest);\n  }\n\n  loadingFinished({requestId, timestamp: finishTime, encodedDataLength, shouldReportCorbBlocking}:\n                      Protocol.Network.LoadingFinishedEvent): void {\n    let networkRequest: NetworkRequest|null|undefined = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      networkRequest = this.maybeAdoptMainResourceRequest(requestId);\n    }\n    if (!networkRequest) {\n      return;\n    }\n    this.getExtraInfoBuilder(requestId).finished();\n    this.finishNetworkRequest(networkRequest, finishTime, encodedDataLength, shouldReportCorbBlocking);\n    this.#manager.dispatchEventToListeners(Events.LoadingFinished, networkRequest);\n  }\n\n  loadingFailed({\n    requestId,\n    timestamp: time,\n    type: resourceType,\n    errorText: localizedDescription,\n    canceled,\n    blockedReason,\n    corsErrorStatus,\n  }: Protocol.Network.LoadingFailedEvent): void {\n    const networkRequest = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.failed = true;\n    networkRequest.setResourceType(Common.ResourceType.resourceTypes[resourceType]);\n    networkRequest.canceled = Boolean(canceled);\n    if (blockedReason) {\n      networkRequest.setBlockedReason(blockedReason);\n      if (blockedReason === Protocol.Network.BlockedReason.Inspector) {\n        const message = i18nString(UIStrings.requestWasBlockedByDevtoolsS, {PH1: networkRequest.url()});\n        this.#manager.dispatchEventToListeners(\n            Events.MessageGenerated, {message: message, requestId: requestId, warning: true});\n      }\n    }\n    if (corsErrorStatus) {\n      networkRequest.setCorsErrorStatus(corsErrorStatus);\n    }\n    networkRequest.localizedFailDescription = localizedDescription;\n    this.getExtraInfoBuilder(requestId).finished();\n    this.finishNetworkRequest(networkRequest, time, -1);\n  }\n\n  webSocketCreated({requestId, url: requestURL, initiator}: Protocol.Network.WebSocketCreatedEvent): void {\n    const networkRequest =\n        NetworkRequest.createForWebSocket(requestId, requestURL as Platform.DevToolsPath.UrlString, initiator);\n    requestToManagerMap.set(networkRequest, this.#manager);\n    networkRequest.setResourceType(Common.ResourceType.resourceTypes.WebSocket);\n    this.startNetworkRequest(networkRequest, null);\n  }\n\n  webSocketWillSendHandshakeRequest({requestId, timestamp: time, wallTime, request}:\n                                        Protocol.Network.WebSocketWillSendHandshakeRequestEvent): void {\n    const networkRequest = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.requestMethod = 'GET';\n    networkRequest.setRequestHeaders(this.headersMapToHeadersArray(request.headers));\n    networkRequest.setIssueTime(time, wallTime);\n\n    this.updateNetworkRequest(networkRequest);\n  }\n\n  webSocketHandshakeResponseReceived({requestId, timestamp: time, response}:\n                                         Protocol.Network.WebSocketHandshakeResponseReceivedEvent): void {\n    const networkRequest = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.statusCode = response.status;\n    networkRequest.statusText = response.statusText;\n    networkRequest.responseHeaders = this.headersMapToHeadersArray(response.headers);\n    networkRequest.responseHeadersText = response.headersText || '';\n    if (response.requestHeaders) {\n      networkRequest.setRequestHeaders(this.headersMapToHeadersArray(response.requestHeaders));\n    }\n    if (response.requestHeadersText) {\n      networkRequest.setRequestHeadersText(response.requestHeadersText);\n    }\n    networkRequest.responseReceivedTime = time;\n    networkRequest.protocol = 'websocket';\n\n    this.updateNetworkRequest(networkRequest);\n  }\n\n  webSocketFrameReceived({requestId, timestamp: time, response}: Protocol.Network.WebSocketFrameReceivedEvent): void {\n    const networkRequest = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.addProtocolFrame(response, time, false);\n    networkRequest.responseReceivedTime = time;\n\n    this.updateNetworkRequest(networkRequest);\n  }\n\n  webSocketFrameSent({requestId, timestamp: time, response}: Protocol.Network.WebSocketFrameSentEvent): void {\n    const networkRequest = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.addProtocolFrame(response, time, true);\n    networkRequest.responseReceivedTime = time;\n\n    this.updateNetworkRequest(networkRequest);\n  }\n\n  webSocketFrameError({requestId, timestamp: time, errorMessage}: Protocol.Network.WebSocketFrameErrorEvent): void {\n    const networkRequest = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.addProtocolFrameError(errorMessage, time);\n    networkRequest.responseReceivedTime = time;\n\n    this.updateNetworkRequest(networkRequest);\n  }\n\n  webSocketClosed({requestId, timestamp: time}: Protocol.Network.WebSocketClosedEvent): void {\n    const networkRequest = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n    this.finishNetworkRequest(networkRequest, time, -1);\n  }\n\n  eventSourceMessageReceived({requestId, timestamp: time, eventName, eventId, data}:\n                                 Protocol.Network.EventSourceMessageReceivedEvent): void {\n    const networkRequest = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n    networkRequest.addEventSourceMessage(time, eventName, eventId, data);\n  }\n\n  requestIntercepted({}: Protocol.Network.RequestInterceptedEvent): void {\n  }\n\n  requestWillBeSentExtraInfo({requestId, associatedCookies, headers, clientSecurityState, connectTiming}:\n                                 Protocol.Network.RequestWillBeSentExtraInfoEvent): void {\n    const blockedRequestCookies: BlockedCookieWithReason[] = [];\n    const includedRequestCookies = [];\n    for (const {blockedReasons, cookie} of associatedCookies) {\n      if (blockedReasons.length === 0) {\n        includedRequestCookies.push(Cookie.fromProtocolCookie(cookie));\n      } else {\n        blockedRequestCookies.push({blockedReasons, cookie: Cookie.fromProtocolCookie(cookie)});\n      }\n    }\n    const extraRequestInfo = {\n      blockedRequestCookies,\n      includedRequestCookies,\n      requestHeaders: this.headersMapToHeadersArray(headers),\n      clientSecurityState: clientSecurityState,\n      connectTiming,\n    };\n    this.getExtraInfoBuilder(requestId).addRequestExtraInfo(extraRequestInfo);\n  }\n\n  responseReceivedExtraInfo({requestId, blockedCookies, headers, headersText, resourceIPAddressSpace, statusCode}:\n                                Protocol.Network.ResponseReceivedExtraInfoEvent): void {\n    const extraResponseInfo: ExtraResponseInfo = {\n      blockedResponseCookies: blockedCookies.map(blockedCookie => {\n        return {\n          blockedReasons: blockedCookie.blockedReasons,\n          cookieLine: blockedCookie.cookieLine,\n          cookie: blockedCookie.cookie ? Cookie.fromProtocolCookie(blockedCookie.cookie) : null,\n        };\n      }),\n      responseHeaders: this.headersMapToHeadersArray(headers),\n      responseHeadersText: headersText,\n      resourceIPAddressSpace,\n      statusCode,\n    };\n    this.getExtraInfoBuilder(requestId).addResponseExtraInfo(extraResponseInfo);\n  }\n\n  private getExtraInfoBuilder(requestId: string): ExtraInfoBuilder {\n    let builder: ExtraInfoBuilder;\n    if (!this.#requestIdToExtraInfoBuilder.has(requestId)) {\n      builder = new ExtraInfoBuilder();\n      this.#requestIdToExtraInfoBuilder.set(requestId, builder);\n    } else {\n      builder = (this.#requestIdToExtraInfoBuilder.get(requestId) as ExtraInfoBuilder);\n    }\n    return builder;\n  }\n\n  private appendRedirect(\n      requestId: Protocol.Network.RequestId, time: number,\n      redirectURL: Platform.DevToolsPath.UrlString): NetworkRequest {\n    const originalNetworkRequest = this.#requestsById.get(requestId);\n    if (!originalNetworkRequest) {\n      throw new Error(`Could not find original network request for ${requestId}`);\n    }\n    let redirectCount = 0;\n    for (let redirect = originalNetworkRequest.redirectSource(); redirect; redirect = redirect.redirectSource()) {\n      redirectCount++;\n    }\n\n    originalNetworkRequest.markAsRedirect(redirectCount);\n    this.finishNetworkRequest(originalNetworkRequest, time, -1);\n    const newNetworkRequest = NetworkRequest.create(\n        requestId, redirectURL, originalNetworkRequest.documentURL, originalNetworkRequest.frameId,\n        originalNetworkRequest.loaderId, originalNetworkRequest.initiator());\n    requestToManagerMap.set(newNetworkRequest, this.#manager);\n    newNetworkRequest.setRedirectSource(originalNetworkRequest);\n    originalNetworkRequest.setRedirectDestination(newNetworkRequest);\n    return newNetworkRequest;\n  }\n\n  private maybeAdoptMainResourceRequest(requestId: string): NetworkRequest|null {\n    const request = MultitargetNetworkManager.instance().inflightMainResourceRequests.get(requestId);\n    if (!request) {\n      return null;\n    }\n    const oldDispatcher = (NetworkManager.forRequest(request) as NetworkManager).dispatcher;\n    oldDispatcher.#requestsById.delete(requestId);\n    oldDispatcher.#requestsByURL.delete(request.url());\n    this.#requestsById.set(requestId, request);\n    this.#requestsByURL.set(request.url(), request);\n    requestToManagerMap.set(request, this.#manager);\n    return request;\n  }\n\n  private startNetworkRequest(networkRequest: NetworkRequest, originalRequest: Protocol.Network.Request|null): void {\n    this.#requestsById.set(networkRequest.requestId(), networkRequest);\n    this.#requestsByURL.set(networkRequest.url(), networkRequest);\n    // The following relies on the fact that loaderIds and requestIds are\n    // globally unique and that the main request has them equal.\n    if (networkRequest.loaderId === networkRequest.requestId()) {\n      MultitargetNetworkManager.instance().inflightMainResourceRequests.set(networkRequest.requestId(), networkRequest);\n    }\n\n    this.#manager.dispatchEventToListeners(Events.RequestStarted, {request: networkRequest, originalRequest});\n  }\n\n  private updateNetworkRequest(networkRequest: NetworkRequest): void {\n    this.#manager.dispatchEventToListeners(Events.RequestUpdated, networkRequest);\n  }\n\n  private finishNetworkRequest(\n      networkRequest: NetworkRequest, finishTime: number, encodedDataLength: number,\n      shouldReportCorbBlocking?: boolean): void {\n    networkRequest.endTime = finishTime;\n    networkRequest.finished = true;\n    if (encodedDataLength >= 0) {\n      const redirectSource = networkRequest.redirectSource();\n      if (redirectSource && redirectSource.signedExchangeInfo()) {\n        networkRequest.setTransferSize(0);\n        redirectSource.setTransferSize(encodedDataLength);\n        this.updateNetworkRequest(redirectSource);\n      } else {\n        networkRequest.setTransferSize(encodedDataLength);\n      }\n    }\n    this.#manager.dispatchEventToListeners(Events.RequestFinished, networkRequest);\n    MultitargetNetworkManager.instance().inflightMainResourceRequests.delete(networkRequest.requestId());\n\n    if (shouldReportCorbBlocking) {\n      const message =\n          i18nString(UIStrings.crossoriginReadBlockingCorb, {PH1: networkRequest.url(), PH2: networkRequest.mimeType});\n      this.#manager.dispatchEventToListeners(\n          Events.MessageGenerated, {message: message, requestId: networkRequest.requestId(), warning: true});\n    }\n\n    if (Common.Settings.Settings.instance().moduleSetting('monitoringXHREnabled').get() &&\n        networkRequest.resourceType().category() === Common.ResourceType.resourceCategories.XHR) {\n      let message;\n      const failedToLoad = networkRequest.failed || networkRequest.hasErrorStatusCode();\n      if (failedToLoad) {\n        message = i18nString(\n            UIStrings.sFailedLoadingSS,\n            {PH1: networkRequest.resourceType().title(), PH2: networkRequest.requestMethod, PH3: networkRequest.url()});\n      } else {\n        message = i18nString(\n            UIStrings.sFinishedLoadingSS,\n            {PH1: networkRequest.resourceType().title(), PH2: networkRequest.requestMethod, PH3: networkRequest.url()});\n      }\n\n      this.#manager.dispatchEventToListeners(\n          Events.MessageGenerated, {message: message, requestId: networkRequest.requestId(), warning: false});\n    }\n  }\n\n  clearRequests(): void {\n    this.#requestsById.clear();\n    this.#requestsByURL.clear();\n    this.#requestIdToExtraInfoBuilder.clear();\n  }\n\n  webTransportCreated({transportId, url: requestURL, timestamp: time, initiator}:\n                          Protocol.Network.WebTransportCreatedEvent): void {\n    const networkRequest =\n        NetworkRequest.createForWebSocket(transportId, requestURL as Platform.DevToolsPath.UrlString, initiator);\n    networkRequest.hasNetworkData = true;\n    requestToManagerMap.set(networkRequest, this.#manager);\n    networkRequest.setResourceType(Common.ResourceType.resourceTypes.WebTransport);\n    networkRequest.setIssueTime(time, 0);\n    // TODO(yoichio): Add appropreate events to address abort cases.\n    this.startNetworkRequest(networkRequest, null);\n  }\n\n  webTransportConnectionEstablished({transportId, timestamp: time}:\n                                        Protocol.Network.WebTransportConnectionEstablishedEvent): void {\n    const networkRequest = this.#requestsById.get(transportId);\n    if (!networkRequest) {\n      return;\n    }\n\n    // This dummy deltas are needed to show this request as being\n    // downloaded(blue) given typical WebTransport is kept for a while.\n    // TODO(yoichio): Add appropreate events to fix these dummy datas.\n    // DNS lookup?\n    networkRequest.responseReceivedTime = time;\n    networkRequest.endTime = time + 0.001;\n    this.updateNetworkRequest(networkRequest);\n  }\n\n  webTransportClosed({transportId, timestamp: time}: Protocol.Network.WebTransportClosedEvent): void {\n    const networkRequest = this.#requestsById.get(transportId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.endTime = time;\n    this.finishNetworkRequest(networkRequest, time, 0);\n  }\n\n  trustTokenOperationDone(event: Protocol.Network.TrustTokenOperationDoneEvent): void {\n    const request = this.#requestsById.get(event.requestId);\n    if (!request) {\n      this.#requestIdToTrustTokenEvent.set(event.requestId, event);\n      return;\n    }\n    request.setTrustTokenOperationDoneEvent(event);\n  }\n\n  subresourceWebBundleMetadataReceived({requestId, urls}: Protocol.Network.SubresourceWebBundleMetadataReceivedEvent):\n      void {\n    const extraInfoBuilder = this.getExtraInfoBuilder(requestId);\n    extraInfoBuilder.setWebBundleInfo({resourceUrls: urls as Platform.DevToolsPath.UrlString[]});\n    const finalRequest = extraInfoBuilder.finalRequest();\n    if (finalRequest) {\n      this.updateNetworkRequest(finalRequest);\n    }\n  }\n\n  subresourceWebBundleMetadataError({requestId, errorMessage}: Protocol.Network.SubresourceWebBundleMetadataErrorEvent):\n      void {\n    const extraInfoBuilder = this.getExtraInfoBuilder(requestId);\n    extraInfoBuilder.setWebBundleInfo({errorMessage});\n    const finalRequest = extraInfoBuilder.finalRequest();\n    if (finalRequest) {\n      this.updateNetworkRequest(finalRequest);\n    }\n  }\n\n  subresourceWebBundleInnerResponseParsed({innerRequestId, bundleRequestId}:\n                                              Protocol.Network.SubresourceWebBundleInnerResponseParsedEvent): void {\n    const extraInfoBuilder = this.getExtraInfoBuilder(innerRequestId);\n    extraInfoBuilder.setWebBundleInnerRequestInfo({bundleRequestId});\n    const finalRequest = extraInfoBuilder.finalRequest();\n    if (finalRequest) {\n      this.updateNetworkRequest(finalRequest);\n    }\n  }\n\n  subresourceWebBundleInnerResponseError({innerRequestId, errorMessage}:\n                                             Protocol.Network.SubresourceWebBundleInnerResponseErrorEvent): void {\n    const extraInfoBuilder = this.getExtraInfoBuilder(innerRequestId);\n    extraInfoBuilder.setWebBundleInnerRequestInfo({errorMessage});\n    const finalRequest = extraInfoBuilder.finalRequest();\n    if (finalRequest) {\n      this.updateNetworkRequest(finalRequest);\n    }\n  }\n\n  reportingApiReportAdded(data: Protocol.Network.ReportingApiReportAddedEvent): void {\n    this.#manager.dispatchEventToListeners(Events.ReportingApiReportAdded, data.report);\n  }\n\n  reportingApiReportUpdated(data: Protocol.Network.ReportingApiReportUpdatedEvent): void {\n    this.#manager.dispatchEventToListeners(Events.ReportingApiReportUpdated, data.report);\n  }\n\n  reportingApiEndpointsChangedForOrigin(data: Protocol.Network.ReportingApiEndpointsChangedForOriginEvent): void {\n    this.#manager.dispatchEventToListeners(Events.ReportingApiEndpointsChangedForOrigin, data);\n  }\n\n  /**\n   * @deprecated\n   * This method is only kept for usage in a web test.\n   */\n  private createNetworkRequest(\n      requestId: Protocol.Network.RequestId, frameId: Protocol.Page.FrameId, loaderId: Protocol.Network.LoaderId,\n      url: string, documentURL: string, initiator: Protocol.Network.Initiator|null): NetworkRequest {\n    const request = NetworkRequest.create(\n        requestId, url as Platform.DevToolsPath.UrlString, documentURL as Platform.DevToolsPath.UrlString, frameId,\n        loaderId, initiator);\n    requestToManagerMap.set(request, this.#manager);\n    return request;\n  }\n}\n\nlet multiTargetNetworkManagerInstance: MultitargetNetworkManager|null;\n\nexport class MultitargetNetworkManager extends Common.ObjectWrapper.ObjectWrapper<MultitargetNetworkManager.EventTypes>\n    implements SDKModelObserver<NetworkManager> {\n  #userAgentOverrideInternal: string;\n  #userAgentMetadataOverride: Protocol.Emulation.UserAgentMetadata|null;\n  #customAcceptedEncodings: Protocol.Network.ContentEncoding[]|null;\n  readonly #networkAgents: Set<ProtocolProxyApi.NetworkApi>;\n  readonly #fetchAgents: Set<ProtocolProxyApi.FetchApi>;\n  readonly inflightMainResourceRequests: Map<string, NetworkRequest>;\n  #networkConditionsInternal: Conditions;\n  #updatingInterceptionPatternsPromise: Promise<void>|null;\n  readonly #blockingEnabledSetting: Common.Settings.Setting<boolean>;\n  readonly #blockedPatternsSetting: Common.Settings.Setting<BlockedPattern[]>;\n  #effectiveBlockedURLs: string[];\n  readonly #urlsForRequestInterceptor:\n      Platform.MapUtilities.Multimap<(arg0: InterceptedRequest) => Promise<void>, InterceptionPattern>;\n  #extraHeaders?: Protocol.Network.Headers;\n  #customUserAgent?: string;\n\n  constructor() {\n    super();\n    this.#userAgentOverrideInternal = '';\n    this.#userAgentMetadataOverride = null;\n    this.#customAcceptedEncodings = null;\n    this.#networkAgents = new Set();\n    this.#fetchAgents = new Set();\n    this.inflightMainResourceRequests = new Map();\n    this.#networkConditionsInternal = NoThrottlingConditions;\n    this.#updatingInterceptionPatternsPromise = null;\n\n    // TODO(allada) Remove these and merge it with request interception.\n    this.#blockingEnabledSetting = Common.Settings.Settings.instance().moduleSetting('requestBlockingEnabled');\n    this.#blockedPatternsSetting = Common.Settings.Settings.instance().createSetting('networkBlockedPatterns', []);\n    this.#effectiveBlockedURLs = [];\n    this.updateBlockedPatterns();\n\n    this.#urlsForRequestInterceptor = new Platform.MapUtilities.Multimap();\n\n    TargetManager.instance().observeModels(NetworkManager, this);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): MultitargetNetworkManager {\n    const {forceNew} = opts;\n    if (!multiTargetNetworkManagerInstance || forceNew) {\n      multiTargetNetworkManagerInstance = new MultitargetNetworkManager();\n    }\n\n    return multiTargetNetworkManagerInstance;\n  }\n\n  static getChromeVersion(): string {\n    const chromeRegex = /(?:^|\\W)(?:Chrome|HeadlessChrome)\\/(\\S+)/;\n    const chromeMatch = navigator.userAgent.match(chromeRegex);\n    if (chromeMatch && chromeMatch.length > 1) {\n      return chromeMatch[1];\n    }\n    return '';\n  }\n\n  static patchUserAgentWithChromeVersion(uaString: string): string {\n    // Patches Chrome/ChrOS version from user #agent (\"1.2.3.4\" when user #agent is: \"Chrome/1.2.3.4\").\n    // Otherwise, ignore it. This assumes additional appVersions appear after the Chrome version.\n    const chromeVersion = MultitargetNetworkManager.getChromeVersion();\n    if (chromeVersion.length > 0) {\n      // \"1.2.3.4\" becomes \"1.0.100.0\"\n      const additionalAppVersion = chromeVersion.split('.', 1)[0] + '.0.100.0';\n      return Platform.StringUtilities.sprintf(uaString, chromeVersion, additionalAppVersion);\n    }\n    return uaString;\n  }\n\n  static patchUserAgentMetadataWithChromeVersion(userAgentMetadata: Protocol.Emulation.UserAgentMetadata): void {\n    // Patches Chrome/ChrOS version from user #agent metadata (\"1.2.3.4\" when user #agent is: \"Chrome/1.2.3.4\").\n    // Otherwise, ignore it. This assumes additional appVersions appear after the Chrome version.\n    if (!userAgentMetadata.brands) {\n      return;\n    }\n    const chromeVersion = MultitargetNetworkManager.getChromeVersion();\n    if (chromeVersion.length === 0) {\n      return;\n    }\n\n    const majorVersion = chromeVersion.split('.', 1)[0];\n    for (const brand of userAgentMetadata.brands) {\n      if (brand.version.includes('%s')) {\n        brand.version = Platform.StringUtilities.sprintf(brand.version, majorVersion);\n      }\n    }\n\n    if (userAgentMetadata.fullVersion) {\n      if (userAgentMetadata.fullVersion.includes('%s')) {\n        userAgentMetadata.fullVersion = Platform.StringUtilities.sprintf(userAgentMetadata.fullVersion, chromeVersion);\n      }\n    }\n  }\n\n  modelAdded(networkManager: NetworkManager): void {\n    const networkAgent = networkManager.target().networkAgent();\n    const fetchAgent = networkManager.target().fetchAgent();\n    if (this.#extraHeaders) {\n      void networkAgent.invoke_setExtraHTTPHeaders({headers: this.#extraHeaders});\n    }\n    if (this.currentUserAgent()) {\n      void networkAgent.invoke_setUserAgentOverride(\n          {userAgent: this.currentUserAgent(), userAgentMetadata: this.#userAgentMetadataOverride || undefined});\n    }\n    if (this.#effectiveBlockedURLs.length) {\n      void networkAgent.invoke_setBlockedURLs({urls: this.#effectiveBlockedURLs});\n    }\n    if (this.isIntercepting()) {\n      void fetchAgent.invoke_enable({patterns: this.#urlsForRequestInterceptor.valuesArray()});\n    }\n    if (this.#customAcceptedEncodings === null) {\n      void networkAgent.invoke_clearAcceptedEncodingsOverride();\n    } else {\n      void networkAgent.invoke_setAcceptedEncodings({encodings: this.#customAcceptedEncodings});\n    }\n    this.#networkAgents.add(networkAgent);\n    this.#fetchAgents.add(fetchAgent);\n    if (this.isThrottling()) {\n      this.updateNetworkConditions(networkAgent);\n    }\n  }\n\n  modelRemoved(networkManager: NetworkManager): void {\n    for (const entry of this.inflightMainResourceRequests) {\n      const manager = NetworkManager.forRequest((entry[1] as NetworkRequest));\n      if (manager !== networkManager) {\n        continue;\n      }\n      this.inflightMainResourceRequests.delete((entry[0] as string));\n    }\n    this.#networkAgents.delete(networkManager.target().networkAgent());\n    this.#fetchAgents.delete(networkManager.target().fetchAgent());\n  }\n\n  isThrottling(): boolean {\n    return this.#networkConditionsInternal.download >= 0 || this.#networkConditionsInternal.upload >= 0 ||\n        this.#networkConditionsInternal.latency > 0;\n  }\n\n  isOffline(): boolean {\n    return !this.#networkConditionsInternal.download && !this.#networkConditionsInternal.upload;\n  }\n\n  setNetworkConditions(conditions: Conditions): void {\n    this.#networkConditionsInternal = conditions;\n    for (const agent of this.#networkAgents) {\n      this.updateNetworkConditions(agent);\n    }\n    this.dispatchEventToListeners(MultitargetNetworkManager.Events.ConditionsChanged);\n  }\n\n  networkConditions(): Conditions {\n    return this.#networkConditionsInternal;\n  }\n\n  private updateNetworkConditions(networkAgent: ProtocolProxyApi.NetworkApi): void {\n    const conditions = this.#networkConditionsInternal;\n    if (!this.isThrottling()) {\n      void networkAgent.invoke_emulateNetworkConditions(\n          {offline: false, latency: 0, downloadThroughput: 0, uploadThroughput: 0});\n    } else {\n      void networkAgent.invoke_emulateNetworkConditions({\n        offline: this.isOffline(),\n        latency: conditions.latency,\n        downloadThroughput: conditions.download < 0 ? 0 : conditions.download,\n        uploadThroughput: conditions.upload < 0 ? 0 : conditions.upload,\n        connectionType: NetworkManager.connectionType(conditions),\n      });\n    }\n  }\n\n  setExtraHTTPHeaders(headers: Protocol.Network.Headers): void {\n    this.#extraHeaders = headers;\n    for (const agent of this.#networkAgents) {\n      void agent.invoke_setExtraHTTPHeaders({headers: this.#extraHeaders});\n    }\n  }\n\n  currentUserAgent(): string {\n    return this.#customUserAgent ? this.#customUserAgent : this.#userAgentOverrideInternal;\n  }\n\n  private updateUserAgentOverride(): void {\n    const userAgent = this.currentUserAgent();\n    for (const agent of this.#networkAgents) {\n      void agent.invoke_setUserAgentOverride(\n          {userAgent: userAgent, userAgentMetadata: this.#userAgentMetadataOverride || undefined});\n    }\n  }\n\n  setUserAgentOverride(userAgent: string, userAgentMetadataOverride: Protocol.Emulation.UserAgentMetadata|null): void {\n    const uaChanged = (this.#userAgentOverrideInternal !== userAgent);\n    this.#userAgentOverrideInternal = userAgent;\n    if (!this.#customUserAgent) {\n      this.#userAgentMetadataOverride = userAgentMetadataOverride;\n      this.updateUserAgentOverride();\n    } else {\n      this.#userAgentMetadataOverride = null;\n    }\n\n    if (uaChanged) {\n      this.dispatchEventToListeners(MultitargetNetworkManager.Events.UserAgentChanged);\n    }\n  }\n\n  userAgentOverride(): string {\n    return this.#userAgentOverrideInternal;\n  }\n\n  setCustomUserAgentOverride(\n      userAgent: string, userAgentMetadataOverride: Protocol.Emulation.UserAgentMetadata|null = null): void {\n    this.#customUserAgent = userAgent;\n    this.#userAgentMetadataOverride = userAgentMetadataOverride;\n    this.updateUserAgentOverride();\n  }\n\n  setCustomAcceptedEncodingsOverride(acceptedEncodings: Protocol.Network.ContentEncoding[]): void {\n    this.#customAcceptedEncodings = acceptedEncodings;\n    this.updateAcceptedEncodingsOverride();\n    this.dispatchEventToListeners(MultitargetNetworkManager.Events.AcceptedEncodingsChanged);\n  }\n\n  clearCustomAcceptedEncodingsOverride(): void {\n    this.#customAcceptedEncodings = null;\n    this.updateAcceptedEncodingsOverride();\n    this.dispatchEventToListeners(MultitargetNetworkManager.Events.AcceptedEncodingsChanged);\n  }\n\n  isAcceptedEncodingOverrideSet(): boolean {\n    return this.#customAcceptedEncodings !== null;\n  }\n\n  private updateAcceptedEncodingsOverride(): void {\n    const customAcceptedEncodings = this.#customAcceptedEncodings;\n    for (const agent of this.#networkAgents) {\n      if (customAcceptedEncodings === null) {\n        void agent.invoke_clearAcceptedEncodingsOverride();\n      } else {\n        void agent.invoke_setAcceptedEncodings({encodings: customAcceptedEncodings});\n      }\n    }\n  }\n\n  // TODO(allada) Move all request blocking into interception and let view manage blocking.\n  blockedPatterns(): BlockedPattern[] {\n    return this.#blockedPatternsSetting.get().slice();\n  }\n\n  blockingEnabled(): boolean {\n    return this.#blockingEnabledSetting.get();\n  }\n\n  isBlocking(): boolean {\n    return Boolean(this.#effectiveBlockedURLs.length);\n  }\n\n  setBlockedPatterns(patterns: BlockedPattern[]): void {\n    this.#blockedPatternsSetting.set(patterns);\n    this.updateBlockedPatterns();\n    this.dispatchEventToListeners(MultitargetNetworkManager.Events.BlockedPatternsChanged);\n  }\n\n  setBlockingEnabled(enabled: boolean): void {\n    if (this.#blockingEnabledSetting.get() === enabled) {\n      return;\n    }\n    this.#blockingEnabledSetting.set(enabled);\n    this.updateBlockedPatterns();\n    this.dispatchEventToListeners(MultitargetNetworkManager.Events.BlockedPatternsChanged);\n  }\n\n  private updateBlockedPatterns(): void {\n    const urls = [];\n    if (this.#blockingEnabledSetting.get()) {\n      for (const pattern of this.#blockedPatternsSetting.get()) {\n        if (pattern.enabled) {\n          urls.push(pattern.url);\n        }\n      }\n    }\n\n    if (!urls.length && !this.#effectiveBlockedURLs.length) {\n      return;\n    }\n    this.#effectiveBlockedURLs = urls;\n    for (const agent of this.#networkAgents) {\n      void agent.invoke_setBlockedURLs({urls: this.#effectiveBlockedURLs});\n    }\n  }\n\n  isIntercepting(): boolean {\n    return Boolean(this.#urlsForRequestInterceptor.size);\n  }\n\n  setInterceptionHandlerForPatterns(\n      patterns: InterceptionPattern[], requestInterceptor: (arg0: InterceptedRequest) => Promise<void>): Promise<void> {\n    // Note: requestInterceptors may recieve interception #requests for patterns they did not subscribe to.\n    this.#urlsForRequestInterceptor.deleteAll(requestInterceptor);\n    for (const newPattern of patterns) {\n      this.#urlsForRequestInterceptor.set(requestInterceptor, newPattern);\n    }\n    return this.updateInterceptionPatternsOnNextTick();\n  }\n\n  private updateInterceptionPatternsOnNextTick(): Promise<void> {\n    // This is used so we can register and unregister patterns in loops without sending lots of protocol messages.\n    if (!this.#updatingInterceptionPatternsPromise) {\n      this.#updatingInterceptionPatternsPromise = Promise.resolve().then(this.updateInterceptionPatterns.bind(this));\n    }\n    return this.#updatingInterceptionPatternsPromise;\n  }\n\n  private async updateInterceptionPatterns(): Promise<void> {\n    if (!Common.Settings.Settings.instance().moduleSetting('cacheDisabled').get()) {\n      Common.Settings.Settings.instance().moduleSetting('cacheDisabled').set(true);\n    }\n    this.#updatingInterceptionPatternsPromise = null;\n    const promises = ([] as Promise<unknown>[]);\n    for (const agent of this.#fetchAgents) {\n      promises.push(agent.invoke_enable({patterns: this.#urlsForRequestInterceptor.valuesArray()}));\n    }\n    this.dispatchEventToListeners(MultitargetNetworkManager.Events.InterceptorsChanged);\n    await Promise.all(promises);\n  }\n\n  async requestIntercepted(interceptedRequest: InterceptedRequest): Promise<void> {\n    for (const requestInterceptor of this.#urlsForRequestInterceptor.keysArray()) {\n      await requestInterceptor(interceptedRequest);\n      if (interceptedRequest.hasResponded()) {\n        this.dispatchEventToListeners(\n            MultitargetNetworkManager.Events.RequestIntercepted,\n            interceptedRequest.request.url as Platform.DevToolsPath.UrlString);\n        return;\n      }\n    }\n    if (!interceptedRequest.hasResponded()) {\n      interceptedRequest.continueRequestWithoutChange();\n    }\n  }\n\n  clearBrowserCache(): void {\n    for (const agent of this.#networkAgents) {\n      void agent.invoke_clearBrowserCache();\n    }\n  }\n\n  clearBrowserCookies(): void {\n    for (const agent of this.#networkAgents) {\n      void agent.invoke_clearBrowserCookies();\n    }\n  }\n\n  async getCertificate(origin: string): Promise<string[]> {\n    const target = TargetManager.instance().mainTarget();\n    if (!target) {\n      return [];\n    }\n    const certificate = await target.networkAgent().invoke_getCertificate({origin});\n    if (!certificate) {\n      return [];\n    }\n    return certificate.tableNames;\n  }\n\n  async loadResource(url: Platform.DevToolsPath.UrlString): Promise<{\n    success: boolean,\n    content: string,\n    errorDescription: Host.ResourceLoader.LoadErrorDescription,\n  }> {\n    const headers: {\n      [x: string]: string,\n    } = {};\n\n    const currentUserAgent = this.currentUserAgent();\n    if (currentUserAgent) {\n      headers['User-Agent'] = currentUserAgent;\n    }\n\n    if (Common.Settings.Settings.instance().moduleSetting('cacheDisabled').get()) {\n      headers['Cache-Control'] = 'no-cache';\n    }\n\n    return new Promise(\n        resolve => Host.ResourceLoader.load(url, headers, (success, _responseHeaders, content, errorDescription) => {\n          resolve({success, content, errorDescription});\n        }));\n  }\n}\n\nexport namespace MultitargetNetworkManager {\n  // TODO(crbug.com/1167717): Make this a const enum again\n  // eslint-disable-next-line rulesdir/const_enum\n  export enum Events {\n    BlockedPatternsChanged = 'BlockedPatternsChanged',\n    ConditionsChanged = 'ConditionsChanged',\n    UserAgentChanged = 'UserAgentChanged',\n    InterceptorsChanged = 'InterceptorsChanged',\n    AcceptedEncodingsChanged = 'AcceptedEncodingsChanged',\n    RequestIntercepted = 'RequestIntercepted',\n  }\n\n  export type EventTypes = {\n    [Events.BlockedPatternsChanged]: void,\n    [Events.ConditionsChanged]: void,\n    [Events.UserAgentChanged]: void,\n    [Events.InterceptorsChanged]: void,\n    [Events.AcceptedEncodingsChanged]: void,\n    [Events.RequestIntercepted]: Platform.DevToolsPath.UrlString,\n  };\n}\n\nexport class InterceptedRequest {\n  readonly #fetchAgent: ProtocolProxyApi.FetchApi;\n  #hasRespondedInternal: boolean;\n  request: Protocol.Network.Request;\n  resourceType: Protocol.Network.ResourceType;\n  responseStatusCode: number|undefined;\n  responseHeaders: Protocol.Fetch.HeaderEntry[]|undefined;\n  requestId: Protocol.Fetch.RequestId;\n\n  constructor(\n      fetchAgent: ProtocolProxyApi.FetchApi,\n      request: Protocol.Network.Request,\n      resourceType: Protocol.Network.ResourceType,\n      requestId: Protocol.Fetch.RequestId,\n      responseStatusCode?: number,\n      responseHeaders?: Protocol.Fetch.HeaderEntry[],\n  ) {\n    this.#fetchAgent = fetchAgent;\n    this.#hasRespondedInternal = false;\n    this.request = request;\n    this.resourceType = resourceType;\n    this.responseStatusCode = responseStatusCode;\n    this.responseHeaders = responseHeaders;\n    this.requestId = requestId;\n  }\n\n  hasResponded(): boolean {\n    return this.#hasRespondedInternal;\n  }\n\n  async continueRequestWithContent(contentBlob: Blob, encoded: boolean, responseHeaders: Protocol.Fetch.HeaderEntry[]):\n      Promise<void> {\n    this.#hasRespondedInternal = true;\n    const body = encoded ? await contentBlob.text() : await blobToBase64(contentBlob);\n    void this.#fetchAgent.invoke_fulfillRequest({requestId: this.requestId, responseCode: 200, body, responseHeaders});\n\n    async function blobToBase64(blob: Blob): Promise<string> {\n      const reader = new FileReader();\n      const fileContentsLoadedPromise = new Promise(resolve => {\n        reader.onloadend = resolve;\n      });\n      reader.readAsDataURL(blob);\n      await fileContentsLoadedPromise;\n      if (reader.error) {\n        console.error('Could not convert blob to base64.', reader.error);\n        return '';\n      }\n      const result = reader.result;\n      if (result === undefined || result === null || typeof result !== 'string') {\n        console.error('Could not convert blob to base64.');\n        return '';\n      }\n      return result.substring(result.indexOf(',') + 1);\n    }\n  }\n\n  continueRequestWithoutChange(): void {\n    console.assert(!this.#hasRespondedInternal);\n    this.#hasRespondedInternal = true;\n    void this.#fetchAgent.invoke_continueRequest({requestId: this.requestId});\n  }\n\n  continueRequestWithError(errorReason: Protocol.Network.ErrorReason): void {\n    console.assert(!this.#hasRespondedInternal);\n    this.#hasRespondedInternal = true;\n    void this.#fetchAgent.invoke_failRequest({requestId: this.requestId, errorReason});\n  }\n\n  async responseBody(): Promise<ContentData> {\n    const response = await this.#fetchAgent.invoke_getResponseBody({requestId: this.requestId});\n    const error = response.getError() || null;\n    return {error: error, content: error ? null : response.body, encoded: response.base64Encoded};\n  }\n}\n\n/**\n * Helper class to match #requests created from requestWillBeSent with\n * requestWillBeSentExtraInfo and responseReceivedExtraInfo when they have the\n * same requestId due to redirects.\n */\nclass ExtraInfoBuilder {\n  readonly #requests: NetworkRequest[];\n  #requestExtraInfos: (ExtraRequestInfo|null)[];\n  #responseExtraInfos: (ExtraResponseInfo|null)[];\n  #finishedInternal: boolean;\n  #webBundleInfo: WebBundleInfo|null;\n  #webBundleInnerRequestInfo: WebBundleInnerRequestInfo|null;\n\n  constructor() {\n    this.#requests = [];\n    this.#requestExtraInfos = [];\n    this.#responseExtraInfos = [];\n    this.#finishedInternal = false;\n    this.#webBundleInfo = null;\n    this.#webBundleInnerRequestInfo = null;\n  }\n\n  addRequest(req: NetworkRequest): void {\n    this.#requests.push(req);\n    this.sync(this.#requests.length - 1);\n  }\n\n  addRequestExtraInfo(info: ExtraRequestInfo): void {\n    this.#requestExtraInfos.push(info);\n    this.sync(this.#requestExtraInfos.length - 1);\n  }\n\n  addResponseExtraInfo(info: ExtraResponseInfo): void {\n    this.#responseExtraInfos.push(info);\n    this.sync(this.#responseExtraInfos.length - 1);\n  }\n\n  setWebBundleInfo(info: WebBundleInfo): void {\n    this.#webBundleInfo = info;\n    this.updateFinalRequest();\n  }\n\n  setWebBundleInnerRequestInfo(info: WebBundleInnerRequestInfo): void {\n    this.#webBundleInnerRequestInfo = info;\n    this.updateFinalRequest();\n  }\n\n  finished(): void {\n    this.#finishedInternal = true;\n    this.updateFinalRequest();\n  }\n\n  private sync(index: number): void {\n    const req = this.#requests[index];\n    if (!req) {\n      return;\n    }\n\n    const requestExtraInfo = this.#requestExtraInfos[index];\n    if (requestExtraInfo) {\n      req.addExtraRequestInfo(requestExtraInfo);\n      this.#requestExtraInfos[index] = null;\n    }\n\n    const responseExtraInfo = this.#responseExtraInfos[index];\n    if (responseExtraInfo) {\n      req.addExtraResponseInfo(responseExtraInfo);\n      this.#responseExtraInfos[index] = null;\n    }\n  }\n\n  finalRequest(): NetworkRequest|null {\n    if (!this.#finishedInternal) {\n      return null;\n    }\n    return this.#requests[this.#requests.length - 1] || null;\n  }\n\n  private updateFinalRequest(): void {\n    if (!this.#finishedInternal) {\n      return;\n    }\n    const finalRequest = this.finalRequest();\n    finalRequest?.setWebBundleInfo(this.#webBundleInfo);\n    finalRequest?.setWebBundleInnerRequestInfo(this.#webBundleInnerRequestInfo);\n  }\n}\n\nSDKModel.register(NetworkManager, {capabilities: Capability.Network, autostart: true});\n\nexport class ConditionsSerializer implements Serializer<Conditions, Conditions> {\n  stringify(value: unknown): string {\n    const conditions = value as Conditions;\n    return JSON.stringify({\n      ...conditions,\n      title: typeof conditions.title === 'function' ? conditions.title() : conditions.title,\n    });\n  }\n\n  parse(serialized: string): Conditions {\n    const parsed = JSON.parse(serialized);\n    return {\n      ...parsed,\n      // eslint-disable-next-line rulesdir/l10n_i18nString_call_only_with_uistrings\n      title: parsed.i18nTitleKey ? i18nLazyString(parsed.i18nTitleKey) : parsed.title,\n    };\n  }\n}\n\nexport function networkConditionsEqual(first: Conditions, second: Conditions): boolean {\n  // Caution: titles might be different function instances, which produce\n  // the same value.\n  const firstTitle = typeof first.title === 'function' ? first.title() : first.title;\n  const secondTitle = typeof second.title === 'function' ? second.title() : second.title;\n  return second.download === first.download && second.upload === first.upload && second.latency === first.latency &&\n      secondTitle === firstTitle;\n}\n\nexport interface Conditions {\n  download: number;\n  upload: number;\n  latency: number;\n  // TODO(crbug.com/1219425): In the future, it might be worthwhile to\n  // consider avoiding mixing up presentation state (e.g.: displayed\n  // titles) with behavioral state (e.g.: the throttling amounts). In\n  // this particular case, the title (along with other properties)\n  // doubles as both part of group of fields which (loosely) uniquely\n  // identify instances, as well as the literal string displayed in the\n  // UI, which leads to complications around persistance.\n  title: string|(() => string);\n  // Instances may be serialized to local storage, so localized titles\n  // should not be irrecoverably baked, just in case the string changes\n  // (or the user switches locales).\n  i18nTitleKey?: string;\n}\n\nexport interface BlockedPattern {\n  url: string;\n  enabled: boolean;\n}\n\nexport interface Message {\n  message: string;\n  requestId: string;\n  warning: boolean;\n}\n\nexport interface InterceptionPattern {\n  urlPattern: string;\n  requestStage: Protocol.Fetch.RequestStage;\n}\n\nexport type RequestInterceptor = (request: InterceptedRequest) => Promise<void>;\n\nexport interface RequestUpdateDroppedEventData {\n  url: Platform.DevToolsPath.UrlString;\n  frameId: Protocol.Page.FrameId|null;\n  loaderId: Protocol.Network.LoaderId;\n  resourceType: Protocol.Network.ResourceType;\n  mimeType: string;\n  lastModified: Date|null;\n}\n"],
  "mappings": "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",
  "names": []
}
