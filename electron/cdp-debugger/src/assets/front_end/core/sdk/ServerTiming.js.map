{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/ServerTiming.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as i18n from '../i18n/i18n.js';\nimport * as Platform from '../platform/platform.js';\n\nimport type {NameValue} from './NetworkRequest.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Server Timing\n  */\n  deprecatedSyntaxFoundPleaseUse: 'Deprecated syntax found. Please use: <name>;dur=<duration>;desc=<description>',\n  /**\n  *@description Text in Server Timing\n  *@example {https} PH1\n  */\n  duplicateParameterSIgnored: 'Duplicate parameter \"{PH1}\" ignored.',\n  /**\n  *@description Text in Server Timing\n  *@example {https} PH1\n  */\n  noValueFoundForParameterS: 'No value found for parameter \"{PH1}\".',\n  /**\n  *@description Text in Server Timing\n  *@example {https} PH1\n  */\n  unrecognizedParameterS: 'Unrecognized parameter \"{PH1}\".',\n  /**\n  *@description Text in Server Timing\n  */\n  extraneousTrailingCharacters: 'Extraneous trailing characters.',\n  /**\n  *@description Text in Server Timing\n  *@example {https} PH1\n  *@example {2.0} PH2\n  */\n  unableToParseSValueS: 'Unable to parse \"{PH1}\" value \"{PH2}\".',\n};\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/ServerTiming.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class ServerTiming {\n  metric: string;\n  value: number|null;\n  description: string|null;\n\n  constructor(metric: string, value: number|null, description: string|null) {\n    this.metric = metric;\n    this.value = value;\n    this.description = description;\n  }\n\n  static parseHeaders(headers: NameValue[]): ServerTiming[]|null {\n    const rawServerTimingHeaders = headers.filter(item => item.name.toLowerCase() === 'server-timing');\n    if (!rawServerTimingHeaders.length) {\n      return null;\n    }\n\n    const serverTimings = rawServerTimingHeaders.reduce((memo, header) => {\n      const timing = this.createFromHeaderValue(header.value);\n      memo.push(...timing.map(function(entry) {\n        return new ServerTiming(\n            entry.name, entry.hasOwnProperty('dur') ? entry.dur : null, entry.hasOwnProperty('desc') ? entry.desc : '');\n      }));\n      return memo;\n    }, ([] as ServerTiming[]));\n    serverTimings.sort((a, b) => Platform.StringUtilities.compare(a.metric.toLowerCase(), b.metric.toLowerCase()));\n    return serverTimings;\n  }\n\n  /**\n   * TODO(crbug.com/1011811): Instead of using !Object<string, *> we should have a proper type\n   *                          with #name, desc and dur properties.\n   */\n  static createFromHeaderValue(valueString: string): {\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [x: string]: any,\n  }[] {\n    function trimLeadingWhiteSpace(): void {\n      valueString = valueString.replace(/^\\s*/, '');\n    }\n    function consumeDelimiter(char: string): boolean {\n      console.assert(char.length === 1);\n      trimLeadingWhiteSpace();\n      if (valueString.charAt(0) !== char) {\n        return false;\n      }\n\n      valueString = valueString.substring(1);\n      return true;\n    }\n    function consumeToken(): string|null {\n      // https://tools.ietf.org/html/rfc7230#appendix-B\n      const result = /^(?:\\s*)([\\w!#$%&'*+\\-.^`|~]+)(?:\\s*)(.*)/.exec(valueString);\n      if (!result) {\n        return null;\n      }\n\n      valueString = result[2];\n      return result[1];\n    }\n    function consumeTokenOrQuotedString(): string|null {\n      trimLeadingWhiteSpace();\n      if (valueString.charAt(0) === '\"') {\n        return consumeQuotedString();\n      }\n\n      return consumeToken();\n    }\n    function consumeQuotedString(): string|null {\n      console.assert(valueString.charAt(0) === '\"');\n      valueString = valueString.substring(1);  // remove leading DQUOTE\n\n      let value = '';\n      while (valueString.length) {\n        // split into two parts:\n        //  -everything before the first \" or \\\n        //  -everything else\n        const result = /^([^\"\\\\]*)(.*)/.exec(valueString);\n        if (!result) {\n          return null;  // not a valid quoted-string\n        }\n        value += result[1];\n        if (result[2].charAt(0) === '\"') {\n          // we have found our closing \"\n          valueString = result[2].substring(1);  // strip off everything after the closing \"\n          return value;                          // we are done here\n        }\n\n        console.assert(result[2].charAt(0) === '\\\\');\n        // special rules for \\ found in quoted-string (https://tools.ietf.org/html/rfc7230#section-3.2.6)\n        value += result[2].charAt(1);          // grab the character AFTER the \\ (if there was one)\n        valueString = result[2].substring(2);  // strip off \\ and next character\n      }\n\n      return null;  // not a valid quoted-string\n    }\n    function consumeExtraneous(): void {\n      const result = /([,;].*)/.exec(valueString);\n      if (result) {\n        valueString = result[1];\n      }\n    }\n\n    const result = [];\n    let name;\n    while ((name = consumeToken()) !== null) {\n      const entry = {name};\n\n      if (valueString.charAt(0) === '=') {\n        this.showWarning(i18nString(UIStrings.deprecatedSyntaxFoundPleaseUse));\n      }\n\n      while (consumeDelimiter(';')) {\n        let paramName;\n        if ((paramName = consumeToken()) === null) {\n          continue;\n        }\n\n        paramName = paramName.toLowerCase();\n        const parseParameter = this.getParserForParameter(paramName);\n        let paramValue: (string|null)|null = null;\n        if (consumeDelimiter('=')) {\n          // always parse the value, even if we don't recognize the parameter #name\n          paramValue = consumeTokenOrQuotedString();\n          consumeExtraneous();\n        }\n\n        if (parseParameter) {\n          // paramName is valid\n          if (entry.hasOwnProperty(paramName)) {\n            this.showWarning(i18nString(UIStrings.duplicateParameterSIgnored, {PH1: paramName}));\n            continue;\n          }\n\n          if (paramValue === null) {\n            this.showWarning(i18nString(UIStrings.noValueFoundForParameterS, {PH1: paramName}));\n          }\n\n          parseParameter.call(this, entry, paramValue);\n        } else {\n          // paramName is not valid\n          this.showWarning(i18nString(UIStrings.unrecognizedParameterS, {PH1: paramName}));\n        }\n      }\n\n      result.push(entry);\n      if (!consumeDelimiter(',')) {\n        break;\n      }\n    }\n\n    if (valueString.length) {\n      this.showWarning(i18nString(UIStrings.extraneousTrailingCharacters));\n    }\n    return result;\n  }\n\n  static getParserForParameter(paramName: string):\n      ((arg0: {\n         // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n         // eslint-disable-next-line @typescript-eslint/no-explicit-any\n         [x: string]: any,\n       },\n        arg1: string|null) => void)|null {\n    switch (paramName) {\n      case 'dur': {\n        function durParser(\n            entry: {\n              // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              [x: string]: any,\n            },\n            // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            paramValue: any): void {\n          entry.dur = 0;\n          if (paramValue !== null) {\n            const duration = parseFloat(paramValue);\n            if (isNaN(duration)) {\n              ServerTiming.showWarning(i18nString(UIStrings.unableToParseSValueS, {PH1: paramName, PH2: paramValue}));\n              return;\n            }\n            entry.dur = duration;\n          }\n        }\n        return durParser;\n      }\n\n      case 'desc': {\n        function descParser(\n            entry: {\n              // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              [x: string]: any,\n            },\n            paramValue: string|null): void {\n          entry.desc = paramValue || '';\n        }\n        return descParser;\n      }\n\n      default: {\n        return null;\n      }\n    }\n  }\n\n  static showWarning(msg: string): void {\n    Common.Console.Console.instance().warn(`ServerTiming: ${msg}`);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
