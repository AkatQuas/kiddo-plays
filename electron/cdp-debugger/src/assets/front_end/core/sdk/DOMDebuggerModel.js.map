{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/DOMDebuggerModel.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as i18n from '../i18n/i18n.js';\nimport * as Platform from '../platform/platform.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport {CategorizedBreakpoint} from './CategorizedBreakpoint.js';\nimport type {Location} from './DebuggerModel.js';\nimport type {DOMNode} from './DOMModel.js';\nimport {DOMModel, Events as DOMModelEvents} from './DOMModel.js';\nimport {RemoteObject} from './RemoteObject.js';\nimport {RuntimeModel} from './RuntimeModel.js';\nimport type {Target} from './Target.js';\nimport {Capability} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\nimport type {SDKModelObserver} from './TargetManager.js';\nimport {TargetManager} from './TargetManager.js';\n\nconst UIStrings = {\n  /**\n  *@description Title for a category of breakpoints on Trusted Type violations\n  */\n  trustedTypeViolations: 'Trusted Type Violations',\n  /**\n   * @description Noun. Title for a checkbox that turns on breakpoints on Trusted Type sink violations.\n   * \"Trusted Types\" is a Web API. A \"Sink\" (Noun, singular) is a special function, akin to a data sink, that expects\n   * to receive data in a specific format. Should the data be in the wrong format, or something else\n   * go wrong, its called a \"sink violation\".\n   */\n  sinkViolations: 'Sink Violations',\n  /**\n  *@description Title for a checkbox that turns on breakpoints on Trusted Type policy violations\n  */\n  policyViolations: 'Policy Violations',\n  /**\n  *@description Text that refers to the animation of the web page\n  */\n  animation: 'Animation',\n  /**\n  *@description Text in DOMDebugger Model\n  */\n  canvas: 'Canvas',\n  /**\n  *@description Title for a group of cities\n  */\n  geolocation: 'Geolocation',\n  /**\n  *@description Text in DOMDebugger Model\n  */\n  notification: 'Notification',\n  /**\n  *@description Text to parse something\n  */\n  parse: 'Parse',\n  /**\n  *@description Label for a group of JavaScript files\n  */\n  script: 'Script',\n  /**\n  *@description Text in DOMDebugger Model\n  */\n  timer: 'Timer',\n  /**\n  *@description Text in DOMDebugger Model\n  */\n  window: 'Window',\n  /**\n  *@description Title of the WebAudio tool\n  */\n  webaudio: 'WebAudio',\n  /**\n  *@description Text that appears on a button for the media resource type filter.\n  */\n  media: 'Media',\n  /**\n  *@description Text in DOMDebugger Model\n  */\n  pictureinpicture: 'Picture-in-Picture',\n  /**\n  *@description Text in DOMDebugger Model\n  */\n  clipboard: 'Clipboard',\n  /**\n   * @description Noun. Describes a group of DOM events (such as 'select' and 'submit') in this context.\n   */\n  control: 'Control',\n  /**\n  *@description Text that refers to device such as a phone\n  */\n  device: 'Device',\n  /**\n  *@description Text in DOMDebugger Model\n  */\n  domMutation: 'DOM Mutation',\n  /**\n  *@description Text in DOMDebugger Model\n  */\n  dragDrop: 'Drag / drop',\n  /**\n  *@description Text in DOMDebugger Model\n  */\n  keyboard: 'Keyboard',\n  /**\n  *@description Text to load something\n  */\n  load: 'Load',\n  /**\n  *@description Text in DOMDebugger Model\n  */\n  mouse: 'Mouse',\n  /**\n  *@description Text in DOMDebugger Model\n  */\n  pointer: 'Pointer',\n  /**\n  *@description Text for the touch type to simulate on a device\n  */\n  touch: 'Touch',\n  /**\n  *@description Text that appears on a button for the xhr resource type filter.\n  */\n  xhr: 'XHR',\n  /**\n  *@description Text in the Event Listener Breakpoints Panel of the JavaScript Debugger in the Sources Panel\n  *@example {setTimeout} PH1\n  */\n  setTimeoutOrIntervalFired: '{PH1} fired',\n  /**\n  *@description Text in the Event Listener Breakpoints Panel of the JavaScript Debugger in the Sources Panel\n  */\n  scriptFirstStatement: 'Script First Statement',\n  /**\n  *@description Text in the Event Listener Breakpoints Panel of the JavaScript Debugger in the Sources Panel\n  */\n  scriptBlockedByContentSecurity: 'Script Blocked by Content Security Policy',\n  /**\n  *@description Text for the request animation frame event\n  */\n  requestAnimationFrame: 'Request Animation Frame',\n  /**\n  *@description Text to cancel the animation frame\n  */\n  cancelAnimationFrame: 'Cancel Animation Frame',\n  /**\n  *@description Text for the event that an animation frame is fired\n  */\n  animationFrameFired: 'Animation Frame Fired',\n  /**\n  *@description Text in the Event Listener Breakpoints Panel of the JavaScript Debugger in the Sources Panel\n  */\n  webglErrorFired: 'WebGL Error Fired',\n  /**\n  *@description Text in the Event Listener Breakpoints Panel of the JavaScript Debugger in the Sources Panel\n  */\n  webglWarningFired: 'WebGL Warning Fired',\n  /**\n  *@description Text in the Event Listener Breakpoints Panel of the JavaScript Debugger in the Sources Panel\n  */\n  setInnerhtml: 'Set `innerHTML`',\n  /**\n  *@description Name of a breakpoint type in the Sources Panel.\n  */\n  createCanvasContext: 'Create canvas context',\n  /**\n  *@description Name of a breakpoint type in the Sources Panel.\n  */\n  createAudiocontext: 'Create `AudioContext`',\n  /**\n  *@description Name of a breakpoint type in the Sources Panel. Close is a verb.\n  */\n  closeAudiocontext: 'Close `AudioContext`',\n  /**\n  *@description Name of a breakpoint type in the Sources Panel. Resume is a verb.\n  */\n  resumeAudiocontext: 'Resume `AudioContext`',\n  /**\n  *@description Name of a breakpoint type in the Sources Panel.\n  */\n  suspendAudiocontext: 'Suspend `AudioContext`',\n  /**\n  *@description Error message text\n  *@example {Snag Error} PH1\n  */\n  webglErrorFiredS: 'WebGL Error Fired ({PH1})',\n  /**\n  *@description Text in DOMDebugger Model\n  *@example {\"script-src 'self'\"} PH1\n  */\n  scriptBlockedDueToContent: 'Script blocked due to Content Security Policy directive: {PH1}',\n  /**\n  *@description Text for the service worker type.\n  */\n  worker: 'Worker',\n};\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/DOMDebuggerModel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n// Some instrumentation breakpoints have their titles adjusted to localized\n// versions, and some are merely renamed to more recognizable names.\n//\n// This function returns a table that links the breakpoint names and replacement\n// titles.\nfunction getInstrumentationBreakpointTitles(): [string, string|Common.UIString.LocalizedString][] {\n  return [\n    ['setTimeout.callback', i18nString(UIStrings.setTimeoutOrIntervalFired, {PH1: 'setTimeout'})],\n    ['setInterval.callback', i18nString(UIStrings.setTimeoutOrIntervalFired, {PH1: 'setInterval'})],\n    ['scriptFirstStatement', i18nString(UIStrings.scriptFirstStatement)],\n    ['scriptBlockedByCSP', i18nString(UIStrings.scriptBlockedByContentSecurity)],\n    ['requestAnimationFrame', i18nString(UIStrings.requestAnimationFrame)],\n    ['cancelAnimationFrame', i18nString(UIStrings.cancelAnimationFrame)],\n    ['requestAnimationFrame.callback', i18nString(UIStrings.animationFrameFired)],\n    ['webglErrorFired', i18nString(UIStrings.webglErrorFired)],\n    ['webglWarningFired', i18nString(UIStrings.webglWarningFired)],\n    ['Element.setInnerHTML', i18nString(UIStrings.setInnerhtml)],\n    ['canvasContextCreated', i18nString(UIStrings.createCanvasContext)],\n    ['Geolocation.getCurrentPosition', 'getCurrentPosition'],\n    ['Geolocation.watchPosition', 'watchPosition'],\n    ['Notification.requestPermission', 'requestPermission'],\n    ['DOMWindow.close', 'window.close'],\n    ['Document.write', 'document.write'],\n    ['audioContextCreated', i18nString(UIStrings.createAudiocontext)],\n    ['audioContextClosed', i18nString(UIStrings.closeAudiocontext)],\n    ['audioContextResumed', i18nString(UIStrings.resumeAudiocontext)],\n    ['audioContextSuspended', i18nString(UIStrings.suspendAudiocontext)],\n  ];\n}\n\nexport class DOMDebuggerModel extends SDKModel<EventTypes> {\n  readonly agent: ProtocolProxyApi.DOMDebuggerApi;\n  readonly #runtimeModelInternal: RuntimeModel;\n  #domModel: DOMModel;\n  #domBreakpointsInternal: DOMBreakpoint[];\n  readonly #domBreakpointsSetting: Common.Settings.Setting<{\n    url: Platform.DevToolsPath.UrlString,\n    path: string,\n    type: Protocol.DOMDebugger.DOMBreakpointType,\n    enabled: boolean,\n  }[]>;\n  suspended = false;\n\n  constructor(target: Target) {\n    super(target);\n    this.agent = target.domdebuggerAgent();\n    this.#runtimeModelInternal = (target.model(RuntimeModel) as RuntimeModel);\n    this.#domModel = (target.model(DOMModel) as DOMModel);\n    this.#domModel.addEventListener(DOMModelEvents.DocumentUpdated, this.documentUpdated, this);\n    this.#domModel.addEventListener(DOMModelEvents.NodeRemoved, this.nodeRemoved, this);\n\n    this.#domBreakpointsInternal = [];\n    this.#domBreakpointsSetting = Common.Settings.Settings.instance().createLocalSetting('domBreakpoints', []);\n    if (this.#domModel.existingDocument()) {\n      void this.documentUpdated();\n    }\n  }\n\n  runtimeModel(): RuntimeModel {\n    return this.#runtimeModelInternal;\n  }\n\n  async suspendModel(): Promise<void> {\n    this.suspended = true;\n  }\n\n  async resumeModel(): Promise<void> {\n    this.suspended = false;\n  }\n\n  async eventListeners(remoteObject: RemoteObject): Promise<EventListener[]> {\n    console.assert(remoteObject.runtimeModel() === this.#runtimeModelInternal);\n    if (!remoteObject.objectId) {\n      return [];\n    }\n\n    const listeners = await this.agent.invoke_getEventListeners({objectId: remoteObject.objectId});\n    const eventListeners = [];\n    for (const payload of listeners.listeners || []) {\n      const location = this.#runtimeModelInternal.debuggerModel().createRawLocationByScriptId(\n          payload.scriptId, payload.lineNumber, payload.columnNumber);\n      if (!location) {\n        continue;\n      }\n      eventListeners.push(new EventListener(\n          this, remoteObject, payload.type, payload.useCapture, payload.passive, payload.once,\n          payload.handler ? this.#runtimeModelInternal.createRemoteObject(payload.handler) : null,\n          payload.originalHandler ? this.#runtimeModelInternal.createRemoteObject(payload.originalHandler) : null,\n          location, null));\n    }\n    return eventListeners;\n  }\n\n  retrieveDOMBreakpoints(): void {\n    void this.#domModel.requestDocument();\n  }\n\n  domBreakpoints(): DOMBreakpoint[] {\n    return this.#domBreakpointsInternal.slice();\n  }\n\n  hasDOMBreakpoint(node: DOMNode, type: Protocol.DOMDebugger.DOMBreakpointType): boolean {\n    return this.#domBreakpointsInternal.some(breakpoint => (breakpoint.node === node && breakpoint.type === type));\n  }\n\n  setDOMBreakpoint(node: DOMNode, type: Protocol.DOMDebugger.DOMBreakpointType): DOMBreakpoint {\n    for (const breakpoint of this.#domBreakpointsInternal) {\n      if (breakpoint.node === node && breakpoint.type === type) {\n        this.toggleDOMBreakpoint(breakpoint, true);\n        return breakpoint;\n      }\n    }\n    const breakpoint = new DOMBreakpoint(this, node, type, true);\n    this.#domBreakpointsInternal.push(breakpoint);\n    this.saveDOMBreakpoints();\n    this.enableDOMBreakpoint(breakpoint);\n    this.dispatchEventToListeners(Events.DOMBreakpointAdded, breakpoint);\n    return breakpoint;\n  }\n\n  removeDOMBreakpoint(node: DOMNode, type: Protocol.DOMDebugger.DOMBreakpointType): void {\n    this.removeDOMBreakpoints(breakpoint => breakpoint.node === node && breakpoint.type === type);\n  }\n\n  removeAllDOMBreakpoints(): void {\n    this.removeDOMBreakpoints(_breakpoint => true);\n  }\n\n  toggleDOMBreakpoint(breakpoint: DOMBreakpoint, enabled: boolean): void {\n    if (enabled === breakpoint.enabled) {\n      return;\n    }\n    breakpoint.enabled = enabled;\n    if (enabled) {\n      this.enableDOMBreakpoint(breakpoint);\n    } else {\n      this.disableDOMBreakpoint(breakpoint);\n    }\n    this.dispatchEventToListeners(Events.DOMBreakpointToggled, breakpoint);\n  }\n\n  private enableDOMBreakpoint(breakpoint: DOMBreakpoint): void {\n    if (breakpoint.node.id) {\n      void this.agent.invoke_setDOMBreakpoint({nodeId: breakpoint.node.id, type: breakpoint.type});\n      breakpoint.node.setMarker(Marker, true);\n    }\n  }\n\n  private disableDOMBreakpoint(breakpoint: DOMBreakpoint): void {\n    if (breakpoint.node.id) {\n      void this.agent.invoke_removeDOMBreakpoint({nodeId: breakpoint.node.id, type: breakpoint.type});\n      breakpoint.node.setMarker(Marker, this.nodeHasBreakpoints(breakpoint.node) ? true : null);\n    }\n  }\n\n  private nodeHasBreakpoints(node: DOMNode): boolean {\n    for (const breakpoint of this.#domBreakpointsInternal) {\n      if (breakpoint.node === node && breakpoint.enabled) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  resolveDOMBreakpointData(auxData: {\n    type: Protocol.DOMDebugger.DOMBreakpointType,\n    nodeId: Protocol.DOM.NodeId,\n    targetNodeId: Protocol.DOM.NodeId,\n    insertion: boolean,\n  }): {\n    type: Protocol.DOMDebugger.DOMBreakpointType,\n    node: DOMNode,\n    targetNode: DOMNode|null,\n    insertion: boolean,\n  }|null {\n    const type = auxData['type'];\n    const node = this.#domModel.nodeForId(auxData['nodeId']);\n    if (!type || !node) {\n      return null;\n    }\n    let targetNode: (DOMNode|null)|null = null;\n    let insertion = false;\n    if (type === Protocol.DOMDebugger.DOMBreakpointType.SubtreeModified) {\n      insertion = auxData['insertion'] || false;\n      targetNode = this.#domModel.nodeForId(auxData['targetNodeId']);\n    }\n    return {type: type, node: node, targetNode: targetNode, insertion: insertion};\n  }\n\n  private currentURL(): Platform.DevToolsPath.UrlString {\n    const domDocument = this.#domModel.existingDocument();\n    return domDocument ? domDocument.documentURL : Platform.DevToolsPath.EmptyUrlString;\n  }\n\n  private async documentUpdated(): Promise<void> {\n    if (this.suspended) {\n      return;\n    }\n    const removed = this.#domBreakpointsInternal;\n    this.#domBreakpointsInternal = [];\n    this.dispatchEventToListeners(Events.DOMBreakpointsRemoved, removed);\n\n    // this.currentURL() is empty when the page is reloaded because the\n    // new document has not been requested yet and the old one has been\n    // removed. Therefore, we need to request the document and wait for it.\n    // Note that requestDocument() caches the document so that it is requested\n    // only once.\n    const document = await this.#domModel.requestDocument();\n    const currentURL = document ? document.documentURL : Platform.DevToolsPath.EmptyUrlString;\n    for (const breakpoint of this.#domBreakpointsSetting.get()) {\n      if (breakpoint.url === currentURL) {\n        void this.#domModel.pushNodeByPathToFrontend(breakpoint.path).then(appendBreakpoint.bind(this, breakpoint));\n      }\n    }\n\n    function appendBreakpoint(\n        this: DOMDebuggerModel, breakpoint: {\n          type: Protocol.DOMDebugger.DOMBreakpointType,\n          enabled: boolean,\n        },\n        nodeId: Protocol.DOM.NodeId|null): void {\n      const node = nodeId ? this.#domModel.nodeForId(nodeId) : null;\n      if (!node) {\n        return;\n      }\n      const domBreakpoint = new DOMBreakpoint(this, node, breakpoint.type, breakpoint.enabled);\n      this.#domBreakpointsInternal.push(domBreakpoint);\n      if (breakpoint.enabled) {\n        this.enableDOMBreakpoint(domBreakpoint);\n      }\n      this.dispatchEventToListeners(Events.DOMBreakpointAdded, domBreakpoint);\n    }\n  }\n\n  private removeDOMBreakpoints(filter: (arg0: DOMBreakpoint) => boolean): void {\n    const removed = [];\n    const left = [];\n    for (const breakpoint of this.#domBreakpointsInternal) {\n      if (filter(breakpoint)) {\n        removed.push(breakpoint);\n        if (breakpoint.enabled) {\n          breakpoint.enabled = false;\n          this.disableDOMBreakpoint(breakpoint);\n        }\n      } else {\n        left.push(breakpoint);\n      }\n    }\n\n    if (!removed.length) {\n      return;\n    }\n    this.#domBreakpointsInternal = left;\n    this.saveDOMBreakpoints();\n    this.dispatchEventToListeners(Events.DOMBreakpointsRemoved, removed);\n  }\n\n  private nodeRemoved(event: Common.EventTarget.EventTargetEvent<{node: DOMNode, parent: DOMNode}>): void {\n    if (this.suspended) {\n      return;\n    }\n    const {node} = event.data;\n    const children = node.children() || [];\n    this.removeDOMBreakpoints(breakpoint => breakpoint.node === node || children.indexOf(breakpoint.node) !== -1);\n  }\n\n  private saveDOMBreakpoints(): void {\n    const currentURL = this.currentURL();\n    const breakpoints = this.#domBreakpointsSetting.get().filter((breakpoint: {\n                                                                   url: Platform.DevToolsPath.UrlString,\n                                                                 }) => breakpoint.url !== currentURL);\n    for (const breakpoint of this.#domBreakpointsInternal) {\n      breakpoints.push(\n          {url: currentURL, path: breakpoint.node.path(), type: breakpoint.type, enabled: breakpoint.enabled});\n    }\n    this.#domBreakpointsSetting.set(breakpoints);\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  DOMBreakpointAdded = 'DOMBreakpointAdded',\n  DOMBreakpointToggled = 'DOMBreakpointToggled',\n  DOMBreakpointsRemoved = 'DOMBreakpointsRemoved',\n}\n\nexport type EventTypes = {\n  [Events.DOMBreakpointAdded]: DOMBreakpoint,\n  [Events.DOMBreakpointToggled]: DOMBreakpoint,\n  [Events.DOMBreakpointsRemoved]: DOMBreakpoint[],\n};\n\nconst Marker = 'breakpoint-marker';\n\nexport class DOMBreakpoint {\n  domDebuggerModel: DOMDebuggerModel;\n  node: DOMNode;\n  type: Protocol.DOMDebugger.DOMBreakpointType;\n  enabled: boolean;\n\n  constructor(\n      domDebuggerModel: DOMDebuggerModel, node: DOMNode, type: Protocol.DOMDebugger.DOMBreakpointType,\n      enabled: boolean) {\n    this.domDebuggerModel = domDebuggerModel;\n    this.node = node;\n    this.type = type;\n    this.enabled = enabled;\n  }\n}\n\nexport class EventListener {\n  readonly #domDebuggerModelInternal: DOMDebuggerModel;\n  readonly #eventTarget: RemoteObject;\n  readonly #typeInternal: string;\n  readonly #useCaptureInternal: boolean;\n  readonly #passiveInternal: boolean;\n  readonly #onceInternal: boolean;\n  readonly #handlerInternal: RemoteObject|null;\n  readonly #originalHandlerInternal: RemoteObject|null;\n  readonly #locationInternal: Location;\n  readonly #sourceURLInternal: Platform.DevToolsPath.UrlString;\n  readonly #customRemoveFunction: RemoteObject|null;\n  #originInternal: string;\n\n  constructor(\n      domDebuggerModel: DOMDebuggerModel, eventTarget: RemoteObject, type: string, useCapture: boolean,\n      passive: boolean, once: boolean, handler: RemoteObject|null, originalHandler: RemoteObject|null,\n      location: Location, customRemoveFunction: RemoteObject|null, origin?: string) {\n    this.#domDebuggerModelInternal = domDebuggerModel;\n    this.#eventTarget = eventTarget;\n    this.#typeInternal = type;\n    this.#useCaptureInternal = useCapture;\n    this.#passiveInternal = passive;\n    this.#onceInternal = once;\n    this.#handlerInternal = handler;\n    this.#originalHandlerInternal = originalHandler || handler;\n    this.#locationInternal = location;\n    const script = location.script();\n    this.#sourceURLInternal = script ? script.contentURL() : Platform.DevToolsPath.EmptyUrlString;\n    this.#customRemoveFunction = customRemoveFunction;\n    this.#originInternal = origin || EventListener.Origin.Raw;\n  }\n\n  domDebuggerModel(): DOMDebuggerModel {\n    return this.#domDebuggerModelInternal;\n  }\n\n  type(): string {\n    return this.#typeInternal;\n  }\n\n  useCapture(): boolean {\n    return this.#useCaptureInternal;\n  }\n\n  passive(): boolean {\n    return this.#passiveInternal;\n  }\n\n  once(): boolean {\n    return this.#onceInternal;\n  }\n\n  handler(): RemoteObject|null {\n    return this.#handlerInternal;\n  }\n\n  location(): Location {\n    return this.#locationInternal;\n  }\n\n  sourceURL(): Platform.DevToolsPath.UrlString {\n    return this.#sourceURLInternal;\n  }\n\n  originalHandler(): RemoteObject|null {\n    return this.#originalHandlerInternal;\n  }\n\n  canRemove(): boolean {\n    return Boolean(this.#customRemoveFunction) || this.#originInternal !== EventListener.Origin.FrameworkUser;\n  }\n\n  remove(): Promise<void> {\n    if (!this.canRemove()) {\n      return Promise.resolve(undefined);\n    }\n\n    if (this.#originInternal !== EventListener.Origin.FrameworkUser) {\n      function removeListener(\n          this: {\n            removeEventListener: (arg0: string, arg1: () => void, arg2: boolean) => void,\n          },\n          type: string, listener: () => void, useCapture: boolean): void {\n        this.removeEventListener(type, listener, useCapture);\n        // @ts-ignore:\n        if (this['on' + type]) {\n          // @ts-ignore:\n          this['on' + type] = undefined;\n        }\n      }\n\n      return this.#eventTarget\n                 .callFunction(\n                     // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n                     // @ts-expect-error\n                     removeListener,\n                     [\n                       RemoteObject.toCallArgument(this.#typeInternal),\n                       RemoteObject.toCallArgument(this.#originalHandlerInternal),\n                       RemoteObject.toCallArgument(this.#useCaptureInternal),\n                     ])\n                 .then(() => undefined) as Promise<undefined>;\n    }\n\n    if (this.#customRemoveFunction) {\n      function callCustomRemove(\n          this: (arg0: string, arg1: () => void, arg2: boolean, arg3: boolean) => void, type: string,\n          listener: () => void, useCapture: boolean, passive: boolean): void {\n        this.call(null, type, listener, useCapture, passive);\n      }\n\n      return this.#customRemoveFunction\n          .callFunction(\n              // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n              // @ts-expect-error\n              callCustomRemove,\n              [\n                RemoteObject.toCallArgument(this.#typeInternal),\n                RemoteObject.toCallArgument(this.#originalHandlerInternal),\n                RemoteObject.toCallArgument(this.#useCaptureInternal),\n                RemoteObject.toCallArgument(this.#passiveInternal),\n              ])\n          .then(() => undefined);\n    }\n    return Promise.resolve(undefined);\n  }\n\n  canTogglePassive(): boolean {\n    return this.#originInternal !== EventListener.Origin.FrameworkUser;\n  }\n\n  togglePassive(): Promise<undefined> {\n    return this.#eventTarget\n        .callFunction(\n            // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n            // @ts-expect-error\n            callTogglePassive,\n            [\n              RemoteObject.toCallArgument(this.#typeInternal),\n              RemoteObject.toCallArgument(this.#originalHandlerInternal),\n              RemoteObject.toCallArgument(this.#useCaptureInternal),\n              RemoteObject.toCallArgument(this.#passiveInternal),\n            ])\n        .then(() => undefined);\n\n    function callTogglePassive(\n        this: {\n          addEventListener: (arg0: string, arg1: () => void, arg2: {\n            capture: boolean,\n            passive: boolean,\n          }) => void,\n          removeEventListener: (arg0: string, arg1: () => void, arg2: {\n            capture: boolean,\n          }) => void,\n        },\n        type: string, listener: () => void, useCapture: boolean, passive: boolean): void {\n      this.removeEventListener(type, listener, {capture: useCapture});\n      this.addEventListener(type, listener, {capture: useCapture, passive: !passive});\n    }\n  }\n\n  origin(): string {\n    return this.#originInternal;\n  }\n\n  markAsFramework(): void {\n    this.#originInternal = EventListener.Origin.Framework;\n  }\n\n  isScrollBlockingType(): boolean {\n    return this.#typeInternal === 'touchstart' || this.#typeInternal === 'touchmove' ||\n        this.#typeInternal === 'mousewheel' || this.#typeInternal === 'wheel';\n  }\n}\n\nexport namespace EventListener {\n  // TODO(crbug.com/1167717): Make this a const enum again\n  // eslint-disable-next-line rulesdir/const_enum\n  export enum Origin {\n    Raw = 'Raw',\n    Framework = 'Framework',\n    FrameworkUser = 'FrameworkUser',\n  }\n}\n\nexport class CSPViolationBreakpoint extends CategorizedBreakpoint {\n  readonly #typeInternal: Protocol.DOMDebugger.CSPViolationType;\n  constructor(category: string, title: string, type: Protocol.DOMDebugger.CSPViolationType) {\n    super(category, title);\n    this.#typeInternal = type;\n  }\n\n  type(): Protocol.DOMDebugger.CSPViolationType {\n    return this.#typeInternal;\n  }\n}\n\nexport class DOMEventListenerBreakpoint extends CategorizedBreakpoint {\n  readonly instrumentationName: string;\n  readonly eventName: string;\n  readonly eventTargetNames: string[];\n  constructor(\n      instrumentationName: string, eventName: string, eventTargetNames: string[], category: string, title: string) {\n    super(category, title);\n    this.instrumentationName = instrumentationName;\n    this.eventName = eventName;\n    this.eventTargetNames = eventTargetNames;\n  }\n\n  setEnabled(enabled: boolean): void {\n    if (this.enabled() === enabled) {\n      return;\n    }\n    super.setEnabled(enabled);\n    for (const model of TargetManager.instance().models(DOMDebuggerModel)) {\n      this.updateOnModel(model);\n    }\n  }\n\n  updateOnModel(model: DOMDebuggerModel): void {\n    if (this.instrumentationName) {\n      if (this.enabled()) {\n        void model.agent.invoke_setInstrumentationBreakpoint({eventName: this.instrumentationName});\n      } else {\n        void model.agent.invoke_removeInstrumentationBreakpoint({eventName: this.instrumentationName});\n      }\n    } else {\n      for (const eventTargetName of this.eventTargetNames) {\n        if (this.enabled()) {\n          void model.agent.invoke_setEventListenerBreakpoint({eventName: this.eventName, targetName: eventTargetName});\n        } else {\n          void model.agent.invoke_removeEventListenerBreakpoint(\n              {eventName: this.eventName, targetName: eventTargetName});\n        }\n      }\n    }\n  }\n\n  static readonly listener = 'listener:';\n  static readonly instrumentation = 'instrumentation:';\n}\n\nlet domDebuggerManagerInstance: DOMDebuggerManager;\n\nexport class DOMDebuggerManager implements SDKModelObserver<DOMDebuggerModel> {\n  readonly #xhrBreakpointsSetting: Common.Settings.Setting<{url: string, enabled: boolean}[]>;\n  readonly #xhrBreakpointsInternal: Map<string, boolean>;\n  readonly #cspViolationsToBreakOn: CSPViolationBreakpoint[];\n  readonly #eventListenerBreakpointsInternal: DOMEventListenerBreakpoint[];\n\n  constructor() {\n    this.#xhrBreakpointsSetting = Common.Settings.Settings.instance().createLocalSetting('xhrBreakpoints', []);\n    this.#xhrBreakpointsInternal = new Map();\n    for (const breakpoint of this.#xhrBreakpointsSetting.get()) {\n      this.#xhrBreakpointsInternal.set(breakpoint.url, breakpoint.enabled);\n    }\n\n    this.#cspViolationsToBreakOn = [];\n    this.#cspViolationsToBreakOn.push(new CSPViolationBreakpoint(\n        i18nString(UIStrings.trustedTypeViolations), i18nString(UIStrings.sinkViolations),\n        Protocol.DOMDebugger.CSPViolationType.TrustedtypeSinkViolation));\n    this.#cspViolationsToBreakOn.push(new CSPViolationBreakpoint(\n        i18nString(UIStrings.trustedTypeViolations), i18nString(UIStrings.policyViolations),\n        Protocol.DOMDebugger.CSPViolationType.TrustedtypePolicyViolation));\n\n    this.#eventListenerBreakpointsInternal = [];\n    this.createInstrumentationBreakpoints(\n        i18nString(UIStrings.animation),\n        ['requestAnimationFrame', 'cancelAnimationFrame', 'requestAnimationFrame.callback']);\n    this.createInstrumentationBreakpoints(\n        i18nString(UIStrings.canvas), ['canvasContextCreated', 'webglErrorFired', 'webglWarningFired']);\n    this.createInstrumentationBreakpoints(\n        i18nString(UIStrings.geolocation), ['Geolocation.getCurrentPosition', 'Geolocation.watchPosition']);\n    this.createInstrumentationBreakpoints(i18nString(UIStrings.notification), ['Notification.requestPermission']);\n    this.createInstrumentationBreakpoints(i18nString(UIStrings.parse), ['Element.setInnerHTML', 'Document.write']);\n    this.createInstrumentationBreakpoints(i18nString(UIStrings.script), ['scriptFirstStatement', 'scriptBlockedByCSP']);\n    this.createInstrumentationBreakpoints(\n        i18nString(UIStrings.timer),\n        ['setTimeout', 'clearTimeout', 'setInterval', 'clearInterval', 'setTimeout.callback', 'setInterval.callback']);\n    this.createInstrumentationBreakpoints(i18nString(UIStrings.window), ['DOMWindow.close']);\n    this.createInstrumentationBreakpoints(\n        i18nString(UIStrings.webaudio),\n        ['audioContextCreated', 'audioContextClosed', 'audioContextResumed', 'audioContextSuspended']);\n\n    this.createEventListenerBreakpoints(\n        i18nString(UIStrings.media),\n        [\n          'play',      'pause',          'playing',    'canplay',    'canplaythrough', 'seeking',\n          'seeked',    'timeupdate',     'ended',      'ratechange', 'durationchange', 'volumechange',\n          'loadstart', 'progress',       'suspend',    'abort',      'error',          'emptied',\n          'stalled',   'loadedmetadata', 'loadeddata', 'waiting',\n        ],\n        ['audio', 'video']);\n    this.createEventListenerBreakpoints(\n        i18nString(UIStrings.pictureinpicture), ['enterpictureinpicture', 'leavepictureinpicture'], ['video']);\n    this.createEventListenerBreakpoints(i18nString(UIStrings.pictureinpicture), ['resize'], ['PictureInPictureWindow']);\n    this.createEventListenerBreakpoints(\n        i18nString(UIStrings.clipboard), ['copy', 'cut', 'paste', 'beforecopy', 'beforecut', 'beforepaste'], ['*']);\n    this.createEventListenerBreakpoints(\n        i18nString(UIStrings.control),\n        ['resize', 'scroll', 'zoom', 'focus', 'blur', 'select', 'change', 'submit', 'reset'], ['*']);\n    this.createEventListenerBreakpoints(i18nString(UIStrings.device), ['deviceorientation', 'devicemotion'], ['*']);\n    this.createEventListenerBreakpoints(\n        i18nString(UIStrings.domMutation),\n        [\n          'DOMActivate',\n          'DOMFocusIn',\n          'DOMFocusOut',\n          'DOMAttrModified',\n          'DOMCharacterDataModified',\n          'DOMNodeInserted',\n          'DOMNodeInsertedIntoDocument',\n          'DOMNodeRemoved',\n          'DOMNodeRemovedFromDocument',\n          'DOMSubtreeModified',\n          'DOMContentLoaded',\n        ],\n        ['*']);\n    this.createEventListenerBreakpoints(\n        i18nString(UIStrings.dragDrop), ['drag', 'dragstart', 'dragend', 'dragenter', 'dragover', 'dragleave', 'drop'],\n        ['*']);\n\n    this.createEventListenerBreakpoints(\n        i18nString(UIStrings.keyboard), ['keydown', 'keyup', 'keypress', 'input'], ['*']);\n    this.createEventListenerBreakpoints(\n        i18nString(UIStrings.load),\n        [\n          'load',\n          'beforeunload',\n          'unload',\n          'abort',\n          'error',\n          'hashchange',\n          'popstate',\n          'navigate',\n          'navigatesuccess',\n          'navigateerror',\n          'currentchange',\n          'navigateto',\n          'navigatefrom',\n          'finish',\n          'dispose',\n        ],\n        ['*']);\n    this.createEventListenerBreakpoints(\n        i18nString(UIStrings.mouse),\n        [\n          'auxclick',\n          'click',\n          'dblclick',\n          'mousedown',\n          'mouseup',\n          'mouseover',\n          'mousemove',\n          'mouseout',\n          'mouseenter',\n          'mouseleave',\n          'mousewheel',\n          'wheel',\n          'contextmenu',\n        ],\n        ['*']);\n    this.createEventListenerBreakpoints(\n        i18nString(UIStrings.pointer),\n        [\n          'pointerover',\n          'pointerout',\n          'pointerenter',\n          'pointerleave',\n          'pointerdown',\n          'pointerup',\n          'pointermove',\n          'pointercancel',\n          'gotpointercapture',\n          'lostpointercapture',\n          'pointerrawupdate',\n        ],\n        ['*']);\n    this.createEventListenerBreakpoints(\n        i18nString(UIStrings.touch), ['touchstart', 'touchmove', 'touchend', 'touchcancel'], ['*']);\n    this.createEventListenerBreakpoints(i18nString(UIStrings.worker), ['message', 'messageerror'], ['*']);\n    this.createEventListenerBreakpoints(\n        i18nString(UIStrings.xhr),\n        ['readystatechange', 'load', 'loadstart', 'loadend', 'abort', 'error', 'progress', 'timeout'],\n        ['xmlhttprequest', 'xmlhttprequestupload']);\n\n    for (const [name, newTitle] of getInstrumentationBreakpointTitles()) {\n      const breakpoint = this.resolveEventListenerBreakpointInternal('instrumentation:' + name);\n      if (breakpoint) {\n        breakpoint.setTitle(newTitle);\n      }\n    }\n\n    TargetManager.instance().observeModels(DOMDebuggerModel, this);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): DOMDebuggerManager {\n    const {forceNew} = opts;\n    if (!domDebuggerManagerInstance || forceNew) {\n      domDebuggerManagerInstance = new DOMDebuggerManager();\n    }\n\n    return domDebuggerManagerInstance;\n  }\n\n  cspViolationBreakpoints(): CSPViolationBreakpoint[] {\n    return this.#cspViolationsToBreakOn.slice();\n  }\n\n  private createInstrumentationBreakpoints(category: string, instrumentationNames: string[]): void {\n    for (const instrumentationName of instrumentationNames) {\n      this.#eventListenerBreakpointsInternal.push(\n          new DOMEventListenerBreakpoint(instrumentationName, '', [], category, instrumentationName));\n    }\n  }\n\n  private createEventListenerBreakpoints(category: string, eventNames: string[], eventTargetNames: string[]): void {\n    for (const eventName of eventNames) {\n      this.#eventListenerBreakpointsInternal.push(\n          new DOMEventListenerBreakpoint('', eventName, eventTargetNames, category, eventName));\n    }\n  }\n\n  private resolveEventListenerBreakpointInternal(eventName: string, eventTargetName?: string):\n      DOMEventListenerBreakpoint|null {\n    const instrumentationPrefix = 'instrumentation:';\n    const listenerPrefix = 'listener:';\n    let instrumentationName = '';\n    if (eventName.startsWith(instrumentationPrefix)) {\n      instrumentationName = eventName.substring(instrumentationPrefix.length);\n      eventName = '';\n    } else if (eventName.startsWith(listenerPrefix)) {\n      eventName = eventName.substring(listenerPrefix.length);\n    } else {\n      return null;\n    }\n    eventTargetName = (eventTargetName || '*').toLowerCase();\n    let result: DOMEventListenerBreakpoint|null = null;\n    for (const breakpoint of this.#eventListenerBreakpointsInternal) {\n      if (instrumentationName && breakpoint.instrumentationName === instrumentationName) {\n        result = breakpoint;\n      }\n      if (eventName && breakpoint.eventName === eventName &&\n          breakpoint.eventTargetNames.indexOf(eventTargetName) !== -1) {\n        result = breakpoint;\n      }\n      if (!result && eventName && breakpoint.eventName === eventName &&\n          breakpoint.eventTargetNames.indexOf('*') !== -1) {\n        result = breakpoint;\n      }\n    }\n    return result;\n  }\n\n  eventListenerBreakpoints(): DOMEventListenerBreakpoint[] {\n    return this.#eventListenerBreakpointsInternal.slice();\n  }\n\n  resolveEventListenerBreakpointTitle(auxData: {\n    eventName: string,\n    webglErrorName: string,\n    directiveText: string,\n    targetName: string,\n  }): string {\n    const id = auxData['eventName'];\n    if (id === 'instrumentation:webglErrorFired' && auxData['webglErrorName']) {\n      let errorName: string = auxData['webglErrorName'];\n      // If there is a hex code of the error, display only this.\n      errorName = errorName.replace(/^.*(0x[0-9a-f]+).*$/i, '$1');\n      return i18nString(UIStrings.webglErrorFiredS, {PH1: errorName});\n    }\n    if (id === 'instrumentation:scriptBlockedByCSP' && auxData['directiveText']) {\n      return i18nString(UIStrings.scriptBlockedDueToContent, {PH1: auxData['directiveText']});\n    }\n    const breakpoint = this.resolveEventListenerBreakpointInternal(id, auxData['targetName']);\n    if (!breakpoint) {\n      return '';\n    }\n    if (auxData['targetName']) {\n      return auxData['targetName'] + '.' + breakpoint.title();\n    }\n    return breakpoint.title();\n  }\n\n  resolveEventListenerBreakpoint(auxData: {\n    eventName: string,\n    targetName: string,\n  }): DOMEventListenerBreakpoint|null {\n    return this.resolveEventListenerBreakpointInternal(auxData['eventName'], auxData['targetName']);\n  }\n\n  updateCSPViolationBreakpoints(): void {\n    const violationTypes = this.#cspViolationsToBreakOn.filter(v => v.enabled()).map(v => v.type());\n    for (const model of TargetManager.instance().models(DOMDebuggerModel)) {\n      this.updateCSPViolationBreakpointsForModel(model, violationTypes);\n    }\n  }\n\n  private updateCSPViolationBreakpointsForModel(\n      model: DOMDebuggerModel, violationTypes: Protocol.DOMDebugger.CSPViolationType[]): void {\n    void model.agent.invoke_setBreakOnCSPViolation({violationTypes: violationTypes});\n  }\n\n  xhrBreakpoints(): Map<string, boolean> {\n    return this.#xhrBreakpointsInternal;\n  }\n\n  private saveXHRBreakpoints(): void {\n    const breakpoints = [];\n    for (const url of this.#xhrBreakpointsInternal.keys()) {\n      breakpoints.push({url: url, enabled: this.#xhrBreakpointsInternal.get(url) || false});\n    }\n    this.#xhrBreakpointsSetting.set(breakpoints);\n  }\n\n  addXHRBreakpoint(url: string, enabled: boolean): void {\n    this.#xhrBreakpointsInternal.set(url, enabled);\n    if (enabled) {\n      for (const model of TargetManager.instance().models(DOMDebuggerModel)) {\n        void model.agent.invoke_setXHRBreakpoint({url});\n      }\n    }\n    this.saveXHRBreakpoints();\n  }\n\n  removeXHRBreakpoint(url: string): void {\n    const enabled = this.#xhrBreakpointsInternal.get(url);\n    this.#xhrBreakpointsInternal.delete(url);\n    if (enabled) {\n      for (const model of TargetManager.instance().models(DOMDebuggerModel)) {\n        void model.agent.invoke_removeXHRBreakpoint({url});\n      }\n    }\n    this.saveXHRBreakpoints();\n  }\n\n  toggleXHRBreakpoint(url: string, enabled: boolean): void {\n    this.#xhrBreakpointsInternal.set(url, enabled);\n    for (const model of TargetManager.instance().models(DOMDebuggerModel)) {\n      if (enabled) {\n        void model.agent.invoke_setXHRBreakpoint({url});\n      } else {\n        void model.agent.invoke_removeXHRBreakpoint({url});\n      }\n    }\n    this.saveXHRBreakpoints();\n  }\n\n  modelAdded(domDebuggerModel: DOMDebuggerModel): void {\n    for (const url of this.#xhrBreakpointsInternal.keys()) {\n      if (this.#xhrBreakpointsInternal.get(url)) {\n        void domDebuggerModel.agent.invoke_setXHRBreakpoint({url: url});\n      }\n    }\n    for (const breakpoint of this.#eventListenerBreakpointsInternal) {\n      if (breakpoint.enabled()) {\n        breakpoint.updateOnModel(domDebuggerModel);\n      }\n    }\n    const violationTypes = this.#cspViolationsToBreakOn.filter(v => v.enabled()).map(v => v.type());\n    this.updateCSPViolationBreakpointsForModel(domDebuggerModel, violationTypes);\n  }\n\n  modelRemoved(_domDebuggerModel: DOMDebuggerModel): void {\n  }\n}\n\nSDKModel.register(DOMDebuggerModel, {capabilities: Capability.DOM, autostart: false});\n"],
  "mappings": "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",
  "names": []
}
