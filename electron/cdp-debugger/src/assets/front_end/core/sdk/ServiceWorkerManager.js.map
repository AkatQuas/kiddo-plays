{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/ServiceWorkerManager.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the #name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../common/common.js';\nimport * as i18n from '../i18n/i18n.js';\nimport type * as Platform from '../platform/platform.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport type {ExecutionContext} from './RuntimeModel.js';\nimport {Events as RuntimeModelEvents, RuntimeModel} from './RuntimeModel.js';\nimport type {Target} from './Target.js';\nimport {Capability, Type} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\nimport {TargetManager} from './TargetManager.js';\n\nconst UIStrings = {\n  /**\n  *@description Service worker running status displayed in the Service Workers view in the Application panel\n  */\n  running: 'running',\n  /**\n  *@description Service worker running status displayed in the Service Workers view in the Application panel\n  */\n  starting: 'starting',\n  /**\n  *@description Service worker running status displayed in the Service Workers view in the Application panel\n  */\n  stopped: 'stopped',\n  /**\n  *@description Service worker running status displayed in the Service Workers view in the Application panel\n  */\n  stopping: 'stopping',\n  /**\n  *@description Service worker version status displayed in the Threads view of the Debugging side pane in the Sources panel\n  */\n  activated: 'activated',\n  /**\n  *@description Service worker version status displayed in the Threads view of the Debugging side pane in the Sources panel\n  */\n  activating: 'activating',\n  /**\n  *@description Service worker version status displayed in the Threads view of the Debugging side pane in the Sources panel\n  */\n  installed: 'installed',\n  /**\n  *@description Service worker version status displayed in the Threads view of the Debugging side pane in the Sources panel\n  */\n  installing: 'installing',\n  /**\n  *@description Service worker version status displayed in the Threads view of the Debugging side pane in the Sources panel\n  */\n  new: 'new',\n  /**\n  *@description Service worker version status displayed in the Threads view of the Debugging side pane in the Sources panel\n  */\n  redundant: 'redundant',\n  /**\n  *@description Service worker version status displayed in the Threads view of the Debugging side pane in the Sources panel\n  *@example {sw.js} PH1\n  *@example {117} PH2\n  *@example {activated} PH3\n  */\n  sSS: '{PH1} #{PH2} ({PH3})',\n};\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/ServiceWorkerManager.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nexport class ServiceWorkerManager extends SDKModel<EventTypes> {\n  readonly #agent: ProtocolProxyApi.ServiceWorkerApi;\n  readonly #registrationsInternal: Map<string, ServiceWorkerRegistration>;\n  #enabled: boolean;\n  readonly #forceUpdateSetting: Common.Settings.Setting<boolean>;\n  serviceWorkerNetworkRequestsPanelStatus: {\n    isOpen: boolean,\n    openedAt: number,\n  };\n\n  constructor(target: Target) {\n    super(target);\n    target.registerServiceWorkerDispatcher(new ServiceWorkerDispatcher(this));\n    this.#agent = target.serviceWorkerAgent();\n    this.#registrationsInternal = new Map();\n    this.#enabled = false;\n    void this.enable();\n    this.#forceUpdateSetting = Common.Settings.Settings.instance().createSetting('serviceWorkerUpdateOnReload', false);\n    if (this.#forceUpdateSetting.get()) {\n      this.forceUpdateSettingChanged();\n    }\n    this.#forceUpdateSetting.addChangeListener(this.forceUpdateSettingChanged, this);\n    new ServiceWorkerContextNamer(target, this);\n\n    /** Status of service worker network requests panel */\n    this.serviceWorkerNetworkRequestsPanelStatus = {\n      isOpen: false,\n      openedAt: 0,\n    };\n  }\n\n  async enable(): Promise<void> {\n    if (this.#enabled) {\n      return;\n    }\n    this.#enabled = true;\n    await this.#agent.invoke_enable();\n  }\n\n  async disable(): Promise<void> {\n    if (!this.#enabled) {\n      return;\n    }\n    this.#enabled = false;\n    this.#registrationsInternal.clear();\n    await this.#agent.invoke_enable();\n  }\n\n  registrations(): Map<string, ServiceWorkerRegistration> {\n    return this.#registrationsInternal;\n  }\n\n  hasRegistrationForURLs(urls: string[]): boolean {\n    for (const registration of this.#registrationsInternal.values()) {\n      if (urls.filter(url => url && url.startsWith(registration.scopeURL)).length === urls.length) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  findVersion(versionId: string): ServiceWorkerVersion|null {\n    for (const registration of this.registrations().values()) {\n      const version = registration.versions.get(versionId);\n      if (version) {\n        return version;\n      }\n    }\n    return null;\n  }\n\n  deleteRegistration(registrationId: string): void {\n    const registration = this.#registrationsInternal.get(registrationId);\n    if (!registration) {\n      return;\n    }\n    if (registration.isRedundant()) {\n      this.#registrationsInternal.delete(registrationId);\n      this.dispatchEventToListeners(Events.RegistrationDeleted, registration);\n      return;\n    }\n    registration.deleting = true;\n    for (const version of registration.versions.values()) {\n      void this.stopWorker(version.id);\n    }\n    void this.unregister(registration.scopeURL);\n  }\n\n  async updateRegistration(registrationId: string): Promise<void> {\n    const registration = this.#registrationsInternal.get(registrationId);\n    if (!registration) {\n      return;\n    }\n    await this.#agent.invoke_updateRegistration({scopeURL: registration.scopeURL});\n  }\n\n  async deliverPushMessage(registrationId: Protocol.ServiceWorker.RegistrationID, data: string): Promise<void> {\n    const registration = this.#registrationsInternal.get(registrationId);\n    if (!registration) {\n      return;\n    }\n    const origin = Common.ParsedURL.ParsedURL.extractOrigin(registration.scopeURL);\n    await this.#agent.invoke_deliverPushMessage({origin, registrationId, data});\n  }\n\n  async dispatchSyncEvent(registrationId: Protocol.ServiceWorker.RegistrationID, tag: string, lastChance: boolean):\n      Promise<void> {\n    const registration = this.#registrationsInternal.get(registrationId);\n    if (!registration) {\n      return;\n    }\n    const origin = Common.ParsedURL.ParsedURL.extractOrigin(registration.scopeURL);\n    await this.#agent.invoke_dispatchSyncEvent({origin, registrationId, tag, lastChance});\n  }\n\n  async dispatchPeriodicSyncEvent(registrationId: Protocol.ServiceWorker.RegistrationID, tag: string): Promise<void> {\n    const registration = this.#registrationsInternal.get(registrationId);\n    if (!registration) {\n      return;\n    }\n    const origin = Common.ParsedURL.ParsedURL.extractOrigin(registration.scopeURL);\n    await this.#agent.invoke_dispatchPeriodicSyncEvent({origin, registrationId, tag});\n  }\n\n  private async unregister(scopeURL: string): Promise<void> {\n    await this.#agent.invoke_unregister({scopeURL});\n  }\n\n  async startWorker(scopeURL: string): Promise<void> {\n    await this.#agent.invoke_startWorker({scopeURL});\n  }\n\n  async skipWaiting(scopeURL: string): Promise<void> {\n    await this.#agent.invoke_skipWaiting({scopeURL});\n  }\n\n  async stopWorker(versionId: string): Promise<void> {\n    await this.#agent.invoke_stopWorker({versionId});\n  }\n\n  async inspectWorker(versionId: string): Promise<void> {\n    await this.#agent.invoke_inspectWorker({versionId});\n  }\n\n  workerRegistrationUpdated(registrations: Protocol.ServiceWorker.ServiceWorkerRegistration[]): void {\n    for (const payload of registrations) {\n      let registration = this.#registrationsInternal.get(payload.registrationId);\n      if (!registration) {\n        registration = new ServiceWorkerRegistration(payload);\n        this.#registrationsInternal.set(payload.registrationId, registration);\n        this.dispatchEventToListeners(Events.RegistrationUpdated, registration);\n        continue;\n      }\n      registration.update(payload);\n\n      if (registration.shouldBeRemoved()) {\n        this.#registrationsInternal.delete(registration.id);\n        this.dispatchEventToListeners(Events.RegistrationDeleted, registration);\n      } else {\n        this.dispatchEventToListeners(Events.RegistrationUpdated, registration);\n      }\n    }\n  }\n\n  workerVersionUpdated(versions: Protocol.ServiceWorker.ServiceWorkerVersion[]): void {\n    const registrations = new Set<ServiceWorkerRegistration>();\n    for (const payload of versions) {\n      const registration = this.#registrationsInternal.get(payload.registrationId);\n      if (!registration) {\n        continue;\n      }\n      registration.updateVersion(payload);\n      registrations.add(registration);\n    }\n    for (const registration of registrations) {\n      if (registration.shouldBeRemoved()) {\n        this.#registrationsInternal.delete(registration.id);\n        this.dispatchEventToListeners(Events.RegistrationDeleted, registration);\n      } else {\n        this.dispatchEventToListeners(Events.RegistrationUpdated, registration);\n      }\n    }\n  }\n\n  workerErrorReported(payload: Protocol.ServiceWorker.ServiceWorkerErrorMessage): void {\n    const registration = this.#registrationsInternal.get(payload.registrationId);\n    if (!registration) {\n      return;\n    }\n    registration.errors.push(payload);\n    this.dispatchEventToListeners(Events.RegistrationErrorAdded, {registration: registration, error: payload});\n  }\n\n  forceUpdateOnReloadSetting(): Common.Settings.Setting<boolean> {\n    return this.#forceUpdateSetting;\n  }\n\n  private forceUpdateSettingChanged(): void {\n    const forceUpdateOnPageLoad = this.#forceUpdateSetting.get();\n    void this.#agent.invoke_setForceUpdateOnPageLoad({forceUpdateOnPageLoad});\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  RegistrationUpdated = 'RegistrationUpdated',\n  RegistrationErrorAdded = 'RegistrationErrorAdded',\n  RegistrationDeleted = 'RegistrationDeleted',\n}\n\nexport interface RegistrationErrorAddedEvent {\n  registration: ServiceWorkerRegistration;\n  error: Protocol.ServiceWorker.ServiceWorkerErrorMessage;\n}\n\nexport type EventTypes = {\n  [Events.RegistrationUpdated]: ServiceWorkerRegistration,\n  [Events.RegistrationErrorAdded]: RegistrationErrorAddedEvent,\n  [Events.RegistrationDeleted]: ServiceWorkerRegistration,\n};\n\nclass ServiceWorkerDispatcher implements ProtocolProxyApi.ServiceWorkerDispatcher {\n  readonly #manager: ServiceWorkerManager;\n  constructor(manager: ServiceWorkerManager) {\n    this.#manager = manager;\n  }\n\n  workerRegistrationUpdated({registrations}: Protocol.ServiceWorker.WorkerRegistrationUpdatedEvent): void {\n    this.#manager.workerRegistrationUpdated(registrations);\n  }\n\n  workerVersionUpdated({versions}: Protocol.ServiceWorker.WorkerVersionUpdatedEvent): void {\n    this.#manager.workerVersionUpdated(versions);\n  }\n\n  workerErrorReported({errorMessage}: Protocol.ServiceWorker.WorkerErrorReportedEvent): void {\n    this.#manager.workerErrorReported(errorMessage);\n  }\n}\n\n/**\n * For every version, we keep a history of ServiceWorkerVersionState. Every time\n * a version is updated we will add a new state at the head of the history chain.\n * This history tells us information such as what the current state is, or when\n * the version becomes installed.\n */\nexport class ServiceWorkerVersionState {\n  runningStatus: Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus;\n  status: Protocol.ServiceWorker.ServiceWorkerVersionStatus;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  last_updated_timestamp: number;\n  previousState: ServiceWorkerVersionState|null;\n  constructor(\n      runningStatus: Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus,\n      status: Protocol.ServiceWorker.ServiceWorkerVersionStatus, previousState: ServiceWorkerVersionState|null,\n      timestamp: number) {\n    this.runningStatus = runningStatus;\n    this.status = status;\n    this.last_updated_timestamp = timestamp;\n    this.previousState = previousState;\n  }\n}\n\nexport class ServiceWorkerVersion {\n  id!: string;\n  scriptURL!: Platform.DevToolsPath.UrlString;\n  parsedURL!: Common.ParsedURL.ParsedURL;\n  securityOrigin!: string;\n  scriptLastModified!: number|undefined;\n  scriptResponseTime!: number|undefined;\n  controlledClients!: Protocol.Target.TargetID[];\n  targetId!: string|null;\n  currentState!: ServiceWorkerVersionState;\n  registration: ServiceWorkerRegistration;\n  constructor(registration: ServiceWorkerRegistration, payload: Protocol.ServiceWorker.ServiceWorkerVersion) {\n    this.registration = registration;\n    this.update(payload);\n  }\n\n  update(payload: Protocol.ServiceWorker.ServiceWorkerVersion): void {\n    this.id = payload.versionId;\n    this.scriptURL = payload.scriptURL as Platform.DevToolsPath.UrlString;\n    const parsedURL = new Common.ParsedURL.ParsedURL(payload.scriptURL);\n    this.securityOrigin = parsedURL.securityOrigin();\n    this.currentState =\n        new ServiceWorkerVersionState(payload.runningStatus, payload.status, this.currentState, Date.now());\n    this.scriptLastModified = payload.scriptLastModified;\n    this.scriptResponseTime = payload.scriptResponseTime;\n    if (payload.controlledClients) {\n      this.controlledClients = payload.controlledClients.slice();\n    } else {\n      this.controlledClients = [];\n    }\n    this.targetId = payload.targetId || null;\n  }\n\n  isStartable(): boolean {\n    return !this.registration.isDeleted && this.isActivated() && this.isStopped();\n  }\n\n  isStoppedAndRedundant(): boolean {\n    return this.runningStatus === Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Stopped &&\n        this.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Redundant;\n  }\n\n  isStopped(): boolean {\n    return this.runningStatus === Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Stopped;\n  }\n\n  isStarting(): boolean {\n    return this.runningStatus === Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Starting;\n  }\n\n  isRunning(): boolean {\n    return this.runningStatus === Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Running;\n  }\n\n  isStopping(): boolean {\n    return this.runningStatus === Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Stopping;\n  }\n\n  isNew(): boolean {\n    return this.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.New;\n  }\n\n  isInstalling(): boolean {\n    return this.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installing;\n  }\n\n  isInstalled(): boolean {\n    return this.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installed;\n  }\n\n  isActivating(): boolean {\n    return this.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activating;\n  }\n\n  isActivated(): boolean {\n    return this.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activated;\n  }\n\n  isRedundant(): boolean {\n    return this.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Redundant;\n  }\n\n  get status(): Protocol.ServiceWorker.ServiceWorkerVersionStatus {\n    return this.currentState.status;\n  }\n\n  get runningStatus(): Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus {\n    return this.currentState.runningStatus;\n  }\n\n  mode(): string {\n    if (this.isNew() || this.isInstalling()) {\n      return ServiceWorkerVersion.Modes.Installing;\n    }\n    if (this.isInstalled()) {\n      return ServiceWorkerVersion.Modes.Waiting;\n    }\n    if (this.isActivating() || this.isActivated()) {\n      return ServiceWorkerVersion.Modes.Active;\n    }\n    return ServiceWorkerVersion.Modes.Redundant;\n  }\n}\n\nexport namespace ServiceWorkerVersion {\n  export const RunningStatus = {\n    [Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Running]: i18nLazyString(UIStrings.running),\n    [Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Starting]: i18nLazyString(UIStrings.starting),\n    [Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Stopped]: i18nLazyString(UIStrings.stopped),\n    [Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Stopping]: i18nLazyString(UIStrings.stopping),\n  };\n\n  export const Status = {\n    [Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activated]: i18nLazyString(UIStrings.activated),\n    [Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activating]: i18nLazyString(UIStrings.activating),\n    [Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installed]: i18nLazyString(UIStrings.installed),\n    [Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installing]: i18nLazyString(UIStrings.installing),\n    [Protocol.ServiceWorker.ServiceWorkerVersionStatus.New]: i18nLazyString(UIStrings.new),\n    [Protocol.ServiceWorker.ServiceWorkerVersionStatus.Redundant]: i18nLazyString(UIStrings.redundant),\n  };\n\n  // TODO(crbug.com/1167717): Make this a const enum again\n  // eslint-disable-next-line rulesdir/const_enum\n  export enum Modes {\n    Installing = 'installing',\n    Waiting = 'waiting',\n    Active = 'active',\n    Redundant = 'redundant',\n  }\n}\n\nexport class ServiceWorkerRegistration {\n  #fingerprintInternal!: symbol;\n  id!: Protocol.ServiceWorker.RegistrationID;\n  scopeURL!: Platform.DevToolsPath.UrlString;\n  securityOrigin!: Platform.DevToolsPath.UrlString;\n  isDeleted!: boolean;\n  versions: Map<string, ServiceWorkerVersion>;\n  deleting: boolean;\n  errors: Protocol.ServiceWorker.ServiceWorkerErrorMessage[];\n\n  constructor(payload: Protocol.ServiceWorker.ServiceWorkerRegistration) {\n    this.update(payload);\n    this.versions = new Map();\n    this.deleting = false;\n    this.errors = [];\n  }\n\n  update(payload: Protocol.ServiceWorker.ServiceWorkerRegistration): void {\n    this.#fingerprintInternal = Symbol('fingerprint');\n    this.id = payload.registrationId;\n    this.scopeURL = payload.scopeURL as Platform.DevToolsPath.UrlString;\n    const parsedURL = new Common.ParsedURL.ParsedURL(payload.scopeURL);\n    this.securityOrigin = parsedURL.securityOrigin();\n    this.isDeleted = payload.isDeleted;\n  }\n\n  fingerprint(): symbol {\n    return this.#fingerprintInternal;\n  }\n\n  versionsByMode(): Map<string, ServiceWorkerVersion> {\n    const result = new Map<string, ServiceWorkerVersion>();\n    for (const version of this.versions.values()) {\n      result.set(version.mode(), version);\n    }\n    return result;\n  }\n\n  updateVersion(payload: Protocol.ServiceWorker.ServiceWorkerVersion): ServiceWorkerVersion {\n    this.#fingerprintInternal = Symbol('fingerprint');\n    let version = this.versions.get(payload.versionId);\n    if (!version) {\n      version = new ServiceWorkerVersion(this, payload);\n      this.versions.set(payload.versionId, version);\n      return version;\n    }\n    version.update(payload);\n    return version;\n  }\n\n  isRedundant(): boolean {\n    for (const version of this.versions.values()) {\n      if (!version.isStoppedAndRedundant()) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  shouldBeRemoved(): boolean {\n    return this.isRedundant() && (!this.errors.length || this.deleting);\n  }\n\n  canBeRemoved(): boolean {\n    return this.isDeleted || this.deleting;\n  }\n\n  clearErrors(): void {\n    this.#fingerprintInternal = Symbol('fingerprint');\n    this.errors = [];\n  }\n}\n\nclass ServiceWorkerContextNamer {\n  readonly #target: Target;\n  readonly #serviceWorkerManager: ServiceWorkerManager;\n  readonly #versionByTargetId: Map<string, ServiceWorkerVersion>;\n\n  constructor(target: Target, serviceWorkerManager: ServiceWorkerManager) {\n    this.#target = target;\n    this.#serviceWorkerManager = serviceWorkerManager;\n    this.#versionByTargetId = new Map();\n    serviceWorkerManager.addEventListener(Events.RegistrationUpdated, this.registrationsUpdated, this);\n    serviceWorkerManager.addEventListener(Events.RegistrationDeleted, this.registrationsUpdated, this);\n    TargetManager.instance().addModelListener(\n        RuntimeModel, RuntimeModelEvents.ExecutionContextCreated, this.executionContextCreated, this);\n  }\n\n  private registrationsUpdated(): void {\n    this.#versionByTargetId.clear();\n    const registrations = this.#serviceWorkerManager.registrations().values();\n    for (const registration of registrations) {\n      for (const version of registration.versions.values()) {\n        if (version.targetId) {\n          this.#versionByTargetId.set(version.targetId, version);\n        }\n      }\n    }\n    this.updateAllContextLabels();\n  }\n\n  private executionContextCreated(event: Common.EventTarget.EventTargetEvent<ExecutionContext>): void {\n    const executionContext = event.data;\n    const serviceWorkerTargetId = this.serviceWorkerTargetId(executionContext.target());\n    if (!serviceWorkerTargetId) {\n      return;\n    }\n    this.updateContextLabel(executionContext, this.#versionByTargetId.get(serviceWorkerTargetId) || null);\n  }\n\n  private serviceWorkerTargetId(target: Target): string|null {\n    if (target.parentTarget() !== this.#target || target.type() !== Type.ServiceWorker) {\n      return null;\n    }\n    return target.id();\n  }\n\n  private updateAllContextLabels(): void {\n    for (const target of TargetManager.instance().targets()) {\n      const serviceWorkerTargetId = this.serviceWorkerTargetId(target);\n      if (!serviceWorkerTargetId) {\n        continue;\n      }\n      const version = this.#versionByTargetId.get(serviceWorkerTargetId) || null;\n      const runtimeModel = target.model(RuntimeModel);\n      const executionContexts = runtimeModel ? runtimeModel.executionContexts() : [];\n      for (const context of executionContexts) {\n        this.updateContextLabel(context, version);\n      }\n    }\n  }\n\n  private updateContextLabel(context: ExecutionContext, version: ServiceWorkerVersion|null): void {\n    if (!version) {\n      context.setLabel('');\n      return;\n    }\n    const parsedUrl = Common.ParsedURL.ParsedURL.fromString(context.origin);\n    const label = parsedUrl ? parsedUrl.lastPathComponentWithFragment() : context.name;\n    const localizedStatus = ServiceWorkerVersion.Status[version.status];\n    context.setLabel(i18nString(UIStrings.sSS, {PH1: label, PH2: version.id, PH3: localizedStatus()}));\n  }\n}\n\nSDKModel.register(ServiceWorkerManager, {capabilities: Capability.ServiceWorker, autostart: true});\n"],
  "mappings": "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",
  "names": []
}
