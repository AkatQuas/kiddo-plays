{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/DebuggerModel.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2010 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the #name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../common/common.js';\nimport * as Host from '../host/host.js';\nimport * as i18n from '../i18n/i18n.js';\nimport * as Platform from '../platform/platform.js';\nimport * as Root from '../root/root.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport type {GetPropertiesResult, RemoteObject} from './RemoteObject.js';\nimport {ScopeRef} from './RemoteObject.js';\nimport {Events as ResourceTreeModelEvents, ResourceTreeModel} from './ResourceTreeModel.js';\nimport type {EvaluationOptions, EvaluationResult, ExecutionContext} from './RuntimeModel.js';\nimport {RuntimeModel} from './RuntimeModel.js';\nimport {Script} from './Script.js';\nimport type {Target} from './Target.js';\nimport {Capability, Type} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\nimport {SourceMapManager} from './SourceMapManager.js';\n\nconst UIStrings = {\n  /**\n  *@description Title of a section in the debugger showing local JavaScript variables.\n  */\n  local: 'Local',\n  /**\n  *@description Text that refers to closure as a programming term\n  */\n  closure: 'Closure',\n  /**\n  *@description Noun that represents a section or block of code in the Debugger Model. Shown in the Sources tab, while paused on a breakpoint.\n  */\n  block: 'Block',\n  /**\n  *@description Label for a group of JavaScript files\n  */\n  script: 'Script',\n  /**\n  *@description Title of a section in the debugger showing JavaScript variables from the a 'with'\n  *block. Block here means section of code, 'with' refers to a JavaScript programming concept and\n  *is a fixed term.\n  */\n  withBlock: '`With` block',\n  /**\n  *@description Title of a section in the debugger showing JavaScript variables from the a 'catch'\n  *block. Block here means section of code, 'catch' refers to a JavaScript programming concept and\n  *is a fixed term.\n  */\n  catchBlock: '`Catch` block',\n  /**\n  *@description Title of a section in the debugger showing JavaScript variables from the global scope.\n  */\n  global: 'Global',\n  /**\n  *@description Text for a JavaScript module, the programming concept\n  */\n  module: 'Module',\n  /**\n  *@description Text describing the expression scope in WebAssembly\n  */\n  expression: 'Expression',\n};\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/DebuggerModel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport function sortAndMergeRanges(locationRanges: LocationRange[]): LocationRange[] {\n  if (locationRanges.length === 0) {\n    return [];\n  }\n  locationRanges.sort(LocationRange.comparator);\n  let prev: LocationRange = locationRanges[0];\n  const merged = [];\n  for (let i = 1; i < locationRanges.length; ++i) {\n    const current = locationRanges[i];\n    if (prev.overlap(current)) {\n      const largerEnd = prev.end.compareTo(current.end) > 0 ? prev.end : current.end;\n      prev = new LocationRange(prev.scriptId, prev.start, largerEnd);\n    } else {\n      merged.push(prev);\n      prev = current;\n    }\n  }\n  merged.push(prev);\n  return merged;\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum StepMode {\n  StepInto = 'StepInto',\n  StepOut = 'StepOut',\n  StepOver = 'StepOver',\n}\n\nexport class DebuggerModel extends SDKModel<EventTypes> {\n  readonly agent: ProtocolProxyApi.DebuggerApi;\n  runtimeModelInternal: RuntimeModel;\n  readonly #sourceMapManagerInternal: SourceMapManager<Script>;\n  readonly #sourceMapIdToScript: Map<string, Script>;\n  #debuggerPausedDetailsInternal: DebuggerPausedDetails|null;\n  readonly #scriptsInternal: Map<string, Script>;\n  readonly #scriptsBySourceURL: Map<string, Script[]>;\n  #discardableScripts: Script[];\n  continueToLocationCallback: ((arg0: DebuggerPausedDetails) => boolean)|null;\n  #selectedCallFrameInternal: CallFrame|null;\n  #debuggerEnabledInternal: boolean;\n  #debuggerId: string|null;\n  #skipAllPausesTimeout: number;\n  #beforePausedCallback: ((arg0: DebuggerPausedDetails) => boolean)|null;\n  #computeAutoStepRangesCallback: ((arg0: StepMode, arg1: CallFrame) => Promise<Array<{\n                                     start: Location,\n                                     end: Location,\n                                   }>>)|null;\n  #expandCallFramesCallback: ((arg0: Array<CallFrame>) => Promise<Array<CallFrame>>)|null;\n  evaluateOnCallFrameCallback: ((arg0: CallFrame, arg1: EvaluationOptions) => Promise<EvaluationResult|null>)|null;\n  #synchronizeBreakpointsCallback: ((script: Script) => Promise<void>)|null;\n  // We need to be able to register listeners for individual breakpoints. As such, we dispatch\n  // on breakpoint ids, which are not statically known. The event #payload will always be a `Location`.\n  readonly #breakpointResolvedEventTarget =\n      new Common.ObjectWrapper.ObjectWrapper<{[breakpointId: string]: Location}>();\n  #autoStepOver: boolean;\n  #isPausingInternal: boolean;\n\n  constructor(target: Target) {\n    super(target);\n\n    target.registerDebuggerDispatcher(new DebuggerDispatcher(this));\n    this.agent = target.debuggerAgent();\n    this.runtimeModelInternal = (target.model(RuntimeModel) as RuntimeModel);\n\n    this.#sourceMapManagerInternal = new SourceMapManager(target);\n    this.#sourceMapIdToScript = new Map();\n\n    this.#debuggerPausedDetailsInternal = null;\n    this.#scriptsInternal = new Map();\n    this.#scriptsBySourceURL = new Map();\n    this.#discardableScripts = [];\n    this.continueToLocationCallback = null;\n    this.#selectedCallFrameInternal = null;\n    this.#debuggerEnabledInternal = false;\n    this.#debuggerId = null;\n    this.#skipAllPausesTimeout = 0;\n    this.#beforePausedCallback = null;\n    this.#computeAutoStepRangesCallback = null;\n    this.#expandCallFramesCallback = null;\n    this.evaluateOnCallFrameCallback = null;\n    this.#synchronizeBreakpointsCallback = null;\n\n    this.#autoStepOver = false;\n\n    this.#isPausingInternal = false;\n    Common.Settings.Settings.instance()\n        .moduleSetting('pauseOnExceptionEnabled')\n        .addChangeListener(this.pauseOnExceptionStateChanged, this);\n    Common.Settings.Settings.instance()\n        .moduleSetting('pauseOnCaughtException')\n        .addChangeListener(this.pauseOnExceptionStateChanged, this);\n    Common.Settings.Settings.instance()\n        .moduleSetting('disableAsyncStackTraces')\n        .addChangeListener(this.asyncStackTracesStateChanged, this);\n    Common.Settings.Settings.instance()\n        .moduleSetting('breakpointsActive')\n        .addChangeListener(this.breakpointsActiveChanged, this);\n\n    if (!target.suspended()) {\n      void this.enableDebugger();\n    }\n\n    this.#sourceMapManagerInternal.setEnabled(\n        Common.Settings.Settings.instance().moduleSetting('jsSourceMapsEnabled').get());\n    Common.Settings.Settings.instance()\n        .moduleSetting('jsSourceMapsEnabled')\n        .addChangeListener(event => this.#sourceMapManagerInternal.setEnabled((event.data as boolean)));\n\n    const resourceTreeModel = (target.model(ResourceTreeModel) as ResourceTreeModel);\n    if (resourceTreeModel) {\n      resourceTreeModel.addEventListener(ResourceTreeModelEvents.FrameNavigated, this.onFrameNavigated, this);\n    }\n  }\n\n  static sourceMapId(executionContextId: number, sourceURL: string, sourceMapURL: string|undefined): string|null {\n    if (!sourceMapURL) {\n      return null;\n    }\n    return executionContextId + ':' + sourceURL + ':' + sourceMapURL;\n  }\n\n  sourceMapManager(): SourceMapManager<Script> {\n    return this.#sourceMapManagerInternal;\n  }\n\n  runtimeModel(): RuntimeModel {\n    return this.runtimeModelInternal;\n  }\n\n  debuggerEnabled(): boolean {\n    return Boolean(this.#debuggerEnabledInternal);\n  }\n\n  debuggerId(): string|null {\n    return this.#debuggerId;\n  }\n\n  private async enableDebugger(): Promise<void> {\n    if (this.#debuggerEnabledInternal) {\n      return;\n    }\n    this.#debuggerEnabledInternal = true;\n\n    // Set a limit for the total size of collected script sources retained by debugger.\n    // 10MB for remote frontends, 100MB for others.\n    const isRemoteFrontend = Root.Runtime.Runtime.queryParam('remoteFrontend') || Root.Runtime.Runtime.queryParam('ws');\n    const maxScriptsCacheSize = isRemoteFrontend ? 10e6 : 100e6;\n    const enablePromise = this.agent.invoke_enable({maxScriptsCacheSize});\n    let instrumentationPromise: Promise<Protocol.Debugger.SetInstrumentationBreakpointResponse>|undefined;\n    if (Root.Runtime.experiments.isEnabled(Root.Runtime.ExperimentName.INSTRUMENTATION_BREAKPOINTS)) {\n      instrumentationPromise = this.agent.invoke_setInstrumentationBreakpoint({\n        instrumentation: Protocol.Debugger.SetInstrumentationBreakpointRequestInstrumentation.BeforeScriptExecution,\n      });\n    }\n    this.pauseOnExceptionStateChanged();\n    void this.asyncStackTracesStateChanged();\n    if (!Common.Settings.Settings.instance().moduleSetting('breakpointsActive').get()) {\n      this.breakpointsActiveChanged();\n    }\n    this.dispatchEventToListeners(Events.DebuggerWasEnabled, this);\n    const [enableResult] = await Promise.all([enablePromise, instrumentationPromise]);\n    this.registerDebugger(enableResult);\n  }\n\n  async syncDebuggerId(): Promise<Protocol.Debugger.EnableResponse> {\n    const isRemoteFrontend = Root.Runtime.Runtime.queryParam('remoteFrontend') || Root.Runtime.Runtime.queryParam('ws');\n    const maxScriptsCacheSize = isRemoteFrontend ? 10e6 : 100e6;\n    const enablePromise = this.agent.invoke_enable({maxScriptsCacheSize});\n    void enablePromise.then(this.registerDebugger.bind(this));\n    return enablePromise;\n  }\n\n  private onFrameNavigated(): void {\n    if (DebuggerModel.shouldResyncDebuggerId) {\n      return;\n    }\n\n    DebuggerModel.shouldResyncDebuggerId = true;\n  }\n\n  private registerDebugger(response: Protocol.Debugger.EnableResponse): void {\n    if (response.getError()) {\n      return;\n    }\n    const {debuggerId} = response;\n    _debuggerIdToModel.set(debuggerId, this);\n    this.#debuggerId = debuggerId;\n    this.dispatchEventToListeners(Events.DebuggerIsReadyToPause, this);\n  }\n\n  isReadyToPause(): boolean {\n    return Boolean(this.#debuggerId);\n  }\n\n  static async modelForDebuggerId(debuggerId: string): Promise<DebuggerModel|null> {\n    if (DebuggerModel.shouldResyncDebuggerId) {\n      await DebuggerModel.resyncDebuggerIdForModels();\n      DebuggerModel.shouldResyncDebuggerId = false;\n    }\n    return _debuggerIdToModel.get(debuggerId) || null;\n  }\n\n  static async resyncDebuggerIdForModels(): Promise<void> {\n    const dbgModels = _debuggerIdToModel.values();\n    for (const dbgModel of dbgModels) {\n      if (dbgModel.debuggerEnabled()) {\n        await dbgModel.syncDebuggerId();\n      }\n    }\n  }\n\n  private async disableDebugger(): Promise<void> {\n    if (!this.#debuggerEnabledInternal) {\n      return;\n    }\n    this.#debuggerEnabledInternal = false;\n\n    await this.asyncStackTracesStateChanged();\n    await this.agent.invoke_disable();\n    this.#isPausingInternal = false;\n    this.globalObjectCleared();\n    this.dispatchEventToListeners(Events.DebuggerWasDisabled, this);\n    if (typeof this.#debuggerId === 'string') {\n      _debuggerIdToModel.delete(this.#debuggerId);\n    }\n    this.#debuggerId = null;\n  }\n\n  private skipAllPauses(skip: boolean): void {\n    if (this.#skipAllPausesTimeout) {\n      clearTimeout(this.#skipAllPausesTimeout);\n      this.#skipAllPausesTimeout = 0;\n    }\n    void this.agent.invoke_setSkipAllPauses({skip});\n  }\n\n  skipAllPausesUntilReloadOrTimeout(timeout: number): void {\n    if (this.#skipAllPausesTimeout) {\n      clearTimeout(this.#skipAllPausesTimeout);\n    }\n    void this.agent.invoke_setSkipAllPauses({skip: true});\n    // If reload happens before the timeout, the flag will be already unset and the timeout callback won't change anything.\n    this.#skipAllPausesTimeout = window.setTimeout(this.skipAllPauses.bind(this, false), timeout);\n  }\n\n  private pauseOnExceptionStateChanged(): void {\n    let state: Protocol.Debugger.SetPauseOnExceptionsRequestState;\n    if (!Common.Settings.Settings.instance().moduleSetting('pauseOnExceptionEnabled').get()) {\n      state = Protocol.Debugger.SetPauseOnExceptionsRequestState.None;\n    } else if (Common.Settings.Settings.instance().moduleSetting('pauseOnCaughtException').get()) {\n      state = Protocol.Debugger.SetPauseOnExceptionsRequestState.All;\n    } else {\n      state = Protocol.Debugger.SetPauseOnExceptionsRequestState.Uncaught;\n    }\n\n    void this.agent.invoke_setPauseOnExceptions({state});\n  }\n\n  private asyncStackTracesStateChanged(): Promise<Protocol.ProtocolResponseWithError> {\n    const maxAsyncStackChainDepth = 32;\n    const enabled = !Common.Settings.Settings.instance().moduleSetting('disableAsyncStackTraces').get() &&\n        this.#debuggerEnabledInternal;\n    const maxDepth = enabled ? maxAsyncStackChainDepth : 0;\n    return this.agent.invoke_setAsyncCallStackDepth({maxDepth});\n  }\n\n  private breakpointsActiveChanged(): void {\n    void this.agent.invoke_setBreakpointsActive(\n        {active: Common.Settings.Settings.instance().moduleSetting('breakpointsActive').get()});\n  }\n\n  setComputeAutoStepRangesCallback(callback: ((arg0: StepMode, arg1: CallFrame) => Promise<Array<{\n                                                start: Location,\n                                                end: Location,\n                                              }>>)|null): void {\n    this.#computeAutoStepRangesCallback = callback;\n  }\n\n  private async computeAutoStepSkipList(mode: StepMode): Promise<Protocol.Debugger.LocationRange[]> {\n    let ranges: {\n      start: Location,\n      end: Location,\n    }[] = [];\n    if (this.#computeAutoStepRangesCallback && this.#debuggerPausedDetailsInternal) {\n      const [callFrame] = this.#debuggerPausedDetailsInternal.callFrames;\n      ranges = await this.#computeAutoStepRangesCallback.call(null, mode, callFrame);\n    }\n    const skipList = ranges.map(\n        location => new LocationRange(\n            location.start.scriptId, new ScriptPosition(location.start.lineNumber, location.start.columnNumber),\n            new ScriptPosition(location.end.lineNumber, location.end.columnNumber)));\n    return sortAndMergeRanges(skipList).map(x => x.payload());\n  }\n\n  async stepInto(): Promise<void> {\n    const skipList = await this.computeAutoStepSkipList(StepMode.StepInto);\n    void this.agent.invoke_stepInto({breakOnAsyncCall: false, skipList});\n  }\n\n  async stepOver(): Promise<void> {\n    // Mark that in case of auto-stepping, we should be doing\n    // step-over instead of step-in.\n    this.#autoStepOver = true;\n    const skipList = await this.computeAutoStepSkipList(StepMode.StepOver);\n    void this.agent.invoke_stepOver({skipList});\n  }\n\n  async stepOut(): Promise<void> {\n    const skipList = await this.computeAutoStepSkipList(StepMode.StepOut);\n    if (skipList.length !== 0) {\n      void this.agent.invoke_stepOver({skipList});\n    } else {\n      void this.agent.invoke_stepOut();\n    }\n  }\n\n  scheduleStepIntoAsync(): void {\n    void this.computeAutoStepSkipList(StepMode.StepInto).then(skipList => {\n      void this.agent.invoke_stepInto({breakOnAsyncCall: true, skipList});\n    });\n  }\n\n  resume(): void {\n    void this.agent.invoke_resume({terminateOnResume: false});\n    this.#isPausingInternal = false;\n  }\n\n  pause(): void {\n    this.#isPausingInternal = true;\n    this.skipAllPauses(false);\n    void this.agent.invoke_pause();\n  }\n\n  async setBreakpointByURL(\n      url: Platform.DevToolsPath.UrlString, lineNumber: number, columnNumber?: number,\n      condition?: string): Promise<SetBreakpointResult> {\n    // Convert file url to node-js path.\n    let urlRegex;\n    if (this.target().type() === Type.Node && url.startsWith('file://')) {\n      const platformPath = Common.ParsedURL.ParsedURL.urlToRawPathString(url, Host.Platform.isWin());\n      urlRegex =\n          `${Platform.StringUtilities.escapeForRegExp(platformPath)}|${Platform.StringUtilities.escapeForRegExp(url)}`;\n      if (Host.Platform.isWin() && platformPath.match(/^.:\\\\/)) {\n        // Match upper or lower case drive letter\n        urlRegex = `[${platformPath[0].toUpperCase()}${platformPath[0].toLowerCase()}]` + urlRegex.substr(1);\n      }\n    }\n    // Adjust column if needed.\n    let minColumnNumber = 0;\n    const scripts = this.#scriptsBySourceURL.get(url) || [];\n    for (let i = 0, l = scripts.length; i < l; ++i) {\n      const script = scripts[i];\n      if (lineNumber === script.lineOffset) {\n        minColumnNumber = minColumnNumber ? Math.min(minColumnNumber, script.columnOffset) : script.columnOffset;\n      }\n    }\n    columnNumber = Math.max(columnNumber || 0, minColumnNumber);\n    const response = await this.agent.invoke_setBreakpointByUrl({\n      lineNumber: lineNumber,\n      url: urlRegex ? undefined : url,\n      urlRegex: urlRegex,\n      columnNumber: columnNumber,\n      condition: condition,\n    });\n    if (response.getError()) {\n      return {locations: [], breakpointId: null};\n    }\n    let locations: Location[] = [];\n    if (response.locations) {\n      locations = response.locations.map(payload => Location.fromPayload(this, payload));\n    }\n    return {locations, breakpointId: response.breakpointId};\n  }\n\n  async setBreakpointInAnonymousScript(\n      scriptId: Protocol.Runtime.ScriptId, scriptHash: string, lineNumber: number, columnNumber?: number,\n      condition?: string): Promise<SetBreakpointResult> {\n    const response = await this.agent.invoke_setBreakpointByUrl(\n        {lineNumber: lineNumber, scriptHash: scriptHash, columnNumber: columnNumber, condition: condition});\n    const error = response.getError();\n    if (error) {\n      // Old V8 backend doesn't support scriptHash argument.\n      if (error !== 'Either url or urlRegex must be specified.') {\n        return {locations: [], breakpointId: null};\n      }\n      return this.setBreakpointBySourceId(scriptId, lineNumber, columnNumber, condition);\n    }\n    let locations: Location[] = [];\n    if (response.locations) {\n      locations = response.locations.map(payload => Location.fromPayload(this, payload));\n    }\n    return {locations, breakpointId: response.breakpointId};\n  }\n\n  private async setBreakpointBySourceId(\n      scriptId: Protocol.Runtime.ScriptId, lineNumber: number, columnNumber?: number,\n      condition?: string): Promise<SetBreakpointResult> {\n    // This method is required for backward compatibility with V8 before 6.3.275.\n    const response = await this.agent.invoke_setBreakpoint(\n        {location: {scriptId: scriptId, lineNumber: lineNumber, columnNumber: columnNumber}, condition: condition});\n    if (response.getError()) {\n      return {breakpointId: null, locations: []};\n    }\n    let actualLocation: Location[] = [];\n    if (response.actualLocation) {\n      actualLocation = [Location.fromPayload(this, response.actualLocation)];\n    }\n    return {locations: actualLocation, breakpointId: response.breakpointId};\n  }\n\n  async removeBreakpoint(breakpointId: Protocol.Debugger.BreakpointId): Promise<void> {\n    const response = await this.agent.invoke_removeBreakpoint({breakpointId});\n    if (response.getError()) {\n      console.error('Failed to remove breakpoint: ' + response.getError());\n    }\n  }\n\n  async getPossibleBreakpoints(startLocation: Location, endLocation: Location|null, restrictToFunction: boolean):\n      Promise<BreakLocation[]> {\n    const response = await this.agent.invoke_getPossibleBreakpoints({\n      start: startLocation.payload(),\n      end: endLocation ? endLocation.payload() : undefined,\n      restrictToFunction: restrictToFunction,\n    });\n    if (response.getError() || !response.locations) {\n      return [];\n    }\n    return response.locations.map(location => BreakLocation.fromPayload(this, location));\n  }\n\n  async fetchAsyncStackTrace(stackId: Protocol.Runtime.StackTraceId): Promise<Protocol.Runtime.StackTrace|null> {\n    const response = await this.agent.invoke_getStackTrace({stackTraceId: stackId});\n    return response.getError() ? null : response.stackTrace;\n  }\n\n  breakpointResolved(breakpointId: string, location: Protocol.Debugger.Location): void {\n    this.#breakpointResolvedEventTarget.dispatchEventToListeners(breakpointId, Location.fromPayload(this, location));\n  }\n\n  globalObjectCleared(): void {\n    this.setDebuggerPausedDetails(null);\n    this.reset();\n    // TODO(dgozman): move clients to ExecutionContextDestroyed/ScriptCollected events.\n    this.dispatchEventToListeners(Events.GlobalObjectCleared, this);\n  }\n\n  private reset(): void {\n    for (const scriptWithSourceMap of this.#sourceMapIdToScript.values()) {\n      this.#sourceMapManagerInternal.detachSourceMap(scriptWithSourceMap);\n    }\n    this.#sourceMapIdToScript.clear();\n\n    this.#scriptsInternal.clear();\n    this.#scriptsBySourceURL.clear();\n    this.#discardableScripts = [];\n    this.#autoStepOver = false;\n  }\n\n  scripts(): Script[] {\n    return Array.from(this.#scriptsInternal.values());\n  }\n\n  scriptForId(scriptId: string): Script|null {\n    return this.#scriptsInternal.get(scriptId) || null;\n  }\n\n  /**\n   * Returns all `Script` objects with the same provided `sourceURL`. The\n   * resulting array is sorted by time with the newest `Script` in the front.\n   */\n  scriptsForSourceURL(sourceURL: string|null): Script[] {\n    if (!sourceURL) {\n      return [];\n    }\n    return this.#scriptsBySourceURL.get(sourceURL) || [];\n  }\n\n  scriptsForExecutionContext(executionContext: ExecutionContext): Script[] {\n    const result = [];\n    for (const script of this.#scriptsInternal.values()) {\n      if (script.executionContextId === executionContext.id) {\n        result.push(script);\n      }\n    }\n    return result;\n  }\n\n  get callFrames(): CallFrame[]|null {\n    return this.#debuggerPausedDetailsInternal ? this.#debuggerPausedDetailsInternal.callFrames : null;\n  }\n\n  debuggerPausedDetails(): DebuggerPausedDetails|null {\n    return this.#debuggerPausedDetailsInternal;\n  }\n\n  private setDebuggerPausedDetails(debuggerPausedDetails: DebuggerPausedDetails|null): boolean {\n    if (debuggerPausedDetails) {\n      this.#isPausingInternal = false;\n      this.#debuggerPausedDetailsInternal = debuggerPausedDetails;\n      if (this.#beforePausedCallback) {\n        if (!this.#beforePausedCallback.call(null, debuggerPausedDetails)) {\n          return false;\n        }\n      }\n      // If we resolved a location in auto-stepping callback, reset the\n      // step-over marker.\n      this.#autoStepOver = false;\n      this.dispatchEventToListeners(Events.DebuggerPaused, this);\n      this.setSelectedCallFrame(debuggerPausedDetails.callFrames[0]);\n    } else {\n      this.#isPausingInternal = false;\n      this.#debuggerPausedDetailsInternal = null;\n      this.setSelectedCallFrame(null);\n    }\n    return true;\n  }\n\n  setBeforePausedCallback(callback: ((arg0: DebuggerPausedDetails) => boolean)|null): void {\n    this.#beforePausedCallback = callback;\n  }\n\n  setExpandCallFramesCallback(callback: ((arg0: Array<CallFrame>) => Promise<Array<CallFrame>>)|null): void {\n    this.#expandCallFramesCallback = callback;\n  }\n\n  setEvaluateOnCallFrameCallback(callback:\n                                     ((arg0: CallFrame, arg1: EvaluationOptions) => Promise<EvaluationResult|null>)|\n                                 null): void {\n    this.evaluateOnCallFrameCallback = callback;\n  }\n\n  setSynchronizeBreakpointsCallback(callback: ((script: Script) => Promise<void>)|null): void {\n    this.#synchronizeBreakpointsCallback = callback;\n  }\n\n  async pausedScript(\n      callFrames: Protocol.Debugger.CallFrame[], reason: Protocol.Debugger.PausedEventReason, auxData: Object|undefined,\n      breakpointIds: string[], asyncStackTrace?: Protocol.Runtime.StackTrace,\n      asyncStackTraceId?: Protocol.Runtime.StackTraceId): Promise<void> {\n    if (reason === Protocol.Debugger.PausedEventReason.Instrumentation) {\n      const script = this.scriptForId(callFrames[0].location.scriptId);\n      if (this.#synchronizeBreakpointsCallback && script) {\n        await this.#synchronizeBreakpointsCallback(script);\n      }\n      this.resume();\n      return;\n    }\n\n    const pausedDetails =\n        new DebuggerPausedDetails(this, callFrames, reason, auxData, breakpointIds, asyncStackTrace, asyncStackTraceId);\n\n    if (this.#expandCallFramesCallback) {\n      pausedDetails.callFrames = await this.#expandCallFramesCallback.call(null, pausedDetails.callFrames);\n    }\n\n    if (this.continueToLocationCallback) {\n      const callback = this.continueToLocationCallback;\n      this.continueToLocationCallback = null;\n      if (callback(pausedDetails)) {\n        return;\n      }\n    }\n\n    if (!this.setDebuggerPausedDetails(pausedDetails)) {\n      if (this.#autoStepOver) {\n        void this.stepOver();\n      } else {\n        void this.stepInto();\n      }\n    } else {\n      Common.EventTarget.fireEvent('DevTools.DebuggerPaused');\n    }\n  }\n\n  resumedScript(): void {\n    this.setDebuggerPausedDetails(null);\n    this.dispatchEventToListeners(Events.DebuggerResumed, this);\n  }\n\n  parsedScriptSource(\n      scriptId: Protocol.Runtime.ScriptId, sourceURL: Platform.DevToolsPath.UrlString, startLine: number,\n      startColumn: number, endLine: number, endColumn: number,\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      executionContextId: number, hash: string, executionContextAuxData: any, isLiveEdit: boolean,\n      sourceMapURL: Platform.DevToolsPath.UrlString|undefined, hasSourceURLComment: boolean, hasSyntaxError: boolean,\n      length: number, isModule: boolean|null, originStackTrace: Protocol.Runtime.StackTrace|null,\n      codeOffset: number|null, scriptLanguage: string|null, debugSymbols: Protocol.Debugger.DebugSymbols|null,\n      embedderName: Platform.DevToolsPath.UrlString|null): Script {\n    const knownScript = this.#scriptsInternal.get(scriptId);\n    if (knownScript) {\n      return knownScript;\n    }\n    let isContentScript = false;\n    if (executionContextAuxData && ('isDefault' in executionContextAuxData)) {\n      isContentScript = !executionContextAuxData['isDefault'];\n    }\n    const script = new Script(\n        this, scriptId, sourceURL, startLine, startColumn, endLine, endColumn, executionContextId, hash,\n        isContentScript, isLiveEdit, sourceMapURL, hasSourceURLComment, length, isModule, originStackTrace, codeOffset,\n        scriptLanguage, debugSymbols, embedderName);\n    this.registerScript(script);\n    this.dispatchEventToListeners(Events.ParsedScriptSource, script);\n\n    const sourceMapId = DebuggerModel.sourceMapId(script.executionContextId, script.sourceURL, script.sourceMapURL);\n    if (sourceMapId && !hasSyntaxError) {\n      // Consecutive script evaluations in the same execution context with the same #sourceURL\n      // and sourceMappingURL should result in source map reloading.\n      const previousScript = this.#sourceMapIdToScript.get(sourceMapId);\n      if (previousScript) {\n        this.#sourceMapManagerInternal.detachSourceMap(previousScript);\n      }\n      this.#sourceMapIdToScript.set(sourceMapId, script);\n      this.#sourceMapManagerInternal.attachSourceMap(script, script.sourceURL, script.sourceMapURL);\n    }\n\n    const isDiscardable = hasSyntaxError && script.isAnonymousScript();\n    if (isDiscardable) {\n      this.#discardableScripts.push(script);\n      this.collectDiscardedScripts();\n    }\n    return script;\n  }\n\n  setSourceMapURL(script: Script, newSourceMapURL: Platform.DevToolsPath.UrlString): void {\n    let sourceMapId = DebuggerModel.sourceMapId(script.executionContextId, script.sourceURL, script.sourceMapURL);\n    if (sourceMapId && this.#sourceMapIdToScript.get(sourceMapId) === script) {\n      this.#sourceMapIdToScript.delete(sourceMapId);\n    }\n    this.#sourceMapManagerInternal.detachSourceMap(script);\n\n    script.sourceMapURL = newSourceMapURL;\n    sourceMapId = DebuggerModel.sourceMapId(script.executionContextId, script.sourceURL, script.sourceMapURL);\n    if (!sourceMapId) {\n      return;\n    }\n    this.#sourceMapIdToScript.set(sourceMapId, script);\n    this.#sourceMapManagerInternal.attachSourceMap(script, script.sourceURL, script.sourceMapURL);\n  }\n\n  executionContextDestroyed(executionContext: ExecutionContext): void {\n    const sourceMapIds = Array.from(this.#sourceMapIdToScript.keys());\n    for (const sourceMapId of sourceMapIds) {\n      const script = this.#sourceMapIdToScript.get(sourceMapId);\n      if (script && script.executionContextId === executionContext.id) {\n        this.#sourceMapIdToScript.delete(sourceMapId);\n        this.#sourceMapManagerInternal.detachSourceMap(script);\n      }\n    }\n  }\n\n  private registerScript(script: Script): void {\n    this.#scriptsInternal.set(script.scriptId, script);\n    if (script.isAnonymousScript()) {\n      return;\n    }\n\n    let scripts = this.#scriptsBySourceURL.get(script.sourceURL);\n    if (!scripts) {\n      scripts = [];\n      this.#scriptsBySourceURL.set(script.sourceURL, scripts);\n    }\n    // Newer scripts with the same URL should be preferred so we put them in\n    // the front. Consuming code usually will iterate over the array and pick\n    // the first script that works.\n    scripts.unshift(script);\n  }\n\n  private unregisterScript(script: Script): void {\n    console.assert(script.isAnonymousScript());\n    this.#scriptsInternal.delete(script.scriptId);\n  }\n\n  private collectDiscardedScripts(): void {\n    if (this.#discardableScripts.length < 1000) {\n      return;\n    }\n    const scriptsToDiscard = this.#discardableScripts.splice(0, 100);\n    for (const script of scriptsToDiscard) {\n      this.unregisterScript(script);\n      this.dispatchEventToListeners(Events.DiscardedAnonymousScriptSource, script);\n    }\n  }\n\n  createRawLocation(script: Script, lineNumber: number, columnNumber: number, inlineFrameIndex?: number): Location {\n    return this.createRawLocationByScriptId(script.scriptId, lineNumber, columnNumber, inlineFrameIndex);\n  }\n\n  createRawLocationByURL(sourceURL: string, lineNumber: number, columnNumber?: number, inlineFrameIndex?: number):\n      Location|null {\n    for (const script of this.#scriptsBySourceURL.get(sourceURL) || []) {\n      if (script.lineOffset > lineNumber ||\n          (script.lineOffset === lineNumber && columnNumber !== undefined && script.columnOffset > columnNumber)) {\n        continue;\n      }\n      if (script.endLine < lineNumber ||\n          (script.endLine === lineNumber && columnNumber !== undefined && script.endColumn <= columnNumber)) {\n        continue;\n      }\n      return new Location(this, script.scriptId, lineNumber, columnNumber, inlineFrameIndex);\n    }\n    return null;\n  }\n\n  createRawLocationByScriptId(\n      scriptId: Protocol.Runtime.ScriptId, lineNumber: number, columnNumber?: number,\n      inlineFrameIndex?: number): Location {\n    return new Location(this, scriptId, lineNumber, columnNumber, inlineFrameIndex);\n  }\n\n  createRawLocationsByStackTrace(stackTrace: Protocol.Runtime.StackTrace): Location[] {\n    const rawLocations: Location[] = [];\n    for (let current: Protocol.Runtime.StackTrace|undefined = stackTrace; current; current = current.parent) {\n      for (const {scriptId, lineNumber, columnNumber} of current.callFrames) {\n        rawLocations.push(this.createRawLocationByScriptId(scriptId, lineNumber, columnNumber));\n      }\n    }\n    return rawLocations;\n  }\n\n  isPaused(): boolean {\n    return Boolean(this.debuggerPausedDetails());\n  }\n\n  isPausing(): boolean {\n    return this.#isPausingInternal;\n  }\n\n  setSelectedCallFrame(callFrame: CallFrame|null): void {\n    if (this.#selectedCallFrameInternal === callFrame) {\n      return;\n    }\n    this.#selectedCallFrameInternal = callFrame;\n    this.dispatchEventToListeners(Events.CallFrameSelected, this);\n  }\n\n  selectedCallFrame(): CallFrame|null {\n    return this.#selectedCallFrameInternal;\n  }\n\n  async evaluateOnSelectedCallFrame(options: EvaluationOptions): Promise<EvaluationResult> {\n    const callFrame = this.selectedCallFrame();\n    if (!callFrame) {\n      throw new Error('No call frame selected');\n    }\n    return callFrame.evaluate(options);\n  }\n\n  functionDetailsPromise(remoteObject: RemoteObject): Promise<FunctionDetails|null> {\n    return remoteObject.getAllProperties(false /* accessorPropertiesOnly */, false /* generatePreview */)\n        .then(buildDetails.bind(this));\n\n    function buildDetails(this: DebuggerModel, response: GetPropertiesResult): FunctionDetails|null {\n      if (!response) {\n        return null;\n      }\n      let location: (RemoteObject|null|undefined)|null = null;\n      if (response.internalProperties) {\n        for (const prop of response.internalProperties) {\n          if (prop.name === '[[FunctionLocation]]') {\n            location = prop.value;\n          }\n        }\n      }\n      let functionName: RemoteObject|null = null;\n      if (response.properties) {\n        for (const prop of response.properties) {\n          if (prop.name === 'name' && prop.value && prop.value.type === 'string') {\n            functionName = prop.value;\n          }\n        }\n      }\n      let debuggerLocation: Location|null = null;\n      if (location) {\n        debuggerLocation = this.createRawLocationByScriptId(\n            location.value.scriptId, location.value.lineNumber, location.value.columnNumber);\n      }\n      return {location: debuggerLocation, functionName: functionName ? functionName.value as string : ''};\n    }\n  }\n\n  async setVariableValue(\n      scopeNumber: number, variableName: string, newValue: Protocol.Runtime.CallArgument,\n      callFrameId: Protocol.Debugger.CallFrameId): Promise<string|undefined> {\n    const response = await this.agent.invoke_setVariableValue({scopeNumber, variableName, newValue, callFrameId});\n    const error = response.getError();\n    if (error) {\n      console.error(error);\n    }\n    return error;\n  }\n\n  addBreakpointListener(\n      breakpointId: string, listener: (arg0: Common.EventTarget.EventTargetEvent<Location>) => void,\n      thisObject?: Object): void {\n    this.#breakpointResolvedEventTarget.addEventListener(breakpointId, listener, thisObject);\n  }\n\n  removeBreakpointListener(\n      breakpointId: string, listener: (arg0: Common.EventTarget.EventTargetEvent<Location>) => void,\n      thisObject?: Object): void {\n    this.#breakpointResolvedEventTarget.removeEventListener(breakpointId, listener, thisObject);\n  }\n\n  async setBlackboxPatterns(patterns: string[]): Promise<boolean> {\n    const response = await this.agent.invoke_setBlackboxPatterns({patterns});\n    const error = response.getError();\n    if (error) {\n      console.error(error);\n    }\n    return !error;\n  }\n\n  dispose(): void {\n    this.#sourceMapManagerInternal.dispose();\n    if (this.#debuggerId) {\n      _debuggerIdToModel.delete(this.#debuggerId);\n    }\n    Common.Settings.Settings.instance()\n        .moduleSetting('pauseOnExceptionEnabled')\n        .removeChangeListener(this.pauseOnExceptionStateChanged, this);\n    Common.Settings.Settings.instance()\n        .moduleSetting('pauseOnCaughtException')\n        .removeChangeListener(this.pauseOnExceptionStateChanged, this);\n    Common.Settings.Settings.instance()\n        .moduleSetting('disableAsyncStackTraces')\n        .removeChangeListener(this.asyncStackTracesStateChanged, this);\n  }\n\n  async suspendModel(): Promise<void> {\n    await this.disableDebugger();\n  }\n\n  async resumeModel(): Promise<void> {\n    await this.enableDebugger();\n  }\n\n  private static shouldResyncDebuggerId = false;\n\n  getContinueToLocationCallback(): ((arg0: DebuggerPausedDetails) => boolean)|null {\n    return this.continueToLocationCallback;\n  }\n\n  getEvaluateOnCallFrameCallback():\n      ((arg0: CallFrame, arg1: EvaluationOptions) => Promise<EvaluationResult|null>)|null {\n    return this.evaluateOnCallFrameCallback;\n  }\n}\n\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const _debuggerIdToModel = new Map<string, DebuggerModel>();\n\n/**\n * Keep these in sync with WebCore::V8Debugger\n */\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum PauseOnExceptionsState {\n  DontPauseOnExceptions = 'none',\n  PauseOnAllExceptions = 'all',\n  PauseOnUncaughtExceptions = 'uncaught',\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  DebuggerWasEnabled = 'DebuggerWasEnabled',\n  DebuggerWasDisabled = 'DebuggerWasDisabled',\n  DebuggerPaused = 'DebuggerPaused',\n  DebuggerResumed = 'DebuggerResumed',\n  ParsedScriptSource = 'ParsedScriptSource',\n  DiscardedAnonymousScriptSource = 'DiscardedAnonymousScriptSource',\n  GlobalObjectCleared = 'GlobalObjectCleared',\n  CallFrameSelected = 'CallFrameSelected',\n  DebuggerIsReadyToPause = 'DebuggerIsReadyToPause',\n}\n\nexport type EventTypes = {\n  [Events.DebuggerWasEnabled]: DebuggerModel,\n  [Events.DebuggerWasDisabled]: DebuggerModel,\n  [Events.DebuggerPaused]: DebuggerModel,\n  [Events.DebuggerResumed]: DebuggerModel,\n  [Events.ParsedScriptSource]: Script,\n  [Events.DiscardedAnonymousScriptSource]: Script,\n  [Events.GlobalObjectCleared]: DebuggerModel,\n  [Events.CallFrameSelected]: DebuggerModel,\n  [Events.DebuggerIsReadyToPause]: DebuggerModel,\n};\n\nclass DebuggerDispatcher implements ProtocolProxyApi.DebuggerDispatcher {\n  #debuggerModel: DebuggerModel;\n\n  constructor(debuggerModel: DebuggerModel) {\n    this.#debuggerModel = debuggerModel;\n  }\n\n  paused({callFrames, reason, data, hitBreakpoints, asyncStackTrace, asyncStackTraceId}: Protocol.Debugger.PausedEvent):\n      void {\n    if (!this.#debuggerModel.debuggerEnabled()) {\n      return;\n    }\n    void this.#debuggerModel.pausedScript(\n        callFrames, reason, data, hitBreakpoints || [], asyncStackTrace, asyncStackTraceId);\n  }\n\n  resumed(): void {\n    if (!this.#debuggerModel.debuggerEnabled()) {\n      return;\n    }\n    this.#debuggerModel.resumedScript();\n  }\n\n  scriptParsed({\n    scriptId,\n    url,\n    startLine,\n    startColumn,\n    endLine,\n    endColumn,\n    executionContextId,\n    hash,\n    executionContextAuxData,\n    isLiveEdit,\n    sourceMapURL,\n    hasSourceURL,\n    length,\n    isModule,\n    stackTrace,\n    codeOffset,\n    scriptLanguage,\n    debugSymbols,\n    embedderName,\n  }: Protocol.Debugger.ScriptParsedEvent): void {\n    if (!this.#debuggerModel.debuggerEnabled()) {\n      return;\n    }\n    this.#debuggerModel.parsedScriptSource(\n        scriptId, url as Platform.DevToolsPath.UrlString, startLine, startColumn, endLine, endColumn,\n        executionContextId, hash, executionContextAuxData, Boolean(isLiveEdit),\n        sourceMapURL as Platform.DevToolsPath.UrlString, Boolean(hasSourceURL), false, length || 0, isModule || null,\n        stackTrace || null, codeOffset || null, scriptLanguage || null, debugSymbols || null,\n        embedderName as Platform.DevToolsPath.UrlString || null);\n  }\n\n  scriptFailedToParse({\n    scriptId,\n    url,\n    startLine,\n    startColumn,\n    endLine,\n    endColumn,\n    executionContextId,\n    hash,\n    executionContextAuxData,\n    sourceMapURL,\n    hasSourceURL,\n    length,\n    isModule,\n    stackTrace,\n    codeOffset,\n    scriptLanguage,\n    embedderName,\n  }: Protocol.Debugger.ScriptFailedToParseEvent): void {\n    if (!this.#debuggerModel.debuggerEnabled()) {\n      return;\n    }\n    this.#debuggerModel.parsedScriptSource(\n        scriptId, url as Platform.DevToolsPath.UrlString, startLine, startColumn, endLine, endColumn,\n        executionContextId, hash, executionContextAuxData, false, sourceMapURL as Platform.DevToolsPath.UrlString,\n        Boolean(hasSourceURL), true, length || 0, isModule || null, stackTrace || null, codeOffset || null,\n        scriptLanguage || null, null, embedderName as Platform.DevToolsPath.UrlString || null);\n  }\n\n  breakpointResolved({breakpointId, location}: Protocol.Debugger.BreakpointResolvedEvent): void {\n    if (!this.#debuggerModel.debuggerEnabled()) {\n      return;\n    }\n    this.#debuggerModel.breakpointResolved(breakpointId, location);\n  }\n}\n\nexport class Location {\n  debuggerModel: DebuggerModel;\n  scriptId: Protocol.Runtime.ScriptId;\n  lineNumber: number;\n  columnNumber: number;\n  inlineFrameIndex: number;\n\n  constructor(\n      debuggerModel: DebuggerModel, scriptId: Protocol.Runtime.ScriptId, lineNumber: number, columnNumber?: number,\n      inlineFrameIndex?: number) {\n    this.debuggerModel = debuggerModel;\n    this.scriptId = scriptId;\n    this.lineNumber = lineNumber;\n    this.columnNumber = columnNumber || 0;\n    this.inlineFrameIndex = inlineFrameIndex || 0;\n  }\n\n  static fromPayload(debuggerModel: DebuggerModel, payload: Protocol.Debugger.Location, inlineFrameIndex?: number):\n      Location {\n    return new Location(debuggerModel, payload.scriptId, payload.lineNumber, payload.columnNumber, inlineFrameIndex);\n  }\n\n  payload(): Protocol.Debugger.Location {\n    return {scriptId: this.scriptId, lineNumber: this.lineNumber, columnNumber: this.columnNumber};\n  }\n\n  script(): Script|null {\n    return this.debuggerModel.scriptForId(this.scriptId);\n  }\n\n  continueToLocation(pausedCallback?: (() => void)): void {\n    if (pausedCallback) {\n      this.debuggerModel.continueToLocationCallback = this.paused.bind(this, pausedCallback);\n    }\n    void this.debuggerModel.agent.invoke_continueToLocation({\n      location: this.payload(),\n      targetCallFrames: Protocol.Debugger.ContinueToLocationRequestTargetCallFrames.Current,\n    });\n  }\n\n  private paused(pausedCallback: () => void|undefined, debuggerPausedDetails: DebuggerPausedDetails): boolean {\n    const location = debuggerPausedDetails.callFrames[0].location();\n    if (location.scriptId === this.scriptId && location.lineNumber === this.lineNumber &&\n        location.columnNumber === this.columnNumber) {\n      pausedCallback();\n      return true;\n    }\n    return false;\n  }\n\n  id(): string {\n    return this.debuggerModel.target().id() + ':' + this.scriptId + ':' + this.lineNumber + ':' + this.columnNumber;\n  }\n}\n\nexport class ScriptPosition {\n  lineNumber: number;\n  columnNumber: number;\n  constructor(lineNumber: number, columnNumber: number) {\n    this.lineNumber = lineNumber;\n    this.columnNumber = columnNumber;\n  }\n\n  payload(): Protocol.Debugger.ScriptPosition {\n    return {lineNumber: this.lineNumber, columnNumber: this.columnNumber};\n  }\n\n  compareTo(other: ScriptPosition): number {\n    if (this.lineNumber !== other.lineNumber) {\n      return this.lineNumber - other.lineNumber;\n    }\n    return this.columnNumber - other.columnNumber;\n  }\n}\n\nexport class LocationRange {\n  scriptId: Protocol.Runtime.ScriptId;\n  start: ScriptPosition;\n  end: ScriptPosition;\n  constructor(scriptId: Protocol.Runtime.ScriptId, start: ScriptPosition, end: ScriptPosition) {\n    this.scriptId = scriptId;\n    this.start = start;\n    this.end = end;\n  }\n\n  payload(): Protocol.Debugger.LocationRange {\n    return {scriptId: this.scriptId, start: this.start.payload(), end: this.end.payload()};\n  }\n\n  static comparator(location1: LocationRange, location2: LocationRange): number {\n    return location1.compareTo(location2);\n  }\n\n  compareTo(other: LocationRange): number {\n    if (this.scriptId !== other.scriptId) {\n      return this.scriptId > other.scriptId ? 1 : -1;\n    }\n\n    const startCmp = this.start.compareTo(other.start);\n    if (startCmp) {\n      return startCmp;\n    }\n\n    return this.end.compareTo(other.end);\n  }\n\n  overlap(other: LocationRange): boolean {\n    if (this.scriptId !== other.scriptId) {\n      return false;\n    }\n\n    const startCmp = this.start.compareTo(other.start);\n    if (startCmp < 0) {\n      return this.end.compareTo(other.start) >= 0;\n    }\n    if (startCmp > 0) {\n      return this.start.compareTo(other.end) <= 0;\n    }\n\n    return true;\n  }\n}\n\nexport class BreakLocation extends Location {\n  type: Protocol.Debugger.BreakLocationType|undefined;\n  constructor(\n      debuggerModel: DebuggerModel, scriptId: Protocol.Runtime.ScriptId, lineNumber: number, columnNumber?: number,\n      type?: Protocol.Debugger.BreakLocationType) {\n    super(debuggerModel, scriptId, lineNumber, columnNumber);\n    if (type) {\n      this.type = type;\n    }\n  }\n\n  static fromPayload(debuggerModel: DebuggerModel, payload: Protocol.Debugger.BreakLocation): BreakLocation {\n    return new BreakLocation(debuggerModel, payload.scriptId, payload.lineNumber, payload.columnNumber, payload.type);\n  }\n}\n\nexport interface MissingDebugInfoDetails {\n  details: string;\n  resources: string[];\n}\n\nexport class CallFrame {\n  debuggerModel: DebuggerModel;\n  readonly #scriptInternal: Script;\n  payload: Protocol.Debugger.CallFrame;\n  readonly #locationInternal: Location;\n  readonly #scopeChainInternal: Scope[];\n  readonly #localScopeInternal: Scope|null;\n  readonly #inlineFrameIndexInternal: number;\n  readonly #functionNameInternal: string;\n  readonly #functionLocationInternal: Location|undefined;\n  #returnValueInternal: RemoteObject|null;\n  #missingDebugInfoDetails: MissingDebugInfoDetails|null = null;\n\n  readonly canBeRestarted: boolean;\n\n  constructor(\n      debuggerModel: DebuggerModel, script: Script, payload: Protocol.Debugger.CallFrame, inlineFrameIndex?: number,\n      functionName?: string) {\n    this.debuggerModel = debuggerModel;\n    this.#scriptInternal = script;\n    this.payload = payload;\n    this.#locationInternal = Location.fromPayload(debuggerModel, payload.location, inlineFrameIndex);\n    this.#scopeChainInternal = [];\n    this.#localScopeInternal = null;\n    this.#inlineFrameIndexInternal = inlineFrameIndex || 0;\n    this.#functionNameInternal = functionName || payload.functionName;\n    this.canBeRestarted = Boolean(payload.canBeRestarted);\n    for (let i = 0; i < payload.scopeChain.length; ++i) {\n      const scope = new Scope(this, i);\n      this.#scopeChainInternal.push(scope);\n      if (scope.type() === Protocol.Debugger.ScopeType.Local) {\n        this.#localScopeInternal = scope;\n      }\n    }\n    if (payload.functionLocation) {\n      this.#functionLocationInternal = Location.fromPayload(debuggerModel, payload.functionLocation);\n    }\n    this.#returnValueInternal =\n        payload.returnValue ? this.debuggerModel.runtimeModel().createRemoteObject(payload.returnValue) : null;\n  }\n\n  static fromPayloadArray(debuggerModel: DebuggerModel, callFrames: Protocol.Debugger.CallFrame[]): CallFrame[] {\n    const result = [];\n    for (let i = 0; i < callFrames.length; ++i) {\n      const callFrame = callFrames[i];\n      const script = debuggerModel.scriptForId(callFrame.location.scriptId);\n      if (script) {\n        result.push(new CallFrame(debuggerModel, script, callFrame));\n      }\n    }\n    return result;\n  }\n\n  createVirtualCallFrame(inlineFrameIndex: number, name: string): CallFrame {\n    return new CallFrame(this.debuggerModel, this.#scriptInternal, this.payload, inlineFrameIndex, name);\n  }\n\n  setMissingDebugInfoDetails(details: MissingDebugInfoDetails): void {\n    this.#missingDebugInfoDetails = details;\n  }\n\n  get missingDebugInfoDetails(): MissingDebugInfoDetails|null {\n    return this.#missingDebugInfoDetails;\n  }\n\n  get script(): Script {\n    return this.#scriptInternal;\n  }\n\n  get id(): Protocol.Debugger.CallFrameId {\n    return this.payload.callFrameId;\n  }\n\n  get inlineFrameIndex(): number {\n    return this.#inlineFrameIndexInternal;\n  }\n\n  scopeChain(): Scope[] {\n    return this.#scopeChainInternal;\n  }\n\n  localScope(): Scope|null {\n    return this.#localScopeInternal;\n  }\n\n  thisObject(): RemoteObject|null {\n    return this.payload.this ? this.debuggerModel.runtimeModel().createRemoteObject(this.payload.this) : null;\n  }\n\n  returnValue(): RemoteObject|null {\n    return this.#returnValueInternal;\n  }\n\n  async setReturnValue(expression: string): Promise<RemoteObject|null> {\n    if (!this.#returnValueInternal) {\n      return null;\n    }\n\n    const evaluateResponse = await this.debuggerModel.agent.invoke_evaluateOnCallFrame(\n        {callFrameId: this.id, expression: expression, silent: true, objectGroup: 'backtrace'});\n    if (evaluateResponse.getError() || evaluateResponse.exceptionDetails) {\n      return null;\n    }\n    const response = await this.debuggerModel.agent.invoke_setReturnValue({newValue: evaluateResponse.result});\n    if (response.getError()) {\n      return null;\n    }\n    this.#returnValueInternal = this.debuggerModel.runtimeModel().createRemoteObject(evaluateResponse.result);\n    return this.#returnValueInternal;\n  }\n\n  get functionName(): string {\n    return this.#functionNameInternal;\n  }\n\n  location(): Location {\n    return this.#locationInternal;\n  }\n\n  functionLocation(): Location|null {\n    return this.#functionLocationInternal || null;\n  }\n\n  async evaluate(options: EvaluationOptions): Promise<EvaluationResult> {\n    const debuggerModel = this.debuggerModel;\n    const runtimeModel = debuggerModel.runtimeModel();\n\n    // Assume backends either support both throwOnSideEffect and timeout options or neither.\n    const needsTerminationOptions = Boolean(options.throwOnSideEffect) || options.timeout !== undefined;\n    if (needsTerminationOptions &&\n        (runtimeModel.hasSideEffectSupport() === false ||\n         (runtimeModel.hasSideEffectSupport() === null && !await runtimeModel.checkSideEffectSupport()))) {\n      return {error: 'Side-effect checks not supported by backend.'};\n    }\n\n    const evaluateOnCallFrameCallback = debuggerModel.getEvaluateOnCallFrameCallback();\n    if (evaluateOnCallFrameCallback) {\n      const result = await evaluateOnCallFrameCallback(this, options);\n      if (result) {\n        return result;\n      }\n    }\n\n    const response = await this.debuggerModel.agent.invoke_evaluateOnCallFrame({\n      callFrameId: this.id,\n      expression: options.expression,\n      objectGroup: options.objectGroup,\n      includeCommandLineAPI: options.includeCommandLineAPI,\n      silent: options.silent,\n      returnByValue: options.returnByValue,\n      generatePreview: options.generatePreview,\n      throwOnSideEffect: options.throwOnSideEffect,\n      timeout: options.timeout,\n    });\n    const error = response.getError();\n    if (error) {\n      console.error(error);\n      return {error: error};\n    }\n    return {object: runtimeModel.createRemoteObject(response.result), exceptionDetails: response.exceptionDetails};\n  }\n\n  async restart(): Promise<void> {\n    console.assert(this.canBeRestarted, 'This frame can not be restarted.');\n    // Note that even if `canBeRestarted` is true, the restart frame call can still fail.\n    // The user can evaluate arbitrary code between pausing and restarting the frame that\n    // could mess with the call stack.\n    await this.debuggerModel.agent.invoke_restartFrame(\n        {callFrameId: this.id, mode: Protocol.Debugger.RestartFrameRequestMode.StepInto});\n  }\n\n  getPayload(): Protocol.Debugger.CallFrame {\n    return this.payload;\n  }\n}\n\nexport interface ScopeChainEntry {\n  callFrame(): CallFrame;\n\n  type(): string;\n\n  typeName(): string;\n\n  name(): string|undefined;\n\n  startLocation(): Location|null;\n\n  endLocation(): Location|null;\n\n  object(): RemoteObject;\n\n  description(): string;\n\n  icon(): string|undefined;\n}\n\nexport class Scope implements ScopeChainEntry {\n  #callFrameInternal: CallFrame;\n  #payload: Protocol.Debugger.Scope;\n  readonly #typeInternal: Protocol.Debugger.ScopeType;\n  readonly #nameInternal: string|undefined;\n  #ordinal: number;\n  readonly #startLocationInternal: Location|null;\n  readonly #endLocationInternal: Location|null;\n  #objectInternal: RemoteObject|null;\n  constructor(callFrame: CallFrame, ordinal: number) {\n    this.#callFrameInternal = callFrame;\n    this.#payload = callFrame.getPayload().scopeChain[ordinal];\n    this.#typeInternal = this.#payload.type;\n    this.#nameInternal = this.#payload.name;\n    this.#ordinal = ordinal;\n    this.#startLocationInternal =\n        this.#payload.startLocation ? Location.fromPayload(callFrame.debuggerModel, this.#payload.startLocation) : null;\n    this.#endLocationInternal =\n        this.#payload.endLocation ? Location.fromPayload(callFrame.debuggerModel, this.#payload.endLocation) : null;\n    this.#objectInternal = null;\n  }\n\n  callFrame(): CallFrame {\n    return this.#callFrameInternal;\n  }\n\n  type(): string {\n    return this.#typeInternal;\n  }\n\n  typeName(): string {\n    switch (this.#typeInternal) {\n      case Protocol.Debugger.ScopeType.Local:\n        return i18nString(UIStrings.local);\n      case Protocol.Debugger.ScopeType.Closure:\n        return i18nString(UIStrings.closure);\n      case Protocol.Debugger.ScopeType.Catch:\n        return i18nString(UIStrings.catchBlock);\n      case Protocol.Debugger.ScopeType.Eval:\n        return i18n.i18n.lockedString('Eval');\n      case Protocol.Debugger.ScopeType.Block:\n        return i18nString(UIStrings.block);\n      case Protocol.Debugger.ScopeType.Script:\n        return i18nString(UIStrings.script);\n      case Protocol.Debugger.ScopeType.With:\n        return i18nString(UIStrings.withBlock);\n      case Protocol.Debugger.ScopeType.Global:\n        return i18nString(UIStrings.global);\n      case Protocol.Debugger.ScopeType.Module:\n        return i18nString(UIStrings.module);\n      case Protocol.Debugger.ScopeType.WasmExpressionStack:\n        return i18nString(UIStrings.expression);\n    }\n    return '';\n  }\n\n  name(): string|undefined {\n    return this.#nameInternal;\n  }\n\n  startLocation(): Location|null {\n    return this.#startLocationInternal;\n  }\n\n  endLocation(): Location|null {\n    return this.#endLocationInternal;\n  }\n\n  object(): RemoteObject {\n    if (this.#objectInternal) {\n      return this.#objectInternal;\n    }\n    const runtimeModel = this.#callFrameInternal.debuggerModel.runtimeModel();\n\n    const declarativeScope = this.#typeInternal !== Protocol.Debugger.ScopeType.With &&\n        this.#typeInternal !== Protocol.Debugger.ScopeType.Global;\n    if (declarativeScope) {\n      this.#objectInternal = runtimeModel.createScopeRemoteObject(\n          this.#payload.object, new ScopeRef(this.#ordinal, this.#callFrameInternal.id));\n    } else {\n      this.#objectInternal = runtimeModel.createRemoteObject(this.#payload.object);\n    }\n\n    return this.#objectInternal;\n  }\n\n  description(): string {\n    const declarativeScope = this.#typeInternal !== Protocol.Debugger.ScopeType.With &&\n        this.#typeInternal !== Protocol.Debugger.ScopeType.Global;\n    return declarativeScope ? '' : (this.#payload.object.description || '');\n  }\n\n  icon(): undefined {\n    return undefined;\n  }\n}\n\nexport class DebuggerPausedDetails {\n  debuggerModel: DebuggerModel;\n  callFrames: CallFrame[];\n  reason: Protocol.Debugger.PausedEventReason;\n  auxData: {\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [x: string]: any,\n  }|undefined;\n  breakpointIds: string[];\n  asyncStackTrace: Protocol.Runtime.StackTrace|undefined;\n  asyncStackTraceId: Protocol.Runtime.StackTraceId|undefined;\n  constructor(\n      debuggerModel: DebuggerModel, callFrames: Protocol.Debugger.CallFrame[],\n      reason: Protocol.Debugger.PausedEventReason, auxData: {\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        [x: string]: any,\n      }|undefined,\n      breakpointIds: string[], asyncStackTrace?: Protocol.Runtime.StackTrace,\n      asyncStackTraceId?: Protocol.Runtime.StackTraceId) {\n    this.debuggerModel = debuggerModel;\n    this.callFrames = CallFrame.fromPayloadArray(debuggerModel, callFrames);\n    this.reason = reason;\n    this.auxData = auxData;\n    this.breakpointIds = breakpointIds;\n    if (asyncStackTrace) {\n      this.asyncStackTrace = this.cleanRedundantFrames(asyncStackTrace);\n    }\n    this.asyncStackTraceId = asyncStackTraceId;\n  }\n\n  exception(): RemoteObject|null {\n    if (this.reason !== Protocol.Debugger.PausedEventReason.Exception &&\n        this.reason !== Protocol.Debugger.PausedEventReason.PromiseRejection) {\n      return null;\n    }\n    return this.debuggerModel.runtimeModel().createRemoteObject((this.auxData as Protocol.Runtime.RemoteObject));\n  }\n\n  private cleanRedundantFrames(asyncStackTrace: Protocol.Runtime.StackTrace): Protocol.Runtime.StackTrace {\n    let stack: (Protocol.Runtime.StackTrace|undefined)|Protocol.Runtime.StackTrace = asyncStackTrace;\n    let previous: Protocol.Runtime.StackTrace|null = null;\n    while (stack) {\n      // TODO(crbug.com/1254259): Remove this post-processing step once the V8\n      // inspector back-end change propagated to Node LTS.\n      if (stack.description === 'async function' && stack.callFrames.length) {\n        stack.callFrames.shift();\n      }\n      if (previous && !stack.callFrames.length) {\n        previous.parent = stack.parent;\n      } else {\n        previous = stack;\n      }\n      stack = stack.parent;\n    }\n    return asyncStackTrace;\n  }\n}\n\nSDKModel.register(DebuggerModel, {capabilities: Capability.JS, autostart: true});\n\nexport interface FunctionDetails {\n  location: Location|null;\n  functionName: string;\n}\nexport interface SetBreakpointResult {\n  breakpointId: Protocol.Debugger.BreakpointId|null;\n  locations: Location[];\n}\n"],
  "mappings": "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",
  "names": []
}
