{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/ScreenCaptureModel.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport {OverlayModel} from './OverlayModel.js';\nimport type {Target} from './Target.js';\nimport {Capability} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\n\nexport class ScreenCaptureModel extends SDKModel<void> implements ProtocolProxyApi.PageDispatcher {\n  readonly #agent: ProtocolProxyApi.PageApi;\n  #onScreencastFrame: ((arg0: Protocol.binary, arg1: Protocol.Page.ScreencastFrameMetadata) => void)|null;\n  #onScreencastVisibilityChanged: ((arg0: boolean) => void)|null;\n  constructor(target: Target) {\n    super(target);\n    this.#agent = target.pageAgent();\n    this.#onScreencastFrame = null;\n    this.#onScreencastVisibilityChanged = null;\n    target.registerPageDispatcher(this);\n  }\n\n  startScreencast(\n      format: Protocol.Page.StartScreencastRequestFormat, quality: number, maxWidth: number|undefined,\n      maxHeight: number|undefined, everyNthFrame: number|undefined,\n      onFrame: (arg0: Protocol.binary, arg1: Protocol.Page.ScreencastFrameMetadata) => void,\n      onVisibilityChanged: (arg0: boolean) => void): void {\n    this.#onScreencastFrame = onFrame;\n    this.#onScreencastVisibilityChanged = onVisibilityChanged;\n    void this.#agent.invoke_startScreencast({format, quality, maxWidth, maxHeight, everyNthFrame});\n  }\n\n  stopScreencast(): void {\n    this.#onScreencastFrame = null;\n    this.#onScreencastVisibilityChanged = null;\n    void this.#agent.invoke_stopScreencast();\n  }\n\n  async captureScreenshot(\n      format: Protocol.Page.CaptureScreenshotRequestFormat, quality: number,\n      clip?: Protocol.Page.Viewport): Promise<string|null> {\n    await OverlayModel.muteHighlight();\n    const result = await this.#agent.invoke_captureScreenshot(\n        {format, quality, clip, fromSurface: true, captureBeyondViewport: true});\n    await OverlayModel.unmuteHighlight();\n    return result.data;\n  }\n\n  async fetchLayoutMetrics(): Promise<{\n    viewportX: number,\n    viewportY: number,\n    viewportScale: number,\n    contentWidth: number,\n    contentHeight: number,\n  }|null> {\n    const response = await this.#agent.invoke_getLayoutMetrics();\n    if (response.getError()) {\n      return null;\n    }\n    return {\n      viewportX: response.cssVisualViewport.pageX,\n      viewportY: response.cssVisualViewport.pageY,\n      viewportScale: response.cssVisualViewport.scale,\n      contentWidth: response.cssContentSize.width,\n      contentHeight: response.cssContentSize.height,\n    };\n  }\n\n  screencastFrame({data, metadata, sessionId}: Protocol.Page.ScreencastFrameEvent): void {\n    void this.#agent.invoke_screencastFrameAck({sessionId});\n    if (this.#onScreencastFrame) {\n      this.#onScreencastFrame.call(null, data, metadata);\n    }\n  }\n\n  screencastVisibilityChanged({visible}: Protocol.Page.ScreencastVisibilityChangedEvent): void {\n    if (this.#onScreencastVisibilityChanged) {\n      this.#onScreencastVisibilityChanged.call(null, visible);\n    }\n  }\n\n  backForwardCacheNotUsed(_params: Protocol.Page.BackForwardCacheNotUsedEvent): void {\n  }\n\n  domContentEventFired(_params: Protocol.Page.DomContentEventFiredEvent): void {\n  }\n\n  loadEventFired(_params: Protocol.Page.LoadEventFiredEvent): void {\n  }\n\n  lifecycleEvent(_params: Protocol.Page.LifecycleEventEvent): void {\n  }\n\n  navigatedWithinDocument(_params: Protocol.Page.NavigatedWithinDocumentEvent): void {\n  }\n\n  frameAttached(_params: Protocol.Page.FrameAttachedEvent): void {\n  }\n\n  frameNavigated(_params: Protocol.Page.FrameNavigatedEvent): void {\n  }\n\n  documentOpened(_params: Protocol.Page.DocumentOpenedEvent): void {\n  }\n\n  frameDetached(_params: Protocol.Page.FrameDetachedEvent): void {\n  }\n\n  frameStartedLoading(_params: Protocol.Page.FrameStartedLoadingEvent): void {\n  }\n\n  frameStoppedLoading(_params: Protocol.Page.FrameStoppedLoadingEvent): void {\n  }\n\n  frameRequestedNavigation(_params: Protocol.Page.FrameRequestedNavigationEvent): void {\n  }\n\n  frameScheduledNavigation(_params: Protocol.Page.FrameScheduledNavigationEvent): void {\n  }\n\n  frameClearedScheduledNavigation(_params: Protocol.Page.FrameClearedScheduledNavigationEvent): void {\n  }\n\n  frameResized(): void {\n  }\n\n  javascriptDialogOpening(_params: Protocol.Page.JavascriptDialogOpeningEvent): void {\n  }\n\n  javascriptDialogClosed(_params: Protocol.Page.JavascriptDialogClosedEvent): void {\n  }\n\n  interstitialShown(): void {\n  }\n\n  interstitialHidden(): void {\n  }\n\n  windowOpen(_params: Protocol.Page.WindowOpenEvent): void {\n  }\n\n  fileChooserOpened(_params: Protocol.Page.FileChooserOpenedEvent): void {\n  }\n\n  compilationCacheProduced(_params: Protocol.Page.CompilationCacheProducedEvent): void {\n  }\n\n  downloadWillBegin(_params: Protocol.Page.DownloadWillBeginEvent): void {\n  }\n\n  downloadProgress(): void {\n  }\n\n  prerenderAttemptCompleted(_params: Protocol.Page.PrerenderAttemptCompletedEvent): void {\n  }\n}\n\nSDKModel.register(ScreenCaptureModel, {capabilities: Capability.ScreenCapture, autostart: false});\n"],
  "mappings": "AAOA;AAEA;AACA;AAEO,wCAAiC,SAA0D;AAAA;AAAA;AAAA;AAAA,EAIhG,YAAY,QAAgB;AAC1B,UAAM;AACN,kBAAc,OAAO;AACrB,8BAA0B;AAC1B,0CAAsC;AACtC,WAAO,uBAAuB;AAAA;AAAA,EAGhC,gBACI,QAAoD,SAAiB,UACrE,WAA6B,eAC7B,SACA,qBAAoD;AACtD,8BAA0B;AAC1B,0CAAsC;AACtC,SAAK,YAAY,uBAAuB,EAAC,QAAQ,SAAS,UAAU,WAAW;AAAA;AAAA,EAGjF,iBAAuB;AACrB,8BAA0B;AAC1B,0CAAsC;AACtC,SAAK,YAAY;AAAA;AAAA,QAGb,kBACF,QAAsD,SACtD,MAAqD;AACvD,UAAM,aAAa;AACnB,UAAM,SAAS,MAAM,YAAY,yBAC7B,EAAC,QAAQ,SAAS,MAAM,aAAa,MAAM,uBAAuB;AACtE,UAAM,aAAa;AACnB,WAAO,OAAO;AAAA;AAAA,QAGV,qBAME;AACN,UAAM,WAAW,MAAM,YAAY;AACnC,QAAI,SAAS,YAAY;AACvB,aAAO;AAAA;AAET,WAAO;AAAA,MACL,WAAW,SAAS,kBAAkB;AAAA,MACtC,WAAW,SAAS,kBAAkB;AAAA,MACtC,eAAe,SAAS,kBAAkB;AAAA,MAC1C,cAAc,SAAS,eAAe;AAAA,MACtC,eAAe,SAAS,eAAe;AAAA;AAAA;AAAA,EAI3C,gBAAgB,EAAC,MAAM,UAAU,aAAsD;AACrF,SAAK,YAAY,0BAA0B,EAAC;AAC5C,QAAI,yBAAyB;AAC3B,8BAAwB,KAAK,MAAM,MAAM;AAAA;AAAA;AAAA,EAI7C,4BAA4B,EAAC,WAAgE;AAC3F,QAAI,qCAAqC;AACvC,0CAAoC,KAAK,MAAM;AAAA;AAAA;AAAA,EAInD,wBAAwB,SAA2D;AAAA;AAAA,EAGnF,qBAAqB,SAAwD;AAAA;AAAA,EAG7E,eAAe,SAAkD;AAAA;AAAA,EAGjE,eAAe,SAAkD;AAAA;AAAA,EAGjE,wBAAwB,SAA2D;AAAA;AAAA,EAGnF,cAAc,SAAiD;AAAA;AAAA,EAG/D,eAAe,SAAkD;AAAA;AAAA,EAGjE,eAAe,SAAkD;AAAA;AAAA,EAGjE,cAAc,SAAiD;AAAA;AAAA,EAG/D,oBAAoB,SAAuD;AAAA;AAAA,EAG3E,oBAAoB,SAAuD;AAAA;AAAA,EAG3E,yBAAyB,SAA4D;AAAA;AAAA,EAGrF,yBAAyB,SAA4D;AAAA;AAAA,EAGrF,gCAAgC,SAAmE;AAAA;AAAA,EAGnG,eAAqB;AAAA;AAAA,EAGrB,wBAAwB,SAA2D;AAAA;AAAA,EAGnF,uBAAuB,SAA0D;AAAA;AAAA,EAGjF,oBAA0B;AAAA;AAAA,EAG1B,qBAA2B;AAAA;AAAA,EAG3B,WAAW,SAA8C;AAAA;AAAA,EAGzD,kBAAkB,SAAqD;AAAA;AAAA,EAGvE,yBAAyB,SAA4D;AAAA;AAAA,EAGrF,kBAAkB,SAAqD;AAAA;AAAA,EAGvE,mBAAyB;AAAA;AAAA,EAGzB,0BAA0B,SAA6D;AAAA;AAAA;AAIzF,SAAS,SAAS,oBAAoB,EAAC,cAAc,WAAW,eAAe,WAAW;",
  "names": []
}
