{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/OverlayPersistentHighlighter.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Protocol from '../../generated/protocol.js';\nimport * as Common from '../common/common.js';\n\nimport {OverlayColorGenerator} from './OverlayColorGenerator.js';\n\nexport class OverlayPersistentHighlighter {\n  readonly #model: OverlayModel;\n  readonly #gridHighlights: Map<Protocol.DOM.NodeId, Protocol.Overlay.GridHighlightConfig>;\n  readonly #scrollSnapHighlights: Map<Protocol.DOM.NodeId, Protocol.Overlay.ScrollSnapContainerHighlightConfig>;\n  readonly #flexHighlights: Map<Protocol.DOM.NodeId, Protocol.Overlay.FlexContainerHighlightConfig>;\n  readonly #containerQueryHighlights: Map<Protocol.DOM.NodeId, Protocol.Overlay.ContainerQueryContainerHighlightConfig>;\n  readonly #isolatedElementHighlights: Map<Protocol.DOM.NodeId, Protocol.Overlay.IsolationModeHighlightConfig>;\n  readonly #colors: Map<Protocol.DOM.NodeId, Common.Color.Color>;\n  #gridColorGenerator: OverlayColorGenerator;\n  #flexColorGenerator: OverlayColorGenerator;\n  #flexEnabled: boolean;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  readonly #showGridLineLabelsSetting: Common.Settings.Setting<any>;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  readonly #extendGridLinesSetting: Common.Settings.Setting<any>;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  readonly #showGridAreasSetting: Common.Settings.Setting<any>;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  readonly #showGridTrackSizesSetting: Common.Settings.Setting<any>;\n  constructor(model: OverlayModel, flexEnabled: boolean = true) {\n    this.#model = model;\n\n    this.#gridHighlights = new Map();\n\n    this.#scrollSnapHighlights = new Map();\n\n    this.#flexHighlights = new Map();\n\n    this.#containerQueryHighlights = new Map();\n\n    this.#isolatedElementHighlights = new Map();\n\n    this.#colors = new Map();\n\n    this.#gridColorGenerator = new OverlayColorGenerator();\n    this.#flexColorGenerator = new OverlayColorGenerator();\n    this.#flexEnabled = flexEnabled;\n\n    this.#showGridLineLabelsSetting = Common.Settings.Settings.instance().moduleSetting('showGridLineLabels');\n    this.#showGridLineLabelsSetting.addChangeListener(this.onSettingChange, this);\n    this.#extendGridLinesSetting = Common.Settings.Settings.instance().moduleSetting('extendGridLines');\n    this.#extendGridLinesSetting.addChangeListener(this.onSettingChange, this);\n    this.#showGridAreasSetting = Common.Settings.Settings.instance().moduleSetting('showGridAreas');\n    this.#showGridAreasSetting.addChangeListener(this.onSettingChange, this);\n    this.#showGridTrackSizesSetting = Common.Settings.Settings.instance().moduleSetting('showGridTrackSizes');\n    this.#showGridTrackSizesSetting.addChangeListener(this.onSettingChange, this);\n  }\n\n  private onSettingChange(): void {\n    this.resetOverlay();\n  }\n\n  private buildGridHighlightConfig(nodeId: Protocol.DOM.NodeId): Protocol.Overlay.GridHighlightConfig {\n    const mainColor = this.colorOfGrid(nodeId);\n    const background = mainColor.setAlpha(0.1);\n    const gapBackground = mainColor.setAlpha(0.3);\n    const gapHatch = mainColor.setAlpha(0.8);\n\n    const showGridExtensionLines = (this.#extendGridLinesSetting.get() as boolean);\n    const showPositiveLineNumbers = this.#showGridLineLabelsSetting.get() === 'lineNumbers';\n    const showNegativeLineNumbers = showPositiveLineNumbers;\n    const showLineNames = this.#showGridLineLabelsSetting.get() === 'lineNames';\n    return {\n      rowGapColor: gapBackground.toProtocolRGBA(),\n      rowHatchColor: gapHatch.toProtocolRGBA(),\n      columnGapColor: gapBackground.toProtocolRGBA(),\n      columnHatchColor: gapHatch.toProtocolRGBA(),\n      gridBorderColor: mainColor.toProtocolRGBA(),\n      gridBorderDash: false,\n      rowLineColor: mainColor.toProtocolRGBA(),\n      columnLineColor: mainColor.toProtocolRGBA(),\n      rowLineDash: true,\n      columnLineDash: true,\n      showGridExtensionLines,\n      showPositiveLineNumbers,\n      showNegativeLineNumbers,\n      showLineNames,\n      showAreaNames: (this.#showGridAreasSetting.get() as boolean),\n      showTrackSizes: (this.#showGridTrackSizesSetting.get() as boolean),\n      areaBorderColor: mainColor.toProtocolRGBA(),\n      gridBackgroundColor: background.toProtocolRGBA(),\n    };\n  }\n\n  private buildFlexContainerHighlightConfig(nodeId: Protocol.DOM.NodeId):\n      Protocol.Overlay.FlexContainerHighlightConfig {\n    const mainColor = this.colorOfFlex(nodeId);\n    return {\n      containerBorder: {color: mainColor.toProtocolRGBA(), pattern: Protocol.Overlay.LineStylePattern.Dashed},\n      itemSeparator: {color: mainColor.toProtocolRGBA(), pattern: Protocol.Overlay.LineStylePattern.Dotted},\n      lineSeparator: {color: mainColor.toProtocolRGBA(), pattern: Protocol.Overlay.LineStylePattern.Dashed},\n      mainDistributedSpace: {hatchColor: mainColor.toProtocolRGBA()},\n      crossDistributedSpace: {hatchColor: mainColor.toProtocolRGBA()},\n    };\n  }\n\n  private buildScrollSnapContainerHighlightConfig(_nodeId: number):\n      Protocol.Overlay.ScrollSnapContainerHighlightConfig {\n    return {\n      snapAreaBorder: {\n        color: Common.Color.PageHighlight.GridBorder.toProtocolRGBA(),\n        pattern: Protocol.Overlay.LineStylePattern.Dashed,\n      },\n      snapportBorder: {color: Common.Color.PageHighlight.GridBorder.toProtocolRGBA()},\n      scrollMarginColor: Common.Color.PageHighlight.Margin.toProtocolRGBA(),\n      scrollPaddingColor: Common.Color.PageHighlight.Padding.toProtocolRGBA(),\n    };\n  }\n\n  highlightGridInOverlay(nodeId: Protocol.DOM.NodeId): void {\n    this.#gridHighlights.set(nodeId, this.buildGridHighlightConfig(nodeId));\n    this.updateHighlightsInOverlay();\n  }\n\n  isGridHighlighted(nodeId: Protocol.DOM.NodeId): boolean {\n    return this.#gridHighlights.has(nodeId);\n  }\n\n  colorOfGrid(nodeId: Protocol.DOM.NodeId): Common.Color.Color {\n    let color = this.#colors.get(nodeId);\n    if (!color) {\n      color = this.#gridColorGenerator.next();\n      this.#colors.set(nodeId, color);\n    }\n\n    return color;\n  }\n\n  setColorOfGrid(nodeId: Protocol.DOM.NodeId, color: Common.Color.Color): void {\n    this.#colors.set(nodeId, color);\n  }\n\n  hideGridInOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (this.#gridHighlights.has(nodeId)) {\n      this.#gridHighlights.delete(nodeId);\n      this.updateHighlightsInOverlay();\n    }\n  }\n\n  highlightScrollSnapInOverlay(nodeId: Protocol.DOM.NodeId): void {\n    this.#scrollSnapHighlights.set(nodeId, this.buildScrollSnapContainerHighlightConfig(nodeId));\n    this.updateHighlightsInOverlay();\n  }\n\n  isScrollSnapHighlighted(nodeId: Protocol.DOM.NodeId): boolean {\n    return this.#scrollSnapHighlights.has(nodeId);\n  }\n\n  hideScrollSnapInOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (this.#scrollSnapHighlights.has(nodeId)) {\n      this.#scrollSnapHighlights.delete(nodeId);\n      this.updateHighlightsInOverlay();\n    }\n  }\n\n  highlightFlexInOverlay(nodeId: Protocol.DOM.NodeId): void {\n    this.#flexHighlights.set(nodeId, this.buildFlexContainerHighlightConfig(nodeId));\n    this.updateHighlightsInOverlay();\n  }\n\n  isFlexHighlighted(nodeId: Protocol.DOM.NodeId): boolean {\n    return this.#flexHighlights.has(nodeId);\n  }\n\n  colorOfFlex(nodeId: Protocol.DOM.NodeId): Common.Color.Color {\n    let color = this.#colors.get(nodeId);\n    if (!color) {\n      color = this.#flexColorGenerator.next();\n      this.#colors.set(nodeId, color);\n    }\n\n    return color;\n  }\n\n  setColorOfFlex(nodeId: Protocol.DOM.NodeId, color: Common.Color.Color): void {\n    this.#colors.set(nodeId, color);\n  }\n\n  hideFlexInOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (this.#flexHighlights.has(nodeId)) {\n      this.#flexHighlights.delete(nodeId);\n      this.updateHighlightsInOverlay();\n    }\n  }\n\n  highlightContainerQueryInOverlay(nodeId: Protocol.DOM.NodeId): void {\n    this.#containerQueryHighlights.set(nodeId, this.buildContainerQueryContainerHighlightConfig());\n    this.updateHighlightsInOverlay();\n  }\n\n  hideContainerQueryInOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (this.#containerQueryHighlights.has(nodeId)) {\n      this.#containerQueryHighlights.delete(nodeId);\n      this.updateHighlightsInOverlay();\n    }\n  }\n\n  isContainerQueryHighlighted(nodeId: Protocol.DOM.NodeId): boolean {\n    return this.#containerQueryHighlights.has(nodeId);\n  }\n\n  private buildContainerQueryContainerHighlightConfig(): Protocol.Overlay.ContainerQueryContainerHighlightConfig {\n    return {\n      containerBorder: {\n        color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n        pattern: Protocol.Overlay.LineStylePattern.Dashed,\n      },\n      descendantBorder: {\n        color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n        pattern: Protocol.Overlay.LineStylePattern.Dashed,\n      },\n    };\n  }\n\n  highlightIsolatedElementInOverlay(nodeId: Protocol.DOM.NodeId): void {\n    this.#isolatedElementHighlights.set(nodeId, this.buildIsolationModeHighlightConfig());\n    this.updateHighlightsInOverlay();\n  }\n\n  hideIsolatedElementInOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (this.#isolatedElementHighlights.has(nodeId)) {\n      this.#isolatedElementHighlights.delete(nodeId);\n      this.updateHighlightsInOverlay();\n    }\n  }\n\n  isIsolatedElementHighlighted(nodeId: Protocol.DOM.NodeId): boolean {\n    return this.#isolatedElementHighlights.has(nodeId);\n  }\n\n  private buildIsolationModeHighlightConfig(): Protocol.Overlay.IsolationModeHighlightConfig {\n    return {\n      resizerColor: Common.Color.IsolationModeHighlight.Resizer.toProtocolRGBA(),\n      resizerHandleColor: Common.Color.IsolationModeHighlight.ResizerHandle.toProtocolRGBA(),\n      maskColor: Common.Color.IsolationModeHighlight.Mask.toProtocolRGBA(),\n    };\n  }\n\n  hideAllInOverlay(): void {\n    this.#flexHighlights.clear();\n    this.#gridHighlights.clear();\n    this.#scrollSnapHighlights.clear();\n    this.#containerQueryHighlights.clear();\n    this.#isolatedElementHighlights.clear();\n    this.updateHighlightsInOverlay();\n  }\n\n  refreshHighlights(): void {\n    const gridsNeedUpdate = this.updateHighlightsForDeletedNodes(this.#gridHighlights);\n    const flexboxesNeedUpdate = this.updateHighlightsForDeletedNodes(this.#flexHighlights);\n    const scrollSnapsNeedUpdate = this.updateHighlightsForDeletedNodes(this.#scrollSnapHighlights);\n    const containerQueriesNeedUpdate = this.updateHighlightsForDeletedNodes(this.#containerQueryHighlights);\n    const isolatedElementsNeedUpdate = this.updateHighlightsForDeletedNodes(this.#isolatedElementHighlights);\n    if (flexboxesNeedUpdate || gridsNeedUpdate || scrollSnapsNeedUpdate || containerQueriesNeedUpdate ||\n        isolatedElementsNeedUpdate) {\n      this.updateHighlightsInOverlay();\n    }\n  }\n\n  private updateHighlightsForDeletedNodes(highlights: Map<Protocol.DOM.NodeId, unknown>): boolean {\n    let needsUpdate = false;\n    for (const nodeId of highlights.keys()) {\n      if (this.#model.getDOMModel().nodeForId(nodeId) === null) {\n        highlights.delete(nodeId);\n        needsUpdate = true;\n      }\n    }\n    return needsUpdate;\n  }\n\n  resetOverlay(): void {\n    for (const nodeId of this.#gridHighlights.keys()) {\n      this.#gridHighlights.set(nodeId, this.buildGridHighlightConfig(nodeId));\n    }\n    for (const nodeId of this.#flexHighlights.keys()) {\n      this.#flexHighlights.set(nodeId, this.buildFlexContainerHighlightConfig(nodeId));\n    }\n    for (const nodeId of this.#scrollSnapHighlights.keys()) {\n      this.#scrollSnapHighlights.set(nodeId, this.buildScrollSnapContainerHighlightConfig(nodeId));\n    }\n    for (const nodeId of this.#containerQueryHighlights.keys()) {\n      this.#containerQueryHighlights.set(nodeId, this.buildContainerQueryContainerHighlightConfig());\n    }\n    for (const nodeId of this.#isolatedElementHighlights.keys()) {\n      this.#isolatedElementHighlights.set(nodeId, this.buildIsolationModeHighlightConfig());\n    }\n    this.updateHighlightsInOverlay();\n  }\n\n  private updateHighlightsInOverlay(): void {\n    const hasNodesToHighlight = this.#gridHighlights.size > 0 || this.#flexHighlights.size > 0 ||\n        this.#containerQueryHighlights.size > 0 || this.#isolatedElementHighlights.size > 0;\n    this.#model.setShowViewportSizeOnResize(!hasNodesToHighlight);\n    this.updateGridHighlightsInOverlay();\n    this.updateFlexHighlightsInOverlay();\n    this.updateScrollSnapHighlightsInOverlay();\n    this.updateContainerQueryHighlightsInOverlay();\n    this.updateIsolatedElementHighlightsInOverlay();\n  }\n\n  private updateGridHighlightsInOverlay(): void {\n    const overlayModel = this.#model;\n    const gridNodeHighlightConfigs = [];\n    for (const [nodeId, gridHighlightConfig] of this.#gridHighlights.entries()) {\n      gridNodeHighlightConfigs.push({nodeId, gridHighlightConfig});\n    }\n    overlayModel.target().overlayAgent().invoke_setShowGridOverlays({gridNodeHighlightConfigs});\n  }\n\n  private updateFlexHighlightsInOverlay(): void {\n    if (!this.#flexEnabled) {\n      return;\n    }\n    const overlayModel = this.#model;\n    const flexNodeHighlightConfigs = [];\n    for (const [nodeId, flexContainerHighlightConfig] of this.#flexHighlights.entries()) {\n      flexNodeHighlightConfigs.push({nodeId, flexContainerHighlightConfig});\n    }\n    overlayModel.target().overlayAgent().invoke_setShowFlexOverlays({flexNodeHighlightConfigs});\n  }\n\n  private updateScrollSnapHighlightsInOverlay(): void {\n    const overlayModel = this.#model;\n    const scrollSnapHighlightConfigs = [];\n    for (const [nodeId, scrollSnapContainerHighlightConfig] of this.#scrollSnapHighlights.entries()) {\n      scrollSnapHighlightConfigs.push({nodeId, scrollSnapContainerHighlightConfig});\n    }\n    overlayModel.target().overlayAgent().invoke_setShowScrollSnapOverlays({scrollSnapHighlightConfigs});\n  }\n\n  updateContainerQueryHighlightsInOverlay(): void {\n    const overlayModel = this.#model;\n    const containerQueryHighlightConfigs = [];\n    for (const [nodeId, containerQueryContainerHighlightConfig] of this.#containerQueryHighlights.entries()) {\n      containerQueryHighlightConfigs.push({nodeId, containerQueryContainerHighlightConfig});\n    }\n    overlayModel.target().overlayAgent().invoke_setShowContainerQueryOverlays({containerQueryHighlightConfigs});\n  }\n\n  updateIsolatedElementHighlightsInOverlay(): void {\n    const overlayModel = this.#model;\n    const isolatedElementHighlightConfigs = [];\n    for (const [nodeId, isolationModeHighlightConfig] of this.#isolatedElementHighlights.entries()) {\n      isolatedElementHighlightConfigs.push({nodeId, isolationModeHighlightConfig});\n    }\n    overlayModel.target().overlayAgent().invoke_setShowIsolatedElements({isolatedElementHighlightConfigs});\n  }\n}\n\nexport interface DOMModel {\n  nodeForId(nodeId: Protocol.DOM.NodeId): void;\n}\nexport interface OverlayAgent {\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  invoke_setShowGridOverlays(param: {\n    gridNodeHighlightConfigs: Array<{\n      nodeId: number,\n      gridHighlightConfig: Protocol.Overlay.GridHighlightConfig,\n    }>,\n  }): void;\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  invoke_setShowFlexOverlays(param: {\n    flexNodeHighlightConfigs: Array<{\n      nodeId: number,\n      flexContainerHighlightConfig: Protocol.Overlay.FlexContainerHighlightConfig,\n    }>,\n  }): void;\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  invoke_setShowScrollSnapOverlays(param: {\n    scrollSnapHighlightConfigs: Array<{\n      nodeId: number,\n    }>,\n  }): void;\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  invoke_setShowContainerQueryOverlays(param: {\n    containerQueryHighlightConfigs: Array<{\n      nodeId: number,\n      containerQueryContainerHighlightConfig: Protocol.Overlay.ContainerQueryContainerHighlightConfig,\n    }>,\n  }): void;\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  invoke_setShowIsolatedElements(param: {\n    isolatedElementHighlightConfigs: Array<{\n      nodeId: number,\n      isolationModeHighlightConfig: Protocol.Overlay.IsolationModeHighlightConfig,\n    }>,\n  }): void;\n}\n\nexport interface Target {\n  overlayAgent(): OverlayAgent;\n}\n\nexport interface OverlayModel {\n  getDOMModel(): DOMModel;\n\n  target(): Target;\n\n  setShowViewportSizeOnResize(value: boolean): void;\n}\n"],
  "mappings": "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",
  "names": []
}
