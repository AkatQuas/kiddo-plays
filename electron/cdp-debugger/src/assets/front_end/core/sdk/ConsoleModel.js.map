{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/ConsoleModel.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Protocol from '../../generated/protocol.js';\nimport * as Common from '../common/common.js';\nimport * as Host from '../host/host.js';\nimport * as i18n from '../i18n/i18n.js';\nimport type * as Platform from '../platform/platform.js';\n\nimport {FrontendMessageSource, FrontendMessageType} from './ConsoleModelTypes.js';\nexport {FrontendMessageSource, FrontendMessageType} from './ConsoleModelTypes.js';\n\nimport type {EventData} from './CPUProfilerModel.js';\nimport {CPUProfilerModel, Events as CPUProfilerModelEvents} from './CPUProfilerModel.js';\nimport type {Location} from './DebuggerModel.js';\nimport {Events as DebuggerModelEvents} from './DebuggerModel.js';\nimport {LogModel} from './LogModel.js';\nimport {RemoteObject} from './RemoteObject.js';\nimport {Events as ResourceTreeModelEvents, ResourceTreeModel} from './ResourceTreeModel.js';\nimport type {\n  ConsoleAPICall, ExceptionWithTimestamp, ExecutionContext, QueryObjectRequestedEvent} from './RuntimeModel.js';\nimport {Events as RuntimeModelEvents, RuntimeModel} from './RuntimeModel.js';\nimport type {Target} from './Target.js';\nimport {TargetManager} from './TargetManager.js';\nimport type {Observer} from './TargetManager.js';\nimport type {ResourceTreeFrame} from './ResourceTreeModel.js';\n\nconst UIStrings = {\n  /**\n  *@description Text shown when the main frame (page) of the website was navigated to a different URL.\n  *@example {https://example.com} PH1\n  */\n  navigatedToS: 'Navigated to {PH1}',\n  /**\n  *@description Text shown in the console when a performance profile (with the given name) was started.\n  *@example {title} PH1\n  */\n  profileSStarted: 'Profile \\'\\'{PH1}\\'\\' started.',\n  /**\n  *@description Text shown in the console when a performance profile (with the given name) was stopped.\n  *@example {name} PH1\n  */\n  profileSFinished: 'Profile \\'\\'{PH1}\\'\\' finished.',\n  /**\n  *@description Error message shown in the console after the user tries to save a JavaScript value to a temporary variable.\n  */\n  failedToSaveToTempVariable: 'Failed to save to temp variable.',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/ConsoleModel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet settingsInstance: ConsoleModel;\n\nexport class ConsoleModel extends Common.ObjectWrapper.ObjectWrapper<EventTypes> implements Observer {\n  #messagesInternal: ConsoleMessage[];\n  readonly #messageByExceptionId: Map<RuntimeModel, Map<number, ConsoleMessage>>;\n  #warningsInternal: number;\n  #errorsInternal: number;\n  #violationsInternal: number;\n  #pageLoadSequenceNumber: number;\n  readonly #targetListeners: WeakMap<Target, Common.EventTarget.EventDescriptor[]>;\n\n  private constructor() {\n    super();\n\n    this.#messagesInternal = [];\n    this.#messageByExceptionId = new Map();\n    this.#warningsInternal = 0;\n    this.#errorsInternal = 0;\n    this.#violationsInternal = 0;\n    this.#pageLoadSequenceNumber = 0;\n    this.#targetListeners = new WeakMap();\n\n    TargetManager.instance().observeTargets(this);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ConsoleModel {\n    const {forceNew} = opts;\n    if (!settingsInstance || forceNew) {\n      settingsInstance = new ConsoleModel();\n    }\n\n    return settingsInstance;\n  }\n\n  targetAdded(target: Target): void {\n    const resourceTreeModel = target.model(ResourceTreeModel);\n    if (!resourceTreeModel || resourceTreeModel.cachedResourcesLoaded()) {\n      this.initTarget(target);\n      return;\n    }\n\n    const eventListener = resourceTreeModel.addEventListener(ResourceTreeModelEvents.CachedResourcesLoaded, () => {\n      Common.EventTarget.removeEventListeners([eventListener]);\n      this.initTarget(target);\n    });\n  }\n\n  private initTarget(target: Target): void {\n    const eventListeners = [];\n\n    const cpuProfilerModel = target.model(CPUProfilerModel);\n    if (cpuProfilerModel) {\n      eventListeners.push(cpuProfilerModel.addEventListener(\n          CPUProfilerModelEvents.ConsoleProfileStarted, this.consoleProfileStarted.bind(this, cpuProfilerModel)));\n      eventListeners.push(cpuProfilerModel.addEventListener(\n          CPUProfilerModelEvents.ConsoleProfileFinished, this.consoleProfileFinished.bind(this, cpuProfilerModel)));\n    }\n\n    const resourceTreeModel = target.model(ResourceTreeModel);\n    if (resourceTreeModel && !target.parentTarget()) {\n      eventListeners.push(resourceTreeModel.addEventListener(\n          ResourceTreeModelEvents.MainFrameNavigated, this.mainFrameNavigated, this));\n    }\n\n    const runtimeModel = target.model(RuntimeModel);\n    if (runtimeModel) {\n      eventListeners.push(runtimeModel.addEventListener(\n          RuntimeModelEvents.ExceptionThrown, this.exceptionThrown.bind(this, runtimeModel)));\n      eventListeners.push(runtimeModel.addEventListener(\n          RuntimeModelEvents.ExceptionRevoked, this.exceptionRevoked.bind(this, runtimeModel)));\n      eventListeners.push(runtimeModel.addEventListener(\n          RuntimeModelEvents.ConsoleAPICalled, this.consoleAPICalled.bind(this, runtimeModel)));\n      if (!target.parentTarget()) {\n        eventListeners.push(runtimeModel.debuggerModel().addEventListener(\n            DebuggerModelEvents.GlobalObjectCleared, this.clearIfNecessary, this));\n      }\n      eventListeners.push(runtimeModel.addEventListener(\n          RuntimeModelEvents.QueryObjectRequested, this.queryObjectRequested.bind(this, runtimeModel)));\n    }\n\n    this.#targetListeners.set(target, eventListeners);\n  }\n\n  targetRemoved(target: Target): void {\n    const runtimeModel = target.model(RuntimeModel);\n    if (runtimeModel) {\n      this.#messageByExceptionId.delete(runtimeModel);\n    }\n    Common.EventTarget.removeEventListeners(this.#targetListeners.get(target) || []);\n  }\n\n  async evaluateCommandInConsole(\n      executionContext: ExecutionContext, originatingMessage: ConsoleMessage, expression: string,\n      useCommandLineAPI: boolean): Promise<void> {\n    const result = await executionContext.evaluate(\n        {\n          expression: expression,\n          objectGroup: 'console',\n          includeCommandLineAPI: useCommandLineAPI,\n          silent: false,\n          returnByValue: false,\n          generatePreview: true,\n          replMode: true,\n          allowUnsafeEvalBlockedByCSP: false,\n          disableBreaks: undefined,\n          throwOnSideEffect: undefined,\n          timeout: undefined,\n        },\n        Common.Settings.Settings.instance().moduleSetting('consoleUserActivationEval').get(), /* awaitPromise */ false);\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.ConsoleEvaluated);\n    if ('error' in result) {\n      return;\n    }\n    await Common.Console.Console.instance().showPromise();\n    this.dispatchEventToListeners(\n        Events.CommandEvaluated,\n        {result: result.object, commandMessage: originatingMessage, exceptionDetails: result.exceptionDetails});\n  }\n\n  addCommandMessage(executionContext: ExecutionContext, text: string): ConsoleMessage {\n    const commandMessage = new ConsoleMessage(\n        executionContext.runtimeModel, Protocol.Log.LogEntrySource.Javascript, null, text,\n        {type: FrontendMessageType.Command});\n    commandMessage.setExecutionContextId(executionContext.id);\n    this.addMessage(commandMessage);\n    return commandMessage;\n  }\n\n  addMessage(msg: ConsoleMessage): void {\n    msg.setPageLoadSequenceNumber(this.#pageLoadSequenceNumber);\n    if (msg.source === FrontendMessageSource.ConsoleAPI &&\n        msg.type === Protocol.Runtime.ConsoleAPICalledEventType.Clear) {\n      this.clearIfNecessary();\n    }\n\n    this.#messagesInternal.push(msg);\n    const runtimeModel = msg.runtimeModel();\n    const exceptionId = msg.getExceptionId();\n    if (exceptionId && runtimeModel) {\n      let modelMap = this.#messageByExceptionId.get(runtimeModel);\n      if (!modelMap) {\n        modelMap = new Map();\n        this.#messageByExceptionId.set(runtimeModel, modelMap);\n      }\n      modelMap.set(exceptionId, msg);\n    }\n    this.incrementErrorWarningCount(msg);\n    this.dispatchEventToListeners(Events.MessageAdded, msg);\n  }\n\n  private exceptionThrown(\n      runtimeModel: RuntimeModel, event: Common.EventTarget.EventTargetEvent<ExceptionWithTimestamp>): void {\n    const exceptionWithTimestamp = event.data;\n    const affectedResources = extractExceptionMetaData(exceptionWithTimestamp.details.exceptionMetaData);\n    const consoleMessage = ConsoleMessage.fromException(\n        runtimeModel, exceptionWithTimestamp.details, undefined, exceptionWithTimestamp.timestamp, undefined,\n        affectedResources);\n    consoleMessage.setExceptionId(exceptionWithTimestamp.details.exceptionId);\n    this.addMessage(consoleMessage);\n  }\n\n  private exceptionRevoked(runtimeModel: RuntimeModel, event: Common.EventTarget.EventTargetEvent<number>): void {\n    const exceptionId = event.data;\n    const modelMap = this.#messageByExceptionId.get(runtimeModel);\n    const exceptionMessage = modelMap ? modelMap.get(exceptionId) : null;\n    if (!exceptionMessage) {\n      return;\n    }\n    this.#errorsInternal--;\n    exceptionMessage.level = Protocol.Log.LogEntryLevel.Verbose;\n    this.dispatchEventToListeners(Events.MessageUpdated, exceptionMessage);\n  }\n\n  private consoleAPICalled(runtimeModel: RuntimeModel, event: Common.EventTarget.EventTargetEvent<ConsoleAPICall>):\n      void {\n    const call = event.data;\n    let level: Protocol.Log.LogEntryLevel = Protocol.Log.LogEntryLevel.Info;\n    if (call.type === Protocol.Runtime.ConsoleAPICalledEventType.Debug) {\n      level = Protocol.Log.LogEntryLevel.Verbose;\n    } else if (\n        call.type === Protocol.Runtime.ConsoleAPICalledEventType.Error ||\n        call.type === Protocol.Runtime.ConsoleAPICalledEventType.Assert) {\n      level = Protocol.Log.LogEntryLevel.Error;\n    } else if (call.type === Protocol.Runtime.ConsoleAPICalledEventType.Warning) {\n      level = Protocol.Log.LogEntryLevel.Warning;\n    } else if (\n        call.type === Protocol.Runtime.ConsoleAPICalledEventType.Info ||\n        call.type === Protocol.Runtime.ConsoleAPICalledEventType.Log) {\n      level = Protocol.Log.LogEntryLevel.Info;\n    }\n    let message = '';\n    if (call.args.length && call.args[0].unserializableValue) {\n      message = call.args[0].unserializableValue;\n    } else if (call.args.length && (typeof call.args[0].value !== 'object' || call.args[0].value === null)) {\n      message = String(call.args[0].value);\n    } else if (call.args.length && call.args[0].description) {\n      message = call.args[0].description;\n    }\n    const callFrame = call.stackTrace && call.stackTrace.callFrames.length ? call.stackTrace.callFrames[0] : null;\n    const details = {\n      type: call.type,\n      url: callFrame?.url as Platform.DevToolsPath.UrlString | undefined,\n      line: callFrame?.lineNumber,\n      column: callFrame?.columnNumber,\n      parameters: call.args,\n      stackTrace: call.stackTrace,\n      timestamp: call.timestamp,\n      executionContextId: call.executionContextId,\n      context: call.context,\n    };\n    const consoleMessage =\n        new ConsoleMessage(runtimeModel, FrontendMessageSource.ConsoleAPI, level, (message as string), details);\n    this.addMessage(consoleMessage);\n  }\n\n  private queryObjectRequested(\n      runtimeModel: RuntimeModel, event: Common.EventTarget.EventTargetEvent<QueryObjectRequestedEvent>): void {\n    const {objects, executionContextId} = event.data;\n    const details = {\n      type: FrontendMessageType.QueryObjectResult,\n      parameters: [objects],\n      executionContextId,\n    };\n    const consoleMessage = new ConsoleMessage(\n        runtimeModel, FrontendMessageSource.ConsoleAPI, Protocol.Log.LogEntryLevel.Info, '', details);\n    this.addMessage(consoleMessage);\n  }\n\n  private clearIfNecessary(): void {\n    if (!Common.Settings.Settings.instance().moduleSetting('preserveConsoleLog').get()) {\n      this.clear();\n    }\n    ++this.#pageLoadSequenceNumber;\n  }\n\n  private mainFrameNavigated(event: Common.EventTarget.EventTargetEvent<ResourceTreeFrame>): void {\n    if (Common.Settings.Settings.instance().moduleSetting('preserveConsoleLog').get()) {\n      Common.Console.Console.instance().log(i18nString(UIStrings.navigatedToS, {PH1: event.data.url}));\n    }\n  }\n\n  private consoleProfileStarted(\n      cpuProfilerModel: CPUProfilerModel, event: Common.EventTarget.EventTargetEvent<EventData>): void {\n    const {data} = event;\n    this.addConsoleProfileMessage(\n        cpuProfilerModel, Protocol.Runtime.ConsoleAPICalledEventType.Profile, data.scriptLocation,\n        i18nString(UIStrings.profileSStarted, {PH1: data.title}));\n  }\n\n  private consoleProfileFinished(\n      cpuProfilerModel: CPUProfilerModel, event: Common.EventTarget.EventTargetEvent<EventData>): void {\n    const {data} = event;\n    this.addConsoleProfileMessage(\n        cpuProfilerModel, Protocol.Runtime.ConsoleAPICalledEventType.ProfileEnd, data.scriptLocation,\n        i18nString(UIStrings.profileSFinished, {PH1: data.title}));\n  }\n\n  private addConsoleProfileMessage(\n      cpuProfilerModel: CPUProfilerModel, type: MessageType, scriptLocation: Location, messageText: string): void {\n    const script = scriptLocation.script();\n    const callFrames = [{\n      functionName: '',\n      scriptId: scriptLocation.scriptId,\n      url: script ? script.contentURL() : '',\n      lineNumber: scriptLocation.lineNumber,\n      columnNumber: scriptLocation.columnNumber || 0,\n    }];\n    this.addMessage(new ConsoleMessage(\n        cpuProfilerModel.runtimeModel(), FrontendMessageSource.ConsoleAPI, Protocol.Log.LogEntryLevel.Info, messageText,\n        {type, stackTrace: {callFrames}}));\n  }\n\n  private incrementErrorWarningCount(msg: ConsoleMessage): void {\n    if (msg.source === Protocol.Log.LogEntrySource.Violation) {\n      this.#violationsInternal++;\n      return;\n    }\n    switch (msg.level) {\n      case Protocol.Log.LogEntryLevel.Warning:\n        this.#warningsInternal++;\n        break;\n      case Protocol.Log.LogEntryLevel.Error:\n        this.#errorsInternal++;\n        break;\n    }\n  }\n\n  messages(): ConsoleMessage[] {\n    return this.#messagesInternal;\n  }\n\n  requestClearMessages(): void {\n    for (const logModel of TargetManager.instance().models(LogModel)) {\n      logModel.requestClear();\n    }\n    for (const runtimeModel of TargetManager.instance().models(RuntimeModel)) {\n      runtimeModel.discardConsoleEntries();\n    }\n    this.clear();\n  }\n\n  private clear(): void {\n    this.#messagesInternal = [];\n    this.#messageByExceptionId.clear();\n    this.#errorsInternal = 0;\n    this.#warningsInternal = 0;\n    this.#violationsInternal = 0;\n    this.dispatchEventToListeners(Events.ConsoleCleared);\n  }\n\n  errors(): number {\n    return this.#errorsInternal;\n  }\n\n  warnings(): number {\n    return this.#warningsInternal;\n  }\n\n  violations(): number {\n    return this.#violationsInternal;\n  }\n\n  async saveToTempVariable(currentExecutionContext: ExecutionContext|null, remoteObject: RemoteObject|null):\n      Promise<void> {\n    if (!remoteObject || !currentExecutionContext) {\n      failedToSave(null);\n      return;\n    }\n    const executionContext = (currentExecutionContext as ExecutionContext);\n\n    const result = await executionContext.globalObject(/* objectGroup */ '', /* generatePreview */ false);\n    if ('error' in result || Boolean(result.exceptionDetails) || !result.object) {\n      failedToSave('object' in result && result.object || null);\n      return;\n    }\n\n    const globalObject = result.object;\n    const callFunctionResult =\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n        // @ts-expect-error\n        await globalObject.callFunction(saveVariable, [RemoteObject.toCallArgument(remoteObject)]);\n    globalObject.release();\n    if (callFunctionResult.wasThrown || !callFunctionResult.object || callFunctionResult.object.type !== 'string') {\n      failedToSave(callFunctionResult.object || null);\n    } else {\n      const text = (callFunctionResult.object.value as string);\n      const message = this.addCommandMessage(executionContext, text);\n      void this.evaluateCommandInConsole(executionContext, message, text, /* useCommandLineAPI */ false);\n    }\n    if (callFunctionResult.object) {\n      callFunctionResult.object.release();\n    }\n\n    function saveVariable(this: Window, value: Protocol.Runtime.CallArgument): string {\n      const prefix = 'temp';\n      let index = 1;\n      while ((prefix + index) in this) {\n        ++index;\n      }\n      const name = prefix + index;\n      // @ts-ignore Assignment to global object\n      this[name] = value;\n      return name;\n    }\n\n    function failedToSave(result: RemoteObject|null): void {\n      let message = i18nString(UIStrings.failedToSaveToTempVariable);\n      if (result) {\n        message = (message + ' ' + result.description as Common.UIString.LocalizedString);\n      }\n      Common.Console.Console.instance().error(message);\n    }\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  ConsoleCleared = 'ConsoleCleared',\n  MessageAdded = 'MessageAdded',\n  MessageUpdated = 'MessageUpdated',\n  CommandEvaluated = 'CommandEvaluated',\n}\n\nexport interface CommandEvaluatedEvent {\n  result: RemoteObject;\n  commandMessage: ConsoleMessage;\n  exceptionDetails?: Protocol.Runtime.ExceptionDetails|undefined;\n}\n\nexport type EventTypes = {\n  [Events.ConsoleCleared]: void,\n  [Events.MessageAdded]: ConsoleMessage,\n  [Events.MessageUpdated]: ConsoleMessage,\n  [Events.CommandEvaluated]: CommandEvaluatedEvent,\n};\n\nexport interface AffectedResources {\n  requestId?: Protocol.Network.RequestId;\n  issueId?: Protocol.Audits.IssueId;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction extractExceptionMetaData(metaData: any|undefined): AffectedResources|undefined {\n  if (!metaData) {\n    return undefined;\n  }\n  return {requestId: metaData.requestId || undefined, issueId: metaData.issueId || undefined};\n}\n\nfunction areAffectedResourcesEquivalent(a?: AffectedResources, b?: AffectedResources): boolean {\n  // Not considering issueId, as that would prevent de-duplication of console #messages.\n  return a?.requestId === b?.requestId;\n}\n\nfunction areStackTracesEquivalent(\n    stackTrace1?: Protocol.Runtime.StackTrace, stackTrace2?: Protocol.Runtime.StackTrace): boolean {\n  if (!stackTrace1 !== !stackTrace2) {\n    return false;\n  }\n  if (!stackTrace1 || !stackTrace2) {\n    return true;\n  }\n  const callFrames1 = stackTrace1.callFrames;\n  const callFrames2 = stackTrace2.callFrames;\n  if (callFrames1.length !== callFrames2.length) {\n    return false;\n  }\n  for (let i = 0, n = callFrames1.length; i < n; ++i) {\n    if (callFrames1[i].scriptId !== callFrames2[i].scriptId ||\n        callFrames1[i].functionName !== callFrames2[i].functionName ||\n        callFrames1[i].lineNumber !== callFrames2[i].lineNumber ||\n        callFrames1[i].columnNumber !== callFrames2[i].columnNumber) {\n      return false;\n    }\n  }\n  return areStackTracesEquivalent(stackTrace1.parent, stackTrace2.parent);\n}\n\nexport interface ConsoleMessageDetails {\n  type?: MessageType;\n  url?: Platform.DevToolsPath.UrlString;\n  line?: number;\n  column?: number;\n  parameters?: (string|RemoteObject|Protocol.Runtime.RemoteObject)[];\n  stackTrace?: Protocol.Runtime.StackTrace;\n  timestamp?: number;\n  executionContextId?: number;\n  scriptId?: Protocol.Runtime.ScriptId;\n  workerId?: string;\n  context?: string;\n  affectedResources?: AffectedResources;\n  category?: Protocol.Log.LogEntryCategory;\n}\n\nexport class ConsoleMessage {\n  readonly #runtimeModelInternal: RuntimeModel|null;\n  source: MessageSource;\n  level: Protocol.Log.LogEntryLevel|null;\n  messageText: string;\n  readonly type: MessageType;\n  url: Platform.DevToolsPath.UrlString|undefined;\n  line: number;\n  column: number;\n  parameters: (string|RemoteObject|Protocol.Runtime.RemoteObject)[]|undefined;\n  stackTrace: Protocol.Runtime.StackTrace|undefined;\n  timestamp: number;\n  #executionContextId: number;\n  scriptId?: Protocol.Runtime.ScriptId;\n  workerId?: string;\n  context?: string;\n  #originatingConsoleMessage: ConsoleMessage|null = null;\n  #pageLoadSequenceNumber?: number = undefined;\n  #exceptionId?: number = undefined;\n  #affectedResources?: AffectedResources;\n  category?: Protocol.Log.LogEntryCategory;\n\n  constructor(\n      runtimeModel: RuntimeModel|null, source: MessageSource, level: Protocol.Log.LogEntryLevel|null,\n      messageText: string, details?: ConsoleMessageDetails) {\n    this.#runtimeModelInternal = runtimeModel;\n    this.source = source;\n    this.level = (level as Protocol.Log.LogEntryLevel | null);\n    this.messageText = messageText;\n    this.type = details?.type || Protocol.Runtime.ConsoleAPICalledEventType.Log;\n    this.url = details?.url;\n    this.line = details?.line || 0;\n    this.column = details?.column || 0;\n    this.parameters = details?.parameters;\n    this.stackTrace = details?.stackTrace;\n    this.timestamp = details?.timestamp || Date.now();\n    this.#executionContextId = details?.executionContextId || 0;\n    this.scriptId = details?.scriptId;\n    this.workerId = details?.workerId;\n    this.#affectedResources = details?.affectedResources;\n    this.category = details?.category;\n\n    if (!this.#executionContextId && this.#runtimeModelInternal) {\n      if (this.scriptId) {\n        this.#executionContextId = this.#runtimeModelInternal.executionContextIdForScriptId(this.scriptId);\n      } else if (this.stackTrace) {\n        this.#executionContextId = this.#runtimeModelInternal.executionContextForStackTrace(this.stackTrace);\n      }\n    }\n\n    if (details?.context) {\n      const match = details?.context.match(/[^#]*/);\n      this.context = match?.[0];\n    }\n  }\n\n  getAffectedResources(): AffectedResources|undefined {\n    return this.#affectedResources;\n  }\n\n  setPageLoadSequenceNumber(pageLoadSequenceNumber: number): void {\n    this.#pageLoadSequenceNumber = pageLoadSequenceNumber;\n  }\n\n  static fromException(\n      runtimeModel: RuntimeModel, exceptionDetails: Protocol.Runtime.ExceptionDetails,\n      messageType?: Protocol.Runtime.ConsoleAPICalledEventType|FrontendMessageType, timestamp?: number,\n      forceUrl?: Platform.DevToolsPath.UrlString, affectedResources?: AffectedResources): ConsoleMessage {\n    const details = {\n      type: messageType,\n      url: forceUrl || exceptionDetails.url as Platform.DevToolsPath.UrlString,\n      line: exceptionDetails.lineNumber,\n      column: exceptionDetails.columnNumber,\n      parameters: exceptionDetails.exception ?\n          [RemoteObject.fromLocalObject(exceptionDetails.text), exceptionDetails.exception] :\n          undefined,\n      stackTrace: exceptionDetails.stackTrace,\n      timestamp,\n      executionContextId: exceptionDetails.executionContextId,\n      scriptId: exceptionDetails.scriptId,\n      affectedResources,\n    };\n    return new ConsoleMessage(\n        runtimeModel, Protocol.Log.LogEntrySource.Javascript, Protocol.Log.LogEntryLevel.Error,\n        RuntimeModel.simpleTextFromException(exceptionDetails), details);\n  }\n\n  runtimeModel(): RuntimeModel|null {\n    return this.#runtimeModelInternal;\n  }\n\n  target(): Target|null {\n    return this.#runtimeModelInternal ? this.#runtimeModelInternal.target() : null;\n  }\n\n  setOriginatingMessage(originatingMessage: ConsoleMessage): void {\n    this.#originatingConsoleMessage = originatingMessage;\n    this.#executionContextId = originatingMessage.#executionContextId;\n  }\n\n  originatingMessage(): ConsoleMessage|null {\n    return this.#originatingConsoleMessage;\n  }\n\n  setExecutionContextId(executionContextId: number): void {\n    this.#executionContextId = executionContextId;\n  }\n\n  getExecutionContextId(): number {\n    return this.#executionContextId;\n  }\n\n  getExceptionId(): number|undefined {\n    return this.#exceptionId;\n  }\n\n  setExceptionId(exceptionId: number): void {\n    this.#exceptionId = exceptionId;\n  }\n\n  isGroupMessage(): boolean {\n    return this.type === Protocol.Runtime.ConsoleAPICalledEventType.StartGroup ||\n        this.type === Protocol.Runtime.ConsoleAPICalledEventType.StartGroupCollapsed ||\n        this.type === Protocol.Runtime.ConsoleAPICalledEventType.EndGroup;\n  }\n\n  isGroupStartMessage(): boolean {\n    return this.type === Protocol.Runtime.ConsoleAPICalledEventType.StartGroup ||\n        this.type === Protocol.Runtime.ConsoleAPICalledEventType.StartGroupCollapsed;\n  }\n\n  isErrorOrWarning(): boolean {\n    return (this.level === Protocol.Log.LogEntryLevel.Warning || this.level === Protocol.Log.LogEntryLevel.Error);\n  }\n\n  isGroupable(): boolean {\n    const isUngroupableError = this.level === Protocol.Log.LogEntryLevel.Error &&\n        (this.source === Protocol.Log.LogEntrySource.Javascript || this.source === Protocol.Log.LogEntrySource.Network);\n    return (\n        this.source !== FrontendMessageSource.ConsoleAPI && this.type !== FrontendMessageType.Command &&\n        this.type !== FrontendMessageType.Result && this.type !== FrontendMessageType.System && !isUngroupableError);\n  }\n\n  groupCategoryKey(): string {\n    return [this.source, this.level, this.type, this.#pageLoadSequenceNumber].join(':');\n  }\n\n  isEqual(msg: ConsoleMessage|null): boolean {\n    if (!msg) {\n      return false;\n    }\n\n    if (this.parameters) {\n      if (!msg.parameters || this.parameters.length !== msg.parameters.length) {\n        return false;\n      }\n\n      for (let i = 0; i < msg.parameters.length; ++i) {\n        const msgParam = msg.parameters[i];\n        const param = this.parameters[i];\n        if (typeof msgParam === 'string' || typeof param === 'string') {\n          // TODO(chromium:1136435): Remove this case.\n          return false;\n        }\n        // Never treat objects as equal - their properties might change over time. Errors can be treated as equal\n        // since they are always formatted as strings.\n        if (msgParam.type === 'object' && msgParam.subtype !== 'error') {\n          return false;\n        }\n        if (param.type !== msgParam.type || param.value !== msgParam.value ||\n            param.description !== msgParam.description) {\n          return false;\n        }\n      }\n    }\n\n    return (this.runtimeModel() === msg.runtimeModel()) && (this.source === msg.source) && (this.type === msg.type) &&\n        (this.level === msg.level) && (this.line === msg.line) && (this.url === msg.url) &&\n        (this.scriptId === msg.scriptId) && (this.messageText === msg.messageText) &&\n        (this.#executionContextId === msg.#executionContextId) &&\n        areAffectedResourcesEquivalent(this.#affectedResources, msg.#affectedResources) &&\n        areStackTracesEquivalent(this.stackTrace, msg.stackTrace);\n  }\n}\n\nexport type MessageSource = Protocol.Log.LogEntrySource|FrontendMessageSource;\nexport type MessageLevel = Protocol.Log.LogEntryLevel;\nexport type MessageType = Protocol.Runtime.ConsoleAPICalledEventType|FrontendMessageType;\n\nexport const MessageSourceDisplayName = new Map<MessageSource, string>(([\n  [Protocol.Log.LogEntrySource.XML, 'xml'],\n  [Protocol.Log.LogEntrySource.Javascript, 'javascript'],\n  [Protocol.Log.LogEntrySource.Network, 'network'],\n  [FrontendMessageSource.ConsoleAPI, 'console-api'],\n  [Protocol.Log.LogEntrySource.Storage, 'storage'],\n  [Protocol.Log.LogEntrySource.Appcache, 'appcache'],\n  [Protocol.Log.LogEntrySource.Rendering, 'rendering'],\n  [FrontendMessageSource.CSS, 'css'],\n  [Protocol.Log.LogEntrySource.Security, 'security'],\n  [Protocol.Log.LogEntrySource.Deprecation, 'deprecation'],\n  [Protocol.Log.LogEntrySource.Worker, 'worker'],\n  [Protocol.Log.LogEntrySource.Violation, 'violation'],\n  [Protocol.Log.LogEntrySource.Intervention, 'intervention'],\n  [Protocol.Log.LogEntrySource.Recommendation, 'recommendation'],\n  [Protocol.Log.LogEntrySource.Other, 'other'],\n]));\n"],
  "mappings": "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",
  "names": []
}
