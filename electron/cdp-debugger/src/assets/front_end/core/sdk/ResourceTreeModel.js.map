{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/ResourceTreeModel.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the #name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../common/common.js';\nimport * as i18n from '../i18n/i18n.js';\nimport * as Platform from '../platform/platform.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport type {DeferredDOMNode, DOMNode} from './DOMModel.js';\nimport {DOMModel} from './DOMModel.js';\nimport type {RequestUpdateDroppedEventData} from './NetworkManager.js';\nimport {Events as NetworkManagerEvents, NetworkManager} from './NetworkManager.js';\nimport type {NetworkRequest} from './NetworkRequest.js';\nimport {Resource} from './Resource.js';\nimport {ExecutionContext, RuntimeModel} from './RuntimeModel.js';\nimport type {Target} from './Target.js';\nimport {Capability} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\nimport {TargetManager} from './TargetManager.js';\nimport {SecurityOriginManager} from './SecurityOriginManager.js';\nimport {StorageKeyManager} from './StorageKeyManager.js';\n\nexport class ResourceTreeModel extends SDKModel<EventTypes> {\n  readonly agent: ProtocolProxyApi.PageApi;\n  readonly storageAgent: ProtocolProxyApi.StorageApi;\n  readonly #securityOriginManager: SecurityOriginManager;\n  readonly #storageKeyManager: StorageKeyManager;\n  readonly framesInternal: Map<string, ResourceTreeFrame>;\n  #cachedResourcesProcessed: boolean;\n  #pendingReloadOptions: {\n    ignoreCache: (boolean|undefined),\n    scriptToEvaluateOnLoad: (string|undefined),\n  }|null;\n  #reloadSuspensionCount: number;\n  isInterstitialShowing: boolean;\n  mainFrame: ResourceTreeFrame|null;\n  #pendingBackForwardCacheNotUsedEvents: Set<Protocol.Page.BackForwardCacheNotUsedEvent>;\n  #pendingPrerenderAttemptCompletedEvents: Set<Protocol.Page.PrerenderAttemptCompletedEvent>;\n\n  constructor(target: Target) {\n    super(target);\n\n    const networkManager = target.model(NetworkManager);\n    if (networkManager) {\n      networkManager.addEventListener(NetworkManagerEvents.RequestFinished, this.onRequestFinished, this);\n      networkManager.addEventListener(NetworkManagerEvents.RequestUpdateDropped, this.onRequestUpdateDropped, this);\n    }\n    this.agent = target.pageAgent();\n    this.storageAgent = target.storageAgent();\n    void this.agent.invoke_enable();\n    this.#securityOriginManager = (target.model(SecurityOriginManager) as SecurityOriginManager);\n    this.#storageKeyManager = (target.model(StorageKeyManager) as StorageKeyManager);\n    this.#pendingBackForwardCacheNotUsedEvents = new Set<Protocol.Page.BackForwardCacheNotUsedEvent>();\n    this.#pendingPrerenderAttemptCompletedEvents = new Set<Protocol.Page.PrerenderAttemptCompletedEvent>();\n    target.registerPageDispatcher(new PageDispatcher(this));\n\n    this.framesInternal = new Map();\n    this.#cachedResourcesProcessed = false;\n    this.#pendingReloadOptions = null;\n    this.#reloadSuspensionCount = 0;\n    this.isInterstitialShowing = false;\n    this.mainFrame = null;\n\n    void this.agent.invoke_getResourceTree().then(event => {\n      this.processCachedResources(event.getError() ? null : event.frameTree);\n    });\n  }\n\n  static frameForRequest(request: NetworkRequest): ResourceTreeFrame|null {\n    const networkManager = NetworkManager.forRequest(request);\n    const resourceTreeModel = networkManager ? networkManager.target().model(ResourceTreeModel) : null;\n    if (!resourceTreeModel) {\n      return null;\n    }\n    return request.frameId ? resourceTreeModel.frameForId(request.frameId) : null;\n  }\n\n  static frames(): ResourceTreeFrame[] {\n    const result = [];\n    for (const resourceTreeModel of TargetManager.instance().models(ResourceTreeModel)) {\n      result.push(...resourceTreeModel.framesInternal.values());\n    }\n    return result;\n  }\n\n  static resourceForURL(url: Platform.DevToolsPath.UrlString): Resource|null {\n    for (const resourceTreeModel of TargetManager.instance().models(ResourceTreeModel)) {\n      const mainFrame = resourceTreeModel.mainFrame;\n      const result = mainFrame ? mainFrame.resourceForURL(url) : null;\n      if (result) {\n        return result;\n      }\n    }\n    return null;\n  }\n\n  static reloadAllPages(bypassCache?: boolean, scriptToEvaluateOnLoad?: string): void {\n    for (const resourceTreeModel of TargetManager.instance().models(ResourceTreeModel)) {\n      if (!resourceTreeModel.target().parentTarget()) {\n        resourceTreeModel.reloadPage(bypassCache, scriptToEvaluateOnLoad);\n      }\n    }\n  }\n\n  async storageKeyForFrame(frameId: Protocol.Page.FrameId): Promise<string|null> {\n    const response = await this.storageAgent.invoke_getStorageKeyForFrame({frameId: frameId});\n    if (response.getError() === 'Frame tree node for given frame not found') {\n      return null;\n    }\n    return response.storageKey;\n  }\n\n  domModel(): DOMModel {\n    return this.target().model(DOMModel) as DOMModel;\n  }\n\n  private processCachedResources(mainFramePayload: Protocol.Page.FrameResourceTree|null): void {\n    // TODO(caseq): the url check below is a mergeable, conservative\n    // workaround for a problem caused by us requesting resources from a\n    // subtarget frame before it has committed. The proper fix is likely\n    // to be too complicated to be safely merged.\n    // See https://crbug.com/1081270 for details.\n    if (mainFramePayload && mainFramePayload.frame.url !== ':') {\n      this.dispatchEventToListeners(Events.WillLoadCachedResources);\n      this.addFramesRecursively(null, mainFramePayload);\n      this.target().setInspectedURL(mainFramePayload.frame.url as Platform.DevToolsPath.UrlString);\n    }\n    this.#cachedResourcesProcessed = true;\n    const runtimeModel = this.target().model(RuntimeModel);\n    if (runtimeModel) {\n      runtimeModel.setExecutionContextComparator(this.executionContextComparator.bind(this));\n      runtimeModel.fireExecutionContextOrderChanged();\n    }\n    this.dispatchEventToListeners(Events.CachedResourcesLoaded, this);\n  }\n\n  cachedResourcesLoaded(): boolean {\n    return this.#cachedResourcesProcessed;\n  }\n\n  private addFrame(frame: ResourceTreeFrame, _aboutToNavigate?: boolean): void {\n    this.framesInternal.set(frame.id, frame);\n    if (frame.isMainFrame()) {\n      this.mainFrame = frame;\n    }\n    this.dispatchEventToListeners(Events.FrameAdded, frame);\n    this.updateSecurityOrigins();\n    void this.updateStorageKeys();\n  }\n\n  frameAttached(\n      frameId: Protocol.Page.FrameId, parentFrameId: Protocol.Page.FrameId|null,\n      stackTrace?: Protocol.Runtime.StackTrace, adScriptId?: Protocol.Page.AdScriptId): ResourceTreeFrame|null {\n    const sameTargetParentFrame = parentFrameId ? (this.framesInternal.get(parentFrameId) || null) : null;\n    // Do nothing unless cached resource tree is processed - it will overwrite everything.\n    if (!this.#cachedResourcesProcessed && sameTargetParentFrame) {\n      return null;\n    }\n    if (this.framesInternal.has(frameId)) {\n      return null;\n    }\n\n    const frame =\n        new ResourceTreeFrame(this, sameTargetParentFrame, frameId, null, stackTrace || null, adScriptId || null);\n    if (parentFrameId && !sameTargetParentFrame) {\n      frame.crossTargetParentFrameId = parentFrameId;\n    }\n    if (frame.isMainFrame() && this.mainFrame) {\n      // Navigation to the new backend process.\n      this.frameDetached(this.mainFrame.id, false);\n    }\n    this.addFrame(frame, true);\n    return frame;\n  }\n\n  frameNavigated(framePayload: Protocol.Page.Frame, type: Protocol.Page.NavigationType|undefined): void {\n    const sameTargetParentFrame =\n        framePayload.parentId ? (this.framesInternal.get(framePayload.parentId) || null) : null;\n    // Do nothing unless cached resource tree is processed - it will overwrite everything.\n    if (!this.#cachedResourcesProcessed && sameTargetParentFrame) {\n      return;\n    }\n    let frame: (ResourceTreeFrame|null) = this.framesInternal.get(framePayload.id) || null;\n    if (!frame) {\n      // Simulate missed \"frameAttached\" for a main frame navigation to the new backend process.\n      frame = this.frameAttached(framePayload.id, framePayload.parentId || null);\n      console.assert(Boolean(frame));\n      if (!frame) {\n        return;\n      }\n    }\n\n    this.dispatchEventToListeners(Events.FrameWillNavigate, frame);\n    frame.navigate(framePayload);\n    if (type) {\n      frame.backForwardCacheDetails.restoredFromCache = type === Protocol.Page.NavigationType.BackForwardCacheRestore;\n    }\n    this.dispatchEventToListeners(Events.FrameNavigated, frame);\n\n    if (frame.isMainFrame()) {\n      this.processPendingEvents(frame);\n      this.dispatchEventToListeners(Events.MainFrameNavigated, frame);\n      const networkManager = this.target().model(NetworkManager);\n      if (networkManager) {\n        networkManager.clearRequests();\n      }\n    }\n\n    // Fill frame with retained resources (the ones loaded using new loader).\n    const resources = frame.resources();\n    for (let i = 0; i < resources.length; ++i) {\n      this.dispatchEventToListeners(Events.ResourceAdded, resources[i]);\n    }\n\n    if (frame.isMainFrame()) {\n      this.target().setInspectedURL(frame.url);\n    }\n    this.updateSecurityOrigins();\n    void this.updateStorageKeys();\n  }\n\n  documentOpened(framePayload: Protocol.Page.Frame): void {\n    this.frameNavigated(framePayload, undefined);\n    const frame = this.framesInternal.get(framePayload.id);\n    if (frame && !frame.getResourcesMap().get(framePayload.url)) {\n      const frameResource = this.createResourceFromFramePayload(\n          framePayload, framePayload.url as Platform.DevToolsPath.UrlString, Common.ResourceType.resourceTypes.Document,\n          framePayload.mimeType, null, null);\n      frameResource.isGenerated = true;\n      frame.addResource(frameResource);\n    }\n  }\n\n  frameDetached(frameId: Protocol.Page.FrameId, isSwap: boolean): void {\n    // Do nothing unless cached resource tree is processed - it will overwrite everything.\n    if (!this.#cachedResourcesProcessed) {\n      return;\n    }\n\n    const frame = this.framesInternal.get(frameId);\n    if (!frame) {\n      return;\n    }\n\n    const sameTargetParentFrame = frame.sameTargetParentFrame();\n    if (sameTargetParentFrame) {\n      sameTargetParentFrame.removeChildFrame(frame, isSwap);\n    } else {\n      frame.remove(isSwap);\n    }\n    this.updateSecurityOrigins();\n    void this.updateStorageKeys();\n  }\n\n  private onRequestFinished(event: Common.EventTarget.EventTargetEvent<NetworkRequest>): void {\n    if (!this.#cachedResourcesProcessed) {\n      return;\n    }\n\n    const request = event.data;\n    if (request.failed || request.resourceType() === Common.ResourceType.resourceTypes.XHR) {\n      return;\n    }\n\n    const frame = request.frameId ? this.framesInternal.get(request.frameId) : null;\n    if (frame) {\n      frame.addRequest(request);\n    }\n  }\n\n  private onRequestUpdateDropped(event: Common.EventTarget.EventTargetEvent<RequestUpdateDroppedEventData>): void {\n    if (!this.#cachedResourcesProcessed) {\n      return;\n    }\n\n    const data = event.data;\n    const frameId = data.frameId;\n    if (!frameId) {\n      return;\n    }\n    const frame = this.framesInternal.get(frameId);\n    if (!frame) {\n      return;\n    }\n\n    const url = data.url;\n    if (frame.getResourcesMap().get(url)) {\n      return;\n    }\n\n    const resource = new Resource(\n        this, null, url, frame.url, frameId, data.loaderId, Common.ResourceType.resourceTypes[data.resourceType],\n        data.mimeType, data.lastModified, null);\n    frame.addResource(resource);\n  }\n\n  frameForId(frameId: Protocol.Page.FrameId): ResourceTreeFrame|null {\n    return this.framesInternal.get(frameId) || null;\n  }\n\n  forAllResources(callback: (arg0: Resource) => boolean): boolean {\n    if (this.mainFrame) {\n      return this.mainFrame.callForFrameResources(callback);\n    }\n    return false;\n  }\n\n  frames(): ResourceTreeFrame[] {\n    return [...this.framesInternal.values()];\n  }\n\n  resourceForURL(url: Platform.DevToolsPath.UrlString): Resource|null {\n    // Workers call into this with no #frames available.\n    return this.mainFrame ? this.mainFrame.resourceForURL(url) : null;\n  }\n\n  private addFramesRecursively(\n      sameTargetParentFrame: ResourceTreeFrame|null, frameTreePayload: Protocol.Page.FrameResourceTree): void {\n    const framePayload = frameTreePayload.frame;\n    const frame = new ResourceTreeFrame(this, sameTargetParentFrame, framePayload.id, framePayload, null, null);\n    if (!sameTargetParentFrame && framePayload.parentId) {\n      frame.crossTargetParentFrameId = framePayload.parentId;\n    }\n    this.addFrame(frame);\n\n    for (const childFrame of frameTreePayload.childFrames || []) {\n      this.addFramesRecursively(frame, childFrame);\n    }\n\n    for (let i = 0; i < frameTreePayload.resources.length; ++i) {\n      const subresource = frameTreePayload.resources[i];\n      const resource = this.createResourceFromFramePayload(\n          framePayload, subresource.url as Platform.DevToolsPath.UrlString,\n          Common.ResourceType.resourceTypes[subresource.type], subresource.mimeType, subresource.lastModified || null,\n          subresource.contentSize || null);\n      frame.addResource(resource);\n    }\n\n    if (!frame.getResourcesMap().get(framePayload.url)) {\n      const frameResource = this.createResourceFromFramePayload(\n          framePayload, framePayload.url as Platform.DevToolsPath.UrlString, Common.ResourceType.resourceTypes.Document,\n          framePayload.mimeType, null, null);\n      frame.addResource(frameResource);\n    }\n  }\n\n  private createResourceFromFramePayload(\n      frame: Protocol.Page.Frame, url: Platform.DevToolsPath.UrlString, type: Common.ResourceType.ResourceType,\n      mimeType: string, lastModifiedTime: number|null, contentSize: number|null): Resource {\n    const lastModified = typeof lastModifiedTime === 'number' ? new Date(lastModifiedTime * 1000) : null;\n    return new Resource(\n        this, null, url, frame.url as Platform.DevToolsPath.UrlString, frame.id, frame.loaderId, type, mimeType,\n        lastModified, contentSize);\n  }\n\n  suspendReload(): void {\n    this.#reloadSuspensionCount++;\n  }\n\n  resumeReload(): void {\n    this.#reloadSuspensionCount--;\n    console.assert(this.#reloadSuspensionCount >= 0, 'Unbalanced call to ResourceTreeModel.resumeReload()');\n    if (!this.#reloadSuspensionCount && this.#pendingReloadOptions) {\n      const {ignoreCache, scriptToEvaluateOnLoad} = this.#pendingReloadOptions;\n      this.reloadPage(ignoreCache, scriptToEvaluateOnLoad);\n    }\n  }\n\n  reloadPage(ignoreCache?: boolean, scriptToEvaluateOnLoad?: string): void {\n    // Only dispatch PageReloadRequested upon first reload request to simplify client logic.\n    if (!this.#pendingReloadOptions) {\n      this.dispatchEventToListeners(Events.PageReloadRequested, this);\n    }\n    if (this.#reloadSuspensionCount) {\n      this.#pendingReloadOptions = {ignoreCache, scriptToEvaluateOnLoad};\n      return;\n    }\n    this.#pendingReloadOptions = null;\n    const networkManager = this.target().model(NetworkManager);\n    if (networkManager) {\n      networkManager.clearRequests();\n    }\n    this.dispatchEventToListeners(Events.WillReloadPage);\n    void this.agent.invoke_reload({ignoreCache, scriptToEvaluateOnLoad});\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  navigate(url: Platform.DevToolsPath.UrlString): Promise<any> {\n    return this.agent.invoke_navigate({url});\n  }\n\n  async navigationHistory(): Promise<{\n    currentIndex: number,\n    entries: Array<Protocol.Page.NavigationEntry>,\n  }|null> {\n    const response = await this.agent.invoke_getNavigationHistory();\n    if (response.getError()) {\n      return null;\n    }\n    return {currentIndex: response.currentIndex, entries: response.entries};\n  }\n\n  navigateToHistoryEntry(entry: Protocol.Page.NavigationEntry): void {\n    void this.agent.invoke_navigateToHistoryEntry({entryId: entry.id});\n  }\n\n  setLifecycleEventsEnabled(enabled: boolean): Promise<Protocol.ProtocolResponseWithError> {\n    return this.agent.invoke_setLifecycleEventsEnabled({enabled});\n  }\n\n  async fetchAppManifest(): Promise<{\n    url: Platform.DevToolsPath.UrlString,\n    data: string|null,\n    errors: Array<Protocol.Page.AppManifestError>,\n  }> {\n    const response = await this.agent.invoke_getAppManifest();\n    if (response.getError()) {\n      return {url: response.url as Platform.DevToolsPath.UrlString, data: null, errors: []};\n    }\n    return {url: response.url as Platform.DevToolsPath.UrlString, data: response.data || null, errors: response.errors};\n  }\n\n  async getInstallabilityErrors(): Promise<Protocol.Page.InstallabilityError[]> {\n    const response = await this.agent.invoke_getInstallabilityErrors();\n    return response.installabilityErrors || [];\n  }\n\n  async getManifestIcons(): Promise<{\n    primaryIcon: string | null,\n  }> {\n    const response = await this.agent.invoke_getManifestIcons();\n    return {primaryIcon: response.primaryIcon || null};\n  }\n\n  async getAppId(): Promise<Protocol.Page.GetAppIdResponse> {\n    return this.agent.invoke_getAppId();\n  }\n\n  private executionContextComparator(a: ExecutionContext, b: ExecutionContext): number {\n    function framePath(frame: ResourceTreeFrame|null): ResourceTreeFrame[] {\n      let currentFrame: (ResourceTreeFrame|null) = frame;\n      const parents = [];\n      while (currentFrame) {\n        parents.push(currentFrame);\n        currentFrame = currentFrame.sameTargetParentFrame();\n      }\n      return parents.reverse();\n    }\n\n    if (a.target() !== b.target()) {\n      return ExecutionContext.comparator(a, b);\n    }\n\n    const framesA = a.frameId ? framePath(this.frameForId(a.frameId)) : [];\n    const framesB = b.frameId ? framePath(this.frameForId(b.frameId)) : [];\n    let frameA;\n    let frameB;\n    for (let i = 0;; i++) {\n      if (!framesA[i] || !framesB[i] || (framesA[i] !== framesB[i])) {\n        frameA = framesA[i];\n        frameB = framesB[i];\n        break;\n      }\n    }\n    if (!frameA && frameB) {\n      return -1;\n    }\n\n    if (!frameB && frameA) {\n      return 1;\n    }\n\n    if (frameA && frameB) {\n      return frameA.id.localeCompare(frameB.id);\n    }\n\n    return ExecutionContext.comparator(a, b);\n  }\n\n  private getSecurityOriginData(): SecurityOriginData {\n    const securityOrigins = new Set<string>();\n\n    let mainSecurityOrigin: string|null = null;\n    let unreachableMainSecurityOrigin: string|null = null;\n    for (const frame of this.framesInternal.values()) {\n      const origin = frame.securityOrigin;\n      if (!origin) {\n        continue;\n      }\n\n      securityOrigins.add(origin);\n      if (frame.isMainFrame()) {\n        mainSecurityOrigin = origin;\n        if (frame.unreachableUrl()) {\n          const unreachableParsed = new Common.ParsedURL.ParsedURL(frame.unreachableUrl());\n          unreachableMainSecurityOrigin = unreachableParsed.securityOrigin();\n        }\n      }\n    }\n    return {\n      securityOrigins: securityOrigins,\n      mainSecurityOrigin: mainSecurityOrigin,\n      unreachableMainSecurityOrigin: unreachableMainSecurityOrigin,\n    };\n  }\n\n  private async getStorageKeyData(): Promise<StorageKeyData> {\n    const storageKeys = new Set<string>();\n    let mainStorageKey: string|null = null;\n\n    for (const {isMainFrame, storageKey} of await Promise.all(\n             [...this.framesInternal.values()].map(async f => f.storageKey.then(k => ({\n                                                                                  isMainFrame: f.isMainFrame(),\n                                                                                  storageKey: k,\n                                                                                }))))) {\n      if (isMainFrame) {\n        mainStorageKey = storageKey;\n      }\n      if (storageKey) {\n        storageKeys.add(storageKey);\n      }\n    }\n\n    return {storageKeys: storageKeys, mainStorageKey: mainStorageKey};\n  }\n\n  private updateSecurityOrigins(): void {\n    const data = this.getSecurityOriginData();\n    this.#securityOriginManager.setMainSecurityOrigin(\n        data.mainSecurityOrigin || '', data.unreachableMainSecurityOrigin || '');\n    this.#securityOriginManager.updateSecurityOrigins(data.securityOrigins);\n  }\n\n  private async updateStorageKeys(): Promise<void> {\n    const data = await this.getStorageKeyData();\n    this.#storageKeyManager.setMainStorageKey(data.mainStorageKey || '');\n    this.#storageKeyManager.updateStorageKeys(data.storageKeys);\n  }\n\n  async getMainStorageKey(): Promise<string|null> {\n    return this.mainFrame ? this.mainFrame.storageKey : null;\n  }\n\n  getMainSecurityOrigin(): string|null {\n    const data = this.getSecurityOriginData();\n    return data.mainSecurityOrigin || data.unreachableMainSecurityOrigin;\n  }\n\n  onBackForwardCacheNotUsed(event: Protocol.Page.BackForwardCacheNotUsedEvent): void {\n    if (this.mainFrame && this.mainFrame.id === event.frameId && this.mainFrame.loaderId === event.loaderId) {\n      this.mainFrame.setBackForwardCacheDetails(event);\n      this.dispatchEventToListeners(Events.BackForwardCacheDetailsUpdated, this.mainFrame);\n    } else {\n      this.#pendingBackForwardCacheNotUsedEvents.add(event);\n    }\n  }\n\n  onPrerenderAttemptCompleted(event: Protocol.Page.PrerenderAttemptCompletedEvent): void {\n    if (this.mainFrame && this.mainFrame.id === event.initiatingFrameId) {\n      this.mainFrame.setPrerenderFinalStatus(event.finalStatus);\n      this.dispatchEventToListeners(Events.PrerenderingStatusUpdated, this.mainFrame);\n    } else {\n      this.#pendingPrerenderAttemptCompletedEvents.add(event);\n    }\n  }\n\n  processPendingEvents(frame: ResourceTreeFrame): void {\n    if (!frame.isMainFrame()) {\n      return;\n    }\n    for (const event of this.#pendingBackForwardCacheNotUsedEvents) {\n      if (frame.id === event.frameId && frame.loaderId === event.loaderId) {\n        frame.setBackForwardCacheDetails(event);\n        this.#pendingBackForwardCacheNotUsedEvents.delete(event);\n        break;\n      }\n    }\n    for (const event of this.#pendingPrerenderAttemptCompletedEvents) {\n      if (frame.id === event.initiatingFrameId) {\n        frame.setPrerenderFinalStatus(event.finalStatus);\n        this.#pendingPrerenderAttemptCompletedEvents.delete(event);\n        break;\n      }\n    }\n    // No need to dispatch events here as this method call is followed by a `MainFrameNavigated` event.\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  FrameAdded = 'FrameAdded',\n  FrameNavigated = 'FrameNavigated',\n  FrameDetached = 'FrameDetached',\n  FrameResized = 'FrameResized',\n  FrameWillNavigate = 'FrameWillNavigate',\n  MainFrameNavigated = 'MainFrameNavigated',\n  ResourceAdded = 'ResourceAdded',\n  WillLoadCachedResources = 'WillLoadCachedResources',\n  CachedResourcesLoaded = 'CachedResourcesLoaded',\n  DOMContentLoaded = 'DOMContentLoaded',\n  LifecycleEvent = 'LifecycleEvent',\n  Load = 'Load',\n  PageReloadRequested = 'PageReloadRequested',\n  WillReloadPage = 'WillReloadPage',\n  InterstitialShown = 'InterstitialShown',\n  InterstitialHidden = 'InterstitialHidden',\n  BackForwardCacheDetailsUpdated = 'BackForwardCacheDetailsUpdated',\n  PrerenderingStatusUpdated = 'PrerenderingStatusUpdated',\n}\n\nexport type EventTypes = {\n  [Events.FrameAdded]: ResourceTreeFrame,\n  [Events.FrameNavigated]: ResourceTreeFrame,\n  [Events.FrameDetached]: {frame: ResourceTreeFrame, isSwap: boolean},\n  [Events.FrameResized]: void,\n  [Events.FrameWillNavigate]: ResourceTreeFrame,\n  [Events.MainFrameNavigated]: ResourceTreeFrame,\n  [Events.ResourceAdded]: Resource,\n  [Events.WillLoadCachedResources]: void,\n  [Events.CachedResourcesLoaded]: ResourceTreeModel,\n  [Events.DOMContentLoaded]: number,\n  [Events.LifecycleEvent]: {frameId: Protocol.Page.FrameId, name: string},\n  [Events.Load]: {resourceTreeModel: ResourceTreeModel, loadTime: number},\n  [Events.PageReloadRequested]: ResourceTreeModel,\n  [Events.WillReloadPage]: void,\n  [Events.InterstitialShown]: void,\n  [Events.InterstitialHidden]: void,\n  [Events.BackForwardCacheDetailsUpdated]: ResourceTreeFrame,\n  [Events.PrerenderingStatusUpdated]: ResourceTreeFrame,\n};\n\nexport class ResourceTreeFrame {\n  #model: ResourceTreeModel;\n  #sameTargetParentFrameInternal: ResourceTreeFrame|null;\n  readonly #idInternal: Protocol.Page.FrameId;\n  crossTargetParentFrameId: string|null;\n  #loaderIdInternal: string;\n  #nameInternal: string|null|undefined;\n  #urlInternal: Platform.DevToolsPath.UrlString;\n  #domainAndRegistryInternal: string;\n  #securityOriginInternal: string|null;\n  #storageKeyInternal?: Promise<string|null>;\n  #unreachableUrlInternal: Platform.DevToolsPath.UrlString;\n  #adFrameStatusInternal?: Protocol.Page.AdFrameStatus;\n  #secureContextType: Protocol.Page.SecureContextType|null;\n  #crossOriginIsolatedContextType: Protocol.Page.CrossOriginIsolatedContextType|null;\n  #gatedAPIFeatures: Protocol.Page.GatedAPIFeatures[]|null;\n  #creationStackTrace: Protocol.Runtime.StackTrace|null;\n  #creationStackTraceTarget: Target|null;\n  #childFramesInternal: Set<ResourceTreeFrame>;\n  #adScriptId: Protocol.Runtime.ScriptId|null;\n  #debuggerId: Protocol.Runtime.UniqueDebuggerId|null;\n  resourcesMap: Map<Platform.DevToolsPath.UrlString, Resource>;\n  backForwardCacheDetails: {\n    restoredFromCache: boolean|undefined,\n    explanations: Protocol.Page.BackForwardCacheNotRestoredExplanation[],\n    explanationsTree: Protocol.Page.BackForwardCacheNotRestoredExplanationTree|undefined,\n  } = {\n    restoredFromCache: undefined,\n    explanations: [],\n    explanationsTree: undefined,\n  };\n  prerenderFinalStatus: Protocol.Page.PrerenderFinalStatus|null;\n\n  constructor(\n      model: ResourceTreeModel, parentFrame: ResourceTreeFrame|null, frameId: Protocol.Page.FrameId,\n      payload: Protocol.Page.Frame|null, creationStackTrace: Protocol.Runtime.StackTrace|null,\n      adScriptId: Protocol.Page.AdScriptId|null) {\n    this.#model = model;\n    this.#sameTargetParentFrameInternal = parentFrame;\n    this.#idInternal = frameId;\n    this.crossTargetParentFrameId = null;\n\n    this.#loaderIdInternal = (payload && payload.loaderId) || '';\n    this.#nameInternal = payload && payload.name;\n    this.#urlInternal =\n        payload && payload.url as Platform.DevToolsPath.UrlString || Platform.DevToolsPath.EmptyUrlString;\n    this.#domainAndRegistryInternal = (payload && payload.domainAndRegistry) || '';\n    this.#securityOriginInternal = payload && payload.securityOrigin;\n    this.#unreachableUrlInternal =\n        (payload && payload.unreachableUrl as Platform.DevToolsPath.UrlString) || Platform.DevToolsPath.EmptyUrlString;\n    this.#adFrameStatusInternal = payload?.adFrameStatus;\n    this.#secureContextType = payload && payload.secureContextType;\n    this.#crossOriginIsolatedContextType = payload && payload.crossOriginIsolatedContextType;\n    this.#gatedAPIFeatures = payload && payload.gatedAPIFeatures;\n\n    this.#creationStackTrace = creationStackTrace;\n    this.#creationStackTraceTarget = null;\n\n    this.#adScriptId = adScriptId?.scriptId || null;\n    this.#debuggerId = adScriptId?.debuggerId || null;\n\n    this.#childFramesInternal = new Set();\n\n    this.resourcesMap = new Map();\n    this.prerenderFinalStatus = null;\n\n    if (this.#sameTargetParentFrameInternal) {\n      this.#sameTargetParentFrameInternal.#childFramesInternal.add(this);\n    }\n  }\n\n  isSecureContext(): boolean {\n    return this.#secureContextType !== null && this.#secureContextType.startsWith('Secure');\n  }\n\n  getSecureContextType(): Protocol.Page.SecureContextType|null {\n    return this.#secureContextType;\n  }\n\n  isCrossOriginIsolated(): boolean {\n    return this.#crossOriginIsolatedContextType !== null && this.#crossOriginIsolatedContextType.startsWith('Isolated');\n  }\n\n  getCrossOriginIsolatedContextType(): Protocol.Page.CrossOriginIsolatedContextType|null {\n    return this.#crossOriginIsolatedContextType;\n  }\n\n  getGatedAPIFeatures(): Protocol.Page.GatedAPIFeatures[]|null {\n    return this.#gatedAPIFeatures;\n  }\n\n  getCreationStackTraceData():\n      {creationStackTrace: Protocol.Runtime.StackTrace|null, creationStackTraceTarget: Target} {\n    return {\n      creationStackTrace: this.#creationStackTrace,\n      creationStackTraceTarget: this.#creationStackTraceTarget || this.resourceTreeModel().target(),\n    };\n  }\n\n  navigate(framePayload: Protocol.Page.Frame): void {\n    this.#loaderIdInternal = framePayload.loaderId;\n    this.#nameInternal = framePayload.name;\n    this.#urlInternal = framePayload.url as Platform.DevToolsPath.UrlString;\n    this.#domainAndRegistryInternal = framePayload.domainAndRegistry;\n    this.#securityOriginInternal = framePayload.securityOrigin;\n    this.#unreachableUrlInternal =\n        framePayload.unreachableUrl as Platform.DevToolsPath.UrlString || Platform.DevToolsPath.EmptyUrlString;\n    this.#adFrameStatusInternal = framePayload?.adFrameStatus;\n    this.#secureContextType = framePayload.secureContextType;\n    this.#crossOriginIsolatedContextType = framePayload.crossOriginIsolatedContextType;\n    this.#gatedAPIFeatures = framePayload.gatedAPIFeatures;\n    this.backForwardCacheDetails = {\n      restoredFromCache: undefined,\n      explanations: [],\n      explanationsTree: undefined,\n    };\n\n    const mainResource = this.resourcesMap.get(this.#urlInternal);\n    this.resourcesMap.clear();\n    this.removeChildFrames();\n    if (mainResource && mainResource.loaderId === this.#loaderIdInternal) {\n      this.addResource(mainResource);\n    }\n  }\n\n  resourceTreeModel(): ResourceTreeModel {\n    return this.#model;\n  }\n\n  get id(): Protocol.Page.FrameId {\n    return this.#idInternal;\n  }\n\n  get name(): string {\n    return this.#nameInternal || '';\n  }\n\n  get url(): Platform.DevToolsPath.UrlString {\n    return this.#urlInternal;\n  }\n\n  domainAndRegistry(): string {\n    return this.#domainAndRegistryInternal;\n  }\n\n  getAdScriptId(): Protocol.Runtime.ScriptId|null {\n    return this.#adScriptId;\n  }\n\n  setAdScriptId(adScriptId: Protocol.Runtime.ScriptId|null): void {\n    this.#adScriptId = adScriptId;\n  }\n\n  getDebuggerId(): Protocol.Runtime.UniqueDebuggerId|null {\n    return this.#debuggerId;\n  }\n\n  setDebuggerId(debuggerId: Protocol.Runtime.UniqueDebuggerId|null): void {\n    this.#debuggerId = debuggerId;\n  }\n\n  get securityOrigin(): string|null {\n    return this.#securityOriginInternal;\n  }\n\n  get storageKey(): Promise<string|null> {\n    if (!this.#storageKeyInternal) {\n      this.#storageKeyInternal = this.#model.storageKeyForFrame(this.#idInternal);\n    }\n    return this.#storageKeyInternal;\n  }\n\n  unreachableUrl(): Platform.DevToolsPath.UrlString {\n    return this.#unreachableUrlInternal;\n  }\n\n  get loaderId(): string {\n    return this.#loaderIdInternal;\n  }\n\n  adFrameType(): Protocol.Page.AdFrameType {\n    return this.#adFrameStatusInternal?.adFrameType || Protocol.Page.AdFrameType.None;\n  }\n\n  adFrameStatus(): Protocol.Page.AdFrameStatus|undefined {\n    return this.#adFrameStatusInternal;\n  }\n\n  get childFrames(): ResourceTreeFrame[] {\n    return [...this.#childFramesInternal];\n  }\n\n  /**\n   * Returns the parent frame if both #frames are part of the same process/target.\n   */\n  sameTargetParentFrame(): ResourceTreeFrame|null {\n    return this.#sameTargetParentFrameInternal;\n  }\n\n  /**\n   * Returns the parent frame if both #frames are part of different processes/targets (child is an OOPIF).\n   */\n  crossTargetParentFrame(): ResourceTreeFrame|null {\n    if (!this.crossTargetParentFrameId) {\n      return null;\n    }\n    const parentTarget = this.#model.target().parentTarget();\n    if (!parentTarget) {\n      return null;\n    }\n    const parentModel = parentTarget.model(ResourceTreeModel);\n    if (!parentModel) {\n      return null;\n    }\n    // Note that parent #model has already processed cached resources:\n    // - when parent target was created, we issued getResourceTree call;\n    // - strictly after we issued setAutoAttach call;\n    // - both of them were handled in renderer in the same order;\n    // - cached resource tree got processed on parent #model;\n    // - child target was created as a result of setAutoAttach call.\n    return parentModel.framesInternal.get(this.crossTargetParentFrameId) || null;\n  }\n\n  /**\n   * Returns the parent frame. There is only 1 parent and it's either in the\n   * same target or it's cross-target.\n   */\n  parentFrame(): ResourceTreeFrame|null {\n    return this.sameTargetParentFrame() || this.crossTargetParentFrame();\n  }\n\n  /**\n   * Returns true if this is the main frame of its target. For example, this returns true for the main frame\n   * of an out-of-process iframe (OOPIF).\n   */\n  isMainFrame(): boolean {\n    return !this.#sameTargetParentFrameInternal;\n  }\n\n  /**\n   * Returns true if this is the top frame of the main target, i.e. if this is the top-most frame in the inspected\n   * tab.\n   */\n  isTopFrame(): boolean {\n    return !this.#model.target().parentTarget() && !this.#sameTargetParentFrameInternal &&\n        !this.crossTargetParentFrameId;\n  }\n\n  removeChildFrame(frame: ResourceTreeFrame, isSwap: boolean): void {\n    this.#childFramesInternal.delete(frame);\n    frame.remove(isSwap);\n  }\n\n  private removeChildFrames(): void {\n    const frames = this.#childFramesInternal;\n    this.#childFramesInternal = new Set();\n    for (const frame of frames) {\n      frame.remove(false);\n    }\n  }\n\n  remove(isSwap: boolean): void {\n    this.removeChildFrames();\n    this.#model.framesInternal.delete(this.id);\n    this.#model.dispatchEventToListeners(Events.FrameDetached, {frame: this, isSwap});\n  }\n\n  addResource(resource: Resource): void {\n    if (this.resourcesMap.get(resource.url) === resource) {\n      // Already in the tree, we just got an extra update.\n      return;\n    }\n    this.resourcesMap.set(resource.url, resource);\n    this.#model.dispatchEventToListeners(Events.ResourceAdded, resource);\n  }\n\n  addRequest(request: NetworkRequest): void {\n    let resource = this.resourcesMap.get(request.url());\n    if (resource && resource.request === request) {\n      // Already in the tree, we just got an extra update.\n      return;\n    }\n    resource = new Resource(\n        this.#model, request, request.url(), request.documentURL, request.frameId, request.loaderId,\n        request.resourceType(), request.mimeType, null, null);\n    this.resourcesMap.set(resource.url, resource);\n    this.#model.dispatchEventToListeners(Events.ResourceAdded, resource);\n  }\n\n  resources(): Resource[] {\n    return Array.from(this.resourcesMap.values());\n  }\n\n  resourceForURL(url: Platform.DevToolsPath.UrlString): Resource|null {\n    const resource = this.resourcesMap.get(url);\n    if (resource) {\n      return resource;\n    }\n    for (const frame of this.#childFramesInternal) {\n      const resource = frame.resourceForURL(url);\n      if (resource) {\n        return resource;\n      }\n    }\n    return null;\n  }\n\n  callForFrameResources(callback: (arg0: Resource) => boolean): boolean {\n    for (const resource of this.resourcesMap.values()) {\n      if (callback(resource)) {\n        return true;\n      }\n    }\n\n    for (const frame of this.#childFramesInternal) {\n      if (frame.callForFrameResources(callback)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  displayName(): string {\n    if (this.isTopFrame()) {\n      return i18n.i18n.lockedString('top');\n    }\n    const subtitle = new Common.ParsedURL.ParsedURL(this.#urlInternal).displayName;\n    if (subtitle) {\n      if (!this.#nameInternal) {\n        return subtitle;\n      }\n      return this.#nameInternal + ' (' + subtitle + ')';\n    }\n    return i18n.i18n.lockedString('iframe');\n  }\n\n  async getOwnerDeferredDOMNode(): Promise<DeferredDOMNode|null> {\n    const parentFrame = this.parentFrame();\n    if (!parentFrame) {\n      return null;\n    }\n    return parentFrame.resourceTreeModel().domModel().getOwnerNodeForFrame(this.#idInternal);\n  }\n\n  async getOwnerDOMNodeOrDocument(): Promise<DOMNode|null> {\n    const deferredNode = await this.getOwnerDeferredDOMNode();\n    if (deferredNode) {\n      return deferredNode.resolvePromise();\n    }\n    if (this.isTopFrame()) {\n      return this.resourceTreeModel().domModel().requestDocument();\n    }\n    return null;\n  }\n\n  async highlight(): Promise<void> {\n    const parentFrame = this.parentFrame();\n    const parentTarget = this.resourceTreeModel().target().parentTarget();\n    const highlightFrameOwner = async(domModel: DOMModel): Promise<void> => {\n      const deferredNode = await domModel.getOwnerNodeForFrame(this.#idInternal);\n      if (deferredNode) {\n        domModel.overlayModel().highlightInOverlay({deferredNode, selectorList: ''}, 'all', true);\n      }\n    };\n\n    if (parentFrame) {\n      return highlightFrameOwner(parentFrame.resourceTreeModel().domModel());\n    }\n\n    // Portals.\n    if (parentTarget) {\n      const domModel = parentTarget.model(DOMModel);\n      if (domModel) {\n        return highlightFrameOwner(domModel);\n      }\n    }\n\n    // For the top frame there is no owner node. Highlight the whole #document instead.\n    const document = await this.resourceTreeModel().domModel().requestDocument();\n    if (document) {\n      this.resourceTreeModel().domModel().overlayModel().highlightInOverlay(\n          {node: document, selectorList: ''}, 'all', true);\n    }\n  }\n\n  async getPermissionsPolicyState(): Promise<Protocol.Page.PermissionsPolicyFeatureState[]|null> {\n    const response = await this.resourceTreeModel().target().pageAgent().invoke_getPermissionsPolicyState(\n        {frameId: this.#idInternal});\n    if (response.getError()) {\n      return null;\n    }\n    return response.states;\n  }\n\n  async getOriginTrials(): Promise<Protocol.Page.OriginTrial[]> {\n    const response =\n        await this.resourceTreeModel().target().pageAgent().invoke_getOriginTrials({frameId: this.#idInternal});\n    if (response.getError()) {\n      return [];\n    }\n    return response.originTrials;\n  }\n\n  setCreationStackTrace(creationStackTraceData:\n                            {creationStackTrace: Protocol.Runtime.StackTrace|null, creationStackTraceTarget: Target}):\n      void {\n    this.#creationStackTrace = creationStackTraceData.creationStackTrace;\n    this.#creationStackTraceTarget = creationStackTraceData.creationStackTraceTarget;\n  }\n\n  setBackForwardCacheDetails(event: Protocol.Page.BackForwardCacheNotUsedEvent): void {\n    this.backForwardCacheDetails.restoredFromCache = false;\n    this.backForwardCacheDetails.explanations = event.notRestoredExplanations;\n    this.backForwardCacheDetails.explanationsTree = event.notRestoredExplanationsTree;\n  }\n\n  getResourcesMap(): Map<string, Resource> {\n    return this.resourcesMap;\n  }\n\n  setPrerenderFinalStatus(status: Protocol.Page.PrerenderFinalStatus): void {\n    this.prerenderFinalStatus = status;\n  }\n}\n\nexport class PageDispatcher implements ProtocolProxyApi.PageDispatcher {\n  #resourceTreeModel: ResourceTreeModel;\n  constructor(resourceTreeModel: ResourceTreeModel) {\n    this.#resourceTreeModel = resourceTreeModel;\n  }\n  backForwardCacheNotUsed(params: Protocol.Page.BackForwardCacheNotUsedEvent): void {\n    this.#resourceTreeModel.onBackForwardCacheNotUsed(params);\n  }\n\n  domContentEventFired({timestamp}: Protocol.Page.DomContentEventFiredEvent): void {\n    this.#resourceTreeModel.dispatchEventToListeners(Events.DOMContentLoaded, timestamp);\n  }\n\n  loadEventFired({timestamp}: Protocol.Page.LoadEventFiredEvent): void {\n    this.#resourceTreeModel.dispatchEventToListeners(\n        Events.Load, {resourceTreeModel: this.#resourceTreeModel, loadTime: timestamp});\n  }\n\n  lifecycleEvent({frameId, name}: Protocol.Page.LifecycleEventEvent): void {\n    this.#resourceTreeModel.dispatchEventToListeners(Events.LifecycleEvent, {frameId, name});\n  }\n\n  frameAttached({frameId, parentFrameId, stack, adScriptId}: Protocol.Page.FrameAttachedEvent): void {\n    this.#resourceTreeModel.frameAttached(frameId, parentFrameId, stack, adScriptId);\n  }\n\n  frameNavigated({frame, type}: Protocol.Page.FrameNavigatedEvent): void {\n    this.#resourceTreeModel.frameNavigated(frame, type);\n  }\n\n  documentOpened({frame}: Protocol.Page.DocumentOpenedEvent): void {\n    this.#resourceTreeModel.documentOpened(frame);\n  }\n\n  frameDetached({frameId, reason}: Protocol.Page.FrameDetachedEvent): void {\n    this.#resourceTreeModel.frameDetached(frameId, reason === Protocol.Page.FrameDetachedEventReason.Swap);\n  }\n\n  frameStartedLoading({}: Protocol.Page.FrameStartedLoadingEvent): void {\n  }\n\n  frameStoppedLoading({}: Protocol.Page.FrameStoppedLoadingEvent): void {\n  }\n\n  frameRequestedNavigation({}: Protocol.Page.FrameRequestedNavigationEvent): void {\n  }\n\n  frameScheduledNavigation({}: Protocol.Page.FrameScheduledNavigationEvent): void {\n  }\n\n  frameClearedScheduledNavigation({}: Protocol.Page.FrameClearedScheduledNavigationEvent): void {\n  }\n\n  navigatedWithinDocument({}: Protocol.Page.NavigatedWithinDocumentEvent): void {\n  }\n\n  frameResized(): void {\n    this.#resourceTreeModel.dispatchEventToListeners(Events.FrameResized);\n  }\n\n  javascriptDialogOpening({hasBrowserHandler}: Protocol.Page.JavascriptDialogOpeningEvent): void {\n    if (!hasBrowserHandler) {\n      void this.#resourceTreeModel.agent.invoke_handleJavaScriptDialog({accept: false});\n    }\n  }\n\n  javascriptDialogClosed({}: Protocol.Page.JavascriptDialogClosedEvent): void {\n  }\n\n  screencastFrame({}: Protocol.Page.ScreencastFrameEvent): void {\n  }\n\n  screencastVisibilityChanged({}: Protocol.Page.ScreencastVisibilityChangedEvent): void {\n  }\n\n  interstitialShown(): void {\n    this.#resourceTreeModel.isInterstitialShowing = true;\n    this.#resourceTreeModel.dispatchEventToListeners(Events.InterstitialShown);\n  }\n\n  interstitialHidden(): void {\n    this.#resourceTreeModel.isInterstitialShowing = false;\n    this.#resourceTreeModel.dispatchEventToListeners(Events.InterstitialHidden);\n  }\n\n  windowOpen({}: Protocol.Page.WindowOpenEvent): void {\n  }\n\n  compilationCacheProduced({}: Protocol.Page.CompilationCacheProducedEvent): void {\n  }\n\n  fileChooserOpened({}: Protocol.Page.FileChooserOpenedEvent): void {\n  }\n\n  downloadWillBegin({}: Protocol.Page.DownloadWillBeginEvent): void {\n  }\n\n  downloadProgress(): void {\n  }\n\n  prerenderAttemptCompleted(params: Protocol.Page.PrerenderAttemptCompletedEvent): void {\n    this.#resourceTreeModel.onPrerenderAttemptCompleted(params);\n  }\n}\n\nSDKModel.register(ResourceTreeModel, {capabilities: Capability.DOM, autostart: true, early: true});\nexport interface SecurityOriginData {\n  securityOrigins: Set<string>;\n  mainSecurityOrigin: string|null;\n  unreachableMainSecurityOrigin: string|null;\n}\n\nexport interface StorageKeyData {\n  storageKeys: Set<string>;\n  mainStorageKey: string|null;\n}\n"],
  "mappings": "AAkCA;AACA;AACA;AAEA;AAGA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEO,uCAAgC,SAAqB;AAAA,EACjD;AAAA,EACA;AAAA;AAAA;AAAA,EAGA;AAAA;AAAA;AAAA;AAAA,EAOT;AAAA,EACA;AAAA;AAAA;AAAA,EAIA,YAAY,QAAgB;AAC1B,UAAM;AAEN,UAAM,iBAAiB,OAAO,MAAM;AACpC,QAAI,gBAAgB;AAClB,qBAAe,iBAAiB,qBAAqB,iBAAiB,KAAK,mBAAmB;AAC9F,qBAAe,iBAAiB,qBAAqB,sBAAsB,KAAK,wBAAwB;AAAA;AAE1G,SAAK,QAAQ,OAAO;AACpB,SAAK,eAAe,OAAO;AAC3B,SAAK,KAAK,MAAM;AAChB,kCAA+B,OAAO,MAAM;AAC5C,8BAA2B,OAAO,MAAM;AACxC,iDAA6C,oBAAI;AACjD,mDAA+C,oBAAI;AACnD,WAAO,uBAAuB,IAAI,eAAe;AAEjD,SAAK,iBAAiB,oBAAI;AAC1B,qCAAiC;AACjC,iCAA6B;AAC7B,kCAA8B;AAC9B,SAAK,wBAAwB;AAC7B,SAAK,YAAY;AAEjB,SAAK,KAAK,MAAM,yBAAyB,KAAK,WAAS;AACrD,WAAK,uBAAuB,MAAM,aAAa,OAAO,MAAM;AAAA;AAAA;AAAA,SAIzD,gBAAgB,SAAiD;AACtE,UAAM,iBAAiB,eAAe,WAAW;AACjD,UAAM,oBAAoB,iBAAiB,eAAe,SAAS,MAAM,qBAAqB;AAC9F,QAAI,CAAC,mBAAmB;AACtB,aAAO;AAAA;AAET,WAAO,QAAQ,UAAU,kBAAkB,WAAW,QAAQ,WAAW;AAAA;AAAA,SAGpE,SAA8B;AACnC,UAAM,SAAS;AACf,eAAW,qBAAqB,cAAc,WAAW,OAAO,oBAAoB;AAClF,aAAO,KAAK,GAAG,kBAAkB,eAAe;AAAA;AAElD,WAAO;AAAA;AAAA,SAGF,eAAe,KAAqD;AACzE,eAAW,qBAAqB,cAAc,WAAW,OAAO,oBAAoB;AAClF,YAAM,YAAY,kBAAkB;AACpC,YAAM,SAAS,YAAY,UAAU,eAAe,OAAO;AAC3D,UAAI,QAAQ;AACV,eAAO;AAAA;AAAA;AAGX,WAAO;AAAA;AAAA,SAGF,eAAe,aAAuB,wBAAuC;AAClF,eAAW,qBAAqB,cAAc,WAAW,OAAO,oBAAoB;AAClF,UAAI,CAAC,kBAAkB,SAAS,gBAAgB;AAC9C,0BAAkB,WAAW,aAAa;AAAA;AAAA;AAAA;AAAA,QAK1C,mBAAmB,SAAsD;AAC7E,UAAM,WAAW,MAAM,KAAK,aAAa,6BAA6B,EAAC;AACvE,QAAI,SAAS,eAAe,6CAA6C;AACvE,aAAO;AAAA;AAET,WAAO,SAAS;AAAA;AAAA,EAGlB,WAAqB;AACnB,WAAO,KAAK,SAAS,MAAM;AAAA;AAAA,EAGrB,uBAAuB,kBAA8D;AAM3F,QAAI,oBAAoB,iBAAiB,MAAM,QAAQ,KAAK;AAC1D,WAAK,yBAAyB,OAAO;AACrC,WAAK,qBAAqB,MAAM;AAChC,WAAK,SAAS,gBAAgB,iBAAiB,MAAM;AAAA;AAEvD,qCAAiC;AACjC,UAAM,eAAe,KAAK,SAAS,MAAM;AACzC,QAAI,cAAc;AAChB,mBAAa,8BAA8B,KAAK,2BAA2B,KAAK;AAChF,mBAAa;AAAA;AAEf,SAAK,yBAAyB,OAAO,uBAAuB;AAAA;AAAA,EAG9D,wBAAiC;AAC/B,WAAO;AAAA;AAAA,EAGD,SAAS,OAA0B,kBAAkC;AAC3E,SAAK,eAAe,IAAI,MAAM,IAAI;AAClC,QAAI,MAAM,eAAe;AACvB,WAAK,YAAY;AAAA;AAEnB,SAAK,yBAAyB,OAAO,YAAY;AACjD,SAAK;AACL,SAAK,KAAK;AAAA;AAAA,EAGZ,cACI,SAAgC,eAChC,YAA0C,YAA+D;AAC3G,UAAM,wBAAwB,gBAAiB,KAAK,eAAe,IAAI,kBAAkB,OAAQ;AAEjG,QAAI,CAAC,kCAAkC,uBAAuB;AAC5D,aAAO;AAAA;AAET,QAAI,KAAK,eAAe,IAAI,UAAU;AACpC,aAAO;AAAA;AAGT,UAAM,QACF,IAAI,kBAAkB,MAAM,uBAAuB,SAAS,MAAM,cAAc,MAAM,cAAc;AACxG,QAAI,iBAAiB,CAAC,uBAAuB;AAC3C,YAAM,2BAA2B;AAAA;AAEnC,QAAI,MAAM,iBAAiB,KAAK,WAAW;AAEzC,WAAK,cAAc,KAAK,UAAU,IAAI;AAAA;AAExC,SAAK,SAAS,OAAO;AACrB,WAAO;AAAA;AAAA,EAGT,eAAe,cAAmC,MAAoD;AACpG,UAAM,wBACF,aAAa,WAAY,KAAK,eAAe,IAAI,aAAa,aAAa,OAAQ;AAEvF,QAAI,CAAC,kCAAkC,uBAAuB;AAC5D;AAAA;AAEF,QAAI,QAAkC,KAAK,eAAe,IAAI,aAAa,OAAO;AAClF,QAAI,CAAC,OAAO;AAEV,cAAQ,KAAK,cAAc,aAAa,IAAI,aAAa,YAAY;AACrE,cAAQ,OAAO,QAAQ;AACvB,UAAI,CAAC,OAAO;AACV;AAAA;AAAA;AAIJ,SAAK,yBAAyB,OAAO,mBAAmB;AACxD,UAAM,SAAS;AACf,QAAI,MAAM;AACR,YAAM,wBAAwB,oBAAoB,SAAS,SAAS,KAAK,eAAe;AAAA;AAE1F,SAAK,yBAAyB,OAAO,gBAAgB;AAErD,QAAI,MAAM,eAAe;AACvB,WAAK,qBAAqB;AAC1B,WAAK,yBAAyB,OAAO,oBAAoB;AACzD,YAAM,iBAAiB,KAAK,SAAS,MAAM;AAC3C,UAAI,gBAAgB;AAClB,uBAAe;AAAA;AAAA;AAKnB,UAAM,YAAY,MAAM;AACxB,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,EAAE,GAAG;AACzC,WAAK,yBAAyB,OAAO,eAAe,UAAU;AAAA;AAGhE,QAAI,MAAM,eAAe;AACvB,WAAK,SAAS,gBAAgB,MAAM;AAAA;AAEtC,SAAK;AACL,SAAK,KAAK;AAAA;AAAA,EAGZ,eAAe,cAAyC;AACtD,SAAK,eAAe,cAAc;AAClC,UAAM,QAAQ,KAAK,eAAe,IAAI,aAAa;AACnD,QAAI,SAAS,CAAC,MAAM,kBAAkB,IAAI,aAAa,MAAM;AAC3D,YAAM,gBAAgB,KAAK,+BACvB,cAAc,aAAa,KAAwC,OAAO,aAAa,cAAc,UACrG,aAAa,UAAU,MAAM;AACjC,oBAAc,cAAc;AAC5B,YAAM,YAAY;AAAA;AAAA;AAAA,EAItB,cAAc,SAAgC,QAAuB;AAEnE,QAAI,CAAC,gCAAgC;AACnC;AAAA;AAGF,UAAM,QAAQ,KAAK,eAAe,IAAI;AACtC,QAAI,CAAC,OAAO;AACV;AAAA;AAGF,UAAM,wBAAwB,MAAM;AACpC,QAAI,uBAAuB;AACzB,4BAAsB,iBAAiB,OAAO;AAAA,WACzC;AACL,YAAM,OAAO;AAAA;AAEf,SAAK;AACL,SAAK,KAAK;AAAA;AAAA,EAGJ,kBAAkB,OAAkE;AAC1F,QAAI,CAAC,gCAAgC;AACnC;AAAA;AAGF,UAAM,UAAU,MAAM;AACtB,QAAI,QAAQ,UAAU,QAAQ,mBAAmB,OAAO,aAAa,cAAc,KAAK;AACtF;AAAA;AAGF,UAAM,QAAQ,QAAQ,UAAU,KAAK,eAAe,IAAI,QAAQ,WAAW;AAC3E,QAAI,OAAO;AACT,YAAM,WAAW;AAAA;AAAA;AAAA,EAIb,uBAAuB,OAAiF;AAC9G,QAAI,CAAC,gCAAgC;AACnC;AAAA;AAGF,UAAM,OAAO,MAAM;AACnB,UAAM,UAAU,KAAK;AACrB,QAAI,CAAC,SAAS;AACZ;AAAA;AAEF,UAAM,QAAQ,KAAK,eAAe,IAAI;AACtC,QAAI,CAAC,OAAO;AACV;AAAA;AAGF,UAAM,MAAM,KAAK;AACjB,QAAI,MAAM,kBAAkB,IAAI,MAAM;AACpC;AAAA;AAGF,UAAM,WAAW,IAAI,SACjB,MAAM,MAAM,KAAK,MAAM,KAAK,SAAS,KAAK,UAAU,OAAO,aAAa,cAAc,KAAK,eAC3F,KAAK,UAAU,KAAK,cAAc;AACtC,UAAM,YAAY;AAAA;AAAA,EAGpB,WAAW,SAAwD;AACjE,WAAO,KAAK,eAAe,IAAI,YAAY;AAAA;AAAA,EAG7C,gBAAgB,UAAgD;AAC9D,QAAI,KAAK,WAAW;AAClB,aAAO,KAAK,UAAU,sBAAsB;AAAA;AAE9C,WAAO;AAAA;AAAA,EAGT,SAA8B;AAC5B,WAAO,CAAC,GAAG,KAAK,eAAe;AAAA;AAAA,EAGjC,eAAe,KAAqD;AAElE,WAAO,KAAK,YAAY,KAAK,UAAU,eAAe,OAAO;AAAA;AAAA,EAGvD,qBACJ,uBAA+C,kBAAyD;AAC1G,UAAM,eAAe,iBAAiB;AACtC,UAAM,QAAQ,IAAI,kBAAkB,MAAM,uBAAuB,aAAa,IAAI,cAAc,MAAM;AACtG,QAAI,CAAC,yBAAyB,aAAa,UAAU;AACnD,YAAM,2BAA2B,aAAa;AAAA;AAEhD,SAAK,SAAS;AAEd,eAAW,cAAc,iBAAiB,eAAe,IAAI;AAC3D,WAAK,qBAAqB,OAAO;AAAA;AAGnC,aAAS,IAAI,GAAG,IAAI,iBAAiB,UAAU,QAAQ,EAAE,GAAG;AAC1D,YAAM,cAAc,iBAAiB,UAAU;AAC/C,YAAM,WAAW,KAAK,+BAClB,cAAc,YAAY,KAC1B,OAAO,aAAa,cAAc,YAAY,OAAO,YAAY,UAAU,YAAY,gBAAgB,MACvG,YAAY,eAAe;AAC/B,YAAM,YAAY;AAAA;AAGpB,QAAI,CAAC,MAAM,kBAAkB,IAAI,aAAa,MAAM;AAClD,YAAM,gBAAgB,KAAK,+BACvB,cAAc,aAAa,KAAwC,OAAO,aAAa,cAAc,UACrG,aAAa,UAAU,MAAM;AACjC,YAAM,YAAY;AAAA;AAAA;AAAA,EAId,+BACJ,OAA4B,KAAsC,MAClE,UAAkB,kBAA+B,aAAoC;AACvF,UAAM,eAAe,OAAO,qBAAqB,WAAW,IAAI,KAAK,mBAAmB,OAAQ;AAChG,WAAO,IAAI,SACP,MAAM,MAAM,KAAK,MAAM,KAAwC,MAAM,IAAI,MAAM,UAAU,MAAM,UAC/F,cAAc;AAAA;AAAA,EAGpB,gBAAsB;AACpB;AAAA;AAAA,EAGF,eAAqB;AACnB;AACA,YAAQ,OAAO,+BAA+B,GAAG;AACjD,QAAI,CAAC,+BAA+B,4BAA4B;AAC9D,YAAM,EAAC,aAAa,2BAA0B;AAC9C,WAAK,WAAW,aAAa;AAAA;AAAA;AAAA,EAIjC,WAAW,aAAuB,wBAAuC;AAEvE,QAAI,CAAC,4BAA4B;AAC/B,WAAK,yBAAyB,OAAO,qBAAqB;AAAA;AAE5D,QAAI,6BAA6B;AAC/B,mCAA6B,EAAC,aAAa;AAC3C;AAAA;AAEF,iCAA6B;AAC7B,UAAM,iBAAiB,KAAK,SAAS,MAAM;AAC3C,QAAI,gBAAgB;AAClB,qBAAe;AAAA;AAEjB,SAAK,yBAAyB,OAAO;AACrC,SAAK,KAAK,MAAM,cAAc,EAAC,aAAa;AAAA;AAAA,EAK9C,SAAS,KAAoD;AAC3D,WAAO,KAAK,MAAM,gBAAgB,EAAC;AAAA;AAAA,QAG/B,oBAGE;AACN,UAAM,WAAW,MAAM,KAAK,MAAM;AAClC,QAAI,SAAS,YAAY;AACvB,aAAO;AAAA;AAET,WAAO,EAAC,cAAc,SAAS,cAAc,SAAS,SAAS;AAAA;AAAA,EAGjE,uBAAuB,OAA4C;AACjE,SAAK,KAAK,MAAM,8BAA8B,EAAC,SAAS,MAAM;AAAA;AAAA,EAGhE,0BAA0B,SAA+D;AACvF,WAAO,KAAK,MAAM,iCAAiC,EAAC;AAAA;AAAA,QAGhD,mBAIH;AACD,UAAM,WAAW,MAAM,KAAK,MAAM;AAClC,QAAI,SAAS,YAAY;AACvB,aAAO,EAAC,KAAK,SAAS,KAAwC,MAAM,MAAM,QAAQ;AAAA;AAEpF,WAAO,EAAC,KAAK,SAAS,KAAwC,MAAM,SAAS,QAAQ,MAAM,QAAQ,SAAS;AAAA;AAAA,QAGxG,0BAAwE;AAC5E,UAAM,WAAW,MAAM,KAAK,MAAM;AAClC,WAAO,SAAS,wBAAwB;AAAA;AAAA,QAGpC,mBAEH;AACD,UAAM,WAAW,MAAM,KAAK,MAAM;AAClC,WAAO,EAAC,aAAa,SAAS,eAAe;AAAA;AAAA,QAGzC,WAAoD;AACxD,WAAO,KAAK,MAAM;AAAA;AAAA,EAGZ,2BAA2B,GAAqB,GAA6B;AACnF,uBAAmB,OAAoD;AACrE,UAAI,eAAyC;AAC7C,YAAM,UAAU;AAChB,aAAO,cAAc;AACnB,gBAAQ,KAAK;AACb,uBAAe,aAAa;AAAA;AAE9B,aAAO,QAAQ;AAAA;AAGjB,QAAI,EAAE,aAAa,EAAE,UAAU;AAC7B,aAAO,iBAAiB,WAAW,GAAG;AAAA;AAGxC,UAAM,UAAU,EAAE,UAAU,UAAU,KAAK,WAAW,EAAE,YAAY;AACpE,UAAM,UAAU,EAAE,UAAU,UAAU,KAAK,WAAW,EAAE,YAAY;AACpE,QAAI;AACJ,QAAI;AACJ,aAAS,IAAI,KAAI,KAAK;AACpB,UAAI,CAAC,QAAQ,MAAM,CAAC,QAAQ,MAAO,QAAQ,OAAO,QAAQ,IAAK;AAC7D,iBAAS,QAAQ;AACjB,iBAAS,QAAQ;AACjB;AAAA;AAAA;AAGJ,QAAI,CAAC,UAAU,QAAQ;AACrB,aAAO;AAAA;AAGT,QAAI,CAAC,UAAU,QAAQ;AACrB,aAAO;AAAA;AAGT,QAAI,UAAU,QAAQ;AACpB,aAAO,OAAO,GAAG,cAAc,OAAO;AAAA;AAGxC,WAAO,iBAAiB,WAAW,GAAG;AAAA;AAAA,EAGhC,wBAA4C;AAClD,UAAM,kBAAkB,oBAAI;AAE5B,QAAI,qBAAkC;AACtC,QAAI,gCAA6C;AACjD,eAAW,SAAS,KAAK,eAAe,UAAU;AAChD,YAAM,SAAS,MAAM;AACrB,UAAI,CAAC,QAAQ;AACX;AAAA;AAGF,sBAAgB,IAAI;AACpB,UAAI,MAAM,eAAe;AACvB,6BAAqB;AACrB,YAAI,MAAM,kBAAkB;AAC1B,gBAAM,oBAAoB,IAAI,OAAO,UAAU,UAAU,MAAM;AAC/D,0CAAgC,kBAAkB;AAAA;AAAA;AAAA;AAIxD,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA;AAAA;AAAA,QAIU,oBAA6C;AACzD,UAAM,cAAc,oBAAI;AACxB,QAAI,iBAA8B;AAElC,eAAW,EAAC,aAAa,gBAAe,MAAM,QAAQ,IAC7C,CAAC,GAAG,KAAK,eAAe,UAAU,IAAI,OAAM,MAAK,EAAE,WAAW,KAAK,OAAM;AAAA,MACJ,aAAa,EAAE;AAAA,MACf,YAAY;AAAA,WACP;AACjF,UAAI,aAAa;AACf,yBAAiB;AAAA;AAEnB,UAAI,YAAY;AACd,oBAAY,IAAI;AAAA;AAAA;AAIpB,WAAO,EAAC,aAA0B;AAAA;AAAA,EAG5B,wBAA8B;AACpC,UAAM,OAAO,KAAK;AAClB,gCAA4B,sBACxB,KAAK,sBAAsB,IAAI,KAAK,iCAAiC;AACzE,gCAA4B,sBAAsB,KAAK;AAAA;AAAA,QAG3C,oBAAmC;AAC/C,UAAM,OAAO,MAAM,KAAK;AACxB,4BAAwB,kBAAkB,KAAK,kBAAkB;AACjE,4BAAwB,kBAAkB,KAAK;AAAA;AAAA,QAG3C,oBAA0C;AAC9C,WAAO,KAAK,YAAY,KAAK,UAAU,aAAa;AAAA;AAAA,EAGtD,wBAAqC;AACnC,UAAM,OAAO,KAAK;AAClB,WAAO,KAAK,sBAAsB,KAAK;AAAA;AAAA,EAGzC,0BAA0B,OAAyD;AACjF,QAAI,KAAK,aAAa,KAAK,UAAU,OAAO,MAAM,WAAW,KAAK,UAAU,aAAa,MAAM,UAAU;AACvG,WAAK,UAAU,2BAA2B;AAC1C,WAAK,yBAAyB,OAAO,gCAAgC,KAAK;AAAA,WACrE;AACL,iDAA2C,IAAI;AAAA;AAAA;AAAA,EAInD,4BAA4B,OAA2D;AACrF,QAAI,KAAK,aAAa,KAAK,UAAU,OAAO,MAAM,mBAAmB;AACnE,WAAK,UAAU,wBAAwB,MAAM;AAC7C,WAAK,yBAAyB,OAAO,2BAA2B,KAAK;AAAA,WAChE;AACL,mDAA6C,IAAI;AAAA;AAAA;AAAA,EAIrD,qBAAqB,OAAgC;AACnD,QAAI,CAAC,MAAM,eAAe;AACxB;AAAA;AAEF,eAAW,SAAS,4CAA4C;AAC9D,UAAI,MAAM,OAAO,MAAM,WAAW,MAAM,aAAa,MAAM,UAAU;AACnE,cAAM,2BAA2B;AACjC,mDAA2C,OAAO;AAClD;AAAA;AAAA;AAGJ,eAAW,SAAS,8CAA8C;AAChE,UAAI,MAAM,OAAO,MAAM,mBAAmB;AACxC,cAAM,wBAAwB,MAAM;AACpC,qDAA6C,OAAO;AACpD;AAAA;AAAA;AAAA;AAAA;AASD,WAAK,SAAL,kBAAK,YAAL;AACL,0BAAa;AACb,8BAAiB;AACjB,6BAAgB;AAChB,4BAAe;AACf,iCAAoB;AACpB,kCAAqB;AACrB,6BAAgB;AAChB,uCAA0B;AAC1B,qCAAwB;AACxB,gCAAmB;AACnB,8BAAiB;AACjB,oBAAO;AACP,mCAAsB;AACtB,8BAAiB;AACjB,iCAAoB;AACpB,kCAAqB;AACrB,8CAAiC;AACjC,yCAA4B;AAlBlB;AAAA;AA0CL,+BAAwB;AAAA;AAAA;AAAA;AAAA,EAI7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA;AAAA,EACA,0BAII;AAAA,IACF,mBAAmB;AAAA,IACnB,cAAc;AAAA,IACd,kBAAkB;AAAA;AAAA,EAEpB;AAAA,EAEA,YACI,OAA0B,aAAqC,SAC/D,SAAmC,oBACnC,YAA2C;AAC7C,kBAAc;AACd,0CAAsC;AACtC,uBAAmB;AACnB,SAAK,2BAA2B;AAEhC,6BAA0B,WAAW,QAAQ,YAAa;AAC1D,yBAAqB,WAAW,QAAQ;AACxC,wBACI,WAAW,QAAQ,OAA0C,SAAS,aAAa;AACvF,sCAAmC,WAAW,QAAQ,qBAAsB;AAC5E,mCAA+B,WAAW,QAAQ;AAClD,mCACK,WAAW,QAAQ,kBAAsD,SAAS,aAAa;AACpG,kCAA8B,SAAS;AACvC,8BAA0B,WAAW,QAAQ;AAC7C,2CAAuC,WAAW,QAAQ;AAC1D,6BAAyB,WAAW,QAAQ;AAE5C,+BAA2B;AAC3B,qCAAiC;AAEjC,uBAAmB,YAAY,YAAY;AAC3C,uBAAmB,YAAY,cAAc;AAE7C,gCAA4B,oBAAI;AAEhC,SAAK,eAAe,oBAAI;AACxB,SAAK,uBAAuB;AAE5B,QAAI,qCAAqC;AACvC,+DAAyD,IAAI;AAAA;AAAA;AAAA,EAIjE,kBAA2B;AACzB,WAAO,4BAA4B,QAAQ,wBAAwB,WAAW;AAAA;AAAA,EAGhF,uBAA6D;AAC3D,WAAO;AAAA;AAAA,EAGT,wBAAiC;AAC/B,WAAO,yCAAyC,QAAQ,qCAAqC,WAAW;AAAA;AAAA,EAG1G,oCAAuF;AACrF,WAAO;AAAA;AAAA,EAGT,sBAA6D;AAC3D,WAAO;AAAA;AAAA,EAGT,4BAC6F;AAC3F,WAAO;AAAA,MACL,oBAAoB;AAAA,MACpB,0BAA0B,kCAAkC,KAAK,oBAAoB;AAAA;AAAA;AAAA,EAIzF,SAAS,cAAyC;AAChD,6BAAyB,aAAa;AACtC,yBAAqB,aAAa;AAClC,wBAAoB,aAAa;AACjC,sCAAkC,aAAa;AAC/C,mCAA+B,aAAa;AAC5C,mCACI,aAAa,kBAAqD,SAAS,aAAa;AAC5F,kCAA8B,cAAc;AAC5C,8BAA0B,aAAa;AACvC,2CAAuC,aAAa;AACpD,6BAAyB,aAAa;AACtC,SAAK,0BAA0B;AAAA,MAC7B,mBAAmB;AAAA,MACnB,cAAc;AAAA,MACd,kBAAkB;AAAA;AAGpB,UAAM,eAAe,KAAK,aAAa,IAAI;AAC3C,SAAK,aAAa;AAClB,SAAK;AACL,QAAI,gBAAgB,aAAa,aAAa,wBAAwB;AACpE,WAAK,YAAY;AAAA;AAAA;AAAA,EAIrB,oBAAuC;AACrC,WAAO;AAAA;AAAA,MAGL,KAA4B;AAC9B,WAAO;AAAA;AAAA,MAGL,OAAe;AACjB,WAAO,sBAAsB;AAAA;AAAA,MAG3B,MAAuC;AACzC,WAAO;AAAA;AAAA,EAGT,oBAA4B;AAC1B,WAAO;AAAA;AAAA,EAGT,gBAAgD;AAC9C,WAAO;AAAA;AAAA,EAGT,cAAc,YAAkD;AAC9D,uBAAmB;AAAA;AAAA,EAGrB,gBAAwD;AACtD,WAAO;AAAA;AAAA,EAGT,cAAc,YAA0D;AACtE,uBAAmB;AAAA;AAAA,MAGjB,iBAA8B;AAChC,WAAO;AAAA;AAAA,MAGL,aAAmC;AACrC,QAAI,CAAC,0BAA0B;AAC7B,iCAA2B,YAAY,mBAAmB;AAAA;AAE5D,WAAO;AAAA;AAAA,EAGT,iBAAkD;AAChD,WAAO;AAAA;AAAA,MAGL,WAAmB;AACrB,WAAO;AAAA;AAAA,EAGT,cAAyC;AACvC,WAAO,6BAA6B,eAAe,SAAS,KAAK,YAAY;AAAA;AAAA,EAG/E,gBAAuD;AACrD,WAAO;AAAA;AAAA,MAGL,cAAmC;AACrC,WAAO,CAAC,GAAG;AAAA;AAAA,EAMb,wBAAgD;AAC9C,WAAO;AAAA;AAAA,EAMT,yBAAiD;AAC/C,QAAI,CAAC,KAAK,0BAA0B;AAClC,aAAO;AAAA;AAET,UAAM,eAAe,YAAY,SAAS;AAC1C,QAAI,CAAC,cAAc;AACjB,aAAO;AAAA;AAET,UAAM,cAAc,aAAa,MAAM;AACvC,QAAI,CAAC,aAAa;AAChB,aAAO;AAAA;AAQT,WAAO,YAAY,eAAe,IAAI,KAAK,6BAA6B;AAAA;AAAA,EAO1E,cAAsC;AACpC,WAAO,KAAK,2BAA2B,KAAK;AAAA;AAAA,EAO9C,cAAuB;AACrB,WAAO,CAAC;AAAA;AAAA,EAOV,aAAsB;AACpB,WAAO,CAAC,YAAY,SAAS,kBAAkB,CAAC,uCAC5C,CAAC,KAAK;AAAA;AAAA,EAGZ,iBAAiB,OAA0B,QAAuB;AAChE,8BAA0B,OAAO;AACjC,UAAM,OAAO;AAAA;AAAA,EAGP,oBAA0B;AAChC,UAAM,SAAS;AACf,gCAA4B,oBAAI;AAChC,eAAW,SAAS,QAAQ;AAC1B,YAAM,OAAO;AAAA;AAAA;AAAA,EAIjB,OAAO,QAAuB;AAC5B,SAAK;AACL,gBAAY,eAAe,OAAO,KAAK;AACvC,gBAAY,yBAAyB,qCAAsB,EAAC,OAAO,MAAM;AAAA;AAAA,EAG3E,YAAY,UAA0B;AACpC,QAAI,KAAK,aAAa,IAAI,SAAS,SAAS,UAAU;AAEpD;AAAA;AAEF,SAAK,aAAa,IAAI,SAAS,KAAK;AACpC,gBAAY,yBAAyB,qCAAsB;AAAA;AAAA,EAG7D,WAAW,SAA+B;AACxC,QAAI,WAAW,KAAK,aAAa,IAAI,QAAQ;AAC7C,QAAI,YAAY,SAAS,YAAY,SAAS;AAE5C;AAAA;AAEF,eAAW,IAAI,SACX,aAAa,SAAS,QAAQ,OAAO,QAAQ,aAAa,QAAQ,SAAS,QAAQ,UACnF,QAAQ,gBAAgB,QAAQ,UAAU,MAAM;AACpD,SAAK,aAAa,IAAI,SAAS,KAAK;AACpC,gBAAY,yBAAyB,qCAAsB;AAAA;AAAA,EAG7D,YAAwB;AACtB,WAAO,MAAM,KAAK,KAAK,aAAa;AAAA;AAAA,EAGtC,eAAe,KAAqD;AAClE,UAAM,WAAW,KAAK,aAAa,IAAI;AACvC,QAAI,UAAU;AACZ,aAAO;AAAA;AAET,eAAW,SAAS,2BAA2B;AAC7C,YAAM,YAAW,MAAM,eAAe;AACtC,UAAI,WAAU;AACZ,eAAO;AAAA;AAAA;AAGX,WAAO;AAAA;AAAA,EAGT,sBAAsB,UAAgD;AACpE,eAAW,YAAY,KAAK,aAAa,UAAU;AACjD,UAAI,SAAS,WAAW;AACtB,eAAO;AAAA;AAAA;AAIX,eAAW,SAAS,2BAA2B;AAC7C,UAAI,MAAM,sBAAsB,WAAW;AACzC,eAAO;AAAA;AAAA;AAGX,WAAO;AAAA;AAAA,EAGT,cAAsB;AACpB,QAAI,KAAK,cAAc;AACrB,aAAO,KAAK,KAAK,aAAa;AAAA;AAEhC,UAAM,WAAW,IAAI,OAAO,UAAU,UAAU,mBAAmB;AACnE,QAAI,UAAU;AACZ,UAAI,CAAC,oBAAoB;AACvB,eAAO;AAAA;AAET,aAAO,qBAAqB,OAAO,WAAW;AAAA;AAEhD,WAAO,KAAK,KAAK,aAAa;AAAA;AAAA,QAG1B,0BAAyD;AAC7D,UAAM,cAAc,KAAK;AACzB,QAAI,CAAC,aAAa;AAChB,aAAO;AAAA;AAET,WAAO,YAAY,oBAAoB,WAAW,qBAAqB;AAAA;AAAA,QAGnE,4BAAmD;AACvD,UAAM,eAAe,MAAM,KAAK;AAChC,QAAI,cAAc;AAChB,aAAO,aAAa;AAAA;AAEtB,QAAI,KAAK,cAAc;AACrB,aAAO,KAAK,oBAAoB,WAAW;AAAA;AAE7C,WAAO;AAAA;AAAA,QAGH,YAA2B;AAC/B,UAAM,cAAc,KAAK;AACzB,UAAM,eAAe,KAAK,oBAAoB,SAAS;AACvD,UAAM,sBAAsB,OAAM,aAAsC;AACtE,YAAM,eAAe,MAAM,SAAS,qBAAqB;AACzD,UAAI,cAAc;AAChB,iBAAS,eAAe,mBAAmB,EAAC,cAAc,cAAc,MAAK,OAAO;AAAA;AAAA;AAIxF,QAAI,aAAa;AACf,aAAO,oBAAoB,YAAY,oBAAoB;AAAA;AAI7D,QAAI,cAAc;AAChB,YAAM,WAAW,aAAa,MAAM;AACpC,UAAI,UAAU;AACZ,eAAO,oBAAoB;AAAA;AAAA;AAK/B,UAAM,WAAW,MAAM,KAAK,oBAAoB,WAAW;AAC3D,QAAI,UAAU;AACZ,WAAK,oBAAoB,WAAW,eAAe,mBAC/C,EAAC,MAAM,UAAU,cAAc,MAAK,OAAO;AAAA;AAAA;AAAA,QAI7C,4BAAyF;AAC7F,UAAM,WAAW,MAAM,KAAK,oBAAoB,SAAS,YAAY,iCACjE,EAAC,SAAS;AACd,QAAI,SAAS,YAAY;AACvB,aAAO;AAAA;AAET,WAAO,SAAS;AAAA;AAAA,QAGZ,kBAAwD;AAC5D,UAAM,WACF,MAAM,KAAK,oBAAoB,SAAS,YAAY,uBAAuB,EAAC,SAAS;AACzF,QAAI,SAAS,YAAY;AACvB,aAAO;AAAA;AAET,WAAO,SAAS;AAAA;AAAA,EAGlB,sBAAsB,wBAEb;AACP,+BAA2B,uBAAuB;AAClD,qCAAiC,uBAAuB;AAAA;AAAA,EAG1D,2BAA2B,OAAyD;AAClF,SAAK,wBAAwB,oBAAoB;AACjD,SAAK,wBAAwB,eAAe,MAAM;AAClD,SAAK,wBAAwB,mBAAmB,MAAM;AAAA;AAAA,EAGxD,kBAAyC;AACvC,WAAO,KAAK;AAAA;AAAA,EAGd,wBAAwB,QAAkD;AACxE,SAAK,uBAAuB;AAAA;AAAA;AAIzB,4BAAgE;AAAA;AAAA,EAErE,YAAY,mBAAsC;AAChD,8BAA0B;AAAA;AAAA,EAE5B,wBAAwB,QAA0D;AAChF,4BAAwB,0BAA0B;AAAA;AAAA,EAGpD,qBAAqB,EAAC,aAA2D;AAC/E,4BAAwB,yBAAyB,2CAAyB;AAAA;AAAA,EAG5E,eAAe,EAAC,aAAqD;AACnE,4BAAwB,yBACpB,mBAAa,EAAC,mBAAmB,yBAAyB,UAAU;AAAA;AAAA,EAG1E,eAAe,EAAC,SAAS,QAAgD;AACvE,4BAAwB,yBAAyB,uCAAuB,EAAC,SAAS;AAAA;AAAA,EAGpF,cAAc,EAAC,SAAS,eAAe,OAAO,cAAqD;AACjG,4BAAwB,cAAc,SAAS,eAAe,OAAO;AAAA;AAAA,EAGvE,eAAe,EAAC,OAAO,QAAgD;AACrE,4BAAwB,eAAe,OAAO;AAAA;AAAA,EAGhD,eAAe,EAAC,SAAiD;AAC/D,4BAAwB,eAAe;AAAA;AAAA,EAGzC,cAAc,EAAC,SAAS,UAAiD;AACvE,4BAAwB,cAAc,SAAS,WAAW,SAAS,KAAK,yBAAyB;AAAA;AAAA,EAGnG,oBAAoB,IAAkD;AAAA;AAAA,EAGtE,oBAAoB,IAAkD;AAAA;AAAA,EAGtE,yBAAyB,IAAuD;AAAA;AAAA,EAGhF,yBAAyB,IAAuD;AAAA;AAAA,EAGhF,gCAAgC,IAA8D;AAAA;AAAA,EAG9F,wBAAwB,IAAsD;AAAA;AAAA,EAG9E,eAAqB;AACnB,4BAAwB,yBAAyB;AAAA;AAAA,EAGnD,wBAAwB,EAAC,qBAAsE;AAC7F,QAAI,CAAC,mBAAmB;AACtB,WAAK,wBAAwB,MAAM,8BAA8B,EAAC,QAAQ;AAAA;AAAA;AAAA,EAI9E,uBAAuB,IAAqD;AAAA;AAAA,EAG5E,gBAAgB,IAA8C;AAAA;AAAA,EAG9D,4BAA4B,IAA0D;AAAA;AAAA,EAGtF,oBAA0B;AACxB,4BAAwB,wBAAwB;AAChD,4BAAwB,yBAAyB;AAAA;AAAA,EAGnD,qBAA2B;AACzB,4BAAwB,wBAAwB;AAChD,4BAAwB,yBAAyB;AAAA;AAAA,EAGnD,WAAW,IAAyC;AAAA;AAAA,EAGpD,yBAAyB,IAAuD;AAAA;AAAA,EAGhF,kBAAkB,IAAgD;AAAA;AAAA,EAGlE,kBAAkB,IAAgD;AAAA;AAAA,EAGlE,mBAAyB;AAAA;AAAA,EAGzB,0BAA0B,QAA4D;AACpF,4BAAwB,4BAA4B;AAAA;AAAA;AAIxD,SAAS,SAAS,mBAAmB,EAAC,cAAc,WAAW,KAAK,WAAW,MAAM,OAAO;",
  "names": []
}
