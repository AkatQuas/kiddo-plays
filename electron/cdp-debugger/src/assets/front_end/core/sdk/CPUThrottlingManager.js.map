{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/CPUThrottlingManager.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\n\nimport {EmulationModel} from './EmulationModel.js';\nimport type {SDKModelObserver} from './TargetManager.js';\nimport {TargetManager} from './TargetManager.js';\n\nlet throttlingManagerInstance: CPUThrottlingManager;\n\nexport class CPUThrottlingManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> implements\n    SDKModelObserver<EmulationModel> {\n  #cpuThrottlingRateInternal: number;\n  #hardwareConcurrencyInternal?: number;\n  #pendingMainTargetPromise?: (r: number) => void;\n\n  private constructor() {\n    super();\n    this.#cpuThrottlingRateInternal = CPUThrottlingRates.NoThrottling;\n    TargetManager.instance().observeModels(EmulationModel, this);\n  }\n\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): CPUThrottlingManager {\n    const {forceNew} = opts;\n    if (!throttlingManagerInstance || forceNew) {\n      throttlingManagerInstance = new CPUThrottlingManager();\n    }\n\n    return throttlingManagerInstance;\n  }\n\n  cpuThrottlingRate(): number {\n    return this.#cpuThrottlingRateInternal;\n  }\n\n  setCPUThrottlingRate(rate: number): void {\n    this.#cpuThrottlingRateInternal = rate;\n    for (const emulationModel of TargetManager.instance().models(EmulationModel)) {\n      void emulationModel.setCPUThrottlingRate(this.#cpuThrottlingRateInternal);\n    }\n    this.dispatchEventToListeners(Events.RateChanged, this.#cpuThrottlingRateInternal);\n  }\n\n  setHardwareConcurrency(concurrency: number): void {\n    this.#hardwareConcurrencyInternal = concurrency;\n    for (const emulationModel of TargetManager.instance().models(EmulationModel)) {\n      void emulationModel.setHardwareConcurrency(concurrency);\n    }\n    this.dispatchEventToListeners(Events.HardwareConcurrencyChanged, this.#hardwareConcurrencyInternal);\n  }\n\n  async getHardwareConcurrency(): Promise<number> {\n    const target = TargetManager.instance().mainTarget();\n    const existingCallback = this.#pendingMainTargetPromise;\n\n    // If the main target hasn't attached yet, block callers until it appears.\n    if (!target) {\n      if (existingCallback) {\n        return new Promise(r => {\n          this.#pendingMainTargetPromise = (result: number): void => {\n            r(result);\n            existingCallback(result);\n          };\n        });\n      }\n      return new Promise(r => {\n        this.#pendingMainTargetPromise = r;\n      });\n    }\n\n    const evalResult = await target.runtimeAgent().invoke_evaluate(\n        {expression: 'navigator.hardwareConcurrency', returnByValue: true, silent: true, throwOnSideEffect: true});\n    const error = evalResult.getError();\n    if (error) {\n      throw new Error(error);\n    }\n    const {result, exceptionDetails} = evalResult;\n    if (exceptionDetails) {\n      throw new Error(exceptionDetails.text);\n    }\n    return result.value;\n  }\n\n  modelAdded(emulationModel: EmulationModel): void {\n    if (this.#cpuThrottlingRateInternal !== CPUThrottlingRates.NoThrottling) {\n      void emulationModel.setCPUThrottlingRate(this.#cpuThrottlingRateInternal);\n    }\n    if (this.#hardwareConcurrencyInternal !== undefined) {\n      void emulationModel.setHardwareConcurrency(this.#hardwareConcurrencyInternal);\n    }\n\n    // If there are any callers blocked on a getHardwareConcurrency call, let's wake them now.\n    if (this.#pendingMainTargetPromise) {\n      const existingCallback = this.#pendingMainTargetPromise;\n      this.#pendingMainTargetPromise = undefined;\n      void this.getHardwareConcurrency().then(existingCallback);\n    }\n  }\n\n  modelRemoved(_emulationModel: EmulationModel): void {\n    // Implemented as a requirement for being a SDKModelObserver.\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  RateChanged = 'RateChanged',\n  HardwareConcurrencyChanged = 'HardwareConcurrencyChanged',\n}\n\nexport type EventTypes = {\n  [Events.RateChanged]: number,\n  [Events.HardwareConcurrencyChanged]: number,\n};\n\nexport function throttlingManager(): CPUThrottlingManager {\n  return CPUThrottlingManager.instance();\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum CPUThrottlingRates {\n  NoThrottling = 1,\n  MidTierMobile = 4,\n  LowEndMobile = 6,\n}\n"],
  "mappings": "AAIA;AAEA;AAEA;AAEA,IAAI;AAEG,0CAAmC,OAAO,cAAc,cAC1B;AAAA;AAAA;AAAA;AAAA,EAK3B,cAAc;AACpB;AACA,sCAAkC,mBAAmB;AACrD,kBAAc,WAAW,cAAc,gBAAgB;AAAA;AAAA,SAGlD,SAAS,OAAiC,EAAC,UAAU,QAA6B;AACvF,UAAM,EAAC,aAAY;AACnB,QAAI,CAAC,6BAA6B,UAAU;AAC1C,kCAA4B,IAAI;AAAA;AAGlC,WAAO;AAAA;AAAA,EAGT,oBAA4B;AAC1B,WAAO;AAAA;AAAA,EAGT,qBAAqB,MAAoB;AACvC,sCAAkC;AAClC,eAAW,kBAAkB,cAAc,WAAW,OAAO,iBAAiB;AAC5E,WAAK,eAAe,qBAAqB;AAAA;AAE3C,SAAK,yBAAyB,OAAO,aAAa;AAAA;AAAA,EAGpD,uBAAuB,aAA2B;AAChD,wCAAoC;AACpC,eAAW,kBAAkB,cAAc,WAAW,OAAO,iBAAiB;AAC5E,WAAK,eAAe,uBAAuB;AAAA;AAE7C,SAAK,yBAAyB,OAAO,4BAA4B;AAAA;AAAA,QAG7D,yBAA0C;AAC9C,UAAM,SAAS,cAAc,WAAW;AACxC,UAAM,mBAAmB;AAGzB,QAAI,CAAC,QAAQ;AACX,UAAI,kBAAkB;AACpB,eAAO,IAAI,QAAQ,OAAK;AACtB,2CAAiC,CAAC,YAAyB;AACzD,cAAE;AACF,6BAAiB;AAAA;AAAA;AAAA;AAIvB,aAAO,IAAI,QAAQ,OAAK;AACtB,yCAAiC;AAAA;AAAA;AAIrC,UAAM,aAAa,MAAM,OAAO,eAAe,gBAC3C,EAAC,YAAY,iCAAiC,eAAe,MAAM,QAAQ,MAAM,mBAAmB;AACxG,UAAM,QAAQ,WAAW;AACzB,QAAI,OAAO;AACT,YAAM,IAAI,MAAM;AAAA;AAElB,UAAM,EAAC,QAAQ,qBAAoB;AACnC,QAAI,kBAAkB;AACpB,YAAM,IAAI,MAAM,iBAAiB;AAAA;AAEnC,WAAO,OAAO;AAAA;AAAA,EAGhB,WAAW,gBAAsC;AAC/C,QAAI,oCAAoC,mBAAmB,cAAc;AACvE,WAAK,eAAe,qBAAqB;AAAA;AAE3C,QAAI,sCAAsC,QAAW;AACnD,WAAK,eAAe,uBAAuB;AAAA;AAI7C,QAAI,gCAAgC;AAClC,YAAM,mBAAmB;AACzB,uCAAiC;AACjC,WAAK,KAAK,yBAAyB,KAAK;AAAA;AAAA;AAAA,EAI5C,aAAa,iBAAuC;AAAA;AAAA;AAO/C,WAAK,SAAL,kBAAK,YAAL;AACL,2BAAc;AACd,0CAA6B;AAFnB;AAAA;AAUL,oCAAmD;AACxD,SAAO,qBAAqB;AAAA;AAKvB,WAAK,qBAAL,kBAAK,wBAAL;AACL,4DAAe,KAAf;AACA,6DAAgB,KAAhB;AACA,4DAAe,KAAf;AAHU;AAAA;",
  "names": []
}
