{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/HeapProfilerModel.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport type * as Platform from '../platform/platform.js';\n\nimport type {DebuggerModel} from './DebuggerModel.js';\nimport type {RemoteObject} from './RemoteObject.js';\nimport {RuntimeModel} from './RuntimeModel.js';\nimport type {Target} from './Target.js';\nimport {Capability} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\n\nexport class HeapProfilerModel extends SDKModel<EventTypes> {\n  #enabled: boolean;\n  readonly #heapProfilerAgent: ProtocolProxyApi.HeapProfilerApi;\n  readonly #runtimeModelInternal: RuntimeModel;\n  #samplingProfilerDepth: number;\n\n  constructor(target: Target) {\n    super(target);\n    target.registerHeapProfilerDispatcher(new HeapProfilerDispatcher(this));\n    this.#enabled = false;\n    this.#heapProfilerAgent = target.heapProfilerAgent();\n    this.#runtimeModelInternal = (target.model(RuntimeModel) as RuntimeModel);\n    this.#samplingProfilerDepth = 0;\n  }\n\n  debuggerModel(): DebuggerModel {\n    return this.#runtimeModelInternal.debuggerModel();\n  }\n\n  runtimeModel(): RuntimeModel {\n    return this.#runtimeModelInternal;\n  }\n\n  async enable(): Promise<void> {\n    if (this.#enabled) {\n      return;\n    }\n\n    this.#enabled = true;\n    await this.#heapProfilerAgent.invoke_enable();\n  }\n\n  async startSampling(samplingRateInBytes?: number): Promise<boolean> {\n    if (this.#samplingProfilerDepth++) {\n      return false;\n    }\n    const defaultSamplingIntervalInBytes = 16384;\n    const response = await this.#heapProfilerAgent.invoke_startSampling(\n        {samplingInterval: samplingRateInBytes || defaultSamplingIntervalInBytes});\n    return Boolean(response.getError());\n  }\n\n  async stopSampling(): Promise<Protocol.HeapProfiler.SamplingHeapProfile|null> {\n    if (!this.#samplingProfilerDepth) {\n      throw new Error('Sampling profiler is not running.');\n    }\n    if (--this.#samplingProfilerDepth) {\n      return this.getSamplingProfile();\n    }\n    const response = await this.#heapProfilerAgent.invoke_stopSampling();\n    if (response.getError()) {\n      return null;\n    }\n    return response.profile;\n  }\n\n  async getSamplingProfile(): Promise<Protocol.HeapProfiler.SamplingHeapProfile|null> {\n    const response = await this.#heapProfilerAgent.invoke_getSamplingProfile();\n    if (response.getError()) {\n      return null;\n    }\n    return response.profile;\n  }\n\n  async collectGarbage(): Promise<boolean> {\n    const response = await this.#heapProfilerAgent.invoke_collectGarbage();\n    return Boolean(response.getError());\n  }\n\n  async snapshotObjectIdForObjectId(objectId: Protocol.Runtime.RemoteObjectId): Promise<string|null> {\n    const response = await this.#heapProfilerAgent.invoke_getHeapObjectId({objectId});\n    if (response.getError()) {\n      return null;\n    }\n    return response.heapSnapshotObjectId;\n  }\n\n  async objectForSnapshotObjectId(\n      snapshotObjectId: Protocol.HeapProfiler.HeapSnapshotObjectId,\n      objectGroupName: string): Promise<RemoteObject|null> {\n    const result = await this.#heapProfilerAgent.invoke_getObjectByHeapObjectId(\n        {objectId: snapshotObjectId, objectGroup: objectGroupName});\n    if (result.getError()) {\n      return null;\n    }\n    return this.#runtimeModelInternal.createRemoteObject(result.result);\n  }\n\n  async addInspectedHeapObject(snapshotObjectId: Protocol.HeapProfiler.HeapSnapshotObjectId): Promise<boolean> {\n    const response = await this.#heapProfilerAgent.invoke_addInspectedHeapObject({heapObjectId: snapshotObjectId});\n    return Boolean(response.getError());\n  }\n\n  async takeHeapSnapshot(heapSnapshotOptions: Protocol.HeapProfiler.TakeHeapSnapshotRequest): Promise<void> {\n    await this.#heapProfilerAgent.invoke_takeHeapSnapshot(heapSnapshotOptions);\n  }\n\n  async startTrackingHeapObjects(recordAllocationStacks: boolean): Promise<boolean> {\n    const response =\n        await this.#heapProfilerAgent.invoke_startTrackingHeapObjects({trackAllocations: recordAllocationStacks});\n    return Boolean(response.getError());\n  }\n\n  async stopTrackingHeapObjects(reportProgress: boolean): Promise<boolean> {\n    const response = await this.#heapProfilerAgent.invoke_stopTrackingHeapObjects({reportProgress});\n    return Boolean(response.getError());\n  }\n\n  heapStatsUpdate(samples: number[]): void {\n    this.dispatchEventToListeners(Events.HeapStatsUpdate, samples);\n  }\n\n  lastSeenObjectId(lastSeenObjectId: number, timestamp: number): void {\n    this.dispatchEventToListeners(Events.LastSeenObjectId, {lastSeenObjectId: lastSeenObjectId, timestamp: timestamp});\n  }\n\n  addHeapSnapshotChunk(chunk: string): void {\n    this.dispatchEventToListeners(Events.AddHeapSnapshotChunk, chunk);\n  }\n\n  reportHeapSnapshotProgress(done: number, total: number, finished?: boolean): void {\n    this.dispatchEventToListeners(Events.ReportHeapSnapshotProgress, {done: done, total: total, finished: finished});\n  }\n\n  resetProfiles(): void {\n    this.dispatchEventToListeners(Events.ResetProfiles, this);\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  HeapStatsUpdate = 'HeapStatsUpdate',\n  LastSeenObjectId = 'LastSeenObjectId',\n  AddHeapSnapshotChunk = 'AddHeapSnapshotChunk',\n  ReportHeapSnapshotProgress = 'ReportHeapSnapshotProgress',\n  ResetProfiles = 'ResetProfiles',\n}\n\n/**\n * An array of triplets. Each triplet describes a fragment. The first number is the fragment\n * index, the second number is a total count of objects for the fragment, the third number is\n * a total size of the objects for the fragment.\n */\nexport type HeapStatsUpdateSamples = number[];\n\nexport interface LastSeenObjectId {\n  lastSeenObjectId: number;\n  timestamp: number;\n}\n\nexport interface HeapSnapshotProgress {\n  done: number;\n  total: number;\n  finished?: boolean;\n}\n\nexport type EventTypes = {\n  [Events.HeapStatsUpdate]: HeapStatsUpdateSamples,\n  [Events.LastSeenObjectId]: LastSeenObjectId,\n  [Events.AddHeapSnapshotChunk]: string,\n  [Events.ReportHeapSnapshotProgress]: HeapSnapshotProgress,\n  [Events.ResetProfiles]: HeapProfilerModel,\n};\n\nexport interface NativeProfilerCallFrame {\n  functionName: string;\n  url: Platform.DevToolsPath.UrlString;\n  scriptId?: string;\n  lineNumber?: number;\n  columnNumber?: number;\n}\n\nexport interface CommonHeapProfileNode {\n  callFrame: NativeProfilerCallFrame;\n  selfSize: number;\n  id?: number;\n  children: CommonHeapProfileNode[];\n}\n\nexport interface CommonHeapProfile {\n  head: CommonHeapProfileNode;\n  modules: Protocol.Memory.Module[];\n}\n\nclass HeapProfilerDispatcher implements ProtocolProxyApi.HeapProfilerDispatcher {\n  readonly #heapProfilerModel: HeapProfilerModel;\n  constructor(model: HeapProfilerModel) {\n    this.#heapProfilerModel = model;\n  }\n\n  heapStatsUpdate({statsUpdate}: Protocol.HeapProfiler.HeapStatsUpdateEvent): void {\n    this.#heapProfilerModel.heapStatsUpdate(statsUpdate);\n  }\n\n  lastSeenObjectId({lastSeenObjectId, timestamp}: Protocol.HeapProfiler.LastSeenObjectIdEvent): void {\n    this.#heapProfilerModel.lastSeenObjectId(lastSeenObjectId, timestamp);\n  }\n\n  addHeapSnapshotChunk({chunk}: Protocol.HeapProfiler.AddHeapSnapshotChunkEvent): void {\n    this.#heapProfilerModel.addHeapSnapshotChunk(chunk);\n  }\n\n  reportHeapSnapshotProgress({done, total, finished}: Protocol.HeapProfiler.ReportHeapSnapshotProgressEvent): void {\n    this.#heapProfilerModel.reportHeapSnapshotProgress(done, total, finished);\n  }\n\n  resetProfiles(): void {\n    this.#heapProfilerModel.resetProfiles();\n  }\n}\n\nSDKModel.register(HeapProfilerModel, {capabilities: Capability.JS, autostart: false});\n"],
  "mappings": "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",
  "names": []
}
