{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/Script.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2008 Apple Inc. All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Protocol from '../../generated/protocol.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as Common from '../common/common.js';\nimport * as i18n from '../i18n/i18n.js';\n\nimport type {DebuggerModel} from './DebuggerModel.js';\nimport {Location} from './DebuggerModel.js';\nimport type {FrameAssociated} from './FrameAssociated.js';\nimport type {PageResourceLoadInitiator} from './PageResourceLoader.js';\nimport {ResourceTreeModel} from './ResourceTreeModel.js';\nimport type {ExecutionContext} from './RuntimeModel.js';\nimport type {Target} from './Target.js';\n\nconst UIStrings = {\n  /**\n  *@description Error message for when a script can't be loaded which had been previously\n  */\n  scriptRemovedOrDeleted: 'Script removed or deleted.',\n  /**\n  *@description Error message when failing to load a script source text\n  */\n  unableToFetchScriptSource: 'Unable to fetch script source.',\n};\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/Script.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class Script implements TextUtils.ContentProvider.ContentProvider, FrameAssociated {\n  debuggerModel: DebuggerModel;\n  scriptId: Protocol.Runtime.ScriptId;\n  sourceURL: Platform.DevToolsPath.UrlString;\n  lineOffset: number;\n  columnOffset: number;\n  endLine: number;\n  endColumn: number;\n  executionContextId: number;\n  hash: string;\n  readonly #isContentScriptInternal: boolean;\n  readonly #isLiveEditInternal: boolean;\n  sourceMapURL: Platform.DevToolsPath.UrlString|undefined;\n  debugSymbols: Protocol.Debugger.DebugSymbols|null;\n  hasSourceURL: boolean;\n  contentLength: number;\n  #originalContentProviderInternal: TextUtils.ContentProvider.ContentProvider|null;\n  originStackTrace: Protocol.Runtime.StackTrace|null;\n  readonly #codeOffsetInternal: number|null;\n  readonly #language: string|null;\n  #contentPromise: Promise<TextUtils.ContentProvider.DeferredContent>|null;\n  readonly #embedderNameInternal: Platform.DevToolsPath.UrlString|null;\n  readonly isModule: boolean|null;\n  constructor(\n      debuggerModel: DebuggerModel, scriptId: Protocol.Runtime.ScriptId, sourceURL: Platform.DevToolsPath.UrlString,\n      startLine: number, startColumn: number, endLine: number, endColumn: number, executionContextId: number,\n      hash: string, isContentScript: boolean, isLiveEdit: boolean,\n      sourceMapURL: Platform.DevToolsPath.UrlString|undefined, hasSourceURL: boolean, length: number,\n      isModule: boolean|null, originStackTrace: Protocol.Runtime.StackTrace|null, codeOffset: number|null,\n      scriptLanguage: string|null, debugSymbols: Protocol.Debugger.DebugSymbols|null,\n      embedderName: Platform.DevToolsPath.UrlString|null) {\n    this.debuggerModel = debuggerModel;\n    this.scriptId = scriptId;\n    this.sourceURL = sourceURL;\n    this.lineOffset = startLine;\n    this.columnOffset = startColumn;\n    this.endLine = endLine;\n    this.endColumn = endColumn;\n    this.isModule = isModule;\n\n    this.executionContextId = executionContextId;\n    this.hash = hash;\n    this.#isContentScriptInternal = isContentScript;\n    this.#isLiveEditInternal = isLiveEdit;\n    this.sourceMapURL = sourceMapURL;\n    this.debugSymbols = debugSymbols;\n    this.hasSourceURL = hasSourceURL;\n    this.contentLength = length;\n    this.#originalContentProviderInternal = null;\n    this.originStackTrace = originStackTrace;\n    this.#codeOffsetInternal = codeOffset;\n    this.#language = scriptLanguage;\n    this.#contentPromise = null;\n    this.#embedderNameInternal = embedderName;\n  }\n\n  embedderName(): Platform.DevToolsPath.UrlString|null {\n    return this.#embedderNameInternal;\n  }\n\n  target(): Target {\n    return this.debuggerModel.target();\n  }\n\n  private static trimSourceURLComment(source: string): string {\n    let sourceURLIndex = source.lastIndexOf('//# sourceURL=');\n    if (sourceURLIndex === -1) {\n      sourceURLIndex = source.lastIndexOf('//@ sourceURL=');\n      if (sourceURLIndex === -1) {\n        return source;\n      }\n    }\n    const sourceURLLineIndex = source.lastIndexOf('\\n', sourceURLIndex);\n    if (sourceURLLineIndex === -1) {\n      return source;\n    }\n    const sourceURLLine = source.substr(sourceURLLineIndex + 1);\n    if (!sourceURLLine.match(sourceURLRegex)) {\n      return source;\n    }\n    return source.substr(0, sourceURLLineIndex);\n  }\n\n  isContentScript(): boolean {\n    return this.#isContentScriptInternal;\n  }\n\n  codeOffset(): number|null {\n    return this.#codeOffsetInternal;\n  }\n\n  isJavaScript(): boolean {\n    return this.#language === Protocol.Debugger.ScriptLanguage.JavaScript;\n  }\n\n  isWasm(): boolean {\n    return this.#language === Protocol.Debugger.ScriptLanguage.WebAssembly;\n  }\n\n  scriptLanguage(): string|null {\n    return this.#language;\n  }\n\n  executionContext(): ExecutionContext|null {\n    return this.debuggerModel.runtimeModel().executionContext(this.executionContextId);\n  }\n\n  isLiveEdit(): boolean {\n    return this.#isLiveEditInternal;\n  }\n\n  contentURL(): Platform.DevToolsPath.UrlString {\n    return this.sourceURL;\n  }\n\n  contentType(): Common.ResourceType.ResourceType {\n    return Common.ResourceType.resourceTypes.Script;\n  }\n\n  async contentEncoded(): Promise<boolean> {\n    return false;\n  }\n\n  requestContent(): Promise<TextUtils.ContentProvider.DeferredContent> {\n    if (!this.#contentPromise) {\n      this.#contentPromise = this.originalContentProvider().requestContent();\n    }\n    return this.#contentPromise;\n  }\n\n  async getWasmBytecode(): Promise<ArrayBuffer> {\n    const base64 = await this.debuggerModel.target().debuggerAgent().invoke_getWasmBytecode({scriptId: this.scriptId});\n    const response = await fetch(`data:application/wasm;base64,${base64.bytecode}`);\n    return response.arrayBuffer();\n  }\n\n  originalContentProvider(): TextUtils.ContentProvider.ContentProvider {\n    if (!this.#originalContentProviderInternal) {\n      let lazyContentPromise: Promise<TextUtils.ContentProvider.DeferredContent>|null;\n      this.#originalContentProviderInternal =\n          new TextUtils.StaticContentProvider.StaticContentProvider(this.contentURL(), this.contentType(), () => {\n            if (!lazyContentPromise) {\n              lazyContentPromise = (async(): Promise<{\n                                      content: null,\n                                      error: Common.UIString.LocalizedString,\n                                      isEncoded: boolean,\n                                    }|{\n                                      content: string,\n                                      isEncoded: boolean,\n                                      error?: undefined,\n                                    }> => {\n                if (!this.scriptId) {\n                  return {content: null, error: i18nString(UIStrings.scriptRemovedOrDeleted), isEncoded: false};\n                }\n                try {\n                  const result = await this.debuggerModel.target().debuggerAgent().invoke_getScriptSource(\n                      {scriptId: this.scriptId});\n                  if (result.getError()) {\n                    throw new Error(result.getError());\n                  }\n                  const {scriptSource, bytecode} = result;\n                  if (bytecode) {\n                    return {content: bytecode, isEncoded: true};\n                  }\n                  let content: string = scriptSource || '';\n                  if (this.hasSourceURL && this.sourceURL.startsWith('snippet://')) {\n                    // TODO(crbug.com/1330846): Find a better way to establish the snippet automapping binding then adding\n                    // a sourceURL comment before evaluation and removing it here.\n                    content = Script.trimSourceURLComment(content);\n                  }\n                  return {content, isEncoded: false};\n\n                } catch (err) {\n                  // TODO(bmeurer): Propagate errors as exceptions / rejections.\n                  return {content: null, error: i18nString(UIStrings.unableToFetchScriptSource), isEncoded: false};\n                }\n              })();\n            }\n            return lazyContentPromise;\n          });\n    }\n    return this.#originalContentProviderInternal;\n  }\n\n  async searchInContent(query: string, caseSensitive: boolean, isRegex: boolean):\n      Promise<TextUtils.ContentProvider.SearchMatch[]> {\n    if (!this.scriptId) {\n      return [];\n    }\n\n    const matches = await this.debuggerModel.target().debuggerAgent().invoke_searchInContent(\n        {scriptId: this.scriptId, query, caseSensitive, isRegex});\n    return (matches.result || [])\n        .map(match => new TextUtils.ContentProvider.SearchMatch(match.lineNumber, match.lineContent));\n  }\n\n  private appendSourceURLCommentIfNeeded(source: string): string {\n    if (!this.hasSourceURL) {\n      return source;\n    }\n    return source + '\\n //# sourceURL=' + this.sourceURL;\n  }\n\n  async editSource(newSource: string): Promise<\n      {status: Protocol.Debugger.SetScriptSourceResponseStatus, exceptionDetails?: Protocol.Runtime.ExceptionDetails}> {\n    newSource = Script.trimSourceURLComment(newSource);\n    // We append correct #sourceURL to script for consistency only. It's not actually needed for things to work correctly.\n    newSource = this.appendSourceURLCommentIfNeeded(newSource);\n\n    const {content: oldSource} = await this.requestContent();\n    if (oldSource === newSource) {\n      return {status: Protocol.Debugger.SetScriptSourceResponseStatus.Ok};\n    }\n    const response = await this.debuggerModel.target().debuggerAgent().invoke_setScriptSource(\n        {scriptId: this.scriptId, scriptSource: newSource, allowTopFrameEditing: true});\n    if (response.getError()) {\n      // Something went seriously wrong, like the V8 inspector no longer knowing about this script without\n      // shutting down the Debugger agent etc.\n      throw new Error(`Script#editSource failed for script with id ${this.scriptId}: ${response.getError()}`);\n    }\n\n    if (!response.getError() && response.status === Protocol.Debugger.SetScriptSourceResponseStatus.Ok) {\n      this.#contentPromise = Promise.resolve({content: newSource, isEncoded: false});\n    }\n\n    return {status: response.status, exceptionDetails: response.exceptionDetails};\n  }\n\n  rawLocation(lineNumber: number, columnNumber: number): Location|null {\n    if (this.containsLocation(lineNumber, columnNumber)) {\n      return new Location(this.debuggerModel, this.scriptId, lineNumber, columnNumber);\n    }\n    return null;\n  }\n\n  toRelativeLocation(location: Location): number[] {\n    console.assert(\n        location.scriptId === this.scriptId, '`toRelativeLocation` must be used with location of the same script');\n    const relativeLineNumber = location.lineNumber - this.lineOffset;\n    const relativeColumnNumber = (location.columnNumber || 0) - (relativeLineNumber === 0 ? this.columnOffset : 0);\n    return [relativeLineNumber, relativeColumnNumber];\n  }\n\n  isInlineScript(): boolean {\n    const startsAtZero = !this.lineOffset && !this.columnOffset;\n    return !this.isWasm() && Boolean(this.sourceURL) && !startsAtZero;\n  }\n\n  isAnonymousScript(): boolean {\n    return !this.sourceURL;\n  }\n\n  async setBlackboxedRanges(positions: Protocol.Debugger.ScriptPosition[]): Promise<boolean> {\n    const response = await this.debuggerModel.target().debuggerAgent().invoke_setBlackboxedRanges(\n        {scriptId: this.scriptId, positions});\n    return !response.getError();\n  }\n\n  containsLocation(lineNumber: number, columnNumber: number): boolean {\n    const afterStart =\n        (lineNumber === this.lineOffset && columnNumber >= this.columnOffset) || lineNumber > this.lineOffset;\n    const beforeEnd = lineNumber < this.endLine || (lineNumber === this.endLine && columnNumber <= this.endColumn);\n    return afterStart && beforeEnd;\n  }\n\n  get frameId(): Protocol.Page.FrameId {\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // @ts-expect-error\n    if (typeof this[frameIdSymbol] !== 'string') {\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n      // @ts-expect-error\n      this[frameIdSymbol] = frameIdForScript(this);\n    }\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // @ts-expect-error\n    return this[frameIdSymbol];\n  }\n\n  createPageResourceLoadInitiator(): PageResourceLoadInitiator {\n    return {target: this.target(), frameId: this.frameId, initiatorUrl: this.embedderName()};\n  }\n}\n\nconst frameIdSymbol = Symbol('frameid');\n\nfunction frameIdForScript(script: Script): Protocol.Page.FrameId|null {\n  const executionContext = script.executionContext();\n  if (executionContext) {\n    return executionContext.frameId || null;\n  }\n  // This is to overcome compilation cache which doesn't get reset.\n  const resourceTreeModel = script.debuggerModel.target().model(ResourceTreeModel);\n  if (!resourceTreeModel || !resourceTreeModel.mainFrame) {\n    return null;\n  }\n  return resourceTreeModel.mainFrame.id;\n}\n\nexport const sourceURLRegex = /^[\\040\\t]*\\/\\/[@#] sourceURL=\\s*(\\S*?)\\s*$/;\n"],
  "mappings": "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",
  "names": []
}
