{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/ChildTargetManager.ts"],
  "sourcesContent": ["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as Host from '../host/host.js';\nimport type * as ProtocolClient from '../protocol_client/protocol_client.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport {ParallelConnection} from './Connections.js';\nimport type {Target} from './Target.js';\nimport {Capability, Type} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\nimport {Events as TargetManagerEvents, TargetManager} from './TargetManager.js';\n\nexport class ChildTargetManager extends SDKModel<EventTypes> implements ProtocolProxyApi.TargetDispatcher {\n  readonly #targetManager: TargetManager;\n  #parentTarget: Target;\n  readonly #targetAgent: ProtocolProxyApi.TargetApi;\n  readonly #targetInfosInternal: Map<Protocol.Target.TargetID, Protocol.Target.TargetInfo> = new Map();\n  readonly #childTargetsBySessionId: Map<Protocol.Target.SessionID, Target> = new Map();\n  readonly #childTargetsById: Map<Protocol.Target.TargetID|'main', Target> = new Map();\n  readonly #parallelConnections: Map<string, ProtocolClient.InspectorBackend.Connection> = new Map();\n  #parentTargetId: Protocol.Target.TargetID|null = null;\n\n  constructor(parentTarget: Target) {\n    super(parentTarget);\n    this.#targetManager = parentTarget.targetManager();\n    this.#parentTarget = parentTarget;\n    this.#targetAgent = parentTarget.targetAgent();\n    parentTarget.registerTargetDispatcher(this);\n    const browserTarget = this.#targetManager.browserTarget();\n    if (browserTarget) {\n      if (browserTarget !== parentTarget) {\n        void browserTarget.targetAgent().invoke_autoAttachRelated(\n            {targetId: parentTarget.id() as Protocol.Target.TargetID, waitForDebuggerOnStart: true});\n      }\n    } else {\n      void this.#targetAgent.invoke_setAutoAttach({autoAttach: true, waitForDebuggerOnStart: true, flatten: true});\n    }\n\n    if (!parentTarget.parentTarget() && !Host.InspectorFrontendHost.isUnderTest()) {\n      void this.#targetAgent.invoke_setDiscoverTargets({discover: true});\n      void this.#targetAgent.invoke_setRemoteLocations({locations: [{host: 'localhost', port: 9229}]});\n    }\n  }\n\n  static install(attachCallback?: ((arg0: {\n                                     target: Target,\n                                     waitingForDebugger: boolean,\n                                   }) => Promise<void>)): void {\n    ChildTargetManager.attachCallback = attachCallback;\n    SDKModel.register(ChildTargetManager, {capabilities: Capability.Target, autostart: true});\n  }\n\n  childTargets(): Target[] {\n    return Array.from(this.#childTargetsBySessionId.values());\n  }\n\n  async suspendModel(): Promise<void> {\n    await this.#targetAgent.invoke_setAutoAttach({autoAttach: true, waitForDebuggerOnStart: false, flatten: true});\n  }\n\n  async resumeModel(): Promise<void> {\n    await this.#targetAgent.invoke_setAutoAttach({autoAttach: true, waitForDebuggerOnStart: true, flatten: true});\n  }\n\n  dispose(): void {\n    for (const sessionId of this.#childTargetsBySessionId.keys()) {\n      this.detachedFromTarget({sessionId, targetId: undefined});\n    }\n  }\n\n  targetCreated({targetInfo}: Protocol.Target.TargetCreatedEvent): void {\n    this.#targetInfosInternal.set(targetInfo.targetId, targetInfo);\n    this.fireAvailableTargetsChanged();\n    this.dispatchEventToListeners(Events.TargetCreated, targetInfo);\n  }\n\n  targetInfoChanged({targetInfo}: Protocol.Target.TargetInfoChangedEvent): void {\n    this.#targetInfosInternal.set(targetInfo.targetId, targetInfo);\n    const target = this.#childTargetsById.get(targetInfo.targetId);\n    if (target) {\n      target.updateTargetInfo(targetInfo);\n    }\n    this.fireAvailableTargetsChanged();\n    this.dispatchEventToListeners(Events.TargetInfoChanged, targetInfo);\n  }\n\n  targetDestroyed({targetId}: Protocol.Target.TargetDestroyedEvent): void {\n    this.#targetInfosInternal.delete(targetId);\n    this.fireAvailableTargetsChanged();\n    this.dispatchEventToListeners(Events.TargetDestroyed, targetId);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  targetCrashed({targetId, status, errorCode}: Protocol.Target.TargetCrashedEvent): void {\n  }\n\n  private fireAvailableTargetsChanged(): void {\n    TargetManager.instance().dispatchEventToListeners(\n        TargetManagerEvents.AvailableTargetsChanged, [...this.#targetInfosInternal.values()]);\n  }\n\n  async getParentTargetId(): Promise<Protocol.Target.TargetID> {\n    if (!this.#parentTargetId) {\n      this.#parentTargetId = (await this.#parentTarget.targetAgent().invoke_getTargetInfo({})).targetInfo.targetId;\n    }\n    return this.#parentTargetId;\n  }\n\n  async attachedToTarget({sessionId, targetInfo, waitingForDebugger}: Protocol.Target.AttachedToTargetEvent):\n      Promise<void> {\n    if (this.#parentTargetId === targetInfo.targetId) {\n      return;\n    }\n    let targetName = '';\n    if (targetInfo.type === 'worker' && targetInfo.title && targetInfo.title !== targetInfo.url) {\n      targetName = targetInfo.title;\n    } else if (targetInfo.type !== 'iframe' && targetInfo.type !== 'webview') {\n      const parsedURL = Common.ParsedURL.ParsedURL.fromString(targetInfo.url);\n      targetName =\n          parsedURL ? parsedURL.lastPathComponentWithFragment() : '#' + (++ChildTargetManager.lastAnonymousTargetId);\n    }\n\n    let type = Type.Browser;\n    if (targetInfo.type === 'iframe' || targetInfo.type === 'webview') {\n      type = Type.Frame;\n    }\n    // TODO(lfg): ensure proper capabilities for child pages (e.g. portals).\n    else if (targetInfo.type === 'page') {\n      type = Type.Frame;\n    } else if (targetInfo.type === 'worker') {\n      type = Type.Worker;\n    } else if (targetInfo.type === 'shared_worker') {\n      type = Type.SharedWorker;\n    } else if (targetInfo.type === 'service_worker') {\n      type = Type.ServiceWorker;\n    } else if (targetInfo.type === 'auction_worklet') {\n      type = Type.AuctionWorklet;\n    }\n    const target = this.#targetManager.createTarget(\n        targetInfo.targetId, targetName, type, this.#parentTarget, sessionId, undefined, undefined, targetInfo);\n    this.#childTargetsBySessionId.set(sessionId, target);\n    this.#childTargetsById.set(target.id(), target);\n\n    if (ChildTargetManager.attachCallback) {\n      await ChildTargetManager.attachCallback({target, waitingForDebugger});\n    }\n    void target.runtimeAgent().invoke_runIfWaitingForDebugger();\n  }\n\n  detachedFromTarget({sessionId}: Protocol.Target.DetachedFromTargetEvent): void {\n    if (this.#parallelConnections.has(sessionId)) {\n      this.#parallelConnections.delete(sessionId);\n    } else {\n      const target = this.#childTargetsBySessionId.get(sessionId);\n      if (target) {\n        target.dispose('target terminated');\n        this.#childTargetsBySessionId.delete(sessionId);\n        this.#childTargetsById.delete(target.id());\n      }\n    }\n  }\n\n  receivedMessageFromTarget({}: Protocol.Target.ReceivedMessageFromTargetEvent): void {\n    // We use flatten protocol.\n  }\n\n  async createParallelConnection(onMessage: (arg0: (Object|string)) => void):\n      Promise<{connection: ProtocolClient.InspectorBackend.Connection, sessionId: string}> {\n    // The main Target id is actually just `main`, instead of the real targetId.\n    // Get the real id (requires an async operation) so that it can be used synchronously later.\n    const targetId = await this.getParentTargetId();\n    const {connection, sessionId} =\n        await this.createParallelConnectionAndSessionForTarget(this.#parentTarget, targetId);\n    connection.setOnMessage(onMessage);\n    this.#parallelConnections.set(sessionId, connection);\n    return {connection, sessionId};\n  }\n\n  private async createParallelConnectionAndSessionForTarget(target: Target, targetId: Protocol.Target.TargetID):\n      Promise<{\n        connection: ProtocolClient.InspectorBackend.Connection,\n        sessionId: string,\n      }> {\n    const targetAgent = target.targetAgent();\n    const targetRouter = (target.router() as ProtocolClient.InspectorBackend.SessionRouter);\n    const sessionId = (await targetAgent.invoke_attachToTarget({targetId, flatten: true})).sessionId;\n    const connection = new ParallelConnection(targetRouter.connection(), sessionId);\n    targetRouter.registerSession(target, sessionId, connection);\n    connection.setOnDisconnect(() => {\n      targetRouter.unregisterSession(sessionId);\n      void targetAgent.invoke_detachFromTarget({sessionId});\n    });\n    return {connection, sessionId};\n  }\n\n  targetInfos(): Protocol.Target.TargetInfo[] {\n    return Array.from(this.#targetInfosInternal.values());\n  }\n\n  private static lastAnonymousTargetId = 0;\n\n  private static attachCallback?: ((arg0: {\n                                     target: Target,\n                                     waitingForDebugger: boolean,\n                                   }) => Promise<void>);\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  TargetCreated = 'TargetCreated',\n  TargetDestroyed = 'TargetDestroyed',\n  TargetInfoChanged = 'TargetInfoChanged',\n}\n\nexport type EventTypes = {\n  [Events.TargetCreated]: Protocol.Target.TargetInfo,\n  [Events.TargetDestroyed]: Protocol.Target.TargetID,\n  [Events.TargetInfoChanged]: Protocol.Target.TargetInfo,\n};\n"],
  "mappings": "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",
  "names": []
}
