{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/OverlayModel.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as i18n from '../i18n/i18n.js';\nimport * as Root from '../root/root.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport {DebuggerModel, Events as DebuggerModelEvents} from './DebuggerModel.js';\nimport type {DOMNode} from './DOMModel.js';\nimport {DeferredDOMNode, DOMModel, Events as DOMModelEvents} from './DOMModel.js';\nimport {OverlayPersistentHighlighter} from './OverlayPersistentHighlighter.js';\nimport type {RemoteObject} from './RemoteObject.js';\nimport type {Target} from './Target.js';\nimport {Capability} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\nimport {TargetManager} from './TargetManager.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Overlay Model\n  */\n  pausedInDebugger: 'Paused in debugger',\n};\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/OverlayModel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface HighlightColor {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\nexport interface HighlightRect {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  color: HighlightColor;\n  outlineColor: HighlightColor;\n}\nexport interface Hinge {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n  contentColor: HighlightColor;\n  outlineColor: HighlightColor;\n}\n\nexport class OverlayModel extends SDKModel<EventTypes> implements ProtocolProxyApi.OverlayDispatcher {\n  readonly #domModel: DOMModel;\n  overlayAgent: ProtocolProxyApi.OverlayApi;\n  readonly #debuggerModel: DebuggerModel|null;\n  #inspectModeEnabledInternal: boolean;\n  #hideHighlightTimeout: number|null;\n  #defaultHighlighter: Highlighter;\n  #highlighter: Highlighter;\n  #showPaintRectsSetting: Common.Settings.Setting<boolean>;\n  #showLayoutShiftRegionsSetting: Common.Settings.Setting<boolean>;\n  #showAdHighlightsSetting: Common.Settings.Setting<boolean>;\n  #showDebugBordersSetting: Common.Settings.Setting<boolean>;\n  #showFPSCounterSetting: Common.Settings.Setting<boolean>;\n  #showScrollBottleneckRectsSetting: Common.Settings.Setting<boolean>;\n  #showWebVitalsSetting: Common.Settings.Setting<boolean>;\n  #registeredListeners: Common.EventTarget.EventDescriptor[];\n  #showViewportSizeOnResize: boolean;\n  #persistentHighlighter: OverlayPersistentHighlighter|null;\n  readonly #sourceOrderHighlighter: SourceOrderHighlighter;\n  #sourceOrderModeActiveInternal: boolean;\n\n  constructor(target: Target) {\n    super(target);\n    this.#domModel = (target.model(DOMModel) as DOMModel);\n\n    target.registerOverlayDispatcher(this);\n    this.overlayAgent = target.overlayAgent();\n\n    this.#debuggerModel = target.model(DebuggerModel);\n    if (this.#debuggerModel) {\n      Common.Settings.Settings.instance()\n          .moduleSetting('disablePausedStateOverlay')\n          .addChangeListener(this.updatePausedInDebuggerMessage, this);\n      this.#debuggerModel.addEventListener(\n          DebuggerModelEvents.DebuggerPaused, this.updatePausedInDebuggerMessage, this);\n      this.#debuggerModel.addEventListener(\n          DebuggerModelEvents.DebuggerResumed, this.updatePausedInDebuggerMessage, this);\n      // TODO(dgozman): we should get DebuggerResumed on navigations instead of listening to GlobalObjectCleared.\n      this.#debuggerModel.addEventListener(\n          DebuggerModelEvents.GlobalObjectCleared, this.updatePausedInDebuggerMessage, this);\n    }\n\n    this.#inspectModeEnabledInternal = false;\n\n    this.#hideHighlightTimeout = null;\n    this.#defaultHighlighter = new DefaultHighlighter(this);\n    this.#highlighter = this.#defaultHighlighter;\n\n    this.#showPaintRectsSetting = Common.Settings.Settings.instance().moduleSetting<boolean>('showPaintRects');\n    this.#showLayoutShiftRegionsSetting =\n        Common.Settings.Settings.instance().moduleSetting<boolean>('showLayoutShiftRegions');\n    this.#showAdHighlightsSetting = Common.Settings.Settings.instance().moduleSetting<boolean>('showAdHighlights');\n    this.#showDebugBordersSetting = Common.Settings.Settings.instance().moduleSetting<boolean>('showDebugBorders');\n    this.#showFPSCounterSetting = Common.Settings.Settings.instance().moduleSetting<boolean>('showFPSCounter');\n    this.#showScrollBottleneckRectsSetting =\n        Common.Settings.Settings.instance().moduleSetting<boolean>('showScrollBottleneckRects');\n    this.#showWebVitalsSetting = Common.Settings.Settings.instance().moduleSetting<boolean>('showWebVitals');\n\n    this.#registeredListeners = [];\n    this.#showViewportSizeOnResize = true;\n    if (!target.suspended()) {\n      void this.overlayAgent.invoke_enable();\n      void this.wireAgentToSettings();\n    }\n\n    this.#persistentHighlighter = new OverlayPersistentHighlighter(this);\n    this.#domModel.addEventListener(DOMModelEvents.NodeRemoved, () => {\n      this.#persistentHighlighter && this.#persistentHighlighter.refreshHighlights();\n    });\n    this.#domModel.addEventListener(DOMModelEvents.DocumentUpdated, () => {\n      this.#persistentHighlighter && this.#persistentHighlighter.hideAllInOverlay();\n    });\n\n    this.#sourceOrderHighlighter = new SourceOrderHighlighter(this);\n    this.#sourceOrderModeActiveInternal = false;\n  }\n\n  static highlightObjectAsDOMNode(object: RemoteObject): void {\n    const domModel = object.runtimeModel().target().model(DOMModel);\n    if (domModel) {\n      domModel.overlayModel().highlightInOverlay({object, selectorList: undefined});\n    }\n  }\n\n  static hideDOMNodeHighlight(): void {\n    for (const overlayModel of TargetManager.instance().models(OverlayModel)) {\n      overlayModel.delayedHideHighlight(0);\n    }\n  }\n\n  static async muteHighlight(): Promise<void[]> {\n    return Promise.all(TargetManager.instance().models(OverlayModel).map(model => model.suspendModel()));\n  }\n\n  static async unmuteHighlight(): Promise<void[]> {\n    return Promise.all(TargetManager.instance().models(OverlayModel).map(model => model.resumeModel()));\n  }\n\n  static highlightRect(rect: HighlightRect): void {\n    for (const overlayModel of TargetManager.instance().models(OverlayModel)) {\n      void overlayModel.highlightRect(rect);\n    }\n  }\n\n  static clearHighlight(): void {\n    for (const overlayModel of TargetManager.instance().models(OverlayModel)) {\n      void overlayModel.clearHighlight();\n    }\n  }\n\n  getDOMModel(): DOMModel {\n    return this.#domModel;\n  }\n\n  highlightRect({x, y, width, height, color, outlineColor}: HighlightRect):\n      Promise<Protocol.ProtocolResponseWithError> {\n    const highlightColor = color || {r: 255, g: 0, b: 255, a: 0.3};\n    const highlightOutlineColor = outlineColor || {r: 255, g: 0, b: 255, a: 0.5};\n    return this.overlayAgent.invoke_highlightRect(\n        {x, y, width, height, color: highlightColor, outlineColor: highlightOutlineColor});\n  }\n\n  clearHighlight(): Promise<Protocol.ProtocolResponseWithError> {\n    return this.overlayAgent.invoke_hideHighlight();\n  }\n\n  private async wireAgentToSettings(): Promise<void> {\n    this.#registeredListeners = [\n      this.#showPaintRectsSetting.addChangeListener(\n          () => this.overlayAgent.invoke_setShowPaintRects({result: this.#showPaintRectsSetting.get()})),\n      this.#showLayoutShiftRegionsSetting.addChangeListener(\n          () =>\n              this.overlayAgent.invoke_setShowLayoutShiftRegions({result: this.#showLayoutShiftRegionsSetting.get()})),\n      this.#showAdHighlightsSetting.addChangeListener(\n          () => this.overlayAgent.invoke_setShowAdHighlights({show: this.#showAdHighlightsSetting.get()})),\n      this.#showDebugBordersSetting.addChangeListener(\n          () => this.overlayAgent.invoke_setShowDebugBorders({show: this.#showDebugBordersSetting.get()})),\n      this.#showFPSCounterSetting.addChangeListener(\n          () => this.overlayAgent.invoke_setShowFPSCounter({show: this.#showFPSCounterSetting.get()})),\n      this.#showScrollBottleneckRectsSetting.addChangeListener(\n          () => this.overlayAgent.invoke_setShowScrollBottleneckRects(\n              {show: this.#showScrollBottleneckRectsSetting.get()})),\n      this.#showWebVitalsSetting.addChangeListener(\n          () => this.overlayAgent.invoke_setShowWebVitals({show: this.#showWebVitalsSetting.get()})),\n    ];\n\n    if (this.#showPaintRectsSetting.get()) {\n      void this.overlayAgent.invoke_setShowPaintRects({result: true});\n    }\n    if (this.#showLayoutShiftRegionsSetting.get()) {\n      void this.overlayAgent.invoke_setShowLayoutShiftRegions({result: true});\n    }\n    if (this.#showAdHighlightsSetting.get()) {\n      void this.overlayAgent.invoke_setShowAdHighlights({show: true});\n    }\n    if (this.#showDebugBordersSetting.get()) {\n      void this.overlayAgent.invoke_setShowDebugBorders({show: true});\n    }\n    if (this.#showFPSCounterSetting.get()) {\n      void this.overlayAgent.invoke_setShowFPSCounter({show: true});\n    }\n    if (this.#showScrollBottleneckRectsSetting.get()) {\n      void this.overlayAgent.invoke_setShowScrollBottleneckRects({show: true});\n    }\n    if (this.#showWebVitalsSetting.get()) {\n      void this.overlayAgent.invoke_setShowWebVitals({show: true});\n    }\n    if (this.#debuggerModel && this.#debuggerModel.isPaused()) {\n      this.updatePausedInDebuggerMessage();\n    }\n    await this.overlayAgent.invoke_setShowViewportSizeOnResize({show: this.#showViewportSizeOnResize});\n  }\n\n  async suspendModel(): Promise<void> {\n    Common.EventTarget.removeEventListeners(this.#registeredListeners);\n    await this.overlayAgent.invoke_disable();\n  }\n\n  async resumeModel(): Promise<void> {\n    await Promise.all([this.overlayAgent.invoke_enable(), this.wireAgentToSettings()]);\n  }\n\n  setShowViewportSizeOnResize(show: boolean): void {\n    if (this.#showViewportSizeOnResize === show) {\n      return;\n    }\n\n    this.#showViewportSizeOnResize = show;\n    if (this.target().suspended()) {\n      return;\n    }\n    void this.overlayAgent.invoke_setShowViewportSizeOnResize({show});\n  }\n\n  private updatePausedInDebuggerMessage(): void {\n    if (this.target().suspended()) {\n      return;\n    }\n    const message = this.#debuggerModel && this.#debuggerModel.isPaused() &&\n            !Common.Settings.Settings.instance().moduleSetting('disablePausedStateOverlay').get() ?\n        i18nString(UIStrings.pausedInDebugger) :\n        undefined;\n    void this.overlayAgent.invoke_setPausedInDebuggerMessage({message});\n  }\n\n  setHighlighter(highlighter: Highlighter|null): void {\n    this.#highlighter = highlighter || this.#defaultHighlighter;\n  }\n\n  async setInspectMode(mode: Protocol.Overlay.InspectMode, showDetailedTooltip: boolean|undefined = true):\n      Promise<void> {\n    await this.#domModel.requestDocument();\n    this.#inspectModeEnabledInternal = mode !== Protocol.Overlay.InspectMode.None;\n    this.dispatchEventToListeners(Events.InspectModeWillBeToggled, this);\n    void this.#highlighter.setInspectMode(mode, this.buildHighlightConfig('all', showDetailedTooltip));\n  }\n\n  inspectModeEnabled(): boolean {\n    return this.#inspectModeEnabledInternal;\n  }\n\n  highlightInOverlay(data: HighlightData, mode?: string, showInfo?: boolean): void {\n    if (this.#sourceOrderModeActiveInternal) {\n      // Return early if the source order is currently being shown the in the\n      // overlay, so that it is not cleared by the highlight\n      return;\n    }\n    if (this.#hideHighlightTimeout) {\n      clearTimeout(this.#hideHighlightTimeout);\n      this.#hideHighlightTimeout = null;\n    }\n    const highlightConfig = this.buildHighlightConfig(mode);\n    if (typeof showInfo !== 'undefined') {\n      highlightConfig.showInfo = showInfo;\n    }\n    this.#highlighter.highlightInOverlay(data, highlightConfig);\n  }\n\n  highlightInOverlayForTwoSeconds(data: HighlightData): void {\n    this.highlightInOverlay(data);\n    this.delayedHideHighlight(2000);\n  }\n\n  highlightGridInPersistentOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (!this.#persistentHighlighter) {\n      return;\n    }\n    this.#persistentHighlighter.highlightGridInOverlay(nodeId);\n    this.dispatchEventToListeners(Events.PersistentGridOverlayStateChanged, {nodeId, enabled: true});\n  }\n\n  isHighlightedGridInPersistentOverlay(nodeId: Protocol.DOM.NodeId): boolean {\n    if (!this.#persistentHighlighter) {\n      return false;\n    }\n    return this.#persistentHighlighter.isGridHighlighted(nodeId);\n  }\n\n  hideGridInPersistentOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (!this.#persistentHighlighter) {\n      return;\n    }\n    this.#persistentHighlighter.hideGridInOverlay(nodeId);\n    this.dispatchEventToListeners(Events.PersistentGridOverlayStateChanged, {nodeId, enabled: false});\n  }\n\n  highlightScrollSnapInPersistentOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (!this.#persistentHighlighter) {\n      return;\n    }\n    this.#persistentHighlighter.highlightScrollSnapInOverlay(nodeId);\n    this.dispatchEventToListeners(Events.PersistentScrollSnapOverlayStateChanged, {nodeId, enabled: true});\n  }\n\n  isHighlightedScrollSnapInPersistentOverlay(nodeId: Protocol.DOM.NodeId): boolean {\n    if (!this.#persistentHighlighter) {\n      return false;\n    }\n    return this.#persistentHighlighter.isScrollSnapHighlighted(nodeId);\n  }\n\n  hideScrollSnapInPersistentOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (!this.#persistentHighlighter) {\n      return;\n    }\n    this.#persistentHighlighter.hideScrollSnapInOverlay(nodeId);\n    this.dispatchEventToListeners(Events.PersistentScrollSnapOverlayStateChanged, {nodeId, enabled: false});\n  }\n\n  highlightFlexContainerInPersistentOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (!this.#persistentHighlighter) {\n      return;\n    }\n    this.#persistentHighlighter.highlightFlexInOverlay(nodeId);\n    this.dispatchEventToListeners(Events.PersistentFlexContainerOverlayStateChanged, {nodeId, enabled: true});\n  }\n\n  isHighlightedFlexContainerInPersistentOverlay(nodeId: Protocol.DOM.NodeId): boolean {\n    if (!this.#persistentHighlighter) {\n      return false;\n    }\n    return this.#persistentHighlighter.isFlexHighlighted(nodeId);\n  }\n\n  hideFlexContainerInPersistentOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (!this.#persistentHighlighter) {\n      return;\n    }\n    this.#persistentHighlighter.hideFlexInOverlay(nodeId);\n    this.dispatchEventToListeners(Events.PersistentFlexContainerOverlayStateChanged, {nodeId, enabled: false});\n  }\n\n  highlightContainerQueryInPersistentOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (!this.#persistentHighlighter) {\n      return;\n    }\n    this.#persistentHighlighter.highlightContainerQueryInOverlay(nodeId);\n    this.dispatchEventToListeners(Events.PersistentContainerQueryOverlayStateChanged, {nodeId, enabled: true});\n  }\n\n  isHighlightedContainerQueryInPersistentOverlay(nodeId: Protocol.DOM.NodeId): boolean {\n    if (!this.#persistentHighlighter) {\n      return false;\n    }\n    return this.#persistentHighlighter.isContainerQueryHighlighted(nodeId);\n  }\n\n  hideContainerQueryInPersistentOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (!this.#persistentHighlighter) {\n      return;\n    }\n    this.#persistentHighlighter.hideContainerQueryInOverlay(nodeId);\n    this.dispatchEventToListeners(Events.PersistentContainerQueryOverlayStateChanged, {nodeId, enabled: false});\n  }\n\n  highlightSourceOrderInOverlay(node: DOMNode): void {\n    const sourceOrderConfig = {\n      parentOutlineColor: Common.Color.SourceOrderHighlight.ParentOutline.toProtocolRGBA(),\n      childOutlineColor: Common.Color.SourceOrderHighlight.ChildOutline.toProtocolRGBA(),\n    };\n    this.#sourceOrderHighlighter.highlightSourceOrderInOverlay(node, sourceOrderConfig);\n  }\n\n  colorOfGridInPersistentOverlay(nodeId: Protocol.DOM.NodeId): string|null {\n    if (!this.#persistentHighlighter) {\n      return null;\n    }\n    return this.#persistentHighlighter.colorOfGrid(nodeId).asString(Common.Color.Format.HEX);\n  }\n\n  setColorOfGridInPersistentOverlay(nodeId: Protocol.DOM.NodeId, colorStr: string): void {\n    if (!this.#persistentHighlighter) {\n      return;\n    }\n    const color = Common.Color.Color.parse(colorStr);\n    if (!color) {\n      return;\n    }\n    this.#persistentHighlighter.setColorOfGrid(nodeId, color);\n    this.#persistentHighlighter.resetOverlay();\n  }\n\n  colorOfFlexInPersistentOverlay(nodeId: Protocol.DOM.NodeId): string|null {\n    if (!this.#persistentHighlighter) {\n      return null;\n    }\n    return this.#persistentHighlighter.colorOfFlex(nodeId).asString(Common.Color.Format.HEX);\n  }\n\n  setColorOfFlexInPersistentOverlay(nodeId: Protocol.DOM.NodeId, colorStr: string): void {\n    if (!this.#persistentHighlighter) {\n      return;\n    }\n    const color = Common.Color.Color.parse(colorStr);\n    if (!color) {\n      return;\n    }\n    this.#persistentHighlighter.setColorOfFlex(nodeId, color);\n    this.#persistentHighlighter.resetOverlay();\n  }\n\n  hideSourceOrderInOverlay(): void {\n    this.#sourceOrderHighlighter.hideSourceOrderHighlight();\n  }\n\n  setSourceOrderActive(isActive: boolean): void {\n    this.#sourceOrderModeActiveInternal = isActive;\n  }\n\n  sourceOrderModeActive(): boolean {\n    return this.#sourceOrderModeActiveInternal;\n  }\n\n  highlightIsolatedElementInPersistentOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (!this.#persistentHighlighter) {\n      return;\n    }\n    this.#persistentHighlighter.highlightIsolatedElementInOverlay(nodeId);\n  }\n\n  hideIsolatedElementInPersistentOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (!this.#persistentHighlighter) {\n      return;\n    }\n    this.#persistentHighlighter.hideIsolatedElementInOverlay(nodeId);\n  }\n\n  isHighlightedIsolatedElementInPersistentOverlay(nodeId: Protocol.DOM.NodeId): boolean {\n    if (!this.#persistentHighlighter) {\n      return false;\n    }\n    return this.#persistentHighlighter.isIsolatedElementHighlighted(nodeId);\n  }\n\n  private delayedHideHighlight(delay: number): void {\n    if (this.#hideHighlightTimeout === null) {\n      this.#hideHighlightTimeout = window.setTimeout(() => this.highlightInOverlay({clear: true}), delay);\n    }\n  }\n\n  highlightFrame(frameId: Protocol.Page.FrameId): void {\n    if (this.#hideHighlightTimeout) {\n      clearTimeout(this.#hideHighlightTimeout);\n      this.#hideHighlightTimeout = null;\n    }\n    this.#highlighter.highlightFrame(frameId);\n  }\n\n  showHingeForDualScreen(hinge: Hinge|null): void {\n    if (hinge) {\n      const {x, y, width, height, contentColor, outlineColor} = hinge;\n      void this.overlayAgent.invoke_setShowHinge({\n        hingeConfig:\n            {rect: {x: x, y: y, width: width, height: height}, contentColor: contentColor, outlineColor: outlineColor},\n      });\n    } else {\n      void this.overlayAgent.invoke_setShowHinge({});\n    }\n  }\n\n  private buildHighlightConfig(mode: string|undefined = 'all', showDetailedToolip: boolean|undefined = false):\n      Protocol.Overlay.HighlightConfig {\n    const showRulers = Common.Settings.Settings.instance().moduleSetting('showMetricsRulers').get();\n    const colorFormat = Common.Settings.Settings.instance().moduleSetting('colorFormat').get();\n\n    const highlightConfig: Protocol.Overlay.HighlightConfig = {\n      showInfo: mode === 'all' || mode === 'container-outline',\n      showRulers: showRulers,\n      showStyles: showDetailedToolip,\n      showAccessibilityInfo: showDetailedToolip,\n      showExtensionLines: showRulers,\n      gridHighlightConfig: {},\n      flexContainerHighlightConfig: {},\n      flexItemHighlightConfig: {},\n      contrastAlgorithm: Root.Runtime.experiments.isEnabled('APCA') ? Protocol.Overlay.ContrastAlgorithm.Apca :\n                                                                      Protocol.Overlay.ContrastAlgorithm.Aa,\n    };\n\n    if (mode === 'all' || mode === 'content') {\n      highlightConfig.contentColor = Common.Color.PageHighlight.Content.toProtocolRGBA();\n    }\n\n    if (mode === 'all' || mode === 'padding') {\n      highlightConfig.paddingColor = Common.Color.PageHighlight.Padding.toProtocolRGBA();\n    }\n\n    if (mode === 'all' || mode === 'border') {\n      highlightConfig.borderColor = Common.Color.PageHighlight.Border.toProtocolRGBA();\n    }\n\n    if (mode === 'all' || mode === 'margin') {\n      highlightConfig.marginColor = Common.Color.PageHighlight.Margin.toProtocolRGBA();\n    }\n\n    if (mode === 'all') {\n      highlightConfig.eventTargetColor = Common.Color.PageHighlight.EventTarget.toProtocolRGBA();\n      highlightConfig.shapeColor = Common.Color.PageHighlight.Shape.toProtocolRGBA();\n      highlightConfig.shapeMarginColor = Common.Color.PageHighlight.ShapeMargin.toProtocolRGBA();\n\n      highlightConfig.gridHighlightConfig = {\n        rowGapColor: Common.Color.PageHighlight.GapBackground.toProtocolRGBA(),\n        rowHatchColor: Common.Color.PageHighlight.GapHatch.toProtocolRGBA(),\n        columnGapColor: Common.Color.PageHighlight.GapBackground.toProtocolRGBA(),\n        columnHatchColor: Common.Color.PageHighlight.GapHatch.toProtocolRGBA(),\n        rowLineColor: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n        columnLineColor: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n        rowLineDash: true,\n        columnLineDash: true,\n      };\n\n      highlightConfig.flexContainerHighlightConfig = {\n        containerBorder: {\n          color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n          pattern: Protocol.Overlay.LineStylePattern.Dashed,\n        },\n        itemSeparator: {\n          color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n          pattern: Protocol.Overlay.LineStylePattern.Dotted,\n        },\n        lineSeparator: {\n          color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n          pattern: Protocol.Overlay.LineStylePattern.Dashed,\n        },\n        mainDistributedSpace: {\n          hatchColor: Common.Color.PageHighlight.GapHatch.toProtocolRGBA(),\n          fillColor: Common.Color.PageHighlight.GapBackground.toProtocolRGBA(),\n        },\n        crossDistributedSpace: {\n          hatchColor: Common.Color.PageHighlight.GapHatch.toProtocolRGBA(),\n          fillColor: Common.Color.PageHighlight.GapBackground.toProtocolRGBA(),\n        },\n        rowGapSpace: {\n          hatchColor: Common.Color.PageHighlight.GapHatch.toProtocolRGBA(),\n          fillColor: Common.Color.PageHighlight.GapBackground.toProtocolRGBA(),\n        },\n        columnGapSpace: {\n          hatchColor: Common.Color.PageHighlight.GapHatch.toProtocolRGBA(),\n          fillColor: Common.Color.PageHighlight.GapBackground.toProtocolRGBA(),\n        },\n      };\n\n      highlightConfig.flexItemHighlightConfig = {\n        baseSizeBox: {\n          hatchColor: Common.Color.PageHighlight.GapHatch.toProtocolRGBA(),\n        },\n        baseSizeBorder: {\n          color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n          pattern: Protocol.Overlay.LineStylePattern.Dotted,\n        },\n        flexibilityArrow: {\n          color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n        },\n      };\n    }\n\n    if (mode.endsWith('gap')) {\n      highlightConfig.gridHighlightConfig = {\n        gridBorderColor: Common.Color.PageHighlight.GridBorder.toProtocolRGBA(),\n        gridBorderDash: true,\n      };\n\n      if (mode === 'gap' || mode === 'row-gap') {\n        highlightConfig.gridHighlightConfig.rowGapColor = Common.Color.PageHighlight.GapBackground.toProtocolRGBA();\n        highlightConfig.gridHighlightConfig.rowHatchColor = Common.Color.PageHighlight.GapHatch.toProtocolRGBA();\n      }\n      if (mode === 'gap' || mode === 'column-gap') {\n        highlightConfig.gridHighlightConfig.columnGapColor = Common.Color.PageHighlight.GapBackground.toProtocolRGBA();\n        highlightConfig.gridHighlightConfig.columnHatchColor = Common.Color.PageHighlight.GapHatch.toProtocolRGBA();\n      }\n    }\n\n    if (mode.endsWith('gap')) {\n      highlightConfig.flexContainerHighlightConfig = {\n        containerBorder: {\n          color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n          pattern: Protocol.Overlay.LineStylePattern.Dashed,\n        },\n      };\n\n      if (mode === 'gap' || mode === 'row-gap') {\n        highlightConfig.flexContainerHighlightConfig.rowGapSpace = {\n          hatchColor: Common.Color.PageHighlight.GapHatch.toProtocolRGBA(),\n          fillColor: Common.Color.PageHighlight.GapBackground.toProtocolRGBA(),\n        };\n      }\n      if (mode === 'gap' || mode === 'column-gap') {\n        highlightConfig.flexContainerHighlightConfig.columnGapSpace = {\n          hatchColor: Common.Color.PageHighlight.GapHatch.toProtocolRGBA(),\n          fillColor: Common.Color.PageHighlight.GapBackground.toProtocolRGBA(),\n        };\n      }\n    }\n\n    if (mode === 'grid-areas') {\n      highlightConfig.gridHighlightConfig = {\n        rowLineColor: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n        columnLineColor: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n        rowLineDash: true,\n        columnLineDash: true,\n        showAreaNames: true,\n        areaBorderColor: Common.Color.PageHighlight.GridAreaBorder.toProtocolRGBA(),\n      };\n    }\n\n    if (mode === 'grid-template-columns') {\n      highlightConfig.contentColor = Common.Color.PageHighlight.Content.toProtocolRGBA();\n      highlightConfig.gridHighlightConfig = {\n        columnLineColor: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n        columnLineDash: true,\n      };\n    }\n\n    if (mode === 'grid-template-rows') {\n      highlightConfig.contentColor = Common.Color.PageHighlight.Content.toProtocolRGBA();\n      highlightConfig.gridHighlightConfig = {\n        rowLineColor: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n        rowLineDash: true,\n      };\n    }\n\n    if (mode === 'justify-content') {\n      highlightConfig.flexContainerHighlightConfig = {\n        containerBorder: {\n          color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n          pattern: Protocol.Overlay.LineStylePattern.Dashed,\n        },\n        mainDistributedSpace: {\n          hatchColor: Common.Color.PageHighlight.GapHatch.toProtocolRGBA(),\n          fillColor: Common.Color.PageHighlight.GapBackground.toProtocolRGBA(),\n        },\n      };\n    }\n\n    if (mode === 'align-content') {\n      highlightConfig.flexContainerHighlightConfig = {\n        containerBorder: {\n          color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n          pattern: Protocol.Overlay.LineStylePattern.Dashed,\n        },\n        crossDistributedSpace: {\n          hatchColor: Common.Color.PageHighlight.GapHatch.toProtocolRGBA(),\n          fillColor: Common.Color.PageHighlight.GapBackground.toProtocolRGBA(),\n        },\n      };\n    }\n\n    if (mode === 'align-items') {\n      highlightConfig.flexContainerHighlightConfig = {\n        containerBorder: {\n          color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n          pattern: Protocol.Overlay.LineStylePattern.Dashed,\n        },\n        lineSeparator: {\n          color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n          pattern: Protocol.Overlay.LineStylePattern.Dashed,\n        },\n        crossAlignment: {color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA()},\n      };\n    }\n\n    if (mode === 'flexibility') {\n      highlightConfig.flexItemHighlightConfig = {\n        baseSizeBox: {\n          hatchColor: Common.Color.PageHighlight.GapHatch.toProtocolRGBA(),\n        },\n        baseSizeBorder: {\n          color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n          pattern: Protocol.Overlay.LineStylePattern.Dotted,\n        },\n        flexibilityArrow: {\n          color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n        },\n      };\n    }\n\n    if (mode === 'container-outline') {\n      highlightConfig.containerQueryContainerHighlightConfig = {\n        containerBorder: {\n          color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n          pattern: Protocol.Overlay.LineStylePattern.Dashed,\n        },\n      };\n    }\n\n    // the backend does not support the 'original' format because\n    // it currently cannot retrieve the original format using computed styles\n    const supportedColorFormats = new Set(['rgb', 'hsl', 'hex']);\n    if (supportedColorFormats.has(colorFormat)) {\n      highlightConfig.colorFormat = colorFormat;\n    }\n\n    return highlightConfig;\n  }\n\n  nodeHighlightRequested({nodeId}: Protocol.Overlay.NodeHighlightRequestedEvent): void {\n    const node = this.#domModel.nodeForId(nodeId);\n    if (node) {\n      this.dispatchEventToListeners(Events.HighlightNodeRequested, node);\n    }\n  }\n\n  static setInspectNodeHandler(handler: (arg0: DOMNode) => void): void {\n    OverlayModel.inspectNodeHandler = handler;\n  }\n\n  inspectNodeRequested({backendNodeId}: Protocol.Overlay.InspectNodeRequestedEvent): void {\n    const deferredNode = new DeferredDOMNode(this.target(), backendNodeId);\n    if (OverlayModel.inspectNodeHandler) {\n      void deferredNode.resolvePromise().then(node => {\n        if (node && OverlayModel.inspectNodeHandler) {\n          OverlayModel.inspectNodeHandler(node);\n        }\n      });\n    } else {\n      void Common.Revealer.reveal(deferredNode);\n    }\n    this.dispatchEventToListeners(Events.ExitedInspectMode);\n  }\n\n  screenshotRequested({viewport}: Protocol.Overlay.ScreenshotRequestedEvent): void {\n    this.dispatchEventToListeners(Events.ScreenshotRequested, viewport);\n    this.dispatchEventToListeners(Events.ExitedInspectMode);\n  }\n\n  inspectModeCanceled(): void {\n    this.dispatchEventToListeners(Events.ExitedInspectMode);\n  }\n\n  static inspectNodeHandler: ((node: DOMNode) => void)|null = null;\n\n  getOverlayAgent(): ProtocolProxyApi.OverlayApi {\n    return this.overlayAgent;\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  InspectModeWillBeToggled = 'InspectModeWillBeToggled',\n  ExitedInspectMode = 'InspectModeExited',\n  HighlightNodeRequested = 'HighlightNodeRequested',\n  ScreenshotRequested = 'ScreenshotRequested',\n  PersistentGridOverlayStateChanged = 'PersistentGridOverlayStateChanged',\n  PersistentFlexContainerOverlayStateChanged = 'PersistentFlexContainerOverlayStateChanged',\n  PersistentScrollSnapOverlayStateChanged = 'PersistentScrollSnapOverlayStateChanged',\n  PersistentContainerQueryOverlayStateChanged = 'PersistentContainerQueryOverlayStateChanged',\n}\n\nexport interface ChangedNodeId {\n  nodeId: number;\n  enabled: boolean;\n}\n\nexport type EventTypes = {\n  [Events.InspectModeWillBeToggled]: OverlayModel,\n  [Events.ExitedInspectMode]: void,\n  [Events.HighlightNodeRequested]: DOMNode,\n  [Events.ScreenshotRequested]: Protocol.Page.Viewport,\n  [Events.PersistentGridOverlayStateChanged]: ChangedNodeId,\n  [Events.PersistentFlexContainerOverlayStateChanged]: ChangedNodeId,\n  [Events.PersistentScrollSnapOverlayStateChanged]: ChangedNodeId,\n  [Events.PersistentContainerQueryOverlayStateChanged]: ChangedNodeId,\n};\n\nexport interface Highlighter {\n  highlightInOverlay(data: HighlightData, config: Protocol.Overlay.HighlightConfig): void;\n\n  setInspectMode(mode: Protocol.Overlay.InspectMode, config: Protocol.Overlay.HighlightConfig): Promise<void>;\n\n  highlightFrame(frameId: Protocol.Page.FrameId): void;\n}\n\nclass DefaultHighlighter implements Highlighter {\n  readonly #model: OverlayModel;\n  constructor(model: OverlayModel) {\n    this.#model = model;\n  }\n\n  highlightInOverlay(data: HighlightData, highlightConfig: Protocol.Overlay.HighlightConfig): void {\n    const {node, deferredNode, object, selectorList} =\n        {node: undefined, deferredNode: undefined, object: undefined, selectorList: undefined, ...data};\n    const nodeId = node ? node.id : undefined;\n    const backendNodeId = deferredNode ? deferredNode.backendNodeId() : undefined;\n    const objectId = object ? object.objectId : undefined;\n    if (nodeId || backendNodeId || objectId) {\n      void this.#model.target().overlayAgent().invoke_highlightNode(\n          {highlightConfig, nodeId, backendNodeId, objectId, selector: selectorList});\n    } else {\n      void this.#model.target().overlayAgent().invoke_hideHighlight();\n    }\n  }\n\n  async setInspectMode(mode: Protocol.Overlay.InspectMode, highlightConfig: Protocol.Overlay.HighlightConfig):\n      Promise<void> {\n    await this.#model.target().overlayAgent().invoke_setInspectMode({mode, highlightConfig});\n  }\n\n  highlightFrame(frameId: Protocol.Page.FrameId): void {\n    void this.#model.target().overlayAgent().invoke_highlightFrame({\n      frameId,\n      contentColor: Common.Color.PageHighlight.Content.toProtocolRGBA(),\n      contentOutlineColor: Common.Color.PageHighlight.ContentOutline.toProtocolRGBA(),\n    });\n  }\n}\n\nexport class SourceOrderHighlighter {\n  readonly #model: OverlayModel;\n  constructor(model: OverlayModel) {\n    this.#model = model;\n  }\n\n  highlightSourceOrderInOverlay(node: DOMNode, sourceOrderConfig: Protocol.Overlay.SourceOrderConfig): void {\n    this.#model.setSourceOrderActive(true);\n    this.#model.setShowViewportSizeOnResize(false);\n    void this.#model.getOverlayAgent().invoke_highlightSourceOrder({sourceOrderConfig, nodeId: node.id});\n  }\n\n  hideSourceOrderHighlight(): void {\n    this.#model.setSourceOrderActive(false);\n    this.#model.setShowViewportSizeOnResize(true);\n    void this.#model.clearHighlight();\n  }\n}\n\nSDKModel.register(OverlayModel, {capabilities: Capability.DOM, autostart: true});\n\nexport interface HighlightNodeData {\n  node: DOMNode;\n  selectorList?: string;\n}\n\nexport interface HighlightDeferredNode {\n  deferredNode: DeferredDOMNode;\n}\n\nexport interface HighlightObjectData {\n  object: RemoteObject;\n  selectorList?: string;\n}\n\nexport type HighlightData = HighlightNodeData|HighlightDeferredNode|HighlightObjectData|{clear: boolean};\n"],
  "mappings": "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",
  "names": []
}
