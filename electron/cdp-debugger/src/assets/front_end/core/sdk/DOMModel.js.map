{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/DOMModel.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2009, 2010 Google Inc. All rights reserved.\n * Copyright (C) 2009 Joseph Pecoraro\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the #name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../common/common.js';\nimport * as Host from '../host/host.js';\nimport * as Platform from '../platform/platform.js';\nimport * as Root from '../root/root.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport {CSSModel} from './CSSModel.js';\nimport {FrameManager} from './FrameManager.js';\nimport {OverlayModel} from './OverlayModel.js';\nimport type {RemoteObject} from './RemoteObject.js';\nimport {RuntimeModel} from './RuntimeModel.js';\nimport type {Target} from './Target.js';\nimport {Capability} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\nimport {TargetManager} from './TargetManager.js';\nimport {ResourceTreeModel} from './ResourceTreeModel.js';\n\nexport class DOMNode {\n  #domModelInternal: DOMModel;\n  #agent: ProtocolProxyApi.DOMApi;\n  ownerDocument!: DOMDocument|null;\n  #isInShadowTreeInternal!: boolean;\n  id!: Protocol.DOM.NodeId;\n  index: number|undefined;\n  #backendNodeIdInternal!: Protocol.DOM.BackendNodeId;\n  #nodeTypeInternal!: number;\n  #nodeNameInternal!: string;\n  #localNameInternal!: string;\n  nodeValueInternal!: string;\n  #pseudoTypeInternal!: Protocol.DOM.PseudoType|undefined;\n  #pseudoIdentifier?: string;\n  #shadowRootTypeInternal!: Protocol.DOM.ShadowRootType|undefined;\n  #frameOwnerFrameIdInternal!: Protocol.Page.FrameId|null;\n  #xmlVersion!: string|undefined;\n  #isSVGNodeInternal!: boolean;\n  #creationStackTraceInternal: Promise<Protocol.Runtime.StackTrace|null>|null;\n  #pseudoElements: Map<string, DOMNode[]>;\n  #distributedNodesInternal: DOMNodeShortcut[];\n  assignedSlot: DOMNodeShortcut|null;\n  readonly shadowRootsInternal: DOMNode[];\n  #attributesInternal: Map<string, Attribute>;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  #markers: Map<string, any>;\n  #subtreeMarkerCount: number;\n  childNodeCountInternal!: number;\n  childrenInternal: DOMNode[]|null;\n  nextSibling: DOMNode|null;\n  previousSibling: DOMNode|null;\n  firstChild: DOMNode|null;\n  lastChild: DOMNode|null;\n  parentNode: DOMNode|null;\n  templateContentInternal?: DOMNode;\n  contentDocumentInternal?: DOMDocument;\n  childDocumentPromiseForTesting?: Promise<DOMDocument|null>;\n  #importedDocumentInternal?: DOMNode;\n  publicId?: string;\n  systemId?: string;\n  internalSubset?: string;\n  name?: string;\n  value?: string;\n\n  constructor(domModel: DOMModel) {\n    this.#domModelInternal = domModel;\n    this.#agent = this.#domModelInternal.getAgent();\n    this.index = undefined;\n    this.#creationStackTraceInternal = null;\n    this.#pseudoElements = new Map();\n    this.#distributedNodesInternal = [];\n    this.assignedSlot = null;\n    this.shadowRootsInternal = [];\n    this.#attributesInternal = new Map();\n    this.#markers = new Map();\n    this.#subtreeMarkerCount = 0;\n    this.childrenInternal = null;\n    this.nextSibling = null;\n    this.previousSibling = null;\n    this.firstChild = null;\n    this.lastChild = null;\n    this.parentNode = null;\n  }\n\n  static create(domModel: DOMModel, doc: DOMDocument|null, isInShadowTree: boolean, payload: Protocol.DOM.Node):\n      DOMNode {\n    const node = new DOMNode(domModel);\n    node.init(doc, isInShadowTree, payload);\n    return node;\n  }\n\n  init(doc: DOMDocument|null, isInShadowTree: boolean, payload: Protocol.DOM.Node): void {\n    this.#agent = this.#domModelInternal.getAgent();\n    this.ownerDocument = doc;\n    this.#isInShadowTreeInternal = isInShadowTree;\n\n    this.id = payload.nodeId;\n    this.#backendNodeIdInternal = payload.backendNodeId;\n    this.#domModelInternal.registerNode(this);\n    this.#nodeTypeInternal = payload.nodeType;\n    this.#nodeNameInternal = payload.nodeName;\n    this.#localNameInternal = payload.localName;\n    this.nodeValueInternal = payload.nodeValue;\n    this.#pseudoTypeInternal = payload.pseudoType;\n    this.#pseudoIdentifier = payload.pseudoIdentifier;\n    this.#shadowRootTypeInternal = payload.shadowRootType;\n    this.#frameOwnerFrameIdInternal = payload.frameId || null;\n    this.#xmlVersion = payload.xmlVersion;\n    this.#isSVGNodeInternal = Boolean(payload.isSVG);\n\n    if (payload.attributes) {\n      this.setAttributesPayload(payload.attributes);\n    }\n\n    this.childNodeCountInternal = payload.childNodeCount || 0;\n    if (payload.shadowRoots) {\n      for (let i = 0; i < payload.shadowRoots.length; ++i) {\n        const root = payload.shadowRoots[i];\n        const node = DOMNode.create(this.#domModelInternal, this.ownerDocument, true, root);\n        this.shadowRootsInternal.push(node);\n        node.parentNode = this;\n      }\n    }\n\n    if (payload.templateContent) {\n      this.templateContentInternal =\n          DOMNode.create(this.#domModelInternal, this.ownerDocument, true, payload.templateContent);\n      this.templateContentInternal.parentNode = this;\n      this.childrenInternal = [];\n    }\n\n    const frameOwnerTags = new Set(['EMBED', 'IFRAME', 'OBJECT', 'PORTAL', 'FENCEDFRAME']);\n    if (payload.contentDocument) {\n      this.contentDocumentInternal = new DOMDocument(this.#domModelInternal, payload.contentDocument);\n      this.contentDocumentInternal.parentNode = this;\n      this.childrenInternal = [];\n    } else if (payload.frameId && frameOwnerTags.has(payload.nodeName)) {\n      // At this point we know we are in an OOPIF, otherwise `payload.contentDocument` would have been set.\n      this.childDocumentPromiseForTesting = this.requestChildDocument(payload.frameId, this.#domModelInternal.target());\n      this.childrenInternal = [];\n    }\n\n    if (payload.importedDocument) {\n      this.#importedDocumentInternal =\n          DOMNode.create(this.#domModelInternal, this.ownerDocument, true, payload.importedDocument);\n      this.#importedDocumentInternal.parentNode = this;\n      this.childrenInternal = [];\n    }\n\n    if (payload.distributedNodes) {\n      this.setDistributedNodePayloads(payload.distributedNodes);\n    }\n\n    if (payload.assignedSlot) {\n      this.setAssignedSlot(payload.assignedSlot);\n    }\n\n    if (payload.children) {\n      this.setChildrenPayload(payload.children);\n    }\n\n    this.setPseudoElements(payload.pseudoElements);\n\n    if (this.#nodeTypeInternal === Node.ELEMENT_NODE) {\n      // HTML and BODY from internal iframes should not overwrite top-level ones.\n      if (this.ownerDocument && !this.ownerDocument.documentElement && this.#nodeNameInternal === 'HTML') {\n        this.ownerDocument.documentElement = this;\n      }\n      if (this.ownerDocument && !this.ownerDocument.body && this.#nodeNameInternal === 'BODY') {\n        this.ownerDocument.body = this;\n      }\n    } else if (this.#nodeTypeInternal === Node.DOCUMENT_TYPE_NODE) {\n      this.publicId = payload.publicId;\n      this.systemId = payload.systemId;\n      this.internalSubset = payload.internalSubset;\n    } else if (this.#nodeTypeInternal === Node.ATTRIBUTE_NODE) {\n      this.name = payload.name;\n      this.value = payload.value;\n    }\n  }\n\n  private async requestChildDocument(frameId: Protocol.Page.FrameId, notInTarget: Target): Promise<DOMDocument|null> {\n    const frame = await FrameManager.instance().getOrWaitForFrame(frameId, notInTarget);\n    const childModel = frame.resourceTreeModel()?.target().model(DOMModel);\n    return childModel?.requestDocument() || null;\n  }\n\n  isAdFrameNode(): boolean {\n    if (this.isIframe() && this.#frameOwnerFrameIdInternal) {\n      const frame = FrameManager.instance().getFrame(this.#frameOwnerFrameIdInternal);\n      if (!frame) {\n        return false;\n      }\n      return frame.adFrameType() !== Protocol.Page.AdFrameType.None;\n    }\n    return false;\n  }\n\n  isSVGNode(): boolean {\n    return this.#isSVGNodeInternal;\n  }\n\n  creationStackTrace(): Promise<Protocol.Runtime.StackTrace|null> {\n    if (this.#creationStackTraceInternal) {\n      return this.#creationStackTraceInternal;\n    }\n\n    const stackTracesPromise = this.#agent.invoke_getNodeStackTraces({nodeId: this.id});\n    this.#creationStackTraceInternal = stackTracesPromise.then(res => res.creation || null);\n    return this.#creationStackTraceInternal;\n  }\n\n  get subtreeMarkerCount(): number {\n    return this.#subtreeMarkerCount;\n  }\n\n  domModel(): DOMModel {\n    return this.#domModelInternal;\n  }\n\n  backendNodeId(): Protocol.DOM.BackendNodeId {\n    return this.#backendNodeIdInternal;\n  }\n\n  children(): DOMNode[]|null {\n    return this.childrenInternal ? this.childrenInternal.slice() : null;\n  }\n\n  setChildren(children: DOMNode[]): void {\n    this.childrenInternal = children;\n  }\n\n  hasAttributes(): boolean {\n    return this.#attributesInternal.size > 0;\n  }\n\n  childNodeCount(): number {\n    return this.childNodeCountInternal;\n  }\n\n  setChildNodeCount(childNodeCount: number): void {\n    this.childNodeCountInternal = childNodeCount;\n  }\n\n  hasShadowRoots(): boolean {\n    return Boolean(this.shadowRootsInternal.length);\n  }\n\n  shadowRoots(): DOMNode[] {\n    return this.shadowRootsInternal.slice();\n  }\n\n  templateContent(): DOMNode|null {\n    return this.templateContentInternal || null;\n  }\n\n  contentDocument(): DOMDocument|null {\n    return this.contentDocumentInternal || null;\n  }\n\n  setContentDocument(node: DOMDocument): void {\n    this.contentDocumentInternal = node;\n  }\n\n  isIframe(): boolean {\n    return this.#nodeNameInternal === 'IFRAME';\n  }\n\n  isPortal(): boolean {\n    return this.#nodeNameInternal === 'PORTAL';\n  }\n\n  importedDocument(): DOMNode|null {\n    return this.#importedDocumentInternal || null;\n  }\n\n  nodeType(): number {\n    return this.#nodeTypeInternal;\n  }\n\n  nodeName(): string {\n    return this.#nodeNameInternal;\n  }\n\n  pseudoType(): string|undefined {\n    return this.#pseudoTypeInternal;\n  }\n\n  pseudoIdentifier(): string|undefined {\n    return this.#pseudoIdentifier;\n  }\n\n  hasPseudoElements(): boolean {\n    return this.#pseudoElements.size > 0;\n  }\n\n  pseudoElements(): Map<string, DOMNode[]> {\n    return this.#pseudoElements;\n  }\n\n  beforePseudoElement(): DOMNode|undefined {\n    return this.#pseudoElements.get(DOMNode.PseudoElementNames.Before)?.at(-1);\n  }\n\n  afterPseudoElement(): DOMNode|undefined {\n    return this.#pseudoElements.get(DOMNode.PseudoElementNames.After)?.at(-1);\n  }\n\n  markerPseudoElement(): DOMNode|undefined {\n    return this.#pseudoElements.get(DOMNode.PseudoElementNames.Marker)?.at(-1);\n  }\n\n  pageTransitionPseudoElements(): DOMNode[] {\n    return [\n      ...this.#pseudoElements.get(DOMNode.PseudoElementNames.PageTransition) || [],\n      ...this.#pseudoElements.get(DOMNode.PseudoElementNames.PageTransitionContainer) || [],\n      ...this.#pseudoElements.get(DOMNode.PseudoElementNames.PageTransitionImageWrapper) || [],\n      ...this.#pseudoElements.get(DOMNode.PseudoElementNames.PageTransitionOutgoingImage) || [],\n      ...this.#pseudoElements.get(DOMNode.PseudoElementNames.PageTransitionIncomingImage) || [],\n    ];\n  }\n\n  hasAssignedSlot(): boolean {\n    return this.assignedSlot !== null;\n  }\n\n  isInsertionPoint(): boolean {\n    return !this.isXMLNode() &&\n        (this.#nodeNameInternal === 'SHADOW' || this.#nodeNameInternal === 'CONTENT' ||\n         this.#nodeNameInternal === 'SLOT');\n  }\n\n  distributedNodes(): DOMNodeShortcut[] {\n    return this.#distributedNodesInternal;\n  }\n\n  isInShadowTree(): boolean {\n    return this.#isInShadowTreeInternal;\n  }\n\n  ancestorShadowHost(): DOMNode|null {\n    const ancestorShadowRoot = this.ancestorShadowRoot();\n    return ancestorShadowRoot ? ancestorShadowRoot.parentNode : null;\n  }\n\n  ancestorShadowRoot(): DOMNode|null {\n    if (!this.#isInShadowTreeInternal) {\n      return null;\n    }\n\n    let current: (DOMNode|null) = (this as DOMNode | null);\n    while (current && !current.isShadowRoot()) {\n      current = current.parentNode;\n    }\n    return current;\n  }\n\n  ancestorUserAgentShadowRoot(): DOMNode|null {\n    const ancestorShadowRoot = this.ancestorShadowRoot();\n    if (!ancestorShadowRoot) {\n      return null;\n    }\n    return ancestorShadowRoot.shadowRootType() === DOMNode.ShadowRootTypes.UserAgent ? ancestorShadowRoot : null;\n  }\n\n  isShadowRoot(): boolean {\n    return Boolean(this.#shadowRootTypeInternal);\n  }\n\n  shadowRootType(): string|null {\n    return this.#shadowRootTypeInternal || null;\n  }\n\n  nodeNameInCorrectCase(): string {\n    const shadowRootType = this.shadowRootType();\n    if (shadowRootType) {\n      return '#shadow-root (' + shadowRootType + ')';\n    }\n\n    // If there is no local #name, it's case sensitive\n    if (!this.localName()) {\n      return this.nodeName();\n    }\n\n    // If the names are different lengths, there is a prefix and it's case sensitive\n    if (this.localName().length !== this.nodeName().length) {\n      return this.nodeName();\n    }\n\n    // Return the localname, which will be case insensitive if its an html node\n    return this.localName();\n  }\n\n  setNodeName(name: string, callback?: ((arg0: string|null, arg1: DOMNode|null) => void)): void {\n    void this.#agent.invoke_setNodeName({nodeId: this.id, name}).then(response => {\n      if (!response.getError()) {\n        this.#domModelInternal.markUndoableState();\n      }\n      if (callback) {\n        callback(response.getError() || null, this.#domModelInternal.nodeForId(response.nodeId));\n      }\n    });\n  }\n\n  localName(): string {\n    return this.#localNameInternal;\n  }\n\n  nodeValue(): string {\n    return this.nodeValueInternal;\n  }\n\n  setNodeValueInternal(nodeValue: string): void {\n    this.nodeValueInternal = nodeValue;\n  }\n\n  setNodeValue(value: string, callback?: ((arg0: string|null) => void)): void {\n    void this.#agent.invoke_setNodeValue({nodeId: this.id, value}).then(response => {\n      if (!response.getError()) {\n        this.#domModelInternal.markUndoableState();\n      }\n      if (callback) {\n        callback(response.getError() || null);\n      }\n    });\n  }\n\n  getAttribute(name: string): string|undefined {\n    const attr = this.#attributesInternal.get(name);\n    return attr ? attr.value : undefined;\n  }\n\n  setAttribute(name: string, text: string, callback?: ((arg0: string|null) => void)): void {\n    void this.#agent.invoke_setAttributesAsText({nodeId: this.id, text, name}).then(response => {\n      if (!response.getError()) {\n        this.#domModelInternal.markUndoableState();\n      }\n      if (callback) {\n        callback(response.getError() || null);\n      }\n    });\n  }\n\n  setAttributeValue(name: string, value: string, callback?: ((arg0: string|null) => void)): void {\n    void this.#agent.invoke_setAttributeValue({nodeId: this.id, name, value}).then(response => {\n      if (!response.getError()) {\n        this.#domModelInternal.markUndoableState();\n      }\n      if (callback) {\n        callback(response.getError() || null);\n      }\n    });\n  }\n\n  setAttributeValuePromise(name: string, value: string): Promise<string|null> {\n    return new Promise(fulfill => this.setAttributeValue(name, value, fulfill));\n  }\n\n  attributes(): Attribute[] {\n    return [...this.#attributesInternal.values()];\n  }\n\n  async removeAttribute(name: string): Promise<void> {\n    const response = await this.#agent.invoke_removeAttribute({nodeId: this.id, name});\n    if (response.getError()) {\n      return;\n    }\n    this.#attributesInternal.delete(name);\n    this.#domModelInternal.markUndoableState();\n  }\n\n  getChildNodes(callback: (arg0: Array<DOMNode>|null) => void): void {\n    if (this.childrenInternal) {\n      callback(this.children());\n      return;\n    }\n    void this.#agent.invoke_requestChildNodes({nodeId: this.id}).then(response => {\n      callback(response.getError() ? null : this.children());\n    });\n  }\n\n  async getSubtree(depth: number, pierce: boolean): Promise<DOMNode[]|null> {\n    const response = await this.#agent.invoke_requestChildNodes({nodeId: this.id, depth: depth, pierce: pierce});\n    return response.getError() ? null : this.childrenInternal;\n  }\n\n  async getOuterHTML(): Promise<string|null> {\n    const {outerHTML} = await this.#agent.invoke_getOuterHTML({nodeId: this.id});\n    return outerHTML;\n  }\n\n  setOuterHTML(html: string, callback?: ((arg0: string|null) => void)): void {\n    void this.#agent.invoke_setOuterHTML({nodeId: this.id, outerHTML: html}).then(response => {\n      if (!response.getError()) {\n        this.#domModelInternal.markUndoableState();\n      }\n      if (callback) {\n        callback(response.getError() || null);\n      }\n    });\n  }\n\n  removeNode(callback?: ((arg0: string|null, arg1?: Protocol.DOM.NodeId|undefined) => void)): Promise<void> {\n    return this.#agent.invoke_removeNode({nodeId: this.id}).then(response => {\n      if (!response.getError()) {\n        this.#domModelInternal.markUndoableState();\n      }\n      if (callback) {\n        callback(response.getError() || null);\n      }\n    });\n  }\n\n  async copyNode(): Promise<string|null> {\n    const {outerHTML} = await this.#agent.invoke_getOuterHTML({nodeId: this.id});\n    if (outerHTML !== null) {\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(outerHTML);\n    }\n    return outerHTML;\n  }\n\n  path(): string {\n    function canPush(node: DOMNode): number|false|null {\n      return (node.index !== undefined || (node.isShadowRoot() && node.parentNode)) && node.#nodeNameInternal.length;\n    }\n\n    const path = [];\n    let node: (DOMNode|null) = (this as DOMNode | null);\n    while (node && canPush(node)) {\n      const index = typeof node.index === 'number' ?\n          node.index :\n          (node.shadowRootType() === DOMNode.ShadowRootTypes.UserAgent ? 'u' : 'a');\n      path.push([index, node.#nodeNameInternal]);\n      node = node.parentNode;\n    }\n    path.reverse();\n    return path.join(',');\n  }\n\n  isAncestor(node: DOMNode): boolean {\n    if (!node) {\n      return false;\n    }\n\n    let currentNode: (DOMNode|null) = node.parentNode;\n    while (currentNode) {\n      if (this === currentNode) {\n        return true;\n      }\n      currentNode = currentNode.parentNode;\n    }\n    return false;\n  }\n\n  isDescendant(descendant: DOMNode): boolean {\n    return descendant !== null && descendant.isAncestor(this);\n  }\n\n  frameOwnerFrameId(): Protocol.Page.FrameId|null {\n    return this.#frameOwnerFrameIdInternal;\n  }\n\n  frameId(): Protocol.Page.FrameId|null {\n    let node: DOMNode = this.parentNode || this;\n    while (!node.#frameOwnerFrameIdInternal && node.parentNode) {\n      node = node.parentNode;\n    }\n    return node.#frameOwnerFrameIdInternal;\n  }\n\n  setAttributesPayload(attrs: string[]): boolean {\n    let attributesChanged: true|boolean =\n        !this.#attributesInternal || attrs.length !== this.#attributesInternal.size * 2;\n    const oldAttributesMap = this.#attributesInternal || new Map();\n\n    this.#attributesInternal = new Map();\n\n    for (let i = 0; i < attrs.length; i += 2) {\n      const name = attrs[i];\n      const value = attrs[i + 1];\n      this.addAttribute(name, value);\n\n      if (attributesChanged) {\n        continue;\n      }\n\n      const oldAttribute = oldAttributesMap.get(name);\n      if (!oldAttribute || oldAttribute.value !== value) {\n        attributesChanged = true;\n      }\n    }\n    return attributesChanged;\n  }\n\n  insertChild(prev: DOMNode|undefined, payload: Protocol.DOM.Node): DOMNode {\n    if (!this.childrenInternal) {\n      throw new Error('DOMNode._children is expected to not be null.');\n    }\n    const node = DOMNode.create(this.#domModelInternal, this.ownerDocument, this.#isInShadowTreeInternal, payload);\n    this.childrenInternal.splice(prev ? this.childrenInternal.indexOf(prev) + 1 : 0, 0, node);\n    this.renumber();\n    return node;\n  }\n\n  removeChild(node: DOMNode): void {\n    const pseudoType = node.pseudoType();\n    if (pseudoType) {\n      const updatedPseudoElements = this.#pseudoElements.get(pseudoType)?.filter(element => element !== node);\n      if (updatedPseudoElements && updatedPseudoElements.length > 0) {\n        this.#pseudoElements.set(pseudoType, updatedPseudoElements);\n      } else {\n        this.#pseudoElements.delete(pseudoType);\n      }\n    } else {\n      const shadowRootIndex = this.shadowRootsInternal.indexOf(node);\n      if (shadowRootIndex !== -1) {\n        this.shadowRootsInternal.splice(shadowRootIndex, 1);\n      } else {\n        if (!this.childrenInternal) {\n          throw new Error('DOMNode._children is expected to not be null.');\n        }\n        if (this.childrenInternal.indexOf(node) === -1) {\n          throw new Error('DOMNode._children is expected to contain the node to be removed.');\n        }\n        this.childrenInternal.splice(this.childrenInternal.indexOf(node), 1);\n      }\n    }\n    node.parentNode = null;\n    this.#subtreeMarkerCount -= node.#subtreeMarkerCount;\n    if (node.#subtreeMarkerCount) {\n      this.#domModelInternal.dispatchEventToListeners(Events.MarkersChanged, this);\n    }\n    this.renumber();\n  }\n\n  setChildrenPayload(payloads: Protocol.DOM.Node[]): void {\n    this.childrenInternal = [];\n    for (let i = 0; i < payloads.length; ++i) {\n      const payload = payloads[i];\n      const node = DOMNode.create(this.#domModelInternal, this.ownerDocument, this.#isInShadowTreeInternal, payload);\n      this.childrenInternal.push(node);\n    }\n    this.renumber();\n  }\n\n  private setPseudoElements(payloads: Protocol.DOM.Node[]|undefined): void {\n    if (!payloads) {\n      return;\n    }\n\n    for (let i = 0; i < payloads.length; ++i) {\n      const node =\n          DOMNode.create(this.#domModelInternal, this.ownerDocument, this.#isInShadowTreeInternal, payloads[i]);\n      node.parentNode = this;\n      const pseudoType = node.pseudoType();\n      if (!pseudoType) {\n        throw new Error('DOMNode.pseudoType() is expected to be defined.');\n      }\n      const currentPseudoElements = this.#pseudoElements.get(pseudoType);\n      if (currentPseudoElements) {\n        currentPseudoElements.push(node);\n      } else {\n        this.#pseudoElements.set(pseudoType, [node]);\n      }\n    }\n  }\n\n  setDistributedNodePayloads(payloads: Protocol.DOM.BackendNode[]): void {\n    this.#distributedNodesInternal = [];\n    for (const payload of payloads) {\n      this.#distributedNodesInternal.push(new DOMNodeShortcut(\n          this.#domModelInternal.target(), payload.backendNodeId, payload.nodeType, payload.nodeName));\n    }\n  }\n\n  setAssignedSlot(payload: Protocol.DOM.BackendNode): void {\n    this.assignedSlot =\n        new DOMNodeShortcut(this.#domModelInternal.target(), payload.backendNodeId, payload.nodeType, payload.nodeName);\n  }\n\n  private renumber(): void {\n    if (!this.childrenInternal) {\n      throw new Error('DOMNode._children is expected to not be null.');\n    }\n    this.childNodeCountInternal = this.childrenInternal.length;\n    if (this.childNodeCountInternal === 0) {\n      this.firstChild = null;\n      this.lastChild = null;\n      return;\n    }\n    this.firstChild = this.childrenInternal[0];\n    this.lastChild = this.childrenInternal[this.childNodeCountInternal - 1];\n    for (let i = 0; i < this.childNodeCountInternal; ++i) {\n      const child = this.childrenInternal[i];\n      child.index = i;\n      child.nextSibling = i + 1 < this.childNodeCountInternal ? this.childrenInternal[i + 1] : null;\n      child.previousSibling = i - 1 >= 0 ? this.childrenInternal[i - 1] : null;\n      child.parentNode = this;\n    }\n  }\n\n  private addAttribute(name: string, value: string): void {\n    const attr = {name: name, value: value, _node: this};\n    this.#attributesInternal.set(name, attr);\n  }\n\n  setAttributeInternal(name: string, value: string): void {\n    const attr = this.#attributesInternal.get(name);\n    if (attr) {\n      attr.value = value;\n    } else {\n      this.addAttribute(name, value);\n    }\n  }\n\n  removeAttributeInternal(name: string): void {\n    this.#attributesInternal.delete(name);\n  }\n\n  copyTo(targetNode: DOMNode, anchorNode: DOMNode|null, callback?: ((arg0: string|null, arg1: DOMNode|null) => void)):\n      void {\n    void this.#agent\n        .invoke_copyTo(\n            {nodeId: this.id, targetNodeId: targetNode.id, insertBeforeNodeId: anchorNode ? anchorNode.id : undefined})\n        .then(response => {\n          if (!response.getError()) {\n            this.#domModelInternal.markUndoableState();\n          }\n          if (callback) {\n            callback(response.getError() || null, this.#domModelInternal.nodeForId(response.nodeId));\n          }\n        });\n  }\n\n  moveTo(targetNode: DOMNode, anchorNode: DOMNode|null, callback?: ((arg0: string|null, arg1: DOMNode|null) => void)):\n      void {\n    void this.#agent\n        .invoke_moveTo(\n            {nodeId: this.id, targetNodeId: targetNode.id, insertBeforeNodeId: anchorNode ? anchorNode.id : undefined})\n        .then(response => {\n          if (!response.getError()) {\n            this.#domModelInternal.markUndoableState();\n          }\n          if (callback) {\n            callback(response.getError() || null, this.#domModelInternal.nodeForId(response.nodeId));\n          }\n        });\n  }\n\n  isXMLNode(): boolean {\n    return Boolean(this.#xmlVersion);\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  setMarker(name: string, value: any): void {\n    if (value === null) {\n      if (!this.#markers.has(name)) {\n        return;\n      }\n\n      this.#markers.delete(name);\n      for (let node: (DOMNode|null) = (this as DOMNode | null); node; node = node.parentNode) {\n        --node.#subtreeMarkerCount;\n      }\n      for (let node: (DOMNode|null) = (this as DOMNode | null); node; node = node.parentNode) {\n        this.#domModelInternal.dispatchEventToListeners(Events.MarkersChanged, node);\n      }\n      return;\n    }\n\n    if (this.parentNode && !this.#markers.has(name)) {\n      for (let node: (DOMNode|null) = (this as DOMNode | null); node; node = node.parentNode) {\n        ++node.#subtreeMarkerCount;\n      }\n    }\n    this.#markers.set(name, value);\n    for (let node: (DOMNode|null) = (this as DOMNode | null); node; node = node.parentNode) {\n      this.#domModelInternal.dispatchEventToListeners(Events.MarkersChanged, node);\n    }\n  }\n\n  marker<T>(name: string): T|null {\n    return this.#markers.get(name) || null;\n  }\n\n  getMarkerKeysForTest(): string[] {\n    return [...this.#markers.keys()];\n  }\n\n  traverseMarkers(visitor: (arg0: DOMNode, arg1: string) => void): void {\n    function traverse(node: DOMNode): void {\n      if (!node.#subtreeMarkerCount) {\n        return;\n      }\n      for (const marker of node.#markers.keys()) {\n        visitor(node, marker);\n      }\n      if (!node.childrenInternal) {\n        return;\n      }\n      for (const child of node.childrenInternal) {\n        traverse(child);\n      }\n    }\n    traverse(this);\n  }\n\n  resolveURL(url: string): Platform.DevToolsPath.UrlString|null {\n    if (!url) {\n      return url as Platform.DevToolsPath.UrlString;\n    }\n    for (let frameOwnerCandidate: (DOMNode|null) = (this as DOMNode | null); frameOwnerCandidate;\n         frameOwnerCandidate = frameOwnerCandidate.parentNode) {\n      if (frameOwnerCandidate instanceof DOMDocument && frameOwnerCandidate.baseURL) {\n        return Common.ParsedURL.ParsedURL.completeURL(frameOwnerCandidate.baseURL, url);\n      }\n    }\n    return null;\n  }\n\n  highlight(mode?: string): void {\n    this.#domModelInternal.overlayModel().highlightInOverlay({node: this, selectorList: undefined}, mode);\n  }\n\n  highlightForTwoSeconds(): void {\n    this.#domModelInternal.overlayModel().highlightInOverlayForTwoSeconds({node: this, selectorList: undefined});\n  }\n\n  async resolveToObject(objectGroup?: string): Promise<RemoteObject|null> {\n    const {object} = await this.#agent.invoke_resolveNode({nodeId: this.id, backendNodeId: undefined, objectGroup});\n    return object && this.#domModelInternal.runtimeModelInternal.createRemoteObject(object) || null;\n  }\n\n  async boxModel(): Promise<Protocol.DOM.BoxModel|null> {\n    const {model} = await this.#agent.invoke_getBoxModel({nodeId: this.id});\n    return model;\n  }\n\n  async setAsInspectedNode(): Promise<void> {\n    let node: (DOMNode|null)|DOMNode = (this as DOMNode | null);\n    if (node && node.pseudoType()) {\n      node = node.parentNode;\n    }\n    while (node) {\n      let ancestor = node.ancestorUserAgentShadowRoot();\n      if (!ancestor) {\n        break;\n      }\n      ancestor = node.ancestorShadowHost();\n      if (!ancestor) {\n        break;\n      }\n      // User #agent shadow root, keep climbing up.\n      node = ancestor;\n    }\n    if (!node) {\n      throw new Error('In DOMNode.setAsInspectedNode: node is expected to not be null.');\n    }\n    await this.#agent.invoke_setInspectedNode({nodeId: node.id});\n  }\n\n  enclosingElementOrSelf(): DOMNode|null {\n    let node: DOMNode|null|(DOMNode | null) = (this as DOMNode | null);\n    if (node && node.nodeType() === Node.TEXT_NODE && node.parentNode) {\n      node = node.parentNode;\n    }\n\n    if (node && node.nodeType() !== Node.ELEMENT_NODE) {\n      node = null;\n    }\n    return node;\n  }\n\n  async scrollIntoView(): Promise<void> {\n    const node = this.enclosingElementOrSelf();\n    if (!node) {\n      return;\n    }\n    const object = await node.resolveToObject();\n    if (!object) {\n      return;\n    }\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // @ts-expect-error\n    void object.callFunction(scrollIntoView);\n    object.release();\n    node.highlightForTwoSeconds();\n\n    function scrollIntoView(this: Element): void {\n      this.scrollIntoViewIfNeeded(true);\n    }\n  }\n\n  async focus(): Promise<void> {\n    const node = this.enclosingElementOrSelf();\n    if (!node) {\n      throw new Error('DOMNode.focus expects node to not be null.');\n    }\n    const object = await node.resolveToObject();\n    if (!object) {\n      return;\n    }\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // @ts-expect-error\n    await object.callFunction(focusInPage);\n    object.release();\n    node.highlightForTwoSeconds();\n    await this.#domModelInternal.target().pageAgent().invoke_bringToFront();\n\n    function focusInPage(this: HTMLElement): void {\n      this.focus();\n    }\n  }\n\n  simpleSelector(): string {\n    const lowerCaseName = this.localName() || this.nodeName().toLowerCase();\n    if (this.nodeType() !== Node.ELEMENT_NODE) {\n      return lowerCaseName;\n    }\n    const type = this.getAttribute('type');\n    const id = this.getAttribute('id');\n    const classes = this.getAttribute('class');\n\n    if (lowerCaseName === 'input' && type && !id && !classes) {\n      return lowerCaseName + '[type=\"' + CSS.escape(type) + '\"]';\n    }\n    if (id) {\n      return lowerCaseName + '#' + CSS.escape(id);\n    }\n    if (classes) {\n      const classList = classes.trim().split(/\\s+/g);\n      return (lowerCaseName === 'div' ? '' : lowerCaseName) + '.' + classList.map(cls => CSS.escape(cls)).join('.');\n    }\n    return lowerCaseName;\n  }\n}\n\nexport namespace DOMNode {\n  // TODO(crbug.com/1167717): Make this a const enum again\n  // eslint-disable-next-line rulesdir/const_enum\n  export enum PseudoElementNames {\n    Before = 'before',\n    After = 'after',\n    Marker = 'marker',\n    PageTransition = 'page-transition',\n    PageTransitionContainer = 'page-transition-container',\n    PageTransitionImageWrapper = 'page-transition-image-wrapper',\n    PageTransitionOutgoingImage = 'page-transition-outgoing-image',\n    PageTransitionIncomingImage = 'page-transition-incoming-image',\n  }\n\n  // TODO(crbug.com/1167717): Make this a const enum again\n  // eslint-disable-next-line rulesdir/const_enum\n  export enum ShadowRootTypes {\n    UserAgent = 'user-agent',\n    Open = 'open',\n    Closed = 'closed',\n  }\n}\n\nexport class DeferredDOMNode {\n  readonly #domModelInternal: DOMModel;\n  readonly #backendNodeIdInternal: Protocol.DOM.BackendNodeId;\n\n  constructor(target: Target, backendNodeId: Protocol.DOM.BackendNodeId) {\n    this.#domModelInternal = (target.model(DOMModel) as DOMModel);\n    this.#backendNodeIdInternal = backendNodeId;\n  }\n\n  resolve(callback: (arg0: DOMNode|null) => void): void {\n    void this.resolvePromise().then(callback);\n  }\n\n  async resolvePromise(): Promise<DOMNode|null> {\n    const nodeIds =\n        await this.#domModelInternal.pushNodesByBackendIdsToFrontend(new Set([this.#backendNodeIdInternal]));\n    return nodeIds && nodeIds.get(this.#backendNodeIdInternal) || null;\n  }\n\n  backendNodeId(): Protocol.DOM.BackendNodeId {\n    return this.#backendNodeIdInternal;\n  }\n\n  domModel(): DOMModel {\n    return this.#domModelInternal;\n  }\n\n  highlight(): void {\n    this.#domModelInternal.overlayModel().highlightInOverlay({deferredNode: this, selectorList: undefined});\n  }\n}\n\nexport class DOMNodeShortcut {\n  nodeType: number;\n  nodeName: string;\n  deferredNode: DeferredDOMNode;\n  constructor(target: Target, backendNodeId: Protocol.DOM.BackendNodeId, nodeType: number, nodeName: string) {\n    this.nodeType = nodeType;\n    this.nodeName = nodeName;\n    this.deferredNode = new DeferredDOMNode(target, backendNodeId);\n  }\n}\n\nexport class DOMDocument extends DOMNode {\n  body: DOMNode|null;\n  documentElement: DOMNode|null;\n  documentURL: Platform.DevToolsPath.UrlString;\n  baseURL: Platform.DevToolsPath.UrlString;\n  constructor(domModel: DOMModel, payload: Protocol.DOM.Node) {\n    super(domModel);\n    this.body = null;\n    this.documentElement = null;\n    this.init(this, false, payload);\n    this.documentURL = (payload.documentURL || '') as Platform.DevToolsPath.UrlString;\n    this.baseURL = (payload.baseURL || '') as Platform.DevToolsPath.UrlString;\n  }\n}\n\nexport class DOMModel extends SDKModel<EventTypes> {\n  agent: ProtocolProxyApi.DOMApi;\n  idToDOMNode: Map<Protocol.DOM.NodeId, DOMNode> = new Map();\n  #document: DOMDocument|null;\n  readonly #attributeLoadNodeIds: Set<Protocol.DOM.NodeId>;\n  readonly runtimeModelInternal: RuntimeModel;\n  #lastMutationId!: number;\n  #pendingDocumentRequestPromise: Promise<DOMDocument|null>|null;\n  #frameOwnerNode?: DOMNode|null;\n  #loadNodeAttributesTimeout?: number;\n  #searchId?: string;\n  constructor(target: Target) {\n    super(target);\n\n    this.agent = target.domAgent();\n\n    this.#document = null;\n    this.#attributeLoadNodeIds = new Set();\n    target.registerDOMDispatcher(new DOMDispatcher(this));\n    this.runtimeModelInternal = (target.model(RuntimeModel) as RuntimeModel);\n\n    this.#pendingDocumentRequestPromise = null;\n\n    if (!target.suspended()) {\n      void this.agent.invoke_enable({});\n    }\n\n    if (Root.Runtime.experiments.isEnabled('captureNodeCreationStacks')) {\n      void this.agent.invoke_setNodeStackTracesEnabled({enable: true});\n    }\n  }\n\n  runtimeModel(): RuntimeModel {\n    return this.runtimeModelInternal;\n  }\n\n  cssModel(): CSSModel {\n    return this.target().model(CSSModel) as CSSModel;\n  }\n\n  overlayModel(): OverlayModel {\n    return this.target().model(OverlayModel) as OverlayModel;\n  }\n\n  static cancelSearch(): void {\n    for (const domModel of TargetManager.instance().models(DOMModel)) {\n      domModel.cancelSearch();\n    }\n  }\n\n  private scheduleMutationEvent(node: DOMNode): void {\n    if (!this.hasEventListeners(Events.DOMMutated)) {\n      return;\n    }\n\n    this.#lastMutationId = (this.#lastMutationId || 0) + 1;\n    void Promise.resolve().then(callObserve.bind(this, node, this.#lastMutationId));\n\n    function callObserve(this: DOMModel, node: DOMNode, mutationId: number): void {\n      if (!this.hasEventListeners(Events.DOMMutated) || this.#lastMutationId !== mutationId) {\n        return;\n      }\n\n      this.dispatchEventToListeners(Events.DOMMutated, node);\n    }\n  }\n\n  requestDocument(): Promise<DOMDocument|null> {\n    if (this.#document) {\n      return Promise.resolve(this.#document);\n    }\n    if (!this.#pendingDocumentRequestPromise) {\n      this.#pendingDocumentRequestPromise = this.requestDocumentInternal();\n    }\n    return this.#pendingDocumentRequestPromise;\n  }\n\n  async getOwnerNodeForFrame(frameId: Protocol.Page.FrameId): Promise<DeferredDOMNode|null> {\n    // Returns an error if the frameId does not belong to the current target.\n    const response = await this.agent.invoke_getFrameOwner({frameId});\n    if (response.getError()) {\n      return null;\n    }\n    return new DeferredDOMNode(this.target(), response.backendNodeId);\n  }\n\n  private async requestDocumentInternal(): Promise<DOMDocument|null> {\n    const response = await this.agent.invoke_getDocument({});\n    if (response.getError()) {\n      console.error(response.getError());\n      return null;\n    }\n    const {root: documentPayload} = response;\n    this.#pendingDocumentRequestPromise = null;\n\n    if (documentPayload) {\n      this.setDocument(documentPayload);\n    }\n    if (!this.#document) {\n      console.error('No document');\n      return null;\n    }\n\n    const parentModel = this.parentModel();\n    if (parentModel && !this.#frameOwnerNode) {\n      await parentModel.requestDocument();\n      const mainFrame = this.target().model(ResourceTreeModel)?.mainFrame;\n      if (mainFrame) {\n        const response = await parentModel.agent.invoke_getFrameOwner({frameId: mainFrame.id});\n        if (!response.getError() && response.nodeId) {\n          this.#frameOwnerNode = parentModel.nodeForId(response.nodeId);\n        }\n      }\n    }\n\n    // Document could have been cleared by now.\n    if (this.#frameOwnerNode) {\n      const oldDocument = this.#frameOwnerNode.contentDocument();\n      this.#frameOwnerNode.setContentDocument(this.#document);\n      this.#frameOwnerNode.setChildren([]);\n      if (this.#document) {\n        this.#document.parentNode = this.#frameOwnerNode;\n        this.dispatchEventToListeners(Events.NodeInserted, this.#document);\n      } else if (oldDocument) {\n        this.dispatchEventToListeners(Events.NodeRemoved, {node: oldDocument, parent: this.#frameOwnerNode});\n      }\n    }\n    return this.#document;\n  }\n\n  existingDocument(): DOMDocument|null {\n    return this.#document;\n  }\n\n  async pushNodeToFrontend(objectId: Protocol.Runtime.RemoteObjectId): Promise<DOMNode|null> {\n    await this.requestDocument();\n    const {nodeId} = await this.agent.invoke_requestNode({objectId});\n    return nodeId ? this.nodeForId(nodeId) : null;\n  }\n\n  pushNodeByPathToFrontend(path: string): Promise<Protocol.DOM.NodeId|null> {\n    return this.requestDocument()\n        .then(() => this.agent.invoke_pushNodeByPathToFrontend({path}))\n        .then(({nodeId}) => nodeId);\n  }\n\n  async pushNodesByBackendIdsToFrontend(backendNodeIds: Set<Protocol.DOM.BackendNodeId>):\n      Promise<Map<Protocol.DOM.BackendNodeId, DOMNode|null>|null> {\n    await this.requestDocument();\n    const backendNodeIdsArray = [...backendNodeIds];\n    const {nodeIds} = await this.agent.invoke_pushNodesByBackendIdsToFrontend({backendNodeIds: backendNodeIdsArray});\n    if (!nodeIds) {\n      return null;\n    }\n    const map = new Map<Protocol.DOM.BackendNodeId, DOMNode|null>();\n    for (let i = 0; i < nodeIds.length; ++i) {\n      if (nodeIds[i]) {\n        map.set(backendNodeIdsArray[i], this.nodeForId(nodeIds[i]));\n      }\n    }\n    return map;\n  }\n\n  attributeModified(nodeId: Protocol.DOM.NodeId, name: string, value: string): void {\n    const node = this.idToDOMNode.get(nodeId);\n    if (!node) {\n      return;\n    }\n\n    node.setAttributeInternal(name, value);\n    this.dispatchEventToListeners(Events.AttrModified, {node: node, name: name});\n    this.scheduleMutationEvent(node);\n  }\n\n  attributeRemoved(nodeId: Protocol.DOM.NodeId, name: string): void {\n    const node = this.idToDOMNode.get(nodeId);\n    if (!node) {\n      return;\n    }\n    node.removeAttributeInternal(name);\n    this.dispatchEventToListeners(Events.AttrRemoved, {node: node, name: name});\n    this.scheduleMutationEvent(node);\n  }\n\n  inlineStyleInvalidated(nodeIds: number[]): void {\n    Platform.SetUtilities.addAll(this.#attributeLoadNodeIds, nodeIds);\n    if (!this.#loadNodeAttributesTimeout) {\n      this.#loadNodeAttributesTimeout = window.setTimeout(this.loadNodeAttributes.bind(this), 20);\n    }\n  }\n\n  private loadNodeAttributes(): void {\n    this.#loadNodeAttributesTimeout = undefined;\n    for (const nodeId of this.#attributeLoadNodeIds) {\n      void this.agent.invoke_getAttributes({nodeId}).then(({attributes}) => {\n        if (!attributes) {\n          // We are calling loadNodeAttributes asynchronously, it is ok if node is not found.\n          return;\n        }\n        const node = this.idToDOMNode.get(nodeId);\n        if (!node) {\n          return;\n        }\n        if (node.setAttributesPayload(attributes)) {\n          this.dispatchEventToListeners(Events.AttrModified, {node: node, name: 'style'});\n          this.scheduleMutationEvent(node);\n        }\n      });\n    }\n    this.#attributeLoadNodeIds.clear();\n  }\n\n  characterDataModified(nodeId: Protocol.DOM.NodeId, newValue: string): void {\n    const node = this.idToDOMNode.get(nodeId);\n    if (!node) {\n      console.error('nodeId could not be resolved to a node');\n      return;\n    }\n    node.setNodeValueInternal(newValue);\n    this.dispatchEventToListeners(Events.CharacterDataModified, node);\n    this.scheduleMutationEvent(node);\n  }\n\n  nodeForId(nodeId: Protocol.DOM.NodeId|null): DOMNode|null {\n    return nodeId ? this.idToDOMNode.get(nodeId) || null : null;\n  }\n\n  documentUpdated(): void {\n    // If we have this.#pendingDocumentRequestPromise in flight,\n    // it will contain most recent result.\n    const documentWasRequested = this.#pendingDocumentRequestPromise;\n    this.setDocument(null);\n    if (this.parentModel() && !documentWasRequested) {\n      void this.requestDocument();\n    }\n  }\n\n  private setDocument(payload: Protocol.DOM.Node|null): void {\n    this.idToDOMNode = new Map();\n    if (payload && 'nodeId' in payload) {\n      this.#document = new DOMDocument(this, payload);\n    } else {\n      this.#document = null;\n    }\n    DOMModelUndoStack.instance().dispose(this);\n\n    if (!this.parentModel()) {\n      this.dispatchEventToListeners(Events.DocumentUpdated, this);\n    }\n  }\n\n  private setDetachedRoot(payload: Protocol.DOM.Node): void {\n    if (payload.nodeName === '#document') {\n      new DOMDocument(this, payload);\n    } else {\n      DOMNode.create(this, null, false, payload);\n    }\n  }\n\n  setChildNodes(parentId: Protocol.DOM.NodeId, payloads: Protocol.DOM.Node[]): void {\n    if (!parentId && payloads.length) {\n      this.setDetachedRoot(payloads[0]);\n      return;\n    }\n\n    const parent = this.idToDOMNode.get(parentId);\n    parent?.setChildrenPayload(payloads);\n  }\n\n  childNodeCountUpdated(nodeId: Protocol.DOM.NodeId, newValue: number): void {\n    const node = this.idToDOMNode.get(nodeId);\n    if (!node) {\n      console.error('nodeId could not be resolved to a node');\n      return;\n    }\n    node.setChildNodeCount(newValue);\n    this.dispatchEventToListeners(Events.ChildNodeCountUpdated, node);\n    this.scheduleMutationEvent(node);\n  }\n\n  childNodeInserted(parentId: Protocol.DOM.NodeId, prevId: Protocol.DOM.NodeId, payload: Protocol.DOM.Node): void {\n    const parent = this.idToDOMNode.get(parentId);\n    const prev = this.idToDOMNode.get(prevId);\n    if (!parent) {\n      console.error('parentId could not be resolved to a node');\n      return;\n    }\n    const node = parent.insertChild(prev, payload);\n    this.idToDOMNode.set(node.id, node);\n    this.dispatchEventToListeners(Events.NodeInserted, node);\n    this.scheduleMutationEvent(node);\n  }\n\n  childNodeRemoved(parentId: Protocol.DOM.NodeId, nodeId: Protocol.DOM.NodeId): void {\n    const parent = this.idToDOMNode.get(parentId);\n    const node = this.idToDOMNode.get(nodeId);\n    if (!parent || !node) {\n      console.error('parentId or nodeId could not be resolved to a node');\n      return;\n    }\n    parent.removeChild(node);\n    this.unbind(node);\n    this.dispatchEventToListeners(Events.NodeRemoved, {node: node, parent: parent});\n    this.scheduleMutationEvent(node);\n  }\n\n  shadowRootPushed(hostId: Protocol.DOM.NodeId, root: Protocol.DOM.Node): void {\n    const host = this.idToDOMNode.get(hostId);\n    if (!host) {\n      return;\n    }\n    const node = DOMNode.create(this, host.ownerDocument, true, root);\n    node.parentNode = host;\n    this.idToDOMNode.set(node.id, node);\n    host.shadowRootsInternal.unshift(node);\n    this.dispatchEventToListeners(Events.NodeInserted, node);\n    this.scheduleMutationEvent(node);\n  }\n\n  shadowRootPopped(hostId: Protocol.DOM.NodeId, rootId: Protocol.DOM.NodeId): void {\n    const host = this.idToDOMNode.get(hostId);\n    if (!host) {\n      return;\n    }\n    const root = this.idToDOMNode.get(rootId);\n    if (!root) {\n      return;\n    }\n    host.removeChild(root);\n    this.unbind(root);\n    this.dispatchEventToListeners(Events.NodeRemoved, {node: root, parent: host});\n    this.scheduleMutationEvent(root);\n  }\n\n  pseudoElementAdded(parentId: Protocol.DOM.NodeId, pseudoElement: Protocol.DOM.Node): void {\n    const parent = this.idToDOMNode.get(parentId);\n    if (!parent) {\n      return;\n    }\n    const node = DOMNode.create(this, parent.ownerDocument, false, pseudoElement);\n    node.parentNode = parent;\n    this.idToDOMNode.set(node.id, node);\n    const pseudoType = node.pseudoType();\n    if (!pseudoType) {\n      throw new Error('DOMModel._pseudoElementAdded expects pseudoType to be defined.');\n    }\n    const currentPseudoElements = parent.pseudoElements().get(pseudoType);\n    if (currentPseudoElements) {\n      Platform.DCHECK(\n          () => pseudoType.startsWith('page-transition'),\n          'DOMModel.pseudoElementAdded expects parent to not already have this pseudo type added; only page-transition* pseudo elements can coexist under the same parent.');\n      currentPseudoElements.push(node);\n    } else {\n      parent.pseudoElements().set(pseudoType, [node]);\n    }\n    this.dispatchEventToListeners(Events.NodeInserted, node);\n    this.scheduleMutationEvent(node);\n  }\n\n  topLayerElementsUpdated(): void {\n    this.dispatchEventToListeners(Events.TopLayerElementsChanged);\n  }\n\n  pseudoElementRemoved(parentId: Protocol.DOM.NodeId, pseudoElementId: Protocol.DOM.NodeId): void {\n    const parent = this.idToDOMNode.get(parentId);\n    if (!parent) {\n      return;\n    }\n    const pseudoElement = this.idToDOMNode.get(pseudoElementId);\n    if (!pseudoElement) {\n      return;\n    }\n    parent.removeChild(pseudoElement);\n    this.unbind(pseudoElement);\n    this.dispatchEventToListeners(Events.NodeRemoved, {node: pseudoElement, parent: parent});\n    this.scheduleMutationEvent(pseudoElement);\n  }\n\n  distributedNodesUpdated(insertionPointId: Protocol.DOM.NodeId, distributedNodes: Protocol.DOM.BackendNode[]): void {\n    const insertionPoint = this.idToDOMNode.get(insertionPointId);\n    if (!insertionPoint) {\n      return;\n    }\n    insertionPoint.setDistributedNodePayloads(distributedNodes);\n    this.dispatchEventToListeners(Events.DistributedNodesChanged, insertionPoint);\n    this.scheduleMutationEvent(insertionPoint);\n  }\n\n  private unbind(node: DOMNode): void {\n    this.idToDOMNode.delete(node.id);\n    const children = node.children();\n    for (let i = 0; children && i < children.length; ++i) {\n      this.unbind(children[i]);\n    }\n    for (let i = 0; i < node.shadowRootsInternal.length; ++i) {\n      this.unbind(node.shadowRootsInternal[i]);\n    }\n    const pseudoElements = node.pseudoElements();\n    for (const value of pseudoElements.values()) {\n      for (const pseudoElement of value) {\n        this.unbind(pseudoElement);\n      }\n    }\n    const templateContent = node.templateContent();\n    if (templateContent) {\n      this.unbind(templateContent);\n    }\n  }\n\n  async getNodesByStyle(\n      computedStyles: {\n        name: string,\n        value: string,\n      }[],\n      pierce: boolean = false): Promise<Protocol.DOM.NodeId[]> {\n    await this.requestDocument();\n    if (!this.#document) {\n      throw new Error('DOMModel.getNodesByStyle expects to have a document.');\n    }\n    const response =\n        await this.agent.invoke_getNodesForSubtreeByStyle({nodeId: this.#document.id, computedStyles, pierce});\n    if (response.getError()) {\n      throw response.getError();\n    }\n    return response.nodeIds;\n  }\n\n  async performSearch(query: string, includeUserAgentShadowDOM: boolean): Promise<number> {\n    const response = await this.agent.invoke_performSearch({query, includeUserAgentShadowDOM});\n    if (!response.getError()) {\n      this.#searchId = response.searchId;\n    }\n    return response.getError() ? 0 : response.resultCount;\n  }\n\n  async searchResult(index: number): Promise<DOMNode|null> {\n    if (!this.#searchId) {\n      return null;\n    }\n    const {nodeIds} =\n        await this.agent.invoke_getSearchResults({searchId: this.#searchId, fromIndex: index, toIndex: index + 1});\n    return nodeIds && nodeIds.length === 1 ? this.nodeForId(nodeIds[0]) : null;\n  }\n\n  private cancelSearch(): void {\n    if (!this.#searchId) {\n      return;\n    }\n    void this.agent.invoke_discardSearchResults({searchId: this.#searchId});\n    this.#searchId = undefined;\n  }\n\n  classNamesPromise(nodeId: Protocol.DOM.NodeId): Promise<string[]> {\n    return this.agent.invoke_collectClassNamesFromSubtree({nodeId}).then(({classNames}) => classNames || []);\n  }\n\n  querySelector(nodeId: Protocol.DOM.NodeId, selector: string): Promise<Protocol.DOM.NodeId|null> {\n    return this.agent.invoke_querySelector({nodeId, selector}).then(({nodeId}) => nodeId);\n  }\n\n  querySelectorAll(nodeId: Protocol.DOM.NodeId, selector: string): Promise<Protocol.DOM.NodeId[]|null> {\n    return this.agent.invoke_querySelectorAll({nodeId, selector}).then(({nodeIds}) => nodeIds);\n  }\n\n  getTopLayerElements(): Promise<Protocol.DOM.NodeId[]|null> {\n    return this.agent.invoke_getTopLayerElements().then(({nodeIds}) => nodeIds);\n  }\n\n  markUndoableState(minorChange?: boolean): void {\n    void DOMModelUndoStack.instance().markUndoableState(this, minorChange || false);\n  }\n\n  async nodeForLocation(x: number, y: number, includeUserAgentShadowDOM: boolean): Promise<DOMNode|null> {\n    const response = await this.agent.invoke_getNodeForLocation({x, y, includeUserAgentShadowDOM});\n    if (response.getError() || !response.nodeId) {\n      return null;\n    }\n    return this.nodeForId(response.nodeId);\n  }\n\n  async getContainerForNode(nodeId: Protocol.DOM.NodeId, containerName?: string): Promise<DOMNode|null> {\n    const {nodeId: containerNodeId} = await this.agent.invoke_getContainerForNode({nodeId, containerName});\n    if (!containerNodeId) {\n      return null;\n    }\n    return this.nodeForId(containerNodeId);\n  }\n\n  pushObjectAsNodeToFrontend(object: RemoteObject): Promise<DOMNode|null> {\n    return object.isNode() && object.objectId ? this.pushNodeToFrontend(object.objectId) : Promise.resolve(null);\n  }\n\n  suspendModel(): Promise<void> {\n    return this.agent.invoke_disable().then(() => this.setDocument(null));\n  }\n\n  async resumeModel(): Promise<void> {\n    await this.agent.invoke_enable({});\n  }\n\n  dispose(): void {\n    DOMModelUndoStack.instance().dispose(this);\n  }\n\n  parentModel(): DOMModel|null {\n    const parentTarget = this.target().parentTarget();\n    return parentTarget ? parentTarget.model(DOMModel) : null;\n  }\n\n  getAgent(): ProtocolProxyApi.DOMApi {\n    return this.agent;\n  }\n\n  registerNode(node: DOMNode): void {\n    this.idToDOMNode.set(node.id, node);\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  AttrModified = 'AttrModified',\n  AttrRemoved = 'AttrRemoved',\n  CharacterDataModified = 'CharacterDataModified',\n  DOMMutated = 'DOMMutated',\n  NodeInserted = 'NodeInserted',\n  NodeRemoved = 'NodeRemoved',\n  DocumentUpdated = 'DocumentUpdated',\n  ChildNodeCountUpdated = 'ChildNodeCountUpdated',\n  DistributedNodesChanged = 'DistributedNodesChanged',\n  MarkersChanged = 'MarkersChanged',\n  TopLayerElementsChanged = 'TopLayerElementsChanged',\n}\n\nexport type EventTypes = {\n  [Events.AttrModified]: {node: DOMNode, name: string},\n  [Events.AttrRemoved]: {node: DOMNode, name: string},\n  [Events.CharacterDataModified]: DOMNode,\n  [Events.DOMMutated]: DOMNode,\n  [Events.NodeInserted]: DOMNode,\n  [Events.NodeRemoved]: {node: DOMNode, parent: DOMNode},\n  [Events.DocumentUpdated]: DOMModel,\n  [Events.ChildNodeCountUpdated]: DOMNode,\n  [Events.DistributedNodesChanged]: DOMNode,\n  [Events.MarkersChanged]: DOMNode,\n  [Events.TopLayerElementsChanged]: void,\n};\n\nclass DOMDispatcher implements ProtocolProxyApi.DOMDispatcher {\n  readonly #domModel: DOMModel;\n  constructor(domModel: DOMModel) {\n    this.#domModel = domModel;\n  }\n\n  documentUpdated(): void {\n    this.#domModel.documentUpdated();\n  }\n\n  attributeModified({nodeId, name, value}: Protocol.DOM.AttributeModifiedEvent): void {\n    this.#domModel.attributeModified(nodeId, name, value);\n  }\n\n  attributeRemoved({nodeId, name}: Protocol.DOM.AttributeRemovedEvent): void {\n    this.#domModel.attributeRemoved(nodeId, name);\n  }\n\n  inlineStyleInvalidated({nodeIds}: Protocol.DOM.InlineStyleInvalidatedEvent): void {\n    this.#domModel.inlineStyleInvalidated(nodeIds);\n  }\n\n  characterDataModified({nodeId, characterData}: Protocol.DOM.CharacterDataModifiedEvent): void {\n    this.#domModel.characterDataModified(nodeId, characterData);\n  }\n\n  setChildNodes({parentId, nodes}: Protocol.DOM.SetChildNodesEvent): void {\n    this.#domModel.setChildNodes(parentId, nodes);\n  }\n\n  childNodeCountUpdated({nodeId, childNodeCount}: Protocol.DOM.ChildNodeCountUpdatedEvent): void {\n    this.#domModel.childNodeCountUpdated(nodeId, childNodeCount);\n  }\n\n  childNodeInserted({parentNodeId, previousNodeId, node}: Protocol.DOM.ChildNodeInsertedEvent): void {\n    this.#domModel.childNodeInserted(parentNodeId, previousNodeId, node);\n  }\n\n  childNodeRemoved({parentNodeId, nodeId}: Protocol.DOM.ChildNodeRemovedEvent): void {\n    this.#domModel.childNodeRemoved(parentNodeId, nodeId);\n  }\n\n  shadowRootPushed({hostId, root}: Protocol.DOM.ShadowRootPushedEvent): void {\n    this.#domModel.shadowRootPushed(hostId, root);\n  }\n\n  shadowRootPopped({hostId, rootId}: Protocol.DOM.ShadowRootPoppedEvent): void {\n    this.#domModel.shadowRootPopped(hostId, rootId);\n  }\n\n  pseudoElementAdded({parentId, pseudoElement}: Protocol.DOM.PseudoElementAddedEvent): void {\n    this.#domModel.pseudoElementAdded(parentId, pseudoElement);\n  }\n\n  pseudoElementRemoved({parentId, pseudoElementId}: Protocol.DOM.PseudoElementRemovedEvent): void {\n    this.#domModel.pseudoElementRemoved(parentId, pseudoElementId);\n  }\n\n  distributedNodesUpdated({insertionPointId, distributedNodes}: Protocol.DOM.DistributedNodesUpdatedEvent): void {\n    this.#domModel.distributedNodesUpdated(insertionPointId, distributedNodes);\n  }\n\n  topLayerElementsUpdated(): void {\n    this.#domModel.topLayerElementsUpdated();\n  }\n}\n\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DOMModelUndoStackInstance: DOMModelUndoStack|null;\n\nexport class DOMModelUndoStack {\n  #stack: DOMModel[];\n  #index: number;\n  #lastModelWithMinorChange: DOMModel|null;\n  constructor() {\n    this.#stack = [];\n    this.#index = 0;\n    this.#lastModelWithMinorChange = null;\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): DOMModelUndoStack {\n    const {forceNew} = opts;\n    if (!DOMModelUndoStackInstance || forceNew) {\n      DOMModelUndoStackInstance = new DOMModelUndoStack();\n    }\n\n    return DOMModelUndoStackInstance;\n  }\n\n  async markUndoableState(model: DOMModel, minorChange: boolean): Promise<void> {\n    // Both minor and major changes get into the #stack, but minor updates are coalesced.\n    // Commit major undoable state in the old model upon model switch.\n    if (this.#lastModelWithMinorChange && model !== this.#lastModelWithMinorChange) {\n      this.#lastModelWithMinorChange.markUndoableState();\n      this.#lastModelWithMinorChange = null;\n    }\n\n    // Previous minor change is already in the #stack.\n    if (minorChange && this.#lastModelWithMinorChange === model) {\n      return;\n    }\n\n    this.#stack = this.#stack.slice(0, this.#index);\n    this.#stack.push(model);\n    this.#index = this.#stack.length;\n\n    // Delay marking as major undoable states in case of minor operations until the\n    // major or model switch.\n    if (minorChange) {\n      this.#lastModelWithMinorChange = model;\n    } else {\n      await model.getAgent().invoke_markUndoableState();\n      this.#lastModelWithMinorChange = null;\n    }\n  }\n\n  async undo(): Promise<void> {\n    if (this.#index === 0) {\n      return Promise.resolve();\n    }\n    --this.#index;\n    this.#lastModelWithMinorChange = null;\n    await this.#stack[this.#index].getAgent().invoke_undo();\n  }\n\n  async redo(): Promise<void> {\n    if (this.#index >= this.#stack.length) {\n      return Promise.resolve();\n    }\n    ++this.#index;\n    this.#lastModelWithMinorChange = null;\n    await this.#stack[this.#index - 1].getAgent().invoke_redo();\n  }\n\n  dispose(model: DOMModel): void {\n    let shift = 0;\n    for (let i = 0; i < this.#index; ++i) {\n      if (this.#stack[i] === model) {\n        ++shift;\n      }\n    }\n    Platform.ArrayUtilities.removeElement(this.#stack, model);\n    this.#index -= shift;\n    if (this.#lastModelWithMinorChange === model) {\n      this.#lastModelWithMinorChange = null;\n    }\n  }\n}\n\nSDKModel.register(DOMModel, {capabilities: Capability.DOM, autostart: true});\nexport interface Attribute {\n  name: string;\n  value: string;\n  _node: DOMNode;\n}\n"],
  "mappings": "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",
  "names": []
}
