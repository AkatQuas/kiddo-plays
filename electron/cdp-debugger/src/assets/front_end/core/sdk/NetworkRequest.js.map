{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/NetworkRequest.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the #name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Protocol from '../../generated/protocol.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Common from '../common/common.js';\nimport * as i18n from '../i18n/i18n.js';\nimport * as Platform from '../platform/platform.js';\n\nimport type {Cookie} from './Cookie.js';\nimport {Attributes} from './Cookie.js';\nimport {CookieParser} from './CookieParser.js';\nimport {NetworkManager, Events as NetworkManagerEvents} from './NetworkManager.js';\nimport {Type} from './Target.js';\nimport {ServerTiming} from './ServerTiming.js';\n\n// clang-format off\nconst UIStrings = {\n  /**\n  *@description Text in Network Request\n  */\n  binary: '(binary)',\n  /**\n  *@description Tooltip to explain why a cookie was blocked\n  */\n  secureOnly: 'This cookie was blocked because it had the \"`Secure`\" attribute and the connection was not secure.',\n  /**\n  *@description Tooltip to explain why a cookie was blocked\n  */\n  notOnPath: 'This cookie was blocked because its path was not an exact match for or a superdirectory of the request url\\'s path.',\n  /**\n  *@description Tooltip to explain why a cookie was blocked\n  */\n  domainMismatch: 'This cookie was blocked because neither did the request URL\\'s domain exactly match the cookie\\'s domain, nor was the request URL\\'s domain a subdomain of the cookie\\'s Domain attribute value.',\n  /**\n  *@description Tooltip to explain why a cookie was blocked\n  */\n  sameSiteStrict: 'This cookie was blocked because it had the \"`SameSite=Strict`\" attribute and the request was made from a different site. This includes top-level navigation requests initiated by other sites.',\n  /**\n  *@description Tooltip to explain why a cookie was blocked\n  */\n  sameSiteLax: 'This cookie was blocked because it had the \"`SameSite=Lax`\" attribute and the request was made from a different site and was not initiated by a top-level navigation.',\n  /**\n  *@description Tooltip to explain why a cookie was blocked\n  */\n  sameSiteUnspecifiedTreatedAsLax: 'This cookie didn\\'t specify a \"`SameSite`\" attribute when it was stored and was defaulted to \"SameSite=Lax,\" and was blocked because the request was made from a different site and was not initiated by a top-level navigation. The cookie had to have been set with \"`SameSite=None`\" to enable cross-site usage.',\n  /**\n  *@description Tooltip to explain why a cookie was blocked\n  */\n  sameSiteNoneInsecure: 'This cookie was blocked because it had the \"`SameSite=None`\" attribute but was not marked \"Secure\". Cookies without SameSite restrictions must be marked \"Secure\" and sent over a secure connection.',\n  /**\n  *@description Tooltip to explain why a cookie was blocked\n  */\n  userPreferences: 'This cookie was blocked due to user preferences.',\n  /**\n  *@description Tooltip to explain why a cookie was blocked\n  */\n  unknownError: 'An unknown error was encountered when trying to send this cookie.',\n  /**\n  *@description Tooltip to explain why a cookie was blocked due to Schemeful Same-Site\n  */\n  schemefulSameSiteStrict: 'This cookie was blocked because it had the \"`SameSite=Strict`\" attribute but the request was cross-site. This includes top-level navigation requests initiated by other sites. This request is considered cross-site because the URL has a different scheme than the current site.',\n  /**\n  *@description Tooltip to explain why a cookie was blocked due to Schemeful Same-Site\n  */\n  schemefulSameSiteLax: 'This cookie was blocked because it had the \"`SameSite=Lax`\" attribute but the request was cross-site and was not initiated by a top-level navigation. This request is considered cross-site because the URL has a different scheme than the current site.',\n  /**\n  *@description Tooltip to explain why a cookie was blocked due to Schemeful Same-Site\n  */\n  schemefulSameSiteUnspecifiedTreatedAsLax: 'This cookie didn\\'t specify a \"`SameSite`\" attribute when it was stored, was defaulted to \"`SameSite=Lax\"`, and was blocked because the request was cross-site and was not initiated by a top-level navigation. This request is considered cross-site because the URL has a different scheme than the current site.',\n  /**\n  *@description Tooltip to explain why a cookie was blocked due to SameParty\n  */\n  samePartyFromCrossPartyContext: 'This cookie was blocked because it had the \"`SameParty`\" attribute but the request was cross-party. The request was considered cross-party because the domain of the resource\\'s URL and the domains of the resource\\'s enclosing frames/documents are neither owners nor members in the same First-Party Set.',\n  /**\n  *@description Tooltip to explain why a cookie was blocked due to exceeding the maximum size\n  */\n  nameValuePairExceedsMaxSize: 'This cookie was blocked because it was too large. The combined size of the name and value must be less than or equal to 4096 characters.',\n  /**\n  *@description Tooltip to explain why an attempt to set a cookie via `Set-Cookie` HTTP header on a request's response was blocked.\n  */\n  thisSetcookieWasBlockedDueToUser: 'This attempt to set a cookie via a `Set-Cookie` header was blocked due to user preferences.',\n  /**\n  *@description Tooltip to explain why an attempt to set a cookie via `Set-Cookie` HTTP header on a request's response was blocked.\n  */\n  thisSetcookieHadInvalidSyntax: 'This `Set-Cookie` header had invalid syntax.',\n  /**\n  *@description Tooltip to explain why a cookie was blocked\n  */\n  theSchemeOfThisConnectionIsNot: 'The scheme of this connection is not allowed to store cookies.',\n  /**\n  *@description Tooltip to explain why a cookie was blocked\n  */\n  anUnknownErrorWasEncounteredWhenTrying: 'An unknown error was encountered when trying to store this cookie.',\n  /**\n  *@description Tooltip to explain why a cookie was blocked due to Schemeful Same-Site\n  *@example {SameSite=Strict} PH1\n  */\n  thisSetcookieWasBlockedBecauseItHadTheSamesiteStrictLax: 'This attempt to set a cookie via a `Set-Cookie` header was blocked because it had the \"{PH1}\" attribute but came from a cross-site response which was not the response to a top-level navigation. This response is considered cross-site because the URL has a different scheme than the current site.',\n  /**\n  *@description Tooltip to explain why a cookie was blocked due to Schemeful Same-Site\n  */\n  thisSetcookieDidntSpecifyASamesite: 'This `Set-Cookie` header didn\\'t specify a \"`SameSite`\" attribute, was defaulted to \"`SameSite=Lax\"`, and was blocked because it came from a cross-site response which was not the response to a top-level navigation. This response is considered cross-site because the URL has a different scheme than the current site.',\n  /**\n  *@description Tooltip to explain why a cookie was blocked due to SameParty\n  */\n  thisSetcookieWasBlockedBecauseItHadTheSameparty: 'This attempt to set a cookie via a `Set-Cookie` header was blocked because it had the \"`SameParty`\" attribute but the request was cross-party. The request was considered cross-party because the domain of the resource\\'s URL and the domains of the resource\\'s enclosing frames/documents are neither owners nor members in the same First-Party Set.',\n  /**\n  *@description Tooltip to explain why a cookie was blocked due to SameParty\n  */\n  thisSetcookieWasBlockedBecauseItHadTheSamepartyAttribute: 'This attempt to set a cookie via a `Set-Cookie` header was blocked because it had the \"`SameParty`\" attribute but also had other conflicting attributes. Chrome requires cookies that use the \"`SameParty`\" attribute to also have the \"Secure\" attribute, and to not be restricted to \"`SameSite=Strict`\".',\n  /**\n  *@description Tooltip to explain why an attempt to set a cookie via a `Set-Cookie` HTTP header on a request's response was blocked.\n  */\n  blockedReasonSecureOnly: 'This attempt to set a cookie via a `Set-Cookie` header was blocked because it had the \"Secure\" attribute but was not received over a secure connection.',\n  /**\n   *@description Tooltip to explain why an attempt to set a cookie via a `Set-Cookie` HTTP header on a request's response was blocked.\n   *@example {SameSite=Strict} PH1\n  */\n  blockedReasonSameSiteStrictLax: 'This attempt to set a cookie via a `Set-Cookie` header was blocked because it had the \"{PH1}\" attribute but came from a cross-site response which was not the response to a top-level navigation.',\n  /**\n   *@description Tooltip to explain why an attempt to set a cookie via a `Set-Cookie` HTTP header on a request's response was blocked.\n  */\n  blockedReasonSameSiteUnspecifiedTreatedAsLax: 'This `Set-Cookie` header didn\\'t specify a \"`SameSite`\" attribute and was defaulted to \"`SameSite=Lax,`\" and was blocked because it came from a cross-site response which was not the response to a top-level navigation. The `Set-Cookie` had to have been set with \"`SameSite=None`\" to enable cross-site usage.',\n  /**\n   *@description Tooltip to explain why an attempt to set a cookie via a `Set-Cookie` HTTP header on a request's response was blocked.\n  */\n  blockedReasonSameSiteNoneInsecure: 'This attempt to set a cookie via a `Set-Cookie` header was blocked because it had the \"`SameSite=None`\" attribute but did not have the \"Secure\" attribute, which is required in order to use \"`SameSite=None`\".',\n  /**\n   *@description Tooltip to explain why an attempt to set a cookie via a `Set-Cookie` HTTP header on a request's response was blocked.\n  */\n  blockedReasonOverwriteSecure: 'This attempt to set a cookie via a `Set-Cookie` header was blocked because it was not sent over a secure connection and would have overwritten a cookie with the Secure attribute.',\n  /**\n   *@description Tooltip to explain why an attempt to set a cookie via a `Set-Cookie` HTTP header on a request's response was blocked.\n  */\n  blockedReasonInvalidDomain: 'This attempt to set a cookie via a `Set-Cookie` header was blocked because its Domain attribute was invalid with regards to the current host url.',\n  /**\n   *@description Tooltip to explain why an attempt to set a cookie via a `Set-Cookie` HTTP header on a request's response was blocked.\n  */\n  blockedReasonInvalidPrefix: 'This attempt to set a cookie via a `Set-Cookie` header was blocked because it used the \"`__Secure-`\" or \"`__Host-`\" prefix in its name and broke the additional rules applied to cookies with these prefixes as defined in `https://tools.ietf.org/html/draft-west-cookie-prefixes-05`.',\n  /**\n   *@description Tooltip to explain why a cookie was blocked when the size of the #name plus the size of the value exceeds the max size.\n  */\n  thisSetcookieWasBlockedBecauseTheNameValuePairExceedsMaxSize: 'This attempt to set a cookie via a `Set-Cookie` header was blocked because the cookie was too large. The combined size of the name and value must be less than or equal to 4096 characters.',\n  /**\n  *@description Text in Network Manager\n  *@example {https://example.com} PH1\n  */\n  setcookieHeaderIsIgnoredIn: 'Set-Cookie header is ignored in response from url: {PH1}. The combined size of the name and value must be less than or equal to 4096 characters.',\n\n};\n// clang-format on\n\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/NetworkRequest.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum, @typescript-eslint/naming-convention\nexport enum MIME_TYPE {\n  HTML = 'text/html',\n  XML = 'text/xml',\n  PLAIN = 'text/plain',\n  XHTML = 'application/xhtml+xml',\n  SVG = 'image/svg+xml',\n  CSS = 'text/css',\n  XSL = 'text/xsl',\n  VTT = 'text/vtt',\n  PDF = 'application/pdf',\n  EVENTSTREAM = 'text/event-stream',\n}\n\nexport class NetworkRequest extends Common.ObjectWrapper.ObjectWrapper<EventTypes> implements\n    TextUtils.ContentProvider.ContentProvider {\n  #requestIdInternal: string;\n  #backendRequestIdInternal?: Protocol.Network.RequestId;\n  readonly #documentURLInternal: Platform.DevToolsPath.UrlString;\n  readonly #frameIdInternal: Protocol.Page.FrameId|null;\n  readonly #loaderIdInternal: Protocol.Network.LoaderId|null;\n  readonly #initiatorInternal: Protocol.Network.Initiator|null|undefined;\n  #redirectSourceInternal: NetworkRequest|null;\n  #preflightRequestInternal: NetworkRequest|null;\n  #preflightInitiatorRequestInternal: NetworkRequest|null;\n  #isRedirectInternal: boolean;\n  #redirectDestinationInternal: NetworkRequest|null;\n  #issueTimeInternal: number;\n  #startTimeInternal: number;\n  #endTimeInternal: number;\n  #blockedReasonInternal: Protocol.Network.BlockedReason|undefined;\n  #corsErrorStatusInternal: Protocol.Network.CorsErrorStatus|undefined;\n  statusCode: number;\n  statusText: string;\n  requestMethod: string;\n  requestTime: number;\n  protocol: string;\n  mixedContentType: Protocol.Security.MixedContentType;\n  #initialPriorityInternal: Protocol.Network.ResourcePriority|null;\n  #currentPriority: Protocol.Network.ResourcePriority|null;\n  #signedExchangeInfoInternal: Protocol.Network.SignedExchangeInfo|null;\n  #webBundleInfoInternal: WebBundleInfo|null;\n  #webBundleInnerRequestInfoInternal: WebBundleInnerRequestInfo|null;\n  #resourceTypeInternal: Common.ResourceType.ResourceType;\n  #contentDataInternal: Promise<ContentData>|null;\n  readonly #framesInternal: WebSocketFrame[];\n  readonly #eventSourceMessagesInternal: EventSourceMessage[];\n  #responseHeaderValues: {\n    [x: string]: string|undefined,\n  };\n  #responseHeadersTextInternal: string;\n  #requestHeadersInternal: NameValue[];\n  #requestHeaderValues: {\n    [x: string]: string|undefined,\n  };\n  #remoteAddressInternal: string;\n  #remoteAddressSpaceInternal: Protocol.Network.IPAddressSpace;\n  #referrerPolicyInternal: Protocol.Network.RequestReferrerPolicy|null;\n  #securityStateInternal: Protocol.Security.SecurityState;\n  #securityDetailsInternal: Protocol.Network.SecurityDetails|null;\n  connectionId: string;\n  connectionReused: boolean;\n  hasNetworkData: boolean;\n  #formParametersPromise: Promise<NameValue[]|null>|null;\n  #requestFormDataPromise: Promise<string|null>|null;\n  #hasExtraRequestInfoInternal: boolean;\n  #hasExtraResponseInfoInternal: boolean;\n  #blockedRequestCookiesInternal: BlockedCookieWithReason[];\n  #includedRequestCookiesInternal: Cookie[];\n  #blockedResponseCookiesInternal: BlockedSetCookieWithReason[];\n  localizedFailDescription: string|null;\n  #urlInternal!: Platform.DevToolsPath.UrlString;\n  #responseReceivedTimeInternal!: number;\n  #transferSizeInternal!: number;\n  #finishedInternal!: boolean;\n  #failedInternal!: boolean;\n  #canceledInternal!: boolean;\n  #preservedInternal!: boolean;\n  #mimeTypeInternal!: MIME_TYPE;\n  #parsedURLInternal!: Common.ParsedURL.ParsedURL;\n  #nameInternal!: string|undefined;\n  #pathInternal!: string|undefined;\n  #clientSecurityStateInternal!: Protocol.Network.ClientSecurityState|undefined;\n  #trustTokenParamsInternal!: Protocol.Network.TrustTokenParams|undefined;\n  #trustTokenOperationDoneEventInternal!: Protocol.Network.TrustTokenOperationDoneEvent|undefined;\n  #responseCacheStorageCacheName?: string;\n  #serviceWorkerResponseSourceInternal?: Protocol.Network.ServiceWorkerResponseSource;\n  #wallIssueTime?: number;\n  #responseRetrievalTime?: Date;\n  #resourceSizeInternal?: number;\n  #fromMemoryCache?: boolean;\n  #fromDiskCache?: boolean;\n  #fromPrefetchCacheInternal?: boolean;\n  #fetchedViaServiceWorkerInternal?: boolean;\n  #timingInternal?: Protocol.Network.ResourceTiming;\n  #requestHeadersTextInternal?: string;\n  #responseHeadersInternal?: NameValue[];\n  #sortedResponseHeadersInternal?: NameValue[];\n  #responseCookiesInternal?: Cookie[];\n  #serverTimingsInternal?: ServerTiming[]|null;\n  #queryStringInternal?: string|null;\n  #parsedQueryParameters?: NameValue[];\n  #contentDataProvider?: (() => Promise<ContentData>);\n  #isSameSiteInternal: boolean|null;\n  #wasIntercepted: boolean;\n\n  private constructor(\n      requestId: string, backendRequestId: Protocol.Network.RequestId|undefined, url: Platform.DevToolsPath.UrlString,\n      documentURL: Platform.DevToolsPath.UrlString, frameId: Protocol.Page.FrameId|null,\n      loaderId: Protocol.Network.LoaderId|null, initiator: Protocol.Network.Initiator|null) {\n    super();\n\n    this.#requestIdInternal = requestId;\n    this.#backendRequestIdInternal = backendRequestId;\n    this.setUrl(url);\n    this.#documentURLInternal = documentURL;\n    this.#frameIdInternal = frameId;\n    this.#loaderIdInternal = loaderId;\n    this.#initiatorInternal = initiator;\n    this.#redirectSourceInternal = null;\n    this.#preflightRequestInternal = null;\n    this.#preflightInitiatorRequestInternal = null;\n    this.#isRedirectInternal = false;\n    this.#redirectDestinationInternal = null;\n    this.#issueTimeInternal = -1;\n    this.#startTimeInternal = -1;\n    this.#endTimeInternal = -1;\n    this.#blockedReasonInternal = undefined;\n    this.#corsErrorStatusInternal = undefined;\n\n    this.statusCode = 0;\n    this.statusText = '';\n    this.requestMethod = '';\n    this.requestTime = 0;\n    this.protocol = '';\n    this.mixedContentType = Protocol.Security.MixedContentType.None;\n\n    this.#initialPriorityInternal = null;\n    this.#currentPriority = null;\n\n    this.#signedExchangeInfoInternal = null;\n    this.#webBundleInfoInternal = null;\n    this.#webBundleInnerRequestInfoInternal = null;\n\n    this.#resourceTypeInternal = Common.ResourceType.resourceTypes.Other;\n    this.#contentDataInternal = null;\n    this.#framesInternal = [];\n    this.#eventSourceMessagesInternal = [];\n\n    this.#responseHeaderValues = {};\n    this.#responseHeadersTextInternal = '';\n\n    this.#requestHeadersInternal = [];\n    this.#requestHeaderValues = {};\n\n    this.#remoteAddressInternal = '';\n    this.#remoteAddressSpaceInternal = Protocol.Network.IPAddressSpace.Unknown;\n\n    this.#referrerPolicyInternal = null;\n\n    this.#securityStateInternal = Protocol.Security.SecurityState.Unknown;\n    this.#securityDetailsInternal = null;\n\n    this.connectionId = '0';\n    this.connectionReused = false;\n    this.hasNetworkData = false;\n    this.#formParametersPromise = null;\n    this.#requestFormDataPromise = (Promise.resolve(null) as Promise<string|null>| null);\n\n    this.#hasExtraRequestInfoInternal = false;\n    this.#hasExtraResponseInfoInternal = false;\n\n    this.#blockedRequestCookiesInternal = [];\n    this.#includedRequestCookiesInternal = [];\n    this.#blockedResponseCookiesInternal = [];\n\n    this.localizedFailDescription = null;\n    this.#isSameSiteInternal = null;\n\n    this.#wasIntercepted = false;\n  }\n\n  static create(\n      backendRequestId: Protocol.Network.RequestId, url: Platform.DevToolsPath.UrlString,\n      documentURL: Platform.DevToolsPath.UrlString, frameId: Protocol.Page.FrameId|null,\n      loaderId: Protocol.Network.LoaderId|null, initiator: Protocol.Network.Initiator|null): NetworkRequest {\n    return new NetworkRequest(backendRequestId, backendRequestId, url, documentURL, frameId, loaderId, initiator);\n  }\n\n  static createForWebSocket(\n      backendRequestId: Protocol.Network.RequestId, requestURL: Platform.DevToolsPath.UrlString,\n      initiator?: Protocol.Network.Initiator): NetworkRequest {\n    return new NetworkRequest(\n        backendRequestId, backendRequestId, requestURL, Platform.DevToolsPath.EmptyUrlString, null, null,\n        initiator || null);\n  }\n\n  static createWithoutBackendRequest(\n      requestId: string, url: Platform.DevToolsPath.UrlString, documentURL: Platform.DevToolsPath.UrlString,\n      initiator: Protocol.Network.Initiator|null): NetworkRequest {\n    return new NetworkRequest(requestId, undefined, url, documentURL, null, null, initiator);\n  }\n\n  identityCompare(other: NetworkRequest): number {\n    const thisId = this.requestId();\n    const thatId = other.requestId();\n    if (thisId > thatId) {\n      return 1;\n    }\n    if (thisId < thatId) {\n      return -1;\n    }\n    return 0;\n  }\n\n  requestId(): string {\n    return this.#requestIdInternal;\n  }\n\n  backendRequestId(): Protocol.Network.RequestId|undefined {\n    return this.#backendRequestIdInternal;\n  }\n\n  url(): Platform.DevToolsPath.UrlString {\n    return this.#urlInternal;\n  }\n\n  isBlobRequest(): boolean {\n    return this.#urlInternal.startsWith('blob:');\n  }\n\n  setUrl(x: Platform.DevToolsPath.UrlString): void {\n    if (this.#urlInternal === x) {\n      return;\n    }\n\n    this.#urlInternal = x;\n    this.#parsedURLInternal = new Common.ParsedURL.ParsedURL(x);\n    this.#queryStringInternal = undefined;\n    this.#parsedQueryParameters = undefined;\n    this.#nameInternal = undefined;\n    this.#pathInternal = undefined;\n  }\n\n  get documentURL(): Platform.DevToolsPath.UrlString {\n    return this.#documentURLInternal;\n  }\n\n  get parsedURL(): Common.ParsedURL.ParsedURL {\n    return this.#parsedURLInternal;\n  }\n\n  get frameId(): Protocol.Page.FrameId|null {\n    return this.#frameIdInternal;\n  }\n\n  get loaderId(): Protocol.Network.LoaderId|null {\n    return this.#loaderIdInternal;\n  }\n\n  setRemoteAddress(ip: string, port: number): void {\n    this.#remoteAddressInternal = ip + ':' + port;\n    this.dispatchEventToListeners(Events.RemoteAddressChanged, this);\n  }\n\n  remoteAddress(): string {\n    return this.#remoteAddressInternal;\n  }\n\n  remoteAddressSpace(): Protocol.Network.IPAddressSpace {\n    return this.#remoteAddressSpaceInternal;\n  }\n\n  /**\n   * The cache #name of the CacheStorage from where the response is served via\n   * the ServiceWorker.\n   */\n  getResponseCacheStorageCacheName(): string|undefined {\n    return this.#responseCacheStorageCacheName;\n  }\n\n  setResponseCacheStorageCacheName(x: string): void {\n    this.#responseCacheStorageCacheName = x;\n  }\n\n  serviceWorkerResponseSource(): Protocol.Network.ServiceWorkerResponseSource|undefined {\n    return this.#serviceWorkerResponseSourceInternal;\n  }\n\n  setServiceWorkerResponseSource(serviceWorkerResponseSource: Protocol.Network.ServiceWorkerResponseSource): void {\n    this.#serviceWorkerResponseSourceInternal = serviceWorkerResponseSource;\n  }\n\n  setReferrerPolicy(referrerPolicy: Protocol.Network.RequestReferrerPolicy): void {\n    this.#referrerPolicyInternal = referrerPolicy;\n  }\n\n  referrerPolicy(): Protocol.Network.RequestReferrerPolicy|null {\n    return this.#referrerPolicyInternal;\n  }\n\n  securityState(): Protocol.Security.SecurityState {\n    return this.#securityStateInternal;\n  }\n\n  setSecurityState(securityState: Protocol.Security.SecurityState): void {\n    this.#securityStateInternal = securityState;\n  }\n\n  securityDetails(): Protocol.Network.SecurityDetails|null {\n    return this.#securityDetailsInternal;\n  }\n\n  securityOrigin(): string {\n    return this.#parsedURLInternal.securityOrigin();\n  }\n\n  setSecurityDetails(securityDetails: Protocol.Network.SecurityDetails): void {\n    this.#securityDetailsInternal = securityDetails;\n  }\n\n  get startTime(): number {\n    return this.#startTimeInternal || -1;\n  }\n\n  setIssueTime(monotonicTime: number, wallTime: number): void {\n    this.#issueTimeInternal = monotonicTime;\n    this.#wallIssueTime = wallTime;\n    this.#startTimeInternal = monotonicTime;\n  }\n\n  issueTime(): number {\n    return this.#issueTimeInternal;\n  }\n\n  pseudoWallTime(monotonicTime: number): number {\n    return this.#wallIssueTime ? this.#wallIssueTime - this.#issueTimeInternal + monotonicTime : monotonicTime;\n  }\n\n  get responseReceivedTime(): number {\n    return this.#responseReceivedTimeInternal || -1;\n  }\n\n  set responseReceivedTime(x: number) {\n    this.#responseReceivedTimeInternal = x;\n  }\n\n  /**\n   * The time at which the returned response was generated. For cached\n   * responses, this is the last time the cache entry was validated.\n   */\n  getResponseRetrievalTime(): Date|undefined {\n    return this.#responseRetrievalTime;\n  }\n\n  setResponseRetrievalTime(x: Date): void {\n    this.#responseRetrievalTime = x;\n  }\n\n  get endTime(): number {\n    return this.#endTimeInternal || -1;\n  }\n\n  set endTime(x: number) {\n    if (this.timing && this.timing.requestTime) {\n      // Check against accurate responseReceivedTime.\n      this.#endTimeInternal = Math.max(x, this.responseReceivedTime);\n    } else {\n      // Prefer endTime since it might be from the network stack.\n      this.#endTimeInternal = x;\n      if (this.#responseReceivedTimeInternal > x) {\n        this.#responseReceivedTimeInternal = x;\n      }\n    }\n    this.dispatchEventToListeners(Events.TimingChanged, this);\n  }\n\n  get duration(): number {\n    if (this.#endTimeInternal === -1 || this.#startTimeInternal === -1) {\n      return -1;\n    }\n    return this.#endTimeInternal - this.#startTimeInternal;\n  }\n\n  get latency(): number {\n    if (this.#responseReceivedTimeInternal === -1 || this.#startTimeInternal === -1) {\n      return -1;\n    }\n    return this.#responseReceivedTimeInternal - this.#startTimeInternal;\n  }\n\n  get resourceSize(): number {\n    return this.#resourceSizeInternal || 0;\n  }\n\n  set resourceSize(x: number) {\n    this.#resourceSizeInternal = x;\n  }\n\n  get transferSize(): number {\n    return this.#transferSizeInternal || 0;\n  }\n\n  increaseTransferSize(x: number): void {\n    this.#transferSizeInternal = (this.#transferSizeInternal || 0) + x;\n  }\n\n  setTransferSize(x: number): void {\n    this.#transferSizeInternal = x;\n  }\n\n  get finished(): boolean {\n    return this.#finishedInternal;\n  }\n\n  set finished(x: boolean) {\n    if (this.#finishedInternal === x) {\n      return;\n    }\n\n    this.#finishedInternal = x;\n\n    if (x) {\n      this.dispatchEventToListeners(Events.FinishedLoading, this);\n    }\n  }\n\n  get failed(): boolean {\n    return this.#failedInternal;\n  }\n\n  set failed(x: boolean) {\n    this.#failedInternal = x;\n  }\n\n  get canceled(): boolean {\n    return this.#canceledInternal;\n  }\n\n  set canceled(x: boolean) {\n    this.#canceledInternal = x;\n  }\n\n  get preserved(): boolean {\n    return this.#preservedInternal;\n  }\n\n  set preserved(x: boolean) {\n    this.#preservedInternal = x;\n  }\n\n  blockedReason(): Protocol.Network.BlockedReason|undefined {\n    return this.#blockedReasonInternal;\n  }\n\n  setBlockedReason(reason: Protocol.Network.BlockedReason): void {\n    this.#blockedReasonInternal = reason;\n  }\n\n  corsErrorStatus(): Protocol.Network.CorsErrorStatus|undefined {\n    return this.#corsErrorStatusInternal;\n  }\n\n  setCorsErrorStatus(corsErrorStatus: Protocol.Network.CorsErrorStatus): void {\n    this.#corsErrorStatusInternal = corsErrorStatus;\n  }\n\n  wasBlocked(): boolean {\n    return Boolean(this.#blockedReasonInternal);\n  }\n\n  cached(): boolean {\n    return (Boolean(this.#fromMemoryCache) || Boolean(this.#fromDiskCache)) && !this.#transferSizeInternal;\n  }\n\n  cachedInMemory(): boolean {\n    return Boolean(this.#fromMemoryCache) && !this.#transferSizeInternal;\n  }\n\n  fromPrefetchCache(): boolean {\n    return Boolean(this.#fromPrefetchCacheInternal);\n  }\n\n  setFromMemoryCache(): void {\n    this.#fromMemoryCache = true;\n    this.#timingInternal = undefined;\n  }\n\n  get fromDiskCache(): boolean|undefined {\n    return this.#fromDiskCache;\n  }\n\n  setFromDiskCache(): void {\n    this.#fromDiskCache = true;\n  }\n\n  setFromPrefetchCache(): void {\n    this.#fromPrefetchCacheInternal = true;\n  }\n\n  /**\n   * Returns true if the request was intercepted by a service worker and it\n   * provided its own response.\n   */\n  get fetchedViaServiceWorker(): boolean {\n    return Boolean(this.#fetchedViaServiceWorkerInternal);\n  }\n\n  set fetchedViaServiceWorker(x: boolean) {\n    this.#fetchedViaServiceWorkerInternal = x;\n  }\n\n  /**\n   * Returns true if the request was sent by a service worker.\n   */\n  initiatedByServiceWorker(): boolean {\n    const networkManager = NetworkManager.forRequest(this);\n    if (!networkManager) {\n      return false;\n    }\n    return networkManager.target().type() === Type.ServiceWorker;\n  }\n\n  get timing(): Protocol.Network.ResourceTiming|undefined {\n    return this.#timingInternal;\n  }\n\n  set timing(timingInfo: Protocol.Network.ResourceTiming|undefined) {\n    if (!timingInfo || this.#fromMemoryCache) {\n      return;\n    }\n    // Take startTime and responseReceivedTime from timing data for better accuracy.\n    // Timing's requestTime is a baseline in seconds, rest of the numbers there are ticks in millis.\n    this.#startTimeInternal = timingInfo.requestTime;\n    const headersReceivedTime = timingInfo.requestTime + timingInfo.receiveHeadersEnd / 1000.0;\n    if ((this.#responseReceivedTimeInternal || -1) < 0 || this.#responseReceivedTimeInternal > headersReceivedTime) {\n      this.#responseReceivedTimeInternal = headersReceivedTime;\n    }\n    if (this.#startTimeInternal > this.#responseReceivedTimeInternal) {\n      this.#responseReceivedTimeInternal = this.#startTimeInternal;\n    }\n\n    this.#timingInternal = timingInfo;\n    this.dispatchEventToListeners(Events.TimingChanged, this);\n  }\n\n  private setConnectTimingFromExtraInfo(connectTiming: Protocol.Network.ConnectTiming): void {\n    this.#startTimeInternal = connectTiming.requestTime;\n    this.dispatchEventToListeners(Events.TimingChanged, this);\n  }\n\n  get mimeType(): MIME_TYPE {\n    return this.#mimeTypeInternal;\n  }\n\n  set mimeType(x: MIME_TYPE) {\n    this.#mimeTypeInternal = x;\n  }\n\n  get displayName(): string {\n    return this.#parsedURLInternal.displayName;\n  }\n\n  name(): string {\n    if (this.#nameInternal) {\n      return this.#nameInternal;\n    }\n    this.parseNameAndPathFromURL();\n    return this.#nameInternal as string;\n  }\n\n  path(): string {\n    if (this.#pathInternal) {\n      return this.#pathInternal;\n    }\n    this.parseNameAndPathFromURL();\n    return this.#pathInternal as string;\n  }\n\n  private parseNameAndPathFromURL(): void {\n    if (this.#parsedURLInternal.isDataURL()) {\n      this.#nameInternal = this.#parsedURLInternal.dataURLDisplayName();\n      this.#pathInternal = '';\n    } else if (this.#parsedURLInternal.isBlobURL()) {\n      this.#nameInternal = this.#parsedURLInternal.url;\n      this.#pathInternal = '';\n    } else if (this.#parsedURLInternal.isAboutBlank()) {\n      this.#nameInternal = this.#parsedURLInternal.url;\n      this.#pathInternal = '';\n    } else {\n      this.#pathInternal = this.#parsedURLInternal.host + this.#parsedURLInternal.folderPathComponents;\n\n      const networkManager = NetworkManager.forRequest(this);\n      const inspectedURL =\n          networkManager ? Common.ParsedURL.ParsedURL.fromString(networkManager.target().inspectedURL()) : null;\n      this.#pathInternal = Platform.StringUtilities.trimURL(this.#pathInternal, inspectedURL ? inspectedURL.host : '');\n      if (this.#parsedURLInternal.lastPathComponent || this.#parsedURLInternal.queryParams) {\n        this.#nameInternal = this.#parsedURLInternal.lastPathComponent +\n            (this.#parsedURLInternal.queryParams ? '?' + this.#parsedURLInternal.queryParams : '');\n      } else if (this.#parsedURLInternal.folderPathComponents) {\n        this.#nameInternal = this.#parsedURLInternal.folderPathComponents.substring(\n                                 this.#parsedURLInternal.folderPathComponents.lastIndexOf('/') + 1) +\n            '/';\n        this.#pathInternal = this.#pathInternal.substring(0, this.#pathInternal.lastIndexOf('/'));\n      } else {\n        this.#nameInternal = this.#parsedURLInternal.host;\n        this.#pathInternal = '';\n      }\n    }\n  }\n\n  get folder(): string {\n    let path: string = this.#parsedURLInternal.path;\n    const indexOfQuery = path.indexOf('?');\n    if (indexOfQuery !== -1) {\n      path = path.substring(0, indexOfQuery);\n    }\n    const lastSlashIndex = path.lastIndexOf('/');\n    return lastSlashIndex !== -1 ? path.substring(0, lastSlashIndex) : '';\n  }\n\n  get pathname(): string {\n    return this.#parsedURLInternal.path;\n  }\n\n  resourceType(): Common.ResourceType.ResourceType {\n    return this.#resourceTypeInternal;\n  }\n\n  setResourceType(resourceType: Common.ResourceType.ResourceType): void {\n    this.#resourceTypeInternal = resourceType;\n  }\n\n  get domain(): string {\n    return this.#parsedURLInternal.host;\n  }\n\n  get scheme(): string {\n    return this.#parsedURLInternal.scheme;\n  }\n\n  redirectSource(): NetworkRequest|null {\n    return this.#redirectSourceInternal;\n  }\n\n  setRedirectSource(originatingRequest: NetworkRequest|null): void {\n    this.#redirectSourceInternal = originatingRequest;\n  }\n\n  preflightRequest(): NetworkRequest|null {\n    return this.#preflightRequestInternal;\n  }\n\n  setPreflightRequest(preflightRequest: NetworkRequest|null): void {\n    this.#preflightRequestInternal = preflightRequest;\n  }\n\n  preflightInitiatorRequest(): NetworkRequest|null {\n    return this.#preflightInitiatorRequestInternal;\n  }\n\n  setPreflightInitiatorRequest(preflightInitiatorRequest: NetworkRequest|null): void {\n    this.#preflightInitiatorRequestInternal = preflightInitiatorRequest;\n  }\n\n  isPreflightRequest(): boolean {\n    return this.#initiatorInternal !== null && this.#initiatorInternal !== undefined &&\n        this.#initiatorInternal.type === Protocol.Network.InitiatorType.Preflight;\n  }\n\n  redirectDestination(): NetworkRequest|null {\n    return this.#redirectDestinationInternal;\n  }\n\n  setRedirectDestination(redirectDestination: NetworkRequest|null): void {\n    this.#redirectDestinationInternal = redirectDestination;\n  }\n\n  requestHeaders(): NameValue[] {\n    return this.#requestHeadersInternal;\n  }\n\n  setRequestHeaders(headers: NameValue[]): void {\n    this.#requestHeadersInternal = headers;\n\n    this.dispatchEventToListeners(Events.RequestHeadersChanged);\n  }\n\n  requestHeadersText(): string|undefined {\n    return this.#requestHeadersTextInternal;\n  }\n\n  setRequestHeadersText(text: string): void {\n    this.#requestHeadersTextInternal = text;\n\n    this.dispatchEventToListeners(Events.RequestHeadersChanged);\n  }\n\n  requestHeaderValue(headerName: string): string|undefined {\n    if (this.#requestHeaderValues[headerName]) {\n      return this.#requestHeaderValues[headerName];\n    }\n    this.#requestHeaderValues[headerName] = this.computeHeaderValue(this.requestHeaders(), headerName);\n    return this.#requestHeaderValues[headerName];\n  }\n\n  requestFormData(): Promise<string|null> {\n    if (!this.#requestFormDataPromise) {\n      this.#requestFormDataPromise = NetworkManager.requestPostData(this);\n    }\n    return this.#requestFormDataPromise;\n  }\n\n  setRequestFormData(hasData: boolean, data: string|null): void {\n    this.#requestFormDataPromise = (hasData && data === null) ? null : Promise.resolve(data);\n    this.#formParametersPromise = null;\n  }\n\n  private filteredProtocolName(): string {\n    const protocol = this.protocol.toLowerCase();\n    if (protocol === 'h2') {\n      return 'http/2.0';\n    }\n    return protocol.replace(/^http\\/2(\\.0)?\\+/, 'http/2.0+');\n  }\n\n  requestHttpVersion(): string {\n    const headersText = this.requestHeadersText();\n    if (!headersText) {\n      const version = this.requestHeaderValue('version') || this.requestHeaderValue(':version');\n      if (version) {\n        return version;\n      }\n      return this.filteredProtocolName();\n    }\n    const firstLine = headersText.split(/\\r\\n/)[0];\n    const match = firstLine.match(/(HTTP\\/\\d+\\.\\d+)$/);\n    return match ? match[1] : 'HTTP/0.9';\n  }\n\n  get responseHeaders(): NameValue[] {\n    return this.#responseHeadersInternal || [];\n  }\n\n  set responseHeaders(x: NameValue[]) {\n    this.#responseHeadersInternal = x;\n    this.#sortedResponseHeadersInternal = undefined;\n    this.#serverTimingsInternal = undefined;\n    this.#responseCookiesInternal = undefined;\n    this.#responseHeaderValues = {};\n\n    this.dispatchEventToListeners(Events.ResponseHeadersChanged);\n  }\n\n  get responseHeadersText(): string {\n    return this.#responseHeadersTextInternal;\n  }\n\n  set responseHeadersText(x: string) {\n    this.#responseHeadersTextInternal = x;\n\n    this.dispatchEventToListeners(Events.ResponseHeadersChanged);\n  }\n\n  get sortedResponseHeaders(): NameValue[] {\n    if (this.#sortedResponseHeadersInternal !== undefined) {\n      return this.#sortedResponseHeadersInternal;\n    }\n\n    this.#sortedResponseHeadersInternal = this.responseHeaders.slice();\n    this.#sortedResponseHeadersInternal.sort(function(a, b) {\n      return Platform.StringUtilities.compare(a.name.toLowerCase(), b.name.toLowerCase());\n    });\n    return this.#sortedResponseHeadersInternal;\n  }\n\n  responseHeaderValue(headerName: string): string|undefined {\n    if (headerName in this.#responseHeaderValues) {\n      return this.#responseHeaderValues[headerName];\n    }\n    this.#responseHeaderValues[headerName] = this.computeHeaderValue(this.responseHeaders, headerName);\n    return this.#responseHeaderValues[headerName];\n  }\n\n  wasIntercepted(): boolean {\n    return this.#wasIntercepted;\n  }\n\n  setWasIntercepted(wasIntercepted: boolean): void {\n    this.#wasIntercepted = wasIntercepted;\n  }\n\n  get responseCookies(): Cookie[] {\n    if (!this.#responseCookiesInternal) {\n      this.#responseCookiesInternal =\n          CookieParser.parseSetCookie(this.responseHeaderValue('Set-Cookie'), this.domain) || [];\n    }\n    return this.#responseCookiesInternal;\n  }\n\n  responseLastModified(): string|undefined {\n    return this.responseHeaderValue('last-modified');\n  }\n\n  allCookiesIncludingBlockedOnes(): Cookie[] {\n    return [\n      ...this.includedRequestCookies(),\n      ...this.responseCookies,\n      ...this.blockedRequestCookies().map(blockedRequestCookie => blockedRequestCookie.cookie),\n      ...this.blockedResponseCookies().map(blockedResponseCookie => blockedResponseCookie.cookie),\n    ].filter(v => Boolean(v)) as Cookie[];\n  }\n\n  get serverTimings(): ServerTiming[]|null {\n    if (typeof this.#serverTimingsInternal === 'undefined') {\n      this.#serverTimingsInternal = ServerTiming.parseHeaders(this.responseHeaders);\n    }\n    return this.#serverTimingsInternal;\n  }\n\n  queryString(): string|null {\n    if (this.#queryStringInternal !== undefined) {\n      return this.#queryStringInternal;\n    }\n\n    let queryString: string|null = null;\n    const url = this.url();\n    const questionMarkPosition = url.indexOf('?');\n    if (questionMarkPosition !== -1) {\n      queryString = url.substring(questionMarkPosition + 1);\n      const hashSignPosition = queryString.indexOf('#');\n      if (hashSignPosition !== -1) {\n        queryString = queryString.substring(0, hashSignPosition);\n      }\n    }\n    this.#queryStringInternal = queryString;\n    return this.#queryStringInternal;\n  }\n\n  get queryParameters(): NameValue[]|null {\n    if (this.#parsedQueryParameters) {\n      return this.#parsedQueryParameters;\n    }\n    const queryString = this.queryString();\n    if (!queryString) {\n      return null;\n    }\n    this.#parsedQueryParameters = this.parseParameters(queryString);\n    return this.#parsedQueryParameters;\n  }\n\n  private async parseFormParameters(): Promise<NameValue[]|null> {\n    const requestContentType = this.requestContentType();\n\n    if (!requestContentType) {\n      return null;\n    }\n\n    // Handling application/#x-www-form-urlencoded request bodies.\n    if (requestContentType.match(/^application\\/x-www-form-urlencoded\\s*(;.*)?$/i)) {\n      const formData = await this.requestFormData();\n      if (!formData) {\n        return null;\n      }\n\n      return this.parseParameters(formData);\n    }\n\n    // Handling multipart/form-data request bodies.\n    const multipartDetails = requestContentType.match(/^multipart\\/form-data\\s*;\\s*boundary\\s*=\\s*(\\S+)\\s*$/);\n\n    if (!multipartDetails) {\n      return null;\n    }\n\n    const boundary = multipartDetails[1];\n    if (!boundary) {\n      return null;\n    }\n\n    const formData = await this.requestFormData();\n    if (!formData) {\n      return null;\n    }\n\n    return this.parseMultipartFormDataParameters(formData, boundary);\n  }\n\n  formParameters(): Promise<NameValue[]|null> {\n    if (!this.#formParametersPromise) {\n      this.#formParametersPromise = this.parseFormParameters();\n    }\n    return this.#formParametersPromise;\n  }\n\n  responseHttpVersion(): string {\n    const headersText = this.#responseHeadersTextInternal;\n    if (!headersText) {\n      const version = this.responseHeaderValue('version') || this.responseHeaderValue(':version');\n      if (version) {\n        return version;\n      }\n      return this.filteredProtocolName();\n    }\n    const firstLine = headersText.split(/\\r\\n/)[0];\n    const match = firstLine.match(/^(HTTP\\/\\d+\\.\\d+)/);\n    return match ? match[1] : 'HTTP/0.9';\n  }\n\n  private parseParameters(queryString: string): NameValue[] {\n    function parseNameValue(pair: string): {\n      name: string,\n      value: string,\n    } {\n      const position = pair.indexOf('=');\n      if (position === -1) {\n        return {name: pair, value: ''};\n      }\n      return {name: pair.substring(0, position), value: pair.substring(position + 1)};\n    }\n    return queryString.split('&').map(parseNameValue);\n  }\n\n  /**\n   * Parses multipart/form-data; boundary=boundaryString request bodies -\n   * --boundaryString\n   * Content-Disposition: form-data; #name=\"field-#name\"; filename=\"r.gif\"\n   * Content-Type: application/octet-stream\n   *\n   * optionalValue\n   * --boundaryString\n   * Content-Disposition: form-data; #name=\"field-#name-2\"\n   *\n   * optionalValue2\n   * --boundaryString--\n   */\n  private parseMultipartFormDataParameters(data: string, boundary: string): NameValue[] {\n    const sanitizedBoundary = Platform.StringUtilities.escapeForRegExp(boundary);\n    const keyValuePattern = new RegExp(\n        // Header with an optional file #name.\n        '^\\\\r\\\\ncontent-disposition\\\\s*:\\\\s*form-data\\\\s*;\\\\s*name=\"([^\"]*)\"(?:\\\\s*;\\\\s*filename=\"([^\"]*)\")?' +\n            // Optional secondary header with the content type.\n            '(?:\\\\r\\\\ncontent-type\\\\s*:\\\\s*([^\\\\r\\\\n]*))?' +\n            // Padding.\n            '\\\\r\\\\n\\\\r\\\\n' +\n            // Value\n            '(.*)' +\n            // Padding.\n            '\\\\r\\\\n$',\n        'is');\n    const fields = data.split(new RegExp(`--${sanitizedBoundary}(?:--\\s*$)?`, 'g'));\n    return fields.reduce(parseMultipartField, []);\n\n    function parseMultipartField(result: NameValue[], field: string): NameValue[] {\n      const [match, name, filename, contentType, value] = field.match(keyValuePattern) || [];\n\n      if (!match) {\n        return result;\n      }\n\n      const processedValue = (filename || contentType) ? i18nString(UIStrings.binary) : value;\n      result.push({name, value: processedValue});\n\n      return result;\n    }\n  }\n\n  private computeHeaderValue(headers: NameValue[], headerName: string): string|undefined {\n    headerName = headerName.toLowerCase();\n\n    const values = [];\n    for (let i = 0; i < headers.length; ++i) {\n      if (headers[i].name.toLowerCase() === headerName) {\n        values.push(headers[i].value);\n      }\n    }\n    if (!values.length) {\n      return undefined;\n    }\n    // Set-Cookie #values should be separated by '\\n', not comma, otherwise cookies could not be parsed.\n    if (headerName === 'set-cookie') {\n      return values.join('\\n');\n    }\n    return values.join(', ');\n  }\n\n  contentData(): Promise<ContentData> {\n    if (this.#contentDataInternal) {\n      return this.#contentDataInternal;\n    }\n    if (this.#contentDataProvider) {\n      this.#contentDataInternal = this.#contentDataProvider();\n    } else {\n      this.#contentDataInternal = NetworkManager.requestContentData(this);\n    }\n    return this.#contentDataInternal;\n  }\n\n  setContentDataProvider(dataProvider: () => Promise<ContentData>): void {\n    console.assert(!this.#contentDataInternal, 'contentData can only be set once.');\n    this.#contentDataProvider = dataProvider;\n  }\n\n  contentURL(): Platform.DevToolsPath.UrlString {\n    return this.#urlInternal;\n  }\n\n  contentType(): Common.ResourceType.ResourceType {\n    return this.#resourceTypeInternal;\n  }\n\n  async contentEncoded(): Promise<boolean> {\n    return (await this.contentData()).encoded;\n  }\n\n  async requestContent(): Promise<TextUtils.ContentProvider.DeferredContent> {\n    const {content, error, encoded} = await this.contentData();\n    return {\n      content,\n      error,\n      isEncoded: encoded,\n    } as TextUtils.ContentProvider.DeferredContent;\n  }\n\n  async searchInContent(query: string, caseSensitive: boolean, isRegex: boolean):\n      Promise<TextUtils.ContentProvider.SearchMatch[]> {\n    if (!this.#contentDataProvider) {\n      return NetworkManager.searchInRequest(this, query, caseSensitive, isRegex);\n    }\n\n    const contentData = await this.contentData();\n    let content: string|(string | null) = contentData.content;\n    if (!content) {\n      return [];\n    }\n    if (contentData.encoded) {\n      content = window.atob(content);\n    }\n    return TextUtils.TextUtils.performSearchInContent(content, query, caseSensitive, isRegex);\n  }\n\n  isHttpFamily(): boolean {\n    return Boolean(this.url().match(/^https?:/i));\n  }\n\n  requestContentType(): string|undefined {\n    return this.requestHeaderValue('Content-Type');\n  }\n\n  hasErrorStatusCode(): boolean {\n    return this.statusCode >= 400;\n  }\n\n  setInitialPriority(priority: Protocol.Network.ResourcePriority): void {\n    this.#initialPriorityInternal = priority;\n  }\n\n  initialPriority(): Protocol.Network.ResourcePriority|null {\n    return this.#initialPriorityInternal;\n  }\n\n  setPriority(priority: Protocol.Network.ResourcePriority): void {\n    this.#currentPriority = priority;\n  }\n\n  priority(): Protocol.Network.ResourcePriority|null {\n    return this.#currentPriority || this.#initialPriorityInternal || null;\n  }\n\n  setSignedExchangeInfo(info: Protocol.Network.SignedExchangeInfo): void {\n    this.#signedExchangeInfoInternal = info;\n  }\n\n  signedExchangeInfo(): Protocol.Network.SignedExchangeInfo|null {\n    return this.#signedExchangeInfoInternal;\n  }\n\n  setWebBundleInfo(info: WebBundleInfo|null): void {\n    this.#webBundleInfoInternal = info;\n  }\n\n  webBundleInfo(): WebBundleInfo|null {\n    return this.#webBundleInfoInternal;\n  }\n\n  setWebBundleInnerRequestInfo(info: WebBundleInnerRequestInfo|null): void {\n    this.#webBundleInnerRequestInfoInternal = info;\n  }\n\n  webBundleInnerRequestInfo(): WebBundleInnerRequestInfo|null {\n    return this.#webBundleInnerRequestInfoInternal;\n  }\n\n  async populateImageSource(image: HTMLImageElement): Promise<void> {\n    const {content, encoded} = await this.contentData();\n    let imageSrc = TextUtils.ContentProvider.contentAsDataURL(content, this.#mimeTypeInternal, encoded);\n    if (imageSrc === null && !this.#failedInternal) {\n      const cacheControl = this.responseHeaderValue('cache-control') || '';\n      if (!cacheControl.includes('no-cache')) {\n        imageSrc = this.#urlInternal;\n      }\n    }\n    if (imageSrc !== null) {\n      image.src = imageSrc;\n    }\n  }\n\n  initiator(): Protocol.Network.Initiator|null {\n    return this.#initiatorInternal || null;\n  }\n\n  frames(): WebSocketFrame[] {\n    return this.#framesInternal;\n  }\n\n  addProtocolFrameError(errorMessage: string, time: number): void {\n    this.addFrame(\n        {type: WebSocketFrameType.Error, text: errorMessage, time: this.pseudoWallTime(time), opCode: -1, mask: false});\n  }\n\n  addProtocolFrame(response: Protocol.Network.WebSocketFrame, time: number, sent: boolean): void {\n    const type = sent ? WebSocketFrameType.Send : WebSocketFrameType.Receive;\n    this.addFrame({\n      type: type,\n      text: response.payloadData,\n      time: this.pseudoWallTime(time),\n      opCode: response.opcode,\n      mask: response.mask,\n    });\n  }\n\n  addFrame(frame: WebSocketFrame): void {\n    this.#framesInternal.push(frame);\n    this.dispatchEventToListeners(Events.WebsocketFrameAdded, frame);\n  }\n\n  eventSourceMessages(): EventSourceMessage[] {\n    return this.#eventSourceMessagesInternal;\n  }\n\n  addEventSourceMessage(time: number, eventName: string, eventId: string, data: string): void {\n    const message = {time: this.pseudoWallTime(time), eventName: eventName, eventId: eventId, data: data};\n    this.#eventSourceMessagesInternal.push(message);\n    this.dispatchEventToListeners(Events.EventSourceMessageAdded, message);\n  }\n\n  markAsRedirect(redirectCount: number): void {\n    this.#isRedirectInternal = true;\n    this.#requestIdInternal = `${this.#backendRequestIdInternal}:redirected.${redirectCount}`;\n  }\n\n  isRedirect(): boolean {\n    return this.#isRedirectInternal;\n  }\n\n  setRequestIdForTest(requestId: Protocol.Network.RequestId): void {\n    this.#backendRequestIdInternal = requestId;\n    this.#requestIdInternal = requestId;\n  }\n\n  charset(): string|null {\n    const contentTypeHeader = this.responseHeaderValue('content-type');\n    if (!contentTypeHeader) {\n      return null;\n    }\n\n    const responseCharsets = contentTypeHeader.replace(/ /g, '')\n                                 .split(';')\n                                 .filter(parameter => parameter.toLowerCase().startsWith('charset='))\n                                 .map(parameter => parameter.slice('charset='.length));\n    if (responseCharsets.length) {\n      return responseCharsets[0];\n    }\n\n    return null;\n  }\n\n  addExtraRequestInfo(extraRequestInfo: ExtraRequestInfo): void {\n    this.#blockedRequestCookiesInternal = extraRequestInfo.blockedRequestCookies;\n    this.#includedRequestCookiesInternal = extraRequestInfo.includedRequestCookies;\n    this.setRequestHeaders(extraRequestInfo.requestHeaders);\n    this.#hasExtraRequestInfoInternal = true;\n    this.setRequestHeadersText('');  // Mark request headers as non-provisional\n    this.#clientSecurityStateInternal = extraRequestInfo.clientSecurityState;\n    this.setConnectTimingFromExtraInfo(extraRequestInfo.connectTiming);\n  }\n\n  hasExtraRequestInfo(): boolean {\n    return this.#hasExtraRequestInfoInternal;\n  }\n\n  blockedRequestCookies(): BlockedCookieWithReason[] {\n    return this.#blockedRequestCookiesInternal;\n  }\n\n  includedRequestCookies(): Cookie[] {\n    return this.#includedRequestCookiesInternal;\n  }\n\n  hasRequestCookies(): boolean {\n    return this.#includedRequestCookiesInternal.length > 0 || this.#blockedRequestCookiesInternal.length > 0;\n  }\n\n  addExtraResponseInfo(extraResponseInfo: ExtraResponseInfo): void {\n    this.#blockedResponseCookiesInternal = extraResponseInfo.blockedResponseCookies;\n    this.responseHeaders = extraResponseInfo.responseHeaders;\n\n    if (extraResponseInfo.responseHeadersText) {\n      this.responseHeadersText = extraResponseInfo.responseHeadersText;\n\n      if (!this.requestHeadersText()) {\n        // Generate request headers text from raw headers in extra request info because\n        // Network.requestWillBeSentExtraInfo doesn't include headers text.\n        let requestHeadersText = `${this.requestMethod} ${this.parsedURL.path}`;\n        if (this.parsedURL.queryParams) {\n          requestHeadersText += `?${this.parsedURL.queryParams}`;\n        }\n        requestHeadersText += ' HTTP/1.1\\r\\n';\n\n        for (const {name, value} of this.requestHeaders()) {\n          requestHeadersText += `${name}: ${value}\\r\\n`;\n        }\n        this.setRequestHeadersText(requestHeadersText);\n      }\n    }\n    this.#remoteAddressSpaceInternal = extraResponseInfo.resourceIPAddressSpace;\n\n    if (extraResponseInfo.statusCode) {\n      this.statusCode = extraResponseInfo.statusCode;\n    }\n\n    this.#hasExtraResponseInfoInternal = true;\n\n    // TODO(crbug.com/1252463) Explore replacing this with a DevTools Issue.\n    const networkManager = NetworkManager.forRequest(this);\n    if (networkManager) {\n      for (const blockedCookie of this.#blockedResponseCookiesInternal) {\n        if (blockedCookie.blockedReasons.includes(\n                Protocol.Network.SetCookieBlockedReason.NameValuePairExceedsMaxSize)) {\n          const message = i18nString(UIStrings.setcookieHeaderIsIgnoredIn, {PH1: this.url()});\n          networkManager.dispatchEventToListeners(\n              NetworkManagerEvents.MessageGenerated,\n              {message: message, requestId: this.#requestIdInternal, warning: true});\n        }\n      }\n    }\n  }\n\n  hasExtraResponseInfo(): boolean {\n    return this.#hasExtraResponseInfoInternal;\n  }\n\n  blockedResponseCookies(): BlockedSetCookieWithReason[] {\n    return this.#blockedResponseCookiesInternal;\n  }\n\n  redirectSourceSignedExchangeInfoHasNoErrors(): boolean {\n    return this.#redirectSourceInternal !== null && this.#redirectSourceInternal.#signedExchangeInfoInternal !== null &&\n        !this.#redirectSourceInternal.#signedExchangeInfoInternal.errors;\n  }\n\n  clientSecurityState(): Protocol.Network.ClientSecurityState|undefined {\n    return this.#clientSecurityStateInternal;\n  }\n\n  setTrustTokenParams(trustTokenParams: Protocol.Network.TrustTokenParams): void {\n    this.#trustTokenParamsInternal = trustTokenParams;\n  }\n\n  trustTokenParams(): Protocol.Network.TrustTokenParams|undefined {\n    return this.#trustTokenParamsInternal;\n  }\n\n  setTrustTokenOperationDoneEvent(doneEvent: Protocol.Network.TrustTokenOperationDoneEvent): void {\n    this.#trustTokenOperationDoneEventInternal = doneEvent;\n\n    this.dispatchEventToListeners(Events.TrustTokenResultAdded);\n  }\n\n  trustTokenOperationDoneEvent(): Protocol.Network.TrustTokenOperationDoneEvent|undefined {\n    return this.#trustTokenOperationDoneEventInternal;\n  }\n\n  setIsSameSite(isSameSite: boolean): void {\n    this.#isSameSiteInternal = isSameSite;\n  }\n\n  isSameSite(): boolean|null {\n    return this.#isSameSiteInternal;\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  FinishedLoading = 'FinishedLoading',\n  TimingChanged = 'TimingChanged',\n  RemoteAddressChanged = 'RemoteAddressChanged',\n  RequestHeadersChanged = 'RequestHeadersChanged',\n  ResponseHeadersChanged = 'ResponseHeadersChanged',\n  WebsocketFrameAdded = 'WebsocketFrameAdded',\n  EventSourceMessageAdded = 'EventSourceMessageAdded',\n  TrustTokenResultAdded = 'TrustTokenResultAdded',\n}\n\nexport type EventTypes = {\n  [Events.FinishedLoading]: NetworkRequest,\n  [Events.TimingChanged]: NetworkRequest,\n  [Events.RemoteAddressChanged]: NetworkRequest,\n  [Events.RequestHeadersChanged]: void,\n  [Events.ResponseHeadersChanged]: void,\n  [Events.WebsocketFrameAdded]: WebSocketFrame,\n  [Events.EventSourceMessageAdded]: EventSourceMessage,\n  [Events.TrustTokenResultAdded]: void,\n};\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum InitiatorType {\n  Other = 'other',\n  Parser = 'parser',\n  Redirect = 'redirect',\n  Script = 'script',\n  Preload = 'preload',\n  SignedExchange = 'signedExchange',\n  Preflight = 'preflight',\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum WebSocketFrameType {\n  Send = 'send',\n  Receive = 'receive',\n  Error = 'error',\n}\n\nexport const cookieBlockedReasonToUiString = function(blockedReason: Protocol.Network.CookieBlockedReason): string {\n  switch (blockedReason) {\n    case Protocol.Network.CookieBlockedReason.SecureOnly:\n      return i18nString(UIStrings.secureOnly);\n    case Protocol.Network.CookieBlockedReason.NotOnPath:\n      return i18nString(UIStrings.notOnPath);\n    case Protocol.Network.CookieBlockedReason.DomainMismatch:\n      return i18nString(UIStrings.domainMismatch);\n    case Protocol.Network.CookieBlockedReason.SameSiteStrict:\n      return i18nString(UIStrings.sameSiteStrict);\n    case Protocol.Network.CookieBlockedReason.SameSiteLax:\n      return i18nString(UIStrings.sameSiteLax);\n    case Protocol.Network.CookieBlockedReason.SameSiteUnspecifiedTreatedAsLax:\n      return i18nString(UIStrings.sameSiteUnspecifiedTreatedAsLax);\n    case Protocol.Network.CookieBlockedReason.SameSiteNoneInsecure:\n      return i18nString(UIStrings.sameSiteNoneInsecure);\n    case Protocol.Network.CookieBlockedReason.UserPreferences:\n      return i18nString(UIStrings.userPreferences);\n    case Protocol.Network.CookieBlockedReason.UnknownError:\n      return i18nString(UIStrings.unknownError);\n    case Protocol.Network.CookieBlockedReason.SchemefulSameSiteStrict:\n      return i18nString(UIStrings.schemefulSameSiteStrict);\n    case Protocol.Network.CookieBlockedReason.SchemefulSameSiteLax:\n      return i18nString(UIStrings.schemefulSameSiteLax);\n    case Protocol.Network.CookieBlockedReason.SchemefulSameSiteUnspecifiedTreatedAsLax:\n      return i18nString(UIStrings.schemefulSameSiteUnspecifiedTreatedAsLax);\n    case Protocol.Network.CookieBlockedReason.SamePartyFromCrossPartyContext:\n      return i18nString(UIStrings.samePartyFromCrossPartyContext);\n    case Protocol.Network.CookieBlockedReason.NameValuePairExceedsMaxSize:\n      return i18nString(UIStrings.nameValuePairExceedsMaxSize);\n  }\n  return '';\n};\n\nexport const setCookieBlockedReasonToUiString = function(\n    blockedReason: Protocol.Network.SetCookieBlockedReason): string {\n  switch (blockedReason) {\n    case Protocol.Network.SetCookieBlockedReason.SecureOnly:\n      return i18nString(UIStrings.blockedReasonSecureOnly);\n    case Protocol.Network.SetCookieBlockedReason.SameSiteStrict:\n      return i18nString(UIStrings.blockedReasonSameSiteStrictLax, {PH1: 'SameSite=Strict'});\n    case Protocol.Network.SetCookieBlockedReason.SameSiteLax:\n      return i18nString(UIStrings.blockedReasonSameSiteStrictLax, {PH1: 'SameSite=Lax'});\n    case Protocol.Network.SetCookieBlockedReason.SameSiteUnspecifiedTreatedAsLax:\n      return i18nString(UIStrings.blockedReasonSameSiteUnspecifiedTreatedAsLax);\n    case Protocol.Network.SetCookieBlockedReason.SameSiteNoneInsecure:\n      return i18nString(UIStrings.blockedReasonSameSiteNoneInsecure);\n    case Protocol.Network.SetCookieBlockedReason.UserPreferences:\n      return i18nString(UIStrings.thisSetcookieWasBlockedDueToUser);\n    case Protocol.Network.SetCookieBlockedReason.SyntaxError:\n      return i18nString(UIStrings.thisSetcookieHadInvalidSyntax);\n    case Protocol.Network.SetCookieBlockedReason.SchemeNotSupported:\n      return i18nString(UIStrings.theSchemeOfThisConnectionIsNot);\n    case Protocol.Network.SetCookieBlockedReason.OverwriteSecure:\n      return i18nString(UIStrings.blockedReasonOverwriteSecure);\n    case Protocol.Network.SetCookieBlockedReason.InvalidDomain:\n      return i18nString(UIStrings.blockedReasonInvalidDomain);\n    case Protocol.Network.SetCookieBlockedReason.InvalidPrefix:\n      return i18nString(UIStrings.blockedReasonInvalidPrefix);\n    case Protocol.Network.SetCookieBlockedReason.UnknownError:\n      return i18nString(UIStrings.anUnknownErrorWasEncounteredWhenTrying);\n    case Protocol.Network.SetCookieBlockedReason.SchemefulSameSiteStrict:\n      return i18nString(UIStrings.thisSetcookieWasBlockedBecauseItHadTheSamesiteStrictLax, {PH1: 'SameSite=Strict'});\n    case Protocol.Network.SetCookieBlockedReason.SchemefulSameSiteLax:\n      return i18nString(UIStrings.thisSetcookieWasBlockedBecauseItHadTheSamesiteStrictLax, {PH1: 'SameSite=Lax'});\n    case Protocol.Network.SetCookieBlockedReason.SchemefulSameSiteUnspecifiedTreatedAsLax:\n      return i18nString(UIStrings.thisSetcookieDidntSpecifyASamesite);\n    case Protocol.Network.SetCookieBlockedReason.SamePartyFromCrossPartyContext:\n      return i18nString(UIStrings.thisSetcookieWasBlockedBecauseItHadTheSameparty);\n    case Protocol.Network.SetCookieBlockedReason.SamePartyConflictsWithOtherAttributes:\n      return i18nString(UIStrings.thisSetcookieWasBlockedBecauseItHadTheSamepartyAttribute);\n    case Protocol.Network.SetCookieBlockedReason.NameValuePairExceedsMaxSize:\n      return i18nString(UIStrings.thisSetcookieWasBlockedBecauseTheNameValuePairExceedsMaxSize);\n  }\n  return '';\n};\n\nexport const cookieBlockedReasonToAttribute = function(blockedReason: Protocol.Network.CookieBlockedReason): Attributes|\n    null {\n      switch (blockedReason) {\n        case Protocol.Network.CookieBlockedReason.SecureOnly:\n          return Attributes.Secure;\n        case Protocol.Network.CookieBlockedReason.NotOnPath:\n          return Attributes.Path;\n        case Protocol.Network.CookieBlockedReason.DomainMismatch:\n          return Attributes.Domain;\n        case Protocol.Network.CookieBlockedReason.SameSiteStrict:\n        case Protocol.Network.CookieBlockedReason.SameSiteLax:\n        case Protocol.Network.CookieBlockedReason.SameSiteUnspecifiedTreatedAsLax:\n        case Protocol.Network.CookieBlockedReason.SameSiteNoneInsecure:\n        case Protocol.Network.CookieBlockedReason.SchemefulSameSiteStrict:\n        case Protocol.Network.CookieBlockedReason.SchemefulSameSiteLax:\n        case Protocol.Network.CookieBlockedReason.SchemefulSameSiteUnspecifiedTreatedAsLax:\n          return Attributes.SameSite;\n        case Protocol.Network.CookieBlockedReason.SamePartyFromCrossPartyContext:\n          return Attributes.SameParty;\n        case Protocol.Network.CookieBlockedReason.NameValuePairExceedsMaxSize:\n        case Protocol.Network.CookieBlockedReason.UserPreferences:\n        case Protocol.Network.CookieBlockedReason.UnknownError:\n          return null;\n      }\n      return null;\n    };\n\nexport const setCookieBlockedReasonToAttribute = function(blockedReason: Protocol.Network.SetCookieBlockedReason):\n    Attributes|null {\n      switch (blockedReason) {\n        case Protocol.Network.SetCookieBlockedReason.SecureOnly:\n        case Protocol.Network.SetCookieBlockedReason.OverwriteSecure:\n          return Attributes.Secure;\n        case Protocol.Network.SetCookieBlockedReason.SameSiteStrict:\n        case Protocol.Network.SetCookieBlockedReason.SameSiteLax:\n        case Protocol.Network.SetCookieBlockedReason.SameSiteUnspecifiedTreatedAsLax:\n        case Protocol.Network.SetCookieBlockedReason.SameSiteNoneInsecure:\n        case Protocol.Network.SetCookieBlockedReason.SchemefulSameSiteStrict:\n        case Protocol.Network.SetCookieBlockedReason.SchemefulSameSiteLax:\n        case Protocol.Network.SetCookieBlockedReason.SchemefulSameSiteUnspecifiedTreatedAsLax:\n          return Attributes.SameSite;\n        case Protocol.Network.SetCookieBlockedReason.InvalidDomain:\n          return Attributes.Domain;\n        case Protocol.Network.SetCookieBlockedReason.InvalidPrefix:\n          return Attributes.Name;\n        case Protocol.Network.SetCookieBlockedReason.SamePartyConflictsWithOtherAttributes:\n        case Protocol.Network.SetCookieBlockedReason.SamePartyFromCrossPartyContext:\n          return Attributes.SameParty;\n        case Protocol.Network.SetCookieBlockedReason.NameValuePairExceedsMaxSize:\n        case Protocol.Network.SetCookieBlockedReason.UserPreferences:\n        case Protocol.Network.SetCookieBlockedReason.SyntaxError:\n        case Protocol.Network.SetCookieBlockedReason.SchemeNotSupported:\n        case Protocol.Network.SetCookieBlockedReason.UnknownError:\n          return null;\n      }\n      return null;\n    };\n\nexport interface NameValue {\n  name: string;\n  value: string;\n}\n\nexport interface WebSocketFrame {\n  type: WebSocketFrameType;\n  time: number;\n  text: string;\n  opCode: number;\n  mask: boolean;\n}\n\nexport interface BlockedSetCookieWithReason {\n  blockedReasons: Protocol.Network.SetCookieBlockedReason[];\n  cookieLine: string;\n  cookie: Cookie|null;\n}\n\nexport interface BlockedCookieWithReason {\n  blockedReasons: Protocol.Network.CookieBlockedReason[];\n  cookie: Cookie;\n}\n\nexport interface ContentData {\n  error: string|null;\n  content: string|null;\n  encoded: boolean;\n}\n\nexport interface EventSourceMessage {\n  time: number;\n  eventName: string;\n  eventId: string;\n  data: string;\n}\n\nexport interface ExtraRequestInfo {\n  blockedRequestCookies: {\n    blockedReasons: Protocol.Network.CookieBlockedReason[],\n    cookie: Cookie,\n  }[];\n  requestHeaders: NameValue[];\n  includedRequestCookies: Cookie[];\n  clientSecurityState?: Protocol.Network.ClientSecurityState;\n  connectTiming: Protocol.Network.ConnectTiming;\n}\n\nexport interface ExtraResponseInfo {\n  blockedResponseCookies: {\n    blockedReasons: Protocol.Network.SetCookieBlockedReason[],\n    cookieLine: string,\n    cookie: Cookie|null,\n  }[];\n  responseHeaders: NameValue[];\n  responseHeadersText?: string;\n  resourceIPAddressSpace: Protocol.Network.IPAddressSpace;\n  statusCode: number|undefined;\n}\n\nexport interface WebBundleInfo {\n  resourceUrls?: Platform.DevToolsPath.UrlString[];\n  errorMessage?: string;\n}\n\nexport interface WebBundleInnerRequestInfo {\n  bundleRequestId?: string;\n  errorMessage?: string;\n}\n"],
  "mappings": "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",
  "names": []
}
