{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/CPUProfilerModel.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2014 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as i18n from '../i18n/i18n.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport {DebuggerModel, Location} from './DebuggerModel.js';\nimport type {RuntimeModel} from './RuntimeModel.js';\nimport type {Target} from './Target.js';\nimport {Capability} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\n\nconst UIStrings = {\n  /**\n  *@description Name of a profile. Placeholder is either a user-supplied name or a number automatically assigned to the profile.\n  *@example {2} PH1\n  */\n  profileD: 'Profile {PH1}',\n};\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/CPUProfilerModel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class CPUProfilerModel extends SDKModel<EventTypes> implements ProtocolProxyApi.ProfilerDispatcher {\n  #isRecording: boolean;\n  #nextAnonymousConsoleProfileNumber: number;\n  #anonymousConsoleProfileIdToTitle: Map<string, string>;\n  readonly #profilerAgent: ProtocolProxyApi.ProfilerApi;\n  #preciseCoverageDeltaUpdateCallback:\n      ((arg0: number, arg1: string, arg2: Array<Protocol.Profiler.ScriptCoverage>) => void)|null;\n  readonly #debuggerModelInternal: DebuggerModel;\n  readonly registeredConsoleProfileMessages: ProfileFinishedData[] = [];\n\n  constructor(target: Target) {\n    super(target);\n    this.#isRecording = false;\n    this.#nextAnonymousConsoleProfileNumber = 1;\n    this.#anonymousConsoleProfileIdToTitle = new Map();\n    this.#profilerAgent = target.profilerAgent();\n    this.#preciseCoverageDeltaUpdateCallback = null;\n    target.registerProfilerDispatcher(this);\n    void this.#profilerAgent.invoke_enable();\n    this.#debuggerModelInternal = (target.model(DebuggerModel) as DebuggerModel);\n  }\n\n  runtimeModel(): RuntimeModel {\n    return this.#debuggerModelInternal.runtimeModel();\n  }\n\n  debuggerModel(): DebuggerModel {\n    return this.#debuggerModelInternal;\n  }\n\n  consoleProfileStarted({id, location, title}: Protocol.Profiler.ConsoleProfileStartedEvent): void {\n    if (!title) {\n      title = i18nString(UIStrings.profileD, {PH1: this.#nextAnonymousConsoleProfileNumber++});\n      this.#anonymousConsoleProfileIdToTitle.set(id, title);\n    }\n    const eventData = this.createEventDataFrom(id, location, title);\n    this.dispatchEventToListeners(Events.ConsoleProfileStarted, eventData);\n  }\n\n  consoleProfileFinished({id, location, profile, title}: Protocol.Profiler.ConsoleProfileFinishedEvent): void {\n    if (!title) {\n      title = this.#anonymousConsoleProfileIdToTitle.get(id);\n      this.#anonymousConsoleProfileIdToTitle.delete(id);\n    }\n    const eventData: ProfileFinishedData = {\n      ...this.createEventDataFrom(id, location, title),\n      cpuProfile: profile,\n    };\n    this.registeredConsoleProfileMessages.push(eventData);\n    this.dispatchEventToListeners(Events.ConsoleProfileFinished, eventData);\n  }\n\n  private createEventDataFrom(id: string, scriptLocation: Protocol.Debugger.Location, title?: string): EventData {\n    const debuggerLocation = Location.fromPayload(this.#debuggerModelInternal, scriptLocation);\n    const globalId = this.target().id() + '.' + id;\n    return {\n      id: globalId,\n      scriptLocation: debuggerLocation,\n      title: title || '',\n      cpuProfilerModel: this,\n    };\n  }\n\n  isRecordingProfile(): boolean {\n    return this.#isRecording;\n  }\n\n  startRecording(): Promise<unknown> {\n    this.#isRecording = true;\n    const intervalUs = 100;\n    void this.#profilerAgent.invoke_setSamplingInterval({interval: intervalUs});\n    return this.#profilerAgent.invoke_start();\n  }\n\n  stopRecording(): Promise<Protocol.Profiler.Profile|null> {\n    this.#isRecording = false;\n    return this.#profilerAgent.invoke_stop().then(response => response.profile || null);\n  }\n\n  startPreciseCoverage(\n      jsCoveragePerBlock: boolean,\n      preciseCoverageDeltaUpdateCallback:\n          ((arg0: number, arg1: string, arg2: Array<Protocol.Profiler.ScriptCoverage>) => void)|\n      null): Promise<unknown> {\n    const callCount = false;\n    this.#preciseCoverageDeltaUpdateCallback = preciseCoverageDeltaUpdateCallback;\n    const allowUpdatesTriggeredByBackend = true;\n    return this.#profilerAgent.invoke_startPreciseCoverage(\n        {callCount, detailed: jsCoveragePerBlock, allowTriggeredUpdates: allowUpdatesTriggeredByBackend});\n  }\n\n  async takePreciseCoverage(): Promise<{\n    timestamp: number,\n    coverage: Array<Protocol.Profiler.ScriptCoverage>,\n  }> {\n    const r = await this.#profilerAgent.invoke_takePreciseCoverage();\n    const timestamp = (r && r.timestamp) || 0;\n    const coverage = (r && r.result) || [];\n    return {timestamp, coverage};\n  }\n\n  stopPreciseCoverage(): Promise<unknown> {\n    this.#preciseCoverageDeltaUpdateCallback = null;\n    return this.#profilerAgent.invoke_stopPreciseCoverage();\n  }\n\n  preciseCoverageDeltaUpdate({timestamp, occasion, result}: Protocol.Profiler.PreciseCoverageDeltaUpdateEvent): void {\n    if (this.#preciseCoverageDeltaUpdateCallback) {\n      this.#preciseCoverageDeltaUpdateCallback(timestamp, occasion, result);\n    }\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  ConsoleProfileStarted = 'ConsoleProfileStarted',\n  ConsoleProfileFinished = 'ConsoleProfileFinished',\n}\n\nexport type EventTypes = {\n  [Events.ConsoleProfileStarted]: EventData,\n  [Events.ConsoleProfileFinished]: ProfileFinishedData,\n};\n\nSDKModel.register(CPUProfilerModel, {capabilities: Capability.JS, autostart: true});\n\nexport interface EventData {\n  id: string;\n  scriptLocation: Location;\n  title: string;\n  cpuProfilerModel: CPUProfilerModel;\n}\n\nexport interface ProfileFinishedData extends EventData {\n  cpuProfile: Protocol.Profiler.Profile;\n}\n"],
  "mappings": "AA8BA;AAIA;AAGA;AACA;AAEA,MAAM,YAAY;AAAA,EAKhB,UAAU;AAAA;AAEZ,MAAM,OAAO,KAAK,KAAK,kBAAkB,gCAAgC;AACzE,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAEzD,sCAA+B,SAAoE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ/F,mCAA0D;AAAA,EAEnE,YAAY,QAAgB;AAC1B,UAAM;AACN,wBAAoB;AACpB,8CAA0C;AAC1C,6CAAyC,oBAAI;AAC7C,0BAAsB,OAAO;AAC7B,+CAA2C;AAC3C,WAAO,2BAA2B;AAClC,SAAK,oBAAoB;AACzB,kCAA+B,OAAO,MAAM;AAAA;AAAA,EAG9C,eAA6B;AAC3B,WAAO,4BAA4B;AAAA;AAAA,EAGrC,gBAA+B;AAC7B,WAAO;AAAA;AAAA,EAGT,sBAAsB,EAAC,IAAI,UAAU,SAA4D;AAC/F,QAAI,CAAC,OAAO;AACV,cAAQ,WAAW,UAAU,UAAU,EAAC,KAAK;AAC7C,6CAAuC,IAAI,IAAI;AAAA;AAEjD,UAAM,YAAY,KAAK,oBAAoB,IAAI,UAAU;AACzD,SAAK,yBAAyB,OAAO,uBAAuB;AAAA;AAAA,EAG9D,uBAAuB,EAAC,IAAI,UAAU,SAAS,SAA6D;AAC1G,QAAI,CAAC,OAAO;AACV,cAAQ,uCAAuC,IAAI;AACnD,6CAAuC,OAAO;AAAA;AAEhD,UAAM,YAAiC;AAAA,SAClC,KAAK,oBAAoB,IAAI,UAAU;AAAA,MAC1C,YAAY;AAAA;AAEd,SAAK,iCAAiC,KAAK;AAC3C,SAAK,yBAAyB,OAAO,wBAAwB;AAAA;AAAA,EAGvD,oBAAoB,IAAY,gBAA4C,OAA2B;AAC7G,UAAM,mBAAmB,SAAS,YAAY,6BAA6B;AAC3E,UAAM,WAAW,KAAK,SAAS,OAAO,MAAM;AAC5C,WAAO;AAAA,MACL,IAAI;AAAA,MACJ,gBAAgB;AAAA,MAChB,OAAO,SAAS;AAAA,MAChB,kBAAkB;AAAA;AAAA;AAAA,EAItB,qBAA8B;AAC5B,WAAO;AAAA;AAAA,EAGT,iBAAmC;AACjC,wBAAoB;AACpB,UAAM,aAAa;AACnB,SAAK,oBAAoB,2BAA2B,EAAC,UAAU;AAC/D,WAAO,oBAAoB;AAAA;AAAA,EAG7B,gBAAyD;AACvD,wBAAoB;AACpB,WAAO,oBAAoB,cAAc,KAAK,cAAY,SAAS,WAAW;AAAA;AAAA,EAGhF,qBACI,oBACA,oCAEwB;AAC1B,UAAM,YAAY;AAClB,+CAA2C;AAC3C,UAAM,iCAAiC;AACvC,WAAO,oBAAoB,4BACvB,EAAC,WAAW,UAAU,oBAAoB,uBAAuB;AAAA;AAAA,QAGjE,sBAGH;AACD,UAAM,IAAI,MAAM,oBAAoB;AACpC,UAAM,YAAa,KAAK,EAAE,aAAc;AACxC,UAAM,WAAY,KAAK,EAAE,UAAW;AACpC,WAAO,EAAC,WAAW;AAAA;AAAA,EAGrB,sBAAwC;AACtC,+CAA2C;AAC3C,WAAO,oBAAoB;AAAA;AAAA,EAG7B,2BAA2B,EAAC,WAAW,UAAU,UAAkE;AACjH,QAAI,0CAA0C;AAC5C,+CAAyC,WAAW,UAAU;AAAA;AAAA;AAAA;AAO7D,WAAK,SAAL,kBAAK,YAAL;AACL,qCAAwB;AACxB,sCAAyB;AAFf;AAAA;AAUZ,SAAS,SAAS,kBAAkB,EAAC,cAAc,WAAW,IAAI,WAAW;",
  "names": []
}
