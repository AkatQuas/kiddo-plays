{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/CSSContainerQuery.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport type {CSSModel} from './CSSModel.js';\nimport {CSSQuery} from './CSSQuery.js';\nimport type {DOMNode} from './DOMModel.js';\n\nexport class CSSContainerQuery extends CSSQuery {\n  name?: string;\n\n  static parseContainerQueriesPayload(cssModel: CSSModel, payload: Protocol.CSS.CSSContainerQuery[]):\n      CSSContainerQuery[] {\n    return payload.map(cq => new CSSContainerQuery(cssModel, cq));\n  }\n\n  constructor(cssModel: CSSModel, payload: Protocol.CSS.CSSContainerQuery) {\n    super(cssModel);\n    this.reinitialize(payload);\n  }\n\n  reinitialize(payload: Protocol.CSS.CSSContainerQuery): void {\n    this.text = payload.text;\n    this.range = payload.range ? TextUtils.TextRange.TextRange.fromObject(payload.range) : null;\n    this.styleSheetId = payload.styleSheetId;\n    this.name = payload.name;\n  }\n\n  active(): boolean {\n    return true;\n  }\n\n  async getContainerForNode(nodeId: Protocol.DOM.NodeId): Promise<CSSContainerQueryContainer|undefined> {\n    const containerNode = await this.cssModel.domModel().getContainerForNode(nodeId, this.name);\n    if (!containerNode) {\n      return;\n    }\n    return new CSSContainerQueryContainer(containerNode);\n  }\n}\n\nexport class CSSContainerQueryContainer {\n  readonly containerNode: DOMNode;\n\n  constructor(containerNode: DOMNode) {\n    this.containerNode = containerNode;\n  }\n\n  async getContainerSizeDetails(): Promise<ContainerQueriedSizeDetails|undefined> {\n    const styles = await this.containerNode.domModel().cssModel().getComputedStyle(this.containerNode.id);\n    if (!styles) {\n      return;\n    }\n    const containerType = styles.get('container-type');\n    const contain = styles.get('contain');\n    const writingMode = styles.get('writing-mode');\n    if (!containerType || !contain || !writingMode) {\n      return;\n    }\n\n    // The final queried axes are the union of both properties.\n    const queryAxis = getQueryAxis(`${containerType} ${contain}`);\n    const physicalAxis = getPhysicalAxisFromQueryAxis(queryAxis, writingMode);\n    let width, height;\n    if (physicalAxis === PhysicalAxis.Both || physicalAxis === PhysicalAxis.Horizontal) {\n      width = styles.get('width');\n    }\n    if (physicalAxis === PhysicalAxis.Both || physicalAxis === PhysicalAxis.Vertical) {\n      height = styles.get('height');\n    }\n\n    return {\n      queryAxis,\n      physicalAxis,\n      width,\n      height,\n    };\n  }\n}\n\nexport const getQueryAxis = (propertyValue: string): QueryAxis => {\n  const segments = propertyValue.split(' ');\n  let isInline = false;\n  let isBlock = false;\n  for (const segment of segments) {\n    if (segment === 'size') {\n      return QueryAxis.Both;\n    }\n    isInline = isInline || segment === 'inline-size';\n    isBlock = isBlock || segment === 'block-size';\n  }\n\n  if (isInline && isBlock) {\n    return QueryAxis.Both;\n  }\n  if (isInline) {\n    return QueryAxis.Inline;\n  }\n  if (isBlock) {\n    return QueryAxis.Block;\n  }\n\n  return QueryAxis.None;\n};\n\nexport const getPhysicalAxisFromQueryAxis = (queryAxis: QueryAxis, writingMode: string): PhysicalAxis => {\n  const isVerticalWritingMode = writingMode.startsWith('vertical');\n  switch (queryAxis) {\n    case QueryAxis.None:\n      return PhysicalAxis.None;\n    case QueryAxis.Both:\n      return PhysicalAxis.Both;\n    case QueryAxis.Inline:\n      return isVerticalWritingMode ? PhysicalAxis.Vertical : PhysicalAxis.Horizontal;\n    case QueryAxis.Block:\n      return isVerticalWritingMode ? PhysicalAxis.Horizontal : PhysicalAxis.Vertical;\n  }\n};\n\nexport interface ContainerQueriedSizeDetails {\n  queryAxis: QueryAxis;\n  physicalAxis: PhysicalAxis;\n  width?: string;\n  height?: string;\n}\n\nexport const enum QueryAxis {\n  None = '',\n  Inline = 'inline-size',\n  Block = 'block-size',\n  Both = 'size',\n}\n\nexport const enum PhysicalAxis {\n  None = '',\n  Horizontal = 'Horizontal',\n  Vertical = 'Vertical',\n  Both = 'Both',\n}\n"],
  "mappings": "AAIA;AAIA;AAGO,uCAAgC,SAAS;AAAA,EAC9C;AAAA,SAEO,6BAA6B,UAAoB,SAChC;AACtB,WAAO,QAAQ,IAAI,QAAM,IAAI,kBAAkB,UAAU;AAAA;AAAA,EAG3D,YAAY,UAAoB,SAAyC;AACvE,UAAM;AACN,SAAK,aAAa;AAAA;AAAA,EAGpB,aAAa,SAA+C;AAC1D,SAAK,OAAO,QAAQ;AACpB,SAAK,QAAQ,QAAQ,QAAQ,UAAU,UAAU,UAAU,WAAW,QAAQ,SAAS;AACvF,SAAK,eAAe,QAAQ;AAC5B,SAAK,OAAO,QAAQ;AAAA;AAAA,EAGtB,SAAkB;AAChB,WAAO;AAAA;AAAA,QAGH,oBAAoB,QAA4E;AACpG,UAAM,gBAAgB,MAAM,KAAK,SAAS,WAAW,oBAAoB,QAAQ,KAAK;AACtF,QAAI,CAAC,eAAe;AAClB;AAAA;AAEF,WAAO,IAAI,2BAA2B;AAAA;AAAA;AAInC,wCAAiC;AAAA,EAC7B;AAAA,EAET,YAAY,eAAwB;AAClC,SAAK,gBAAgB;AAAA;AAAA,QAGjB,0BAA0E;AAC9E,UAAM,SAAS,MAAM,KAAK,cAAc,WAAW,WAAW,iBAAiB,KAAK,cAAc;AAClG,QAAI,CAAC,QAAQ;AACX;AAAA;AAEF,UAAM,gBAAgB,OAAO,IAAI;AACjC,UAAM,UAAU,OAAO,IAAI;AAC3B,UAAM,cAAc,OAAO,IAAI;AAC/B,QAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,aAAa;AAC9C;AAAA;AAIF,UAAM,YAAY,aAAa,GAAG,iBAAiB;AACnD,UAAM,eAAe,6BAA6B,WAAW;AAC7D,QAAI,OAAO;AACX,QAAI,iBAAiB,aAAa,QAAQ,iBAAiB,aAAa,YAAY;AAClF,cAAQ,OAAO,IAAI;AAAA;AAErB,QAAI,iBAAiB,aAAa,QAAQ,iBAAiB,aAAa,UAAU;AAChF,eAAS,OAAO,IAAI;AAAA;AAGtB,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;AAAA;AAAA;AAKC,aAAM,eAAe,CAAC,kBAAqC;AAChE,QAAM,WAAW,cAAc,MAAM;AACrC,MAAI,WAAW;AACf,MAAI,UAAU;AACd,aAAW,WAAW,UAAU;AAC9B,QAAI,YAAY,QAAQ;AACtB,aAAO,UAAU;AAAA;AAEnB,eAAW,YAAY,YAAY;AACnC,cAAU,WAAW,YAAY;AAAA;AAGnC,MAAI,YAAY,SAAS;AACvB,WAAO,UAAU;AAAA;AAEnB,MAAI,UAAU;AACZ,WAAO,UAAU;AAAA;AAEnB,MAAI,SAAS;AACX,WAAO,UAAU;AAAA;AAGnB,SAAO,UAAU;AAAA;AAGZ,aAAM,+BAA+B,CAAC,WAAsB,gBAAsC;AACvG,QAAM,wBAAwB,YAAY,WAAW;AACrD,UAAQ;AAAA,SACD,UAAU;AACb,aAAO,aAAa;AAAA,SACjB,UAAU;AACb,aAAO,aAAa;AAAA,SACjB,UAAU;AACb,aAAO,wBAAwB,aAAa,WAAW,aAAa;AAAA,SACjE,UAAU;AACb,aAAO,wBAAwB,aAAa,aAAa,aAAa;AAAA;AAAA;AAWrE,WAAW,YAAX,kBAAW,eAAX;AACL,uBAAO;AACP,yBAAS;AACT,wBAAQ;AACR,uBAAO;AAJS;AAAA;AAOX,WAAW,eAAX,kBAAW,kBAAX;AACL,0BAAO;AACP,gCAAa;AACb,8BAAW;AACX,0BAAO;AAJS;AAAA;",
  "names": []
}
