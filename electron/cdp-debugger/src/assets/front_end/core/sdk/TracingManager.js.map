{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/TracingManager.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport type {Target} from './Target.js';\nimport {Capability} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\nimport type {ObjectSnapshot} from './TracingModel.js';\n\nexport class TracingManager extends SDKModel<void> {\n  readonly #tracingAgent: ProtocolProxyApi.TracingApi;\n  #activeClient: TracingManagerClient|null;\n  #eventBufferSize: number|null;\n  #eventsRetrieved: number;\n  #finishing?: boolean;\n  constructor(target: Target) {\n    super(target);\n    this.#tracingAgent = target.tracingAgent();\n    target.registerTracingDispatcher(new TracingDispatcher(this));\n\n    this.#activeClient = null;\n    this.#eventBufferSize = 0;\n    this.#eventsRetrieved = 0;\n  }\n\n  bufferUsage(usage?: number, eventCount?: number, percentFull?: number): void {\n    this.#eventBufferSize = eventCount === undefined ? null : eventCount;\n    if (this.#activeClient) {\n      this.#activeClient.tracingBufferUsage(usage || percentFull || 0);\n    }\n  }\n\n  eventsCollected(events: EventPayload[]): void {\n    if (!this.#activeClient) {\n      return;\n    }\n    this.#activeClient.traceEventsCollected(events);\n    this.#eventsRetrieved += events.length;\n    if (!this.#eventBufferSize) {\n      this.#activeClient.eventsRetrievalProgress(0);\n      return;\n    }\n\n    if (this.#eventsRetrieved > this.#eventBufferSize) {\n      this.#eventsRetrieved = this.#eventBufferSize;\n    }\n    this.#activeClient.eventsRetrievalProgress(this.#eventsRetrieved / this.#eventBufferSize);\n  }\n\n  tracingComplete(): void {\n    this.#eventBufferSize = 0;\n    this.#eventsRetrieved = 0;\n    if (this.#activeClient) {\n      this.#activeClient.tracingComplete();\n      this.#activeClient = null;\n    }\n    this.#finishing = false;\n  }\n\n  // TODO(petermarshall): Use the traceConfig argument instead of deprecated\n  // categories + options.\n  async start(client: TracingManagerClient, categoryFilter: string, options: string):\n      Promise<Protocol.ProtocolResponseWithError> {\n    if (this.#activeClient) {\n      throw new Error('Tracing is already started');\n    }\n    const bufferUsageReportingIntervalMs = 500;\n    this.#activeClient = client;\n    const args = {\n      bufferUsageReportingInterval: bufferUsageReportingIntervalMs,\n      categories: categoryFilter,\n      options: options,\n      transferMode: Protocol.Tracing.StartRequestTransferMode.ReportEvents,\n    };\n    const response = await this.#tracingAgent.invoke_start(args);\n    if (response.getError()) {\n      this.#activeClient = null;\n    }\n    return response;\n  }\n\n  stop(): void {\n    if (!this.#activeClient) {\n      throw new Error('Tracing is not started');\n    }\n    if (this.#finishing) {\n      throw new Error('Tracing is already being stopped');\n    }\n    this.#finishing = true;\n    void this.#tracingAgent.invoke_end();\n  }\n}\n\nexport interface TracingManagerClient {\n  traceEventsCollected(events: EventPayload[]): void;\n\n  tracingComplete(): void;\n  tracingBufferUsage(usage: number): void;\n  eventsRetrievalProgress(progress: number): void;\n}\n\nclass TracingDispatcher implements ProtocolProxyApi.TracingDispatcher {\n  readonly #tracingManager: TracingManager;\n  constructor(tracingManager: TracingManager) {\n    this.#tracingManager = tracingManager;\n  }\n\n  bufferUsage({value, eventCount, percentFull}: Protocol.Tracing.BufferUsageEvent): void {\n    this.#tracingManager.bufferUsage(value, eventCount, percentFull);\n  }\n\n  dataCollected({value}: Protocol.Tracing.DataCollectedEvent): void {\n    this.#tracingManager.eventsCollected(value);\n  }\n\n  tracingComplete(): void {\n    this.#tracingManager.tracingComplete();\n  }\n}\n\nSDKModel.register(TracingManager, {capabilities: Capability.Tracing, autostart: false});\nexport interface EventPayload {\n  cat?: string;\n  pid: number;\n  tid: number;\n  ts: number;\n  ph: string;\n  name: string;\n  args: {\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    sort_index: number,\n    name: string,\n    snapshot: ObjectSnapshot,\n    data: Object|null,\n  };\n  dur: number;\n  id: string;\n  id2?: {\n    global: (string|undefined),\n    local: (string|undefined),\n  };\n  scope: string;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  bind_id: string;\n  s: string;\n}\n"],
  "mappings": "AAKA;AAGA;AACA;AAGO,oCAA6B,SAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMjD,YAAY,QAAgB;AAC1B,UAAM;AACN,yBAAqB,OAAO;AAC5B,WAAO,0BAA0B,IAAI,kBAAkB;AAEvD,yBAAqB;AACrB,4BAAwB;AACxB,4BAAwB;AAAA;AAAA,EAG1B,YAAY,OAAgB,YAAqB,aAA4B;AAC3E,4BAAwB,eAAe,SAAY,OAAO;AAC1D,QAAI,oBAAoB;AACtB,yBAAmB,mBAAmB,SAAS,eAAe;AAAA;AAAA;AAAA,EAIlE,gBAAgB,QAA8B;AAC5C,QAAI,CAAC,oBAAoB;AACvB;AAAA;AAEF,uBAAmB,qBAAqB;AACxC,6BAAyB,OAAO;AAChC,QAAI,CAAC,uBAAuB;AAC1B,yBAAmB,wBAAwB;AAC3C;AAAA;AAGF,QAAI,wBAAwB,uBAAuB;AACjD,8BAAwB;AAAA;AAE1B,uBAAmB,wBAAwB,wBAAwB;AAAA;AAAA,EAGrE,kBAAwB;AACtB,4BAAwB;AACxB,4BAAwB;AACxB,QAAI,oBAAoB;AACtB,yBAAmB;AACnB,2BAAqB;AAAA;AAEvB,sBAAkB;AAAA;AAAA,QAKd,MAAM,QAA8B,gBAAwB,SAClB;AAC9C,QAAI,oBAAoB;AACtB,YAAM,IAAI,MAAM;AAAA;AAElB,UAAM,iCAAiC;AACvC,yBAAqB;AACrB,UAAM,OAAO;AAAA,MACX,8BAA8B;AAAA,MAC9B,YAAY;AAAA,MACZ;AAAA,MACA,cAAc,SAAS,QAAQ,yBAAyB;AAAA;AAE1D,UAAM,WAAW,MAAM,mBAAmB,aAAa;AACvD,QAAI,SAAS,YAAY;AACvB,2BAAqB;AAAA;AAEvB,WAAO;AAAA;AAAA,EAGT,OAAa;AACX,QAAI,CAAC,oBAAoB;AACvB,YAAM,IAAI,MAAM;AAAA;AAElB,QAAI,iBAAiB;AACnB,YAAM,IAAI,MAAM;AAAA;AAElB,sBAAkB;AAClB,SAAK,mBAAmB;AAAA;AAAA;AAY5B,wBAAsE;AAAA;AAAA,EAEpE,YAAY,gBAAgC;AAC1C,2BAAuB;AAAA;AAAA,EAGzB,YAAY,EAAC,OAAO,YAAY,eAAuD;AACrF,yBAAqB,YAAY,OAAO,YAAY;AAAA;AAAA,EAGtD,cAAc,EAAC,SAAmD;AAChE,yBAAqB,gBAAgB;AAAA;AAAA,EAGvC,kBAAwB;AACtB,yBAAqB;AAAA;AAAA;AAIzB,SAAS,SAAS,gBAAgB,EAAC,cAAc,WAAW,SAAS,WAAW;",
  "names": []
}
