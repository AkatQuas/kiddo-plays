{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/CSSMatchedStyles.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Protocol from '../../generated/protocol.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\n\nimport {cssMetadata, CustomVariableRegex, VariableRegex} from './CSSMetadata.js';\n\nimport type {CSSModel} from './CSSModel.js';\nimport type {CSSProperty} from './CSSProperty.js';\nimport {CSSKeyframesRule, CSSStyleRule} from './CSSRule.js';\nimport {CSSStyleDeclaration, Type} from './CSSStyleDeclaration.js';\nimport type {DOMNode} from './DOMModel.js';\n\nexport class CSSMatchedStyles {\n  readonly #cssModelInternal: CSSModel;\n  readonly #nodeInternal: DOMNode;\n  readonly #addedStyles: Map<CSSStyleDeclaration, DOMNode>;\n  readonly #matchingSelectors: Map<number, Map<string, boolean>>;\n  readonly #keyframesInternal: CSSKeyframesRule[];\n  readonly #nodeForStyleInternal: Map<CSSStyleDeclaration, DOMNode|null>;\n  readonly #inheritedStyles: Set<CSSStyleDeclaration>;\n  readonly #mainDOMCascade: DOMInheritanceCascade;\n  readonly #pseudoDOMCascades: Map<Protocol.DOM.PseudoType, DOMInheritanceCascade>;\n  readonly #customHighlightPseudoDOMCascades: Map<string, DOMInheritanceCascade>;\n  readonly #styleToDOMCascade: Map<CSSStyleDeclaration, DOMInheritanceCascade>;\n\n  constructor(\n      cssModel: CSSModel, node: DOMNode, inlinePayload: Protocol.CSS.CSSStyle|null,\n      attributesPayload: Protocol.CSS.CSSStyle|null, matchedPayload: Protocol.CSS.RuleMatch[],\n      pseudoPayload: Protocol.CSS.PseudoElementMatches[], inheritedPayload: Protocol.CSS.InheritedStyleEntry[],\n      inheritedPseudoPayload: Protocol.CSS.InheritedPseudoElementMatches[],\n      animationsPayload: Protocol.CSS.CSSKeyframesRule[]) {\n    this.#cssModelInternal = cssModel;\n    this.#nodeInternal = node;\n    this.#addedStyles = new Map();\n    this.#matchingSelectors = new Map();\n    this.#keyframesInternal = [];\n    if (animationsPayload) {\n      this.#keyframesInternal = animationsPayload.map(rule => new CSSKeyframesRule(cssModel, rule));\n    }\n\n    this.#nodeForStyleInternal = new Map();\n    this.#inheritedStyles = new Set();\n\n    matchedPayload = cleanUserAgentPayload(matchedPayload);\n    for (const inheritedResult of inheritedPayload) {\n      inheritedResult.matchedCSSRules = cleanUserAgentPayload(inheritedResult.matchedCSSRules);\n    }\n\n    this.#mainDOMCascade = this.buildMainCascade(inlinePayload, attributesPayload, matchedPayload, inheritedPayload);\n    [this.#pseudoDOMCascades, this.#customHighlightPseudoDOMCascades] =\n        this.buildPseudoCascades(pseudoPayload, inheritedPseudoPayload);\n\n    this.#styleToDOMCascade = new Map();\n    for (const domCascade of Array.from(this.#customHighlightPseudoDOMCascades.values())\n             .concat(Array.from(this.#pseudoDOMCascades.values()))\n             .concat(this.#mainDOMCascade)) {\n      for (const style of domCascade.styles()) {\n        this.#styleToDOMCascade.set(style, domCascade);\n      }\n    }\n\n    function cleanUserAgentPayload(payload: Protocol.CSS.RuleMatch[]): Protocol.CSS.RuleMatch[] {\n      for (const ruleMatch of payload) {\n        cleanUserAgentSelectors(ruleMatch);\n      }\n\n      // Merge UA rules that are sequential and have similar selector/media.\n      const cleanMatchedPayload = [];\n      for (const ruleMatch of payload) {\n        const lastMatch = cleanMatchedPayload[cleanMatchedPayload.length - 1];\n        if (!lastMatch || ruleMatch.rule.origin !== 'user-agent' || lastMatch.rule.origin !== 'user-agent' ||\n            ruleMatch.rule.selectorList.text !== lastMatch.rule.selectorList.text ||\n            mediaText(ruleMatch) !== mediaText(lastMatch)) {\n          cleanMatchedPayload.push(ruleMatch);\n          continue;\n        }\n        mergeRule(ruleMatch, lastMatch);\n      }\n      return cleanMatchedPayload;\n\n      function mergeRule(from: Protocol.CSS.RuleMatch, to: Protocol.CSS.RuleMatch): void {\n        const shorthands = (new Map() as Map<string, string>);\n        const properties = (new Map() as Map<string, string>);\n        for (const entry of to.rule.style.shorthandEntries) {\n          shorthands.set(entry.name, entry.value);\n        }\n        for (const entry of to.rule.style.cssProperties) {\n          properties.set(entry.name, entry.value);\n        }\n        for (const entry of from.rule.style.shorthandEntries) {\n          shorthands.set(entry.name, entry.value);\n        }\n        for (const entry of from.rule.style.cssProperties) {\n          properties.set(entry.name, entry.value);\n        }\n        to.rule.style.shorthandEntries = [...shorthands.entries()].map(([name, value]) => ({name, value}));\n        to.rule.style.cssProperties = [...properties.entries()].map(([name, value]) => ({name, value}));\n      }\n\n      function mediaText(ruleMatch: Protocol.CSS.RuleMatch): string|null {\n        if (!ruleMatch.rule.media) {\n          return null;\n        }\n        return ruleMatch.rule.media.map(media => media.text).join(', ');\n      }\n\n      function cleanUserAgentSelectors(ruleMatch: Protocol.CSS.RuleMatch): void {\n        const {matchingSelectors, rule} = ruleMatch;\n        if (rule.origin !== 'user-agent' || !matchingSelectors.length) {\n          return;\n        }\n        rule.selectorList.selectors = rule.selectorList.selectors.filter((item, i) => matchingSelectors.includes(i));\n        rule.selectorList.text = rule.selectorList.selectors.map(item => item.text).join(', ');\n        ruleMatch.matchingSelectors = matchingSelectors.map((item, i) => i);\n      }\n    }\n  }\n\n  private buildMainCascade(\n      inlinePayload: Protocol.CSS.CSSStyle|null, attributesPayload: Protocol.CSS.CSSStyle|null,\n      matchedPayload: Protocol.CSS.RuleMatch[],\n      inheritedPayload: Protocol.CSS.InheritedStyleEntry[]): DOMInheritanceCascade {\n    const nodeCascades: NodeCascade[] = [];\n\n    const nodeStyles: CSSStyleDeclaration[] = [];\n\n    function addAttributesStyle(this: CSSMatchedStyles): void {\n      if (!attributesPayload) {\n        return;\n      }\n      const style = new CSSStyleDeclaration(this.#cssModelInternal, null, attributesPayload, Type.Attributes);\n      this.#nodeForStyleInternal.set(style, this.#nodeInternal);\n      nodeStyles.push(style);\n    }\n\n    // Inline style has the greatest specificity.\n    if (inlinePayload && this.#nodeInternal.nodeType() === Node.ELEMENT_NODE) {\n      const style = new CSSStyleDeclaration(this.#cssModelInternal, null, inlinePayload, Type.Inline);\n      this.#nodeForStyleInternal.set(style, this.#nodeInternal);\n      nodeStyles.push(style);\n    }\n\n    // Add rules in reverse order to match the cascade order.\n    let addedAttributesStyle;\n    for (let i = matchedPayload.length - 1; i >= 0; --i) {\n      const rule = new CSSStyleRule(this.#cssModelInternal, matchedPayload[i].rule);\n      if ((rule.isInjected() || rule.isUserAgent()) && !addedAttributesStyle) {\n        // Show element's Style Attributes after all author rules.\n        addedAttributesStyle = true;\n        addAttributesStyle.call(this);\n      }\n      this.#nodeForStyleInternal.set(rule.style, this.#nodeInternal);\n      nodeStyles.push(rule.style);\n      this.addMatchingSelectors(this.#nodeInternal, rule, matchedPayload[i].matchingSelectors);\n    }\n\n    if (!addedAttributesStyle) {\n      addAttributesStyle.call(this);\n    }\n    nodeCascades.push(new NodeCascade(this, nodeStyles, false /* #isInherited */));\n\n    // Walk the node structure and identify styles with inherited properties.\n    let parentNode: (DOMNode|null) = this.#nodeInternal.parentNode;\n    for (let i = 0; parentNode && inheritedPayload && i < inheritedPayload.length; ++i) {\n      const inheritedStyles = [];\n      const entryPayload = inheritedPayload[i];\n      const inheritedInlineStyle = entryPayload.inlineStyle ?\n          new CSSStyleDeclaration(this.#cssModelInternal, null, entryPayload.inlineStyle, Type.Inline) :\n          null;\n      if (inheritedInlineStyle && this.containsInherited(inheritedInlineStyle)) {\n        this.#nodeForStyleInternal.set(inheritedInlineStyle, parentNode);\n        inheritedStyles.push(inheritedInlineStyle);\n        this.#inheritedStyles.add(inheritedInlineStyle);\n      }\n\n      const inheritedMatchedCSSRules = entryPayload.matchedCSSRules || [];\n      for (let j = inheritedMatchedCSSRules.length - 1; j >= 0; --j) {\n        const inheritedRule = new CSSStyleRule(this.#cssModelInternal, inheritedMatchedCSSRules[j].rule);\n        this.addMatchingSelectors(parentNode, inheritedRule, inheritedMatchedCSSRules[j].matchingSelectors);\n        if (!this.containsInherited(inheritedRule.style)) {\n          continue;\n        }\n        if (containsStyle(nodeStyles, inheritedRule.style) ||\n            containsStyle(this.#inheritedStyles, inheritedRule.style)) {\n          continue;\n        }\n        this.#nodeForStyleInternal.set(inheritedRule.style, parentNode);\n        inheritedStyles.push(inheritedRule.style);\n        this.#inheritedStyles.add(inheritedRule.style);\n      }\n      parentNode = parentNode.parentNode;\n      nodeCascades.push(new NodeCascade(this, inheritedStyles, true /* #isInherited */));\n    }\n\n    return new DOMInheritanceCascade(nodeCascades);\n\n    function containsStyle(\n        styles: CSSStyleDeclaration[]|Set<CSSStyleDeclaration>, query: CSSStyleDeclaration): boolean {\n      if (!query.styleSheetId || !query.range) {\n        return false;\n      }\n      for (const style of styles) {\n        if (query.styleSheetId === style.styleSheetId && style.range && query.range.equal(style.range)) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n\n  /**\n   * Pseudo rule matches received via the inspector protocol are grouped by pseudo type.\n   * For custom highlight pseudos, we need to instead group the rule matches by highlight\n   * name in order to produce separate cascades for each highlight name. This is necessary\n   * so that styles of ::highlight(foo) are not shown as overriding styles of ::highlight(bar).\n   *\n   * This helper function takes a list of rule matches and generates separate NodeCascades\n   * for each custom highlight name that was matched.\n   */\n  private buildSplitCustomHighlightCascades(\n      rules: Protocol.CSS.RuleMatch[], node: DOMNode, isInherited: boolean,\n      pseudoCascades: Map<string, NodeCascade[]>): void {\n    const splitHighlightRules = new Map<string, CSSStyleDeclaration[]>();\n\n    for (let j = rules.length - 1; j >= 0; --j) {\n      const highlightNamesToMatchingSelectorIndices = this.customHighlightNamesToMatchingSelectorIndices(rules[j]);\n\n      for (const [highlightName, matchingSelectors] of highlightNamesToMatchingSelectorIndices) {\n        const pseudoRule = new CSSStyleRule(this.#cssModelInternal, rules[j].rule);\n        this.#nodeForStyleInternal.set(pseudoRule.style, node);\n        if (isInherited) {\n          this.#inheritedStyles.add(pseudoRule.style);\n        }\n        this.addMatchingSelectors(node, pseudoRule, matchingSelectors);\n\n        const ruleListForHighlightName = splitHighlightRules.get(highlightName);\n        if (ruleListForHighlightName) {\n          ruleListForHighlightName.push(pseudoRule.style);\n        } else {\n          splitHighlightRules.set(highlightName, [pseudoRule.style]);\n        }\n      }\n    }\n\n    for (const [highlightName, highlightStyles] of splitHighlightRules) {\n      const nodeCascade = new NodeCascade(this, highlightStyles, isInherited, true /* #isHighlightPseudoCascade*/);\n      const cascadeListForHighlightName = pseudoCascades.get(highlightName);\n      if (cascadeListForHighlightName) {\n        cascadeListForHighlightName.push(nodeCascade);\n      } else {\n        pseudoCascades.set(highlightName, [nodeCascade]);\n      }\n    }\n  }\n\n  /**\n   * Return a mapping of the highlight names in the specified RuleMatch to\n   * the indices of selectors in that selector list with that highlight name.\n   *\n   * For example, consider the following ruleset:\n   * span::highlight(foo), div, #mySpan::highlight(bar), .highlighted::highlight(foo) {\n   *   color: blue;\n   * }\n   *\n   * For a <span id=\"mySpan\" class=\"highlighted\"></span>, a RuleMatch for that span\n   * would have matchingSelectors [0, 2, 3] indicating that the span\n   * matches all of the highlight selectors.\n   *\n   * For that RuleMatch, this function would produce the following map:\n   * {\n   *  \"foo\": [0, 3],\n   *  \"bar\": [2]\n   * }\n   *\n   * @param ruleMatch\n   * @returns A mapping of highlight names to lists of indices into the selector\n   * list associated with ruleMatch. The indices correspond to the selectors in the rule\n   * associated with the key's highlight name.\n   */\n  private customHighlightNamesToMatchingSelectorIndices(ruleMatch: Protocol.CSS.RuleMatch): Map<string, number[]> {\n    const highlightNamesToMatchingSelectors = new Map<string, number[]>();\n\n    for (let i = 0; i < ruleMatch.matchingSelectors.length; i++) {\n      const matchingSelectorIndex = ruleMatch.matchingSelectors[i];\n      const selectorText = ruleMatch.rule.selectorList.selectors[matchingSelectorIndex].text;\n      const highlightNameMatch = selectorText.match(/::highlight\\((.*)\\)/);\n      if (highlightNameMatch) {\n        const highlightName = highlightNameMatch[1];\n        const selectorsForName = highlightNamesToMatchingSelectors.get(highlightName);\n        if (selectorsForName) {\n          selectorsForName.push(matchingSelectorIndex);\n        } else {\n          highlightNamesToMatchingSelectors.set(highlightName, [matchingSelectorIndex]);\n        }\n      }\n    }\n    return highlightNamesToMatchingSelectors;\n  }\n\n  private buildPseudoCascades(\n      pseudoPayload: Protocol.CSS.PseudoElementMatches[],\n      inheritedPseudoPayload: Protocol.CSS.InheritedPseudoElementMatches[]):\n      [Map<Protocol.DOM.PseudoType, DOMInheritanceCascade>, Map<string, DOMInheritanceCascade>] {\n    const pseudoInheritanceCascades = new Map<Protocol.DOM.PseudoType, DOMInheritanceCascade>();\n    const customHighlightPseudoInheritanceCascades = new Map<string, DOMInheritanceCascade>();\n    if (!pseudoPayload) {\n      return [pseudoInheritanceCascades, customHighlightPseudoInheritanceCascades];\n    }\n\n    const pseudoCascades = new Map<Protocol.DOM.PseudoType, NodeCascade[]>();\n    const customHighlightPseudoCascades = new Map<string, NodeCascade[]>();\n    for (let i = 0; i < pseudoPayload.length; ++i) {\n      const entryPayload = pseudoPayload[i];\n      // PseudoElement nodes are not created unless \"content\" css property is set.\n      const pseudoElement = this.#nodeInternal.pseudoElements().get(entryPayload.pseudoType)?.at(-1) || null;\n      const pseudoStyles = [];\n      const rules = entryPayload.matches || [];\n\n      if (entryPayload.pseudoType === Protocol.DOM.PseudoType.Highlight) {\n        this.buildSplitCustomHighlightCascades(\n            rules, this.#nodeInternal, false /* #isInherited */, customHighlightPseudoCascades);\n      } else {\n        for (let j = rules.length - 1; j >= 0; --j) {\n          const pseudoRule = new CSSStyleRule(this.#cssModelInternal, rules[j].rule);\n          pseudoStyles.push(pseudoRule.style);\n          const nodeForStyle =\n              cssMetadata().isHighlightPseudoType(entryPayload.pseudoType) ? this.#nodeInternal : pseudoElement;\n          this.#nodeForStyleInternal.set(pseudoRule.style, nodeForStyle);\n          if (nodeForStyle) {\n            this.addMatchingSelectors(nodeForStyle, pseudoRule, rules[j].matchingSelectors);\n          }\n        }\n        const isHighlightPseudoCascade = cssMetadata().isHighlightPseudoType(entryPayload.pseudoType);\n        const nodeCascade = new NodeCascade(\n            this, pseudoStyles, false /* #isInherited */, isHighlightPseudoCascade /* #isHighlightPseudoCascade*/);\n        pseudoCascades.set(entryPayload.pseudoType, [nodeCascade]);\n      }\n    }\n\n    if (inheritedPseudoPayload) {\n      let parentNode: (DOMNode|null) = this.#nodeInternal.parentNode;\n      for (let i = 0; parentNode && i < inheritedPseudoPayload.length; ++i) {\n        const inheritedPseudoMatches = inheritedPseudoPayload[i].pseudoElements;\n        for (let j = 0; j < inheritedPseudoMatches.length; ++j) {\n          const inheritedEntryPayload = inheritedPseudoMatches[j];\n          const rules = inheritedEntryPayload.matches || [];\n\n          if (inheritedEntryPayload.pseudoType === Protocol.DOM.PseudoType.Highlight) {\n            this.buildSplitCustomHighlightCascades(\n                rules, parentNode, true /* #isInherited */, customHighlightPseudoCascades);\n          } else {\n            const pseudoStyles = [];\n            for (let k = rules.length - 1; k >= 0; --k) {\n              const pseudoRule = new CSSStyleRule(this.#cssModelInternal, rules[k].rule);\n              pseudoStyles.push(pseudoRule.style);\n              this.#nodeForStyleInternal.set(pseudoRule.style, parentNode);\n              this.#inheritedStyles.add(pseudoRule.style);\n              this.addMatchingSelectors(parentNode, pseudoRule, rules[k].matchingSelectors);\n            }\n\n            const isHighlightPseudoCascade = cssMetadata().isHighlightPseudoType(inheritedEntryPayload.pseudoType);\n            const nodeCascade = new NodeCascade(\n                this, pseudoStyles, true /* #isInherited */, isHighlightPseudoCascade /* #isHighlightPseudoCascade*/);\n            const cascadeListForPseudoType = pseudoCascades.get(inheritedEntryPayload.pseudoType);\n            if (cascadeListForPseudoType) {\n              cascadeListForPseudoType.push(nodeCascade);\n            } else {\n              pseudoCascades.set(inheritedEntryPayload.pseudoType, [nodeCascade]);\n            }\n          }\n        }\n\n        parentNode = parentNode.parentNode;\n      }\n    }\n\n    // Now that we've built the arrays of NodeCascades for each pseudo type, convert them into\n    // DOMInheritanceCascades.\n    for (const [pseudoType, nodeCascade] of pseudoCascades.entries()) {\n      pseudoInheritanceCascades.set(pseudoType, new DOMInheritanceCascade(nodeCascade));\n    }\n\n    for (const [highlightName, nodeCascade] of customHighlightPseudoCascades.entries()) {\n      customHighlightPseudoInheritanceCascades.set(highlightName, new DOMInheritanceCascade(nodeCascade));\n    }\n\n    return [pseudoInheritanceCascades, customHighlightPseudoInheritanceCascades];\n  }\n\n  private addMatchingSelectors(\n      this: CSSMatchedStyles, node: DOMNode, rule: CSSStyleRule, matchingSelectorIndices: number[]): void {\n    for (const matchingSelectorIndex of matchingSelectorIndices) {\n      const selector = rule.selectors[matchingSelectorIndex];\n      this.setSelectorMatches(node, selector.text, true);\n    }\n  }\n\n  node(): DOMNode {\n    return this.#nodeInternal;\n  }\n\n  cssModel(): CSSModel {\n    return this.#cssModelInternal;\n  }\n\n  hasMatchingSelectors(rule: CSSStyleRule): boolean {\n    const matchingSelectors = this.getMatchingSelectors(rule);\n    return matchingSelectors.length > 0 && this.queryMatches(rule.style);\n  }\n\n  getMatchingSelectors(rule: CSSStyleRule): number[] {\n    const node = this.nodeForStyle(rule.style);\n    if (!node || typeof node.id !== 'number') {\n      return [];\n    }\n    const map = this.#matchingSelectors.get(node.id);\n    if (!map) {\n      return [];\n    }\n    const result = [];\n    for (let i = 0; i < rule.selectors.length; ++i) {\n      if (map.get(rule.selectors[i].text)) {\n        result.push(i);\n      }\n    }\n    return result;\n  }\n\n  async recomputeMatchingSelectors(rule: CSSStyleRule): Promise<void> {\n    const node = this.nodeForStyle(rule.style);\n    if (!node) {\n      return;\n    }\n    const promises = [];\n    for (const selector of rule.selectors) {\n      promises.push(querySelector.call(this, node, selector.text));\n    }\n    await Promise.all(promises);\n\n    async function querySelector(this: CSSMatchedStyles, node: DOMNode, selectorText: string): Promise<void> {\n      const ownerDocument = node.ownerDocument;\n      if (!ownerDocument) {\n        return;\n      }\n      // We assume that \"matching\" property does not ever change during the\n      // MatchedStyleResult's lifetime.\n      if (typeof node.id === 'number') {\n        const map = this.#matchingSelectors.get(node.id);\n        if (map && map.has(selectorText)) {\n          return;\n        }\n      }\n\n      if (typeof ownerDocument.id !== 'number') {\n        return;\n      }\n      const matchingNodeIds = await this.#nodeInternal.domModel().querySelectorAll(ownerDocument.id, selectorText);\n\n      if (matchingNodeIds) {\n        if (typeof node.id === 'number') {\n          this.setSelectorMatches(node, selectorText, matchingNodeIds.indexOf(node.id) !== -1);\n        } else {\n          this.setSelectorMatches(node, selectorText, false);\n        }\n      }\n    }\n  }\n\n  addNewRule(rule: CSSStyleRule, node: DOMNode): Promise<void> {\n    this.#addedStyles.set(rule.style, node);\n    return this.recomputeMatchingSelectors(rule);\n  }\n\n  private setSelectorMatches(node: DOMNode, selectorText: string, value: boolean): void {\n    if (typeof node.id !== 'number') {\n      return;\n    }\n    let map = this.#matchingSelectors.get(node.id);\n    if (!map) {\n      map = new Map();\n      this.#matchingSelectors.set(node.id, map);\n    }\n    map.set(selectorText, value);\n  }\n\n  queryMatches(style: CSSStyleDeclaration): boolean {\n    if (!style.parentRule) {\n      return true;\n    }\n    const parentRule = style.parentRule as CSSStyleRule;\n    const queries = [...parentRule.media, ...parentRule.containerQueries, ...parentRule.supports];\n    for (const query of queries) {\n      if (!query.active()) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  nodeStyles(): CSSStyleDeclaration[] {\n    return this.#mainDOMCascade.styles();\n  }\n\n  keyframes(): CSSKeyframesRule[] {\n    return this.#keyframesInternal;\n  }\n\n  pseudoStyles(pseudoType: Protocol.DOM.PseudoType): CSSStyleDeclaration[] {\n    const domCascade = this.#pseudoDOMCascades.get(pseudoType);\n    return domCascade ? domCascade.styles() : [];\n  }\n\n  pseudoTypes(): Set<Protocol.DOM.PseudoType> {\n    return new Set(this.#pseudoDOMCascades.keys());\n  }\n\n  customHighlightPseudoStyles(highlightName: string): CSSStyleDeclaration[] {\n    const domCascade = this.#customHighlightPseudoDOMCascades.get(highlightName);\n    return domCascade ? domCascade.styles() : [];\n  }\n\n  customHighlightPseudoNames(): Set<string> {\n    return new Set(this.#customHighlightPseudoDOMCascades.keys());\n  }\n\n  private containsInherited(style: CSSStyleDeclaration): boolean {\n    const properties = style.allProperties();\n    for (let i = 0; i < properties.length; ++i) {\n      const property = properties[i];\n      // Does this style contain non-overridden inherited property?\n      if (property.activeInStyle() && cssMetadata().isPropertyInherited(property.name)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  nodeForStyle(style: CSSStyleDeclaration): DOMNode|null {\n    return this.#addedStyles.get(style) || this.#nodeForStyleInternal.get(style) || null;\n  }\n\n  availableCSSVariables(style: CSSStyleDeclaration): string[] {\n    const domCascade = this.#styleToDOMCascade.get(style) || null;\n    return domCascade ? domCascade.findAvailableCSSVariables(style) : [];\n  }\n\n  computeCSSVariable(style: CSSStyleDeclaration, variableName: string): string|null {\n    const domCascade = this.#styleToDOMCascade.get(style) || null;\n    return domCascade ? domCascade.computeCSSVariable(style, variableName) : null;\n  }\n\n  computeValue(style: CSSStyleDeclaration, value: string): string|null {\n    const domCascade = this.#styleToDOMCascade.get(style) || null;\n    return domCascade ? domCascade.computeValue(style, value) : null;\n  }\n\n  /**\n   * Same as computeValue, but to be used for `var(--#name [,...])` values only\n   */\n  computeSingleVariableValue(style: CSSStyleDeclaration, cssVariableValue: string): {\n    computedValue: string|null,\n    fromFallback: boolean,\n  }|null {\n    const domCascade = this.#styleToDOMCascade.get(style) || null;\n    const cssVariableValueNoSpaces = cssVariableValue.replace(/\\s/g, '');\n    return domCascade ? domCascade.computeSingleVariableValue(style, cssVariableValueNoSpaces) : null;\n  }\n\n  isInherited(style: CSSStyleDeclaration): boolean {\n    return this.#inheritedStyles.has(style);\n  }\n\n  propertyState(property: CSSProperty): PropertyState|null {\n    const domCascade = this.#styleToDOMCascade.get(property.ownerStyle);\n    return domCascade ? domCascade.propertyState(property) : null;\n  }\n\n  resetActiveProperties(): void {\n    this.#mainDOMCascade.reset();\n    for (const domCascade of this.#pseudoDOMCascades.values()) {\n      domCascade.reset();\n    }\n\n    for (const domCascade of this.#customHighlightPseudoDOMCascades.values()) {\n      domCascade.reset();\n    }\n  }\n}\n\nclass NodeCascade {\n  #matchedStyles: CSSMatchedStyles;\n  readonly styles: CSSStyleDeclaration[];\n  readonly #isInherited: boolean;\n  readonly #isHighlightPseudoCascade: boolean;\n  readonly propertiesState: Map<CSSProperty, PropertyState>;\n  readonly activeProperties: Map<string, CSSProperty>;\n  constructor(\n      matchedStyles: CSSMatchedStyles, styles: CSSStyleDeclaration[], isInherited: boolean,\n      isHighlightPseudoCascade: boolean = false) {\n    this.#matchedStyles = matchedStyles;\n    this.styles = styles;\n    this.#isInherited = isInherited;\n    this.#isHighlightPseudoCascade = isHighlightPseudoCascade;\n    this.propertiesState = new Map();\n    this.activeProperties = new Map();\n  }\n\n  computeActiveProperties(): void {\n    this.propertiesState.clear();\n    this.activeProperties.clear();\n\n    for (const style of this.styles) {\n      const rule = style.parentRule;\n      // Compute cascade for CSSStyleRules only.\n      if (rule && !(rule instanceof CSSStyleRule)) {\n        continue;\n      }\n      if (rule && !this.#matchedStyles.hasMatchingSelectors(rule)) {\n        continue;\n      }\n\n      for (const property of style.allProperties()) {\n        // Do not pick non-inherited properties from inherited styles.\n        const metadata = cssMetadata();\n\n        // All properties are inherited for highlight pseudos.\n        if (this.#isInherited && !this.#isHighlightPseudoCascade && !metadata.isPropertyInherited(property.name)) {\n          continue;\n        }\n\n        if (!property.activeInStyle()) {\n          this.propertiesState.set(property, PropertyState.Overloaded);\n          continue;\n        }\n\n        const canonicalName = metadata.canonicalPropertyName(property.name);\n        const isPropShorthand = Boolean(metadata.getLonghands(canonicalName));\n\n        if (isPropShorthand) {\n          const longhandsFromShort =\n              (property.value.match(CustomVariableRegex) || []).map(e => e.replace(CustomVariableRegex, '$2'));\n          longhandsFromShort.forEach(longhandProperty => {\n            if (metadata.isCSSPropertyName(longhandProperty)) {\n              const activeProperty = this.activeProperties.get(longhandProperty);\n              if (!activeProperty) {\n                this.activeProperties.set(longhandProperty, property);\n              } else {\n                this.propertiesState.set(activeProperty, PropertyState.Overloaded);\n                this.activeProperties.set(longhandProperty, property);\n              }\n            }\n          });\n        }\n\n        const activeProperty = this.activeProperties.get(canonicalName);\n        if (activeProperty && (activeProperty.important || !property.important)) {\n          this.propertiesState.set(property, PropertyState.Overloaded);\n          continue;\n        }\n\n        if (activeProperty) {\n          this.propertiesState.set(activeProperty, PropertyState.Overloaded);\n        }\n        this.propertiesState.set(property, PropertyState.Active);\n        this.activeProperties.set(canonicalName, property);\n      }\n    }\n  }\n}\n\nclass DOMInheritanceCascade {\n  readonly #nodeCascades: NodeCascade[];\n  readonly #propertiesState: Map<CSSProperty, PropertyState>;\n  readonly #availableCSSVariables: Map<NodeCascade, Map<string, string|null>>;\n  readonly #computedCSSVariables: Map<NodeCascade, Map<string, string|null>>;\n  #initialized: boolean;\n  readonly #styleToNodeCascade: Map<CSSStyleDeclaration, NodeCascade>;\n  constructor(nodeCascades: NodeCascade[]) {\n    this.#nodeCascades = nodeCascades;\n    this.#propertiesState = new Map();\n    this.#availableCSSVariables = new Map();\n    this.#computedCSSVariables = new Map();\n    this.#initialized = false;\n\n    this.#styleToNodeCascade = new Map();\n    for (const nodeCascade of nodeCascades) {\n      for (const style of nodeCascade.styles) {\n        this.#styleToNodeCascade.set(style, nodeCascade);\n      }\n    }\n  }\n\n  findAvailableCSSVariables(style: CSSStyleDeclaration): string[] {\n    const nodeCascade = this.#styleToNodeCascade.get(style);\n    if (!nodeCascade) {\n      return [];\n    }\n    this.ensureInitialized();\n    const availableCSSVariables = this.#availableCSSVariables.get(nodeCascade);\n    if (!availableCSSVariables) {\n      return [];\n    }\n    return Array.from(availableCSSVariables.keys());\n  }\n\n  computeCSSVariable(style: CSSStyleDeclaration, variableName: string): string|null {\n    const nodeCascade = this.#styleToNodeCascade.get(style);\n    if (!nodeCascade) {\n      return null;\n    }\n    this.ensureInitialized();\n    const availableCSSVariables = this.#availableCSSVariables.get(nodeCascade);\n    const computedCSSVariables = this.#computedCSSVariables.get(nodeCascade);\n    if (!availableCSSVariables || !computedCSSVariables) {\n      return null;\n    }\n    return this.innerComputeCSSVariable(availableCSSVariables, computedCSSVariables, variableName);\n  }\n\n  computeValue(style: CSSStyleDeclaration, value: string): string|null {\n    const nodeCascade = this.#styleToNodeCascade.get(style);\n    if (!nodeCascade) {\n      return null;\n    }\n    this.ensureInitialized();\n    const availableCSSVariables = this.#availableCSSVariables.get(nodeCascade);\n    const computedCSSVariables = this.#computedCSSVariables.get(nodeCascade);\n    if (!availableCSSVariables || !computedCSSVariables) {\n      return null;\n    }\n    return this.innerComputeValue(availableCSSVariables, computedCSSVariables, value);\n  }\n\n  computeSingleVariableValue(style: CSSStyleDeclaration, cssVariableValue: string): {\n    computedValue: string|null,\n    fromFallback: boolean,\n  }|null {\n    const nodeCascade = this.#styleToNodeCascade.get(style);\n    if (!nodeCascade) {\n      return null;\n    }\n    this.ensureInitialized();\n    const availableCSSVariables = this.#availableCSSVariables.get(nodeCascade);\n    const computedCSSVariables = this.#computedCSSVariables.get(nodeCascade);\n    if (!availableCSSVariables || !computedCSSVariables) {\n      return null;\n    }\n    const computedValue = this.innerComputeValue(availableCSSVariables, computedCSSVariables, cssVariableValue);\n    const {variableName} = this.getCSSVariableNameAndFallback(cssVariableValue);\n\n    return {computedValue, fromFallback: variableName !== null && !availableCSSVariables.has(variableName)};\n  }\n\n  private getCSSVariableNameAndFallback(cssVariableValue: string): {\n    variableName: string|null,\n    fallback: string|null,\n  } {\n    const match = cssVariableValue.match(/^var\\((--[a-zA-Z0-9-_]+)[,]?\\s*(.*)\\)$/);\n    return {variableName: match && match[1], fallback: match && match[2]};\n  }\n\n  private innerComputeCSSVariable(\n      availableCSSVariables: Map<string, string|null>, computedCSSVariables: Map<string, string|null>,\n      variableName: string): string|null {\n    if (!availableCSSVariables.has(variableName)) {\n      return null;\n    }\n    if (computedCSSVariables.has(variableName)) {\n      return computedCSSVariables.get(variableName) || null;\n    }\n    // Set dummy value to avoid infinite recursion.\n    computedCSSVariables.set(variableName, null);\n    const definedValue = availableCSSVariables.get(variableName);\n    if (definedValue === undefined || definedValue === null) {\n      return null;\n    }\n    const computedValue = this.innerComputeValue(availableCSSVariables, computedCSSVariables, definedValue);\n    computedCSSVariables.set(variableName, computedValue);\n    return computedValue;\n  }\n\n  private innerComputeValue(\n      availableCSSVariables: Map<string, string|null>, computedCSSVariables: Map<string, string|null>,\n      value: string): string|null {\n    const results = TextUtils.TextUtils.Utils.splitStringByRegexes(value, [VariableRegex]);\n    const tokens = [];\n    for (const result of results) {\n      if (result.regexIndex === -1) {\n        tokens.push(result.value);\n        continue;\n      }\n      // process var() function\n      const {variableName, fallback} = this.getCSSVariableNameAndFallback(result.value);\n      if (!variableName) {\n        return null;\n      }\n      const computedValue = this.innerComputeCSSVariable(availableCSSVariables, computedCSSVariables, variableName);\n      if (computedValue === null && !fallback) {\n        return null;\n      }\n      if (computedValue === null) {\n        tokens.push(fallback);\n      } else {\n        tokens.push(computedValue);\n      }\n    }\n    return tokens.map(token => token ? token.trim() : '').join(' ');\n  }\n\n  styles(): CSSStyleDeclaration[] {\n    return Array.from(this.#styleToNodeCascade.keys());\n  }\n\n  propertyState(property: CSSProperty): PropertyState|null {\n    this.ensureInitialized();\n    return this.#propertiesState.get(property) || null;\n  }\n\n  reset(): void {\n    this.#initialized = false;\n    this.#propertiesState.clear();\n    this.#availableCSSVariables.clear();\n    this.#computedCSSVariables.clear();\n  }\n\n  private ensureInitialized(): void {\n    if (this.#initialized) {\n      return;\n    }\n    this.#initialized = true;\n\n    const activeProperties = new Map<string, CSSProperty>();\n    for (const nodeCascade of this.#nodeCascades) {\n      nodeCascade.computeActiveProperties();\n      for (const entry of nodeCascade.propertiesState.entries()) {\n        const property = (entry[0] as CSSProperty);\n        const state = (entry[1] as PropertyState);\n        if (state === PropertyState.Overloaded) {\n          this.#propertiesState.set(property, PropertyState.Overloaded);\n          continue;\n        }\n        const canonicalName = cssMetadata().canonicalPropertyName(property.name);\n        if (activeProperties.has(canonicalName)) {\n          this.#propertiesState.set(property, PropertyState.Overloaded);\n          continue;\n        }\n        activeProperties.set(canonicalName, property);\n        this.#propertiesState.set(property, PropertyState.Active);\n      }\n    }\n    // If every longhand of the shorthand is not active, then the shorthand is not active too.\n    for (const entry of activeProperties.entries()) {\n      const canonicalName = (entry[0] as string);\n      const shorthandProperty = (entry[1] as CSSProperty);\n      const shorthandStyle = shorthandProperty.ownerStyle;\n      const longhands = shorthandStyle.longhandProperties(shorthandProperty.name);\n      if (!longhands.length) {\n        continue;\n      }\n      let hasActiveLonghands = false;\n      for (const longhand of longhands) {\n        const longhandCanonicalName = cssMetadata().canonicalPropertyName(longhand.name);\n        const longhandActiveProperty = activeProperties.get(longhandCanonicalName);\n        if (!longhandActiveProperty) {\n          continue;\n        }\n        if (longhandActiveProperty.ownerStyle === shorthandStyle) {\n          hasActiveLonghands = true;\n          break;\n        }\n      }\n      if (hasActiveLonghands) {\n        continue;\n      }\n      activeProperties.delete(canonicalName);\n      this.#propertiesState.set(shorthandProperty, PropertyState.Overloaded);\n    }\n\n    // Work inheritance chain backwards to compute visible CSS Variables.\n    const accumulatedCSSVariables = new Map<string, string|null>();\n    for (let i = this.#nodeCascades.length - 1; i >= 0; --i) {\n      const nodeCascade = this.#nodeCascades[i];\n      const variableNames = [];\n      for (const entry of nodeCascade.activeProperties.entries()) {\n        const propertyName = (entry[0] as string);\n        const property = (entry[1] as CSSProperty);\n        if (propertyName.startsWith('--')) {\n          accumulatedCSSVariables.set(propertyName, property.value);\n          variableNames.push(propertyName);\n        }\n      }\n      const availableCSSVariablesMap = new Map(accumulatedCSSVariables);\n      const computedVariablesMap = new Map();\n      this.#availableCSSVariables.set(nodeCascade, availableCSSVariablesMap);\n      this.#computedCSSVariables.set(nodeCascade, computedVariablesMap);\n      for (const variableName of variableNames) {\n        accumulatedCSSVariables.delete(variableName);\n        accumulatedCSSVariables.set(\n            variableName, this.innerComputeCSSVariable(availableCSSVariablesMap, computedVariablesMap, variableName));\n      }\n    }\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum PropertyState {\n  Active = 'Active',\n  Overloaded = 'Overloaded',\n}\n"],
  "mappings": "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",
  "names": []
}
