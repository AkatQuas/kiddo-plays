{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/PaintProfiler.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport type {Target} from './Target.js';\nimport {Capability} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\n\nexport class PaintProfilerModel extends SDKModel<void> {\n  readonly layerTreeAgent: ProtocolProxyApi.LayerTreeApi;\n\n  constructor(target: Target) {\n    super(target);\n    this.layerTreeAgent = target.layerTreeAgent();\n  }\n\n  async loadSnapshotFromFragments(tiles: Protocol.LayerTree.PictureTile[]): Promise<PaintProfilerSnapshot|null> {\n    const {snapshotId} = await this.layerTreeAgent.invoke_loadSnapshot({tiles});\n    return snapshotId ? new PaintProfilerSnapshot(this, snapshotId) : null;\n  }\n\n  loadSnapshot(encodedPicture: Protocol.binary): Promise<PaintProfilerSnapshot|null> {\n    const fragment = {x: 0, y: 0, picture: encodedPicture};\n    return this.loadSnapshotFromFragments([fragment]);\n  }\n\n  async makeSnapshot(layerId: Protocol.LayerTree.LayerId): Promise<PaintProfilerSnapshot|null> {\n    const {snapshotId} = await this.layerTreeAgent.invoke_makeSnapshot({layerId});\n    return snapshotId ? new PaintProfilerSnapshot(this, snapshotId) : null;\n  }\n}\n\nexport class PaintProfilerSnapshot {\n  readonly #paintProfilerModel: PaintProfilerModel;\n  readonly #id: Protocol.LayerTree.SnapshotId;\n  #refCount: number;\n\n  constructor(paintProfilerModel: PaintProfilerModel, snapshotId: Protocol.LayerTree.SnapshotId) {\n    this.#paintProfilerModel = paintProfilerModel;\n    this.#id = snapshotId;\n    this.#refCount = 1;\n  }\n\n  release(): void {\n    console.assert(this.#refCount > 0, 'release is already called on the object');\n    if (!--this.#refCount) {\n      void this.#paintProfilerModel.layerTreeAgent.invoke_releaseSnapshot({snapshotId: this.#id});\n    }\n  }\n\n  addReference(): void {\n    ++this.#refCount;\n    console.assert(this.#refCount > 0, 'Referencing a dead object');\n  }\n\n  async replay(scale?: number, fromStep?: number, toStep?: number): Promise<string|null> {\n    const response = await this.#paintProfilerModel.layerTreeAgent.invoke_replaySnapshot(\n        {snapshotId: this.#id, fromStep, toStep, scale: scale || 1.0});\n    return response.dataURL;\n  }\n\n  async profile(clipRect: Protocol.DOM.Rect|null): Promise<Protocol.LayerTree.PaintProfile[]> {\n    const response = await this.#paintProfilerModel.layerTreeAgent.invoke_profileSnapshot(\n        {snapshotId: this.#id, minRepeatCount: 5, minDuration: 1, clipRect: clipRect || undefined});\n\n    return response.timings;\n  }\n\n  async commandLog(): Promise<PaintProfilerLogItem[]|null> {\n    const response = await this.#paintProfilerModel.layerTreeAgent.invoke_snapshotCommandLog({snapshotId: this.#id});\n\n    return response.commandLog ? response.commandLog.map((entry, index) => new PaintProfilerLogItem(entry, index)) :\n                                 null;\n  }\n}\n\nexport class PaintProfilerLogItem {\n  method: string;\n  params: RawPaintProfilerLogItemParams|null;\n  commandIndex: number;\n\n  constructor(rawEntry: RawPaintProfilerLogItem, commandIndex: number) {\n    this.method = rawEntry.method;\n    this.params = rawEntry.params;\n    this.commandIndex = commandIndex;\n  }\n}\n\nSDKModel.register(PaintProfilerModel, {capabilities: Capability.DOM, autostart: false});\n\nexport type RawPaintProfilerLogItemParamValue = string|{[key: string]: RawPaintProfilerLogItemParamValue};\nexport type RawPaintProfilerLogItemParams = {\n  [key: string]: RawPaintProfilerLogItemParamValue,\n};\n\nexport interface SnapshotWithRect {\n  rect: Protocol.DOM.Rect;\n  snapshot: PaintProfilerSnapshot;\n}\n\nexport interface PictureFragment {\n  x: number;\n  y: number;\n  picture: string;\n}\n\nexport interface RawPaintProfilerLogItem {\n  method: string;\n  params: RawPaintProfilerLogItemParams|null;\n}\n"],
  "mappings": "AAkCA;AACA;AAEO,wCAAiC,SAAe;AAAA,EAC5C;AAAA,EAET,YAAY,QAAgB;AAC1B,UAAM;AACN,SAAK,iBAAiB,OAAO;AAAA;AAAA,QAGzB,0BAA0B,OAA8E;AAC5G,UAAM,EAAC,eAAc,MAAM,KAAK,eAAe,oBAAoB,EAAC;AACpE,WAAO,aAAa,IAAI,sBAAsB,MAAM,cAAc;AAAA;AAAA,EAGpE,aAAa,gBAAsE;AACjF,UAAM,WAAW,EAAC,GAAG,GAAG,GAAG,GAAG,SAAS;AACvC,WAAO,KAAK,0BAA0B,CAAC;AAAA;AAAA,QAGnC,aAAa,SAA0E;AAC3F,UAAM,EAAC,eAAc,MAAM,KAAK,eAAe,oBAAoB,EAAC;AACpE,WAAO,aAAa,IAAI,sBAAsB,MAAM,cAAc;AAAA;AAAA;AAI/D,mCAA4B;AAAA;AAAA;AAAA;AAAA,EAKjC,YAAY,oBAAwC,YAA2C;AAC7F,+BAA2B;AAC3B,eAAW;AACX,qBAAiB;AAAA;AAAA,EAGnB,UAAgB;AACd,YAAQ,OAAO,iBAAiB,GAAG;AACnC,QAAI,CAAC,EAAE,gBAAgB;AACrB,WAAK,yBAAyB,eAAe,uBAAuB,EAAC,YAAY;AAAA;AAAA;AAAA,EAIrF,eAAqB;AACnB,MAAE;AACF,YAAQ,OAAO,iBAAiB,GAAG;AAAA;AAAA,QAG/B,OAAO,OAAgB,UAAmB,QAAuC;AACrF,UAAM,WAAW,MAAM,yBAAyB,eAAe,sBAC3D,EAAC,YAAY,UAAU,UAAU,QAAQ,OAAO,SAAS;AAC7D,WAAO,SAAS;AAAA;AAAA,QAGZ,QAAQ,UAA8E;AAC1F,UAAM,WAAW,MAAM,yBAAyB,eAAe,uBAC3D,EAAC,YAAY,UAAU,gBAAgB,GAAG,aAAa,GAAG,UAAU,YAAY;AAEpF,WAAO,SAAS;AAAA;AAAA,QAGZ,aAAmD;AACvD,UAAM,WAAW,MAAM,yBAAyB,eAAe,0BAA0B,EAAC,YAAY;AAEtG,WAAO,SAAS,aAAa,SAAS,WAAW,IAAI,CAAC,OAAO,UAAU,IAAI,qBAAqB,OAAO,UAC1E;AAAA;AAAA;AAI1B,kCAA2B;AAAA,EAChC;AAAA,EACA;AAAA,EACA;AAAA,EAEA,YAAY,UAAmC,cAAsB;AACnE,SAAK,SAAS,SAAS;AACvB,SAAK,SAAS,SAAS;AACvB,SAAK,eAAe;AAAA;AAAA;AAIxB,SAAS,SAAS,oBAAoB,EAAC,cAAc,WAAW,KAAK,WAAW;",
  "names": []
}
