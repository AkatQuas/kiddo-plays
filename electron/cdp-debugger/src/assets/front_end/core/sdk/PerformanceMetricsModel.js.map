{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/PerformanceMetricsModel.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../platform/platform.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\n\nimport type {Target} from './Target.js';\nimport {Capability} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\n\nexport class PerformanceMetricsModel extends SDKModel<void> {\n  readonly #agent: ProtocolProxyApi.PerformanceApi;\n  readonly #metricModes: Map<string, MetricMode>;\n  readonly #metricData: Map<string, {\n    lastValue: (number | undefined),\n    lastTimestamp: (number|undefined),\n  }>;\n\n  constructor(target: Target) {\n    super(target);\n    this.#agent = target.performanceAgent();\n\n    this.#metricModes = new Map([\n      ['TaskDuration', MetricMode.CumulativeTime],\n      ['ScriptDuration', MetricMode.CumulativeTime],\n      ['LayoutDuration', MetricMode.CumulativeTime],\n      ['RecalcStyleDuration', MetricMode.CumulativeTime],\n      ['LayoutCount', MetricMode.CumulativeCount],\n      ['RecalcStyleCount', MetricMode.CumulativeCount],\n    ]);\n\n    this.#metricData = new Map();\n  }\n\n  enable(): Promise<Object> {\n    return this.#agent.invoke_enable({});\n  }\n\n  disable(): Promise<Object> {\n    return this.#agent.invoke_disable();\n  }\n\n  async requestMetrics(): Promise<{\n    metrics: Map<string, number>,\n    timestamp: number,\n  }> {\n    const rawMetrics = await this.#agent.invoke_getMetrics() || [];\n    const metrics = new Map<string, number>();\n    const timestamp = performance.now();\n    for (const metric of rawMetrics.metrics) {\n      let data = this.#metricData.get(metric.name);\n      if (!data) {\n        data = {lastValue: undefined, lastTimestamp: undefined};\n        this.#metricData.set(metric.name, data);\n      }\n      let value;\n      switch (this.#metricModes.get(metric.name)) {\n        case MetricMode.CumulativeTime:\n          value = (data.lastTimestamp && data.lastValue) ?\n              Platform.NumberUtilities.clamp(\n                  (metric.value - data.lastValue) * 1000 / (timestamp - data.lastTimestamp), 0, 1) :\n              0;\n          data.lastValue = metric.value;\n          data.lastTimestamp = timestamp;\n          break;\n        case MetricMode.CumulativeCount:\n          value = (data.lastTimestamp && data.lastValue) ?\n              Math.max(0, (metric.value - data.lastValue) * 1000 / (timestamp - data.lastTimestamp)) :\n              0;\n          data.lastValue = metric.value;\n          data.lastTimestamp = timestamp;\n          break;\n        default:\n          value = metric.value;\n          break;\n      }\n      metrics.set(metric.name, value);\n    }\n    return {metrics: metrics, timestamp: timestamp};\n  }\n}\n\nconst enum MetricMode {\n  CumulativeTime = 'CumulativeTime',\n  CumulativeCount = 'CumulativeCount',\n}\n\nSDKModel.register(PerformanceMetricsModel, {capabilities: Capability.DOM, autostart: false});\n"],
  "mappings": "AAIA;AAIA;AACA;AAEO,6CAAsC,SAAe;AAAA;AAAA;AAAA;AAAA,EAQ1D,YAAY,QAAgB;AAC1B,UAAM;AACN,kBAAc,OAAO;AAErB,wBAAoB,oBAAI,IAAI;AAAA,MAC1B,CAAC,gBAAgB,WAAW;AAAA,MAC5B,CAAC,kBAAkB,WAAW;AAAA,MAC9B,CAAC,kBAAkB,WAAW;AAAA,MAC9B,CAAC,uBAAuB,WAAW;AAAA,MACnC,CAAC,eAAe,WAAW;AAAA,MAC3B,CAAC,oBAAoB,WAAW;AAAA;AAGlC,uBAAmB,oBAAI;AAAA;AAAA,EAGzB,SAA0B;AACxB,WAAO,YAAY,cAAc;AAAA;AAAA,EAGnC,UAA2B;AACzB,WAAO,YAAY;AAAA;AAAA,QAGf,iBAGH;AACD,UAAM,aAAa,MAAM,YAAY,uBAAuB;AAC5D,UAAM,UAAU,oBAAI;AACpB,UAAM,YAAY,YAAY;AAC9B,eAAW,UAAU,WAAW,SAAS;AACvC,UAAI,OAAO,iBAAiB,IAAI,OAAO;AACvC,UAAI,CAAC,MAAM;AACT,eAAO,EAAC,WAAW,QAAW,eAAe;AAC7C,yBAAiB,IAAI,OAAO,MAAM;AAAA;AAEpC,UAAI;AACJ,cAAQ,kBAAkB,IAAI,OAAO;AAAA,aAC9B,WAAW;AACd,kBAAS,KAAK,iBAAiB,KAAK,YAChC,SAAS,gBAAgB,MACpB,QAAO,QAAQ,KAAK,aAAa,MAAQ,aAAY,KAAK,gBAAgB,GAAG,KAClF;AACJ,eAAK,YAAY,OAAO;AACxB,eAAK,gBAAgB;AACrB;AAAA,aACG,WAAW;AACd,kBAAS,KAAK,iBAAiB,KAAK,YAChC,KAAK,IAAI,GAAI,QAAO,QAAQ,KAAK,aAAa,MAAQ,aAAY,KAAK,kBACvE;AACJ,eAAK,YAAY,OAAO;AACxB,eAAK,gBAAgB;AACrB;AAAA;AAEA,kBAAQ,OAAO;AACf;AAAA;AAEJ,cAAQ,IAAI,OAAO,MAAM;AAAA;AAE3B,WAAO,EAAC,SAAkB;AAAA;AAAA;AAI9B,IAAW,aAAX,kBAAW,gBAAX;AACE,kCAAiB;AACjB,mCAAkB;AAFT;AAAA;AAKX,SAAS,SAAS,yBAAyB,EAAC,cAAc,WAAW,KAAK,WAAW;",
  "names": []
}
