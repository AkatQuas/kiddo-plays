{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/FrameManager.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport type {Resource} from './Resource.js';\nimport type {ResourceTreeFrame} from './ResourceTreeModel.js';\nimport {Events as ResourceTreeModelEvents, ResourceTreeModel} from './ResourceTreeModel.js';\nimport type {Target} from './Target.js';\nimport type {SDKModelObserver} from './TargetManager.js';\nimport {TargetManager} from './TargetManager.js';\n\nlet frameManagerInstance: FrameManager|null = null;\n\n/**\n * The FrameManager is a central storage for all #frames. It collects #frames from all\n * ResourceTreeModel-instances (one per target), so that #frames can be found by id\n * without needing to know their target.\n */\nexport class FrameManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> implements\n    SDKModelObserver<ResourceTreeModel> {\n  readonly #eventListeners: WeakMap<ResourceTreeModel, Common.EventTarget.EventDescriptor[]>;\n  #frames: Map<string, {\n    frame: ResourceTreeFrame,\n    count: number,\n  }>;\n  readonly #framesForTarget: Map<Protocol.Target.TargetID|'main', Set<Protocol.Page.FrameId>>;\n  #topFrame: ResourceTreeFrame|null;\n  #transferringFramesDataCache: Map<string, {\n    creationStackTrace?: Protocol.Runtime.StackTrace,\n    creationStackTraceTarget?: Target,\n    adScriptId?: Protocol.Runtime.ScriptId,\n    debuggerId?: Protocol.Runtime.UniqueDebuggerId,\n  }>;\n  #awaitedFrames: Map<string, {notInTarget?: Target, resolve: (frame: ResourceTreeFrame) => void}[]> = new Map();\n\n  constructor() {\n    super();\n    this.#eventListeners = new WeakMap();\n    TargetManager.instance().observeModels(ResourceTreeModel, this);\n\n    // Maps frameIds to #frames and a count of how many ResourceTreeModels contain this frame.\n    // (OOPIFs are usually first attached to a new target and then detached from their old target,\n    // therefore being contained in 2 models for a short period of time.)\n    this.#frames = new Map();\n\n    // Maps targetIds to a set of frameIds.\n    this.#framesForTarget = new Map();\n\n    this.#topFrame = null;\n    this.#transferringFramesDataCache = new Map();\n  }\n\n  static instance({forceNew}: {\n    forceNew: boolean,\n  } = {forceNew: false}): FrameManager {\n    if (!frameManagerInstance || forceNew) {\n      frameManagerInstance = new FrameManager();\n    }\n    return frameManagerInstance;\n  }\n\n  modelAdded(resourceTreeModel: ResourceTreeModel): void {\n    const addListener = resourceTreeModel.addEventListener(ResourceTreeModelEvents.FrameAdded, this.frameAdded, this);\n    const detachListener =\n        resourceTreeModel.addEventListener(ResourceTreeModelEvents.FrameDetached, this.frameDetached, this);\n    const navigatedListener =\n        resourceTreeModel.addEventListener(ResourceTreeModelEvents.FrameNavigated, this.frameNavigated, this);\n    const resourceAddedListener =\n        resourceTreeModel.addEventListener(ResourceTreeModelEvents.ResourceAdded, this.resourceAdded, this);\n    this.#eventListeners.set(\n        resourceTreeModel, [addListener, detachListener, navigatedListener, resourceAddedListener]);\n    this.#framesForTarget.set(resourceTreeModel.target().id(), new Set());\n  }\n\n  modelRemoved(resourceTreeModel: ResourceTreeModel): void {\n    const listeners = this.#eventListeners.get(resourceTreeModel);\n    if (listeners) {\n      Common.EventTarget.removeEventListeners(listeners);\n    }\n\n    // Iterate over this model's #frames and decrease their count or remove them.\n    // (The ResourceTreeModel does not send FrameDetached events when a model\n    // is removed.)\n    const frameSet = this.#framesForTarget.get(resourceTreeModel.target().id());\n    if (frameSet) {\n      for (const frameId of frameSet) {\n        this.decreaseOrRemoveFrame(frameId);\n      }\n    }\n    this.#framesForTarget.delete(resourceTreeModel.target().id());\n  }\n\n  private frameAdded(event: Common.EventTarget.EventTargetEvent<ResourceTreeFrame>): void {\n    const frame = event.data;\n    const frameData = this.#frames.get(frame.id);\n    // If the frame is already in the map, increase its count, otherwise add it to the map.\n    if (frameData) {\n      // In order to not lose the following attributes of a frame during\n      // an OOPIF transfer we need to copy them to the new frame\n      frame.setCreationStackTrace(frameData.frame.getCreationStackTraceData());\n      frame.setAdScriptId(frameData.frame.getAdScriptId());\n      frame.setDebuggerId(frameData.frame.getDebuggerId());\n      this.#frames.set(frame.id, {frame, count: frameData.count + 1});\n    } else {\n      // If the transferring frame's detached event is received before its frame added\n      // event in the new target, the frame's cached attributes are reassigned.\n      const cachedFrameAttributes = this.#transferringFramesDataCache.get(frame.id);\n      if (cachedFrameAttributes?.creationStackTrace && cachedFrameAttributes?.creationStackTraceTarget) {\n        frame.setCreationStackTrace({\n          creationStackTrace: cachedFrameAttributes.creationStackTrace,\n          creationStackTraceTarget: cachedFrameAttributes.creationStackTraceTarget,\n        });\n      }\n      if (cachedFrameAttributes?.adScriptId) {\n        frame.setAdScriptId(cachedFrameAttributes.adScriptId);\n      }\n      if (cachedFrameAttributes?.debuggerId) {\n        frame.setDebuggerId(cachedFrameAttributes.debuggerId);\n      }\n      this.#frames.set(frame.id, {frame, count: 1});\n      this.#transferringFramesDataCache.delete(frame.id);\n    }\n    this.resetTopFrame();\n\n    // Add the frameId to the the targetId's set of frameIds.\n    const frameSet = this.#framesForTarget.get(frame.resourceTreeModel().target().id());\n    if (frameSet) {\n      frameSet.add(frame.id);\n    }\n\n    this.dispatchEventToListeners(Events.FrameAddedToTarget, {frame});\n    this.resolveAwaitedFrame(frame);\n  }\n\n  private frameDetached(event: Common.EventTarget.EventTargetEvent<{frame: ResourceTreeFrame, isSwap: boolean}>): void {\n    const {frame, isSwap} = event.data;\n    // Decrease the frame's count or remove it entirely from the map.\n    this.decreaseOrRemoveFrame(frame.id);\n\n    // If the transferring frame's detached event is received before its frame\n    // added event in the new target, we persist some attributes of the frame here\n    // so that later on the frame added event in the new target they can be reassigned.\n    if (isSwap && !this.#frames.get(frame.id)) {\n      const traceData = frame.getCreationStackTraceData();\n      const adScriptId = frame.getAdScriptId();\n      const debuggerId = frame.getDebuggerId();\n      const cachedFrameAttributes = {\n        ...(traceData.creationStackTrace && {creationStackTrace: traceData.creationStackTrace}),\n        ...(traceData.creationStackTrace && {creationStackTraceTarget: traceData.creationStackTraceTarget}),\n        ...(adScriptId && {adScriptId}),\n        ...(debuggerId && {debuggerId}),\n      };\n      this.#transferringFramesDataCache.set(frame.id, cachedFrameAttributes);\n    }\n\n    // Remove the frameId from the target's set of frameIds.\n    const frameSet = this.#framesForTarget.get(frame.resourceTreeModel().target().id());\n    if (frameSet) {\n      frameSet.delete(frame.id);\n    }\n  }\n\n  private frameNavigated(event: Common.EventTarget.EventTargetEvent<ResourceTreeFrame>): void {\n    const frame = event.data;\n    this.dispatchEventToListeners(Events.FrameNavigated, {frame});\n    if (frame.isTopFrame()) {\n      this.dispatchEventToListeners(Events.TopFrameNavigated, {frame});\n    }\n  }\n\n  private resourceAdded(event: Common.EventTarget.EventTargetEvent<Resource>): void {\n    this.dispatchEventToListeners(Events.ResourceAdded, {resource: event.data});\n  }\n\n  private decreaseOrRemoveFrame(frameId: Protocol.Page.FrameId): void {\n    const frameData = this.#frames.get(frameId);\n    if (frameData) {\n      if (frameData.count === 1) {\n        this.#frames.delete(frameId);\n        this.resetTopFrame();\n        this.dispatchEventToListeners(Events.FrameRemoved, {frameId});\n      } else {\n        frameData.count--;\n      }\n    }\n  }\n\n  /**\n   * Looks for the top frame in `#frames` and sets `#topFrame` accordingly.\n   *\n   * Important: This method needs to be called everytime `#frames` is updated.\n   */\n  private resetTopFrame(): void {\n    const topFrames = this.getAllFrames().filter(frame => frame.isTopFrame());\n    this.#topFrame = topFrames.length > 0 ? topFrames[0] : null;\n  }\n\n  /**\n   * Returns the ResourceTreeFrame with a given frameId.\n   * When a frame is being detached a new ResourceTreeFrame but with the same\n   * frameId is created. Consequently getFrame() will return a different\n   * ResourceTreeFrame after detachment. Callers of getFrame() should therefore\n   * immediately use the function return value and not store it for later use.\n   */\n  getFrame(frameId: Protocol.Page.FrameId): ResourceTreeFrame|null {\n    const frameData = this.#frames.get(frameId);\n    if (frameData) {\n      return frameData.frame;\n    }\n    return null;\n  }\n\n  getAllFrames(): ResourceTreeFrame[] {\n    return Array.from(this.#frames.values(), frameData => frameData.frame);\n  }\n\n  getTopFrame(): ResourceTreeFrame|null {\n    return this.#topFrame;\n  }\n\n  async getOrWaitForFrame(frameId: Protocol.Page.FrameId, notInTarget?: Target): Promise<ResourceTreeFrame> {\n    const frame = this.getFrame(frameId);\n    if (frame && (!notInTarget || notInTarget !== frame.resourceTreeModel().target())) {\n      return frame;\n    }\n    return new Promise<ResourceTreeFrame>(resolve => {\n      const waiting = this.#awaitedFrames.get(frameId);\n      if (waiting) {\n        waiting.push({notInTarget, resolve});\n      } else {\n        this.#awaitedFrames.set(frameId, [{notInTarget, resolve}]);\n      }\n    });\n  }\n\n  private resolveAwaitedFrame(frame: ResourceTreeFrame): void {\n    const waiting = this.#awaitedFrames.get(frame.id);\n    if (!waiting) {\n      return;\n    }\n    const newWaiting = waiting.filter(({notInTarget, resolve}) => {\n      if (!notInTarget || notInTarget !== frame.resourceTreeModel().target()) {\n        resolve(frame);\n        return false;\n      }\n      return true;\n    });\n    if (newWaiting.length > 0) {\n      this.#awaitedFrames.set(frame.id, newWaiting);\n    } else {\n      this.#awaitedFrames.delete(frame.id);\n    }\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  // The FrameAddedToTarget event is sent whenever a frame is added to a target.\n  // This means that for OOPIFs it is sent twice: once when it's added to a\n  // parent target and a second time when it's added to its own target.\n  FrameAddedToTarget = 'FrameAddedToTarget',\n  FrameNavigated = 'FrameNavigated',\n  // The FrameRemoved event is only sent when a frame has been detached from\n  // all targets.\n  FrameRemoved = 'FrameRemoved',\n  ResourceAdded = 'ResourceAdded',\n  TopFrameNavigated = 'TopFrameNavigated',\n}\n\nexport type EventTypes = {\n  [Events.FrameAddedToTarget]: {frame: ResourceTreeFrame},\n  [Events.FrameNavigated]: {frame: ResourceTreeFrame},\n  [Events.FrameRemoved]: {frameId: Protocol.Page.FrameId},\n  [Events.ResourceAdded]: {resource: Resource},\n  [Events.TopFrameNavigated]: {frame: ResourceTreeFrame},\n};\n"],
  "mappings": "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",
  "names": []
}
