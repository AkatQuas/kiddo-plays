{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/CookieParser.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2010 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n// Ideally, we would rely on platform support for parsing a cookie, since\n// this would save us from any potential inconsistency. However, exposing\n// platform cookie parsing logic would require quite a bit of additional\n// plumbing, and at least some platforms lack support for parsing Cookie,\n// which is in a format slightly different from Set-Cookie and is normally\n// only required on the server side.\n\nimport {Cookie, Type} from './Cookie.js';\n\nexport class CookieParser {\n  readonly #domain: string|undefined;\n  #cookiesInternal: Cookie[];\n  #input!: string|undefined;\n  #originalInputLength: number;\n  #lastCookie?: Cookie|null;\n  #lastCookieLine?: string;\n  #lastCookiePosition?: number;\n  constructor(domain?: string) {\n    if (domain) {\n      // Handle #domain according to\n      // https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#section-5.3.3\n      this.#domain = domain.toLowerCase().replace(/^\\./, '');\n    }\n\n    this.#cookiesInternal = [];\n\n    this.#originalInputLength = 0;\n  }\n\n  static parseSetCookie(header: string|undefined, domain?: string): Cookie[]|null {\n    return (new CookieParser(domain)).parseSetCookie(header);\n  }\n\n  cookies(): Cookie[] {\n    return this.#cookiesInternal;\n  }\n\n  parseSetCookie(setCookieHeader: string|undefined): Cookie[]|null {\n    if (!this.initialize(setCookieHeader)) {\n      return null;\n    }\n    for (let kv = this.extractKeyValue(); kv; kv = this.extractKeyValue()) {\n      if (this.#lastCookie) {\n        this.#lastCookie.addAttribute(kv.key, kv.value);\n      } else {\n        this.addCookie(kv, Type.Response);\n      }\n      if (this.advanceAndCheckCookieDelimiter()) {\n        this.flushCookie();\n      }\n    }\n    this.flushCookie();\n    return this.#cookiesInternal;\n  }\n\n  private initialize(headerValue: string|undefined): boolean {\n    this.#input = headerValue;\n\n    if (typeof headerValue !== 'string') {\n      return false;\n    }\n\n    this.#cookiesInternal = [];\n    this.#lastCookie = null;\n    this.#lastCookieLine = '';\n    this.#originalInputLength = (this.#input as string).length;\n    return true;\n  }\n\n  private flushCookie(): void {\n    if (this.#lastCookie) {\n      // if we have a last cookie we know that these valeus all exist, hence the typecasts\n      this.#lastCookie.setSize(\n          this.#originalInputLength - (this.#input as string).length - (this.#lastCookiePosition as number));\n      this.#lastCookie.setCookieLine((this.#lastCookieLine as string).replace('\\n', ''));\n    }\n    this.#lastCookie = null;\n    this.#lastCookieLine = '';\n  }\n\n  private extractKeyValue(): KeyValue|null {\n    if (!this.#input || !this.#input.length) {\n      return null;\n    }\n    // Note: RFCs offer an option for quoted values that may contain commas and semicolons.\n    // Many browsers/platforms do not support this, however (see http://webkit.org/b/16699\n    // and http://crbug.com/12361). The logic below matches latest versions of IE, Firefox,\n    // Chrome and Safari on some old platforms. The latest version of Safari supports quoted\n    // cookie values, though.\n    const keyValueMatch = /^[ \\t]*([^=;]+)[ \\t]*(?:=[ \\t]*([^;\\n]*))?/.exec(this.#input);\n    if (!keyValueMatch) {\n      console.error('Failed parsing cookie header before: ' + this.#input);\n      return null;\n    }\n\n    const result = new KeyValue(\n        keyValueMatch[1] && keyValueMatch[1].trim(), keyValueMatch[2] && keyValueMatch[2].trim(),\n        (this.#originalInputLength as number) - this.#input.length);\n    this.#lastCookieLine += keyValueMatch[0];\n    this.#input = this.#input.slice(keyValueMatch[0].length);\n    return result;\n  }\n\n  private advanceAndCheckCookieDelimiter(): boolean {\n    if (!this.#input) {\n      return false;\n    }\n\n    const match = /^\\s*[\\n;]\\s*/.exec(this.#input);\n    if (!match) {\n      return false;\n    }\n    this.#lastCookieLine += match[0];\n    this.#input = this.#input.slice(match[0].length);\n    return match[0].match('\\n') !== null;\n  }\n\n  private addCookie(keyValue: KeyValue, type: Type): void {\n    if (this.#lastCookie) {\n      this.#lastCookie.setSize(keyValue.position - (this.#lastCookiePosition as number));\n    }\n\n    // Mozilla bug 169091: Mozilla, IE and Chrome treat single token (w/o \"=\") as\n    // specifying a value for a cookie with empty name.\n    this.#lastCookie = typeof keyValue.value === 'string' ? new Cookie(keyValue.key, keyValue.value, type) :\n                                                            new Cookie('', keyValue.key, type);\n    if (this.#domain) {\n      this.#lastCookie.addAttribute('domain', this.#domain);\n    }\n    this.#lastCookiePosition = keyValue.position;\n    this.#cookiesInternal.push(this.#lastCookie);\n  }\n}\n\nclass KeyValue {\n  key: string;\n  value: string|undefined;\n  position: number;\n  constructor(key: string, value: string|undefined, position: number) {\n    this.key = key;\n    this.value = value;\n    this.position = position;\n  }\n}\n"],
  "mappings": "AAqCA;AAEO,0BAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQxB,YAAY,QAAiB;AAC3B,QAAI,QAAQ;AAGV,qBAAe,OAAO,cAAc,QAAQ,OAAO;AAAA;AAGrD,4BAAwB;AAExB,gCAA4B;AAAA;AAAA,SAGvB,eAAe,QAA0B,QAAgC;AAC9E,WAAQ,IAAI,aAAa,QAAS,eAAe;AAAA;AAAA,EAGnD,UAAoB;AAClB,WAAO;AAAA;AAAA,EAGT,eAAe,iBAAkD;AAC/D,QAAI,CAAC,KAAK,WAAW,kBAAkB;AACrC,aAAO;AAAA;AAET,aAAS,KAAK,KAAK,mBAAmB,IAAI,KAAK,KAAK,mBAAmB;AACrE,UAAI,kBAAkB;AACpB,yBAAiB,aAAa,GAAG,KAAK,GAAG;AAAA,aACpC;AACL,aAAK,UAAU,IAAI,KAAK;AAAA;AAE1B,UAAI,KAAK,kCAAkC;AACzC,aAAK;AAAA;AAAA;AAGT,SAAK;AACL,WAAO;AAAA;AAAA,EAGD,WAAW,aAAwC;AACzD,kBAAc;AAEd,QAAI,OAAO,gBAAgB,UAAU;AACnC,aAAO;AAAA;AAGT,4BAAwB;AACxB,uBAAmB;AACnB,2BAAuB;AACvB,gCAA6B,YAAuB;AACpD,WAAO;AAAA;AAAA,EAGD,cAAoB;AAC1B,QAAI,kBAAkB;AAEpB,uBAAiB,QACb,4BAA6B,YAAuB,SAAU;AAClE,uBAAiB,cAAe,qBAAgC,QAAQ,MAAM;AAAA;AAEhF,uBAAmB;AACnB,2BAAuB;AAAA;AAAA,EAGjB,kBAAiC;AACvC,QAAI,CAAC,eAAe,CAAC,YAAY,QAAQ;AACvC,aAAO;AAAA;AAOT,UAAM,gBAAgB,6CAA6C,KAAK;AACxE,QAAI,CAAC,eAAe;AAClB,cAAQ,MAAM,0CAA0C;AACxD,aAAO;AAAA;AAGT,UAAM,SAAS,IAAI,SACf,cAAc,MAAM,cAAc,GAAG,QAAQ,cAAc,MAAM,cAAc,GAAG,QACjF,4BAAuC,YAAY;AACxD,4BAAwB,cAAc;AACtC,kBAAc,YAAY,MAAM,cAAc,GAAG;AACjD,WAAO;AAAA;AAAA,EAGD,iCAA0C;AAChD,QAAI,CAAC,aAAa;AAChB,aAAO;AAAA;AAGT,UAAM,QAAQ,eAAe,KAAK;AAClC,QAAI,CAAC,OAAO;AACV,aAAO;AAAA;AAET,4BAAwB,MAAM;AAC9B,kBAAc,YAAY,MAAM,MAAM,GAAG;AACzC,WAAO,MAAM,GAAG,MAAM,UAAU;AAAA;AAAA,EAG1B,UAAU,UAAoB,MAAkB;AACtD,QAAI,kBAAkB;AACpB,uBAAiB,QAAQ,SAAS,WAAY;AAAA;AAKhD,uBAAmB,OAAO,SAAS,UAAU,WAAW,IAAI,OAAO,SAAS,KAAK,SAAS,OAAO,QACzC,IAAI,OAAO,IAAI,SAAS,KAAK;AACrF,QAAI,cAAc;AAChB,uBAAiB,aAAa,UAAU;AAAA;AAE1C,+BAA2B,SAAS;AACpC,0BAAsB,KAAK;AAAA;AAAA;AAI/B,eAAe;AAAA,EACb;AAAA,EACA;AAAA,EACA;AAAA,EACA,YAAY,KAAa,OAAyB,UAAkB;AAClE,SAAK,MAAM;AACX,SAAK,QAAQ;AACb,SAAK,WAAW;AAAA;AAAA;",
  "names": []
}
