{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/PageResourceLoader.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as Host from '../host/host.js';\nimport * as i18n from '../i18n/i18n.js';\nimport type * as Platform from '../platform/platform.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport {FrameManager} from './FrameManager.js';\nimport {IOModel} from './IOModel.js';\nimport {MultitargetNetworkManager} from './NetworkManager.js';\nimport {NetworkManager} from './NetworkManager.js';\nimport type {ResourceTreeFrame} from './ResourceTreeModel.js';\nimport {Events as ResourceTreeModelEvents, ResourceTreeModel} from './ResourceTreeModel.js';\nimport type {Target} from './Target.js';\nimport {TargetManager} from './TargetManager.js';\n\nconst UIStrings = {\n  /**\n  *@description Error message for canceled source map loads\n  */\n  loadCanceledDueToReloadOf: 'Load canceled due to reload of inspected page',\n  /**\n  *@description Error message for canceled source map loads\n  */\n  loadCanceledDueToLoadTimeout: 'Load canceled due to load timeout',\n};\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/PageResourceLoader.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport type PageResourceLoadInitiator = {\n  target: null,\n  frameId: Protocol.Page.FrameId,\n  initiatorUrl: Platform.DevToolsPath.UrlString|null,\n}|{\n  target: Target,\n  frameId: Protocol.Page.FrameId | null,\n  initiatorUrl: Platform.DevToolsPath.UrlString | null,\n};\n\nexport interface PageResource {\n  success: boolean|null;\n  errorMessage?: string;\n  initiator: PageResourceLoadInitiator;\n  url: Platform.DevToolsPath.UrlString;\n  size: number|null;\n}\n\nlet pageResourceLoader: PageResourceLoader|null = null;\n\ninterface LoadQueueEntry {\n  resolve: () => void;\n  reject: (arg0: Error) => void;\n}\n\n/**\n * The page resource loader is a bottleneck for all DevTools-initiated resource loads. For each such load, it keeps a\n * `PageResource` object around that holds meta information. This can be as the basis for reporting to the user which\n * resources were loaded, and whether there was a load error.\n */\nexport class PageResourceLoader extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  #currentlyLoading: number;\n  readonly #maxConcurrentLoads: number;\n  readonly #pageResources: Map<string, PageResource>;\n  #queuedLoads: LoadQueueEntry[];\n  readonly #loadOverride: ((arg0: string) => Promise<{\n                             success: boolean,\n                             content: string,\n                             errorDescription: Host.ResourceLoader.LoadErrorDescription,\n                           }>)|null;\n  readonly #loadTimeout: number;\n  constructor(\n      loadOverride: ((arg0: string) => Promise<{\n                       success: boolean,\n                       content: string,\n                       errorDescription: Host.ResourceLoader.LoadErrorDescription,\n                     }>)|null,\n      maxConcurrentLoads: number, loadTimeout: number) {\n    super();\n    this.#currentlyLoading = 0;\n    this.#maxConcurrentLoads = maxConcurrentLoads;\n    this.#pageResources = new Map();\n    this.#queuedLoads = [];\n    TargetManager.instance().addModelListener(\n        ResourceTreeModel, ResourceTreeModelEvents.MainFrameNavigated, this.onMainFrameNavigated, this);\n    this.#loadOverride = loadOverride;\n    this.#loadTimeout = loadTimeout;\n  }\n\n  static instance({forceNew, loadOverride, maxConcurrentLoads, loadTimeout}: {\n    forceNew: boolean,\n    loadOverride: (null|((arg0: string) => Promise<{\n                           success: boolean,\n                           content: string,\n                           errorDescription: Host.ResourceLoader.LoadErrorDescription,\n                         }>)),\n    maxConcurrentLoads: number,\n    loadTimeout: number,\n  } = {\n    forceNew: false,\n    loadOverride: null,\n    maxConcurrentLoads: 500,\n    loadTimeout: 30000,\n  }): PageResourceLoader {\n    if (!pageResourceLoader || forceNew) {\n      pageResourceLoader = new PageResourceLoader(loadOverride, maxConcurrentLoads, loadTimeout);\n    }\n\n    return pageResourceLoader;\n  }\n\n  onMainFrameNavigated(event: Common.EventTarget.EventTargetEvent<ResourceTreeFrame>): void {\n    const mainFrame = event.data;\n    if (!mainFrame.isTopFrame()) {\n      return;\n    }\n    for (const {reject} of this.#queuedLoads) {\n      reject(new Error(i18nString(UIStrings.loadCanceledDueToReloadOf)));\n    }\n    this.#queuedLoads = [];\n    this.#pageResources.clear();\n    this.dispatchEventToListeners(Events.Update);\n  }\n\n  getResourcesLoaded(): Map<string, PageResource> {\n    return this.#pageResources;\n  }\n\n  /**\n   * Loading is the number of currently loading and queued items. Resources is the total number of resources,\n   * including loading and queued resources, but not including resources that are still loading but scheduled\n   * for cancelation.;\n   */\n  getNumberOfResources(): {\n    loading: number,\n    queued: number,\n    resources: number,\n  } {\n    return {loading: this.#currentlyLoading, queued: this.#queuedLoads.length, resources: this.#pageResources.size};\n  }\n\n  private async acquireLoadSlot(): Promise<void> {\n    this.#currentlyLoading++;\n    if (this.#currentlyLoading > this.#maxConcurrentLoads) {\n      const entry: LoadQueueEntry = {resolve: (): void => {}, reject: (): void => {}};\n      const waitForCapacity = new Promise<void>((resolve, reject) => {\n        entry.resolve = resolve;\n        entry.reject = reject;\n      });\n      this.#queuedLoads.push(entry);\n      await waitForCapacity;\n    }\n  }\n\n  private releaseLoadSlot(): void {\n    this.#currentlyLoading--;\n    const entry = this.#queuedLoads.shift();\n    if (entry) {\n      entry.resolve();\n    }\n  }\n\n  static async withTimeout<T>(promise: Promise<T>, timeout: number): Promise<T> {\n    const timeoutPromise = new Promise<T>(\n        (_, reject) =>\n            window.setTimeout(reject, timeout, new Error(i18nString(UIStrings.loadCanceledDueToLoadTimeout))));\n    return Promise.race([promise, timeoutPromise]);\n  }\n\n  static makeKey(url: Platform.DevToolsPath.UrlString, initiator: PageResourceLoadInitiator): string {\n    if (initiator.frameId) {\n      return `${url}-${initiator.frameId}`;\n    }\n    if (initiator.target) {\n      return `${url}-${initiator.target.id()}`;\n    }\n    throw new Error('Invalid initiator');\n  }\n\n  async loadResource(url: Platform.DevToolsPath.UrlString, initiator: PageResourceLoadInitiator): Promise<{\n    content: string,\n  }> {\n    const key = PageResourceLoader.makeKey(url, initiator);\n    const pageResource: PageResource = {success: null, size: null, errorMessage: undefined, url, initiator};\n    this.#pageResources.set(key, pageResource);\n    this.dispatchEventToListeners(Events.Update);\n    try {\n      await this.acquireLoadSlot();\n      const resultPromise = this.dispatchLoad(url, initiator);\n      const result = await PageResourceLoader.withTimeout(resultPromise, this.#loadTimeout);\n      pageResource.errorMessage = result.errorDescription.message;\n      pageResource.success = result.success;\n      if (result.success) {\n        pageResource.size = result.content.length;\n        return {content: result.content};\n      }\n      throw new Error(result.errorDescription.message);\n    } catch (e) {\n      if (pageResource.errorMessage === undefined) {\n        pageResource.errorMessage = e.message;\n      }\n      if (pageResource.success === null) {\n        pageResource.success = false;\n      }\n      throw e;\n    } finally {\n      this.releaseLoadSlot();\n      this.dispatchEventToListeners(Events.Update);\n    }\n  }\n\n  private async dispatchLoad(url: Platform.DevToolsPath.UrlString, initiator: PageResourceLoadInitiator): Promise<{\n    success: boolean,\n    content: string,\n    errorDescription: Host.ResourceLoader.LoadErrorDescription,\n  }> {\n    let failureReason: string|null = null;\n    if (this.#loadOverride) {\n      return this.#loadOverride(url);\n    }\n    const parsedURL = new Common.ParsedURL.ParsedURL(url);\n    const eligibleForLoadFromTarget = getLoadThroughTargetSetting().get() && parsedURL && parsedURL.scheme !== 'file' &&\n        parsedURL.scheme !== 'data' && parsedURL.scheme !== 'devtools';\n    Host.userMetrics.developerResourceScheme(this.getDeveloperResourceScheme(parsedURL));\n    if (eligibleForLoadFromTarget) {\n      try {\n        if (initiator.target) {\n          Host.userMetrics.developerResourceLoaded(Host.UserMetrics.DeveloperResourceLoaded.LoadThroughPageViaTarget);\n          const result = await this.loadFromTarget(initiator.target, initiator.frameId, url);\n          return result;\n        }\n        const frame = FrameManager.instance().getFrame(initiator.frameId);\n        if (frame) {\n          Host.userMetrics.developerResourceLoaded(Host.UserMetrics.DeveloperResourceLoaded.LoadThroughPageViaFrame);\n          const result = await this.loadFromTarget(frame.resourceTreeModel().target(), initiator.frameId, url);\n          return result;\n        }\n      } catch (e) {\n        if (e instanceof Error) {\n          Host.userMetrics.developerResourceLoaded(Host.UserMetrics.DeveloperResourceLoaded.LoadThroughPageFailure);\n          failureReason = e.message;\n        }\n      }\n      Host.userMetrics.developerResourceLoaded(Host.UserMetrics.DeveloperResourceLoaded.LoadThroughPageFallback);\n      console.warn('Fallback triggered', url, initiator);\n    } else {\n      const code = getLoadThroughTargetSetting().get() ? Host.UserMetrics.DeveloperResourceLoaded.FallbackPerProtocol :\n                                                         Host.UserMetrics.DeveloperResourceLoaded.FallbackPerOverride;\n      Host.userMetrics.developerResourceLoaded(code);\n    }\n\n    const result = await MultitargetNetworkManager.instance().loadResource(url);\n    if (eligibleForLoadFromTarget && !result.success) {\n      Host.userMetrics.developerResourceLoaded(Host.UserMetrics.DeveloperResourceLoaded.FallbackFailure);\n    }\n    if (failureReason) {\n      // In case we have a success, add a note about why the load through the target failed.\n      result.errorDescription.message =\n          `Fetch through target failed: ${failureReason}; Fallback: ${result.errorDescription.message}`;\n    }\n    return result;\n  }\n\n  private getDeveloperResourceScheme(parsedURL: Common.ParsedURL.ParsedURL|\n                                     null): Host.UserMetrics.DeveloperResourceScheme {\n    if (!parsedURL || parsedURL.scheme === '') {\n      return Host.UserMetrics.DeveloperResourceScheme.SchemeUnknown;\n    }\n    const isLocalhost = parsedURL.host === 'localhost' || parsedURL.host.endsWith('.localhost');\n    switch (parsedURL.scheme) {\n      case 'file':\n        return Host.UserMetrics.DeveloperResourceScheme.SchemeFile;\n      case 'data':\n        return Host.UserMetrics.DeveloperResourceScheme.SchemeData;\n      case 'blob':\n        return Host.UserMetrics.DeveloperResourceScheme.SchemeBlob;\n      case 'http':\n        return isLocalhost ? Host.UserMetrics.DeveloperResourceScheme.SchemeHttpLocalhost :\n                             Host.UserMetrics.DeveloperResourceScheme.SchemeHttp;\n      case 'https':\n        return isLocalhost ? Host.UserMetrics.DeveloperResourceScheme.SchemeHttpsLocalhost :\n                             Host.UserMetrics.DeveloperResourceScheme.SchemeHttps;\n    }\n    return Host.UserMetrics.DeveloperResourceScheme.SchemeOther;\n  }\n\n  private async loadFromTarget(\n      target: Target, frameId: Protocol.Page.FrameId|null, url: Platform.DevToolsPath.UrlString): Promise<{\n    success: boolean,\n    content: string,\n    errorDescription: {\n      statusCode: number,\n      netError: number|undefined,\n      netErrorName: string|undefined,\n      message: string,\n      urlValid: undefined,\n    },\n  }> {\n    const networkManager = (target.model(NetworkManager) as NetworkManager);\n    const ioModel = (target.model(IOModel) as IOModel);\n    const resource =\n        await networkManager.loadNetworkResource(frameId, url, {disableCache: true, includeCredentials: true});\n    try {\n      const content = resource.stream ? await ioModel.readToString(resource.stream) : '';\n      return {\n        success: resource.success,\n        content,\n        errorDescription: {\n          statusCode: resource.httpStatusCode || 0,\n          netError: resource.netError,\n          netErrorName: resource.netErrorName,\n          message: Host.ResourceLoader.netErrorToMessage(\n                       resource.netError, resource.httpStatusCode, resource.netErrorName) ||\n              '',\n          urlValid: undefined,\n        },\n      };\n    } finally {\n      if (resource.stream) {\n        void ioModel.close(resource.stream);\n      }\n    }\n  }\n}\n\nexport function getLoadThroughTargetSetting(): Common.Settings.Setting<boolean> {\n  return Common.Settings.Settings.instance().createSetting('loadThroughTarget', true);\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  Update = 'Update',\n}\n\nexport type EventTypes = {\n  [Events.Update]: void,\n};\n"],
  "mappings": "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",
  "names": []
}
