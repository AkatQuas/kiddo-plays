{
  "version": 3,
  "sources": ["../../../../../../front_end/core/sdk/CompilerSourceMappingContentProvider.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport type * as Common from '../common/common.js';\nimport * as i18n from '../i18n/i18n.js';\nimport type * as Platform from '../platform/platform.js';\n\nimport type {PageResourceLoadInitiator} from './PageResourceLoader.js';\nimport {PageResourceLoader} from './PageResourceLoader.js';\n\nconst UIStrings = {\n  /**\n  *@description Error message when failing to fetch a resource referenced in a source map\n  *@example {https://example.com/sourcemap.map} PH1\n  *@example {An error occurred} PH2\n  */\n  couldNotLoadContentForSS: 'Could not load content for {PH1} ({PH2})',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/CompilerSourceMappingContentProvider.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class CompilerSourceMappingContentProvider implements TextUtils.ContentProvider.ContentProvider {\n  readonly #sourceURL: Platform.DevToolsPath.UrlString;\n  readonly #contentTypeInternal: Common.ResourceType.ResourceType;\n  readonly #initiator: PageResourceLoadInitiator;\n\n  constructor(\n      sourceURL: Platform.DevToolsPath.UrlString, contentType: Common.ResourceType.ResourceType,\n      initiator: PageResourceLoadInitiator) {\n    this.#sourceURL = sourceURL;\n    this.#contentTypeInternal = contentType;\n    this.#initiator = initiator;\n  }\n\n  contentURL(): Platform.DevToolsPath.UrlString {\n    return this.#sourceURL;\n  }\n\n  contentType(): Common.ResourceType.ResourceType {\n    return this.#contentTypeInternal;\n  }\n\n  async contentEncoded(): Promise<boolean> {\n    return false;\n  }\n\n  async requestContent(): Promise<TextUtils.ContentProvider.DeferredContent> {\n    try {\n      const {content} = await PageResourceLoader.instance().loadResource(this.#sourceURL, this.#initiator);\n      return {content, isEncoded: false};\n    } catch (e) {\n      const error = i18nString(UIStrings.couldNotLoadContentForSS, {PH1: this.#sourceURL, PH2: e.message});\n      console.error(error);\n      return {content: null, error, isEncoded: false};\n    }\n  }\n\n  async searchInContent(query: string, caseSensitive: boolean, isRegex: boolean):\n      Promise<TextUtils.ContentProvider.SearchMatch[]> {\n    const {content} = await this.requestContent();\n    if (typeof content !== 'string') {\n      return [];\n    }\n    return TextUtils.TextUtils.performSearchInContent(content, query, caseSensitive, isRegex);\n  }\n}\n"],
  "mappings": "AA8BA;AAEA;AAIA;AAEA,MAAM,YAAY;AAAA,EAMhB,0BAA0B;AAAA;AAG5B,MAAM,OAAO,KAAK,KAAK,kBAAkB,oDAAoD;AAC7F,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAEzD,kDAAgG;AAAA;AAAA;AAAA;AAAA,EAKrG,YACI,WAA4C,aAC5C,WAAsC;AACxC,sBAAkB;AAClB,gCAA4B;AAC5B,sBAAkB;AAAA;AAAA,EAGpB,aAA8C;AAC5C,WAAO;AAAA;AAAA,EAGT,cAAgD;AAC9C,WAAO;AAAA;AAAA,QAGH,iBAAmC;AACvC,WAAO;AAAA;AAAA,QAGH,iBAAqE;AACzE,QAAI;AACF,YAAM,EAAC,YAAW,MAAM,mBAAmB,WAAW,aAAa,iBAAiB;AACpF,aAAO,EAAC,SAAS,WAAW;AAAA,aACrB,GAAP;AACA,YAAM,QAAQ,WAAW,UAAU,0BAA0B,EAAC,KAAK,iBAAiB,KAAK,EAAE;AAC3F,cAAQ,MAAM;AACd,aAAO,EAAC,SAAS,MAAM,OAAO,WAAW;AAAA;AAAA;AAAA,QAIvC,gBAAgB,OAAe,eAAwB,SACR;AACnD,UAAM,EAAC,YAAW,MAAM,KAAK;AAC7B,QAAI,OAAO,YAAY,UAAU;AAC/B,aAAO;AAAA;AAET,WAAO,UAAU,UAAU,uBAAuB,SAAS,OAAO,eAAe;AAAA;AAAA;",
  "names": []
}
