{
  "version": 3,
  "sources": ["../../../../../../front_end/third_party/diff/DiffWrapper.ts"],
  "sourcesContent": ["// Copyright 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\n\ndeclare global {\n  class diff_match_patch {\n    diff_main(text1: string, text2: string): Array<{0: number, 1: string}>;\n    diff_cleanupSemantic(diff: Array<{0: number, 1: string}>): void;\n  }\n}\n\nexport const DiffWrapper = {\n  charDiff: function(text1: string, text2: string, cleanup?: boolean): {0: number, 1: string}[] {\n    const differ = new diff_match_patch();\n    const diff = differ.diff_main(text1, text2);\n    if (cleanup) {\n      differ.diff_cleanupSemantic(diff);\n    }\n    return diff;\n  },\n\n  lineDiff: function(lines1: string[], lines2: string[]): DiffArray {\n    const idMap = new Common.CharacterIdMap.CharacterIdMap<string>();\n    const text1 = lines1.map(line => idMap.toChar(line)).join('');\n    const text2 = lines2.map(line => idMap.toChar(line)).join('');\n\n    const diff = DiffWrapper.charDiff(text1, text2);\n    const lineDiff = [];\n    for (let i = 0; i < diff.length; i++) {\n      const lines = [];\n      for (let j = 0; j < diff[i][1].length; j++) {\n        lines.push(idMap.fromChar(diff[i][1][j]) || '');\n      }\n\n      lineDiff.push({ 0: diff[i][0], 1: lines });\n    }\n    return lineDiff;\n  },\n\n  convertToEditDiff: function(diff: DiffArray): number[][] {\n    const normalized = [];\n    let added = 0;\n    let removed = 0;\n    for (let i = 0; i < diff.length; ++i) {\n      const token = diff[i];\n      if (token[0] === Operation.Equal) {\n        flush();\n        normalized.push([Operation.Equal, token[1].length]);\n      }\n      else if (token[0] === Operation.Delete) {\n        removed += token[1].length;\n      }\n      else {\n        added += token[1].length;\n      }\n    }\n    flush();\n    return normalized;\n\n    function flush(): void {\n      if (added && removed) {\n        const min = Math.min(added, removed);\n        normalized.push([Operation.Edit, min]);\n        added -= min;\n        removed -= min;\n      }\n      if (added || removed) {\n        const balance = added - removed;\n        const type = balance < 0 ? Operation.Delete : Operation.Insert;\n        normalized.push([type, Math.abs(balance)]);\n        added = 0;\n        removed = 0;\n      }\n    }\n  },\n\n  /**\n   * Scores character-sequence diffs, giving higher scores for longer sequences.\n   */\n  characterScore: function(item: string, against: string): number {\n    let score = 0;\n    const diff = DiffWrapper.charDiff(item, against);\n    for (let i = 0; i < diff.length; ++i) {\n      if (diff[i][0] === Operation.Equal) {\n        score += diff[i][1].length * diff[i][1].length;\n      }\n    }\n    return score;\n  },\n};\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Operation {\n  Equal = 0,\n  Insert = 1,\n  Delete = -1,\n  Edit = 2,\n}\n\nexport type DiffArray = {0: Operation, 1: string[]}[];\n"],
  "mappings": "AAIA;AASO,aAAM,cAAc;AAAA,EACzB,UAAU,SAAS,OAAe,OAAe,SAA6C;AAC5F,UAAM,SAAS,IAAI;AACnB,UAAM,OAAO,OAAO,UAAU,OAAO;AACrC,QAAI,SAAS;AACX,aAAO,qBAAqB;AAAA;AAE9B,WAAO;AAAA;AAAA,EAGT,UAAU,SAAS,QAAkB,QAA6B;AAChE,UAAM,QAAQ,IAAI,OAAO,eAAe;AACxC,UAAM,QAAQ,OAAO,IAAI,UAAQ,MAAM,OAAO,OAAO,KAAK;AAC1D,UAAM,QAAQ,OAAO,IAAI,UAAQ,MAAM,OAAO,OAAO,KAAK;AAE1D,UAAM,OAAO,YAAY,SAAS,OAAO;AACzC,UAAM,WAAW;AACjB,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,YAAM,QAAQ;AACd,eAAS,IAAI,GAAG,IAAI,KAAK,GAAG,GAAG,QAAQ,KAAK;AAC1C,cAAM,KAAK,MAAM,SAAS,KAAK,GAAG,GAAG,OAAO;AAAA;AAG9C,eAAS,KAAK,EAAE,GAAG,KAAK,GAAG,IAAI,GAAG;AAAA;AAEpC,WAAO;AAAA;AAAA,EAGT,mBAAmB,SAAS,MAA6B;AACvD,UAAM,aAAa;AACnB,QAAI,QAAQ;AACZ,QAAI,UAAU;AACd,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AACpC,YAAM,QAAQ,KAAK;AACnB,UAAI,MAAM,OAAO,UAAU,OAAO;AAChC;AACA,mBAAW,KAAK,CAAC,UAAU,OAAO,MAAM,GAAG;AAAA,iBAEpC,MAAM,OAAO,UAAU,QAAQ;AACtC,mBAAW,MAAM,GAAG;AAAA,aAEjB;AACH,iBAAS,MAAM,GAAG;AAAA;AAAA;AAGtB;AACA,WAAO;AAEP,qBAAuB;AACrB,UAAI,SAAS,SAAS;AACpB,cAAM,MAAM,KAAK,IAAI,OAAO;AAC5B,mBAAW,KAAK,CAAC,UAAU,MAAM;AACjC,iBAAS;AACT,mBAAW;AAAA;AAEb,UAAI,SAAS,SAAS;AACpB,cAAM,UAAU,QAAQ;AACxB,cAAM,OAAO,UAAU,IAAI,UAAU,SAAS,UAAU;AACxD,mBAAW,KAAK,CAAC,MAAM,KAAK,IAAI;AAChC,gBAAQ;AACR,kBAAU;AAAA;AAAA;AAAA;AAAA,EAQhB,gBAAgB,SAAS,MAAc,SAAyB;AAC9D,QAAI,QAAQ;AACZ,UAAM,OAAO,YAAY,SAAS,MAAM;AACxC,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AACpC,UAAI,KAAK,GAAG,OAAO,UAAU,OAAO;AAClC,iBAAS,KAAK,GAAG,GAAG,SAAS,KAAK,GAAG,GAAG;AAAA;AAAA;AAG5C,WAAO;AAAA;AAAA;AAMJ,WAAK,YAAL,kBAAK,eAAL;AACL,mCAAQ,KAAR;AACA,oCAAS,KAAT;AACA,oCAAS,MAAT;AACA,kCAAO,KAAP;AAJU;AAAA;",
  "names": []
}
