{
  "version": 3,
  "sources": ["../../../../../../front_end/models/extensions/ExtensionServer.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as _ProtocolClient from '../../core/protocol_client/protocol_client.js';  // eslint-disable-line @typescript-eslint/no-unused-vars\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Logs from '../../models/logs/logs.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as ThemeSupport from '../../ui/legacy/theme_support/theme_support.js';\nimport * as Bindings from '../bindings/bindings.js';\nimport * as HAR from '../har/har.js';\nimport type * as TextUtils from '../text_utils/text_utils.js';\nimport * as Workspace from '../workspace/workspace.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport {ExtensionButton, ExtensionPanel, ExtensionSidebarPane} from './ExtensionPanel.js';\nimport type {TracingSession} from './ExtensionTraceProvider.js';\nimport {ExtensionTraceProvider} from './ExtensionTraceProvider.js';\nimport {LanguageExtensionEndpoint} from './LanguageExtensionEndpoint.js';\nimport {RecorderExtensionEndpoint} from './RecorderExtensionEndpoint.js';\nimport {PrivateAPI} from './ExtensionAPI.js';\nimport {RecorderPluginManager} from './RecorderPluginManager.js';\n\nconst extensionOrigins: WeakMap<MessagePort, Platform.DevToolsPath.UrlString> = new WeakMap();\n\ndeclare global {\n  interface Window {\n    DevToolsAPI?: {getInspectedTabId?(): string|undefined, getOriginsForbiddenForExtensions?(): string[]};\n  }\n}\n\nconst kAllowedOrigins = [\n  'chrome://newtab',\n  'chrome://new-tab-page',\n].map(url => (new URL(url)).origin);\n\nlet extensionServerInstance: ExtensionServer|null;\n\nexport class ExtensionServer extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  private readonly clientObjects: Map<string, unknown>;\n  private readonly handlers:\n      Map<string, (message: PrivateAPI.ExtensionServerRequestMessage, port: MessagePort) => unknown>;\n  private readonly subscribers: Map<string, Set<MessagePort>>;\n  private readonly subscriptionStartHandlers: Map<string, () => unknown>;\n  private readonly subscriptionStopHandlers: Map<string, () => unknown>;\n  private readonly extraHeaders: Map<string, Map<string, unknown>>;\n  private requests: Map<number, TextUtils.ContentProvider.ContentProvider>;\n  private readonly requestIds: Map<TextUtils.ContentProvider.ContentProvider, number>;\n  private lastRequestId: number;\n  private registeredExtensions: Map<string, {\n    name: string,\n  }>;\n  private status: ExtensionStatus;\n  private readonly sidebarPanesInternal: ExtensionSidebarPane[];\n  private readonly traceProvidersInternal: ExtensionTraceProvider[];\n  private readonly traceSessions: Map<string, TracingSession>;\n  private extensionsEnabled: boolean;\n  private inspectedTabId?: string;\n  private readonly extensionAPITestHook?: (server: unknown, api: unknown) => unknown;\n  private themeChangeHandlers: Map<string, MessagePort> = new Map();\n\n  private constructor() {\n    super();\n    this.clientObjects = new Map();\n    this.handlers = new Map();\n    this.subscribers = new Map();\n    this.subscriptionStartHandlers = new Map();\n    this.subscriptionStopHandlers = new Map();\n    this.extraHeaders = new Map();\n    this.requests = new Map();\n    this.requestIds = new Map();\n    this.lastRequestId = 0;\n    this.registeredExtensions = new Map();\n    this.status = new ExtensionStatus();\n    this.sidebarPanesInternal = [];\n    this.traceProvidersInternal = [];\n    this.traceSessions = new Map();\n    // TODO(caseq): properly unload extensions when we disable them.\n    this.extensionsEnabled = true;\n\n    this.registerHandler(PrivateAPI.Commands.AddRequestHeaders, this.onAddRequestHeaders.bind(this));\n    this.registerHandler(PrivateAPI.Commands.AddTraceProvider, this.onAddTraceProvider.bind(this));\n    this.registerHandler(PrivateAPI.Commands.ApplyStyleSheet, this.onApplyStyleSheet.bind(this));\n    this.registerHandler(PrivateAPI.Commands.CompleteTraceSession, this.onCompleteTraceSession.bind(this));\n    this.registerHandler(PrivateAPI.Commands.CreatePanel, this.onCreatePanel.bind(this));\n    this.registerHandler(PrivateAPI.Commands.CreateSidebarPane, this.onCreateSidebarPane.bind(this));\n    this.registerHandler(PrivateAPI.Commands.CreateToolbarButton, this.onCreateToolbarButton.bind(this));\n    this.registerHandler(PrivateAPI.Commands.EvaluateOnInspectedPage, this.onEvaluateOnInspectedPage.bind(this));\n    this.registerHandler(PrivateAPI.Commands.ForwardKeyboardEvent, this.onForwardKeyboardEvent.bind(this));\n    this.registerHandler(PrivateAPI.Commands.GetHAR, this.onGetHAR.bind(this));\n    this.registerHandler(PrivateAPI.Commands.GetPageResources, this.onGetPageResources.bind(this));\n    this.registerHandler(PrivateAPI.Commands.GetRequestContent, this.onGetRequestContent.bind(this));\n    this.registerHandler(PrivateAPI.Commands.GetResourceContent, this.onGetResourceContent.bind(this));\n    this.registerHandler(PrivateAPI.Commands.Reload, this.onReload.bind(this));\n    this.registerHandler(PrivateAPI.Commands.SetOpenResourceHandler, this.onSetOpenResourceHandler.bind(this));\n    this.registerHandler(PrivateAPI.Commands.SetThemeChangeHandler, this.onSetThemeChangeHandler.bind(this));\n    this.registerHandler(PrivateAPI.Commands.SetResourceContent, this.onSetResourceContent.bind(this));\n    this.registerHandler(PrivateAPI.Commands.SetSidebarHeight, this.onSetSidebarHeight.bind(this));\n    this.registerHandler(PrivateAPI.Commands.SetSidebarContent, this.onSetSidebarContent.bind(this));\n    this.registerHandler(PrivateAPI.Commands.SetSidebarPage, this.onSetSidebarPage.bind(this));\n    this.registerHandler(PrivateAPI.Commands.ShowPanel, this.onShowPanel.bind(this));\n    this.registerHandler(PrivateAPI.Commands.Subscribe, this.onSubscribe.bind(this));\n    this.registerHandler(PrivateAPI.Commands.OpenResource, this.onOpenResource.bind(this));\n    this.registerHandler(PrivateAPI.Commands.Unsubscribe, this.onUnsubscribe.bind(this));\n    this.registerHandler(PrivateAPI.Commands.UpdateButton, this.onUpdateButton.bind(this));\n    this.registerHandler(\n        PrivateAPI.Commands.RegisterLanguageExtensionPlugin, this.registerLanguageExtensionEndpoint.bind(this));\n    this.registerHandler(\n        PrivateAPI.Commands.RegisterRecorderExtensionPlugin, this.registerRecorderExtensionEndpoint.bind(this));\n    window.addEventListener('message', this.onWindowMessage.bind(this), false);  // Only for main window.\n\n    const existingTabId =\n        window.DevToolsAPI && window.DevToolsAPI.getInspectedTabId && window.DevToolsAPI.getInspectedTabId();\n\n    if (existingTabId) {\n      this.setInspectedTabId({data: existingTabId});\n    }\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.SetInspectedTabId, this.setInspectedTabId, this);\n\n    this.initExtensions();\n\n    ThemeSupport.ThemeSupport.instance().addEventListener(ThemeSupport.ThemeChangeEvent.eventName, () => {\n      const themeName = ThemeSupport.ThemeSupport.instance().themeName();\n      for (const port of this.themeChangeHandlers.values()) {\n        port.postMessage({command: PrivateAPI.Events.ThemeChange, themeName});\n      }\n    });\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ExtensionServer {\n    const {forceNew} = opts;\n    if (!extensionServerInstance || forceNew) {\n      extensionServerInstance = new ExtensionServer();\n    }\n\n    return extensionServerInstance;\n  }\n\n  initializeExtensions(): void {\n    // Defer initialization until DevTools is fully loaded.\n    if (this.inspectedTabId !== null) {\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.setAddExtensionCallback(this.addExtension.bind(this));\n    }\n  }\n\n  hasExtensions(): boolean {\n    return Boolean(this.registeredExtensions.size);\n  }\n\n  notifySearchAction(panelId: string, action: string, searchString?: string): void {\n    this.postNotification(PrivateAPI.Events.PanelSearch + panelId, action, searchString);\n  }\n\n  notifyViewShown(identifier: string, frameIndex?: number): void {\n    this.postNotification(PrivateAPI.Events.ViewShown + identifier, frameIndex);\n  }\n\n  notifyViewHidden(identifier: string): void {\n    this.postNotification(PrivateAPI.Events.ViewHidden + identifier);\n  }\n\n  notifyButtonClicked(identifier: string): void {\n    this.postNotification(PrivateAPI.Events.ButtonClicked + identifier);\n  }\n\n  private registerLanguageExtensionEndpoint(\n      message: PrivateAPI.ExtensionServerRequestMessage, _shared_port: MessagePort): Record {\n    if (message.command !== PrivateAPI.Commands.RegisterLanguageExtensionPlugin) {\n      return this.status.E_BADARG('command', `expected ${PrivateAPI.Commands.Subscribe}`);\n    }\n    const {pluginManager} = Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance();\n    if (!pluginManager) {\n      return this.status.E_FAILED('WebAssembly DWARF support needs to be enabled to use this extension');\n    }\n\n    const {pluginName, port, supportedScriptTypes: {language, symbol_types}} = message;\n    const symbol_types_array =\n        (Array.isArray(symbol_types) && symbol_types.every(e => typeof e === 'string') ? symbol_types : []);\n    const endpoint = new LanguageExtensionEndpoint(pluginName, {language, symbol_types: symbol_types_array}, port);\n    pluginManager.addPlugin(endpoint);\n    return this.status.OK();\n  }\n\n  private registerRecorderExtensionEndpoint(\n      message: PrivateAPI.ExtensionServerRequestMessage, _shared_port: MessagePort): Record {\n    if (message.command !== PrivateAPI.Commands.RegisterRecorderExtensionPlugin) {\n      return this.status.E_BADARG('command', `expected ${PrivateAPI.Commands.RegisterRecorderExtensionPlugin}`);\n    }\n    const {pluginName, mediaType, port} = message;\n    RecorderPluginManager.instance().addPlugin(new RecorderExtensionEndpoint(pluginName, mediaType, port));\n    return this.status.OK();\n  }\n\n  private inspectedURLChanged(event: Common.EventTarget.EventTargetEvent<SDK.Target.Target>): void {\n    if (!this.canInspectURL(event.data.inspectedURL())) {\n      this.disableExtensions();\n      return;\n    }\n    if (event.data !== SDK.TargetManager.TargetManager.instance().mainTarget()) {\n      return;\n    }\n    this.requests = new Map();\n    const url = event.data.inspectedURL();\n    this.postNotification(PrivateAPI.Events.InspectedURLChanged, url);\n  }\n\n  startTraceRecording(providerId: string, sessionId: string, session: TracingSession): void {\n    this.traceSessions.set(sessionId, session);\n    this.postNotification('trace-recording-started-' + providerId, sessionId);\n  }\n\n  stopTraceRecording(providerId: string): void {\n    this.postNotification('trace-recording-stopped-' + providerId);\n  }\n\n  hasSubscribers(type: string): boolean {\n    return this.subscribers.has(type);\n  }\n\n  private postNotification(type: string, ..._vararg: unknown[]): void {\n    if (!this.extensionsEnabled) {\n      return;\n    }\n    const subscribers = this.subscribers.get(type);\n    if (!subscribers) {\n      return;\n    }\n    const message = {command: 'notify-' + type, arguments: Array.prototype.slice.call(arguments, 1)};\n    for (const subscriber of subscribers) {\n      subscriber.postMessage(message);\n    }\n  }\n\n  private onSubscribe(message: PrivateAPI.ExtensionServerRequestMessage, port: MessagePort): Record|undefined {\n    if (message.command !== PrivateAPI.Commands.Subscribe) {\n      return this.status.E_BADARG('command', `expected ${PrivateAPI.Commands.Subscribe}`);\n    }\n    const subscribers = this.subscribers.get(message.type);\n    if (subscribers) {\n      subscribers.add(port);\n    } else {\n      this.subscribers.set(message.type, new Set([port]));\n      const handler = this.subscriptionStartHandlers.get(message.type);\n      if (handler) {\n        handler();\n      }\n    }\n    return undefined;\n  }\n\n  private onUnsubscribe(message: PrivateAPI.ExtensionServerRequestMessage, port: MessagePort): Record|undefined {\n    if (message.command !== PrivateAPI.Commands.Unsubscribe) {\n      return this.status.E_BADARG('command', `expected ${PrivateAPI.Commands.Unsubscribe}`);\n    }\n    const subscribers = this.subscribers.get(message.type);\n    if (!subscribers) {\n      return;\n    }\n    subscribers.delete(port);\n    if (!subscribers.size) {\n      this.subscribers.delete(message.type);\n      const handler = this.subscriptionStopHandlers.get(message.type);\n      if (handler) {\n        handler();\n      }\n    }\n    return undefined;\n  }\n\n  private onAddRequestHeaders(message: PrivateAPI.ExtensionServerRequestMessage): Record|undefined {\n    if (message.command !== PrivateAPI.Commands.AddRequestHeaders) {\n      return this.status.E_BADARG('command', `expected ${PrivateAPI.Commands.AddRequestHeaders}`);\n    }\n    const id = message.extensionId;\n    if (typeof id !== 'string') {\n      return this.status.E_BADARGTYPE('extensionId', typeof id, 'string');\n    }\n    let extensionHeaders = this.extraHeaders.get(id);\n    if (!extensionHeaders) {\n      extensionHeaders = new Map();\n      this.extraHeaders.set(id, extensionHeaders);\n    }\n    for (const name in message.headers) {\n      extensionHeaders.set(name, message.headers[name]);\n    }\n    const allHeaders = ({} as Protocol.Network.Headers);\n    for (const headers of this.extraHeaders.values()) {\n      for (const [name, value] of headers) {\n        if (name !== '__proto__' && typeof value === 'string') {\n          allHeaders[name] = value;\n        }\n      }\n    }\n\n    SDK.NetworkManager.MultitargetNetworkManager.instance().setExtraHTTPHeaders(allHeaders);\n    return undefined;\n  }\n\n  private onApplyStyleSheet(message: PrivateAPI.ExtensionServerRequestMessage): Record|undefined {\n    if (message.command !== PrivateAPI.Commands.ApplyStyleSheet) {\n      return this.status.E_BADARG('command', `expected ${PrivateAPI.Commands.ApplyStyleSheet}`);\n    }\n    if (!Root.Runtime.experiments.isEnabled('applyCustomStylesheet')) {\n      return;\n    }\n\n    const styleSheet = document.createElement('style');\n    styleSheet.textContent = message.styleSheet;\n    document.head.appendChild(styleSheet);\n\n    ThemeSupport.ThemeSupport.instance().addCustomStylesheet(message.styleSheet);\n    // Add to all the shadow roots that have already been created\n    for (let node: (Node|null)|HTMLElement = document.body; node; node = node.traverseNextNode(document.body)) {\n      if (node instanceof ShadowRoot) {\n        ThemeSupport.ThemeSupport.instance().injectCustomStyleSheets(node);\n      }\n    }\n    return undefined;\n  }\n\n  private getExtensionOrigin(port: MessagePort): Platform.DevToolsPath.UrlString {\n    const origin = extensionOrigins.get(port);\n    if (!origin) {\n      throw new Error('Received a message from an unregistered extension');\n    }\n    return origin;\n  }\n\n  private onCreatePanel(message: PrivateAPI.ExtensionServerRequestMessage, port: MessagePort): Record {\n    if (message.command !== PrivateAPI.Commands.CreatePanel) {\n      return this.status.E_BADARG('command', `expected ${PrivateAPI.Commands.CreatePanel}`);\n    }\n    const id = message.id;\n    // The ids are generated on the client API side and must be unique, so the check below\n    // shouldn't be hit unless someone is bypassing the API.\n    if (this.clientObjects.has(id) || UI.InspectorView.InspectorView.instance().hasPanel(id)) {\n      return this.status.E_EXISTS(id);\n    }\n\n    const page = this.expandResourcePath(this.getExtensionOrigin(port), message.page) as string;\n    let persistentId = this.getExtensionOrigin(port) + message.title;\n    persistentId = persistentId.replace(/\\s/g, '');\n    const panelView = new ExtensionServerPanelView(\n        persistentId, i18n.i18n.lockedString(message.title), new ExtensionPanel(this, persistentId, id, page));\n    this.clientObjects.set(id, panelView);\n    UI.InspectorView.InspectorView.instance().addPanel(panelView);\n    return this.status.OK();\n  }\n\n  private onShowPanel(message: PrivateAPI.ExtensionServerRequestMessage): Record|undefined {\n    if (message.command !== PrivateAPI.Commands.ShowPanel) {\n      return this.status.E_BADARG('command', `expected ${PrivateAPI.Commands.ShowPanel}`);\n    }\n\n    let panelViewId = message.id;\n    const panelView = this.clientObjects.get(message.id);\n    if (panelView && panelView instanceof ExtensionServerPanelView) {\n      panelViewId = panelView.viewId();\n    }\n    void UI.InspectorView.InspectorView.instance().showPanel(panelViewId);\n    return undefined;\n  }\n\n  private onCreateToolbarButton(message: PrivateAPI.ExtensionServerRequestMessage, port: MessagePort): Record {\n    if (message.command !== PrivateAPI.Commands.CreateToolbarButton) {\n      return this.status.E_BADARG('command', `expected ${PrivateAPI.Commands.CreateToolbarButton}`);\n    }\n    const panelView = this.clientObjects.get(message.panel);\n    if (!panelView || !(panelView instanceof ExtensionServerPanelView)) {\n      return this.status.E_NOTFOUND(message.panel);\n    }\n    const button = new ExtensionButton(\n        this, message.id, this.expandResourcePath(this.getExtensionOrigin(port), message.icon), message.tooltip,\n        message.disabled);\n    this.clientObjects.set(message.id, button);\n\n    void panelView.widget().then(appendButton);\n\n    function appendButton(panel: UI.Widget.Widget): void {\n      (panel as ExtensionPanel).addToolbarItem(button.toolbarButton());\n    }\n\n    return this.status.OK();\n  }\n\n  private onUpdateButton(message: PrivateAPI.ExtensionServerRequestMessage, port: MessagePort): Record {\n    if (message.command !== PrivateAPI.Commands.UpdateButton) {\n      return this.status.E_BADARG('command', `expected ${PrivateAPI.Commands.UpdateButton}`);\n    }\n    const button = this.clientObjects.get(message.id);\n    if (!button || !(button instanceof ExtensionButton)) {\n      return this.status.E_NOTFOUND(message.id);\n    }\n    button.update(\n        message.icon && this.expandResourcePath(this.getExtensionOrigin(port), message.icon), message.tooltip,\n        message.disabled);\n    return this.status.OK();\n  }\n\n  private onCompleteTraceSession(message: PrivateAPI.ExtensionServerRequestMessage): Record|undefined {\n    if (message.command !== PrivateAPI.Commands.CompleteTraceSession) {\n      return this.status.E_BADARG('command', `expected ${PrivateAPI.Commands.CompleteTraceSession}`);\n    }\n    const session = this.traceSessions.get(message.id);\n    if (!session) {\n      return this.status.E_NOTFOUND(message.id);\n    }\n    this.traceSessions.delete(message.id);\n    session.complete(message.url, message.timeOffset);\n    return undefined;\n  }\n\n  private onCreateSidebarPane(message: PrivateAPI.ExtensionServerRequestMessage): Record {\n    if (message.command !== PrivateAPI.Commands.CreateSidebarPane) {\n      return this.status.E_BADARG('command', `expected ${PrivateAPI.Commands.CreateSidebarPane}`);\n    }\n    const id = message.id;\n    const sidebar = new ExtensionSidebarPane(this, message.panel, i18n.i18n.lockedString(message.title), id);\n    this.sidebarPanesInternal.push(sidebar);\n    this.clientObjects.set(id, sidebar);\n    this.dispatchEventToListeners(Events.SidebarPaneAdded, sidebar);\n\n    return this.status.OK();\n  }\n\n  sidebarPanes(): ExtensionSidebarPane[] {\n    return this.sidebarPanesInternal;\n  }\n\n  private onSetSidebarHeight(message: PrivateAPI.ExtensionServerRequestMessage): Record {\n    if (message.command !== PrivateAPI.Commands.SetSidebarHeight) {\n      return this.status.E_BADARG('command', `expected ${PrivateAPI.Commands.SetSidebarHeight}`);\n    }\n    const sidebar = this.clientObjects.get(message.id);\n    if (!sidebar || !(sidebar instanceof ExtensionSidebarPane)) {\n      return this.status.E_NOTFOUND(message.id);\n    }\n    sidebar.setHeight(message.height);\n    return this.status.OK();\n  }\n\n  private onSetSidebarContent(message: PrivateAPI.ExtensionServerRequestMessage, port: MessagePort): Record|undefined {\n    if (message.command !== PrivateAPI.Commands.SetSidebarContent) {\n      return this.status.E_BADARG('command', `expected ${PrivateAPI.Commands.SetSidebarContent}`);\n    }\n    const {requestId, id, rootTitle, expression, evaluateOptions, evaluateOnPage} = message;\n    const sidebar = this.clientObjects.get(id);\n    if (!sidebar || !(sidebar instanceof ExtensionSidebarPane)) {\n      return this.status.E_NOTFOUND(message.id);\n    }\n\n    function callback(this: ExtensionServer, error: unknown): void {\n      const result = error ? this.status.E_FAILED(error) : this.status.OK();\n      this.dispatchCallback(requestId, port, result);\n    }\n    if (evaluateOnPage) {\n      sidebar.setExpression(expression, rootTitle, evaluateOptions, this.getExtensionOrigin(port), callback.bind(this));\n      return undefined;\n    }\n    sidebar.setObject(message.expression, message.rootTitle, callback.bind(this));\n    return undefined;\n  }\n\n  private onSetSidebarPage(message: PrivateAPI.ExtensionServerRequestMessage, port: MessagePort): Record|undefined {\n    if (message.command !== PrivateAPI.Commands.SetSidebarPage) {\n      return this.status.E_BADARG('command', `expected ${PrivateAPI.Commands.SetSidebarPage}`);\n    }\n    const sidebar = this.clientObjects.get(message.id);\n    if (!sidebar || !(sidebar instanceof ExtensionSidebarPane)) {\n      return this.status.E_NOTFOUND(message.id);\n    }\n    sidebar.setPage(this.expandResourcePath(this.getExtensionOrigin(port), message.page));\n    return undefined;\n  }\n\n  private onOpenResource(message: PrivateAPI.ExtensionServerRequestMessage): Record {\n    if (message.command !== PrivateAPI.Commands.OpenResource) {\n      return this.status.E_BADARG('command', `expected ${PrivateAPI.Commands.OpenResource}`);\n    }\n    const uiSourceCode = Workspace.Workspace.WorkspaceImpl.instance().uiSourceCodeForURL(message.url);\n    if (uiSourceCode) {\n      void Common.Revealer.reveal(uiSourceCode.uiLocation(message.lineNumber, message.columnNumber));\n      return this.status.OK();\n    }\n\n    const resource = Bindings.ResourceUtils.resourceForURL(message.url);\n    if (resource) {\n      void Common.Revealer.reveal(resource);\n      return this.status.OK();\n    }\n\n    const request = Logs.NetworkLog.NetworkLog.instance().requestForURL(message.url);\n    if (request) {\n      void Common.Revealer.reveal(request);\n      return this.status.OK();\n    }\n\n    return this.status.E_NOTFOUND(message.url);\n  }\n\n  private onSetOpenResourceHandler(message: PrivateAPI.ExtensionServerRequestMessage, port: MessagePort): Record\n      |undefined {\n    if (message.command !== PrivateAPI.Commands.SetOpenResourceHandler) {\n      return this.status.E_BADARG('command', `expected ${PrivateAPI.Commands.SetOpenResourceHandler}`);\n    }\n    const extension = this.registeredExtensions.get(this.getExtensionOrigin(port));\n    if (!extension) {\n      throw new Error('Received a message from an unregistered extension');\n    }\n    const {name} = extension;\n    if (message.handlerPresent) {\n      Components.Linkifier.Linkifier.registerLinkHandler(name, this.handleOpenURL.bind(this, port));\n    } else {\n      Components.Linkifier.Linkifier.unregisterLinkHandler(name);\n    }\n    return undefined;\n  }\n\n  private onSetThemeChangeHandler(message: PrivateAPI.ExtensionServerRequestMessage, port: MessagePort): Record\n      |undefined {\n    if (message.command !== PrivateAPI.Commands.SetThemeChangeHandler) {\n      return this.status.E_BADARG('command', `expected ${PrivateAPI.Commands.SetThemeChangeHandler}`);\n    }\n    const extensionOrigin = this.getExtensionOrigin(port);\n    const extension = this.registeredExtensions.get(extensionOrigin);\n    if (!extension) {\n      throw new Error('Received a message from an unregistered extension');\n    }\n\n    if (message.handlerPresent) {\n      this.themeChangeHandlers.set(extensionOrigin, port);\n    } else {\n      this.themeChangeHandlers.delete(extensionOrigin);\n    }\n    return undefined;\n  }\n\n  private handleOpenURL(\n      port: MessagePort, contentProvider: TextUtils.ContentProvider.ContentProvider, lineNumber: number): void {\n    port.postMessage(\n        {command: 'open-resource', resource: this.makeResource(contentProvider), lineNumber: lineNumber + 1});\n  }\n\n  private onReload(message: PrivateAPI.ExtensionServerRequestMessage): Record {\n    if (message.command !== PrivateAPI.Commands.Reload) {\n      return this.status.E_BADARG('command', `expected ${PrivateAPI.Commands.Reload}`);\n    }\n    const options = (message.options || {});\n\n    SDK.NetworkManager.MultitargetNetworkManager.instance().setUserAgentOverride(\n        typeof options.userAgent === 'string' ? options.userAgent : '', null);\n    let injectedScript;\n    if (options.injectedScript) {\n      injectedScript = '(function(){' + options.injectedScript + '})()';\n    }\n    SDK.ResourceTreeModel.ResourceTreeModel.reloadAllPages(Boolean(options.ignoreCache), injectedScript);\n    return this.status.OK();\n  }\n\n  private onEvaluateOnInspectedPage(message: PrivateAPI.ExtensionServerRequestMessage, port: MessagePort): Record\n      |undefined {\n    if (message.command !== PrivateAPI.Commands.EvaluateOnInspectedPage) {\n      return this.status.E_BADARG('command', `expected ${PrivateAPI.Commands.EvaluateOnInspectedPage}`);\n    }\n\n    const {requestId, expression, evaluateOptions} = message;\n    function callback(\n        this: ExtensionServer, error: string|null, object: SDK.RemoteObject.RemoteObject|null,\n        wasThrown: boolean): void {\n      let result;\n      if (error || !object) {\n        result = this.status.E_PROTOCOLERROR(error?.toString());\n      } else if (wasThrown) {\n        result = {isException: true, value: object.description};\n      } else {\n        result = {value: object.value};\n      }\n\n      this.dispatchCallback(requestId, port, result);\n    }\n    return this.evaluate(expression, true, true, evaluateOptions, this.getExtensionOrigin(port), callback.bind(this));\n  }\n\n  private async onGetHAR(message: PrivateAPI.ExtensionServerRequestMessage): Promise<Record|HAR.Log.LogDTO> {\n    if (message.command !== PrivateAPI.Commands.GetHAR) {\n      return this.status.E_BADARG('command', `expected ${PrivateAPI.Commands.GetHAR}`);\n    }\n    const requests = Logs.NetworkLog.NetworkLog.instance().requests();\n    const harLog = await HAR.Log.Log.build(requests);\n    for (let i = 0; i < harLog.entries.length; ++i) {\n      // @ts-ignore\n      harLog.entries[i]._requestId = this.requestId(requests[i]);\n    }\n    return harLog;\n  }\n\n  private makeResource(contentProvider: TextUtils.ContentProvider.ContentProvider): {\n    url: string,\n    type: string,\n  } {\n    return {url: contentProvider.contentURL(), type: contentProvider.contentType().name()};\n  }\n\n  private onGetPageResources(): {url: string, type: string}[] {\n    const resources = new Map<unknown, {\n      url: string,\n      type: string,\n    }>();\n\n    function pushResourceData(\n        this: ExtensionServer, contentProvider: TextUtils.ContentProvider.ContentProvider): boolean {\n      if (!resources.has(contentProvider.contentURL())) {\n        resources.set(contentProvider.contentURL(), this.makeResource(contentProvider));\n      }\n      return false;\n    }\n    let uiSourceCodes = Workspace.Workspace.WorkspaceImpl.instance().uiSourceCodesForProjectType(\n        Workspace.Workspace.projectTypes.Network);\n    uiSourceCodes = uiSourceCodes.concat(Workspace.Workspace.WorkspaceImpl.instance().uiSourceCodesForProjectType(\n        Workspace.Workspace.projectTypes.ContentScripts));\n    uiSourceCodes.forEach(pushResourceData.bind(this));\n    for (const resourceTreeModel of SDK.TargetManager.TargetManager.instance().models(\n             SDK.ResourceTreeModel.ResourceTreeModel)) {\n      resourceTreeModel.forAllResources(pushResourceData.bind(this));\n    }\n\n    return [...resources.values()];\n  }\n\n  private async getResourceContent(\n      contentProvider: TextUtils.ContentProvider.ContentProvider, message: PrivateAPI.ExtensionServerRequestMessage,\n      port: MessagePort): Promise<void> {\n    const {content} = await contentProvider.requestContent();\n    const encoded = await contentProvider.contentEncoded();\n    this.dispatchCallback(message.requestId, port, {encoding: encoded ? 'base64' : '', content: content});\n  }\n\n  private onGetRequestContent(message: PrivateAPI.ExtensionServerRequestMessage, port: MessagePort): Record|undefined {\n    if (message.command !== PrivateAPI.Commands.GetRequestContent) {\n      return this.status.E_BADARG('command', `expected ${PrivateAPI.Commands.GetRequestContent}`);\n    }\n    const request = this.requestById(message.id);\n    if (!request) {\n      return this.status.E_NOTFOUND(message.id);\n    }\n    void this.getResourceContent(request, message, port);\n    return undefined;\n  }\n\n  private onGetResourceContent(message: PrivateAPI.ExtensionServerRequestMessage, port: MessagePort): Record|undefined {\n    if (message.command !== PrivateAPI.Commands.GetResourceContent) {\n      return this.status.E_BADARG('command', `expected ${PrivateAPI.Commands.GetResourceContent}`);\n    }\n    const url = message.url as Platform.DevToolsPath.UrlString;\n    const contentProvider = Workspace.Workspace.WorkspaceImpl.instance().uiSourceCodeForURL(url) ||\n        Bindings.ResourceUtils.resourceForURL(url);\n    if (!contentProvider) {\n      return this.status.E_NOTFOUND(url);\n    }\n    void this.getResourceContent(contentProvider, message, port);\n    return undefined;\n  }\n\n  private onSetResourceContent(message: PrivateAPI.ExtensionServerRequestMessage, port: MessagePort): Record|undefined {\n    if (message.command !== PrivateAPI.Commands.SetResourceContent) {\n      return this.status.E_BADARG('command', `expected ${PrivateAPI.Commands.SetResourceContent}`);\n    }\n\n    const {url, requestId, content, commit} = message;\n    function callbackWrapper(this: ExtensionServer, error: string|null): void {\n      const response = error ? this.status.E_FAILED(error) : this.status.OK();\n      this.dispatchCallback(requestId, port, response);\n    }\n\n    const uiSourceCode =\n        Workspace.Workspace.WorkspaceImpl.instance().uiSourceCodeForURL(url as Platform.DevToolsPath.UrlString);\n    if (!uiSourceCode || !uiSourceCode.contentType().isDocumentOrScriptOrStyleSheet()) {\n      const resource = SDK.ResourceTreeModel.ResourceTreeModel.resourceForURL(url as Platform.DevToolsPath.UrlString);\n      if (!resource) {\n        return this.status.E_NOTFOUND(url);\n      }\n      return this.status.E_NOTSUPPORTED('Resource is not editable');\n    }\n    uiSourceCode.setWorkingCopy(content);\n    if (commit) {\n      uiSourceCode.commitWorkingCopy();\n    }\n    callbackWrapper.call(this, null);\n    return undefined;\n  }\n\n  private requestId(request: TextUtils.ContentProvider.ContentProvider): number {\n    const requestId = this.requestIds.get(request);\n    if (requestId === undefined) {\n      const newId = ++this.lastRequestId;\n      this.requestIds.set(request, newId);\n      this.requests.set(newId, request);\n      return newId;\n    }\n    return requestId;\n  }\n\n  private requestById(id: number): TextUtils.ContentProvider.ContentProvider|undefined {\n    return this.requests.get(id);\n  }\n\n  private onAddTraceProvider(message: PrivateAPI.ExtensionServerRequestMessage, port: MessagePort): Record|undefined {\n    if (message.command !== PrivateAPI.Commands.AddTraceProvider) {\n      return this.status.E_BADARG('command', `expected ${PrivateAPI.Commands.AddTraceProvider}`);\n    }\n    const provider = new ExtensionTraceProvider(\n        this.getExtensionOrigin(port), message.id, message.categoryName, message.categoryTooltip);\n    this.clientObjects.set(message.id, provider);\n    this.traceProvidersInternal.push(provider);\n    this.dispatchEventToListeners(Events.TraceProviderAdded, provider);\n    return undefined;\n  }\n\n  traceProviders(): ExtensionTraceProvider[] {\n    return this.traceProvidersInternal;\n  }\n\n  private onForwardKeyboardEvent(message: PrivateAPI.ExtensionServerRequestMessage): Record|undefined {\n    if (message.command !== PrivateAPI.Commands.ForwardKeyboardEvent) {\n      return this.status.E_BADARG('command', `expected ${PrivateAPI.Commands.ForwardKeyboardEvent}`);\n    }\n    message.entries.forEach(handleEventEntry);\n\n    function handleEventEntry(entry: KeyboardEventInit&{eventType: string}): void {\n      // Fool around closure compiler -- it has its own notion of both KeyboardEvent constructor\n      // and initKeyboardEvent methods and overriding these in externs.js does not have effect.\n      const event = new window.KeyboardEvent(entry.eventType, {\n        key: entry.key,\n        code: entry.code,\n        keyCode: entry.keyCode,\n        location: entry.location,\n        ctrlKey: entry.ctrlKey,\n        altKey: entry.altKey,\n        shiftKey: entry.shiftKey,\n        metaKey: entry.metaKey,\n      });\n\n      // @ts-ignore\n      event.__keyCode = keyCodeForEntry(entry);\n      document.dispatchEvent(event);\n    }\n\n    function keyCodeForEntry(entry: KeyboardEventInit): unknown {\n      let keyCode = entry.keyCode;\n      if (!keyCode) {\n        // This is required only for synthetic events (e.g. dispatched in tests).\n        if (entry.key === Platform.KeyboardUtilities.ESCAPE_KEY) {\n          keyCode = 27;\n        }\n      }\n      return keyCode || 0;\n    }\n    return undefined;\n  }\n\n  private dispatchCallback(requestId: unknown, port: MessagePort, result: unknown): void {\n    if (requestId) {\n      port.postMessage({command: 'callback', requestId: requestId, result: result});\n    }\n  }\n\n  private initExtensions(): void {\n    this.registerAutosubscriptionHandler(\n        PrivateAPI.Events.ResourceAdded, Workspace.Workspace.WorkspaceImpl.instance(),\n        Workspace.Workspace.Events.UISourceCodeAdded, this.notifyResourceAdded);\n    this.registerAutosubscriptionTargetManagerHandler(\n        PrivateAPI.Events.NetworkRequestFinished, SDK.NetworkManager.NetworkManager,\n        SDK.NetworkManager.Events.RequestFinished, this.notifyRequestFinished);\n\n    function onElementsSubscriptionStarted(this: ExtensionServer): void {\n      UI.Context.Context.instance().addFlavorChangeListener(\n          SDK.DOMModel.DOMNode, this.notifyElementsSelectionChanged, this);\n    }\n\n    function onElementsSubscriptionStopped(this: ExtensionServer): void {\n      UI.Context.Context.instance().removeFlavorChangeListener(\n          SDK.DOMModel.DOMNode, this.notifyElementsSelectionChanged, this);\n    }\n\n    this.registerSubscriptionHandler(\n        PrivateAPI.Events.PanelObjectSelected + 'elements', onElementsSubscriptionStarted.bind(this),\n        onElementsSubscriptionStopped.bind(this));\n    this.registerResourceContentCommittedHandler(this.notifyUISourceCodeContentCommitted);\n\n    SDK.TargetManager.TargetManager.instance().addEventListener(\n        SDK.TargetManager.Events.InspectedURLChanged, this.inspectedURLChanged, this);\n  }\n\n  private notifyResourceAdded(event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.UISourceCode>): void {\n    const uiSourceCode = event.data;\n    this.postNotification(PrivateAPI.Events.ResourceAdded, this.makeResource(uiSourceCode));\n  }\n\n  private notifyUISourceCodeContentCommitted(\n      event: Common.EventTarget.EventTargetEvent<Workspace.Workspace.WorkingCopyCommitedEvent>): void {\n    const {uiSourceCode, content} = event.data;\n    this.postNotification(PrivateAPI.Events.ResourceContentCommitted, this.makeResource(uiSourceCode), content);\n  }\n\n  private async notifyRequestFinished(event: Common.EventTarget.EventTargetEvent<SDK.NetworkRequest.NetworkRequest>):\n      Promise<void> {\n    const request = event.data;\n    const entry = await HAR.Log.Entry.build(request);\n    this.postNotification(PrivateAPI.Events.NetworkRequestFinished, this.requestId(request), entry);\n  }\n\n  private notifyElementsSelectionChanged(): void {\n    this.postNotification(PrivateAPI.Events.PanelObjectSelected + 'elements');\n  }\n\n  sourceSelectionChanged(url: Platform.DevToolsPath.UrlString, range: TextUtils.TextRange.TextRange): void {\n    this.postNotification(PrivateAPI.Events.PanelObjectSelected + 'sources', {\n      startLine: range.startLine,\n      startColumn: range.startColumn,\n      endLine: range.endLine,\n      endColumn: range.endColumn,\n      url: url,\n    });\n  }\n\n  private setInspectedTabId(event: Common.EventTarget.EventTargetEvent<string>): void {\n    const oldId = this.inspectedTabId;\n    this.inspectedTabId = event.data;\n    if (oldId === null) {\n      // Run deferred init\n      this.initializeExtensions();\n    }\n  }\n\n  addExtensionForTest(extensionInfo: Host.InspectorFrontendHostAPI.ExtensionDescriptor, origin: string): boolean\n      |undefined {\n    const name = extensionInfo.name || `Extension ${origin}`;\n    this.registeredExtensions.set(origin, {name});\n    return true;\n  }\n\n  private addExtension(extensionInfo: Host.InspectorFrontendHostAPI.ExtensionDescriptor): boolean|undefined {\n    const startPage = extensionInfo.startPage;\n\n    const inspectedURL = SDK.TargetManager.TargetManager.instance().mainTarget()?.inspectedURL() ?? '';\n    if (inspectedURL !== '' && !this.canInspectURL(inspectedURL)) {\n      this.disableExtensions();\n    }\n    if (!this.extensionsEnabled) {\n      return;\n    }\n    try {\n      const startPageURL = new URL((startPage as string));\n      const extensionOrigin = startPageURL.origin;\n      if (!this.registeredExtensions.get(extensionOrigin)) {\n        // See ExtensionAPI.js for details.\n        const injectedAPI = self.buildExtensionAPIInjectedScript(\n            extensionInfo, this.inspectedTabId as string, ThemeSupport.ThemeSupport.instance().themeName(),\n            UI.ShortcutRegistry.ShortcutRegistry.instance().globalShortcutKeys(),\n            ExtensionServer.instance().extensionAPITestHook);\n        Host.InspectorFrontendHost.InspectorFrontendHostInstance.setInjectedScriptForOrigin(\n            extensionOrigin, injectedAPI);\n        const name = extensionInfo.name || `Extension ${extensionOrigin}`;\n        this.registeredExtensions.set(extensionOrigin, {name});\n      }\n\n      const iframe = document.createElement('iframe');\n      iframe.src = startPage;\n      iframe.dataset.devtoolsExtension = extensionInfo.name;\n      iframe.style.display = 'none';\n      document.body.appendChild(iframe);  // Only for main window.\n    } catch (e) {\n      console.error('Failed to initialize extension ' + startPage + ':' + e);\n      return false;\n    }\n    return true;\n  }\n\n  private registerExtension(origin: Platform.DevToolsPath.UrlString, port: MessagePort): void {\n    if (!this.registeredExtensions.has(origin)) {\n      if (origin !== window.location.origin) {  // Just ignore inspector frames.\n        console.error('Ignoring unauthorized client request from ' + origin);\n      }\n      return;\n    }\n    extensionOrigins.set(port, origin);\n    port.addEventListener('message', this.onmessage.bind(this), false);\n    port.start();\n  }\n\n  private onWindowMessage(event: MessageEvent): void {\n    if (event.data === 'registerExtension') {\n      this.registerExtension(event.origin as Platform.DevToolsPath.UrlString, event.ports[0]);\n    }\n  }\n\n  private async onmessage(event: MessageEvent): Promise<void> {\n    const message = event.data;\n    let result;\n\n    const handler = this.handlers.get(message.command);\n\n    if (!handler) {\n      result = this.status.E_NOTSUPPORTED(message.command);\n    } else if (!this.extensionsEnabled) {\n      result = this.status.E_FAILED('Permission denied');\n    } else {\n      result = await handler(message, event.target as MessagePort);\n    }\n\n    if (result && message.requestId) {\n      this.dispatchCallback(message.requestId, event.target as MessagePort, result);\n    }\n  }\n\n  private registerHandler(\n      command: string,\n      callback: (message: PrivateAPI.ExtensionServerRequestMessage, port: MessagePort) => unknown): void {\n    console.assert(Boolean(command));\n    this.handlers.set(command, callback);\n  }\n\n  private registerSubscriptionHandler(\n      eventTopic: string, onSubscribeFirst: () => unknown, onUnsubscribeLast: () => unknown): void {\n    this.subscriptionStartHandlers.set(eventTopic, onSubscribeFirst);\n    this.subscriptionStopHandlers.set(eventTopic, onUnsubscribeLast);\n  }\n\n  private registerAutosubscriptionHandler<Events, T extends keyof Events>(\n      eventTopic: string, eventTarget: Common.EventTarget.EventTarget<Events>, frontendEventType: T,\n      handler: Common.EventTarget.EventListener<Events, T>): void {\n    this.registerSubscriptionHandler(\n        eventTopic, () => eventTarget.addEventListener(frontendEventType, handler, this),\n        () => eventTarget.removeEventListener(frontendEventType, handler, this));\n  }\n\n  private registerAutosubscriptionTargetManagerHandler<Events, T extends keyof Events>(\n      eventTopic: string, modelClass: new(arg1: SDK.Target.Target) => SDK.SDKModel.SDKModel<Events>,\n      frontendEventType: T, handler: Common.EventTarget.EventListener<Events, T>): void {\n    this.registerSubscriptionHandler(\n        eventTopic,\n        () => SDK.TargetManager.TargetManager.instance().addModelListener(modelClass, frontendEventType, handler, this),\n        () => SDK.TargetManager.TargetManager.instance().removeModelListener(\n            modelClass, frontendEventType, handler, this));\n  }\n\n  private registerResourceContentCommittedHandler(\n      handler: (arg0: Common.EventTarget.EventTargetEvent<Workspace.Workspace.WorkingCopyCommitedEvent>) => unknown):\n      void {\n    function addFirstEventListener(this: ExtensionServer): void {\n      Workspace.Workspace.WorkspaceImpl.instance().addEventListener(\n          Workspace.Workspace.Events.WorkingCopyCommittedByUser, handler, this);\n      Workspace.Workspace.WorkspaceImpl.instance().setHasResourceContentTrackingExtensions(true);\n    }\n\n    function removeLastEventListener(this: ExtensionServer): void {\n      Workspace.Workspace.WorkspaceImpl.instance().setHasResourceContentTrackingExtensions(false);\n      Workspace.Workspace.WorkspaceImpl.instance().removeEventListener(\n          Workspace.Workspace.Events.WorkingCopyCommittedByUser, handler, this);\n    }\n\n    this.registerSubscriptionHandler(\n        PrivateAPI.Events.ResourceContentCommitted, addFirstEventListener.bind(this),\n        removeLastEventListener.bind(this));\n  }\n\n  private expandResourcePath(extensionPath: Platform.DevToolsPath.UrlString, resourcePath: string):\n      Platform.DevToolsPath.UrlString {\n    return extensionPath + '/' + Common.ParsedURL.normalizePath(resourcePath) as Platform.DevToolsPath.UrlString;\n  }\n\n  evaluate(\n      expression: string, exposeCommandLineAPI: boolean, returnByValue: boolean,\n      options: PrivateAPI.EvaluateOptions|undefined, securityOrigin: string,\n      callback: (arg0: string|null, arg1: SDK.RemoteObject.RemoteObject|null, arg2: boolean) => unknown): Record\n      |undefined {\n    let context;\n\n    function resolveURLToFrame(url: Platform.DevToolsPath.UrlString): SDK.ResourceTreeModel.ResourceTreeFrame|null {\n      let found = null;\n      function hasMatchingURL(frame: SDK.ResourceTreeModel.ResourceTreeFrame): SDK.ResourceTreeModel.ResourceTreeFrame|\n          null {\n        found = (frame.url === url) ? frame : null;\n        return found;\n      }\n      SDK.ResourceTreeModel.ResourceTreeModel.frames().some(hasMatchingURL);\n      return found;\n    }\n\n    options = options || {};\n    let frame;\n    if (options.frameURL) {\n      frame = resolveURLToFrame(options.frameURL as Platform.DevToolsPath.UrlString);\n    } else {\n      const target = SDK.TargetManager.TargetManager.instance().mainTarget();\n      const resourceTreeModel = target && target.model(SDK.ResourceTreeModel.ResourceTreeModel);\n      frame = resourceTreeModel && resourceTreeModel.mainFrame;\n    }\n    if (!frame) {\n      if (options.frameURL) {\n        console.warn('evaluate: there is no frame with URL ' + options.frameURL);\n      } else {\n        console.warn('evaluate: the main frame is not yet available');\n      }\n      return this.status.E_NOTFOUND(options.frameURL || '<top>');\n    }\n    // We shouldn't get here if the top frame can't be inspected by an extension, but\n    // let's double check for subframes.\n    if (!this.canInspectURL(frame.url)) {\n      return this.status.E_FAILED('Permission denied');\n    }\n\n    let contextSecurityOrigin;\n    if (options.useContentScriptContext) {\n      contextSecurityOrigin = securityOrigin;\n    } else if (options.scriptExecutionContext) {\n      contextSecurityOrigin = options.scriptExecutionContext;\n    }\n\n    const runtimeModel = frame.resourceTreeModel().target().model(SDK.RuntimeModel.RuntimeModel);\n    const executionContexts = runtimeModel ? runtimeModel.executionContexts() : [];\n    if (contextSecurityOrigin) {\n      for (let i = 0; i < executionContexts.length; ++i) {\n        const executionContext = executionContexts[i];\n        if (executionContext.frameId === frame.id && executionContext.origin === contextSecurityOrigin &&\n            !executionContext.isDefault) {\n          context = executionContext;\n        }\n      }\n      if (!context) {\n        console.warn('The JavaScript context ' + contextSecurityOrigin + ' was not found in the frame ' + frame.url);\n        return this.status.E_NOTFOUND(contextSecurityOrigin);\n      }\n    } else {\n      for (let i = 0; i < executionContexts.length; ++i) {\n        const executionContext = executionContexts[i];\n        if (executionContext.frameId === frame.id && executionContext.isDefault) {\n          context = executionContext;\n        }\n      }\n      if (!context) {\n        return this.status.E_FAILED(frame.url + ' has no execution context');\n      }\n    }\n    if (!this.canInspectURL(context.origin)) {\n      return this.status.E_FAILED('Permission denied');\n    }\n\n    void context\n        .evaluate(\n            {\n              expression: expression,\n              objectGroup: 'extension',\n              includeCommandLineAPI: exposeCommandLineAPI,\n              silent: true,\n              returnByValue: returnByValue,\n              generatePreview: false,\n            },\n            /* userGesture */ false, /* awaitPromise */ false)\n        .then(onEvaluate);\n\n    function onEvaluate(result: SDK.RuntimeModel.EvaluationResult): void {\n      if ('error' in result) {\n        callback(result.error, null, false);\n        return;\n      }\n      callback(null, result.object || null, Boolean(result.exceptionDetails));\n    }\n    return undefined;\n  }\n\n  private canInspectURL(url: Platform.DevToolsPath.UrlString): boolean {\n    let parsedURL;\n    // This is only to work around invalid URLs we're occasionally getting from some tests.\n    // TODO(caseq): make sure tests supply valid URLs or we specifically handle invalid ones.\n    try {\n      parsedURL = new URL(url);\n    } catch (exception) {\n      return false;\n    }\n    if (kAllowedOrigins.includes(parsedURL.origin)) {\n      return true;\n    }\n    if (parsedURL.protocol === 'chrome:' || parsedURL.protocol === 'devtools:') {\n      return false;\n    }\n    if (parsedURL.protocol.startsWith('http') && parsedURL.hostname === 'chrome.google.com' &&\n        parsedURL.pathname.startsWith('/webstore')) {\n      return false;\n    }\n\n    if ((window.DevToolsAPI && window.DevToolsAPI.getOriginsForbiddenForExtensions &&\n             window.DevToolsAPI.getOriginsForbiddenForExtensions() ||\n         []).includes(parsedURL.origin)) {\n      return false;\n    }\n    return true;\n  }\n\n  private disableExtensions(): void {\n    this.extensionsEnabled = false;\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  SidebarPaneAdded = 'SidebarPaneAdded',\n  TraceProviderAdded = 'TraceProviderAdded',\n}\n\nexport type EventTypes = {\n  [Events.SidebarPaneAdded]: ExtensionSidebarPane,\n  [Events.TraceProviderAdded]: ExtensionTraceProvider,\n};\n\nclass ExtensionServerPanelView extends UI.View.SimpleView {\n  private readonly name: string;\n  private readonly panel: UI.Panel.Panel;\n\n  constructor(name: string, title: Platform.UIString.LocalizedString, panel: UI.Panel.Panel) {\n    super(title);\n    this.name = name;\n    this.panel = panel;\n  }\n\n  viewId(): string {\n    return this.name;\n  }\n\n  widget(): Promise<UI.Widget.Widget> {\n    return Promise.resolve(this.panel) as Promise<UI.Widget.Widget>;\n  }\n}\n\nexport class ExtensionStatus {\n  OK: (...args: unknown[]) => Record;\n  E_EXISTS: (...args: unknown[]) => Record;\n  E_BADARG: (...args: unknown[]) => Record;\n  E_BADARGTYPE: (...args: unknown[]) => Record;\n  E_NOTFOUND: (...args: unknown[]) => Record;\n  E_NOTSUPPORTED: (...args: unknown[]) => Record;\n  E_PROTOCOLERROR: (...args: unknown[]) => Record;\n  E_FAILED: (...args: unknown[]) => Record;\n\n  constructor() {\n    function makeStatus(code: string, description: string, ...details: unknown[]): Record {\n      const status: Record = {code, description, details};\n      if (code !== 'OK') {\n        status.isError = true;\n        console.error('Extension server error: ' + Platform.StringUtilities.sprintf(description, ...details));\n      }\n      return status;\n    }\n\n    this.OK = makeStatus.bind(null, 'OK', 'OK');\n    this.E_EXISTS = makeStatus.bind(null, 'E_EXISTS', 'Object already exists: %s');\n    this.E_BADARG = makeStatus.bind(null, 'E_BADARG', 'Invalid argument %s: %s');\n    this.E_BADARGTYPE = makeStatus.bind(null, 'E_BADARGTYPE', 'Invalid type for argument %s: got %s, expected %s');\n    this.E_NOTFOUND = makeStatus.bind(null, 'E_NOTFOUND', 'Object not found: %s');\n    this.E_NOTSUPPORTED = makeStatus.bind(null, 'E_NOTSUPPORTED', 'Object does not support requested operation: %s');\n    this.E_PROTOCOLERROR = makeStatus.bind(null, 'E_PROTOCOLERROR', 'Inspector protocol error: %s');\n    this.E_FAILED = makeStatus.bind(null, 'E_FAILED', 'Operation failed: %s');\n  }\n}\nexport interface Record {\n  code: string;\n  description: string;\n  details: unknown[];\n  isError?: boolean;\n}\n"],
  "mappings": "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",
  "names": []
}
