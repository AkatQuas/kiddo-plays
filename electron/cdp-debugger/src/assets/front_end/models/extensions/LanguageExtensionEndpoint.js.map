{
  "version": 3,
  "sources": ["../../../../../../front_end/models/extensions/LanguageExtensionEndpoint.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../bindings/bindings.js';\nimport type {Chrome} from '../../../extension-api/ExtensionAPI.js'; // eslint-disable-line rulesdir/es_modules_import\nimport {ExtensionEndpoint} from './ExtensionEndpoint.js';\n\nimport {PrivateAPI} from './ExtensionAPI.js';\n\nclass LanguageExtensionEndpointImpl extends ExtensionEndpoint {\n  private plugin: LanguageExtensionEndpoint;\n  constructor(plugin: LanguageExtensionEndpoint, port: MessagePort) {\n    super(port);\n    this.plugin = plugin;\n  }\n  protected handleEvent({event}: {event: string}): void {\n    switch (event) {\n      case PrivateAPI.LanguageExtensionPluginEvents.UnregisteredLanguageExtensionPlugin: {\n        this.disconnect();\n        const {pluginManager} = Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance();\n        if (pluginManager) {\n          pluginManager.removePlugin(this.plugin);\n        }\n        break;\n      }\n    }\n  }\n}\n\nexport class LanguageExtensionEndpoint extends Bindings.DebuggerLanguagePlugins.DebuggerLanguagePlugin {\n  private readonly supportedScriptTypes: {\n    language: string,\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    symbol_types: Array<string>,\n  };\n  private endpoint: LanguageExtensionEndpointImpl;\n  constructor(\n      name: string, supportedScriptTypes: {\n        language: string,\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        symbol_types: Array<string>,\n      },\n      port: MessagePort) {\n    super(name);\n    this.supportedScriptTypes = supportedScriptTypes;\n    this.endpoint = new LanguageExtensionEndpointImpl(this, port);\n  }\n\n  handleScript(script: SDK.Script.Script): boolean {\n    const language = script.scriptLanguage();\n    return language !== null && script.debugSymbols !== null && language === this.supportedScriptTypes.language &&\n        this.supportedScriptTypes.symbol_types.includes(script.debugSymbols.type);\n  }\n\n  /** Notify the plugin about a new script\n     */\n  addRawModule(rawModuleId: string, symbolsURL: string, rawModule: Chrome.DevTools.RawModule): Promise<string[]> {\n    return this.endpoint.sendRequest(\n               PrivateAPI.LanguageExtensionPluginCommands.AddRawModule, {rawModuleId, symbolsURL, rawModule}) as\n        Promise<string[]>;\n  }\n\n  /**\n   * Notifies the plugin that a script is removed.\n   */\n  removeRawModule(rawModuleId: string): Promise<void> {\n    return this.endpoint.sendRequest(PrivateAPI.LanguageExtensionPluginCommands.RemoveRawModule, {rawModuleId}) as\n        Promise<void>;\n  }\n\n  /** Find locations in raw modules from a location in a source file\n     */\n  sourceLocationToRawLocation(sourceLocation: Chrome.DevTools.SourceLocation):\n      Promise<Chrome.DevTools.RawLocationRange[]> {\n    return this.endpoint.sendRequest(\n               PrivateAPI.LanguageExtensionPluginCommands.SourceLocationToRawLocation, {sourceLocation}) as\n        Promise<Chrome.DevTools.RawLocationRange[]>;\n  }\n\n  /** Find locations in source files from a location in a raw module\n     */\n  rawLocationToSourceLocation(rawLocation: Chrome.DevTools.RawLocation): Promise<Chrome.DevTools.SourceLocation[]> {\n    return this.endpoint.sendRequest(\n               PrivateAPI.LanguageExtensionPluginCommands.RawLocationToSourceLocation, {rawLocation}) as\n        Promise<Chrome.DevTools.SourceLocation[]>;\n  }\n\n  getScopeInfo(type: string): Promise<Chrome.DevTools.ScopeInfo> {\n    return this.endpoint.sendRequest(PrivateAPI.LanguageExtensionPluginCommands.GetScopeInfo, {type}) as\n        Promise<Chrome.DevTools.ScopeInfo>;\n  }\n\n  /** List all variables in lexical scope at a given location in a raw module\n     */\n  listVariablesInScope(rawLocation: Chrome.DevTools.RawLocation): Promise<Chrome.DevTools.Variable[]> {\n    return this.endpoint.sendRequest(PrivateAPI.LanguageExtensionPluginCommands.ListVariablesInScope, {rawLocation}) as\n        Promise<Chrome.DevTools.Variable[]>;\n  }\n\n  /** List all function names (including inlined frames) at location\n     */\n  getFunctionInfo(rawLocation: Chrome.DevTools.RawLocation): Promise<{\n    frames: Array<Chrome.DevTools.FunctionInfo>,\n  }> {\n    return this.endpoint.sendRequest(PrivateAPI.LanguageExtensionPluginCommands.GetFunctionInfo, {rawLocation}) as\n        Promise<{\n             frames: Array<Chrome.DevTools.FunctionInfo>,\n           }>;\n  }\n\n  /** Find locations in raw modules corresponding to the inline function\n     *  that rawLocation is in.\n     */\n  getInlinedFunctionRanges(rawLocation: Chrome.DevTools.RawLocation): Promise<Chrome.DevTools.RawLocationRange[]> {\n    return this.endpoint.sendRequest(\n               PrivateAPI.LanguageExtensionPluginCommands.GetInlinedFunctionRanges, {rawLocation}) as\n        Promise<Chrome.DevTools.RawLocationRange[]>;\n  }\n\n  /** Find locations in raw modules corresponding to inline functions\n     *  called by the function or inline frame that rawLocation is in.\n     */\n  getInlinedCalleesRanges(rawLocation: Chrome.DevTools.RawLocation): Promise<Chrome.DevTools.RawLocationRange[]> {\n    return this.endpoint.sendRequest(\n               PrivateAPI.LanguageExtensionPluginCommands.GetInlinedCalleesRanges, {rawLocation}) as\n        Promise<Chrome.DevTools.RawLocationRange[]>;\n  }\n\n  getTypeInfo(expression: string, context: Chrome.DevTools.RawLocation): Promise<{\n    typeInfos: Array<Chrome.DevTools.TypeInfo>,\n    base: Chrome.DevTools.EvalBase,\n  }|null> {\n    return this.endpoint.sendRequest(PrivateAPI.LanguageExtensionPluginCommands.GetTypeInfo, {expression, context}) as\n        Promise<{\n             typeInfos: Array<Chrome.DevTools.TypeInfo>,\n             base: Chrome.DevTools.EvalBase,\n           }|null>;\n  }\n\n  getFormatter(\n      expressionOrField: string|{\n        base: Chrome.DevTools.EvalBase,\n        field: Array<Chrome.DevTools.FieldInfo>,\n      },\n      context: Chrome.DevTools.RawLocation): Promise<{\n    js: string,\n  }> {\n    return this.endpoint.sendRequest(\n               PrivateAPI.LanguageExtensionPluginCommands.GetFormatter, {expressionOrField, context}) as Promise<{\n             js: string,\n           }>;\n  }\n\n  getInspectableAddress(field: {\n    base: Chrome.DevTools.EvalBase,\n    field: Array<Chrome.DevTools.FieldInfo>,\n  }): Promise<{\n    js: string,\n  }> {\n    return this.endpoint.sendRequest(PrivateAPI.LanguageExtensionPluginCommands.GetInspectableAddress, {field}) as\n        Promise<{\n             js: string,\n           }>;\n  }\n\n  async getMappedLines(rawModuleId: string, sourceFileURL: string): Promise<number[]|undefined> {\n    return this.endpoint.sendRequest(\n        PrivateAPI.LanguageExtensionPluginCommands.GetMappedLines, {rawModuleId, sourceFileURL});\n  }\n\n  dispose(): void {\n  }\n}\n"],
  "mappings": "AAKA;AAEA;AAEA;AAEA,4CAA4C,kBAAkB;AAAA,EACpD;AAAA,EACR,YAAY,QAAmC,MAAmB;AAChE,UAAM;AACN,SAAK,SAAS;AAAA;AAAA,EAEN,YAAY,EAAC,SAA+B;AACpD,YAAQ;AAAA,WACD,WAAW,8BAA8B,qCAAqC;AACjF,aAAK;AACL,cAAM,EAAC,kBAAiB,SAAS,yBAAyB,yBAAyB;AACnF,YAAI,eAAe;AACjB,wBAAc,aAAa,KAAK;AAAA;AAElC;AAAA;AAAA;AAAA;AAAA;AAMD,+CAAwC,SAAS,wBAAwB,uBAAuB;AAAA,EACpF;AAAA,EAMT;AAAA,EACR,YACI,MAAc,sBAMd,MAAmB;AACrB,UAAM;AACN,SAAK,uBAAuB;AAC5B,SAAK,WAAW,IAAI,8BAA8B,MAAM;AAAA;AAAA,EAG1D,aAAa,QAAoC;AAC/C,UAAM,WAAW,OAAO;AACxB,WAAO,aAAa,QAAQ,OAAO,iBAAiB,QAAQ,aAAa,KAAK,qBAAqB,YAC/F,KAAK,qBAAqB,aAAa,SAAS,OAAO,aAAa;AAAA;AAAA,EAK1E,aAAa,aAAqB,YAAoB,WAAyD;AAC7G,WAAO,KAAK,SAAS,YACV,WAAW,gCAAgC,cAAc,EAAC,aAAa,YAAY;AAAA;AAAA,EAOhG,gBAAgB,aAAoC;AAClD,WAAO,KAAK,SAAS,YAAY,WAAW,gCAAgC,iBAAiB,EAAC;AAAA;AAAA,EAMhG,4BAA4B,gBACoB;AAC9C,WAAO,KAAK,SAAS,YACV,WAAW,gCAAgC,6BAA6B,EAAC;AAAA;AAAA,EAMtF,4BAA4B,aAAqF;AAC/G,WAAO,KAAK,SAAS,YACV,WAAW,gCAAgC,6BAA6B,EAAC;AAAA;AAAA,EAItF,aAAa,MAAkD;AAC7D,WAAO,KAAK,SAAS,YAAY,WAAW,gCAAgC,cAAc,EAAC;AAAA;AAAA,EAM7F,qBAAqB,aAA+E;AAClG,WAAO,KAAK,SAAS,YAAY,WAAW,gCAAgC,sBAAsB,EAAC;AAAA;AAAA,EAMrG,gBAAgB,aAEb;AACD,WAAO,KAAK,SAAS,YAAY,WAAW,gCAAgC,iBAAiB,EAAC;AAAA;AAAA,EAShG,yBAAyB,aAAuF;AAC9G,WAAO,KAAK,SAAS,YACV,WAAW,gCAAgC,0BAA0B,EAAC;AAAA;AAAA,EAOnF,wBAAwB,aAAuF;AAC7G,WAAO,KAAK,SAAS,YACV,WAAW,gCAAgC,yBAAyB,EAAC;AAAA;AAAA,EAIlF,YAAY,YAAoB,SAGxB;AACN,WAAO,KAAK,SAAS,YAAY,WAAW,gCAAgC,aAAa,EAAC,YAAY;AAAA;AAAA,EAOxG,aACI,mBAIA,SAED;AACD,WAAO,KAAK,SAAS,YACV,WAAW,gCAAgC,cAAc,EAAC,mBAAmB;AAAA;AAAA,EAK1F,sBAAsB,OAKnB;AACD,WAAO,KAAK,SAAS,YAAY,WAAW,gCAAgC,uBAAuB,EAAC;AAAA;AAAA,QAMhG,eAAe,aAAqB,eAAoD;AAC5F,WAAO,KAAK,SAAS,YACjB,WAAW,gCAAgC,gBAAgB,EAAC,aAAa;AAAA;AAAA,EAG/E,UAAgB;AAAA;AAAA;",
  "names": []
}
