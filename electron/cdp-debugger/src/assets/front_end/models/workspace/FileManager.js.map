{
  "version": 3,
  "sources": ["../../../../../../front_end/models/workspace/FileManager.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport type * as Platform from '../../core/platform/platform.js';\n\nlet fileManagerInstance: FileManager|null;\n\ninterface SaveCallbackParam {\n  fileSystemPath?: Platform.DevToolsPath.RawPathString|Platform.DevToolsPath.UrlString;\n}\n\nexport class FileManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  private readonly saveCallbacks:\n      Map<Platform.DevToolsPath.RawPathString|Platform.DevToolsPath.UrlString, (arg0: SaveCallbackParam|null) => void>;\n  private constructor() {\n    super();\n    this.saveCallbacks = new Map();\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.SavedURL, this.savedURL, this);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.CanceledSaveURL, this.canceledSavedURL, this);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.AppendedToURL, this.appendedToURL, this);\n  }\n\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): FileManager {\n    const {forceNew} = opts;\n    if (!fileManagerInstance || forceNew) {\n      fileManagerInstance = new FileManager();\n    }\n\n    return fileManagerInstance;\n  }\n\n  save(url: Platform.DevToolsPath.RawPathString|Platform.DevToolsPath.UrlString, content: string, forceSaveAs: boolean):\n      Promise<SaveCallbackParam|null> {\n    // Remove this url from the saved URLs while it is being saved.\n    const result = new Promise<SaveCallbackParam|null>(resolve => this.saveCallbacks.set(url, resolve));\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.save(url, content, forceSaveAs);\n    return result;\n  }\n\n  private savedURL(event: Common.EventTarget.EventTargetEvent<Host.InspectorFrontendHostAPI.SavedURLEvent>): void {\n    const {url, fileSystemPath} = event.data;\n    const callback = this.saveCallbacks.get(url);\n    this.saveCallbacks.delete(url);\n    if (callback) {\n      callback({fileSystemPath});\n    }\n  }\n\n  private canceledSavedURL({data: url}: Common.EventTarget.EventTargetEvent<Platform.DevToolsPath.UrlString>): void {\n    const callback = this.saveCallbacks.get(url);\n    this.saveCallbacks.delete(url);\n    if (callback) {\n      callback(null);\n    }\n  }\n\n  append(url: Platform.DevToolsPath.RawPathString|Platform.DevToolsPath.UrlString, content: string): void {\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.append(url, content);\n  }\n\n  close(url: Platform.DevToolsPath.RawPathString|Platform.DevToolsPath.UrlString): void {\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.close(url);\n  }\n\n  private appendedToURL({data: url}: Common.EventTarget.EventTargetEvent<string>): void {\n    this.dispatchEventToListeners(Events.AppendedToURL, url);\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  AppendedToURL = 'AppendedToURL',\n}\n\nexport type EventTypes = {\n  [Events.AppendedToURL]: string,\n};\n"],
  "mappings": "AA8BA;AACA;AAGA,IAAI;AAMG,iCAA0B,OAAO,cAAc,cAA0B;AAAA,EAC7D;AAAA,EAET,cAAc;AACpB;AACA,SAAK,gBAAgB,oBAAI;AACzB,SAAK,sBAAsB,8BAA8B,OAAO,iBAC5D,KAAK,yBAAyB,OAAO,UAAU,KAAK,UAAU;AAClE,SAAK,sBAAsB,8BAA8B,OAAO,iBAC5D,KAAK,yBAAyB,OAAO,iBAAiB,KAAK,kBAAkB;AACjF,SAAK,sBAAsB,8BAA8B,OAAO,iBAC5D,KAAK,yBAAyB,OAAO,eAAe,KAAK,eAAe;AAAA;AAAA,SAGvE,SAAS,OAAiC,EAAC,UAAU,QAAoB;AAC9E,UAAM,EAAC,aAAY;AACnB,QAAI,CAAC,uBAAuB,UAAU;AACpC,4BAAsB,IAAI;AAAA;AAG5B,WAAO;AAAA;AAAA,EAGT,KAAK,KAA0E,SAAiB,aAC5D;AAElC,UAAM,SAAS,IAAI,QAAgC,aAAW,KAAK,cAAc,IAAI,KAAK;AAC1F,SAAK,sBAAsB,8BAA8B,KAAK,KAAK,SAAS;AAC5E,WAAO;AAAA;AAAA,EAGD,SAAS,OAA+F;AAC9G,UAAM,EAAC,KAAK,mBAAkB,MAAM;AACpC,UAAM,WAAW,KAAK,cAAc,IAAI;AACxC,SAAK,cAAc,OAAO;AAC1B,QAAI,UAAU;AACZ,eAAS,EAAC;AAAA;AAAA;AAAA,EAIN,iBAAiB,EAAC,MAAM,OAAkF;AAChH,UAAM,WAAW,KAAK,cAAc,IAAI;AACxC,SAAK,cAAc,OAAO;AAC1B,QAAI,UAAU;AACZ,eAAS;AAAA;AAAA;AAAA,EAIb,OAAO,KAA0E,SAAuB;AACtG,SAAK,sBAAsB,8BAA8B,OAAO,KAAK;AAAA;AAAA,EAGvE,MAAM,KAAgF;AACpF,SAAK,sBAAsB,8BAA8B,MAAM;AAAA;AAAA,EAGzD,cAAc,EAAC,MAAM,OAAyD;AACpF,SAAK,yBAAyB,OAAO,eAAe;AAAA;AAAA;AAMjD,WAAK,SAAL,kBAAK,YAAL;AACL,6BAAgB;AADN;AAAA;",
  "names": []
}
