{
  "version": 3,
  "sources": ["../../../../../../front_end/models/workspace/WorkspaceImpl.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport type * as TextUtils from '../text_utils/text_utils.js';\n\nimport type {UISourceCodeMetadata} from './UISourceCode.js';\nimport {UISourceCode} from './UISourceCode.js';\n\nexport interface ProjectSearchConfig {\n  query(): string;\n  ignoreCase(): boolean;\n  isRegex(): boolean;\n  queries(): string[];\n  filePathMatchesFileQuery(filePath: Platform.DevToolsPath.RawPathString|\n                           Platform.DevToolsPath.EncodedPathString|Platform.DevToolsPath.UrlString): boolean;\n}\n\nexport interface Project {\n  workspace(): WorkspaceImpl;\n  id(): string;\n  type(): projectTypes;\n  isServiceProject(): boolean;\n  displayName(): string;\n  requestMetadata(uiSourceCode: UISourceCode): Promise<UISourceCodeMetadata|null>;\n  requestFileContent(uiSourceCode: UISourceCode): Promise<TextUtils.ContentProvider.DeferredContent>;\n  canSetFileContent(): boolean;\n  setFileContent(uiSourceCode: UISourceCode, newContent: string, isBase64: boolean): Promise<void>;\n  fullDisplayName(uiSourceCode: UISourceCode): string;\n  mimeType(uiSourceCode: UISourceCode): string;\n  canRename(): boolean;\n  rename(\n      uiSourceCode: UISourceCode, newName: Platform.DevToolsPath.RawPathString,\n      callback:\n          (arg0: boolean, arg1?: string, arg2?: Platform.DevToolsPath.UrlString,\n           arg3?: Common.ResourceType.ResourceType) => void): void;\n  excludeFolder(path: Platform.DevToolsPath.UrlString): void;\n  canExcludeFolder(path: Platform.DevToolsPath.EncodedPathString): boolean;\n  createFile(path: Platform.DevToolsPath.EncodedPathString, name: string|null, content: string, isBase64?: boolean):\n      Promise<UISourceCode|null>;\n  canCreateFile(): boolean;\n  deleteFile(uiSourceCode: UISourceCode): void;\n  remove(): void;\n  searchInFileContent(uiSourceCode: UISourceCode, query: string, caseSensitive: boolean, isRegex: boolean):\n      Promise<TextUtils.ContentProvider.SearchMatch[]>;\n  findFilesMatchingSearchRequest(\n      searchConfig: ProjectSearchConfig, filesMatchingFileQuery: Platform.DevToolsPath.UrlString[],\n      progress: Common.Progress.Progress): Promise<string[]>;\n  indexContent(progress: Common.Progress.Progress): void;\n  uiSourceCodeForURL(url: Platform.DevToolsPath.UrlString): UISourceCode|null;\n  uiSourceCodes(): UISourceCode[];\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum, @typescript-eslint/naming-convention\nexport enum projectTypes {\n  Debugger = 'debugger',\n  Formatter = 'formatter',\n  Network = 'network',\n  FileSystem = 'filesystem',\n  ContentScripts = 'contentscripts',\n  Service = 'service',\n}\n\nexport abstract class ProjectStore implements Project {\n  private readonly workspaceInternal: WorkspaceImpl;\n  private readonly idInternal: string;\n  private readonly typeInternal: projectTypes;\n  private readonly displayNameInternal: string;\n  private uiSourceCodesMap: Map<Platform.DevToolsPath.UrlString, {\n    uiSourceCode: UISourceCode,\n    index: number,\n  }>;\n  private uiSourceCodesList: UISourceCode[];\n\n  constructor(workspace: WorkspaceImpl, id: string, type: projectTypes, displayName: string) {\n    this.workspaceInternal = workspace;\n    this.idInternal = id;\n    this.typeInternal = type;\n    this.displayNameInternal = displayName;\n\n    this.uiSourceCodesMap = new Map();\n    this.uiSourceCodesList = [];\n  }\n\n  id(): string {\n    return this.idInternal;\n  }\n\n  type(): projectTypes {\n    return this.typeInternal;\n  }\n\n  displayName(): string {\n    return this.displayNameInternal;\n  }\n\n  workspace(): WorkspaceImpl {\n    return this.workspaceInternal;\n  }\n\n  createUISourceCode(url: Platform.DevToolsPath.UrlString, contentType: Common.ResourceType.ResourceType):\n      UISourceCode {\n    return new UISourceCode(this, url, contentType);\n  }\n\n  addUISourceCode(uiSourceCode: UISourceCode): boolean {\n    const url = uiSourceCode.url();\n    if (this.uiSourceCodeForURL(url)) {\n      return false;\n    }\n    this.uiSourceCodesMap.set(url, {uiSourceCode: uiSourceCode, index: this.uiSourceCodesList.length});\n    this.uiSourceCodesList.push(uiSourceCode);\n    this.workspaceInternal.dispatchEventToListeners(Events.UISourceCodeAdded, uiSourceCode);\n    return true;\n  }\n\n  removeUISourceCode(url: Platform.DevToolsPath.UrlString): void {\n    const uiSourceCode = this.uiSourceCodeForURL(url);\n    if (!uiSourceCode) {\n      return;\n    }\n\n    const entry = this.uiSourceCodesMap.get(url);\n    if (!entry) {\n      return;\n    }\n    const movedUISourceCode = this.uiSourceCodesList[this.uiSourceCodesList.length - 1];\n    this.uiSourceCodesList[entry.index] = movedUISourceCode;\n    const movedEntry = this.uiSourceCodesMap.get(movedUISourceCode.url());\n    if (movedEntry) {\n      movedEntry.index = entry.index;\n    }\n    this.uiSourceCodesList.splice(this.uiSourceCodesList.length - 1, 1);\n    this.uiSourceCodesMap.delete(url);\n    this.workspaceInternal.dispatchEventToListeners(Events.UISourceCodeRemoved, entry.uiSourceCode);\n  }\n\n  removeProject(): void {\n    this.workspaceInternal.removeProject(this);\n    this.uiSourceCodesMap = new Map();\n    this.uiSourceCodesList = [];\n  }\n\n  uiSourceCodeForURL(url: Platform.DevToolsPath.UrlString): UISourceCode|null {\n    const entry = this.uiSourceCodesMap.get(url);\n    return entry ? entry.uiSourceCode : null;\n  }\n\n  uiSourceCodes(): UISourceCode[] {\n    return this.uiSourceCodesList;\n  }\n\n  renameUISourceCode(uiSourceCode: UISourceCode, newName: string): void {\n    const oldPath = uiSourceCode.url();\n    const newPath = uiSourceCode.parentURL() ?\n        Common.ParsedURL.ParsedURL.urlFromParentUrlAndName(uiSourceCode.parentURL(), newName) :\n        Common.ParsedURL.ParsedURL.preEncodeSpecialCharactersInPath(newName) as Platform.DevToolsPath.UrlString;\n    const value = this.uiSourceCodesMap.get(oldPath) as {\n      uiSourceCode: UISourceCode,\n      index: number,\n    };\n    this.uiSourceCodesMap.set(newPath, value);\n    this.uiSourceCodesMap.delete(oldPath);\n  }\n\n  // No-op implementation for a handfull of interface methods.\n\n  rename(\n      _uiSourceCode: UISourceCode, _newName: string,\n      _callback:\n          (arg0: boolean, arg1?: string, arg2?: Platform.DevToolsPath.UrlString,\n           arg3?: Common.ResourceType.ResourceType) => void): void {\n  }\n  excludeFolder(_path: Platform.DevToolsPath.UrlString): void {\n  }\n  deleteFile(_uiSourceCode: UISourceCode): void {\n  }\n  remove(): void {\n  }\n  indexContent(_progress: Common.Progress.Progress): void {\n  }\n\n  abstract isServiceProject(): boolean;\n  abstract requestMetadata(uiSourceCode: UISourceCode): Promise<UISourceCodeMetadata|null>;\n  abstract requestFileContent(uiSourceCode: UISourceCode): Promise<TextUtils.ContentProvider.DeferredContent>;\n  abstract canSetFileContent(): boolean;\n  abstract setFileContent(uiSourceCode: UISourceCode, newContent: string, isBase64: boolean): Promise<void>;\n  abstract fullDisplayName(uiSourceCode: UISourceCode): string;\n  abstract mimeType(uiSourceCode: UISourceCode): string;\n  abstract canRename(): boolean;\n  abstract canExcludeFolder(path: Platform.DevToolsPath.EncodedPathString): boolean;\n  abstract createFile(\n      path: Platform.DevToolsPath.EncodedPathString, name: string|null, content: string,\n      isBase64?: boolean): Promise<UISourceCode|null>;\n  abstract canCreateFile(): boolean;\n  abstract searchInFileContent(uiSourceCode: UISourceCode, query: string, caseSensitive: boolean, isRegex: boolean):\n      Promise<TextUtils.ContentProvider.SearchMatch[]>;\n  abstract findFilesMatchingSearchRequest(\n      searchConfig: ProjectSearchConfig, filesMatchingFileQuery: Platform.DevToolsPath.UrlString[],\n      progress: Common.Progress.Progress): Promise<string[]>;\n}\n\nlet workspaceInstance: WorkspaceImpl|undefined;\n\nexport class WorkspaceImpl extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  private projectsInternal: Map<string, Project>;\n  private hasResourceContentTrackingExtensionsInternal: boolean;\n\n  private constructor() {\n    super();\n    this.projectsInternal = new Map();\n    this.hasResourceContentTrackingExtensionsInternal = false;\n  }\n\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): WorkspaceImpl {\n    const {forceNew} = opts;\n    if (!workspaceInstance || forceNew) {\n      workspaceInstance = new WorkspaceImpl();\n    }\n\n    return workspaceInstance;\n  }\n\n  static removeInstance(): void {\n    workspaceInstance = undefined;\n  }\n\n  uiSourceCode(projectId: string, url: Platform.DevToolsPath.UrlString): UISourceCode|null {\n    const project = this.projectsInternal.get(projectId);\n    return project ? project.uiSourceCodeForURL(url) : null;\n  }\n\n  // This method explicitly awaits the UISourceCode if not yet\n  // available.\n  uiSourceCodeForURLPromise(url: Platform.DevToolsPath.UrlString, type?: projectTypes): Promise<UISourceCode> {\n    const uiSourceCode = this.uiSourceCodeForURL(url, type);\n    if (uiSourceCode) {\n      return Promise.resolve(uiSourceCode);\n    }\n    return new Promise(resolve => {\n      const descriptor = this.addEventListener(Events.UISourceCodeAdded, event => {\n        const uiSourceCode = event.data;\n        if (uiSourceCode.url() === url) {\n          if (!type || type === uiSourceCode.project().type()) {\n            this.removeEventListener(Events.UISourceCodeAdded, descriptor.listener);\n            resolve(uiSourceCode);\n          }\n        }\n      });\n    });\n  }\n\n  uiSourceCodeForURL(url: Platform.DevToolsPath.UrlString, type?: projectTypes): UISourceCode|null {\n    for (const project of this.projectsInternal.values()) {\n      // For snippets, we may get two different UISourceCodes for the same url (one belonging to\n      // the file system project, one belonging to the network project). Allow selecting the UISourceCode\n      // for a specific project type.\n      if (!type || project.type() === type) {\n        const uiSourceCode = project.uiSourceCodeForURL(url);\n        if (uiSourceCode) {\n          return uiSourceCode;\n        }\n      }\n    }\n    return null;\n  }\n\n  uiSourceCodesForProjectType(type: projectTypes): UISourceCode[] {\n    const result: UISourceCode[] = [];\n    for (const project of this.projectsInternal.values()) {\n      if (project.type() === type) {\n        result.push(...project.uiSourceCodes());\n      }\n    }\n    return result;\n  }\n\n  addProject(project: Project): void {\n    console.assert(!this.projectsInternal.has(project.id()), `A project with id ${project.id()} already exists!`);\n    this.projectsInternal.set(project.id(), project);\n    this.dispatchEventToListeners(Events.ProjectAdded, project);\n  }\n\n  removeProject(project: Project): void {\n    this.projectsInternal.delete(project.id());\n    this.dispatchEventToListeners(Events.ProjectRemoved, project);\n  }\n\n  project(projectId: string): Project|null {\n    return this.projectsInternal.get(projectId) || null;\n  }\n\n  projects(): Project[] {\n    return [...this.projectsInternal.values()];\n  }\n\n  projectsForType(type: string): Project[] {\n    function filterByType(project: Project): boolean {\n      return project.type() === type;\n    }\n    return this.projects().filter(filterByType);\n  }\n\n  uiSourceCodes(): UISourceCode[] {\n    const result: UISourceCode[] = [];\n    for (const project of this.projectsInternal.values()) {\n      result.push(...project.uiSourceCodes());\n    }\n    return result;\n  }\n\n  setHasResourceContentTrackingExtensions(hasExtensions: boolean): void {\n    this.hasResourceContentTrackingExtensionsInternal = hasExtensions;\n  }\n\n  hasResourceContentTrackingExtensions(): boolean {\n    return this.hasResourceContentTrackingExtensionsInternal;\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  UISourceCodeAdded = 'UISourceCodeAdded',\n  UISourceCodeRemoved = 'UISourceCodeRemoved',\n  UISourceCodeRenamed = 'UISourceCodeRenamed',\n  WorkingCopyChanged = 'WorkingCopyChanged',\n  WorkingCopyCommitted = 'WorkingCopyCommitted',\n  WorkingCopyCommittedByUser = 'WorkingCopyCommittedByUser',\n  ProjectAdded = 'ProjectAdded',\n  ProjectRemoved = 'ProjectRemoved',\n}\n\nexport interface UISourceCodeRenamedEvent {\n  oldURL: Platform.DevToolsPath.UrlString;\n  uiSourceCode: UISourceCode;\n}\n\nexport interface WorkingCopyChangedEvent {\n  uiSourceCode: UISourceCode;\n}\n\nexport interface WorkingCopyCommitedEvent {\n  uiSourceCode: UISourceCode;\n  content: string;\n  encoded?: boolean;\n}\n\nexport type EventTypes = {\n  [Events.UISourceCodeAdded]: UISourceCode,\n  [Events.UISourceCodeRemoved]: UISourceCode,\n  [Events.UISourceCodeRenamed]: UISourceCodeRenamedEvent,\n  [Events.WorkingCopyChanged]: WorkingCopyChangedEvent,\n  [Events.WorkingCopyCommitted]: WorkingCopyCommitedEvent,\n  [Events.WorkingCopyCommittedByUser]: WorkingCopyCommitedEvent,\n  [Events.ProjectAdded]: Project,\n  [Events.ProjectRemoved]: Project,\n};\n"],
  "mappings": "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",
  "names": []
}
