{
  "version": 3,
  "sources": ["../../../../../../front_end/models/text_utils/CodeMirrorUtils.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2022 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as CodeMirror from '../../third_party/codemirror.next/codemirror.next.js';\ntype Tokenizer = (line: string, callback: (value: string, style: string|null) => void) => void;\n\nexport function createCssTokenizer(): Tokenizer {\n  async function tokenize(line: string, callback: (value: string, style: string|null) => void): Promise<void> {\n    const streamParser = await CodeMirror.cssStreamParser();\n    const stream = new CodeMirror.StringStream();\n    stream.string = line;\n\n    const startState = streamParser.startState();\n    let lastPos = stream.pos;\n    while (!stream.eol()) {\n      const token = streamParser.token(stream, startState);\n      const segment = stream.current().substring(lastPos, stream.pos);\n      callback(segment, token);\n      lastPos = stream.pos;\n    }\n  }\n  return tokenize;\n}\n"],
  "mappings": "AA8BA;AAGO,qCAAyC;AAC9C,0BAAwB,MAAc,UAAsE;AAC1G,UAAM,eAAe,MAAM,WAAW;AACtC,UAAM,SAAS,IAAI,WAAW;AAC9B,WAAO,SAAS;AAEhB,UAAM,aAAa,aAAa;AAChC,QAAI,UAAU,OAAO;AACrB,WAAO,CAAC,OAAO,OAAO;AACpB,YAAM,QAAQ,aAAa,MAAM,QAAQ;AACzC,YAAM,UAAU,OAAO,UAAU,UAAU,SAAS,OAAO;AAC3D,eAAS,SAAS;AAClB,gBAAU,OAAO;AAAA;AAAA;AAGrB,SAAO;AAAA;",
  "names": []
}
