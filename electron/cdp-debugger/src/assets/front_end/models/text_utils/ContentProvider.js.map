{
  "version": 3,
  "sources": ["../../../../../../front_end/models/text_utils/ContentProvider.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport type * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\n\nexport abstract class ContentProvider {\n  abstract contentURL(): Platform.DevToolsPath.UrlString;\n  abstract contentType(): Common.ResourceType.ResourceType;\n  abstract contentEncoded(): Promise<boolean>;\n  abstract requestContent(): Promise<DeferredContent>;\n  abstract searchInContent(query: string, caseSensitive: boolean, isRegex: boolean): Promise<SearchMatch[]>;\n}\n\nexport class SearchMatch {\n  constructor(public lineNumber: number, public lineContent: string, public columnNumber?: number|undefined) {\n  }\n}\n\nexport const contentAsDataURL = function(\n    content: string|null, mimeType: string, contentEncoded: boolean, charset?: string|null,\n    limitSize: boolean = true): string|null {\n  const maxDataUrlSize = 1024 * 1024;\n  if (content === undefined || content === null || (limitSize && content.length > maxDataUrlSize)) {\n    return null;\n  }\n\n  return 'data:' + mimeType + (charset ? ';charset=' + charset : '') + (contentEncoded ? ';base64' : '') + ',' +\n      content;\n};\n\nexport type DeferredContent = {\n  content: string,\n  isEncoded: boolean,\n}|{content: null, error: string, isEncoded: boolean};\n"],
  "mappings": "AAiCO,6BAA+B;AAAA;AAQ/B,yBAAkB;AAAA,EACvB,YAAmB,YAA2B,aAA4B,cAAiC;AAAxF;AAA2B;AAA4B;AAAA;AAAA;AAIrE,aAAM,mBAAmB,SAC5B,SAAsB,UAAkB,gBAAyB,SACjE,YAAqB,MAAmB;AAC1C,QAAM,iBAAiB,OAAO;AAC9B,MAAI,YAAY,UAAa,YAAY,QAAS,aAAa,QAAQ,SAAS,gBAAiB;AAC/F,WAAO;AAAA;AAGT,SAAO,UAAU,WAAY,WAAU,cAAc,UAAU,MAAO,kBAAiB,YAAY,MAAM,MACrG;AAAA;",
  "names": []
}
