{
  "version": 3,
  "sources": ["../../../../../../front_end/models/text_utils/TextRange.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Platform from '../../core/platform/platform.js';\n\nexport interface SerializedTextRange {\n  startLine: number;\n  startColumn: number;\n  endLine: number;\n  endColumn: number;\n}\n\nexport class TextRange {\n  constructor(public startLine: number, public startColumn: number, public endLine: number, public endColumn: number) {\n  }\n\n  static createFromLocation(line: number, column: number): TextRange {\n    return new TextRange(line, column, line, column);\n  }\n\n  static fromObject(serializedTextRange: SerializedTextRange): TextRange {\n    return new TextRange(\n        serializedTextRange.startLine, serializedTextRange.startColumn, serializedTextRange.endLine,\n        serializedTextRange.endColumn);\n  }\n\n  static comparator(range1: TextRange, range2: TextRange): number {\n    return range1.compareTo(range2);\n  }\n\n  static fromEdit(oldRange: TextRange, newText: string): TextRange {\n    let endLine: number = oldRange.startLine;\n    let endColumn: number = oldRange.startColumn + newText.length;\n\n    const lineEndings = Platform.StringUtilities.findLineEndingIndexes(newText);\n    if (lineEndings.length > 1) {\n      endLine = oldRange.startLine + lineEndings.length - 1;\n      const len = lineEndings.length;\n      endColumn = lineEndings[len - 1] - lineEndings[len - 2] - 1;\n    }\n    return new TextRange(oldRange.startLine, oldRange.startColumn, endLine, endColumn);\n  }\n\n  isEmpty(): boolean {\n    return this.startLine === this.endLine && this.startColumn === this.endColumn;\n  }\n\n  immediatelyPrecedes(range?: TextRange): boolean {\n    if (!range) {\n      return false;\n    }\n    return this.endLine === range.startLine && this.endColumn === range.startColumn;\n  }\n\n  immediatelyFollows(range?: TextRange): boolean {\n    if (!range) {\n      return false;\n    }\n    return range.immediatelyPrecedes(this);\n  }\n\n  follows(range: TextRange): boolean {\n    return (range.endLine === this.startLine && range.endColumn <= this.startColumn) || range.endLine < this.startLine;\n  }\n\n  get linesCount(): number {\n    return this.endLine - this.startLine;\n  }\n\n  collapseToEnd(): TextRange {\n    return new TextRange(this.endLine, this.endColumn, this.endLine, this.endColumn);\n  }\n\n  collapseToStart(): TextRange {\n    return new TextRange(this.startLine, this.startColumn, this.startLine, this.startColumn);\n  }\n\n  normalize(): TextRange {\n    if (this.startLine > this.endLine || (this.startLine === this.endLine && this.startColumn > this.endColumn)) {\n      return new TextRange(this.endLine, this.endColumn, this.startLine, this.startColumn);\n    }\n    return this.clone();\n  }\n\n  clone(): TextRange {\n    return new TextRange(this.startLine, this.startColumn, this.endLine, this.endColumn);\n  }\n\n  serializeToObject(): {\n    startLine: number,\n    startColumn: number,\n    endLine: number,\n    endColumn: number,\n  } {\n    return {\n      startLine: this.startLine,\n      startColumn: this.startColumn,\n      endLine: this.endLine,\n      endColumn: this.endColumn,\n    };\n  }\n\n  compareTo(other: TextRange): number {\n    if (this.startLine > other.startLine) {\n      return 1;\n    }\n    if (this.startLine < other.startLine) {\n      return -1;\n    }\n    if (this.startColumn > other.startColumn) {\n      return 1;\n    }\n    if (this.startColumn < other.startColumn) {\n      return -1;\n    }\n    return 0;\n  }\n\n  compareToPosition(lineNumber: number, columnNumber: number): number {\n    if (lineNumber < this.startLine || (lineNumber === this.startLine && columnNumber < this.startColumn)) {\n      return -1;\n    }\n    if (lineNumber > this.endLine || (lineNumber === this.endLine && columnNumber > this.endColumn)) {\n      return 1;\n    }\n    return 0;\n  }\n\n  equal(other: TextRange): boolean {\n    return this.startLine === other.startLine && this.endLine === other.endLine &&\n        this.startColumn === other.startColumn && this.endColumn === other.endColumn;\n  }\n\n  relativeTo(line: number, column: number): TextRange {\n    const relative = this.clone();\n\n    if (this.startLine === line) {\n      relative.startColumn -= column;\n    }\n    if (this.endLine === line) {\n      relative.endColumn -= column;\n    }\n\n    relative.startLine -= line;\n    relative.endLine -= line;\n    return relative;\n  }\n\n  relativeFrom(line: number, column: number): TextRange {\n    const relative = this.clone();\n\n    if (this.startLine === 0) {\n      relative.startColumn += column;\n    }\n    if (this.endLine === 0) {\n      relative.endColumn += column;\n    }\n\n    relative.startLine += line;\n    relative.endLine += line;\n    return relative;\n  }\n\n  rebaseAfterTextEdit(originalRange: TextRange, editedRange: TextRange): TextRange {\n    console.assert(originalRange.startLine === editedRange.startLine);\n    console.assert(originalRange.startColumn === editedRange.startColumn);\n    const rebase = this.clone();\n    if (!this.follows(originalRange)) {\n      return rebase;\n    }\n    const lineDelta = editedRange.endLine - originalRange.endLine;\n    const columnDelta = editedRange.endColumn - originalRange.endColumn;\n    rebase.startLine += lineDelta;\n    rebase.endLine += lineDelta;\n    if (rebase.startLine === editedRange.endLine) {\n      rebase.startColumn += columnDelta;\n    }\n    if (rebase.endLine === editedRange.endLine) {\n      rebase.endColumn += columnDelta;\n    }\n    return rebase;\n  }\n\n  toString(): string {\n    return JSON.stringify(this);\n  }\n\n  containsLocation(lineNumber: number, columnNumber: number): boolean {\n    if (this.startLine === this.endLine) {\n      return this.startLine === lineNumber && this.startColumn <= columnNumber && columnNumber <= this.endColumn;\n    }\n    if (this.startLine === lineNumber) {\n      return this.startColumn <= columnNumber;\n    }\n    if (this.endLine === lineNumber) {\n      return columnNumber <= this.endColumn;\n    }\n    return this.startLine < lineNumber && lineNumber < this.endLine;\n  }\n}\n\nexport class SourceRange {\n  constructor(public offset: number, public length: number) {\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
