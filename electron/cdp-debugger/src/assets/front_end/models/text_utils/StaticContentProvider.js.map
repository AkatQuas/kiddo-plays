{
  "version": 3,
  "sources": ["../../../../../../front_end/models/text_utils/StaticContentProvider.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\n\nimport type {ContentProvider, DeferredContent, SearchMatch} from './ContentProvider.js';\nimport {performSearchInContent} from './TextUtils.js';\n\nexport class StaticContentProvider implements ContentProvider {\n  private readonly contentURLInternal: Platform.DevToolsPath.UrlString;\n  private readonly contentTypeInternal: Common.ResourceType.ResourceType;\n  private readonly lazyContent: () => Promise<DeferredContent>;\n\n  constructor(\n      contentURL: Platform.DevToolsPath.UrlString, contentType: Common.ResourceType.ResourceType,\n      lazyContent: () => Promise<DeferredContent>) {\n    this.contentURLInternal = contentURL;\n    this.contentTypeInternal = contentType;\n    this.lazyContent = lazyContent;\n  }\n\n  static fromString(\n      contentURL: Platform.DevToolsPath.UrlString, contentType: Common.ResourceType.ResourceType,\n      content: string): StaticContentProvider {\n    const lazyContent = (): Promise<{\n      content: string,\n      isEncoded: boolean,\n    }> => Promise.resolve({content, isEncoded: false});\n    return new StaticContentProvider(contentURL, contentType, lazyContent);\n  }\n\n  contentURL(): Platform.DevToolsPath.UrlString {\n    return this.contentURLInternal;\n  }\n\n  contentType(): Common.ResourceType.ResourceType {\n    return this.contentTypeInternal;\n  }\n\n  contentEncoded(): Promise<boolean> {\n    return Promise.resolve(false);\n  }\n\n  requestContent(): Promise<DeferredContent> {\n    return this.lazyContent();\n  }\n\n  async searchInContent(query: string, caseSensitive: boolean, isRegex: boolean): Promise<SearchMatch[]> {\n    const {content} = (await this.lazyContent() as {\n      content: string,\n      isEncoded: boolean,\n    });\n    return content ? performSearchInContent(content, query, caseSensitive, isRegex) : [];\n  }\n}\n"],
  "mappings": "AAQA;AAEO,mCAAuD;AAAA,EAC3C;AAAA,EACA;AAAA,EACA;AAAA,EAEjB,YACI,YAA6C,aAC7C,aAA6C;AAC/C,SAAK,qBAAqB;AAC1B,SAAK,sBAAsB;AAC3B,SAAK,cAAc;AAAA;AAAA,SAGd,WACH,YAA6C,aAC7C,SAAwC;AAC1C,UAAM,cAAc,MAGd,QAAQ,QAAQ,EAAC,SAAS,WAAW;AAC3C,WAAO,IAAI,sBAAsB,YAAY,aAAa;AAAA;AAAA,EAG5D,aAA8C;AAC5C,WAAO,KAAK;AAAA;AAAA,EAGd,cAAgD;AAC9C,WAAO,KAAK;AAAA;AAAA,EAGd,iBAAmC;AACjC,WAAO,QAAQ,QAAQ;AAAA;AAAA,EAGzB,iBAA2C;AACzC,WAAO,KAAK;AAAA;AAAA,QAGR,gBAAgB,OAAe,eAAwB,SAA0C;AACrG,UAAM,EAAC,YAAY,MAAM,KAAK;AAI9B,WAAO,UAAU,uBAAuB,SAAS,OAAO,eAAe,WAAW;AAAA;AAAA;",
  "names": []
}
