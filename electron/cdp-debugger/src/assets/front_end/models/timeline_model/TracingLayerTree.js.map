{
  "version": 3,
  "sources": ["../../../../../../front_end/models/timeline_model/TracingLayerTree.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport type {LayerPaintEvent} from './TimelineFrameModel.js';\n\nexport class TracingLayerTree extends SDK.LayerTreeBase.LayerTreeBase {\n  private tileById: Map<string, TracingLayerTile>;\n  private paintProfilerModel: SDK.PaintProfiler.PaintProfilerModel|null;\n\n  constructor(target: SDK.Target.Target|null) {\n    super(target);\n    this.tileById = new Map();\n    this.paintProfilerModel = target && target.model(SDK.PaintProfiler.PaintProfilerModel);\n  }\n\n  async setLayers(root: TracingLayerPayload|null, layers: TracingLayerPayload[]|null, paints: LayerPaintEvent[]):\n      Promise<void> {\n    const idsToResolve = new Set<Protocol.DOM.BackendNodeId>();\n    if (root) {\n      // This is a legacy code path for compatibility, as cc is removing\n      // layer tree hierarchy, this code will eventually be removed.\n      this.extractNodeIdsToResolve(idsToResolve, {}, root);\n    } else if (layers) {\n      for (let i = 0; i < layers.length; ++i) {\n        this.extractNodeIdsToResolve(idsToResolve, {}, layers[i]);\n      }\n    }\n\n    await this.resolveBackendNodeIds(idsToResolve);\n\n    const oldLayersById = this.layersById;\n    this.layersById = new Map();\n    this.setContentRoot(null);\n    if (root) {\n      const convertedLayers = this.innerSetLayers(oldLayersById, root);\n      this.setRoot(convertedLayers);\n    } else if (layers) {\n      const processedLayers = layers.map(this.innerSetLayers.bind(this, oldLayersById));\n      const contentRoot = this.contentRoot();\n      if (!contentRoot) {\n        throw new Error('Content root is not set.');\n      }\n      this.setRoot(contentRoot);\n      for (let i = 0; i < processedLayers.length; ++i) {\n        if (processedLayers[i].id() !== contentRoot.id()) {\n          contentRoot.addChild(processedLayers[i]);\n        }\n      }\n    }\n    this.setPaints(paints);\n  }\n\n  setTiles(tiles: TracingLayerTile[]): void {\n    this.tileById = new Map();\n    for (const tile of tiles) {\n      this.tileById.set(tile.id, tile);\n    }\n  }\n\n  pictureForRasterTile(tileId: string): Promise<SDK.PaintProfiler.SnapshotWithRect|null> {\n    const tile = this.tileById.get('cc::Tile/' + tileId);\n    if (!tile) {\n      Common.Console.Console.instance().error(`Tile ${tileId} is missing`);\n      return Promise.resolve(null) as Promise<SDK.PaintProfiler.SnapshotWithRect|null>;\n    }\n    const layer = (this.layerById(tile.layer_id) as TracingLayer | null);\n    if (!layer) {\n      Common.Console.Console.instance().error(`Layer ${tile.layer_id} for tile ${tileId} is not found`);\n      return Promise.resolve(null) as Promise<SDK.PaintProfiler.SnapshotWithRect|null>;\n    }\n    return layer.pictureForRect(tile.content_rect);\n  }\n\n  private setPaints(paints: LayerPaintEvent[]): void {\n    for (let i = 0; i < paints.length; ++i) {\n      const layer = (this.layersById.get(paints[i].layerId()) as TracingLayer | null);\n      if (layer) {\n        layer.addPaintEvent(paints[i]);\n      }\n    }\n  }\n\n  private innerSetLayers(oldLayersById: Map<string|number, SDK.LayerTreeBase.Layer>, payload: TracingLayerPayload):\n      TracingLayer {\n    let layer = (oldLayersById.get(payload.layer_id) as TracingLayer | null);\n    if (layer) {\n      layer.reset(payload);\n    } else {\n      layer = new TracingLayer(this.paintProfilerModel, payload);\n    }\n    this.layersById.set(payload.layer_id, layer);\n    if (payload.owner_node) {\n      layer.setNode(this.backendNodeIdToNode().get(payload.owner_node) || null);\n    }\n    if (!this.contentRoot() && layer.drawsContent()) {\n      this.setContentRoot(layer);\n    }\n    for (let i = 0; payload.children && i < payload.children.length; ++i) {\n      layer.addChild(this.innerSetLayers(oldLayersById, payload.children[i]));\n    }\n    return layer;\n  }\n\n  private extractNodeIdsToResolve(\n      nodeIdsToResolve: Set<Protocol.DOM.BackendNodeId>, seenNodeIds: Object, payload: TracingLayerPayload): void {\n    const backendNodeId = payload.owner_node;\n    if (backendNodeId && !this.backendNodeIdToNode().has(backendNodeId)) {\n      nodeIdsToResolve.add(backendNodeId);\n    }\n    for (let i = 0; payload.children && i < payload.children.length; ++i) {\n      this.extractNodeIdsToResolve(nodeIdsToResolve, seenNodeIds, payload.children[i]);\n    }\n  }\n}\n\nexport class TracingLayer implements SDK.LayerTreeBase.Layer {\n  private parentLayerId: string|null;\n  private parentInternal: SDK.LayerTreeBase.Layer|null;\n  private layerId: string;\n  private nodeInternal: SDK.DOMModel.DOMNode|null;\n  private offsetXInternal: number;\n  private offsetYInternal: number;\n  private widthInternal: number;\n  private heightInternal: number;\n  private childrenInternal: SDK.LayerTreeBase.Layer[];\n  private quadInternal: number[];\n  private scrollRectsInternal: Protocol.LayerTree.ScrollRect[];\n  private gpuMemoryUsageInternal: number;\n  private paints: LayerPaintEvent[];\n  private compositingReasonIds: string[];\n  private drawsContentInternal: boolean;\n  private paintProfilerModel: SDK.PaintProfiler.PaintProfilerModel|null;\n  constructor(paintProfilerModel: SDK.PaintProfiler.PaintProfilerModel|null, payload: TracingLayerPayload) {\n    this.parentLayerId = null;\n    this.parentInternal = null;\n    this.layerId = '';\n    this.nodeInternal = null;\n    this.offsetXInternal = -1;\n    this.offsetYInternal = -1;\n    this.widthInternal = -1;\n    this.heightInternal = -1;\n    this.childrenInternal = [];\n    this.quadInternal = [];\n    this.scrollRectsInternal = [];\n    this.gpuMemoryUsageInternal = -1;\n    this.paints = [];\n    this.compositingReasonIds = [];\n    this.drawsContentInternal = false;\n\n    this.paintProfilerModel = paintProfilerModel;\n    this.reset(payload);\n  }\n\n  reset(payload: TracingLayerPayload): void {\n    this.nodeInternal = null;\n    this.layerId = String(payload.layer_id);\n    this.offsetXInternal = payload.position[0];\n    this.offsetYInternal = payload.position[1];\n    this.widthInternal = payload.bounds.width;\n    this.heightInternal = payload.bounds.height;\n    this.childrenInternal = [];\n    this.parentLayerId = null;\n    this.parentInternal = null;\n    this.quadInternal = payload.layer_quad || [];\n    this.createScrollRects(payload);\n\n    // Keep payload.compositing_reasons as a default\n    // but use the newer payload.debug_info.compositing_reasons\n    // if the first one is not set.\n    this.compositingReasonIds =\n        payload.compositing_reason_ids || (payload.debug_info && payload.debug_info.compositing_reason_ids) || [];\n    this.drawsContentInternal = Boolean(payload.draws_content);\n    this.gpuMemoryUsageInternal = payload.gpu_memory_usage;\n    this.paints = [];\n  }\n\n  id(): string {\n    return this.layerId;\n  }\n\n  parentId(): string|null {\n    return this.parentLayerId;\n  }\n\n  parent(): SDK.LayerTreeBase.Layer|null {\n    return this.parentInternal;\n  }\n\n  isRoot(): boolean {\n    return !this.parentId();\n  }\n\n  children(): SDK.LayerTreeBase.Layer[] {\n    return this.childrenInternal;\n  }\n\n  addChild(childParam: SDK.LayerTreeBase.Layer): void {\n    const child = (childParam as TracingLayer);\n    if (child.parentInternal) {\n      console.assert(false, 'Child already has a parent');\n    }\n    this.childrenInternal.push(child);\n    child.parentInternal = this;\n    child.parentLayerId = this.layerId;\n  }\n\n  setNode(node: SDK.DOMModel.DOMNode|null): void {\n    this.nodeInternal = node;\n  }\n\n  node(): SDK.DOMModel.DOMNode|null {\n    return this.nodeInternal;\n  }\n\n  nodeForSelfOrAncestor(): SDK.DOMModel.DOMNode|null {\n    let layer: (SDK.LayerTreeBase.Layer|null)|this = this;\n    for (; layer; layer = layer.parent()) {\n      if (layer.node()) {\n        return layer.node();\n      }\n    }\n    return null;\n  }\n\n  offsetX(): number {\n    return this.offsetXInternal;\n  }\n\n  offsetY(): number {\n    return this.offsetYInternal;\n  }\n\n  width(): number {\n    return this.widthInternal;\n  }\n\n  height(): number {\n    return this.heightInternal;\n  }\n\n  transform(): number[]|null {\n    return null;\n  }\n\n  quad(): number[] {\n    return this.quadInternal;\n  }\n\n  anchorPoint(): number[] {\n    return [0.5, 0.5, 0];\n  }\n\n  invisible(): boolean {\n    return false;\n  }\n\n  paintCount(): number {\n    return 0;\n  }\n\n  lastPaintRect(): Protocol.DOM.Rect|null {\n    return null;\n  }\n\n  scrollRects(): Protocol.LayerTree.ScrollRect[] {\n    return this.scrollRectsInternal;\n  }\n\n  stickyPositionConstraint(): SDK.LayerTreeBase.StickyPositionConstraint|null {\n    // TODO(smcgruer): Provide sticky layer information in traces.\n    return null;\n  }\n\n  gpuMemoryUsage(): number {\n    return this.gpuMemoryUsageInternal;\n  }\n\n  snapshots(): Promise<SDK.PaintProfiler.SnapshotWithRect|null>[] {\n    return this.paints.map(paint => paint.snapshotPromise().then(snapshot => {\n      if (!snapshot) {\n        return null;\n      }\n      const rect = {x: snapshot.rect[0], y: snapshot.rect[1], width: snapshot.rect[2], height: snapshot.rect[3]};\n      return {rect: rect, snapshot: snapshot.snapshot};\n    }));\n  }\n\n  pictureForRect(targetRect: number[]): Promise<SDK.PaintProfiler.SnapshotWithRect|null> {\n    return Promise.all(this.paints.map(paint => paint.picturePromise())).then(pictures => {\n      const filteredPictures = (pictures.filter(picture => picture && rectsOverlap(picture.rect, targetRect)) as {\n        rect: Array<number>,\n        serializedPicture: string,\n      }[]);\n\n      const fragments = filteredPictures.map(\n          picture => ({x: picture.rect[0], y: picture.rect[1], picture: picture.serializedPicture}));\n\n      if (!fragments.length || !this.paintProfilerModel) {\n        return null;\n      }\n      const x0 = fragments.reduce((min, item) => Math.min(min, item.x), Infinity);\n      const y0 = fragments.reduce((min, item) => Math.min(min, item.y), Infinity);\n      // Rect is in layer content coordinates, make it relative to picture by offsetting to the top left corner.\n      const rect = {x: targetRect[0] - x0, y: targetRect[1] - y0, width: targetRect[2], height: targetRect[3]};\n      return this.paintProfilerModel.loadSnapshotFromFragments(fragments).then(\n          snapshot => snapshot ? {rect: rect, snapshot: snapshot} : null);\n    });\n\n    function segmentsOverlap(a1: number, a2: number, b1: number, b2: number): boolean {\n      console.assert(a1 <= a2 && b1 <= b2, 'segments should be specified as ordered pairs');\n      return a2 > b1 && a1 < b2;\n    }\n\n    function rectsOverlap(a: number[], b: number[]): boolean {\n      return segmentsOverlap(a[0], a[0] + a[2], b[0], b[0] + b[2]) &&\n          segmentsOverlap(a[1], a[1] + a[3], b[1], b[1] + b[3]);\n    }\n  }\n\n  private scrollRectsFromParams(params: number[], type: Protocol.LayerTree.ScrollRectType):\n      Protocol.LayerTree.ScrollRect {\n    return {rect: {x: params[0], y: params[1], width: params[2], height: params[3]}, type: type};\n  }\n\n  private createScrollRects(payload: TracingLayerPayload): void {\n    const nonPayloadScrollRects: Protocol.LayerTree.ScrollRect[] = [];\n    if (payload.non_fast_scrollable_region) {\n      nonPayloadScrollRects.push(this.scrollRectsFromParams(\n          payload.non_fast_scrollable_region, 'NonFastScrollable' as Protocol.LayerTree.ScrollRectType));\n    }\n    if (payload.touch_event_handler_region) {\n      nonPayloadScrollRects.push(this.scrollRectsFromParams(\n          payload.touch_event_handler_region, Protocol.LayerTree.ScrollRectType.TouchEventHandler));\n    }\n    if (payload.wheel_event_handler_region) {\n      nonPayloadScrollRects.push(this.scrollRectsFromParams(\n          payload.wheel_event_handler_region, Protocol.LayerTree.ScrollRectType.WheelEventHandler));\n    }\n    if (payload.scroll_event_handler_region) {\n      nonPayloadScrollRects.push(this.scrollRectsFromParams(\n          payload.scroll_event_handler_region, Protocol.LayerTree.ScrollRectType.RepaintsOnScroll));\n    }\n\n    // SDK.LayerBaseTree.Layer.ScrollRectType and Protocol.LayerTree.ScrollRectType are the\n    // same type, but we need to use the indirection of the nonPayloadScrollRects since\n    // the ScrollRectType is defined as a string in SDK.LayerBaseTree.Layer.ScrollRectType.\n    this.scrollRectsInternal = nonPayloadScrollRects;\n  }\n\n  addPaintEvent(paint: LayerPaintEvent): void {\n    this.paints.push(paint);\n  }\n\n  requestCompositingReasonIds(): Promise<string[]> {\n    return Promise.resolve(this.compositingReasonIds);\n  }\n\n  drawsContent(): boolean {\n    return this.drawsContentInternal;\n  }\n}\n\nexport interface TracingLayerPayload {\n  bounds: {height: number, width: number};\n  children: TracingLayerPayload[];\n  layer_id: number;\n  position: number[];\n  scroll_offset: number[];\n  layer_quad: number[];\n  draws_content: number;\n  gpu_memory_usage: number;\n  transform: number[];\n  owner_node: Protocol.DOM.BackendNodeId;\n  reasons: string[];\n  compositing_reason: string[];\n  compositing_reason_ids: string[];\n  debug_info: {compositing_reason_ids: string[]};\n  non_fast_scrollable_region: number[];\n  touch_event_handler_region: number[];\n  wheel_event_handler_region: number[];\n  scroll_event_handler_region: number[];\n}\n\nexport interface TracingLayerTile {\n  id: string;\n  layer_id: string;\n  gpu_memory_usage: number;\n  content_rect: number[];\n}\n"],
  "mappings": "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",
  "names": []
}
