{
  "version": 3,
  "sources": ["../../../../../../front_end/models/timeline_model/TimelineIRModel.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\n\nconst UIStrings = {\n  /**\n  * @description Error text in Timeline IRModel of the Performance panel. Indicates that two fling\n  * gestures were detected at the same time, which should not be possible.\n  *@example {2s} PH1\n  *@example {3s} PH2\n  */\n  twoFlingsAtTheSameTimeSVsS: 'Two flings at the same time? {PH1} vs {PH2}',\n  /**\n  *@description Text in Timeline IRModel of the Performance panel\n  *@example {2s} PH1\n  *@example {3s} PH2\n  */\n  twoTouchesAtTheSameTimeSVsS: 'Two touches at the same time? {PH1} vs {PH2}',\n};\nconst str_ = i18n.i18n.registerUIStrings('models/timeline_model/TimelineIRModel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst eventToPhase = new WeakMap<SDK.TracingModel.Event, Phases>();\n\nexport class TimelineIRModel {\n  private segments!: Common.SegmentedRange.Segment<Phases>[];\n  private drags!: Common.SegmentedRange.SegmentedRange<Phases>;\n  private cssAnimations!: Common.SegmentedRange.SegmentedRange<Phases>;\n  private responses!: Common.SegmentedRange.SegmentedRange<Phases>;\n  private scrolls!: Common.SegmentedRange.SegmentedRange<Phases>;\n\n  constructor() {\n    this.reset();\n  }\n\n  static phaseForEvent(event: SDK.TracingModel.Event): Phases|undefined {\n    return eventToPhase.get(event);\n  }\n\n  populate(inputLatencies: SDK.TracingModel.AsyncEvent[]|null, animations: SDK.TracingModel.AsyncEvent[]|null): void {\n    this.reset();\n    if (!inputLatencies) {\n      return;\n    }\n    this.processInputLatencies(inputLatencies);\n    if (animations) {\n      this.processAnimations(animations);\n    }\n    const range = new Common.SegmentedRange.SegmentedRange<Phases>();\n    range.appendRange(this.drags);  // Drags take lower precedence than animation, as we can't detect them reliably.\n    range.appendRange(this.cssAnimations);\n    range.appendRange(this.scrolls);\n    range.appendRange(this.responses);\n    this.segments = range.segments();\n  }\n\n  private processInputLatencies(events: SDK.TracingModel.AsyncEvent[]): void {\n    const eventTypes = InputEvents;\n    const phases = Phases;\n    const thresholdsMs = TimelineIRModel._mergeThresholdsMs;\n\n    let scrollStart;\n    let flingStart;\n    let touchStart;\n    let firstTouchMove;\n    let mouseWheel;\n    let mouseDown;\n    let mouseMove;\n\n    for (let i = 0; i < events.length; ++i) {\n      const event = events[i];\n      if (i > 0 && events[i].startTime < events[i - 1].startTime) {\n        console.assert(false, 'Unordered input events');\n      }\n      const type = this.inputEventType(event.name);\n      switch (type) {\n        case eventTypes.ScrollBegin:\n          this.scrolls.append(this.segmentForEvent(event, phases.Scroll));\n          scrollStart = event;\n          break;\n\n        case eventTypes.ScrollEnd:\n          if (scrollStart) {\n            this.scrolls.append(this.segmentForEventRange(scrollStart, event, phases.Scroll));\n          } else {\n            this.scrolls.append(this.segmentForEvent(event, phases.Scroll));\n          }\n          scrollStart = null;\n          break;\n\n        case eventTypes.ScrollUpdate:\n          touchStart = null;  // Since we're scrolling now, disregard other touch gestures.\n          this.scrolls.append(this.segmentForEvent(event, phases.Scroll));\n          break;\n\n        case eventTypes.FlingStart:\n          if (flingStart) {\n            Common.Console.Console.instance().error(\n                i18nString(UIStrings.twoFlingsAtTheSameTimeSVsS, {PH1: flingStart.startTime, PH2: event.startTime}));\n            break;\n          }\n          flingStart = event;\n          break;\n\n        case eventTypes.FlingCancel:\n          // FIXME: also process renderer fling events.\n          if (!flingStart) {\n            break;\n          }\n          this.scrolls.append(this.segmentForEventRange(flingStart, event, phases.Fling));\n          flingStart = null;\n          break;\n\n        case eventTypes.ImplSideFling:\n          this.scrolls.append(this.segmentForEvent(event, phases.Fling));\n          break;\n\n        case eventTypes.ShowPress:\n        case eventTypes.Tap:\n        case eventTypes.KeyDown:\n        case eventTypes.KeyDownRaw:\n        case eventTypes.KeyUp:\n        case eventTypes.Char:\n        case eventTypes.Click:\n        case eventTypes.ContextMenu:\n          this.responses.append(this.segmentForEvent(event, phases.Response));\n          break;\n\n        case eventTypes.TouchStart:\n          // We do not produce any response segment for TouchStart -- there's either going to be one upon\n          // TouchMove for drag, or one for GestureTap.\n          if (touchStart) {\n            Common.Console.Console.instance().error(\n                i18nString(UIStrings.twoTouchesAtTheSameTimeSVsS, {PH1: touchStart.startTime, PH2: event.startTime}));\n            break;\n          }\n          touchStart = event;\n          this.setPhaseForEvent(event, phases.Response);\n          firstTouchMove = null;\n          break;\n\n        case eventTypes.TouchCancel:\n          touchStart = null;\n          break;\n\n        case eventTypes.TouchMove:\n          if (firstTouchMove) {\n            this.drags.append(this.segmentForEvent(event, phases.Drag));\n          } else if (touchStart) {\n            firstTouchMove = event;\n            this.responses.append(this.segmentForEventRange(touchStart, event, phases.Response));\n          }\n          break;\n\n        case eventTypes.TouchEnd:\n          touchStart = null;\n          break;\n\n        case eventTypes.MouseDown:\n          mouseDown = event;\n          mouseMove = null;\n          break;\n\n        case eventTypes.MouseMove:\n          if (mouseDown && !mouseMove && mouseDown.startTime + thresholdsMs.mouse > event.startTime) {\n            this.responses.append(this.segmentForEvent(mouseDown, phases.Response));\n            this.responses.append(this.segmentForEvent(event, phases.Response));\n          } else if (mouseDown) {\n            this.drags.append(this.segmentForEvent(event, phases.Drag));\n          }\n          mouseMove = event;\n          break;\n\n        case eventTypes.MouseUp:\n          this.responses.append(this.segmentForEvent(event, phases.Response));\n          mouseDown = null;\n          break;\n\n        case eventTypes.MouseWheel:\n          // Do not consider first MouseWheel as trace viewer's implementation does -- in case of MouseWheel it's not really special.\n          if (mouseWheel && canMerge(thresholdsMs.mouse, mouseWheel, event)) {\n            this.scrolls.append(this.segmentForEventRange(mouseWheel, event, phases.Scroll));\n          } else {\n            this.scrolls.append(this.segmentForEvent(event, phases.Scroll));\n          }\n          mouseWheel = event;\n          break;\n      }\n    }\n\n    function canMerge(\n        threshold: number, first: SDK.TracingModel.AsyncEvent, second: SDK.TracingModel.AsyncEvent): boolean {\n      if (first.endTime === undefined) {\n        return false;\n      }\n      return first.endTime < second.startTime && second.startTime < first.endTime + threshold;\n    }\n  }\n\n  private processAnimations(events: SDK.TracingModel.AsyncEvent[]): void {\n    for (let i = 0; i < events.length; ++i) {\n      this.cssAnimations.append(this.segmentForEvent(events[i], Phases.Animation));\n    }\n  }\n\n  private segmentForEvent(event: SDK.TracingModel.AsyncEvent, phase: Phases): Common.SegmentedRange.Segment<Phases> {\n    this.setPhaseForEvent(event, phase);\n    return new Common.SegmentedRange.Segment<Phases>(\n        event.startTime, event.endTime !== undefined ? event.endTime : Number.MAX_SAFE_INTEGER, phase);\n  }\n\n  private segmentForEventRange(\n      startEvent: SDK.TracingModel.AsyncEvent, endEvent: SDK.TracingModel.AsyncEvent,\n      phase: Phases): Common.SegmentedRange.Segment<Phases> {\n    this.setPhaseForEvent(startEvent, phase);\n    this.setPhaseForEvent(endEvent, phase);\n    return new Common.SegmentedRange.Segment(\n        startEvent.startTime, startEvent.endTime !== undefined ? startEvent.endTime : Number.MAX_SAFE_INTEGER, phase);\n  }\n\n  private setPhaseForEvent(asyncEvent: SDK.TracingModel.AsyncEvent, phase: Phases): void {\n    eventToPhase.set(asyncEvent.steps[0], phase);\n  }\n\n  interactionRecords(): Common.SegmentedRange.Segment<Phases>[] {\n    return this.segments;\n  }\n\n  reset(): void {\n    const thresholdsMs = TimelineIRModel._mergeThresholdsMs;\n\n    this.segments = [];\n    this.drags = new Common.SegmentedRange.SegmentedRange(merge.bind(null, thresholdsMs.mouse));\n    this.cssAnimations = new Common.SegmentedRange.SegmentedRange(merge.bind(null, thresholdsMs.animation));\n    this.responses = new Common.SegmentedRange.SegmentedRange(merge.bind(null, 0));\n    this.scrolls = new Common.SegmentedRange.SegmentedRange(merge.bind(null, thresholdsMs.animation));\n\n    function merge(\n        threshold: number, first: Common.SegmentedRange.Segment<Phases>,\n        second: Common.SegmentedRange.Segment<Phases>): Common.SegmentedRange.Segment<Phases>|null {\n      return first.end + threshold >= second.begin && first.data === second.data ? first : null;\n    }\n  }\n\n  private inputEventType(eventName: string): InputEvents|null {\n    const prefix = 'InputLatency::';\n    if (!eventName.startsWith(prefix)) {\n      const inputEventName = eventName as InputEvents;\n      if (inputEventName === InputEvents.ImplSideFling) {\n        return inputEventName;\n      }\n      console.error('Unrecognized input latency event: ' + eventName);\n      return null;\n    }\n    return eventName.substr(prefix.length) as InputEvents;\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Phases {\n  Idle = 'Idle',\n  Response = 'Response',\n  Scroll = 'Scroll',\n  Fling = 'Fling',\n  Drag = 'Drag',\n  Animation = 'Animation',\n  Uncategorized = 'Uncategorized',\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum InputEvents {\n  Char = 'Char',\n  Click = 'GestureClick',\n  ContextMenu = 'ContextMenu',\n  FlingCancel = 'GestureFlingCancel',\n  FlingStart = 'GestureFlingStart',\n  ImplSideFling = 'InputHandlerProxy::HandleGestureFling::started',\n  KeyDown = 'KeyDown',\n  KeyDownRaw = 'RawKeyDown',\n  KeyUp = 'KeyUp',\n  LatencyScrollUpdate = 'ScrollUpdate',\n  MouseDown = 'MouseDown',\n  MouseMove = 'MouseMove',\n  MouseUp = 'MouseUp',\n  MouseWheel = 'MouseWheel',\n  PinchBegin = 'GesturePinchBegin',\n  PinchEnd = 'GesturePinchEnd',\n  PinchUpdate = 'GesturePinchUpdate',\n  ScrollBegin = 'GestureScrollBegin',\n  ScrollEnd = 'GestureScrollEnd',\n  ScrollUpdate = 'GestureScrollUpdate',\n  ScrollUpdateRenderer = 'ScrollUpdate',\n  ShowPress = 'GestureShowPress',\n  Tap = 'GestureTap',\n  TapCancel = 'GestureTapCancel',\n  TapDown = 'GestureTapDown',\n  TouchCancel = 'TouchCancel',\n  TouchEnd = 'TouchEnd',\n  TouchMove = 'TouchMove',\n  TouchStart = 'TouchStart',\n}\n\nexport namespace TimelineIRModel {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  export const _mergeThresholdsMs = {\n    animation: 1,\n    mouse: 40,\n  };\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  export const _eventIRPhase = Symbol('eventIRPhase');\n}\n"],
  "mappings": "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",
  "names": []
}
