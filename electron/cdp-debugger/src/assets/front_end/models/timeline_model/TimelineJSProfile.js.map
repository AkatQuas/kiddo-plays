{
  "version": 3,
  "sources": ["../../../../../../front_end/models/timeline_model/TimelineJSProfile.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport {RecordType, TimelineModelImpl} from './TimelineModel.js';\n\nconst UIStrings = {\n  /**\n  *@description Text for the name of a thread of the page\n  *@example {1} PH1\n  */\n  threadS: 'Thread {PH1}',\n};\nconst str_ = i18n.i18n.registerUIStrings('models/timeline_model/TimelineJSProfile.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class TimelineJSProfileProcessor {\n  static generateTracingEventsFromCpuProfile(\n      jsProfileModel: SDK.CPUProfileDataModel.CPUProfileDataModel,\n      thread: SDK.TracingModel.Thread): SDK.TracingModel.Event[] {\n    const idleNode = jsProfileModel.idleNode;\n    const programNode = jsProfileModel.programNode || null;\n    const gcNode = jsProfileModel.gcNode;\n    const samples = jsProfileModel.samples || [];\n    const timestamps = jsProfileModel.timestamps;\n    const jsEvents = [];\n    const nodeToStackMap = new Map<SDK.ProfileTreeModel.ProfileNode|null, Protocol.Runtime.CallFrame[]>();\n    nodeToStackMap.set(programNode, []);\n    for (let i = 0; i < samples.length; ++i) {\n      let node: SDK.ProfileTreeModel.ProfileNode|null = jsProfileModel.nodeByIndex(i);\n      if (!node) {\n        console.error(`Node with unknown id ${samples[i]} at index ${i}`);\n        continue;\n      }\n      if (node === gcNode || node === idleNode) {\n        continue;\n      }\n      let callFrames = nodeToStackMap.get(node);\n      if (!callFrames) {\n        callFrames = (new Array(node.depth + 1) as Protocol.Runtime.CallFrame[]);\n        nodeToStackMap.set(node, callFrames);\n        for (let j = 0; node.parent; node = node.parent) {\n          callFrames[j++] = (node as Protocol.Runtime.CallFrame);\n        }\n      }\n      const jsSampleEvent = new SDK.TracingModel.Event(\n          SDK.TracingModel.DevToolsTimelineEventCategory, RecordType.JSSample, SDK.TracingModel.Phase.Instant,\n          timestamps[i], thread);\n      jsSampleEvent.args['data'] = {stackTrace: callFrames};\n      jsEvents.push(jsSampleEvent);\n    }\n    return jsEvents;\n  }\n\n  static generateJSFrameEvents(events: SDK.TracingModel.Event[], config: {\n    showAllEvents: boolean,\n    showRuntimeCallStats: boolean,\n    showNativeFunctions: boolean,\n  }): SDK.TracingModel.Event[] {\n    function equalFrames(frame1: Protocol.Runtime.CallFrame, frame2: Protocol.Runtime.CallFrame): boolean {\n      return frame1.scriptId === frame2.scriptId && frame1.functionName === frame2.functionName &&\n          frame1.lineNumber === frame2.lineNumber;\n    }\n\n    function isJSInvocationEvent(e: SDK.TracingModel.Event): boolean {\n      switch (e.name) {\n        case RecordType.RunMicrotasks:\n        case RecordType.FunctionCall:\n        case RecordType.EvaluateScript:\n        case RecordType.EvaluateModule:\n        case RecordType.EventDispatch:\n        case RecordType.V8Execute:\n          return true;\n      }\n      return false;\n    }\n\n    const jsFrameEvents: SDK.TracingModel.Event[] = [];\n    const jsFramesStack: SDK.TracingModel.Event[] = [];\n    const lockedJsStackDepth: number[] = [];\n    let ordinal = 0;\n    let fakeJSInvocation = false;\n    const {showAllEvents, showRuntimeCallStats, showNativeFunctions} = config;\n\n    function onStartEvent(e: SDK.TracingModel.Event): void {\n      if (fakeJSInvocation) {\n        truncateJSStack((lockedJsStackDepth.pop() as number), e.startTime);\n        fakeJSInvocation = false;\n      }\n      e.ordinal = ++ordinal;\n      extractStackTrace(e);\n      // For the duration of the event we cannot go beyond the stack associated with it.\n      lockedJsStackDepth.push(jsFramesStack.length);\n    }\n\n    function onInstantEvent(e: SDK.TracingModel.Event, parent: SDK.TracingModel.Event|null): void {\n      e.ordinal = ++ordinal;\n      if ((parent && isJSInvocationEvent(parent)) || fakeJSInvocation) {\n        extractStackTrace(e);\n      } else if (e.name === RecordType.JSSample && jsFramesStack.length === 0) {\n        // Force JS Samples to show up even if we are not inside a JS invocation event, because we\n        // can be missing the start of JS invocation events if we start tracing half-way through.\n        // Pretend we have a top-level JS invocation event.\n        fakeJSInvocation = true;\n        const stackDepthBefore = jsFramesStack.length;\n        extractStackTrace(e);\n        lockedJsStackDepth.push(stackDepthBefore);\n      }\n    }\n\n    function onEndEvent(e: SDK.TracingModel.Event): void {\n      truncateJSStack((lockedJsStackDepth.pop() as number), (e.endTime as number));\n    }\n\n    function truncateJSStack(depth: number, time: number): void {\n      if (lockedJsStackDepth.length) {\n        const lockedDepth = (lockedJsStackDepth[lockedJsStackDepth.length - 1] as number);\n        if (depth < lockedDepth) {\n          console.error(`Child stack is shallower (${depth}) than the parent stack (${lockedDepth}) at ${time}`);\n          depth = lockedDepth;\n        }\n      }\n      if (jsFramesStack.length < depth) {\n        console.error(`Trying to truncate higher than the current stack size at ${time}`);\n        depth = jsFramesStack.length;\n      }\n      for (let k = 0; k < jsFramesStack.length; ++k) {\n        jsFramesStack[k].setEndTime(time);\n      }\n      jsFramesStack.length = depth;\n    }\n\n    function showNativeName(name: string): boolean {\n      return showRuntimeCallStats && Boolean(TimelineJSProfileProcessor.nativeGroup(name));\n    }\n\n    function filterStackFrames(stack: Protocol.Runtime.CallFrame[]): void {\n      if (showAllEvents) {\n        return;\n      }\n      let previousNativeFrameName: (string|null)|null = null;\n      let j = 0;\n      for (let i = 0; i < stack.length; ++i) {\n        const frame = stack[i];\n        const url = frame.url;\n        const isNativeFrame = url && url.startsWith('native ');\n        if (!showNativeFunctions && isNativeFrame) {\n          continue;\n        }\n        const isNativeRuntimeFrame = TimelineJSProfileProcessor.isNativeRuntimeFrame(frame);\n        if (isNativeRuntimeFrame && !showNativeName(frame.functionName)) {\n          continue;\n        }\n        const nativeFrameName =\n            isNativeRuntimeFrame ? TimelineJSProfileProcessor.nativeGroup(frame.functionName) : null;\n        if (previousNativeFrameName && previousNativeFrameName === nativeFrameName) {\n          continue;\n        }\n        previousNativeFrameName = nativeFrameName;\n        stack[j++] = frame;\n      }\n      stack.length = j;\n    }\n\n    function extractStackTrace(e: SDK.TracingModel.Event): void {\n      const callFrames: Protocol.Runtime.CallFrame[] = e.name === RecordType.JSSample ?\n          e.args['data']['stackTrace'].slice().reverse() :\n          jsFramesStack.map(frameEvent => frameEvent.args['data']);\n      filterStackFrames(callFrames);\n      const endTime = e.endTime || e.startTime;\n      const minFrames = Math.min(callFrames.length, jsFramesStack.length);\n      let i;\n      for (i = lockedJsStackDepth[lockedJsStackDepth.length - 1] || 0; i < minFrames; ++i) {\n        const newFrame = callFrames[i];\n        const oldFrame = jsFramesStack[i].args['data'];\n        if (!equalFrames(newFrame, oldFrame)) {\n          break;\n        }\n        jsFramesStack[i].setEndTime(Math.max((jsFramesStack[i].endTime as number), endTime));\n      }\n      truncateJSStack(i, e.startTime);\n      for (; i < callFrames.length; ++i) {\n        const frame = callFrames[i];\n        const jsFrameEvent = new SDK.TracingModel.Event(\n            SDK.TracingModel.DevToolsTimelineEventCategory, RecordType.JSFrame, SDK.TracingModel.Phase.Complete,\n            e.startTime, e.thread);\n        jsFrameEvent.ordinal = e.ordinal;\n        jsFrameEvent.addArgs({data: frame});\n        jsFrameEvent.setEndTime(endTime);\n        jsFramesStack.push(jsFrameEvent);\n        jsFrameEvents.push(jsFrameEvent);\n      }\n    }\n\n    const firstTopLevelEvent = events.find(SDK.TracingModel.TracingModel.isTopLevelEvent);\n    const startTime = firstTopLevelEvent ? firstTopLevelEvent.startTime : 0;\n    TimelineModelImpl.forEachEvent(events, onStartEvent, onEndEvent, onInstantEvent, startTime);\n    return jsFrameEvents;\n  }\n\n  static isNativeRuntimeFrame(frame: Protocol.Runtime.CallFrame): boolean {\n    return frame.url === 'native V8Runtime';\n  }\n\n  static nativeGroup(nativeName: string): string|null {\n    if (nativeName.startsWith('Parse')) {\n      return TimelineJSProfileProcessor.NativeGroups.Parse;\n    }\n    if (nativeName.startsWith('Compile') || nativeName.startsWith('Recompile')) {\n      return TimelineJSProfileProcessor.NativeGroups.Compile;\n    }\n    return null;\n  }\n\n  static buildTraceProfileFromCpuProfile(profile: any, tid: number, injectPageEvent: boolean, name?: string|null):\n      SDK.TracingManager.EventPayload[] {\n    const events: SDK.TracingManager.EventPayload[] = [];\n    if (injectPageEvent) {\n      appendEvent('TracingStartedInPage', {data: {'sessionId': '1'}}, 0, 0, 'M');\n    }\n    if (!name) {\n      name = i18nString(UIStrings.threadS, {PH1: tid});\n    }\n    appendEvent(SDK.TracingModel.MetadataEvent.ThreadName, {name}, 0, 0, 'M', '__metadata');\n    if (!profile) {\n      return events;\n    }\n    const idToNode = new Map<any, any>();\n    const nodes = profile['nodes'];\n    for (let i = 0; i < nodes.length; ++i) {\n      idToNode.set(nodes[i].id, nodes[i]);\n    }\n    let programEvent: SDK.TracingManager.EventPayload|null = null;\n    let functionEvent: null|SDK.TracingManager.EventPayload = null;\n    let nextTime: number = profile.startTime;\n    let currentTime = 0;\n    const samples = profile['samples'];\n    const timeDeltas = profile['timeDeltas'];\n    for (let i = 0; i < samples.length; ++i) {\n      currentTime = nextTime;\n      nextTime += timeDeltas[i];\n      const node = idToNode.get(samples[i]);\n      const name = node.callFrame.functionName;\n      if (name === '(idle)') {\n        closeEvents();\n        continue;\n      }\n      if (!programEvent) {\n        programEvent = appendEvent('MessageLoop::RunTask', {}, currentTime, 0, 'X', 'toplevel');\n      }\n      if (name === '(program)') {\n        if (functionEvent) {\n          functionEvent.dur = currentTime - functionEvent.ts;\n          functionEvent = null;\n        }\n      } else {\n        // A JS function.\n        if (!functionEvent) {\n          functionEvent = appendEvent('FunctionCall', {data: {'sessionId': '1'}}, currentTime);\n        }\n      }\n    }\n    closeEvents();\n    appendEvent('CpuProfile', {data: {'cpuProfile': profile}}, profile.endTime, 0, 'I');\n    return events;\n\n    function closeEvents(): void {\n      if (programEvent) {\n        programEvent.dur = currentTime - programEvent.ts;\n      }\n      if (functionEvent) {\n        functionEvent.dur = currentTime - functionEvent.ts;\n      }\n      programEvent = null;\n      functionEvent = null;\n    }\n\n    function appendEvent(\n        name: string, args: any, ts: number, dur?: number, ph?: string, cat?: string): SDK.TracingManager.EventPayload {\n      const event =\n          ({cat: cat || 'disabled-by-default-devtools.timeline', name, ph: ph || 'X', pid: 1, tid, ts, args} as\n           SDK.TracingManager.EventPayload);\n      if (dur) {\n        event.dur = dur;\n      }\n      events.push(event);\n      return event;\n    }\n  }\n}\n\nexport namespace TimelineJSProfileProcessor {\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line rulesdir/const_enum\n  export enum NativeGroups {\n    Compile = 'Compile',\n    Parse = 'Parse',\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
