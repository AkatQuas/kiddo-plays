{
  "version": 3,
  "sources": ["../../../../../../front_end/models/bindings/NetworkProject.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport type * as Workspace from '../workspace/workspace.js';\n\nconst uiSourceCodeToAttributionMap = new WeakMap<Workspace.UISourceCode.UISourceCode, Map<Protocol.Page.FrameId, {\n                                                   frame: SDK.ResourceTreeModel.ResourceTreeFrame,\n                                                   count: number,\n                                                 }>>();\nconst projectToTargetMap = new WeakMap<Workspace.Workspace.Project, SDK.Target.Target>();\n\nlet networkProjectManagerInstance: NetworkProjectManager;\n\nexport class NetworkProjectManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  private constructor() {\n    super();\n  }\n\n  static instance({forceNew}: {\n    forceNew: boolean,\n  } = {forceNew: false}): NetworkProjectManager {\n    if (!networkProjectManagerInstance || forceNew) {\n      networkProjectManagerInstance = new NetworkProjectManager();\n    }\n\n    return networkProjectManagerInstance;\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  FrameAttributionAdded = 'FrameAttributionAdded',\n  FrameAttributionRemoved = 'FrameAttributionRemoved',\n}\n\nexport interface FrameAttributionEvent {\n  uiSourceCode: Workspace.UISourceCode.UISourceCode;\n  frame: SDK.ResourceTreeModel.ResourceTreeFrame;\n}\n\nexport type EventTypes = {\n  [Events.FrameAttributionAdded]: FrameAttributionEvent,\n  [Events.FrameAttributionRemoved]: FrameAttributionEvent,\n};\n\nexport class NetworkProject {\n  static resolveFrame(uiSourceCode: Workspace.UISourceCode.UISourceCode, frameId: Protocol.Page.FrameId):\n      SDK.ResourceTreeModel.ResourceTreeFrame|null {\n    const target = NetworkProject.targetForUISourceCode(uiSourceCode);\n    const resourceTreeModel = target && target.model(SDK.ResourceTreeModel.ResourceTreeModel);\n    return resourceTreeModel ? resourceTreeModel.frameForId(frameId) : null;\n  }\n\n  static setInitialFrameAttribution(uiSourceCode: Workspace.UISourceCode.UISourceCode, frameId: Protocol.Page.FrameId):\n      void {\n    if (!frameId) {\n      return;\n    }\n    const frame = NetworkProject.resolveFrame(uiSourceCode, frameId);\n    if (!frame) {\n      return;\n    }\n    const attribution = new Map<Protocol.Page.FrameId, {\n      frame: SDK.ResourceTreeModel.ResourceTreeFrame,\n      count: number,\n    }>();\n    attribution.set(frameId, {frame: frame, count: 1});\n    uiSourceCodeToAttributionMap.set(uiSourceCode, attribution);\n  }\n\n  static cloneInitialFrameAttribution(\n      fromUISourceCode: Workspace.UISourceCode.UISourceCode,\n      toUISourceCode: Workspace.UISourceCode.UISourceCode): void {\n    const fromAttribution = uiSourceCodeToAttributionMap.get(fromUISourceCode);\n    if (!fromAttribution) {\n      return;\n    }\n    const toAttribution = new Map<Protocol.Page.FrameId, {\n      frame: SDK.ResourceTreeModel.ResourceTreeFrame,\n      count: number,\n    }>();\n    for (const frameId of fromAttribution.keys()) {\n      const value = fromAttribution.get(frameId);\n      if (typeof value !== 'undefined') {\n        toAttribution.set(frameId, {frame: value.frame, count: value.count});\n      }\n    }\n    uiSourceCodeToAttributionMap.set(toUISourceCode, toAttribution);\n  }\n\n  static addFrameAttribution(uiSourceCode: Workspace.UISourceCode.UISourceCode, frameId: Protocol.Page.FrameId): void {\n    const frame = NetworkProject.resolveFrame(uiSourceCode, frameId);\n    if (!frame) {\n      return;\n    }\n    const frameAttribution = uiSourceCodeToAttributionMap.get(uiSourceCode);\n    if (!frameAttribution) {\n      return;\n    }\n    const attributionInfo = frameAttribution.get(frameId) || {frame: frame, count: 0};\n    attributionInfo.count += 1;\n    frameAttribution.set(frameId, attributionInfo);\n    if (attributionInfo.count !== 1) {\n      return;\n    }\n\n    const data = {uiSourceCode: uiSourceCode, frame: frame};\n    NetworkProjectManager.instance().dispatchEventToListeners(Events.FrameAttributionAdded, data);\n  }\n\n  static removeFrameAttribution(uiSourceCode: Workspace.UISourceCode.UISourceCode, frameId: Protocol.Page.FrameId):\n      void {\n    const frameAttribution = uiSourceCodeToAttributionMap.get(uiSourceCode);\n    if (!frameAttribution) {\n      return;\n    }\n    const attributionInfo = frameAttribution.get(frameId);\n    console.assert(Boolean(attributionInfo), 'Failed to remove frame attribution for url: ' + uiSourceCode.url());\n    if (!attributionInfo) {\n      return;\n    }\n    attributionInfo.count -= 1;\n    if (attributionInfo.count > 0) {\n      return;\n    }\n    frameAttribution.delete(frameId);\n    const data = {uiSourceCode: uiSourceCode, frame: attributionInfo.frame};\n    NetworkProjectManager.instance().dispatchEventToListeners(Events.FrameAttributionRemoved, data);\n  }\n\n  static targetForUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): SDK.Target.Target|null {\n    return projectToTargetMap.get(uiSourceCode.project()) || null;\n  }\n\n  static setTargetForProject(project: Workspace.Workspace.Project, target: SDK.Target.Target): void {\n    projectToTargetMap.set(project, target);\n  }\n\n  static getTargetForProject(project: Workspace.Workspace.Project): SDK.Target.Target|null {\n    return projectToTargetMap.get(project) || null;\n  }\n\n  static framesForUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode):\n      SDK.ResourceTreeModel.ResourceTreeFrame[] {\n    const target = NetworkProject.targetForUISourceCode(uiSourceCode);\n    const resourceTreeModel = target && target.model(SDK.ResourceTreeModel.ResourceTreeModel);\n    const attribution = uiSourceCodeToAttributionMap.get(uiSourceCode);\n    if (!resourceTreeModel || !attribution) {\n      return [];\n    }\n    const frames = Array.from(attribution.keys()).map(frameId => resourceTreeModel.frameForId(frameId));\n    return frames.filter(frame => Boolean(frame)) as SDK.ResourceTreeModel.ResourceTreeFrame[];\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
