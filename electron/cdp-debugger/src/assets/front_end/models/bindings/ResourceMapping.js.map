{
  "version": 3,
  "sources": ["../../../../../../front_end/models/bindings/ResourceMapping.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nimport {ContentProviderBasedProject} from './ContentProviderBasedProject.js';\nimport {CSSWorkspaceBinding} from './CSSWorkspaceBinding.js';\nimport {DebuggerWorkspaceBinding} from './DebuggerWorkspaceBinding.js';\nimport {NetworkProject} from './NetworkProject.js';\nimport {resourceMetadata} from './ResourceUtils.js';\n\nlet resourceMappingInstance: ResourceMapping|undefined;\n\nconst styleSheetOffsetMap = new WeakMap<SDK.CSSStyleSheetHeader.CSSStyleSheetHeader, TextUtils.TextRange.TextRange>();\nconst scriptOffsetMap = new WeakMap<SDK.Script.Script, TextUtils.TextRange.TextRange>();\nconst boundUISourceCodes = new WeakSet<Workspace.UISourceCode.UISourceCode>();\n\nexport class ResourceMapping implements SDK.TargetManager.SDKModelObserver<SDK.ResourceTreeModel.ResourceTreeModel> {\n  readonly #workspace: Workspace.Workspace.WorkspaceImpl;\n  readonly #modelToInfo: Map<SDK.ResourceTreeModel.ResourceTreeModel, ModelInfo>;\n  private constructor(targetManager: SDK.TargetManager.TargetManager, workspace: Workspace.Workspace.WorkspaceImpl) {\n    this.#workspace = workspace;\n    this.#modelToInfo = new Map();\n    targetManager.observeModels(SDK.ResourceTreeModel.ResourceTreeModel, this);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n    targetManager: SDK.TargetManager.TargetManager|null,\n    workspace: Workspace.Workspace.WorkspaceImpl|null,\n  } = {forceNew: null, targetManager: null, workspace: null}): ResourceMapping {\n    const {forceNew, targetManager, workspace} = opts;\n    if (!resourceMappingInstance || forceNew) {\n      if (!targetManager || !workspace) {\n        throw new Error(\n            `Unable to create ResourceMapping: targetManager and workspace must be provided: ${new Error().stack}`);\n      }\n\n      resourceMappingInstance = new ResourceMapping(targetManager, workspace);\n    }\n\n    return resourceMappingInstance;\n  }\n\n  static removeInstance(): void {\n    resourceMappingInstance = undefined;\n  }\n\n  modelAdded(resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel): void {\n    const info = new ModelInfo(this.#workspace, resourceTreeModel);\n    this.#modelToInfo.set(resourceTreeModel, info);\n  }\n\n  modelRemoved(resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel): void {\n    const info = this.#modelToInfo.get(resourceTreeModel);\n    if (info) {\n      info.dispose();\n      this.#modelToInfo.delete(resourceTreeModel);\n    }\n  }\n\n  private infoForTarget(target: SDK.Target.Target): ModelInfo|null {\n    const resourceTreeModel = target.model(SDK.ResourceTreeModel.ResourceTreeModel);\n    return resourceTreeModel ? this.#modelToInfo.get(resourceTreeModel) || null : null;\n  }\n\n  cssLocationToUILocation(cssLocation: SDK.CSSModel.CSSLocation): Workspace.UISourceCode.UILocation|null {\n    const header = cssLocation.header();\n    if (!header) {\n      return null;\n    }\n    const info = this.infoForTarget(cssLocation.cssModel().target());\n    if (!info) {\n      return null;\n    }\n    const uiSourceCode = info.getProject().uiSourceCodeForURL(cssLocation.url);\n    if (!uiSourceCode) {\n      return null;\n    }\n    const offset = styleSheetOffsetMap.get(header) ||\n        TextUtils.TextRange.TextRange.createFromLocation(header.startLine, header.startColumn);\n    const lineNumber = cssLocation.lineNumber + offset.startLine - header.startLine;\n    let columnNumber = cssLocation.columnNumber;\n    if (cssLocation.lineNumber === header.startLine) {\n      columnNumber += offset.startColumn - header.startColumn;\n    }\n    return uiSourceCode.uiLocation(lineNumber, columnNumber);\n  }\n\n  jsLocationToUILocation(jsLocation: SDK.DebuggerModel.Location): Workspace.UISourceCode.UILocation|null {\n    const script = jsLocation.script();\n    if (!script) {\n      return null;\n    }\n    const info = this.infoForTarget(jsLocation.debuggerModel.target());\n    if (!info) {\n      return null;\n    }\n    const embedderName = script.embedderName();\n    if (!embedderName) {\n      return null;\n    }\n    const uiSourceCode = info.getProject().uiSourceCodeForURL(embedderName);\n    if (!uiSourceCode) {\n      return null;\n    }\n    const offset = scriptOffsetMap.get(script) ||\n        TextUtils.TextRange.TextRange.createFromLocation(script.lineOffset, script.columnOffset);\n    let lineNumber = jsLocation.lineNumber + offset.startLine - script.lineOffset;\n    let columnNumber = jsLocation.columnNumber;\n    if (jsLocation.lineNumber === script.lineOffset) {\n      columnNumber += offset.startColumn - script.columnOffset;\n    }\n    if (script.hasSourceURL) {\n      if (lineNumber === 0) {\n        columnNumber += script.columnOffset;\n      }\n      lineNumber += script.lineOffset;\n    }\n    return uiSourceCode.uiLocation(lineNumber, columnNumber);\n  }\n\n  uiLocationToJSLocations(uiSourceCode: Workspace.UISourceCode.UISourceCode, lineNumber: number, columnNumber: number):\n      SDK.DebuggerModel.Location[] {\n    if (!boundUISourceCodes.has(uiSourceCode)) {\n      return [];\n    }\n    const target = NetworkProject.targetForUISourceCode(uiSourceCode);\n    if (!target) {\n      return [];\n    }\n    const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n    if (!debuggerModel) {\n      return [];\n    }\n    const locations = [];\n    for (const script of debuggerModel.scripts()) {\n      if (script.embedderName() !== uiSourceCode.url()) {\n        continue;\n      }\n      const {startLine, startColumn} = scriptOffsetMap.get(script) ||\n          TextUtils.TextRange.TextRange.createFromLocation(script.lineOffset, script.columnOffset);\n      if (lineNumber < startLine || (lineNumber === startLine && columnNumber < startColumn)) {\n        continue;\n      }\n      const endLine = startLine + (script.endLine - script.lineOffset);\n      const endColumn =\n          startLine === endLine ? startColumn + (script.endColumn - script.columnOffset) : script.endColumn;\n      if (lineNumber > endLine || (lineNumber === endLine && columnNumber > endColumn)) {\n        continue;\n      }\n      let scriptLineNumber = lineNumber;\n      let scriptColumnNumber = columnNumber;\n      if (script.hasSourceURL) {\n        scriptLineNumber -= startLine;\n        if (scriptLineNumber === 0) {\n          scriptColumnNumber -= startColumn;\n        }\n      }\n      locations.push(debuggerModel.createRawLocation(script, scriptLineNumber, scriptColumnNumber));\n    }\n    return locations;\n  }\n\n  uiLocationToCSSLocations(uiLocation: Workspace.UISourceCode.UILocation): SDK.CSSModel.CSSLocation[] {\n    if (!boundUISourceCodes.has(uiLocation.uiSourceCode)) {\n      return [];\n    }\n    const target = NetworkProject.targetForUISourceCode(uiLocation.uiSourceCode);\n    if (!target) {\n      return [];\n    }\n    const cssModel = target.model(SDK.CSSModel.CSSModel);\n    if (!cssModel) {\n      return [];\n    }\n    return cssModel.createRawLocationsByURL(\n        uiLocation.uiSourceCode.url(), uiLocation.lineNumber, uiLocation.columnNumber);\n  }\n\n  resetForTest(target: SDK.Target.Target): void {\n    const resourceTreeModel = target.model(SDK.ResourceTreeModel.ResourceTreeModel);\n    const info = resourceTreeModel ? this.#modelToInfo.get(resourceTreeModel) : null;\n    if (info) {\n      info.resetForTest();\n    }\n  }\n}\n\nclass ModelInfo {\n  project: ContentProviderBasedProject;\n  readonly #bindings: Map<string, Binding>;\n  readonly #cssModel: SDK.CSSModel.CSSModel;\n  readonly #eventListeners: Common.EventTarget.EventDescriptor[];\n  constructor(\n      workspace: Workspace.Workspace.WorkspaceImpl, resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel) {\n    const target = resourceTreeModel.target();\n    this.project = new ContentProviderBasedProject(\n        workspace, 'resources:' + target.id(), Workspace.Workspace.projectTypes.Network, '',\n        false /* isServiceProject */);\n    NetworkProject.setTargetForProject(this.project, target);\n\n    this.#bindings = new Map();\n\n    const cssModel = target.model(SDK.CSSModel.CSSModel);\n    console.assert(Boolean(cssModel));\n    this.#cssModel = (cssModel as SDK.CSSModel.CSSModel);\n    this.#eventListeners = [\n      resourceTreeModel.addEventListener(SDK.ResourceTreeModel.Events.ResourceAdded, this.resourceAdded, this),\n      resourceTreeModel.addEventListener(SDK.ResourceTreeModel.Events.FrameWillNavigate, this.frameWillNavigate, this),\n      resourceTreeModel.addEventListener(SDK.ResourceTreeModel.Events.FrameDetached, this.frameDetached, this),\n      this.#cssModel.addEventListener(\n          SDK.CSSModel.Events.StyleSheetChanged,\n          event => {\n            void this.styleSheetChanged(event);\n          },\n          this),\n    ];\n  }\n\n  private async styleSheetChanged(event: Common.EventTarget.EventTargetEvent<SDK.CSSModel.StyleSheetChangedEvent>):\n      Promise<void> {\n    const header = this.#cssModel.styleSheetHeaderForId(event.data.styleSheetId);\n    if (!header || !header.isInline || (header.isInline && header.isMutable)) {\n      return;\n    }\n    const binding = this.#bindings.get(header.resourceURL());\n    if (!binding) {\n      return;\n    }\n    await binding.styleSheetChanged(header, event.data.edit || null);\n  }\n\n  private acceptsResource(resource: SDK.Resource.Resource): boolean {\n    const resourceType = resource.resourceType();\n    // Only load selected resource types from resources.\n    if (resourceType !== Common.ResourceType.resourceTypes.Image &&\n        resourceType !== Common.ResourceType.resourceTypes.Font &&\n        resourceType !== Common.ResourceType.resourceTypes.Document &&\n        resourceType !== Common.ResourceType.resourceTypes.Manifest) {\n      return false;\n    }\n\n    // Ignore non-images and non-fonts.\n    if (resourceType === Common.ResourceType.resourceTypes.Image && resource.mimeType &&\n        !resource.mimeType.startsWith('image')) {\n      return false;\n    }\n    if (resourceType === Common.ResourceType.resourceTypes.Font && resource.mimeType &&\n        !resource.mimeType.includes('font')) {\n      return false;\n    }\n    if ((resourceType === Common.ResourceType.resourceTypes.Image ||\n         resourceType === Common.ResourceType.resourceTypes.Font) &&\n        resource.contentURL().startsWith('data:')) {\n      return false;\n    }\n    return true;\n  }\n\n  private resourceAdded(event: Common.EventTarget.EventTargetEvent<SDK.Resource.Resource>): void {\n    const resource = event.data;\n    if (!this.acceptsResource(resource)) {\n      return;\n    }\n\n    let binding = this.#bindings.get(resource.url);\n    if (!binding) {\n      binding = new Binding(this.project, resource);\n      this.#bindings.set(resource.url, binding);\n    } else {\n      binding.addResource(resource);\n    }\n  }\n\n  private removeFrameResources(frame: SDK.ResourceTreeModel.ResourceTreeFrame): void {\n    for (const resource of frame.resources()) {\n      if (!this.acceptsResource(resource)) {\n        continue;\n      }\n      const binding = this.#bindings.get(resource.url);\n      if (!binding) {\n        continue;\n      }\n      if (binding.resources.size === 1) {\n        binding.dispose();\n        this.#bindings.delete(resource.url);\n      } else {\n        binding.removeResource(resource);\n      }\n    }\n  }\n\n  private frameWillNavigate(event: Common.EventTarget.EventTargetEvent<SDK.ResourceTreeModel.ResourceTreeFrame>): void {\n    this.removeFrameResources(event.data);\n  }\n\n  private frameDetached(\n      event: Common.EventTarget.EventTargetEvent<{frame: SDK.ResourceTreeModel.ResourceTreeFrame, isSwap: boolean}>):\n      void {\n    this.removeFrameResources(event.data.frame);\n  }\n\n  resetForTest(): void {\n    for (const binding of this.#bindings.values()) {\n      binding.dispose();\n    }\n    this.#bindings.clear();\n  }\n\n  dispose(): void {\n    Common.EventTarget.removeEventListeners(this.#eventListeners);\n    for (const binding of this.#bindings.values()) {\n      binding.dispose();\n    }\n    this.#bindings.clear();\n    this.project.removeProject();\n  }\n\n  getProject(): ContentProviderBasedProject {\n    return this.project;\n  }\n}\n\nclass Binding implements TextUtils.ContentProvider.ContentProvider {\n  readonly resources: Set<SDK.Resource.Resource>;\n  readonly #project: ContentProviderBasedProject;\n  readonly #uiSourceCode: Workspace.UISourceCode.UISourceCode;\n  #edits: {\n    stylesheet: SDK.CSSStyleSheetHeader.CSSStyleSheetHeader,\n    edit: SDK.CSSModel.Edit|null,\n  }[];\n  constructor(project: ContentProviderBasedProject, resource: SDK.Resource.Resource) {\n    this.resources = new Set([resource]);\n    this.#project = project;\n    this.#uiSourceCode = this.#project.createUISourceCode(resource.url, resource.contentType());\n    boundUISourceCodes.add(this.#uiSourceCode);\n    if (resource.frameId) {\n      NetworkProject.setInitialFrameAttribution(this.#uiSourceCode, resource.frameId);\n    }\n    this.#project.addUISourceCodeWithProvider(this.#uiSourceCode, this, resourceMetadata(resource), resource.mimeType);\n    this.#edits = [];\n  }\n\n  private inlineStyles(): SDK.CSSStyleSheetHeader.CSSStyleSheetHeader[] {\n    const target = NetworkProject.targetForUISourceCode(this.#uiSourceCode);\n    const stylesheets: SDK.CSSStyleSheetHeader.CSSStyleSheetHeader[] = [];\n    if (!target) {\n      return stylesheets;\n    }\n    const cssModel = target.model(SDK.CSSModel.CSSModel);\n    if (cssModel) {\n      for (const headerId of cssModel.getStyleSheetIdsForURL(this.#uiSourceCode.url())) {\n        const header = cssModel.styleSheetHeaderForId(headerId);\n        if (header) {\n          stylesheets.push(header);\n        }\n      }\n    }\n    return stylesheets;\n  }\n\n  private inlineScripts(): SDK.Script.Script[] {\n    const target = NetworkProject.targetForUISourceCode(this.#uiSourceCode);\n    if (!target) {\n      return [];\n    }\n    const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n    if (!debuggerModel) {\n      return [];\n    }\n    return debuggerModel.scripts().filter(script => script.embedderName() === this.#uiSourceCode.url());\n  }\n\n  async styleSheetChanged(stylesheet: SDK.CSSStyleSheetHeader.CSSStyleSheetHeader, edit: SDK.CSSModel.Edit|null):\n      Promise<void> {\n    this.#edits.push({stylesheet, edit});\n    if (this.#edits.length > 1) {\n      return;\n    }  // There is already a styleSheetChanged loop running\n\n    const {content} = await this.#uiSourceCode.requestContent();\n    if (content !== null) {\n      await this.innerStyleSheetChanged(content);\n    }\n    this.#edits = [];\n  }\n\n  private async innerStyleSheetChanged(content: string): Promise<void> {\n    const scripts = this.inlineScripts();\n    const styles = this.inlineStyles();\n    let text: TextUtils.Text.Text = new TextUtils.Text.Text(content);\n    for (const data of this.#edits) {\n      const edit = data.edit;\n      if (!edit) {\n        continue;\n      }\n      const stylesheet = data.stylesheet;\n      const startLocation = styleSheetOffsetMap.get(stylesheet) ||\n          TextUtils.TextRange.TextRange.createFromLocation(stylesheet.startLine, stylesheet.startColumn);\n\n      const oldRange = edit.oldRange.relativeFrom(startLocation.startLine, startLocation.startColumn);\n      const newRange = edit.newRange.relativeFrom(startLocation.startLine, startLocation.startColumn);\n      text = new TextUtils.Text.Text(text.replaceRange(oldRange, edit.newText));\n      const updatePromises = [];\n      for (const script of scripts) {\n        const scriptOffset = scriptOffsetMap.get(script) ||\n            TextUtils.TextRange.TextRange.createFromLocation(script.lineOffset, script.columnOffset);\n        if (!scriptOffset.follows(oldRange)) {\n          continue;\n        }\n        scriptOffsetMap.set(script, scriptOffset.rebaseAfterTextEdit(oldRange, newRange));\n        updatePromises.push(DebuggerWorkspaceBinding.instance().updateLocations(script));\n      }\n      for (const style of styles) {\n        const styleOffset = styleSheetOffsetMap.get(style) ||\n            TextUtils.TextRange.TextRange.createFromLocation(style.startLine, style.startColumn);\n        if (!styleOffset.follows(oldRange)) {\n          continue;\n        }\n        styleSheetOffsetMap.set(style, styleOffset.rebaseAfterTextEdit(oldRange, newRange));\n        updatePromises.push(CSSWorkspaceBinding.instance().updateLocations(style));\n      }\n      await Promise.all(updatePromises);\n    }\n    this.#uiSourceCode.addRevision(text.value());\n  }\n\n  addResource(resource: SDK.Resource.Resource): void {\n    this.resources.add(resource);\n    if (resource.frameId) {\n      NetworkProject.addFrameAttribution(this.#uiSourceCode, resource.frameId);\n    }\n  }\n\n  removeResource(resource: SDK.Resource.Resource): void {\n    this.resources.delete(resource);\n    if (resource.frameId) {\n      NetworkProject.removeFrameAttribution(this.#uiSourceCode, resource.frameId);\n    }\n  }\n\n  dispose(): void {\n    this.#project.removeFile(this.#uiSourceCode.url());\n  }\n\n  private firstResource(): SDK.Resource.Resource {\n    console.assert(this.resources.size > 0);\n    return this.resources.values().next().value;\n  }\n\n  contentURL(): Platform.DevToolsPath.UrlString {\n    return this.firstResource().contentURL();\n  }\n\n  contentType(): Common.ResourceType.ResourceType {\n    return this.firstResource().contentType();\n  }\n\n  contentEncoded(): Promise<boolean> {\n    return this.firstResource().contentEncoded();\n  }\n\n  requestContent(): Promise<TextUtils.ContentProvider.DeferredContent> {\n    return this.firstResource().requestContent();\n  }\n\n  searchInContent(query: string, caseSensitive: boolean, isRegex: boolean):\n      Promise<TextUtils.ContentProvider.SearchMatch[]> {\n    return this.firstResource().searchInContent(query, caseSensitive, isRegex);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
