{
  "version": 3,
  "sources": ["../../../../../../front_end/models/bindings/TempFile.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\n\nimport type * as SDK from '../../core/sdk/sdk.js';\n\nimport type {ChunkedReader} from './FileUtils.js';\nimport {ChunkedFileReader} from './FileUtils.js';\n\nexport class TempFile {\n  #lastBlob: Blob|null;\n  constructor() {\n    this.#lastBlob = null;\n  }\n\n  write(pieces: (string|Blob)[]): void {\n    if (this.#lastBlob) {\n      pieces.unshift(this.#lastBlob);\n    }\n    this.#lastBlob = new Blob(pieces, {type: 'text/plain'});\n  }\n\n  read(): Promise<string|null> {\n    return this.readRange();\n  }\n\n  size(): number {\n    return this.#lastBlob ? this.#lastBlob.size : 0;\n  }\n\n  async readRange(startOffset?: number, endOffset?: number): Promise<string|null> {\n    if (!this.#lastBlob) {\n      Common.Console.Console.instance().error('Attempt to read a temp file that was never written');\n      return '';\n    }\n    const blob = typeof startOffset === 'number' || typeof endOffset === 'number' ?\n        this.#lastBlob.slice((startOffset as number), (endOffset as number)) :\n        this.#lastBlob;\n\n    const reader = new FileReader();\n    try {\n      await new Promise((resolve, reject) => {\n        reader.onloadend = resolve;\n        reader.onerror = reject;\n        reader.readAsText(blob);\n      });\n    } catch (error) {\n      Common.Console.Console.instance().error('Failed to read from temp file: ' + error.message);\n    }\n\n    return reader.result as string | null;\n  }\n\n  async copyToOutputStream(\n      outputStream: Common.StringOutputStream.OutputStream,\n      progress?: ((arg0: ChunkedReader) => void)): Promise<DOMError|null> {\n    if (!this.#lastBlob) {\n      void outputStream.close();\n      return null;\n    }\n    const reader = new ChunkedFileReader((this.#lastBlob as File), 10 * 1000 * 1000, progress);\n    return reader.read(outputStream).then(success => success ? null : reader.error());\n  }\n\n  remove(): void {\n    this.#lastBlob = null;\n  }\n}\n\nexport class TempFileBackingStorage implements SDK.TracingModel.BackingStorage {\n  #file: TempFile|null;\n  #strings!: string[];\n  #stringsLength!: number;\n\n  constructor() {\n    this.#file = null;\n    this.reset();\n  }\n\n  appendString(string: string): void {\n    this.#strings.push(string);\n    this.#stringsLength += string.length;\n    const flushStringLength = 10 * 1024 * 1024;\n    if (this.#stringsLength > flushStringLength) {\n      this.flush();\n    }\n  }\n\n  appendAccessibleString(string: string): () => Promise<string|null> {\n    this.flush();\n    if (!this.#file) {\n      return async(): Promise<null> => null;\n    }\n    const startOffset = this.#file.size();\n    this.#strings.push(string);\n    this.flush();\n    return this.#file.readRange.bind(this.#file, startOffset, this.#file.size());\n  }\n\n  private flush(): void {\n    if (!this.#strings.length) {\n      return;\n    }\n    if (!this.#file) {\n      this.#file = new TempFile();\n    }\n    this.#stringsLength = 0;\n    this.#file.write(this.#strings.splice(0));\n  }\n\n  finishWriting(): void {\n    this.flush();\n  }\n\n  reset(): void {\n    if (this.#file) {\n      this.#file.remove();\n    }\n    this.#file = null;\n    this.#strings = [];\n    this.#stringsLength = 0;\n  }\n\n  writeToStream(outputStream: Common.StringOutputStream.OutputStream): Promise<DOMError|null> {\n    return this.#file ? this.#file.copyToOutputStream(outputStream) : Promise.resolve(null);\n  }\n}\n"],
  "mappings": "AA8BA;AAKA;AAEO,sBAAe;AAAA;AAAA,EAEpB,cAAc;AACZ,qBAAiB;AAAA;AAAA,EAGnB,MAAM,QAA+B;AACnC,QAAI,gBAAgB;AAClB,aAAO,QAAQ;AAAA;AAEjB,qBAAiB,IAAI,KAAK,QAAQ,EAAC,MAAM;AAAA;AAAA,EAG3C,OAA6B;AAC3B,WAAO,KAAK;AAAA;AAAA,EAGd,OAAe;AACb,WAAO,iBAAiB,eAAe,OAAO;AAAA;AAAA,QAG1C,UAAU,aAAsB,WAA0C;AAC9E,QAAI,CAAC,gBAAgB;AACnB,aAAO,QAAQ,QAAQ,WAAW,MAAM;AACxC,aAAO;AAAA;AAET,UAAM,OAAO,OAAO,gBAAgB,YAAY,OAAO,cAAc,WACjE,eAAe,MAAO,aAAyB,aAC/C;AAEJ,UAAM,SAAS,IAAI;AACnB,QAAI;AACF,YAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AACrC,eAAO,YAAY;AACnB,eAAO,UAAU;AACjB,eAAO,WAAW;AAAA;AAAA,aAEb,OAAP;AACA,aAAO,QAAQ,QAAQ,WAAW,MAAM,oCAAoC,MAAM;AAAA;AAGpF,WAAO,OAAO;AAAA;AAAA,QAGV,mBACF,cACA,UAAoE;AACtE,QAAI,CAAC,gBAAgB;AACnB,WAAK,aAAa;AAClB,aAAO;AAAA;AAET,UAAM,SAAS,IAAI,kBAAmB,gBAAyB,KAAK,MAAO,KAAM;AACjF,WAAO,OAAO,KAAK,cAAc,KAAK,aAAW,UAAU,OAAO,OAAO;AAAA;AAAA,EAG3E,SAAe;AACb,qBAAiB;AAAA;AAAA;AAId,oCAAwE;AAAA;AAAA;AAAA;AAAA,EAK7E,cAAc;AACZ,iBAAa;AACb,SAAK;AAAA;AAAA,EAGP,aAAa,QAAsB;AACjC,kBAAc,KAAK;AACnB,2BAAuB,OAAO;AAC9B,UAAM,oBAAoB,KAAK,OAAO;AACtC,QAAI,sBAAsB,mBAAmB;AAC3C,WAAK;AAAA;AAAA;AAAA,EAIT,uBAAuB,QAA4C;AACjE,SAAK;AACL,QAAI,CAAC,YAAY;AACf,aAAO,YAA0B;AAAA;AAEnC,UAAM,cAAc,WAAW;AAC/B,kBAAc,KAAK;AACnB,SAAK;AACL,WAAO,WAAW,UAAU,KAAK,YAAY,aAAa,WAAW;AAAA;AAAA,EAG/D,QAAc;AACpB,QAAI,CAAC,cAAc,QAAQ;AACzB;AAAA;AAEF,QAAI,CAAC,YAAY;AACf,mBAAa,IAAI;AAAA;AAEnB,0BAAsB;AACtB,eAAW,MAAM,cAAc,OAAO;AAAA;AAAA,EAGxC,gBAAsB;AACpB,SAAK;AAAA;AAAA,EAGP,QAAc;AACZ,QAAI,YAAY;AACd,iBAAW;AAAA;AAEb,iBAAa;AACb,oBAAgB;AAChB,0BAAsB;AAAA;AAAA,EAGxB,cAAc,cAA8E;AAC1F,WAAO,aAAa,WAAW,mBAAmB,gBAAgB,QAAQ,QAAQ;AAAA;AAAA;",
  "names": []
}
