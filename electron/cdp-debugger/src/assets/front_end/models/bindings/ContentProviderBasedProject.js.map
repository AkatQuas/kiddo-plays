{
  "version": 3,
  "sources": ["../../../../../../front_end/models/bindings/ContentProviderBasedProject.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport type * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport type * as TextUtils from '../text_utils/text_utils.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nconst UIStrings = {\n  /**\n  * @description Error message that is displayed in the Sources panel when can't be loaded.\n  */\n  unknownErrorLoadingFile: 'Unknown error loading file',\n};\nconst str_ = i18n.i18n.registerUIStrings('models/bindings/ContentProviderBasedProject.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\ninterface UISourceCodeData {\n  mimeType: string;\n  metadata: Workspace.UISourceCode.UISourceCodeMetadata|null;\n}\n\nexport class ContentProviderBasedProject extends Workspace.Workspace.ProjectStore {\n  readonly #contentProviders: Map<string, TextUtils.ContentProvider.ContentProvider>;\n  readonly #isServiceProjectInternal: boolean;\n  readonly #uiSourceCodeToData: WeakMap<Workspace.UISourceCode.UISourceCode, UISourceCodeData>;\n  constructor(\n      workspace: Workspace.Workspace.WorkspaceImpl, id: string, type: Workspace.Workspace.projectTypes,\n      displayName: string, isServiceProject: boolean) {\n    super(workspace, id, type, displayName);\n    this.#contentProviders = new Map();\n    this.#isServiceProjectInternal = isServiceProject;\n    this.#uiSourceCodeToData = new WeakMap();\n    workspace.addProject(this);\n  }\n\n  async requestFileContent(uiSourceCode: Workspace.UISourceCode.UISourceCode):\n      Promise<TextUtils.ContentProvider.DeferredContent> {\n    const contentProvider =\n        (this.#contentProviders.get(uiSourceCode.url()) as TextUtils.ContentProvider.ContentProvider);\n    try {\n      const [content, isEncoded] =\n          await Promise.all([contentProvider.requestContent(), contentProvider.contentEncoded()]);\n      return {content: content.content, isEncoded, error: 'error' in content && content.error || ''};\n    } catch (err) {\n      // TODO(rob.paveza): CRBug 1013683 - Consider propagating exceptions full-stack\n      return {\n        content: null,\n        isEncoded: false,\n        error: err ? String(err) : i18nString(UIStrings.unknownErrorLoadingFile),\n      };\n    }\n  }\n\n  isServiceProject(): boolean {\n    return this.#isServiceProjectInternal;\n  }\n\n  async requestMetadata(uiSourceCode: Workspace.UISourceCode.UISourceCode):\n      Promise<Workspace.UISourceCode.UISourceCodeMetadata|null> {\n    const {metadata} = (this.#uiSourceCodeToData.get(uiSourceCode) as UISourceCodeData);\n    return metadata;\n  }\n\n  canSetFileContent(): boolean {\n    return false;\n  }\n\n  async setFileContent(_uiSourceCode: Workspace.UISourceCode.UISourceCode, _newContent: string, _isBase64: boolean):\n      Promise<void> {\n  }\n\n  fullDisplayName(uiSourceCode: Workspace.UISourceCode.UISourceCode): string {\n    let parentPath = uiSourceCode.parentURL().replace(/^(?:https?|file)\\:\\/\\//, '');\n    try {\n      parentPath = decodeURI(parentPath);\n    } catch (e) {\n    }\n    return parentPath + '/' + uiSourceCode.displayName(true);\n  }\n\n  mimeType(uiSourceCode: Workspace.UISourceCode.UISourceCode): string {\n    const {mimeType} = (this.#uiSourceCodeToData.get(uiSourceCode) as UISourceCodeData);\n    return mimeType;\n  }\n\n  canRename(): boolean {\n    return false;\n  }\n\n  rename(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, newName: Platform.DevToolsPath.RawPathString,\n      callback:\n          (arg0: boolean, arg1?: string|undefined, arg2?: Platform.DevToolsPath.UrlString|undefined,\n           arg3?: Common.ResourceType.ResourceType|undefined) => void): void {\n    const path = uiSourceCode.url();\n    this.performRename(path, newName, innerCallback.bind(this));\n\n    function innerCallback(this: ContentProviderBasedProject, success: boolean, newName?: string): void {\n      if (success && newName) {\n        const copyOfPath = path.split('/');\n        copyOfPath[copyOfPath.length - 1] = newName;\n        const newPath = copyOfPath.join('/');\n        const contentProvider = (this.#contentProviders.get(path) as TextUtils.ContentProvider.ContentProvider);\n        this.#contentProviders.set(newPath, contentProvider);\n        this.#contentProviders.delete(path);\n        this.renameUISourceCode(uiSourceCode, newName);\n      }\n      callback(success, newName);\n    }\n  }\n\n  excludeFolder(_path: Platform.DevToolsPath.UrlString): void {\n  }\n\n  canExcludeFolder(_path: Platform.DevToolsPath.EncodedPathString): boolean {\n    return false;\n  }\n\n  async createFile(\n      _path: Platform.DevToolsPath.EncodedPathString, _name: string|null, _content: string,\n      _isBase64?: boolean): Promise<Workspace.UISourceCode.UISourceCode|null> {\n    return null;\n  }\n\n  canCreateFile(): boolean {\n    return false;\n  }\n\n  deleteFile(_uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n  }\n\n  remove(): void {\n  }\n\n  performRename(\n      path: Platform.DevToolsPath.UrlString, newName: string,\n      callback: (arg0: boolean, arg1?: string|undefined) => void): void {\n    callback(false);\n  }\n\n  searchInFileContent(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, query: string, caseSensitive: boolean,\n      isRegex: boolean): Promise<TextUtils.ContentProvider.SearchMatch[]> {\n    const contentProvider =\n        (this.#contentProviders.get(uiSourceCode.url()) as TextUtils.ContentProvider.ContentProvider);\n    return contentProvider.searchInContent(query, caseSensitive, isRegex);\n  }\n\n  async findFilesMatchingSearchRequest(\n      searchConfig: Workspace.Workspace.ProjectSearchConfig, filesMatchingFileQuery: Platform.DevToolsPath.UrlString[],\n      progress: Common.Progress.Progress): Promise<string[]> {\n    const result: string[] = [];\n    progress.setTotalWork(filesMatchingFileQuery.length);\n    await Promise.all(filesMatchingFileQuery.map(searchInContent.bind(this)));\n    progress.done();\n    return result;\n\n    async function searchInContent(this: ContentProviderBasedProject, path: string): Promise<void> {\n      const contentProvider = (this.#contentProviders.get(path) as TextUtils.ContentProvider.ContentProvider);\n      let allMatchesFound = true;\n      for (const query of searchConfig.queries().slice()) {\n        const searchMatches =\n            await contentProvider.searchInContent(query, !searchConfig.ignoreCase(), searchConfig.isRegex());\n        if (!searchMatches.length) {\n          allMatchesFound = false;\n          break;\n        }\n      }\n      if (allMatchesFound) {\n        result.push(path);\n      }\n      progress.incrementWorked(1);\n    }\n  }\n\n  indexContent(progress: Common.Progress.Progress): void {\n    queueMicrotask(progress.done.bind(progress));\n  }\n\n  addUISourceCodeWithProvider(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, contentProvider: TextUtils.ContentProvider.ContentProvider,\n      metadata: Workspace.UISourceCode.UISourceCodeMetadata|null, mimeType: string): void {\n    this.#contentProviders.set(uiSourceCode.url(), contentProvider);\n    this.#uiSourceCodeToData.set(uiSourceCode, {mimeType, metadata});\n    this.addUISourceCode(uiSourceCode);\n  }\n\n  addContentProvider(\n      url: Platform.DevToolsPath.UrlString, contentProvider: TextUtils.ContentProvider.ContentProvider,\n      mimeType: string): Workspace.UISourceCode.UISourceCode {\n    const uiSourceCode = this.createUISourceCode(url, contentProvider.contentType());\n    this.addUISourceCodeWithProvider(uiSourceCode, contentProvider, null, mimeType);\n    return uiSourceCode;\n  }\n\n  removeFile(path: Platform.DevToolsPath.UrlString): void {\n    this.#contentProviders.delete(path);\n    this.removeUISourceCode(path);\n  }\n\n  reset(): void {\n    this.#contentProviders.clear();\n    this.removeProject();\n    this.workspace().addProject(this);\n  }\n\n  dispose(): void {\n    this.#contentProviders.clear();\n    this.removeProject();\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
