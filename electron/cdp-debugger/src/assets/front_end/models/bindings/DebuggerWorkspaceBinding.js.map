{
  "version": 3,
  "sources": ["../../../../../../front_end/models/bindings/DebuggerWorkspaceBinding.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Workspace from '../workspace/workspace.js';\n\nimport {CompilerScriptMapping} from './CompilerScriptMapping.js';\nimport {DebuggerLanguagePluginManager} from './DebuggerLanguagePlugins.js';\nimport {DefaultScriptMapping} from './DefaultScriptMapping.js';\nimport {IgnoreListManager} from './IgnoreListManager.js';\nimport type {LiveLocation, LiveLocationPool} from './LiveLocation.js';\nimport {LiveLocationWithPool} from './LiveLocation.js';\nimport {ResourceMapping} from './ResourceMapping.js';\nimport type {ResourceScriptFile} from './ResourceScriptMapping.js';\nimport {ResourceScriptMapping} from './ResourceScriptMapping.js';\n\nlet debuggerWorkspaceBindingInstance: DebuggerWorkspaceBinding|undefined;\n\nexport class DebuggerWorkspaceBinding implements SDK.TargetManager.SDKModelObserver<SDK.DebuggerModel.DebuggerModel> {\n  readonly workspace: Workspace.Workspace.WorkspaceImpl;\n  readonly #sourceMappings: DebuggerSourceMapping[];\n  readonly #debuggerModelToData: Map<SDK.DebuggerModel.DebuggerModel, ModelData>;\n  readonly #liveLocationPromises: Set<Promise<void|Location|StackTraceTopFrameLocation|null>>;\n  pluginManager: DebuggerLanguagePluginManager|null;\n  #targetManager: SDK.TargetManager.TargetManager;\n  private constructor(targetManager: SDK.TargetManager.TargetManager, workspace: Workspace.Workspace.WorkspaceImpl) {\n    this.workspace = workspace;\n\n    this.#sourceMappings = [];\n\n    this.#debuggerModelToData = new Map();\n    targetManager.addModelListener(\n        SDK.DebuggerModel.DebuggerModel, SDK.DebuggerModel.Events.GlobalObjectCleared, this.globalObjectCleared, this);\n    targetManager.addModelListener(\n        SDK.DebuggerModel.DebuggerModel, SDK.DebuggerModel.Events.DebuggerResumed, this.debuggerResumed, this);\n    targetManager.observeModels(SDK.DebuggerModel.DebuggerModel, this);\n    this.#targetManager = targetManager;\n\n    this.#liveLocationPromises = new Set();\n\n    this.pluginManager = Root.Runtime.experiments.isEnabled('wasmDWARFDebugging') ?\n        new DebuggerLanguagePluginManager(targetManager, workspace, this) :\n        null;\n  }\n\n  initPluginManagerForTest(): DebuggerLanguagePluginManager|null {\n    if (Root.Runtime.experiments.isEnabled('wasmDWARFDebugging')) {\n      if (!this.pluginManager) {\n        this.pluginManager = new DebuggerLanguagePluginManager(this.#targetManager, this.workspace, this);\n      }\n    } else {\n      this.pluginManager = null;\n    }\n    return this.pluginManager;\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n    targetManager: SDK.TargetManager.TargetManager|null,\n    workspace: Workspace.Workspace.WorkspaceImpl|null,\n  } = {forceNew: null, targetManager: null, workspace: null}): DebuggerWorkspaceBinding {\n    const {forceNew, targetManager, workspace} = opts;\n    if (!debuggerWorkspaceBindingInstance || forceNew) {\n      if (!targetManager || !workspace) {\n        throw new Error(`Unable to create DebuggerWorkspaceBinding: targetManager and workspace must be provided: ${\n            new Error().stack}`);\n      }\n\n      debuggerWorkspaceBindingInstance = new DebuggerWorkspaceBinding(targetManager, workspace);\n    }\n\n    return debuggerWorkspaceBindingInstance;\n  }\n\n  static removeInstance(): void {\n    debuggerWorkspaceBindingInstance = undefined;\n  }\n\n  addSourceMapping(sourceMapping: DebuggerSourceMapping): void {\n    this.#sourceMappings.push(sourceMapping);\n  }\n\n  removeSourceMapping(sourceMapping: DebuggerSourceMapping): void {\n    const index = this.#sourceMappings.indexOf(sourceMapping);\n    if (index !== -1) {\n      this.#sourceMappings.splice(index, 1);\n    }\n  }\n\n  private async computeAutoStepRanges(mode: SDK.DebuggerModel.StepMode, callFrame: SDK.DebuggerModel.CallFrame):\n      Promise<RawLocationRange[]> {\n    function contained(location: SDK.DebuggerModel.Location, range: RawLocationRange): boolean {\n      const {start, end} = range;\n      if (start.scriptId !== location.scriptId) {\n        return false;\n      }\n      if (location.lineNumber < start.lineNumber || location.lineNumber > end.lineNumber) {\n        return false;\n      }\n      if (location.lineNumber === start.lineNumber && location.columnNumber < start.columnNumber) {\n        return false;\n      }\n      if (location.lineNumber === end.lineNumber && location.columnNumber >= end.columnNumber) {\n        return false;\n      }\n      return true;\n    }\n\n    const rawLocation = callFrame.location();\n    if (!rawLocation) {\n      return [];\n    }\n    const pluginManager = this.pluginManager;\n    let ranges: RawLocationRange[] = [];\n    if (pluginManager) {\n      if (mode === SDK.DebuggerModel.StepMode.StepOut) {\n        // Step out of inline function.\n        return await pluginManager.getInlinedFunctionRanges(rawLocation);\n      }\n      const uiLocation = await pluginManager.rawLocationToUILocation(rawLocation);\n      if (uiLocation) {\n        ranges = await pluginManager.uiLocationToRawLocationRanges(\n                     uiLocation.uiSourceCode, uiLocation.lineNumber, uiLocation.columnNumber) ||\n            [];\n        // TODO(bmeurer): Remove the {rawLocation} from the {ranges}?\n        ranges = ranges.filter(range => contained(rawLocation, range));\n        if (mode === SDK.DebuggerModel.StepMode.StepOver) {\n          // Step over an inlined function.\n          ranges = ranges.concat(await pluginManager.getInlinedCalleesRanges(rawLocation));\n        }\n        return ranges;\n      }\n    }\n\n    const compilerMapping = this.#debuggerModelToData.get(rawLocation.debuggerModel)?.compilerMapping;\n    if (!compilerMapping) {\n      return [];\n    }\n    if (mode === SDK.DebuggerModel.StepMode.StepOut) {\n      // We should actually return the source range for the entire function\n      // to skip over. Since we don't have that, we return an empty range\n      // instead, to signal that we should perform a regular step-out.\n      return [];\n    }\n    ranges = compilerMapping.getLocationRangesForSameSourceLocation(rawLocation);\n    ranges = ranges.filter(range => contained(rawLocation, range));\n    return ranges;\n  }\n\n  modelAdded(debuggerModel: SDK.DebuggerModel.DebuggerModel): void {\n    this.#debuggerModelToData.set(debuggerModel, new ModelData(debuggerModel, this));\n    debuggerModel.setComputeAutoStepRangesCallback(this.computeAutoStepRanges.bind(this));\n  }\n\n  modelRemoved(debuggerModel: SDK.DebuggerModel.DebuggerModel): void {\n    debuggerModel.setComputeAutoStepRangesCallback(null);\n    const modelData = this.#debuggerModelToData.get(debuggerModel);\n    if (modelData) {\n      modelData.dispose();\n      this.#debuggerModelToData.delete(debuggerModel);\n    }\n  }\n\n  /**\n   * The promise returned by this function is resolved once all *currently*\n   * pending LiveLocations are processed.\n   */\n  async pendingLiveLocationChangesPromise(): Promise<void|Location|StackTraceTopFrameLocation|null> {\n    await Promise.all(this.#liveLocationPromises);\n  }\n\n  private recordLiveLocationChange(promise: Promise<void|Location|StackTraceTopFrameLocation|null>): void {\n    void promise.then(() => {\n      this.#liveLocationPromises.delete(promise);\n    });\n    this.#liveLocationPromises.add(promise);\n  }\n\n  async updateLocations(script: SDK.Script.Script): Promise<void> {\n    const modelData = this.#debuggerModelToData.get(script.debuggerModel);\n    if (modelData) {\n      const updatePromise = modelData.updateLocations(script);\n      this.recordLiveLocationChange(updatePromise);\n      await updatePromise;\n    }\n  }\n\n  async createLiveLocation(\n      rawLocation: SDK.DebuggerModel.Location, updateDelegate: (arg0: LiveLocation) => Promise<void>,\n      locationPool: LiveLocationPool): Promise<Location|null> {\n    const modelData = this.#debuggerModelToData.get(rawLocation.debuggerModel);\n    if (!modelData) {\n      return null;\n    }\n    const liveLocationPromise = modelData.createLiveLocation(rawLocation, updateDelegate, locationPool);\n    this.recordLiveLocationChange(liveLocationPromise);\n    return liveLocationPromise;\n  }\n\n  async createStackTraceTopFrameLiveLocation(\n      rawLocations: SDK.DebuggerModel.Location[], updateDelegate: (arg0: LiveLocation) => Promise<void>,\n      locationPool: LiveLocationPool): Promise<LiveLocation> {\n    console.assert(rawLocations.length > 0);\n    const locationPromise =\n        StackTraceTopFrameLocation.createStackTraceTopFrameLocation(rawLocations, this, updateDelegate, locationPool);\n    this.recordLiveLocationChange(locationPromise);\n    return locationPromise;\n  }\n\n  async createCallFrameLiveLocation(\n      location: SDK.DebuggerModel.Location, updateDelegate: (arg0: LiveLocation) => Promise<void>,\n      locationPool: LiveLocationPool): Promise<Location|null> {\n    const script = location.script();\n    if (!script) {\n      return null;\n    }\n    const debuggerModel = location.debuggerModel;\n    const liveLocationPromise = this.createLiveLocation(location, updateDelegate, locationPool);\n    this.recordLiveLocationChange(liveLocationPromise);\n    const liveLocation = await liveLocationPromise;\n    if (!liveLocation) {\n      return null;\n    }\n    this.registerCallFrameLiveLocation(debuggerModel, liveLocation);\n    return liveLocation;\n  }\n\n  async rawLocationToUILocation(rawLocation: SDK.DebuggerModel.Location):\n      Promise<Workspace.UISourceCode.UILocation|null> {\n    for (const sourceMapping of this.#sourceMappings) {\n      const uiLocation = sourceMapping.rawLocationToUILocation(rawLocation);\n      if (uiLocation) {\n        return uiLocation;\n      }\n    }\n    if (this.pluginManager) {\n      const uiLocation = await this.pluginManager.rawLocationToUILocation(rawLocation);\n      if (uiLocation) {\n        return uiLocation;\n      }\n    }\n    const modelData = this.#debuggerModelToData.get(rawLocation.debuggerModel);\n    return modelData ? modelData.rawLocationToUILocation(rawLocation) : null;\n  }\n\n  uiSourceCodeForSourceMapSourceURL(\n      debuggerModel: SDK.DebuggerModel.DebuggerModel, url: Platform.DevToolsPath.UrlString,\n      isContentScript: boolean): Workspace.UISourceCode.UISourceCode|null {\n    const modelData = this.#debuggerModelToData.get(debuggerModel);\n    if (!modelData) {\n      return null;\n    }\n    return modelData.compilerMapping.uiSourceCodeForURL(url, isContentScript);\n  }\n\n  async uiLocationToRawLocations(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, lineNumber: number,\n      columnNumber?: number): Promise<SDK.DebuggerModel.Location[]> {\n    for (const sourceMapping of this.#sourceMappings) {\n      const locations = sourceMapping.uiLocationToRawLocations(uiSourceCode, lineNumber, columnNumber);\n      if (locations.length) {\n        return locations;\n      }\n    }\n    const locations = await this.pluginManager?.uiLocationToRawLocations(uiSourceCode, lineNumber, columnNumber);\n    if (locations) {\n      return locations;\n    }\n    for (const modelData of this.#debuggerModelToData.values()) {\n      const locations = modelData.uiLocationToRawLocations(uiSourceCode, lineNumber, columnNumber);\n      if (locations.length) {\n        return locations;\n      }\n    }\n    return [];\n  }\n\n  uiLocationToRawLocationsForUnformattedJavaScript(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, lineNumber: number,\n      columnNumber: number): SDK.DebuggerModel.Location[] {\n    console.assert(uiSourceCode.contentType().isScript());\n    const locations = [];\n    for (const modelData of this.#debuggerModelToData.values()) {\n      locations.push(...modelData.uiLocationToRawLocations(uiSourceCode, lineNumber, columnNumber));\n    }\n    return locations;\n  }\n\n  async normalizeUILocation(uiLocation: Workspace.UISourceCode.UILocation): Promise<Workspace.UISourceCode.UILocation> {\n    const rawLocations =\n        await this.uiLocationToRawLocations(uiLocation.uiSourceCode, uiLocation.lineNumber, uiLocation.columnNumber);\n    for (const location of rawLocations) {\n      const uiLocationCandidate = await this.rawLocationToUILocation(location);\n      if (uiLocationCandidate) {\n        return uiLocationCandidate;\n      }\n    }\n    return uiLocation;\n  }\n\n  scriptFile(uiSourceCode: Workspace.UISourceCode.UISourceCode, debuggerModel: SDK.DebuggerModel.DebuggerModel):\n      ResourceScriptFile|null {\n    const modelData = this.#debuggerModelToData.get(debuggerModel);\n    return modelData ? modelData.getResourceMapping().scriptFile(uiSourceCode) : null;\n  }\n\n  scriptsForUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): SDK.Script.Script[] {\n    const scripts = new Set<SDK.Script.Script>();\n    if (this.pluginManager) {\n      this.pluginManager.scriptsForUISourceCode(uiSourceCode).forEach(script => scripts.add(script));\n    }\n    for (const modelData of this.#debuggerModelToData.values()) {\n      const resourceScriptFile = modelData.getResourceMapping().scriptFile(uiSourceCode);\n      if (resourceScriptFile && resourceScriptFile.script) {\n        scripts.add(resourceScriptFile.script);\n      }\n      modelData.compilerMapping.scriptsForUISourceCode(uiSourceCode).forEach(script => scripts.add(script));\n    }\n    return [...scripts];\n  }\n\n  scriptsForResource(uiSourceCode: Workspace.UISourceCode.UISourceCode): SDK.Script.Script[] {\n    const scripts = new Set<SDK.Script.Script>();\n    for (const modelData of this.#debuggerModelToData.values()) {\n      const resourceScriptFile = modelData.getResourceMapping().scriptFile(uiSourceCode);\n      if (resourceScriptFile && resourceScriptFile.script) {\n        scripts.add(resourceScriptFile.script);\n      }\n    }\n    return [...scripts];\n  }\n\n  supportsConditionalBreakpoints(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n    // DevTools traditionally supported (JavaScript) conditions\n    // for breakpoints everywhere, so we keep that behavior...\n    if (!this.pluginManager) {\n      return true;\n    }\n    const scripts = this.pluginManager.scriptsForUISourceCode(uiSourceCode);\n    return scripts.every(script => script.isJavaScript());\n  }\n\n  sourceMapForScript(script: SDK.Script.Script): SDK.SourceMap.SourceMap|null {\n    const modelData = this.#debuggerModelToData.get(script.debuggerModel);\n    if (!modelData) {\n      return null;\n    }\n    return modelData.compilerMapping.sourceMapForScript(script);\n  }\n\n  private globalObjectCleared(event: Common.EventTarget.EventTargetEvent<SDK.DebuggerModel.DebuggerModel>): void {\n    this.reset(event.data);\n  }\n\n  private reset(debuggerModel: SDK.DebuggerModel.DebuggerModel): void {\n    const modelData = this.#debuggerModelToData.get(debuggerModel);\n    if (!modelData) {\n      return;\n    }\n    for (const location of modelData.callFrameLocations.values()) {\n      this.removeLiveLocation(location);\n    }\n    modelData.callFrameLocations.clear();\n  }\n\n  resetForTest(target: SDK.Target.Target): void {\n    const debuggerModel = (target.model(SDK.DebuggerModel.DebuggerModel) as SDK.DebuggerModel.DebuggerModel);\n    const modelData = this.#debuggerModelToData.get(debuggerModel);\n    if (modelData) {\n      modelData.getResourceMapping().resetForTest();\n    }\n  }\n\n  private registerCallFrameLiveLocation(debuggerModel: SDK.DebuggerModel.DebuggerModel, location: Location): void {\n    const modelData = this.#debuggerModelToData.get(debuggerModel);\n    if (modelData) {\n      const locations = modelData.callFrameLocations;\n      locations.add(location);\n    }\n  }\n\n  removeLiveLocation(location: Location): void {\n    const modelData = this.#debuggerModelToData.get(location.rawLocation.debuggerModel);\n    if (modelData) {\n      modelData.disposeLocation(location);\n    }\n  }\n\n  private debuggerResumed(event: Common.EventTarget.EventTargetEvent<SDK.DebuggerModel.DebuggerModel>): void {\n    this.reset(event.data);\n  }\n}\n\nclass ModelData {\n  readonly #debuggerModel: SDK.DebuggerModel.DebuggerModel;\n  readonly #debuggerWorkspaceBinding: DebuggerWorkspaceBinding;\n  callFrameLocations: Set<Location>;\n  #defaultMapping: DefaultScriptMapping;\n  resourceMapping: ResourceScriptMapping;\n  readonly compilerMapping: CompilerScriptMapping;\n  readonly #locations: Platform.MapUtilities.Multimap<string, Location>;\n  constructor(debuggerModel: SDK.DebuggerModel.DebuggerModel, debuggerWorkspaceBinding: DebuggerWorkspaceBinding) {\n    this.#debuggerModel = debuggerModel;\n    this.#debuggerWorkspaceBinding = debuggerWorkspaceBinding;\n\n    this.callFrameLocations = new Set();\n\n    const workspace = debuggerWorkspaceBinding.workspace;\n    this.#defaultMapping = new DefaultScriptMapping(debuggerModel, workspace, debuggerWorkspaceBinding);\n    this.resourceMapping = new ResourceScriptMapping(debuggerModel, workspace, debuggerWorkspaceBinding);\n    this.compilerMapping = new CompilerScriptMapping(debuggerModel, workspace, debuggerWorkspaceBinding);\n\n    this.#locations = new Platform.MapUtilities.Multimap();\n\n    debuggerModel.setBeforePausedCallback(this.beforePaused.bind(this));\n  }\n\n  async createLiveLocation(\n      rawLocation: SDK.DebuggerModel.Location, updateDelegate: (arg0: LiveLocation) => Promise<void>,\n      locationPool: LiveLocationPool): Promise<Location> {\n    console.assert(rawLocation.scriptId !== '');\n    const scriptId = rawLocation.scriptId;\n    const location = new Location(scriptId, rawLocation, this.#debuggerWorkspaceBinding, updateDelegate, locationPool);\n    this.#locations.set(scriptId, location);\n    await location.update();\n    return location;\n  }\n\n  disposeLocation(location: Location): void {\n    this.#locations.delete(location.scriptId, location);\n  }\n\n  async updateLocations(script: SDK.Script.Script): Promise<void> {\n    const promises = [];\n    for (const location of this.#locations.get(script.scriptId)) {\n      promises.push(location.update());\n    }\n    await Promise.all(promises);\n  }\n\n  rawLocationToUILocation(rawLocation: SDK.DebuggerModel.Location): Workspace.UISourceCode.UILocation|null {\n    let uiLocation = this.compilerMapping.rawLocationToUILocation(rawLocation);\n    uiLocation = uiLocation || this.resourceMapping.rawLocationToUILocation(rawLocation);\n    uiLocation = uiLocation || ResourceMapping.instance().jsLocationToUILocation(rawLocation);\n    uiLocation = uiLocation || this.#defaultMapping.rawLocationToUILocation(rawLocation);\n    return uiLocation;\n  }\n\n  uiLocationToRawLocations(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, lineNumber: number,\n      columnNumber: number|undefined = 0): SDK.DebuggerModel.Location[] {\n    // TODO(crbug.com/1153123): Revisit the `#columnNumber = 0` and also preserve `undefined` for source maps?\n    let locations = this.compilerMapping.uiLocationToRawLocations(uiSourceCode, lineNumber, columnNumber);\n    locations = locations.length ?\n        locations :\n        this.resourceMapping.uiLocationToRawLocations(uiSourceCode, lineNumber, columnNumber);\n    locations = locations.length ?\n        locations :\n        ResourceMapping.instance().uiLocationToJSLocations(uiSourceCode, lineNumber, columnNumber);\n    locations = locations.length ?\n        locations :\n        this.#defaultMapping.uiLocationToRawLocations(uiSourceCode, lineNumber, columnNumber);\n    return locations;\n  }\n\n  private beforePaused(debuggerPausedDetails: SDK.DebuggerModel.DebuggerPausedDetails): boolean {\n    return Boolean(debuggerPausedDetails.callFrames[0]);\n  }\n\n  dispose(): void {\n    this.#debuggerModel.setBeforePausedCallback(null);\n    this.compilerMapping.dispose();\n    this.resourceMapping.dispose();\n    this.#defaultMapping.dispose();\n  }\n\n  getResourceMapping(): ResourceScriptMapping {\n    return this.resourceMapping;\n  }\n}\n\nexport class Location extends LiveLocationWithPool {\n  readonly scriptId: string;\n  readonly rawLocation: SDK.DebuggerModel.Location;\n  readonly #binding: DebuggerWorkspaceBinding;\n\n  constructor(\n      scriptId: string, rawLocation: SDK.DebuggerModel.Location, binding: DebuggerWorkspaceBinding,\n      updateDelegate: (arg0: LiveLocation) => Promise<void>, locationPool: LiveLocationPool) {\n    super(updateDelegate, locationPool);\n    this.scriptId = scriptId;\n    this.rawLocation = rawLocation;\n    this.#binding = binding;\n  }\n\n  async uiLocation(): Promise<Workspace.UISourceCode.UILocation|null> {\n    const debuggerModelLocation = this.rawLocation;\n    return this.#binding.rawLocationToUILocation(debuggerModelLocation);\n  }\n\n  dispose(): void {\n    super.dispose();\n    this.#binding.removeLiveLocation(this);\n  }\n\n  async isIgnoreListed(): Promise<boolean> {\n    const uiLocation = await this.uiLocation();\n    return uiLocation ? IgnoreListManager.instance().isIgnoreListedUISourceCode(uiLocation.uiSourceCode) : false;\n  }\n}\n\nclass StackTraceTopFrameLocation extends LiveLocationWithPool {\n  #updateScheduled: boolean;\n  #current: LiveLocation|null;\n  #locations: LiveLocation[]|null;\n  constructor(updateDelegate: (arg0: LiveLocation) => Promise<void>, locationPool: LiveLocationPool) {\n    super(updateDelegate, locationPool);\n    this.#updateScheduled = true;\n    this.#current = null;\n    this.#locations = null;\n  }\n\n  static async createStackTraceTopFrameLocation(\n      rawLocations: SDK.DebuggerModel.Location[], binding: DebuggerWorkspaceBinding,\n      updateDelegate: (arg0: LiveLocation) => Promise<void>,\n      locationPool: LiveLocationPool): Promise<StackTraceTopFrameLocation> {\n    const location = new StackTraceTopFrameLocation(updateDelegate, locationPool);\n    const locationsPromises = rawLocations.map(\n        rawLocation => binding.createLiveLocation(rawLocation, location.scheduleUpdate.bind(location), locationPool));\n    location.#locations = ((await Promise.all(locationsPromises)).filter(l => Boolean(l)) as Location[]);\n    await location.updateLocation();\n    return location;\n  }\n\n  async uiLocation(): Promise<Workspace.UISourceCode.UILocation|null> {\n    return this.#current ? this.#current.uiLocation() : null;\n  }\n\n  async isIgnoreListed(): Promise<boolean> {\n    return this.#current ? this.#current.isIgnoreListed() : false;\n  }\n\n  dispose(): void {\n    super.dispose();\n    if (this.#locations) {\n      for (const location of this.#locations) {\n        location.dispose();\n      }\n    }\n    this.#locations = null;\n    this.#current = null;\n  }\n\n  private async scheduleUpdate(): Promise<void> {\n    if (this.#updateScheduled) {\n      return;\n    }\n    this.#updateScheduled = true;\n    queueMicrotask(() => {\n      void this.updateLocation();\n    });\n  }\n\n  private async updateLocation(): Promise<void> {\n    this.#updateScheduled = false;\n    if (!this.#locations || this.#locations.length === 0) {\n      return;\n    }\n\n    this.#current = this.#locations[0];\n    for (const location of this.#locations) {\n      if (!(await location.isIgnoreListed())) {\n        this.#current = location;\n        break;\n      }\n    }\n    void this.update();\n  }\n}\n\nexport interface RawLocationRange {\n  start: SDK.DebuggerModel.Location;\n  end: SDK.DebuggerModel.Location;\n}\n\nexport interface DebuggerSourceMapping {\n  rawLocationToUILocation(rawLocation: SDK.DebuggerModel.Location): Workspace.UISourceCode.UILocation|null;\n\n  uiLocationToRawLocations(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, lineNumber: number,\n      columnNumber?: number): SDK.DebuggerModel.Location[];\n}\n"],
  "mappings": "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",
  "names": []
}
