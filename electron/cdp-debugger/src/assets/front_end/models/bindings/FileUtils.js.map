{
  "version": 3,
  "sources": ["../../../../../../front_end/models/bindings/FileUtils.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport type * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nexport interface ChunkedReader {\n  fileSize(): number;\n\n  loadedSize(): number;\n\n  fileName(): string;\n\n  cancel(): void;\n\n  error(): DOMError|null;\n}\ninterface DecompressionStream extends GenericTransformStream {\n  readonly format: string;\n}\ndeclare const DecompressionStream: {\n  prototype: DecompressionStream,\n  new (format: string): DecompressionStream,\n};\n\nexport class ChunkedFileReader implements ChunkedReader {\n  #file: File|null;\n  readonly #fileSizeInternal: number;\n  #loadedSizeInternal: number;\n  #streamReader: ReadableStreamReader<Uint8Array>|null;\n  readonly #chunkSize: number;\n  readonly #chunkTransferredCallback: ((arg0: ChunkedReader) => void)|undefined;\n  readonly #decoder: TextDecoder;\n  #isCanceled: boolean;\n  #errorInternal: DOMException|null;\n  #transferFinished!: (arg0: boolean) => void;\n  #output?: Common.StringOutputStream.OutputStream;\n  #reader?: FileReader|null;\n\n  constructor(file: File, chunkSize: number, chunkTransferredCallback?: ((arg0: ChunkedReader) => void)) {\n    this.#file = file;\n    this.#fileSizeInternal = file.size;\n    this.#loadedSizeInternal = 0;\n    this.#chunkSize = chunkSize;\n    this.#chunkTransferredCallback = chunkTransferredCallback;\n    this.#decoder = new TextDecoder();\n    this.#isCanceled = false;\n    this.#errorInternal = null;\n    this.#streamReader = null;\n  }\n\n  async read(output: Common.StringOutputStream.OutputStream): Promise<boolean> {\n    if (this.#chunkTransferredCallback) {\n      this.#chunkTransferredCallback(this);\n    }\n\n    if (this.#file?.type.endsWith('gzip')) {\n      const stream = this.decompressStream(this.#file.stream());\n      this.#streamReader = stream.getReader();\n    } else {\n      this.#reader = new FileReader();\n      this.#reader.onload = this.onChunkLoaded.bind(this);\n      this.#reader.onerror = this.onError.bind(this);\n    }\n\n    this.#output = output;\n    void this.loadChunk();\n\n    return new Promise(resolve => {\n      this.#transferFinished = resolve;\n    });\n  }\n\n  cancel(): void {\n    this.#isCanceled = true;\n  }\n\n  loadedSize(): number {\n    return this.#loadedSizeInternal;\n  }\n\n  fileSize(): number {\n    return this.#fileSizeInternal;\n  }\n\n  fileName(): string {\n    if (!this.#file) {\n      return '';\n    }\n    return this.#file.name;\n  }\n\n  error(): DOMException|null {\n    return this.#errorInternal;\n  }\n\n  // Decompress gzip natively thanks to https://wicg.github.io/compression/\n  private decompressStream(stream: ReadableStream): ReadableStream {\n    const ds = new DecompressionStream('gzip');\n    const decompressionStream = stream.pipeThrough(ds);\n    return decompressionStream;\n  }\n\n  private onChunkLoaded(event: Event): void {\n    if (this.#isCanceled) {\n      return;\n    }\n\n    const eventTarget = (event.target as FileReader);\n    if (eventTarget.readyState !== FileReader.DONE) {\n      return;\n    }\n\n    if (!this.#reader) {\n      return;\n    }\n\n    const buffer = (this.#reader.result as ArrayBuffer);\n    this.#loadedSizeInternal += buffer.byteLength;\n    const endOfFile = this.#loadedSizeInternal === this.#fileSizeInternal;\n    void this.decodeChunkBuffer(buffer, endOfFile);\n  }\n\n  private async decodeChunkBuffer(buffer: ArrayBuffer, endOfFile: boolean): Promise<void> {\n    if (!this.#output) {\n      return;\n    }\n    const decodedString = this.#decoder.decode(buffer, {stream: !endOfFile});\n    await this.#output.write(decodedString);\n    if (this.#isCanceled) {\n      return;\n    }\n    if (this.#chunkTransferredCallback) {\n      this.#chunkTransferredCallback(this);\n    }\n\n    if (endOfFile) {\n      this.finishRead();\n      return;\n    }\n    void this.loadChunk();\n  }\n\n  private finishRead(): void {\n    if (!this.#output) {\n      return;\n    }\n    this.#file = null;\n    this.#reader = null;\n    void this.#output.close();\n    this.#transferFinished(!this.#errorInternal);\n  }\n\n  private async loadChunk(): Promise<void> {\n    if (!this.#output || !this.#file) {\n      return;\n    }\n    if (this.#streamReader) {\n      const {value, done} = await this.#streamReader.read();\n      if (done || !value) {\n        return this.finishRead();\n      }\n      void this.decodeChunkBuffer(value.buffer, false);\n    }\n    if (this.#reader) {\n      const chunkStart = this.#loadedSizeInternal;\n      const chunkEnd = Math.min(this.#fileSizeInternal, chunkStart + this.#chunkSize);\n      const nextPart = this.#file.slice(chunkStart, chunkEnd);\n      this.#reader.readAsArrayBuffer(nextPart);\n    }\n  }\n\n  private onError(event: Event): void {\n    const eventTarget = (event.target as FileReader);\n    this.#errorInternal = eventTarget.error;\n    this.#transferFinished(false);\n  }\n}\n\nexport class FileOutputStream implements Common.StringOutputStream.OutputStream {\n  #writeCallbacks: (() => void)[];\n  #fileName!: Platform.DevToolsPath.RawPathString|Platform.DevToolsPath.UrlString;\n  #closed?: boolean;\n  constructor() {\n    this.#writeCallbacks = [];\n  }\n\n  async open(fileName: Platform.DevToolsPath.RawPathString|Platform.DevToolsPath.UrlString): Promise<boolean> {\n    this.#closed = false;\n    this.#writeCallbacks = [];\n    this.#fileName = fileName;\n    const saveResponse = await Workspace.FileManager.FileManager.instance().save(this.#fileName, '', true);\n    if (saveResponse) {\n      Workspace.FileManager.FileManager.instance().addEventListener(\n          Workspace.FileManager.Events.AppendedToURL, this.onAppendDone, this);\n    }\n    return Boolean(saveResponse);\n  }\n\n  write(data: string): Promise<void> {\n    return new Promise(resolve => {\n      this.#writeCallbacks.push(resolve);\n      Workspace.FileManager.FileManager.instance().append(this.#fileName, data);\n    });\n  }\n\n  async close(): Promise<void> {\n    this.#closed = true;\n    if (this.#writeCallbacks.length) {\n      return;\n    }\n    Workspace.FileManager.FileManager.instance().removeEventListener(\n        Workspace.FileManager.Events.AppendedToURL, this.onAppendDone, this);\n    Workspace.FileManager.FileManager.instance().close(this.#fileName);\n  }\n\n  private onAppendDone(event: Common.EventTarget.EventTargetEvent<string>): void {\n    if (event.data !== this.#fileName) {\n      return;\n    }\n    const writeCallback = this.#writeCallbacks.shift();\n    if (writeCallback) {\n      writeCallback();\n    }\n    if (this.#writeCallbacks.length) {\n      return;\n    }\n    if (!this.#closed) {\n      return;\n    }\n    Workspace.FileManager.FileManager.instance().removeEventListener(\n        Workspace.FileManager.Events.AppendedToURL, this.onAppendDone, this);\n    Workspace.FileManager.FileManager.instance().close(this.#fileName);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
