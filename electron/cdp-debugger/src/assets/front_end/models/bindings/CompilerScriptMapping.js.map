{
  "version": 3,
  "sources": ["../../../../../../front_end/models/bindings/CompilerScriptMapping.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nimport {ContentProviderBasedProject} from './ContentProviderBasedProject.js';\nimport type {DebuggerSourceMapping, DebuggerWorkspaceBinding, RawLocationRange} from './DebuggerWorkspaceBinding.js';\nimport {IgnoreListManager} from './IgnoreListManager.js';\nimport {NetworkProject} from './NetworkProject.js';\n\nexport class CompilerScriptMapping implements DebuggerSourceMapping {\n  readonly #debuggerModel: SDK.DebuggerModel.DebuggerModel;\n  readonly #sourceMapManager: SDK.SourceMapManager.SourceMapManager<SDK.Script.Script>;\n  readonly #workspace: Workspace.Workspace.WorkspaceImpl;\n  readonly #debuggerWorkspaceBinding: DebuggerWorkspaceBinding;\n  readonly #regularProject: ContentProviderBasedProject;\n  readonly #contentScriptsProject: ContentProviderBasedProject;\n  readonly #regularBindings: Map<string, Binding>;\n  readonly #contentScriptsBindings: Map<string, Binding>;\n  readonly #stubUISourceCodes: Map<SDK.Script.Script, Workspace.UISourceCode.UISourceCode>;\n  readonly #stubProject: ContentProviderBasedProject;\n  readonly #eventListeners: Common.EventTarget.EventDescriptor[];\n  constructor(\n      debuggerModel: SDK.DebuggerModel.DebuggerModel, workspace: Workspace.Workspace.WorkspaceImpl,\n      debuggerWorkspaceBinding: DebuggerWorkspaceBinding) {\n    this.#debuggerModel = debuggerModel;\n    this.#sourceMapManager = this.#debuggerModel.sourceMapManager();\n    this.#workspace = workspace;\n    this.#debuggerWorkspaceBinding = debuggerWorkspaceBinding;\n\n    const target = debuggerModel.target();\n    this.#regularProject = new ContentProviderBasedProject(\n        workspace, 'jsSourceMaps::' + target.id(), Workspace.Workspace.projectTypes.Network, '',\n        false /* isServiceProject */);\n    this.#contentScriptsProject = new ContentProviderBasedProject(\n        workspace, 'jsSourceMaps:extensions:' + target.id(), Workspace.Workspace.projectTypes.ContentScripts, '',\n        false /* isServiceProject */);\n    NetworkProject.setTargetForProject(this.#regularProject, target);\n    NetworkProject.setTargetForProject(this.#contentScriptsProject, target);\n\n    this.#regularBindings = new Map();\n    this.#contentScriptsBindings = new Map();\n\n    this.#stubUISourceCodes = new Map();\n\n    this.#stubProject = new ContentProviderBasedProject(\n        workspace, 'jsSourceMaps:stub:' + target.id(), Workspace.Workspace.projectTypes.Service, '',\n        true /* isServiceProject */);\n    this.#eventListeners = [\n      this.#sourceMapManager.addEventListener(\n          SDK.SourceMapManager.Events.SourceMapWillAttach, this.sourceMapWillAttach, this),\n      this.#sourceMapManager.addEventListener(\n          SDK.SourceMapManager.Events.SourceMapFailedToAttach, this.sourceMapFailedToAttach, this),\n      this.#sourceMapManager.addEventListener(\n          SDK.SourceMapManager.Events.SourceMapAttached, this.sourceMapAttached, this),\n      this.#sourceMapManager.addEventListener(\n          SDK.SourceMapManager.Events.SourceMapDetached, this.sourceMapDetached, this),\n      this.#workspace.addEventListener(\n          Workspace.Workspace.Events.UISourceCodeAdded,\n          event => {\n            this.onUiSourceCodeAdded(event);\n          },\n          this),\n    ];\n  }\n\n  private onUiSourceCodeAdded(event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.UISourceCode>): void {\n    const uiSourceCode = event.data;\n    if (uiSourceCode.contentType().isDocument()) {\n      for (const script of this.#debuggerModel.scriptsForSourceURL(uiSourceCode.url())) {\n        void this.#debuggerWorkspaceBinding.updateLocations(script);\n      }\n    }\n  }\n\n  private addStubUISourceCode(script: SDK.Script.Script): void {\n    const stubUISourceCode = this.#stubProject.addContentProvider(\n        Common.ParsedURL.ParsedURL.concatenate(script.sourceURL, ':sourcemap'),\n        TextUtils.StaticContentProvider.StaticContentProvider.fromString(\n            script.sourceURL, Common.ResourceType.resourceTypes.Script,\n            '\\n\\n\\n\\n\\n// Please wait a bit.\\n// Compiled script is not shown while source map is being loaded!'),\n        'text/javascript');\n    this.#stubUISourceCodes.set(script, stubUISourceCode);\n  }\n\n  private async removeStubUISourceCode(script: SDK.Script.Script): Promise<void> {\n    const uiSourceCode = this.#stubUISourceCodes.get(script);\n    this.#stubUISourceCodes.delete(script);\n    if (uiSourceCode) {\n      this.#stubProject.removeFile(uiSourceCode.url());\n    }\n    await this.#debuggerWorkspaceBinding.updateLocations(script);\n  }\n\n  static uiSourceCodeOrigin(uiSourceCode: Workspace.UISourceCode.UISourceCode): Platform.DevToolsPath.UrlString[] {\n    const binding = uiSourceCodeToBinding.get(uiSourceCode);\n    if (binding) {\n      return binding.getReferringSourceMaps().map((sourceMap: SDK.SourceMap.SourceMap) => sourceMap.compiledURL());\n    }\n    return [];\n  }\n\n  getLocationRangesForSameSourceLocation(rawLocation: SDK.DebuggerModel.Location): RawLocationRange[] {\n    const debuggerModel = rawLocation.debuggerModel;\n    const script = rawLocation.script();\n    if (!script) {\n      return [];\n    }\n    const sourceMap = this.#sourceMapManager.sourceMapForClient(script);\n    if (!sourceMap) {\n      return [];\n    }\n\n    // Find the source location for the raw location.\n    const entry = sourceMap.findEntry(rawLocation.lineNumber, rawLocation.columnNumber);\n    if (!entry || !entry.sourceURL) {\n      return [];\n    }\n\n    // Map the source location back to raw location ranges.\n    const ranges = sourceMap.findReverseRanges(entry.sourceURL, entry.sourceLineNumber, entry.sourceColumnNumber);\n    return ranges.map(textRangeToLocationRange);\n\n    function textRangeToLocationRange(t: TextUtils.TextRange.TextRange): RawLocationRange {\n      return {\n        start: debuggerModel.createRawLocation(script as SDK.Script.Script, t.startLine, t.startColumn),\n        end: debuggerModel.createRawLocation(script as SDK.Script.Script, t.endLine, t.endColumn),\n      };\n    }\n  }\n\n  uiSourceCodeForURL(url: Platform.DevToolsPath.UrlString, isContentScript: boolean):\n      Workspace.UISourceCode.UISourceCode|null {\n    return isContentScript ? this.#contentScriptsProject.uiSourceCodeForURL(url) :\n                             this.#regularProject.uiSourceCodeForURL(url);\n  }\n\n  rawLocationToUILocation(rawLocation: SDK.DebuggerModel.Location): Workspace.UISourceCode.UILocation|null {\n    const script = rawLocation.script();\n    if (!script) {\n      return null;\n    }\n\n    const lineNumber = rawLocation.lineNumber - script.lineOffset;\n    let columnNumber = rawLocation.columnNumber;\n    if (!lineNumber) {\n      columnNumber -= script.columnOffset;\n    }\n\n    const stubUISourceCode = this.#stubUISourceCodes.get(script);\n    if (stubUISourceCode) {\n      return new Workspace.UISourceCode.UILocation(stubUISourceCode, lineNumber, columnNumber);\n    }\n\n    const sourceMap = this.#sourceMapManager.sourceMapForClient(script);\n    if (!sourceMap) {\n      return null;\n    }\n    const entry = sourceMap.findEntry(lineNumber, columnNumber);\n    if (!entry || !entry.sourceURL) {\n      return null;\n    }\n    const uiSourceCode = script.isContentScript() ? this.#contentScriptsProject.uiSourceCodeForURL(entry.sourceURL) :\n                                                    this.#regularProject.uiSourceCodeForURL(entry.sourceURL);\n    if (!uiSourceCode) {\n      return null;\n    }\n    return uiSourceCode.uiLocation((entry.sourceLineNumber as number), (entry.sourceColumnNumber as number));\n  }\n\n  uiLocationToRawLocations(uiSourceCode: Workspace.UISourceCode.UISourceCode, lineNumber: number, columnNumber: number):\n      SDK.DebuggerModel.Location[] {\n    const binding = uiSourceCodeToBinding.get(uiSourceCode);\n    if (!binding) {\n      return [];\n    }\n\n    const locations: SDK.DebuggerModel.Location[] = [];\n    for (const sourceMap of binding.getReferringSourceMaps()) {\n      const entry = sourceMap.sourceLineMapping(uiSourceCode.url(), lineNumber, columnNumber);\n      if (!entry) {\n        continue;\n      }\n      for (const script of this.#sourceMapManager.clientsForSourceMap(sourceMap)) {\n        locations.push(this.#debuggerModel.createRawLocation(\n            script, entry.lineNumber + script.lineOffset,\n            !entry.lineNumber ? entry.columnNumber + script.columnOffset : entry.columnNumber));\n      }\n    }\n    return locations;\n  }\n\n  private async sourceMapWillAttach(event: Common.EventTarget.EventTargetEvent<{client: SDK.Script.Script}>):\n      Promise<void> {\n    const script = event.data.client;\n    // Create stub UISourceCode for the time source mapping is being loaded.\n    this.addStubUISourceCode(script);\n    await this.#debuggerWorkspaceBinding.updateLocations(script);\n  }\n\n  private async sourceMapFailedToAttach(event: Common.EventTarget.EventTargetEvent<{client: SDK.Script.Script}>):\n      Promise<void> {\n    const script = event.data.client;\n    await this.removeStubUISourceCode(script);\n  }\n\n  private async sourceMapAttached(\n      event: Common.EventTarget.EventTargetEvent<{client: SDK.Script.Script, sourceMap: SDK.SourceMap.SourceMap}>):\n      Promise<void> {\n    const script = event.data.client;\n    const sourceMap = event.data.sourceMap;\n    await this.removeStubUISourceCode(script);\n\n    if (IgnoreListManager.instance().isIgnoreListedURL(script.sourceURL, script.isContentScript())) {\n      this.sourceMapAttachedForTest(sourceMap);\n      return;\n    }\n\n    await this.populateSourceMapSources(script, sourceMap);\n    this.sourceMapAttachedForTest(sourceMap);\n  }\n\n  private async sourceMapDetached(\n      event: Common.EventTarget.EventTargetEvent<{client: SDK.Script.Script, sourceMap: SDK.SourceMap.SourceMap}>):\n      Promise<void> {\n    const script = event.data.client;\n    const sourceMap = event.data.sourceMap;\n    const bindings = script.isContentScript() ? this.#contentScriptsBindings : this.#regularBindings;\n    for (const sourceURL of sourceMap.sourceURLs()) {\n      const binding = bindings.get(sourceURL);\n      if (binding) {\n        binding.removeSourceMap(sourceMap, script.frameId);\n        if (!binding.getUiSourceCode()) {\n          bindings.delete(sourceURL);\n        }\n      }\n    }\n    await this.#debuggerWorkspaceBinding.updateLocations(script);\n  }\n\n  sourceMapForScript(script: SDK.Script.Script): SDK.SourceMap.SourceMap|null {\n    return this.#sourceMapManager.sourceMapForClient(script);\n  }\n\n  scriptsForUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): SDK.Script.Script[] {\n    const binding = uiSourceCodeToBinding.get(uiSourceCode);\n    if (!binding) {\n      return [];\n    }\n\n    const scripts: SDK.Script.Script[] = [];\n    for (const sourceMap of binding.getReferringSourceMaps()) {\n      this.#sourceMapManager.clientsForSourceMap(sourceMap).forEach(script => scripts.push(script));\n    }\n    return scripts;\n  }\n\n  private sourceMapAttachedForTest(_sourceMap: SDK.SourceMap.SourceMap|null): void {\n  }\n\n  private async populateSourceMapSources(script: SDK.Script.Script, sourceMap: SDK.SourceMap.SourceMap): Promise<void> {\n    const project = script.isContentScript() ? this.#contentScriptsProject : this.#regularProject;\n    const bindings = script.isContentScript() ? this.#contentScriptsBindings : this.#regularBindings;\n    for (const sourceURL of sourceMap.sourceURLs()) {\n      let binding = bindings.get(sourceURL);\n      if (!binding) {\n        binding = new Binding(project, sourceURL);\n        bindings.set(sourceURL, binding);\n      }\n      binding.addSourceMap(sourceMap, script.frameId);\n    }\n    await this.#debuggerWorkspaceBinding.updateLocations(script);\n  }\n\n  static uiLineHasMapping(uiSourceCode: Workspace.UISourceCode.UISourceCode, lineNumber: number): boolean {\n    const binding = uiSourceCodeToBinding.get(uiSourceCode);\n    if (!binding) {\n      return true;\n    }\n    for (const sourceMap of binding.getReferringSourceMaps()) {\n      if (sourceMap.sourceLineMapping(uiSourceCode.url(), lineNumber, 0)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  dispose(): void {\n    Common.EventTarget.removeEventListeners(this.#eventListeners);\n    this.#regularProject.dispose();\n    this.#contentScriptsProject.dispose();\n    this.#stubProject.dispose();\n  }\n}\n\nconst uiSourceCodeToBinding = new WeakMap<Workspace.UISourceCode.UISourceCode, Binding>();\n\nclass Binding {\n  readonly #project: ContentProviderBasedProject;\n  readonly #url: Platform.DevToolsPath.UrlString;\n  referringSourceMaps: SDK.SourceMap.SourceMap[];\n  uiSourceCode: Workspace.UISourceCode.UISourceCode|null;\n\n  constructor(project: ContentProviderBasedProject, url: Platform.DevToolsPath.UrlString) {\n    this.#project = project;\n    this.#url = url;\n\n    this.referringSourceMaps = [];\n    this.uiSourceCode = null;\n  }\n\n  private recreateUISourceCodeIfNeeded(frameId: Protocol.Page.FrameId): void {\n    const sourceMap = this.referringSourceMaps[this.referringSourceMaps.length - 1];\n\n    const newUISourceCode =\n        this.#project.createUISourceCode(this.#url, Common.ResourceType.resourceTypes.SourceMapScript);\n    uiSourceCodeToBinding.set(newUISourceCode, this);\n    const contentProvider =\n        sourceMap.sourceContentProvider(this.#url, Common.ResourceType.resourceTypes.SourceMapScript);\n    const mimeType = Common.ResourceType.ResourceType.mimeFromURL(this.#url) || 'text/javascript';\n    const embeddedContent = sourceMap.embeddedContentByURL(this.#url);\n    const metadata = typeof embeddedContent === 'string' ?\n        new Workspace.UISourceCode.UISourceCodeMetadata(null, embeddedContent.length) :\n        null;\n\n    if (this.uiSourceCode) {\n      NetworkProject.cloneInitialFrameAttribution(this.uiSourceCode, newUISourceCode);\n      this.#project.removeFile(this.uiSourceCode.url());\n    } else {\n      NetworkProject.setInitialFrameAttribution(newUISourceCode, frameId);\n    }\n    this.uiSourceCode = newUISourceCode;\n    this.#project.addUISourceCodeWithProvider(this.uiSourceCode, contentProvider, metadata, mimeType);\n  }\n\n  addSourceMap(sourceMap: SDK.SourceMap.SourceMap, frameId: Protocol.Page.FrameId): void {\n    if (this.uiSourceCode) {\n      NetworkProject.addFrameAttribution(this.uiSourceCode, frameId);\n    }\n    this.referringSourceMaps.push(sourceMap);\n    this.recreateUISourceCodeIfNeeded(frameId);\n  }\n\n  removeSourceMap(sourceMap: SDK.SourceMap.SourceMap, frameId: Protocol.Page.FrameId): void {\n    const uiSourceCode = (this.uiSourceCode as Workspace.UISourceCode.UISourceCode);\n    NetworkProject.removeFrameAttribution(uiSourceCode, frameId);\n    const lastIndex = this.referringSourceMaps.lastIndexOf(sourceMap);\n    if (lastIndex !== -1) {\n      this.referringSourceMaps.splice(lastIndex, 1);\n    }\n    if (!this.referringSourceMaps.length) {\n      this.#project.removeFile(uiSourceCode.url());\n      this.uiSourceCode = null;\n    } else {\n      this.recreateUISourceCodeIfNeeded(frameId);\n    }\n  }\n\n  getReferringSourceMaps(): Array<SDK.SourceMap.SourceMap> {\n    return this.referringSourceMaps;\n  }\n\n  getUiSourceCode(): Workspace.UISourceCode.UISourceCode|null {\n    return this.uiSourceCode;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
