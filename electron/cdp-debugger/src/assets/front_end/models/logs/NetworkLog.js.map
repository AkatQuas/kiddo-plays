{
  "version": 3,
  "sources": ["../../../../../../front_end/models/logs/NetworkLog.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nconst UIStrings = {\n  /**\n   * @description When DevTools doesn't know the URL that initiated a network request, we\n   * show this phrase instead. 'unknown' would also work in this context.\n   */\n  anonymous: '<anonymous>',\n};\nconst str_ = i18n.i18n.registerUIStrings('models/logs/NetworkLog.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet networkLogInstance: NetworkLog;\n\nexport class NetworkLog extends Common.ObjectWrapper.ObjectWrapper<EventTypes> implements\n    SDK.TargetManager.SDKModelObserver<SDK.NetworkManager.NetworkManager> {\n  private requestsInternal: SDK.NetworkRequest.NetworkRequest[];\n  private sentNetworkRequests: Protocol.Network.Request[];\n  private receivedNetworkResponses: Protocol.Network.Response[];\n  private requestsSet: Set<SDK.NetworkRequest.NetworkRequest>;\n  private readonly requestsMap: Map<string, SDK.NetworkRequest.NetworkRequest[]>;\n  private readonly pageLoadForManager: Map<SDK.NetworkManager.NetworkManager, SDK.PageLoad.PageLoad>;\n  private isRecording: boolean;\n  private readonly modelListeners: WeakMap<SDK.NetworkManager.NetworkManager, Common.EventTarget.EventDescriptor[]>;\n  private readonly initiatorData: WeakMap<SDK.NetworkRequest.NetworkRequest, InitiatorData>;\n  private readonly unresolvedPreflightRequests: Map<string, SDK.NetworkRequest.NetworkRequest>;\n\n  constructor() {\n    super();\n    this.requestsInternal = [];\n    this.sentNetworkRequests = [];\n    this.receivedNetworkResponses = [];\n    this.requestsSet = new Set();\n    this.requestsMap = new Map();\n    this.pageLoadForManager = new Map();\n    this.isRecording = true;\n    this.modelListeners = new WeakMap();\n    this.initiatorData = new WeakMap();\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.NetworkManager.NetworkManager, this);\n    const recordLogSetting: Common.Settings.Setting<boolean> =\n        Common.Settings.Settings.instance().moduleSetting('network_log.record-log');\n    recordLogSetting.addChangeListener(() => {\n      const preserveLogSetting = Common.Settings.Settings.instance().moduleSetting('network_log.preserve-log');\n      if (!preserveLogSetting.get() && recordLogSetting.get()) {\n        this.reset(true);\n      }\n      this.setIsRecording((recordLogSetting.get() as boolean));\n    }, this);\n    this.unresolvedPreflightRequests = new Map();\n  }\n\n  static instance(): NetworkLog {\n    if (!networkLogInstance) {\n      networkLogInstance = new NetworkLog();\n    }\n    return networkLogInstance;\n  }\n\n  modelAdded(networkManager: SDK.NetworkManager.NetworkManager): void {\n    const eventListeners = [];\n    eventListeners.push(\n        networkManager.addEventListener(SDK.NetworkManager.Events.RequestStarted, this.onRequestStarted, this));\n    eventListeners.push(\n        networkManager.addEventListener(SDK.NetworkManager.Events.RequestUpdated, this.onRequestUpdated, this));\n    eventListeners.push(\n        networkManager.addEventListener(SDK.NetworkManager.Events.RequestRedirected, this.onRequestRedirect, this));\n    eventListeners.push(\n        networkManager.addEventListener(SDK.NetworkManager.Events.RequestFinished, this.onRequestUpdated, this));\n    eventListeners.push(networkManager.addEventListener(\n        SDK.NetworkManager.Events.MessageGenerated, this.networkMessageGenerated.bind(this, networkManager)));\n    eventListeners.push(\n        networkManager.addEventListener(SDK.NetworkManager.Events.ResponseReceived, this.onResponseReceived, this));\n\n    const resourceTreeModel = networkManager.target().model(SDK.ResourceTreeModel.ResourceTreeModel);\n    if (resourceTreeModel) {\n      eventListeners.push(\n          resourceTreeModel.addEventListener(SDK.ResourceTreeModel.Events.WillReloadPage, this.willReloadPage, this));\n      eventListeners.push(resourceTreeModel.addEventListener(\n          SDK.ResourceTreeModel.Events.MainFrameNavigated, this.onMainFrameNavigated, this));\n      eventListeners.push(resourceTreeModel.addEventListener(SDK.ResourceTreeModel.Events.Load, this.onLoad, this));\n      eventListeners.push(resourceTreeModel.addEventListener(\n          SDK.ResourceTreeModel.Events.DOMContentLoaded, this.onDOMContentLoaded.bind(this, resourceTreeModel)));\n    }\n\n    this.modelListeners.set(networkManager, eventListeners);\n  }\n\n  modelRemoved(networkManager: SDK.NetworkManager.NetworkManager): void {\n    this.removeNetworkManagerListeners(networkManager);\n  }\n\n  private removeNetworkManagerListeners(networkManager: SDK.NetworkManager.NetworkManager): void {\n    Common.EventTarget.removeEventListeners(this.modelListeners.get(networkManager) || []);\n  }\n\n  setIsRecording(enabled: boolean): void {\n    if (this.isRecording === enabled) {\n      return;\n    }\n    this.isRecording = enabled;\n    if (enabled) {\n      SDK.TargetManager.TargetManager.instance().observeModels(SDK.NetworkManager.NetworkManager, this);\n    } else {\n      SDK.TargetManager.TargetManager.instance().unobserveModels(SDK.NetworkManager.NetworkManager, this);\n      SDK.TargetManager.TargetManager.instance()\n          .models(SDK.NetworkManager.NetworkManager)\n          .forEach(this.removeNetworkManagerListeners.bind(this));\n    }\n  }\n\n  requestForURL(url: Platform.DevToolsPath.UrlString): SDK.NetworkRequest.NetworkRequest|null {\n    return this.requestsInternal.find(request => request.url() === url) || null;\n  }\n\n  originalRequestForURL(url: Platform.DevToolsPath.UrlString): Protocol.Network.Request|null {\n    return this.sentNetworkRequests.find(request => request.url === url) || null;\n  }\n\n  originalResponseForURL(url: Platform.DevToolsPath.UrlString): Protocol.Network.Response|null {\n    return this.receivedNetworkResponses.find(response => response.url === url) || null;\n  }\n\n  requests(): SDK.NetworkRequest.NetworkRequest[] {\n    return this.requestsInternal;\n  }\n\n  requestByManagerAndId(networkManager: SDK.NetworkManager.NetworkManager, requestId: string):\n      SDK.NetworkRequest.NetworkRequest|null {\n    // We iterate backwards because the last item will likely be the one needed for console network request lookups.\n    for (let i = this.requestsInternal.length - 1; i >= 0; i--) {\n      const request = this.requestsInternal[i];\n      if (requestId === request.requestId() &&\n          networkManager === SDK.NetworkManager.NetworkManager.forRequest(request)) {\n        return request;\n      }\n    }\n    return null;\n  }\n\n  private requestByManagerAndURL(\n      networkManager: SDK.NetworkManager.NetworkManager,\n      url: Platform.DevToolsPath.UrlString): SDK.NetworkRequest.NetworkRequest|null {\n    for (const request of this.requestsInternal) {\n      if (url === request.url() && networkManager === SDK.NetworkManager.NetworkManager.forRequest(request)) {\n        return request;\n      }\n    }\n    return null;\n  }\n\n  private initializeInitiatorSymbolIfNeeded(request: SDK.NetworkRequest.NetworkRequest): InitiatorData {\n    let initiatorInfo = this.initiatorData.get(request);\n    if (initiatorInfo) {\n      return initiatorInfo;\n    }\n    initiatorInfo = {\n      info: null,\n      chain: null,\n      request: undefined,\n    };\n    this.initiatorData.set(request, initiatorInfo);\n    return initiatorInfo;\n  }\n\n  static initiatorInfoForRequest(request: SDK.NetworkRequest.NetworkRequest, existingInitiatorData?: InitiatorData):\n      InitiatorInfo {\n    const initiatorInfo: InitiatorData = existingInitiatorData || {\n      info: null,\n      chain: null,\n      request: undefined,\n    };\n\n    let type = SDK.NetworkRequest.InitiatorType.Other;\n    let url = Platform.DevToolsPath.EmptyUrlString;\n    let lineNumber: number = -Infinity;\n    let columnNumber: number = -Infinity;\n    let scriptId: Protocol.Runtime.ScriptId|null = null;\n    let initiatorStack: Protocol.Runtime.StackTrace|null = null;\n    let initiatorRequest: (SDK.NetworkRequest.NetworkRequest|null)|null = null;\n    const initiator = request.initiator();\n\n    const redirectSource = request.redirectSource();\n    if (redirectSource) {\n      type = SDK.NetworkRequest.InitiatorType.Redirect;\n      url = redirectSource.url();\n    } else if (initiator) {\n      if (initiator.type === Protocol.Network.InitiatorType.Parser) {\n        type = SDK.NetworkRequest.InitiatorType.Parser;\n        url = initiator.url ? initiator.url as Platform.DevToolsPath.UrlString : url;\n        lineNumber = typeof initiator.lineNumber === 'number' ? initiator.lineNumber : lineNumber;\n        columnNumber = typeof initiator.columnNumber === 'number' ? initiator.columnNumber : columnNumber;\n      } else if (initiator.type === Protocol.Network.InitiatorType.Script) {\n        for (let stack: (Protocol.Runtime.StackTrace|undefined) = initiator.stack; stack;) {\n          const topFrame = stack.callFrames.length ? stack.callFrames[0] : null;\n          if (!topFrame) {\n            stack = stack.parent;\n            continue;\n          }\n          type = SDK.NetworkRequest.InitiatorType.Script;\n          url = (topFrame.url || i18nString(UIStrings.anonymous) as string) as Platform.DevToolsPath.UrlString;\n          lineNumber = topFrame.lineNumber;\n          columnNumber = topFrame.columnNumber;\n          scriptId = topFrame.scriptId;\n          break;\n        }\n        if (!initiator.stack && initiator.url) {\n          type = SDK.NetworkRequest.InitiatorType.Script;\n          url = initiator.url as Platform.DevToolsPath.UrlString;\n          lineNumber = initiator.lineNumber || 0;\n        }\n        if (initiator.stack && initiator.stack.callFrames && initiator.stack.callFrames.length) {\n          initiatorStack = initiator.stack || null;\n        }\n      } else if (initiator.type === Protocol.Network.InitiatorType.Preload) {\n        type = SDK.NetworkRequest.InitiatorType.Preload;\n      } else if (initiator.type === Protocol.Network.InitiatorType.Preflight) {\n        type = SDK.NetworkRequest.InitiatorType.Preflight;\n        initiatorRequest = request.preflightInitiatorRequest();\n      } else if (initiator.type === Protocol.Network.InitiatorType.SignedExchange) {\n        type = SDK.NetworkRequest.InitiatorType.SignedExchange;\n        url = initiator.url as Platform.DevToolsPath.UrlString || Platform.DevToolsPath.EmptyUrlString;\n      }\n    }\n    initiatorInfo.info = {type, url, lineNumber, columnNumber, scriptId, stack: initiatorStack, initiatorRequest};\n    return initiatorInfo.info;\n  }\n\n  initiatorInfoForRequest(request: SDK.NetworkRequest.NetworkRequest): InitiatorInfo {\n    const initiatorInfo = this.initializeInitiatorSymbolIfNeeded(request);\n    if (initiatorInfo.info) {\n      return initiatorInfo.info;\n    }\n\n    return NetworkLog.initiatorInfoForRequest(request, initiatorInfo);\n  }\n\n  initiatorGraphForRequest(request: SDK.NetworkRequest.NetworkRequest): InitiatorGraph {\n    const initiated = new Map<SDK.NetworkRequest.NetworkRequest, SDK.NetworkRequest.NetworkRequest>();\n    const networkManager = SDK.NetworkManager.NetworkManager.forRequest(request);\n    for (const otherRequest of this.requestsInternal) {\n      const otherRequestManager = SDK.NetworkManager.NetworkManager.forRequest(otherRequest);\n      if (networkManager === otherRequestManager && this.initiatorChain(otherRequest).has(request)) {\n        // save parent request of otherRequst in order to build the initiator chain table later\n        const initiatorRequest = this.initiatorRequest(otherRequest);\n        if (initiatorRequest) {\n          initiated.set(otherRequest, initiatorRequest);\n        }\n      }\n    }\n    return {initiators: this.initiatorChain(request), initiated: initiated};\n  }\n\n  private initiatorChain(request: SDK.NetworkRequest.NetworkRequest): Set<SDK.NetworkRequest.NetworkRequest> {\n    const initiatorDataForRequest = this.initializeInitiatorSymbolIfNeeded(request);\n    let initiatorChainCache = initiatorDataForRequest.chain;\n    if (initiatorChainCache) {\n      return initiatorChainCache;\n    }\n\n    initiatorChainCache = new Set();\n\n    let checkRequest: SDK.NetworkRequest.NetworkRequest|null = request;\n    while (checkRequest) {\n      const initiatorData = this.initializeInitiatorSymbolIfNeeded(checkRequest);\n      if (initiatorData.chain) {\n        Platform.SetUtilities.addAll(initiatorChainCache, initiatorData.chain);\n        break;\n      }\n      if (initiatorChainCache.has(checkRequest)) {\n        break;\n      }\n      initiatorChainCache.add(checkRequest);\n      checkRequest = this.initiatorRequest(checkRequest);\n    }\n    initiatorDataForRequest.chain = initiatorChainCache;\n    return initiatorChainCache;\n  }\n\n  private initiatorRequest(request: SDK.NetworkRequest.NetworkRequest): SDK.NetworkRequest.NetworkRequest|null {\n    const initiatorData = this.initializeInitiatorSymbolIfNeeded(request);\n    if (initiatorData.request !== undefined) {\n      return initiatorData.request;\n    }\n    const url = this.initiatorInfoForRequest(request).url;\n    const networkManager = SDK.NetworkManager.NetworkManager.forRequest(request);\n    initiatorData.request = networkManager ? this.requestByManagerAndURL(networkManager, url) : null;\n    return initiatorData.request;\n  }\n\n  private willReloadPage(): void {\n    if (!Common.Settings.Settings.instance().moduleSetting('network_log.preserve-log').get()) {\n      this.reset(true);\n    }\n  }\n\n  private onMainFrameNavigated(event: Common.EventTarget.EventTargetEvent<SDK.ResourceTreeModel.ResourceTreeFrame>):\n      void {\n    const mainFrame = event.data;\n    const manager = mainFrame.resourceTreeModel().target().model(SDK.NetworkManager.NetworkManager);\n    if (!manager || mainFrame.resourceTreeModel().target().parentTarget()) {\n      return;\n    }\n\n    // If a page resulted in an error, the browser will navigate to an internal error page\n    // hosted at 'chrome-error://...'. In this case, skip the frame navigated event to preserve\n    // the network log.\n    if (mainFrame.url !== mainFrame.unreachableUrl() && mainFrame.url.startsWith('chrome-error://')) {\n      return;\n    }\n\n    const preserveLog = Common.Settings.Settings.instance().moduleSetting('network_log.preserve-log').get();\n\n    const oldRequests = this.requestsInternal;\n    const oldManagerRequests =\n        this.requestsInternal.filter(request => SDK.NetworkManager.NetworkManager.forRequest(request) === manager);\n    const oldRequestsSet = this.requestsSet;\n    this.requestsInternal = [];\n    this.sentNetworkRequests = [];\n    this.receivedNetworkResponses = [];\n    this.requestsSet = new Set();\n    this.requestsMap.clear();\n    this.unresolvedPreflightRequests.clear();\n    this.dispatchEventToListeners(Events.Reset, {clearIfPreserved: !preserveLog});\n\n    // Preserve requests from the new session.\n    let currentPageLoad: SDK.PageLoad.PageLoad|null = null;\n    const requestsToAdd = [];\n    for (const request of oldManagerRequests) {\n      if (request.loaderId !== mainFrame.loaderId) {\n        continue;\n      }\n      if (!currentPageLoad) {\n        currentPageLoad = new SDK.PageLoad.PageLoad(request);\n        let redirectSource = request.redirectSource();\n        while (redirectSource) {\n          requestsToAdd.push(redirectSource);\n          redirectSource = redirectSource.redirectSource();\n        }\n      }\n      requestsToAdd.push(request);\n    }\n\n    // Preserve service worker requests from the new session.\n    const serviceWorkerRequestsToAdd = [];\n    for (const swRequest of oldRequests) {\n      if (!swRequest.initiatedByServiceWorker()) {\n        continue;\n      }\n\n      // If there is a matching request that came before this one, keep it.\n      const keepRequest = requestsToAdd.some(\n          request => request.url() === swRequest.url() && request.issueTime() <= swRequest.issueTime());\n      if (keepRequest) {\n        serviceWorkerRequestsToAdd.push(swRequest);\n      }\n    }\n    requestsToAdd.push(...serviceWorkerRequestsToAdd);\n\n    for (const request of requestsToAdd) {\n      currentPageLoad?.bindRequest(request);\n      oldRequestsSet.delete(request);\n      this.addRequest(request);\n    }\n\n    if (preserveLog) {\n      for (const request of oldRequestsSet) {\n        this.addRequest(request);\n        request.preserved = true;\n      }\n    }\n\n    if (currentPageLoad) {\n      this.pageLoadForManager.set(manager, currentPageLoad);\n    }\n  }\n\n  private addRequest(request: SDK.NetworkRequest.NetworkRequest): void {\n    this.requestsInternal.push(request);\n    this.requestsSet.add(request);\n    const requestList = this.requestsMap.get(request.requestId());\n    if (!requestList) {\n      this.requestsMap.set(request.requestId(), [request]);\n    } else {\n      requestList.push(request);\n    }\n    this.tryResolvePreflightRequests(request);\n    this.dispatchEventToListeners(Events.RequestAdded, request);\n  }\n\n  private tryResolvePreflightRequests(request: SDK.NetworkRequest.NetworkRequest): void {\n    if (request.isPreflightRequest()) {\n      const initiator = request.initiator();\n      if (initiator && initiator.requestId) {\n        const [initiatorRequest] = this.requestsForId(initiator.requestId);\n        if (initiatorRequest) {\n          request.setPreflightInitiatorRequest(initiatorRequest);\n          initiatorRequest.setPreflightRequest(request);\n        } else {\n          this.unresolvedPreflightRequests.set(initiator.requestId, request);\n        }\n      }\n    } else {\n      const preflightRequest = this.unresolvedPreflightRequests.get(request.requestId());\n      if (preflightRequest) {\n        this.unresolvedPreflightRequests.delete(request.requestId());\n        request.setPreflightRequest(preflightRequest);\n        preflightRequest.setPreflightInitiatorRequest(request);\n        // Force recomputation of initiator info, if it already exists.\n        const data = this.initiatorData.get(preflightRequest);\n        if (data) {\n          data.info = null;\n        }\n        this.dispatchEventToListeners(Events.RequestUpdated, preflightRequest);\n      }\n    }\n  }\n\n  importRequests(requests: SDK.NetworkRequest.NetworkRequest[]): void {\n    this.reset(true);\n    this.requestsInternal = [];\n    this.sentNetworkRequests = [];\n    this.receivedNetworkResponses = [];\n    this.requestsSet.clear();\n    this.requestsMap.clear();\n    this.unresolvedPreflightRequests.clear();\n    for (const request of requests) {\n      this.addRequest(request);\n    }\n  }\n\n  private onRequestStarted(event: Common.EventTarget.EventTargetEvent<SDK.NetworkManager.RequestStartedEvent>): void {\n    const {request, originalRequest} = event.data;\n    if (originalRequest) {\n      this.sentNetworkRequests.push(originalRequest);\n    }\n    this.requestsSet.add(request);\n    const manager = SDK.NetworkManager.NetworkManager.forRequest(request);\n    const pageLoad = manager ? this.pageLoadForManager.get(manager) : null;\n    if (pageLoad) {\n      pageLoad.bindRequest(request);\n    }\n    this.addRequest(request);\n  }\n\n  private onResponseReceived(event: Common.EventTarget.EventTargetEvent<SDK.NetworkManager.ResponseReceivedEvent>):\n      void {\n    const response = event.data.response;\n    this.receivedNetworkResponses.push(response);\n  }\n\n  private onRequestUpdated(event: Common.EventTarget.EventTargetEvent<SDK.NetworkRequest.NetworkRequest>): void {\n    const request = event.data;\n    if (!this.requestsSet.has(request)) {\n      return;\n    }\n    this.dispatchEventToListeners(Events.RequestUpdated, request);\n  }\n\n  private onRequestRedirect(event: Common.EventTarget.EventTargetEvent<SDK.NetworkRequest.NetworkRequest>): void {\n    this.initiatorData.delete(event.data);\n  }\n\n  private onDOMContentLoaded(\n      resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel,\n      event: Common.EventTarget.EventTargetEvent<number>): void {\n    const networkManager = resourceTreeModel.target().model(SDK.NetworkManager.NetworkManager);\n    const pageLoad = networkManager ? this.pageLoadForManager.get(networkManager) : null;\n    if (pageLoad) {\n      pageLoad.contentLoadTime = event.data;\n    }\n  }\n\n  private onLoad(event: Common.EventTarget\n                     .EventTargetEvent<{resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel, loadTime: number}>):\n      void {\n    const networkManager = event.data.resourceTreeModel.target().model(SDK.NetworkManager.NetworkManager);\n    const pageLoad = networkManager ? this.pageLoadForManager.get(networkManager) : null;\n    if (pageLoad) {\n      pageLoad.loadTime = event.data.loadTime;\n    }\n  }\n\n  reset(clearIfPreserved: boolean): void {\n    this.requestsInternal = [];\n    this.sentNetworkRequests = [];\n    this.receivedNetworkResponses = [];\n    this.requestsSet.clear();\n    this.requestsMap.clear();\n    this.unresolvedPreflightRequests.clear();\n    const managers = new Set<SDK.NetworkManager.NetworkManager>(\n        SDK.TargetManager.TargetManager.instance().models(SDK.NetworkManager.NetworkManager));\n    for (const manager of this.pageLoadForManager.keys()) {\n      if (!managers.has(manager)) {\n        this.pageLoadForManager.delete(manager);\n      }\n    }\n\n    this.dispatchEventToListeners(Events.Reset, {clearIfPreserved});\n  }\n\n  private networkMessageGenerated(\n      networkManager: SDK.NetworkManager.NetworkManager,\n      event: Common.EventTarget.EventTargetEvent<SDK.NetworkManager.MessageGeneratedEvent>): void {\n    const {message, warning, requestId} = event.data;\n    const consoleMessage = new SDK.ConsoleModel.ConsoleMessage(\n        networkManager.target().model(SDK.RuntimeModel.RuntimeModel), Protocol.Log.LogEntrySource.Network,\n        warning ? Protocol.Log.LogEntryLevel.Warning : Protocol.Log.LogEntryLevel.Info, message);\n    this.associateConsoleMessageWithRequest(consoleMessage, requestId);\n    SDK.ConsoleModel.ConsoleModel.instance().addMessage(consoleMessage);\n  }\n\n  associateConsoleMessageWithRequest(consoleMessage: SDK.ConsoleModel.ConsoleMessage, requestId: string): void {\n    const target = consoleMessage.target();\n    const networkManager = target ? target.model(SDK.NetworkManager.NetworkManager) : null;\n    if (!networkManager) {\n      return;\n    }\n    const request = this.requestByManagerAndId(networkManager, requestId);\n    if (!request) {\n      return;\n    }\n    consoleMessageToRequest.set(consoleMessage, request);\n    const initiator = request.initiator();\n    if (initiator) {\n      consoleMessage.stackTrace = initiator.stack || undefined;\n      if (initiator.url) {\n        consoleMessage.url = initiator.url as Platform.DevToolsPath.UrlString;\n        consoleMessage.line = initiator.lineNumber || 0;\n      }\n    }\n  }\n\n  static requestForConsoleMessage(consoleMessage: SDK.ConsoleModel.ConsoleMessage): SDK.NetworkRequest.NetworkRequest\n      |null {\n    return consoleMessageToRequest.get(consoleMessage) || null;\n  }\n\n  requestsForId(requestId: string): SDK.NetworkRequest.NetworkRequest[] {\n    return this.requestsMap.get(requestId) || [];\n  }\n}\n\nconst consoleMessageToRequest = new WeakMap<SDK.ConsoleModel.ConsoleMessage, SDK.NetworkRequest.NetworkRequest>();\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  Reset = 'Reset',\n  RequestAdded = 'RequestAdded',\n  RequestUpdated = 'RequestUpdated',\n}\n\nexport interface ResetEvent {\n  clearIfPreserved: boolean;\n}\n\nexport type EventTypes = {\n  [Events.Reset]: ResetEvent,\n  [Events.RequestAdded]: SDK.NetworkRequest.NetworkRequest,\n  [Events.RequestUpdated]: SDK.NetworkRequest.NetworkRequest,\n};\n\nexport interface InitiatorData {\n  info: InitiatorInfo|null;\n  chain: Set<SDK.NetworkRequest.NetworkRequest>|null;\n  request?: SDK.NetworkRequest.NetworkRequest|null;\n}\n\nexport interface InitiatorGraph {\n  initiators: Set<SDK.NetworkRequest.NetworkRequest>;\n  initiated: Map<SDK.NetworkRequest.NetworkRequest, SDK.NetworkRequest.NetworkRequest>;\n}\n\nexport interface InitiatorInfo {\n  type: SDK.NetworkRequest.InitiatorType;\n  // generally this is a url but can also contain \"<anonymous>\"\n  url: Platform.DevToolsPath.UrlString;\n  lineNumber: number;\n  columnNumber: number;\n  scriptId: Protocol.Runtime.ScriptId|null;\n  stack: Protocol.Runtime.StackTrace|null;\n  initiatorRequest: SDK.NetworkRequest.NetworkRequest|null;\n}\n"],
  "mappings": "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",
  "names": []
}
