{
  "version": 3,
  "sources": ["../../../../../../front_end/models/har/Writer.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2007, 2008 Apple Inc.  All rights reserved.\n * Copyright (C) 2008, 2009 Anthony Ricaud <rik@webkit.org>\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport type {EntryDTO} from './Log.js';\nimport {Log} from './Log.js';\n\nconst UIStrings = {\n  /**\n  *@description Title of progress in harwriter of the network panel\n  */\n  collectingContent: 'Collecting content\u2026',\n  /**\n  *@description Text to indicate DevTools is writing to a file\n  */\n  writingFile: 'Writing file\u2026',\n};\nconst str_ = i18n.i18n.registerUIStrings('models/har/Writer.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class Writer {\n  static async write(\n      stream: Common.StringOutputStream.OutputStream, requests: SDK.NetworkRequest.NetworkRequest[],\n      progress: Common.Progress.Progress): Promise<void> {\n    const compositeProgress = new Common.Progress.CompositeProgress(progress);\n\n    const content = await Writer.harStringForRequests(requests, compositeProgress);\n    if (progress.isCanceled()) {\n      return;\n    }\n    await Writer.writeToStream(stream, compositeProgress, content);\n  }\n\n  static async harStringForRequests(\n      requests: SDK.NetworkRequest.NetworkRequest[],\n      compositeProgress: Common.Progress.CompositeProgress): Promise<string> {\n    const progress = compositeProgress.createSubProgress();\n    progress.setTitle(i18nString(UIStrings.collectingContent));\n    progress.setTotalWork(requests.length);\n\n    // Sort by issueTime because this is recorded as startedDateTime in HAR logs.\n    requests.sort((reqA, reqB) => reqA.issueTime() - reqB.issueTime());\n    const harLog = await Log.build(requests);\n    const promises = [];\n    for (let i = 0; i < requests.length; i++) {\n      const promise = requests[i].contentData();\n      promises.push(promise.then(contentLoaded.bind(null, harLog.entries[i])));\n    }\n\n    await Promise.all(promises);\n    progress.done();\n\n    if (progress.isCanceled()) {\n      return '';\n    }\n    return JSON.stringify({log: harLog}, null, jsonIndent);\n\n    function isValidCharacter(codePoint: number): boolean {\n      // Excludes non-characters (U+FDD0..U+FDEF, and all codepoints ending in\n      // 0xFFFE or 0xFFFF) from the set of valid code points.\n      return codePoint < 0xD800 || (codePoint >= 0xE000 && codePoint < 0xFDD0) ||\n          (codePoint > 0xFDEF && codePoint <= 0x10FFFF && (codePoint & 0xFFFE) !== 0xFFFE);\n    }\n\n    function needsEncoding(content: string): boolean {\n      for (let i = 0; i < content.length; i++) {\n        if (!isValidCharacter(content.charCodeAt(i))) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    function contentLoaded(entry: EntryDTO, contentData: SDK.NetworkRequest.ContentData): void {\n      progress.incrementWorked();\n      let encoded: true|boolean = contentData.encoded;\n      if (contentData.content !== null) {\n        let content: string = contentData.content;\n        if (content && !encoded && needsEncoding(content)) {\n          content = Platform.StringUtilities.toBase64(content);\n          encoded = true;\n        }\n        entry.response.content.text = content;\n      }\n      if (encoded) {\n        entry.response.content.encoding = 'base64';\n      }\n    }\n  }\n\n  static async writeToStream(\n      stream: Common.StringOutputStream.OutputStream, compositeProgress: Common.Progress.CompositeProgress,\n      fileContent: string): Promise<void> {\n    const progress = compositeProgress.createSubProgress();\n    progress.setTitle(i18nString(UIStrings.writingFile));\n    progress.setTotalWork(fileContent.length);\n    for (let i = 0; i < fileContent.length && !progress.isCanceled(); i += chunkSize) {\n      const chunk = fileContent.substr(i, chunkSize);\n      await stream.write(chunk);\n      progress.incrementWorked(chunk.length);\n    }\n    progress.done();\n  }\n}\n\nexport const jsonIndent = 2;\nexport const chunkSize = 100000;\n"],
  "mappings": "AAkCA;AACA;AACA;AAGA;AAEA,MAAM,YAAY;AAAA,EAIhB,mBAAmB;AAAA,EAInB,aAAa;AAAA;AAEf,MAAM,OAAO,KAAK,KAAK,kBAAkB,wBAAwB;AACjE,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AACzD,oBAAa;AAAA,eACL,MACT,QAAgD,UAChD,UAAmD;AACrD,UAAM,oBAAoB,IAAI,OAAO,SAAS,kBAAkB;AAEhE,UAAM,UAAU,MAAM,OAAO,qBAAqB,UAAU;AAC5D,QAAI,SAAS,cAAc;AACzB;AAAA;AAEF,UAAM,OAAO,cAAc,QAAQ,mBAAmB;AAAA;AAAA,eAG3C,qBACT,UACA,mBAAuE;AACzE,UAAM,WAAW,kBAAkB;AACnC,aAAS,SAAS,WAAW,UAAU;AACvC,aAAS,aAAa,SAAS;AAG/B,aAAS,KAAK,CAAC,MAAM,SAAS,KAAK,cAAc,KAAK;AACtD,UAAM,SAAS,MAAM,IAAI,MAAM;AAC/B,UAAM,WAAW;AACjB,aAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,YAAM,UAAU,SAAS,GAAG;AAC5B,eAAS,KAAK,QAAQ,KAAK,cAAc,KAAK,MAAM,OAAO,QAAQ;AAAA;AAGrE,UAAM,QAAQ,IAAI;AAClB,aAAS;AAET,QAAI,SAAS,cAAc;AACzB,aAAO;AAAA;AAET,WAAO,KAAK,UAAU,EAAC,KAAK,UAAS,MAAM;AAE3C,8BAA0B,WAA4B;AAGpD,aAAO,YAAY,SAAW,aAAa,SAAU,YAAY,SAC5D,YAAY,SAAU,aAAa,WAAa,aAAY,WAAY;AAAA;AAG/E,2BAAuB,SAA0B;AAC/C,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,YAAI,CAAC,iBAAiB,QAAQ,WAAW,KAAK;AAC5C,iBAAO;AAAA;AAAA;AAGX,aAAO;AAAA;AAGT,2BAAuB,OAAiB,aAAmD;AACzF,eAAS;AACT,UAAI,UAAwB,YAAY;AACxC,UAAI,YAAY,YAAY,MAAM;AAChC,YAAI,UAAkB,YAAY;AAClC,YAAI,WAAW,CAAC,WAAW,cAAc,UAAU;AACjD,oBAAU,SAAS,gBAAgB,SAAS;AAC5C,oBAAU;AAAA;AAEZ,cAAM,SAAS,QAAQ,OAAO;AAAA;AAEhC,UAAI,SAAS;AACX,cAAM,SAAS,QAAQ,WAAW;AAAA;AAAA;AAAA;AAAA,eAK3B,cACT,QAAgD,mBAChD,aAAoC;AACtC,UAAM,WAAW,kBAAkB;AACnC,aAAS,SAAS,WAAW,UAAU;AACvC,aAAS,aAAa,YAAY;AAClC,aAAS,IAAI,GAAG,IAAI,YAAY,UAAU,CAAC,SAAS,cAAc,KAAK,WAAW;AAChF,YAAM,QAAQ,YAAY,OAAO,GAAG;AACpC,YAAM,OAAO,MAAM;AACnB,eAAS,gBAAgB,MAAM;AAAA;AAEjC,aAAS;AAAA;AAAA;AAIN,aAAM,aAAa;AACnB,aAAM,YAAY;",
  "names": []
}
