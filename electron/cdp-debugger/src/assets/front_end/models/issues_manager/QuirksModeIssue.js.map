{
  "version": 3,
  "sources": ["../../../../../../front_end/models/issues_manager/QuirksModeIssue.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport {Issue, IssueCategory, IssueKind} from './Issue.js';\nimport type {MarkdownIssueDescription} from './MarkdownIssueDescription.js';\n\nconst UIStrings = {\n  /**\n  *@description Link title for the Quirks Mode issue in the Issues panel\n  */\n  documentCompatibilityMode: 'Document compatibility mode',\n};\nconst str_ = i18n.i18n.registerUIStrings('models/issues_manager/QuirksModeIssue.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class QuirksModeIssue extends Issue {\n  #issueDetails: Protocol.Audits.QuirksModeIssueDetails;\n\n  constructor(issueDetails: Protocol.Audits.QuirksModeIssueDetails, issuesModel: SDK.IssuesModel.IssuesModel) {\n    const mode = issueDetails.isLimitedQuirksMode ? 'LimitedQuirksMode' : 'QuirksMode';\n    const umaCode = [Protocol.Audits.InspectorIssueCode.QuirksModeIssue, mode].join('::');\n    super({code: Protocol.Audits.InspectorIssueCode.QuirksModeIssue, umaCode}, issuesModel);\n    this.#issueDetails = issueDetails;\n  }\n\n  primaryKey(): string {\n    return `${this.code()}-(${this.#issueDetails.documentNodeId})-(${this.#issueDetails.url})`;\n  }\n\n  getCategory(): IssueCategory {\n    return IssueCategory.QuirksMode;\n  }\n\n  details(): Protocol.Audits.QuirksModeIssueDetails {\n    return this.#issueDetails;\n  }\n\n  getDescription(): MarkdownIssueDescription {\n    return {\n      file: 'CompatibilityModeQuirks.md',\n      links: [\n        {\n          link: 'https://web.dev/doctype/',\n          linkTitle: i18nString(UIStrings.documentCompatibilityMode),\n        },\n      ],\n    };\n  }\n\n  getKind(): IssueKind {\n    return IssueKind.Improvement;\n  }\n\n  static fromInspectorIssue(issuesModel: SDK.IssuesModel.IssuesModel, inspectorIssue: Protocol.Audits.InspectorIssue):\n      QuirksModeIssue[] {\n    const quirksModeIssueDetails = inspectorIssue.details.quirksModeIssueDetails;\n    if (!quirksModeIssueDetails) {\n      console.warn('Quirks Mode issue without details received.');\n      return [];\n    }\n    return [new QuirksModeIssue(quirksModeIssueDetails, issuesModel)];\n  }\n}\n"],
  "mappings": "AAIA;AAEA;AAEA;AAGA,MAAM,YAAY;AAAA,EAIhB,2BAA2B;AAAA;AAE7B,MAAM,OAAO,KAAK,KAAK,kBAAkB,4CAA4C;AACrF,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAEzD,qCAA8B,MAAM;AAAA;AAAA,EAGzC,YAAY,cAAsD,aAA0C;AAC1G,UAAM,OAAO,aAAa,sBAAsB,sBAAsB;AACtE,UAAM,UAAU,CAAC,SAAS,OAAO,mBAAmB,iBAAiB,MAAM,KAAK;AAChF,UAAM,EAAC,MAAM,SAAS,OAAO,mBAAmB,iBAAiB,WAAU;AAC3E,yBAAqB;AAAA;AAAA,EAGvB,aAAqB;AACnB,WAAO,GAAG,KAAK,WAAW,mBAAmB,oBAAoB,mBAAmB;AAAA;AAAA,EAGtF,cAA6B;AAC3B,WAAO,cAAc;AAAA;AAAA,EAGvB,UAAkD;AAChD,WAAO;AAAA;AAAA,EAGT,iBAA2C;AACzC,WAAO;AAAA,MACL,MAAM;AAAA,MACN,OAAO;AAAA,QACL;AAAA,UACE,MAAM;AAAA,UACN,WAAW,WAAW,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,EAMxC,UAAqB;AACnB,WAAO,UAAU;AAAA;AAAA,SAGZ,mBAAmB,aAA0C,gBAC9C;AACpB,UAAM,yBAAyB,eAAe,QAAQ;AACtD,QAAI,CAAC,wBAAwB;AAC3B,cAAQ,KAAK;AACb,aAAO;AAAA;AAET,WAAO,CAAC,IAAI,gBAAgB,wBAAwB;AAAA;AAAA;",
  "names": []
}
