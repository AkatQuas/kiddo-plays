{
  "version": 3,
  "sources": ["../../../../../../front_end/models/issues_manager/MixedContentIssue.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport {Issue, IssueCategory, IssueKind} from './Issue.js';\nimport type {MarkdownIssueDescription} from './MarkdownIssueDescription.js';\n\nconst UIStrings = {\n  /**\n  *@description Label for the link for Mixed Content Issues\n  */\n  preventingMixedContent: 'Preventing mixed content',\n};\nconst str_ = i18n.i18n.registerUIStrings('models/issues_manager/MixedContentIssue.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class MixedContentIssue extends Issue {\n  #issueDetails: Protocol.Audits.MixedContentIssueDetails;\n\n  constructor(issueDetails: Protocol.Audits.MixedContentIssueDetails, issuesModel: SDK.IssuesModel.IssuesModel) {\n    super(Protocol.Audits.InspectorIssueCode.MixedContentIssue, issuesModel);\n    this.#issueDetails = issueDetails;\n  }\n\n  requests(): Iterable<Protocol.Audits.AffectedRequest> {\n    if (this.#issueDetails.request) {\n      return [this.#issueDetails.request];\n    }\n    return [];\n  }\n\n  getDetails(): Protocol.Audits.MixedContentIssueDetails {\n    return this.#issueDetails;\n  }\n\n  getCategory(): IssueCategory {\n    return IssueCategory.MixedContent;\n  }\n\n  getDescription(): MarkdownIssueDescription {\n    return {\n      file: 'mixedContent.md',\n      links:\n          [{link: 'https://web.dev/what-is-mixed-content/', linkTitle: i18nString(UIStrings.preventingMixedContent)}],\n    };\n  }\n\n  primaryKey(): string {\n    return JSON.stringify(this.#issueDetails);\n  }\n\n  getKind(): IssueKind {\n    switch (this.#issueDetails.resolutionStatus) {\n      case Protocol.Audits.MixedContentResolutionStatus.MixedContentAutomaticallyUpgraded:\n        return IssueKind.Improvement;\n      case Protocol.Audits.MixedContentResolutionStatus.MixedContentBlocked:\n        return IssueKind.PageError;\n      case Protocol.Audits.MixedContentResolutionStatus.MixedContentWarning:\n        return IssueKind.Improvement;\n    }\n  }\n\n  static fromInspectorIssue(issuesModel: SDK.IssuesModel.IssuesModel, inspectorIssue: Protocol.Audits.InspectorIssue):\n      MixedContentIssue[] {\n    const mixedContentDetails = inspectorIssue.details.mixedContentIssueDetails;\n    if (!mixedContentDetails) {\n      console.warn('Mixed content issue without details received.');\n      return [];\n    }\n    return [new MixedContentIssue(mixedContentDetails, issuesModel)];\n  }\n}\n"],
  "mappings": "AAIA;AAEA;AAEA;AAGA,MAAM,YAAY;AAAA,EAIhB,wBAAwB;AAAA;AAE1B,MAAM,OAAO,KAAK,KAAK,kBAAkB,8CAA8C;AACvF,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAEzD,uCAAgC,MAAM;AAAA;AAAA,EAG3C,YAAY,cAAwD,aAA0C;AAC5G,UAAM,SAAS,OAAO,mBAAmB,mBAAmB;AAC5D,yBAAqB;AAAA;AAAA,EAGvB,WAAsD;AACpD,QAAI,mBAAmB,SAAS;AAC9B,aAAO,CAAC,mBAAmB;AAAA;AAE7B,WAAO;AAAA;AAAA,EAGT,aAAuD;AACrD,WAAO;AAAA;AAAA,EAGT,cAA6B;AAC3B,WAAO,cAAc;AAAA;AAAA,EAGvB,iBAA2C;AACzC,WAAO;AAAA,MACL,MAAM;AAAA,MACN,OACI,CAAC,EAAC,MAAM,0CAA0C,WAAW,WAAW,UAAU;AAAA;AAAA;AAAA,EAI1F,aAAqB;AACnB,WAAO,KAAK,UAAU;AAAA;AAAA,EAGxB,UAAqB;AACnB,YAAQ,mBAAmB;AAAA,WACpB,SAAS,OAAO,6BAA6B;AAChD,eAAO,UAAU;AAAA,WACd,SAAS,OAAO,6BAA6B;AAChD,eAAO,UAAU;AAAA,WACd,SAAS,OAAO,6BAA6B;AAChD,eAAO,UAAU;AAAA;AAAA;AAAA,SAIhB,mBAAmB,aAA0C,gBAC5C;AACtB,UAAM,sBAAsB,eAAe,QAAQ;AACnD,QAAI,CAAC,qBAAqB;AACxB,cAAQ,KAAK;AACb,aAAO;AAAA;AAET,WAAO,CAAC,IAAI,kBAAkB,qBAAqB;AAAA;AAAA;",
  "names": []
}
