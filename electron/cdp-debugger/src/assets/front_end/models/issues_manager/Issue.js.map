{
  "version": 3,
  "sources": ["../../../../../../front_end/models/issues_manager/Issue.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport type {MarkdownIssueDescription} from './MarkdownIssueDescription.js';\n\nconst UIStrings = {\n  /**\n   *@description The kind of an issue (plural) (Issues are categorized into kinds).\n   */\n  improvements: 'Improvements',\n  /**\n   *@description The kind of an issue (plural) (Issues are categorized into kinds).\n   */\n  pageErrors: 'Page Errors',\n  /**\n   *@description The kind of an issue (plural) (Issues are categorized into kinds).\n   */\n  breakingChanges: 'Breaking Changes',\n  /**\n   *@description A description for a kind of issue we display in the issues tab.\n   */\n  pageErrorIssue: 'A page error issue: the page is not working correctly',\n  /**\n   *@description A description for a kind of issue we display in the issues tab.\n   */\n  breakingChangeIssue: 'A breaking change issue: the page may stop working in an upcoming version of Chrome',\n  /**\n   *@description A description for a kind of issue we display in the issues tab.\n   */\n  improvementIssue: 'An improvement issue: there is an opportunity to improve the page',\n};\nconst str_ = i18n.i18n.registerUIStrings('models/issues_manager/Issue.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n// eslint-disable-next-line rulesdir/const_enum\nexport enum IssueCategory {\n  CrossOriginEmbedderPolicy = 'CrossOriginEmbedderPolicy',\n  Generic = 'Generic',\n  MixedContent = 'MixedContent',\n  Cookie = 'Cookie',\n  HeavyAd = 'HeavyAd',\n  ContentSecurityPolicy = 'ContentSecurityPolicy',\n  TrustedWebActivity = 'TrustedWebActivity',\n  LowTextContrast = 'LowTextContrast',\n  Cors = 'Cors',\n  AttributionReporting = 'AttributionReporting',\n  QuirksMode = 'QuirksMode',\n  Other = 'Other',\n}\n\n// eslint-disable-next-line rulesdir/const_enum\nexport enum IssueKind {\n  /**\n   * Something is not working in the page right now. Issues of this kind need\n   * usually be fixed right away. They usually indicate that a Web API is being\n   * used in a wrong way, or that a network request was misconfigured.\n   */\n  PageError = 'PageError',\n  /**\n   * The page is using a Web API or relying on browser behavior that is going\n   * to change in the future. If possible, the message associated with issues\n   * of this kind should include a time when the behavior is going to change.\n   */\n  BreakingChange = 'BreakingChange',\n  /**\n   * Anything that can be improved about the page, but isn't urgent and doesn't\n   * impair functionality in a major way.\n   */\n  Improvement = 'Improvement',\n}\n\nexport function getIssueKindName(issueKind: IssueKind): Common.UIString.LocalizedString {\n  switch (issueKind) {\n    case IssueKind.BreakingChange:\n      return i18nString(UIStrings.breakingChanges);\n    case IssueKind.Improvement:\n      return i18nString(UIStrings.improvements);\n    case IssueKind.PageError:\n      return i18nString(UIStrings.pageErrors);\n  }\n}\n\nexport function getIssueKindDescription(issueKind: IssueKind): Common.UIString.LocalizedString {\n  switch (issueKind) {\n    case IssueKind.PageError:\n      return i18nString(UIStrings.pageErrorIssue);\n    case IssueKind.BreakingChange:\n      return i18nString(UIStrings.breakingChangeIssue);\n    case IssueKind.Improvement:\n      return i18nString(UIStrings.improvementIssue);\n  }\n}\n\n/**\n * Union two issue kinds for issue aggregation. The idea is to show the most\n * important kind on aggregated issues that union issues of different kinds.\n */\nexport function unionIssueKind(a: IssueKind, b: IssueKind): IssueKind {\n  if (a === IssueKind.PageError || b === IssueKind.PageError) {\n    return IssueKind.PageError;\n  }\n  if (a === IssueKind.BreakingChange || b === IssueKind.BreakingChange) {\n    return IssueKind.BreakingChange;\n  }\n  return IssueKind.Improvement;\n}\n\nexport function getShowThirdPartyIssuesSetting(): Common.Settings.Setting<boolean> {\n  return Common.Settings.Settings.instance().createSetting('showThirdPartyIssues', false);\n}\n\nexport interface AffectedElement {\n  backendNodeId: Protocol.DOM.BackendNodeId;\n  nodeName: string;\n  target: SDK.Target.Target|null;\n}\n\nexport abstract class Issue<IssueCode extends string = string> {\n  #issueCode: IssueCode;\n  #issuesModel: SDK.IssuesModel.IssuesModel|null;\n  protected issueId: Protocol.Audits.IssueId|undefined = undefined;\n  #hidden: boolean;\n\n  constructor(\n      code: IssueCode|{code: IssueCode, umaCode: string}, issuesModel: SDK.IssuesModel.IssuesModel|null = null,\n      issueId?: Protocol.Audits.IssueId) {\n    this.#issueCode = typeof code === 'object' ? code.code : code;\n    this.#issuesModel = issuesModel;\n    this.issueId = issueId;\n    Host.userMetrics.issueCreated(typeof code === 'string' ? code : code.umaCode);\n    this.#hidden = false;\n  }\n\n  code(): IssueCode {\n    return this.#issueCode;\n  }\n\n  abstract primaryKey(): string;\n  abstract getDescription(): MarkdownIssueDescription|null;\n  abstract getCategory(): IssueCategory;\n  abstract getKind(): IssueKind;\n\n  getBlockedByResponseDetails(): Iterable<Protocol.Audits.BlockedByResponseIssueDetails> {\n    return [];\n  }\n\n  cookies(): Iterable<Protocol.Audits.AffectedCookie> {\n    return [];\n  }\n\n  rawCookieLines(): Iterable<string> {\n    return [];\n  }\n\n  elements(): Iterable<AffectedElement> {\n    return [];\n  }\n\n  requests(): Iterable<Protocol.Audits.AffectedRequest> {\n    return [];\n  }\n\n  sources(): Iterable<Protocol.Audits.SourceCodeLocation> {\n    return [];\n  }\n\n  isAssociatedWithRequestId(requestId: string): boolean {\n    for (const request of this.requests()) {\n      if (request.requestId === requestId) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * The model might be unavailable or belong to a target that has already been disposed.\n   */\n  model(): SDK.IssuesModel.IssuesModel|null {\n    return this.#issuesModel;\n  }\n\n  isCausedByThirdParty(): boolean {\n    return false;\n  }\n\n  getIssueId(): Protocol.Audits.IssueId|undefined {\n    return this.issueId;\n  }\n\n  isHidden(): boolean {\n    return this.#hidden;\n  }\n\n  setHidden(hidden: boolean): void {\n    this.#hidden = hidden;\n  }\n}\n\nexport function toZeroBasedLocation(location: Protocol.Audits.SourceCodeLocation|undefined): {\n  url: Platform.DevToolsPath.UrlString,\n  scriptId: Protocol.Runtime.ScriptId|undefined,\n  lineNumber: number,\n  columnNumber: number|undefined,\n}|undefined {\n  if (!location) {\n    return undefined;\n  }\n  return {\n    url: location.url as Platform.DevToolsPath.UrlString,\n    scriptId: location.scriptId,\n    lineNumber: location.lineNumber,\n    columnNumber: location.columnNumber === 0 ? undefined : location.columnNumber - 1,\n  };\n}\n"],
  "mappings": "AAIA;AACA;AACA;AAOA,MAAM,YAAY;AAAA,EAIhB,cAAc;AAAA,EAId,YAAY;AAAA,EAIZ,iBAAiB;AAAA,EAIjB,gBAAgB;AAAA,EAIhB,qBAAqB;AAAA,EAIrB,kBAAkB;AAAA;AAEpB,MAAM,OAAO,KAAK,KAAK,kBAAkB,kCAAkC;AAC3E,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAGzD,WAAK,gBAAL,kBAAK,mBAAL;AACL,gDAA4B;AAC5B,8BAAU;AACV,mCAAe;AACf,6BAAS;AACT,8BAAU;AACV,4CAAwB;AACxB,yCAAqB;AACrB,sCAAkB;AAClB,2BAAO;AACP,2CAAuB;AACvB,iCAAa;AACb,4BAAQ;AAZE;AAAA;AAgBL,WAAK,YAAL,kBAAK,eAAL;AAML,4BAAY;AAMZ,iCAAiB;AAKjB,8BAAc;AAjBJ;AAAA;AAoBL,iCAA0B,WAAuD;AACtF,UAAQ;AAAA,SACD;AACH,aAAO,WAAW,UAAU;AAAA,SACzB;AACH,aAAO,WAAW,UAAU;AAAA,SACzB;AACH,aAAO,WAAW,UAAU;AAAA;AAAA;AAI3B,wCAAiC,WAAuD;AAC7F,UAAQ;AAAA,SACD;AACH,aAAO,WAAW,UAAU;AAAA,SACzB;AACH,aAAO,WAAW,UAAU;AAAA,SACzB;AACH,aAAO,WAAW,UAAU;AAAA;AAAA;AAQ3B,+BAAwB,GAAc,GAAyB;AACpE,MAAI,MAAM,+BAAuB,MAAM,6BAAqB;AAC1D,WAAO;AAAA;AAET,MAAI,MAAM,yCAA4B,MAAM,uCAA0B;AACpE,WAAO;AAAA;AAET,SAAO;AAAA;AAGF,iDAA4E;AACjF,SAAO,OAAO,SAAS,SAAS,WAAW,cAAc,wBAAwB;AAAA;AAS5E,mBAAwD;AAAA;AAAA;AAAA,EAGnD,UAA6C;AAAA;AAAA,EAGvD,YACI,MAAoD,cAAgD,MACpG,SAAmC;AACrC,sBAAkB,OAAO,SAAS,WAAW,KAAK,OAAO;AACzD,wBAAoB;AACpB,SAAK,UAAU;AACf,SAAK,YAAY,aAAa,OAAO,SAAS,WAAW,OAAO,KAAK;AACrE,mBAAe;AAAA;AAAA,EAGjB,OAAkB;AAChB,WAAO;AAAA;AAAA,EAQT,8BAAuF;AACrF,WAAO;AAAA;AAAA,EAGT,UAAoD;AAClD,WAAO;AAAA;AAAA,EAGT,iBAAmC;AACjC,WAAO;AAAA;AAAA,EAGT,WAAsC;AACpC,WAAO;AAAA;AAAA,EAGT,WAAsD;AACpD,WAAO;AAAA;AAAA,EAGT,UAAwD;AACtD,WAAO;AAAA;AAAA,EAGT,0BAA0B,WAA4B;AACpD,eAAW,WAAW,KAAK,YAAY;AACrC,UAAI,QAAQ,cAAc,WAAW;AACnC,eAAO;AAAA;AAAA;AAGX,WAAO;AAAA;AAAA,EAMT,QAA0C;AACxC,WAAO;AAAA;AAAA,EAGT,uBAAgC;AAC9B,WAAO;AAAA;AAAA,EAGT,aAAgD;AAC9C,WAAO,KAAK;AAAA;AAAA,EAGd,WAAoB;AAClB,WAAO;AAAA;AAAA,EAGT,UAAU,QAAuB;AAC/B,mBAAe;AAAA;AAAA;AAIZ,oCAA6B,UAKxB;AACV,MAAI,CAAC,UAAU;AACb,WAAO;AAAA;AAET,SAAO;AAAA,IACL,KAAK,SAAS;AAAA,IACd,UAAU,SAAS;AAAA,IACnB,YAAY,SAAS;AAAA,IACrB,cAAc,SAAS,iBAAiB,IAAI,SAAY,SAAS,eAAe;AAAA;AAAA;",
  "names": []
}
