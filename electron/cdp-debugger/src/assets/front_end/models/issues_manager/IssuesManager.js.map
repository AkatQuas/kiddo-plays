{
  "version": 3,
  "sources": ["../../../../../../front_end/models/issues_manager/IssuesManager.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport {AttributionReportingIssue} from './AttributionReportingIssue.js';\nimport {ClientHintIssue} from './ClientHintIssue.js';\nimport {ContentSecurityPolicyIssue} from './ContentSecurityPolicyIssue.js';\nimport {CorsIssue} from './CorsIssue.js';\nimport {CrossOriginEmbedderPolicyIssue, isCrossOriginEmbedderPolicyIssue} from './CrossOriginEmbedderPolicyIssue.js';\nimport {DeprecationIssue} from './DeprecationIssue.js';\nimport {FederatedAuthRequestIssue} from './FederatedAuthRequestIssue.js';\nimport {GenericIssue} from './GenericIssue.js';\nimport {HeavyAdIssue} from './HeavyAdIssue.js';\nimport type {Issue, IssueKind} from './Issue.js';\nimport {Events} from './IssuesManagerEvents.js';\nimport {LowTextContrastIssue} from './LowTextContrastIssue.js';\nimport {MixedContentIssue} from './MixedContentIssue.js';\nimport {NavigatorUserAgentIssue} from './NavigatorUserAgentIssue.js';\nimport {QuirksModeIssue} from './QuirksModeIssue.js';\nimport {CookieIssue} from './CookieIssue.js';\nimport {SharedArrayBufferIssue} from './SharedArrayBufferIssue.js';\nimport {SourceFrameIssuesManager} from './SourceFrameIssuesManager.js';\nimport {TrustedWebActivityIssue} from './TrustedWebActivityIssue.js';\n\nexport {Events} from './IssuesManagerEvents.js';\n\nlet issuesManagerInstance: IssuesManager|null = null;\n\nfunction createIssuesForBlockedByResponseIssue(\n    issuesModel: SDK.IssuesModel.IssuesModel,\n    inspectorIssue: Protocol.Audits.InspectorIssue): CrossOriginEmbedderPolicyIssue[] {\n  const blockedByResponseIssueDetails = inspectorIssue.details.blockedByResponseIssueDetails;\n  if (!blockedByResponseIssueDetails) {\n    console.warn('BlockedByResponse issue without details received.');\n    return [];\n  }\n  if (isCrossOriginEmbedderPolicyIssue(blockedByResponseIssueDetails.reason)) {\n    return [new CrossOriginEmbedderPolicyIssue(blockedByResponseIssueDetails, issuesModel)];\n  }\n  return [];\n}\n\nconst issueCodeHandlers = new Map<\n    Protocol.Audits.InspectorIssueCode,\n    (model: SDK.IssuesModel.IssuesModel, inspectorIssue: Protocol.Audits.InspectorIssue) => Issue[]>([\n  [\n    Protocol.Audits.InspectorIssueCode.CookieIssue,\n    CookieIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.MixedContentIssue,\n    MixedContentIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.HeavyAdIssue,\n    HeavyAdIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.ContentSecurityPolicyIssue,\n    ContentSecurityPolicyIssue.fromInspectorIssue,\n  ],\n  [Protocol.Audits.InspectorIssueCode.BlockedByResponseIssue, createIssuesForBlockedByResponseIssue],\n  [\n    Protocol.Audits.InspectorIssueCode.SharedArrayBufferIssue,\n    SharedArrayBufferIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.TrustedWebActivityIssue,\n    TrustedWebActivityIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.LowTextContrastIssue,\n    LowTextContrastIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.CorsIssue,\n    CorsIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.QuirksModeIssue,\n    QuirksModeIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.NavigatorUserAgentIssue,\n    NavigatorUserAgentIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.AttributionReportingIssue,\n    AttributionReportingIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.GenericIssue,\n    GenericIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.DeprecationIssue,\n    DeprecationIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.ClientHintIssue,\n    ClientHintIssue.fromInspectorIssue,\n  ],\n  [\n    Protocol.Audits.InspectorIssueCode.FederatedAuthRequestIssue,\n    FederatedAuthRequestIssue.fromInspectorIssue,\n  ],\n]);\n\n/**\n * Each issue reported by the backend can result in multiple `Issue` instances.\n * Handlers are simple functions hard-coded into a map.\n */\nfunction createIssuesFromProtocolIssue(\n    issuesModel: SDK.IssuesModel.IssuesModel, inspectorIssue: Protocol.Audits.InspectorIssue): Issue[] {\n  const handler = issueCodeHandlers.get(inspectorIssue.code);\n  if (handler) {\n    return handler(issuesModel, inspectorIssue);\n  }\n  console.warn(`No handler registered for issue code ${inspectorIssue.code}`);\n  return [];\n}\n\nexport interface IssuesManagerCreationOptions {\n  forceNew: boolean;\n  /** Throw an error if this is not the first instance created */\n  ensureFirst: boolean;\n  showThirdPartyIssuesSetting?: Common.Settings.Setting<boolean>;\n  hideIssueSetting?: Common.Settings.Setting<HideIssueMenuSetting>;\n}\n\nexport type HideIssueMenuSetting = {\n  [x: string]: IssueStatus,\n};\n\nexport const enum IssueStatus {\n  Hidden = 'Hidden',\n  Unhidden = 'Unhidden',\n}\n\nexport function defaultHideIssueByCodeSetting(): HideIssueMenuSetting {\n  const setting: HideIssueMenuSetting = {};\n  return setting;\n}\n\nexport function getHideIssueByCodeSetting(): Common.Settings.Setting<HideIssueMenuSetting> {\n  return Common.Settings.Settings.instance().createSetting(\n      'HideIssueByCodeSetting-Experiment-2021', defaultHideIssueByCodeSetting());\n}\n\n/**\n * The `IssuesManager` is the central storage for issues. It collects issues from all the\n * `IssuesModel` instances in the page, and deduplicates them wrt their primary key.\n * It also takes care of clearing the issues when it sees a main-frame navigated event.\n * Any client can subscribe to the events provided, and/or query the issues via the public\n * interface.\n *\n * Additionally, the `IssuesManager` can filter Issues. All Issues are stored, but only\n * Issues that are accepted by the filter cause events to be fired or are returned by\n * `IssuesManager#issues()`.\n */\nexport class IssuesManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> implements\n    SDK.TargetManager.SDKModelObserver<SDK.IssuesModel.IssuesModel> {\n  #eventListeners = new WeakMap<SDK.IssuesModel.IssuesModel, Common.EventTarget.EventDescriptor>();\n  #allIssues = new Map<string, Issue>();\n  #filteredIssues = new Map<string, Issue>();\n  #issueCounts = new Map<IssueKind, number>();\n  #hiddenIssueCount = new Map<IssueKind, number>();\n  #hasSeenTopFrameNavigated = false;\n  #issuesById: Map<string, Issue> = new Map();\n\n  constructor(\n      private readonly showThirdPartyIssuesSetting?: Common.Settings.Setting<boolean>,\n      private readonly hideIssueSetting?: Common.Settings.Setting<HideIssueMenuSetting>) {\n    super();\n    new SourceFrameIssuesManager(this);\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.IssuesModel.IssuesModel, this);\n    SDK.FrameManager.FrameManager.instance().addEventListener(\n        SDK.FrameManager.Events.TopFrameNavigated, this.#onTopFrameNavigated, this);\n    SDK.FrameManager.FrameManager.instance().addEventListener(\n        SDK.FrameManager.Events.FrameAddedToTarget, this.#onFrameAddedToTarget, this);\n\n    // issueFilter uses the 'showThirdPartyIssues' setting. Clients of IssuesManager need\n    // a full update when the setting changes to get an up-to-date issues list.\n    this.showThirdPartyIssuesSetting?.addChangeListener(() => this.#updateFilteredIssues());\n    if (Root.Runtime.experiments.isEnabled('hideIssuesFeature')) {\n      this.hideIssueSetting?.addChangeListener(() => this.#updateFilteredIssues());\n    }\n  }\n\n  static instance(opts: IssuesManagerCreationOptions = {\n    forceNew: false,\n    ensureFirst: false,\n  }): IssuesManager {\n    if (issuesManagerInstance && opts.ensureFirst) {\n      throw new Error(\n          'IssuesManager was already created. Either set \"ensureFirst\" to false or make sure that this invocation is really the first one.');\n    }\n\n    if (!issuesManagerInstance || opts.forceNew) {\n      issuesManagerInstance = new IssuesManager(opts.showThirdPartyIssuesSetting, opts.hideIssueSetting);\n    }\n\n    return issuesManagerInstance;\n  }\n\n  static removeInstance(): void {\n    issuesManagerInstance = null;\n  }\n\n  /**\n   * Once we have seen at least one `TopFrameNavigated` event, we can be reasonably sure\n   * that we also collected issues that were reported during the navigation to the current\n   * page. If we haven't seen a main frame navigated, we might have missed issues that arose\n   * during navigation.\n   */\n  reloadForAccurateInformationRequired(): boolean {\n    return !this.#hasSeenTopFrameNavigated;\n  }\n\n  #onTopFrameNavigated(event: Common.EventTarget.EventTargetEvent<{frame: SDK.ResourceTreeModel.ResourceTreeFrame}>):\n      void {\n    const {frame} = event.data;\n    const keptIssues = new Map<string, Issue>();\n    for (const [key, issue] of this.#allIssues.entries()) {\n      if (issue.isAssociatedWithRequestId(frame.loaderId)) {\n        keptIssues.set(key, issue);\n      }\n    }\n    this.#allIssues = keptIssues;\n    this.#hasSeenTopFrameNavigated = true;\n    this.#updateFilteredIssues();\n  }\n\n  #onFrameAddedToTarget(event: Common.EventTarget.EventTargetEvent<{frame: SDK.ResourceTreeModel.ResourceTreeFrame}>):\n      void {\n    const {frame} = event.data;\n    // Determining third-party status usually requires the registered domain of the top frame.\n    // When DevTools is opened after navigation has completed, issues may be received\n    // before the top frame is available. Thus, we trigger a recalcuation of third-party-ness\n    // when we attach to the top frame.\n    if (frame.isTopFrame()) {\n      this.#updateFilteredIssues();\n    }\n  }\n\n  modelAdded(issuesModel: SDK.IssuesModel.IssuesModel): void {\n    const listener = issuesModel.addEventListener(SDK.IssuesModel.Events.IssueAdded, this.#onIssueAddedEvent, this);\n    this.#eventListeners.set(issuesModel, listener);\n  }\n\n  modelRemoved(issuesModel: SDK.IssuesModel.IssuesModel): void {\n    const listener = this.#eventListeners.get(issuesModel);\n    if (listener) {\n      Common.EventTarget.removeEventListeners([listener]);\n    }\n  }\n\n  #onIssueAddedEvent(event: Common.EventTarget.EventTargetEvent<SDK.IssuesModel.IssueAddedEvent>): void {\n    const {issuesModel, inspectorIssue} = event.data;\n    const issues = createIssuesFromProtocolIssue(issuesModel, inspectorIssue);\n    for (const issue of issues) {\n      this.addIssue(issuesModel, issue);\n    }\n  }\n\n  addIssue(issuesModel: SDK.IssuesModel.IssuesModel, issue: Issue): void {\n    // Ignore issues without proper description; they are invisible to the user and only cause confusion.\n    if (!issue.getDescription()) {\n      return;\n    }\n    const primaryKey = issue.primaryKey();\n    if (this.#allIssues.has(primaryKey)) {\n      return;\n    }\n    this.#allIssues.set(primaryKey, issue);\n\n    if (this.#issueFilter(issue)) {\n      this.#filteredIssues.set(primaryKey, issue);\n      this.#issueCounts.set(issue.getKind(), 1 + (this.#issueCounts.get(issue.getKind()) || 0));\n      const issueId = issue.getIssueId();\n      if (issueId) {\n        this.#issuesById.set(issueId, issue);\n      }\n      const values = this.hideIssueSetting?.get();\n      const hideIssuesFeature = Root.Runtime.experiments.isEnabled('hideIssuesFeature');\n      if (hideIssuesFeature) {\n        this.#updateIssueHiddenStatus(issue, values);\n      }\n      if (issue.isHidden()) {\n        this.#hiddenIssueCount.set(issue.getKind(), 1 + (this.#hiddenIssueCount.get(issue.getKind()) || 0));\n      }\n      this.dispatchEventToListeners(Events.IssueAdded, {issuesModel, issue});\n    }\n    // Always fire the \"count\" event even if the issue was filtered out.\n    // The result of `hasOnlyThirdPartyIssues` could still change.\n    this.dispatchEventToListeners(Events.IssuesCountUpdated);\n  }\n\n  issues(): Iterable<Issue> {\n    return this.#filteredIssues.values();\n  }\n\n  numberOfIssues(kind?: IssueKind): number {\n    if (kind) {\n      return (this.#issueCounts.get(kind) ?? 0) - this.numberOfHiddenIssues(kind);\n    }\n    return this.#filteredIssues.size - this.numberOfHiddenIssues();\n  }\n\n  numberOfHiddenIssues(kind?: IssueKind): number {\n    if (kind) {\n      return this.#hiddenIssueCount.get(kind) ?? 0;\n    }\n    let count = 0;\n    for (const num of this.#hiddenIssueCount.values()) {\n      count += num;\n    }\n    return count;\n  }\n\n  numberOfAllStoredIssues(): number {\n    return this.#allIssues.size;\n  }\n\n  #issueFilter(issue: Issue): boolean {\n    return this.showThirdPartyIssuesSetting?.get() || !issue.isCausedByThirdParty();\n  }\n\n  #updateIssueHiddenStatus(issue: Issue, values: HideIssueMenuSetting|undefined): void {\n    const code = issue.code();\n    // All issues are hidden via their code.\n    // For hiding we check whether the issue code is present and has a value of IssueStatus.Hidden\n    // assosciated with it. If all these conditions are met the issue is hidden.\n    // IssueStatus is set in hidden issues menu.\n    // In case a user wants to hide a specific issue, the issue code is added to \"code\" section\n    // of our setting and its value is set to IssueStatus.Hidden. Then issue then gets hidden.\n    if (values && values[code]) {\n      if (values[code] === IssueStatus.Hidden) {\n        issue.setHidden(true);\n        return;\n      }\n      issue.setHidden(false);\n      return;\n    }\n  }\n\n  #updateFilteredIssues(): void {\n    this.#filteredIssues.clear();\n    this.#issueCounts.clear();\n    this.#issuesById.clear();\n    this.#hiddenIssueCount.clear();\n    const values = this.hideIssueSetting?.get();\n    const hideIssuesFeature = Root.Runtime.experiments.isEnabled('hideIssuesFeature');\n    for (const [key, issue] of this.#allIssues) {\n      if (this.#issueFilter(issue)) {\n        if (hideIssuesFeature) {\n          this.#updateIssueHiddenStatus(issue, values);\n        }\n        this.#filteredIssues.set(key, issue);\n        this.#issueCounts.set(issue.getKind(), 1 + (this.#issueCounts.get(issue.getKind()) ?? 0));\n        if (issue.isHidden()) {\n          this.#hiddenIssueCount.set(issue.getKind(), 1 + (this.#hiddenIssueCount.get(issue.getKind()) || 0));\n        }\n        const issueId = issue.getIssueId();\n        if (issueId) {\n          this.#issuesById.set(issueId, issue);\n        }\n      }\n    }\n    this.dispatchEventToListeners(Events.FullUpdateRequired);\n    this.dispatchEventToListeners(Events.IssuesCountUpdated);\n  }\n\n  unhideAllIssues(): void {\n    for (const issue of this.#allIssues.values()) {\n      issue.setHidden(false);\n    }\n    this.hideIssueSetting?.set(defaultHideIssueByCodeSetting());\n  }\n\n  getIssueById(id: string): Issue|undefined {\n    return this.#issuesById.get(id);\n  }\n}\n\nexport interface IssueAddedEvent {\n  issuesModel: SDK.IssuesModel.IssuesModel;\n  issue: Issue;\n}\n\nexport type EventTypes = {\n  [Events.IssuesCountUpdated]: void,\n  [Events.FullUpdateRequired]: void,\n  [Events.IssueAdded]: IssueAddedEvent,\n};\n\n// @ts-ignore\nglobalThis.addIssueForTest = (issue: Protocol.Audits.InspectorIssue): void => {\n  const mainTarget = SDK.TargetManager.TargetManager.instance().mainTarget();\n  const issuesModel = mainTarget?.model(SDK.IssuesModel.IssuesModel);\n  issuesModel?.issueAdded({issue});\n};\n"],
  "mappings": "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",
  "names": []
}
