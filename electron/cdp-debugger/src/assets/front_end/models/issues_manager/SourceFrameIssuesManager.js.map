{
  "version": 3,
  "sources": ["../../../../../../front_end/models/issues_manager/SourceFrameIssuesManager.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\n\nimport {\n  ContentSecurityPolicyIssue,\n  trustedTypesPolicyViolationCode,\n  trustedTypesSinkViolationCode,\n} from './ContentSecurityPolicyIssue.js';\nimport type {Issue, IssueKind} from './Issue.js';\nimport {toZeroBasedLocation} from './Issue.js';\nimport type {IssueAddedEvent, IssuesManager} from './IssuesManager.js';\nimport {Events} from './IssuesManagerEvents.js';\nimport {getIssueTitleFromMarkdownDescription} from './MarkdownIssueDescription.js';\n\nexport class SourceFrameIssuesManager {\n  #locationPool = new Bindings.LiveLocation.LiveLocationPool();\n  #issueMessages = new Array<IssueMessage>();\n\n  constructor(private readonly issuesManager: IssuesManager) {\n    this.issuesManager.addEventListener(Events.IssueAdded, this.#onIssueAdded, this);\n    this.issuesManager.addEventListener(Events.FullUpdateRequired, this.#onFullUpdateRequired, this);\n  }\n\n  #onIssueAdded(event: Common.EventTarget.EventTargetEvent<IssueAddedEvent>): void {\n    const {issue} = event.data;\n    this.#addIssue(issue);\n  }\n\n  #addIssue(issue: Issue): void {\n    if (!this.#isTrustedTypeIssue(issue)) {\n      return;\n    }\n    const issuesModel = issue.model();\n    if (!issuesModel) {\n      return;\n    }\n    const debuggerModel = issuesModel.target().model(SDK.DebuggerModel.DebuggerModel);\n    const srcLocation = toZeroBasedLocation(issue.details().sourceCodeLocation);\n    if (srcLocation && debuggerModel) {\n      const rawLocation =\n          debuggerModel.createRawLocationByURL(srcLocation.url, srcLocation.lineNumber, srcLocation.columnNumber);\n      if (rawLocation) {\n        void this.#addIssueMessageToScript(issue, rawLocation);\n      }\n    }\n  }\n\n  #onFullUpdateRequired(): void {\n    this.#resetMessages();\n    const issues = this.issuesManager.issues();\n    for (const issue of issues) {\n      this.#addIssue(issue);\n    }\n  }\n\n  async #addIssueMessageToScript(issue: Issue, rawLocation: SDK.DebuggerModel.Location): Promise<void> {\n    const description = issue.getDescription();\n    if (description) {\n      const title = await getIssueTitleFromMarkdownDescription(description);\n      if (title) {\n        const clickHandler = (): void => {\n          void Common.Revealer.reveal(issue);\n        };\n        this.#issueMessages.push(\n            new IssueMessage(title, issue.getKind(), rawLocation, this.#locationPool, clickHandler));\n      }\n    }\n  }\n\n  #isTrustedTypeIssue(issue: Issue): issue is ContentSecurityPolicyIssue {\n    return issue instanceof ContentSecurityPolicyIssue && issue.code() === trustedTypesSinkViolationCode ||\n        issue.code() === trustedTypesPolicyViolationCode;\n  }\n\n  #resetMessages(): void {\n    for (const message of this.#issueMessages) {\n      message.dispose();\n    }\n    this.#issueMessages = [];\n    this.#locationPool.disposeAll();\n  }\n}\n\nexport class IssueMessage extends Workspace.UISourceCode.Message {\n  #uiSourceCode?: Workspace.UISourceCode.UISourceCode = undefined;\n  #kind: IssueKind;\n\n  constructor(\n      title: string, kind: IssueKind, rawLocation: SDK.DebuggerModel.Location,\n      locationPool: Bindings.LiveLocation.LiveLocationPool, clickHandler: () => void) {\n    super(Workspace.UISourceCode.Message.Level.Issue, title, clickHandler);\n    this.#kind = kind;\n    void Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance().createLiveLocation(\n        rawLocation, this.#updateLocation.bind(this), locationPool);\n  }\n\n  async #updateLocation(liveLocation: Bindings.LiveLocation.LiveLocation): Promise<void> {\n    if (this.#uiSourceCode) {\n      this.#uiSourceCode.removeMessage(this);\n    }\n    const uiLocation = await liveLocation.uiLocation();\n    if (!uiLocation) {\n      return;\n    }\n    this.range = TextUtils.TextRange.TextRange.createFromLocation(uiLocation.lineNumber, uiLocation.columnNumber || 0);\n    this.#uiSourceCode = uiLocation.uiSourceCode;\n    this.#uiSourceCode.addMessage(this);\n  }\n\n  getIssueKind(): IssueKind {\n    return this.#kind;\n  }\n\n  dispose(): void {\n    if (this.#uiSourceCode) {\n      this.#uiSourceCode.removeMessage(this);\n    }\n  }\n}\n"],
  "mappings": "AAIA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;AACA;AAEO,sCAA+B;AAAA,EAIpC,YAA6B,eAA8B;AAA9B;AAC3B,SAAK,cAAc,iBAAiB,OAAO,YAAY,oBAAoB;AAC3E,SAAK,cAAc,iBAAiB,OAAO,oBAAoB,4BAA4B;AAAA;AAAA,kBAL7E,IAAI,SAAS,aAAa;AAAA,mBACzB,IAAI;AAAA,gBAOP,OAAmE;AAC/E,UAAM,EAAC,UAAS,MAAM;AACtB,mBAAe;AAAA;AAAA,YAGP,OAAoB;AAC5B,QAAI,CAAC,yBAAyB,QAAQ;AACpC;AAAA;AAEF,UAAM,cAAc,MAAM;AAC1B,QAAI,CAAC,aAAa;AAChB;AAAA;AAEF,UAAM,gBAAgB,YAAY,SAAS,MAAM,IAAI,cAAc;AACnE,UAAM,cAAc,oBAAoB,MAAM,UAAU;AACxD,QAAI,eAAe,eAAe;AAChC,YAAM,cACF,cAAc,uBAAuB,YAAY,KAAK,YAAY,YAAY,YAAY;AAC9F,UAAI,aAAa;AACf,aAAK,8BAA8B,OAAO;AAAA;AAAA;AAAA;AAAA,0BAKlB;AAC5B;AACA,UAAM,SAAS,KAAK,cAAc;AAClC,eAAW,SAAS,QAAQ;AAC1B,qBAAe;AAAA;AAAA;AAAA,iCAIY,OAAc,aAAwD;AACnG,UAAM,cAAc,MAAM;AAC1B,QAAI,aAAa;AACf,YAAM,QAAQ,MAAM,qCAAqC;AACzD,UAAI,OAAO;AACT,cAAM,eAAe,MAAY;AAC/B,eAAK,OAAO,SAAS,OAAO;AAAA;AAE9B,4BAAoB,KAChB,IAAI,aAAa,OAAO,MAAM,WAAW,aAAa,oBAAoB;AAAA;AAAA;AAAA;AAAA,sBAKhE,OAAmD;AACrE,WAAO,iBAAiB,8BAA8B,MAAM,WAAW,iCACnE,MAAM,WAAW;AAAA;AAAA,mBAGA;AACrB,eAAW,WAAW,qBAAqB;AACzC,cAAQ;AAAA;AAEV,0BAAsB;AACtB,uBAAmB;AAAA;AAAA;AAIhB,kCAA2B,UAAU,aAAa,QAAQ;AAAA,kBACT;AAAA;AAAA,EAGtD,YACI,OAAe,MAAiB,aAChC,cAAsD,cAA0B;AAClF,UAAM,UAAU,aAAa,QAAQ,MAAM,OAAO,OAAO;AACzD,iBAAa;AACb,SAAK,SAAS,yBAAyB,yBAAyB,WAAW,mBACvE,aAAa,qBAAqB,KAAK,OAAO;AAAA;AAAA,wBAG9B,cAAiE;AACrF,QAAI,oBAAoB;AACtB,yBAAmB,cAAc;AAAA;AAEnC,UAAM,aAAa,MAAM,aAAa;AACtC,QAAI,CAAC,YAAY;AACf;AAAA;AAEF,SAAK,QAAQ,UAAU,UAAU,UAAU,mBAAmB,WAAW,YAAY,WAAW,gBAAgB;AAChH,yBAAqB,WAAW;AAChC,uBAAmB,WAAW;AAAA;AAAA,EAGhC,eAA0B;AACxB,WAAO;AAAA;AAAA,EAGT,UAAgB;AACd,QAAI,oBAAoB;AACtB,yBAAmB,cAAc;AAAA;AAAA;AAAA;",
  "names": []
}
