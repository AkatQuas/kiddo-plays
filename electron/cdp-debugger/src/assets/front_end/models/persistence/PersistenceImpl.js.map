{
  "version": 3,
  "sources": ["../../../../../../front_end/models/persistence/PersistenceImpl.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as Bindings from '../bindings/bindings.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nimport type {AutomappingStatus} from './Automapping.js';\nimport {Automapping} from './Automapping.js';\nimport {LinkDecorator} from './PersistenceUtils.js';\n\nlet persistenceInstance: PersistenceImpl;\n\nexport class PersistenceImpl extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  private readonly workspace: Workspace.Workspace.WorkspaceImpl;\n  private readonly breakpointManager: Bindings.BreakpointManager.BreakpointManager;\n  private readonly filePathPrefixesToBindingCount: FilePathPrefixesBindingCounts;\n  private subscribedBindingEventListeners:\n      Platform.MapUtilities.Multimap<Workspace.UISourceCode.UISourceCode, () => void>;\n  private readonly mapping: Automapping;\n\n  constructor(\n      workspace: Workspace.Workspace.WorkspaceImpl, breakpointManager: Bindings.BreakpointManager.BreakpointManager) {\n    super();\n    this.workspace = workspace;\n    this.breakpointManager = breakpointManager;\n    this.breakpointManager.addUpdateBindingsCallback(this.#setupBindings.bind(this));\n    this.filePathPrefixesToBindingCount = new FilePathPrefixesBindingCounts();\n\n    this.subscribedBindingEventListeners = new Platform.MapUtilities.Multimap();\n\n    const linkDecorator = new LinkDecorator(this);\n    Components.Linkifier.Linkifier.setLinkDecorator(linkDecorator);\n\n    this.mapping = new Automapping(this.workspace, this.onStatusAdded.bind(this), this.onStatusRemoved.bind(this));\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n    workspace: Workspace.Workspace.WorkspaceImpl|null,\n    breakpointManager: Bindings.BreakpointManager.BreakpointManager|null,\n  } = {forceNew: null, workspace: null, breakpointManager: null}): PersistenceImpl {\n    const {forceNew, workspace, breakpointManager} = opts;\n    if (!persistenceInstance || forceNew) {\n      if (!workspace || !breakpointManager) {\n        throw new Error('Missing arguments for workspace');\n      }\n      persistenceInstance = new PersistenceImpl(workspace, breakpointManager);\n    }\n\n    return persistenceInstance;\n  }\n\n  addNetworkInterceptor(interceptor: (arg0: Workspace.UISourceCode.UISourceCode) => boolean): void {\n    this.mapping.addNetworkInterceptor(interceptor);\n  }\n\n  refreshAutomapping(): void {\n    this.mapping.scheduleRemap();\n  }\n\n  async addBinding(binding: PersistenceBinding): Promise<void> {\n    await this.innerAddBinding(binding);\n  }\n\n  async addBindingForTest(binding: PersistenceBinding): Promise<void> {\n    await this.innerAddBinding(binding);\n  }\n\n  async removeBinding(binding: PersistenceBinding): Promise<void> {\n    await this.innerRemoveBinding(binding);\n  }\n\n  async removeBindingForTest(binding: PersistenceBinding): Promise<void> {\n    await this.innerRemoveBinding(binding);\n  }\n\n  #setupBindings(networkUISourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    if (networkUISourceCode.project().type() !== Workspace.Workspace.projectTypes.Network) {\n      return Promise.resolve();\n    }\n    return this.mapping.computeNetworkStatus(networkUISourceCode);\n  }\n\n  private async innerAddBinding(binding: PersistenceBinding): Promise<void> {\n    bindings.set(binding.network, binding);\n    bindings.set(binding.fileSystem, binding);\n\n    binding.fileSystem.forceLoadOnCheckContent();\n\n    binding.network.addEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyCommitted, this.onWorkingCopyCommitted, this);\n    binding.fileSystem.addEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyCommitted, this.onWorkingCopyCommitted, this);\n    binding.network.addEventListener(Workspace.UISourceCode.Events.WorkingCopyChanged, this.onWorkingCopyChanged, this);\n    binding.fileSystem.addEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyChanged, this.onWorkingCopyChanged, this);\n\n    this.filePathPrefixesToBindingCount.add(binding.fileSystem.url());\n\n    await this.moveBreakpoints(binding.fileSystem, binding.network);\n\n    console.assert(!binding.fileSystem.isDirty() || !binding.network.isDirty());\n    if (binding.fileSystem.isDirty()) {\n      this.syncWorkingCopy(binding.fileSystem);\n    } else if (binding.network.isDirty()) {\n      this.syncWorkingCopy(binding.network);\n    } else if (binding.network.hasCommits() && binding.network.content() !== binding.fileSystem.content()) {\n      binding.network.setWorkingCopy(binding.network.content());\n      this.syncWorkingCopy(binding.network);\n    }\n\n    this.notifyBindingEvent(binding.network);\n    this.notifyBindingEvent(binding.fileSystem);\n    this.dispatchEventToListeners(Events.BindingCreated, binding);\n  }\n\n  private async innerRemoveBinding(binding: PersistenceBinding): Promise<void> {\n    if (bindings.get(binding.network) !== binding) {\n      return;\n    }\n    console.assert(\n        bindings.get(binding.network) === bindings.get(binding.fileSystem),\n        'ERROR: inconsistent binding for networkURL ' + binding.network.url());\n\n    bindings.delete(binding.network);\n    bindings.delete(binding.fileSystem);\n\n    binding.network.removeEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyCommitted, this.onWorkingCopyCommitted, this);\n    binding.fileSystem.removeEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyCommitted, this.onWorkingCopyCommitted, this);\n    binding.network.removeEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyChanged, this.onWorkingCopyChanged, this);\n    binding.fileSystem.removeEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyChanged, this.onWorkingCopyChanged, this);\n\n    this.filePathPrefixesToBindingCount.remove(binding.fileSystem.url());\n    await this.breakpointManager.copyBreakpoints(binding.network.url(), binding.fileSystem);\n\n    this.notifyBindingEvent(binding.network);\n    this.notifyBindingEvent(binding.fileSystem);\n    this.dispatchEventToListeners(Events.BindingRemoved, binding);\n  }\n\n  private onStatusAdded(status: AutomappingStatus): Promise<void> {\n    const binding = new PersistenceBinding(status.network, status.fileSystem);\n    statusBindings.set(status, binding);\n    return this.innerAddBinding(binding);\n  }\n\n  private async onStatusRemoved(status: AutomappingStatus): Promise<void> {\n    const binding = statusBindings.get(status) as PersistenceBinding;\n    await this.innerRemoveBinding(binding);\n  }\n\n  private onWorkingCopyChanged(event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.UISourceCode>): void {\n    const uiSourceCode = event.data;\n    this.syncWorkingCopy(uiSourceCode);\n  }\n\n  private syncWorkingCopy(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    const binding = bindings.get(uiSourceCode);\n    if (!binding || mutedWorkingCopies.has(binding)) {\n      return;\n    }\n    const other = binding.network === uiSourceCode ? binding.fileSystem : binding.network;\n    if (!uiSourceCode.isDirty()) {\n      mutedWorkingCopies.add(binding);\n      other.resetWorkingCopy();\n      mutedWorkingCopies.delete(binding);\n      this.contentSyncedForTest();\n      return;\n    }\n\n    const target = Bindings.NetworkProject.NetworkProject.targetForUISourceCode(binding.network);\n    if (target && target.type() === SDK.Target.Type.Node) {\n      const newContent = uiSourceCode.workingCopy();\n      void other.requestContent().then(() => {\n        const nodeJSContent = PersistenceImpl.rewrapNodeJSContent(other, other.workingCopy(), newContent);\n        setWorkingCopy.call(this, () => nodeJSContent);\n      });\n      return;\n    }\n\n    setWorkingCopy.call(this, () => uiSourceCode.workingCopy());\n\n    function setWorkingCopy(this: PersistenceImpl, workingCopyGetter: () => string): void {\n      if (binding) {\n        mutedWorkingCopies.add(binding);\n      }\n      other.setWorkingCopyGetter(workingCopyGetter);\n      if (binding) {\n        mutedWorkingCopies.delete(binding);\n      }\n      this.contentSyncedForTest();\n    }\n  }\n\n  private onWorkingCopyCommitted(\n      event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.WorkingCopyCommitedEvent>): void {\n    const uiSourceCode = event.data.uiSourceCode;\n    const newContent = event.data.content;\n    this.syncContent(uiSourceCode, newContent, Boolean(event.data.encoded));\n  }\n\n  syncContent(uiSourceCode: Workspace.UISourceCode.UISourceCode, newContent: string, encoded: boolean): void {\n    const binding = bindings.get(uiSourceCode);\n    if (!binding || mutedCommits.has(binding)) {\n      return;\n    }\n    const other = binding.network === uiSourceCode ? binding.fileSystem : binding.network;\n    const target = Bindings.NetworkProject.NetworkProject.targetForUISourceCode(binding.network);\n    if (target && target.type() === SDK.Target.Type.Node) {\n      void other.requestContent().then(currentContent => {\n        const nodeJSContent = PersistenceImpl.rewrapNodeJSContent(other, currentContent.content || '', newContent);\n        setContent.call(this, nodeJSContent);\n      });\n      return;\n    }\n    setContent.call(this, newContent);\n\n    function setContent(this: PersistenceImpl, newContent: string): void {\n      if (binding) {\n        mutedCommits.add(binding);\n      }\n      other.setContent(newContent, encoded);\n      if (binding) {\n        mutedCommits.delete(binding);\n      }\n      this.contentSyncedForTest();\n    }\n  }\n\n  static rewrapNodeJSContent(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, currentContent: string, newContent: string): string {\n    if (uiSourceCode.project().type() === Workspace.Workspace.projectTypes.FileSystem) {\n      if (newContent.startsWith(NodePrefix) && newContent.endsWith(NodeSuffix)) {\n        newContent = newContent.substring(NodePrefix.length, newContent.length - NodeSuffix.length);\n      }\n      if (currentContent.startsWith(NodeShebang)) {\n        newContent = NodeShebang + newContent;\n      }\n    } else {\n      if (newContent.startsWith(NodeShebang)) {\n        newContent = newContent.substring(NodeShebang.length);\n      }\n      if (currentContent.startsWith(NodePrefix) && currentContent.endsWith(NodeSuffix)) {\n        newContent = NodePrefix + newContent + NodeSuffix;\n      }\n    }\n    return newContent;\n  }\n\n  private contentSyncedForTest(): void {\n  }\n\n  private async moveBreakpoints(from: Workspace.UISourceCode.UISourceCode, to: Workspace.UISourceCode.UISourceCode):\n      Promise<void> {\n    const breakpoints = this.breakpointManager.breakpointLocationsForUISourceCode(from).map(\n        breakpointLocation => breakpointLocation.breakpoint);\n    await Promise.all(breakpoints.map(async breakpoint => {\n      await breakpoint.remove(false /* keepInStorage */);\n      return this.breakpointManager.setBreakpoint(\n          to, breakpoint.lineNumber(), breakpoint.columnNumber(), breakpoint.condition(), breakpoint.enabled());\n    }));\n  }\n\n  hasUnsavedCommittedChanges(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n    if (this.workspace.hasResourceContentTrackingExtensions()) {\n      return false;\n    }\n    if (uiSourceCode.project().canSetFileContent()) {\n      return false;\n    }\n    if (bindings.has(uiSourceCode)) {\n      return false;\n    }\n    return Boolean(uiSourceCode.hasCommits());\n  }\n\n  binding(uiSourceCode: Workspace.UISourceCode.UISourceCode): PersistenceBinding|null {\n    return bindings.get(uiSourceCode) || null;\n  }\n\n  subscribeForBindingEvent(uiSourceCode: Workspace.UISourceCode.UISourceCode, listener: () => void): void {\n    this.subscribedBindingEventListeners.set(uiSourceCode, listener);\n  }\n\n  unsubscribeFromBindingEvent(uiSourceCode: Workspace.UISourceCode.UISourceCode, listener: () => void): void {\n    this.subscribedBindingEventListeners.delete(uiSourceCode, listener);\n  }\n\n  private notifyBindingEvent(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    if (!this.subscribedBindingEventListeners.has(uiSourceCode)) {\n      return;\n    }\n    const listeners = Array.from(this.subscribedBindingEventListeners.get(uiSourceCode));\n    for (const listener of listeners) {\n      listener.call(null);\n    }\n  }\n\n  fileSystem(uiSourceCode: Workspace.UISourceCode.UISourceCode): Workspace.UISourceCode.UISourceCode|null {\n    const binding = this.binding(uiSourceCode);\n    return binding ? binding.fileSystem : null;\n  }\n\n  network(uiSourceCode: Workspace.UISourceCode.UISourceCode): Workspace.UISourceCode.UISourceCode|null {\n    const binding = this.binding(uiSourceCode);\n    return binding ? binding.network : null;\n  }\n\n  filePathHasBindings(filePath: Platform.DevToolsPath.UrlString): boolean {\n    return this.filePathPrefixesToBindingCount.hasBindingPrefix(filePath);\n  }\n}\n\nclass FilePathPrefixesBindingCounts {\n  private prefixCounts: Map<string, number>;\n\n  constructor() {\n    this.prefixCounts = new Map();\n  }\n\n  private getPlatformCanonicalFilePath(path: Platform.DevToolsPath.UrlString): Platform.DevToolsPath.UrlString {\n    return Host.Platform.isWin() ? Common.ParsedURL.ParsedURL.toLowerCase(path) : path;\n  }\n\n  add(filePath: Platform.DevToolsPath.UrlString): void {\n    filePath = this.getPlatformCanonicalFilePath(filePath);\n    let relative = '';\n    for (const token of filePath.split('/')) {\n      relative += token + '/';\n      const count = this.prefixCounts.get(relative) || 0;\n      this.prefixCounts.set(relative, count + 1);\n    }\n  }\n\n  remove(filePath: Platform.DevToolsPath.UrlString): void {\n    filePath = this.getPlatformCanonicalFilePath(filePath);\n    let relative = '';\n    for (const token of filePath.split('/')) {\n      relative += token + '/';\n      const count = this.prefixCounts.get(relative);\n      if (count === 1) {\n        this.prefixCounts.delete(relative);\n      } else if (count !== undefined) {\n        this.prefixCounts.set(relative, count - 1);\n      }\n    }\n  }\n\n  hasBindingPrefix(filePath: Platform.DevToolsPath.UrlString): boolean {\n    filePath = this.getPlatformCanonicalFilePath(filePath);\n    if (!filePath.endsWith('/')) {\n      filePath = Common.ParsedURL.ParsedURL.concatenate(filePath, '/');\n    }\n    return this.prefixCounts.has(filePath);\n  }\n}\n\nconst bindings = new WeakMap<Workspace.UISourceCode.UISourceCode, PersistenceBinding>();\nconst statusBindings = new WeakMap<AutomappingStatus, PersistenceBinding>();\n\nconst mutedCommits = new WeakSet<PersistenceBinding>();\n\nconst mutedWorkingCopies = new WeakSet<PersistenceBinding>();\n\nexport const NodePrefix = '(function (exports, require, module, __filename, __dirname) { ';\nexport const NodeSuffix = '\\n});';\nexport const NodeShebang = '#!/usr/bin/env node';\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  BindingCreated = 'BindingCreated',\n  BindingRemoved = 'BindingRemoved',\n}\n\nexport type EventTypes = {\n  [Events.BindingCreated]: PersistenceBinding,\n  [Events.BindingRemoved]: PersistenceBinding,\n};\n\nexport class PathEncoder {\n  private readonly encoder: Common.CharacterIdMap.CharacterIdMap<string>;\n  constructor() {\n    this.encoder = new Common.CharacterIdMap.CharacterIdMap();\n  }\n\n  encode(path: string): string {\n    return path.split('/').map(token => this.encoder.toChar(token)).join('');\n  }\n\n  decode(path: string): string {\n    return path.split('').map(token => this.encoder.fromChar(token)).join('/');\n  }\n}\n\nexport class PersistenceBinding {\n  network: Workspace.UISourceCode.UISourceCode;\n  fileSystem: Workspace.UISourceCode.UISourceCode;\n  constructor(network: Workspace.UISourceCode.UISourceCode, fileSystem: Workspace.UISourceCode.UISourceCode) {\n    this.network = network;\n    this.fileSystem = fileSystem;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
