{
  "version": 3,
  "sources": ["../../../../../../front_end/models/persistence/FileSystemWorkspaceBinding.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nimport type {IsolatedFileSystem} from './IsolatedFileSystem.js';\nimport type {IsolatedFileSystemManager} from './IsolatedFileSystemManager.js';\nimport {Events} from './IsolatedFileSystemManager.js';\nimport type {PlatformFileSystem} from './PlatformFileSystem.js';\n\nexport class FileSystemWorkspaceBinding {\n  readonly isolatedFileSystemManager: IsolatedFileSystemManager;\n  private readonly workspace: Workspace.Workspace.WorkspaceImpl;\n  private readonly eventListeners: Common.EventTarget.EventDescriptor[];\n  private readonly boundFileSystems: Map<string, FileSystem>;\n  constructor(isolatedFileSystemManager: IsolatedFileSystemManager, workspace: Workspace.Workspace.WorkspaceImpl) {\n    this.isolatedFileSystemManager = isolatedFileSystemManager;\n    this.workspace = workspace;\n    this.eventListeners = [\n      this.isolatedFileSystemManager.addEventListener(Events.FileSystemAdded, this.onFileSystemAdded, this),\n      this.isolatedFileSystemManager.addEventListener(Events.FileSystemRemoved, this.onFileSystemRemoved, this),\n      this.isolatedFileSystemManager.addEventListener(Events.FileSystemFilesChanged, this.fileSystemFilesChanged, this),\n    ];\n    this.boundFileSystems = new Map();\n    void this.isolatedFileSystemManager.waitForFileSystems().then(this.onFileSystemsLoaded.bind(this));\n  }\n\n  static projectId(fileSystemPath: Platform.DevToolsPath.UrlString): Platform.DevToolsPath.UrlString {\n    return fileSystemPath;\n  }\n\n  static relativePath(uiSourceCode: Workspace.UISourceCode.UISourceCode): Platform.DevToolsPath.EncodedPathString[] {\n    const baseURL = (uiSourceCode.project() as FileSystem).fileSystemBaseURL;\n    return Common.ParsedURL.ParsedURL.split(\n        Common.ParsedURL.ParsedURL.sliceUrlToEncodedPathString(uiSourceCode.url(), baseURL.length), '/');\n  }\n\n  static tooltipForUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): string {\n    const fileSystem = (uiSourceCode.project() as FileSystem).fileSystemInternal;\n    return fileSystem.tooltipForURL(uiSourceCode.url());\n  }\n\n  static fileSystemType(project: Workspace.Workspace.Project): string {\n    const fileSystem = (project as FileSystem).fileSystemInternal;\n    return fileSystem.type();\n  }\n\n  static fileSystemSupportsAutomapping(project: Workspace.Workspace.Project): boolean {\n    const fileSystem = (project as FileSystem).fileSystemInternal;\n    return fileSystem.supportsAutomapping();\n  }\n\n  static completeURL(project: Workspace.Workspace.Project, relativePath: string): Platform.DevToolsPath.UrlString {\n    const fsProject = project as FileSystem;\n    return Common.ParsedURL.ParsedURL.concatenate(fsProject.fileSystemBaseURL, relativePath);\n  }\n\n  static fileSystemPath(projectId: Platform.DevToolsPath.UrlString): Platform.DevToolsPath.UrlString {\n    return projectId;\n  }\n\n  fileSystemManager(): IsolatedFileSystemManager {\n    return this.isolatedFileSystemManager;\n  }\n\n  private onFileSystemsLoaded(fileSystems: IsolatedFileSystem[]): void {\n    for (const fileSystem of fileSystems) {\n      this.addFileSystem(fileSystem);\n    }\n  }\n\n  private onFileSystemAdded(event: Common.EventTarget.EventTargetEvent<PlatformFileSystem>): void {\n    const fileSystem = event.data;\n    this.addFileSystem(fileSystem);\n  }\n\n  private addFileSystem(fileSystem: PlatformFileSystem): void {\n    const boundFileSystem = new FileSystem(this, fileSystem, this.workspace);\n    this.boundFileSystems.set(fileSystem.path(), boundFileSystem);\n  }\n\n  private onFileSystemRemoved(event: Common.EventTarget.EventTargetEvent<PlatformFileSystem>): void {\n    const fileSystem = event.data;\n    const boundFileSystem = this.boundFileSystems.get(fileSystem.path());\n    if (boundFileSystem) {\n      boundFileSystem.dispose();\n    }\n    this.boundFileSystems.delete(fileSystem.path());\n  }\n\n  private fileSystemFilesChanged(event: Common.EventTarget.EventTargetEvent<FilesChangedData>): void {\n    const paths = event.data;\n    for (const fileSystemPath of paths.changed.keysArray()) {\n      const fileSystem = this.boundFileSystems.get(fileSystemPath);\n      if (!fileSystem) {\n        continue;\n      }\n      paths.changed.get(fileSystemPath).forEach(path => fileSystem.fileChanged(path));\n    }\n\n    for (const fileSystemPath of paths.added.keysArray()) {\n      const fileSystem = this.boundFileSystems.get(fileSystemPath);\n      if (!fileSystem) {\n        continue;\n      }\n      paths.added.get(fileSystemPath).forEach(path => fileSystem.fileChanged(path));\n    }\n\n    for (const fileSystemPath of paths.removed.keysArray()) {\n      const fileSystem = this.boundFileSystems.get(fileSystemPath);\n      if (!fileSystem) {\n        continue;\n      }\n      paths.removed.get(fileSystemPath).forEach(path => fileSystem.removeUISourceCode(path));\n    }\n  }\n\n  dispose(): void {\n    Common.EventTarget.removeEventListeners(this.eventListeners);\n    for (const fileSystem of this.boundFileSystems.values()) {\n      fileSystem.dispose();\n      this.boundFileSystems.delete(fileSystem.fileSystemInternal.path());\n    }\n  }\n}\n\nexport class FileSystem extends Workspace.Workspace.ProjectStore {\n  readonly fileSystemInternal: PlatformFileSystem;\n  readonly fileSystemBaseURL: Platform.DevToolsPath.UrlString;\n  private readonly fileSystemParentURL: Platform.DevToolsPath.UrlString;\n  private readonly fileSystemWorkspaceBinding: FileSystemWorkspaceBinding;\n  private readonly fileSystemPathInternal: Platform.DevToolsPath.UrlString;\n  private readonly creatingFilesGuard: Set<string>;\n  constructor(\n      fileSystemWorkspaceBinding: FileSystemWorkspaceBinding, isolatedFileSystem: PlatformFileSystem,\n      workspace: Workspace.Workspace.WorkspaceImpl) {\n    const fileSystemPath = isolatedFileSystem.path();\n    const id = FileSystemWorkspaceBinding.projectId(fileSystemPath);\n    console.assert(!workspace.project(id));\n    const displayName = fileSystemPath.substr(fileSystemPath.lastIndexOf('/') + 1);\n\n    super(workspace, id, Workspace.Workspace.projectTypes.FileSystem, displayName);\n\n    this.fileSystemInternal = isolatedFileSystem;\n    this.fileSystemBaseURL = Common.ParsedURL.ParsedURL.concatenate(this.fileSystemInternal.path(), '/');\n    this.fileSystemParentURL =\n        Common.ParsedURL.ParsedURL.substr(this.fileSystemBaseURL, 0, fileSystemPath.lastIndexOf('/') + 1);\n    this.fileSystemWorkspaceBinding = fileSystemWorkspaceBinding;\n    this.fileSystemPathInternal = fileSystemPath;\n    this.creatingFilesGuard = new Set();\n\n    workspace.addProject(this);\n    this.populate();\n  }\n\n  fileSystemPath(): Platform.DevToolsPath.UrlString {\n    return this.fileSystemPathInternal;\n  }\n\n  fileSystem(): PlatformFileSystem {\n    return this.fileSystemInternal;\n  }\n\n  mimeType(uiSourceCode: Workspace.UISourceCode.UISourceCode): string {\n    return this.fileSystemInternal.mimeFromPath(uiSourceCode.url());\n  }\n\n  initialGitFolders(): Platform.DevToolsPath.UrlString[] {\n    return this.fileSystemInternal.initialGitFolders().map(\n        folder => Common.ParsedURL.ParsedURL.concatenate(this.fileSystemPathInternal, '/', folder));\n  }\n\n  private filePathForUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode):\n      Platform.DevToolsPath.EncodedPathString {\n    return Common.ParsedURL.ParsedURL.sliceUrlToEncodedPathString(\n        uiSourceCode.url(), this.fileSystemPathInternal.length);\n  }\n\n  isServiceProject(): boolean {\n    return false;\n  }\n\n  requestMetadata(uiSourceCode: Workspace.UISourceCode.UISourceCode):\n      Promise<Workspace.UISourceCode.UISourceCodeMetadata|null> {\n    const metadata = sourceCodeToMetadataMap.get(uiSourceCode);\n    if (metadata) {\n      return metadata;\n    }\n    const relativePath = this.filePathForUISourceCode(uiSourceCode);\n    const promise = this.fileSystemInternal.getMetadata(relativePath).then(onMetadata);\n    sourceCodeToMetadataMap.set(uiSourceCode, promise);\n    return promise;\n\n    function onMetadata(metadata: {modificationTime: Date, size: number}|\n                        null): Workspace.UISourceCode.UISourceCodeMetadata|null {\n      if (!metadata) {\n        return null;\n      }\n      return new Workspace.UISourceCode.UISourceCodeMetadata(metadata.modificationTime, metadata.size);\n    }\n  }\n\n  requestFileBlob(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<Blob|null> {\n    return this.fileSystemInternal.requestFileBlob(this.filePathForUISourceCode(uiSourceCode));\n  }\n\n  requestFileContent(uiSourceCode: Workspace.UISourceCode.UISourceCode):\n      Promise<TextUtils.ContentProvider.DeferredContent> {\n    const filePath = this.filePathForUISourceCode(uiSourceCode);\n    return this.fileSystemInternal.requestFileContent(filePath);\n  }\n\n  canSetFileContent(): boolean {\n    return true;\n  }\n\n  async setFileContent(uiSourceCode: Workspace.UISourceCode.UISourceCode, newContent: string, isBase64: boolean):\n      Promise<void> {\n    const filePath = this.filePathForUISourceCode(uiSourceCode);\n    await this.fileSystemInternal.setFileContent(filePath, newContent, isBase64);\n  }\n\n  fullDisplayName(uiSourceCode: Workspace.UISourceCode.UISourceCode): string {\n    const baseURL = (uiSourceCode.project() as FileSystem).fileSystemParentURL;\n    return uiSourceCode.url().substring(baseURL.length);\n  }\n\n  canRename(): boolean {\n    return true;\n  }\n\n  rename(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, newName: Platform.DevToolsPath.RawPathString,\n      callback:\n          (arg0: boolean, arg1?: string|undefined, arg2?: Platform.DevToolsPath.UrlString|undefined,\n           arg3?: Common.ResourceType.ResourceType|undefined) => void): void {\n    if (newName === uiSourceCode.name()) {\n      callback(true, uiSourceCode.name(), uiSourceCode.url(), uiSourceCode.contentType());\n      return;\n    }\n\n    let filePath = this.filePathForUISourceCode(uiSourceCode);\n    this.fileSystemInternal.renameFile(filePath, newName, innerCallback.bind(this));\n\n    function innerCallback(this: FileSystem, success: boolean, newName?: string): void {\n      if (!success || !newName) {\n        callback(false, newName);\n        return;\n      }\n      console.assert(Boolean(newName));\n      const slash = filePath.lastIndexOf('/');\n      const parentPath = Common.ParsedURL.ParsedURL.substr(filePath, 0, slash);\n      filePath = Common.ParsedURL.ParsedURL.encodedFromParentPathAndName(parentPath, newName);\n      filePath = Common.ParsedURL.ParsedURL.substr(filePath, 1);\n      const newURL = Common.ParsedURL.ParsedURL.concatenate(this.fileSystemBaseURL, filePath);\n      const newContentType = this.fileSystemInternal.contentType(newName);\n      this.renameUISourceCode(uiSourceCode, newName);\n      callback(true, newName, newURL, newContentType);\n    }\n  }\n\n  async searchInFileContent(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, query: string, caseSensitive: boolean,\n      isRegex: boolean): Promise<TextUtils.ContentProvider.SearchMatch[]> {\n    const filePath = this.filePathForUISourceCode(uiSourceCode);\n    const {content} = await this.fileSystemInternal.requestFileContent(filePath);\n    if (content) {\n      return TextUtils.TextUtils.performSearchInContent(content, query, caseSensitive, isRegex);\n    }\n    return [];\n  }\n\n  async findFilesMatchingSearchRequest(\n      searchConfig: Workspace.Workspace.ProjectSearchConfig, filesMatchingFileQuery: Platform.DevToolsPath.UrlString[],\n      progress: Common.Progress.Progress): Promise<string[]> {\n    let result: string[] = filesMatchingFileQuery;\n    const queriesToRun = searchConfig.queries().slice();\n    if (!queriesToRun.length) {\n      queriesToRun.push('');\n    }\n    progress.setTotalWork(queriesToRun.length);\n\n    for (const query of queriesToRun) {\n      const files = await this.fileSystemInternal.searchInPath(searchConfig.isRegex() ? '' : query, progress);\n      files.sort(Platform.StringUtilities.naturalOrderComparator);\n      result = Platform.ArrayUtilities.intersectOrdered(result, files, Platform.StringUtilities.naturalOrderComparator);\n      progress.incrementWorked(1);\n    }\n\n    progress.done();\n    return result;\n  }\n\n  indexContent(progress: Common.Progress.Progress): void {\n    this.fileSystemInternal.indexContent(progress);\n  }\n\n  populate(): void {\n    const chunkSize = 1000;\n    const filePaths = this.fileSystemInternal.initialFilePaths();\n    reportFileChunk.call(this, 0);\n\n    function reportFileChunk(this: FileSystem, from: number): void {\n      const to = Math.min(from + chunkSize, filePaths.length);\n      for (let i = from; i < to; ++i) {\n        this.addFile(filePaths[i]);\n      }\n      if (to < filePaths.length) {\n        window.setTimeout(reportFileChunk.bind(this, to), 100);\n      }\n    }\n  }\n\n  excludeFolder(url: Platform.DevToolsPath.UrlString): void {\n    let relativeFolder = Common.ParsedURL.ParsedURL.sliceUrlToEncodedPathString(url, this.fileSystemBaseURL.length);\n    if (!relativeFolder.startsWith('/')) {\n      relativeFolder = Common.ParsedURL.ParsedURL.prepend('/', relativeFolder);\n    }\n    if (!relativeFolder.endsWith('/')) {\n      relativeFolder = Common.ParsedURL.ParsedURL.concatenate(relativeFolder, '/');\n    }\n    this.fileSystemInternal.addExcludedFolder(relativeFolder);\n\n    const uiSourceCodes = this.uiSourceCodes().slice();\n    for (let i = 0; i < uiSourceCodes.length; ++i) {\n      const uiSourceCode = uiSourceCodes[i];\n      if (uiSourceCode.url().startsWith(url)) {\n        this.removeUISourceCode(uiSourceCode.url());\n      }\n    }\n  }\n\n  canExcludeFolder(path: Platform.DevToolsPath.EncodedPathString): boolean {\n    return this.fileSystemInternal.canExcludeFolder(path);\n  }\n\n  canCreateFile(): boolean {\n    return true;\n  }\n\n  async createFile(\n      path: Platform.DevToolsPath.EncodedPathString, name: Platform.DevToolsPath.RawPathString|null, content: string,\n      isBase64?: boolean): Promise<Workspace.UISourceCode.UISourceCode|null> {\n    const guardFileName = this.fileSystemPathInternal + path + (!path.endsWith('/') ? '/' : '') + name;\n    this.creatingFilesGuard.add(guardFileName);\n    const filePath = await this.fileSystemInternal.createFile(path, name);\n    if (!filePath) {\n      return null;\n    }\n    const uiSourceCode = this.addFile(filePath);\n    uiSourceCode.setContent(content, Boolean(isBase64));\n    this.creatingFilesGuard.delete(guardFileName);\n    return uiSourceCode;\n  }\n\n  deleteFile(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    const relativePath = this.filePathForUISourceCode(uiSourceCode);\n    void this.fileSystemInternal.deleteFile(relativePath).then(success => {\n      if (success) {\n        this.removeUISourceCode(uiSourceCode.url());\n      }\n    });\n  }\n\n  remove(): void {\n    this.fileSystemWorkspaceBinding.isolatedFileSystemManager.removeFileSystem(this.fileSystemInternal);\n  }\n\n  private addFile(filePath: Platform.DevToolsPath.EncodedPathString): Workspace.UISourceCode.UISourceCode {\n    const contentType = this.fileSystemInternal.contentType(filePath);\n    const uiSourceCode =\n        this.createUISourceCode(Common.ParsedURL.ParsedURL.concatenate(this.fileSystemBaseURL, filePath), contentType);\n    this.addUISourceCode(uiSourceCode);\n    return uiSourceCode;\n  }\n\n  fileChanged(path: Platform.DevToolsPath.UrlString): void {\n    // Ignore files that are being created but do not have content yet.\n    if (this.creatingFilesGuard.has(path)) {\n      return;\n    }\n    const uiSourceCode = this.uiSourceCodeForURL(path);\n    if (!uiSourceCode) {\n      const contentType = this.fileSystemInternal.contentType(path);\n      this.addUISourceCode(this.createUISourceCode(path, contentType));\n      return;\n    }\n    sourceCodeToMetadataMap.delete(uiSourceCode);\n    void uiSourceCode.checkContentUpdated();\n  }\n\n  tooltipForURL(url: Platform.DevToolsPath.UrlString): string {\n    return this.fileSystemInternal.tooltipForURL(url);\n  }\n\n  dispose(): void {\n    this.removeProject();\n  }\n}\n\nconst sourceCodeToMetadataMap =\n    new WeakMap<Workspace.UISourceCode.UISourceCode, Promise<Workspace.UISourceCode.UISourceCodeMetadata|null>>();\nexport interface FilesChangedData {\n  changed: Platform.MapUtilities.Multimap<Platform.DevToolsPath.UrlString, Platform.DevToolsPath.UrlString>;\n  added: Platform.MapUtilities.Multimap<Platform.DevToolsPath.UrlString, Platform.DevToolsPath.UrlString>;\n  removed: Platform.MapUtilities.Multimap<Platform.DevToolsPath.UrlString, Platform.DevToolsPath.UrlString>;\n}\n"],
  "mappings": "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",
  "names": []
}
