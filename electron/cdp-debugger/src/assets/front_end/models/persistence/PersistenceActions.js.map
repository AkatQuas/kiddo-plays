{
  "version": 3,
  "sources": ["../../../../../../front_end/models/persistence/PersistenceActions.ts"],
  "sourcesContent": ["// Copyright (c) 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\n\nimport type * as TextUtils from '../text_utils/text_utils.js';\nimport type * as UI from '../../ui/legacy/legacy.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nimport {NetworkPersistenceManager} from './NetworkPersistenceManager.js';\nimport {PersistenceImpl} from './PersistenceImpl.js';\n\nconst UIStrings = {\n  /**\n  *@description Text to save content as a specific file type\n  */\n  saveAs: 'Save as...',\n  /**\n  *@description Context menu item for saving an image\n  */\n  saveImage: 'Save image',\n  /**\n  *@description A context menu item in the Persistence Actions of the Workspace settings in Settings\n  */\n  saveForOverrides: 'Save for overrides',\n  /**\n  *@description A context menu item in the Persistence Actions of the Workspace settings in Settings\n  */\n  openInContainingFolder: 'Open in containing folder',\n};\nconst str_ = i18n.i18n.registerUIStrings('models/persistence/PersistenceActions.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet contextMenuProviderInstance: ContextMenuProvider;\n\nexport class ContextMenuProvider implements UI.ContextMenu.Provider {\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): ContextMenuProvider {\n    const {forceNew} = opts;\n    if (!contextMenuProviderInstance || forceNew) {\n      contextMenuProviderInstance = new ContextMenuProvider();\n    }\n\n    return contextMenuProviderInstance;\n  }\n\n  appendApplicableItems(event: Event, contextMenu: UI.ContextMenu.ContextMenu, target: Object): void {\n    const contentProvider = target as TextUtils.ContentProvider.ContentProvider;\n\n    async function saveAs(): Promise<void> {\n      if (contentProvider instanceof Workspace.UISourceCode.UISourceCode) {\n        (contentProvider as Workspace.UISourceCode.UISourceCode).commitWorkingCopy();\n      }\n      let content: string = (await contentProvider.requestContent()).content || '';\n      if (await contentProvider.contentEncoded()) {\n        content = window.atob(content);\n      }\n      const url = contentProvider.contentURL();\n      void Workspace.FileManager.FileManager.instance().save(url, content as string, true);\n      Workspace.FileManager.FileManager.instance().close(url);\n    }\n\n    async function saveImage(): Promise<void> {\n      const targetObject = contentProvider as SDK.Resource.Resource;\n      const content = (await targetObject.requestContent()).content || '';\n      const link = document.createElement('a');\n      link.download = targetObject.displayName;\n      link.href = 'data:' + targetObject.mimeType + ';base64,' + content;\n      link.click();\n    }\n\n    if (contentProvider.contentType().isDocumentOrScriptOrStyleSheet()) {\n      contextMenu.saveSection().appendItem(i18nString(UIStrings.saveAs), saveAs);\n    } else if (contentProvider instanceof SDK.Resource.Resource && contentProvider.contentType().isImage()) {\n      contextMenu.saveSection().appendItem(i18nString(UIStrings.saveImage), saveImage);\n    }\n\n    // Retrieve uiSourceCode by URL to pick network resources everywhere.\n    const uiSourceCode = Workspace.Workspace.WorkspaceImpl.instance().uiSourceCodeForURL(contentProvider.contentURL());\n    if (uiSourceCode && NetworkPersistenceManager.instance().canSaveUISourceCodeForOverrides(uiSourceCode)) {\n      contextMenu.saveSection().appendItem(i18nString(UIStrings.saveForOverrides), () => {\n        uiSourceCode.commitWorkingCopy();\n        void NetworkPersistenceManager.instance().saveUISourceCodeForOverrides(\n            uiSourceCode as Workspace.UISourceCode.UISourceCode);\n        void Common.Revealer.reveal(uiSourceCode);\n      });\n    }\n\n    const binding = uiSourceCode && PersistenceImpl.instance().binding(uiSourceCode);\n    const fileURL = binding ? binding.fileSystem.contentURL() : contentProvider.contentURL();\n    if (fileURL.startsWith('file://')) {\n      const path = Common.ParsedURL.ParsedURL.urlToRawPathString(fileURL, Host.Platform.isWin());\n      contextMenu.revealSection().appendItem(\n          i18nString(UIStrings.openInContainingFolder),\n          () => Host.InspectorFrontendHost.InspectorFrontendHostInstance.showItemInFolder(path));\n    }\n  }\n}\n"],
  "mappings": "AAIA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAEA,MAAM,YAAY;AAAA,EAIhB,QAAQ;AAAA,EAIR,WAAW;AAAA,EAIX,kBAAkB;AAAA,EAIlB,wBAAwB;AAAA;AAE1B,MAAM,OAAO,KAAK,KAAK,kBAAkB,4CAA4C;AACrF,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAEhE,IAAI;AAEG,iCAA6D;AAAA,SAC3D,SAAS,OAAiC,EAAC,UAAU,QAA4B;AACtF,UAAM,EAAC,aAAY;AACnB,QAAI,CAAC,+BAA+B,UAAU;AAC5C,oCAA8B,IAAI;AAAA;AAGpC,WAAO;AAAA;AAAA,EAGT,sBAAsB,OAAc,aAAyC,QAAsB;AACjG,UAAM,kBAAkB;AAExB,4BAAuC;AACrC,UAAI,2BAA2B,UAAU,aAAa,cAAc;AAClE,QAAC,gBAAwD;AAAA;AAE3D,UAAI,UAAmB,OAAM,gBAAgB,kBAAkB,WAAW;AAC1E,UAAI,MAAM,gBAAgB,kBAAkB;AAC1C,kBAAU,OAAO,KAAK;AAAA;AAExB,YAAM,MAAM,gBAAgB;AAC5B,WAAK,UAAU,YAAY,YAAY,WAAW,KAAK,KAAK,SAAmB;AAC/E,gBAAU,YAAY,YAAY,WAAW,MAAM;AAAA;AAGrD,+BAA0C;AACxC,YAAM,eAAe;AACrB,YAAM,UAAW,OAAM,aAAa,kBAAkB,WAAW;AACjE,YAAM,OAAO,SAAS,cAAc;AACpC,WAAK,WAAW,aAAa;AAC7B,WAAK,OAAO,UAAU,aAAa,WAAW,aAAa;AAC3D,WAAK;AAAA;AAGP,QAAI,gBAAgB,cAAc,kCAAkC;AAClE,kBAAY,cAAc,WAAW,WAAW,UAAU,SAAS;AAAA,eAC1D,2BAA2B,IAAI,SAAS,YAAY,gBAAgB,cAAc,WAAW;AACtG,kBAAY,cAAc,WAAW,WAAW,UAAU,YAAY;AAAA;AAIxE,UAAM,eAAe,UAAU,UAAU,cAAc,WAAW,mBAAmB,gBAAgB;AACrG,QAAI,gBAAgB,0BAA0B,WAAW,gCAAgC,eAAe;AACtG,kBAAY,cAAc,WAAW,WAAW,UAAU,mBAAmB,MAAM;AACjF,qBAAa;AACb,aAAK,0BAA0B,WAAW,6BACtC;AACJ,aAAK,OAAO,SAAS,OAAO;AAAA;AAAA;AAIhC,UAAM,UAAU,gBAAgB,gBAAgB,WAAW,QAAQ;AACnE,UAAM,UAAU,UAAU,QAAQ,WAAW,eAAe,gBAAgB;AAC5E,QAAI,QAAQ,WAAW,YAAY;AACjC,YAAM,OAAO,OAAO,UAAU,UAAU,mBAAmB,SAAS,KAAK,SAAS;AAClF,kBAAY,gBAAgB,WACxB,WAAW,UAAU,yBACrB,MAAM,KAAK,sBAAsB,8BAA8B,iBAAiB;AAAA;AAAA;AAAA;",
  "names": []
}
