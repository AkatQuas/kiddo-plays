{
  "version": 3,
  "sources": ["../../../../../../front_end/models/persistence/IsolatedFileSystem.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\n\nimport type * as TextUtils from '../text_utils/text_utils.js';\n\nimport type {IsolatedFileSystemManager} from './IsolatedFileSystemManager.js';\nimport {Events} from './IsolatedFileSystemManager.js';\nimport {PlatformFileSystem} from './PlatformFileSystem.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Isolated File System of the Workspace settings in Settings\n  *@example {folder does not exist} PH1\n  */\n  fileSystemErrorS: 'File system error: {PH1}',\n  /**\n  *@description Error message when reading a remote blob\n  */\n  blobCouldNotBeLoaded: 'Blob could not be loaded.',\n  /**\n  *@description Error message when reading a file.\n  *@example {c:\\dir\\file.js} PH1\n  *@example {Underlying error} PH2\n  */\n  cantReadFileSS: 'Can\\'t read file: {PH1}: {PH2}',\n  /**\n  *@description Error message when failing to load a file\n  *@example {c:\\dir\\file.js} PH1\n  */\n  unknownErrorReadingFileS: 'Unknown error reading file: {PH1}',\n  /**\n  *@description Text to show something is linked to another\n  *@example {example.url} PH1\n  */\n  linkedToS: 'Linked to {PH1}',\n};\nconst str_ = i18n.i18n.registerUIStrings('models/persistence/IsolatedFileSystem.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class IsolatedFileSystem extends PlatformFileSystem {\n  private readonly manager: IsolatedFileSystemManager;\n  private readonly embedderPathInternal: Platform.DevToolsPath.RawPathString;\n  private readonly domFileSystem: FileSystem;\n  private readonly excludedFoldersSetting:\n      Common.Settings.Setting<{[path: Platform.DevToolsPath.UrlString]: Platform.DevToolsPath.EncodedPathString[]}>;\n  private excludedFoldersInternal: Set<Platform.DevToolsPath.EncodedPathString>;\n  private readonly excludedEmbedderFolders: Platform.DevToolsPath.RawPathString[];\n  private readonly initialFilePathsInternal: Set<Platform.DevToolsPath.EncodedPathString>;\n  private readonly initialGitFoldersInternal: Set<Platform.DevToolsPath.EncodedPathString>;\n  private readonly fileLocks: Map<Platform.DevToolsPath.EncodedPathString, Promise<void>>;\n\n  constructor(\n      manager: IsolatedFileSystemManager, path: Platform.DevToolsPath.UrlString,\n      embedderPath: Platform.DevToolsPath.RawPathString, domFileSystem: FileSystem, type: string) {\n    super(path, type);\n    this.manager = manager;\n    this.embedderPathInternal = embedderPath;\n    this.domFileSystem = domFileSystem;\n    this.excludedFoldersSetting =\n        Common.Settings.Settings.instance().createLocalSetting('workspaceExcludedFolders', {});\n    this.excludedFoldersInternal = new Set(this.excludedFoldersSetting.get()[path] || []);\n    this.excludedEmbedderFolders = [];\n\n    this.initialFilePathsInternal = new Set();\n    this.initialGitFoldersInternal = new Set();\n    this.fileLocks = new Map();\n  }\n\n  static async create(\n      manager: IsolatedFileSystemManager, path: Platform.DevToolsPath.UrlString,\n      embedderPath: Platform.DevToolsPath.RawPathString, type: string, name: string,\n      rootURL: string): Promise<IsolatedFileSystem|null> {\n    const domFileSystem = Host.InspectorFrontendHost.InspectorFrontendHostInstance.isolatedFileSystem(name, rootURL);\n    if (!domFileSystem) {\n      return null as IsolatedFileSystem | null;\n    }\n\n    const fileSystem = new IsolatedFileSystem(manager, path, embedderPath, domFileSystem, type);\n    return fileSystem.initializeFilePaths().then(() => fileSystem).catch(error => {\n      console.error(error);\n      return null;\n    });\n  }\n\n  static errorMessage(error: DOMError): string {\n    // @ts-ignore TODO(crbug.com/1172300) Properly type this after jsdoc to ts migration\n    return i18nString(UIStrings.fileSystemErrorS, {PH1: error.message});\n  }\n\n  private serializedFileOperation<T>(path: Platform.DevToolsPath.EncodedPathString, operation: () => Promise<T>):\n      Promise<T> {\n    const promise = Promise.resolve(this.fileLocks.get(path)).then(() => operation.call(null));\n    this.fileLocks.set(path, promise as unknown as Promise<void>);\n    return promise;\n  }\n\n  getMetadata(path: Platform.DevToolsPath.EncodedPathString): Promise<Metadata|null> {\n    let fulfill: (arg0: Metadata|null) => void;\n    const promise = new Promise<Metadata|null>(f => {\n      fulfill = f;\n    });\n    this.domFileSystem.root.getFile(\n        Common.ParsedURL.ParsedURL.encodedPathToRawPathString(path), undefined, fileEntryLoaded, errorHandler);\n    return promise;\n\n    function fileEntryLoaded(entry: FileEntry): void {\n      entry.getMetadata(fulfill, errorHandler);\n    }\n\n    function errorHandler(error: DOMError): void {\n      const errorMessage = IsolatedFileSystem.errorMessage(error);\n      console.error(errorMessage + ' when getting file metadata \\'' + path);\n      fulfill(null);\n    }\n  }\n\n  initialFilePaths(): Platform.DevToolsPath.EncodedPathString[] {\n    return [...this.initialFilePathsInternal];\n  }\n\n  initialGitFolders(): Platform.DevToolsPath.EncodedPathString[] {\n    return [...this.initialGitFoldersInternal];\n  }\n\n  embedderPath(): Platform.DevToolsPath.RawPathString {\n    return this.embedderPathInternal;\n  }\n\n  private initializeFilePaths(): Promise<void> {\n    return new Promise(fulfill => {\n      let pendingRequests = 1;\n      const boundInnerCallback = innerCallback.bind(this);\n      this.requestEntries(Platform.DevToolsPath.EmptyRawPathString, boundInnerCallback);\n\n      function innerCallback(this: IsolatedFileSystem, entries: FileEntry[]): void {\n        for (let i = 0; i < entries.length; ++i) {\n          const entry = entries[i];\n          if (!entry.isDirectory) {\n            if (this.isFileExcluded(Common.ParsedURL.ParsedURL.rawPathToEncodedPathString(\n                    entry.fullPath as Platform.DevToolsPath.RawPathString))) {\n              continue;\n            }\n            this.initialFilePathsInternal.add(Common.ParsedURL.ParsedURL.rawPathToEncodedPathString(\n                Common.ParsedURL.ParsedURL.substr(entry.fullPath as Platform.DevToolsPath.RawPathString, 1)));\n          } else {\n            if (entry.fullPath.endsWith('/.git')) {\n              const lastSlash = entry.fullPath.lastIndexOf('/');\n              const parentFolder = Common.ParsedURL.ParsedURL.substr(\n                  entry.fullPath as Platform.DevToolsPath.RawPathString, 1, lastSlash);\n              this.initialGitFoldersInternal.add(Common.ParsedURL.ParsedURL.rawPathToEncodedPathString(parentFolder));\n            }\n            if (this.isFileExcluded(Common.ParsedURL.ParsedURL.concatenate(\n                    Common.ParsedURL.ParsedURL.rawPathToEncodedPathString(\n                        entry.fullPath as Platform.DevToolsPath.RawPathString),\n                    '/'))) {\n              const url = Common.ParsedURL.ParsedURL.concatenate(\n                  this.path(),\n                  Common.ParsedURL.ParsedURL.rawPathToEncodedPathString(\n                      entry.fullPath as Platform.DevToolsPath.RawPathString));\n              this.excludedEmbedderFolders.push(\n                  Common.ParsedURL.ParsedURL.urlToRawPathString(url, Host.Platform.isWin()));\n              continue;\n            }\n            ++pendingRequests;\n            this.requestEntries(entry.fullPath as Platform.DevToolsPath.RawPathString, boundInnerCallback);\n          }\n        }\n        if ((--pendingRequests === 0)) {\n          fulfill();\n        }\n      }\n    });\n  }\n\n  private async createFoldersIfNotExist(folderPath: Platform.DevToolsPath.RawPathString): Promise<DirectoryEntry|null> {\n    // Fast-path. If parent directory already exists we return it immidiatly.\n    let dirEntry = await new Promise<DirectoryEntry|null>(\n        resolve => this.domFileSystem.root.getDirectory(folderPath, undefined, resolve, () => resolve(null)));\n    if (dirEntry) {\n      return dirEntry;\n    }\n    const paths = folderPath.split('/');\n    let activePath = '';\n    for (const path of paths) {\n      activePath = activePath + '/' + path;\n      dirEntry = await this.innerCreateFolderIfNeeded(activePath);\n      if (!dirEntry) {\n        return null;\n      }\n    }\n    return dirEntry;\n  }\n\n  private innerCreateFolderIfNeeded(path: string): Promise<DirectoryEntry|null> {\n    return new Promise(resolve => {\n      this.domFileSystem.root.getDirectory(path, {create: true}, dirEntry => resolve(dirEntry), error => {\n        const errorMessage = IsolatedFileSystem.errorMessage(error);\n        console.error(errorMessage + ' trying to create directory \\'' + path + '\\'');\n        resolve(null);\n      });\n    });\n  }\n\n  async createFile(path: Platform.DevToolsPath.EncodedPathString, name: Platform.DevToolsPath.RawPathString|null):\n      Promise<Platform.DevToolsPath.EncodedPathString|null> {\n    const dirEntry = await this.createFoldersIfNotExist(Common.ParsedURL.ParsedURL.encodedPathToRawPathString(path));\n    if (!dirEntry) {\n      return null;\n    }\n    const fileEntry =\n        await this.serializedFileOperation(\n            path, createFileCandidate.bind(this, name || 'NewFile' as Platform.DevToolsPath.RawPathString)) as\n            FileEntry |\n        null;\n    if (!fileEntry) {\n      return null;\n    }\n    return Common.ParsedURL.ParsedURL.rawPathToEncodedPathString(\n        Common.ParsedURL.ParsedURL.substr(fileEntry.fullPath as Platform.DevToolsPath.RawPathString, 1));\n\n    function createFileCandidate(\n        this: IsolatedFileSystem, name: Platform.DevToolsPath.RawPathString,\n        newFileIndex?: number): Promise<FileEntry|null> {\n      return new Promise(resolve => {\n        const nameCandidate = Common.ParsedURL.ParsedURL.concatenate(name, (newFileIndex || '').toString());\n        (dirEntry as DirectoryEntry).getFile(nameCandidate, {create: true, exclusive: true}, resolve, error => {\n          if (error.name === 'InvalidModificationError') {\n            resolve(createFileCandidate.call(this, name, (newFileIndex ? newFileIndex + 1 : 1)));\n            return;\n          }\n          const errorMessage = IsolatedFileSystem.errorMessage(error);\n          console.error(\n              errorMessage + ' when testing if file exists \\'' + (this.path() + '/' + path + '/' + nameCandidate) +\n              '\\'');\n          resolve(null);\n        });\n      });\n    }\n  }\n\n  deleteFile(path: Platform.DevToolsPath.EncodedPathString): Promise<boolean> {\n    let resolveCallback: (arg0: boolean) => void;\n    const promise = new Promise<boolean>(resolve => {\n      resolveCallback = resolve;\n    });\n    this.domFileSystem.root.getFile(\n        Common.ParsedURL.ParsedURL.encodedPathToRawPathString(path), undefined, fileEntryLoaded.bind(this),\n        errorHandler.bind(this));\n    return promise;\n\n    function fileEntryLoaded(this: IsolatedFileSystem, fileEntry: FileEntry): void {\n      fileEntry.remove(fileEntryRemoved, errorHandler.bind(this));\n    }\n\n    function fileEntryRemoved(): void {\n      resolveCallback(true);\n    }\n\n    /**\n     * TODO(jsbell): Update externs replacing DOMError with DOMException. https://crbug.com/496901\n     */\n    function errorHandler(this: IsolatedFileSystem, error: DOMError): void {\n      const errorMessage = IsolatedFileSystem.errorMessage(error);\n      console.error(errorMessage + ' when deleting file \\'' + (this.path() + '/' + path) + '\\'');\n      resolveCallback(false);\n    }\n  }\n\n  requestFileBlob(path: Platform.DevToolsPath.EncodedPathString): Promise<Blob|null> {\n    return new Promise(resolve => {\n      this.domFileSystem.root.getFile(Common.ParsedURL.ParsedURL.encodedPathToRawPathString(path), undefined, entry => {\n        entry.file(resolve, errorHandler.bind(this));\n      }, errorHandler.bind(this));\n\n      function errorHandler(this: IsolatedFileSystem, error: DOMError): void {\n        if (error.name === 'NotFoundError') {\n          resolve(null);\n          return;\n        }\n\n        const errorMessage = IsolatedFileSystem.errorMessage(error);\n        console.error(errorMessage + ' when getting content for file \\'' + (this.path() + '/' + path) + '\\'');\n        resolve(null);\n      }\n    });\n  }\n\n  requestFileContent(path: Platform.DevToolsPath.EncodedPathString):\n      Promise<TextUtils.ContentProvider.DeferredContent> {\n    return this.serializedFileOperation(path, () => this.innerRequestFileContent(path));\n  }\n\n  private async innerRequestFileContent(path: Platform.DevToolsPath.EncodedPathString):\n      Promise<TextUtils.ContentProvider.DeferredContent> {\n    const blob = await this.requestFileBlob(path);\n    if (!blob) {\n      return {content: null, error: i18nString(UIStrings.blobCouldNotBeLoaded), isEncoded: false};\n    }\n\n    const reader = new FileReader();\n    const extension = Common.ParsedURL.ParsedURL.extractExtension(path);\n    const encoded = BinaryExtensions.has(extension);\n    const readPromise = new Promise(x => {\n      reader.onloadend = x;\n    });\n    if (encoded) {\n      reader.readAsBinaryString(blob);\n    } else {\n      reader.readAsText(blob);\n    }\n    await readPromise;\n    if (reader.error) {\n      const error = i18nString(UIStrings.cantReadFileSS, {PH1: path, PH2: reader.error.toString()});\n      console.error(error);\n      return {content: null, isEncoded: false, error};\n    }\n    let result: string|null = null;\n    let error: Common.UIString.LocalizedString|null = null;\n    try {\n      result = reader.result as string;\n    } catch (e) {\n      result = null;\n      error = i18nString(UIStrings.cantReadFileSS, {PH1: path, PH2: e.message});\n    }\n    if (result === undefined || result === null) {\n      error = error || i18nString(UIStrings.unknownErrorReadingFileS, {PH1: path});\n      console.error(error);\n      return {content: null, isEncoded: false, error};\n    }\n    return {isEncoded: encoded, content: encoded ? btoa(result) : result};\n  }\n\n  async setFileContent(path: Platform.DevToolsPath.EncodedPathString, content: string, isBase64: boolean):\n      Promise<void> {\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.FileSavedInWorkspace);\n    let callback: (event?: ProgressEvent<EventTarget>) => void;\n    const innerSetFileContent = (): Promise<ProgressEvent<EventTarget>> => {\n      const promise = new Promise<ProgressEvent<EventTarget>>(x => {\n        // @ts-ignore TODO(crbug.com/1172300) Properly type this after jsdoc to ts migration\n        callback = x;\n      });\n      this.domFileSystem.root.getFile(\n          Common.ParsedURL.ParsedURL.encodedPathToRawPathString(path), {create: true}, fileEntryLoaded.bind(this),\n          errorHandler.bind(this));\n      return promise;\n    };\n\n    void this.serializedFileOperation(path, innerSetFileContent);\n\n    function fileEntryLoaded(this: IsolatedFileSystem, entry: FileEntry): void {\n      entry.createWriter(fileWriterCreated.bind(this), errorHandler.bind(this));\n    }\n\n    async function fileWriterCreated(this: IsolatedFileSystem, fileWriter: FileWriter): Promise<void> {\n      fileWriter.onerror = errorHandler.bind(this);\n      fileWriter.onwriteend = fileWritten;\n      let blob: Blob;\n      if (isBase64) {\n        blob = await (await fetch(`data:application/octet-stream;base64,${content}`)).blob();\n      } else {\n        blob = new Blob([content], {type: 'text/plain'});\n      }\n      fileWriter.write(blob);\n\n      function fileWritten(): void {\n        fileWriter.onwriteend = callback;\n        fileWriter.truncate(blob.size);\n      }\n    }\n\n    function errorHandler(this: IsolatedFileSystem, error: DOMError|ProgressEvent<EventTarget>): void {\n      // @ts-ignore TODO(crbug.com/1172300) Properly type this after jsdoc to ts migration\n      const errorMessage = IsolatedFileSystem.errorMessage(error);\n      console.error(errorMessage + ' when setting content for file \\'' + (this.path() + '/' + path) + '\\'');\n      callback(undefined);\n    }\n  }\n\n  renameFile(\n      path: Platform.DevToolsPath.EncodedPathString, newName: Platform.DevToolsPath.RawPathString,\n      callback: (arg0: boolean, arg1?: string|undefined) => void): void {\n    newName = newName ? Common.ParsedURL.ParsedURL.trim(newName) : newName;\n    if (!newName || newName.indexOf('/') !== -1) {\n      callback(false);\n      return;\n    }\n    let fileEntry: FileEntry;\n    let dirEntry: DirectoryEntry;\n\n    this.domFileSystem.root.getFile(\n        Common.ParsedURL.ParsedURL.encodedPathToRawPathString(path), undefined, fileEntryLoaded.bind(this),\n        errorHandler.bind(this));\n\n    function fileEntryLoaded(this: IsolatedFileSystem, entry: FileEntry): void {\n      if (entry.name === newName) {\n        callback(false);\n        return;\n      }\n\n      fileEntry = entry;\n      fileEntry.getParent(dirEntryLoaded.bind(this), errorHandler.bind(this));\n    }\n\n    function dirEntryLoaded(this: IsolatedFileSystem, entry: Entry): void {\n      dirEntry = entry as DirectoryEntry;\n      dirEntry.getFile(newName, undefined, newFileEntryLoaded, newFileEntryLoadErrorHandler.bind(this));\n    }\n\n    function newFileEntryLoaded(_entry: FileEntry): void {\n      callback(false);\n    }\n\n    function newFileEntryLoadErrorHandler(this: IsolatedFileSystem, error: DOMError): void {\n      if (error.name !== 'NotFoundError') {\n        callback(false);\n        return;\n      }\n      fileEntry.moveTo(dirEntry, newName, fileRenamed, errorHandler.bind(this));\n    }\n\n    function fileRenamed(entry: Entry): void {\n      callback(true, entry.name);\n    }\n\n    function errorHandler(this: IsolatedFileSystem, error: DOMError): void {\n      const errorMessage = IsolatedFileSystem.errorMessage(error);\n      console.error(errorMessage + ' when renaming file \\'' + (this.path() + '/' + path) + '\\' to \\'' + newName + '\\'');\n      callback(false);\n    }\n  }\n\n  private readDirectory(dirEntry: DirectoryEntry, callback: (arg0: Array<FileEntry>) => void): void {\n    const dirReader = dirEntry.createReader();\n    let entries: FileEntry[] = [];\n\n    function innerCallback(results: Entry[]): void {\n      if (!results.length) {\n        callback(entries.sort());\n      } else {\n        entries = entries.concat(toArray(results));\n        dirReader.readEntries(innerCallback, errorHandler);\n      }\n    }\n\n    function toArray(list: Entry[]): FileEntry[] {\n      return Array.prototype.slice.call(list || [], 0);\n    }\n\n    dirReader.readEntries(innerCallback, errorHandler);\n\n    function errorHandler(error: DOMError): void {\n      const errorMessage = IsolatedFileSystem.errorMessage(error);\n      console.error(errorMessage + ' when reading directory \\'' + dirEntry.fullPath + '\\'');\n      callback([]);\n    }\n  }\n\n  private requestEntries(path: Platform.DevToolsPath.RawPathString, callback: (arg0: Array<FileEntry>) => void): void {\n    this.domFileSystem.root.getDirectory(path, undefined, innerCallback.bind(this), errorHandler);\n\n    function innerCallback(this: IsolatedFileSystem, dirEntry: DirectoryEntry): void {\n      this.readDirectory(dirEntry, callback);\n    }\n\n    function errorHandler(error: DOMError): void {\n      const errorMessage = IsolatedFileSystem.errorMessage(error);\n      console.error(errorMessage + ' when requesting entry \\'' + path + '\\'');\n      callback([]);\n    }\n  }\n\n  private saveExcludedFolders(): void {\n    const settingValue = this.excludedFoldersSetting.get();\n    settingValue[this.path()] = [...this.excludedFoldersInternal];\n    this.excludedFoldersSetting.set(settingValue);\n  }\n\n  addExcludedFolder(path: Platform.DevToolsPath.EncodedPathString): void {\n    this.excludedFoldersInternal.add(path);\n    this.saveExcludedFolders();\n    this.manager.dispatchEventToListeners(Events.ExcludedFolderAdded, path);\n  }\n\n  removeExcludedFolder(path: Platform.DevToolsPath.EncodedPathString): void {\n    this.excludedFoldersInternal.delete(path);\n    this.saveExcludedFolders();\n    this.manager.dispatchEventToListeners(Events.ExcludedFolderRemoved, path);\n  }\n\n  fileSystemRemoved(): void {\n    const settingValue = this.excludedFoldersSetting.get();\n    delete settingValue[this.path()];\n    this.excludedFoldersSetting.set(settingValue);\n  }\n\n  isFileExcluded(folderPath: Platform.DevToolsPath.EncodedPathString): boolean {\n    if (this.excludedFoldersInternal.has(folderPath)) {\n      return true;\n    }\n    const regex = (this.manager.workspaceFolderExcludePatternSetting() as Common.Settings.RegExpSetting).asRegExp();\n    return Boolean(regex && regex.test(Common.ParsedURL.ParsedURL.encodedPathToRawPathString(folderPath)));\n  }\n\n  excludedFolders(): Set<Platform.DevToolsPath.EncodedPathString> {\n    return this.excludedFoldersInternal;\n  }\n\n  searchInPath(query: string, progress: Common.Progress.Progress): Promise<string[]> {\n    return new Promise(resolve => {\n      const requestId = this.manager.registerCallback(innerCallback);\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.searchInPath(\n          requestId, this.embedderPathInternal, query);\n\n      function innerCallback(files: Platform.DevToolsPath.RawPathString[]): void {\n        resolve(files.map(path => Common.ParsedURL.ParsedURL.rawPathToUrlString(path)));\n        progress.incrementWorked(1);\n      }\n    });\n  }\n\n  indexContent(progress: Common.Progress.Progress): void {\n    progress.setTotalWork(1);\n    const requestId = this.manager.registerProgress(progress);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.indexPath(\n        requestId, this.embedderPathInternal, JSON.stringify(this.excludedEmbedderFolders));\n  }\n\n  mimeFromPath(path: Platform.DevToolsPath.UrlString): string {\n    return Common.ResourceType.ResourceType.mimeFromURL(path) || 'text/plain';\n  }\n\n  canExcludeFolder(path: Platform.DevToolsPath.EncodedPathString): boolean {\n    return Boolean(path) && this.type() !== 'overrides';\n  }\n\n  // path not typed as Branded Types as here we are interested in extention only\n  contentType(path: string): Common.ResourceType.ResourceType {\n    const extension = Common.ParsedURL.ParsedURL.extractExtension(path);\n    if (STYLE_SHEET_EXTENSIONS.has(extension)) {\n      return Common.ResourceType.resourceTypes.Stylesheet;\n    }\n    if (DOCUMENT_EXTENSIONS.has(extension)) {\n      return Common.ResourceType.resourceTypes.Document;\n    }\n    if (IMAGE_EXTENSIONS.has(extension)) {\n      return Common.ResourceType.resourceTypes.Image;\n    }\n    if (SCRIPT_EXTENSIONS.has(extension)) {\n      return Common.ResourceType.resourceTypes.Script;\n    }\n    return BinaryExtensions.has(extension) ? Common.ResourceType.resourceTypes.Other :\n                                             Common.ResourceType.resourceTypes.Document;\n  }\n\n  tooltipForURL(url: Platform.DevToolsPath.UrlString): string {\n    const path = Platform.StringUtilities.trimMiddle(\n        Common.ParsedURL.ParsedURL.urlToRawPathString(url, Host.Platform.isWin()), 150);\n    return i18nString(UIStrings.linkedToS, {PH1: path});\n  }\n\n  supportsAutomapping(): boolean {\n    return this.type() !== 'overrides';\n  }\n}\n\nconst STYLE_SHEET_EXTENSIONS = new Set<string>(['css', 'scss', 'sass', 'less']);\nconst DOCUMENT_EXTENSIONS = new Set<string>(['htm', 'html', 'asp', 'aspx', 'phtml', 'jsp']);\n\nconst SCRIPT_EXTENSIONS = new Set<string>([\n  'asp', 'aspx', 'c', 'cc', 'cljs', 'coffee', 'cpp', 'cs', 'dart', 'java', 'js',\n  'jsp', 'jsx',  'h', 'm',  'mjs',  'mm',     'py',  'sh', 'ts',   'tsx',  'ls',\n]);\n\nconst IMAGE_EXTENSIONS = new Set<string>(['jpeg', 'jpg', 'svg', 'gif', 'webp', 'png', 'ico', 'tiff', 'tif', 'bmp']);\n\nexport const BinaryExtensions = new Set<string>([\n  // Executable extensions, roughly taken from https://en.wikipedia.org/wiki/Comparison_of_executable_file_formats\n  'cmd',\n  'com',\n  'exe',\n  // Archive extensions, roughly taken from https://en.wikipedia.org/wiki/List_of_archive_formats\n  'a',\n  'ar',\n  'iso',\n  'tar',\n  'bz2',\n  'gz',\n  'lz',\n  'lzma',\n  'z',\n  '7z',\n  'apk',\n  'arc',\n  'cab',\n  'dmg',\n  'jar',\n  'pak',\n  'rar',\n  'zip',\n  // Audio file extensions, roughly taken from https://en.wikipedia.org/wiki/Audio_file_format#List_of_formats\n  '3gp',\n  'aac',\n  'aiff',\n  'flac',\n  'm4a',\n  'mmf',\n  'mp3',\n  'ogg',\n  'oga',\n  'raw',\n  'sln',\n  'wav',\n  'wma',\n  'webm',\n  // Video file extensions, roughly taken from https://en.wikipedia.org/wiki/Video_file_format\n  'mkv',\n  'flv',\n  'vob',\n  'ogv',\n  'gifv',\n  'avi',\n  'mov',\n  'qt',\n  'mp4',\n  'm4p',\n  'm4v',\n  'mpg',\n  'mpeg',\n  // Image file extensions\n  'jpeg',\n  'jpg',\n  'gif',\n  'webp',\n  'png',\n  'ico',\n  'tiff',\n  'tif',\n  'bmp',\n]);\n"],
  "mappings": "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
  "names": []
}
