{
  "version": 3,
  "sources": ["../../../../../../front_end/models/persistence/EditFileSystemView.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport editFileSystemViewStyles from './editFileSystemView.css.js';\nimport {Events, IsolatedFileSystemManager} from './IsolatedFileSystemManager.js';\n\nimport type {PlatformFileSystem} from './PlatformFileSystem.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Edit File System View of the Workspace settings in Settings\n  */\n  excludedFolders: 'Excluded folders',\n  /**\n  *@description Text to add something\n  */\n  add: 'Add',\n  /**\n  * @description Placeholder text for an area of the UI that shows which folders have been excluded\n  * from being show in DevTools. When the user has not yet chosen any folders to exclude, this text\n  * is shown.\n  */\n  none: 'None',\n  /**\n  *@description Text in Edit File System View of the Workspace settings in Settings\n  *@example {file/path/} PH1\n  */\n  sViaDevtools: '{PH1} (via .devtools)',\n  /**\n  *@description Text in Edit File System View of the Workspace settings in Settings\n  */\n  folderPath: 'Folder path',\n  /**\n  *@description Error message when a file system path is an empty string.\n  */\n  enterAPath: 'Enter a path',\n  /**\n  *@description Error message when a file system path is identical to an existing path.\n  */\n  enterAUniquePath: 'Enter a unique path',\n};\nconst str_ = i18n.i18n.registerUIStrings('models/persistence/EditFileSystemView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class EditFileSystemView extends UI.Widget.VBox implements UI.ListWidget.Delegate<string> {\n  private readonly fileSystemPath: Platform.DevToolsPath.UrlString;\n  private excludedFolders: Platform.DevToolsPath.EncodedPathString[];\n  private readonly eventListeners: Common.EventTarget.EventDescriptor[];\n  private readonly excludedFoldersList: UI.ListWidget.ListWidget<string>;\n  private muteUpdate?: boolean;\n  private excludedFolderEditor?: UI.ListWidget.Editor<string>;\n  constructor(fileSystemPath: Platform.DevToolsPath.UrlString) {\n    super(true);\n\n    this.fileSystemPath = fileSystemPath;\n\n    this.excludedFolders = [];\n\n    this.eventListeners = [\n      IsolatedFileSystemManager.instance().addEventListener(Events.ExcludedFolderAdded, this.update, this),\n      IsolatedFileSystemManager.instance().addEventListener(Events.ExcludedFolderRemoved, this.update, this),\n    ];\n\n    const excludedFoldersHeader = this.contentElement.createChild('div', 'file-system-header');\n    excludedFoldersHeader.createChild('div', 'file-system-header-text').textContent =\n        i18nString(UIStrings.excludedFolders);\n    excludedFoldersHeader.appendChild(UI.UIUtils.createTextButton(\n        i18nString(UIStrings.add), this.addExcludedFolderButtonClicked.bind(this), 'add-button'));\n    this.excludedFoldersList = new UI.ListWidget.ListWidget(this);\n    this.excludedFoldersList.element.classList.add('file-system-list');\n\n    const excludedFoldersPlaceholder = document.createElement('div');\n    excludedFoldersPlaceholder.classList.add('file-system-list-empty');\n    excludedFoldersPlaceholder.textContent = i18nString(UIStrings.none);\n    this.excludedFoldersList.setEmptyPlaceholder(excludedFoldersPlaceholder);\n    this.excludedFoldersList.show(this.contentElement);\n\n    this.update();\n  }\n\n  dispose(): void {\n    Common.EventTarget.removeEventListeners(this.eventListeners);\n  }\n\n  private getFileSystem(): PlatformFileSystem {\n    return IsolatedFileSystemManager.instance().fileSystem(this.fileSystemPath) as PlatformFileSystem;\n  }\n\n  private update(): void {\n    if (this.muteUpdate) {\n      return;\n    }\n\n    this.excludedFoldersList.clear();\n    this.excludedFolders = [];\n    for (const folder of this.getFileSystem().excludedFolders().values()) {\n      this.excludedFolders.push(folder);\n      this.excludedFoldersList.appendItem(folder, true);\n    }\n  }\n\n  private addExcludedFolderButtonClicked(): void {\n    this.excludedFoldersList.addNewItem(0, '');\n  }\n\n  renderItem(item: string, editable: boolean): Element {\n    const element = document.createElement('div');\n    element.classList.add('file-system-list-item');\n    const pathPrefix = editable ? item : i18nString(UIStrings.sViaDevtools, {PH1: item}) as string;\n    const pathPrefixElement = element.createChild('div', 'file-system-value');\n    pathPrefixElement.textContent = pathPrefix;\n    UI.Tooltip.Tooltip.install(pathPrefixElement, pathPrefix);\n    return element;\n  }\n\n  removeItemRequested(_item: string, index: number): void {\n    this.getFileSystem().removeExcludedFolder(this.excludedFolders[index]);\n  }\n\n  commitEdit(item: Platform.DevToolsPath.EncodedPathString, editor: UI.ListWidget.Editor<string>, isNew: boolean):\n      void {\n    this.muteUpdate = true;\n    if (!isNew) {\n      this.getFileSystem().removeExcludedFolder(item);\n    }\n    this.getFileSystem().addExcludedFolder(\n        this.normalizePrefix(editor.control('pathPrefix').value) as Platform.DevToolsPath.EncodedPathString);\n    this.muteUpdate = false;\n    this.update();\n  }\n\n  beginEdit(item: string): UI.ListWidget.Editor<string> {\n    const editor = this.createExcludedFolderEditor();\n    editor.control('pathPrefix').value = item;\n    return editor;\n  }\n\n  private createExcludedFolderEditor(): UI.ListWidget.Editor<string> {\n    if (this.excludedFolderEditor) {\n      return this.excludedFolderEditor;\n    }\n\n    const editor = new UI.ListWidget.Editor<string>();\n    this.excludedFolderEditor = editor;\n    const content = editor.contentElement();\n\n    const titles = content.createChild('div', 'file-system-edit-row');\n    titles.createChild('div', 'file-system-value').textContent = i18nString(UIStrings.folderPath);\n\n    const fields = content.createChild('div', 'file-system-edit-row');\n    fields.createChild('div', 'file-system-value')\n        .appendChild(editor.createInput('pathPrefix', 'text', '/path/to/folder/', pathPrefixValidator.bind(this)));\n\n    return editor;\n\n    function pathPrefixValidator(\n        this: EditFileSystemView, _item: string, index: number,\n        input: UI.ListWidget.EditorControl): UI.ListWidget.ValidatorResult {\n      const prefix = this.normalizePrefix(input.value.trim());\n\n      if (!prefix) {\n        return {valid: false, errorMessage: i18nString(UIStrings.enterAPath)};\n      }\n\n      const configurableCount = this.getFileSystem().excludedFolders().size;\n      for (let i = 0; i < configurableCount; ++i) {\n        if (i !== index && this.excludedFolders[i] === prefix) {\n          return {valid: false, errorMessage: i18nString(UIStrings.enterAUniquePath)};\n        }\n      }\n      return {valid: true, errorMessage: undefined};\n    }\n  }\n\n  private normalizePrefix(prefix: string): string {\n    if (!prefix) {\n      return '';\n    }\n    return prefix + (prefix[prefix.length - 1] === '/' ? '' : '/');\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.excludedFoldersList.registerCSSFiles([editFileSystemViewStyles]);\n    this.registerCSSFiles([editFileSystemViewStyles]);\n  }\n}\n"],
  "mappings": "AA8BA;AACA;AAEA;AAEA;AACA;AAIA,MAAM,YAAY;AAAA,EAIhB,iBAAiB;AAAA,EAIjB,KAAK;AAAA,EAML,MAAM;AAAA,EAKN,cAAc;AAAA,EAId,YAAY;AAAA,EAIZ,YAAY;AAAA,EAIZ,kBAAkB;AAAA;AAEpB,MAAM,OAAO,KAAK,KAAK,kBAAkB,4CAA4C;AACrF,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AACzD,wCAAiC,GAAG,OAAO,KAA+C;AAAA,EAC9E;AAAA,EACT;AAAA,EACS;AAAA,EACA;AAAA,EACT;AAAA,EACA;AAAA,EACR,YAAY,gBAAiD;AAC3D,UAAM;AAEN,SAAK,iBAAiB;AAEtB,SAAK,kBAAkB;AAEvB,SAAK,iBAAiB;AAAA,MACpB,0BAA0B,WAAW,iBAAiB,OAAO,qBAAqB,KAAK,QAAQ;AAAA,MAC/F,0BAA0B,WAAW,iBAAiB,OAAO,uBAAuB,KAAK,QAAQ;AAAA;AAGnG,UAAM,wBAAwB,KAAK,eAAe,YAAY,OAAO;AACrE,0BAAsB,YAAY,OAAO,2BAA2B,cAChE,WAAW,UAAU;AACzB,0BAAsB,YAAY,GAAG,QAAQ,iBACzC,WAAW,UAAU,MAAM,KAAK,+BAA+B,KAAK,OAAO;AAC/E,SAAK,sBAAsB,IAAI,GAAG,WAAW,WAAW;AACxD,SAAK,oBAAoB,QAAQ,UAAU,IAAI;AAE/C,UAAM,6BAA6B,SAAS,cAAc;AAC1D,+BAA2B,UAAU,IAAI;AACzC,+BAA2B,cAAc,WAAW,UAAU;AAC9D,SAAK,oBAAoB,oBAAoB;AAC7C,SAAK,oBAAoB,KAAK,KAAK;AAEnC,SAAK;AAAA;AAAA,EAGP,UAAgB;AACd,WAAO,YAAY,qBAAqB,KAAK;AAAA;AAAA,EAGvC,gBAAoC;AAC1C,WAAO,0BAA0B,WAAW,WAAW,KAAK;AAAA;AAAA,EAGtD,SAAe;AACrB,QAAI,KAAK,YAAY;AACnB;AAAA;AAGF,SAAK,oBAAoB;AACzB,SAAK,kBAAkB;AACvB,eAAW,UAAU,KAAK,gBAAgB,kBAAkB,UAAU;AACpE,WAAK,gBAAgB,KAAK;AAC1B,WAAK,oBAAoB,WAAW,QAAQ;AAAA;AAAA;AAAA,EAIxC,iCAAuC;AAC7C,SAAK,oBAAoB,WAAW,GAAG;AAAA;AAAA,EAGzC,WAAW,MAAc,UAA4B;AACnD,UAAM,UAAU,SAAS,cAAc;AACvC,YAAQ,UAAU,IAAI;AACtB,UAAM,aAAa,WAAW,OAAO,WAAW,UAAU,cAAc,EAAC,KAAK;AAC9E,UAAM,oBAAoB,QAAQ,YAAY,OAAO;AACrD,sBAAkB,cAAc;AAChC,OAAG,QAAQ,QAAQ,QAAQ,mBAAmB;AAC9C,WAAO;AAAA;AAAA,EAGT,oBAAoB,OAAe,OAAqB;AACtD,SAAK,gBAAgB,qBAAqB,KAAK,gBAAgB;AAAA;AAAA,EAGjE,WAAW,MAA+C,QAAsC,OACvF;AACP,SAAK,aAAa;AAClB,QAAI,CAAC,OAAO;AACV,WAAK,gBAAgB,qBAAqB;AAAA;AAE5C,SAAK,gBAAgB,kBACjB,KAAK,gBAAgB,OAAO,QAAQ,cAAc;AACtD,SAAK,aAAa;AAClB,SAAK;AAAA;AAAA,EAGP,UAAU,MAA4C;AACpD,UAAM,SAAS,KAAK;AACpB,WAAO,QAAQ,cAAc,QAAQ;AACrC,WAAO;AAAA;AAAA,EAGD,6BAA2D;AACjE,QAAI,KAAK,sBAAsB;AAC7B,aAAO,KAAK;AAAA;AAGd,UAAM,SAAS,IAAI,GAAG,WAAW;AACjC,SAAK,uBAAuB;AAC5B,UAAM,UAAU,OAAO;AAEvB,UAAM,SAAS,QAAQ,YAAY,OAAO;AAC1C,WAAO,YAAY,OAAO,qBAAqB,cAAc,WAAW,UAAU;AAElF,UAAM,SAAS,QAAQ,YAAY,OAAO;AAC1C,WAAO,YAAY,OAAO,qBACrB,YAAY,OAAO,YAAY,cAAc,QAAQ,oBAAoB,oBAAoB,KAAK;AAEvG,WAAO;AAEP,iCAC8B,OAAe,OACzC,OAAmE;AACrE,YAAM,SAAS,KAAK,gBAAgB,MAAM,MAAM;AAEhD,UAAI,CAAC,QAAQ;AACX,eAAO,EAAC,OAAO,OAAO,cAAc,WAAW,UAAU;AAAA;AAG3D,YAAM,oBAAoB,KAAK,gBAAgB,kBAAkB;AACjE,eAAS,IAAI,GAAG,IAAI,mBAAmB,EAAE,GAAG;AAC1C,YAAI,MAAM,SAAS,KAAK,gBAAgB,OAAO,QAAQ;AACrD,iBAAO,EAAC,OAAO,OAAO,cAAc,WAAW,UAAU;AAAA;AAAA;AAG7D,aAAO,EAAC,OAAO,MAAM,cAAc;AAAA;AAAA;AAAA,EAI/B,gBAAgB,QAAwB;AAC9C,QAAI,CAAC,QAAQ;AACX,aAAO;AAAA;AAET,WAAO,SAAU,QAAO,OAAO,SAAS,OAAO,MAAM,KAAK;AAAA;AAAA,EAE5D,WAAiB;AACf,UAAM;AACN,SAAK,oBAAoB,iBAAiB,CAAC;AAC3C,SAAK,iBAAiB,CAAC;AAAA;AAAA;",
  "names": []
}
