{
  "version": 3,
  "sources": ["../../../../../../front_end/models/persistence/IsolatedFileSystemManager.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport type {FilesChangedData} from './FileSystemWorkspaceBinding.js';\n\nimport {IsolatedFileSystem} from './IsolatedFileSystem.js';\n\nimport type {PlatformFileSystem} from './PlatformFileSystem.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Isolated File System Manager of the Workspace settings in Settings\n  *@example {folder does not exist} PH1\n  */\n  unableToAddFilesystemS: 'Unable to add filesystem: {PH1}',\n};\nconst str_ = i18n.i18n.registerUIStrings('models/persistence/IsolatedFileSystemManager.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet isolatedFileSystemManagerInstance: IsolatedFileSystemManager;\n\nexport class IsolatedFileSystemManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  private readonly fileSystemsInternal: Map<Platform.DevToolsPath.UrlString, PlatformFileSystem>;\n  private readonly callbacks: Map<number, (arg0: Array<Platform.DevToolsPath.RawPathString>) => void>;\n  private readonly progresses: Map<number, Common.Progress.Progress>;\n  private readonly workspaceFolderExcludePatternSettingInternal: Common.Settings.RegExpSetting;\n  private fileSystemRequestResolve: ((arg0: IsolatedFileSystem|null) => void)|null;\n  private readonly fileSystemsLoadedPromise: Promise<IsolatedFileSystem[]>;\n  private constructor() {\n    super();\n\n    this.fileSystemsInternal = new Map();\n    this.callbacks = new Map();\n    this.progresses = new Map();\n\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.FileSystemRemoved, this.onFileSystemRemoved, this);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.FileSystemAdded, event => {\n          this.onFileSystemAdded(event);\n        }, this);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.FileSystemFilesChangedAddedRemoved, this.onFileSystemFilesChanged, this);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.IndexingTotalWorkCalculated, this.onIndexingTotalWorkCalculated, this);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.IndexingWorked, this.onIndexingWorked, this);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.IndexingDone, this.onIndexingDone, this);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.SearchCompleted, this.onSearchCompleted, this);\n\n    // Initialize exclude pattern settings\n    const defaultCommonExcludedFolders = [\n      '/node_modules/',\n      '/bower_components/',\n      '/\\\\.devtools',\n      '/\\\\.git/',\n      '/\\\\.sass-cache/',\n      '/\\\\.hg/',\n      '/\\\\.idea/',\n      '/\\\\.svn/',\n      '/\\\\.cache/',\n      '/\\\\.project/',\n    ];\n    const defaultWinExcludedFolders = ['/Thumbs.db$', '/ehthumbs.db$', '/Desktop.ini$', '/\\\\$RECYCLE.BIN/'];\n    const defaultMacExcludedFolders = [\n      '/\\\\.DS_Store$',\n      '/\\\\.Trashes$',\n      '/\\\\.Spotlight-V100$',\n      '/\\\\.AppleDouble$',\n      '/\\\\.LSOverride$',\n      '/Icon$',\n      '/\\\\._.*$',\n    ];\n    const defaultLinuxExcludedFolders = ['/.*~$'];\n    let defaultExcludedFolders: string[] = defaultCommonExcludedFolders;\n    if (Host.Platform.isWin()) {\n      defaultExcludedFolders = defaultExcludedFolders.concat(defaultWinExcludedFolders);\n    } else if (Host.Platform.isMac()) {\n      defaultExcludedFolders = defaultExcludedFolders.concat(defaultMacExcludedFolders);\n    } else {\n      defaultExcludedFolders = defaultExcludedFolders.concat(defaultLinuxExcludedFolders);\n    }\n    const defaultExcludedFoldersPattern = defaultExcludedFolders.join('|');\n    this.workspaceFolderExcludePatternSettingInternal = Common.Settings.Settings.instance().createRegExpSetting(\n        'workspaceFolderExcludePattern', defaultExcludedFoldersPattern, Host.Platform.isWin() ? 'i' : '');\n\n    this.fileSystemRequestResolve = null;\n    this.fileSystemsLoadedPromise = this.requestFileSystems();\n  }\n\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): IsolatedFileSystemManager {\n    const {forceNew} = opts;\n    if (!isolatedFileSystemManagerInstance || forceNew) {\n      isolatedFileSystemManagerInstance = new IsolatedFileSystemManager();\n    }\n\n    return isolatedFileSystemManagerInstance;\n  }\n\n  private requestFileSystems(): Promise<IsolatedFileSystem[]> {\n    let fulfill: (arg0: IsolatedFileSystem[]) => void;\n    const promise = new Promise<IsolatedFileSystem[]>(f => {\n      fulfill = f;\n    });\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.FileSystemsLoaded, onFileSystemsLoaded, this);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.requestFileSystems();\n    return promise;\n\n    function onFileSystemsLoaded(\n        this: IsolatedFileSystemManager,\n        event: Common.EventTarget.EventTargetEvent<Host.InspectorFrontendHostAPI.DevToolsFileSystem[]>): void {\n      const fileSystems = event.data;\n      const promises = [];\n      for (let i = 0; i < fileSystems.length; ++i) {\n        promises.push(this.innerAddFileSystem(fileSystems[i], false));\n      }\n      void Promise.all(promises).then(onFileSystemsAdded);\n    }\n\n    function onFileSystemsAdded(fileSystems: (IsolatedFileSystem|null)[]): void {\n      fulfill(fileSystems.filter(fs => Boolean(fs)) as IsolatedFileSystem[]);\n    }\n  }\n\n  addFileSystem(type?: string): Promise<IsolatedFileSystem|null> {\n    return new Promise(resolve => {\n      this.fileSystemRequestResolve = resolve;\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.addFileSystem(type || '');\n    });\n  }\n\n  removeFileSystem(fileSystem: PlatformFileSystem): void {\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.removeFileSystem(fileSystem.embedderPath());\n  }\n\n  waitForFileSystems(): Promise<IsolatedFileSystem[]> {\n    return this.fileSystemsLoadedPromise;\n  }\n\n  private innerAddFileSystem(fileSystem: Host.InspectorFrontendHostAPI.DevToolsFileSystem, dispatchEvent: boolean):\n      Promise<IsolatedFileSystem|null> {\n    const embedderPath = fileSystem.fileSystemPath;\n    const fileSystemURL = Common.ParsedURL.ParsedURL.rawPathToUrlString(fileSystem.fileSystemPath);\n    const promise = IsolatedFileSystem.create(\n        this, fileSystemURL, embedderPath, fileSystem.type, fileSystem.fileSystemName, fileSystem.rootURL);\n    return promise.then(storeFileSystem.bind(this));\n\n    function storeFileSystem(this: IsolatedFileSystemManager, fileSystem: IsolatedFileSystem|null): IsolatedFileSystem|\n        null {\n      if (!fileSystem) {\n        return null;\n      }\n      this.fileSystemsInternal.set(fileSystemURL, fileSystem);\n      if (dispatchEvent) {\n        this.dispatchEventToListeners(Events.FileSystemAdded, fileSystem);\n      }\n      return fileSystem;\n    }\n  }\n\n  addPlatformFileSystem(fileSystemURL: Platform.DevToolsPath.UrlString, fileSystem: PlatformFileSystem): void {\n    this.fileSystemsInternal.set(fileSystemURL, fileSystem);\n    this.dispatchEventToListeners(Events.FileSystemAdded, fileSystem);\n  }\n\n  private onFileSystemAdded(\n      event: Common.EventTarget.EventTargetEvent<Host.InspectorFrontendHostAPI.FileSystemAddedEvent>): void {\n    const {errorMessage, fileSystem} = event.data;\n    if (errorMessage) {\n      if (errorMessage !== '<selection cancelled>') {\n        Common.Console.Console.instance().error(i18nString(UIStrings.unableToAddFilesystemS, {PH1: errorMessage}));\n      }\n      if (!this.fileSystemRequestResolve) {\n        return;\n      }\n      this.fileSystemRequestResolve.call(null, null);\n      this.fileSystemRequestResolve = null;\n    } else if (fileSystem) {\n      void this.innerAddFileSystem(fileSystem, true).then(fileSystem => {\n        if (this.fileSystemRequestResolve) {\n          this.fileSystemRequestResolve.call(null, fileSystem);\n          this.fileSystemRequestResolve = null;\n        }\n      });\n    }\n  }\n\n  private onFileSystemRemoved(event: Common.EventTarget.EventTargetEvent<Platform.DevToolsPath.RawPathString>): void {\n    const embedderPath = event.data;\n    const fileSystemPath = Common.ParsedURL.ParsedURL.rawPathToUrlString(embedderPath);\n    const isolatedFileSystem = this.fileSystemsInternal.get(fileSystemPath);\n    if (!isolatedFileSystem) {\n      return;\n    }\n    this.fileSystemsInternal.delete(fileSystemPath);\n    isolatedFileSystem.fileSystemRemoved();\n    this.dispatchEventToListeners(Events.FileSystemRemoved, isolatedFileSystem);\n  }\n\n  private onFileSystemFilesChanged(\n      event: Common.EventTarget.EventTargetEvent<Host.InspectorFrontendHostAPI.FilesChangedEvent>): void {\n    const urlPaths = {\n      changed: groupFilePathsIntoFileSystemPaths.call(this, event.data.changed),\n      added: groupFilePathsIntoFileSystemPaths.call(this, event.data.added),\n      removed: groupFilePathsIntoFileSystemPaths.call(this, event.data.removed),\n    };\n\n    this.dispatchEventToListeners(Events.FileSystemFilesChanged, urlPaths);\n\n    function groupFilePathsIntoFileSystemPaths(\n        this: IsolatedFileSystemManager, embedderPaths: Platform.DevToolsPath.RawPathString[]):\n        Platform.MapUtilities.Multimap<Platform.DevToolsPath.UrlString, Platform.DevToolsPath.UrlString> {\n      const paths =\n          new Platform.MapUtilities.Multimap<Platform.DevToolsPath.UrlString, Platform.DevToolsPath.UrlString>();\n      for (const embedderPath of embedderPaths) {\n        const filePath = Common.ParsedURL.ParsedURL.rawPathToUrlString(embedderPath);\n        for (const fileSystemPath of this.fileSystemsInternal.keys()) {\n          const fileSystem = this.fileSystemsInternal.get(fileSystemPath);\n          if (fileSystem &&\n              fileSystem.isFileExcluded(Common.ParsedURL.ParsedURL.rawPathToEncodedPathString(embedderPath))) {\n            continue;\n          }\n          const pathPrefix = fileSystemPath.endsWith('/') ? fileSystemPath : fileSystemPath + '/';\n          if (!filePath.startsWith(pathPrefix)) {\n            continue;\n          }\n          paths.set(fileSystemPath, filePath);\n        }\n      }\n      return paths;\n    }\n  }\n\n  fileSystems(): PlatformFileSystem[] {\n    return [...this.fileSystemsInternal.values()];\n  }\n\n  fileSystem(fileSystemPath: Platform.DevToolsPath.UrlString): PlatformFileSystem|null {\n    return this.fileSystemsInternal.get(fileSystemPath) || null;\n  }\n\n  workspaceFolderExcludePatternSetting(): Common.Settings.RegExpSetting {\n    return this.workspaceFolderExcludePatternSettingInternal;\n  }\n\n  registerCallback(callback: (arg0: Array<Platform.DevToolsPath.RawPathString>) => void): number {\n    const requestId = ++lastRequestId;\n    this.callbacks.set(requestId, callback);\n    return requestId;\n  }\n\n  registerProgress(progress: Common.Progress.Progress): number {\n    const requestId = ++lastRequestId;\n    this.progresses.set(requestId, progress);\n    return requestId;\n  }\n\n  private onIndexingTotalWorkCalculated(\n      event: Common.EventTarget.EventTargetEvent<Host.InspectorFrontendHostAPI.IndexingTotalWorkCalculatedEvent>):\n      void {\n    const {requestId, totalWork} = event.data;\n    const progress = this.progresses.get(requestId);\n    if (!progress) {\n      return;\n    }\n    progress.setTotalWork(totalWork);\n  }\n\n  private onIndexingWorked(\n      event: Common.EventTarget.EventTargetEvent<Host.InspectorFrontendHostAPI.IndexingWorkedEvent>): void {\n    const {requestId, worked} = event.data;\n    const progress = this.progresses.get(requestId);\n    if (!progress) {\n      return;\n    }\n    progress.incrementWorked(worked);\n    if (progress.isCanceled()) {\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.stopIndexing(requestId);\n      this.onIndexingDone(event);\n    }\n  }\n\n  private onIndexingDone(event: Common.EventTarget.EventTargetEvent<Host.InspectorFrontendHostAPI.IndexingEvent>):\n      void {\n    const {requestId} = event.data;\n    const progress = this.progresses.get(requestId);\n    if (!progress) {\n      return;\n    }\n    progress.done();\n    this.progresses.delete(requestId);\n  }\n\n  private onSearchCompleted(\n      event: Common.EventTarget.EventTargetEvent<Host.InspectorFrontendHostAPI.SearchCompletedEvent>): void {\n    const {requestId, files} = event.data;\n    const callback = this.callbacks.get(requestId);\n    if (!callback) {\n      return;\n    }\n    callback.call(null, files);\n    this.callbacks.delete(requestId);\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  FileSystemAdded = 'FileSystemAdded',\n  FileSystemRemoved = 'FileSystemRemoved',\n  FileSystemFilesChanged = 'FileSystemFilesChanged',\n  ExcludedFolderAdded = 'ExcludedFolderAdded',\n  ExcludedFolderRemoved = 'ExcludedFolderRemoved',\n}\n\nexport type EventTypes = {\n  [Events.FileSystemAdded]: PlatformFileSystem,\n  [Events.FileSystemRemoved]: PlatformFileSystem,\n  [Events.FileSystemFilesChanged]: FilesChangedData,\n  [Events.ExcludedFolderAdded]: Platform.DevToolsPath.EncodedPathString,\n  [Events.ExcludedFolderRemoved]: Platform.DevToolsPath.EncodedPathString,\n};\n\nlet lastRequestId = 0;\n"],
  "mappings": "AA8BA;AACA;AACA;AACA;AAGA;AAIA,MAAM,YAAY;AAAA,EAKhB,wBAAwB;AAAA;AAE1B,MAAM,OAAO,KAAK,KAAK,kBAAkB,mDAAmD;AAC5F,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAChE,IAAI;AAEG,+CAAwC,OAAO,cAAc,cAA0B;AAAA,EAC3E;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACT;AAAA,EACS;AAAA,EACT,cAAc;AACpB;AAEA,SAAK,sBAAsB,oBAAI;AAC/B,SAAK,YAAY,oBAAI;AACrB,SAAK,aAAa,oBAAI;AAEtB,SAAK,sBAAsB,8BAA8B,OAAO,iBAC5D,KAAK,yBAAyB,OAAO,mBAAmB,KAAK,qBAAqB;AACtF,SAAK,sBAAsB,8BAA8B,OAAO,iBAC5D,KAAK,yBAAyB,OAAO,iBAAiB,WAAS;AAC7D,WAAK,kBAAkB;AAAA,OACtB;AACP,SAAK,sBAAsB,8BAA8B,OAAO,iBAC5D,KAAK,yBAAyB,OAAO,oCAAoC,KAAK,0BAA0B;AAC5G,SAAK,sBAAsB,8BAA8B,OAAO,iBAC5D,KAAK,yBAAyB,OAAO,6BAA6B,KAAK,+BAA+B;AAC1G,SAAK,sBAAsB,8BAA8B,OAAO,iBAC5D,KAAK,yBAAyB,OAAO,gBAAgB,KAAK,kBAAkB;AAChF,SAAK,sBAAsB,8BAA8B,OAAO,iBAC5D,KAAK,yBAAyB,OAAO,cAAc,KAAK,gBAAgB;AAC5E,SAAK,sBAAsB,8BAA8B,OAAO,iBAC5D,KAAK,yBAAyB,OAAO,iBAAiB,KAAK,mBAAmB;AAGlF,UAAM,+BAA+B;AAAA,MACnC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;AAEF,UAAM,4BAA4B,CAAC,eAAe,iBAAiB,iBAAiB;AACpF,UAAM,4BAA4B;AAAA,MAChC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;AAEF,UAAM,8BAA8B,CAAC;AACrC,QAAI,yBAAmC;AACvC,QAAI,KAAK,SAAS,SAAS;AACzB,+BAAyB,uBAAuB,OAAO;AAAA,eAC9C,KAAK,SAAS,SAAS;AAChC,+BAAyB,uBAAuB,OAAO;AAAA,WAClD;AACL,+BAAyB,uBAAuB,OAAO;AAAA;AAEzD,UAAM,gCAAgC,uBAAuB,KAAK;AAClE,SAAK,+CAA+C,OAAO,SAAS,SAAS,WAAW,oBACpF,iCAAiC,+BAA+B,KAAK,SAAS,UAAU,MAAM;AAElG,SAAK,2BAA2B;AAChC,SAAK,2BAA2B,KAAK;AAAA;AAAA,SAGhC,SAAS,OAAiC,EAAC,UAAU,QAAkC;AAC5F,UAAM,EAAC,aAAY;AACnB,QAAI,CAAC,qCAAqC,UAAU;AAClD,0CAAoC,IAAI;AAAA;AAG1C,WAAO;AAAA;AAAA,EAGD,qBAAoD;AAC1D,QAAI;AACJ,UAAM,UAAU,IAAI,QAA8B,OAAK;AACrD,gBAAU;AAAA;AAEZ,SAAK,sBAAsB,8BAA8B,OAAO,iBAC5D,KAAK,yBAAyB,OAAO,mBAAmB,qBAAqB;AACjF,SAAK,sBAAsB,8BAA8B;AACzD,WAAO;AAEP,iCAEI,OAAsG;AACxG,YAAM,cAAc,MAAM;AAC1B,YAAM,WAAW;AACjB,eAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,EAAE,GAAG;AAC3C,iBAAS,KAAK,KAAK,mBAAmB,YAAY,IAAI;AAAA;AAExD,WAAK,QAAQ,IAAI,UAAU,KAAK;AAAA;AAGlC,gCAA4B,aAAgD;AAC1E,cAAQ,YAAY,OAAO,QAAM,QAAQ;AAAA;AAAA;AAAA,EAI7C,cAAc,MAAiD;AAC7D,WAAO,IAAI,QAAQ,aAAW;AAC5B,WAAK,2BAA2B;AAChC,WAAK,sBAAsB,8BAA8B,cAAc,QAAQ;AAAA;AAAA;AAAA,EAInF,iBAAiB,YAAsC;AACrD,SAAK,sBAAsB,8BAA8B,iBAAiB,WAAW;AAAA;AAAA,EAGvF,qBAAoD;AAClD,WAAO,KAAK;AAAA;AAAA,EAGN,mBAAmB,YAA8D,eACpD;AACnC,UAAM,eAAe,WAAW;AAChC,UAAM,gBAAgB,OAAO,UAAU,UAAU,mBAAmB,WAAW;AAC/E,UAAM,UAAU,mBAAmB,OAC/B,MAAM,eAAe,cAAc,WAAW,MAAM,WAAW,gBAAgB,WAAW;AAC9F,WAAO,QAAQ,KAAK,gBAAgB,KAAK;AAEzC,6BAA0D,aACjD;AACP,UAAI,CAAC,aAAY;AACf,eAAO;AAAA;AAET,WAAK,oBAAoB,IAAI,eAAe;AAC5C,UAAI,eAAe;AACjB,aAAK,yBAAyB,OAAO,iBAAiB;AAAA;AAExD,aAAO;AAAA;AAAA;AAAA,EAIX,sBAAsB,eAAgD,YAAsC;AAC1G,SAAK,oBAAoB,IAAI,eAAe;AAC5C,SAAK,yBAAyB,OAAO,iBAAiB;AAAA;AAAA,EAGhD,kBACJ,OAAsG;AACxG,UAAM,EAAC,cAAc,eAAc,MAAM;AACzC,QAAI,cAAc;AAChB,UAAI,iBAAiB,yBAAyB;AAC5C,eAAO,QAAQ,QAAQ,WAAW,MAAM,WAAW,UAAU,wBAAwB,EAAC,KAAK;AAAA;AAE7F,UAAI,CAAC,KAAK,0BAA0B;AAClC;AAAA;AAEF,WAAK,yBAAyB,KAAK,MAAM;AACzC,WAAK,2BAA2B;AAAA,eACvB,YAAY;AACrB,WAAK,KAAK,mBAAmB,YAAY,MAAM,KAAK,iBAAc;AAChE,YAAI,KAAK,0BAA0B;AACjC,eAAK,yBAAyB,KAAK,MAAM;AACzC,eAAK,2BAA2B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMhC,oBAAoB,OAAuF;AACjH,UAAM,eAAe,MAAM;AAC3B,UAAM,iBAAiB,OAAO,UAAU,UAAU,mBAAmB;AACrE,UAAM,qBAAqB,KAAK,oBAAoB,IAAI;AACxD,QAAI,CAAC,oBAAoB;AACvB;AAAA;AAEF,SAAK,oBAAoB,OAAO;AAChC,uBAAmB;AACnB,SAAK,yBAAyB,OAAO,mBAAmB;AAAA;AAAA,EAGlD,yBACJ,OAAmG;AACrG,UAAM,WAAW;AAAA,MACf,SAAS,kCAAkC,KAAK,MAAM,MAAM,KAAK;AAAA,MACjE,OAAO,kCAAkC,KAAK,MAAM,MAAM,KAAK;AAAA,MAC/D,SAAS,kCAAkC,KAAK,MAAM,MAAM,KAAK;AAAA;AAGnE,SAAK,yBAAyB,OAAO,wBAAwB;AAE7D,+CACqC,eACgE;AACnG,YAAM,QACF,IAAI,SAAS,aAAa;AAC9B,iBAAW,gBAAgB,eAAe;AACxC,cAAM,WAAW,OAAO,UAAU,UAAU,mBAAmB;AAC/D,mBAAW,kBAAkB,KAAK,oBAAoB,QAAQ;AAC5D,gBAAM,aAAa,KAAK,oBAAoB,IAAI;AAChD,cAAI,cACA,WAAW,eAAe,OAAO,UAAU,UAAU,2BAA2B,gBAAgB;AAClG;AAAA;AAEF,gBAAM,aAAa,eAAe,SAAS,OAAO,iBAAiB,iBAAiB;AACpF,cAAI,CAAC,SAAS,WAAW,aAAa;AACpC;AAAA;AAEF,gBAAM,IAAI,gBAAgB;AAAA;AAAA;AAG9B,aAAO;AAAA;AAAA;AAAA,EAIX,cAAoC;AAClC,WAAO,CAAC,GAAG,KAAK,oBAAoB;AAAA;AAAA,EAGtC,WAAW,gBAA0E;AACnF,WAAO,KAAK,oBAAoB,IAAI,mBAAmB;AAAA;AAAA,EAGzD,uCAAsE;AACpE,WAAO,KAAK;AAAA;AAAA,EAGd,iBAAiB,UAA8E;AAC7F,UAAM,YAAY,EAAE;AACpB,SAAK,UAAU,IAAI,WAAW;AAC9B,WAAO;AAAA;AAAA,EAGT,iBAAiB,UAA4C;AAC3D,UAAM,YAAY,EAAE;AACpB,SAAK,WAAW,IAAI,WAAW;AAC/B,WAAO;AAAA;AAAA,EAGD,8BACJ,OACK;AACP,UAAM,EAAC,WAAW,cAAa,MAAM;AACrC,UAAM,WAAW,KAAK,WAAW,IAAI;AACrC,QAAI,CAAC,UAAU;AACb;AAAA;AAEF,aAAS,aAAa;AAAA;AAAA,EAGhB,iBACJ,OAAqG;AACvG,UAAM,EAAC,WAAW,WAAU,MAAM;AAClC,UAAM,WAAW,KAAK,WAAW,IAAI;AACrC,QAAI,CAAC,UAAU;AACb;AAAA;AAEF,aAAS,gBAAgB;AACzB,QAAI,SAAS,cAAc;AACzB,WAAK,sBAAsB,8BAA8B,aAAa;AACtE,WAAK,eAAe;AAAA;AAAA;AAAA,EAIhB,eAAe,OACd;AACP,UAAM,EAAC,cAAa,MAAM;AAC1B,UAAM,WAAW,KAAK,WAAW,IAAI;AACrC,QAAI,CAAC,UAAU;AACb;AAAA;AAEF,aAAS;AACT,SAAK,WAAW,OAAO;AAAA;AAAA,EAGjB,kBACJ,OAAsG;AACxG,UAAM,EAAC,WAAW,UAAS,MAAM;AACjC,UAAM,WAAW,KAAK,UAAU,IAAI;AACpC,QAAI,CAAC,UAAU;AACb;AAAA;AAEF,aAAS,KAAK,MAAM;AACpB,SAAK,UAAU,OAAO;AAAA;AAAA;AAMnB,WAAK,SAAL,kBAAK,YAAL;AACL,+BAAkB;AAClB,iCAAoB;AACpB,sCAAyB;AACzB,mCAAsB;AACtB,qCAAwB;AALd;AAAA;AAgBZ,IAAI,gBAAgB;",
  "names": []
}
