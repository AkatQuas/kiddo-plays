{
  "version": 3,
  "sources": ["../../../../../../front_end/models/persistence/Automapping.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../bindings/bindings.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nimport type {FileSystem} from './FileSystemWorkspaceBinding.js';\nimport {FileSystemWorkspaceBinding} from './FileSystemWorkspaceBinding.js';\nimport {PathEncoder, PersistenceImpl} from './PersistenceImpl.js';\n\nexport class Automapping {\n  private readonly workspace: Workspace.Workspace.WorkspaceImpl;\n  private readonly onStatusAdded: (arg0: AutomappingStatus) => Promise<void>;\n  private readonly onStatusRemoved: (arg0: AutomappingStatus) => Promise<void>;\n  private readonly statuses: Set<AutomappingStatus>;\n  private readonly fileSystemUISourceCodes: FileSystemUISourceCodes;\n  private readonly sweepThrottler: Common.Throttler.Throttler;\n  private readonly sourceCodeToProcessingPromiseMap: WeakMap<Workspace.UISourceCode.UISourceCode, Promise<void>>;\n  private readonly sourceCodeToAutoMappingStatusMap: WeakMap<Workspace.UISourceCode.UISourceCode, AutomappingStatus>;\n  private readonly sourceCodeToMetadataMap:\n      WeakMap<Workspace.UISourceCode.UISourceCode, Workspace.UISourceCode.UISourceCodeMetadata|null>;\n  private readonly filesIndex: FilePathIndex;\n  private readonly projectFoldersIndex: FolderIndex;\n  private readonly activeFoldersIndex: FolderIndex;\n  private readonly interceptors: ((arg0: Workspace.UISourceCode.UISourceCode) => boolean)[];\n  constructor(\n      workspace: Workspace.Workspace.WorkspaceImpl, onStatusAdded: (arg0: AutomappingStatus) => Promise<void>,\n      onStatusRemoved: (arg0: AutomappingStatus) => Promise<void>) {\n    this.workspace = workspace;\n\n    this.onStatusAdded = onStatusAdded;\n    this.onStatusRemoved = onStatusRemoved;\n    this.statuses = new Set();\n\n    this.fileSystemUISourceCodes = new FileSystemUISourceCodes();\n    this.sweepThrottler = new Common.Throttler.Throttler(100);\n\n    this.sourceCodeToProcessingPromiseMap = new WeakMap();\n    this.sourceCodeToAutoMappingStatusMap = new WeakMap();\n    this.sourceCodeToMetadataMap = new WeakMap();\n\n    const pathEncoder = new PathEncoder();\n    this.filesIndex = new FilePathIndex(pathEncoder);\n    this.projectFoldersIndex = new FolderIndex(pathEncoder);\n    this.activeFoldersIndex = new FolderIndex(pathEncoder);\n\n    this.interceptors = [];\n\n    this.workspace.addEventListener(\n        Workspace.Workspace.Events.UISourceCodeAdded, event => this.onUISourceCodeAdded(event.data));\n    this.workspace.addEventListener(\n        Workspace.Workspace.Events.UISourceCodeRemoved, event => this.onUISourceCodeRemoved(event.data));\n    this.workspace.addEventListener(Workspace.Workspace.Events.UISourceCodeRenamed, this.onUISourceCodeRenamed, this);\n    this.workspace.addEventListener(\n        Workspace.Workspace.Events.ProjectAdded, event => this.onProjectAdded(event.data), this);\n    this.workspace.addEventListener(\n        Workspace.Workspace.Events.ProjectRemoved, event => this.onProjectRemoved(event.data), this);\n\n    for (const fileSystem of workspace.projects()) {\n      this.onProjectAdded(fileSystem);\n    }\n    for (const uiSourceCode of workspace.uiSourceCodes()) {\n      this.onUISourceCodeAdded(uiSourceCode);\n    }\n  }\n\n  addNetworkInterceptor(interceptor: (arg0: Workspace.UISourceCode.UISourceCode) => boolean): void {\n    this.interceptors.push(interceptor);\n    this.scheduleRemap();\n  }\n\n  scheduleRemap(): void {\n    for (const status of this.statuses.values()) {\n      this.clearNetworkStatus(status.network);\n    }\n    this.scheduleSweep();\n  }\n\n  private scheduleSweep(): void {\n    void this.sweepThrottler.schedule(sweepUnmapped.bind(this));\n\n    function sweepUnmapped(this: Automapping): Promise<void> {\n      const networkProjects = this.workspace.projectsForType(Workspace.Workspace.projectTypes.Network);\n      for (const networkProject of networkProjects) {\n        for (const uiSourceCode of networkProject.uiSourceCodes()) {\n          void this.computeNetworkStatus(uiSourceCode);\n        }\n      }\n      this.onSweepHappenedForTest();\n      return Promise.resolve();\n    }\n  }\n\n  private onSweepHappenedForTest(): void {\n  }\n\n  private onProjectRemoved(project: Workspace.Workspace.Project): void {\n    for (const uiSourceCode of project.uiSourceCodes()) {\n      this.onUISourceCodeRemoved(uiSourceCode);\n    }\n    if (project.type() !== Workspace.Workspace.projectTypes.FileSystem) {\n      return;\n    }\n    const fileSystem = project as FileSystem;\n    for (const gitFolder of fileSystem.initialGitFolders()) {\n      this.projectFoldersIndex.removeFolder(gitFolder);\n    }\n    this.projectFoldersIndex.removeFolder(fileSystem.fileSystemPath());\n    this.scheduleRemap();\n  }\n\n  private onProjectAdded(project: Workspace.Workspace.Project): void {\n    if (project.type() !== Workspace.Workspace.projectTypes.FileSystem) {\n      return;\n    }\n    const fileSystem = project as FileSystem;\n    for (const gitFolder of fileSystem.initialGitFolders()) {\n      this.projectFoldersIndex.addFolder(gitFolder);\n    }\n    this.projectFoldersIndex.addFolder(fileSystem.fileSystemPath());\n    project.uiSourceCodes().forEach(this.onUISourceCodeAdded.bind(this));\n    this.scheduleRemap();\n  }\n\n  private onUISourceCodeAdded(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    const project = uiSourceCode.project();\n    if (project.type() === Workspace.Workspace.projectTypes.FileSystem) {\n      if (!FileSystemWorkspaceBinding.fileSystemSupportsAutomapping(project)) {\n        return;\n      }\n      this.filesIndex.addPath(uiSourceCode.url());\n      this.fileSystemUISourceCodes.add(uiSourceCode);\n      this.scheduleSweep();\n    } else if (project.type() === Workspace.Workspace.projectTypes.Network) {\n      void this.computeNetworkStatus(uiSourceCode);\n    }\n  }\n\n  private onUISourceCodeRemoved(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    if (uiSourceCode.project().type() === Workspace.Workspace.projectTypes.FileSystem) {\n      this.filesIndex.removePath(uiSourceCode.url());\n      this.fileSystemUISourceCodes.delete(uiSourceCode.url());\n      const status = this.sourceCodeToAutoMappingStatusMap.get(uiSourceCode);\n      if (status) {\n        this.clearNetworkStatus(status.network);\n      }\n    } else if (uiSourceCode.project().type() === Workspace.Workspace.projectTypes.Network) {\n      this.clearNetworkStatus(uiSourceCode);\n    }\n  }\n\n  private onUISourceCodeRenamed(\n      event: Common.EventTarget.EventTargetEvent<Workspace.Workspace.UISourceCodeRenamedEvent>): void {\n    const {uiSourceCode, oldURL} = event.data;\n    if (uiSourceCode.project().type() !== Workspace.Workspace.projectTypes.FileSystem) {\n      return;\n    }\n\n    this.filesIndex.removePath(oldURL);\n    this.fileSystemUISourceCodes.delete(oldURL);\n    const status = this.sourceCodeToAutoMappingStatusMap.get(uiSourceCode);\n    if (status) {\n      this.clearNetworkStatus(status.network);\n    }\n\n    this.filesIndex.addPath(uiSourceCode.url());\n    this.fileSystemUISourceCodes.add(uiSourceCode);\n    this.scheduleSweep();\n  }\n\n  computeNetworkStatus(networkSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    const processingPromise = this.sourceCodeToProcessingPromiseMap.get(networkSourceCode);\n    if (processingPromise) {\n      return processingPromise;\n    }\n    if (this.sourceCodeToAutoMappingStatusMap.has(networkSourceCode)) {\n      return Promise.resolve();\n    }\n    if (this.interceptors.some(interceptor => interceptor(networkSourceCode))) {\n      return Promise.resolve();\n    }\n    if (networkSourceCode.url().startsWith('wasm://')) {\n      return Promise.resolve();\n    }\n    const createBindingPromise =\n        this.createBinding(networkSourceCode).then(validateStatus.bind(this)).then(onStatus.bind(this));\n    this.sourceCodeToProcessingPromiseMap.set(networkSourceCode, createBindingPromise);\n    return createBindingPromise;\n\n    async function validateStatus(this: Automapping, status: AutomappingStatus|null): Promise<AutomappingStatus|null> {\n      if (!status) {\n        return null;\n      }\n      if (this.sourceCodeToProcessingPromiseMap.get(networkSourceCode) !== createBindingPromise) {\n        return null;\n      }\n      if (status.network.contentType().isFromSourceMap() || !status.fileSystem.contentType().isTextType()) {\n        return status;\n      }\n\n      // At the time binding comes, there are multiple user scenarios:\n      // 1. Both network and fileSystem files are **not** dirty.\n      //    This is a typical scenario when user hasn't done any edits yet to the\n      //    files in question.\n      // 2. FileSystem file has unsaved changes, network is clear.\n      //    This typically happens with CSS files editing. Consider the following\n      //    scenario:\n      //      - user edits file that has been successfully mapped before\n      //      - user doesn't save the file\n      //      - user hits reload\n      // 3. Network file has either unsaved changes or commits, but fileSystem file is clear.\n      //    This typically happens when we've been editing file and then realized we'd like to drop\n      //    a folder and persist all the changes.\n      // 4. Network file has either unsaved changes or commits, and fileSystem file has unsaved changes.\n      //    We consider this to be un-realistic scenario and in this case just fail gracefully.\n      //\n      // To support usecase (3), we need to validate against original network content.\n      if (status.fileSystem.isDirty() && (status.network.isDirty() || status.network.hasCommits())) {\n        return null;\n      }\n\n      const [fileSystemContent, networkContent] = await Promise.all(\n          [status.fileSystem.requestContent(), status.network.project().requestFileContent(status.network)]);\n      if (fileSystemContent.content === null || networkContent === null) {\n        return null;\n      }\n\n      if (this.sourceCodeToProcessingPromiseMap.get(networkSourceCode) !== createBindingPromise) {\n        return null;\n      }\n\n      const target = Bindings.NetworkProject.NetworkProject.targetForUISourceCode(status.network);\n      let isValid = false;\n      const fileContent = fileSystemContent.content;\n      if (target && target.type() === SDK.Target.Type.Node) {\n        if (networkContent.content) {\n          const rewrappedNetworkContent =\n              PersistenceImpl.rewrapNodeJSContent(status.fileSystem, fileContent, networkContent.content);\n          isValid = fileContent === rewrappedNetworkContent;\n        }\n      } else {\n        if (networkContent.content) {\n          // Trim trailing whitespaces because V8 adds trailing newline.\n          isValid = fileContent.trimEnd() === networkContent.content.trimEnd();\n        }\n      }\n      if (!isValid) {\n        this.prevalidationFailedForTest(status);\n        return null;\n      }\n      return status;\n    }\n\n    async function onStatus(this: Automapping, status: AutomappingStatus|null): Promise<void> {\n      if (this.sourceCodeToProcessingPromiseMap.get(networkSourceCode) !== createBindingPromise) {\n        return;\n      }\n      if (!status) {\n        this.onBindingFailedForTest();\n        this.sourceCodeToProcessingPromiseMap.delete(networkSourceCode);\n        return;\n      }\n      // TODO(lushnikov): remove this check once there's a single uiSourceCode per url. @see crbug.com/670180\n      if (this.sourceCodeToAutoMappingStatusMap.has(status.network) ||\n          this.sourceCodeToAutoMappingStatusMap.has(status.fileSystem)) {\n        this.sourceCodeToProcessingPromiseMap.delete(networkSourceCode);\n        return;\n      }\n\n      this.statuses.add(status);\n      this.sourceCodeToAutoMappingStatusMap.set(status.network, status);\n      this.sourceCodeToAutoMappingStatusMap.set(status.fileSystem, status);\n      if (status.exactMatch) {\n        const projectFolder = this.projectFoldersIndex.closestParentFolder(status.fileSystem.url());\n        const newFolderAdded = projectFolder ? this.activeFoldersIndex.addFolder(projectFolder) : false;\n        if (newFolderAdded) {\n          this.scheduleSweep();\n        }\n      }\n      await this.onStatusAdded.call(null, status);\n      this.sourceCodeToProcessingPromiseMap.delete(networkSourceCode);\n    }\n  }\n\n  private prevalidationFailedForTest(_binding: AutomappingStatus): void {\n  }\n\n  private onBindingFailedForTest(): void {\n  }\n\n  private clearNetworkStatus(networkSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    if (this.sourceCodeToProcessingPromiseMap.has(networkSourceCode)) {\n      this.sourceCodeToProcessingPromiseMap.delete(networkSourceCode);\n      return;\n    }\n    const status = this.sourceCodeToAutoMappingStatusMap.get(networkSourceCode);\n    if (!status) {\n      return;\n    }\n\n    this.statuses.delete(status);\n    this.sourceCodeToAutoMappingStatusMap.delete(status.network);\n    this.sourceCodeToAutoMappingStatusMap.delete(status.fileSystem);\n    if (status.exactMatch) {\n      const projectFolder = this.projectFoldersIndex.closestParentFolder(status.fileSystem.url());\n      if (projectFolder) {\n        this.activeFoldersIndex.removeFolder(projectFolder);\n      }\n    }\n    void this.onStatusRemoved.call(null, status);\n  }\n\n  private createBinding(networkSourceCode: Workspace.UISourceCode.UISourceCode): Promise<AutomappingStatus|null> {\n    const url = networkSourceCode.url();\n    if (url.startsWith('file://') || url.startsWith('snippet://')) {\n      const fileSourceCode = this.fileSystemUISourceCodes.get(url);\n      const status = fileSourceCode ? new AutomappingStatus(networkSourceCode, fileSourceCode, false) : null;\n      return Promise.resolve(status);\n    }\n\n    let networkPath = Common.ParsedURL.ParsedURL.extractPath(url);\n    if (networkPath === null) {\n      return Promise.resolve(null as AutomappingStatus | null);\n    }\n\n    if (networkPath.endsWith('/')) {\n      networkPath = Common.ParsedURL.ParsedURL.concatenate(networkPath, 'index.html');\n    }\n\n    const similarFiles =\n        this.filesIndex.similarFiles(networkPath).map(path => this.fileSystemUISourceCodes.get(path)) as\n        Workspace.UISourceCode.UISourceCode[];\n    if (!similarFiles.length) {\n      return Promise.resolve(null as AutomappingStatus | null);\n    }\n\n    return this.pullMetadatas(similarFiles.concat(networkSourceCode)).then(onMetadatas.bind(this));\n\n    function onMetadatas(this: Automapping): AutomappingStatus|null {\n      const activeFiles =\n          similarFiles.filter(\n              file => Boolean(file) && Boolean(this.activeFoldersIndex.closestParentFolder(file.url()))) as\n          Workspace.UISourceCode.UISourceCode[];\n      const networkMetadata = this.sourceCodeToMetadataMap.get(networkSourceCode);\n      if (!networkMetadata || (!networkMetadata.modificationTime && typeof networkMetadata.contentSize !== 'number')) {\n        // If networkSourceCode does not have metadata, try to match against active folders.\n        if (activeFiles.length !== 1) {\n          return null;\n        }\n        return new AutomappingStatus(networkSourceCode, activeFiles[0], false);\n      }\n\n      // Try to find exact matches, prioritizing active folders.\n      let exactMatches = this.filterWithMetadata(activeFiles, networkMetadata);\n      if (!exactMatches.length) {\n        exactMatches = this.filterWithMetadata(similarFiles, networkMetadata);\n      }\n      if (exactMatches.length !== 1) {\n        return null;\n      }\n      return new AutomappingStatus(networkSourceCode, exactMatches[0], true);\n    }\n  }\n\n  private async pullMetadatas(uiSourceCodes: Workspace.UISourceCode.UISourceCode[]): Promise<void> {\n    await Promise.all(uiSourceCodes.map(async file => {\n      this.sourceCodeToMetadataMap.set(file, await file.requestMetadata());\n    }));\n  }\n\n  private filterWithMetadata(\n      files: Workspace.UISourceCode.UISourceCode[],\n      networkMetadata: Workspace.UISourceCode.UISourceCodeMetadata): Workspace.UISourceCode.UISourceCode[] {\n    return files.filter(file => {\n      const fileMetadata = this.sourceCodeToMetadataMap.get(file);\n      if (!fileMetadata) {\n        return false;\n      }\n      // Allow a second of difference due to network timestamps lack of precision.\n      const timeMatches = !networkMetadata.modificationTime || !fileMetadata.modificationTime ||\n          Math.abs(networkMetadata.modificationTime.getTime() - fileMetadata.modificationTime.getTime()) < 1000;\n      const contentMatches = !networkMetadata.contentSize || fileMetadata.contentSize === networkMetadata.contentSize;\n      return timeMatches && contentMatches;\n    });\n  }\n}\n\nclass FilePathIndex {\n  private readonly encoder: PathEncoder;\n  private readonly reversedIndex: Common.Trie.Trie;\n  constructor(encoder: PathEncoder) {\n    this.encoder = encoder;\n    this.reversedIndex = new Common.Trie.Trie();\n  }\n\n  addPath(path: Platform.DevToolsPath.UrlString): void {\n    const encodedPath = this.encoder.encode(path);\n    this.reversedIndex.add(Platform.StringUtilities.reverse(encodedPath));\n  }\n\n  removePath(path: Platform.DevToolsPath.UrlString): void {\n    const encodedPath = this.encoder.encode(path);\n    this.reversedIndex.remove(Platform.StringUtilities.reverse(encodedPath));\n  }\n\n  similarFiles(networkPath: Platform.DevToolsPath.EncodedPathString): Platform.DevToolsPath.UrlString[] {\n    const encodedPath = this.encoder.encode(networkPath);\n    const reversedEncodedPath = Platform.StringUtilities.reverse(encodedPath);\n    const longestCommonPrefix = this.reversedIndex.longestPrefix(reversedEncodedPath, false);\n    if (!longestCommonPrefix) {\n      return [];\n    }\n    return this.reversedIndex.words(longestCommonPrefix)\n               .map(encodedPath => this.encoder.decode(Platform.StringUtilities.reverse(encodedPath))) as\n        Platform.DevToolsPath.UrlString[];\n  }\n}\n\nclass FolderIndex {\n  private readonly encoder: PathEncoder;\n  private readonly index: Common.Trie.Trie;\n  private readonly folderCount: Map<string, number>;\n  constructor(encoder: PathEncoder) {\n    this.encoder = encoder;\n    this.index = new Common.Trie.Trie();\n    this.folderCount = new Map();\n  }\n\n  addFolder(path: Platform.DevToolsPath.UrlString): boolean {\n    if (path.endsWith('/')) {\n      path = Common.ParsedURL.ParsedURL.substring(path, 0, path.length - 1);\n    }\n    const encodedPath = this.encoder.encode(path);\n    this.index.add(encodedPath);\n    const count = this.folderCount.get(encodedPath) || 0;\n    this.folderCount.set(encodedPath, count + 1);\n    return count === 0;\n  }\n\n  removeFolder(path: Platform.DevToolsPath.UrlString): boolean {\n    if (path.endsWith('/')) {\n      path = Common.ParsedURL.ParsedURL.substring(path, 0, path.length - 1);\n    }\n    const encodedPath = this.encoder.encode(path);\n    const count = this.folderCount.get(encodedPath) || 0;\n    if (!count) {\n      return false;\n    }\n    if (count > 1) {\n      this.folderCount.set(encodedPath, count - 1);\n      return false;\n    }\n    this.index.remove(encodedPath);\n    this.folderCount.delete(encodedPath);\n    return true;\n  }\n\n  closestParentFolder(path: Platform.DevToolsPath.UrlString): Platform.DevToolsPath.UrlString {\n    const encodedPath = this.encoder.encode(path);\n    const commonPrefix = this.index.longestPrefix(encodedPath, true);\n    return this.encoder.decode(commonPrefix) as Platform.DevToolsPath.UrlString;\n  }\n}\n\nclass FileSystemUISourceCodes {\n  private readonly sourceCodes: Map<Platform.DevToolsPath.UrlString, Workspace.UISourceCode.UISourceCode>;\n\n  constructor() {\n    this.sourceCodes = new Map();\n  }\n\n  private getPlatformCanonicalFileUrl(path: Platform.DevToolsPath.UrlString): Platform.DevToolsPath.UrlString {\n    return Host.Platform.isWin() ? Common.ParsedURL.ParsedURL.toLowerCase(path) : path;\n  }\n\n  add(sourceCode: Workspace.UISourceCode.UISourceCode): void {\n    const fileUrl = this.getPlatformCanonicalFileUrl(sourceCode.url());\n    this.sourceCodes.set(fileUrl, sourceCode);\n  }\n\n  get(fileUrl: Platform.DevToolsPath.UrlString): Workspace.UISourceCode.UISourceCode|undefined {\n    fileUrl = this.getPlatformCanonicalFileUrl(fileUrl);\n    return this.sourceCodes.get(fileUrl);\n  }\n\n  delete(fileUrl: Platform.DevToolsPath.UrlString): void {\n    fileUrl = this.getPlatformCanonicalFileUrl(fileUrl);\n    this.sourceCodes.delete(fileUrl);\n  }\n}\n\nexport class AutomappingStatus {\n  network: Workspace.UISourceCode.UISourceCode;\n  fileSystem: Workspace.UISourceCode.UISourceCode;\n  exactMatch: boolean;\n  constructor(\n      network: Workspace.UISourceCode.UISourceCode, fileSystem: Workspace.UISourceCode.UISourceCode,\n      exactMatch: boolean) {\n    this.network = network;\n    this.fileSystem = fileSystem;\n    this.exactMatch = exactMatch;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
