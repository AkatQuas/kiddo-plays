{
  "version": 3,
  "sources": ["../../../../../../front_end/models/formatter/FormatterWorkerPool.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as FormatterActions from '../../entrypoints/formatter_worker/FormatterActions.js';  // eslint-disable-line rulesdir/es_modules_import\nexport {DefinitionKind, type ScopeTreeNode} from '../../entrypoints/formatter_worker/FormatterActions.js';\n\nconst MAX_WORKERS = Math.min(2, navigator.hardwareConcurrency - 1);\n\nlet formatterWorkerPoolInstance: FormatterWorkerPool;\n\nexport class FormatterWorkerPool {\n  private taskQueue: Task[];\n  private workerTasks: Map<Common.Worker.WorkerWrapper, Task|null>;\n\n  constructor() {\n    this.taskQueue = [];\n    this.workerTasks = new Map();\n  }\n\n  static instance(): FormatterWorkerPool {\n    if (!formatterWorkerPoolInstance) {\n      formatterWorkerPoolInstance = new FormatterWorkerPool();\n    }\n\n    return formatterWorkerPoolInstance;\n  }\n\n  private createWorker(): Common.Worker.WorkerWrapper {\n    const worker = Common.Worker.WorkerWrapper.fromURL(\n        new URL('../../entrypoints/formatter_worker/formatter_worker-entrypoint.js', import.meta.url));\n    worker.onmessage = this.onWorkerMessage.bind(this, worker);\n    worker.onerror = this.onWorkerError.bind(this, worker);\n    return worker;\n  }\n\n  private processNextTask(): void {\n    if (!this.taskQueue.length) {\n      return;\n    }\n\n    let freeWorker = [...this.workerTasks.keys()].find(worker => !this.workerTasks.get(worker));\n    if (!freeWorker && this.workerTasks.size < MAX_WORKERS) {\n      freeWorker = this.createWorker();\n    }\n    if (!freeWorker) {\n      return;\n    }\n\n    const task = this.taskQueue.shift();\n    if (task) {\n      this.workerTasks.set(freeWorker, task);\n      freeWorker.postMessage({method: task.method, params: task.params});\n    }\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private onWorkerMessage(worker: Common.Worker.WorkerWrapper, event: MessageEvent<any>): void {\n    const task = this.workerTasks.get(worker);\n    if (!task) {\n      return;\n    }\n    if (task.isChunked && event.data && !event.data['isLastChunk']) {\n      task.callback(event.data);\n      return;\n    }\n\n    this.workerTasks.set(worker, null);\n    this.processNextTask();\n    task.callback(event.data ? event.data : null);\n  }\n\n  private onWorkerError(worker: Common.Worker.WorkerWrapper, event: Event): void {\n    console.error(event);\n    const task = this.workerTasks.get(worker);\n    worker.terminate();\n    this.workerTasks.delete(worker);\n\n    const newWorker = this.createWorker();\n    this.workerTasks.set(newWorker, null);\n    this.processNextTask();\n    if (task) {\n      task.callback(null);\n    }\n  }\n\n  private runChunkedTask(\n      methodName: string, params: {\n        [x: string]: string,\n      },\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      callback: (arg0: boolean, arg1: any) => void): void {\n    const task = new Task(methodName, params, onData, true);\n    this.taskQueue.push(task);\n    this.processNextTask();\n\n    function onData(data: Object|null): void {\n      if (!data) {\n        callback(true, null);\n        return;\n      }\n      const isLastChunk = 'isLastChunk' in data && Boolean(data['isLastChunk']);\n      const chunk = 'chunk' in data && data['chunk'];\n      callback(isLastChunk, chunk);\n    }\n  }\n\n  private runTask(methodName: FormatterActions.FormatterActions, params: {\n    [x: string]: string|string[][],\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }): Promise<any> {\n    return new Promise(resolve => {\n      const task = new Task(methodName, params, resolve, false);\n      this.taskQueue.push(task);\n      this.processNextTask();\n    });\n  }\n\n  format(mimeType: string, content: string, indentString: string): Promise<FormatterActions.FormatResult> {\n    const parameters = {mimeType: mimeType, content: content, indentString: indentString};\n    return this.runTask(FormatterActions.FormatterActions.FORMAT, parameters) as Promise<FormatterActions.FormatResult>;\n  }\n\n  javaScriptIdentifiers(content: string): Promise<{\n    name: string,\n    offset: number,\n  }[]> {\n    return this.runTask(FormatterActions.FormatterActions.JAVASCRIPT_IDENTIFIERS, {content: content})\n        .then(ids => ids || []);\n  }\n\n  javaScriptSubstitute(expression: string, mapping: Map<string, string>): Promise<string> {\n    return this\n        .runTask(\n            FormatterActions.FormatterActions.JAVASCRIPT_SUBSTITUTE,\n            {content: expression, mapping: Array.from(mapping.entries())})\n        .then(result => result || '');\n  }\n\n  javaScriptScopeTree(expression: string): Promise<FormatterActions.ScopeTreeNode|null> {\n    return this.runTask(FormatterActions.FormatterActions.JAVASCRIPT_SCOPE_TREE, {content: expression})\n        .then(result => result || null);\n  }\n\n  evaluatableJavaScriptSubstring(content: string): Promise<string> {\n    return this.runTask(FormatterActions.FormatterActions.EVALUATE_JAVASCRIPT_SUBSTRING, {content: content})\n        .then(text => text || '');\n  }\n\n  parseCSS(content: string, callback: (arg0: boolean, arg1: Array<CSSRule>) => void): void {\n    this.runChunkedTask(FormatterActions.FormatterActions.PARSE_CSS, {content: content}, onDataChunk);\n\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    function onDataChunk(isLastChunk: boolean, data: any): void {\n      const rules = (data || [] as CSSRule[]);\n      callback(isLastChunk, rules);\n    }\n  }\n\n  outlineForMimetype(content: string, mimeType: string, callback: (arg0: boolean, arg1: Array<OutlineItem>) => void):\n      boolean {\n    switch (mimeType) {\n      case 'text/html':\n        this.runChunkedTask(FormatterActions.FormatterActions.HTML_OUTLINE, {content: content}, callback);\n        return true;\n      case 'text/javascript':\n        this.runChunkedTask(FormatterActions.FormatterActions.JAVASCRIPT_OUTLINE, {content: content}, callback);\n        return true;\n      case 'text/css':\n        this.parseCSS(content, cssCallback);\n        return true;\n    }\n    return false;\n\n    function cssCallback(isLastChunk: boolean, rules: CSSRule[]): void {\n      callback(isLastChunk, rules.map(rule => {\n        const title = 'selectorText' in rule ? rule.selectorText : rule.atRule;\n        return {line: rule.lineNumber, subtitle: undefined, column: rule.columnNumber, title};\n      }));\n    }\n  }\n\n  argumentsList(content: string): Promise<string[]> {\n    return this.runTask(FormatterActions.FormatterActions.ARGUMENTS_LIST, {content}) as Promise<string[]>;\n  }\n}\n\nclass Task {\n  method: string;\n  params: {\n    [x: string]: string|string[][],\n  };\n  callback: (arg0: MessageEvent|null) => void;\n  isChunked: boolean|undefined;\n  constructor(\n      method: string, params: {\n        [x: string]: string|string[][],\n      },\n      callback: (arg0: MessageEvent|null) => void, isChunked?: boolean) {\n    this.method = method;\n    this.params = params;\n    this.callback = callback;\n    this.isChunked = isChunked;\n  }\n}\n\ninterface CSSProperty {\n  name: string;\n  nameRange: TextRange;\n  value: string;\n  valueRange: TextRange;\n  range: TextRange;\n  disabled?: boolean;\n}\n\nexport function formatterWorkerPool(): FormatterWorkerPool {\n  return FormatterWorkerPool.instance();\n}\n\nexport interface OutlineItem {\n  line: number;\n  column: number;\n  title: string;\n  subtitle?: string;\n}\n\nexport interface CSSStyleRule {\n  selectorText: string;\n  styleRange: TextRange;\n  lineNumber: number;\n  columnNumber: number;\n  properties: CSSProperty[];\n}\n\nexport interface CSSAtRule {\n  atRule: string;\n  lineNumber: number;\n  columnNumber: number;\n}\n\nexport type CSSRule = CSSStyleRule|CSSAtRule;\n\nexport interface TextRange {\n  startLine: number;\n  startColumn: number;\n  endLine: number;\n  endColumn: number;\n}\n"],
  "mappings": "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",
  "names": []
}
