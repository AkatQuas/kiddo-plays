{
  "version": 3,
  "sources": ["../../../../../../front_end/models/javascript_metadata/JavaScriptMetadata.ts"],
  "sourcesContent": ["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\n\nimport {NativeFunctions} from './NativeFunctions.js';\nimport * as DOMPinnedProperties from './DOMPinnedProperties.js';\n\nlet javaScriptMetadataInstance: JavaScriptMetadataImpl;\n\nexport class JavaScriptMetadataImpl implements Common.JavaScriptMetaData.JavaScriptMetaData {\n  static readonly domPinnedProperties = DOMPinnedProperties;\n\n  private readonly uniqueFunctions: Map<string, string[][]>;\n  private readonly receiverMethods: Map<string, Map<string, string[][]>>;\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): JavaScriptMetadataImpl {\n    const {forceNew} = opts;\n    if (!javaScriptMetadataInstance || forceNew) {\n      javaScriptMetadataInstance = new JavaScriptMetadataImpl();\n    }\n\n    return javaScriptMetadataInstance;\n  }\n  constructor() {\n    this.uniqueFunctions = new Map();\n    this.receiverMethods = new Map();\n\n    for (const nativeFunction of NativeFunctions) {\n      if (!nativeFunction.receivers) {\n        this.uniqueFunctions.set(nativeFunction.name, nativeFunction.signatures);\n        continue;\n      }\n      for (const receiver of nativeFunction.receivers) {\n        let method = this.receiverMethods.get(receiver);\n        if (!method) {\n          method = new Map();\n          this.receiverMethods.set(receiver, method);\n        }\n        method.set(nativeFunction.name, nativeFunction.signatures);\n      }\n    }\n  }\n\n  signaturesForNativeFunction(name: string): string[][]|null {\n    return this.uniqueFunctions.get(name) || null;\n  }\n\n  signaturesForInstanceMethod(name: string, receiverClassName: string): string[][]|null {\n    const instanceMethod = this.receiverMethods.get(receiverClassName);\n    if (!instanceMethod) {\n      return null;\n    }\n    return instanceMethod.get(name) || null;\n  }\n\n  signaturesForStaticMethod(name: string, receiverConstructorName: string): string[][]|null {\n    const staticMethod = this.receiverMethods.get(receiverConstructorName + 'Constructor');\n    if (!staticMethod) {\n      return null;\n    }\n    return staticMethod.get(name) || null;\n  }\n}\n"],
  "mappings": "AAMA;AACA;AAEA,IAAI;AAEG,oCAAqF;AAAA,SAC1E,sBAAsB;AAAA,EAErB;AAAA,EACA;AAAA,SACV,SAAS,OAEZ,EAAC,UAAU,QAA+B;AAC5C,UAAM,EAAC,aAAY;AACnB,QAAI,CAAC,8BAA8B,UAAU;AAC3C,mCAA6B,IAAI;AAAA;AAGnC,WAAO;AAAA;AAAA,EAET,cAAc;AACZ,SAAK,kBAAkB,oBAAI;AAC3B,SAAK,kBAAkB,oBAAI;AAE3B,eAAW,kBAAkB,iBAAiB;AAC5C,UAAI,CAAC,eAAe,WAAW;AAC7B,aAAK,gBAAgB,IAAI,eAAe,MAAM,eAAe;AAC7D;AAAA;AAEF,iBAAW,YAAY,eAAe,WAAW;AAC/C,YAAI,SAAS,KAAK,gBAAgB,IAAI;AACtC,YAAI,CAAC,QAAQ;AACX,mBAAS,oBAAI;AACb,eAAK,gBAAgB,IAAI,UAAU;AAAA;AAErC,eAAO,IAAI,eAAe,MAAM,eAAe;AAAA;AAAA;AAAA;AAAA,EAKrD,4BAA4B,MAA+B;AACzD,WAAO,KAAK,gBAAgB,IAAI,SAAS;AAAA;AAAA,EAG3C,4BAA4B,MAAc,mBAA4C;AACpF,UAAM,iBAAiB,KAAK,gBAAgB,IAAI;AAChD,QAAI,CAAC,gBAAgB;AACnB,aAAO;AAAA;AAET,WAAO,eAAe,IAAI,SAAS;AAAA;AAAA,EAGrC,0BAA0B,MAAc,yBAAkD;AACxF,UAAM,eAAe,KAAK,gBAAgB,IAAI,0BAA0B;AACxE,QAAI,CAAC,cAAc;AACjB,aAAO;AAAA;AAET,WAAO,aAAa,IAAI,SAAS;AAAA;AAAA;",
  "names": []
}
