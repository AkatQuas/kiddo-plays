{
  "version": 3,
  "sources": ["../../../../../../front_end/models/workspace_diff/WorkspaceDiff.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as Diff from '../../third_party/diff/diff.js';\nimport * as FormatterModule from '../formatter/formatter.js';\nimport * as Persistence from '../persistence/persistence.js';\nimport * as Workspace from '../workspace/workspace.js';\n\ninterface DiffRequestOptions {\n  shouldFormatDiff: boolean;\n}\n\ninterface DiffResponse {\n  diff: Diff.Diff.DiffArray;\n  formattedCurrentMapping?: FormatterModule.ScriptFormatter.FormatterSourceMapping;\n}\n\nexport class WorkspaceDiffImpl extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  private readonly uiSourceCodeDiffs: WeakMap<Workspace.UISourceCode.UISourceCode, UISourceCodeDiff>;\n  private readonly loadingUISourceCodes:\n      Map<Workspace.UISourceCode.UISourceCode, Promise<[string | null, string|null]>>;\n  private readonly modifiedUISourceCodesInternal: Set<Workspace.UISourceCode.UISourceCode>;\n\n  constructor(workspace: Workspace.Workspace.WorkspaceImpl) {\n    super();\n    this.uiSourceCodeDiffs = new WeakMap();\n\n    this.loadingUISourceCodes = new Map();\n\n    this.modifiedUISourceCodesInternal = new Set();\n    workspace.addEventListener(Workspace.Workspace.Events.WorkingCopyChanged, this.uiSourceCodeChanged, this);\n    workspace.addEventListener(Workspace.Workspace.Events.WorkingCopyCommitted, this.uiSourceCodeChanged, this);\n    workspace.addEventListener(Workspace.Workspace.Events.UISourceCodeAdded, this.uiSourceCodeAdded, this);\n    workspace.addEventListener(Workspace.Workspace.Events.UISourceCodeRemoved, this.uiSourceCodeRemoved, this);\n    workspace.addEventListener(Workspace.Workspace.Events.ProjectRemoved, this.projectRemoved, this);\n    workspace.uiSourceCodes().forEach(this.updateModifiedState.bind(this));\n  }\n\n  requestDiff(uiSourceCode: Workspace.UISourceCode.UISourceCode, diffRequestOptions: DiffRequestOptions):\n      Promise<DiffResponse|null> {\n    return this.uiSourceCodeDiff(uiSourceCode).requestDiff(diffRequestOptions);\n  }\n\n  subscribeToDiffChange(uiSourceCode: Workspace.UISourceCode.UISourceCode, callback: () => void, thisObj?: Object):\n      void {\n    this.uiSourceCodeDiff(uiSourceCode).addEventListener(UISourceCodeDiffEvents.DiffChanged, callback, thisObj);\n  }\n\n  unsubscribeFromDiffChange(uiSourceCode: Workspace.UISourceCode.UISourceCode, callback: () => void, thisObj?: Object):\n      void {\n    this.uiSourceCodeDiff(uiSourceCode).removeEventListener(UISourceCodeDiffEvents.DiffChanged, callback, thisObj);\n  }\n\n  modifiedUISourceCodes(): Workspace.UISourceCode.UISourceCode[] {\n    return Array.from(this.modifiedUISourceCodesInternal);\n  }\n\n  isUISourceCodeModified(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n    return this.modifiedUISourceCodesInternal.has(uiSourceCode) || this.loadingUISourceCodes.has(uiSourceCode);\n  }\n\n  private uiSourceCodeDiff(uiSourceCode: Workspace.UISourceCode.UISourceCode): UISourceCodeDiff {\n    let diff = this.uiSourceCodeDiffs.get(uiSourceCode);\n    if (!diff) {\n      diff = new UISourceCodeDiff(uiSourceCode);\n      this.uiSourceCodeDiffs.set(uiSourceCode, diff);\n    }\n    return diff;\n  }\n\n  private uiSourceCodeChanged(\n      event: Common.EventTarget.EventTargetEvent<{uiSourceCode: Workspace.UISourceCode.UISourceCode}>): void {\n    const uiSourceCode = event.data.uiSourceCode;\n    void this.updateModifiedState(uiSourceCode);\n  }\n\n  private uiSourceCodeAdded(event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.UISourceCode>): void {\n    const uiSourceCode = event.data;\n    void this.updateModifiedState(uiSourceCode);\n  }\n\n  private uiSourceCodeRemoved(event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.UISourceCode>): void {\n    const uiSourceCode = event.data;\n    this.removeUISourceCode(uiSourceCode);\n  }\n\n  private projectRemoved(event: Common.EventTarget.EventTargetEvent<Workspace.Workspace.Project>): void {\n    const project = event.data;\n    for (const uiSourceCode of project.uiSourceCodes()) {\n      this.removeUISourceCode(uiSourceCode);\n    }\n  }\n\n  private removeUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    this.loadingUISourceCodes.delete(uiSourceCode);\n    const uiSourceCodeDiff = this.uiSourceCodeDiffs.get(uiSourceCode);\n    if (uiSourceCodeDiff) {\n      uiSourceCodeDiff.dispose = true;\n    }\n    this.markAsUnmodified(uiSourceCode);\n  }\n\n  private markAsUnmodified(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    this.uiSourceCodeProcessedForTest();\n    if (this.modifiedUISourceCodesInternal.delete(uiSourceCode)) {\n      this.dispatchEventToListeners(Events.ModifiedStatusChanged, {uiSourceCode, isModified: false});\n    }\n  }\n\n  private markAsModified(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    this.uiSourceCodeProcessedForTest();\n    if (this.modifiedUISourceCodesInternal.has(uiSourceCode)) {\n      return;\n    }\n    this.modifiedUISourceCodesInternal.add(uiSourceCode);\n    this.dispatchEventToListeners(Events.ModifiedStatusChanged, {uiSourceCode, isModified: true});\n  }\n\n  private uiSourceCodeProcessedForTest(): void {\n  }\n\n  private async updateModifiedState(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    this.loadingUISourceCodes.delete(uiSourceCode);\n\n    if (uiSourceCode.project().type() !== Workspace.Workspace.projectTypes.Network) {\n      this.markAsUnmodified(uiSourceCode);\n      return;\n    }\n    if (uiSourceCode.isDirty()) {\n      this.markAsModified(uiSourceCode);\n      return;\n    }\n    if (!uiSourceCode.hasCommits()) {\n      this.markAsUnmodified(uiSourceCode);\n      return;\n    }\n\n    const contentsPromise = Promise.all([\n      this.requestOriginalContentForUISourceCode(uiSourceCode),\n      uiSourceCode.requestContent().then(deferredContent => deferredContent.content),\n    ]);\n\n    this.loadingUISourceCodes.set(uiSourceCode, contentsPromise);\n    const contents = await contentsPromise;\n    if (this.loadingUISourceCodes.get(uiSourceCode) !== contentsPromise) {\n      return;\n    }\n    this.loadingUISourceCodes.delete(uiSourceCode);\n\n    if (contents[0] !== null && contents[1] !== null && contents[0] !== contents[1]) {\n      this.markAsModified(uiSourceCode);\n    } else {\n      this.markAsUnmodified(uiSourceCode);\n    }\n  }\n\n  requestOriginalContentForUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<string|null> {\n    return this.uiSourceCodeDiff(uiSourceCode).originalContent();\n  }\n\n  revertToOriginal(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    function callback(content: string|null): void {\n      if (typeof content !== 'string') {\n        return;\n      }\n\n      uiSourceCode.addRevision(content);\n    }\n\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.RevisionApplied);\n    return this.requestOriginalContentForUISourceCode(uiSourceCode).then(callback);\n  }\n}\n\nexport const enum Events {\n  ModifiedStatusChanged = 'ModifiedStatusChanged',\n}\n\nexport interface ModifiedStatusChangedEvent {\n  uiSourceCode: Workspace.UISourceCode.UISourceCode;\n  isModified: boolean;\n}\n\nexport type EventTypes = {\n  [Events.ModifiedStatusChanged]: ModifiedStatusChangedEvent,\n};\n\nexport class UISourceCodeDiff extends Common.ObjectWrapper.ObjectWrapper<UISourceCodeDiffEventTypes> {\n  private uiSourceCode: Workspace.UISourceCode.UISourceCode;\n  private requestDiffPromise: Promise<DiffResponse|null>|null;\n  private pendingChanges: number|null;\n  dispose: boolean;\n  constructor(uiSourceCode: Workspace.UISourceCode.UISourceCode) {\n    super();\n    this.uiSourceCode = uiSourceCode;\n    uiSourceCode.addEventListener(Workspace.UISourceCode.Events.WorkingCopyChanged, this.uiSourceCodeChanged, this);\n    uiSourceCode.addEventListener(Workspace.UISourceCode.Events.WorkingCopyCommitted, this.uiSourceCodeChanged, this);\n    this.requestDiffPromise = null;\n    this.pendingChanges = null;\n    this.dispose = false;\n  }\n\n  private uiSourceCodeChanged(): void {\n    if (this.pendingChanges) {\n      clearTimeout(this.pendingChanges);\n      this.pendingChanges = null;\n    }\n    this.requestDiffPromise = null;\n\n    const content = this.uiSourceCode.content();\n    const delay = (!content || content.length < 65536) ? 0 : UpdateTimeout;\n    this.pendingChanges = window.setTimeout(emitDiffChanged.bind(this), delay);\n\n    function emitDiffChanged(this: UISourceCodeDiff): void {\n      if (this.dispose) {\n        return;\n      }\n      this.dispatchEventToListeners(UISourceCodeDiffEvents.DiffChanged);\n      this.pendingChanges = null;\n    }\n  }\n\n  requestDiff(diffRequestOptions: DiffRequestOptions): Promise<DiffResponse|null> {\n    if (!this.requestDiffPromise) {\n      this.requestDiffPromise = this.innerRequestDiff(diffRequestOptions);\n    }\n    return this.requestDiffPromise;\n  }\n\n  async originalContent(): Promise<string|null> {\n    const originalNetworkContent =\n        Persistence.NetworkPersistenceManager.NetworkPersistenceManager.instance().originalContentForUISourceCode(\n            this.uiSourceCode);\n    if (originalNetworkContent) {\n      return originalNetworkContent;\n    }\n\n    const content = await this.uiSourceCode.project().requestFileContent(this.uiSourceCode);\n    return content.content || ('error' in content && content.error) || '';\n  }\n\n  private async innerRequestDiff({shouldFormatDiff}: DiffRequestOptions): Promise<DiffResponse|null> {\n    if (this.dispose) {\n      return null;\n    }\n\n    let baseline = await this.originalContent();\n    if (baseline === null) {\n      return null;\n    }\n    if (baseline.length > 1024 * 1024) {\n      return null;\n    }\n    // ------------ ASYNC ------------\n    if (this.dispose) {\n      return null;\n    }\n\n    let current = this.uiSourceCode.workingCopy();\n    if (!current && !this.uiSourceCode.contentLoaded()) {\n      current = ((await this.uiSourceCode.requestContent()).content as string);\n    }\n\n    if (current.length > 1024 * 1024) {\n      return null;\n    }\n\n    if (this.dispose) {\n      return null;\n    }\n\n    if (current === null || baseline === null) {\n      return null;\n    }\n    let formattedCurrentMapping;\n    if (shouldFormatDiff) {\n      baseline = (await FormatterModule.ScriptFormatter.format(\n                      this.uiSourceCode.contentType(), this.uiSourceCode.mimeType(), baseline))\n                     .formattedContent;\n      const formatCurrentResult = await FormatterModule.ScriptFormatter.format(\n          this.uiSourceCode.contentType(), this.uiSourceCode.mimeType(), current);\n      current = formatCurrentResult.formattedContent;\n      formattedCurrentMapping = formatCurrentResult.formattedMapping;\n    }\n    const reNewline = /\\r\\n?|\\n/;\n    const diff = Diff.Diff.DiffWrapper.lineDiff(baseline.split(reNewline), current.split(reNewline));\n    return {\n      diff,\n      formattedCurrentMapping,\n    };\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum UISourceCodeDiffEvents {\n  DiffChanged = 'DiffChanged',\n}\n\nexport type UISourceCodeDiffEventTypes = {\n  [UISourceCodeDiffEvents.DiffChanged]: void,\n};\n\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet _instance: WorkspaceDiffImpl|null = null;\n\nexport function workspaceDiff(): WorkspaceDiffImpl {\n  if (!_instance) {\n    _instance = new WorkspaceDiffImpl(Workspace.Workspace.WorkspaceImpl.instance());\n  }\n  return _instance;\n}\n\nexport class DiffUILocation {\n  uiSourceCode: Workspace.UISourceCode.UISourceCode;\n  constructor(uiSourceCode: Workspace.UISourceCode.UISourceCode) {\n    this.uiSourceCode = uiSourceCode;\n  }\n}\n\nexport const UpdateTimeout = 200;\n"],
  "mappings": "AAIA;AACA;AACA;AACA;AACA;AACA;AAWO,uCAAgC,OAAO,cAAc,cAA0B;AAAA,EACnE;AAAA,EACA;AAAA,EAEA;AAAA,EAEjB,YAAY,WAA8C;AACxD;AACA,SAAK,oBAAoB,oBAAI;AAE7B,SAAK,uBAAuB,oBAAI;AAEhC,SAAK,gCAAgC,oBAAI;AACzC,cAAU,iBAAiB,UAAU,UAAU,OAAO,oBAAoB,KAAK,qBAAqB;AACpG,cAAU,iBAAiB,UAAU,UAAU,OAAO,sBAAsB,KAAK,qBAAqB;AACtG,cAAU,iBAAiB,UAAU,UAAU,OAAO,mBAAmB,KAAK,mBAAmB;AACjG,cAAU,iBAAiB,UAAU,UAAU,OAAO,qBAAqB,KAAK,qBAAqB;AACrG,cAAU,iBAAiB,UAAU,UAAU,OAAO,gBAAgB,KAAK,gBAAgB;AAC3F,cAAU,gBAAgB,QAAQ,KAAK,oBAAoB,KAAK;AAAA;AAAA,EAGlE,YAAY,cAAmD,oBAChC;AAC7B,WAAO,KAAK,iBAAiB,cAAc,YAAY;AAAA;AAAA,EAGzD,sBAAsB,cAAmD,UAAsB,SACtF;AACP,SAAK,iBAAiB,cAAc,iBAAiB,uBAAuB,aAAa,UAAU;AAAA;AAAA,EAGrG,0BAA0B,cAAmD,UAAsB,SAC1F;AACP,SAAK,iBAAiB,cAAc,oBAAoB,uBAAuB,aAAa,UAAU;AAAA;AAAA,EAGxG,wBAA+D;AAC7D,WAAO,MAAM,KAAK,KAAK;AAAA;AAAA,EAGzB,uBAAuB,cAA4D;AACjF,WAAO,KAAK,8BAA8B,IAAI,iBAAiB,KAAK,qBAAqB,IAAI;AAAA;AAAA,EAGvF,iBAAiB,cAAqE;AAC5F,QAAI,OAAO,KAAK,kBAAkB,IAAI;AACtC,QAAI,CAAC,MAAM;AACT,aAAO,IAAI,iBAAiB;AAC5B,WAAK,kBAAkB,IAAI,cAAc;AAAA;AAE3C,WAAO;AAAA;AAAA,EAGD,oBACJ,OAAuG;AACzG,UAAM,eAAe,MAAM,KAAK;AAChC,SAAK,KAAK,oBAAoB;AAAA;AAAA,EAGxB,kBAAkB,OAAuF;AAC/G,UAAM,eAAe,MAAM;AAC3B,SAAK,KAAK,oBAAoB;AAAA;AAAA,EAGxB,oBAAoB,OAAuF;AACjH,UAAM,eAAe,MAAM;AAC3B,SAAK,mBAAmB;AAAA;AAAA,EAGlB,eAAe,OAA+E;AACpG,UAAM,UAAU,MAAM;AACtB,eAAW,gBAAgB,QAAQ,iBAAiB;AAClD,WAAK,mBAAmB;AAAA;AAAA;AAAA,EAIpB,mBAAmB,cAAyD;AAClF,SAAK,qBAAqB,OAAO;AACjC,UAAM,mBAAmB,KAAK,kBAAkB,IAAI;AACpD,QAAI,kBAAkB;AACpB,uBAAiB,UAAU;AAAA;AAE7B,SAAK,iBAAiB;AAAA;AAAA,EAGhB,iBAAiB,cAAyD;AAChF,SAAK;AACL,QAAI,KAAK,8BAA8B,OAAO,eAAe;AAC3D,WAAK,yBAAyB,OAAO,uBAAuB,EAAC,cAAc,YAAY;AAAA;AAAA;AAAA,EAInF,eAAe,cAAyD;AAC9E,SAAK;AACL,QAAI,KAAK,8BAA8B,IAAI,eAAe;AACxD;AAAA;AAEF,SAAK,8BAA8B,IAAI;AACvC,SAAK,yBAAyB,OAAO,uBAAuB,EAAC,cAAc,YAAY;AAAA;AAAA,EAGjF,+BAAqC;AAAA;AAAA,QAG/B,oBAAoB,cAAkE;AAClG,SAAK,qBAAqB,OAAO;AAEjC,QAAI,aAAa,UAAU,WAAW,UAAU,UAAU,aAAa,SAAS;AAC9E,WAAK,iBAAiB;AACtB;AAAA;AAEF,QAAI,aAAa,WAAW;AAC1B,WAAK,eAAe;AACpB;AAAA;AAEF,QAAI,CAAC,aAAa,cAAc;AAC9B,WAAK,iBAAiB;AACtB;AAAA;AAGF,UAAM,kBAAkB,QAAQ,IAAI;AAAA,MAClC,KAAK,sCAAsC;AAAA,MAC3C,aAAa,iBAAiB,KAAK,qBAAmB,gBAAgB;AAAA;AAGxE,SAAK,qBAAqB,IAAI,cAAc;AAC5C,UAAM,WAAW,MAAM;AACvB,QAAI,KAAK,qBAAqB,IAAI,kBAAkB,iBAAiB;AACnE;AAAA;AAEF,SAAK,qBAAqB,OAAO;AAEjC,QAAI,SAAS,OAAO,QAAQ,SAAS,OAAO,QAAQ,SAAS,OAAO,SAAS,IAAI;AAC/E,WAAK,eAAe;AAAA,WACf;AACL,WAAK,iBAAiB;AAAA;AAAA;AAAA,EAI1B,sCAAsC,cAAyE;AAC7G,WAAO,KAAK,iBAAiB,cAAc;AAAA;AAAA,EAG7C,iBAAiB,cAAkE;AACjF,sBAAkB,SAA4B;AAC5C,UAAI,OAAO,YAAY,UAAU;AAC/B;AAAA;AAGF,mBAAa,YAAY;AAAA;AAG3B,SAAK,YAAY,YAAY,KAAK,YAAY,OAAO;AACrD,WAAO,KAAK,sCAAsC,cAAc,KAAK;AAAA;AAAA;AAIlE,WAAW,SAAX,kBAAW,YAAX;AACL,qCAAwB;AADR;AAAA;AAaX,sCAA+B,OAAO,cAAc,cAA0C;AAAA,EAC3F;AAAA,EACA;AAAA,EACA;AAAA,EACR;AAAA,EACA,YAAY,cAAmD;AAC7D;AACA,SAAK,eAAe;AACpB,iBAAa,iBAAiB,UAAU,aAAa,OAAO,oBAAoB,KAAK,qBAAqB;AAC1G,iBAAa,iBAAiB,UAAU,aAAa,OAAO,sBAAsB,KAAK,qBAAqB;AAC5G,SAAK,qBAAqB;AAC1B,SAAK,iBAAiB;AACtB,SAAK,UAAU;AAAA;AAAA,EAGT,sBAA4B;AAClC,QAAI,KAAK,gBAAgB;AACvB,mBAAa,KAAK;AAClB,WAAK,iBAAiB;AAAA;AAExB,SAAK,qBAAqB;AAE1B,UAAM,UAAU,KAAK,aAAa;AAClC,UAAM,QAAS,CAAC,WAAW,QAAQ,SAAS,QAAS,IAAI;AACzD,SAAK,iBAAiB,OAAO,WAAW,gBAAgB,KAAK,OAAO;AAEpE,+BAAuD;AACrD,UAAI,KAAK,SAAS;AAChB;AAAA;AAEF,WAAK,yBAAyB,uBAAuB;AACrD,WAAK,iBAAiB;AAAA;AAAA;AAAA,EAI1B,YAAY,oBAAoE;AAC9E,QAAI,CAAC,KAAK,oBAAoB;AAC5B,WAAK,qBAAqB,KAAK,iBAAiB;AAAA;AAElD,WAAO,KAAK;AAAA;AAAA,QAGR,kBAAwC;AAC5C,UAAM,yBACF,YAAY,0BAA0B,0BAA0B,WAAW,+BACvE,KAAK;AACb,QAAI,wBAAwB;AAC1B,aAAO;AAAA;AAGT,UAAM,UAAU,MAAM,KAAK,aAAa,UAAU,mBAAmB,KAAK;AAC1E,WAAO,QAAQ,WAAY,WAAW,WAAW,QAAQ,SAAU;AAAA;AAAA,QAGvD,iBAAiB,EAAC,oBAAmE;AACjG,QAAI,KAAK,SAAS;AAChB,aAAO;AAAA;AAGT,QAAI,WAAW,MAAM,KAAK;AAC1B,QAAI,aAAa,MAAM;AACrB,aAAO;AAAA;AAET,QAAI,SAAS,SAAS,OAAO,MAAM;AACjC,aAAO;AAAA;AAGT,QAAI,KAAK,SAAS;AAChB,aAAO;AAAA;AAGT,QAAI,UAAU,KAAK,aAAa;AAChC,QAAI,CAAC,WAAW,CAAC,KAAK,aAAa,iBAAiB;AAClD,gBAAY,OAAM,KAAK,aAAa,kBAAkB;AAAA;AAGxD,QAAI,QAAQ,SAAS,OAAO,MAAM;AAChC,aAAO;AAAA;AAGT,QAAI,KAAK,SAAS;AAChB,aAAO;AAAA;AAGT,QAAI,YAAY,QAAQ,aAAa,MAAM;AACzC,aAAO;AAAA;AAET,QAAI;AACJ,QAAI,kBAAkB;AACpB,iBAAY,OAAM,gBAAgB,gBAAgB,OAClC,KAAK,aAAa,eAAe,KAAK,aAAa,YAAY,WAC/D;AAChB,YAAM,sBAAsB,MAAM,gBAAgB,gBAAgB,OAC9D,KAAK,aAAa,eAAe,KAAK,aAAa,YAAY;AACnE,gBAAU,oBAAoB;AAC9B,gCAA0B,oBAAoB;AAAA;AAEhD,UAAM,YAAY;AAClB,UAAM,OAAO,KAAK,KAAK,YAAY,SAAS,SAAS,MAAM,YAAY,QAAQ,MAAM;AACrF,WAAO;AAAA,MACL;AAAA,MACA;AAAA;AAAA;AAAA;AAOC,WAAK,yBAAL,kBAAK,4BAAL;AACL,2CAAc;AADJ;AAAA;AAUZ,IAAI,YAAoC;AAEjC,gCAA4C;AACjD,MAAI,CAAC,WAAW;AACd,gBAAY,IAAI,kBAAkB,UAAU,UAAU,cAAc;AAAA;AAEtE,SAAO;AAAA;AAGF,4BAAqB;AAAA,EAC1B;AAAA,EACA,YAAY,cAAmD;AAC7D,SAAK,eAAe;AAAA;AAAA;AAIjB,aAAM,gBAAgB;",
  "names": []
}
