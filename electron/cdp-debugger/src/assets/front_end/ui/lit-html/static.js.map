{
  "version": 3,
  "sources": ["../../../../../../front_end/ui/lit-html/static.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as LitHtml from '../../third_party/lit-html/lit-html.js';\n\nexport interface Static {\n  value: unknown;\n  $$static$$: true;\n}\n\ntype TemplateValues = Static|unknown;\ntype FlattenedTemplateValues = {\n  strings: TemplateStringsArray,\n  valueMap: boolean[],\n};\n\nexport function flattenTemplate(strings: TemplateStringsArray, ...values: TemplateValues[]): FlattenedTemplateValues {\n  const valueMap: boolean[] = [];\n  const newStrings: string[] = [];\n\n  // Start with an empty buffer and start running over the values.\n  let buffer = '';\n  for (let v = 0; v < values.length; v++) {\n    const possibleStatic = values[v];\n    if (isStaticLiteral(possibleStatic)) {\n      // If this is a static literal, add the current string plus the\n      // static literal's value to the buffer.\n      buffer += strings[v] + possibleStatic.value;\n\n      // Filter this value in future invocations.\n      valueMap.push(false);\n    } else {\n      // If we reach a non-static value, push what we have on to\n      // the new strings array, and reset the buffer.\n      buffer += strings[v];\n      newStrings.push(buffer);\n      buffer = '';\n\n      // Include this value in future invocations.\n      valueMap.push(true);\n    }\n  }\n\n  // Since the strings length is always the values length + 1, we need\n  // to append whatever that final string is to whatever is left in the\n  // buffer, and flush both out to the newStrings.\n  newStrings.push(buffer + strings[values.length]);\n  (newStrings as unknown as {raw: readonly string[]}).raw = [...newStrings];\n  return {strings: newStrings as unknown as TemplateStringsArray, valueMap};\n}\n\nexport function html(strings: TemplateStringsArray, ...values: TemplateValues[]): LitHtml.TemplateResult {\n  if (values.some(value => isStaticLiteral(value))) {\n    return htmlWithStatics(strings, ...values);\n  }\n\n  return LitHtml.html(strings, ...values);\n}\n\nexport function literal(value: TemplateStringsArray): Static {\n  return {\n    value: value[0],\n    $$static$$: true,\n  };\n}\n\nfunction isStaticLiteral(item: TemplateValues|unknown): item is Static {\n  return typeof item === 'object' && (item !== null && '$$static$$' in item);\n}\n\nconst flattenedTemplates = new WeakMap<TemplateStringsArray, FlattenedTemplateValues>();\nfunction htmlWithStatics(strings: TemplateStringsArray, ...values: TemplateValues[]): LitHtml.TemplateResult {\n  // Check to see if we've already converted this before.\n  const existing = flattenedTemplates.get(strings);\n  if (existing) {\n    const filteredValues = values.filter((a, index) => {\n      if (!existing) {\n        return false;\n      }\n\n      return existing.valueMap[index];\n    });\n\n    // Pass through to Lit.\n    return LitHtml.html(existing.strings, ...filteredValues);\n  }\n\n  flattenedTemplates.set(strings, flattenTemplate(strings, ...values));\n  return htmlWithStatics(strings, ...values);\n}\n"],
  "mappings": "AAIA;AAaO,gCAAyB,YAAkC,QAAmD;AACnH,QAAM,WAAsB;AAC5B,QAAM,aAAuB;AAG7B,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,UAAM,iBAAiB,OAAO;AAC9B,QAAI,gBAAgB,iBAAiB;AAGnC,gBAAU,QAAQ,KAAK,eAAe;AAGtC,eAAS,KAAK;AAAA,WACT;AAGL,gBAAU,QAAQ;AAClB,iBAAW,KAAK;AAChB,eAAS;AAGT,eAAS,KAAK;AAAA;AAAA;AAOlB,aAAW,KAAK,SAAS,QAAQ,OAAO;AACxC,EAAC,WAAmD,MAAM,CAAC,GAAG;AAC9D,SAAO,EAAC,SAAS,YAA+C;AAAA;AAG3D,qBAAc,YAAkC,QAAkD;AACvG,MAAI,OAAO,KAAK,WAAS,gBAAgB,SAAS;AAChD,WAAO,gBAAgB,SAAS,GAAG;AAAA;AAGrC,SAAO,QAAQ,KAAK,SAAS,GAAG;AAAA;AAG3B,wBAAiB,OAAqC;AAC3D,SAAO;AAAA,IACL,OAAO,MAAM;AAAA,IACb,YAAY;AAAA;AAAA;AAIhB,yBAAyB,MAA8C;AACrE,SAAO,OAAO,SAAS,YAAa,UAAS,QAAQ,gBAAgB;AAAA;AAGvE,MAAM,qBAAqB,oBAAI;AAC/B,yBAAyB,YAAkC,QAAkD;AAE3G,QAAM,WAAW,mBAAmB,IAAI;AACxC,MAAI,UAAU;AACZ,UAAM,iBAAiB,OAAO,OAAO,CAAC,GAAG,UAAU;AACjD,UAAI,CAAC,UAAU;AACb,eAAO;AAAA;AAGT,aAAO,SAAS,SAAS;AAAA;AAI3B,WAAO,QAAQ,KAAK,SAAS,SAAS,GAAG;AAAA;AAG3C,qBAAmB,IAAI,SAAS,gBAAgB,SAAS,GAAG;AAC5D,SAAO,gBAAgB,SAAS,GAAG;AAAA;",
  "names": []
}
