{
  "version": 3,
  "sources": ["../../../../../../../front_end/ui/components/linear_memory_inspector/ValueInterpreterSettings.ts"],
  "sourcesContent": ["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as LitHtml from '../../lit-html/lit-html.js';\nimport * as ComponentHelpers from '../helpers/helpers.js';\nimport * as Input from '../input/input.js';\n\nimport {ValueType, valueTypeToLocalizedString} from './ValueInterpreterDisplayUtils.js';\nimport valueInterpreterSettingsStyles from './valueInterpreterSettings.css.js';\n\nconst {render, html} = LitHtml;\n\nconst UIStrings = {\n  /**\n  *@description Name of a group of selectable value types that do not fall under integer and floating point value types, e.g. Pointer32. The group appears name appears under the Value Interpreter Settings.\n  */\n  otherGroup: 'Other',\n};\nconst str_ =\n    i18n.i18n.registerUIStrings('ui/components/linear_memory_inspector/ValueInterpreterSettings.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface ValueInterpreterSettingsData {\n  valueTypes: Set<ValueType>;\n}\n\nconst enum ValueTypeGroup {\n  Integer = 'Integer',\n  Float = 'Floating point',\n  Other = 'Other',\n}\n\nconst GROUP_TO_TYPES = new Map(\n    [\n      [ValueTypeGroup.Integer, [ValueType.Int8, ValueType.Int16, ValueType.Int32, ValueType.Int64]],\n      [ValueTypeGroup.Float, [ValueType.Float32, ValueType.Float64]],\n      [ValueTypeGroup.Other, [ValueType.Pointer32, ValueType.Pointer64]],\n    ],\n);\n\nfunction valueTypeGroupToLocalizedString(group: ValueTypeGroup): string {\n  if (group === ValueTypeGroup.Other) {\n    return i18nString(UIStrings.otherGroup);\n  }\n\n  // The remaining group type names should not be localized.\n  return group;\n}\n\nexport class TypeToggleEvent extends Event {\n  static readonly eventName = 'typetoggle';\n  data: {type: ValueType, checked: boolean};\n\n  constructor(type: ValueType, checked: boolean) {\n    super(TypeToggleEvent.eventName);\n    this.data = {type, checked};\n  }\n}\n\nexport class ValueInterpreterSettings extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-linear-memory-inspector-interpreter-settings`;\n\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #valueTypes: Set<ValueType> = new Set();\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [Input.checkboxStyles, valueInterpreterSettingsStyles];\n  }\n\n  set data(data: ValueInterpreterSettingsData) {\n    this.#valueTypes = data.valueTypes;\n    this.#render();\n  }\n\n  #render(): void {\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`\n      <div class=\"settings\">\n       ${[...GROUP_TO_TYPES.keys()].map(group => {\n        return html`\n          <div class=\"value-types-selection\">\n            <span class=\"group\">${valueTypeGroupToLocalizedString(group)}</span>\n            ${this.#plotTypeSelections(group)}\n          </div>\n        `;})}\n      </div>\n      `, this.#shadow, {host: this});\n  }\n\n  #plotTypeSelections(group: ValueTypeGroup): LitHtml.TemplateResult {\n    const types = GROUP_TO_TYPES.get(group);\n    if (!types) {\n      throw new Error(`Unknown group ${group}`);\n    }\n    return html`\n      ${types.map(type => {\n        return html`\n          <label class=\"type-label\" title=${valueTypeToLocalizedString(type)}>\n            <input data-input=\"true\" type=\"checkbox\" .checked=${this.#valueTypes.has(type)} @change=${(e: Event): void => this.#onTypeToggle(type, e)}>\n            <span data-title=\"true\">${valueTypeToLocalizedString(type)}</span>\n          </label>\n     `;})}`;\n  }\n\n  #onTypeToggle(type: ValueType, event: Event): void {\n    const checkbox = event.target as HTMLInputElement;\n    this.dispatchEvent(new TypeToggleEvent(type, checkbox.checked));\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-linear-memory-inspector-interpreter-settings', ValueInterpreterSettings);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\ninterface HTMLElementTagNameMap {\n    'devtools-linear-memory-inspector-interpreter-settings': ValueInterpreterSettings;\n  }\n}\n"],
  "mappings": "AAIA;AACA;AACA;AACA;AAEA;AACA;AAEA,MAAM,EAAC,QAAQ,SAAQ;AAEvB,MAAM,YAAY;AAAA,EAIhB,YAAY;AAAA;AAEd,MAAM,OACF,KAAK,KAAK,kBAAkB,qEAAqE;AACrG,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAMhE,IAAW,iBAAX,kBAAW,oBAAX;AACE,+BAAU;AACV,6BAAQ;AACR,6BAAQ;AAHC;AAAA;AAMX,MAAM,iBAAiB,oBAAI,IACvB;AAAA,EACE,CAAC,yBAAwB,CAAC,UAAU,MAAM,UAAU,OAAO,UAAU,OAAO,UAAU;AAAA,EACtF,CAAC,8BAAsB,CAAC,UAAU,SAAS,UAAU;AAAA,EACrD,CAAC,qBAAsB,CAAC,UAAU,WAAW,UAAU;AAAA;AAI7D,yCAAyC,OAA+B;AACtE,MAAI,UAAU,qBAAsB;AAClC,WAAO,WAAW,UAAU;AAAA;AAI9B,SAAO;AAAA;AAGF,qCAA8B,MAAM;AAAA,SACzB,YAAY;AAAA,EAC5B;AAAA,EAEA,YAAY,MAAiB,SAAkB;AAC7C,UAAM,gBAAgB;AACtB,SAAK,OAAO,EAAC,MAAM;AAAA;AAAA;AAIhB,8CAAuC,YAAY;AAAA,SACxC,aAAa,QAAQ;AAAA,YAElB,KAAK,aAAa,EAAC,MAAM;AAAA,gBACd,oBAAI;AAAA,EAElC,oBAA0B;AACxB,iBAAa,qBAAqB,CAAC,MAAM,gBAAgB;AAAA;AAAA,MAGvD,KAAK,MAAoC;AAC3C,uBAAmB,KAAK;AACxB;AAAA;AAAA,YAGc;AAGd,WAAO;AAAA;AAAA,SAEF,CAAC,GAAG,eAAe,QAAQ,IAAI,WAAS;AACzC,aAAO;AAAA;AAAA,kCAEmB,gCAAgC;AAAA,cACpD,yBAAyB;AAAA;AAAA;AAAA;AAAA;AAAA,SAI9B,cAAc,EAAC,MAAM;AAAA;AAAA,sBAGR,OAA+C;AACjE,UAAM,QAAQ,eAAe,IAAI;AACjC,QAAI,CAAC,OAAO;AACV,YAAM,IAAI,MAAM,iBAAiB;AAAA;AAEnC,WAAO;AAAA,QACH,MAAM,IAAI,UAAQ;AAClB,aAAO;AAAA,4CAC6B,2BAA2B;AAAA,gEACP,iBAAiB,IAAI,iBAAiB,CAAC,MAAmB,mBAAmB,MAAM;AAAA,sCAC7G,2BAA2B;AAAA;AAAA;AAAA;AAAA;AAAA,gBAKjD,MAAiB,OAAoB;AACjD,UAAM,WAAW,MAAM;AACvB,SAAK,cAAc,IAAI,gBAAgB,MAAM,SAAS;AAAA;AAAA;AAI1D,iBAAiB,eAAe,gBAAgB,yDAAyD;",
  "names": []
}
