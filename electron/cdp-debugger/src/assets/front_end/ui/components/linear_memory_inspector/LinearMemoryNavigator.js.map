{
  "version": 3,
  "sources": ["../../../../../../../front_end/ui/components/linear_memory_inspector/LinearMemoryNavigator.ts"],
  "sourcesContent": ["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as LitHtml from '../../lit-html/lit-html.js';\nimport * as ComponentHelpers from '../helpers/helpers.js';\nimport * as IconButton from '../icon_button/icon_button.js';\nimport linearMemoryNavigatorStyles from './linearMemoryNavigator.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Tooltip text that appears when hovering over a valid memory address (e.g. 0x0) in the address line in the Linear Memory Inspector.\n  */\n  enterAddress: 'Enter address',\n  /**\n  *@description Tooltip text that appears when hovering over the button to go back in history in the Linear Memory Navigator\n  */\n  goBackInAddressHistory: 'Go back in address history',\n  /**\n  *@description Tooltip text that appears when hovering over the button to go forward in history in the Linear Memory Navigator\n  */\n  goForwardInAddressHistory: 'Go forward in address history',\n  /**\n  *@description Tooltip text that appears when hovering over the page back icon in the Linear Memory Navigator\n  */\n  previousPage: 'Previous page',\n  /**\n  *@description Tooltip text that appears when hovering over the next page icon in the Linear Memory Navigator\n  */\n  nextPage: 'Next page',\n  /**\n  *@description Text to refresh the page\n  */\n  refresh: 'Refresh',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/components/linear_memory_inspector/LinearMemoryNavigator.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst {render, html} = LitHtml;\n\nexport const enum Navigation {\n  Backward = 'Backward',\n  Forward = 'Forward',\n}\n\nexport class AddressInputChangedEvent extends Event {\n  static readonly eventName = 'addressinputchanged';\n  data: {address: string, mode: Mode};\n\n  constructor(address: string, mode: Mode) {\n    super(AddressInputChangedEvent.eventName);\n    this.data = {address, mode};\n  }\n}\n\nexport class PageNavigationEvent extends Event {\n  static readonly eventName = 'pagenavigation';\n  data: Navigation;\n\n  constructor(navigation: Navigation) {\n    super(PageNavigationEvent.eventName, {});\n    this.data = navigation;\n  }\n}\n\nexport class HistoryNavigationEvent extends Event {\n  static readonly eventName = 'historynavigation';\n  data: Navigation;\n\n  constructor(navigation: Navigation) {\n    super(HistoryNavigationEvent.eventName, {});\n    this.data = navigation;\n  }\n}\n\nexport class RefreshRequestedEvent extends Event {\n  static readonly eventName = 'refreshrequested';\n  constructor() {\n    super(RefreshRequestedEvent.eventName, {});\n  }\n}\n\nexport interface LinearMemoryNavigatorData {\n  address: string;\n  mode: Mode;\n  canGoBackInHistory: boolean;\n  canGoForwardInHistory: boolean;\n  valid: boolean;\n  error: string|undefined;\n}\n\nexport const enum Mode {\n  Edit = 'Edit',\n  Submitted = 'Submitted',\n  InvalidSubmit = 'InvalidSubmit',\n}\n\nexport class LinearMemoryNavigator extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-linear-memory-inspector-navigator`;\n\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #address = '0';\n  #error: string|undefined = undefined;\n  #valid = true;\n  #canGoBackInHistory = false;\n  #canGoForwardInHistory = false;\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [linearMemoryNavigatorStyles];\n  }\n\n  set data(data: LinearMemoryNavigatorData) {\n    this.#address = data.address;\n    this.#error = data.error;\n    this.#valid = data.valid;\n    this.#canGoBackInHistory = data.canGoBackInHistory;\n    this.#canGoForwardInHistory = data.canGoForwardInHistory;\n    this.#render();\n\n    const addressInput = this.#shadow.querySelector<HTMLInputElement>('.address-input');\n    if (addressInput) {\n      if (data.mode === Mode.Submitted) {\n        addressInput.blur();\n      } else if (data.mode === Mode.InvalidSubmit) {\n        addressInput.select();\n      }\n    }\n  }\n\n  #render(): void {\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    const result = html`\n      <div class=\"navigator\">\n        <div class=\"navigator-item\">\n          ${this.#createButton({icon: 'ic_undo_16x16_icon', title: i18nString(UIStrings.goBackInAddressHistory),\n              event: new HistoryNavigationEvent(Navigation.Backward), enabled: this.#canGoBackInHistory})}\n          ${this.#createButton({icon: 'ic_redo_16x16_icon', title: i18nString(UIStrings.goForwardInAddressHistory),\n              event: new HistoryNavigationEvent(Navigation.Forward), enabled: this.#canGoForwardInHistory})}\n        </div>\n        <div class=\"navigator-item\">\n          ${this.#createButton({icon: 'ic_page_prev_16x16_icon', title: i18nString(UIStrings.previousPage),\n              event: new PageNavigationEvent(Navigation.Backward), enabled: true})}\n          ${this.#createAddressInput()}\n          ${this.#createButton({icon: 'ic_page_next_16x16_icon', title: i18nString(UIStrings.nextPage),\n              event: new PageNavigationEvent(Navigation.Forward), enabled: true})}\n        </div>\n        ${this.#createButton({icon: 'refresh_12x12_icon', title: i18nString(UIStrings.refresh),\n            event: new RefreshRequestedEvent(), enabled: true})}\n      </div>\n      `;\n      render(result, this.#shadow, {host: this});\n    // clang-format on\n  }\n\n  #createAddressInput(): LitHtml.TemplateResult {\n    const classMap = {\n      'address-input': true,\n      invalid: !this.#valid,\n    };\n    return html`\n      <input class=${LitHtml.Directives.classMap(classMap)} data-input=\"true\" .value=${this.#address}\n        title=${this.#valid ? i18nString(UIStrings.enterAddress) : this.#error} @change=${\n        this.#onAddressChange.bind(this, Mode.Submitted)} @input=${this.#onAddressChange.bind(this, Mode.Edit)}/>`;\n  }\n\n  #onAddressChange(mode: Mode, event: Event): void {\n    const addressInput = event.target as HTMLInputElement;\n    this.dispatchEvent(new AddressInputChangedEvent(addressInput.value, mode));\n  }\n\n  #createButton(data: {icon: string, title: string, event: Event, enabled: boolean}): LitHtml.TemplateResult {\n    const iconColor = data.enabled ? 'var(--color-text-secondary)' : 'var(--color-background-highlight)';\n    return html`\n      <button class=\"navigator-button\" ?disabled=${!data.enabled}\n        data-button=${data.event.type} title=${data.title}\n        @click=${this.dispatchEvent.bind(this, data.event)}>\n        <${IconButton.Icon.Icon.litTagName} .data=${\n        {iconName: data.icon, color: iconColor, width: '14px'} as IconButton.Icon.IconWithName}>\n        </${IconButton.Icon.Icon.litTagName}>\n      </button>`;\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-linear-memory-inspector-navigator', LinearMemoryNavigator);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-linear-memory-inspector-navigator': LinearMemoryNavigator;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
