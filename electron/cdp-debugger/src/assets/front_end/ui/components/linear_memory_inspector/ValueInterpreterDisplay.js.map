{
  "version": 3,
  "sources": ["../../../../../../../front_end/ui/components/linear_memory_inspector/ValueInterpreterDisplay.ts"],
  "sourcesContent": ["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport inspectorCommonStyles from '../../legacy/inspectorCommon.css.js';\nimport * as LitHtml from '../../lit-html/lit-html.js';\nimport * as ComponentHelpers from '../helpers/helpers.js';\nimport * as IconButton from '../icon_button/icon_button.js';\n\nimport valueInterpreterDisplayStyles from './valueInterpreterDisplay.css.js';\nimport {\n  Endianness,\n  format,\n  getDefaultValueTypeMapping,\n  getPointerAddress,\n  isNumber,\n  isPointer,\n  isValidMode,\n  VALUE_TYPE_MODE_LIST,\n  ValueType,\n  ValueTypeMode,\n} from './ValueInterpreterDisplayUtils.js';\n\nconst UIStrings = {\n  /**\n  *@description Tooltip text that appears when hovering over an unsigned interpretation of the memory under the Value Interpreter\n  */\n  unsignedValue: '`Unsigned` value',\n  /**\n   *@description Tooltip text that appears when hovering over the element to change value type modes of under the Value Interpreter. Value type modes\n   *             are different ways of viewing a certain value, e.g.: 10 (decimal) can be 0xa in hexadecimal mode, or 12 in octal mode.\n   */\n  changeValueTypeMode: 'Change mode',\n  /**\n  *@description Tooltip text that appears when hovering over a signed interpretation of the memory under the Value Interpreter\n  */\n  signedValue: '`Signed` value',\n  /**\n  *@description Tooltip text that appears when hovering over a 'jump-to-address' button that is next to a pointer (32-bit or 64-bit) under the Value Interpreter\n  */\n  jumpToPointer: 'Jump to address',\n  /**\n  *@description Tooltip text that appears when hovering over a 'jump-to-address' button that is next to a pointer (32-bit or 64-bit) with an invalid address under the Value Interpreter.\n  */\n  addressOutOfRange: 'Address out of memory range',\n\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/components/linear_memory_inspector/ValueInterpreterDisplay.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst {render, html} = LitHtml;\n\nconst SORTED_VALUE_TYPES = Array.from(getDefaultValueTypeMapping().keys());\n\nexport interface ValueDisplayData {\n  buffer: ArrayBuffer;\n  valueTypes: Set<ValueType>;\n  endianness: Endianness;\n  memoryLength: number;\n  valueTypeModes?: Map<ValueType, ValueTypeMode>;\n}\n\nexport class ValueTypeModeChangedEvent extends Event {\n  static readonly eventName = 'valuetypemodechanged';\n  data: {type: ValueType, mode: ValueTypeMode};\n\n  constructor(type: ValueType, mode: ValueTypeMode) {\n    super(ValueTypeModeChangedEvent.eventName, {\n      composed: true,\n    });\n    this.data = {type, mode};\n  }\n}\n\nexport class JumpToPointerAddressEvent extends Event {\n  static readonly eventName = 'jumptopointeraddress';\n  data: number;\n\n  constructor(address: number) {\n    super(JumpToPointerAddressEvent.eventName, {\n      composed: true,\n    });\n    this.data = address;\n  }\n}\n\nexport class ValueInterpreterDisplay extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-linear-memory-inspector-interpreter-display`;\n\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #endianness = Endianness.Little;\n  #buffer = new ArrayBuffer(0);\n  #valueTypes: Set<ValueType> = new Set();\n  #valueTypeModeConfig: Map<ValueType, ValueTypeMode> = getDefaultValueTypeMapping();\n  #memoryLength = 0;\n\n  constructor() {\n    super();\n    this.#shadow.adoptedStyleSheets = [\n      inspectorCommonStyles,\n    ];\n  }\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [valueInterpreterDisplayStyles];\n  }\n\n  set data(data: ValueDisplayData) {\n    this.#buffer = data.buffer;\n    this.#endianness = data.endianness;\n    this.#valueTypes = data.valueTypes;\n    this.#memoryLength = data.memoryLength;\n\n    if (data.valueTypeModes) {\n      data.valueTypeModes.forEach((mode, valueType) => {\n        if (isValidMode(valueType, mode)) {\n          this.#valueTypeModeConfig.set(valueType, mode);\n        }\n      });\n    }\n\n    this.#render();\n  }\n\n  #render(): void {\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`\n      <div class=\"value-types\">\n        ${SORTED_VALUE_TYPES.map(type => this.#valueTypes.has(type) ? this.#showValue(type) : '')}\n      </div>\n    `, this.#shadow, {host: this},\n    );\n    // clang-format on\n  }\n\n  #showValue(type: ValueType): LitHtml.TemplateResult {\n    if (isNumber(type)) {\n      return this.#renderNumberValues(type);\n    }\n    if (isPointer(type)) {\n      return this.#renderPointerValue(type);\n    }\n    throw new Error(`No known way to format ${type}`);\n  }\n\n  #renderPointerValue(type: ValueType): LitHtml.TemplateResult {\n    const unsignedValue = this.#parse({type, signed: false});\n    const address = getPointerAddress(type, this.#buffer, this.#endianness);\n    const jumpDisabled = Number.isNaN(address) || BigInt(address) >= BigInt(this.#memoryLength);\n    const buttonTitle = jumpDisabled ? i18nString(UIStrings.addressOutOfRange) : i18nString(UIStrings.jumpToPointer);\n    const iconColor = jumpDisabled ? 'var(--color-text-secondary)' : 'var(--color-primary)';\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    return html`\n      <span class=\"value-type-cell-no-mode value-type-cell selectable-text\">${i18n.i18n.lockedString(type)}</span>\n      <div class=\"value-type-cell\">\n        <div class=\"value-type-value-with-link\" data-value=\"true\">\n        <span class=\"selectable-text\">${unsignedValue}</span>\n          ${\n            html`\n              <button class=\"jump-to-button\" data-jump=\"true\" title=${buttonTitle} ?disabled=${jumpDisabled}\n                @click=${this.#onJumpToAddressClicked.bind(this, Number(address))}>\n                <${IconButton.Icon.Icon.litTagName} .data=${\n                  {iconName: 'link_icon', color: iconColor, width: '14px'} as IconButton.Icon.IconWithName}>\n                </${IconButton.Icon.Icon.litTagName}>\n              </button>`}\n        </div>\n      </div>\n    `;\n    // clang-format on\n  }\n\n  #onJumpToAddressClicked(address: number): void {\n    this.dispatchEvent(new JumpToPointerAddressEvent(address));\n  }\n\n  #renderNumberValues(type: ValueType): LitHtml.TemplateResult {\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    return html`\n      <span class=\"value-type-cell selectable-text\">${i18n.i18n.lockedString(type)}</span>\n      <div>\n        <select title=${i18nString(UIStrings.changeValueTypeMode)}\n          data-mode-settings=\"true\"\n          class=\"chrome-select\"\n          style=\"border: none; background-color: transparent; cursor: pointer; color: var(--color-text-secondary);\"\n          @change=${this.#onValueTypeModeChange.bind(this, type)}>\n            ${VALUE_TYPE_MODE_LIST.filter(x => isValidMode(type, x)).map(mode => {\n              return html`\n                <option value=${mode} .selected=${this.#valueTypeModeConfig.get(type) === mode}>${\n                  i18n.i18n.lockedString(mode)}\n                </option>`;\n            })}\n        </select>\n      </div>\n      ${this.#renderSignedAndUnsigned(type)}\n    `;\n    // clang-format on\n  }\n\n  #renderSignedAndUnsigned(type: ValueType): LitHtml.TemplateResult {\n    const unsignedValue = this.#parse({type, signed: false});\n    const signedValue = this.#parse({type, signed: true});\n    const mode = this.#valueTypeModeConfig.get(type);\n    const showSignedAndUnsigned =\n        signedValue !== unsignedValue && mode !== ValueTypeMode.Hexadecimal && mode !== ValueTypeMode.Octal;\n\n    const unsignedRendered = html`<span class=\"value-type-cell selectable-text\"  title=${\n        i18nString(UIStrings.unsignedValue)} data-value=\"true\">${unsignedValue}</span>`;\n    if (!showSignedAndUnsigned) {\n      return unsignedRendered;\n    }\n\n    // Some values are too long to show in one line, we're putting them into the next line.\n    const showInMultipleLines = type === ValueType.Int32 || type === ValueType.Int64;\n    const signedRendered = html`<span class=\"selectable-text\" data-value=\"true\" title=${\n        i18nString(UIStrings.signedValue)}>${signedValue}</span>`;\n\n    if (showInMultipleLines) {\n      return html`\n        <div class=\"value-type-cell\">\n          ${unsignedRendered}\n          ${signedRendered}\n        </div>\n        `;\n    }\n\n    return html`\n      <div class=\"value-type-cell\" style=\"flex-direction: row;\">\n        ${unsignedRendered}\n        <span class=\"signed-divider\"></span>\n        ${signedRendered}\n      </div>\n    `;\n  }\n\n  #onValueTypeModeChange(type: ValueType, event: Event): void {\n    event.preventDefault();\n    const select = event.target as HTMLInputElement;\n    const mode = select.value as ValueTypeMode;\n    this.dispatchEvent(new ValueTypeModeChangedEvent(type, mode));\n  }\n\n  #parse(data: {type: ValueType, signed?: boolean}): string {\n    const mode = this.#valueTypeModeConfig.get(data.type);\n    return format(\n        {buffer: this.#buffer, type: data.type, endianness: this.#endianness, signed: data.signed || false, mode});\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent(\n    'devtools-linear-memory-inspector-interpreter-display', ValueInterpreterDisplay);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-linear-memory-inspector-interpreter-display': ValueInterpreterDisplay;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
