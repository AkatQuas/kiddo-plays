{
  "version": 3,
  "sources": ["../../../../../../../front_end/ui/components/linear_memory_inspector/LinearMemoryInspectorController.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as Host from '../../../core/host/host.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as SDK from '../../../core/sdk/sdk.js';\nimport * as Protocol from '../../../generated/protocol.js';\nimport * as UI from '../../legacy/legacy.js';\n\nimport type {Settings} from './LinearMemoryInspector.js';\nimport {Events as LmiEvents, LinearMemoryInspectorPaneImpl} from './LinearMemoryInspectorPane.js';\nimport type {ValueType, ValueTypeMode} from './ValueInterpreterDisplayUtils.js';\nimport {Endianness, getDefaultValueTypeMapping} from './ValueInterpreterDisplayUtils.js';\nimport * as Bindings from '../../../models/bindings/bindings.js';\n\nconst UIStrings = {\n  /**\n  *@description Error message that shows up in the console if a buffer to be opened in the linear memory inspector cannot be found.\n  */\n  couldNotOpenLinearMemory: 'Could not open linear memory inspector: failed locating buffer.',\n};\nconst str_ =\n    i18n.i18n.registerUIStrings('ui/components/linear_memory_inspector/LinearMemoryInspectorController.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst LINEAR_MEMORY_INSPECTOR_OBJECT_GROUP = 'linear-memory-inspector';\nconst MEMORY_TRANSFER_MIN_CHUNK_SIZE = 1000;\nexport const ACCEPTED_MEMORY_TYPES = ['webassemblymemory', 'typedarray', 'dataview', 'arraybuffer'];\n\nlet controllerInstance: LinearMemoryInspectorController;\n\nexport interface LazyUint8Array {\n  getRange(start: number, end: number): Promise<Uint8Array>;\n  length(): number;\n}\n\nexport class RemoteArrayBufferWrapper implements LazyUint8Array {\n  #remoteArrayBuffer: SDK.RemoteObject.RemoteArrayBuffer;\n\n  constructor(arrayBuffer: SDK.RemoteObject.RemoteArrayBuffer) {\n    this.#remoteArrayBuffer = arrayBuffer;\n  }\n\n  length(): number {\n    return this.#remoteArrayBuffer.byteLength();\n  }\n\n  async getRange(start: number, end: number): Promise<Uint8Array> {\n    const newEnd = Math.min(end, this.length());\n    if (start < 0 || start > newEnd) {\n      console.error(`Requesting invalid range of memory: (${start}, ${end})`);\n      return new Uint8Array(0);\n    }\n    const array = await this.#remoteArrayBuffer.bytes(start, newEnd);\n    return new Uint8Array(array);\n  }\n}\n\nasync function getBufferFromObject(obj: SDK.RemoteObject.RemoteObject): Promise<SDK.RemoteObject.RemoteArrayBuffer> {\n  console.assert(obj.type === 'object');\n  console.assert(obj.subtype !== undefined && ACCEPTED_MEMORY_TYPES.includes(obj.subtype));\n  const response = await obj.runtimeModel().agent.invoke_callFunctionOn({\n    objectId: obj.objectId,\n    functionDeclaration:\n        'function() { return this instanceof ArrayBuffer || (typeof SharedArrayBuffer !== \\'undefined\\' && this instanceof SharedArrayBuffer) ? this : this.buffer; }',\n    silent: true,\n    // Set object group in order to bind the object lifetime to the linear memory inspector.\n    objectGroup: LINEAR_MEMORY_INSPECTOR_OBJECT_GROUP,\n  });\n\n  const error = response.getError();\n  if (error) {\n    throw new Error(`Remote object representing ArrayBuffer could not be retrieved: ${error}`);\n  }\n  obj = obj.runtimeModel().createRemoteObject(response.result);\n  return new SDK.RemoteObject.RemoteArrayBuffer(obj);\n}\n\nexport function isDWARFMemoryObject(obj: SDK.RemoteObject.RemoteObject): boolean {\n  return obj instanceof Bindings.DebuggerLanguagePlugins.ValueNode && obj.inspectableAddress !== undefined;\n}\n\nexport function isMemoryObjectProperty(obj: SDK.RemoteObject.RemoteObject): boolean {\n  const isWasmOrBuffer = obj.type === 'object' && obj.subtype && ACCEPTED_MEMORY_TYPES.includes(obj.subtype);\n  if (isWasmOrBuffer || isDWARFMemoryObject(obj)) {\n    return true;\n  }\n\n  return false;\n}\n\ntype SerializableSettings = {\n  valueTypes: ValueType[],\n  valueTypeModes: [ValueType, ValueTypeMode][],\n  endianness: Endianness,\n};\n\nexport class LinearMemoryInspectorController extends SDK.TargetManager.SDKModelObserver<SDK.RuntimeModel.RuntimeModel> {\n  #paneInstance = LinearMemoryInspectorPaneImpl.instance();\n  #bufferIdToRemoteObject: Map<string, SDK.RemoteObject.RemoteObject> = new Map();\n  #settings: Common.Settings.Setting<SerializableSettings>;\n\n  private constructor() {\n    super();\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.RuntimeModel.RuntimeModel, this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.DebuggerModel.DebuggerModel, SDK.DebuggerModel.Events.GlobalObjectCleared, this.#onGlobalObjectClear, this);\n    this.#paneInstance.addEventListener(LmiEvents.ViewClosed, this.#viewClosed.bind(this));\n\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.DebuggerModel.DebuggerModel, SDK.DebuggerModel.Events.DebuggerPaused, this.#onDebuggerPause, this);\n\n    const defaultValueTypeModes = getDefaultValueTypeMapping();\n    const defaultSettings: SerializableSettings = {\n      valueTypes: Array.from(defaultValueTypeModes.keys()),\n      valueTypeModes: Array.from(defaultValueTypeModes),\n      endianness: Endianness.Little,\n    };\n    this.#settings = Common.Settings.Settings.instance().createSetting('lmiInterpreterSettings', defaultSettings);\n  }\n\n  static instance(): LinearMemoryInspectorController {\n    if (controllerInstance) {\n      return controllerInstance;\n    }\n    controllerInstance = new LinearMemoryInspectorController();\n    return controllerInstance;\n  }\n\n  static async getMemoryForAddress(memoryWrapper: LazyUint8Array, address: number):\n      Promise<{memory: Uint8Array, offset: number}> {\n    // Provide a chunk of memory that covers the address to show and some before and after\n    // as 1. the address shown is not necessarily at the beginning of a page and\n    // 2. to allow for fewer memory requests.\n    const memoryChunkStart = Math.max(0, address - MEMORY_TRANSFER_MIN_CHUNK_SIZE / 2);\n    const memoryChunkEnd = memoryChunkStart + MEMORY_TRANSFER_MIN_CHUNK_SIZE;\n    const memory = await memoryWrapper.getRange(memoryChunkStart, memoryChunkEnd);\n    return {memory: memory, offset: memoryChunkStart};\n  }\n\n  static async getMemoryRange(memoryWrapper: LazyUint8Array, start: number, end: number): Promise<Uint8Array> {\n    // Check that the requested start is within bounds.\n    // If the requested end is larger than the actual\n    // memory, it will be automatically capped when\n    // requesting the range.\n    if (start < 0 || start > end || start >= memoryWrapper.length()) {\n      throw new Error('Requested range is out of bounds.');\n    }\n    const chunkEnd = Math.max(end, start + MEMORY_TRANSFER_MIN_CHUNK_SIZE);\n    return await memoryWrapper.getRange(start, chunkEnd);\n  }\n\n  saveSettings(data: Settings): void {\n    const valueTypes = Array.from(data.valueTypes);\n    const modes = [...data.modes];\n    this.#settings.set({valueTypes, valueTypeModes: modes, endianness: data.endianness});\n  }\n\n  loadSettings(): Settings {\n    const settings = this.#settings.get();\n    return {\n      valueTypes: new Set(settings.valueTypes),\n      modes: new Map(settings.valueTypeModes),\n      endianness: settings.endianness,\n    };\n  }\n\n  static async retrieveDWARFMemoryObjectAndAddress(obj: SDK.RemoteObject.RemoteObject):\n      Promise<{obj: SDK.RemoteObject.RemoteObject, address: number}|undefined> {\n    if (!(obj instanceof Bindings.DebuggerLanguagePlugins.ValueNode)) {\n      return;\n    }\n\n    const valueNode = obj;\n    const address = valueNode.inspectableAddress || 0;\n    const callFrame = valueNode.callFrame;\n    const response = await obj.debuggerModel().agent.invoke_evaluateOnCallFrame({\n      callFrameId: callFrame.id,\n      expression: 'memories[0]',\n    });\n    const error = response.getError();\n    if (error) {\n      console.error(error);\n      Common.Console.Console.instance().error(i18nString(UIStrings.couldNotOpenLinearMemory));\n    }\n    const runtimeModel = obj.debuggerModel().runtimeModel();\n    obj = runtimeModel.createRemoteObject(response.result);\n    return {obj, address};\n  }\n\n  async openInspectorView(obj: SDK.RemoteObject.RemoteObject, address?: number): Promise<void> {\n    const response = await LinearMemoryInspectorController.retrieveDWARFMemoryObjectAndAddress(obj);\n    let memoryObj = obj;\n    let memoryAddress = address;\n    if (response !== undefined) {\n      memoryAddress = response.address;\n      memoryObj = response.obj;\n    }\n\n    if (memoryAddress !== undefined) {\n      Host.userMetrics.linearMemoryInspectorTarget(\n          Host.UserMetrics.LinearMemoryInspectorTarget.DWARFInspectableAddress);\n    } else if (memoryObj.subtype === Protocol.Runtime.RemoteObjectSubtype.Arraybuffer) {\n      Host.userMetrics.linearMemoryInspectorTarget(Host.UserMetrics.LinearMemoryInspectorTarget.ArrayBuffer);\n    } else if (memoryObj.subtype === Protocol.Runtime.RemoteObjectSubtype.Dataview) {\n      Host.userMetrics.linearMemoryInspectorTarget(Host.UserMetrics.LinearMemoryInspectorTarget.DataView);\n    } else if (memoryObj.subtype === Protocol.Runtime.RemoteObjectSubtype.Typedarray) {\n      Host.userMetrics.linearMemoryInspectorTarget(Host.UserMetrics.LinearMemoryInspectorTarget.TypedArray);\n    } else {\n      console.assert(memoryObj.subtype === Protocol.Runtime.RemoteObjectSubtype.Webassemblymemory);\n      Host.userMetrics.linearMemoryInspectorTarget(Host.UserMetrics.LinearMemoryInspectorTarget.WebAssemblyMemory);\n    }\n    const buffer = await getBufferFromObject(memoryObj);\n    const {internalProperties} = await buffer.object().getOwnProperties(false);\n    const idProperty = internalProperties?.find(({name}) => name === '[[ArrayBufferData]]');\n    const id = idProperty?.value?.value;\n    if (!id) {\n      throw new Error('Unable to find backing store id for array buffer');\n    }\n    const memoryProperty = internalProperties?.find(({name}) => name === '[[WebAssemblyMemory]]');\n    const memory = memoryProperty?.value;\n\n    if (this.#bufferIdToRemoteObject.has(id)) {\n      this.#paneInstance.reveal(id, memoryAddress);\n      void UI.ViewManager.ViewManager.instance().showView('linear-memory-inspector');\n      return;\n    }\n\n    const title = String(memory ? memory.description : buffer.object().description);\n    this.#bufferIdToRemoteObject.set(id, buffer.object());\n    const arrayBufferWrapper = new RemoteArrayBufferWrapper(buffer);\n\n    this.#paneInstance.create(id, title, arrayBufferWrapper, memoryAddress);\n    void UI.ViewManager.ViewManager.instance().showView('linear-memory-inspector');\n  }\n\n  modelRemoved(model: SDK.RuntimeModel.RuntimeModel): void {\n    for (const [bufferId, remoteObject] of this.#bufferIdToRemoteObject) {\n      if (model === remoteObject.runtimeModel()) {\n        this.#bufferIdToRemoteObject.delete(bufferId);\n        this.#paneInstance.close(bufferId);\n      }\n    }\n  }\n\n  #onDebuggerPause(event: Common.EventTarget.EventTargetEvent<SDK.DebuggerModel.DebuggerModel>): void {\n    const debuggerModel = event.data;\n    for (const [bufferId, remoteObject] of this.#bufferIdToRemoteObject) {\n      if (debuggerModel.runtimeModel() === remoteObject.runtimeModel()) {\n        this.#paneInstance.refreshView(bufferId);\n      }\n    }\n  }\n\n  #onGlobalObjectClear(event: Common.EventTarget.EventTargetEvent<SDK.DebuggerModel.DebuggerModel>): void {\n    this.modelRemoved(event.data.runtimeModel());\n  }\n\n  #viewClosed({data: bufferId}: Common.EventTarget.EventTargetEvent<string>): void {\n    const remoteObj = this.#bufferIdToRemoteObject.get(bufferId);\n    if (remoteObj) {\n      remoteObj.release();\n    }\n    this.#bufferIdToRemoteObject.delete(bufferId);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
