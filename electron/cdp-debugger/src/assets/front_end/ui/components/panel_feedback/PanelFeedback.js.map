{
  "version": 3,
  "sources": ["../../../../../../../front_end/ui/components/panel_feedback/PanelFeedback.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as ComponentHelpers from '../../components/helpers/helpers.js';\nimport * as LitHtml from '../../lit-html/lit-html.js';\nimport * as IconButton from '../icon_button/icon_button.js';\n\nimport panelFeedbackStyles from './panelFeedback.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Introduction sentence to convey the feature is being actively worked on and we are looking for feedback.\n  */\n  previewText: 'Our team is actively working on this feature and we would love to know what you think.',\n  /**\n  *@description Link text the user can click to provide feedback to the team.\n  */\n  previewTextFeedbackLink: 'Send us your feedback.',\n  /**\n  *@description Title of the UI section that shows the user that this feature is in preview. Used as the main heading. Not a verb.\n  */\n  previewFeature: 'Preview feature',\n  /**\n  *@description Title of the section to the quick start video and documentation on experimental panels.\n  */\n  videoAndDocumentation: 'Video and documentation',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('ui/components/panel_feedback/PanelFeedback.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst previewFeatureUrl = new URL('../../../Images/ic_preview_feature.svg', import.meta.url).toString();\nconst videoThumbnailUrl = new URL('../../../Images/preview_feature_video_thumbnail.svg', import.meta.url).toString();\n\nexport interface PanelFeedbackData {\n  feedbackUrl: Platform.DevToolsPath.UrlString;\n  quickStartUrl: Platform.DevToolsPath.UrlString;\n  quickStartLinkText: string;\n}\nexport class PanelFeedback extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-panel-feedback`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  readonly #boundRender = this.#render.bind(this);\n\n  #props: PanelFeedbackData = {\n    feedbackUrl: Platform.DevToolsPath.EmptyUrlString,\n    quickStartUrl: Platform.DevToolsPath.EmptyUrlString,\n    quickStartLinkText: '',\n  };\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [panelFeedbackStyles];\n  }\n\n  set data(data: PanelFeedbackData) {\n    this.#props = data;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  #render(): void {\n    if (!ComponentHelpers.ScheduledRender.isScheduledRender(this)) {\n      throw new Error('PanelFeedback render was not scheduled');\n    }\n\n    // clang-format off\n    LitHtml.render(LitHtml.html`\n      <div class=\"preview\">\n        <h2 class=\"flex\">\n          <${IconButton.Icon.Icon.litTagName} .data=${{\n            iconPath: previewFeatureUrl,\n            width: '24px',\n            height: '24px',\n            color: 'var(--color-primary)',\n          } as IconButton.Icon.IconData}></${IconButton.Icon.Icon.litTagName}> ${i18nString(UIStrings.previewFeature)}\n        </h2>\n        <p>${i18nString(UIStrings.previewText)} <x-link href=${this.#props.feedbackUrl}>${i18nString(UIStrings.previewTextFeedbackLink)}</x-link></p>\n        <div class=\"video\">\n          <div class=\"thumbnail\">\n            <img src=${videoThumbnailUrl} role=\"presentation\" />\n          </div>\n          <div class=\"video-description\">\n            <h3>${i18nString(UIStrings.videoAndDocumentation)}</h3>\n            <x-link class=\"quick-start-link\" href=${this.#props.quickStartUrl}>${this.#props.quickStartLinkText}</x-link>\n          </div>\n        </div>\n      </div>\n      `, this.#shadow, {host: this});\n    // clang-format on\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-panel-feedback', PanelFeedback);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-panel-feedback': PanelFeedback;\n  }\n}\n"],
  "mappings": "AAIA;AACA;AACA;AACA;AACA;AAEA;AAEA,MAAM,YAAY;AAAA,EAIhB,aAAa;AAAA,EAIb,yBAAyB;AAAA,EAIzB,gBAAgB;AAAA,EAIhB,uBAAuB;AAAA;AAGzB,MAAM,OAAO,KAAK,KAAK,kBAAkB,iDAAiD;AAC1F,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAEhE,MAAM,oBAAoB,IAAI,IAAI,0CAA0C,YAAY,KAAK;AAC7F,MAAM,oBAAoB,IAAI,IAAI,uDAAuD,YAAY,KAAK;AAOnG,mCAA4B,YAAY;AAAA,SAC7B,aAAa,QAAQ;AAAA,YAClB,KAAK,aAAa,EAAC,MAAM;AAAA,iBACpB,aAAa,KAAK;AAAA,WAEd;AAAA,IAC1B,aAAa,SAAS,aAAa;AAAA,IACnC,eAAe,SAAS,aAAa;AAAA,IACrC,oBAAoB;AAAA;AAAA,EAGtB,oBAA0B;AACxB,iBAAa,qBAAqB,CAAC;AAAA;AAAA,MAGjC,KAAK,MAAyB;AAChC,kBAAc;AACd,SAAK,iBAAiB,gBAAgB,eAAe,MAAM;AAAA;AAAA,YAG7C;AACd,QAAI,CAAC,iBAAiB,gBAAgB,kBAAkB,OAAO;AAC7D,YAAM,IAAI,MAAM;AAAA;AAIlB,YAAQ,OAAO,QAAQ;AAAA;AAAA;AAAA,aAGd,WAAW,KAAK,KAAK,oBAAoB;AAAA,MAC1C,UAAU;AAAA,MACV,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,OAAO;AAAA,WAC0B,WAAW,KAAK,KAAK,eAAe,WAAW,UAAU;AAAA;AAAA,aAEzF,WAAW,UAAU,6BAA6B,YAAY,eAAe,WAAW,UAAU;AAAA;AAAA;AAAA,uBAGxF;AAAA;AAAA;AAAA,kBAGL,WAAW,UAAU;AAAA,oDACa,YAAY,iBAAiB,YAAY;AAAA;AAAA;AAAA;AAAA,SAIpF,cAAc,EAAC,MAAM;AAAA;AAAA;AAK9B,iBAAiB,eAAe,gBAAgB,2BAA2B;",
  "names": []
}
