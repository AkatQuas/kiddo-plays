{
  "version": 3,
  "sources": ["../../../../../../../front_end/ui/components/panel_feedback/PreviewToggle.ts"],
  "sourcesContent": ["// Copyright (c) 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Root from '../../../core/root/root.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\nimport * as ComponentHelpers from '../helpers/helpers.js';\nimport * as IconButton from '../icon_button/icon_button.js';\n\nimport * as Input from '../input/input.js';\nimport previewToggleStyles from './previewToggle.css.js';\n\nconst {render, html, nothing} = LitHtml;\n\nexport interface PreviewToggleData {\n  name: string;\n  helperText: string|null;\n  feedbackURL: string|null;\n  experiment: Root.Runtime.ExperimentName;\n  learnMoreURL?: string;\n  onChangeCallback?: (checked: boolean) => void;\n}\n\nconst UIStrings = {\n  /**\n  *@description Link text the user can click to provide feedback to the team.\n  */\n  previewTextFeedbackLink: 'Send us your feedback.',\n  /**\n  *@description Link text the user can click to provide feedback to the team.\n  */\n  shortFeedbackLink: 'Send feedback',\n  /**\n  *@description Link text the user can click to see documentation.\n  */\n  learnMoreLink: 'Learn More',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('ui/components/panel_feedback/PreviewToggle.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class PreviewToggle extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-preview-toggle`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n\n  #name = '';\n  #helperText: string|null = null;\n  #feedbackURL: string|null = null;\n  #learnMoreURL: string|undefined;\n  #experiment: string = '';\n  #onChangeCallback?: (checked: boolean) => void;\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [Input.checkboxStyles, previewToggleStyles];\n  }\n\n  set data(data: PreviewToggleData) {\n    this.#name = data.name;\n    this.#helperText = data.helperText;\n    this.#feedbackURL = data.feedbackURL;\n    this.#learnMoreURL = data.learnMoreURL;\n    this.#experiment = data.experiment;\n    this.#onChangeCallback = data.onChangeCallback;\n    this.#render();\n  }\n\n  #render(): void {\n    const checked = Root.Runtime.experiments.isEnabled(this.#experiment);\n    const hasLink = Boolean(this.#feedbackURL) || Boolean(this.#learnMoreURL);\n\n    const containerClasses = LitHtml.Directives.classMap({\n      'container': true,\n      'has-link': hasLink,\n    });\n\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(\n      html`\n      <div class=${containerClasses}>\n        <div class=\"checkbox-line\">\n          <label class=\"experiment-preview\">\n            <input type=\"checkbox\" ?checked=${checked} @change=${this.#checkboxChanged} aria-label=${this.#name}/>\n            <${IconButton.Icon.Icon.litTagName} .data=${{\n              iconName: 'ic_preview_feature',\n              width: '16px',\n              height: '16px',\n              color: 'var(--color-text-secondary)',\n            } as IconButton.Icon.IconData}>\n            </${IconButton.Icon.Icon.litTagName}>${this.#name}\n          </label>\n          ${this.#feedbackURL && !this.#helperText\n            ? html`<div class=\"feedback\"><x-link class=\"x-link\" href=${this.#feedbackURL}>${i18nString(UIStrings.shortFeedbackLink)}</x-link></div>`\n            : nothing}\n        </div>\n        ${this.#learnMoreURL\n          ? html`<x-link class=\"x-link\" href=${this.#learnMoreURL}>${i18nString(UIStrings.learnMoreLink)}</x-link>`\n          : nothing}\n        <div class=\"helper\">\n          ${this.#helperText && this.#feedbackURL\n            ? html`<p>${this.#helperText} <x-link class=\"x-link\" href=${this.#feedbackURL}>${i18nString(UIStrings.previewTextFeedbackLink)}</x-link></p>`\n            : nothing}\n        </div>\n      </div>`,\n      this.#shadow,\n      {\n        host: this,\n      });\n    // clang-format on\n  }\n\n  #checkboxChanged(event: Event): void {\n    const checked = (event.target as HTMLInputElement).checked;\n    Root.Runtime.experiments.setEnabled(this.#experiment, checked);\n    this.#onChangeCallback?.(checked);\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-preview-toggle', PreviewToggle);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-preview-toggle': PreviewToggle;\n  }\n}\n"],
  "mappings": "AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA,MAAM,EAAC,QAAQ,MAAM,YAAW;AAWhC,MAAM,YAAY;AAAA,EAIhB,yBAAyB;AAAA,EAIzB,mBAAmB;AAAA,EAInB,eAAe;AAAA;AAGjB,MAAM,OAAO,KAAK,KAAK,kBAAkB,iDAAiD;AAC1F,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAEzD,mCAA4B,YAAY;AAAA,SAC7B,aAAa,QAAQ;AAAA,YAClB,KAAK,aAAa,EAAC,MAAM;AAAA,UAEpC;AAAA,gBACmB;AAAA,iBACC;AAAA;AAAA,gBAEN;AAAA;AAAA,EAGtB,oBAA0B;AACxB,iBAAa,qBAAqB,CAAC,MAAM,gBAAgB;AAAA;AAAA,MAGvD,KAAK,MAAyB;AAChC,iBAAa,KAAK;AAClB,uBAAmB,KAAK;AACxB,wBAAoB,KAAK;AACzB,yBAAqB,KAAK;AAC1B,uBAAmB,KAAK;AACxB,6BAAyB,KAAK;AAC9B;AAAA;AAAA,YAGc;AACd,UAAM,UAAU,KAAK,QAAQ,YAAY,UAAU;AACnD,UAAM,UAAU,QAAQ,sBAAsB,QAAQ;AAEtD,UAAM,mBAAmB,QAAQ,WAAW,SAAS;AAAA,MACnD,aAAa;AAAA,MACb,YAAY;AAAA;AAKd,WACE;AAAA,mBACa;AAAA;AAAA;AAAA,8CAG2B,mBAAmB,oCAAoC;AAAA,eACtF,WAAW,KAAK,KAAK,oBAAoB;AAAA,MAC1C,UAAU;AAAA,MACV,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,OAAO;AAAA;AAAA,gBAEL,WAAW,KAAK,KAAK,cAAc;AAAA;AAAA,YAEvC,qBAAqB,CAAC,mBACpB,yDAAyD,qBAAqB,WAAW,UAAU,sCACnG;AAAA;AAAA,UAEJ,qBACE,mCAAmC,sBAAsB,WAAW,UAAU,4BAC9E;AAAA;AAAA,YAEA,oBAAoB,oBAClB,UAAU,gDAAgD,qBAAqB,WAAW,UAAU,0CACpG;AAAA;AAAA,eAGR,cACA;AAAA,MACE,MAAM;AAAA;AAAA;AAAA,mBAKK,OAAoB;AACnC,UAAM,UAAW,MAAM,OAA4B;AACnD,SAAK,QAAQ,YAAY,WAAW,kBAAkB;AACtD,6BAAyB;AAAA;AAAA;AAI7B,iBAAiB,eAAe,gBAAgB,2BAA2B;",
  "names": []
}
