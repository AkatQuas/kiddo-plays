{
  "version": 3,
  "sources": ["../../../../../../../front_end/ui/components/settings/SettingCheckbox.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../../core/common/common.js';\nimport * as ComponentHelpers from '../../components/helpers/helpers.js';\nimport * as LitHtml from '../../lit-html/lit-html.js';\n\nimport * as Input from '../input/input.js';\nimport settingCheckboxStyles from './settingCheckbox.css.js';\n\nexport interface SettingCheckboxData {\n  setting: Common.Settings.Setting<boolean>;\n  /**\n   * If set to true, the checkbox is disabled and not clickable by the user.\n   * The checkbox will still reflect the current value of the setting (i.e. checked/unchecked).\n   */\n  disabled?: boolean;\n}\n\n/**\n * A simple checkbox that is backed by a boolean setting.\n */\nexport class SettingCheckbox extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`setting-checkbox`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n\n  #setting?: Common.Settings.Setting<boolean>;\n  #disabled: boolean = false;\n  #changeListenerDescriptor?: Common.EventTarget.EventDescriptor;\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [Input.checkboxStyles, settingCheckboxStyles];\n  }\n\n  set data(data: SettingCheckboxData) {\n    if (this.#changeListenerDescriptor && this.#setting) {\n      this.#setting.removeChangeListener(this.#changeListenerDescriptor.listener);\n    }\n\n    this.#setting = data.setting;\n    this.#disabled = Boolean(data.disabled);\n\n    this.#changeListenerDescriptor = this.#setting.addChangeListener(() => {\n      this.#render();\n    });\n    this.#render();\n  }\n\n  #render(): void {\n    if (!this.#setting) {\n      throw new Error('No \"Setting\" object provided for rendering');\n    }\n\n    LitHtml.render(\n        LitHtml.html`\n      <p>\n        <label>\n          <input type=\"checkbox\" ?checked=${this.#setting.get()} ?disabled=${\n            this.#disabled || this.#setting.disabled()} @change=${this.#checkboxChanged} aria-label=${\n            this.#setting.title()} /> ${this.#setting.title()}\n        </label>\n      </p>`,\n        this.#shadow, {host: this});\n  }\n\n  #checkboxChanged(e: Event): void {\n    this.#setting?.set((e.target as HTMLInputElement).checked);\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('setting-checkbox', SettingCheckbox);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'setting-checkbox': SettingCheckbox;\n  }\n}\n"],
  "mappings": "AAKA;AACA;AAEA;AACA;AAcO,qCAA8B,YAAY;AAAA,SAC/B,aAAa,QAAQ;AAAA,YAClB,KAAK,aAAa,EAAC,MAAM;AAAA;AAAA,cAGvB;AAAA;AAAA,EAGrB,oBAA0B;AACxB,iBAAa,qBAAqB,CAAC,MAAM,gBAAgB;AAAA;AAAA,MAGvD,KAAK,MAA2B;AAClC,QAAI,kCAAkC,eAAe;AACnD,oBAAc,qBAAqB,+BAA+B;AAAA;AAGpE,oBAAgB,KAAK;AACrB,qBAAiB,QAAQ,KAAK;AAE9B,qCAAiC,cAAc,kBAAkB,MAAM;AACrE;AAAA;AAEF;AAAA;AAAA,YAGc;AACd,QAAI,CAAC,eAAe;AAClB,YAAM,IAAI,MAAM;AAAA;AAGlB,YAAQ,OACJ,QAAQ;AAAA;AAAA;AAAA,4CAG4B,cAAc,mBAC9C,kBAAkB,cAAc,sBAAsB,oCACtD,cAAc,cAAc,cAAc;AAAA;AAAA,aAG9C,cAAc,EAAC,MAAM;AAAA;AAAA,mBAGV,GAAgB;AAC/B,mBAAe,IAAK,EAAE,OAA4B;AAAA;AAAA;AAItD,iBAAiB,eAAe,gBAAgB,oBAAoB;",
  "names": []
}
