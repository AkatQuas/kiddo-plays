{
  "version": 3,
  "sources": ["../../../../../../../front_end/ui/components/buttons/Button.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as LitHtml from '../../lit-html/lit-html.js';\nimport * as ComponentHelpers from '../helpers/helpers.js';\nimport * as IconButton from '../icon_button/icon_button.js';\n\nimport buttonStyles from './button.css.js';\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-button': Button;\n  }\n}\n\nexport const enum Variant {\n  PRIMARY = 'primary',\n  SECONDARY = 'secondary',\n  TOOLBAR = 'toolbar',\n  ROUND = 'round',\n}\n\nexport const enum Size {\n  SMALL = 'SMALL',\n  MEDIUM = 'MEDIUM',\n}\n\ntype ButtonType = 'button'|'submit'|'reset';\n\ninterface ButtonState {\n  iconUrl?: string;\n  variant?: Variant;\n  size?: Size;\n  disabled: boolean;\n  active: boolean;\n  spinner?: boolean;\n  type: ButtonType;\n  value?: string;\n  title?: string;\n}\n\nexport type ButtonData = {\n  variant: Variant.TOOLBAR|Variant.ROUND,\n  iconUrl: string,\n  size?: Size,\n  disabled?: boolean,\n  active?: boolean,\n  spinner?: boolean,\n  type?: ButtonType,\n  value?: string,\n  title?: string,\n}|{\n  variant: Variant.PRIMARY | Variant.SECONDARY,\n  iconUrl?: string,\n  size?: Size,\n  disabled?: boolean,\n  active?: boolean,\n  spinner?: boolean,\n  type?: ButtonType,\n  value?: string,\n  title?: string,\n};\n\ninterface ButtonElementInternals extends ElementInternals {\n  readonly form?: HTMLFormElement;\n  readonly validity: ValidityState;\n  readonly willValidate: boolean;\n  readonly validationMessage: string;\n  checkValidity(): void;\n  reportValidity(): void;\n}\n\nexport class Button extends HTMLElement {\n  static formAssociated = true;\n  static readonly litTagName = LitHtml.literal`devtools-button`;\n  readonly #shadow = this.attachShadow({mode: 'open', delegatesFocus: true});\n  readonly #boundRender = this.#render.bind(this);\n  readonly #boundOnClick = this.#onClick.bind(this);\n  readonly #props: ButtonState = {\n    size: Size.MEDIUM,\n    disabled: false,\n    active: false,\n    spinner: false,\n    type: 'button',\n  };\n  #isEmpty = true;\n  #internals = this.attachInternals() as ButtonElementInternals;\n\n  constructor() {\n    super();\n    this.setAttribute('role', 'presentation');\n    this.addEventListener('click', this.#boundOnClick, true);\n  }\n\n  /**\n   * Perfer using the .data= setter instead of setting the individual properties\n   * for increased type-safety.\n   */\n  set data(data: ButtonData) {\n    this.#props.variant = data.variant;\n    this.#props.iconUrl = data.iconUrl;\n    this.#props.size = data.size || Size.MEDIUM;\n    this.#props.active = Boolean(data.active);\n    this.#props.spinner = Boolean(data.spinner);\n    this.#props.type = data.type || 'button';\n    this.#setDisabledProperty(data.disabled || false);\n    this.#props.title = data.title;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set iconUrl(iconUrl: string|undefined) {\n    this.#props.iconUrl = iconUrl;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set variant(variant: Variant) {\n    this.#props.variant = variant;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set size(size: Size) {\n    this.#props.size = size;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set type(type: ButtonType) {\n    this.#props.type = type;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set title(title: string) {\n    this.#props.title = title;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set disabled(disabled: boolean) {\n    this.#setDisabledProperty(disabled);\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set active(active: boolean) {\n    this.#props.active = active;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set spinner(spinner: boolean) {\n    this.#props.spinner = spinner;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  #setDisabledProperty(disabled: boolean): void {\n    this.#props.disabled = disabled;\n    this.toggleAttribute('disabled', disabled);\n  }\n\n  focus(): void {\n    this.#shadow.querySelector('button')?.focus();\n  }\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [buttonStyles];\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  #onClick(event: Event): void {\n    if (this.#props.disabled) {\n      event.stopPropagation();\n      event.preventDefault();\n      return;\n    }\n    if (this.form && this.#props.type === 'submit') {\n      event.preventDefault();\n      this.form.dispatchEvent(new SubmitEvent('submit', {\n        submitter: this,\n      }));\n    }\n    if (this.form && this.#props.type === 'reset') {\n      event.preventDefault();\n      this.form.reset();\n    }\n  }\n\n  #onSlotChange(event: Event): void {\n    const slot = event.target as HTMLSlotElement | undefined;\n    const nodes = slot?.assignedNodes();\n    this.#isEmpty = !nodes || !Boolean(nodes.length);\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  #render(): void {\n    if (!this.#props.variant) {\n      throw new Error('Button requires a variant to be defined');\n    }\n    if (this.#props.variant === Variant.TOOLBAR) {\n      if (!this.#props.iconUrl) {\n        throw new Error('Toolbar button requires an icon');\n      }\n      if (!this.#isEmpty) {\n        throw new Error('Tooblar button does not accept children');\n      }\n    }\n    if (this.#props.variant === Variant.ROUND) {\n      if (!this.#props.iconUrl) {\n        throw new Error('Round button requires an icon');\n      }\n      if (!this.#isEmpty) {\n        throw new Error('Round button does not accept children');\n      }\n    }\n    const classes = {\n      primary: this.#props.variant === Variant.PRIMARY,\n      secondary: this.#props.variant === Variant.SECONDARY,\n      toolbar: this.#props.variant === Variant.TOOLBAR,\n      round: this.#props.variant === Variant.ROUND,\n      'text-with-icon': Boolean(this.#props.iconUrl) && !this.#isEmpty,\n      'only-icon': Boolean(this.#props.iconUrl) && this.#isEmpty,\n      small: Boolean(this.#props.size === Size.SMALL),\n      active: this.#props.active,\n    };\n    const spinnerClasses = {\n      primary: this.#props.variant === Variant.PRIMARY,\n      secondary: this.#props.variant === Variant.SECONDARY,\n      disabled: Boolean(this.#props.disabled),\n      'spinner-component': true,\n    };\n    // clang-format off\n    LitHtml.render(\n      LitHtml.html`\n        <button title=${LitHtml.Directives.ifDefined(this.#props.title)} .disabled=${this.#props.disabled} class=${LitHtml.Directives.classMap(classes)}>\n          ${this.#props.iconUrl ? LitHtml.html`<${IconButton.Icon.Icon.litTagName}\n            .data=${{\n              iconPath: this.#props.iconUrl,\n              color: 'var(--color-background)',\n            } as IconButton.Icon.IconData}\n          >\n          </${IconButton.Icon.Icon.litTagName}>` : ''}\n          ${this.#props.spinner ? LitHtml.html`<span class=${LitHtml.Directives.classMap(spinnerClasses)}></span>` : ''}\n          <slot @slotchange=${this.#onSlotChange}></slot>\n        </button>\n      `, this.#shadow, {host: this});\n    // clang-format on\n  }\n\n  // Based on https://web.dev/more-capable-form-controls/ to make custom elements form-friendly.\n  // Form controls usually expose a \"value\" property.\n  get value(): string {\n    return this.#props.value || '';\n  }\n  set value(value: string) {\n    this.#props.value = value;\n  }\n\n  // The following properties and methods aren't strictly required,\n  // but browser-level form controls provide them. Providing them helps\n  // ensure consistency with browser-provided controls.\n  get form(): HTMLFormElement|undefined {\n    return this.#internals.form;\n  }\n  get name(): string|null {\n    return this.getAttribute('name');\n  }\n  get type(): ButtonType {\n    return this.#props.type;\n  }\n  get validity(): ValidityState {\n    return this.#internals.validity;\n  }\n  get validationMessage(): string {\n    return this.#internals.validationMessage;\n  }\n  get willValidate(): boolean {\n    return this.#internals.willValidate;\n  }\n  checkValidity(): void {\n    return this.#internals.checkValidity();\n  }\n  reportValidity(): void {\n    return this.#internals.reportValidity();\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-button', Button);\n"],
  "mappings": "AAIA;AACA;AACA;AAEA;AAQO,WAAW,UAAX,kBAAW,aAAX;AACL,wBAAU;AACV,0BAAY;AACZ,wBAAU;AACV,sBAAQ;AAJQ;AAAA;AAOX,WAAW,OAAX,kBAAW,UAAX;AACL,mBAAQ;AACR,oBAAS;AAFO;AAAA;AAkDX,4BAAqB,YAAY;AAAA,SAC/B,iBAAiB;AAAA,SACR,aAAa,QAAQ;AAAA,YAClB,KAAK,aAAa,EAAC,MAAM,QAAQ,gBAAgB;AAAA,iBAC5C,aAAa,KAAK;AAAA,kBACjB,cAAc,KAAK;AAAA,WACb;AAAA,IAC7B,MAAM;AAAA,IACN,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,MAAM;AAAA;AAAA,aAEG;AAAA,eACE,KAAK;AAAA,EAElB,cAAc;AACZ;AACA,SAAK,aAAa,QAAQ;AAC1B,SAAK,iBAAiB,SAAS,oBAAoB;AAAA;AAAA,MAOjD,KAAK,MAAkB;AACzB,gBAAY,UAAU,KAAK;AAC3B,gBAAY,UAAU,KAAK;AAC3B,gBAAY,OAAO,KAAK,QAAQ;AAChC,gBAAY,SAAS,QAAQ,KAAK;AAClC,gBAAY,UAAU,QAAQ,KAAK;AACnC,gBAAY,OAAO,KAAK,QAAQ;AAChC,8BAA0B,KAAK,YAAY;AAC3C,gBAAY,QAAQ,KAAK;AACzB,SAAK,iBAAiB,gBAAgB,eAAe,MAAM;AAAA;AAAA,MAGzD,QAAQ,SAA2B;AACrC,gBAAY,UAAU;AACtB,SAAK,iBAAiB,gBAAgB,eAAe,MAAM;AAAA;AAAA,MAGzD,QAAQ,SAAkB;AAC5B,gBAAY,UAAU;AACtB,SAAK,iBAAiB,gBAAgB,eAAe,MAAM;AAAA;AAAA,MAGzD,KAAK,MAAY;AACnB,gBAAY,OAAO;AACnB,SAAK,iBAAiB,gBAAgB,eAAe,MAAM;AAAA;AAAA,MAGzD,KAAK,MAAkB;AACzB,gBAAY,OAAO;AACnB,SAAK,iBAAiB,gBAAgB,eAAe,MAAM;AAAA;AAAA,MAGzD,MAAM,OAAe;AACvB,gBAAY,QAAQ;AACpB,SAAK,iBAAiB,gBAAgB,eAAe,MAAM;AAAA;AAAA,MAGzD,SAAS,UAAmB;AAC9B,8BAA0B;AAC1B,SAAK,iBAAiB,gBAAgB,eAAe,MAAM;AAAA;AAAA,MAGzD,OAAO,QAAiB;AAC1B,gBAAY,SAAS;AACrB,SAAK,iBAAiB,gBAAgB,eAAe,MAAM;AAAA;AAAA,MAGzD,QAAQ,SAAkB;AAC5B,gBAAY,UAAU;AACtB,SAAK,iBAAiB,gBAAgB,eAAe,MAAM;AAAA;AAAA,uBAGxC,UAAyB;AAC5C,gBAAY,WAAW;AACvB,SAAK,gBAAgB,YAAY;AAAA;AAAA,EAGnC,QAAc;AACZ,iBAAa,cAAc,WAAW;AAAA;AAAA,EAGxC,oBAA0B;AACxB,iBAAa,qBAAqB,CAAC;AACnC,SAAK,iBAAiB,gBAAgB,eAAe,MAAM;AAAA;AAAA,WAGpD,OAAoB;AAC3B,QAAI,YAAY,UAAU;AACxB,YAAM;AACN,YAAM;AACN;AAAA;AAEF,QAAI,KAAK,QAAQ,YAAY,SAAS,UAAU;AAC9C,YAAM;AACN,WAAK,KAAK,cAAc,IAAI,YAAY,UAAU;AAAA,QAChD,WAAW;AAAA;AAAA;AAGf,QAAI,KAAK,QAAQ,YAAY,SAAS,SAAS;AAC7C,YAAM;AACN,WAAK,KAAK;AAAA;AAAA;AAAA,gBAIA,OAAoB;AAChC,UAAM,OAAO,MAAM;AACnB,UAAM,QAAQ,MAAM;AACpB,oBAAgB,CAAC,SAAS,CAAC,QAAQ,MAAM;AACzC,SAAK,iBAAiB,gBAAgB,eAAe,MAAM;AAAA;AAAA,YAG7C;AACd,QAAI,CAAC,YAAY,SAAS;AACxB,YAAM,IAAI,MAAM;AAAA;AAElB,QAAI,YAAY,YAAY,yBAAiB;AAC3C,UAAI,CAAC,YAAY,SAAS;AACxB,cAAM,IAAI,MAAM;AAAA;AAElB,UAAI,CAAC,eAAe;AAClB,cAAM,IAAI,MAAM;AAAA;AAAA;AAGpB,QAAI,YAAY,YAAY,qBAAe;AACzC,UAAI,CAAC,YAAY,SAAS;AACxB,cAAM,IAAI,MAAM;AAAA;AAElB,UAAI,CAAC,eAAe;AAClB,cAAM,IAAI,MAAM;AAAA;AAAA;AAGpB,UAAM,UAAU;AAAA,MACd,SAAS,YAAY,YAAY;AAAA,MACjC,WAAW,YAAY,YAAY;AAAA,MACnC,SAAS,YAAY,YAAY;AAAA,MACjC,OAAO,YAAY,YAAY;AAAA,MAC/B,kBAAkB,QAAQ,YAAY,YAAY,CAAC;AAAA,MACnD,aAAa,QAAQ,YAAY,YAAY;AAAA,MAC7C,OAAO,QAAQ,YAAY,SAAS;AAAA,MACpC,QAAQ,YAAY;AAAA;AAEtB,UAAM,iBAAiB;AAAA,MACrB,SAAS,YAAY,YAAY;AAAA,MACjC,WAAW,YAAY,YAAY;AAAA,MACnC,UAAU,QAAQ,YAAY;AAAA,MAC9B,qBAAqB;AAAA;AAGvB,YAAQ,OACN,QAAQ;AAAA,wBACU,QAAQ,WAAW,UAAU,YAAY,oBAAoB,YAAY,kBAAkB,QAAQ,WAAW,SAAS;AAAA,YACnI,YAAY,UAAU,QAAQ,QAAQ,WAAW,KAAK,KAAK;AAAA,oBACnD;AAAA,MACN,UAAU,YAAY;AAAA,MACtB,OAAO;AAAA;AAAA;AAAA,cAGP,WAAW,KAAK,KAAK,gBAAgB;AAAA,YACvC,YAAY,UAAU,QAAQ,mBAAmB,QAAQ,WAAW,SAAS,4BAA4B;AAAA,8BACvF;AAAA;AAAA,SAErB,cAAc,EAAC,MAAM;AAAA;AAAA,MAMxB,QAAgB;AAClB,WAAO,YAAY,SAAS;AAAA;AAAA,MAE1B,MAAM,OAAe;AACvB,gBAAY,QAAQ;AAAA;AAAA,MAMlB,OAAkC;AACpC,WAAO,gBAAgB;AAAA;AAAA,MAErB,OAAoB;AACtB,WAAO,KAAK,aAAa;AAAA;AAAA,MAEvB,OAAmB;AACrB,WAAO,YAAY;AAAA;AAAA,MAEjB,WAA0B;AAC5B,WAAO,gBAAgB;AAAA;AAAA,MAErB,oBAA4B;AAC9B,WAAO,gBAAgB;AAAA;AAAA,MAErB,eAAwB;AAC1B,WAAO,gBAAgB;AAAA;AAAA,EAEzB,gBAAsB;AACpB,WAAO,gBAAgB;AAAA;AAAA,EAEzB,iBAAuB;AACrB,WAAO,gBAAgB;AAAA;AAAA;AAI3B,iBAAiB,eAAe,gBAAgB,mBAAmB;",
  "names": []
}
