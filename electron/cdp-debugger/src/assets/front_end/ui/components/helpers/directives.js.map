{
  "version": 3,
  "sources": ["../../../../../../../front_end/ui/components/helpers/directives.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as LitHtml from '../../lit-html/lit-html.js';\n\n/**\n * Provides a hook to get a callback when a LitHtml node is rendered into the DOM:\n * @example\n *\n * ```\n * <p on-render=${nodeRenderedCallback(node => ...)}>\n * ```\n */\nclass NodeRenderedCallback extends LitHtml.Directive.Directive {\n  constructor(partInfo: LitHtml.Directive.PartInfo) {\n    super(partInfo);\n\n    if (partInfo.type !== LitHtml.Directive.PartType.ATTRIBUTE) {\n      throw new Error('Node rendered callback directive must be used as an attribute.');\n    }\n  }\n\n  update(part: LitHtml.Directive.ElementPart, [callback]: LitHtml.Directive.DirectiveParameters<this>): void {\n    callback(part.element);\n  }\n\n  /*\n   * Because this directive doesn't render anything, there's no implementation\n   * here for the render method. But we need it to state that it takes in a\n   * callback function at the callsite. Without this definition, the types in\n   * the update() method above don't get correctly picked up.\n   */\n  render(_callback: (domNode: Element) => void): void {\n  }\n}\n\nexport const nodeRenderedCallback = LitHtml.Directive.directive(NodeRenderedCallback);\n"],
  "mappings": "AAIA;AAUA,mCAAmC,QAAQ,UAAU,UAAU;AAAA,EAC7D,YAAY,UAAsC;AAChD,UAAM;AAEN,QAAI,SAAS,SAAS,QAAQ,UAAU,SAAS,WAAW;AAC1D,YAAM,IAAI,MAAM;AAAA;AAAA;AAAA,EAIpB,OAAO,MAAqC,CAAC,WAA8D;AACzG,aAAS,KAAK;AAAA;AAAA,EAShB,OAAO,WAA6C;AAAA;AAAA;AAI/C,aAAM,uBAAuB,QAAQ,UAAU,UAAU;",
  "names": []
}
