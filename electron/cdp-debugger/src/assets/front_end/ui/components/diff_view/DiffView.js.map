{
  "version": 3,
  "sources": ["../../../../../../../front_end/ui/components/diff_view/DiffView.ts"],
  "sourcesContent": ["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Diff from '../../../third_party/diff/diff.js';\nimport * as LitHtml from '../../lit-html/lit-html.js';\nimport * as CodeHighlighter from '../code_highlighter/code_highlighter.js';\nimport * as ComponentHelpers from '../helpers/helpers.js';\n\nimport diffViewStyles from './diffView.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Text prepended to a removed line in a diff in the Changes tool, viewable only by screen reader.\n  */\n  deletions: 'Deletion:',\n  /**\n  *@description Text prepended to a new line in a diff in the Changes tool, viewable only by screen reader.\n  */\n  additions: 'Addition:',\n  /**\n  *@description Screen-reader accessible name for the code editor in the Changes tool showing the user's changes.\n  */\n  changesDiffViewer: 'Changes diff viewer',\n  /**\n  *@description Text in Changes View of the Changes tab\n  *@example {2} PH1\n  */\n  SkippingDMatchingLines: '( \u2026 Skipping {PH1} matching lines \u2026 )',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/components/diff_view/DiffView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ninterface Token {\n  text: string;\n  className: string;\n}\n\ninterface Row {\n  originalLineNumber: number;\n  currentLineNumber: number;\n  tokens: Token[];\n  type: RowType;\n}\n\nexport const enum RowType {\n  Deletion = 'deletion',\n  Addition = 'addition',\n  Equal = 'equal',\n  Spacer = 'spacer',\n}\n\nexport function buildDiffRows(diff: Diff.Diff.DiffArray): {\n  originalLines: readonly string[],\n  currentLines: readonly string[],\n  rows: readonly Row[],\n} {\n  let currentLineNumber = 0;\n  let originalLineNumber = 0;\n  const paddingLines = 3;\n\n  const originalLines: string[] = [];\n  const currentLines: string[] = [];\n  const rows: Row[] = [];\n\n  for (let i = 0; i < diff.length; ++i) {\n    const token = diff[i];\n    switch (token[0]) {\n      case Diff.Diff.Operation.Equal:\n        rows.push(...createEqualRows(token[1], i === 0, i === diff.length - 1));\n        originalLines.push(...token[1]);\n        currentLines.push(...token[1]);\n        break;\n      case Diff.Diff.Operation.Insert:\n        for (const line of token[1]) {\n          rows.push(createRow(line, RowType.Addition));\n        }\n        currentLines.push(...token[1]);\n        break;\n      case Diff.Diff.Operation.Delete:\n        originalLines.push(...token[1]);\n        if (diff[i + 1] && diff[i + 1][0] === Diff.Diff.Operation.Insert) {\n          i++;\n          rows.push(...createModifyRows(token[1].join('\\n'), diff[i][1].join('\\n')));\n          currentLines.push(...diff[i][1]);\n        } else {\n          for (const line of token[1]) {\n            rows.push(createRow(line, RowType.Deletion));\n          }\n        }\n        break;\n    }\n  }\n\n  return {originalLines, currentLines, rows};\n\n  function createEqualRows(lines: string[], atStart: boolean, atEnd: boolean): Row[] {\n    const equalRows = [];\n    if (!atStart) {\n      for (let i = 0; i < paddingLines && i < lines.length; i++) {\n        equalRows.push(createRow(lines[i], RowType.Equal));\n      }\n      if (lines.length > paddingLines * 2 + 1 && !atEnd) {\n        equalRows.push(createRow(\n            i18nString(UIStrings.SkippingDMatchingLines, {PH1: (lines.length - paddingLines * 2)}), RowType.Spacer));\n      }\n    }\n    if (!atEnd) {\n      const start = Math.max(lines.length - paddingLines - 1, atStart ? 0 : paddingLines);\n      let skip = lines.length - paddingLines - 1;\n      if (!atStart) {\n        skip -= paddingLines;\n      }\n      if (skip > 0) {\n        originalLineNumber += skip;\n        currentLineNumber += skip;\n      }\n\n      for (let i = start; i < lines.length; i++) {\n        equalRows.push(createRow(lines[i], RowType.Equal));\n      }\n    }\n    return equalRows;\n  }\n\n  function createModifyRows(before: string, after: string): Row[] {\n    const internalDiff = Diff.Diff.DiffWrapper.charDiff(before, after, true /* cleanup diff */);\n    const deletionRows = [createRow('', RowType.Deletion)];\n    const insertionRows = [createRow('', RowType.Addition)];\n\n    for (const token of internalDiff) {\n      const text = token[1];\n      const type = token[0];\n      const className = type === Diff.Diff.Operation.Equal ? '' : 'inner-diff';\n      const lines = text.split('\\n');\n      for (let i = 0; i < lines.length; i++) {\n        if (i > 0 && type !== Diff.Diff.Operation.Insert) {\n          deletionRows.push(createRow('', RowType.Deletion));\n        }\n        if (i > 0 && type !== Diff.Diff.Operation.Delete) {\n          insertionRows.push(createRow('', RowType.Addition));\n        }\n        if (!lines[i]) {\n          continue;\n        }\n        if (type !== Diff.Diff.Operation.Insert) {\n          deletionRows[deletionRows.length - 1].tokens.push({text: lines[i], className});\n        }\n        if (type !== Diff.Diff.Operation.Delete) {\n          insertionRows[insertionRows.length - 1].tokens.push({text: lines[i], className});\n        }\n      }\n    }\n    return deletionRows.concat(insertionRows);\n  }\n\n  function createRow(text: string, type: RowType): Row {\n    if (type === RowType.Addition) {\n      currentLineNumber++;\n    }\n    if (type === RowType.Deletion) {\n      originalLineNumber++;\n    }\n    if (type === RowType.Equal) {\n      originalLineNumber++;\n      currentLineNumber++;\n    }\n\n    return {originalLineNumber, currentLineNumber, tokens: text ? [{text, className: 'inner-diff'}] : [], type};\n  }\n}\n\nfunction documentMap(lines: readonly string[]): Map<number, number> {\n  const map = new Map<number, number>();\n  for (let pos = 0, lineNo = 0; lineNo < lines.length; lineNo++) {\n    map.set(lineNo + 1, pos);\n    pos += lines[lineNo].length + 1;\n  }\n  return map;\n}\n\nclass DiffRenderer {\n  private constructor(\n      readonly originalHighlighter: CodeHighlighter.CodeHighlighter.CodeHighlighter,\n      readonly originalMap: Map<number, number>,\n      readonly currentHighlighter: CodeHighlighter.CodeHighlighter.CodeHighlighter,\n      readonly currentMap: Map<number, number>,\n  ) {\n  }\n\n  #render(rows: readonly Row[]): LitHtml.TemplateResult {\n    return LitHtml.html`\n      <div class=\"diff-listing\" aria-label=${i18nString(UIStrings.changesDiffViewer)}>\n        ${rows.map(row => this.#renderRow(row))}\n      </div>`;\n  }\n\n  #renderRow(row: Row): LitHtml.TemplateResult {\n    const baseNumber =\n        row.type === RowType.Equal || row.type === RowType.Deletion ? String(row.originalLineNumber) : '';\n    const curNumber = row.type === RowType.Equal || row.type === RowType.Addition ? String(row.currentLineNumber) : '';\n    let marker = '', markerClass = 'diff-line-marker', screenReaderText = null;\n    if (row.type === RowType.Addition) {\n      marker = '+';\n      markerClass += ' diff-line-addition';\n      screenReaderText = LitHtml.html`<span class=\"diff-hidden-text\">${i18nString(UIStrings.additions)}</span>`;\n    } else if (row.type === RowType.Deletion) {\n      marker = '-';\n      markerClass += ' diff-line-deletion';\n      screenReaderText = LitHtml.html`<span class=\"diff-hidden-text\">${i18nString(UIStrings.deletions)}</span>`;\n    }\n    return LitHtml.html`\n      <div class=\"diff-line-number\" aria-hidden=\"true\">${baseNumber}</div>\n      <div class=\"diff-line-number\" aria-hidden=\"true\">${curNumber}</div>\n      <div class=${markerClass} aria-hidden=\"true\">${marker}</div>\n      <div class=\"diff-line-content diff-line-${row.type}\" data-line-number=${curNumber}>${screenReaderText}${\n        this.#renderRowContent(row)}</div>`;\n  }\n\n  #renderRowContent(row: Row): LitHtml.TemplateResult[] {\n    if (row.type === RowType.Spacer) {\n      return row.tokens.map(tok => LitHtml.html`${tok.text}`);\n    }\n    const [doc, startPos] = row.type === RowType.Deletion ?\n        [this.originalHighlighter, this.originalMap.get(row.originalLineNumber) as number] :\n        [this.currentHighlighter, this.currentMap.get(row.currentLineNumber) as number];\n    const content: LitHtml.TemplateResult[] = [];\n    let pos = startPos;\n    for (const token of row.tokens) {\n      const tokenContent: (LitHtml.TemplateResult|string)[] = [];\n      doc.highlightRange(pos, pos + token.text.length, (text, style) => {\n        tokenContent.push(style ? LitHtml.html`<span class=${style}>${text}</span>` : text);\n      });\n      content.push(\n          token.className ? LitHtml.html`<span class=${token.className}>${tokenContent}</span>` :\n                            LitHtml.html`${tokenContent}`);\n      pos += token.text.length;\n    }\n    return content;\n  }\n\n  static async render(diff: Diff.Diff.DiffArray, mimeType: string, parent: HTMLElement|DocumentFragment):\n      Promise<void> {\n    const {originalLines, currentLines, rows} = buildDiffRows(diff);\n    const renderer = new DiffRenderer(\n        await CodeHighlighter.CodeHighlighter.create(originalLines.join('\\n'), mimeType),\n        documentMap(originalLines),\n        await CodeHighlighter.CodeHighlighter.create(currentLines.join('\\n'), mimeType),\n        documentMap(currentLines),\n    );\n    LitHtml.render(renderer.#render(rows), parent, {host: this});\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-diff-view': DiffView;\n  }\n}\n\nexport type DiffViewData = {\n  diff: Diff.Diff.DiffArray,\n  mimeType: string,\n};\n\nexport class DiffView extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-diff-view`;\n\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  loaded: Promise<void>;\n\n  constructor(data?: DiffViewData) {\n    super();\n    this.#shadow.adoptedStyleSheets = [diffViewStyles, CodeHighlighter.Style.default];\n    if (data) {\n      this.loaded = DiffRenderer.render(data.diff, data.mimeType, this.#shadow);\n    } else {\n      this.loaded = Promise.resolve();\n    }\n  }\n\n  set data(data: DiffViewData) {\n    this.loaded = DiffRenderer.render(data.diff, data.mimeType, this.#shadow);\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-diff-view', DiffView);\n"],
  "mappings": "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",
  "names": []
}
