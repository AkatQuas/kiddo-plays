{
  "version": 3,
  "sources": ["../../../../../../../front_end/ui/components/code_highlighter/CodeHighlighter.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as CodeMirror from '../../../third_party/codemirror.next/codemirror.next.js';\n\nconst t = CodeMirror.tags;\n\nexport const highlightStyle: CodeMirror.HighlightStyle = CodeMirror.HighlightStyle.define([\n  {tag: t.variableName, class: 'token-variable'},\n  {tag: t.propertyName, class: 'token-property'},\n  {tag: [t.typeName, t.className, t.namespace, t.macroName], class: 'token-type'},\n  {tag: [t.special(t.name), t.constant(t.className)], class: 'token-variable-special'},\n  {tag: t.definition(t.name), class: 'token-definition'},\n  {tag: t.standard(t.variableName), class: 'token-builtin'},\n\n  {tag: [t.number, t.literal, t.unit], class: 'token-number'},\n  {tag: t.string, class: 'token-string'},\n  {tag: [t.special(t.string), t.regexp, t.escape], class: 'token-string-special'},\n  {tag: [t.atom, t.labelName, t.bool], class: 'token-atom'},\n\n  {tag: t.keyword, class: 'token-keyword'},\n  {tag: [t.comment, t.quote], class: 'token-comment'},\n  {tag: t.meta, class: 'token-meta'},\n  {tag: t.invalid, class: 'token-invalid'},\n\n  {tag: t.tagName, class: 'token-tag'},\n  {tag: t.attributeName, class: 'token-attribute'},\n  {tag: t.attributeValue, class: 'token-attribute-value'},\n\n  {tag: t.inserted, class: 'token-inserted'},\n  {tag: t.deleted, class: 'token-deleted'},\n  {tag: t.heading, class: 'token-heading'},\n  {tag: t.link, class: 'token-link'},\n  {tag: t.strikethrough, class: 'token-strikethrough'},\n  {tag: t.strong, class: 'token-strong'},\n  {tag: t.emphasis, class: 'token-emphasis'},\n]);\n\nexport async function create(code: string, mimeType: string): Promise<CodeHighlighter> {\n  const language = await languageFromMIME(mimeType);\n  let tree: CodeMirror.Tree;\n  if (language) {\n    tree = language.language.parser.parse(code);\n  } else {\n    tree = new CodeMirror.Tree(CodeMirror.NodeType.none, [], [], code.length);\n  }\n  return new CodeHighlighter(code, tree);\n}\n\nexport async function highlightNode(node: Element, mimeType: string): Promise<void> {\n  const code = node.textContent || '';\n  const highlighter = await create(code, mimeType);\n  node.removeChildren();\n  highlighter.highlight((text, style) => {\n    let token: Node = document.createTextNode(text);\n    if (style) {\n      const span = document.createElement('span');\n      span.className = style;\n      span.appendChild(token);\n      token = span;\n    }\n    node.appendChild(token);\n  });\n}\n\nexport async function languageFromMIME(mimeType: string): Promise<CodeMirror.LanguageSupport|null> {\n  switch (mimeType) {\n    case 'text/javascript':\n      return CodeMirror.javascript.javascript();\n    case 'text/jsx':\n      return CodeMirror.javascript.javascript({jsx: true});\n    case 'text/typescript':\n      return CodeMirror.javascript.javascript({typescript: true});\n    case 'text/typescript-jsx':\n      return CodeMirror.javascript.javascript({typescript: true, jsx: true});\n\n    case 'text/css':\n    case 'text/x-scss':\n      return CodeMirror.css.css();\n\n    case 'text/html':\n      return CodeMirror.html.html();\n\n    case 'application/xml':\n      return (await CodeMirror.xml()).xml();\n\n    case 'text/webassembly':\n      return (await CodeMirror.wast()).wast();\n\n    case 'text/x-c++src':\n      return (await CodeMirror.cpp()).cpp();\n\n    case 'text/x-java':\n      return (await CodeMirror.java()).java();\n\n    case 'application/json':\n      return (await CodeMirror.json()).json();\n\n    case 'application/x-httpd-php':\n      return (await CodeMirror.php()).php();\n\n    case 'text/x-python':\n      return (await CodeMirror.python()).python();\n\n    case 'text/markdown':\n      return (await CodeMirror.markdown()).markdown();\n\n    case 'text/x-sh':\n      return new CodeMirror.LanguageSupport(await CodeMirror.shell());\n\n    case 'text/x-coffeescript':\n      return new CodeMirror.LanguageSupport(await CodeMirror.coffeescript());\n\n    case 'text/x-clojure':\n      return new CodeMirror.LanguageSupport(await CodeMirror.clojure());\n\n    default:\n      return null;\n  }\n}\n\nexport class CodeHighlighter {\n  constructor(readonly code: string, readonly tree: CodeMirror.Tree) {\n  }\n\n  highlight(token: (text: string, style: string) => void): void {\n    this.highlightRange(0, this.code.length, token);\n  }\n\n  highlightRange(from: number, to: number, token: (text: string, style: string) => void): void {\n    let pos = from;\n    const flush = (to: number, style: string): void => {\n      if (to > pos) {\n        token(this.code.slice(pos, to), style);\n        pos = to;\n      }\n    };\n    CodeMirror.highlightTree(this.tree, highlightStyle, (from, to, style) => {\n      flush(from, '');\n      flush(to, style);\n    }, from, to);\n    flush(to, '');\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
