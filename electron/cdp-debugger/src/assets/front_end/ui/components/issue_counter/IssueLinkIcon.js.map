{
  "version": 3,
  "sources": ["../../../../../../../front_end/ui/components/issue_counter/IssueLinkIcon.ts"],
  "sourcesContent": ["// Copyright (c) 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../../core/platform/platform.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Common from '../../../core/common/common.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as IconButton from '../../../ui/components/icon_button/icon_button.js';\nimport type * as Protocol from '../../../generated/protocol.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\nimport * as IssuesManager from '../../../models/issues_manager/issues_manager.js';\nimport * as Coordinator from '../../../ui/components/render_coordinator/render_coordinator.js';\nimport IssueLinkIconStyles from './issueLinkIcon.css.js';\n\nimport {getIssueKindIconData} from './IssueCounter.js';\n\nconst UIStrings = {\n  /**\n   * @description Title for a link to show an issue in the issues tab\n   */\n  clickToShowIssue: 'Click to show issue in the issues tab',\n  /**\n   * @description Title for a link to show an issue in the issues tab\n   * @example {A title of an Issue} title\n   */\n  clickToShowIssueWithTitle: 'Click to open the issue tab and show issue: {title}',\n  /**\n   *@description Title for an link to show an issue that is unavailable because the issue couldn't be resolved\n   */\n  issueUnavailable: 'Issue unavailable at this time',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/components/issue_counter/IssueLinkIcon.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface IssueLinkIconData {\n  issue?: IssuesManager.Issue.Issue|null;\n  issueId?: Protocol.Audits.IssueId;\n  issueResolver?: IssuesManager.IssueResolver.IssueResolver;\n  additionalOnClickAction?: () => void;\n  revealOverride?: (revealable: Object|null, omitFocus?: boolean|undefined) => Promise<void>;\n}\n\nexport const extractShortPath = (path: string): string => {\n  // 1st regex matches everything after last '/'\n  // if path ends with '/', 2nd regex returns everything between the last two '/'\n  return (/[^/]+$/.exec(path) || /[^/]+\\/$/.exec(path) || [''])[0];\n};\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\nexport class IssueLinkIcon extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-issue-link-icon`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  // The value `null` indicates that the issue is not available,\n  // `undefined` that it is still being resolved.\n  #issue?: IssuesManager.Issue.Issue|null;\n  #issueTitle: string|null = null;\n  #issueTitlePromise = Promise.resolve<void>(undefined);\n  #issueId?: Protocol.Audits.IssueId;\n  #issueResolver?: IssuesManager.IssueResolver.IssueResolver;\n  #additionalOnClickAction?: () => void;\n  #reveal = Common.Revealer.reveal;\n  #issueResolvedPromise = Promise.resolve<void>(undefined);\n\n  set data(data: IssueLinkIconData) {\n    this.#issue = data.issue;\n    this.#issueId = data.issueId;\n    if (!this.#issue && !this.#issueId) {\n      throw new Error('Either `issue` or `issueId` must be provided');\n    }\n    this.#issueResolver = data.issueResolver;\n    this.#additionalOnClickAction = data.additionalOnClickAction;\n    if (data.revealOverride) {\n      this.#reveal = data.revealOverride;\n    }\n    if (!this.#issue && this.#issueId) {\n      this.#issueResolvedPromise = this.#resolveIssue(this.#issueId);\n      this.#issueTitlePromise = this.#issueResolvedPromise.then(() => this.#fetchIssueTitle());\n    } else {\n      this.#issueTitlePromise = this.#fetchIssueTitle();\n    }\n    void this.#render();\n  }\n\n  async #fetchIssueTitle(): Promise<void> {\n    const description = this.#issue?.getDescription();\n    if (!description) {\n      return;\n    }\n    const title = await IssuesManager.MarkdownIssueDescription.getIssueTitleFromMarkdownDescription(description);\n    if (title) {\n      this.#issueTitle = title;\n    }\n  }\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [IssueLinkIconStyles];\n  }\n\n  #resolveIssue(issueId: Protocol.Audits.IssueId): Promise<void> {\n    if (!this.#issueResolver) {\n      throw new Error('An `IssueResolver` must be provided if an `issueId` is provided.');\n    }\n    return this.#issueResolver.waitFor(issueId)\n        .then(issue => {\n          this.#issue = issue;\n        })\n        .catch(() => {\n          this.#issue = null;\n        });\n  }\n\n  get data(): IssueLinkIconData {\n    return {\n      issue: this.#issue,\n      issueId: this.#issueId,\n      issueResolver: this.#issueResolver,\n      additionalOnClickAction: this.#additionalOnClickAction,\n      revealOverride: this.#reveal !== Common.Revealer.reveal ? this.#reveal : undefined,\n    };\n  }\n\n  iconData(): IconButton.Icon.IconData {\n    if (this.#issue) {\n      return getIssueKindIconData(this.#issue.getKind());\n    }\n    return {iconName: 'issue-questionmark-icon', color: 'var(--color-text-secondary)', width: '16px', height: '16px'};\n  }\n\n  handleClick(event: MouseEvent): void {\n    if (event.button !== 0) {\n      return;  // Only handle left-click for now.\n    }\n    if (this.#issue) {\n      void this.#reveal(this.#issue);\n    }\n    this.#additionalOnClickAction?.();\n  }\n\n  #getTooltip(): Platform.UIString.LocalizedString {\n    if (this.#issueTitle) {\n      return i18nString(UIStrings.clickToShowIssueWithTitle, {title: this.#issueTitle});\n    }\n    if (this.#issue) {\n      return i18nString(UIStrings.clickToShowIssue);\n    }\n    return i18nString(UIStrings.issueUnavailable);\n  }\n\n  #render(): Promise<void> {\n    return coordinator.write(() => {\n      // clang-format off\n      LitHtml.render(LitHtml.html`\n        ${LitHtml.Directives.until(this.#issueTitlePromise.then(() => this.#renderComponent()), this.#issueResolvedPromise.then(() => this.#renderComponent()), this.#renderComponent())}\n      `,\n      this.#shadow, {host: this});\n      // clang-format on\n    });\n  }\n\n  #renderComponent(): LitHtml.TemplateResult {\n    // clang-format off\n    return LitHtml.html`\n      <span class=${LitHtml.Directives.classMap({'link': Boolean(this.#issue)})}\n            tabindex=\"0\"\n            @click=${this.handleClick}>\n        <${IconButton.Icon.Icon.litTagName} .data=${this.iconData() as IconButton.Icon.IconData}\n          title=${this.#getTooltip()}></${IconButton.Icon.Icon.litTagName}>\n      </span>`;\n    // clang-format on\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-issue-link-icon', IssueLinkIcon);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-issue-link-icon': IssueLinkIcon;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
