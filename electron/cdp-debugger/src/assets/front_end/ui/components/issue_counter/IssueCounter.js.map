{
  "version": 3,
  "sources": ["../../../../../../../front_end/ui/components/issue_counter/IssueCounter.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as IssuesManager from '../../../models/issues_manager/issues_manager.js';\nimport * as ComponentHelpers from '../../components/helpers/helpers.js';\nimport * as LitHtml from '../../lit-html/lit-html.js';\nimport type * as IconButton from '../icon_button/icon_button.js';\nimport issueCounterStyles from './issueCounter.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Label for link to Issues tab, specifying how many issues there are.\n  */\n  pageErrors: '{issueCount, plural, =1 {# page error} other {# page errors}}',\n  /**\n *@description Label for link to Issues tab, specifying how many issues there are.\n */\n  breakingChanges: '{issueCount, plural, =1 {# breaking change} other {# breaking changes}}',\n  /**\n *@description Label for link to Issues tab, specifying how many issues there are.\n */\n  possibleImprovements: '{issueCount, plural, =1 {# possible improvement} other {# possible improvements}}',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/components/issue_counter/IssueCounter.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport function getIssueKindIconData(issueKind: IssuesManager.Issue.IssueKind): IconButton.Icon.IconWithName {\n  switch (issueKind) {\n    case IssuesManager.Issue.IssueKind.PageError:\n      return {iconName: 'issue-cross-icon', color: 'var(--issue-color-red)', width: '16px', height: '16px'};\n    case IssuesManager.Issue.IssueKind.BreakingChange:\n      return {iconName: 'issue-exclamation-icon', color: 'var(--issue-color-yellow)', width: '16px', height: '16px'};\n    case IssuesManager.Issue.IssueKind.Improvement:\n      return {iconName: 'issue-text-icon', color: 'var(--issue-color-blue)', width: '16px', height: '16px'};\n  }\n}\n\nfunction toIconGroup({iconName, color, width, height}: IconButton.Icon.IconWithName, sizeOverride?: string):\n    IconButton.IconButton.IconWithTextData {\n  if (sizeOverride) {\n    return {iconName, iconColor: color, iconWidth: sizeOverride, iconHeight: sizeOverride};\n  }\n  return {iconName, iconColor: color, iconWidth: width, iconHeight: height};\n}\n\nexport const enum DisplayMode {\n  OmitEmpty = 'OmitEmpty',\n  ShowAlways = 'ShowAlways',\n  OnlyMostImportant = 'OnlyMostImportant',\n}\n\nexport interface IssueCounterData {\n  clickHandler?: () => void;\n  tooltipCallback?: () => void;\n  leadingText?: string;\n  displayMode?: DisplayMode;\n  issuesManager: IssuesManager.IssuesManager.IssuesManager;\n  throttlerTimeout?: number;\n  accessibleName?: string;\n  compact?: boolean;\n}\n\n// @ts-ignore Remove this comment once Intl.ListFormat is in type defs.\nconst listFormat = new Intl.ListFormat(navigator.language, {type: 'unit', style: 'short'});\n\nexport function getIssueCountsEnumeration(\n    issuesManager: IssuesManager.IssuesManager.IssuesManager, omitEmpty: boolean = true): string {\n  const counts: [number, number, number] = [\n    issuesManager.numberOfIssues(IssuesManager.Issue.IssueKind.PageError),\n    issuesManager.numberOfIssues(IssuesManager.Issue.IssueKind.BreakingChange),\n    issuesManager.numberOfIssues(IssuesManager.Issue.IssueKind.Improvement),\n  ];\n  const phrases = [\n    i18nString(UIStrings.pageErrors, {issueCount: counts[0]}),\n    i18nString(UIStrings.breakingChanges, {issueCount: counts[1]}),\n    i18nString(UIStrings.possibleImprovements, {issueCount: counts[2]}),\n  ];\n  return listFormat.format(phrases.filter((_, i) => omitEmpty ? counts[i] > 0 : true));\n}\n\nexport class IssueCounter extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`issue-counter`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #clickHandler: undefined|(() => void) = undefined;\n  #tooltipCallback: undefined|(() => void) = undefined;\n  #leadingText: string = '';\n  #throttler: undefined|Common.Throttler.Throttler;\n  #counts: [number, number, number] = [0, 0, 0];\n  #displayMode: DisplayMode = DisplayMode.OmitEmpty;\n  #issuesManager: IssuesManager.IssuesManager.IssuesManager|undefined = undefined;\n  #accessibleName: string|undefined = undefined;\n  #throttlerTimeout: number|undefined;\n  #compact = false;\n\n  scheduleUpdate(): void {\n    if (this.#throttler) {\n      void this.#throttler.schedule(async () => this.#render());\n    } else {\n      this.#render();\n    }\n  }\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [issueCounterStyles];\n  }\n\n  set data(data: IssueCounterData) {\n    this.#clickHandler = data.clickHandler;\n    this.#leadingText = data.leadingText ?? '';\n    this.#tooltipCallback = data.tooltipCallback;\n    this.#displayMode = data.displayMode ?? DisplayMode.OmitEmpty;\n    this.#accessibleName = data.accessibleName;\n    this.#throttlerTimeout = data.throttlerTimeout;\n    this.#compact = Boolean(data.compact);\n    if (this.#issuesManager !== data.issuesManager) {\n      this.#issuesManager?.removeEventListener(\n          IssuesManager.IssuesManager.Events.IssuesCountUpdated, this.scheduleUpdate, this);\n      this.#issuesManager = data.issuesManager;\n      this.#issuesManager.addEventListener(\n          IssuesManager.IssuesManager.Events.IssuesCountUpdated, this.scheduleUpdate, this);\n    }\n    if (data.throttlerTimeout !== 0) {\n      this.#throttler = new Common.Throttler.Throttler(data.throttlerTimeout ?? 100);\n    } else {\n      this.#throttler = undefined;\n    }\n    this.scheduleUpdate();\n  }\n\n  get data(): IssueCounterData {\n    return {\n      clickHandler: this.#clickHandler,\n      leadingText: this.#leadingText,\n      tooltipCallback: this.#tooltipCallback,\n      displayMode: this.#displayMode,\n      accessibleName: this.#accessibleName,\n      throttlerTimeout: this.#throttlerTimeout,\n      compact: this.#compact,\n      issuesManager: this.#issuesManager as IssuesManager.IssuesManager.IssuesManager,\n    };\n  }\n\n  #render(): void {\n    if (!this.#issuesManager) {\n      return;\n    }\n    this.#counts = [\n      this.#issuesManager.numberOfIssues(IssuesManager.Issue.IssueKind.PageError),\n      this.#issuesManager.numberOfIssues(IssuesManager.Issue.IssueKind.BreakingChange),\n      this.#issuesManager.numberOfIssues(IssuesManager.Issue.IssueKind.Improvement),\n    ];\n    const importance = [\n      IssuesManager.Issue.IssueKind.PageError,\n      IssuesManager.Issue.IssueKind.BreakingChange,\n      IssuesManager.Issue.IssueKind.Improvement,\n    ];\n    const mostImportant = importance[this.#counts.findIndex(x => x > 0) ?? 2];\n\n    const countToString = (kind: IssuesManager.Issue.IssueKind, count: number): string|undefined => {\n      switch (this.#displayMode) {\n        case DisplayMode.OmitEmpty:\n          return count > 0 ? `${count}` : undefined;\n        case DisplayMode.ShowAlways:\n          return `${count}`;\n        case DisplayMode.OnlyMostImportant:\n          return kind === mostImportant ? `${count}` : undefined;\n      }\n    };\n    const iconSize = '2ex';\n    const data: IconButton.IconButton.IconButtonData = {\n      groups: [\n        {\n          ...toIconGroup(getIssueKindIconData(IssuesManager.Issue.IssueKind.PageError), iconSize),\n          text: countToString(IssuesManager.Issue.IssueKind.PageError, this.#counts[0]),\n        },\n        {\n          ...toIconGroup(getIssueKindIconData(IssuesManager.Issue.IssueKind.BreakingChange), iconSize),\n          text: countToString(IssuesManager.Issue.IssueKind.BreakingChange, this.#counts[1]),\n        },\n        {\n          ...toIconGroup(getIssueKindIconData(IssuesManager.Issue.IssueKind.Improvement), iconSize),\n          text: countToString(IssuesManager.Issue.IssueKind.Improvement, this.#counts[2]),\n        },\n      ],\n      clickHandler: this.#clickHandler,\n      leadingText: this.#leadingText,\n      accessibleName: this.#accessibleName,\n      compact: this.#compact,\n    };\n    LitHtml.render(\n        LitHtml.html`\n        <icon-button .data=${data as IconButton.IconButton.IconButtonData} .accessibleName=${\n            this.#accessibleName}></icon-button>\n        `,\n        this.#shadow, {host: this});\n    this.#tooltipCallback?.();\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('issue-counter', IssueCounter);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'issue-counter': IssueCounter;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
