{
  "version": 3,
  "sources": ["../../../../../../../front_end/ui/components/data_grid/DataGridContextMenuUtils.ts"],
  "sourcesContent": ["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport type * as UI from '../../legacy/legacy.js';\n\nimport type {DataGrid} from './DataGrid.js';\nimport {ContextMenuColumnSortClickEvent} from './DataGridEvents.js';\nimport type {Column} from './DataGridUtils.js';\n\nfunction toggleColumnVisibility(dataGrid: DataGrid, column: Column): void {\n  const newVisibility = !column.visible;\n  const newColumns = dataGrid.data.columns.map(col => {\n    if (col === column) {\n      col.visible = newVisibility;\n    }\n    return col;\n  });\n  dataGrid.data = {\n    ...dataGrid.data,\n    columns: newColumns,\n  };\n}\n\n/**\n * This adds a checkbox to the context menu for each column in the datagrid that\n * is hideable. Columns that are visible will have a tick next to them, and\n * hidden ones will not. Upon clicking by the user the selected column's\n * visibility will be toggled.\n */\nexport function addColumnVisibilityCheckboxes(\n    dataGrid: DataGrid, contextMenu: UI.ContextMenu.ContextMenu|UI.ContextMenu.SubMenu): void {\n  const {columns} = dataGrid.data;\n\n  for (const column of columns) {\n    if (!column.hideable) {\n      continue;\n    }\n    /**\n       * Append checkboxes for each column that is hideable; these will show\n       * with checkboxes if the column is visible and allow the user to click in\n       * the context menu to toggle an individual column's visibility.\n       */\n    contextMenu.defaultSection().appendCheckboxItem(column.title, () => {\n      toggleColumnVisibility(dataGrid, column);\n    }, column.visible);\n  }\n}\n\n/**\n * This adds an entry to the context menu for each column in the data grid that\n * is considered sortable, so the user can click on the context menu item to\n * change the data grid's sorting.\n *\n * This is also achieved by clicking on the column headers in the grid directly,\n * but we also support doing so via the context menu items.\n */\nexport function addSortableColumnItems(\n    dataGrid: DataGrid, contextMenu: UI.ContextMenu.ContextMenu|UI.ContextMenu.SubMenu): void {\n  const sortableColumns = dataGrid.data.columns.filter(col => col.sortable === true);\n  if (sortableColumns.length > 0) {\n    for (const column of sortableColumns) {\n      contextMenu.defaultSection().appendItem(column.title, () => {\n        dataGrid.dispatchEvent(new ContextMenuColumnSortClickEvent(column));\n      });\n    }\n  }\n}\n"],
  "mappings": "AAMA;AAGA,gCAAgC,UAAoB,QAAsB;AACxE,QAAM,gBAAgB,CAAC,OAAO;AAC9B,QAAM,aAAa,SAAS,KAAK,QAAQ,IAAI,SAAO;AAClD,QAAI,QAAQ,QAAQ;AAClB,UAAI,UAAU;AAAA;AAEhB,WAAO;AAAA;AAET,WAAS,OAAO;AAAA,OACX,SAAS;AAAA,IACZ,SAAS;AAAA;AAAA;AAUN,8CACH,UAAoB,aAAsE;AAC5F,QAAM,EAAC,YAAW,SAAS;AAE3B,aAAW,UAAU,SAAS;AAC5B,QAAI,CAAC,OAAO,UAAU;AACpB;AAAA;AAOF,gBAAY,iBAAiB,mBAAmB,OAAO,OAAO,MAAM;AAClE,6BAAuB,UAAU;AAAA,OAChC,OAAO;AAAA;AAAA;AAYP,uCACH,UAAoB,aAAsE;AAC5F,QAAM,kBAAkB,SAAS,KAAK,QAAQ,OAAO,SAAO,IAAI,aAAa;AAC7E,MAAI,gBAAgB,SAAS,GAAG;AAC9B,eAAW,UAAU,iBAAiB;AACpC,kBAAY,iBAAiB,WAAW,OAAO,OAAO,MAAM;AAC1D,iBAAS,cAAc,IAAI,gCAAgC;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
