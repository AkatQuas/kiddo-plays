{
  "version": 3,
  "sources": ["../../../../../../../front_end/ui/components/text_prompt/TextPrompt.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as ComponentHelpers from '../../components/helpers/helpers.js';\nimport * as LitHtml from '../../lit-html/lit-html.js';\n\nimport textPromptStyles from './textPrompt.css.js';\n\nexport interface TextPromptData {\n  ariaLabel: string;\n  prefix: string;\n  suggestion: string;\n}\n\nexport class PromptInputEvent extends Event {\n  static readonly eventName = 'promptinputchanged';\n  data: string;\n\n  constructor(value: string) {\n    super(PromptInputEvent.eventName);\n    this.data = value;\n  }\n}\n\nexport class TextPrompt extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-text-prompt`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #ariaLabelText = '';\n  #prefixText = '';\n  #suggestionText = '';\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [textPromptStyles];\n  }\n\n  set data(data: TextPromptData) {\n    this.#ariaLabelText = data.ariaLabel;\n    this.#prefixText = data.prefix;\n    this.#suggestionText = data.suggestion;\n    this.#render();\n  }\n\n  get data(): TextPromptData {\n    return {\n      ariaLabel: this.#ariaLabelText,\n      prefix: this.#prefixText,\n      suggestion: this.#suggestionText,\n    };\n  }\n\n  focus(): void {\n    this.#input().focus();\n  }\n\n  #input(): HTMLInputElement {\n    const inputElement = this.#shadow.querySelector<HTMLInputElement>('.input');\n    if (!inputElement) {\n      throw new Error('Expected an input element!');\n    }\n    return inputElement;\n  }\n\n  moveCaretToEndOfInput(): void {\n    this.setSelectedRange(this.#text().length, this.#text().length);\n  }\n\n  onInput(): void {\n    this.#suggestion().value = this.#text();\n    this.dispatchEvent(new PromptInputEvent(this.#text().trim()));\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    if (event.key === Platform.KeyboardUtilities.ENTER_KEY) {\n      event.preventDefault();\n    }\n  }\n\n  setSelectedRange(startIndex: number, endIndex: number): void {\n    if (startIndex < 0) {\n      throw new RangeError('Selected range start must be a nonnegative integer');\n    }\n    const textContentLength = this.#text().length;\n    if (endIndex > textContentLength) {\n      endIndex = textContentLength;\n    }\n    if (endIndex < startIndex) {\n      endIndex = startIndex;\n    }\n    this.#input().setSelectionRange(startIndex, endIndex);\n  }\n\n  setPrefix(prefix: string): void {\n    this.#prefixText = prefix;\n    this.#render();\n  }\n\n  setSuggestion(suggestion: string): void {\n    this.#suggestionText = suggestion;\n    this.#suggestion().value += this.#suggestionText;\n    this.#render();\n  }\n\n  setText(text: string): void {\n    this.#input().value = text;\n    this.#suggestion().value = this.#text();\n\n    if (this.#input().hasFocus()) {\n      this.moveCaretToEndOfInput();\n      this.#input().scrollIntoView();\n    }\n  }\n\n  #suggestion(): HTMLInputElement {\n    const suggestionElement = this.#shadow.querySelector<HTMLInputElement>('.suggestion');\n    if (!suggestionElement) {\n      throw new Error('Expected an suggestion element!');\n    }\n    return suggestionElement;\n  }\n\n  #text(): string {\n    return this.#input().value || '';\n  }\n\n  #render(): void {\n    const output = LitHtml.html`\n      <span class=\"prefix\">${this.#prefixText} </span>\n      <span class=\"text-prompt-input\"><input class=\"input\" aria-label=${\n        this.#ariaLabelText} spellcheck=\"false\" @input=${this.onInput} @keydown=${\n        this.onKeyDown}/><input class=\"suggestion\" aria-label=${this.#ariaLabelText + ' Suggestion'}></span>`;\n    LitHtml.render(output, this.#shadow, {host: this});\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-text-prompt', TextPrompt);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-text-prompt': TextPrompt;\n  }\n\n  interface HTMLElementEventMap {\n    'promptinputchanged': PromptInputEvent;\n  }\n}\n"],
  "mappings": "AAIA;AACA;AACA;AAEA;AAQO,sCAA+B,MAAM;AAAA,SAC1B,YAAY;AAAA,EAC5B;AAAA,EAEA,YAAY,OAAe;AACzB,UAAM,iBAAiB;AACvB,SAAK,OAAO;AAAA;AAAA;AAIT,gCAAyB,YAAY;AAAA,SAC1B,aAAa,QAAQ;AAAA,YAClB,KAAK,aAAa,EAAC,MAAM;AAAA,mBAC3B;AAAA,gBACH;AAAA,oBACI;AAAA,EAElB,oBAA0B;AACxB,iBAAa,qBAAqB,CAAC;AAAA;AAAA,MAGjC,KAAK,MAAsB;AAC7B,0BAAsB,KAAK;AAC3B,uBAAmB,KAAK;AACxB,2BAAuB,KAAK;AAC5B;AAAA;AAAA,MAGE,OAAuB;AACzB,WAAO;AAAA,MACL,WAAW;AAAA,MACX,QAAQ;AAAA,MACR,YAAY;AAAA;AAAA;AAAA,EAIhB,QAAc;AACZ,kBAAc;AAAA;AAAA,WAGW;AACzB,UAAM,eAAe,aAAa,cAAgC;AAClE,QAAI,CAAC,cAAc;AACjB,YAAM,IAAI,MAAM;AAAA;AAElB,WAAO;AAAA;AAAA,EAGT,wBAA8B;AAC5B,SAAK,iBAAiB,aAAa,QAAQ,aAAa;AAAA;AAAA,EAG1D,UAAgB;AACd,uBAAmB,QAAQ;AAC3B,SAAK,cAAc,IAAI,iBAAiB,aAAa;AAAA;AAAA,EAGvD,UAAU,OAA4B;AACpC,QAAI,MAAM,QAAQ,SAAS,kBAAkB,WAAW;AACtD,YAAM;AAAA;AAAA;AAAA,EAIV,iBAAiB,YAAoB,UAAwB;AAC3D,QAAI,aAAa,GAAG;AAClB,YAAM,IAAI,WAAW;AAAA;AAEvB,UAAM,oBAAoB,aAAa;AACvC,QAAI,WAAW,mBAAmB;AAChC,iBAAW;AAAA;AAEb,QAAI,WAAW,YAAY;AACzB,iBAAW;AAAA;AAEb,kBAAc,kBAAkB,YAAY;AAAA;AAAA,EAG9C,UAAU,QAAsB;AAC9B,uBAAmB;AACnB;AAAA;AAAA,EAGF,cAAc,YAA0B;AACtC,2BAAuB;AACvB,uBAAmB,SAAS;AAC5B;AAAA;AAAA,EAGF,QAAQ,MAAoB;AAC1B,kBAAc,QAAQ;AACtB,uBAAmB,QAAQ;AAE3B,QAAI,cAAc,YAAY;AAC5B,WAAK;AACL,oBAAc;AAAA;AAAA;AAAA,gBAIc;AAC9B,UAAM,oBAAoB,aAAa,cAAgC;AACvE,QAAI,CAAC,mBAAmB;AACtB,YAAM,IAAI,MAAM;AAAA;AAElB,WAAO;AAAA;AAAA,UAGO;AACd,WAAO,cAAc,SAAS;AAAA;AAAA,YAGhB;AACd,UAAM,SAAS,QAAQ;AAAA,6BACE;AAAA,wEAErB,iDAAiD,KAAK,oBACtD,KAAK,mDAAmD,sBAAsB;AAClF,YAAQ,OAAO,QAAQ,cAAc,EAAC,MAAM;AAAA;AAAA;AAIhD,iBAAiB,eAAe,gBAAgB,wBAAwB;",
  "names": []
}
