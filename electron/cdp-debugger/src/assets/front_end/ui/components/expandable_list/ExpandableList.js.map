{
  "version": 3,
  "sources": ["../../../../../../../front_end/ui/components/expandable_list/ExpandableList.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as ComponentHelpers from '../../components/helpers/helpers.js';\nimport * as LitHtml from '../../lit-html/lit-html.js';\nimport expandableListStyles from './expandableList.css.js';\n\nexport interface ExpandableListData {\n  rows: LitHtml.TemplateResult[];\n}\n\nexport class ExpandableList extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-expandable-list`;\n\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #expanded = false;\n  #rows: LitHtml.TemplateResult[] = [];\n\n  set data(data: ExpandableListData) {\n    this.#rows = data.rows;\n    this.#render();\n  }\n\n  #onArrowClick(): void {\n    this.#expanded = !this.#expanded;\n    this.#render();\n  }\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [expandableListStyles];\n  }\n\n  #render(): void {\n    if (this.#rows.length < 1) {\n      return;\n    }\n\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    LitHtml.render(\n        LitHtml.html`\n      <div class=\"expandable-list-container\">\n        <div>\n          ${this.#rows.length > 1 ?\n            LitHtml.html`\n              <button @click=${(): void => this.#onArrowClick()} class=\"arrow-icon-button\">\n                <span class=\"arrow-icon ${this.#expanded ? 'expanded' : ''}\"></span>\n              </button>\n            `\n          : LitHtml.nothing}\n        </div>\n        <div class=\"expandable-list-items\">\n          ${this.#rows.filter((_, index) => (this.#expanded || index === 0)).map(row => LitHtml.html`\n            ${row}\n          `)}\n        </div>\n      </div>\n    `,\n        this.#shadow, {host: this});\n    // clang-format on\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-expandable-list', ExpandableList);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-expandable-list': ExpandableList;\n  }\n}\n"],
  "mappings": "AAIA;AACA;AACA;AAMO,oCAA6B,YAAY;AAAA,SAC9B,aAAa,QAAQ;AAAA,YAElB,KAAK,aAAa,EAAC,MAAM;AAAA,cAChC;AAAA,UACsB;AAAA,MAE9B,KAAK,MAA0B;AACjC,iBAAa,KAAK;AAClB;AAAA;AAAA,kBAGoB;AACpB,qBAAiB,CAAC;AAClB;AAAA;AAAA,EAGF,oBAA0B;AACxB,iBAAa,qBAAqB,CAAC;AAAA;AAAA,YAGrB;AACd,QAAI,WAAW,SAAS,GAAG;AACzB;AAAA;AAKF,YAAQ,OACJ,QAAQ;AAAA;AAAA;AAAA,YAGJ,WAAW,SAAS,IACpB,QAAQ;AAAA,+BACW,MAAY;AAAA,0CACD,iBAAiB,aAAa;AAAA;AAAA,gBAG5D,QAAQ;AAAA;AAAA;AAAA,YAGR,WAAW,OAAO,CAAC,GAAG,UAAW,kBAAkB,UAAU,GAAI,IAAI,SAAO,QAAQ;AAAA,cAClF;AAAA;AAAA;AAAA;AAAA,OAKN,cAAc,EAAC,MAAM;AAAA;AAAA;AAK7B,iBAAiB,eAAe,gBAAgB,4BAA4B;",
  "names": []
}
