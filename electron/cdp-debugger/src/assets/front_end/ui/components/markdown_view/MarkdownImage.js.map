{
  "version": 3,
  "sources": ["../../../../../../../front_end/ui/components/markdown_view/MarkdownImage.ts"],
  "sourcesContent": ["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as ComponentHelpers from '../../components/helpers/helpers.js';\nimport * as IconButton from '../../components/icon_button/icon_button.js';\nimport * as LitHtml from '../../lit-html/lit-html.js';\nimport markdownImageStyles from './markdownImage.css.js';\n\nimport type {ImageData} from './MarkdownImagesMap.js';\nimport {getMarkdownImage} from './MarkdownImagesMap.js';\n\nexport interface MarkdownImageData {\n  key: string;\n  title: string;\n}\n\n/**\n * Component to render images from parsed markdown.\n * Parsed images from markdown are not directly rendered, instead they have to be added to the MarkdownImagesMap.ts.\n * This makes sure that all icons/images are accounted for in markdown.\n */\nexport class MarkdownImage extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-markdown-image`;\n\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #imageData?: ImageData;\n  #imageTitle?: string;\n\n  constructor() {\n    super();\n  }\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [markdownImageStyles];\n  }\n\n  set data(data: MarkdownImageData) {\n    const {key, title} = data;\n    const markdownImage = getMarkdownImage(key);\n    this.#imageData = markdownImage;\n    this.#imageTitle = title;\n    this.#render();\n  }\n\n  #getIconComponent(): LitHtml.TemplateResult {\n    if (!this.#imageData) {\n      return LitHtml.html``;\n    }\n    const {src, color, width = '100%', height = '100%'} = this.#imageData;\n    return LitHtml.html`\n      <${IconButton.Icon.Icon.litTagName} .data=${\n        {iconPath: src, color, width, height} as IconButton.Icon.IconData}></${IconButton.Icon.Icon.litTagName}>\n    `;\n  }\n\n  #getImageComponent(): LitHtml.TemplateResult {\n    if (!this.#imageData) {\n      return LitHtml.html``;\n    }\n    const {src, width = '100%', height = '100%'} = this.#imageData;\n    return LitHtml.html`\n      <img class=\"markdown-image\" src=${src} alt=${this.#imageTitle} width=${width} height=${height}/>\n    `;\n  }\n\n  #render(): void {\n    if (!this.#imageData) {\n      return;\n    }\n    const {isIcon} = this.#imageData;\n    const imageComponent = isIcon ? this.#getIconComponent() : this.#getImageComponent();\n    LitHtml.render(imageComponent, this.#shadow, {host: this});\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-markdown-image', MarkdownImage);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-markdown-image': MarkdownImage;\n  }\n}\n"],
  "mappings": "AAIA;AACA;AACA;AACA;AAGA;AAYO,mCAA4B,YAAY;AAAA,SAC7B,aAAa,QAAQ;AAAA,YAElB,KAAK,aAAa,EAAC,MAAM;AAAA;AAAA;AAAA,EAI5C,cAAc;AACZ;AAAA;AAAA,EAGF,oBAA0B;AACxB,iBAAa,qBAAqB,CAAC;AAAA;AAAA,MAGjC,KAAK,MAAyB;AAChC,UAAM,EAAC,KAAK,UAAS;AACrB,UAAM,gBAAgB,iBAAiB;AACvC,sBAAkB;AAClB,uBAAmB;AACnB;AAAA;AAAA,sBAG0C;AAC1C,QAAI,CAAC,iBAAiB;AACpB,aAAO,QAAQ;AAAA;AAEjB,UAAM,EAAC,KAAK,OAAO,QAAQ,QAAQ,SAAS,WAAU;AACtD,WAAO,QAAQ;AAAA,SACV,WAAW,KAAK,KAAK,oBACtB,EAAC,UAAU,KAAK,OAAO,OAAO,cAAyC,WAAW,KAAK,KAAK;AAAA;AAAA;AAAA,uBAIrD;AAC3C,QAAI,CAAC,iBAAiB;AACpB,aAAO,QAAQ;AAAA;AAEjB,UAAM,EAAC,KAAK,QAAQ,QAAQ,SAAS,WAAU;AAC/C,WAAO,QAAQ;AAAA,wCACqB,WAAW,0BAA0B,gBAAgB;AAAA;AAAA;AAAA,YAI3E;AACd,QAAI,CAAC,iBAAiB;AACpB;AAAA;AAEF,UAAM,EAAC,WAAU;AACjB,UAAM,iBAAiB,SAAS,2BAA2B;AAC3D,YAAQ,OAAO,gBAAgB,cAAc,EAAC,MAAM;AAAA;AAAA;AAIxD,iBAAiB,eAAe,gBAAgB,2BAA2B;",
  "names": []
}
