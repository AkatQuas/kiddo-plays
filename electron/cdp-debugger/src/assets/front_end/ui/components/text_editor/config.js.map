{
  "version": 3,
  "sources": ["../../../../../../../front_end/ui/components/text_editor/config.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as WindowBoundsService from '../../../services/window_bounds/window_bounds.js';\nimport * as CM from '../../../third_party/codemirror.next/codemirror.next.js';\nimport * as CodeHighlighter from '../code_highlighter/code_highlighter.js';\nimport * as Icon from '../icon_button/icon_button.js';\n\nimport {editorTheme} from './theme.js';\n\nconst LINES_TO_SCAN_FOR_INDENTATION_GUESSING = 1000;\n\nconst UIStrings = {\n  /**\n  *@description Label text for the editor\n  */\n  codeEditor: 'Code editor',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/components/text_editor/config.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst empty: CM.Extension = [];\n\nexport const dynamicSetting = CM.Facet.define<DynamicSetting<unknown>>();\n\n// The code below is used to wire up dynamic settings to editors. When\n// you include the result of calling `instance()` in an editor\n// configuration, the TextEditor class will take care of listening to\n// changes in the setting, and updating the configuration as\n// appropriate.\n\nexport class DynamicSetting<T> {\n  compartment = new CM.Compartment();\n\n  constructor(\n      readonly settingName: string,\n      private readonly getExtension: (value: T) => CM.Extension,\n  ) {\n  }\n\n  settingValue(): T {\n    return Common.Settings.Settings.instance().moduleSetting(this.settingName).get() as T;\n  }\n\n  instance(): CM.Extension {\n    return [\n      this.compartment.of(this.getExtension(this.settingValue())),\n      dynamicSetting.of(this as DynamicSetting<unknown>),\n    ];\n  }\n\n  sync(state: CM.EditorState, value: T): CM.StateEffect<unknown>|null {\n    const cur = this.compartment.get(state);\n    const needed = this.getExtension(value);\n    return cur === needed ? null : this.compartment.reconfigure(needed);\n  }\n\n  static bool(name: string, enabled: CM.Extension, disabled: CM.Extension = empty): DynamicSetting<boolean> {\n    return new DynamicSetting<boolean>(name, val => val ? enabled : disabled);\n  }\n\n  static none: readonly DynamicSetting<unknown>[] = [];\n}\n\nexport const tabMovesFocus = DynamicSetting.bool('textEditorTabMovesFocus', [], CM.keymap.of([{\n  key: 'Tab',\n  run: (view: CM.EditorView): boolean => view.state.doc.length ? CM.indentMore(view) : false,\n  shift: (view: CM.EditorView): boolean => view.state.doc.length ? CM.indentLess(view) : false,\n}]));\n\nexport const autocompletion: CM.Extension = [\n  CM.autocompletion({\n    icons: false,\n    optionClass: (option: CM.Completion): string => option.type === 'secondary' ? 'cm-secondaryCompletion' : '',\n  }),\n  CM.Prec.highest(CM.keymap.of([{key: 'ArrowRight', run: CM.acceptCompletion}])),\n];\n\nexport const sourcesAutocompletion = DynamicSetting.bool('textEditorAutocompletion', autocompletion);\n\nexport const bracketMatching = DynamicSetting.bool('textEditorBracketMatching', CM.bracketMatching());\n\nexport const codeFolding = DynamicSetting.bool('textEditorCodeFolding', [\n  CM.foldGutter({\n    markerDOM(open: boolean): HTMLElement {\n      const iconName = open ? 'triangle-expanded' : 'triangle-collapsed';\n      const icon = new Icon.Icon.Icon();\n      icon.data = {\n        iconName,\n        color: 'var(--color-text-secondary)',\n        width: '12px',\n        height: '12px',\n      };\n      return icon;\n    },\n  }),\n  CM.keymap.of(CM.foldKeymap),\n]);\n\nexport function guessIndent(doc: CM.Text): string {\n  const values: {[indent: string]: number} = Object.create(null);\n  let scanned = 0;\n  for (let cur = doc.iterLines(1, Math.min(doc.lines + 1, LINES_TO_SCAN_FOR_INDENTATION_GUESSING)); !cur.next().done;) {\n    let space = (/^\\s*/.exec(cur.value) as string[])[0];\n    if (space.length === cur.value.length || !space.length || cur.value[space.length] === '*') {\n      continue;\n    }\n    if (space[0] === '\\t') {\n      space = '\\t';\n    } else if (/[^ ]/.test(space)) {\n      continue;\n    }\n    scanned++;\n    values[space] = (values[space] || 0) + 1;\n  }\n  const minOccurrence = scanned * 0.05;\n  const shortest = Object.entries(values).reduce((shortest, [string, count]): string|null => {\n    return count < minOccurrence || shortest && shortest.length < string.length ? shortest : string;\n  }, null as string | null);\n  return shortest ?? Common.Settings.Settings.instance().moduleSetting('textEditorIndent').get();\n}\n\nconst deriveIndentUnit = CM.Prec.highest(CM.indentUnit.compute([], (state: CM.EditorState) => guessIndent(state.doc)));\n\nexport const autoDetectIndent = DynamicSetting.bool('textEditorAutoDetectIndent', deriveIndentUnit);\n\nfunction matcher(decorator: CM.MatchDecorator): CM.Extension {\n  return CM.ViewPlugin.define(\n      view => ({\n        decorations: decorator.createDeco(view),\n        update(u): void {\n          this.decorations = decorator.updateDeco(u, this.decorations);\n        },\n      }),\n      {\n        decorations: v => v.decorations,\n      });\n}\n\nconst WhitespaceDeco = new Map<string, CM.Decoration>();\n\nfunction getWhitespaceDeco(space: string): CM.Decoration {\n  const cached = WhitespaceDeco.get(space);\n  if (cached) {\n    return cached;\n  }\n  const result = CM.Decoration.mark({\n    attributes: space === '\\t' ? {\n      class: 'cm-highlightedTab',\n    } :\n                                 {class: 'cm-highlightedSpaces', 'data-display': '\u00B7'.repeat(space.length)},\n  });\n  WhitespaceDeco.set(space, result);\n  return result;\n}\n\nconst showAllWhitespace = matcher(new CM.MatchDecorator({\n  regexp: /\\t| +/g,\n  decoration: (match: RegExpExecArray): CM.Decoration => getWhitespaceDeco(match[0]),\n  boundary: /\\S/,\n}));\n\nconst showTrailingWhitespace = matcher(new CM.MatchDecorator({\n  regexp: /\\s+$/g,\n  decoration: CM.Decoration.mark({class: 'cm-trailingWhitespace'}),\n  boundary: /\\S/,\n}));\n\nexport const showWhitespace = new DynamicSetting<string>('showWhitespacesInEditor', value => {\n  if (value === 'all') {\n    return showAllWhitespace;\n  }\n  if (value === 'trailing') {\n    return showTrailingWhitespace;\n  }\n  return empty;\n});\n\nexport const allowScrollPastEof = DynamicSetting.bool('allowScrollPastEof', CM.scrollPastEnd());\n\nconst cachedIndentUnit: {[indent: string]: CM.Extension} = Object.create(null);\n\nfunction getIndentUnit(indent: string): CM.Extension {\n  let value = cachedIndentUnit[indent];\n  if (!value) {\n    value = cachedIndentUnit[indent] = CM.indentUnit.of(indent);\n  }\n  return value;\n}\n\nexport const indentUnit = new DynamicSetting<string>('textEditorIndent', getIndentUnit);\n\nexport const domWordWrap = DynamicSetting.bool('domWordWrap', CM.EditorView.lineWrapping);\n\nfunction detectLineSeparator(text: string): CM.Extension {\n  if (/\\r\\n/.test(text) && !/(^|[^\\r])\\n/.test(text)) {\n    return CM.EditorState.lineSeparator.of('\\r\\n');\n  }\n  return [];\n}\n\nconst baseKeymap = CM.keymap.of([\n  {key: 'Tab', run: CM.acceptCompletion},\n  {key: 'End', run: CM.acceptCompletion},\n  {key: 'Ctrl-m', run: CM.cursorMatchingBracket, shift: CM.selectMatchingBracket},\n  {key: 'Mod-/', run: CM.toggleComment},\n  {key: 'Mod-d', run: CM.selectNextOccurrence},\n  {key: 'Alt-ArrowLeft', mac: 'Ctrl-ArrowLeft', run: CM.cursorSubwordBackward, shift: CM.selectSubwordBackward},\n  {key: 'Alt-ArrowRight', mac: 'Ctrl-ArrowRight', run: CM.cursorSubwordForward, shift: CM.selectSubwordForward},\n  ...CM.standardKeymap,\n  ...CM.historyKeymap,\n]);\n\nfunction themeIsDark(): boolean {\n  const setting = Common.Settings.Settings.instance().moduleSetting('uiTheme').get();\n  return setting === 'systemPreferred' ? window.matchMedia('(prefers-color-scheme: dark)').matches : setting === 'dark';\n}\n\nexport const dummyDarkTheme = CM.EditorView.theme({}, {dark: true});\nexport const themeSelection = new CM.Compartment();\n\nexport function theme(): CM.Extension {\n  return [editorTheme, themeIsDark() ? themeSelection.of(dummyDarkTheme) : themeSelection.of([])];\n}\n\nlet sideBarElement: HTMLElement|null = null;\n\nfunction getTooltipSpace(): DOMRect {\n  if (!sideBarElement) {\n    sideBarElement =\n        WindowBoundsService.WindowBoundsService.WindowBoundsServiceImpl.instance().getDevToolsBoundingElement();\n  }\n  return sideBarElement.getBoundingClientRect();\n}\n\nexport function baseConfiguration(text: string|CM.Text): CM.Extension {\n  return [\n    theme(),\n    CM.highlightSpecialChars(),\n    CM.highlightSelectionMatches(),\n    CM.history(),\n    CM.drawSelection(),\n    CM.EditorState.allowMultipleSelections.of(true),\n    CM.indentOnInput(),\n    CM.syntaxHighlighting(CodeHighlighter.CodeHighlighter.highlightStyle),\n    baseKeymap,\n    CM.EditorView.clickAddsSelectionRange.of(mouseEvent => mouseEvent.altKey || mouseEvent.ctrlKey),\n    tabMovesFocus.instance(),\n    bracketMatching.instance(),\n    indentUnit.instance(),\n    CM.Prec.lowest(CM.EditorView.contentAttributes.of({'aria-label': i18nString(UIStrings.codeEditor)})),\n    text instanceof CM.Text ? [] : detectLineSeparator(text),\n    CM.tooltips({\n      tooltipSpace: getTooltipSpace,\n    }),\n  ];\n}\n\nexport const closeBrackets: CM.Extension = [\n  CM.closeBrackets(),\n  CM.keymap.of(CM.closeBracketsKeymap),\n];\n\nclass CompletionHint extends CM.WidgetType {\n  constructor(readonly text: string) {\n    super();\n  }\n\n  eq(other: CompletionHint): boolean {\n    return this.text === other.text;\n  }\n\n  toDOM(): HTMLElement {\n    const span = document.createElement('span');\n    span.className = 'cm-completionHint';\n    span.textContent = this.text;\n    return span;\n  }\n}\n\nexport const showCompletionHint = CM.ViewPlugin.fromClass(class {\n  decorations: CM.DecorationSet = CM.Decoration.none;\n  currentHint: string|null = null;\n\n  update(update: CM.ViewUpdate): void {\n    const top = this.currentHint = this.topCompletion(update.state);\n    if (!top) {\n      this.decorations = CM.Decoration.none;\n    } else {\n      this.decorations = CM.Decoration.set(\n          [CM.Decoration.widget({widget: new CompletionHint(top), side: 1}).range(update.state.selection.main.head)]);\n    }\n  }\n\n  topCompletion(state: CM.EditorState): string|null {\n    const completion = CM.selectedCompletion(state);\n    if (!completion) {\n      return null;\n    }\n    let {label, apply} = completion;\n    if (typeof apply === 'string') {\n      label = apply;\n      apply = undefined;\n    }\n    if (apply || label.length > 100 || label.indexOf('\\n') > -1 || completion.type === 'secondary') {\n      return null;\n    }\n    const pos = state.selection.main.head;\n    const lineBefore = state.doc.lineAt(pos);\n    if (pos !== lineBefore.to) {\n      return null;\n    }\n    const partBefore = (label[0] === '\\'' ? /'(\\\\.|[^'\\\\])*$/ : label[0] === '\"' ? /\"(\\\\.|[^\"\\\\])*$/ : /#?[\\w$]+$/)\n                           .exec(lineBefore.text);\n    if (partBefore && !label.startsWith(partBefore[0])) {\n      return null;\n    }\n    return label.slice(partBefore ? partBefore[0].length : 0);\n  }\n}, {decorations: p => p.decorations});\n\nexport function contentIncludingHint(view: CM.EditorView): string {\n  const plugin = view.plugin(showCompletionHint);\n  let content = view.state.doc.toString();\n  if (plugin && plugin.currentHint) {\n    const {head} = view.state.selection.main;\n    content = content.slice(0, head) + plugin.currentHint + content.slice(head);\n  }\n  return content;\n}\n"],
  "mappings": "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",
  "names": []
}
