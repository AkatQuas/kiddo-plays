{
  "version": 3,
  "sources": ["../../../../../../../front_end/ui/components/text_editor/cursor_tooltip.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as CodeMirror from '../../../third_party/codemirror.next/codemirror.next.js';\n\nexport type ArgumentHintsTooltip = [CodeMirror.StateField<CodeMirror.Tooltip|null>, CodeMirror.ViewPlugin<{}>];\nexport const closeTooltip = CodeMirror.StateEffect.define<null>();\n\nexport function cursorTooltip(\n    source: (state: CodeMirror.EditorState, pos: number) => Promise<(() => CodeMirror.TooltipView)|null>,\n    ): ArgumentHintsTooltip {\n  const openTooltip = CodeMirror.StateEffect.define<() => CodeMirror.TooltipView>();\n\n  const state = CodeMirror.StateField.define<null|CodeMirror.Tooltip>({\n    create() {\n      return null;\n    },\n    update(val, tr) {\n      if (tr.selection) {\n        val = null;\n      }\n      if (val && !tr.changes.empty) {\n        const newPos = tr.changes.mapPos(val.pos, -1, CodeMirror.MapMode.TrackDel);\n        val = newPos === null ? null : {pos: newPos, create: val.create, above: true};\n      }\n      for (const effect of tr.effects) {\n        if (effect.is(openTooltip)) {\n          val = {pos: tr.state.selection.main.from, create: effect.value, above: true};\n        } else if (effect.is(closeTooltip)) {\n          val = null;\n        }\n      }\n      return val;\n    },\n    provide: field => CodeMirror.showTooltip.from(field),\n  });\n\n  const plugin = CodeMirror.ViewPlugin.fromClass(class {\n    pending = -1;\n    updateID = 0;\n\n    update(update: CodeMirror.ViewUpdate): void {\n      this.updateID++;\n      if (update.transactions.some(tr => tr.selection) && update.state.selection.main.empty) {\n        this.#scheduleUpdate(update.view);\n      }\n    }\n\n    #scheduleUpdate(view: CodeMirror.EditorView): void {\n      if (this.pending > -1) {\n        clearTimeout(this.pending);\n      }\n      this.pending = window.setTimeout(() => this.#startUpdate(view), 50) as unknown as number;\n    }\n\n    #startUpdate(view: CodeMirror.EditorView): void {\n      this.pending = -1;\n      const {main} = view.state.selection;\n      if (main.empty) {\n        const {updateID} = this;\n        void source(view.state, main.from).then(tooltip => {\n          if (this.updateID !== updateID) {\n            if (this.pending < 0) {\n              this.#scheduleUpdate(view);\n            }\n          } else if (tooltip) {\n            view.dispatch({effects: openTooltip.of(tooltip)});\n          } else {\n            view.dispatch({effects: closeTooltip.of(null)});\n          }\n        });\n      }\n    }\n  });\n\n  return [state, plugin];\n}\n"],
  "mappings": "AAIA;AAGO,aAAM,eAAe,WAAW,YAAY;AAE5C,8BACH,QACwB;AAC1B,QAAM,cAAc,WAAW,YAAY;AAE3C,QAAM,QAAQ,WAAW,WAAW,OAAgC;AAAA,IAClE,SAAS;AACP,aAAO;AAAA;AAAA,IAET,OAAO,KAAK,IAAI;AACd,UAAI,GAAG,WAAW;AAChB,cAAM;AAAA;AAER,UAAI,OAAO,CAAC,GAAG,QAAQ,OAAO;AAC5B,cAAM,SAAS,GAAG,QAAQ,OAAO,IAAI,KAAK,IAAI,WAAW,QAAQ;AACjE,cAAM,WAAW,OAAO,OAAO,EAAC,KAAK,QAAQ,QAAQ,IAAI,QAAQ,OAAO;AAAA;AAE1E,iBAAW,UAAU,GAAG,SAAS;AAC/B,YAAI,OAAO,GAAG,cAAc;AAC1B,gBAAM,EAAC,KAAK,GAAG,MAAM,UAAU,KAAK,MAAM,QAAQ,OAAO,OAAO,OAAO;AAAA,mBAC9D,OAAO,GAAG,eAAe;AAClC,gBAAM;AAAA;AAAA;AAGV,aAAO;AAAA;AAAA,IAET,SAAS,WAAS,WAAW,YAAY,KAAK;AAAA;AAGhD,QAAM,SAAS,WAAW,WAAW,UAAU,MAAM;AAAA,IACnD,UAAU;AAAA,IACV,WAAW;AAAA,IAEX,OAAO,QAAqC;AAC1C,WAAK;AACL,UAAI,OAAO,aAAa,KAAK,QAAM,GAAG,cAAc,OAAO,MAAM,UAAU,KAAK,OAAO;AACrF,6BAAqB,OAAO;AAAA;AAAA;AAAA,oBAIhB,MAAmC;AACjD,UAAI,KAAK,UAAU,IAAI;AACrB,qBAAa,KAAK;AAAA;AAEpB,WAAK,UAAU,OAAO,WAAW,MAAM,kBAAkB,OAAO;AAAA;AAAA,iBAGrD,MAAmC;AAC9C,WAAK,UAAU;AACf,YAAM,EAAC,SAAQ,KAAK,MAAM;AAC1B,UAAI,KAAK,OAAO;AACd,cAAM,EAAC,aAAY;AACnB,aAAK,OAAO,KAAK,OAAO,KAAK,MAAM,KAAK,aAAW;AACjD,cAAI,KAAK,aAAa,UAAU;AAC9B,gBAAI,KAAK,UAAU,GAAG;AACpB,mCAAqB;AAAA;AAAA,qBAEd,SAAS;AAClB,iBAAK,SAAS,EAAC,SAAS,YAAY,GAAG;AAAA,iBAClC;AACL,iBAAK,SAAS,EAAC,SAAS,aAAa,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAOlD,SAAO,CAAC,OAAO;AAAA;",
  "names": []
}
