{
  "version": 3,
  "sources": ["../../../../../../front_end/ui/legacy/ListControl.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as Platform from '../../core/platform/platform.js';\n\nimport * as ARIAUtils from './ARIAUtils.js';\nimport type {ItemsReplacedEvent, ListModel} from './ListModel.js';\nimport {Events as ListModelEvents} from './ListModel.js';\nimport {measurePreferredSize} from './UIUtils.js';\n\nexport interface ListDelegate<T> {\n  createElementForItem(item: T): Element;\n\n  /**\n   * This method is not called in NonViewport mode.\n   * Return zero to make list measure the item (only works in SameHeight mode).\n   */\n  heightForItem(item: T): number;\n  isItemSelectable(item: T): boolean;\n  selectedItemChanged(from: T|null, to: T|null, fromElement: HTMLElement|null, toElement: HTMLElement|null): void;\n  updateSelectedItemARIA(fromElement: Element|null, toElement: Element|null): boolean;\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum ListMode {\n  NonViewport = 'UI.ListMode.NonViewport',\n  EqualHeightItems = 'UI.ListMode.EqualHeightItems',\n  VariousHeightItems = 'UI.ListMode.VariousHeightItems',\n}\n\nexport class ListControl<T> {\n  element: HTMLDivElement;\n  private topElement: HTMLElement;\n  private bottomElement: HTMLElement;\n  private firstIndex: number;\n  private lastIndex: number;\n  private renderedHeight: number;\n  private topHeight: number;\n  private bottomHeight: number;\n  private model: ListModel<T>;\n  private itemToElement: Map<T, Element>;\n  private selectedIndexInternal: number;\n  private selectedItemInternal: T|null;\n  private delegate: ListDelegate<T>;\n  private readonly mode: ListMode;\n  private fixedHeight: number;\n  private variableOffsets: Int32Array;\n\n  constructor(model: ListModel<T>, delegate: ListDelegate<T>, mode?: ListMode) {\n    this.element = document.createElement('div');\n    this.element.style.overflowY = 'auto';\n    this.topElement = this.element.createChild('div');\n    this.bottomElement = this.element.createChild('div');\n    this.firstIndex = 0;\n    this.lastIndex = 0;\n    this.renderedHeight = 0;\n    this.topHeight = 0;\n    this.bottomHeight = 0;\n\n    this.model = model;\n    this.model.addEventListener(ListModelEvents.ItemsReplaced, this.replacedItemsInRange, this);\n    this.itemToElement = new Map();\n    this.selectedIndexInternal = -1;\n    this.selectedItemInternal = null;\n\n    this.element.tabIndex = -1;\n    this.element.addEventListener('click', this.onClick.bind(this), false);\n    this.element.addEventListener('keydown', this.onKeyDown.bind(this), false);\n    ARIAUtils.markAsListBox(this.element);\n\n    this.delegate = delegate;\n    this.mode = mode || ListMode.EqualHeightItems;\n    this.fixedHeight = 0;\n    this.variableOffsets = new Int32Array(0);\n    this.clearContents();\n\n    if (this.mode !== ListMode.NonViewport) {\n      this.element.addEventListener('scroll', () => {\n        this.updateViewport(this.element.scrollTop, this.element.offsetHeight);\n      }, false);\n    }\n  }\n\n  setModel(model: ListModel<T>): void {\n    this.itemToElement.clear();\n    const length = this.model.length;\n    this.model.removeEventListener(ListModelEvents.ItemsReplaced, this.replacedItemsInRange, this);\n    this.model = model;\n    this.model.addEventListener(ListModelEvents.ItemsReplaced, this.replacedItemsInRange, this);\n    this.invalidateRange(0, length);\n  }\n\n  private replacedItemsInRange(event: Common.EventTarget.EventTargetEvent<ItemsReplacedEvent<T>>): void {\n    const data = event.data;\n    const from = data.index;\n    const to = from + data.removed.length;\n    const keepSelectedIndex = data.keepSelectedIndex;\n\n    const oldSelectedItem = this.selectedItemInternal;\n    const oldSelectedElement = oldSelectedItem ? (this.itemToElement.get(oldSelectedItem) || null) : null;\n    for (let i = 0; i < data.removed.length; i++) {\n      this.itemToElement.delete(data.removed[i]);\n    }\n    this.invalidate(from, to, data.inserted);\n\n    if (this.selectedIndexInternal >= to) {\n      this.selectedIndexInternal += data.inserted - (to - from);\n      this.selectedItemInternal = this.model.at(this.selectedIndexInternal);\n    } else if (this.selectedIndexInternal >= from) {\n      const selectableIndex = keepSelectedIndex ? from : from + data.inserted;\n      let index = this.findFirstSelectable(selectableIndex, +1, false);\n      if (index === -1) {\n        const alternativeSelectableIndex = keepSelectedIndex ? from : from - 1;\n        index = this.findFirstSelectable(alternativeSelectableIndex, -1, false);\n      }\n      this.select(index, oldSelectedItem, oldSelectedElement);\n    }\n  }\n\n  refreshItem(item: T): void {\n    const index = this.model.indexOf(item);\n    if (index === -1) {\n      console.error('Item to refresh is not present');\n      return;\n    }\n    this.refreshItemByIndex(index);\n  }\n\n  refreshItemByIndex(index: number): void {\n    const item = this.model.at(index);\n    this.itemToElement.delete(item);\n    this.invalidateRange(index, index + 1);\n    if (this.selectedIndexInternal !== -1) {\n      this.select(this.selectedIndexInternal, null, null);\n    }\n  }\n\n  refreshAllItems(): void {\n    this.itemToElement.clear();\n    this.invalidateRange(0, this.model.length);\n    if (this.selectedIndexInternal !== -1) {\n      this.select(this.selectedIndexInternal, null, null);\n    }\n  }\n\n  invalidateRange(from: number, to: number): void {\n    this.invalidate(from, to, to - from);\n  }\n\n  viewportResized(): void {\n    if (this.mode === ListMode.NonViewport) {\n      return;\n    }\n    // TODO(dgozman): try to keep visible scrollTop the same.\n    const scrollTop = this.element.scrollTop;\n    const viewportHeight = this.element.offsetHeight;\n    this.clearViewport();\n    this.updateViewport(\n        Platform.NumberUtilities.clamp(scrollTop, 0, this.totalHeight() - viewportHeight), viewportHeight);\n  }\n\n  invalidateItemHeight(): void {\n    if (this.mode !== ListMode.EqualHeightItems) {\n      console.error('Only supported in equal height items mode');\n      return;\n    }\n    this.fixedHeight = 0;\n    if (this.model.length) {\n      this.itemToElement.clear();\n      this.invalidate(0, this.model.length, this.model.length);\n    }\n  }\n\n  itemForNode(node: Node|null): T|null {\n    while (node && node.parentNodeOrShadowHost() !== this.element) {\n      node = node.parentNodeOrShadowHost();\n    }\n    if (!node) {\n      return null;\n    }\n    const element = (node as Element);\n    const index = this.model.findIndex(item => this.itemToElement.get(item) === element);\n    return index !== -1 ? this.model.at(index) : null;\n  }\n\n  scrollItemIntoView(item: T, center?: boolean): void {\n    const index = this.model.indexOf(item);\n    if (index === -1) {\n      console.error('Attempt to scroll onto missing item');\n      return;\n    }\n    this.scrollIntoView(index, center);\n  }\n\n  selectedItem(): T|null {\n    return this.selectedItemInternal;\n  }\n\n  selectedIndex(): number {\n    return this.selectedIndexInternal;\n  }\n\n  selectItem(item: T|null, center?: boolean, dontScroll?: boolean): void {\n    let index = -1;\n    if (item !== null) {\n      index = this.model.indexOf(item);\n      if (index === -1) {\n        console.error('Attempt to select missing item');\n        return;\n      }\n      if (!this.delegate.isItemSelectable(item)) {\n        console.error('Attempt to select non-selectable item');\n        return;\n      }\n    }\n    // Scrolling the item before selection ensures it is in the DOM.\n    if (index !== -1 && !dontScroll) {\n      this.scrollIntoView(index, center);\n    }\n    if (this.selectedIndexInternal !== index) {\n      this.select(index);\n    }\n  }\n\n  selectPreviousItem(canWrap?: boolean, center?: boolean): boolean {\n    if (this.selectedIndexInternal === -1 && !canWrap) {\n      return false;\n    }\n    let index: number = this.selectedIndexInternal === -1 ? this.model.length - 1 : this.selectedIndexInternal - 1;\n    index = this.findFirstSelectable(index, -1, Boolean(canWrap));\n    if (index !== -1) {\n      this.scrollIntoView(index, center);\n      this.select(index);\n      return true;\n    }\n    return false;\n  }\n\n  selectNextItem(canWrap?: boolean, center?: boolean): boolean {\n    if (this.selectedIndexInternal === -1 && !canWrap) {\n      return false;\n    }\n    let index: number = this.selectedIndexInternal === -1 ? 0 : this.selectedIndexInternal + 1;\n    index = this.findFirstSelectable(index, +1, Boolean(canWrap));\n    if (index !== -1) {\n      this.scrollIntoView(index, center);\n      this.select(index);\n      return true;\n    }\n    return false;\n  }\n\n  selectItemPreviousPage(center?: boolean): boolean {\n    if (this.mode === ListMode.NonViewport) {\n      return false;\n    }\n    let index: number = this.selectedIndexInternal === -1 ? this.model.length - 1 : this.selectedIndexInternal;\n    index = this.findPageSelectable(index, -1);\n    if (index !== -1) {\n      this.scrollIntoView(index, center);\n      this.select(index);\n      return true;\n    }\n    return false;\n  }\n\n  selectItemNextPage(center?: boolean): boolean {\n    if (this.mode === ListMode.NonViewport) {\n      return false;\n    }\n    let index: number = this.selectedIndexInternal === -1 ? 0 : this.selectedIndexInternal;\n    index = this.findPageSelectable(index, +1);\n    if (index !== -1) {\n      this.scrollIntoView(index, center);\n      this.select(index);\n      return true;\n    }\n    return false;\n  }\n\n  private scrollIntoView(index: number, center?: boolean): void {\n    if (this.mode === ListMode.NonViewport) {\n      this.elementAtIndex(index).scrollIntoViewIfNeeded(Boolean(center));\n      return;\n    }\n\n    const top = this.offsetAtIndex(index);\n    const bottom = this.offsetAtIndex(index + 1);\n    const viewportHeight = this.element.offsetHeight;\n    if (center) {\n      const scrollTo = (top + bottom) / 2 - viewportHeight / 2;\n      this.updateViewport(\n          Platform.NumberUtilities.clamp(scrollTo, 0, this.totalHeight() - viewportHeight), viewportHeight);\n      return;\n    }\n\n    const scrollTop = this.element.scrollTop;\n    if (top < scrollTop) {\n      this.updateViewport(top, viewportHeight);\n    } else if (bottom > scrollTop + viewportHeight) {\n      this.updateViewport(bottom - viewportHeight, viewportHeight);\n    }\n  }\n\n  private onClick(event: Event): void {\n    const item = this.itemForNode((event.target as Node | null));\n    if (item && this.delegate.isItemSelectable(item)) {\n      this.selectItem(item);\n    }\n  }\n\n  private onKeyDown(ev: Event): void {\n    const event = (ev as KeyboardEvent);\n    let selected = false;\n    switch (event.key) {\n      case 'ArrowUp':\n        selected = this.selectPreviousItem(true, false);\n        break;\n      case 'ArrowDown':\n        selected = this.selectNextItem(true, false);\n        break;\n      case 'PageUp':\n        selected = this.selectItemPreviousPage(false);\n        break;\n      case 'PageDown':\n        selected = this.selectItemNextPage(false);\n        break;\n    }\n    if (selected) {\n      event.consume(true);\n    }\n  }\n\n  private totalHeight(): number {\n    return this.offsetAtIndex(this.model.length);\n  }\n\n  private indexAtOffset(offset: number): number {\n    if (this.mode === ListMode.NonViewport) {\n      throw 'There should be no offset conversions in non-viewport mode';\n    }\n    if (!this.model.length || offset < 0) {\n      return 0;\n    }\n    if (this.mode === ListMode.VariousHeightItems) {\n      return Math.min(\n          this.model.length - 1,\n          Platform.ArrayUtilities.lowerBound(\n              this.variableOffsets, offset, Platform.ArrayUtilities.DEFAULT_COMPARATOR, 0, this.model.length));\n    }\n    if (!this.fixedHeight) {\n      this.measureHeight();\n    }\n    return Math.min(this.model.length - 1, Math.floor(offset / this.fixedHeight));\n  }\n\n  private elementAtIndex(index: number): Element {\n    const item = this.model.at(index);\n    let element = this.itemToElement.get(item);\n    if (!element) {\n      element = this.delegate.createElementForItem(item);\n      this.itemToElement.set(item, element);\n      this.updateElementARIA(element, index);\n    }\n    return element;\n  }\n\n  private refreshARIA(): void {\n    for (let index = this.firstIndex; index <= this.lastIndex; index++) {\n      const item = this.model.at(index);\n      const element = this.itemToElement.get(item);\n      if (element) {\n        this.updateElementARIA(element, index);\n      }\n    }\n  }\n\n  private updateElementARIA(element: Element, index: number): void {\n    if (!ARIAUtils.hasRole(element)) {\n      ARIAUtils.markAsOption(element);\n    }\n    ARIAUtils.setSetSize(element, this.model.length);\n    ARIAUtils.setPositionInSet(element, index + 1);\n  }\n\n  private offsetAtIndex(index: number): number {\n    if (this.mode === ListMode.NonViewport) {\n      throw new Error('There should be no offset conversions in non-viewport mode');\n    }\n    if (!this.model.length) {\n      return 0;\n    }\n    if (this.mode === ListMode.VariousHeightItems) {\n      return this.variableOffsets[index];\n    }\n    if (!this.fixedHeight) {\n      this.measureHeight();\n    }\n    return index * this.fixedHeight;\n  }\n\n  private measureHeight(): void {\n    this.fixedHeight = this.delegate.heightForItem(this.model.at(0));\n    if (!this.fixedHeight) {\n      this.fixedHeight = measurePreferredSize(this.elementAtIndex(0), this.element).height;\n    }\n  }\n\n  private select(index: number, oldItem?: T|null, oldElement?: Element|null): void {\n    if (oldItem === undefined) {\n      oldItem = this.selectedItemInternal;\n    }\n    if (oldElement === undefined) {\n      oldElement = this.itemToElement.get((oldItem as T)) || null;\n    }\n    this.selectedIndexInternal = index;\n    this.selectedItemInternal = index === -1 ? null : this.model.at(index);\n    const newItem = this.selectedItemInternal;\n    const newElement = this.selectedIndexInternal !== -1 ? this.elementAtIndex(index) : null;\n    this.delegate.selectedItemChanged(\n        oldItem, newItem, (oldElement as HTMLElement | null), (newElement as HTMLElement | null));\n    if (!this.delegate.updateSelectedItemARIA((oldElement as Element | null), newElement)) {\n      if (oldElement) {\n        ARIAUtils.setSelected(oldElement, false);\n      }\n      if (newElement) {\n        ARIAUtils.setSelected(newElement, true);\n      }\n      ARIAUtils.setActiveDescendant(this.element, newElement);\n    }\n  }\n\n  private findFirstSelectable(index: number, direction: number, canWrap: boolean): number {\n    const length = this.model.length;\n    if (!length) {\n      return -1;\n    }\n    for (let step = 0; step <= length; step++) {\n      if (index < 0 || index >= length) {\n        if (!canWrap) {\n          return -1;\n        }\n        index = (index + length) % length;\n      }\n      if (this.delegate.isItemSelectable(this.model.at(index))) {\n        return index;\n      }\n      index += direction;\n    }\n    return -1;\n  }\n\n  private findPageSelectable(index: number, direction: number): number {\n    let lastSelectable = -1;\n    const startOffset = this.offsetAtIndex(index);\n    // Compensate for zoom rounding errors with -1.\n    const viewportHeight = this.element.offsetHeight - 1;\n    while (index >= 0 && index < this.model.length) {\n      if (this.delegate.isItemSelectable(this.model.at(index))) {\n        if (Math.abs(this.offsetAtIndex(index) - startOffset) >= viewportHeight) {\n          return index;\n        }\n        lastSelectable = index;\n      }\n      index += direction;\n    }\n    return lastSelectable;\n  }\n\n  private reallocateVariableOffsets(length: number, copyTo: number): void {\n    if (this.variableOffsets.length < length) {\n      const variableOffsets = new Int32Array(Math.max(length, this.variableOffsets.length * 2));\n      variableOffsets.set(this.variableOffsets.slice(0, copyTo), 0);\n      this.variableOffsets = variableOffsets;\n    } else if (this.variableOffsets.length >= 2 * length) {\n      const variableOffsets = new Int32Array(length);\n      variableOffsets.set(this.variableOffsets.slice(0, copyTo), 0);\n      this.variableOffsets = variableOffsets;\n    }\n  }\n\n  private invalidate(from: number, to: number, inserted: number): void {\n    if (this.mode === ListMode.NonViewport) {\n      this.invalidateNonViewportMode(from, to - from, inserted);\n      return;\n    }\n\n    if (this.mode === ListMode.VariousHeightItems) {\n      this.reallocateVariableOffsets(this.model.length + 1, from + 1);\n      for (let i = from + 1; i <= this.model.length; i++) {\n        this.variableOffsets[i] = this.variableOffsets[i - 1] + this.delegate.heightForItem(this.model.at(i - 1));\n      }\n    }\n\n    const viewportHeight = this.element.offsetHeight;\n    const totalHeight = this.totalHeight();\n    const scrollTop = this.element.scrollTop;\n\n    if (this.renderedHeight < viewportHeight || totalHeight < viewportHeight) {\n      this.clearViewport();\n      this.updateViewport(Platform.NumberUtilities.clamp(scrollTop, 0, totalHeight - viewportHeight), viewportHeight);\n      return;\n    }\n\n    const heightDelta = totalHeight - this.renderedHeight;\n    if (to <= this.firstIndex) {\n      const topHeight = this.topHeight + heightDelta;\n      this.topElement.style.height = topHeight + 'px';\n      this.element.scrollTop = scrollTop + heightDelta;\n      this.topHeight = topHeight;\n      this.renderedHeight = totalHeight;\n      const indexDelta = inserted - (to - from);\n      this.firstIndex += indexDelta;\n      this.lastIndex += indexDelta;\n      return;\n    }\n\n    if (from >= this.lastIndex) {\n      const bottomHeight = this.bottomHeight + heightDelta;\n      this.bottomElement.style.height = bottomHeight + 'px';\n      this.bottomHeight = bottomHeight;\n      this.renderedHeight = totalHeight;\n      return;\n    }\n\n    // TODO(dgozman): try to keep visible scrollTop the same\n    // when invalidating after firstIndex but before first visible element.\n    this.clearViewport();\n    this.updateViewport(Platform.NumberUtilities.clamp(scrollTop, 0, totalHeight - viewportHeight), viewportHeight);\n    this.refreshARIA();\n  }\n\n  private invalidateNonViewportMode(start: number, remove: number, add: number): void {\n    let startElement: HTMLElement = this.topElement;\n    for (let index = 0; index < start; index++) {\n      startElement = (startElement.nextElementSibling as HTMLElement);\n    }\n    while (remove--) {\n      (startElement.nextElementSibling as HTMLElement).remove();\n    }\n    while (add--) {\n      this.element.insertBefore(this.elementAtIndex(start + add), startElement.nextElementSibling);\n    }\n  }\n\n  private clearViewport(): void {\n    if (this.mode === ListMode.NonViewport) {\n      console.error('There should be no viewport updates in non-viewport mode');\n      return;\n    }\n    this.firstIndex = 0;\n    this.lastIndex = 0;\n    this.renderedHeight = 0;\n    this.topHeight = 0;\n    this.bottomHeight = 0;\n    this.clearContents();\n  }\n\n  private clearContents(): void {\n    // Note: this method should not force layout. Be careful.\n    this.topElement.style.height = '0';\n    this.bottomElement.style.height = '0';\n    this.element.removeChildren();\n    this.element.appendChild(this.topElement);\n    this.element.appendChild(this.bottomElement);\n  }\n\n  private updateViewport(scrollTop: number, viewportHeight: number): void {\n    // Note: this method should not force layout. Be careful.\n    if (this.mode === ListMode.NonViewport) {\n      console.error('There should be no viewport updates in non-viewport mode');\n      return;\n    }\n    const totalHeight = this.totalHeight();\n    if (!totalHeight) {\n      this.firstIndex = 0;\n      this.lastIndex = 0;\n      this.topHeight = 0;\n      this.bottomHeight = 0;\n      this.renderedHeight = 0;\n      this.topElement.style.height = '0';\n      this.bottomElement.style.height = '0';\n      return;\n    }\n\n    const firstIndex = this.indexAtOffset(scrollTop - viewportHeight);\n    const lastIndex = this.indexAtOffset(scrollTop + 2 * viewportHeight) + 1;\n\n    while (this.firstIndex < Math.min(firstIndex, this.lastIndex)) {\n      this.elementAtIndex(this.firstIndex).remove();\n      this.firstIndex++;\n    }\n    while (this.lastIndex > Math.max(lastIndex, this.firstIndex)) {\n      this.elementAtIndex(this.lastIndex - 1).remove();\n      this.lastIndex--;\n    }\n\n    this.firstIndex = Math.min(this.firstIndex, lastIndex);\n    this.lastIndex = Math.max(this.lastIndex, firstIndex);\n    for (let index = this.firstIndex - 1; index >= firstIndex; index--) {\n      const element = this.elementAtIndex(index);\n      this.element.insertBefore(element, this.topElement.nextSibling);\n    }\n    for (let index = this.lastIndex; index < lastIndex; index++) {\n      const element = this.elementAtIndex(index);\n      this.element.insertBefore(element, this.bottomElement);\n    }\n\n    this.firstIndex = firstIndex;\n    this.lastIndex = lastIndex;\n    this.topHeight = this.offsetAtIndex(firstIndex);\n    this.topElement.style.height = this.topHeight + 'px';\n    this.bottomHeight = totalHeight - this.offsetAtIndex(lastIndex);\n    this.bottomElement.style.height = this.bottomHeight + 'px';\n    this.renderedHeight = totalHeight;\n    this.element.scrollTop = scrollTop;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
