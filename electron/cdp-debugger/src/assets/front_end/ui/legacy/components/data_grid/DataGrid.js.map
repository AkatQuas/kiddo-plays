{
  "version": 3,
  "sources": ["../../../../../../../../front_end/ui/legacy/components/data_grid/DataGrid.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2008 Apple Inc. All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *        notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *        notice, this list of conditions and the following disclaimer in the\n *        documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.         IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable rulesdir/check_license_header */\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as Platform from '../../../../core/platform/platform.js';\nimport * as UI from '../../legacy.js';\n\nimport dataGridStyles from './dataGrid.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Accessible text label for expandible nodes in datagrids\n  */\n  expanded: 'expanded',\n  /**\n  *@description accessible name for expandible nodes in datagrids\n  */\n  collapsed: 'collapsed',\n  /**\n  *@description Accessible text for datagrid\n  *@example {Coverage grid} PH1\n  *@example {expanded} PH2\n  */\n  sRowS: '{PH1} Row {PH2}',\n  /**\n  *@description Number of rows in a grid\n  *@example {1} PH1\n  */\n  rowsS: 'Rows: {PH1}',\n  /**\n  * @description Default Accessible Text for a Datagrid. This text is read to the user by a\n  * screenreader when they navigate to a table structure. The placeholders tell the user something\n  * brief about the table contents i.e. the topic and how much data is in it.\n  * @example {Network} PH1\n  * @example {Rows: 27} PH2\n  */\n  sSUseTheUpAndDownArrowKeysTo:\n      '{PH1} {PH2}, use the up and down arrow keys to navigate and interact with the rows of the table; Use browse mode to read cell by cell.',\n  /**\n  *@description A context menu item in the Data Grid of a data grid\n  */\n  sortByString: 'Sort By',\n  /**\n  *@description A context menu item in data grids to reset the columns to their default weight\n  */\n  resetColumns: 'Reset Columns',\n  /**\n  *@description A context menu item in data grids to list header options.\n  */\n  headerOptions: 'Header Options',\n  /**\n  *@description Text to refresh the page\n  */\n  refresh: 'Refresh',\n  /**\n  *@description A context menu item in the Data Grid of a data grid\n  */\n  addNew: 'Add new',\n  /**\n  *@description A context menu item in the Data Grid of a data grid\n  *@example {pattern} PH1\n  */\n  editS: 'Edit \"{PH1}\"',\n  /**\n  *@description Text to delete something\n  */\n  delete: 'Delete',\n  /**\n  *@description Depth of a node in the datagrid\n  *@example {1} PH1\n  */\n  levelS: 'level {PH1}',\n  /**\n  *@description Text exposed to screen readers on checked items.\n  */\n  checked: 'checked',\n  /**\n   *@description Accessible text indicating an empty row is created.\n   */\n  emptyRowCreated: 'An empty table row has been created. You may double click or use context menu to edit.',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/components/data_grid/DataGrid.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst elementToLongTextMap = new WeakMap<Element, string>();\n\nconst nodeToColumnIdMap = new WeakMap<Node, string>();\n\nconst elementToSortIconMap = new WeakMap<Element, UI.Icon.Icon>();\n\nconst elementToPreferedWidthMap = new WeakMap<Element, number>();\n\nconst elementToPositionMap = new WeakMap<Element, number>();\n\nconst elementToIndexMap = new WeakMap<Element, number>();\n\nexport class DataGridImpl<T> extends Common.ObjectWrapper.ObjectWrapper<EventTypes<T>> {\n  element: HTMLDivElement;\n  displayName: string;\n  private editCallback: ((arg0: any, arg1: string, arg2: any, arg3: any) => void)|undefined;\n  private readonly deleteCallback: ((arg0: any) => void)|undefined;\n  private readonly refreshCallback: (() => void)|undefined;\n  private dataTableHeaders: {\n    [x: string]: Element,\n  };\n  scrollContainerInternal: Element;\n  private dataContainerInternal: Element;\n  private readonly dataTable: Element;\n  protected inline: boolean;\n  private columnsArray: ColumnDescriptor[];\n  columns: {\n    [x: string]: ColumnDescriptor,\n  };\n  visibleColumnsArray: ColumnDescriptor[];\n  cellClass: string|null;\n  private dataTableHeadInternal: HTMLTableSectionElement;\n  private readonly headerRow: Element;\n  private readonly dataTableColumnGroup: Element;\n  dataTableBody: Element;\n  topFillerRow: HTMLElement;\n  private bottomFillerRow: HTMLElement;\n  private editing: boolean;\n  selectedNode: DataGridNode<T>|null;\n  expandNodesWhenArrowing: boolean;\n  indentWidth: number;\n  private resizers: HTMLElement[];\n  private columnWidthsInitialized: boolean;\n  private cornerWidth: number;\n  private resizeMethod: ResizeMethod;\n  private headerContextMenuCallback: ((arg0: UI.ContextMenu.SubMenu) => void)|null;\n  private rowContextMenuCallback: ((arg0: UI.ContextMenu.ContextMenu, arg1: DataGridNode<T>) => void)|null;\n  elementToDataGridNode: WeakMap<Node, DataGridNode<T>>;\n  disclosureColumnId?: string;\n  private sortColumnCell?: Element;\n  private rootNodeInternal?: DataGridNode<T>;\n  private editingNode?: DataGridNode<T>|null;\n  private columnWeightsSetting?: Common.Settings.Setting<any>;\n  creationNode?: CreationDataGridNode<any>;\n  private currentResizer?: EventTarget|null;\n  private dataGridWidget?: any;\n\n  constructor(dataGridParameters: Parameters) {\n    super();\n    const {displayName, columns: columnsArray, editCallback, deleteCallback, refreshCallback} = dataGridParameters;\n    this.element = document.createElement('div');\n    this.element.classList.add('data-grid');\n    this.element.tabIndex = 0;\n    this.element.addEventListener('keydown', this.keyDown.bind(this), false);\n    this.element.addEventListener('contextmenu', this.contextMenu.bind(this), true);\n    this.element.addEventListener('focusin', event => {\n      this.updateGridAccessibleNameOnFocus();\n      event.consume(true);\n    });\n    this.element.addEventListener('focusout', event => {\n      this.updateGridAccessibleName(/* text */ '');\n      event.consume(true);\n    });\n\n    UI.ARIAUtils.markAsApplication(this.element);\n    this.displayName = displayName;\n\n    this.editCallback = editCallback;\n    this.deleteCallback = deleteCallback;\n    this.refreshCallback = refreshCallback;\n\n    this.dataTableHeaders = {};\n\n    this.dataContainerInternal = this.element.createChild('div', 'data-container');\n    this.dataTable = this.dataContainerInternal.createChild('table', 'data');\n    this.scrollContainerInternal = this.dataContainerInternal;\n\n    // FIXME: Add a createCallback which is different from editCallback and has different\n    // behavior when creating a new node.\n    if (editCallback) {\n      this.dataTable.addEventListener('dblclick', this.ondblclick.bind(this), false);\n    }\n    this.dataTable.addEventListener('mousedown', this.mouseDownInDataTable.bind(this));\n    this.dataTable.addEventListener('click', this.clickInDataTable.bind(this), true);\n\n    this.inline = false;\n\n    this.columnsArray = [];\n    this.columns = {};\n    this.visibleColumnsArray = columnsArray;\n\n    columnsArray.forEach(column => this.innerAddColumn(column));\n\n    this.cellClass = null;\n\n    this.dataTableColumnGroup = this.dataTable.createChild('colgroup');\n\n    this.dataTableHeadInternal = this.dataTable.createChild('thead') as HTMLTableSectionElement;\n    this.headerRow = this.dataTableHeadInternal.createChild('tr');\n\n    this.dataTableBody = this.dataTable.createChild('tbody');\n    this.topFillerRow = (this.dataTableBody.createChild('tr', 'data-grid-filler-row revealed') as HTMLElement);\n    UI.ARIAUtils.setHidden(this.topFillerRow, true);\n    this.bottomFillerRow = (this.dataTableBody.createChild('tr', 'data-grid-filler-row revealed') as HTMLElement);\n    UI.ARIAUtils.setHidden(this.bottomFillerRow, true);\n\n    this.setVerticalPadding(0, 0, true);\n    this.refreshHeader();\n\n    this.editing = false;\n    this.selectedNode = null;\n    this.expandNodesWhenArrowing = false;\n    this.setRootNode((new DataGridNode() as DataGridNode<T>));\n\n    this.setHasSelection(false);\n\n    this.indentWidth = 15;\n    this.resizers = [];\n    this.columnWidthsInitialized = false;\n    this.cornerWidth = CornerWidth;\n    this.resizeMethod = ResizeMethod.Nearest;\n\n    this.headerContextMenuCallback = null;\n    this.rowContextMenuCallback = null;\n\n    this.elementToDataGridNode = new WeakMap();\n  }\n\n  private firstSelectableNode(): DataGridNode<T>|null|undefined {\n    let firstSelectableNode: (DataGridNode<T>|undefined) = this.rootNodeInternal;\n    while (firstSelectableNode && !firstSelectableNode.selectable) {\n      firstSelectableNode = firstSelectableNode.traverseNextNode(true) || undefined;\n    }\n    return firstSelectableNode;\n  }\n\n  private lastSelectableNode(): DataGridNode<T>|undefined {\n    let lastSelectableNode: DataGridNode<T>|(DataGridNode<T>| undefined) = this.rootNodeInternal;\n    let iterator: (DataGridNode<T>|undefined) = this.rootNodeInternal;\n    while (iterator) {\n      if (iterator.selectable) {\n        lastSelectableNode = iterator;\n      }\n      iterator = iterator.traverseNextNode(true) || undefined;\n    }\n    return lastSelectableNode;\n  }\n\n  setElementContent(element: Element, value: string): void {\n    const columnId = this.columnIdFromNode(element);\n    if (!columnId) {\n      return;\n    }\n    const column = this.columns[columnId];\n    const parentElement = element.parentElement;\n    let gridNode;\n    if (parentElement) {\n      gridNode = this.elementToDataGridNode.get(parentElement);\n    }\n    if (column.dataType === DataType.Boolean) {\n      DataGridImpl.setElementBoolean(element, Boolean(value), gridNode);\n    } else if (value !== null) {\n      DataGridImpl.setElementText(element, value, Boolean(column.longText), gridNode);\n    }\n  }\n\n  static setElementText(element: Element, newText: string, longText: boolean, gridNode?: DataGridNode<string>): void {\n    if (longText && newText.length > 1000) {\n      element.textContent = Platform.StringUtilities.trimEndWithMaxLength(newText, 1000);\n      UI.Tooltip.Tooltip.install(element as HTMLElement, newText);\n      elementToLongTextMap.set(element, newText);\n    } else {\n      element.textContent = newText;\n      UI.Tooltip.Tooltip.install(element as HTMLElement, '');\n      elementToLongTextMap.delete(element);\n    }\n    if (gridNode) {\n      DataGridImpl.updateNodeAccessibleText(gridNode);\n    }\n  }\n\n  static setElementBoolean(element: Element, value: boolean, gridNode?: DataGridNode<string>): void {\n    element.textContent = value ? '\\u2713' : '';\n    UI.Tooltip.Tooltip.install(element as HTMLElement, '');\n    if (gridNode) {\n      DataGridImpl.updateNodeAccessibleText(gridNode);\n    }\n  }\n\n  static updateNodeAccessibleText(gridNode: DataGridNode<string>): void {\n    let accessibleText = '';\n    let colElement: Element|null = gridNode.elementInternal?.children[0] || null;\n    if (!colElement) {\n      return;\n    }\n\n    while (colElement && !colElement.classList.contains('corner')) {\n      let columnClass = null;\n      for (const cssClass of colElement.classList) {\n        if (cssClass.includes('-column')) {\n          columnClass = cssClass.substring(0, cssClass.indexOf('-column'));\n          break;\n        }\n      }\n      if (columnClass && gridNode.dataGrid) {\n        const colName = gridNode.dataGrid.columns[columnClass];\n        if (colName) {\n          accessibleText += `${colName.title}: ${colElement.textContent}, `;\n        }\n      }\n      colElement = colElement.nextElementSibling;\n    }\n\n    if (accessibleText.length > 0) {\n      // Trim off comma and space at the end.\n      accessibleText = accessibleText.substring(0, accessibleText.length - 2);\n    }\n    gridNode.nodeAccessibleText = accessibleText;\n  }\n\n  setStriped(isStriped: boolean): void {\n    this.element.classList.toggle('striped-data-grid', isStriped);\n  }\n\n  setFocusable(focusable: boolean): void {\n    this.element.tabIndex = focusable ? 0 : -1;\n    if (focusable === false) {\n      UI.ARIAUtils.removeRole(this.element);\n    }\n  }\n\n  setHasSelection(hasSelected: boolean): void {\n    // 'no-selection' class causes datagrid to have a focus-indicator border\n    this.element.classList.toggle('no-selection', !hasSelected);\n  }\n\n  updateGridAccessibleName(text?: string): void {\n    // Update the label with the provided text or the current selected node\n    const accessibleText =\n        (this.selectedNode && this.selectedNode.existingElement()) ? this.selectedNode.nodeAccessibleText : '';\n    if (this.element === Platform.DOMUtilities.deepActiveElement(this.element.ownerDocument)) {\n      // Only alert if the datagrid has focus\n      UI.ARIAUtils.alert(text ? text : accessibleText);\n    }\n  }\n\n  updateGridAccessibleNameOnFocus(): void {\n    // When a grid gets focus\n    // 1) If an item is selected - Read the content of the row\n    let accessibleText;\n    if (this.selectedNode && this.selectedNode.existingElement()) {\n      // TODO(l10n): Don't concatenate strings.\n      let expandText = '';\n      if (this.selectedNode.hasChildren()) {\n        expandText = this.selectedNode.expanded ? i18nString(UIStrings.expanded) : i18nString(UIStrings.collapsed);\n      }\n      const rowHeader = i18nString(UIStrings.sRowS, {PH1: this.displayName, PH2: expandText});\n      accessibleText = `${rowHeader} ${this.selectedNode.nodeAccessibleText}`;\n    } else {\n      // 2) If there is no selected item - Read the name of the grid and give instructions\n      if (!this.rootNodeInternal) {\n        return;\n      }\n      const children = this.enumerateChildren(this.rootNodeInternal, [], 1);\n      const items = i18nString(UIStrings.rowsS, {PH1: children.length});\n      accessibleText = i18nString(UIStrings.sSUseTheUpAndDownArrowKeysTo, {PH1: this.displayName, PH2: items});\n    }\n    UI.ARIAUtils.alert(accessibleText);\n  }\n\n  private innerAddColumn(column: ColumnDescriptor, position?: number): void {\n    column.defaultWeight = column.weight;\n\n    const columnId = column.id;\n    if (columnId in this.columns) {\n      this.innerRemoveColumn(columnId);\n    }\n\n    if (position === undefined) {\n      position = this.columnsArray.length;\n    }\n\n    this.columnsArray.splice(position, 0, column);\n    this.columns[columnId] = column;\n    if (column.disclosure) {\n      this.disclosureColumnId = columnId;\n    }\n\n    const cell = document.createElement('th');\n    cell.className = columnId + '-column';\n    nodeToColumnIdMap.set(cell, columnId);\n    this.dataTableHeaders[columnId] = cell;\n\n    const div = document.createElement('div');\n    if (column.titleDOMFragment) {\n      div.appendChild(column.titleDOMFragment);\n    } else {\n      div.textContent = column.title || null;\n    }\n    cell.appendChild(div);\n\n    if (column.sort) {\n      cell.classList.add(column.sort);\n      this.sortColumnCell = cell;\n    }\n\n    if (column.sortable) {\n      cell.addEventListener('click', this.clickInHeaderCell.bind(this), false);\n      cell.classList.add('sortable');\n      const icon = UI.Icon.Icon.create('', 'sort-order-icon');\n      cell.createChild('div', 'sort-order-icon-container').appendChild(icon);\n      elementToSortIconMap.set(cell, icon);\n    }\n  }\n\n  addColumn(column: ColumnDescriptor, position?: number): void {\n    this.innerAddColumn(column, position);\n  }\n\n  private innerRemoveColumn(columnId: string): void {\n    const column = this.columns[columnId];\n    if (!column) {\n      return;\n    }\n    delete this.columns[columnId];\n    const index = this.columnsArray.findIndex(columnConfig => columnConfig.id === columnId);\n    this.columnsArray.splice(index, 1);\n    const cell = this.dataTableHeaders[columnId];\n    if (cell.parentElement) {\n      cell.parentElement.removeChild(cell);\n    }\n    delete this.dataTableHeaders[columnId];\n  }\n\n  removeColumn(columnId: string): void {\n    this.innerRemoveColumn(columnId);\n  }\n\n  setCellClass(cellClass: string): void {\n    this.cellClass = cellClass;\n  }\n\n  private refreshHeader(): void {\n    this.dataTableColumnGroup.removeChildren();\n    this.headerRow.removeChildren();\n    this.topFillerRow.removeChildren();\n    this.bottomFillerRow.removeChildren();\n\n    for (let i = 0; i < this.visibleColumnsArray.length; ++i) {\n      const column = this.visibleColumnsArray[i];\n      const columnId = column.id;\n      const dataColumn = (this.dataTableColumnGroup.createChild('col') as HTMLElement);\n      if (column.width) {\n        dataColumn.style.width = column.width;\n      }\n      this.headerRow.appendChild(this.dataTableHeaders[columnId]);\n      const topFillerRowCell = (this.topFillerRow.createChild('th', 'top-filler-td') as HTMLTableCellElement);\n      topFillerRowCell.textContent = column.title || null;\n      topFillerRowCell.scope = 'col';\n      const bottomFillerRowChild = this.bottomFillerRow.createChild('td', 'bottom-filler-td');\n      nodeToColumnIdMap.set(bottomFillerRowChild, columnId);\n    }\n\n    const headerCorner = this.headerRow.createChild('th', 'corner');\n    UI.ARIAUtils.setHidden(headerCorner, true);\n\n    const topFillerRowCornerCell = (this.topFillerRow.createChild('th', 'corner') as HTMLTableCellElement);\n    topFillerRowCornerCell.classList.add('top-filler-td');\n    topFillerRowCornerCell.scope = 'col';\n\n    this.bottomFillerRow.createChild('td', 'corner').classList.add('bottom-filler-td');\n\n    this.dataTableColumnGroup.createChild('col', 'corner');\n  }\n\n  protected setVerticalPadding(top: number, bottom: number, isConstructorTime: boolean = false): void {\n    const topPx = top + 'px';\n    const bottomPx = (top || bottom) ? bottom + 'px' : 'auto';\n    if (this.topFillerRow.style.height === topPx && this.bottomFillerRow.style.height === bottomPx) {\n      return;\n    }\n    this.topFillerRow.style.height = topPx;\n    this.bottomFillerRow.style.height = bottomPx;\n    if (!isConstructorTime) {\n      this.dispatchEventToListeners(Events.PaddingChanged);\n    }\n  }\n\n  protected setRootNode(rootNode: DataGridNode<T>): void {\n    if (this.rootNodeInternal) {\n      this.rootNodeInternal.removeChildren();\n      this.rootNodeInternal.dataGrid = null;\n      this.rootNodeInternal.isRoot = false;\n    }\n    this.rootNodeInternal = rootNode;\n    rootNode.isRoot = true;\n    rootNode.setHasChildren(false);\n    rootNode.expandedInternal = true;\n    rootNode.revealedInternal = true;\n    rootNode.selectable = false;\n    rootNode.dataGrid = this;\n  }\n\n  rootNode(): DataGridNode<T> {\n    let rootNode: DataGridNode<T>|(DataGridNode<T>| undefined) = this.rootNodeInternal;\n    if (!rootNode) {\n      rootNode = new DataGridNode();\n      this.setRootNode(rootNode);\n    }\n    return rootNode;\n  }\n\n  private ondblclick(event: Event): void {\n    if (this.editing || this.editingNode) {\n      return;\n    }\n\n    const columnId = this.columnIdFromNode((event.target as Node));\n    if (!columnId || !this.columns[columnId].editable) {\n      return;\n    }\n    this.startEditing((event.target as Node));\n  }\n\n  private startEditingColumnOfDataGridNode(node: DataGridNode<T>, cellIndex: number): void {\n    this.editing = true;\n    this.editingNode = node;\n    this.editingNode.select();\n\n    const editingNodeElement = this.editingNode.element();\n    if (!editingNodeElement) {\n      return;\n    }\n    const element = editingNodeElement.children[cellIndex];\n    const elementLongText = elementToLongTextMap.get(element);\n    if (elementLongText) {\n      element.textContent = elementLongText;\n    }\n    const column = this.visibleColumnsArray[cellIndex];\n    if (column.dataType === DataType.Boolean) {\n      const checkboxLabel = UI.UIUtils.CheckboxLabel.create(undefined, (node.data[column.id] as boolean));\n      UI.ARIAUtils.setAccessibleName(checkboxLabel, column.title || '');\n\n      let hasChanged = false;\n      checkboxLabel.style.height = '100%';\n      const checkboxElement = checkboxLabel.checkboxElement;\n      checkboxElement.classList.add('inside-datagrid');\n      const initialValue = checkboxElement.checked;\n\n      checkboxElement.addEventListener('change', () => {\n        hasChanged = true;\n        this.editingCommitted(element, checkboxElement.checked, initialValue, undefined, 'forward');\n      }, false);\n\n      checkboxElement.addEventListener('keydown', event => {\n        if (event.key === 'Tab') {\n          event.consume(true);\n          hasChanged = true;\n          return this.editingCommitted(\n              element, checkboxElement.checked, initialValue, undefined, event.shiftKey ? 'backward' : 'forward');\n        }\n        if (event.key === ' ') {\n          event.consume(true);\n          checkboxElement.checked = !checkboxElement.checked;\n        } else if (event.key === 'Enter') {\n          event.consume(true);\n          hasChanged = true;\n          this.editingCommitted(element, checkboxElement.checked, initialValue, undefined, 'forward');\n        }\n      }, false);\n\n      checkboxElement.addEventListener('blur', () => {\n        if (hasChanged) {\n          return;\n        }\n        this.editingCommitted(element, checkboxElement.checked, checkboxElement.checked, undefined, 'next');\n      }, false);\n\n      element.innerHTML = '';\n      element.appendChild(checkboxLabel);\n      checkboxElement.focus();\n    } else {\n      UI.InplaceEditor.InplaceEditor.startEditing(element, this.startEditingConfig(element));\n      const componentSelection = element.getComponentSelection();\n      if (componentSelection) {\n        componentSelection.selectAllChildren(element);\n      }\n    }\n  }\n\n  startEditingNextEditableColumnOfDataGridNode(node: DataGridNode<T>, columnIdentifier: string): void {\n    const column = this.columns[columnIdentifier];\n    const cellIndex = this.visibleColumnsArray.indexOf(column);\n    const nextEditableColumn = this.nextEditableColumn(cellIndex);\n    if (nextEditableColumn !== -1) {\n      this.startEditingColumnOfDataGridNode(node, nextEditableColumn);\n    }\n  }\n\n  private startEditing(target: Node): void {\n    const element = (UI.UIUtils.enclosingNodeOrSelfWithNodeName(target, 'td') as Element | null);\n    if (!element) {\n      return;\n    }\n\n    this.editingNode = this.dataGridNodeFromNode(target);\n    if (!this.editingNode) {\n      if (!this.creationNode) {\n        return;\n      }\n      this.editingNode = this.creationNode;\n    }\n\n    // Force editing the 1st column when editing the creation node\n    if (this.editingNode instanceof CreationDataGridNode && this.editingNode.isCreationNode) {\n      this.startEditingColumnOfDataGridNode(this.editingNode, this.nextEditableColumn(-1));\n      return;\n    }\n\n    const columnId = this.columnIdFromNode(target);\n    if (!columnId) {\n      return;\n    }\n    const column = this.columns[columnId];\n    const cellIndex = this.visibleColumnsArray.indexOf(column);\n    if (this.editingNode) {\n      this.startEditingColumnOfDataGridNode(this.editingNode, cellIndex);\n    }\n  }\n\n  renderInline(): void {\n    this.element.classList.add('inline');\n    this.cornerWidth = 0;\n    this.inline = true;\n    this.updateWidths();\n  }\n\n  private startEditingConfig(_element: Element): UI.InplaceEditor.Config<any> {\n    return new UI.InplaceEditor.Config(this.editingCommitted.bind(this), this.editingCancelled.bind(this));\n  }\n\n  private editingCommitted(\n      element: Element, newText: any, oldText: any, context: string|undefined, moveDirection: string): void {\n    const columnId = this.columnIdFromNode(element);\n    if (!columnId) {\n      this.editingCancelled(element);\n      return;\n    }\n    const column = this.columns[columnId];\n    const cellIndex = this.visibleColumnsArray.indexOf(column);\n    if (!this.editingNode) {\n      return;\n    }\n    const valueBeforeEditing =\n        (this.editingNode.data[columnId] === null ? '' : this.editingNode.data[columnId] as string | boolean);\n    const currentEditingNode = this.editingNode;\n\n    function moveToNextIfNeeded(this: DataGridImpl<T>, wasChange: boolean): void {\n      if (!moveDirection) {\n        return;\n      }\n\n      if (moveDirection === 'forward') {\n        const firstEditableColumn = this.nextEditableColumn(-1);\n        const isCreationNode = currentEditingNode instanceof CreationDataGridNode && currentEditingNode.isCreationNode;\n        if (isCreationNode && cellIndex === firstEditableColumn && !wasChange) {\n          return;\n        }\n\n        const nextEditableColumn = this.nextEditableColumn(cellIndex);\n        if (nextEditableColumn !== -1) {\n          this.startEditingColumnOfDataGridNode(currentEditingNode, nextEditableColumn);\n          return;\n        }\n\n        const nextDataGridNode = currentEditingNode.traverseNextNode(true, null, true);\n        if (nextDataGridNode) {\n          this.startEditingColumnOfDataGridNode(nextDataGridNode, firstEditableColumn);\n          return;\n        }\n        if (isCreationNode && wasChange && this.creationNode) {\n          this.addCreationNode(false);\n          this.startEditingColumnOfDataGridNode(this.creationNode, firstEditableColumn);\n          return;\n        }\n        return;\n      }\n\n      if (moveDirection === 'backward') {\n        const prevEditableColumn = this.nextEditableColumn(cellIndex, true);\n        if (prevEditableColumn !== -1) {\n          this.startEditingColumnOfDataGridNode(currentEditingNode, prevEditableColumn);\n          return;\n        }\n\n        const lastEditableColumn = this.nextEditableColumn(this.visibleColumnsArray.length, true);\n        const nextDataGridNode = currentEditingNode.traversePreviousNode(true, true);\n        if (nextDataGridNode) {\n          this.startEditingColumnOfDataGridNode(nextDataGridNode, lastEditableColumn);\n        }\n        return;\n      }\n    }\n\n    // Show trimmed text after editing.\n    this.setElementContent(element, newText);\n\n    if (valueBeforeEditing === newText) {\n      this.editingCancelled(element);\n      moveToNextIfNeeded.call(this, false);\n      return;\n    }\n\n    // Update the text in the datagrid that we typed\n    this.editingNode.data[columnId] = newText;\n    if (!this.editCallback) {\n      return;\n    }\n    // Make the callback - expects an editing node (table row), the column number that is being edited,\n    // the text that used to be there, and the new text.\n    this.editCallback(this.editingNode, columnId, valueBeforeEditing, newText);\n\n    if (this.editingNode instanceof CreationDataGridNode && this.editingNode.isCreationNode) {\n      this.addCreationNode(false);\n    }\n\n    this.editingCancelled(element);\n    moveToNextIfNeeded.call(this, true);\n  }\n\n  private editingCancelled(_element: Element): void {\n    this.editing = false;\n    this.editingNode = null;\n  }\n\n  private nextEditableColumn(cellIndex: number, moveBackward?: boolean): number {\n    const increment = moveBackward ? -1 : 1;\n    const columns = this.visibleColumnsArray;\n    for (let i = cellIndex + increment; (i >= 0) && (i < columns.length); i += increment) {\n      if (columns[i].editable) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  sortColumnId(): string|null {\n    if (!this.sortColumnCell) {\n      return null;\n    }\n    return nodeToColumnIdMap.get(this.sortColumnCell) || null;\n  }\n\n  sortOrder(): string|null {\n    if (!this.sortColumnCell || this.sortColumnCell.classList.contains(Order.Ascending)) {\n      return Order.Ascending;\n    }\n    if (this.sortColumnCell.classList.contains(Order.Descending)) {\n      return Order.Descending;\n    }\n    return null;\n  }\n\n  isSortOrderAscending(): boolean {\n    return !this.sortColumnCell || this.sortColumnCell.classList.contains(Order.Ascending);\n  }\n\n  private autoSizeWidths(widths: number[], minPercent: number, maxPercent?: number): number[] {\n    if (minPercent) {\n      minPercent = Math.min(minPercent, Math.floor(100 / widths.length));\n    }\n    let totalWidth = 0;\n    for (let i = 0; i < widths.length; ++i) {\n      totalWidth += widths[i];\n    }\n    let totalPercentWidth = 0;\n    for (let i = 0; i < widths.length; ++i) {\n      let width = Math.round(100 * widths[i] / totalWidth);\n      if (minPercent && width < minPercent) {\n        width = minPercent;\n      } else if (maxPercent && width > maxPercent) {\n        width = maxPercent;\n      }\n      totalPercentWidth += width;\n      widths[i] = width;\n    }\n    let recoupPercent = totalPercentWidth - 100;\n\n    while (minPercent && recoupPercent > 0) {\n      for (let i = 0; i < widths.length; ++i) {\n        if (widths[i] > minPercent) {\n          --widths[i];\n          --recoupPercent;\n          if (!recoupPercent) {\n            break;\n          }\n        }\n      }\n    }\n\n    while (maxPercent && recoupPercent < 0) {\n      for (let i = 0; i < widths.length; ++i) {\n        if (widths[i] < maxPercent) {\n          ++widths[i];\n          ++recoupPercent;\n          if (!recoupPercent) {\n            break;\n          }\n        }\n      }\n    }\n\n    return widths;\n  }\n\n  /**\n   * The range of |minPercent| and |maxPercent| is [0, 100].\n   */\n  autoSizeColumns(minPercent: number, maxPercent?: number, maxDescentLevel?: number): void {\n    let widths: number[] = [];\n    for (let i = 0; i < this.columnsArray.length; ++i) {\n      widths.push((this.columnsArray[i].title || '').length);\n    }\n\n    maxDescentLevel = maxDescentLevel || 0;\n    if (!this.rootNodeInternal) {\n      return;\n    }\n    const children = this.enumerateChildren(this.rootNodeInternal, [], maxDescentLevel + 1);\n    for (let i = 0; i < children.length; ++i) {\n      const node = children[i];\n      for (let j = 0; j < this.columnsArray.length; ++j) {\n        const text = String(node.data[this.columnsArray[j].id]);\n        if (text.length > widths[j]) {\n          widths[j] = text.length;\n        }\n      }\n    }\n\n    widths = this.autoSizeWidths(widths, minPercent, maxPercent);\n\n    for (let i = 0; i < this.columnsArray.length; ++i) {\n      this.columnsArray[i].weight = widths[i];\n    }\n    this.columnWidthsInitialized = false;\n    this.updateWidths();\n  }\n\n  private enumerateChildren(rootNode: DataGridNode<T>, result: DataGridNode<T>[], maxLevel: number): DataGridNode<T>[] {\n    if (!rootNode.isRoot) {\n      result.push(rootNode);\n    }\n    if (!maxLevel) {\n      return [];\n    }\n    for (let i = 0; i < rootNode.children.length; ++i) {\n      this.enumerateChildren(rootNode.children[i], result, maxLevel - 1);\n    }\n    return result;\n  }\n\n  onResize(): void {\n    this.updateWidths();\n  }\n\n  // Updates the widths of the table, including the positions of the column\n  // resizers.\n  //\n  // IMPORTANT: This function MUST be called once after the element of the\n  // DataGrid is attached to its parent element and every subsequent time the\n  // width of the parent element is changed in order to make it possible to\n  // resize the columns.\n  //\n  // If this function is not called after the DataGrid is attached to its\n  // parent element, then the DataGrid's columns will not be resizable.\n  updateWidths(): void {\n    // Do not attempt to use offsetes if we're not attached to the document tree yet.\n    if (!this.columnWidthsInitialized && this.element.offsetWidth) {\n      // Give all the columns initial widths now so that during a resize,\n      // when the two columns that get resized get a percent value for\n      // their widths, all the other columns already have percent values\n      // for their widths.\n\n      // Use container size to avoid changes of table width caused by change of column widths.\n      const tableWidth = this.element.offsetWidth - this.cornerWidth;\n      const cells = this.dataTableHeadInternal.rows[0].cells;\n      const numColumns = cells.length - 1;  // Do not process corner column.\n      for (let i = 0; i < numColumns; i++) {\n        const column = this.visibleColumnsArray[i];\n        if (!column.weight) {\n          column.weight = 100 * this.getPreferredWidth(i) / tableWidth || 10;\n        }\n      }\n      this.columnWidthsInitialized = true;\n    }\n    this.applyColumnWeights();\n  }\n\n  indexOfVisibleColumn(columnId: string): number {\n    return this.visibleColumnsArray.findIndex(column => column.id === columnId);\n  }\n\n  setName(name: string): void {\n    this.columnWeightsSetting =\n        Common.Settings.Settings.instance().createSetting('dataGrid-' + name + '-columnWeights', {});\n    this.loadColumnWeights();\n  }\n\n  private resetColumnWeights(): void {\n    for (const column of this.columnsArray) {\n      if (!column.defaultWeight) {\n        continue;\n      }\n      column.weight = column.defaultWeight;\n    }\n    this.applyColumnWeights();\n    this.saveColumnWeights();\n  }\n\n  private loadColumnWeights(): void {\n    if (!this.columnWeightsSetting) {\n      return;\n    }\n    const weights = this.columnWeightsSetting.get();\n    for (let i = 0; i < this.columnsArray.length; ++i) {\n      const column = this.columnsArray[i];\n      const weight = weights[column.id];\n      if (weight) {\n        column.weight = weight;\n      }\n    }\n    this.applyColumnWeights();\n  }\n\n  private saveColumnWeights(): void {\n    if (!this.columnWeightsSetting) {\n      return;\n    }\n    const weights: {\n      [x: string]: any,\n    } = {};\n    for (let i = 0; i < this.columnsArray.length; ++i) {\n      const column = this.columnsArray[i];\n      weights[column.id] = column.weight;\n    }\n    this.columnWeightsSetting.set(weights);\n  }\n\n  wasShown(): void {\n    this.loadColumnWeights();\n  }\n\n  willHide(): void {\n  }\n\n  private getPreferredWidth(columnIndex: number): number {\n    return elementToPreferedWidthMap.get(this.dataTableColumnGroup.children[columnIndex]) ||\n        this.dataTableHeadInternal.rows[0].cells[columnIndex].offsetWidth;\n  }\n\n  private applyColumnWeights(): void {\n    let tableWidth = this.element.offsetWidth - this.cornerWidth;\n    if (tableWidth <= 0) {\n      return;\n    }\n\n    let sumOfWeights = 0.0;\n    const fixedColumnWidths = [];\n    for (let i = 0; i < this.visibleColumnsArray.length; ++i) {\n      const column = this.visibleColumnsArray[i];\n      if (column.fixedWidth) {\n        const width = this.getPreferredWidth(i);\n        fixedColumnWidths[i] = width;\n        tableWidth -= width;\n      } else {\n        sumOfWeights += (this.visibleColumnsArray[i].weight || 0);\n      }\n    }\n    let sum = 0;\n    let lastOffset = 0;\n    const minColumnWidth = 14;  // px\n\n    for (let i = 0; i < this.visibleColumnsArray.length; ++i) {\n      const column = this.visibleColumnsArray[i];\n      let width;\n      if (column.fixedWidth) {\n        width = fixedColumnWidths[i];\n      } else {\n        sum += (column.weight || 0);\n        const offset = (sum * tableWidth / sumOfWeights) | 0;\n        width = Math.max(offset - lastOffset, minColumnWidth);\n        lastOffset = offset;\n      }\n      this.setPreferredWidth(i, width);\n    }\n\n    this.positionResizers();\n  }\n\n  setColumnsVisiblity(columnsVisibility: Set<string>): void {\n    this.visibleColumnsArray = [];\n    for (const column of this.columnsArray) {\n      if (columnsVisibility.has(column.id)) {\n        this.visibleColumnsArray.push(column);\n      }\n    }\n    this.refreshHeader();\n    this.applyColumnWeights();\n    const nodes = this.enumerateChildren(this.rootNode(), [], -1);\n    for (const node of nodes) {\n      node.refresh();\n    }\n  }\n\n  get scrollContainer(): HTMLElement {\n    return this.scrollContainerInternal as HTMLElement;\n  }\n\n  private positionResizers(): void {\n    const headerTableColumns = this.dataTableColumnGroup.children;\n    const numColumns = headerTableColumns.length - 1;  // Do not process corner column.\n    const left: number[] = [];\n    const resizers = this.resizers;\n\n    while (resizers.length > numColumns - 1) {\n      const resizer = resizers.pop();\n      if (resizer) {\n        resizer.remove();\n      }\n    }\n\n    for (let i = 0; i < numColumns - 1; i++) {\n      // Get the width of the cell in the first (and only) row of the\n      // header table in order to determine the width of the column, since\n      // it is not possible to query a column for its width.\n      left[i] = (left[i - 1] || 0) + this.dataTableHeadInternal.rows[0].cells[i].offsetWidth;\n    }\n\n    // Make n - 1 resizers for n columns.\n    for (let i = 0; i < numColumns - 1; i++) {\n      let resizer: HTMLDivElement|HTMLElement = resizers[i];\n      if (!resizer) {\n        // This is the first call to updateWidth, so the resizers need\n        // to be created.\n        resizer = document.createElement('div');\n        elementToIndexMap.set(resizer, i);\n        resizer.classList.add('data-grid-resizer');\n        // This resizer is associated with the column to its right.\n        UI.UIUtils.installDragHandle(\n            resizer, this.startResizerDragging.bind(this), this.resizerDragging.bind(this),\n            this.endResizerDragging.bind(this), 'col-resize');\n        this.element.appendChild(resizer);\n        resizers.push((resizer as HTMLElement));\n      }\n      if (elementToPositionMap.get(resizer) !== left[i]) {\n        elementToPositionMap.set(resizer, left[i]);\n        resizer.style.left = left[i] + 'px';\n      }\n    }\n  }\n\n  addCreationNode(hasChildren?: boolean): void {\n    if (this.creationNode) {\n      this.creationNode.makeNormal();\n    }\n    const emptyData: {\n      [x: string]: any,\n    } = {};\n    for (const column in this.columns) {\n      emptyData[column] = null;\n    }\n    this.creationNode = new CreationDataGridNode(emptyData, hasChildren);\n    UI.ARIAUtils.alert(i18nString(UIStrings.emptyRowCreated));\n    this.rootNode().appendChild(this.creationNode);\n  }\n\n  private keyDown(event: Event): void {\n    if (!(event instanceof KeyboardEvent)) {\n      return;\n    }\n    if (event.shiftKey || event.metaKey || event.ctrlKey || this.editing || UI.UIUtils.isEditing()) {\n      return;\n    }\n\n    let handled = false;\n    let nextSelectedNode;\n    if (!this.selectedNode) {\n      // Select the first or last node based on the arrow key direction\n      if (event.key === 'ArrowUp' && !event.altKey) {\n        nextSelectedNode = this.lastSelectableNode();\n      } else if (event.key === 'ArrowDown' && !event.altKey) {\n        nextSelectedNode = this.firstSelectableNode();\n      }\n      handled = nextSelectedNode ? true : false;\n    } else if (event.key === 'ArrowUp' && !event.altKey) {\n      nextSelectedNode = this.selectedNode.traversePreviousNode(true);\n      while (nextSelectedNode && !nextSelectedNode.selectable) {\n        nextSelectedNode = nextSelectedNode.traversePreviousNode(true);\n      }\n      handled = nextSelectedNode ? true : false;\n    } else if (event.key === 'ArrowDown' && !event.altKey) {\n      nextSelectedNode = this.selectedNode.traverseNextNode(true);\n      while (nextSelectedNode && !nextSelectedNode.selectable) {\n        nextSelectedNode = nextSelectedNode.traverseNextNode(true);\n      }\n      handled = nextSelectedNode ? true : false;\n    } else if (event.key === 'ArrowLeft') {\n      if (this.selectedNode.expanded) {\n        if (event.altKey) {\n          this.selectedNode.collapseRecursively();\n        } else {\n          this.selectedNode.collapse();\n        }\n        handled = true;\n      } else if (this.selectedNode.parent && !this.selectedNode.parent.isRoot) {\n        handled = true;\n        if (this.selectedNode.parent.selectable) {\n          nextSelectedNode = this.selectedNode.parent;\n          handled = nextSelectedNode ? true : false;\n        } else if (this.selectedNode.parent) {\n          this.selectedNode.parent.collapse();\n        }\n      }\n    } else if (event.key === 'ArrowRight') {\n      if (!this.selectedNode.revealed) {\n        this.selectedNode.reveal();\n        handled = true;\n      } else if (this.selectedNode.hasChildren()) {\n        handled = true;\n        if (this.selectedNode.expanded) {\n          nextSelectedNode = this.selectedNode.children[0];\n          handled = nextSelectedNode ? true : false;\n        } else {\n          if (event.altKey) {\n            this.selectedNode.expandRecursively();\n          } else {\n            this.selectedNode.expand();\n          }\n        }\n      }\n    } else if (event.keyCode === 8 || event.keyCode === 46) {\n      if (this.deleteCallback) {\n        handled = true;\n        this.deleteCallback(this.selectedNode);\n      }\n    } else if (event.key === 'Enter') {\n      if (this.editCallback) {\n        handled = true;\n        const selectedNodeElement = this.selectedNode.element();\n        if (!selectedNodeElement) {\n          return;\n        }\n        this.startEditing(selectedNodeElement.children[this.nextEditableColumn(-1)]);\n      } else {\n        this.dispatchEventToListeners(Events.OpenedNode, this.selectedNode);\n      }\n    }\n\n    if (nextSelectedNode) {\n      nextSelectedNode.reveal();\n      nextSelectedNode.select();\n    }\n\n    if (handled && document.activeElement !== this.element) {\n      // crbug.com/1005449, crbug.com/1329956\n      // navigational or delete keys pressed but current DataGrid panel has lost focus;\n      // re-focus to ensure subsequent keydowns can be registered within this DataGrid\n      this.element.focus();\n    }\n\n    if (handled) {\n      event.consume(true);\n    }\n  }\n\n  updateSelectionBeforeRemoval(root: DataGridNode<T>|null, _onlyAffectsSubtree: boolean): void {\n    let ancestor: (DataGridNode<T>|null) = this.selectedNode;\n    while (ancestor && ancestor !== root) {\n      ancestor = ancestor.parent;\n    }\n    // Selection is not in the subtree being deleted.\n    if (!ancestor) {\n      return;\n    }\n\n    let nextSelectedNode;\n    // Skip subtree being deleted when looking for the next selectable node.\n    for (ancestor = root; ancestor && !ancestor.nextSibling; ancestor = ancestor.parent) {\n    }\n    if (ancestor) {\n      nextSelectedNode = ancestor.nextSibling;\n    }\n    while (nextSelectedNode && !nextSelectedNode.selectable) {\n      nextSelectedNode = nextSelectedNode.traverseNextNode(true);\n    }\n    const isCreationNode = nextSelectedNode instanceof CreationDataGridNode && nextSelectedNode.isCreationNode;\n    if (!nextSelectedNode || isCreationNode) {\n      if (!root) {\n        return;\n      }\n      nextSelectedNode = root.traversePreviousNode(true);\n      while (nextSelectedNode && !nextSelectedNode.selectable) {\n        nextSelectedNode = nextSelectedNode.traversePreviousNode(true);\n      }\n    }\n    if (nextSelectedNode) {\n      nextSelectedNode.reveal();\n      nextSelectedNode.select();\n    } else if (this.selectedNode) {\n      this.selectedNode.deselect();\n    }\n  }\n\n  dataGridNodeFromNode(target: Node): DataGridNode<T>|null {\n    const rowElement = UI.UIUtils.enclosingNodeOrSelfWithNodeName(target, 'tr');\n    return (rowElement && this.elementToDataGridNode.get(rowElement)) || null;\n  }\n\n  columnIdFromNode(target: Node): string|null {\n    const cellElement = UI.UIUtils.enclosingNodeOrSelfWithNodeName(target, 'td');\n    return (cellElement && nodeToColumnIdMap.get(cellElement)) || null;\n  }\n\n  private clickInHeaderCell(event: Event): void {\n    const cell = UI.UIUtils.enclosingNodeOrSelfWithNodeName((event.target as Node), 'th');\n    if (!cell) {\n      return;\n    }\n    this.sortByColumnHeaderCell((cell as HTMLElement));\n  }\n\n  private sortByColumnHeaderCell(cell: Element): void {\n    if (!nodeToColumnIdMap.has(cell) || !cell.classList.contains('sortable')) {\n      return;\n    }\n\n    let sortOrder = Order.Ascending;\n    if ((cell === this.sortColumnCell) && this.isSortOrderAscending()) {\n      sortOrder = Order.Descending;\n    }\n\n    if (this.sortColumnCell) {\n      this.sortColumnCell.classList.remove(Order.Ascending, Order.Descending);\n    }\n    this.sortColumnCell = cell;\n\n    cell.classList.add(sortOrder);\n    const icon = elementToSortIconMap.get(cell);\n    if (!icon) {\n      return;\n    }\n    icon.setIconType(sortOrder === Order.Ascending ? 'smallicon-triangle-up' : 'smallicon-triangle-down');\n\n    this.dispatchEventToListeners(Events.SortingChanged);\n  }\n\n  markColumnAsSortedBy(columnId: string, sortOrder: Order): void {\n    if (this.sortColumnCell) {\n      this.sortColumnCell.classList.remove(Order.Ascending, Order.Descending);\n    }\n    this.sortColumnCell = this.dataTableHeaders[columnId];\n    this.sortColumnCell.classList.add(sortOrder);\n  }\n\n  headerTableHeader(columnId: string): Element {\n    return this.dataTableHeaders[columnId];\n  }\n\n  private mouseDownInDataTable(event: Event): void {\n    const target = (event.target as Node);\n    const gridNode = this.dataGridNodeFromNode(target);\n    if (!gridNode || !gridNode.selectable || gridNode.isEventWithinDisclosureTriangle((event as MouseEvent))) {\n      return;\n    }\n\n    const columnId = this.columnIdFromNode(target);\n    if (columnId && this.columns[columnId].nonSelectable) {\n      return;\n    }\n\n    if ((event as MouseEvent).metaKey) {\n      if (gridNode.selected) {\n        gridNode.deselect();\n      } else {\n        gridNode.select();\n      }\n    } else {\n      gridNode.select();\n      this.dispatchEventToListeners(Events.OpenedNode, gridNode);\n    }\n  }\n\n  setHeaderContextMenuCallback(callback: ((arg0: UI.ContextMenu.SubMenu) => void)|null): void {\n    this.headerContextMenuCallback = callback;\n  }\n\n  setRowContextMenuCallback(callback: ((arg0: UI.ContextMenu.ContextMenu, arg1: DataGridNode<T>) => void)|null): void {\n    this.rowContextMenuCallback = callback;\n  }\n\n  private contextMenu(event: Event): void {\n    if (!(event instanceof MouseEvent)) {\n      return;\n    }\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    const target = (event.target as Node);\n\n    const sortableVisibleColumns = this.visibleColumnsArray.filter(column => {\n      return (column.sortable && column.title);\n    });\n\n    const sortableHiddenColumns = this.columnsArray.filter(\n        column => sortableVisibleColumns.indexOf(column) === -1 && column.allowInSortByEvenWhenHidden);\n\n    const sortableColumns = [...sortableVisibleColumns, ...sortableHiddenColumns];\n    if (sortableColumns.length > 0) {\n      const sortMenu = contextMenu.defaultSection().appendSubMenuItem(i18nString(UIStrings.sortByString));\n      for (const column of sortableColumns) {\n        const headerCell = this.dataTableHeaders[column.id];\n        sortMenu.defaultSection().appendItem(\n            (column.title as string), this.sortByColumnHeaderCell.bind(this, headerCell));\n      }\n    }\n\n    if (target.isSelfOrDescendant(this.dataTableHeadInternal)) {\n      if (this.headerContextMenuCallback) {\n        this.headerContextMenuCallback(contextMenu);\n      }\n      contextMenu.defaultSection().appendItem(i18nString(UIStrings.resetColumns), this.resetColumnWeights.bind(this));\n      void contextMenu.show();\n      return;\n    }\n\n    // Add header context menu to a subsection available from the body\n    const headerSubMenu = contextMenu.defaultSection().appendSubMenuItem(i18nString(UIStrings.headerOptions));\n    if (this.headerContextMenuCallback) {\n      this.headerContextMenuCallback(headerSubMenu);\n    }\n    headerSubMenu.defaultSection().appendItem(i18nString(UIStrings.resetColumns), this.resetColumnWeights.bind(this));\n\n    const isContextMenuKey = (event.button === 0);\n    const gridNode = isContextMenuKey ? this.selectedNode : this.dataGridNodeFromNode(target);\n    const selectedNodeElement = this.selectedNode && this.selectedNode.existingElement();\n    if (isContextMenuKey && selectedNodeElement) {\n      const boundingRowRect = selectedNodeElement.getBoundingClientRect();\n      if (boundingRowRect) {\n        const x = (boundingRowRect.right + boundingRowRect.left) / 2;\n        const y = (boundingRowRect.bottom + boundingRowRect.top) / 2;\n        contextMenu.setX(x);\n        contextMenu.setY(y);\n      }\n    }\n    if (this.refreshCallback && (!gridNode || gridNode !== this.creationNode)) {\n      contextMenu.defaultSection().appendItem(i18nString(UIStrings.refresh), this.refreshCallback.bind(this));\n    }\n\n    if (gridNode && gridNode.selectable && !gridNode.isEventWithinDisclosureTriangle(event)) {\n      if (this.editCallback) {\n        if (gridNode === this.creationNode) {\n          const firstEditColumnIndex = this.nextEditableColumn(-1);\n          const tableCellElement = gridNode.element().children[firstEditColumnIndex];\n          contextMenu.defaultSection().appendItem(\n              i18nString(UIStrings.addNew), this.startEditing.bind(this, tableCellElement));\n        } else if (isContextMenuKey) {\n          const firstEditColumnIndex = this.nextEditableColumn(-1);\n          if (firstEditColumnIndex > -1) {\n            const firstColumn = this.visibleColumnsArray[firstEditColumnIndex];\n            if (firstColumn && firstColumn.editable) {\n              contextMenu.defaultSection().appendItem(\n                  i18nString(UIStrings.editS, {PH1: String(firstColumn.title)}),\n                  this.startEditingColumnOfDataGridNode.bind(this, gridNode, firstEditColumnIndex));\n            }\n          }\n        } else {\n          const columnId = this.columnIdFromNode(target);\n          if (columnId && this.columns[columnId].editable) {\n            contextMenu.defaultSection().appendItem(\n                i18nString(UIStrings.editS, {PH1: String(this.columns[columnId].title)}),\n                this.startEditing.bind(this, target));\n          }\n        }\n      }\n      if (this.deleteCallback && gridNode !== this.creationNode) {\n        contextMenu.defaultSection().appendItem(i18nString(UIStrings.delete), this.deleteCallback.bind(this, gridNode));\n      }\n      if (this.rowContextMenuCallback) {\n        this.rowContextMenuCallback(contextMenu, gridNode);\n      }\n    }\n\n    void contextMenu.show();\n  }\n\n  private clickInDataTable(event: Event): void {\n    const gridNode = this.dataGridNodeFromNode((event.target as Node));\n    if (!gridNode || !gridNode.hasChildren() || !gridNode.isEventWithinDisclosureTriangle((event as MouseEvent))) {\n      return;\n    }\n\n    if (gridNode.expanded) {\n      if ((event as MouseEvent).altKey) {\n        gridNode.collapseRecursively();\n      } else {\n        gridNode.collapse();\n      }\n    } else {\n      if ((event as MouseEvent).altKey) {\n        gridNode.expandRecursively();\n      } else {\n        gridNode.expand();\n      }\n    }\n  }\n\n  setResizeMethod(method: ResizeMethod): void {\n    this.resizeMethod = method;\n  }\n\n  private startResizerDragging(event: Event): boolean {\n    this.currentResizer = event.target;\n    return true;\n  }\n\n  private endResizerDragging(): void {\n    this.currentResizer = null;\n    this.saveColumnWeights();\n  }\n\n  private resizerDragging(event: MouseEvent): void {\n    const resizer = (this.currentResizer as HTMLElement);\n    if (!resizer) {\n      return;\n    }\n\n    // Constrain the dragpoint to be within the containing div of the\n    // datagrid.\n    let dragPoint: number = event.clientX - this.element.totalOffsetLeft();\n    let leftEdgeOfPreviousColumn = 0;\n    // Constrain the dragpoint to be within the space made up by the\n    // column directly to the left and the column directly to the right.\n    let leftCellIndex = elementToIndexMap.get(resizer);\n    if (leftCellIndex === undefined) {\n      return;\n    }\n    let rightCellIndex: number = leftCellIndex + 1;\n    for (let i = 0; i < leftCellIndex; i++) {\n      leftEdgeOfPreviousColumn += this.getPreferredWidth(i);\n    }\n\n    // Differences for other resize methods\n    if (this.resizeMethod === ResizeMethod.Last) {\n      rightCellIndex = this.resizers.length;\n    } else if (this.resizeMethod === ResizeMethod.First) {\n      leftEdgeOfPreviousColumn += this.getPreferredWidth(leftCellIndex) - this.getPreferredWidth(0);\n      leftCellIndex = 0;\n    }\n\n    const rightEdgeOfNextColumn =\n        leftEdgeOfPreviousColumn + this.getPreferredWidth(leftCellIndex) + this.getPreferredWidth(rightCellIndex);\n\n    // Give each column some padding so that they don't disappear.\n    const leftMinimum = leftEdgeOfPreviousColumn + ColumnResizePadding;\n    const rightMaximum = rightEdgeOfNextColumn - ColumnResizePadding;\n    if (leftMinimum > rightMaximum) {\n      return;\n    }\n\n    dragPoint = Platform.NumberUtilities.clamp(dragPoint, leftMinimum, rightMaximum);\n\n    const position = (dragPoint - CenterResizerOverBorderAdjustment);\n    elementToPositionMap.set(resizer, position);\n    resizer.style.left = position + 'px';\n\n    this.setPreferredWidth(leftCellIndex, dragPoint - leftEdgeOfPreviousColumn);\n    this.setPreferredWidth(rightCellIndex, rightEdgeOfNextColumn - dragPoint);\n\n    const leftColumn = this.visibleColumnsArray[leftCellIndex];\n    const rightColumn = this.visibleColumnsArray[rightCellIndex];\n    if (leftColumn.weight && rightColumn.weight) {\n      const sumOfWeights = leftColumn.weight + rightColumn.weight;\n      const delta = rightEdgeOfNextColumn - leftEdgeOfPreviousColumn;\n      leftColumn.weight = (dragPoint - leftEdgeOfPreviousColumn) * sumOfWeights / delta;\n      rightColumn.weight = (rightEdgeOfNextColumn - dragPoint) * sumOfWeights / delta;\n    }\n\n    this.positionResizers();\n    this.updateWidths();\n    event.preventDefault();\n  }\n\n  private setPreferredWidth(columnIndex: number, width: number): void {\n    const dataTableChildElement = (this.dataTableColumnGroup.children[columnIndex] as HTMLElement);\n    elementToPreferedWidthMap.set(dataTableChildElement, width);\n    dataTableChildElement.style.width = width + 'px';\n  }\n\n  columnOffset(columnId: string): number {\n    if (!this.element.offsetWidth) {\n      return 0;\n    }\n    for (let i = 1; i < this.visibleColumnsArray.length; ++i) {\n      if (columnId === this.visibleColumnsArray[i].id) {\n        if (this.resizers[i - 1]) {\n          return elementToPositionMap.get(this.resizers[i - 1]) || 0;\n        }\n      }\n    }\n    return 0;\n  }\n\n  asWidget(): DataGridWidget<T> {\n    if (!this.dataGridWidget) {\n      this.dataGridWidget = new DataGridWidget(this);\n    }\n    return this.dataGridWidget;\n  }\n\n  topFillerRowElement(): HTMLElement {\n    return this.topFillerRow;\n  }\n\n  // Note on the following methods:\n  // The header row is a child of the scrollable container, and uses position: sticky\n  // so it can visually obscure other elements below it in the grid. We need to manually\n  // subtract the header's height when calculating the actual client area in which\n  // data rows are visible. However, if a caller has set a different scroll container\n  // then we report 0 height and the caller is expected to ensure their chosen scroll\n  // container's height matches the visible scrollable data area as seen by the user.\n\n  protected headerHeightInScroller(): number {\n    return this.scrollContainer === this.dataContainerInternal ? this.headerHeight() : 0;\n  }\n\n  protected headerHeight(): number {\n    return this.dataTableHeadInternal.offsetHeight;\n  }\n\n  revealNode(element: HTMLElement): void {\n    element.scrollIntoViewIfNeeded(false);\n    // The header row is a child of the scrollable container, and uses position: sticky\n    // so scrollIntoViewIfNeeded may place the element behind it. If the element is\n    // obscured by the header, adjust the scrollTop so that the element is fully revealed.\n    if (element.offsetTop - this.scrollContainer.scrollTop < this.headerHeight()) {\n      this.scrollContainer.scrollTop = element.offsetTop - this.headerHeight();\n    }\n  }\n}\n\n// Keep in sync with .data-grid col.corner style rule.\nexport const CornerWidth = 14;\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  SelectedNode = 'SelectedNode',\n  DeselectedNode = 'DeselectedNode',\n  OpenedNode = 'OpenedNode',\n  SortingChanged = 'SortingChanged',\n  PaddingChanged = 'PaddingChanged',\n}\n\nexport type EventTypes<T> = {\n  [Events.SelectedNode]: DataGridNode<T>,\n  [Events.DeselectedNode]: void,\n  [Events.OpenedNode]: DataGridNode<T>,\n  [Events.SortingChanged]: void,\n  [Events.PaddingChanged]: void,\n};\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Order {\n  Ascending = 'sort-ascending',\n  Descending = 'sort-descending',\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Align {\n  Center = 'center',\n  Right = 'right',\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum DataType {\n  String = 'String',\n  Boolean = 'Boolean',\n}\n\nexport const ColumnResizePadding = 24;\nexport const CenterResizerOverBorderAdjustment = 3;\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum ResizeMethod {\n  Nearest = 'nearest',\n  First = 'first',\n  Last = 'last',\n}\n\nexport type DataGridData = {\n  [key: string]: any,\n};\n\nexport class DataGridNode<T> {\n  elementInternal: Element|null;\n  expandedInternal: boolean;\n  private selectedInternal: boolean;\n  private dirty: boolean;\n  private inactive: boolean;\n  key!: string;\n  private depthInternal!: number|undefined;\n  revealedInternal!: boolean|undefined;\n  protected attachedInternal: boolean;\n  private savedPosition: {\n    parent: DataGridNode<T>,\n    index: number,\n  }|null;\n  private shouldRefreshChildrenInternal: boolean;\n  private dataInternal: DataGridData;\n  private hasChildrenInternal: boolean;\n  children: DataGridNode<T>[];\n  dataGrid: DataGridImpl<T>|null;\n  parent: DataGridNode<T>|null;\n  previousSibling: DataGridNode<T>|null;\n  nextSibling: DataGridNode<T>|null;\n  disclosureToggleWidth: number;\n  selectable: boolean;\n  isRoot: boolean;\n  nodeAccessibleText: string;\n  cellAccessibleTextMap: Map<string, string>;\n  isCreationNode: boolean;\n\n  constructor(data?: DataGridData|null, hasChildren?: boolean) {\n    this.elementInternal = null;\n    this.expandedInternal = false;\n    this.selectedInternal = false;\n    this.dirty = false;\n    this.inactive = false;\n    this.attachedInternal = false;\n    this.savedPosition = null;\n    this.shouldRefreshChildrenInternal = true;\n    this.dataInternal = data || {};\n    this.hasChildrenInternal = hasChildren || false;\n    this.children = [];\n    this.dataGrid = null;\n    this.parent = null;\n    this.previousSibling = null;\n    this.nextSibling = null;\n    this.disclosureToggleWidth = 10;\n\n    this.selectable = true;\n\n    this.isRoot = false;\n\n    this.nodeAccessibleText = '';\n    this.cellAccessibleTextMap = new Map();\n    this.isCreationNode = false;\n  }\n\n  element(): Element {\n    if (!this.elementInternal) {\n      const element = this.createElement();\n      this.createCells(element);\n    }\n    return this.elementInternal as Element;\n  }\n\n  protected createElement(): Element {\n    this.elementInternal = document.createElement('tr');\n    this.elementInternal.classList.add('data-grid-data-grid-node');\n    if (this.dataGrid) {\n      this.dataGrid.elementToDataGridNode.set(this.elementInternal, this);\n    }\n\n    if (this.hasChildrenInternal) {\n      this.elementInternal.classList.add('parent');\n    }\n    if (this.expanded) {\n      this.elementInternal.classList.add('expanded');\n    }\n    if (this.selected) {\n      this.elementInternal.classList.add('selected');\n    }\n    if (this.revealed) {\n      this.elementInternal.classList.add('revealed');\n    }\n    if (this.dirty) {\n      this.elementInternal.classList.add('dirty');\n    }\n    if (this.inactive) {\n      this.elementInternal.classList.add('inactive');\n    }\n    if (this.isCreationNode) {\n      this.elementInternal.classList.add('creation-node');\n    }\n    return this.elementInternal;\n  }\n\n  existingElement(): Element|null {\n    return this.elementInternal || null;\n  }\n\n  protected resetElement(): void {\n    this.elementInternal = null;\n  }\n\n  protected createCells(element: Element): void {\n    element.removeChildren();\n    if (!this.dataGrid || !this.parent) {\n      return;\n    }\n    const columnsArray = this.dataGrid.visibleColumnsArray;\n    const accessibleTextArray = [];\n    // Add depth if node is part of a tree\n    if (this.hasChildrenInternal || !this.parent.isRoot) {\n      accessibleTextArray.push(i18nString(UIStrings.levelS, {PH1: this.depth + 1}));\n    }\n    for (let i = 0; i < columnsArray.length; ++i) {\n      const column = columnsArray[i];\n      const cell = element.appendChild(this.createCell(column.id));\n      // Add each visibile cell to the node's accessible text by gathering 'Column Title: content'\n\n      if (column.dataType === DataType.Boolean && this.data[column.id] === true) {\n        this.setCellAccessibleName(i18nString(UIStrings.checked), cell, column.id);\n      }\n\n      accessibleTextArray.push(`${column.title}: ${this.cellAccessibleTextMap.get(column.id) || cell.textContent}`);\n    }\n    this.nodeAccessibleText = accessibleTextArray.join(', ');\n\n    const cornerCell = this.createTDWithClass('corner');\n    UI.ARIAUtils.setHidden(cornerCell, true);\n    element.appendChild(cornerCell);\n  }\n\n  get data(): DataGridData {\n    return this.dataInternal;\n  }\n\n  set data(x: DataGridData) {\n    this.dataInternal = x || {};\n    this.refresh();\n  }\n\n  get revealed(): boolean {\n    if (this.revealedInternal !== undefined) {\n      return this.revealedInternal;\n    }\n\n    let currentAncestor: (DataGridNode<T>|null) = this.parent;\n    while (currentAncestor && !currentAncestor.isRoot) {\n      if (!currentAncestor.expanded) {\n        this.revealedInternal = false;\n        return false;\n      }\n\n      currentAncestor = currentAncestor.parent;\n    }\n\n    this.revealed = true;\n    return true;\n  }\n\n  set revealed(x: boolean) {\n    if (this.revealedInternal === x) {\n      return;\n    }\n\n    this.revealedInternal = x;\n\n    if (this.elementInternal) {\n      this.elementInternal.classList.toggle('revealed', this.revealedInternal);\n    }\n\n    for (let i = 0; i < this.children.length; ++i) {\n      this.children[i].revealed = x && this.expanded;\n    }\n  }\n\n  isDirty(): boolean {\n    return this.dirty;\n  }\n\n  setDirty(dirty: boolean): void {\n    if (this.dirty === dirty) {\n      return;\n    }\n    this.dirty = dirty;\n    if (!this.elementInternal) {\n      return;\n    }\n    if (dirty) {\n      this.elementInternal.classList.add('dirty');\n    } else {\n      this.elementInternal.classList.remove('dirty');\n    }\n  }\n\n  isInactive(): boolean {\n    return this.inactive;\n  }\n\n  setInactive(inactive: boolean): void {\n    if (this.inactive === inactive) {\n      return;\n    }\n    this.inactive = inactive;\n    if (!this.elementInternal) {\n      return;\n    }\n    if (inactive) {\n      this.elementInternal.classList.add('inactive');\n    } else {\n      this.elementInternal.classList.remove('inactive');\n    }\n  }\n\n  hasChildren(): boolean {\n    return this.hasChildrenInternal;\n  }\n\n  setHasChildren(x: boolean): void {\n    if (this.hasChildrenInternal === x) {\n      return;\n    }\n\n    this.hasChildrenInternal = x;\n\n    if (!this.elementInternal) {\n      return;\n    }\n\n    this.elementInternal.classList.toggle('parent', this.hasChildrenInternal);\n    this.elementInternal.classList.toggle('expanded', this.hasChildrenInternal && this.expanded);\n  }\n\n  get depth(): number {\n    if (this.depthInternal !== undefined) {\n      return this.depthInternal;\n    }\n    if (this.parent && !this.parent.isRoot) {\n      this.depthInternal = this.parent.depth + 1;\n    } else {\n      this.depthInternal = 0;\n    }\n    return this.depthInternal;\n  }\n\n  get leftPadding(): number {\n    return this.depth * (this.dataGrid ? this.dataGrid.indentWidth : 1);\n  }\n\n  get shouldRefreshChildren(): boolean {\n    return this.shouldRefreshChildrenInternal;\n  }\n\n  set shouldRefreshChildren(x: boolean) {\n    this.shouldRefreshChildrenInternal = x;\n    if (x && this.expanded) {\n      this.expand();\n    }\n  }\n\n  get selected(): boolean {\n    return this.selectedInternal;\n  }\n\n  set selected(x: boolean) {\n    if (x) {\n      this.select();\n    } else {\n      this.deselect();\n    }\n  }\n\n  get expanded(): boolean {\n    return this.expandedInternal;\n  }\n\n  set expanded(x: boolean) {\n    if (x) {\n      this.expand();\n    } else {\n      this.collapse();\n    }\n  }\n\n  refresh(): void {\n    if (!this.dataGrid) {\n      this.elementInternal = null;\n    }\n    if (!this.elementInternal) {\n      return;\n    }\n    this.createCells(this.elementInternal);\n  }\n\n  createTDWithClass(className: string): HTMLElement {\n    const cell = document.createElement('td');\n    if (className) {\n      cell.className = className;\n    }\n    const cellClass = this.dataGrid ? this.dataGrid.cellClass : null;\n    if (cellClass) {\n      cell.classList.add(cellClass);\n    }\n    return cell;\n  }\n\n  createTD(columnId: string): HTMLElement {\n    const cell = this.createTDWithClass(columnId + '-column');\n    nodeToColumnIdMap.set(cell, columnId);\n\n    if (this.dataGrid) {\n      const alignment = this.dataGrid.columns[columnId].align;\n      if (alignment) {\n        cell.classList.add(alignment);\n      }\n\n      if (columnId === this.dataGrid.disclosureColumnId) {\n        cell.classList.add('disclosure');\n        if (this.leftPadding) {\n          cell.style.setProperty('padding-left', this.leftPadding + 'px');\n        }\n      }\n    }\n\n    return cell;\n  }\n\n  createCell(columnId: string): HTMLElement {\n    const cell = this.createTD(columnId);\n    const data = this.data[columnId];\n    if (data instanceof Node) {\n      cell.appendChild(data);\n    } else if (data !== null && this.dataGrid) {\n      this.dataGrid.setElementContent(cell, (data as string));\n    }\n\n    return cell;\n  }\n\n  setCellAccessibleName(name: string, cell: Element, columnId: string): void {\n    this.cellAccessibleTextMap.set(columnId, name);\n    // Mark all direct children of cell as hidden so cell name is properly announced\n    for (let i = 0; i < cell.children.length; i++) {\n      UI.ARIAUtils.markAsHidden(cell.children[i]);\n    }\n    UI.ARIAUtils.setAccessibleName(cell, name);\n  }\n\n  nodeSelfHeight(): number {\n    return 20;\n  }\n\n  appendChild(child: DataGridNode<T>): void {\n    this.insertChild(child, this.children.length);\n  }\n\n  resetNode(onlyCaches?: boolean): void {\n    // @TODO(allada) This is a hack to make sure ViewportDataGrid can clean up these caches. Try Not To Use.\n    delete this.depthInternal;\n    delete this.revealedInternal;\n    if (onlyCaches) {\n      return;\n    }\n    if (this.previousSibling) {\n      this.previousSibling.nextSibling = this.nextSibling;\n    }\n    if (this.nextSibling) {\n      this.nextSibling.previousSibling = this.previousSibling;\n    }\n    this.dataGrid = null;\n    this.parent = null;\n    this.nextSibling = null;\n    this.previousSibling = null;\n    this.attachedInternal = false;\n  }\n\n  insertChild(child: DataGridNode<T>, index: number): void {\n    if (!child) {\n      throw 'insertChild: Node can\\'t be undefined or null.';\n    }\n    if (child.parent === this) {\n      const currentIndex = this.children.indexOf(child);\n      if (currentIndex < 0) {\n        console.assert(false, 'Inconsistent DataGrid state');\n      }\n      if (currentIndex === index) {\n        return;\n      }\n      if (currentIndex < index) {\n        --index;\n      }\n    }\n\n    child.remove();\n\n    this.children.splice(index, 0, child);\n    this.setHasChildren(true);\n\n    child.parent = this;\n    child.dataGrid = this.dataGrid;\n    child.recalculateSiblings(index);\n\n    child.shouldRefreshChildrenInternal = true;\n\n    let current: (DataGridNode<T>|null)|DataGridNode<T> = child.children[0];\n    while (current) {\n      current.resetNode(true);\n      current.dataGrid = this.dataGrid;\n      current.attachedInternal = false;\n      current.shouldRefreshChildrenInternal = true;\n      current = current.traverseNextNode(false, child, true);\n    }\n\n    if (this.expanded) {\n      child.attach();\n    }\n    if (!this.revealed) {\n      child.revealed = false;\n    }\n  }\n\n  remove(): void {\n    if (this.parent) {\n      this.parent.removeChild(this);\n    }\n  }\n\n  removeChild(child: DataGridNode<T>): void {\n    if (!child) {\n      throw 'removeChild: Node can\\'t be undefined or null.';\n    }\n    if (child.parent !== this) {\n      throw 'removeChild: Node is not a child of this node.';\n    }\n\n    if (this.dataGrid) {\n      this.dataGrid.updateSelectionBeforeRemoval(child, false);\n    }\n\n    child.detach();\n    child.resetNode();\n    Platform.ArrayUtilities.removeElement(this.children, child, true);\n\n    if (this.children.length <= 0) {\n      this.setHasChildren(false);\n    }\n  }\n\n  removeChildren(): void {\n    if (this.dataGrid) {\n      this.dataGrid.updateSelectionBeforeRemoval(this, true);\n    }\n    for (let i = 0; i < this.children.length; ++i) {\n      const child = this.children[i];\n      child.detach();\n      child.resetNode();\n    }\n\n    this.children = [];\n    this.setHasChildren(false);\n  }\n\n  recalculateSiblings(myIndex: number): void {\n    if (!this.parent) {\n      return;\n    }\n\n    const previousChild = this.parent.children[myIndex - 1] || null;\n    if (previousChild) {\n      previousChild.nextSibling = this;\n    }\n    this.previousSibling = previousChild;\n\n    const nextChild = this.parent.children[myIndex + 1] || null;\n    if (nextChild) {\n      nextChild.previousSibling = this;\n    }\n    this.nextSibling = nextChild;\n  }\n\n  collapse(): void {\n    if (this.isRoot) {\n      return;\n    }\n    if (this.elementInternal) {\n      this.elementInternal.classList.remove('expanded');\n    }\n\n    this.expandedInternal = false;\n    if (this.selected && this.dataGrid) {\n      this.dataGrid.updateGridAccessibleName(/* text */ i18nString(UIStrings.collapsed));\n    }\n\n    for (let i = 0; i < this.children.length; ++i) {\n      this.children[i].revealed = false;\n    }\n  }\n\n  collapseRecursively(): void {\n    let item: (DataGridNode<T>|null)|this = this;\n    while (item) {\n      if (item.expanded) {\n        item.collapse();\n      }\n      item = item.traverseNextNode(false, this, true);\n    }\n  }\n\n  populate(): void {\n  }\n\n  expand(): void {\n    if (!this.hasChildrenInternal || this.expandedInternal) {\n      return;\n    }\n    if (this.isRoot) {\n      return;\n    }\n\n    if (this.revealed && !this.shouldRefreshChildrenInternal) {\n      for (let i = 0; i < this.children.length; ++i) {\n        this.children[i].revealed = true;\n      }\n    }\n\n    if (this.shouldRefreshChildrenInternal) {\n      for (let i = 0; i < this.children.length; ++i) {\n        this.children[i].detach();\n      }\n\n      this.populate();\n\n      if (this.attachedInternal) {\n        for (let i = 0; i < this.children.length; ++i) {\n          const child = this.children[i];\n          if (this.revealed) {\n            child.revealed = true;\n          }\n          child.attach();\n        }\n      }\n\n      this.shouldRefreshChildrenInternal = false;\n    }\n\n    if (this.elementInternal) {\n      this.elementInternal.classList.add('expanded');\n    }\n    if (this.selected && this.dataGrid) {\n      this.dataGrid.updateGridAccessibleName(/* text */ i18nString(UIStrings.expanded));\n    }\n\n    this.expandedInternal = true;\n  }\n\n  expandRecursively(): void {\n    let item: (DataGridNode<T>|null)|this = this;\n    while (item) {\n      item.expand();\n      item = item.traverseNextNode(false, this);\n    }\n  }\n\n  reveal(): void {\n    if (this.isRoot || !this.dataGrid) {\n      return;\n    }\n    let currentAncestor: (DataGridNode<T>|null) = this.parent;\n    while (currentAncestor && !currentAncestor.isRoot) {\n      if (!currentAncestor.expanded) {\n        currentAncestor.expand();\n      }\n      currentAncestor = currentAncestor.parent;\n    }\n\n    this.dataGrid.revealNode(this.element() as HTMLElement);\n  }\n\n  select(supressSelectedEvent?: boolean): void {\n    if (!this.dataGrid || !this.selectable || this.selected) {\n      return;\n    }\n\n    if (this.dataGrid.selectedNode) {\n      this.dataGrid.selectedNode.deselect();\n    }\n\n    this.selectedInternal = true;\n    this.dataGrid.selectedNode = this;\n\n    if (this.elementInternal) {\n      this.elementInternal.classList.add('selected');\n      this.dataGrid.setHasSelection(true);\n      this.dataGrid.updateGridAccessibleName();\n    }\n\n    if (!supressSelectedEvent) {\n      this.dataGrid.dispatchEventToListeners(Events.SelectedNode, this);\n    }\n  }\n\n  revealAndSelect(): void {\n    if (this.isRoot) {\n      return;\n    }\n    this.reveal();\n    this.select();\n  }\n\n  deselect(supressDeselectedEvent?: boolean): void {\n    if (!this.dataGrid || this.dataGrid.selectedNode !== this || !this.selected) {\n      return;\n    }\n\n    this.selectedInternal = false;\n    this.dataGrid.selectedNode = null;\n\n    if (this.elementInternal) {\n      this.elementInternal.classList.remove('selected');\n      this.dataGrid.setHasSelection(false);\n      this.dataGrid.updateGridAccessibleName('');\n    }\n\n    if (!supressDeselectedEvent) {\n      this.dataGrid.dispatchEventToListeners(Events.DeselectedNode);\n    }\n  }\n\n  traverseNextNode(skipHidden: boolean, stayWithin?: DataGridNode<T>|null, dontPopulate?: boolean, info?: {\n    depthChange: number,\n  }): DataGridNode<T>|null {\n    if (!dontPopulate && this.hasChildrenInternal) {\n      this.populate();\n    }\n\n    if (info) {\n      info.depthChange = 0;\n    }\n\n    let node: (DataGridNode<T>|null)|this = (!skipHidden || this.revealed) ? this.children[0] : null;\n    if (node && (!skipHidden || this.expanded)) {\n      if (info) {\n        info.depthChange = 1;\n      }\n      return node;\n    }\n\n    if (this === stayWithin) {\n      return null;\n    }\n\n    node = (!skipHidden || this.revealed) ? this.nextSibling : null;\n    if (node) {\n      return node;\n    }\n\n    node = this;\n    while (node && !node.isRoot && !((!skipHidden || node.revealed) ? node.nextSibling : null) &&\n           node.parent !== stayWithin) {\n      if (info) {\n        info.depthChange -= 1;\n      }\n      node = node.parent;\n    }\n\n    if (!node) {\n      return null;\n    }\n\n    return (!skipHidden || node.revealed) ? node.nextSibling : null;\n  }\n\n  traversePreviousNode(skipHidden: boolean, dontPopulate?: boolean): DataGridNode<T>|null {\n    let node: (DataGridNode<T>|null) = (!skipHidden || this.revealed) ? this.previousSibling : null;\n    if (!dontPopulate && node && node.hasChildrenInternal) {\n      node.populate();\n    }\n\n    while (node &&\n           ((!skipHidden || (node.revealed && node.expanded)) ? node.children[node.children.length - 1] : null)) {\n      if (!dontPopulate && node.hasChildrenInternal) {\n        node.populate();\n      }\n      node = ((!skipHidden || (node.revealed && node.expanded)) ? node.children[node.children.length - 1] : null);\n    }\n\n    if (node) {\n      return node;\n    }\n\n    if (!this.parent || this.parent.isRoot) {\n      return null;\n    }\n\n    return this.parent;\n  }\n\n  isEventWithinDisclosureTriangle(event: MouseEvent): boolean {\n    if (!this.hasChildrenInternal) {\n      return false;\n    }\n    const cell = UI.UIUtils.enclosingNodeOrSelfWithNodeName((event.target as Node), 'td');\n    if (!cell || !(cell instanceof HTMLElement) || !cell.classList.contains('disclosure')) {\n      return false;\n    }\n\n    const left = cell.totalOffsetLeft() + this.leftPadding;\n    return event.pageX >= left && event.pageX <= left + this.disclosureToggleWidth;\n  }\n\n  private attach(): void {\n    if (!this.dataGrid || this.attachedInternal) {\n      return;\n    }\n\n    this.attachedInternal = true;\n\n    const previousNode = this.traversePreviousNode(true, true);\n    const previousElement = previousNode ? previousNode.element() : this.dataGrid.topFillerRow;\n    this.dataGrid.dataTableBody.insertBefore(this.element(), previousElement.nextSibling);\n\n    if (this.expandedInternal) {\n      for (let i = 0; i < this.children.length; ++i) {\n        this.children[i].attach();\n      }\n    }\n  }\n\n  private detach(): void {\n    if (!this.attachedInternal) {\n      return;\n    }\n\n    this.attachedInternal = false;\n\n    if (this.elementInternal) {\n      this.elementInternal.remove();\n    }\n\n    for (let i = 0; i < this.children.length; ++i) {\n      this.children[i].detach();\n    }\n  }\n\n  savePosition(): void {\n    if (this.savedPosition) {\n      return;\n    }\n\n    if (!this.parent) {\n      throw 'savePosition: Node must have a parent.';\n    }\n    this.savedPosition = {parent: this.parent, index: this.parent.children.indexOf(this)};\n  }\n\n  restorePosition(): void {\n    if (!this.savedPosition) {\n      return;\n    }\n\n    if (this.parent !== this.savedPosition.parent) {\n      this.savedPosition.parent.insertChild(this, this.savedPosition.index);\n    }\n\n    this.savedPosition = null;\n  }\n}\n\nexport class CreationDataGridNode<T> extends DataGridNode<T> {\n  isCreationNode: boolean;\n  constructor(\n      data?: {\n        [x: string]: any,\n      }|null,\n      hasChildren?: boolean) {\n    super(data, hasChildren);\n    this.isCreationNode = true;\n  }\n\n  makeNormal(): void {\n    this.isCreationNode = false;\n  }\n}\n\nexport class DataGridWidget<T> extends UI.Widget.VBox {\n  private readonly dataGrid: DataGridImpl<T>;\n  constructor(dataGrid: DataGridImpl<T>) {\n    super();\n    this.dataGrid = dataGrid;\n    this.element.appendChild(dataGrid.element);\n    this.setDefaultFocusedElement(dataGrid.element);\n  }\n\n  wasShown(): void {\n    this.registerCSSFiles([dataGridStyles]);\n    this.dataGrid.wasShown();\n  }\n\n  willHide(): void {\n    this.dataGrid.willHide();\n  }\n\n  onResize(): void {\n    this.dataGrid.onResize();\n  }\n\n  elementsToRestoreScrollPositionsFor(): Element[] {\n    return [this.dataGrid.scrollContainer];\n  }\n}\nexport interface Parameters {\n  displayName: string;\n  columns: ColumnDescriptor[];\n  editCallback?: ((arg0: any, arg1: string, arg2: any, arg3: any) => void);\n  deleteCallback?: ((arg0: any) => void);\n  refreshCallback?: (() => void);\n}\nexport interface ColumnDescriptor {\n  id: string;\n  title?: Common.UIString.LocalizedString;\n  titleDOMFragment?: DocumentFragment|null;\n  sortable: boolean;\n  sort?: Order|null;\n  align?: Align|null;\n  width?: string;\n  fixedWidth?: boolean;\n  editable?: boolean;\n  nonSelectable?: boolean;\n  longText?: boolean;\n  disclosure?: boolean;\n  weight?: number;\n  allowInSortByEvenWhenHidden?: boolean;\n  dataType?: DataType|null;\n  defaultWeight?: number;\n}\n"],
  "mappings": "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",
  "names": []
}
