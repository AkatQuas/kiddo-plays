{
  "version": 3,
  "sources": ["../../../../../../../../front_end/ui/legacy/components/color_picker/ContrastOverlay.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as Root from '../../../../core/root/root.js';\nimport * as UI from '../../legacy.js';\n\nimport type {ContrastInfo} from './ContrastInfo.js';\nimport {Events} from './ContrastInfo.js';\n\nexport class ContrastOverlay {\n  private contrastInfo: ContrastInfo;\n  private visible: boolean;\n  private readonly contrastRatioSVG: Element;\n  private readonly contrastRatioLines: Map<string, Element>;\n  private width: number;\n  private height: number;\n  private readonly contrastRatioLineBuilder: ContrastRatioLineBuilder;\n  private readonly contrastRatioLinesThrottler: Common.Throttler.Throttler;\n  private readonly drawContrastRatioLinesBound: () => Promise<void>;\n  constructor(contrastInfo: ContrastInfo, colorElement: Element) {\n    this.contrastInfo = contrastInfo;\n\n    this.visible = false;\n\n    this.contrastRatioSVG = UI.UIUtils.createSVGChild(colorElement, 'svg', 'spectrum-contrast-container fill');\n    this.contrastRatioLines = new Map();\n    if (Root.Runtime.experiments.isEnabled('APCA')) {\n      this.contrastRatioLines.set(\n          'APCA', UI.UIUtils.createSVGChild(this.contrastRatioSVG, 'path', 'spectrum-contrast-line'));\n    } else {\n      this.contrastRatioLines.set(\n          'aa', UI.UIUtils.createSVGChild(this.contrastRatioSVG, 'path', 'spectrum-contrast-line'));\n      this.contrastRatioLines.set(\n          'aaa', UI.UIUtils.createSVGChild(this.contrastRatioSVG, 'path', 'spectrum-contrast-line'));\n    }\n\n    this.width = 0;\n    this.height = 0;\n\n    this.contrastRatioLineBuilder = new ContrastRatioLineBuilder(this.contrastInfo);\n\n    this.contrastRatioLinesThrottler = new Common.Throttler.Throttler(0);\n    this.drawContrastRatioLinesBound = this.drawContrastRatioLines.bind(this);\n\n    this.contrastInfo.addEventListener(Events.ContrastInfoUpdated, this.update.bind(this));\n  }\n\n  private update(): void {\n    if (!this.visible || this.contrastInfo.isNull()) {\n      return;\n    }\n    if (Root.Runtime.experiments.isEnabled('APCA') && this.contrastInfo.contrastRatioAPCA() === null) {\n      return;\n    }\n    if (!this.contrastInfo.contrastRatio()) {\n      return;\n    }\n    void this.contrastRatioLinesThrottler.schedule(this.drawContrastRatioLinesBound);\n  }\n\n  setDimensions(width: number, height: number): void {\n    this.width = width;\n    this.height = height;\n    this.update();\n  }\n\n  setVisible(visible: boolean): void {\n    this.visible = visible;\n    this.contrastRatioSVG.classList.toggle('hidden', !visible);\n    this.update();\n  }\n\n  private async drawContrastRatioLines(): Promise<void> {\n    for (const [level, element] of this.contrastRatioLines) {\n      const path = this.contrastRatioLineBuilder.drawContrastRatioLine(this.width, this.height, level as string);\n      if (path) {\n        element.setAttribute('d', path);\n      } else {\n        element.removeAttribute('d');\n      }\n    }\n  }\n}\n\nexport class ContrastRatioLineBuilder {\n  private readonly contrastInfo: ContrastInfo;\n  constructor(contrastInfo: ContrastInfo) {\n    this.contrastInfo = contrastInfo;\n  }\n\n  drawContrastRatioLine(width: number, height: number, level: string): string|null {\n    const isAPCA = Root.Runtime.experiments.isEnabled('APCA');\n    const requiredContrast =\n        isAPCA ? this.contrastInfo.contrastRatioAPCAThreshold() : this.contrastInfo.contrastRatioThreshold(level);\n    if (!width || !height || requiredContrast === null) {\n      return null;\n    }\n\n    const dS = 0.02;\n    const H = 0;\n    const S = 1;\n    const V = 2;\n    const A = 3;\n\n    const color = this.contrastInfo.color();\n    const bgColor = this.contrastInfo.bgColor();\n    if (!color || !bgColor) {\n      return null;\n    }\n\n    const fgRGBA = color.rgba();\n    const fgHSVA = color.hsva();\n    const bgRGBA = bgColor.rgba();\n    const bgLuminance = Common.ColorUtils.luminance(bgRGBA);\n    let blendedRGBA: number[] = Common.ColorUtils.blendColors(fgRGBA, bgRGBA);\n    const fgLuminance = Common.ColorUtils.luminance(blendedRGBA);\n    const fgIsLighter = fgLuminance > bgLuminance;\n    const desiredLuminance = isAPCA ?\n        Common.ColorUtils.desiredLuminanceAPCA(bgLuminance, requiredContrast, fgIsLighter) :\n        Common.Color.Color.desiredLuminance(bgLuminance, requiredContrast, fgIsLighter);\n\n    if (isAPCA &&\n        Math.abs(Math.round(Common.ColorUtils.contrastRatioByLuminanceAPCA(desiredLuminance, bgLuminance))) <\n            requiredContrast) {\n      return null;\n    }\n\n    let lastV: number = fgHSVA[V];\n    let currentSlope = 0;\n    const candidateHSVA = [fgHSVA[H], 0, 0, fgHSVA[A]];\n    let pathBuilder: string[] = [];\n    const candidateRGBA: number[] = [];\n    Common.Color.Color.hsva2rgba(candidateHSVA, candidateRGBA);\n    blendedRGBA = Common.ColorUtils.blendColors(candidateRGBA, bgRGBA);\n\n    let candidateLuminance: ((candidateHSVA: number[]) => number)|((candidateHSVA: number[]) => number) =\n        (candidateHSVA: number[]): number => {\n          return Common.ColorUtils.luminance(\n              Common.ColorUtils.blendColors(Common.Color.Color.fromHSVA(candidateHSVA).rgba(), bgRGBA));\n        };\n\n    if (Root.Runtime.experiments.isEnabled('APCA')) {\n      candidateLuminance = (candidateHSVA: number[]): number => {\n        return Common.ColorUtils.luminanceAPCA(\n            Common.ColorUtils.blendColors(Common.Color.Color.fromHSVA(candidateHSVA).rgba(), bgRGBA));\n      };\n    }\n\n    // Plot V for values of S such that the computed luminance approximates\n    // `desiredLuminance`, until no suitable value for V can be found, or the\n    // current value of S goes of out bounds.\n    let s;\n    for (s = 0; s < 1 + dS; s += dS) {\n      s = Math.min(1, s);\n      candidateHSVA[S] = s;\n\n      // Extrapolate the approximate next value for `v` using the approximate\n      // gradient of the curve.\n      candidateHSVA[V] = lastV + currentSlope * dS;\n\n      const v = Common.Color.Color.approachColorValue(candidateHSVA, bgRGBA, V, desiredLuminance, candidateLuminance);\n      if (v === null) {\n        break;\n      }\n\n      // Approximate the current gradient of the curve.\n      currentSlope = s === 0 ? 0 : (v - lastV) / dS;\n      lastV = v;\n\n      pathBuilder.push(pathBuilder.length ? 'L' : 'M');\n      pathBuilder.push((s * width).toFixed(2));\n      pathBuilder.push(((1 - v) * height).toFixed(2));\n    }\n\n    // If no suitable V value for an in-bounds S value was found, find the value\n    // of S such that V === 1 and add that to the path.\n    if (s < 1 + dS) {\n      s -= dS;\n      candidateHSVA[V] = 1;\n      s = Common.Color.Color.approachColorValue(candidateHSVA, bgRGBA, S, desiredLuminance, candidateLuminance);\n      if (s !== null) {\n        pathBuilder = pathBuilder.concat(['L', (s * width).toFixed(2), '-0.1']);\n      }\n    }\n    if (pathBuilder.length === 0) {\n      return null;\n    }\n    return pathBuilder.join(' ');\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
