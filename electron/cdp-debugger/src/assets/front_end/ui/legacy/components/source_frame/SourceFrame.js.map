{
  "version": 3,
  "sources": ["../../../../../../../../front_end/ui/legacy/components/source_frame/SourceFrame.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as Platform from '../../../../core/platform/platform.js';\nimport * as Formatter from '../../../../models/formatter/formatter.js';\nimport * as TextUtils from '../../../../models/text_utils/text_utils.js';\nimport * as CodeMirror from '../../../../third_party/codemirror.next/codemirror.next.js';\nimport * as CodeHighlighter from '../../../components/code_highlighter/code_highlighter.js';\nimport * as TextEditor from '../../../components/text_editor/text_editor.js';\nimport * as UI from '../../legacy.js';\n\nconst UIStrings = {\n  /**\n  *@description Text for the source of something\n  */\n  source: 'Source',\n  /**\n  *@description Text to pretty print a file\n  */\n  prettyPrint: 'Pretty print',\n  /**\n  *@description Text when something is loading\n  */\n  loading: 'Loading\u2026',\n  /**\n  * @description Shown at the bottom of the Sources panel when the user has made multiple\n  * simultaneous text selections in the text editor.\n  * @example {2} PH1\n  */\n  dSelectionRegions: '{PH1} selection regions',\n  /**\n  * @description Position indicator in Source Frame of the Sources panel. The placeholder is a\n  * hexadecimal number value, which is why it is prefixed with '0x'.\n  * @example {abc} PH1\n  */\n  bytecodePositionXs: 'Bytecode position `0x`{PH1}',\n  /**\n  *@description Text in Source Frame of the Sources panel\n  *@example {2} PH1\n  *@example {2} PH2\n  */\n  lineSColumnS: 'Line {PH1}, Column {PH2}',\n  /**\n  *@description Text in Source Frame of the Sources panel\n  *@example {2} PH1\n  */\n  dCharactersSelected: '{PH1} characters selected',\n  /**\n  *@description Text in Source Frame of the Sources panel\n  *@example {2} PH1\n  *@example {2} PH2\n  */\n  dLinesDCharactersSelected: '{PH1} lines, {PH2} characters selected',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/components/source_frame/SourceFrame.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface SourceFrameOptions {\n  // Whether to show line numbers. Defaults to true.\n  lineNumbers?: boolean;\n  // Whether to wrap lines. Defaults to false.\n  lineWrapping?: boolean;\n}\n\nexport const enum Events {\n  EditorUpdate = 'EditorUpdate',\n  EditorScroll = 'EditorScroll',\n}\n\nexport type EventTypes = {\n  [Events.EditorUpdate]: CodeMirror.ViewUpdate,\n  [Events.EditorScroll]: void,\n};\n\nexport class SourceFrameImpl extends Common.ObjectWrapper.eventMixin<EventTypes, typeof UI.View.SimpleView>(\n    UI.View.SimpleView) implements UI.SearchableView.Searchable, UI.SearchableView.Replaceable, Transformer {\n  private readonly lazyContent: () => Promise<TextUtils.ContentProvider.DeferredContent>;\n  private prettyInternal: boolean;\n  private rawContent: string|CodeMirror.Text|null;\n  private formattedContentPromise: Promise<Formatter.ScriptFormatter.FormattedContent>|null;\n  private formattedMap: Formatter.ScriptFormatter.FormatterSourceMapping|null;\n  private readonly prettyToggle: UI.Toolbar.ToolbarToggle;\n  private shouldAutoPrettyPrint: boolean;\n  private readonly progressToolbarItem: UI.Toolbar.ToolbarItem;\n  private textEditorInternal: TextEditor.TextEditor.TextEditor;\n  // The 'clean' document, before editing\n  private baseDoc: CodeMirror.Text;\n  private prettyBaseDoc: CodeMirror.Text|null = null;\n  private displayedSelection: CodeMirror.EditorSelection|null = null;\n  private searchConfig: UI.SearchableView.SearchConfig|null;\n  private delayedFindSearchMatches: (() => void)|null;\n  private currentSearchResultIndex: number;\n  private searchResults: SearchMatch[];\n  private searchRegex: UI.SearchableView.SearchRegexResult|null;\n  private loadError: boolean;\n  private muteChangeEventsForSetContent: boolean;\n  private readonly sourcePosition: UI.Toolbar.ToolbarText;\n  private searchableView: UI.SearchableView.SearchableView|null;\n  private editable: boolean;\n  private positionToReveal: {\n    line: number,\n    column: (number|undefined),\n    shouldHighlight: (boolean|undefined),\n  }|null;\n  private lineToScrollTo: number|null;\n  private selectionToSet: TextUtils.TextRange.TextRange|null;\n  private loadedInternal: boolean;\n  private contentRequested: boolean;\n  private wasmDisassemblyInternal: Common.WasmDisassembly.WasmDisassembly|null;\n  contentSet: boolean;\n  constructor(\n      lazyContent: () => Promise<TextUtils.ContentProvider.DeferredContent>,\n      private readonly options: SourceFrameOptions = {}) {\n    super(i18nString(UIStrings.source));\n\n    this.lazyContent = lazyContent;\n\n    this.prettyInternal = false;\n    this.rawContent = null;\n    this.formattedContentPromise = null;\n    this.formattedMap = null;\n    this.prettyToggle = new UI.Toolbar.ToolbarToggle(i18nString(UIStrings.prettyPrint), 'largeicon-pretty-print');\n    this.prettyToggle.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, () => {\n      void this.setPretty(!this.prettyToggle.toggled());\n    });\n    this.shouldAutoPrettyPrint = false;\n    this.prettyToggle.setVisible(false);\n\n    this.progressToolbarItem = new UI.Toolbar.ToolbarItem(document.createElement('div'));\n\n    this.textEditorInternal = new TextEditor.TextEditor.TextEditor(this.placeholderEditorState(''));\n    this.textEditorInternal.style.flexGrow = '1';\n    this.element.appendChild(this.textEditorInternal);\n    this.element.addEventListener('keydown', (event: KeyboardEvent): void => {\n      if (event.defaultPrevented) {\n        event.stopPropagation();\n      }\n    });\n\n    this.baseDoc = this.textEditorInternal.state.doc;\n\n    this.searchConfig = null;\n    this.delayedFindSearchMatches = null;\n    this.currentSearchResultIndex = -1;\n    this.searchResults = [];\n    this.searchRegex = null;\n    this.loadError = false;\n\n    this.muteChangeEventsForSetContent = false;\n\n    this.sourcePosition = new UI.Toolbar.ToolbarText();\n\n    this.searchableView = null;\n    this.editable = false;\n\n    this.positionToReveal = null;\n    this.lineToScrollTo = null;\n    this.selectionToSet = null;\n    this.loadedInternal = false;\n    this.contentRequested = false;\n\n    this.wasmDisassemblyInternal = null;\n    this.contentSet = false;\n  }\n\n  private placeholderEditorState(content: string): CodeMirror.EditorState {\n    return CodeMirror.EditorState.create({\n      doc: content,\n      extensions: [\n        CodeMirror.EditorState.readOnly.of(true),\n        this.options.lineNumbers !== false ? CodeMirror.lineNumbers() : [],\n        TextEditor.Config.theme(),\n      ],\n    });\n  }\n\n  protected editorConfiguration(doc: string|CodeMirror.Text): CodeMirror.Extension {\n    return [\n      CodeMirror.EditorView.updateListener.of(update => this.dispatchEventToListeners(Events.EditorUpdate, update)),\n      TextEditor.Config.baseConfiguration(doc),\n      TextEditor.Config.closeBrackets,\n      TextEditor.Config.sourcesAutocompletion.instance(),\n      TextEditor.Config.showWhitespace.instance(),\n      TextEditor.Config.allowScrollPastEof.instance(),\n      CodeMirror.Prec.lowest(TextEditor.Config.codeFolding.instance()),\n      TextEditor.Config.autoDetectIndent.instance(),\n      sourceFrameTheme,\n      CodeMirror.EditorView.domEventHandlers({\n        focus: () => this.onFocus(),\n        blur: () => this.onBlur(),\n        scroll: () => this.dispatchEventToListeners(Events.EditorScroll),\n        contextmenu: event => this.onContextMenu(event),\n      }),\n      CodeMirror.lineNumbers({\n        domEventHandlers:\n            {contextmenu: (_view, block, event) => this.onLineGutterContextMenu(block.from, event as MouseEvent)},\n      }),\n      CodeMirror.EditorView.updateListener.of(\n          (update):\n              void => {\n                if (update.selectionSet || update.docChanged) {\n                  this.updateSourcePosition();\n                }\n                if (update.docChanged) {\n                  this.onTextChanged();\n                }\n              }),\n      activeSearchState,\n      CodeMirror.Prec.lowest(searchHighlighter),\n      config.language.of([]),\n      this.wasmDisassemblyInternal ? markNonBreakableLines(this.wasmDisassemblyInternal) : nonBreakableLines,\n      this.options.lineWrapping ? CodeMirror.EditorView.lineWrapping : [],\n      this.options.lineNumbers !== false ? CodeMirror.lineNumbers() : [],\n    ];\n  }\n\n  protected onBlur(): void {\n  }\n\n  protected onFocus(): void {\n    this.resetCurrentSearchResultIndex();\n  }\n\n  get wasmDisassembly(): Common.WasmDisassembly.WasmDisassembly|null {\n    return this.wasmDisassemblyInternal;\n  }\n\n  editorLocationToUILocation(lineNumber: number, columnNumber: number): {\n    lineNumber: number,\n    columnNumber: number,\n  };\n  editorLocationToUILocation(lineNumber: number): {\n    lineNumber: number,\n    columnNumber: number|undefined,\n  };\n  editorLocationToUILocation(lineNumber: number, columnNumber?: number): {\n    lineNumber: number,\n    columnNumber?: number|undefined,\n  } {\n    if (this.wasmDisassemblyInternal) {\n      columnNumber = this.wasmDisassemblyInternal.lineNumberToBytecodeOffset(lineNumber);\n      lineNumber = 0;\n    } else if (this.prettyInternal) {\n      [lineNumber, columnNumber] = this.prettyToRawLocation(lineNumber, columnNumber);\n    }\n    return {lineNumber, columnNumber};\n  }\n\n  uiLocationToEditorLocation(lineNumber: number, columnNumber: number|undefined = 0): {\n    lineNumber: number,\n    columnNumber: number,\n  } {\n    if (this.wasmDisassemblyInternal) {\n      lineNumber = this.wasmDisassemblyInternal.bytecodeOffsetToLineNumber(columnNumber);\n      columnNumber = 0;\n    } else if (this.prettyInternal) {\n      [lineNumber, columnNumber] = this.rawToPrettyLocation(lineNumber, columnNumber);\n    }\n    return {lineNumber, columnNumber};\n  }\n\n  setCanPrettyPrint(canPrettyPrint: boolean, autoPrettyPrint?: boolean): void {\n    this.shouldAutoPrettyPrint = canPrettyPrint && Boolean(autoPrettyPrint);\n    this.prettyToggle.setVisible(canPrettyPrint);\n  }\n\n  setEditable(editable: boolean): void {\n    this.editable = editable;\n    if (this.loaded && editable !== !this.textEditor.state.readOnly) {\n      this.textEditor.dispatch({effects: config.editable.reconfigure(CodeMirror.EditorState.readOnly.of(!editable))});\n    }\n  }\n\n  private async setPretty(value: boolean): Promise<void> {\n    this.prettyInternal = value;\n    this.prettyToggle.setEnabled(false);\n\n    const wasLoaded = this.loaded;\n    const {textEditor} = this;\n    const selection = textEditor.state.selection.main;\n    const startPos = textEditor.toLineColumn(selection.from), endPos = textEditor.toLineColumn(selection.to);\n    let newSelection;\n    if (this.prettyInternal) {\n      const formatInfo = await this.requestFormattedContent();\n      this.formattedMap = formatInfo.formattedMapping;\n      await this.setContent(formatInfo.formattedContent);\n      this.prettyBaseDoc = textEditor.state.doc;\n      const start = this.rawToPrettyLocation(startPos.lineNumber, startPos.columnNumber);\n      const end = this.rawToPrettyLocation(endPos.lineNumber, endPos.columnNumber);\n      newSelection = textEditor.createSelection(\n          {lineNumber: start[0], columnNumber: start[1]}, {lineNumber: end[0], columnNumber: end[1]});\n    } else {\n      await this.setContent(this.rawContent || '');\n      this.baseDoc = textEditor.state.doc;\n      const start = this.prettyToRawLocation(startPos.lineNumber, startPos.columnNumber);\n      const end = this.prettyToRawLocation(endPos.lineNumber, endPos.columnNumber);\n      newSelection = textEditor.createSelection(\n          {lineNumber: start[0], columnNumber: start[1]}, {lineNumber: end[0], columnNumber: end[1]});\n    }\n    if (wasLoaded) {\n      textEditor.revealPosition(newSelection, false);\n    }\n    this.prettyToggle.setEnabled(true);\n    this.updatePrettyPrintState();\n  }\n\n  // If this is a disassembled WASM file or a pretty-printed file,\n  // wire in a line number formatter that shows binary offsets or line\n  // numbers in the original source.\n  private getLineNumberFormatter(): CodeMirror.Extension {\n    if (this.options.lineNumbers === false) {\n      return [];\n    }\n    let formatNumber = null;\n    if (this.wasmDisassemblyInternal) {\n      const disassembly = this.wasmDisassemblyInternal;\n      const lastBytecodeOffset = disassembly.lineNumberToBytecodeOffset(disassembly.lineNumbers - 1);\n      const bytecodeOffsetDigits = lastBytecodeOffset.toString(16).length + 1;\n      formatNumber = (lineNumber: number): string => {\n        const bytecodeOffset =\n            disassembly.lineNumberToBytecodeOffset(Math.min(disassembly.lineNumbers, lineNumber) - 1);\n        return `0x${bytecodeOffset.toString(16).padStart(bytecodeOffsetDigits, '0')}`;\n      };\n    } else if (this.prettyInternal) {\n      formatNumber = (lineNumber: number): string => {\n        const line = this.prettyToRawLocation(lineNumber - 1, 0)[0] + 1;\n        if (lineNumber === 1) {\n          return String(line);\n        }\n        if (line !== this.prettyToRawLocation(lineNumber - 2, 0)[0] + 1) {\n          return String(line);\n        }\n        return '-';\n      };\n    }\n    return formatNumber ? CodeMirror.lineNumbers({formatNumber}) : [];\n  }\n\n  private updateLineNumberFormatter(): void {\n    this.textEditor.dispatch({effects: config.lineNumbers.reconfigure(this.getLineNumberFormatter())});\n  }\n\n  private updatePrettyPrintState(): void {\n    this.prettyToggle.setToggled(this.prettyInternal);\n    this.textEditorInternal.classList.toggle('pretty-printed', this.prettyInternal);\n    this.updateLineNumberFormatter();\n  }\n\n  private prettyToRawLocation(line: number, column: number|undefined = 0): number[] {\n    if (!this.formattedMap) {\n      return [line, column];\n    }\n    return this.formattedMap.formattedToOriginal(line, column);\n  }\n\n  private rawToPrettyLocation(line: number, column: number): number[] {\n    if (!this.formattedMap) {\n      return [line, column];\n    }\n    return this.formattedMap.originalToFormatted(line, column);\n  }\n\n  hasLoadError(): boolean {\n    return this.loadError;\n  }\n\n  wasShown(): void {\n    void this.ensureContentLoaded();\n    this.wasShownOrLoaded();\n  }\n\n  willHide(): void {\n    super.willHide();\n\n    this.clearPositionToReveal();\n  }\n\n  async toolbarItems(): Promise<UI.Toolbar.ToolbarItem[]> {\n    return [this.prettyToggle, this.sourcePosition, this.progressToolbarItem];\n  }\n\n  get loaded(): boolean {\n    return this.loadedInternal;\n  }\n\n  get textEditor(): TextEditor.TextEditor.TextEditor {\n    return this.textEditorInternal;\n  }\n\n  get pretty(): boolean {\n    return this.prettyInternal;\n  }\n\n  get contentType(): string {\n    return this.loadError ? '' : this.getContentType();\n  }\n\n  protected getContentType(): string {\n    return '';\n  }\n\n  private async ensureContentLoaded(): Promise<void> {\n    if (!this.contentRequested) {\n      this.contentRequested = true;\n\n      const progressIndicator = new UI.ProgressIndicator.ProgressIndicator();\n      progressIndicator.setTitle(i18nString(UIStrings.loading));\n      progressIndicator.setTotalWork(100);\n      this.progressToolbarItem.element.appendChild(progressIndicator.element);\n\n      const deferredContent = await this.lazyContent();\n      let error, content;\n      if (deferredContent.content === null) {\n        error = deferredContent.error;\n        this.rawContent = deferredContent.error;\n      } else {\n        content = deferredContent.content;\n        if (deferredContent.isEncoded) {\n          const view = new DataView(Common.Base64.decode(deferredContent.content));\n          const decoder = new TextDecoder();\n          this.rawContent = decoder.decode(view, {stream: true});\n        } else {\n          this.rawContent = deferredContent.content;\n        }\n      }\n\n      progressIndicator.setWorked(1);\n\n      if (!error && this.contentType === 'application/wasm') {\n        const worker = Common.Worker.WorkerWrapper.fromURL(\n            new URL('../../../../entrypoints/wasmparser_worker/wasmparser_worker-entrypoint.js', import.meta.url));\n        const promise = new Promise<{\n          lines: string[],\n          offsets: number[],\n          functionBodyOffsets: {\n            start: number,\n            end: number,\n          }[],\n        }>((resolve, reject) => {\n          worker.onmessage =\n              // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              ({data}: MessageEvent<any>): void => {\n                if ('event' in data) {\n                  switch (data.event) {\n                    case 'progress':\n                      progressIndicator.setWorked(data.params.percentage);\n                      break;\n                  }\n                } else if ('method' in data) {\n                  switch (data.method) {\n                    case 'disassemble':\n                      if ('error' in data) {\n                        reject(data.error);\n                      } else if ('result' in data) {\n                        resolve(data.result);\n                      }\n                      break;\n                  }\n                }\n              };\n          worker.onerror = reject;\n        });\n        worker.postMessage({method: 'disassemble', params: {content}});\n        try {\n          const {lines, offsets, functionBodyOffsets} = await promise;\n          this.rawContent = content = CodeMirror.Text.of(lines);\n          this.wasmDisassemblyInternal = new Common.WasmDisassembly.WasmDisassembly(offsets, functionBodyOffsets);\n        } catch (e) {\n          this.rawContent = content = error = e.message;\n        } finally {\n          worker.terminate();\n        }\n      }\n\n      progressIndicator.setWorked(100);\n      progressIndicator.done();\n\n      this.formattedContentPromise = null;\n      this.formattedMap = null;\n      this.prettyToggle.setEnabled(true);\n\n      if (error) {\n        this.loadError = true;\n        this.textEditor.editor.setState(this.placeholderEditorState(error));\n        this.prettyToggle.setEnabled(false);\n      } else {\n        if (this.shouldAutoPrettyPrint && TextUtils.TextUtils.isMinified(content)) {\n          await this.setPretty(true);\n        } else {\n          await this.setContent(this.rawContent || '');\n        }\n      }\n      this.contentSet = true;\n    }\n  }\n\n  private requestFormattedContent(): Promise<Formatter.ScriptFormatter.FormattedContent> {\n    if (this.formattedContentPromise) {\n      return this.formattedContentPromise;\n    }\n    const content = this.rawContent instanceof CodeMirror.Text ? this.rawContent.sliceString(0) : this.rawContent || '';\n    this.formattedContentPromise = Formatter.ScriptFormatter.formatScriptContent(this.contentType, content);\n    return this.formattedContentPromise;\n  }\n\n  revealPosition(position: {lineNumber: number, columnNumber?: number}|number, shouldHighlight?: boolean): void {\n    this.lineToScrollTo = null;\n    this.selectionToSet = null;\n    let line = 0, column = 0;\n    if (typeof position === 'number') {\n      const {doc} = this.textEditor.state;\n      if (position > doc.length) {\n        line = doc.lines - 1;\n      } else if (position >= 0) {\n        const lineObj = doc.lineAt(position);\n        line = lineObj.number - 1;\n        column = position - lineObj.from;\n      }\n    } else {\n      line = position.lineNumber;\n      column = position.columnNumber ?? 0;\n    }\n    this.positionToReveal = {line, column, shouldHighlight: shouldHighlight};\n    this.innerRevealPositionIfNeeded();\n  }\n\n  private innerRevealPositionIfNeeded(): void {\n    if (!this.positionToReveal) {\n      return;\n    }\n\n    if (!this.loaded || !this.isShowing()) {\n      return;\n    }\n\n    const location = this.uiLocationToEditorLocation(this.positionToReveal.line, this.positionToReveal.column);\n\n    const {textEditor} = this;\n    textEditor.revealPosition(textEditor.createSelection(location), this.positionToReveal.shouldHighlight);\n    this.positionToReveal = null;\n  }\n\n  private clearPositionToReveal(): void {\n    this.positionToReveal = null;\n  }\n\n  scrollToLine(line: number): void {\n    this.clearPositionToReveal();\n    this.lineToScrollTo = line;\n    this.innerScrollToLineIfNeeded();\n  }\n\n  private innerScrollToLineIfNeeded(): void {\n    if (this.lineToScrollTo !== null) {\n      if (this.loaded && this.isShowing()) {\n        const {textEditor} = this;\n        // DevTools history items are 0-based, but CodeMirror is 1-based, so we have to increment the\n        // line we want to scroll to by 1.\n        const position = textEditor.toOffset({lineNumber: this.lineToScrollTo + 1, columnNumber: 0});\n        textEditor.dispatch({effects: CodeMirror.EditorView.scrollIntoView(position, {y: 'start'})});\n        this.lineToScrollTo = null;\n      }\n    }\n  }\n\n  setSelection(textRange: TextUtils.TextRange.TextRange): void {\n    this.selectionToSet = textRange;\n    this.innerSetSelectionIfNeeded();\n  }\n\n  private innerSetSelectionIfNeeded(): void {\n    const sel = this.selectionToSet;\n    if (sel && this.loaded && this.isShowing()) {\n      const {textEditor} = this;\n      textEditor.dispatch({\n        selection: textEditor.createSelection(\n            {lineNumber: sel.startLine, columnNumber: sel.startColumn},\n            {lineNumber: sel.endLine, columnNumber: sel.endColumn}),\n      });\n      this.selectionToSet = null;\n    }\n  }\n\n  private wasShownOrLoaded(): void {\n    this.innerRevealPositionIfNeeded();\n    this.innerSetSelectionIfNeeded();\n    this.innerScrollToLineIfNeeded();\n  }\n\n  onTextChanged(): void {\n    const wasPretty = this.pretty;\n    this.prettyInternal = Boolean(this.prettyBaseDoc && this.textEditor.state.doc.eq(this.prettyBaseDoc));\n    if (this.prettyInternal !== wasPretty) {\n      this.updatePrettyPrintState();\n    }\n    this.prettyToggle.setEnabled(this.isClean());\n\n    if (this.searchConfig && this.searchableView) {\n      this.performSearch(this.searchConfig, false, false);\n    }\n  }\n\n  isClean(): boolean {\n    return this.textEditor.state.doc.eq(this.baseDoc) ||\n        (this.prettyBaseDoc !== null && this.textEditor.state.doc.eq(this.prettyBaseDoc));\n  }\n\n  contentCommitted(): void {\n    this.baseDoc = this.textEditorInternal.state.doc;\n    this.prettyBaseDoc = null;\n    this.rawContent = this.textEditor.state.doc.toString();\n    this.formattedMap = null;\n    this.formattedContentPromise = null;\n    if (this.prettyInternal) {\n      this.prettyInternal = false;\n      this.updatePrettyPrintState();\n    }\n    this.prettyToggle.setEnabled(true);\n  }\n\n  private simplifyMimeType(content: string|CodeMirror.Text, mimeType: string): string {\n    if (!mimeType) {\n      return '';\n    }\n    // There are plenty of instances where TSX/JSX files are served with out the trailing x, i.e. JSX with a 'js' suffix\n    // which breaks the formatting. Therefore, if the mime type is TypeScript or JavaScript, we switch to the TSX/JSX\n    // superset so that we don't break formatting.\n    if (mimeType.indexOf('typescript') >= 0) {\n      return 'text/typescript-jsx';\n    }\n    if (mimeType.indexOf('javascript') >= 0 || mimeType.indexOf('jscript') >= 0 ||\n        mimeType.indexOf('ecmascript') >= 0) {\n      return 'text/jsx';\n    }\n    // A hack around the fact that files with \"php\" extension might be either standalone or html embedded php scripts.\n    if (mimeType === 'text/x-php') {\n      const strContent = typeof content === 'string' ? content : content.sliceString(0);\n      if (strContent.match(/\\<\\?.*\\?\\>/g)) {\n        return 'application/x-httpd-php';\n      }\n    }\n    if (mimeType === 'application/wasm') {\n      // text/webassembly is not a proper MIME type, but CodeMirror uses it for WAT syntax highlighting.\n      // We generally use application/wasm, which is the correct MIME type for Wasm binary data.\n      return 'text/webassembly';\n    }\n    return mimeType;\n  }\n\n  protected async getLanguageSupport(content: string|CodeMirror.Text): Promise<CodeMirror.Extension> {\n    const mimeType = this.simplifyMimeType(content, this.contentType) || '';\n    const languageDesc = await CodeHighlighter.CodeHighlighter.languageFromMIME(mimeType);\n    if (!languageDesc) {\n      return [];\n    }\n    if (mimeType === 'text/jsx') {\n      return [\n        languageDesc,\n        CodeMirror.javascript.javascriptLanguage.data.of({autocomplete: CodeMirror.completeAnyWord}),\n      ];\n    }\n    return languageDesc;\n  }\n\n  async updateLanguageMode(content: string): Promise<void> {\n    const langExtension = await this.getLanguageSupport(content);\n    this.textEditor.dispatch({effects: config.language.reconfigure(langExtension)});\n  }\n\n  async setContent(content: string|CodeMirror.Text): Promise<void> {\n    this.muteChangeEventsForSetContent = true;\n    const {textEditor} = this;\n    const wasLoaded = this.loadedInternal;\n    const scrollTop = textEditor.editor.scrollDOM.scrollTop;\n    this.loadedInternal = true;\n\n    const languageSupport = await this.getLanguageSupport(content);\n    const editorState = CodeMirror.EditorState.create({\n      doc: content,\n      extensions: [\n        this.editorConfiguration(content),\n        languageSupport,\n        config.lineNumbers.of(this.getLineNumberFormatter()),\n        config.editable.of(this.editable ? [] : CodeMirror.EditorState.readOnly.of(true)),\n      ],\n    });\n    this.baseDoc = editorState.doc;\n    textEditor.editor.setState(editorState);\n    if (wasLoaded) {\n      textEditor.editor.scrollDOM.scrollTop = scrollTop;\n    }\n    this.wasShownOrLoaded();\n\n    if (this.delayedFindSearchMatches) {\n      this.delayedFindSearchMatches();\n      this.delayedFindSearchMatches = null;\n    }\n    this.muteChangeEventsForSetContent = false;\n  }\n\n  setSearchableView(view: UI.SearchableView.SearchableView|null): void {\n    this.searchableView = view;\n  }\n\n  private doFindSearchMatches(\n      searchConfig: UI.SearchableView.SearchConfig, shouldJump: boolean, jumpBackwards: boolean): void {\n    this.currentSearchResultIndex = -1;\n\n    this.searchRegex = searchConfig.toSearchRegex(true);\n    this.searchResults = this.collectRegexMatches(this.searchRegex);\n\n    if (this.searchableView) {\n      this.searchableView.updateSearchMatchesCount(this.searchResults.length);\n    }\n\n    const editor = this.textEditor;\n    if (!this.searchResults.length) {\n      if (editor.state.field(activeSearchState)) {\n        editor.dispatch({effects: setActiveSearch.of(null)});\n      }\n    } else if (shouldJump && jumpBackwards) {\n      this.jumpToPreviousSearchResult();\n    } else if (shouldJump) {\n      this.jumpToNextSearchResult();\n    } else {\n      editor.dispatch({effects: setActiveSearch.of(new ActiveSearch(this.searchRegex, null))});\n    }\n  }\n\n  performSearch(searchConfig: UI.SearchableView.SearchConfig, shouldJump: boolean, jumpBackwards?: boolean): void {\n    if (this.searchableView) {\n      this.searchableView.updateSearchMatchesCount(0);\n    }\n\n    this.resetSearch();\n    this.searchConfig = searchConfig;\n    if (this.loaded) {\n      this.doFindSearchMatches(searchConfig, shouldJump, Boolean(jumpBackwards));\n    } else {\n      this.delayedFindSearchMatches =\n          this.doFindSearchMatches.bind(this, searchConfig, shouldJump, Boolean(jumpBackwards));\n    }\n\n    void this.ensureContentLoaded();\n  }\n\n  private resetCurrentSearchResultIndex(): void {\n    if (!this.searchResults.length) {\n      return;\n    }\n    this.currentSearchResultIndex = -1;\n    if (this.searchableView) {\n      this.searchableView.updateCurrentMatchIndex(this.currentSearchResultIndex);\n    }\n    const editor = this.textEditor;\n    const currentActiveSearch = editor.state.field(activeSearchState);\n    if (currentActiveSearch && currentActiveSearch.currentRange) {\n      editor.dispatch({effects: setActiveSearch.of(new ActiveSearch(currentActiveSearch.regexp, null))});\n    }\n  }\n\n  private resetSearch(): void {\n    this.searchConfig = null;\n    this.delayedFindSearchMatches = null;\n    this.currentSearchResultIndex = -1;\n    this.searchResults = [];\n    this.searchRegex = null;\n  }\n\n  searchCanceled(): void {\n    const range = this.currentSearchResultIndex !== -1 ? this.searchResults[this.currentSearchResultIndex] : null;\n    this.resetSearch();\n    if (!this.loaded) {\n      return;\n    }\n    const editor = this.textEditor;\n    editor.dispatch({\n      effects: setActiveSearch.of(null),\n      selection: range ? {anchor: range.from, head: range.to} : undefined,\n      scrollIntoView: true,\n      userEvent: 'select.search.cancel',\n    });\n  }\n\n  jumpToLastSearchResult(): void {\n    this.jumpToSearchResult(this.searchResults.length - 1);\n  }\n\n  private searchResultIndexForCurrentSelection(): number {\n    return Platform.ArrayUtilities.lowerBound(\n        this.searchResults, this.textEditor.state.selection.main, (a, b): number => a.to - b.to);\n  }\n\n  jumpToNextSearchResult(): void {\n    const currentIndex = this.searchResultIndexForCurrentSelection();\n    const nextIndex = this.currentSearchResultIndex === -1 ? currentIndex : currentIndex + 1;\n    this.jumpToSearchResult(nextIndex);\n  }\n\n  jumpToPreviousSearchResult(): void {\n    const currentIndex = this.searchResultIndexForCurrentSelection();\n    this.jumpToSearchResult(currentIndex - 1);\n  }\n\n  supportsCaseSensitiveSearch(): boolean {\n    return true;\n  }\n\n  supportsRegexSearch(): boolean {\n    return true;\n  }\n\n  jumpToSearchResult(index: number): void {\n    if (!this.loaded || !this.searchResults.length || !this.searchRegex) {\n      return;\n    }\n    this.currentSearchResultIndex = (index + this.searchResults.length) % this.searchResults.length;\n    if (this.searchableView) {\n      this.searchableView.updateCurrentMatchIndex(this.currentSearchResultIndex);\n    }\n    const editor = this.textEditor;\n    const range = this.searchResults[this.currentSearchResultIndex];\n    editor.dispatch({\n      effects: setActiveSearch.of(new ActiveSearch(this.searchRegex, range)),\n      selection: {anchor: range.from, head: range.to},\n      scrollIntoView: true,\n      userEvent: 'select.search',\n    });\n  }\n\n  replaceSelectionWith(searchConfig: UI.SearchableView.SearchConfig, replacement: string): void {\n    const range = this.searchResults[this.currentSearchResultIndex];\n    if (!range) {\n      return;\n    }\n\n    const insert = this.searchRegex?.fromQuery ? range.insertPlaceholders(replacement) : replacement;\n    const editor = this.textEditor;\n    const changes = editor.state.changes({from: range.from, to: range.to, insert});\n    editor.dispatch(\n        {changes, selection: {anchor: changes.mapPos(editor.state.selection.main.to, 1)}, userEvent: 'input.replace'});\n  }\n\n  replaceAllWith(searchConfig: UI.SearchableView.SearchConfig, replacement: string): void {\n    this.resetCurrentSearchResultIndex();\n\n    const regex = searchConfig.toSearchRegex(true);\n    const ranges = this.collectRegexMatches(regex);\n    if (!ranges.length) {\n      return;\n    }\n\n    const isRegExp = regex.fromQuery;\n    const changes = ranges.map(\n        match =>\n            ({from: match.from, to: match.to, insert: isRegExp ? match.insertPlaceholders(replacement) : replacement}));\n\n    this.textEditor.dispatch({changes, scrollIntoView: true, userEvent: 'input.replace.all'});\n  }\n\n  private collectRegexMatches({regex}: UI.SearchableView.SearchRegexResult): SearchMatch[] {\n    const ranges = [];\n    let pos = 0;\n    for (const line of this.textEditor.state.doc.iterLines()) {\n      regex.lastIndex = 0;\n      for (;;) {\n        const match = regex.exec(line);\n        if (!match) {\n          break;\n        }\n        if (match[0].length) {\n          const from = pos + match.index;\n          ranges.push(new SearchMatch(from, from + match[0].length, match));\n        }\n      }\n      pos += line.length + 1;\n    }\n    return ranges;\n  }\n\n  canEditSource(): boolean {\n    return this.editable;\n  }\n\n  private updateSourcePosition(): void {\n    const {textEditor} = this, {state} = textEditor, {selection} = state;\n    if (this.displayedSelection?.eq(selection)) {\n      return;\n    }\n    this.displayedSelection = selection;\n\n    if (selection.ranges.length > 1) {\n      this.sourcePosition.setText(i18nString(UIStrings.dSelectionRegions, {PH1: selection.ranges.length}));\n      return;\n    }\n    const {main} = state.selection;\n    if (main.empty) {\n      const {lineNumber, columnNumber} = textEditor.toLineColumn(main.head);\n      const location = this.prettyToRawLocation(lineNumber, columnNumber);\n      if (this.wasmDisassemblyInternal) {\n        const disassembly = this.wasmDisassemblyInternal;\n        const lastBytecodeOffset = disassembly.lineNumberToBytecodeOffset(disassembly.lineNumbers - 1);\n        const bytecodeOffsetDigits = lastBytecodeOffset.toString(16).length;\n        const bytecodeOffset = disassembly.lineNumberToBytecodeOffset(location[0]);\n        this.sourcePosition.setText(i18nString(\n            UIStrings.bytecodePositionXs, {PH1: bytecodeOffset.toString(16).padStart(bytecodeOffsetDigits, '0')}));\n      } else {\n        this.sourcePosition.setText(i18nString(UIStrings.lineSColumnS, {PH1: location[0] + 1, PH2: location[1] + 1}));\n      }\n    } else {\n      const startLine = state.doc.lineAt(main.from), endLine = state.doc.lineAt(main.to);\n      if (startLine.number === endLine.number) {\n        this.sourcePosition.setText(i18nString(UIStrings.dCharactersSelected, {PH1: main.to - main.from}));\n      } else {\n        this.sourcePosition.setText(i18nString(\n            UIStrings.dLinesDCharactersSelected,\n            {PH1: endLine.number - startLine.number + 1, PH2: main.to - main.from}));\n      }\n    }\n  }\n\n  onContextMenu(event: MouseEvent): boolean {\n    event.consume(true);  // Consume event now to prevent document from handling the async menu\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    const {state} = this.textEditor;\n    const pos = state.selection.main.from, line = state.doc.lineAt(pos);\n    this.populateTextAreaContextMenu(contextMenu, line.number - 1, pos - line.from);\n    contextMenu.appendApplicableItems(this);\n    void contextMenu.show();\n    return true;\n  }\n\n  protected populateTextAreaContextMenu(_menu: UI.ContextMenu.ContextMenu, _lineNumber: number, _columnNumber: number):\n      void {\n  }\n\n  onLineGutterContextMenu(position: number, event: MouseEvent): boolean {\n    event.consume(true);  // Consume event now to prevent document from handling the async menu\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    const lineNumber = this.textEditor.state.doc.lineAt(position).number - 1;\n    this.populateLineGutterContextMenu(contextMenu, lineNumber);\n    contextMenu.appendApplicableItems(this);\n    void contextMenu.show();\n    return true;\n  }\n\n  protected populateLineGutterContextMenu(_menu: UI.ContextMenu.ContextMenu, _lineNumber: number): void {\n  }\n\n  focus(): void {\n    this.textEditor.focus();\n  }\n}\n\nclass SearchMatch {\n  constructor(readonly from: number, readonly to: number, readonly match: RegExpMatchArray) {\n  }\n\n  insertPlaceholders(replacement: string): string {\n    return replacement.replace(/\\$(\\$|&|\\d+|<[^>]+>)/g, (_, selector): string => {\n      if (selector === '$') {\n        return '$';\n      }\n      if (selector === '&') {\n        return this.match[0];\n      }\n      if (selector[0] === '<') {\n        return (this.match.groups && this.match.groups[selector.slice(1, selector.length - 1)]) || '';\n      }\n      return this.match[Number.parseInt(selector, 10)] || '';\n    });\n  }\n}\n\nexport interface Transformer {\n  editorLocationToUILocation(lineNumber: number, columnNumber: number): {\n    lineNumber: number,\n    columnNumber: number,\n  };\n  editorLocationToUILocation(lineNumber: number): {\n    lineNumber: number,\n    columnNumber: number|undefined,\n  };\n\n  uiLocationToEditorLocation(lineNumber: number, columnNumber?: number): {\n    lineNumber: number,\n    columnNumber: number,\n  };\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum DecoratorType {\n  PERFORMANCE = 'performance',\n  MEMORY = 'memory',\n  COVERAGE = 'coverage',\n}\n\nconst config = {\n  editable: new CodeMirror.Compartment(),\n  language: new CodeMirror.Compartment(),\n  lineNumbers: new CodeMirror.Compartment(),\n};\n\nclass ActiveSearch {\n  constructor(\n      readonly regexp: UI.SearchableView.SearchRegexResult, readonly currentRange: {from: number, to: number}|null) {\n  }\n\n  map(change: CodeMirror.ChangeDesc): ActiveSearch {\n    return change.empty || !this.currentRange ?\n        this :\n        new ActiveSearch(\n            this.regexp, {from: change.mapPos(this.currentRange.from), to: change.mapPos(this.currentRange.to)});\n  }\n\n  static eq(a: ActiveSearch|null, b: ActiveSearch|null): boolean {\n    return Boolean(\n        a === b ||\n        a && b && a.currentRange?.from === b.currentRange?.from && a.currentRange?.to === b.currentRange?.to &&\n            a.regexp.regex.source === b.regexp.regex.source && a.regexp.regex.flags === b.regexp.regex.flags);\n  }\n}\n\nconst setActiveSearch = CodeMirror.StateEffect.define<ActiveSearch|null>(\n    {map: (value, mapping): ActiveSearch | null => value && value.map(mapping)});\n\nconst activeSearchState = CodeMirror.StateField.define<ActiveSearch|null>({\n  create(): null {\n    return null;\n  },\n  update(state, tr): ActiveSearch |\n      null {\n        return tr.effects.reduce(\n            (state, effect) => effect.is(setActiveSearch) ? effect.value : state, state && state.map(tr.changes));\n      },\n});\n\nconst searchMatchDeco = CodeMirror.Decoration.mark({class: 'cm-searchMatch'});\nconst currentSearchMatchDeco = CodeMirror.Decoration.mark({class: 'cm-searchMatch cm-searchMatch-selected'});\n\nconst searchHighlighter = CodeMirror.ViewPlugin.fromClass(class {\n  decorations: CodeMirror.DecorationSet;\n\n  constructor(view: CodeMirror.EditorView) {\n    this.decorations = this.computeDecorations(view);\n  }\n\n  update(update: CodeMirror.ViewUpdate): void {\n    const active = update.state.field(activeSearchState);\n    if (!ActiveSearch.eq(active, update.startState.field(activeSearchState)) ||\n        (active && (update.viewportChanged || update.docChanged))) {\n      this.decorations = this.computeDecorations(update.view);\n    }\n  }\n\n  private computeDecorations(view: CodeMirror.EditorView): CodeMirror.DecorationSet {\n    const active = view.state.field(activeSearchState);\n    if (!active) {\n      return CodeMirror.Decoration.none;\n    }\n\n    const builder = new CodeMirror.RangeSetBuilder<CodeMirror.Decoration>();\n    const {doc} = view.state;\n    for (const {from, to} of view.visibleRanges) {\n      let pos = from;\n      for (const part of doc.iterRange(from, to)) {\n        if (part !== '\\n') {\n          active.regexp.regex.lastIndex = 0;\n          for (;;) {\n            const match = active.regexp.regex.exec(part);\n            if (!match) {\n              break;\n            }\n            const start = pos + match.index, end = start + match[0].length;\n            const current = active.currentRange && active.currentRange.from === start && active.currentRange.to === end;\n            builder.add(start, end, current ? currentSearchMatchDeco : searchMatchDeco);\n          }\n        }\n        pos += part.length;\n      }\n    }\n    return builder.finish();\n  }\n}, {decorations: (value): CodeMirror.DecorationSet => value.decorations});\n\nconst nonBreakableLineMark = new (class extends CodeMirror.GutterMarker {\n  elementClass = 'cm-nonBreakableLine';\n})();\n\n// Effect to add lines (by position) to the set of non-breakable lines.\nexport const addNonBreakableLines = CodeMirror.StateEffect.define<readonly number[]>();\n\nconst nonBreakableLines = CodeMirror.StateField.define<CodeMirror.RangeSet<CodeMirror.GutterMarker>>({\n  create(): CodeMirror.RangeSet<CodeMirror.GutterMarker> {\n    return CodeMirror.RangeSet.empty;\n  },\n  update(deco, tr): CodeMirror.RangeSet<CodeMirror.GutterMarker> {\n    return tr.effects.reduce((deco, effect) => {\n      return !effect.is(addNonBreakableLines) ?\n          deco :\n          deco.update({add: effect.value.map(pos => nonBreakableLineMark.range(pos))});\n    }, deco.map(tr.changes));\n  },\n  provide: field => CodeMirror.lineNumberMarkers.from(field),\n});\n\nexport function isBreakableLine(state: CodeMirror.EditorState, line: CodeMirror.Line): boolean {\n  const nonBreakable = state.field(nonBreakableLines);\n  if (!nonBreakable.size) {\n    return true;\n  }\n  let found = false;\n  nonBreakable.between(line.from, line.from, () => {\n    found = true;\n  });\n  return !found;\n}\n\nfunction markNonBreakableLines(disassembly: Common.WasmDisassembly.WasmDisassembly): CodeMirror.Extension {\n  // Mark non-breakable lines in the Wasm disassembly after setting\n  // up the content for the text editor (which creates the gutter).\n  return nonBreakableLines.init(state => {\n    const marks = [];\n    for (const lineNumber of disassembly.nonBreakableLineNumbers()) {\n      if (lineNumber < state.doc.lines) {\n        marks.push(nonBreakableLineMark.range(state.doc.line(lineNumber + 1).from));\n      }\n    }\n    return CodeMirror.RangeSet.of(marks);\n  });\n}\n\nconst sourceFrameTheme = CodeMirror.EditorView.theme({\n  '&.cm-editor': {height: '100%'},\n  '.cm-scroller': {overflow: 'auto'},\n  '.cm-lineNumbers .cm-gutterElement.cm-nonBreakableLine': {color: 'var(--color-non-breakable-line)'},\n  '.cm-searchMatch': {\n    border: '1px solid var(--color-search-match-border)',\n    borderRadius: '3px',\n    margin: '0 -1px',\n    '&.cm-searchMatch-selected': {\n      borderRadius: '1px',\n      backgroundColor: 'var(--color-selected-search-match-background)',\n      borderColor: 'var(--color-selected-search-match-background)',\n      '&, & *': {\n        color: 'var(--color-selected-search-match) !important',\n      },\n    },\n  },\n  ':host-context(.pretty-printed) & .cm-lineNumbers .cm-gutterElement': {\n    color: 'var(--legacy-accent-color)',\n  },\n});\n"],
  "mappings": "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",
  "names": []
}
