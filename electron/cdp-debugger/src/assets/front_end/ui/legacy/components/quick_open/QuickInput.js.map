{
  "version": 3,
  "sources": ["../../../../../../../../front_end/ui/legacy/components/quick_open/QuickInput.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\n\nimport {Events as FilteredListWidgetEvents, FilteredListWidget, Provider} from './FilteredListWidget.js';\n\nconst UIStrings = {\n  /**\n  * @description Prompt for free-form input in the QuickInput dialog; Enter and Escape here are keyboard buttons and should be localized as appropriate.\n  * @example {Provide some information.} PH1\n  */\n  pressEnterToConfirmOrEscapeTo: '{PH1} (Press \\'Enter\\' to confirm or \\'Escape\\' to cancel.)',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/components/quick_open/QuickInput.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport interface QuickInputOptions {\n  prompt: string;\n  placeHolder?: string;\n  value?: string;\n  valueSelection?: number[];\n}\n\nexport class QuickInput {\n  private constructor() {\n    throw new ReferenceError('Instance type not implemented.');\n  }\n\n  static show(options: QuickInputOptions): Promise<string|void> {\n    let canceledPromise = new Promise<void>(_r => {});  // Intentionally creates an unresolved promise\n    const fulfilledPromise = new Promise<string>(resolve => {\n      const provider = new QuickInputProvider(options, resolve);\n      const widget = new FilteredListWidget(provider);\n\n      if (options.placeHolder) {\n        widget.setHintElement(options.placeHolder);\n      }\n\n      widget.setPromptTitle(options.placeHolder || options.prompt);\n      widget.showAsDialog(options.prompt);\n      canceledPromise = widget.once(FilteredListWidgetEvents.Hidden);\n\n      widget.setQuery(options.value || '');\n      if (options.valueSelection) {\n        widget.setQuerySelectedRange(options.valueSelection[0], options.valueSelection[1]);\n      }\n    });\n\n    return Promise.race([fulfilledPromise, canceledPromise]).then(values => {\n      // If it was fulfilled, then `result` will have a value.\n      // If it was canceled, then `result` will be undefined.\n      // Either way, it has the value that we want.\n      return values;\n    });\n  }\n}\n\nclass QuickInputProvider extends Provider {\n  private readonly options: QuickInputOptions;\n  private readonly resolve: Function;\n  constructor(options: QuickInputOptions, resolve: Function) {\n    super();\n    this.options = options;\n    this.resolve = resolve;\n  }\n\n  notFoundText(): string {\n    return i18nString(UIStrings.pressEnterToConfirmOrEscapeTo, {PH1: this.options.prompt});\n  }\n\n  selectItem(_itemIndex: number|null, promptValue: string): void {\n    this.resolve(promptValue);\n  }\n}\n"],
  "mappings": "AAIA;AAEA;AAEA,MAAM,YAAY;AAAA,EAKhB,+BAA+B;AAAA;AAEjC,MAAM,OAAO,KAAK,KAAK,kBAAkB,iDAAiD;AAC1F,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAQzD,wBAAiB;AAAA,EACd,cAAc;AACpB,UAAM,IAAI,eAAe;AAAA;AAAA,SAGpB,KAAK,SAAkD;AAC5D,QAAI,kBAAkB,IAAI,QAAc,QAAM;AAAA;AAC9C,UAAM,mBAAmB,IAAI,QAAgB,aAAW;AACtD,YAAM,WAAW,IAAI,mBAAmB,SAAS;AACjD,YAAM,SAAS,IAAI,mBAAmB;AAEtC,UAAI,QAAQ,aAAa;AACvB,eAAO,eAAe,QAAQ;AAAA;AAGhC,aAAO,eAAe,QAAQ,eAAe,QAAQ;AACrD,aAAO,aAAa,QAAQ;AAC5B,wBAAkB,OAAO,KAAK,yBAAyB;AAEvD,aAAO,SAAS,QAAQ,SAAS;AACjC,UAAI,QAAQ,gBAAgB;AAC1B,eAAO,sBAAsB,QAAQ,eAAe,IAAI,QAAQ,eAAe;AAAA;AAAA;AAInF,WAAO,QAAQ,KAAK,CAAC,kBAAkB,kBAAkB,KAAK,YAAU;AAItE,aAAO;AAAA;AAAA;AAAA;AAKb,iCAAiC,SAAS;AAAA,EACvB;AAAA,EACA;AAAA,EACjB,YAAY,SAA4B,SAAmB;AACzD;AACA,SAAK,UAAU;AACf,SAAK,UAAU;AAAA;AAAA,EAGjB,eAAuB;AACrB,WAAO,WAAW,UAAU,+BAA+B,EAAC,KAAK,KAAK,QAAQ;AAAA;AAAA,EAGhF,WAAW,YAAyB,aAA2B;AAC7D,SAAK,QAAQ;AAAA;AAAA;",
  "names": []
}
