{
  "version": 3,
  "sources": ["../../../../../../../../front_end/ui/legacy/components/color_picker/ContrastDetails.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as Host from '../../../../core/host/host.js';\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as Platform from '../../../../core/platform/platform.js';\nimport * as Root from '../../../../core/root/root.js';\nimport * as UI from '../../legacy.js';\n\nimport type {ContrastInfo} from './ContrastInfo.js';\nimport {Events as ContrastInfoEvents} from './ContrastInfo.js';\n\nconst UIStrings = {\n  /**\n  *@description Label for when no contrast information is available in the color picker\n  */\n  noContrastInformationAvailable: 'No contrast information available',\n  /**\n  *@description Text of a DOM element in Contrast Details of the Color Picker\n  */\n  contrastRatio: 'Contrast ratio',\n  /**\n  *@description Text to show more content\n  */\n  showMore: 'Show more',\n  /**\n  *@description Choose bg color text content in Contrast Details of the Color Picker\n  */\n  pickBackgroundColor: 'Pick background color',\n  /**\n  *@description Tooltip text that appears when hovering over largeicon eyedropper button in Contrast Details of the Color Picker\n  */\n  toggleBackgroundColorPicker: 'Toggle background color picker',\n  /**\n  *@description Text of a button in Contrast Details of the Color Picker\n  *@example {rgba(0 0 0 / 100%) } PH1\n  */\n  useSuggestedColorStoFixLow: 'Use suggested color {PH1}to fix low contrast',\n  /**\n  *@description Label for the APCA contrast in Color Picker\n  */\n  apca: 'APCA',\n  /**\n  *@description Label aa text content in Contrast Details of the Color Picker\n  */\n  aa: 'AA',\n  /**\n  *@description Text that starts with a colon and includes a placeholder\n  *@example {3.0} PH1\n  */\n  placeholderWithColon: ': {PH1}',\n  /**\n  *@description Label aaa text content in Contrast Details of the Color Picker\n  */\n  aaa: 'AAA',\n  /**\n  *@description Text to show less content\n  */\n  showLess: 'Show less',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/components/color_picker/ContrastDetails.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class ContrastDetails extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  private contrastInfo: ContrastInfo;\n  private readonly elementInternal: HTMLElement;\n  private readonly toggleMainColorPicker:\n      (arg0?: boolean|undefined, arg1?: Common.EventTarget.EventTargetEvent<unknown>|undefined) => void;\n  private readonly expandedChangedCallback: () => void;\n  private readonly colorSelectedCallback: (arg0: Common.Color.Color) => void;\n  private expandedInternal: boolean;\n  private passesAA: boolean;\n  private contrastUnknown: boolean;\n  private visibleInternal: boolean;\n  private readonly noContrastInfoAvailable: Element;\n  private readonly contrastValueBubble: HTMLElement;\n  private contrastValue: HTMLElement;\n  private readonly contrastValueBubbleIcons: Node[];\n  private readonly expandButton: UI.Toolbar.ToolbarButton;\n  private readonly expandedDetails: HTMLElement;\n  private readonly contrastThresholds: HTMLElement;\n  private readonly contrastAA: HTMLElement;\n  private contrastPassFailAA: HTMLElement;\n  private readonly contrastAAA: HTMLElement;\n  private contrastPassFailAAA: HTMLElement;\n  private readonly contrastAPCA: HTMLElement;\n  private contrastPassFailAPCA: HTMLElement;\n  private readonly chooseBgColor: HTMLElement;\n  private bgColorPickerButton: UI.Toolbar.ToolbarToggle;\n  private readonly bgColorPickedBound:\n      (event: Common.EventTarget.EventTargetEvent<Host.InspectorFrontendHostAPI.EyeDropperPickedColorEvent>) => void;\n  private readonly bgColorSwatch: Swatch;\n  constructor(\n      contrastInfo: ContrastInfo, contentElement: Element,\n      toggleMainColorPickerCallback:\n          (arg0?: boolean|undefined, arg1?: Common.EventTarget.EventTargetEvent<unknown>|undefined) => void,\n      expandedChangedCallback: () => void, colorSelectedCallback: (arg0: Common.Color.Color) => void) {\n    super();\n    this.contrastInfo = contrastInfo;\n    this.elementInternal = contentElement.createChild('div', 'spectrum-contrast-details collapsed') as HTMLElement;\n\n    this.toggleMainColorPicker = toggleMainColorPickerCallback;\n\n    this.expandedChangedCallback = expandedChangedCallback;\n\n    this.colorSelectedCallback = colorSelectedCallback;\n\n    this.expandedInternal = false;\n\n    this.passesAA = true;\n\n    this.contrastUnknown = false;\n\n    // This will not be visible if we don't get ContrastInfo,\n    // e.g. for a non-font color property such as border-color.\n    this.visibleInternal = false;\n\n    // No contrast info message is created to show if it's not possible to provide the extended details.\n\n    this.noContrastInfoAvailable = contentElement.createChild('div', 'no-contrast-info-available');\n    this.noContrastInfoAvailable.textContent = i18nString(UIStrings.noContrastInformationAvailable);\n    this.noContrastInfoAvailable.classList.add('hidden');\n\n    const contrastValueRow = this.elementInternal.createChild('div');\n    contrastValueRow.addEventListener('click', this.topRowClicked.bind(this));\n    const contrastValueRowContents = contrastValueRow.createChild('div', 'container');\n    UI.UIUtils.createTextChild(contrastValueRowContents, i18nString(UIStrings.contrastRatio));\n\n    this.contrastValueBubble = contrastValueRowContents.createChild('span', 'contrast-details-value');\n    this.contrastValue = this.contrastValueBubble.createChild('span');\n    this.contrastValueBubbleIcons = [];\n    this.contrastValueBubbleIcons.push(\n        this.contrastValueBubble.appendChild(UI.Icon.Icon.create('smallicon-checkmark-square')));\n    this.contrastValueBubbleIcons.push(\n        this.contrastValueBubble.appendChild(UI.Icon.Icon.create('smallicon-checkmark-behind')));\n    this.contrastValueBubbleIcons.push(this.contrastValueBubble.appendChild(UI.Icon.Icon.create('smallicon-no')));\n    this.contrastValueBubbleIcons.forEach(button => button.addEventListener('click', (event: Event) => {\n      ContrastDetails.showHelp();\n      event.consume(false);\n    }));\n\n    const expandToolbar = new UI.Toolbar.Toolbar('expand', contrastValueRowContents);\n    this.expandButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.showMore), 'smallicon-expand-more');\n    this.expandButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.expandButtonClicked.bind(this));\n    UI.ARIAUtils.setExpanded(this.expandButton.element, false);\n    expandToolbar.appendToolbarItem(this.expandButton);\n\n    this.expandedDetails = this.elementInternal.createChild('div', 'expanded-details');\n    UI.ARIAUtils.setControls(this.expandButton.element, this.expandedDetails);\n\n    this.contrastThresholds = this.expandedDetails.createChild('div', 'contrast-thresholds');\n\n    this.contrastAA = this.contrastThresholds.createChild('div', 'contrast-threshold');\n    this.contrastPassFailAA = this.contrastAA.createChild('div', 'contrast-pass-fail');\n\n    this.contrastAAA = this.contrastThresholds.createChild('div', 'contrast-threshold');\n    this.contrastPassFailAAA = this.contrastAAA.createChild('div', 'contrast-pass-fail');\n\n    this.contrastAPCA = this.contrastThresholds.createChild('div', 'contrast-threshold');\n    this.contrastPassFailAPCA = this.contrastAPCA.createChild('div', 'contrast-pass-fail');\n\n    this.chooseBgColor = this.expandedDetails.createChild('div', 'contrast-choose-bg-color');\n    this.chooseBgColor.textContent = i18nString(UIStrings.pickBackgroundColor);\n\n    const bgColorContainer = this.expandedDetails.createChild('div', 'background-color');\n\n    const pickerToolbar = new UI.Toolbar.Toolbar('spectrum-eye-dropper', bgColorContainer);\n    this.bgColorPickerButton =\n        new UI.Toolbar.ToolbarToggle(i18nString(UIStrings.toggleBackgroundColorPicker), 'largeicon-eyedropper');\n    this.bgColorPickerButton.addEventListener(\n        UI.Toolbar.ToolbarButton.Events.Click, this.toggleBackgroundColorPickerInternal.bind(this, undefined, true));\n    pickerToolbar.appendToolbarItem(this.bgColorPickerButton);\n    this.bgColorPickedBound = this.bgColorPicked.bind(this);\n\n    this.bgColorSwatch = new Swatch(bgColorContainer);\n\n    this.contrastInfo.addEventListener(ContrastInfoEvents.ContrastInfoUpdated, this.update.bind(this));\n  }\n\n  private showNoContrastInfoAvailableMessage(): void {\n    this.noContrastInfoAvailable.classList.remove('hidden');\n  }\n\n  private hideNoContrastInfoAvailableMessage(): void {\n    this.noContrastInfoAvailable.classList.add('hidden');\n  }\n\n  private computeSuggestedColor(threshold: string): Common.Color.Color|null|undefined {\n    const fgColor = this.contrastInfo.color();\n    const bgColor = this.contrastInfo.bgColor();\n    if (!fgColor || !bgColor) {\n      return;\n    }\n\n    if (threshold === 'APCA') {\n      const requiredContrast = this.contrastInfo.contrastRatioAPCAThreshold();\n      if (requiredContrast === null) {\n        return;\n      }\n      // We add 1% to the min required contrast to make sure we are over the limit.\n      return Common.Color.Color.findFgColorForContrastAPCA(fgColor, bgColor, requiredContrast + 1);\n    }\n\n    const requiredContrast = this.contrastInfo.contrastRatioThreshold(threshold);\n    if (!requiredContrast) {\n      return;\n    }\n\n    // We add a bit to the required contrast to make sure we are over the limit.\n    return Common.Color.Color.findFgColorForContrast(fgColor, bgColor, requiredContrast + 0.1);\n  }\n\n  private onSuggestColor(threshold: string): void {\n    const color = this.computeSuggestedColor(threshold);\n    if (color) {\n      this.colorSelectedCallback(color);\n    }\n  }\n\n  private createFixColorButton(parent: Element, suggestedColor: Common.Color.Color): HTMLElement {\n    const button = parent.createChild('button', 'contrast-fix-button') as HTMLElement;\n    const originalColorFormat = this.contrastInfo.colorFormat();\n    const colorFormat = originalColorFormat && originalColorFormat !== Common.Color.Format.Nickname &&\n            originalColorFormat !== Common.Color.Format.Original ?\n        originalColorFormat :\n        Common.Color.Format.HEXA;\n    const formattedColor = suggestedColor.asString(colorFormat);\n    const suggestedColorString = formattedColor ? formattedColor + ' ' : '';\n    const label = i18nString(UIStrings.useSuggestedColorStoFixLow, {PH1: suggestedColorString});\n    UI.ARIAUtils.setAccessibleName(button, label);\n    UI.Tooltip.Tooltip.install(button, label);\n    button.tabIndex = 0;\n    button.style.backgroundColor = suggestedColorString;\n    return button;\n  }\n\n  private update(): void {\n    if (this.contrastInfo.isNull()) {\n      this.showNoContrastInfoAvailableMessage();\n      this.setVisible(false);\n      return;\n    }\n\n    this.setVisible(true);\n    this.hideNoContrastInfoAvailableMessage();\n\n    const isAPCAEnabled = Root.Runtime.experiments.isEnabled('APCA');\n\n    const fgColor = this.contrastInfo.color();\n    const bgColor = this.contrastInfo.bgColor();\n\n    if (isAPCAEnabled) {\n      const apcaContrastRatio = this.contrastInfo.contrastRatioAPCA();\n\n      if (apcaContrastRatio === null || !bgColor || !fgColor) {\n        this.contrastUnknown = true;\n        this.contrastValue.textContent = '';\n        this.contrastValueBubble.classList.add('contrast-unknown');\n        this.chooseBgColor.classList.remove('hidden');\n        this.contrastThresholds.classList.add('hidden');\n        this.showNoContrastInfoAvailableMessage();\n        return;\n      }\n\n      this.contrastUnknown = false;\n      this.chooseBgColor.classList.add('hidden');\n      this.contrastThresholds.classList.remove('hidden');\n      this.contrastValueBubble.classList.remove('contrast-unknown');\n      this.contrastValue.textContent = `${Platform.NumberUtilities.floor(apcaContrastRatio, 2)}%`;\n\n      const apcaThreshold = this.contrastInfo.contrastRatioAPCAThreshold();\n      const passesAPCA = apcaContrastRatio && apcaThreshold ? Math.abs(apcaContrastRatio) >= apcaThreshold : false;\n      this.contrastPassFailAPCA.removeChildren();\n      const labelAPCA = this.contrastPassFailAPCA.createChild('span', 'contrast-link-label');\n      labelAPCA.textContent = i18nString(UIStrings.apca);\n      if (apcaThreshold !== null) {\n        this.contrastPassFailAPCA.createChild('span').textContent = `: ${apcaThreshold.toFixed(2)}%`;\n      }\n      if (passesAPCA) {\n        this.contrastPassFailAPCA.appendChild(UI.Icon.Icon.create('smallicon-checkmark-square'));\n      } else {\n        this.contrastPassFailAPCA.appendChild(UI.Icon.Icon.create('smallicon-no'));\n        const suggestedColor = this.computeSuggestedColor('APCA');\n        if (suggestedColor) {\n          const fixAPCA = this.createFixColorButton(this.contrastPassFailAPCA, suggestedColor);\n          fixAPCA.addEventListener('click', () => this.onSuggestColor('APCA'));\n        }\n      }\n      labelAPCA.addEventListener('click', (_event: Event) => ContrastDetails.showHelp());\n      this.elementInternal.classList.toggle('contrast-fail', !passesAPCA);\n      this.contrastValueBubble.classList.toggle('contrast-aa', passesAPCA);\n      return;\n    }\n\n    const contrastRatio = this.contrastInfo.contrastRatio();\n\n    if (!contrastRatio || !bgColor || !fgColor) {\n      this.contrastUnknown = true;\n      this.contrastValue.textContent = '';\n      this.contrastValueBubble.classList.add('contrast-unknown');\n      this.chooseBgColor.classList.remove('hidden');\n      this.contrastThresholds.classList.add('hidden');\n      this.showNoContrastInfoAvailableMessage();\n      return;\n    }\n\n    this.contrastUnknown = false;\n    this.chooseBgColor.classList.add('hidden');\n    this.contrastThresholds.classList.remove('hidden');\n    this.contrastValueBubble.classList.remove('contrast-unknown');\n    this.contrastValue.textContent = String(Platform.NumberUtilities.floor(contrastRatio, 2));\n\n    this.bgColorSwatch.setColors(fgColor, bgColor);\n\n    // In greater then comparisons we can substite null with 0.\n    const aa = this.contrastInfo.contrastRatioThreshold('aa') || 0;\n    this.passesAA = (this.contrastInfo.contrastRatio() || 0) >= aa;\n    this.contrastPassFailAA.removeChildren();\n    const labelAA = this.contrastPassFailAA.createChild('span', 'contrast-link-label');\n    labelAA.textContent = i18nString(UIStrings.aa);\n    this.contrastPassFailAA.createChild('span').textContent =\n        i18nString(UIStrings.placeholderWithColon, {PH1: aa.toFixed(1)});\n    if (this.passesAA) {\n      this.contrastPassFailAA.appendChild(UI.Icon.Icon.create('smallicon-checkmark-square'));\n    } else {\n      this.contrastPassFailAA.appendChild(UI.Icon.Icon.create('smallicon-no'));\n      const suggestedColor = this.computeSuggestedColor('aa');\n      if (suggestedColor) {\n        const fixAA = this.createFixColorButton(this.contrastPassFailAA, suggestedColor);\n        fixAA.addEventListener('click', () => this.onSuggestColor('aa'));\n      }\n    }\n\n    // In greater then comparisons we can substite null with 0.\n    const aaa = this.contrastInfo.contrastRatioThreshold('aaa') || 0;\n    const passesAAA = (this.contrastInfo.contrastRatio() || 0) >= aaa;\n    this.contrastPassFailAAA.removeChildren();\n    const labelAAA = this.contrastPassFailAAA.createChild('span', 'contrast-link-label');\n    labelAAA.textContent = i18nString(UIStrings.aaa);\n    this.contrastPassFailAAA.createChild('span').textContent =\n        i18nString(UIStrings.placeholderWithColon, {PH1: aaa.toFixed(1)});\n    if (passesAAA) {\n      this.contrastPassFailAAA.appendChild(UI.Icon.Icon.create('smallicon-checkmark-square'));\n    } else {\n      this.contrastPassFailAAA.appendChild(UI.Icon.Icon.create('smallicon-no'));\n      const suggestedColor = this.computeSuggestedColor('aaa');\n      if (suggestedColor) {\n        const fixAAA = this.createFixColorButton(this.contrastPassFailAAA, suggestedColor);\n        fixAAA.addEventListener('click', () => this.onSuggestColor('aaa'));\n      }\n    }\n\n    [labelAA, labelAAA].forEach(e => e.addEventListener('click', () => ContrastDetails.showHelp()));\n\n    this.elementInternal.classList.toggle('contrast-fail', !this.passesAA);\n    this.contrastValueBubble.classList.toggle('contrast-aa', this.passesAA);\n    this.contrastValueBubble.classList.toggle('contrast-aaa', passesAAA);\n  }\n\n  private static showHelp(): void {\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.openInNewTab(UI.UIUtils.addReferrerToURL(\n        'https://web.dev/color-and-contrast-accessibility/' as Platform.DevToolsPath.UrlString));\n  }\n\n  setVisible(visible: boolean): void {\n    this.visibleInternal = visible;\n    this.elementInternal.classList.toggle('hidden', !visible);\n  }\n\n  visible(): boolean {\n    return this.visibleInternal;\n  }\n\n  element(): HTMLElement {\n    return this.elementInternal;\n  }\n\n  private expandButtonClicked(): void {\n    const selection = this.contrastValueBubble.getComponentSelection();\n    if (selection) {\n      selection.empty();\n    }\n    this.toggleExpanded();\n  }\n\n  private topRowClicked(event: Event): void {\n    const selection = this.contrastValueBubble.getComponentSelection();\n    if (selection) {\n      selection.empty();\n    }\n    this.toggleExpanded();\n    event.consume(true);\n  }\n\n  private toggleExpanded(): void {\n    this.expandedInternal = !this.expandedInternal;\n    UI.ARIAUtils.setExpanded(this.expandButton.element, this.expandedInternal);\n    this.elementInternal.classList.toggle('collapsed', !this.expandedInternal);\n    if (this.expandedInternal) {\n      this.toggleMainColorPicker(false);\n      this.expandButton.setGlyph('smallicon-expand-less');\n      this.expandButton.setTitle(i18nString(UIStrings.showLess));\n      if (this.contrastUnknown) {\n        this.toggleBackgroundColorPickerInternal(true);\n      }\n    } else {\n      this.toggleBackgroundColorPickerInternal(false);\n      this.expandButton.setGlyph('smallicon-expand-more');\n      this.expandButton.setTitle(i18nString(UIStrings.showMore));\n    }\n    this.expandedChangedCallback();\n  }\n\n  collapse(): void {\n    this.elementInternal.classList.remove('expanded');\n    this.toggleBackgroundColorPickerInternal(false);\n    this.toggleMainColorPicker(false);\n  }\n\n  expanded(): boolean {\n    return this.expandedInternal;\n  }\n\n  backgroundColorPickerEnabled(): boolean {\n    return this.bgColorPickerButton.toggled();\n  }\n\n  toggleBackgroundColorPicker(enabled: boolean): void {\n    this.toggleBackgroundColorPickerInternal(enabled, false);\n  }\n\n  private toggleBackgroundColorPickerInternal(enabled?: boolean, shouldTriggerEvent: boolean|undefined = true): void {\n    if (enabled === undefined) {\n      enabled = !this.bgColorPickerButton.toggled();\n    }\n    this.bgColorPickerButton.setToggled(enabled);\n\n    if (shouldTriggerEvent) {\n      this.dispatchEventToListeners(Events.BackgroundColorPickerWillBeToggled, enabled);\n    }\n\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.setEyeDropperActive(enabled);\n    if (enabled) {\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n          Host.InspectorFrontendHostAPI.Events.EyeDropperPickedColor, this.bgColorPickedBound);\n    } else {\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.removeEventListener(\n          Host.InspectorFrontendHostAPI.Events.EyeDropperPickedColor, this.bgColorPickedBound);\n    }\n  }\n\n  private bgColorPicked({\n    data: rgbColor,\n  }: Common.EventTarget.EventTargetEvent<Host.InspectorFrontendHostAPI.EyeDropperPickedColorEvent>): void {\n    const rgba = [rgbColor.r, rgbColor.g, rgbColor.b, (rgbColor.a / 2.55 | 0) / 100];\n    const color = Common.Color.Color.fromRGBA(rgba);\n    this.contrastInfo.setBgColor(color);\n    this.toggleBackgroundColorPickerInternal(false);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.bringToFront();\n  }\n}\n\nexport const enum Events {\n  BackgroundColorPickerWillBeToggled = 'BackgroundColorPickerWillBeToggled',\n}\n\nexport type EventTypes = {\n  [Events.BackgroundColorPickerWillBeToggled]: boolean,\n};\n\nexport class Swatch {\n  private readonly parentElement: Element;\n  private readonly swatchElement: Element;\n  private swatchInnerElement: HTMLElement;\n  private textPreview: HTMLElement;\n  constructor(parentElement: Element) {\n    this.parentElement = parentElement;\n    this.swatchElement = parentElement.createChild('span', 'swatch contrast swatch-inner-white');\n    this.swatchInnerElement = this.swatchElement.createChild('span', 'swatch-inner') as HTMLElement;\n    this.textPreview = this.swatchElement.createChild('div', 'text-preview') as HTMLElement;\n    this.textPreview.textContent = 'Aa';\n  }\n\n  setColors(fgColor: Common.Color.Color, bgColor: Common.Color.Color): void {\n    this.textPreview.style.color = fgColor.asString(Common.Color.Format.RGBA) as string;\n    this.swatchInnerElement.style.backgroundColor = bgColor.asString(Common.Color.Format.RGBA) as string;\n    // Show border if the swatch is white.\n    this.swatchElement.classList.toggle('swatch-inner-white', bgColor.hsla()[2] > 0.9);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
