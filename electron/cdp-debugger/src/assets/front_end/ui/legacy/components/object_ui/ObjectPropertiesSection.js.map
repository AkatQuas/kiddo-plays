{
  "version": 3,
  "sources": ["../../../../../../../../front_end/ui/legacy/components/object_ui/ObjectPropertiesSection.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2008 Apple Inc. All Rights Reserved.\n * Copyright (C) 2009 Joseph Pecoraro\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../../../core/common/common.js';\nimport type * as Components from '../utils/utils.js';\nimport * as Host from '../../../../core/host/host.js';\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as LinearMemoryInspector from '../../../components/linear_memory_inspector/linear_memory_inspector.js';\nimport * as Platform from '../../../../core/platform/platform.js';\nimport * as SDK from '../../../../core/sdk/sdk.js';\nimport * as TextUtils from '../../../../models/text_utils/text_utils.js';\nimport * as JavaScriptMetaData from '../../../../models/javascript_metadata/javascript_metadata.js';\nimport * as IconButton from '../../../components/icon_button/icon_button.js';\nimport * as TextEditor from '../../../components/text_editor/text_editor.js';\nimport * as UI from '../../legacy.js';\n\nimport {CustomPreviewComponent} from './CustomPreviewComponent.js';\nimport {JavaScriptREPL} from './JavaScriptREPL.js';\nimport {createSpansForNodeTitle, RemoteObjectPreviewFormatter} from './RemoteObjectPreviewFormatter.js';\nimport objectValueStyles from './objectValue.css.js';\nimport objectPropertiesSectionStyles from './objectPropertiesSection.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Object Properties Section\n  *@example {function alert()  [native code] } PH1\n  */\n  exceptionS: '[Exception: {PH1}]',\n  /**\n  *@description Text in Object Properties Section\n  */\n  unknown: 'unknown',\n  /**\n  *@description Text to expand something recursively\n  */\n  expandRecursively: 'Expand recursively',\n  /**\n  *@description Text to collapse children of a parent group\n  */\n  collapseChildren: 'Collapse children',\n  /**\n  *@description Text in Object Properties Section\n  */\n  noProperties: 'No properties',\n  /**\n  *@description Element text content in Object Properties Section\n  */\n  dots: '(...)',\n  /**\n  *@description Element title in Object Properties Section\n  */\n  invokePropertyGetter: 'Invoke property getter',\n  /**\n  *@description Show all text content in Show More Data Grid Node of a data grid\n  *@example {50} PH1\n  */\n  showAllD: 'Show all {PH1}',\n  /**\n  *@description Value element text content in Object Properties Section. Shown when the developer is\n  *viewing a JavaScript object, but one of the properties is not readable and therefore can't be\n  *displayed. This string should be translated.\n  */\n  unreadable: '<unreadable>',\n  /**\n  *@description Value element title in Object Properties Section\n  */\n  noPropertyGetter: 'No property getter',\n  /**\n  *@description A context menu item in the Watch Expressions Sidebar Pane of the Sources panel and Network pane request.\n  */\n  copyValue: 'Copy value',\n  /**\n  *@description A context menu item in the Object Properties Section\n  */\n  copyPropertyPath: 'Copy property path',\n  /**\n  * @description Text shown when displaying a JavaScript object that has a string property that is\n  * too large for DevTools to properly display a text editor. This is shown instead of the string in\n  * question. Should be translated.\n  */\n  stringIsTooLargeToEdit: '<string is too large to edit>',\n  /**\n  *@description Text of attribute value when text is too long\n  *@example {30 MB} PH1\n  */\n  showMoreS: 'Show more ({PH1})',\n  /**\n  *@description Text of attribute value when text is too long\n  *@example {30 MB} PH1\n  */\n  longTextWasTruncatedS: 'long text was truncated ({PH1})',\n  /**\n  *@description Text for copying\n  */\n  copy: 'Copy',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/components/object_ui/ObjectPropertiesSection.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst EXPANDABLE_MAX_LENGTH = 50;\nconst EXPANDABLE_MAX_DEPTH = 100;\n\nconst parentMap = new WeakMap<SDK.RemoteObject.RemoteObjectProperty, SDK.RemoteObject.RemoteObject|null>();\nconst objectPropertiesSectionMap = new WeakMap<Element, ObjectPropertiesSection>();\nconst domPinnedProperties =\n    JavaScriptMetaData.JavaScriptMetadata.JavaScriptMetadataImpl.domPinnedProperties.DOMPinnedProperties;\n\nexport const getObjectPropertiesSectionFrom = (element: Element): ObjectPropertiesSection|undefined => {\n  return objectPropertiesSectionMap.get(element);\n};\n\nexport class ObjectPropertiesSection extends UI.TreeOutline.TreeOutlineInShadow {\n  private readonly object: SDK.RemoteObject.RemoteObject;\n  editable: boolean;\n  private readonly objectTreeElementInternal: RootElement;\n  titleElement: Element;\n  skipProtoInternal?: boolean;\n  constructor(\n      object: SDK.RemoteObject.RemoteObject, title?: string|Element|null, linkifier?: Components.Linkifier.Linkifier,\n      showOverflow?: boolean) {\n    super();\n    this.object = object;\n    this.editable = true;\n    if (!showOverflow) {\n      this.hideOverflow();\n    }\n    this.setFocusable(true);\n    this.setShowSelectionOnKeyboardFocus(true);\n    this.objectTreeElementInternal = new RootElement(object, linkifier);\n    this.appendChild(this.objectTreeElementInternal);\n    if (typeof title === 'string' || !title) {\n      this.titleElement = this.element.createChild('span');\n      this.titleElement.textContent = title || '';\n    } else {\n      this.titleElement = title;\n      this.element.appendChild(title);\n    }\n    if (this.titleElement instanceof HTMLElement && !this.titleElement.hasAttribute('tabIndex')) {\n      this.titleElement.tabIndex = -1;\n    }\n\n    objectPropertiesSectionMap.set(this.element, this);\n    this.registerCSSFiles([objectValueStyles, objectPropertiesSectionStyles]);\n    this.rootElement().childrenListElement.classList.add('source-code', 'object-properties-section');\n  }\n\n  static defaultObjectPresentation(\n      object: SDK.RemoteObject.RemoteObject, linkifier?: Components.Linkifier.Linkifier, skipProto?: boolean,\n      readOnly?: boolean): Element {\n    const objectPropertiesSection =\n        ObjectPropertiesSection.defaultObjectPropertiesSection(object, linkifier, skipProto, readOnly);\n    if (!object.hasChildren) {\n      return objectPropertiesSection.titleElement;\n    }\n    return objectPropertiesSection.element;\n  }\n\n  static defaultObjectPropertiesSection(\n      object: SDK.RemoteObject.RemoteObject, linkifier?: Components.Linkifier.Linkifier, skipProto?: boolean,\n      readOnly?: boolean): ObjectPropertiesSection {\n    const titleElement = document.createElement('span');\n    titleElement.classList.add('source-code');\n    const shadowRoot = UI.Utils.createShadowRootWithCoreStyles(titleElement, {\n      cssFile: [objectValueStyles],\n      delegatesFocus: undefined,\n    });\n    const propertyValue =\n        ObjectPropertiesSection.createPropertyValue(object, /* wasThrown */ false, /* showPreview */ true);\n    shadowRoot.appendChild(propertyValue.element);\n    const objectPropertiesSection = new ObjectPropertiesSection(object, titleElement, linkifier);\n    objectPropertiesSection.editable = false;\n    if (skipProto) {\n      objectPropertiesSection.skipProto();\n    }\n    if (readOnly) {\n      objectPropertiesSection.setEditable(false);\n    }\n\n    return objectPropertiesSection;\n  }\n\n  static assignWebIDLMetadata(\n      value: SDK.RemoteObject.RemoteObject|null, properties: SDK.RemoteObject.RemoteObjectProperty[]): void {\n    if (!value) {\n      return;\n    }\n\n    const isInstance = value.type === 'object' && value.className !== null;\n    const webIdlType = isInstance ? domPinnedProperties[value.className] : undefined;\n    if (webIdlType) {\n      value.webIdl = {info: webIdlType, state: new Map()};\n    } else {\n      return;\n    }\n\n    for (const property of properties) {\n      const webIdlProperty = webIdlType?.props?.[property.name];\n      if (webIdlProperty) {\n        property.webIdl = {info: webIdlProperty};\n      }\n    }\n  }\n\n  static getPropertyValuesByNames(properties: SDK.RemoteObject.RemoteObjectProperty[]):\n      Map<string, SDK.RemoteObject.RemoteObject|undefined> {\n    const map = new Map();\n    for (const property of properties) {\n      map.set(property.name, property.value);\n    }\n    return map;\n  }\n\n  static compareProperties(\n      propertyA: SDK.RemoteObject.RemoteObjectProperty, propertyB: SDK.RemoteObject.RemoteObjectProperty): number {\n    if (!propertyA.synthetic && propertyB.synthetic) {\n      return 1;\n    }\n    if (!propertyB.synthetic && propertyA.synthetic) {\n      return -1;\n    }\n    if (!propertyA.isOwn && propertyB.isOwn) {\n      return 1;\n    }\n    if (!propertyB.isOwn && propertyA.isOwn) {\n      return -1;\n    }\n    if (!propertyA.enumerable && propertyB.enumerable) {\n      return 1;\n    }\n    if (!propertyB.enumerable && propertyA.enumerable) {\n      return -1;\n    }\n    if (propertyA.symbol && !propertyB.symbol) {\n      return 1;\n    }\n    if (propertyB.symbol && !propertyA.symbol) {\n      return -1;\n    }\n    if (propertyA.private && !propertyB.private) {\n      return 1;\n    }\n    if (propertyB.private && !propertyA.private) {\n      return -1;\n    }\n    const a = propertyA.name;\n    const b = propertyB.name;\n    if (a.startsWith('_') && !b.startsWith('_')) {\n      return 1;\n    }\n    if (b.startsWith('_') && !a.startsWith('_')) {\n      return -1;\n    }\n    return Platform.StringUtilities.naturalOrderComparator(a, b);\n  }\n\n  static createNameElement(name: string|null, isPrivate?: boolean): Element {\n    if (name === null) {\n      return UI.Fragment.html`<span class=\"name\"></span>`;\n    }\n    if (/^\\s|\\s$|^$|\\n/.test(name)) {\n      return UI.Fragment.html`<span class=\"name\">\"${name.replace(/\\n/g, '\\u21B5')}\"</span>`;\n    }\n    if (isPrivate) {\n      return UI.Fragment.html`<span class=\"name\">\n  <span class=\"private-property-hash\">${name[0]}</span>${name.substring(1)}\n  </span>`;\n    }\n    return UI.Fragment.html`<span class=\"name\">${name}</span>`;\n  }\n\n  static valueElementForFunctionDescription(description?: string, includePreview?: boolean, defaultName?: string):\n      Element {\n    const valueElement = document.createElement('span');\n    valueElement.classList.add('object-value-function');\n    description = description || '';\n    const text = description.replace(/^function [gs]et /, 'function ')\n                     .replace(/^function [gs]et\\(/, 'function\\(')\n                     .replace(/^[gs]et /, '');\n    defaultName = defaultName || '';\n\n    // This set of best-effort regular expressions captures common function descriptions.\n    // Ideally, some parser would provide prefix, arguments, function body text separately.\n    const asyncMatch = text.match(/^(async\\s+function)/);\n    const isGenerator = text.startsWith('function*');\n    const isGeneratorShorthand = text.startsWith('*');\n    const isBasic = !isGenerator && text.startsWith('function');\n    const isClass = text.startsWith('class ') || text.startsWith('class{');\n    const firstArrowIndex = text.indexOf('=>');\n    const isArrow = !asyncMatch && !isGenerator && !isBasic && !isClass && firstArrowIndex > 0;\n\n    let textAfterPrefix;\n    if (isClass) {\n      textAfterPrefix = text.substring('class'.length);\n      const classNameMatch = /^[^{\\s]+/.exec(textAfterPrefix.trim());\n      let className: string = defaultName;\n      if (classNameMatch) {\n        className = classNameMatch[0].trim() || defaultName;\n      }\n      addElements('class', textAfterPrefix, className);\n    } else if (asyncMatch) {\n      textAfterPrefix = text.substring(asyncMatch[1].length);\n      addElements('async \\u0192', textAfterPrefix, nameAndArguments(textAfterPrefix));\n    } else if (isGenerator) {\n      textAfterPrefix = text.substring('function*'.length);\n      addElements('\\u0192*', textAfterPrefix, nameAndArguments(textAfterPrefix));\n    } else if (isGeneratorShorthand) {\n      textAfterPrefix = text.substring('*'.length);\n      addElements('\\u0192*', textAfterPrefix, nameAndArguments(textAfterPrefix));\n    } else if (isBasic) {\n      textAfterPrefix = text.substring('function'.length);\n      addElements('\\u0192', textAfterPrefix, nameAndArguments(textAfterPrefix));\n    } else if (isArrow) {\n      const maxArrowFunctionCharacterLength = 60;\n      let abbreviation: string = text;\n      if (defaultName) {\n        abbreviation = defaultName + '()';\n      } else if (text.length > maxArrowFunctionCharacterLength) {\n        abbreviation = text.substring(0, firstArrowIndex + 2) + ' {\u2026}';\n      }\n      addElements('', text, abbreviation);\n    } else {\n      addElements('\\u0192', text, nameAndArguments(text));\n    }\n    UI.Tooltip.Tooltip.install(valueElement, Platform.StringUtilities.trimEndWithMaxLength(description, 500));\n    return valueElement;\n\n    function nameAndArguments(contents: string): string {\n      const startOfArgumentsIndex = contents.indexOf('(');\n      const endOfArgumentsMatch = contents.match(/\\)\\s*{/);\n      if (startOfArgumentsIndex !== -1 && endOfArgumentsMatch && endOfArgumentsMatch.index !== undefined &&\n          endOfArgumentsMatch.index > startOfArgumentsIndex) {\n        const name = contents.substring(0, startOfArgumentsIndex).trim() || defaultName;\n        const args = contents.substring(startOfArgumentsIndex, endOfArgumentsMatch.index + 1);\n        return name + args;\n      }\n      return defaultName + '()';\n    }\n\n    function addElements(prefix: string, body: string, abbreviation: string): void {\n      const maxFunctionBodyLength = 200;\n      if (prefix.length) {\n        valueElement.createChild('span', 'object-value-function-prefix').textContent = prefix + ' ';\n      }\n      if (includePreview) {\n        UI.UIUtils.createTextChild(\n            valueElement, Platform.StringUtilities.trimEndWithMaxLength(body.trim(), maxFunctionBodyLength));\n      } else {\n        UI.UIUtils.createTextChild(valueElement, abbreviation.replace(/\\n/g, ' '));\n      }\n    }\n  }\n\n  static createPropertyValueWithCustomSupport(\n      value: SDK.RemoteObject.RemoteObject, wasThrown: boolean, showPreview: boolean, parentElement?: Element,\n      linkifier?: Components.Linkifier.Linkifier): ObjectPropertyValue {\n    if (value.customPreview()) {\n      const result = (new CustomPreviewComponent(value)).element;\n      result.classList.add('object-properties-section-custom-section');\n      return new ObjectPropertyValue(result);\n    }\n    return ObjectPropertiesSection.createPropertyValue(value, wasThrown, showPreview, parentElement, linkifier);\n  }\n\n  static appendMemoryIcon(element: Element, obj: SDK.RemoteObject.RemoteObject): void {\n    // We show the memory icon only on ArrayBuffer, WebAssembly.Memory and DWARF memory instances.\n    // TypedArrays DataViews are also supported, but showing the icon next to their\n    // previews is quite a significant visual overhead, and users can easily get to\n    // their buffers and open the memory inspector from there.\n    const arrayBufferOrWasmMemory =\n        (obj.type === 'object' && (obj.subtype === 'arraybuffer' || obj.subtype === 'webassemblymemory'));\n    if (!arrayBufferOrWasmMemory && !LinearMemoryInspector.LinearMemoryInspectorController.isDWARFMemoryObject(obj)) {\n      return;\n    }\n    const memoryIcon = new IconButton.Icon.Icon();\n    memoryIcon.data = {\n      iconName: 'ic_memory_16x16',\n      color: 'var(--color-text-secondary)',\n      width: '13px',\n      height: '13px',\n    };\n\n    memoryIcon.onclick = async(event: MouseEvent): Promise<void> => {\n      event.stopPropagation();\n      const controller =\n          LinearMemoryInspector.LinearMemoryInspectorController.LinearMemoryInspectorController.instance();\n      Host.userMetrics.linearMemoryInspectorRevealedFrom(Host.UserMetrics.LinearMemoryInspectorRevealedFrom.MemoryIcon);\n      void controller.openInspectorView(obj);\n    };\n\n    UI.Tooltip.Tooltip.install(memoryIcon, 'Reveal in Memory Inspector panel');\n    element.classList.add('object-value-with-memory-icon');\n    element.appendChild(memoryIcon);\n  }\n\n  static createPropertyValue(\n      value: SDK.RemoteObject.RemoteObject, wasThrown: boolean, showPreview: boolean, parentElement?: Element,\n      linkifier?: Components.Linkifier.Linkifier): ObjectPropertyValue {\n    let propertyValue;\n    const type = value.type;\n    const subtype = value.subtype;\n    const description = value.description || '';\n    const className = value.className;\n    if (type === 'object' && subtype === 'internal#location') {\n      const rawLocation = value.debuggerModel().createRawLocationByScriptId(\n          value.value.scriptId, value.value.lineNumber, value.value.columnNumber);\n      if (rawLocation && linkifier) {\n        return new ObjectPropertyValue(linkifier.linkifyRawLocation(rawLocation, Platform.DevToolsPath.EmptyUrlString));\n      }\n      propertyValue = new ObjectPropertyValue(createUnknownInternalLocationElement());\n    } else if (type === 'string' && typeof description === 'string') {\n      propertyValue = createStringElement();\n    } else if (type === 'object' && subtype === 'trustedtype') {\n      propertyValue = createTrustedTypeElement();\n    } else if (type === 'function') {\n      propertyValue = new ObjectPropertyValue(ObjectPropertiesSection.valueElementForFunctionDescription(description));\n    } else if (type === 'object' && subtype === 'node' && description) {\n      propertyValue = new ObjectPropertyValue(createNodeElement());\n    } else {\n      const valueElement = document.createElement('span');\n      valueElement.classList.add('object-value-' + (subtype || type));\n      if (value.preview && showPreview) {\n        const previewFormatter = new RemoteObjectPreviewFormatter();\n        previewFormatter.appendObjectPreview(valueElement, value.preview, false /* isEntry */);\n        propertyValue = new ObjectPropertyValue(valueElement);\n        UI.Tooltip.Tooltip.install(propertyValue.element as HTMLElement, description || '');\n      } else if (description.length > maxRenderableStringLength) {\n        propertyValue = new ExpandableTextPropertyValue(valueElement, description, EXPANDABLE_MAX_LENGTH);\n      } else {\n        propertyValue = new ObjectPropertyValue(valueElement);\n        propertyValue.element.textContent = description;\n        UI.Tooltip.Tooltip.install(propertyValue.element as HTMLElement, description);\n      }\n      this.appendMemoryIcon(valueElement, value);\n    }\n\n    if (wasThrown) {\n      const wrapperElement = document.createElement('span');\n      wrapperElement.classList.add('error');\n      wrapperElement.classList.add('value');\n      wrapperElement.appendChild(\n          i18n.i18n.getFormatLocalizedString(str_, UIStrings.exceptionS, {PH1: propertyValue.element}));\n      propertyValue.element = wrapperElement;\n    }\n    propertyValue.element.classList.add('value');\n    return propertyValue;\n\n    function createUnknownInternalLocationElement(): Element {\n      const valueElement = document.createElement('span');\n      valueElement.textContent = '<' + i18nString(UIStrings.unknown) + '>';\n      UI.Tooltip.Tooltip.install(valueElement, description || '');\n      return valueElement;\n    }\n\n    function createStringElement(): ObjectPropertyValue {\n      const valueElement = document.createElement('span');\n      valueElement.classList.add('object-value-string');\n      const text = JSON.stringify(description);\n      let propertyValue;\n      if (description.length > maxRenderableStringLength) {\n        propertyValue = new ExpandableTextPropertyValue(valueElement, text, EXPANDABLE_MAX_LENGTH);\n      } else {\n        UI.UIUtils.createTextChild(valueElement, text);\n        propertyValue = new ObjectPropertyValue(valueElement);\n        UI.Tooltip.Tooltip.install(valueElement, description);\n      }\n      return propertyValue;\n    }\n\n    function createTrustedTypeElement(): ObjectPropertyValue {\n      const valueElement = document.createElement('span');\n      valueElement.classList.add('object-value-trustedtype');\n      const text = `${className} \"${description}\"`;\n      let propertyValue;\n      if (text.length > maxRenderableStringLength) {\n        propertyValue = new ExpandableTextPropertyValue(valueElement, text, EXPANDABLE_MAX_LENGTH);\n      } else {\n        const contentString = createStringElement();\n        UI.UIUtils.createTextChild(valueElement, `${className} `);\n        valueElement.appendChild(contentString.element);\n        propertyValue = new ObjectPropertyValue(valueElement);\n        UI.Tooltip.Tooltip.install(valueElement, text);\n      }\n\n      return propertyValue;\n    }\n\n    function createNodeElement(): Element {\n      const valueElement = document.createElement('span');\n      valueElement.classList.add('object-value-node');\n      createSpansForNodeTitle(valueElement, (description as string));\n      valueElement.addEventListener('click', event => {\n        void Common.Revealer.reveal(value);\n        event.consume(true);\n      }, false);\n      valueElement.addEventListener(\n          'mousemove', () => SDK.OverlayModel.OverlayModel.highlightObjectAsDOMNode(value), false);\n      valueElement.addEventListener('mouseleave', () => SDK.OverlayModel.OverlayModel.hideDOMNodeHighlight(), false);\n      return valueElement;\n    }\n  }\n\n  static formatObjectAsFunction(\n      func: SDK.RemoteObject.RemoteObject, element: Element, linkify: boolean,\n      includePreview?: boolean): Promise<void> {\n    return func.debuggerModel().functionDetailsPromise(func).then(didGetDetails);\n\n    function didGetDetails(response: SDK.DebuggerModel.FunctionDetails|null): void {\n      if (linkify && response && response.location) {\n        element.classList.add('linkified');\n        element.addEventListener('click', () => {\n          void Common.Revealer.reveal(response.location);\n          return false;\n        });\n      }\n\n      // The includePreview flag is false for formats such as console.dir().\n      let defaultName: string|('' | 'anonymous') = includePreview ? '' : 'anonymous';\n      if (response && response.functionName) {\n        defaultName = response.functionName;\n      }\n      const valueElement =\n          ObjectPropertiesSection.valueElementForFunctionDescription(func.description, includePreview, defaultName);\n      element.appendChild(valueElement);\n    }\n  }\n\n  static isDisplayableProperty(\n      property: SDK.RemoteObject.RemoteObjectProperty,\n      parentProperty?: SDK.RemoteObject.RemoteObjectProperty): boolean {\n    if (!parentProperty || !parentProperty.synthetic) {\n      return true;\n    }\n    const name = property.name;\n    const useless = (parentProperty.name === '[[Entries]]' && (name === 'length' || name === '__proto__'));\n    return !useless;\n  }\n\n  skipProto(): void {\n    this.skipProtoInternal = true;\n  }\n\n  expand(): void {\n    this.objectTreeElementInternal.expand();\n  }\n\n  setEditable(value: boolean): void {\n    this.editable = value;\n  }\n\n  objectTreeElement(): UI.TreeOutline.TreeElement {\n    return this.objectTreeElementInternal;\n  }\n\n  enableContextMenu(): void {\n    this.element.addEventListener('contextmenu', this.contextMenuEventFired.bind(this), false);\n  }\n\n  private contextMenuEventFired(event: Event): void {\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    contextMenu.appendApplicableItems(this.object);\n    if (this.object instanceof SDK.RemoteObject.LocalJSONObject) {\n      contextMenu.viewSection().appendItem(\n          i18nString(UIStrings.expandRecursively),\n          this.objectTreeElementInternal.expandRecursively.bind(this.objectTreeElementInternal, EXPANDABLE_MAX_DEPTH));\n      contextMenu.viewSection().appendItem(\n          i18nString(UIStrings.collapseChildren),\n          this.objectTreeElementInternal.collapseChildren.bind(this.objectTreeElementInternal));\n    }\n    void contextMenu.show();\n  }\n\n  titleLessMode(): void {\n    this.objectTreeElementInternal.listItemElement.classList.add('hidden');\n    this.objectTreeElementInternal.childrenListElement.classList.add('title-less-mode');\n    this.objectTreeElementInternal.expand();\n  }\n}\n\n/** @const */\nconst ARRAY_LOAD_THRESHOLD = 100;\n\nlet maxRenderableStringLength = 10000;\n\nexport function setMaxRenderableStringLength(value: number): void {\n  maxRenderableStringLength = value;\n}\nexport function getMaxRenderableStringLength(): number {\n  return maxRenderableStringLength;\n}\n\nexport class ObjectPropertiesSectionsTreeOutline extends UI.TreeOutline.TreeOutlineInShadow {\n  private readonly editable: boolean;\n  constructor(options?: TreeOutlineOptions|null) {\n    super();\n    this.registerCSSFiles([objectValueStyles, objectPropertiesSectionStyles]);\n    this.editable = !(options && options.readOnly);\n    this.contentElement.classList.add('source-code');\n    this.contentElement.classList.add('object-properties-section');\n    this.hideOverflow();\n  }\n}\n\nexport const enum ObjectPropertiesMode {\n  All = 0,                         // All properties, including prototype properties\n  OwnAndInternalAndInherited = 1,  // Own, internal, and inherited properties\n}\n\nexport class RootElement extends UI.TreeOutline.TreeElement {\n  private readonly object: SDK.RemoteObject.RemoteObject;\n  private readonly linkifier: Components.Linkifier.Linkifier|undefined;\n  private readonly emptyPlaceholder: string|null|undefined;\n  private readonly propertiesMode: ObjectPropertiesMode;\n  private readonly extraProperties: SDK.RemoteObject.RemoteObjectProperty[];\n  private readonly targetObject: SDK.RemoteObject.RemoteObject|undefined;\n  toggleOnClick: boolean;\n  constructor(\n      object: SDK.RemoteObject.RemoteObject, linkifier?: Components.Linkifier.Linkifier, emptyPlaceholder?: string|null,\n      propertiesMode: ObjectPropertiesMode = ObjectPropertiesMode.OwnAndInternalAndInherited,\n      extraProperties: SDK.RemoteObject.RemoteObjectProperty[] = [],\n      targetObject: SDK.RemoteObject.RemoteObject = object) {\n    const contentElement = document.createElement('slot');\n    super(contentElement);\n\n    this.object = object;\n    this.linkifier = linkifier;\n    this.emptyPlaceholder = emptyPlaceholder;\n    this.propertiesMode = propertiesMode;\n    this.extraProperties = extraProperties;\n    this.targetObject = targetObject;\n\n    this.setExpandable(true);\n    this.selectable = true;\n    this.toggleOnClick = true;\n    this.listItemElement.classList.add('object-properties-section-root-element');\n    this.listItemElement.addEventListener('contextmenu', this.onContextMenu.bind(this), false);\n  }\n\n  onexpand(): void {\n    if (this.treeOutline) {\n      this.treeOutline.element.classList.add('expanded');\n    }\n  }\n\n  oncollapse(): void {\n    if (this.treeOutline) {\n      this.treeOutline.element.classList.remove('expanded');\n    }\n  }\n\n  ondblclick(_e: Event): boolean {\n    return true;\n  }\n\n  private onContextMenu(event: Event): void {\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    contextMenu.appendApplicableItems(this.object);\n\n    if (this.object instanceof SDK.RemoteObject.LocalJSONObject) {\n      const {value} = this.object;\n      const propertyValue = typeof value === 'object' ? JSON.stringify(value, null, 2) : value;\n      const copyValueHandler = (): void => {\n        Host.userMetrics.actionTaken(Host.UserMetrics.Action.NetworkPanelCopyValue);\n        Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText((propertyValue as string | undefined));\n      };\n      contextMenu.clipboardSection().appendItem(i18nString(UIStrings.copyValue), copyValueHandler);\n    }\n\n    contextMenu.viewSection().appendItem(\n        i18nString(UIStrings.expandRecursively), this.expandRecursively.bind(this, EXPANDABLE_MAX_DEPTH));\n    contextMenu.viewSection().appendItem(i18nString(UIStrings.collapseChildren), this.collapseChildren.bind(this));\n    void contextMenu.show();\n  }\n\n  async onpopulate(): Promise<void> {\n    const treeOutline = (this.treeOutline as ObjectPropertiesSection | null);\n    const skipProto = treeOutline ? Boolean(treeOutline.skipProtoInternal) : false;\n    return ObjectPropertyTreeElement.populate(\n        this, this.object, skipProto, false, this.linkifier, this.emptyPlaceholder, this.propertiesMode,\n        this.extraProperties, this.targetObject);\n  }\n}\n\n// Number of initially visible children in an ObjectPropertyTreeElement.\n// Remaining children are shown as soon as requested via a show more properties button.\nexport const InitialVisibleChildrenLimit = 200;\n\nexport class ObjectPropertyTreeElement extends UI.TreeOutline.TreeElement {\n  property: SDK.RemoteObject.RemoteObjectProperty;\n  toggleOnClick: boolean;\n  private highlightChanges: UI.UIUtils.HighlightChange[];\n  private linkifier: Components.Linkifier.Linkifier|undefined;\n  private readonly maxNumPropertiesToShow: number;\n  nameElement!: HTMLElement;\n  valueElement!: HTMLElement;\n  private rowContainer!: HTMLElement;\n  readOnly!: boolean;\n  private prompt!: ObjectPropertyPrompt|undefined;\n  private editableDiv!: HTMLElement;\n  propertyValue?: ObjectPropertyValue;\n  expandedValueElement?: Element|null;\n  constructor(property: SDK.RemoteObject.RemoteObjectProperty, linkifier?: Components.Linkifier.Linkifier) {\n    // Pass an empty title, the title gets made later in onattach.\n    super();\n\n    this.property = property;\n    this.toggleOnClick = true;\n    this.highlightChanges = [];\n    this.linkifier = linkifier;\n    this.maxNumPropertiesToShow = InitialVisibleChildrenLimit;\n    this.listItemElement.addEventListener('contextmenu', this.contextMenuFired.bind(this), false);\n    this.listItemElement.dataset.objectPropertyNameForTest = property.name;\n    this.setExpandRecursively(property.name !== '[[Prototype]]');\n  }\n\n  static async populate(\n      treeElement: UI.TreeOutline.TreeElement, value: SDK.RemoteObject.RemoteObject, skipProto: boolean,\n      skipGettersAndSetters: boolean, linkifier?: Components.Linkifier.Linkifier, emptyPlaceholder?: string|null,\n      propertiesMode: ObjectPropertiesMode = ObjectPropertiesMode.OwnAndInternalAndInherited,\n      extraProperties?: SDK.RemoteObject.RemoteObjectProperty[],\n      targetValue?: SDK.RemoteObject.RemoteObject): Promise<void> {\n    if (value.arrayLength() > ARRAY_LOAD_THRESHOLD) {\n      treeElement.removeChildren();\n      void ArrayGroupingTreeElement.populateArray(treeElement, value, 0, value.arrayLength() - 1, linkifier);\n      return;\n    }\n\n    let properties, internalProperties = null;\n    switch (propertiesMode) {\n      case ObjectPropertiesMode.All:\n        ({properties} = await value.getAllProperties(false /* accessorPropertiesOnly */, true /* generatePreview */));\n        break;\n      case ObjectPropertiesMode.OwnAndInternalAndInherited:\n        ({properties, internalProperties} =\n             await SDK.RemoteObject.RemoteObject.loadFromObjectPerProto(value, true /* generatePreview */));\n        break;\n    }\n    treeElement.removeChildren();\n    if (!properties) {\n      return;\n    }\n\n    if (extraProperties !== undefined) {\n      properties.push(...extraProperties);\n    }\n\n    ObjectPropertyTreeElement.populateWithProperties(\n        treeElement, properties, internalProperties, skipProto, skipGettersAndSetters, targetValue || value, linkifier,\n        emptyPlaceholder);\n  }\n\n  static populateWithProperties(\n      treeNode: UI.TreeOutline.TreeElement, properties: SDK.RemoteObject.RemoteObjectProperty[],\n      internalProperties: SDK.RemoteObject.RemoteObjectProperty[]|null, skipProto: boolean,\n      skipGettersAndSetters: boolean, value: SDK.RemoteObject.RemoteObject|null,\n      linkifier?: Components.Linkifier.Linkifier, emptyPlaceholder?: string|null): void {\n    ObjectPropertiesSection.assignWebIDLMetadata(value, properties);\n    const names = ObjectPropertiesSection.getPropertyValuesByNames(properties);\n\n    if (value?.webIdl) {\n      const parentRules = value.webIdl.info.rules;\n      if (parentRules) {\n        for (const {when: name, is: expected} of parentRules) {\n          if (names.get(name)?.value === expected) {\n            value.webIdl.state.set(name, expected);\n          }\n        }\n      }\n\n      for (const property of properties) {\n        if (property.webIdl) {\n          const parentState = value.webIdl.state;\n          const propertyRules = property.webIdl.info.rules;\n          if (!parentRules && !propertyRules) {\n            property.webIdl.applicable = true;\n          } else {\n            property.webIdl.applicable =\n                !propertyRules || propertyRules?.some(rule => parentState.get(rule.when) === rule.is);\n          }\n        }\n      }\n    }\n\n    properties.sort(ObjectPropertiesSection.compareProperties);\n    internalProperties = internalProperties || [];\n\n    const entriesProperty = internalProperties.find(property => property.name === '[[Entries]]');\n    if (entriesProperty) {\n      parentMap.set(entriesProperty, value);\n      const treeElement = new ObjectPropertyTreeElement(entriesProperty, linkifier);\n      treeElement.setExpandable(true);\n      treeElement.expand();\n      treeNode.appendChild(treeElement);\n    }\n\n    const tailProperties = [];\n    for (let i = 0; i < properties.length; ++i) {\n      const property = properties[i];\n      parentMap.set(property, value);\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (!ObjectPropertiesSection.isDisplayableProperty(property, (treeNode as any).property)) {\n        continue;\n      }\n\n      if (property.isOwn && !skipGettersAndSetters) {\n        if (property.getter) {\n          const getterProperty =\n              new SDK.RemoteObject.RemoteObjectProperty('get ' + property.name, property.getter, false);\n          parentMap.set(getterProperty, value);\n          tailProperties.push(getterProperty);\n        }\n        if (property.setter) {\n          const setterProperty =\n              new SDK.RemoteObject.RemoteObjectProperty('set ' + property.name, property.setter, false);\n          parentMap.set(setterProperty, value);\n          tailProperties.push(setterProperty);\n        }\n      }\n\n      const canShowProperty = property.getter || !property.isAccessorProperty();\n      if (canShowProperty) {\n        const element = new ObjectPropertyTreeElement(property, linkifier);\n        if (property.name === 'memories' && property.value?.className === 'Memories') {\n          element.updateExpandable();\n          if (element.isExpandable()) {\n            element.expand();\n          }\n        }\n        treeNode.appendChild(element);\n      }\n    }\n    for (let i = 0; i < tailProperties.length; ++i) {\n      treeNode.appendChild(new ObjectPropertyTreeElement(tailProperties[i], linkifier));\n    }\n\n    for (const property of internalProperties) {\n      parentMap.set(property, value);\n      const treeElement = new ObjectPropertyTreeElement(property, linkifier);\n      if (property.name === '[[Entries]]') {\n        continue;\n      }\n      if (property.name === '[[Prototype]]' && skipProto) {\n        continue;\n      }\n      treeNode.appendChild(treeElement);\n    }\n\n    ObjectPropertyTreeElement.appendEmptyPlaceholderIfNeeded(treeNode, emptyPlaceholder);\n  }\n\n  private static appendEmptyPlaceholderIfNeeded(treeNode: UI.TreeOutline.TreeElement, emptyPlaceholder?: string|null):\n      void {\n    if (treeNode.childCount()) {\n      return;\n    }\n    const title = document.createElement('div');\n    title.classList.add('gray-info-message');\n    title.textContent = emptyPlaceholder || i18nString(UIStrings.noProperties);\n    const infoElement = new UI.TreeOutline.TreeElement(title);\n    treeNode.appendChild(infoElement);\n  }\n\n  static createRemoteObjectAccessorPropertySpan(\n      object: SDK.RemoteObject.RemoteObject|null, propertyPath: string[],\n      callback: (arg0: SDK.RemoteObject.CallFunctionResult) => void): HTMLElement {\n    const rootElement = document.createElement('span');\n    const element = rootElement.createChild('span');\n    element.textContent = i18nString(UIStrings.dots);\n    if (!object) {\n      return rootElement;\n    }\n    element.classList.add('object-value-calculate-value-button');\n    UI.Tooltip.Tooltip.install(element, i18nString(UIStrings.invokePropertyGetter));\n    element.addEventListener('click', onInvokeGetterClick, false);\n\n    function onInvokeGetterClick(event: Event): void {\n      event.consume();\n      if (object) {\n        // The definition of callFunction expects an unknown, and setting to `any` causes Closure to fail.\n        // However, leaving this as unknown also causes TypeScript to fail, so for now we leave this as unchecked.\n        // @ts-ignore  TODO(crbug.com/1011811): Fix after Closure is removed.\n        void object.callFunction(invokeGetter, [{value: JSON.stringify(propertyPath)}]).then(callback);\n      }\n    }\n\n    function invokeGetter(this: Object, arrayStr: string): Object {\n      let result: Object = this;\n      const properties = JSON.parse(arrayStr);\n      for (let i = 0, n = properties.length; i < n; ++i) {\n        // @ts-ignore callFunction expects this to be a generic Object, so while this works we can't be more specific on types.\n        result = result[properties[i]];\n      }\n      return result;\n    }\n\n    return rootElement;\n  }\n\n  setSearchRegex(regex: RegExp, additionalCssClassName?: string): boolean {\n    let cssClasses = UI.UIUtils.highlightedSearchResultClassName;\n    if (additionalCssClassName) {\n      cssClasses += ' ' + additionalCssClassName;\n    }\n    this.revertHighlightChanges();\n\n    this.applySearch(regex, this.nameElement, cssClasses);\n    if (this.property.value) {\n      const valueType = this.property.value.type;\n      if (valueType !== 'object') {\n        this.applySearch(regex, this.valueElement, cssClasses);\n      }\n    }\n\n    return Boolean(this.highlightChanges.length);\n  }\n\n  private applySearch(regex: RegExp, element: Element, cssClassName: string): void {\n    const ranges = [];\n    const content = element.textContent || '';\n    regex.lastIndex = 0;\n    let match = regex.exec(content);\n    while (match) {\n      ranges.push(new TextUtils.TextRange.SourceRange(match.index, match[0].length));\n      match = regex.exec(content);\n    }\n    if (ranges.length) {\n      UI.UIUtils.highlightRangesWithStyleClass(element, ranges, cssClassName, this.highlightChanges);\n    }\n  }\n\n  private showAllPropertiesElementSelected(element: UI.TreeOutline.TreeElement): boolean {\n    this.removeChild(element);\n    this.children().forEach(x => {\n      x.hidden = false;\n    });\n    return false;\n  }\n\n  private createShowAllPropertiesButton(): void {\n    const element = document.createElement('div');\n    element.classList.add('object-value-calculate-value-button');\n    element.textContent = i18nString(UIStrings.dots);\n    UI.Tooltip.Tooltip.install(element, i18nString(UIStrings.showAllD, {PH1: this.childCount()}));\n    const children = this.children();\n    for (let i = this.maxNumPropertiesToShow; i < this.childCount(); ++i) {\n      children[i].hidden = true;\n    }\n    const showAllPropertiesButton = new UI.TreeOutline.TreeElement(element);\n    showAllPropertiesButton.onselect = this.showAllPropertiesElementSelected.bind(this, showAllPropertiesButton);\n    this.appendChild(showAllPropertiesButton);\n  }\n\n  revertHighlightChanges(): void {\n    UI.UIUtils.revertDomChanges(this.highlightChanges);\n    this.highlightChanges = [];\n  }\n\n  async onpopulate(): Promise<void> {\n    const propertyValue = (this.property.value as SDK.RemoteObject.RemoteObject);\n    console.assert(typeof propertyValue !== 'undefined');\n    const treeOutline = (this.treeOutline as ObjectPropertiesSection | null);\n    const skipProto = treeOutline ? Boolean(treeOutline.skipProtoInternal) : false;\n    const targetValue = this.property.name !== '[[Prototype]]' ? propertyValue : parentMap.get(this.property);\n    if (targetValue) {\n      await ObjectPropertyTreeElement.populate(\n          this, propertyValue, skipProto, false, this.linkifier, undefined, undefined, undefined, targetValue);\n      if (this.childCount() > this.maxNumPropertiesToShow) {\n        this.createShowAllPropertiesButton();\n      }\n    }\n  }\n\n  ondblclick(event: Event): boolean {\n    const target = (event.target as HTMLElement);\n    const inEditableElement = target.isSelfOrDescendant(this.valueElement) ||\n        (this.expandedValueElement && target.isSelfOrDescendant(this.expandedValueElement));\n    if (this.property.value && !this.property.value.customPreview() && inEditableElement &&\n        (this.property.writable || this.property.setter)) {\n      this.startEditing();\n    }\n    return false;\n  }\n\n  onenter(): boolean {\n    if (this.property.value && !this.property.value.customPreview() &&\n        (this.property.writable || this.property.setter)) {\n      this.startEditing();\n      return true;\n    }\n    return false;\n  }\n\n  onattach(): void {\n    this.update();\n    this.updateExpandable();\n  }\n\n  onexpand(): void {\n    this.showExpandedValueElement(true);\n  }\n\n  oncollapse(): void {\n    this.showExpandedValueElement(false);\n  }\n\n  private showExpandedValueElement(value: boolean): void {\n    if (!this.expandedValueElement) {\n      return;\n    }\n    if (value) {\n      this.rowContainer.replaceChild(this.expandedValueElement, this.valueElement);\n    } else {\n      this.rowContainer.replaceChild(this.valueElement, this.expandedValueElement);\n    }\n  }\n\n  private createExpandedValueElement(value: SDK.RemoteObject.RemoteObject): Element|null {\n    const needsAlternateValue = value.hasChildren && !value.customPreview() && value.subtype !== 'node' &&\n        value.type !== 'function' && (value.type !== 'object' || value.preview);\n    if (!needsAlternateValue) {\n      return null;\n    }\n\n    const valueElement = document.createElement('span');\n    valueElement.classList.add('value');\n    if (value.description === 'Object') {\n      valueElement.textContent = '';\n    } else {\n      valueElement.setTextContentTruncatedIfNeeded(value.description || '');\n    }\n    valueElement.classList.add('object-value-' + (value.subtype || value.type));\n    UI.Tooltip.Tooltip.install(valueElement, value.description || '');\n    ObjectPropertiesSection.appendMemoryIcon(valueElement, value);\n    return valueElement;\n  }\n\n  update(): void {\n    this.nameElement =\n        (ObjectPropertiesSection.createNameElement(this.property.name, this.property.private) as HTMLElement);\n    if (!this.property.enumerable) {\n      this.nameElement.classList.add('object-properties-section-dimmed');\n    }\n    if (this.property.isOwn) {\n      this.nameElement.classList.add('own-property');\n    }\n    if (this.property.synthetic) {\n      this.nameElement.classList.add('synthetic-property');\n    }\n\n    this.updatePropertyPath();\n\n    const isInternalEntries = this.property.synthetic && this.property.name === '[[Entries]]';\n    if (isInternalEntries) {\n      this.valueElement = document.createElement('span');\n      this.valueElement.classList.add('value');\n    } else if (this.property.value) {\n      const showPreview = this.property.name !== '[[Prototype]]';\n      this.propertyValue = ObjectPropertiesSection.createPropertyValueWithCustomSupport(\n          this.property.value, this.property.wasThrown, showPreview, this.listItemElement, this.linkifier);\n      this.valueElement = (this.propertyValue.element as HTMLElement);\n    } else if (this.property.getter) {\n      this.valueElement = document.createElement('span');\n      const element = this.valueElement.createChild('span');\n      element.textContent = i18nString(UIStrings.dots);\n      element.classList.add('object-value-calculate-value-button');\n      UI.Tooltip.Tooltip.install(element, i18nString(UIStrings.invokePropertyGetter));\n      const object = parentMap.get(this.property) as SDK.RemoteObject.RemoteObject;\n      const getter = this.property.getter;\n      element.addEventListener('click', (event: Event) => {\n        event.consume();\n        const invokeGetter = `\n          function invokeGetter(getter) {\n            return Reflect.apply(getter, this, []);\n          }`;\n        // @ts-ignore No way to teach TypeScript to preserve the Function-ness of `getter`.\n        // Also passing a string instead of a Function to avoid coverage implementation messing with it.\n        void object.callFunction(invokeGetter, [SDK.RemoteObject.RemoteObject.toCallArgument(getter)])\n            .then(this.onInvokeGetterClick.bind(this));\n      }, false);\n    } else {\n      this.valueElement = document.createElement('span');\n      this.valueElement.classList.add('object-value-undefined');\n      this.valueElement.textContent = i18nString(UIStrings.unreadable);\n      UI.Tooltip.Tooltip.install(this.valueElement, i18nString(UIStrings.noPropertyGetter));\n    }\n\n    const valueText = this.valueElement.textContent;\n    if (this.property.value && valueText && !this.property.wasThrown) {\n      this.expandedValueElement = this.createExpandedValueElement(this.property.value);\n    }\n\n    let adorner: Element|string = '';\n    let container: Element;\n\n    if (this.property.webIdl?.applicable) {\n      const icon = new IconButton.Icon.Icon();\n      icon.data = {\n        iconName: 'elements_panel_icon',\n        color: 'var(--color-text-secondary)',\n        width: '16px',\n        height: '16px',\n      };\n      adorner = UI.Fragment.html`\n         <span class='adorner'>${icon}</span>\n       `;\n    }\n\n    if (isInternalEntries) {\n      container = UI.Fragment.html`\n        <span class='name-and-value'>${adorner}${this.nameElement}</span>\n      `;\n    } else {\n      container = UI.Fragment.html`\n        <span class='name-and-value'>${adorner}${this.nameElement}: ${this.valueElement}</span>\n      `;\n    }\n\n    this.listItemElement.removeChildren();\n    this.rowContainer = (container as HTMLElement);\n    this.listItemElement.appendChild(this.rowContainer);\n    this.listItemElement.dataset.webidl = this.property.webIdl?.applicable ? 'true' : 'false';\n  }\n\n  private updatePropertyPath(): void {\n    if (this.nameElement.title) {\n      return;\n    }\n\n    const name = this.property.name;\n\n    if (this.property.synthetic) {\n      UI.Tooltip.Tooltip.install(this.nameElement, name);\n      return;\n    }\n\n    // https://tc39.es/ecma262/#prod-IdentifierName\n    const useDotNotation = /^(?:[$_\\p{ID_Start}])(?:[$_\\u200C\\u200D\\p{ID_Continue}])*$/u;\n    const isInteger = /^(?:0|[1-9]\\d*)$/;\n\n    const parentPath = (this.parent instanceof ObjectPropertyTreeElement && this.parent.nameElement &&\n                        !this.parent.property.synthetic) ?\n        this.parent.nameElement.title :\n        '';\n\n    if (this.property.private || useDotNotation.test(name)) {\n      UI.Tooltip.Tooltip.install(this.nameElement, parentPath ? `${parentPath}.${name}` : name);\n    } else if (isInteger.test(name)) {\n      UI.Tooltip.Tooltip.install(this.nameElement, `${parentPath}[${name}]`);\n    } else {\n      UI.Tooltip.Tooltip.install(this.nameElement, `${parentPath}[${JSON.stringify(name)}]`);\n    }\n  }\n\n  private contextMenuFired(event: Event): void {\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    contextMenu.appendApplicableItems(this);\n    if (this.property.symbol) {\n      contextMenu.appendApplicableItems(this.property.symbol);\n    }\n    if (this.property.value) {\n      contextMenu.appendApplicableItems(this.property.value);\n      if (parentMap.get(this.property) instanceof SDK.RemoteObject.LocalJSONObject) {\n        const {value: {value}} = this.property;\n        const propertyValue = typeof value === 'object' ? JSON.stringify(value, null, 2) : value;\n        const copyValueHandler = (): void => {\n          Host.userMetrics.actionTaken(Host.UserMetrics.Action.NetworkPanelCopyValue);\n          Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText((propertyValue as string | undefined));\n        };\n        contextMenu.clipboardSection().appendItem(i18nString(UIStrings.copyValue), copyValueHandler);\n      }\n    }\n    if (!this.property.synthetic && this.nameElement && this.nameElement.title) {\n      const copyPathHandler = Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText.bind(\n          Host.InspectorFrontendHost.InspectorFrontendHostInstance, this.nameElement.title);\n      contextMenu.clipboardSection().appendItem(i18nString(UIStrings.copyPropertyPath), copyPathHandler);\n    }\n    if (parentMap.get(this.property) instanceof SDK.RemoteObject.LocalJSONObject) {\n      contextMenu.viewSection().appendItem(\n          i18nString(UIStrings.expandRecursively), this.expandRecursively.bind(this, EXPANDABLE_MAX_DEPTH));\n      contextMenu.viewSection().appendItem(i18nString(UIStrings.collapseChildren), this.collapseChildren.bind(this));\n    }\n    if (this.propertyValue) {\n      this.propertyValue.appendApplicableItems(event, contextMenu, {});\n    }\n    void contextMenu.show();\n  }\n\n  private startEditing(): void {\n    const treeOutline = (this.treeOutline as ObjectPropertiesSection | null);\n    if (this.prompt || !treeOutline || !treeOutline.editable || this.readOnly) {\n      return;\n    }\n    this.editableDiv = (this.rowContainer.createChild('span', 'editable-div') as HTMLElement);\n\n    if (this.property.value) {\n      let text: string|(string | undefined) = this.property.value.description;\n      if (this.property.value.type === 'string' && typeof text === 'string') {\n        text = `\"${text}\"`;\n      }\n\n      this.editableDiv.setTextContentTruncatedIfNeeded(text, i18nString(UIStrings.stringIsTooLargeToEdit));\n    }\n\n    const originalContent = this.editableDiv.textContent || '';\n\n    // Lie about our children to prevent expanding on double click and to collapse subproperties.\n    this.setExpandable(false);\n    this.listItemElement.classList.add('editing-sub-part');\n    this.valueElement.classList.add('hidden');\n\n    this.prompt = new ObjectPropertyPrompt();\n\n    const proxyElement =\n        this.prompt.attachAndStartEditing(this.editableDiv, this.editingCommitted.bind(this, originalContent));\n    proxyElement.classList.add('property-prompt');\n\n    const selection = this.listItemElement.getComponentSelection();\n\n    if (selection) {\n      selection.selectAllChildren(this.editableDiv);\n    }\n    proxyElement.addEventListener('keydown', this.promptKeyDown.bind(this, originalContent), false);\n  }\n\n  private editingEnded(): void {\n    if (this.prompt) {\n      this.prompt.detach();\n      delete this.prompt;\n    }\n    this.editableDiv.remove();\n    this.updateExpandable();\n    this.listItemElement.scrollLeft = 0;\n    this.listItemElement.classList.remove('editing-sub-part');\n    this.select();\n  }\n\n  private editingCancelled(): void {\n    this.valueElement.classList.remove('hidden');\n    this.editingEnded();\n  }\n\n  private async editingCommitted(originalContent: string): Promise<void> {\n    const userInput = this.prompt ? this.prompt.text() : '';\n    if (userInput === originalContent) {\n      this.editingCancelled();  // nothing changed, so cancel\n      return;\n    }\n\n    this.editingEnded();\n    await this.applyExpression(userInput);\n  }\n\n  private promptKeyDown(originalContent: string, event: Event): void {\n    const keyboardEvent = (event as KeyboardEvent);\n    if (keyboardEvent.key === 'Enter') {\n      keyboardEvent.consume();\n      void this.editingCommitted(originalContent);\n      return;\n    }\n    if (keyboardEvent.key === Platform.KeyboardUtilities.ESCAPE_KEY) {\n      keyboardEvent.consume();\n      this.editingCancelled();\n      return;\n    }\n  }\n\n  private async applyExpression(expression: string): Promise<void> {\n    const property = SDK.RemoteObject.RemoteObject.toCallArgument(this.property.symbol || this.property.name);\n    expression = JavaScriptREPL.wrapObjectLiteral(expression.trim());\n\n    if (this.property.synthetic) {\n      let invalidate = false;\n      if (expression) {\n        invalidate = await this.property.setSyntheticValue(expression);\n      }\n      if (invalidate) {\n        const parent = this.parent;\n        if (parent) {\n          parent.invalidateChildren();\n          void parent.onpopulate();\n        }\n      } else {\n        this.update();\n      }\n      return;\n    }\n\n    const parentObject = (parentMap.get(this.property) as SDK.RemoteObject.RemoteObject);\n    const errorPromise =\n        expression ? parentObject.setPropertyValue(property, expression) : parentObject.deleteProperty(property);\n    const error = await errorPromise;\n    if (error) {\n      this.update();\n      return;\n    }\n\n    if (!expression) {\n      // The property was deleted, so remove this tree element.\n      this.parent && this.parent.removeChild(this);\n    } else {\n      // Call updateSiblings since their value might be based on the value that just changed.\n      const parent = this.parent;\n      if (parent) {\n        parent.invalidateChildren();\n        void parent.onpopulate();\n      }\n    }\n  }\n\n  private onInvokeGetterClick(result: SDK.RemoteObject.CallFunctionResult): void {\n    if (!result.object) {\n      return;\n    }\n    this.property.value = result.object;\n    this.property.wasThrown = result.wasThrown || false;\n\n    this.update();\n    this.invalidateChildren();\n    this.updateExpandable();\n  }\n\n  private updateExpandable(): void {\n    if (this.property.value) {\n      this.setExpandable(\n          !this.property.value.customPreview() && this.property.value.hasChildren && !this.property.wasThrown);\n    } else {\n      this.setExpandable(false);\n    }\n  }\n\n  path(): string {\n    return this.nameElement.title;\n  }\n}\n\nexport class ArrayGroupingTreeElement extends UI.TreeOutline.TreeElement {\n  toggleOnClick: boolean;\n  private readonly fromIndex: number;\n  private readonly toIndex: number;\n  private readonly object: SDK.RemoteObject.RemoteObject;\n  private readonly readOnly: boolean;\n  private readonly propertyCount: number;\n  private readonly linkifier: Components.Linkifier.Linkifier|undefined;\n  constructor(\n      object: SDK.RemoteObject.RemoteObject, fromIndex: number, toIndex: number, propertyCount: number,\n      linkifier?: Components.Linkifier.Linkifier) {\n    super(Platform.StringUtilities.sprintf('[%d \u2026 %d]', fromIndex, toIndex), true);\n    this.toggleOnClick = true;\n    this.fromIndex = fromIndex;\n    this.toIndex = toIndex;\n    this.object = object;\n    this.readOnly = true;\n    this.propertyCount = propertyCount;\n    this.linkifier = linkifier;\n  }\n\n  static async populateArray(\n      treeNode: UI.TreeOutline.TreeElement, object: SDK.RemoteObject.RemoteObject, fromIndex: number, toIndex: number,\n      linkifier?: Components.Linkifier.Linkifier): Promise<void> {\n    await ArrayGroupingTreeElement.populateRanges(treeNode, object, fromIndex, toIndex, true, linkifier);\n  }\n\n  private static async populateRanges(\n      treeNode: UI.TreeOutline.TreeElement, object: SDK.RemoteObject.RemoteObject, fromIndex: number, toIndex: number,\n      topLevel: boolean, linkifier?: Components.Linkifier.Linkifier): Promise<void> {\n    // The definition of callFunctionJSON expects an unknown, and setting to `any` causes Closure to fail.\n    // However, leaving this as unknown also causes TypeScript to fail, so for now we leave this as unchecked.\n    // @ts-ignore  TODO(crbug.com/1011811): Fix after Closure is removed.\n    const jsonValue = await object.callFunctionJSON(packRanges, [\n      {value: fromIndex},\n      {value: toIndex},\n      {value: ArrayGroupingTreeElement.bucketThreshold},\n      {value: ArrayGroupingTreeElement.sparseIterationThreshold},\n    ]);\n\n    await callback(jsonValue);\n\n    /**\n     * Note: must declare params as optional.\n     */\n    function packRanges(\n        this: Object, fromIndex?: number, toIndex?: number, bucketThreshold?: number,\n        sparseIterationThreshold?: number): {\n      ranges: number[][],\n    }|undefined {\n      if (fromIndex === undefined || toIndex === undefined || sparseIterationThreshold === undefined ||\n          bucketThreshold === undefined) {\n        return;\n      }\n      let ownPropertyNames: string[]|null = null;\n      const consecutiveRange = (toIndex - fromIndex >= sparseIterationThreshold) && ArrayBuffer.isView(this);\n\n      function* arrayIndexes(object: Object): Generator<number, void, unknown> {\n        if (fromIndex === undefined || toIndex === undefined || sparseIterationThreshold === undefined) {\n          return;\n        }\n\n        if (toIndex - fromIndex < sparseIterationThreshold) {\n          for (let i = fromIndex; i <= toIndex; ++i) {\n            if (i in object) {\n              yield i;\n            }\n          }\n        } else {\n          ownPropertyNames = ownPropertyNames || Object.getOwnPropertyNames(object);\n          for (let i = 0; i < ownPropertyNames.length; ++i) {\n            const name = ownPropertyNames[i];\n\n            const index = Number(name) >>> 0;\n            if ((String(index)) === name && fromIndex <= index && index <= toIndex) {\n              yield index;\n            }\n          }\n        }\n      }\n\n      let count = 0;\n      if (consecutiveRange) {\n        count = toIndex - fromIndex + 1;\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        for (const ignored of arrayIndexes(this)) {\n          ++count;\n        }\n      }\n\n      let bucketSize: number = count;\n      if (count <= bucketThreshold) {\n        bucketSize = count;\n      } else {\n        bucketSize = Math.pow(bucketThreshold, Math.ceil(Math.log(count) / Math.log(bucketThreshold)) - 1);\n      }\n\n      const ranges = [];\n      if (consecutiveRange) {\n        for (let i = fromIndex; i <= toIndex; i += bucketSize) {\n          const groupStart = i;\n          let groupEnd: number = groupStart + bucketSize - 1;\n          if (groupEnd > toIndex) {\n            groupEnd = toIndex;\n          }\n          ranges.push([groupStart, groupEnd, groupEnd - groupStart + 1]);\n        }\n      } else {\n        count = 0;\n        let groupStart = -1;\n        let groupEnd = 0;\n        for (const i of arrayIndexes(this)) {\n          if (groupStart === -1) {\n            groupStart = i;\n          }\n          groupEnd = i;\n          if (++count === bucketSize) {\n            ranges.push([groupStart, groupEnd, count]);\n            count = 0;\n            groupStart = -1;\n          }\n        }\n        if (count > 0) {\n          ranges.push([groupStart, groupEnd, count]);\n        }\n      }\n\n      return {ranges: ranges};\n    }\n\n    async function callback(result: {ranges: Array<Array<number>>}|undefined): Promise<void> {\n      if (!result) {\n        return;\n      }\n      const ranges = (result.ranges as number[][]);\n      if (ranges.length === 1) {\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n        // @ts-ignore\n        await ArrayGroupingTreeElement.populateAsFragment(treeNode, object, ranges[0][0], ranges[0][1], linkifier);\n      } else {\n        for (let i = 0; i < ranges.length; ++i) {\n          const fromIndex = ranges[i][0];\n          const toIndex = ranges[i][1];\n          const count = ranges[i][2];\n          if (fromIndex === toIndex) {\n            // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n            // @ts-ignore\n            await ArrayGroupingTreeElement.populateAsFragment(treeNode, object, fromIndex, toIndex, linkifier);\n          } else {\n            treeNode.appendChild(new ArrayGroupingTreeElement(object, fromIndex, toIndex, count, linkifier));\n          }\n        }\n      }\n      if (topLevel) {\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n        // @ts-ignore\n        await ArrayGroupingTreeElement.populateNonIndexProperties(treeNode, object, linkifier);\n      }\n    }\n  }\n\n  private static async populateAsFragment(\n      this: ArrayGroupingTreeElement, treeNode: UI.TreeOutline.TreeElement, object: SDK.RemoteObject.RemoteObject,\n      fromIndex: number, toIndex: number, linkifier?: Components.Linkifier.Linkifier): Promise<void> {\n    // The definition of callFunction expects an unknown, and setting to `any` causes Closure to fail.\n    // However, leaving this as unknown also causes TypeScript to fail, so for now we leave this as unchecked.\n    const result = await object.callFunction(\n        // @ts-ignore  TODO(crbug.com/1011811): Fix after Closure is removed.\n        buildArrayFragment,\n        [{value: fromIndex}, {value: toIndex}, {value: ArrayGroupingTreeElement.sparseIterationThreshold}]);\n    if (!result.object || result.wasThrown) {\n      return;\n    }\n    const arrayFragment = result.object;\n    const allProperties =\n        await arrayFragment.getAllProperties(false /* accessorPropertiesOnly */, true /* generatePreview */);\n    arrayFragment.release();\n    const properties = allProperties.properties;\n    if (!properties) {\n      return;\n    }\n    properties.sort(ObjectPropertiesSection.compareProperties);\n    for (let i = 0; i < properties.length; ++i) {\n      parentMap.set(properties[i], this.object);\n      const childTreeElement = new ObjectPropertyTreeElement(properties[i], linkifier);\n      childTreeElement.readOnly = true;\n      treeNode.appendChild(childTreeElement);\n    }\n\n    function buildArrayFragment(\n        this: {\n          [x: number]: Object,\n        },\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        fromIndex?: number, toIndex?: number, sparseIterationThreshold?: number): any {\n      const result = Object.create(null);\n\n      if (fromIndex === undefined || toIndex === undefined || sparseIterationThreshold === undefined) {\n        return;\n      }\n\n      if (toIndex - fromIndex < sparseIterationThreshold) {\n        for (let i = fromIndex; i <= toIndex; ++i) {\n          if (i in this) {\n            result[i] = this[i];\n          }\n        }\n      } else {\n        const ownPropertyNames = Object.getOwnPropertyNames(this);\n        for (let i = 0; i < ownPropertyNames.length; ++i) {\n          const name = ownPropertyNames[i];\n          const index = Number(name) >>> 0;\n          if (String(index) === name && fromIndex <= index && index <= toIndex) {\n            result[index] = this[index];\n          }\n        }\n      }\n      return result;\n    }\n  }\n\n  private static async populateNonIndexProperties(\n      this: ArrayGroupingTreeElement, treeNode: UI.TreeOutline.TreeElement, object: SDK.RemoteObject.RemoteObject,\n      linkifier?: Components.Linkifier.Linkifier): Promise<void> {\n    const {properties, internalProperties} = await SDK.RemoteObject.RemoteObject.loadFromObjectPerProto(\n        object, true /* generatePreview */, true /* nonIndexedPropertiesOnly */);\n    if (!properties) {\n      return;\n    }\n    ObjectPropertyTreeElement.populateWithProperties(\n        treeNode, properties, internalProperties, false, false, object, linkifier);\n  }\n\n  async onpopulate(): Promise<void> {\n    if (this.propertyCount >= ArrayGroupingTreeElement.bucketThreshold) {\n      await ArrayGroupingTreeElement.populateRanges(\n          this, this.object, this.fromIndex, this.toIndex, false, this.linkifier);\n      return;\n    }\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // @ts-ignore\n    await ArrayGroupingTreeElement.populateAsFragment(this, this.object, this.fromIndex, this.toIndex, this.linkifier);\n  }\n\n  onattach(): void {\n    this.listItemElement.classList.add('object-properties-section-name');\n  }\n\n  private static bucketThreshold = 100;\n  private static sparseIterationThreshold = 250000;\n}\n\nexport class ObjectPropertyPrompt extends UI.TextPrompt.TextPrompt {\n  constructor() {\n    super();\n    this.initialize(TextEditor.JavaScript.completeInContext);\n  }\n}\n\nconst sectionMap = new Map<RootElement, string>();\n\nconst cachedResultMap = new Map<UI.TreeOutline.TreeElement, string>();\n\nexport class ObjectPropertiesSectionsTreeExpandController {\n  private readonly expandedProperties: Set<string>;\n  constructor(treeOutline: UI.TreeOutline.TreeOutline) {\n    this.expandedProperties = new Set();\n    treeOutline.addEventListener(UI.TreeOutline.Events.ElementAttached, this.elementAttached, this);\n    treeOutline.addEventListener(UI.TreeOutline.Events.ElementExpanded, this.elementExpanded, this);\n    treeOutline.addEventListener(UI.TreeOutline.Events.ElementCollapsed, this.elementCollapsed, this);\n  }\n\n  watchSection(id: string, section: RootElement): void {\n    sectionMap.set(section, id);\n\n    if (this.expandedProperties.has(id)) {\n      section.expand();\n    }\n  }\n\n  stopWatchSectionsWithId(id: string): void {\n    for (const property of this.expandedProperties) {\n      if (property.startsWith(id + ':')) {\n        this.expandedProperties.delete(property);\n      }\n    }\n  }\n\n  private elementAttached(event: Common.EventTarget.EventTargetEvent<UI.TreeOutline.TreeElement>): void {\n    const element = event.data;\n    if (element.isExpandable() && this.expandedProperties.has(this.propertyPath(element))) {\n      element.expand();\n    }\n  }\n\n  private elementExpanded(event: Common.EventTarget.EventTargetEvent<UI.TreeOutline.TreeElement>): void {\n    const element = event.data;\n    this.expandedProperties.add(this.propertyPath(element));\n  }\n\n  private elementCollapsed(event: Common.EventTarget.EventTargetEvent<UI.TreeOutline.TreeElement>): void {\n    const element = event.data;\n    this.expandedProperties.delete(this.propertyPath(element));\n  }\n\n  private propertyPath(treeElement: UI.TreeOutline.TreeElement): string {\n    const cachedPropertyPath = cachedResultMap.get(treeElement);\n    if (cachedPropertyPath) {\n      return cachedPropertyPath;\n    }\n\n    let current: UI.TreeOutline.TreeElement = treeElement;\n    let sectionRoot: UI.TreeOutline.TreeElement = current;\n    if (!treeElement.treeOutline) {\n      throw new Error('No tree outline available');\n    }\n\n    const rootElement = (treeElement.treeOutline.rootElement() as RootElement);\n    let result;\n    while (current !== rootElement) {\n      let currentName = '';\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if ((current as any).property) {\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        currentName = (current as any).property.name;\n      } else {\n        currentName = typeof current.title === 'string' ? current.title : current.title.textContent || '';\n      }\n\n      result = currentName + (result ? '.' + result : '');\n      sectionRoot = current;\n      if (current.parent) {\n        current = current.parent;\n      }\n    }\n    const treeOutlineId = sectionMap.get((sectionRoot as RootElement));\n    result = treeOutlineId + (result ? ':' + result : '');\n    cachedResultMap.set(treeElement, result);\n    return result;\n  }\n}\nlet rendererInstance: Renderer;\n\nexport class Renderer implements UI.UIUtils.Renderer {\n  static instance(opts: {forceNew: boolean} = {forceNew: false}): Renderer {\n    const {forceNew} = opts;\n    if (!rendererInstance || forceNew) {\n      rendererInstance = new Renderer();\n    }\n    return rendererInstance;\n  }\n\n  async render(object: Object, options?: UI.UIUtils.Options): Promise<{\n    node: Node,\n    tree: UI.TreeOutline.TreeOutline|null,\n  }|null> {\n    if (!(object instanceof SDK.RemoteObject.RemoteObject)) {\n      throw new Error('Can\\'t render ' + object);\n    }\n    options = options || {title: undefined, editable: undefined};\n    const title = options.title;\n    const section = new ObjectPropertiesSection(object, title);\n    if (!title) {\n      section.titleLessMode();\n    }\n    section.editable = Boolean(options.editable);\n    return {node: section.element, tree: section} as {\n      node: Node,\n      tree: UI.TreeOutline.TreeOutline | null,\n    } | null;\n  }\n}\n\nexport class ObjectPropertyValue implements UI.ContextMenu.Provider {\n  element: Element;\n  constructor(element: Element) {\n    this.element = element;\n  }\n\n  appendApplicableItems(_event: Event, _contextMenu: UI.ContextMenu.ContextMenu, _object: Object): void {\n  }\n}\n\nexport class ExpandableTextPropertyValue extends ObjectPropertyValue {\n  private readonly text: string;\n  private readonly maxLength: number;\n  private expandElement: Element|null;\n  private readonly maxDisplayableTextLength: number;\n  private readonly expandElementText: Common.UIString.LocalizedString|undefined;\n  private readonly copyButtonText: Common.UIString.LocalizedString;\n  constructor(element: Element, text: string, maxLength: number) {\n    // abbreviated text and expandable text controls are added as children to element\n    super(element);\n    const container = element.createChild('span');\n    this.text = text;\n    this.maxLength = maxLength;\n    container.textContent = text.slice(0, maxLength);\n    UI.Tooltip.Tooltip.install(container as HTMLElement, `${text.slice(0, maxLength)}\u2026`);\n\n    this.expandElement = container.createChild('span');\n    this.maxDisplayableTextLength = 10000000;\n\n    const byteCount = Platform.StringUtilities.countWtf8Bytes(text);\n    const totalBytesText = Platform.NumberUtilities.bytesToString(byteCount);\n    if (this.text.length < this.maxDisplayableTextLength) {\n      this.expandElementText = i18nString(UIStrings.showMoreS, {PH1: totalBytesText});\n      this.expandElement.setAttribute('data-text', this.expandElementText);\n      this.expandElement.classList.add('expandable-inline-button');\n      this.expandElement.addEventListener('click', this.expandText.bind(this));\n      this.expandElement.addEventListener('keydown', (event: Event) => {\n        const keyboardEvent = (event as KeyboardEvent);\n        if (keyboardEvent.key === 'Enter' || keyboardEvent.key === ' ') {\n          this.expandText();\n        }\n      });\n      UI.ARIAUtils.markAsButton(this.expandElement);\n    } else {\n      this.expandElement.setAttribute('data-text', i18nString(UIStrings.longTextWasTruncatedS, {PH1: totalBytesText}));\n      this.expandElement.classList.add('undisplayable-text');\n    }\n\n    this.copyButtonText = i18nString(UIStrings.copy);\n    const copyButton = container.createChild('span', 'expandable-inline-button');\n    copyButton.setAttribute('data-text', this.copyButtonText);\n    copyButton.addEventListener('click', this.copyText.bind(this));\n    copyButton.addEventListener('keydown', (event: Event) => {\n      const keyboardEvent = (event as KeyboardEvent);\n      if (keyboardEvent.key === 'Enter' || keyboardEvent.key === ' ') {\n        this.copyText();\n      }\n    });\n    UI.ARIAUtils.markAsButton(copyButton);\n  }\n\n  appendApplicableItems(_event: Event, contextMenu: UI.ContextMenu.ContextMenu, _object: Object): void {\n    if (this.text.length < this.maxDisplayableTextLength && this.expandElement) {\n      contextMenu.clipboardSection().appendItem(this.expandElementText || '', this.expandText.bind(this));\n    }\n    contextMenu.clipboardSection().appendItem(this.copyButtonText, this.copyText.bind(this));\n  }\n\n  private expandText(): void {\n    if (!this.expandElement) {\n      return;\n    }\n\n    if (this.expandElement.parentElement) {\n      this.expandElement.parentElement.insertBefore(\n          document.createTextNode(this.text.slice(this.maxLength)), this.expandElement);\n    }\n    this.expandElement.remove();\n    this.expandElement = null;\n  }\n\n  private copyText(): void {\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(this.text);\n  }\n}\nexport interface TreeOutlineOptions {\n  readOnly?: boolean;\n}\n"],
  "mappings": "AA8BA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA,MAAM,YAAY;AAAA,EAKhB,YAAY;AAAA,EAIZ,SAAS;AAAA,EAIT,mBAAmB;AAAA,EAInB,kBAAkB;AAAA,EAIlB,cAAc;AAAA,EAId,MAAM;AAAA,EAIN,sBAAsB;AAAA,EAKtB,UAAU;AAAA,EAMV,YAAY;AAAA,EAIZ,kBAAkB;AAAA,EAIlB,WAAW;AAAA,EAIX,kBAAkB;AAAA,EAMlB,wBAAwB;AAAA,EAKxB,WAAW;AAAA,EAKX,uBAAuB;AAAA,EAIvB,MAAM;AAAA;AAER,MAAM,OAAO,KAAK,KAAK,kBAAkB,6DAA6D;AACtG,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAChE,MAAM,wBAAwB;AAC9B,MAAM,uBAAuB;AAE7B,MAAM,YAAY,oBAAI;AACtB,MAAM,6BAA6B,oBAAI;AACvC,MAAM,sBACF,mBAAmB,mBAAmB,uBAAuB,oBAAoB;AAE9E,aAAM,iCAAiC,CAAC,YAAwD;AACrG,SAAO,2BAA2B,IAAI;AAAA;AAGjC,6CAAsC,GAAG,YAAY,oBAAoB;AAAA,EAC7D;AAAA,EACjB;AAAA,EACiB;AAAA,EACjB;AAAA,EACA;AAAA,EACA,YACI,QAAuC,OAA6B,WACpE,cAAwB;AAC1B;AACA,SAAK,SAAS;AACd,SAAK,WAAW;AAChB,QAAI,CAAC,cAAc;AACjB,WAAK;AAAA;AAEP,SAAK,aAAa;AAClB,SAAK,gCAAgC;AACrC,SAAK,4BAA4B,IAAI,YAAY,QAAQ;AACzD,SAAK,YAAY,KAAK;AACtB,QAAI,OAAO,UAAU,YAAY,CAAC,OAAO;AACvC,WAAK,eAAe,KAAK,QAAQ,YAAY;AAC7C,WAAK,aAAa,cAAc,SAAS;AAAA,WACpC;AACL,WAAK,eAAe;AACpB,WAAK,QAAQ,YAAY;AAAA;AAE3B,QAAI,KAAK,wBAAwB,eAAe,CAAC,KAAK,aAAa,aAAa,aAAa;AAC3F,WAAK,aAAa,WAAW;AAAA;AAG/B,+BAA2B,IAAI,KAAK,SAAS;AAC7C,SAAK,iBAAiB,CAAC,mBAAmB;AAC1C,SAAK,cAAc,oBAAoB,UAAU,IAAI,eAAe;AAAA;AAAA,SAG/D,0BACH,QAAuC,WAA4C,WACnF,UAA6B;AAC/B,UAAM,0BACF,wBAAwB,+BAA+B,QAAQ,WAAW,WAAW;AACzF,QAAI,CAAC,OAAO,aAAa;AACvB,aAAO,wBAAwB;AAAA;AAEjC,WAAO,wBAAwB;AAAA;AAAA,SAG1B,+BACH,QAAuC,WAA4C,WACnF,UAA6C;AAC/C,UAAM,eAAe,SAAS,cAAc;AAC5C,iBAAa,UAAU,IAAI;AAC3B,UAAM,aAAa,GAAG,MAAM,+BAA+B,cAAc;AAAA,MACvE,SAAS,CAAC;AAAA,MACV,gBAAgB;AAAA;AAElB,UAAM,gBACF,wBAAwB,oBAAoB,QAAwB,OAAyB;AACjG,eAAW,YAAY,cAAc;AACrC,UAAM,0BAA0B,IAAI,wBAAwB,QAAQ,cAAc;AAClF,4BAAwB,WAAW;AACnC,QAAI,WAAW;AACb,8BAAwB;AAAA;AAE1B,QAAI,UAAU;AACZ,8BAAwB,YAAY;AAAA;AAGtC,WAAO;AAAA;AAAA,SAGF,qBACH,OAA2C,YAA2D;AACxG,QAAI,CAAC,OAAO;AACV;AAAA;AAGF,UAAM,aAAa,MAAM,SAAS,YAAY,MAAM,cAAc;AAClE,UAAM,aAAa,aAAa,oBAAoB,MAAM,aAAa;AACvE,QAAI,YAAY;AACd,YAAM,SAAS,EAAC,MAAM,YAAY,OAAO,oBAAI;AAAA,WACxC;AACL;AAAA;AAGF,eAAW,YAAY,YAAY;AACjC,YAAM,iBAAiB,YAAY,QAAQ,SAAS;AACpD,UAAI,gBAAgB;AAClB,iBAAS,SAAS,EAAC,MAAM;AAAA;AAAA;AAAA;AAAA,SAKxB,yBAAyB,YACyB;AACvD,UAAM,MAAM,oBAAI;AAChB,eAAW,YAAY,YAAY;AACjC,UAAI,IAAI,SAAS,MAAM,SAAS;AAAA;AAElC,WAAO;AAAA;AAAA,SAGF,kBACH,WAAkD,WAA0D;AAC9G,QAAI,CAAC,UAAU,aAAa,UAAU,WAAW;AAC/C,aAAO;AAAA;AAET,QAAI,CAAC,UAAU,aAAa,UAAU,WAAW;AAC/C,aAAO;AAAA;AAET,QAAI,CAAC,UAAU,SAAS,UAAU,OAAO;AACvC,aAAO;AAAA;AAET,QAAI,CAAC,UAAU,SAAS,UAAU,OAAO;AACvC,aAAO;AAAA;AAET,QAAI,CAAC,UAAU,cAAc,UAAU,YAAY;AACjD,aAAO;AAAA;AAET,QAAI,CAAC,UAAU,cAAc,UAAU,YAAY;AACjD,aAAO;AAAA;AAET,QAAI,UAAU,UAAU,CAAC,UAAU,QAAQ;AACzC,aAAO;AAAA;AAET,QAAI,UAAU,UAAU,CAAC,UAAU,QAAQ;AACzC,aAAO;AAAA;AAET,QAAI,UAAU,WAAW,CAAC,UAAU,SAAS;AAC3C,aAAO;AAAA;AAET,QAAI,UAAU,WAAW,CAAC,UAAU,SAAS;AAC3C,aAAO;AAAA;AAET,UAAM,IAAI,UAAU;AACpB,UAAM,IAAI,UAAU;AACpB,QAAI,EAAE,WAAW,QAAQ,CAAC,EAAE,WAAW,MAAM;AAC3C,aAAO;AAAA;AAET,QAAI,EAAE,WAAW,QAAQ,CAAC,EAAE,WAAW,MAAM;AAC3C,aAAO;AAAA;AAET,WAAO,SAAS,gBAAgB,uBAAuB,GAAG;AAAA;AAAA,SAGrD,kBAAkB,MAAmB,WAA8B;AACxE,QAAI,SAAS,MAAM;AACjB,aAAO,GAAG,SAAS;AAAA;AAErB,QAAI,gBAAgB,KAAK,OAAO;AAC9B,aAAO,GAAG,SAAS,2BAA2B,KAAK,QAAQ,OAAO;AAAA;AAEpE,QAAI,WAAW;AACb,aAAO,GAAG,SAAS;AAAA,wCACe,KAAK,YAAY,KAAK,UAAU;AAAA;AAAA;AAGpE,WAAO,GAAG,SAAS,0BAA0B;AAAA;AAAA,SAGxC,mCAAmC,aAAsB,gBAA0B,aAC9E;AACV,UAAM,eAAe,SAAS,cAAc;AAC5C,iBAAa,UAAU,IAAI;AAC3B,kBAAc,eAAe;AAC7B,UAAM,OAAO,YAAY,QAAQ,qBAAqB,aACpC,QAAQ,sBAAsB,aAC9B,QAAQ,YAAY;AACtC,kBAAc,eAAe;AAI7B,UAAM,aAAa,KAAK,MAAM;AAC9B,UAAM,cAAc,KAAK,WAAW;AACpC,UAAM,uBAAuB,KAAK,WAAW;AAC7C,UAAM,UAAU,CAAC,eAAe,KAAK,WAAW;AAChD,UAAM,UAAU,KAAK,WAAW,aAAa,KAAK,WAAW;AAC7D,UAAM,kBAAkB,KAAK,QAAQ;AACrC,UAAM,UAAU,CAAC,cAAc,CAAC,eAAe,CAAC,WAAW,CAAC,WAAW,kBAAkB;AAEzF,QAAI;AACJ,QAAI,SAAS;AACX,wBAAkB,KAAK,UAAU,QAAQ;AACzC,YAAM,iBAAiB,WAAW,KAAK,gBAAgB;AACvD,UAAI,YAAoB;AACxB,UAAI,gBAAgB;AAClB,oBAAY,eAAe,GAAG,UAAU;AAAA;AAE1C,kBAAY,SAAS,iBAAiB;AAAA,eAC7B,YAAY;AACrB,wBAAkB,KAAK,UAAU,WAAW,GAAG;AAC/C,kBAAY,gBAAgB,iBAAiB,iBAAiB;AAAA,eACrD,aAAa;AACtB,wBAAkB,KAAK,UAAU,YAAY;AAC7C,kBAAY,WAAW,iBAAiB,iBAAiB;AAAA,eAChD,sBAAsB;AAC/B,wBAAkB,KAAK,UAAU,IAAI;AACrC,kBAAY,WAAW,iBAAiB,iBAAiB;AAAA,eAChD,SAAS;AAClB,wBAAkB,KAAK,UAAU,WAAW;AAC5C,kBAAY,UAAU,iBAAiB,iBAAiB;AAAA,eAC/C,SAAS;AAClB,YAAM,kCAAkC;AACxC,UAAI,eAAuB;AAC3B,UAAI,aAAa;AACf,uBAAe,cAAc;AAAA,iBACpB,KAAK,SAAS,iCAAiC;AACxD,uBAAe,KAAK,UAAU,GAAG,kBAAkB,KAAK;AAAA;AAE1D,kBAAY,IAAI,MAAM;AAAA,WACjB;AACL,kBAAY,UAAU,MAAM,iBAAiB;AAAA;AAE/C,OAAG,QAAQ,QAAQ,QAAQ,cAAc,SAAS,gBAAgB,qBAAqB,aAAa;AACpG,WAAO;AAEP,8BAA0B,UAA0B;AAClD,YAAM,wBAAwB,SAAS,QAAQ;AAC/C,YAAM,sBAAsB,SAAS,MAAM;AAC3C,UAAI,0BAA0B,MAAM,uBAAuB,oBAAoB,UAAU,UACrF,oBAAoB,QAAQ,uBAAuB;AACrD,cAAM,OAAO,SAAS,UAAU,GAAG,uBAAuB,UAAU;AACpE,cAAM,OAAO,SAAS,UAAU,uBAAuB,oBAAoB,QAAQ;AACnF,eAAO,OAAO;AAAA;AAEhB,aAAO,cAAc;AAAA;AAGvB,yBAAqB,QAAgB,MAAc,cAA4B;AAC7E,YAAM,wBAAwB;AAC9B,UAAI,OAAO,QAAQ;AACjB,qBAAa,YAAY,QAAQ,gCAAgC,cAAc,SAAS;AAAA;AAE1F,UAAI,gBAAgB;AAClB,WAAG,QAAQ,gBACP,cAAc,SAAS,gBAAgB,qBAAqB,KAAK,QAAQ;AAAA,aACxE;AACL,WAAG,QAAQ,gBAAgB,cAAc,aAAa,QAAQ,OAAO;AAAA;AAAA;AAAA;AAAA,SAKpE,qCACH,OAAsC,WAAoB,aAAsB,eAChF,WAAiE;AACnE,QAAI,MAAM,iBAAiB;AACzB,YAAM,SAAU,IAAI,uBAAuB,OAAQ;AACnD,aAAO,UAAU,IAAI;AACrB,aAAO,IAAI,oBAAoB;AAAA;AAEjC,WAAO,wBAAwB,oBAAoB,OAAO,WAAW,aAAa,eAAe;AAAA;AAAA,SAG5F,iBAAiB,SAAkB,KAA0C;AAKlF,UAAM,0BACD,IAAI,SAAS,YAAa,KAAI,YAAY,iBAAiB,IAAI,YAAY;AAChF,QAAI,CAAC,2BAA2B,CAAC,sBAAsB,gCAAgC,oBAAoB,MAAM;AAC/G;AAAA;AAEF,UAAM,aAAa,IAAI,WAAW,KAAK;AACvC,eAAW,OAAO;AAAA,MAChB,UAAU;AAAA,MACV,OAAO;AAAA,MACP,OAAO;AAAA,MACP,QAAQ;AAAA;AAGV,eAAW,UAAU,OAAM,UAAqC;AAC9D,YAAM;AACN,YAAM,aACF,sBAAsB,gCAAgC,gCAAgC;AAC1F,WAAK,YAAY,kCAAkC,KAAK,YAAY,kCAAkC;AACtG,WAAK,WAAW,kBAAkB;AAAA;AAGpC,OAAG,QAAQ,QAAQ,QAAQ,YAAY;AACvC,YAAQ,UAAU,IAAI;AACtB,YAAQ,YAAY;AAAA;AAAA,SAGf,oBACH,OAAsC,WAAoB,aAAsB,eAChF,WAAiE;AACnE,QAAI;AACJ,UAAM,OAAO,MAAM;AACnB,UAAM,UAAU,MAAM;AACtB,UAAM,cAAc,MAAM,eAAe;AACzC,UAAM,YAAY,MAAM;AACxB,QAAI,SAAS,YAAY,YAAY,qBAAqB;AACxD,YAAM,cAAc,MAAM,gBAAgB,4BACtC,MAAM,MAAM,UAAU,MAAM,MAAM,YAAY,MAAM,MAAM;AAC9D,UAAI,eAAe,WAAW;AAC5B,eAAO,IAAI,oBAAoB,UAAU,mBAAmB,aAAa,SAAS,aAAa;AAAA;AAEjG,sBAAgB,IAAI,oBAAoB;AAAA,eAC/B,SAAS,YAAY,OAAO,gBAAgB,UAAU;AAC/D,sBAAgB;AAAA,eACP,SAAS,YAAY,YAAY,eAAe;AACzD,sBAAgB;AAAA,eACP,SAAS,YAAY;AAC9B,sBAAgB,IAAI,oBAAoB,wBAAwB,mCAAmC;AAAA,eAC1F,SAAS,YAAY,YAAY,UAAU,aAAa;AACjE,sBAAgB,IAAI,oBAAoB;AAAA,WACnC;AACL,YAAM,eAAe,SAAS,cAAc;AAC5C,mBAAa,UAAU,IAAI,kBAAmB,YAAW;AACzD,UAAI,MAAM,WAAW,aAAa;AAChC,cAAM,mBAAmB,IAAI;AAC7B,yBAAiB,oBAAoB,cAAc,MAAM,SAAS;AAClE,wBAAgB,IAAI,oBAAoB;AACxC,WAAG,QAAQ,QAAQ,QAAQ,cAAc,SAAwB,eAAe;AAAA,iBACvE,YAAY,SAAS,2BAA2B;AACzD,wBAAgB,IAAI,4BAA4B,cAAc,aAAa;AAAA,aACtE;AACL,wBAAgB,IAAI,oBAAoB;AACxC,sBAAc,QAAQ,cAAc;AACpC,WAAG,QAAQ,QAAQ,QAAQ,cAAc,SAAwB;AAAA;AAEnE,WAAK,iBAAiB,cAAc;AAAA;AAGtC,QAAI,WAAW;AACb,YAAM,iBAAiB,SAAS,cAAc;AAC9C,qBAAe,UAAU,IAAI;AAC7B,qBAAe,UAAU,IAAI;AAC7B,qBAAe,YACX,KAAK,KAAK,yBAAyB,MAAM,UAAU,YAAY,EAAC,KAAK,cAAc;AACvF,oBAAc,UAAU;AAAA;AAE1B,kBAAc,QAAQ,UAAU,IAAI;AACpC,WAAO;AAEP,oDAAyD;AACvD,YAAM,eAAe,SAAS,cAAc;AAC5C,mBAAa,cAAc,MAAM,WAAW,UAAU,WAAW;AACjE,SAAG,QAAQ,QAAQ,QAAQ,cAAc,eAAe;AACxD,aAAO;AAAA;AAGT,mCAAoD;AAClD,YAAM,eAAe,SAAS,cAAc;AAC5C,mBAAa,UAAU,IAAI;AAC3B,YAAM,OAAO,KAAK,UAAU;AAC5B,UAAI;AACJ,UAAI,YAAY,SAAS,2BAA2B;AAClD,yBAAgB,IAAI,4BAA4B,cAAc,MAAM;AAAA,aAC/D;AACL,WAAG,QAAQ,gBAAgB,cAAc;AACzC,yBAAgB,IAAI,oBAAoB;AACxC,WAAG,QAAQ,QAAQ,QAAQ,cAAc;AAAA;AAE3C,aAAO;AAAA;AAGT,wCAAyD;AACvD,YAAM,eAAe,SAAS,cAAc;AAC5C,mBAAa,UAAU,IAAI;AAC3B,YAAM,OAAO,GAAG,cAAc;AAC9B,UAAI;AACJ,UAAI,KAAK,SAAS,2BAA2B;AAC3C,yBAAgB,IAAI,4BAA4B,cAAc,MAAM;AAAA,aAC/D;AACL,cAAM,gBAAgB;AACtB,WAAG,QAAQ,gBAAgB,cAAc,GAAG;AAC5C,qBAAa,YAAY,cAAc;AACvC,yBAAgB,IAAI,oBAAoB;AACxC,WAAG,QAAQ,QAAQ,QAAQ,cAAc;AAAA;AAG3C,aAAO;AAAA;AAGT,iCAAsC;AACpC,YAAM,eAAe,SAAS,cAAc;AAC5C,mBAAa,UAAU,IAAI;AAC3B,8BAAwB,cAAe;AACvC,mBAAa,iBAAiB,SAAS,WAAS;AAC9C,aAAK,OAAO,SAAS,OAAO;AAC5B,cAAM,QAAQ;AAAA,SACb;AACH,mBAAa,iBACT,aAAa,MAAM,IAAI,aAAa,aAAa,yBAAyB,QAAQ;AACtF,mBAAa,iBAAiB,cAAc,MAAM,IAAI,aAAa,aAAa,wBAAwB;AACxG,aAAO;AAAA;AAAA;AAAA,SAIJ,uBACH,MAAqC,SAAkB,SACvD,gBAAyC;AAC3C,WAAO,KAAK,gBAAgB,uBAAuB,MAAM,KAAK;AAE9D,2BAAuB,UAAwD;AAC7E,UAAI,WAAW,YAAY,SAAS,UAAU;AAC5C,gBAAQ,UAAU,IAAI;AACtB,gBAAQ,iBAAiB,SAAS,MAAM;AACtC,eAAK,OAAO,SAAS,OAAO,SAAS;AACrC,iBAAO;AAAA;AAAA;AAKX,UAAI,cAAyC,iBAAiB,KAAK;AACnE,UAAI,YAAY,SAAS,cAAc;AACrC,sBAAc,SAAS;AAAA;AAEzB,YAAM,eACF,wBAAwB,mCAAmC,KAAK,aAAa,gBAAgB;AACjG,cAAQ,YAAY;AAAA;AAAA;AAAA,SAIjB,sBACH,UACA,gBAAiE;AACnE,QAAI,CAAC,kBAAkB,CAAC,eAAe,WAAW;AAChD,aAAO;AAAA;AAET,UAAM,OAAO,SAAS;AACtB,UAAM,UAAW,eAAe,SAAS,iBAAkB,UAAS,YAAY,SAAS;AACzF,WAAO,CAAC;AAAA;AAAA,EAGV,YAAkB;AAChB,SAAK,oBAAoB;AAAA;AAAA,EAG3B,SAAe;AACb,SAAK,0BAA0B;AAAA;AAAA,EAGjC,YAAY,OAAsB;AAChC,SAAK,WAAW;AAAA;AAAA,EAGlB,oBAAgD;AAC9C,WAAO,KAAK;AAAA;AAAA,EAGd,oBAA0B;AACxB,SAAK,QAAQ,iBAAiB,eAAe,KAAK,sBAAsB,KAAK,OAAO;AAAA;AAAA,EAG9E,sBAAsB,OAAoB;AAChD,UAAM,cAAc,IAAI,GAAG,YAAY,YAAY;AACnD,gBAAY,sBAAsB,KAAK;AACvC,QAAI,KAAK,kBAAkB,IAAI,aAAa,iBAAiB;AAC3D,kBAAY,cAAc,WACtB,WAAW,UAAU,oBACrB,KAAK,0BAA0B,kBAAkB,KAAK,KAAK,2BAA2B;AAC1F,kBAAY,cAAc,WACtB,WAAW,UAAU,mBACrB,KAAK,0BAA0B,iBAAiB,KAAK,KAAK;AAAA;AAEhE,SAAK,YAAY;AAAA;AAAA,EAGnB,gBAAsB;AACpB,SAAK,0BAA0B,gBAAgB,UAAU,IAAI;AAC7D,SAAK,0BAA0B,oBAAoB,UAAU,IAAI;AACjE,SAAK,0BAA0B;AAAA;AAAA;AAKnC,MAAM,uBAAuB;AAE7B,IAAI,4BAA4B;AAEzB,6CAAsC,OAAqB;AAChE,8BAA4B;AAAA;AAEvB,+CAAgD;AACrD,SAAO;AAAA;AAGF,yDAAkD,GAAG,YAAY,oBAAoB;AAAA,EACzE;AAAA,EACjB,YAAY,SAAmC;AAC7C;AACA,SAAK,iBAAiB,CAAC,mBAAmB;AAC1C,SAAK,WAAW,CAAE,YAAW,QAAQ;AACrC,SAAK,eAAe,UAAU,IAAI;AAClC,SAAK,eAAe,UAAU,IAAI;AAClC,SAAK;AAAA;AAAA;AAIF,WAAW,uBAAX,kBAAW,0BAAX;AACL,uDAAM,KAAN;AACA,8EAA6B,KAA7B;AAFgB;AAAA;AAKX,iCAA0B,GAAG,YAAY,YAAY;AAAA,EACzC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACjB;AAAA,EACA,YACI,QAAuC,WAA4C,kBACnF,iBAAuC,oCACvC,kBAA2D,IAC3D,eAA8C,QAAQ;AACxD,UAAM,iBAAiB,SAAS,cAAc;AAC9C,UAAM;AAEN,SAAK,SAAS;AACd,SAAK,YAAY;AACjB,SAAK,mBAAmB;AACxB,SAAK,iBAAiB;AACtB,SAAK,kBAAkB;AACvB,SAAK,eAAe;AAEpB,SAAK,cAAc;AACnB,SAAK,aAAa;AAClB,SAAK,gBAAgB;AACrB,SAAK,gBAAgB,UAAU,IAAI;AACnC,SAAK,gBAAgB,iBAAiB,eAAe,KAAK,cAAc,KAAK,OAAO;AAAA;AAAA,EAGtF,WAAiB;AACf,QAAI,KAAK,aAAa;AACpB,WAAK,YAAY,QAAQ,UAAU,IAAI;AAAA;AAAA;AAAA,EAI3C,aAAmB;AACjB,QAAI,KAAK,aAAa;AACpB,WAAK,YAAY,QAAQ,UAAU,OAAO;AAAA;AAAA;AAAA,EAI9C,WAAW,IAAoB;AAC7B,WAAO;AAAA;AAAA,EAGD,cAAc,OAAoB;AACxC,UAAM,cAAc,IAAI,GAAG,YAAY,YAAY;AACnD,gBAAY,sBAAsB,KAAK;AAEvC,QAAI,KAAK,kBAAkB,IAAI,aAAa,iBAAiB;AAC3D,YAAM,EAAC,UAAS,KAAK;AACrB,YAAM,gBAAgB,OAAO,UAAU,WAAW,KAAK,UAAU,OAAO,MAAM,KAAK;AACnF,YAAM,mBAAmB,MAAY;AACnC,aAAK,YAAY,YAAY,KAAK,YAAY,OAAO;AACrD,aAAK,sBAAsB,8BAA8B,SAAU;AAAA;AAErE,kBAAY,mBAAmB,WAAW,WAAW,UAAU,YAAY;AAAA;AAG7E,gBAAY,cAAc,WACtB,WAAW,UAAU,oBAAoB,KAAK,kBAAkB,KAAK,MAAM;AAC/E,gBAAY,cAAc,WAAW,WAAW,UAAU,mBAAmB,KAAK,iBAAiB,KAAK;AACxG,SAAK,YAAY;AAAA;AAAA,QAGb,aAA4B;AAChC,UAAM,cAAe,KAAK;AAC1B,UAAM,YAAY,cAAc,QAAQ,YAAY,qBAAqB;AACzE,WAAO,0BAA0B,SAC7B,MAAM,KAAK,QAAQ,WAAW,OAAO,KAAK,WAAW,KAAK,kBAAkB,KAAK,gBACjF,KAAK,iBAAiB,KAAK;AAAA;AAAA;AAM5B,aAAM,8BAA8B;AAEpC,+CAAwC,GAAG,YAAY,YAAY;AAAA,EACxE;AAAA,EACA;AAAA,EACQ;AAAA,EACA;AAAA,EACS;AAAA,EACjB;AAAA,EACA;AAAA,EACQ;AAAA,EACR;AAAA,EACQ;AAAA,EACA;AAAA,EACR;AAAA,EACA;AAAA,EACA,YAAY,UAAiD,WAA4C;AAEvG;AAEA,SAAK,WAAW;AAChB,SAAK,gBAAgB;AACrB,SAAK,mBAAmB;AACxB,SAAK,YAAY;AACjB,SAAK,yBAAyB;AAC9B,SAAK,gBAAgB,iBAAiB,eAAe,KAAK,iBAAiB,KAAK,OAAO;AACvF,SAAK,gBAAgB,QAAQ,4BAA4B,SAAS;AAClE,SAAK,qBAAqB,SAAS,SAAS;AAAA;AAAA,eAGjC,SACT,aAAyC,OAAsC,WAC/E,uBAAgC,WAA4C,kBAC5E,iBAAuC,oCACvC,iBACA,aAA4D;AAC9D,QAAI,MAAM,gBAAgB,sBAAsB;AAC9C,kBAAY;AACZ,WAAK,yBAAyB,cAAc,aAAa,OAAO,GAAG,MAAM,gBAAgB,GAAG;AAC5F;AAAA;AAGF,QAAI,YAAY,qBAAqB;AACrC,YAAQ;AAAA,WACD;AACH,QAAC,GAAC,eAAc,MAAM,MAAM,iBAAiB,OAAoC;AACjF;AAAA,WACG;AACH,QAAC,GAAC,YAAY,uBACT,MAAM,IAAI,aAAa,aAAa,uBAAuB,OAAO;AACvE;AAAA;AAEJ,gBAAY;AACZ,QAAI,CAAC,YAAY;AACf;AAAA;AAGF,QAAI,oBAAoB,QAAW;AACjC,iBAAW,KAAK,GAAG;AAAA;AAGrB,8BAA0B,uBACtB,aAAa,YAAY,oBAAoB,WAAW,uBAAuB,eAAe,OAAO,WACrG;AAAA;AAAA,SAGC,uBACH,UAAsC,YACtC,oBAAkE,WAClE,uBAAgC,OAChC,WAA4C,kBAAsC;AACpF,4BAAwB,qBAAqB,OAAO;AACpD,UAAM,QAAQ,wBAAwB,yBAAyB;AAE/D,QAAI,OAAO,QAAQ;AACjB,YAAM,cAAc,MAAM,OAAO,KAAK;AACtC,UAAI,aAAa;AACf,mBAAW,EAAC,MAAM,MAAM,IAAI,cAAa,aAAa;AACpD,cAAI,MAAM,IAAI,OAAO,UAAU,UAAU;AACvC,kBAAM,OAAO,MAAM,IAAI,MAAM;AAAA;AAAA;AAAA;AAKnC,iBAAW,YAAY,YAAY;AACjC,YAAI,SAAS,QAAQ;AACnB,gBAAM,cAAc,MAAM,OAAO;AACjC,gBAAM,gBAAgB,SAAS,OAAO,KAAK;AAC3C,cAAI,CAAC,eAAe,CAAC,eAAe;AAClC,qBAAS,OAAO,aAAa;AAAA,iBACxB;AACL,qBAAS,OAAO,aACZ,CAAC,iBAAiB,eAAe,KAAK,UAAQ,YAAY,IAAI,KAAK,UAAU,KAAK;AAAA;AAAA;AAAA;AAAA;AAM9F,eAAW,KAAK,wBAAwB;AACxC,yBAAqB,sBAAsB;AAE3C,UAAM,kBAAkB,mBAAmB,KAAK,cAAY,SAAS,SAAS;AAC9E,QAAI,iBAAiB;AACnB,gBAAU,IAAI,iBAAiB;AAC/B,YAAM,cAAc,IAAI,0BAA0B,iBAAiB;AACnE,kBAAY,cAAc;AAC1B,kBAAY;AACZ,eAAS,YAAY;AAAA;AAGvB,UAAM,iBAAiB;AACvB,aAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,EAAE,GAAG;AAC1C,YAAM,WAAW,WAAW;AAC5B,gBAAU,IAAI,UAAU;AAGxB,UAAI,CAAC,wBAAwB,sBAAsB,UAAW,SAAiB,WAAW;AACxF;AAAA;AAGF,UAAI,SAAS,SAAS,CAAC,uBAAuB;AAC5C,YAAI,SAAS,QAAQ;AACnB,gBAAM,iBACF,IAAI,IAAI,aAAa,qBAAqB,SAAS,SAAS,MAAM,SAAS,QAAQ;AACvF,oBAAU,IAAI,gBAAgB;AAC9B,yBAAe,KAAK;AAAA;AAEtB,YAAI,SAAS,QAAQ;AACnB,gBAAM,iBACF,IAAI,IAAI,aAAa,qBAAqB,SAAS,SAAS,MAAM,SAAS,QAAQ;AACvF,oBAAU,IAAI,gBAAgB;AAC9B,yBAAe,KAAK;AAAA;AAAA;AAIxB,YAAM,kBAAkB,SAAS,UAAU,CAAC,SAAS;AACrD,UAAI,iBAAiB;AACnB,cAAM,UAAU,IAAI,0BAA0B,UAAU;AACxD,YAAI,SAAS,SAAS,cAAc,SAAS,OAAO,cAAc,YAAY;AAC5E,kBAAQ;AACR,cAAI,QAAQ,gBAAgB;AAC1B,oBAAQ;AAAA;AAAA;AAGZ,iBAAS,YAAY;AAAA;AAAA;AAGzB,aAAS,IAAI,GAAG,IAAI,eAAe,QAAQ,EAAE,GAAG;AAC9C,eAAS,YAAY,IAAI,0BAA0B,eAAe,IAAI;AAAA;AAGxE,eAAW,YAAY,oBAAoB;AACzC,gBAAU,IAAI,UAAU;AACxB,YAAM,cAAc,IAAI,0BAA0B,UAAU;AAC5D,UAAI,SAAS,SAAS,eAAe;AACnC;AAAA;AAEF,UAAI,SAAS,SAAS,mBAAmB,WAAW;AAClD;AAAA;AAEF,eAAS,YAAY;AAAA;AAGvB,8BAA0B,+BAA+B,UAAU;AAAA;AAAA,SAGtD,+BAA+B,UAAsC,kBAC3E;AACP,QAAI,SAAS,cAAc;AACzB;AAAA;AAEF,UAAM,QAAQ,SAAS,cAAc;AACrC,UAAM,UAAU,IAAI;AACpB,UAAM,cAAc,oBAAoB,WAAW,UAAU;AAC7D,UAAM,cAAc,IAAI,GAAG,YAAY,YAAY;AACnD,aAAS,YAAY;AAAA;AAAA,SAGhB,uCACH,QAA4C,cAC5C,UAA4E;AAC9E,UAAM,cAAc,SAAS,cAAc;AAC3C,UAAM,UAAU,YAAY,YAAY;AACxC,YAAQ,cAAc,WAAW,UAAU;AAC3C,QAAI,CAAC,QAAQ;AACX,aAAO;AAAA;AAET,YAAQ,UAAU,IAAI;AACtB,OAAG,QAAQ,QAAQ,QAAQ,SAAS,WAAW,UAAU;AACzD,YAAQ,iBAAiB,SAAS,qBAAqB;AAEvD,iCAA6B,OAAoB;AAC/C,YAAM;AACN,UAAI,QAAQ;AAIV,aAAK,OAAO,aAAa,cAAc,CAAC,EAAC,OAAO,KAAK,UAAU,kBAAiB,KAAK;AAAA;AAAA;AAIzF,0BAAoC,UAA0B;AAC5D,UAAI,SAAiB;AACrB,YAAM,aAAa,KAAK,MAAM;AAC9B,eAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,IAAI,GAAG,EAAE,GAAG;AAEjD,iBAAS,OAAO,WAAW;AAAA;AAE7B,aAAO;AAAA;AAGT,WAAO;AAAA;AAAA,EAGT,eAAe,OAAe,wBAA0C;AACtE,QAAI,aAAa,GAAG,QAAQ;AAC5B,QAAI,wBAAwB;AAC1B,oBAAc,MAAM;AAAA;AAEtB,SAAK;AAEL,SAAK,YAAY,OAAO,KAAK,aAAa;AAC1C,QAAI,KAAK,SAAS,OAAO;AACvB,YAAM,YAAY,KAAK,SAAS,MAAM;AACtC,UAAI,cAAc,UAAU;AAC1B,aAAK,YAAY,OAAO,KAAK,cAAc;AAAA;AAAA;AAI/C,WAAO,QAAQ,KAAK,iBAAiB;AAAA;AAAA,EAG/B,YAAY,OAAe,SAAkB,cAA4B;AAC/E,UAAM,SAAS;AACf,UAAM,UAAU,QAAQ,eAAe;AACvC,UAAM,YAAY;AAClB,QAAI,QAAQ,MAAM,KAAK;AACvB,WAAO,OAAO;AACZ,aAAO,KAAK,IAAI,UAAU,UAAU,YAAY,MAAM,OAAO,MAAM,GAAG;AACtE,cAAQ,MAAM,KAAK;AAAA;AAErB,QAAI,OAAO,QAAQ;AACjB,SAAG,QAAQ,8BAA8B,SAAS,QAAQ,cAAc,KAAK;AAAA;AAAA;AAAA,EAIzE,iCAAiC,SAA8C;AACrF,SAAK,YAAY;AACjB,SAAK,WAAW,QAAQ,OAAK;AAC3B,QAAE,SAAS;AAAA;AAEb,WAAO;AAAA;AAAA,EAGD,gCAAsC;AAC5C,UAAM,UAAU,SAAS,cAAc;AACvC,YAAQ,UAAU,IAAI;AACtB,YAAQ,cAAc,WAAW,UAAU;AAC3C,OAAG,QAAQ,QAAQ,QAAQ,SAAS,WAAW,UAAU,UAAU,EAAC,KAAK,KAAK;AAC9E,UAAM,WAAW,KAAK;AACtB,aAAS,IAAI,KAAK,wBAAwB,IAAI,KAAK,cAAc,EAAE,GAAG;AACpE,eAAS,GAAG,SAAS;AAAA;AAEvB,UAAM,0BAA0B,IAAI,GAAG,YAAY,YAAY;AAC/D,4BAAwB,WAAW,KAAK,iCAAiC,KAAK,MAAM;AACpF,SAAK,YAAY;AAAA;AAAA,EAGnB,yBAA+B;AAC7B,OAAG,QAAQ,iBAAiB,KAAK;AACjC,SAAK,mBAAmB;AAAA;AAAA,QAGpB,aAA4B;AAChC,UAAM,gBAAiB,KAAK,SAAS;AACrC,YAAQ,OAAO,OAAO,kBAAkB;AACxC,UAAM,cAAe,KAAK;AAC1B,UAAM,YAAY,cAAc,QAAQ,YAAY,qBAAqB;AACzE,UAAM,cAAc,KAAK,SAAS,SAAS,kBAAkB,gBAAgB,UAAU,IAAI,KAAK;AAChG,QAAI,aAAa;AACf,YAAM,0BAA0B,SAC5B,MAAM,eAAe,WAAW,OAAO,KAAK,WAAW,QAAW,QAAW,QAAW;AAC5F,UAAI,KAAK,eAAe,KAAK,wBAAwB;AACnD,aAAK;AAAA;AAAA;AAAA;AAAA,EAKX,WAAW,OAAuB;AAChC,UAAM,SAAU,MAAM;AACtB,UAAM,oBAAoB,OAAO,mBAAmB,KAAK,iBACpD,KAAK,wBAAwB,OAAO,mBAAmB,KAAK;AACjE,QAAI,KAAK,SAAS,SAAS,CAAC,KAAK,SAAS,MAAM,mBAAmB,qBAC9D,MAAK,SAAS,YAAY,KAAK,SAAS,SAAS;AACpD,WAAK;AAAA;AAEP,WAAO;AAAA;AAAA,EAGT,UAAmB;AACjB,QAAI,KAAK,SAAS,SAAS,CAAC,KAAK,SAAS,MAAM,mBAC3C,MAAK,SAAS,YAAY,KAAK,SAAS,SAAS;AACpD,WAAK;AACL,aAAO;AAAA;AAET,WAAO;AAAA;AAAA,EAGT,WAAiB;AACf,SAAK;AACL,SAAK;AAAA;AAAA,EAGP,WAAiB;AACf,SAAK,yBAAyB;AAAA;AAAA,EAGhC,aAAmB;AACjB,SAAK,yBAAyB;AAAA;AAAA,EAGxB,yBAAyB,OAAsB;AACrD,QAAI,CAAC,KAAK,sBAAsB;AAC9B;AAAA;AAEF,QAAI,OAAO;AACT,WAAK,aAAa,aAAa,KAAK,sBAAsB,KAAK;AAAA,WAC1D;AACL,WAAK,aAAa,aAAa,KAAK,cAAc,KAAK;AAAA;AAAA;AAAA,EAInD,2BAA2B,OAAoD;AACrF,UAAM,sBAAsB,MAAM,eAAe,CAAC,MAAM,mBAAmB,MAAM,YAAY,UACzF,MAAM,SAAS,cAAe,OAAM,SAAS,YAAY,MAAM;AACnE,QAAI,CAAC,qBAAqB;AACxB,aAAO;AAAA;AAGT,UAAM,eAAe,SAAS,cAAc;AAC5C,iBAAa,UAAU,IAAI;AAC3B,QAAI,MAAM,gBAAgB,UAAU;AAClC,mBAAa,cAAc;AAAA,WACtB;AACL,mBAAa,gCAAgC,MAAM,eAAe;AAAA;AAEpE,iBAAa,UAAU,IAAI,kBAAmB,OAAM,WAAW,MAAM;AACrE,OAAG,QAAQ,QAAQ,QAAQ,cAAc,MAAM,eAAe;AAC9D,4BAAwB,iBAAiB,cAAc;AACvD,WAAO;AAAA;AAAA,EAGT,SAAe;AACb,SAAK,cACA,wBAAwB,kBAAkB,KAAK,SAAS,MAAM,KAAK,SAAS;AACjF,QAAI,CAAC,KAAK,SAAS,YAAY;AAC7B,WAAK,YAAY,UAAU,IAAI;AAAA;AAEjC,QAAI,KAAK,SAAS,OAAO;AACvB,WAAK,YAAY,UAAU,IAAI;AAAA;AAEjC,QAAI,KAAK,SAAS,WAAW;AAC3B,WAAK,YAAY,UAAU,IAAI;AAAA;AAGjC,SAAK;AAEL,UAAM,oBAAoB,KAAK,SAAS,aAAa,KAAK,SAAS,SAAS;AAC5E,QAAI,mBAAmB;AACrB,WAAK,eAAe,SAAS,cAAc;AAC3C,WAAK,aAAa,UAAU,IAAI;AAAA,eACvB,KAAK,SAAS,OAAO;AAC9B,YAAM,cAAc,KAAK,SAAS,SAAS;AAC3C,WAAK,gBAAgB,wBAAwB,qCACzC,KAAK,SAAS,OAAO,KAAK,SAAS,WAAW,aAAa,KAAK,iBAAiB,KAAK;AAC1F,WAAK,eAAgB,KAAK,cAAc;AAAA,eAC/B,KAAK,SAAS,QAAQ;AAC/B,WAAK,eAAe,SAAS,cAAc;AAC3C,YAAM,UAAU,KAAK,aAAa,YAAY;AAC9C,cAAQ,cAAc,WAAW,UAAU;AAC3C,cAAQ,UAAU,IAAI;AACtB,SAAG,QAAQ,QAAQ,QAAQ,SAAS,WAAW,UAAU;AACzD,YAAM,SAAS,UAAU,IAAI,KAAK;AAClC,YAAM,SAAS,KAAK,SAAS;AAC7B,cAAQ,iBAAiB,SAAS,CAAC,UAAiB;AAClD,cAAM;AACN,cAAM,eAAe;AAAA;AAAA;AAAA;AAMrB,aAAK,OAAO,aAAa,cAAc,CAAC,IAAI,aAAa,aAAa,eAAe,UAChF,KAAK,KAAK,oBAAoB,KAAK;AAAA,SACvC;AAAA,WACE;AACL,WAAK,eAAe,SAAS,cAAc;AAC3C,WAAK,aAAa,UAAU,IAAI;AAChC,WAAK,aAAa,cAAc,WAAW,UAAU;AACrD,SAAG,QAAQ,QAAQ,QAAQ,KAAK,cAAc,WAAW,UAAU;AAAA;AAGrE,UAAM,YAAY,KAAK,aAAa;AACpC,QAAI,KAAK,SAAS,SAAS,aAAa,CAAC,KAAK,SAAS,WAAW;AAChE,WAAK,uBAAuB,KAAK,2BAA2B,KAAK,SAAS;AAAA;AAG5E,QAAI,UAA0B;AAC9B,QAAI;AAEJ,QAAI,KAAK,SAAS,QAAQ,YAAY;AACpC,YAAM,OAAO,IAAI,WAAW,KAAK;AACjC,WAAK,OAAO;AAAA,QACV,UAAU;AAAA,QACV,OAAO;AAAA,QACP,OAAO;AAAA,QACP,QAAQ;AAAA;AAEV,gBAAU,GAAG,SAAS;AAAA,iCACK;AAAA;AAAA;AAI7B,QAAI,mBAAmB;AACrB,kBAAY,GAAG,SAAS;AAAA,uCACS,UAAU,KAAK;AAAA;AAAA,WAE3C;AACL,kBAAY,GAAG,SAAS;AAAA,uCACS,UAAU,KAAK,gBAAgB,KAAK;AAAA;AAAA;AAIvE,SAAK,gBAAgB;AACrB,SAAK,eAAgB;AACrB,SAAK,gBAAgB,YAAY,KAAK;AACtC,SAAK,gBAAgB,QAAQ,SAAS,KAAK,SAAS,QAAQ,aAAa,SAAS;AAAA;AAAA,EAG5E,qBAA2B;AACjC,QAAI,KAAK,YAAY,OAAO;AAC1B;AAAA;AAGF,UAAM,OAAO,KAAK,SAAS;AAE3B,QAAI,KAAK,SAAS,WAAW;AAC3B,SAAG,QAAQ,QAAQ,QAAQ,KAAK,aAAa;AAC7C;AAAA;AAIF,UAAM,iBAAiB;AACvB,UAAM,YAAY;AAElB,UAAM,aAAc,KAAK,kBAAkB,6BAA6B,KAAK,OAAO,eAChE,CAAC,KAAK,OAAO,SAAS,YACtC,KAAK,OAAO,YAAY,QACxB;AAEJ,QAAI,KAAK,SAAS,WAAW,eAAe,KAAK,OAAO;AACtD,SAAG,QAAQ,QAAQ,QAAQ,KAAK,aAAa,aAAa,GAAG,cAAc,SAAS;AAAA,eAC3E,UAAU,KAAK,OAAO;AAC/B,SAAG,QAAQ,QAAQ,QAAQ,KAAK,aAAa,GAAG,cAAc;AAAA,WACzD;AACL,SAAG,QAAQ,QAAQ,QAAQ,KAAK,aAAa,GAAG,cAAc,KAAK,UAAU;AAAA;AAAA;AAAA,EAIzE,iBAAiB,OAAoB;AAC3C,UAAM,cAAc,IAAI,GAAG,YAAY,YAAY;AACnD,gBAAY,sBAAsB;AAClC,QAAI,KAAK,SAAS,QAAQ;AACxB,kBAAY,sBAAsB,KAAK,SAAS;AAAA;AAElD,QAAI,KAAK,SAAS,OAAO;AACvB,kBAAY,sBAAsB,KAAK,SAAS;AAChD,UAAI,UAAU,IAAI,KAAK,qBAAqB,IAAI,aAAa,iBAAiB;AAC5E,cAAM,EAAC,OAAO,EAAC,YAAU,KAAK;AAC9B,cAAM,gBAAgB,OAAO,UAAU,WAAW,KAAK,UAAU,OAAO,MAAM,KAAK;AACnF,cAAM,mBAAmB,MAAY;AACnC,eAAK,YAAY,YAAY,KAAK,YAAY,OAAO;AACrD,eAAK,sBAAsB,8BAA8B,SAAU;AAAA;AAErE,oBAAY,mBAAmB,WAAW,WAAW,UAAU,YAAY;AAAA;AAAA;AAG/E,QAAI,CAAC,KAAK,SAAS,aAAa,KAAK,eAAe,KAAK,YAAY,OAAO;AAC1E,YAAM,kBAAkB,KAAK,sBAAsB,8BAA8B,SAAS,KACtF,KAAK,sBAAsB,+BAA+B,KAAK,YAAY;AAC/E,kBAAY,mBAAmB,WAAW,WAAW,UAAU,mBAAmB;AAAA;AAEpF,QAAI,UAAU,IAAI,KAAK,qBAAqB,IAAI,aAAa,iBAAiB;AAC5E,kBAAY,cAAc,WACtB,WAAW,UAAU,oBAAoB,KAAK,kBAAkB,KAAK,MAAM;AAC/E,kBAAY,cAAc,WAAW,WAAW,UAAU,mBAAmB,KAAK,iBAAiB,KAAK;AAAA;AAE1G,QAAI,KAAK,eAAe;AACtB,WAAK,cAAc,sBAAsB,OAAO,aAAa;AAAA;AAE/D,SAAK,YAAY;AAAA;AAAA,EAGX,eAAqB;AAC3B,UAAM,cAAe,KAAK;AAC1B,QAAI,KAAK,UAAU,CAAC,eAAe,CAAC,YAAY,YAAY,KAAK,UAAU;AACzE;AAAA;AAEF,SAAK,cAAe,KAAK,aAAa,YAAY,QAAQ;AAE1D,QAAI,KAAK,SAAS,OAAO;AACvB,UAAI,OAAoC,KAAK,SAAS,MAAM;AAC5D,UAAI,KAAK,SAAS,MAAM,SAAS,YAAY,OAAO,SAAS,UAAU;AACrE,eAAO,IAAI;AAAA;AAGb,WAAK,YAAY,gCAAgC,MAAM,WAAW,UAAU;AAAA;AAG9E,UAAM,kBAAkB,KAAK,YAAY,eAAe;AAGxD,SAAK,cAAc;AACnB,SAAK,gBAAgB,UAAU,IAAI;AACnC,SAAK,aAAa,UAAU,IAAI;AAEhC,SAAK,SAAS,IAAI;AAElB,UAAM,eACF,KAAK,OAAO,sBAAsB,KAAK,aAAa,KAAK,iBAAiB,KAAK,MAAM;AACzF,iBAAa,UAAU,IAAI;AAE3B,UAAM,YAAY,KAAK,gBAAgB;AAEvC,QAAI,WAAW;AACb,gBAAU,kBAAkB,KAAK;AAAA;AAEnC,iBAAa,iBAAiB,WAAW,KAAK,cAAc,KAAK,MAAM,kBAAkB;AAAA;AAAA,EAGnF,eAAqB;AAC3B,QAAI,KAAK,QAAQ;AACf,WAAK,OAAO;AACZ,aAAO,KAAK;AAAA;AAEd,SAAK,YAAY;AACjB,SAAK;AACL,SAAK,gBAAgB,aAAa;AAClC,SAAK,gBAAgB,UAAU,OAAO;AACtC,SAAK;AAAA;AAAA,EAGC,mBAAyB;AAC/B,SAAK,aAAa,UAAU,OAAO;AACnC,SAAK;AAAA;AAAA,QAGO,iBAAiB,iBAAwC;AACrE,UAAM,YAAY,KAAK,SAAS,KAAK,OAAO,SAAS;AACrD,QAAI,cAAc,iBAAiB;AACjC,WAAK;AACL;AAAA;AAGF,SAAK;AACL,UAAM,KAAK,gBAAgB;AAAA;AAAA,EAGrB,cAAc,iBAAyB,OAAoB;AACjE,UAAM,gBAAiB;AACvB,QAAI,cAAc,QAAQ,SAAS;AACjC,oBAAc;AACd,WAAK,KAAK,iBAAiB;AAC3B;AAAA;AAEF,QAAI,cAAc,QAAQ,SAAS,kBAAkB,YAAY;AAC/D,oBAAc;AACd,WAAK;AACL;AAAA;AAAA;AAAA,QAIU,gBAAgB,YAAmC;AAC/D,UAAM,WAAW,IAAI,aAAa,aAAa,eAAe,KAAK,SAAS,UAAU,KAAK,SAAS;AACpG,iBAAa,eAAe,kBAAkB,WAAW;AAEzD,QAAI,KAAK,SAAS,WAAW;AAC3B,UAAI,aAAa;AACjB,UAAI,YAAY;AACd,qBAAa,MAAM,KAAK,SAAS,kBAAkB;AAAA;AAErD,UAAI,YAAY;AACd,cAAM,SAAS,KAAK;AACpB,YAAI,QAAQ;AACV,iBAAO;AACP,eAAK,OAAO;AAAA;AAAA,aAET;AACL,aAAK;AAAA;AAEP;AAAA;AAGF,UAAM,eAAgB,UAAU,IAAI,KAAK;AACzC,UAAM,eACF,aAAa,aAAa,iBAAiB,UAAU,cAAc,aAAa,eAAe;AACnG,UAAM,QAAQ,MAAM;AACpB,QAAI,OAAO;AACT,WAAK;AACL;AAAA;AAGF,QAAI,CAAC,YAAY;AAEf,WAAK,UAAU,KAAK,OAAO,YAAY;AAAA,WAClC;AAEL,YAAM,SAAS,KAAK;AACpB,UAAI,QAAQ;AACV,eAAO;AACP,aAAK,OAAO;AAAA;AAAA;AAAA;AAAA,EAKV,oBAAoB,QAAmD;AAC7E,QAAI,CAAC,OAAO,QAAQ;AAClB;AAAA;AAEF,SAAK,SAAS,QAAQ,OAAO;AAC7B,SAAK,SAAS,YAAY,OAAO,aAAa;AAE9C,SAAK;AACL,SAAK;AACL,SAAK;AAAA;AAAA,EAGC,mBAAyB;AAC/B,QAAI,KAAK,SAAS,OAAO;AACvB,WAAK,cACD,CAAC,KAAK,SAAS,MAAM,mBAAmB,KAAK,SAAS,MAAM,eAAe,CAAC,KAAK,SAAS;AAAA,WACzF;AACL,WAAK,cAAc;AAAA;AAAA;AAAA,EAIvB,OAAe;AACb,WAAO,KAAK,YAAY;AAAA;AAAA;AAIrB,8CAAuC,GAAG,YAAY,YAAY;AAAA,EACvE;AAAA,EACiB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACjB,YACI,QAAuC,WAAmB,SAAiB,eAC3E,WAA4C;AAC9C,UAAM,SAAS,gBAAgB,QAAQ,kBAAa,WAAW,UAAU;AACzE,SAAK,gBAAgB;AACrB,SAAK,YAAY;AACjB,SAAK,UAAU;AACf,SAAK,SAAS;AACd,SAAK,WAAW;AAChB,SAAK,gBAAgB;AACrB,SAAK,YAAY;AAAA;AAAA,eAGN,cACT,UAAsC,QAAuC,WAAmB,SAChG,WAA2D;AAC7D,UAAM,yBAAyB,eAAe,UAAU,QAAQ,WAAW,SAAS,MAAM;AAAA;AAAA,eAGvE,eACjB,UAAsC,QAAuC,WAAmB,SAChG,UAAmB,WAA2D;AAIhF,UAAM,YAAY,MAAM,OAAO,iBAAiB,YAAY;AAAA,MAC1D,EAAC,OAAO;AAAA,MACR,EAAC,OAAO;AAAA,MACR,EAAC,OAAO,yBAAyB;AAAA,MACjC,EAAC,OAAO,yBAAyB;AAAA;AAGnC,UAAM,SAAS;AAKf,wBACkB,YAAoB,UAAkB,iBACpD,0BAEQ;AACV,UAAI,eAAc,UAAa,aAAY,UAAa,6BAA6B,UACjF,oBAAoB,QAAW;AACjC;AAAA;AAEF,UAAI,mBAAkC;AACtC,YAAM,mBAAoB,WAAU,cAAa,4BAA6B,YAAY,OAAO;AAEjG,6BAAuB,SAAkD;AACvE,YAAI,eAAc,UAAa,aAAY,UAAa,6BAA6B,QAAW;AAC9F;AAAA;AAGF,YAAI,WAAU,aAAY,0BAA0B;AAClD,mBAAS,IAAI,YAAW,KAAK,UAAS,EAAE,GAAG;AACzC,gBAAI,KAAK,SAAQ;AACf,oBAAM;AAAA;AAAA;AAAA,eAGL;AACL,6BAAmB,oBAAoB,OAAO,oBAAoB;AAClE,mBAAS,IAAI,GAAG,IAAI,iBAAiB,QAAQ,EAAE,GAAG;AAChD,kBAAM,OAAO,iBAAiB;AAE9B,kBAAM,QAAQ,OAAO,UAAU;AAC/B,gBAAK,OAAO,WAAY,QAAQ,cAAa,SAAS,SAAS,UAAS;AACtE,oBAAM;AAAA;AAAA;AAAA;AAAA;AAMd,UAAI,QAAQ;AACZ,UAAI,kBAAkB;AACpB,gBAAQ,WAAU,aAAY;AAAA,aACzB;AAEL,mBAAW,WAAW,aAAa,OAAO;AACxC,YAAE;AAAA;AAAA;AAIN,UAAI,aAAqB;AACzB,UAAI,SAAS,iBAAiB;AAC5B,qBAAa;AAAA,aACR;AACL,qBAAa,KAAK,IAAI,iBAAiB,KAAK,KAAK,KAAK,IAAI,SAAS,KAAK,IAAI,oBAAoB;AAAA;AAGlG,YAAM,SAAS;AACf,UAAI,kBAAkB;AACpB,iBAAS,IAAI,YAAW,KAAK,UAAS,KAAK,YAAY;AACrD,gBAAM,aAAa;AACnB,cAAI,WAAmB,aAAa,aAAa;AACjD,cAAI,WAAW,UAAS;AACtB,uBAAW;AAAA;AAEb,iBAAO,KAAK,CAAC,YAAY,UAAU,WAAW,aAAa;AAAA;AAAA,aAExD;AACL,gBAAQ;AACR,YAAI,aAAa;AACjB,YAAI,WAAW;AACf,mBAAW,KAAK,aAAa,OAAO;AAClC,cAAI,eAAe,IAAI;AACrB,yBAAa;AAAA;AAEf,qBAAW;AACX,cAAI,EAAE,UAAU,YAAY;AAC1B,mBAAO,KAAK,CAAC,YAAY,UAAU;AACnC,oBAAQ;AACR,yBAAa;AAAA;AAAA;AAGjB,YAAI,QAAQ,GAAG;AACb,iBAAO,KAAK,CAAC,YAAY,UAAU;AAAA;AAAA;AAIvC,aAAO,EAAC;AAAA;AAGV,4BAAwB,QAAiE;AACvF,UAAI,CAAC,QAAQ;AACX;AAAA;AAEF,YAAM,SAAU,OAAO;AACvB,UAAI,OAAO,WAAW,GAAG;AAGvB,cAAM,yBAAyB,mBAAmB,UAAU,QAAQ,OAAO,GAAG,IAAI,OAAO,GAAG,IAAI;AAAA,aAC3F;AACL,iBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,EAAE,GAAG;AACtC,gBAAM,aAAY,OAAO,GAAG;AAC5B,gBAAM,WAAU,OAAO,GAAG;AAC1B,gBAAM,QAAQ,OAAO,GAAG;AACxB,cAAI,eAAc,UAAS;AAGzB,kBAAM,yBAAyB,mBAAmB,UAAU,QAAQ,YAAW,UAAS;AAAA,iBACnF;AACL,qBAAS,YAAY,IAAI,yBAAyB,QAAQ,YAAW,UAAS,OAAO;AAAA;AAAA;AAAA;AAI3F,UAAI,UAAU;AAGZ,cAAM,yBAAyB,2BAA2B,UAAU,QAAQ;AAAA;AAAA;AAAA;AAAA,eAK7D,mBACe,UAAsC,QACtE,WAAmB,SAAiB,WAA2D;AAGjG,UAAM,SAAS,MAAM,OAAO,aAExB,oBACA,CAAC,EAAC,OAAO,aAAY,EAAC,OAAO,WAAU,EAAC,OAAO,yBAAyB;AAC5E,QAAI,CAAC,OAAO,UAAU,OAAO,WAAW;AACtC;AAAA;AAEF,UAAM,gBAAgB,OAAO;AAC7B,UAAM,gBACF,MAAM,cAAc,iBAAiB,OAAoC;AAC7E,kBAAc;AACd,UAAM,aAAa,cAAc;AACjC,QAAI,CAAC,YAAY;AACf;AAAA;AAEF,eAAW,KAAK,wBAAwB;AACxC,aAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,EAAE,GAAG;AAC1C,gBAAU,IAAI,WAAW,IAAI,KAAK;AAClC,YAAM,mBAAmB,IAAI,0BAA0B,WAAW,IAAI;AACtE,uBAAiB,WAAW;AAC5B,eAAS,YAAY;AAAA;AAGvB,gCAMI,YAAoB,UAAkB,0BAAwC;AAChF,YAAM,UAAS,uBAAO,OAAO;AAE7B,UAAI,eAAc,UAAa,aAAY,UAAa,6BAA6B,QAAW;AAC9F;AAAA;AAGF,UAAI,WAAU,aAAY,0BAA0B;AAClD,iBAAS,IAAI,YAAW,KAAK,UAAS,EAAE,GAAG;AACzC,cAAI,KAAK,MAAM;AACb,oBAAO,KAAK,KAAK;AAAA;AAAA;AAAA,aAGhB;AACL,cAAM,mBAAmB,OAAO,oBAAoB;AACpD,iBAAS,IAAI,GAAG,IAAI,iBAAiB,QAAQ,EAAE,GAAG;AAChD,gBAAM,OAAO,iBAAiB;AAC9B,gBAAM,QAAQ,OAAO,UAAU;AAC/B,cAAI,OAAO,WAAW,QAAQ,cAAa,SAAS,SAAS,UAAS;AACpE,oBAAO,SAAS,KAAK;AAAA;AAAA;AAAA;AAI3B,aAAO;AAAA;AAAA;AAAA,eAIU,2BACe,UAAsC,QACtE,WAA2D;AAC7D,UAAM,EAAC,YAAY,uBAAsB,MAAM,IAAI,aAAa,aAAa,uBACzE,QAAQ,MAA4B;AACxC,QAAI,CAAC,YAAY;AACf;AAAA;AAEF,8BAA0B,uBACtB,UAAU,YAAY,oBAAoB,OAAO,OAAO,QAAQ;AAAA;AAAA,QAGhE,aAA4B;AAChC,QAAI,KAAK,iBAAiB,yBAAyB,iBAAiB;AAClE,YAAM,yBAAyB,eAC3B,MAAM,KAAK,QAAQ,KAAK,WAAW,KAAK,SAAS,OAAO,KAAK;AACjE;AAAA;AAIF,UAAM,yBAAyB,mBAAmB,MAAM,KAAK,QAAQ,KAAK,WAAW,KAAK,SAAS,KAAK;AAAA;AAAA,EAG1G,WAAiB;AACf,SAAK,gBAAgB,UAAU,IAAI;AAAA;AAAA,SAGtB,kBAAkB;AAAA,SAClB,2BAA2B;AAAA;AAGrC,0CAAmC,GAAG,WAAW,WAAW;AAAA,EACjE,cAAc;AACZ;AACA,SAAK,WAAW,WAAW,WAAW;AAAA;AAAA;AAI1C,MAAM,aAAa,oBAAI;AAEvB,MAAM,kBAAkB,oBAAI;AAErB,0DAAmD;AAAA,EACvC;AAAA,EACjB,YAAY,aAAyC;AACnD,SAAK,qBAAqB,oBAAI;AAC9B,gBAAY,iBAAiB,GAAG,YAAY,OAAO,iBAAiB,KAAK,iBAAiB;AAC1F,gBAAY,iBAAiB,GAAG,YAAY,OAAO,iBAAiB,KAAK,iBAAiB;AAC1F,gBAAY,iBAAiB,GAAG,YAAY,OAAO,kBAAkB,KAAK,kBAAkB;AAAA;AAAA,EAG9F,aAAa,IAAY,SAA4B;AACnD,eAAW,IAAI,SAAS;AAExB,QAAI,KAAK,mBAAmB,IAAI,KAAK;AACnC,cAAQ;AAAA;AAAA;AAAA,EAIZ,wBAAwB,IAAkB;AACxC,eAAW,YAAY,KAAK,oBAAoB;AAC9C,UAAI,SAAS,WAAW,KAAK,MAAM;AACjC,aAAK,mBAAmB,OAAO;AAAA;AAAA;AAAA;AAAA,EAK7B,gBAAgB,OAA8E;AACpG,UAAM,UAAU,MAAM;AACtB,QAAI,QAAQ,kBAAkB,KAAK,mBAAmB,IAAI,KAAK,aAAa,WAAW;AACrF,cAAQ;AAAA;AAAA;AAAA,EAIJ,gBAAgB,OAA8E;AACpG,UAAM,UAAU,MAAM;AACtB,SAAK,mBAAmB,IAAI,KAAK,aAAa;AAAA;AAAA,EAGxC,iBAAiB,OAA8E;AACrG,UAAM,UAAU,MAAM;AACtB,SAAK,mBAAmB,OAAO,KAAK,aAAa;AAAA;AAAA,EAG3C,aAAa,aAAiD;AACpE,UAAM,qBAAqB,gBAAgB,IAAI;AAC/C,QAAI,oBAAoB;AACtB,aAAO;AAAA;AAGT,QAAI,UAAsC;AAC1C,QAAI,cAA0C;AAC9C,QAAI,CAAC,YAAY,aAAa;AAC5B,YAAM,IAAI,MAAM;AAAA;AAGlB,UAAM,cAAe,YAAY,YAAY;AAC7C,QAAI;AACJ,WAAO,YAAY,aAAa;AAC9B,UAAI,cAAc;AAGlB,UAAK,QAAgB,UAAU;AAG7B,sBAAe,QAAgB,SAAS;AAAA,aACnC;AACL,sBAAc,OAAO,QAAQ,UAAU,WAAW,QAAQ,QAAQ,QAAQ,MAAM,eAAe;AAAA;AAGjG,eAAS,cAAe,UAAS,MAAM,SAAS;AAChD,oBAAc;AACd,UAAI,QAAQ,QAAQ;AAClB,kBAAU,QAAQ;AAAA;AAAA;AAGtB,UAAM,gBAAgB,WAAW,IAAK;AACtC,aAAS,gBAAiB,UAAS,MAAM,SAAS;AAClD,oBAAgB,IAAI,aAAa;AACjC,WAAO;AAAA;AAAA;AAGX,IAAI;AAEG,sBAA8C;AAAA,SAC5C,SAAS,OAA4B,EAAC,UAAU,SAAkB;AACvE,UAAM,EAAC,aAAY;AACnB,QAAI,CAAC,oBAAoB,UAAU;AACjC,yBAAmB,IAAI;AAAA;AAEzB,WAAO;AAAA;AAAA,QAGH,OAAO,QAAgB,SAGrB;AACN,QAAI,CAAE,mBAAkB,IAAI,aAAa,eAAe;AACtD,YAAM,IAAI,MAAM,kBAAmB;AAAA;AAErC,cAAU,WAAW,EAAC,OAAO,QAAW,UAAU;AAClD,UAAM,QAAQ,QAAQ;AACtB,UAAM,UAAU,IAAI,wBAAwB,QAAQ;AACpD,QAAI,CAAC,OAAO;AACV,cAAQ;AAAA;AAEV,YAAQ,WAAW,QAAQ,QAAQ;AACnC,WAAO,EAAC,MAAM,QAAQ,SAAS,MAAM;AAAA;AAAA;AAOlC,iCAA6D;AAAA,EAClE;AAAA,EACA,YAAY,SAAkB;AAC5B,SAAK,UAAU;AAAA;AAAA,EAGjB,sBAAsB,QAAe,cAA0C,SAAuB;AAAA;AAAA;AAIjG,iDAA0C,oBAAoB;AAAA,EAClD;AAAA,EACA;AAAA,EACT;AAAA,EACS;AAAA,EACA;AAAA,EACA;AAAA,EACjB,YAAY,SAAkB,MAAc,WAAmB;AAE7D,UAAM;AACN,UAAM,YAAY,QAAQ,YAAY;AACtC,SAAK,OAAO;AACZ,SAAK,YAAY;AACjB,cAAU,cAAc,KAAK,MAAM,GAAG;AACtC,OAAG,QAAQ,QAAQ,QAAQ,WAA0B,GAAG,KAAK,MAAM,GAAG;AAEtE,SAAK,gBAAgB,UAAU,YAAY;AAC3C,SAAK,2BAA2B;AAEhC,UAAM,YAAY,SAAS,gBAAgB,eAAe;AAC1D,UAAM,iBAAiB,SAAS,gBAAgB,cAAc;AAC9D,QAAI,KAAK,KAAK,SAAS,KAAK,0BAA0B;AACpD,WAAK,oBAAoB,WAAW,UAAU,WAAW,EAAC,KAAK;AAC/D,WAAK,cAAc,aAAa,aAAa,KAAK;AAClD,WAAK,cAAc,UAAU,IAAI;AACjC,WAAK,cAAc,iBAAiB,SAAS,KAAK,WAAW,KAAK;AAClE,WAAK,cAAc,iBAAiB,WAAW,CAAC,UAAiB;AAC/D,cAAM,gBAAiB;AACvB,YAAI,cAAc,QAAQ,WAAW,cAAc,QAAQ,KAAK;AAC9D,eAAK;AAAA;AAAA;AAGT,SAAG,UAAU,aAAa,KAAK;AAAA,WAC1B;AACL,WAAK,cAAc,aAAa,aAAa,WAAW,UAAU,uBAAuB,EAAC,KAAK;AAC/F,WAAK,cAAc,UAAU,IAAI;AAAA;AAGnC,SAAK,iBAAiB,WAAW,UAAU;AAC3C,UAAM,aAAa,UAAU,YAAY,QAAQ;AACjD,eAAW,aAAa,aAAa,KAAK;AAC1C,eAAW,iBAAiB,SAAS,KAAK,SAAS,KAAK;AACxD,eAAW,iBAAiB,WAAW,CAAC,UAAiB;AACvD,YAAM,gBAAiB;AACvB,UAAI,cAAc,QAAQ,WAAW,cAAc,QAAQ,KAAK;AAC9D,aAAK;AAAA;AAAA;AAGT,OAAG,UAAU,aAAa;AAAA;AAAA,EAG5B,sBAAsB,QAAe,aAAyC,SAAuB;AACnG,QAAI,KAAK,KAAK,SAAS,KAAK,4BAA4B,KAAK,eAAe;AAC1E,kBAAY,mBAAmB,WAAW,KAAK,qBAAqB,IAAI,KAAK,WAAW,KAAK;AAAA;AAE/F,gBAAY,mBAAmB,WAAW,KAAK,gBAAgB,KAAK,SAAS,KAAK;AAAA;AAAA,EAG5E,aAAmB;AACzB,QAAI,CAAC,KAAK,eAAe;AACvB;AAAA;AAGF,QAAI,KAAK,cAAc,eAAe;AACpC,WAAK,cAAc,cAAc,aAC7B,SAAS,eAAe,KAAK,KAAK,MAAM,KAAK,aAAa,KAAK;AAAA;AAErE,SAAK,cAAc;AACnB,SAAK,gBAAgB;AAAA;AAAA,EAGf,WAAiB;AACvB,SAAK,sBAAsB,8BAA8B,SAAS,KAAK;AAAA;AAAA;",
  "names": []
}
