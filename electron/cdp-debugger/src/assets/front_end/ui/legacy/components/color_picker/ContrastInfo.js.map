{
  "version": 3,
  "sources": ["../../../../../../../../front_end/ui/legacy/components/color_picker/ContrastInfo.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../../core/common/common.js';\n\nexport class ContrastInfo extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  private readonly isNullInternal: boolean;\n  private contrastRatioInternal: number|null;\n  private contrastRatioAPCAInternal: number|null;\n  private contrastRatioThresholds: {\n    [x: string]: number,\n  }|null;\n  private readonly contrastRationAPCAThreshold: number|null;\n  private fgColor: Common.Color.Color|null;\n  private bgColorInternal: Common.Color.Color|null;\n  private colorFormatInternal!: string|undefined;\n  constructor(contrastInfo: ContrastInfoType|null) {\n    super();\n    this.isNullInternal = true;\n    this.contrastRatioInternal = null;\n    this.contrastRatioAPCAInternal = null;\n    this.contrastRatioThresholds = null;\n    this.contrastRationAPCAThreshold = 0;\n    this.fgColor = null;\n    this.bgColorInternal = null;\n\n    if (!contrastInfo) {\n      return;\n    }\n\n    if (!contrastInfo.computedFontSize || !contrastInfo.computedFontWeight || !contrastInfo.backgroundColors ||\n        contrastInfo.backgroundColors.length !== 1) {\n      return;\n    }\n\n    this.isNullInternal = false;\n    this.contrastRatioThresholds =\n        Common.ColorUtils.getContrastThreshold(contrastInfo.computedFontSize, contrastInfo.computedFontWeight);\n    this.contrastRationAPCAThreshold =\n        Common.ColorUtils.getAPCAThreshold(contrastInfo.computedFontSize, contrastInfo.computedFontWeight);\n    const bgColorText = contrastInfo.backgroundColors[0];\n    const bgColor = Common.Color.Color.parse(bgColorText);\n    if (bgColor) {\n      this.setBgColorInternal(bgColor);\n    }\n  }\n\n  isNull(): boolean {\n    return this.isNullInternal;\n  }\n\n  setColor(fgColor: Common.Color.Color, colorFormat?: string): void {\n    this.fgColor = fgColor;\n    this.colorFormatInternal = colorFormat;\n    this.updateContrastRatio();\n    this.dispatchEventToListeners(Events.ContrastInfoUpdated);\n  }\n\n  colorFormat(): string|undefined {\n    return this.colorFormatInternal;\n  }\n\n  color(): Common.Color.Color|null {\n    return this.fgColor;\n  }\n\n  contrastRatio(): number|null {\n    return this.contrastRatioInternal;\n  }\n\n  contrastRatioAPCA(): number|null {\n    return this.contrastRatioAPCAInternal;\n  }\n\n  contrastRatioAPCAThreshold(): number|null {\n    return this.contrastRationAPCAThreshold;\n  }\n\n  setBgColor(bgColor: Common.Color.Color): void {\n    this.setBgColorInternal(bgColor);\n    this.dispatchEventToListeners(Events.ContrastInfoUpdated);\n  }\n\n  private setBgColorInternal(bgColor: Common.Color.Color): void {\n    this.bgColorInternal = bgColor;\n\n    if (!this.fgColor) {\n      return;\n    }\n\n    const fgRGBA = this.fgColor.rgba();\n\n    // If we have a semi-transparent background color over an unknown\n    // background, draw the line for the \"worst case\" scenario: where\n    // the unknown background is the same color as the text.\n    if (bgColor.hasAlpha()) {\n      const blendedRGBA: number[] = Common.ColorUtils.blendColors(bgColor.rgba(), fgRGBA);\n      this.bgColorInternal = new Common.Color.Color(blendedRGBA, Common.Color.Format.RGBA);\n    }\n\n    this.contrastRatioInternal = Common.ColorUtils.contrastRatio(fgRGBA, this.bgColorInternal.rgba());\n    this.contrastRatioAPCAInternal =\n        Common.ColorUtils.contrastRatioAPCA(this.fgColor.rgba(), this.bgColorInternal.rgba());\n  }\n\n  bgColor(): Common.Color.Color|null {\n    return this.bgColorInternal;\n  }\n\n  private updateContrastRatio(): void {\n    if (!this.bgColorInternal || !this.fgColor) {\n      return;\n    }\n    this.contrastRatioInternal = Common.ColorUtils.contrastRatio(this.fgColor.rgba(), this.bgColorInternal.rgba());\n    this.contrastRatioAPCAInternal =\n        Common.ColorUtils.contrastRatioAPCA(this.fgColor.rgba(), this.bgColorInternal.rgba());\n  }\n\n  contrastRatioThreshold(level: string): number|null {\n    if (!this.contrastRatioThresholds) {\n      return null;\n    }\n    return this.contrastRatioThresholds[level];\n  }\n}\n\nexport const enum Events {\n  ContrastInfoUpdated = 'ContrastInfoUpdated',\n}\n\nexport type EventTypes = {\n  [Events.ContrastInfoUpdated]: void,\n};\n\nexport interface ContrastInfoType {\n  backgroundColors: string[]|null;\n  computedFontSize: string;\n  computedFontWeight: string;\n}\n"],
  "mappings": "AAIA;AAEO,kCAA2B,OAAO,cAAc,cAA0B;AAAA,EAC9D;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EAGS;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EACR,YAAY,cAAqC;AAC/C;AACA,SAAK,iBAAiB;AACtB,SAAK,wBAAwB;AAC7B,SAAK,4BAA4B;AACjC,SAAK,0BAA0B;AAC/B,SAAK,8BAA8B;AACnC,SAAK,UAAU;AACf,SAAK,kBAAkB;AAEvB,QAAI,CAAC,cAAc;AACjB;AAAA;AAGF,QAAI,CAAC,aAAa,oBAAoB,CAAC,aAAa,sBAAsB,CAAC,aAAa,oBACpF,aAAa,iBAAiB,WAAW,GAAG;AAC9C;AAAA;AAGF,SAAK,iBAAiB;AACtB,SAAK,0BACD,OAAO,WAAW,qBAAqB,aAAa,kBAAkB,aAAa;AACvF,SAAK,8BACD,OAAO,WAAW,iBAAiB,aAAa,kBAAkB,aAAa;AACnF,UAAM,cAAc,aAAa,iBAAiB;AAClD,UAAM,UAAU,OAAO,MAAM,MAAM,MAAM;AACzC,QAAI,SAAS;AACX,WAAK,mBAAmB;AAAA;AAAA;AAAA,EAI5B,SAAkB;AAChB,WAAO,KAAK;AAAA;AAAA,EAGd,SAAS,SAA6B,aAA4B;AAChE,SAAK,UAAU;AACf,SAAK,sBAAsB;AAC3B,SAAK;AACL,SAAK,yBAAyB,OAAO;AAAA;AAAA,EAGvC,cAAgC;AAC9B,WAAO,KAAK;AAAA;AAAA,EAGd,QAAiC;AAC/B,WAAO,KAAK;AAAA;AAAA,EAGd,gBAA6B;AAC3B,WAAO,KAAK;AAAA;AAAA,EAGd,oBAAiC;AAC/B,WAAO,KAAK;AAAA;AAAA,EAGd,6BAA0C;AACxC,WAAO,KAAK;AAAA;AAAA,EAGd,WAAW,SAAmC;AAC5C,SAAK,mBAAmB;AACxB,SAAK,yBAAyB,OAAO;AAAA;AAAA,EAG/B,mBAAmB,SAAmC;AAC5D,SAAK,kBAAkB;AAEvB,QAAI,CAAC,KAAK,SAAS;AACjB;AAAA;AAGF,UAAM,SAAS,KAAK,QAAQ;AAK5B,QAAI,QAAQ,YAAY;AACtB,YAAM,cAAwB,OAAO,WAAW,YAAY,QAAQ,QAAQ;AAC5E,WAAK,kBAAkB,IAAI,OAAO,MAAM,MAAM,aAAa,OAAO,MAAM,OAAO;AAAA;AAGjF,SAAK,wBAAwB,OAAO,WAAW,cAAc,QAAQ,KAAK,gBAAgB;AAC1F,SAAK,4BACD,OAAO,WAAW,kBAAkB,KAAK,QAAQ,QAAQ,KAAK,gBAAgB;AAAA;AAAA,EAGpF,UAAmC;AACjC,WAAO,KAAK;AAAA;AAAA,EAGN,sBAA4B;AAClC,QAAI,CAAC,KAAK,mBAAmB,CAAC,KAAK,SAAS;AAC1C;AAAA;AAEF,SAAK,wBAAwB,OAAO,WAAW,cAAc,KAAK,QAAQ,QAAQ,KAAK,gBAAgB;AACvG,SAAK,4BACD,OAAO,WAAW,kBAAkB,KAAK,QAAQ,QAAQ,KAAK,gBAAgB;AAAA;AAAA,EAGpF,uBAAuB,OAA4B;AACjD,QAAI,CAAC,KAAK,yBAAyB;AACjC,aAAO;AAAA;AAET,WAAO,KAAK,wBAAwB;AAAA;AAAA;AAIjC,WAAW,SAAX,kBAAW,YAAX;AACL,mCAAsB;AADN;AAAA;",
  "names": []
}
