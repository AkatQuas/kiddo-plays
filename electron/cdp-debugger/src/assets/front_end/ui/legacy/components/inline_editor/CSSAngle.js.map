{
  "version": 3,
  "sources": ["../../../../../../../../front_end/ui/legacy/components/inline_editor/CSSAngle.ts"],
  "sourcesContent": ["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as ComponentHelpers from '../../../components/helpers/helpers.js';\nimport * as LitHtml from '../../../lit-html/lit-html.js';\nimport cssAngleStyles from './cssAngle.css.js';\n\nimport type {Angle} from './CSSAngleUtils.js';\nimport {\n  AngleUnit,\n  convertAngleUnit,\n  getNewAngleFromEvent,\n  getNextUnit,\n  parseText,\n  roundAngleByUnit,\n} from './CSSAngleUtils.js';\nimport {ValueChangedEvent} from './InlineEditorUtils.js';\n\nimport type {CSSAngleEditorData} from './CSSAngleEditor.js';\nimport {CSSAngleEditor} from './CSSAngleEditor.js';\nimport type {CSSAngleSwatchData} from './CSSAngleSwatch.js';\nimport {CSSAngleSwatch} from './CSSAngleSwatch.js';\n\nconst {render, html} = LitHtml;\nconst styleMap = LitHtml.Directives.styleMap;\n\nconst ContextAwareProperties = new Set(['color', 'background', 'background-color']);\n\nexport class PopoverToggledEvent extends Event {\n  static readonly eventName = 'popovertoggled';\n  data: {open: boolean};\n\n  constructor(open: boolean) {\n    super(PopoverToggledEvent.eventName, {});\n    this.data = {open};\n  }\n}\n\nexport class UnitChangedEvent extends Event {\n  static readonly eventName = 'unitchanged';\n  data: {value: string};\n\n  constructor(value: string) {\n    super(UnitChangedEvent.eventName, {});\n    this.data = {value};\n  }\n}\n\nexport interface CSSAngleData {\n  propertyName: string;\n  propertyValue: string;\n  angleText: string;\n  containingPane: HTMLElement;\n}\n\nconst DefaultAngle = {\n  value: 0,\n  unit: AngleUnit.Rad,\n};\n\nexport class CSSAngle extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-css-angle`;\n  private readonly shadow = this.attachShadow({mode: 'open'});\n  private angle: Angle = DefaultAngle;\n  private displayedAngle: Angle = DefaultAngle;\n  private propertyName = '';\n  private propertyValue = '';\n  private containingPane?: HTMLElement;\n  private angleElement: HTMLElement|null = null;\n  private swatchElement: HTMLElement|null = null;\n  private popoverOpen = false;\n  private popoverStyleTop = '';\n  private popoverStyleLeft = '';\n  private onMinifyingAction = this.minify.bind(this);\n\n  connectedCallback(): void {\n    this.shadow.adoptedStyleSheets = [cssAngleStyles];\n  }\n\n  set data(data: CSSAngleData) {\n    const parsedResult = parseText(data.angleText);\n    if (!parsedResult) {\n      return;\n    }\n    this.angle = parsedResult;\n    this.displayedAngle = {...parsedResult};\n    this.propertyName = data.propertyName;\n    this.propertyValue = data.propertyValue;\n    this.containingPane = data.containingPane;\n    this.render();\n  }\n\n  disconnectedCallback(): void {\n    this.unbindMinifyingAction();\n  }\n\n  // We bind and unbind mouse event listeners upon popping over and minifying,\n  // because we anticipate most of the time this widget is minified even when\n  // it's attached to the DOM tree.\n  popover(): void {\n    if (!this.containingPane) {\n      return;\n    }\n\n    if (!this.angleElement) {\n      this.angleElement = this.shadow.querySelector<HTMLElement>('.css-angle');\n    }\n    if (!this.swatchElement) {\n      this.swatchElement = this.shadow.querySelector<HTMLElement>('devtools-css-angle-swatch');\n    }\n    if (!this.angleElement || !this.swatchElement) {\n      return;\n    }\n\n    this.dispatchEvent(new PopoverToggledEvent(true));\n    this.bindMinifyingAction();\n\n    const miniIconBottom = this.swatchElement.getBoundingClientRect().bottom;\n    const miniIconLeft = this.swatchElement.getBoundingClientRect().left;\n    if (miniIconBottom && miniIconLeft) {\n      this.popoverStyleTop = `${miniIconBottom}px`;\n      this.popoverStyleLeft = `${miniIconLeft}px`;\n    }\n\n    this.popoverOpen = true;\n    this.render();\n    this.angleElement.focus();\n  }\n\n  minify(): void {\n    if (this.popoverOpen === false) {\n      return;\n    }\n\n    this.popoverOpen = false;\n    this.dispatchEvent(new PopoverToggledEvent(false));\n    this.unbindMinifyingAction();\n    this.render();\n  }\n\n  updateProperty(name: string, value: string): void {\n    this.propertyName = name;\n    this.propertyValue = value;\n    this.render();\n  }\n\n  private updateAngle(angle: Angle): void {\n    this.displayedAngle = roundAngleByUnit(convertAngleUnit(angle, this.displayedAngle.unit));\n    this.angle = this.displayedAngle;\n    this.dispatchEvent(new ValueChangedEvent(`${this.angle.value}${this.angle.unit}`));\n  }\n\n  private displayNextUnit(): void {\n    const nextUnit = getNextUnit(this.displayedAngle.unit);\n    this.displayedAngle = roundAngleByUnit(convertAngleUnit(this.angle, nextUnit));\n    this.dispatchEvent(new UnitChangedEvent(`${this.displayedAngle.value}${this.displayedAngle.unit}`));\n  }\n\n  private bindMinifyingAction(): void {\n    document.addEventListener('mousedown', this.onMinifyingAction);\n    if (this.containingPane) {\n      this.containingPane.addEventListener('scroll', this.onMinifyingAction);\n    }\n  }\n\n  private unbindMinifyingAction(): void {\n    document.removeEventListener('mousedown', this.onMinifyingAction);\n    if (this.containingPane) {\n      this.containingPane.removeEventListener('scroll', this.onMinifyingAction);\n    }\n  }\n\n  private onMiniIconClick(event: MouseEvent): void {\n    event.stopPropagation();\n    if (event.shiftKey && !this.popoverOpen) {\n      this.displayNextUnit();\n      return;\n    }\n    this.popoverOpen ? this.minify() : this.popover();\n  }\n\n  // Fix that the previous text will be selected when double-clicking the angle icon\n  private consume(event: MouseEvent): void {\n    event.stopPropagation();\n  }\n\n  private onKeydown(event: KeyboardEvent): void {\n    if (!this.popoverOpen) {\n      return;\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        event.stopPropagation();\n        this.minify();\n        this.blur();\n        break;\n      case 'ArrowUp':\n      case 'ArrowDown': {\n        const newAngle = getNewAngleFromEvent(this.angle, event);\n        if (newAngle) {\n          this.updateAngle(newAngle);\n        }\n        event.preventDefault();\n        break;\n      }\n    }\n  }\n\n  private render(): void {\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`\n      <div class=\"css-angle\" @keydown=${this.onKeydown} tabindex=\"-1\">\n        <div class=\"preview\">\n          <${CSSAngleSwatch.litTagName}\n            @click=${this.onMiniIconClick}\n            @mousedown=${this.consume}\n            @dblclick=${this.consume}\n            .data=${{\n              angle: this.angle,\n            } as CSSAngleSwatchData}>\n          </${CSSAngleSwatch.litTagName}><slot></slot></div>\n        ${this.popoverOpen ? this.renderPopover() : null}\n      </div>\n    `, this.shadow, {\n      host: this,\n    });\n    // clang-format on\n  }\n\n  private renderPopover(): LitHtml.TemplateResult {\n    let contextualBackground = '';\n    // TODO(crbug.com/1143010): for now we ignore values with \"url\"; when we refactor\n    // CSS value parsing we should properly apply atomic contextual background.\n    if (ContextAwareProperties.has(this.propertyName) && !this.propertyValue.match(/url\\(.*\\)/i)) {\n      contextualBackground = this.propertyValue;\n    }\n\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    return html`\n    <${CSSAngleEditor.litTagName}\n      class=\"popover popover-css-angle\"\n      style=${styleMap({top: this.popoverStyleTop, left: this.popoverStyleLeft})}\n      .data=${{\n        angle: this.angle,\n        onAngleUpdate: (angle: Angle):void => {\n          this.updateAngle(angle);\n        },\n        background: contextualBackground,\n      } as CSSAngleEditorData}\n    ></${CSSAngleEditor.litTagName}>\n    `;\n    // clang-format on\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-css-angle', CSSAngle);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-css-angle': CSSAngle;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
