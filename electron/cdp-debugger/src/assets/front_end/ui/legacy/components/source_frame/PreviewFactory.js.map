{
  "version": 3,
  "sources": ["../../../../../../../../front_end/ui/legacy/components/source_frame/PreviewFactory.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport type * as TextUtils from '../../../../models/text_utils/text_utils.js';\nimport * as UI from '../../legacy.js';\n\nimport {FontView} from './FontView.js';\nimport {ImageView} from './ImageView.js';\nimport {JSONView} from './JSONView.js';\nimport {ResourceSourceFrame} from './ResourceSourceFrame.js';\nimport {XMLView} from './XMLView.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Preview Factory of the Sources panel\n  */\n  nothingToPreview: 'Nothing to preview',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/components/source_frame/PreviewFactory.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class PreviewFactory {\n  static async createPreview(provider: TextUtils.ContentProvider.ContentProvider, mimeType: string):\n      Promise<UI.Widget.Widget|null> {\n    let resourceType = Common.ResourceType.ResourceType.fromMimeType(mimeType);\n    if (resourceType === Common.ResourceType.resourceTypes.Other) {\n      resourceType = provider.contentType();\n    }\n\n    switch (resourceType) {\n      case Common.ResourceType.resourceTypes.Image:\n        return new ImageView(mimeType, provider);\n      case Common.ResourceType.resourceTypes.Font:\n        return new FontView(mimeType, provider);\n    }\n\n    const deferredContent = await provider.requestContent();\n    if (deferredContent.content === null) {\n      return new UI.EmptyWidget.EmptyWidget(deferredContent.error);\n    }\n    if (!deferredContent.content) {\n      return new UI.EmptyWidget.EmptyWidget(i18nString(UIStrings.nothingToPreview));\n    }\n\n    let content: string = deferredContent.content;\n    if (await provider.contentEncoded()) {\n      content = window.atob(content);\n    }\n\n    const parsedXML = XMLView.parseXML(content, mimeType);\n    if (parsedXML) {\n      return XMLView.createSearchableView(parsedXML);\n    }\n\n    const jsonView = await JSONView.createView(content);\n    if (jsonView) {\n      return jsonView;\n    }\n\n    if (resourceType.isTextType()) {\n      const highlighterType =\n          mimeType.replace(/;.*/, '') /* remove charset */ || provider.contentType().canonicalMimeType();\n      return ResourceSourceFrame.createSearchableView(provider, highlighterType, true /* autoPrettyPrint */);\n    }\n\n    return null;\n  }\n}\n"],
  "mappings": "AAIA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA,MAAM,YAAY;AAAA,EAIhB,kBAAkB;AAAA;AAEpB,MAAM,OAAO,KAAK,KAAK,kBAAkB,uDAAuD;AAChG,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AACzD,4BAAqB;AAAA,eACb,cAAc,UAAqD,UAC7C;AACjC,QAAI,eAAe,OAAO,aAAa,aAAa,aAAa;AACjE,QAAI,iBAAiB,OAAO,aAAa,cAAc,OAAO;AAC5D,qBAAe,SAAS;AAAA;AAG1B,YAAQ;AAAA,WACD,OAAO,aAAa,cAAc;AACrC,eAAO,IAAI,UAAU,UAAU;AAAA,WAC5B,OAAO,aAAa,cAAc;AACrC,eAAO,IAAI,SAAS,UAAU;AAAA;AAGlC,UAAM,kBAAkB,MAAM,SAAS;AACvC,QAAI,gBAAgB,YAAY,MAAM;AACpC,aAAO,IAAI,GAAG,YAAY,YAAY,gBAAgB;AAAA;AAExD,QAAI,CAAC,gBAAgB,SAAS;AAC5B,aAAO,IAAI,GAAG,YAAY,YAAY,WAAW,UAAU;AAAA;AAG7D,QAAI,UAAkB,gBAAgB;AACtC,QAAI,MAAM,SAAS,kBAAkB;AACnC,gBAAU,OAAO,KAAK;AAAA;AAGxB,UAAM,YAAY,QAAQ,SAAS,SAAS;AAC5C,QAAI,WAAW;AACb,aAAO,QAAQ,qBAAqB;AAAA;AAGtC,UAAM,WAAW,MAAM,SAAS,WAAW;AAC3C,QAAI,UAAU;AACZ,aAAO;AAAA;AAGT,QAAI,aAAa,cAAc;AAC7B,YAAM,kBACF,SAAS,QAAQ,OAAO,OAA4B,SAAS,cAAc;AAC/E,aAAO,oBAAoB,qBAAqB,UAAU,iBAAiB;AAAA;AAG7E,WAAO;AAAA;AAAA;",
  "names": []
}
