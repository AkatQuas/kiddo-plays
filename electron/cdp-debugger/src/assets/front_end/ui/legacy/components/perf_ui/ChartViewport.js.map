{
  "version": 3,
  "sources": ["../../../../../../../../front_end/ui/legacy/components/perf_ui/ChartViewport.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as Platform from '../../../../core/platform/platform.js';\nimport * as UI from '../../legacy.js';\n\nimport chartViewPortStyles from './chartViewport.css.legacy.js';\nimport {MinimalTimeWindowMs} from './FlameChart.js';\n\nexport interface ChartViewportDelegate {\n  windowChanged(startTime: number, endTime: number, animate: boolean): void;\n  updateRangeSelection(startTime: number, endTime: number): void;\n  setSize(width: number, height: number): void;\n  update(): void;\n}\n\nexport class ChartViewport extends UI.Widget.VBox {\n  private readonly delegate: ChartViewportDelegate;\n  viewportElement: HTMLElement;\n  private alwaysShowVerticalScrollInternal: boolean;\n  private rangeSelectionEnabled: boolean;\n  private vScrollElement: HTMLElement;\n  private vScrollContent: HTMLElement;\n  private readonly selectionOverlay: HTMLElement;\n  private selectedTimeSpanLabel: HTMLElement;\n  private cursorElement: HTMLElement;\n  private isDraggingInternal!: boolean;\n  private totalHeight!: number;\n  private offsetHeight!: number;\n  private scrollTop!: number;\n  private rangeSelectionStart: number|null;\n  private rangeSelectionEnd: number|null;\n  private dragStartPointX!: number;\n  private dragStartPointY!: number;\n  private dragStartScrollTop!: number;\n  private visibleLeftTime!: number;\n  private visibleRightTime!: number;\n  private offsetWidth!: number;\n  private targetLeftTime!: number;\n  private targetRightTime!: number;\n  private selectionOffsetShiftX!: number;\n  private selectionOffsetShiftY!: number;\n  private selectionStartX!: number|null;\n  private lastMouseOffsetX!: number;\n  private minimumBoundary!: number;\n  private totalTime!: number;\n  private updateTimerId?: number;\n  private cancelWindowTimesAnimation?: (() => void)|null;\n\n  constructor(delegate: ChartViewportDelegate) {\n    super();\n    this.registerRequiredCSS(chartViewPortStyles);\n\n    this.delegate = delegate;\n\n    this.viewportElement = this.contentElement.createChild('div', 'fill');\n    this.viewportElement.addEventListener('mousemove', this.updateCursorPosition.bind(this), false);\n    this.viewportElement.addEventListener('mouseout', this.onMouseOut.bind(this), false);\n    this.viewportElement.addEventListener('wheel', this.onMouseWheel.bind(this), false);\n    this.viewportElement.addEventListener('keydown', this.onChartKeyDown.bind(this), false);\n    this.viewportElement.addEventListener('keyup', this.onChartKeyUp.bind(this), false);\n\n    UI.UIUtils.installDragHandle(\n        this.viewportElement, this.startDragging.bind(this), this.dragging.bind(this), this.endDragging.bind(this),\n        '-webkit-grabbing', null);\n    UI.UIUtils.installDragHandle(\n        this.viewportElement, this.startRangeSelection.bind(this), this.rangeSelectionDragging.bind(this),\n        this.endRangeSelection.bind(this), 'text', null);\n\n    this.alwaysShowVerticalScrollInternal = false;\n    this.rangeSelectionEnabled = true;\n    this.vScrollElement = this.contentElement.createChild('div', 'chart-viewport-v-scroll');\n    this.vScrollContent = this.vScrollElement.createChild('div');\n    this.vScrollElement.addEventListener('scroll', this.onScroll.bind(this), false);\n\n    this.selectionOverlay = this.contentElement.createChild('div', 'chart-viewport-selection-overlay hidden');\n    this.selectedTimeSpanLabel = this.selectionOverlay.createChild('div', 'time-span');\n\n    this.cursorElement = this.contentElement.createChild('div', 'chart-cursor-element hidden');\n\n    this.reset();\n\n    this.rangeSelectionStart = null;\n\n    this.rangeSelectionEnd = null;\n  }\n\n  alwaysShowVerticalScroll(): void {\n    this.alwaysShowVerticalScrollInternal = true;\n    this.vScrollElement.classList.add('always-show-scrollbar');\n  }\n\n  disableRangeSelection(): void {\n    this.rangeSelectionEnabled = false;\n    this.rangeSelectionStart = null;\n    this.rangeSelectionEnd = null;\n    this.updateRangeSelectionOverlay();\n  }\n\n  isDragging(): boolean {\n    return this.isDraggingInternal;\n  }\n\n  elementsToRestoreScrollPositionsFor(): Element[] {\n    return [this.vScrollElement];\n  }\n\n  private updateScrollBar(): void {\n    const showScroll = this.alwaysShowVerticalScrollInternal || this.totalHeight > this.offsetHeight;\n    if (this.vScrollElement.classList.contains('hidden') !== showScroll) {\n      return;\n    }\n    this.vScrollElement.classList.toggle('hidden', !showScroll);\n    this.updateContentElementSize();\n  }\n\n  onResize(): void {\n    this.updateScrollBar();\n    this.updateContentElementSize();\n    this.scheduleUpdate();\n  }\n\n  reset(): void {\n    this.vScrollElement.scrollTop = 0;\n    this.scrollTop = 0;\n    this.rangeSelectionStart = null;\n    this.rangeSelectionEnd = null;\n    this.isDraggingInternal = false;\n    this.dragStartPointX = 0;\n    this.dragStartPointY = 0;\n    this.dragStartScrollTop = 0;\n    this.visibleLeftTime = 0;\n    this.visibleRightTime = 0;\n    this.offsetWidth = 0;\n    this.offsetHeight = 0;\n    this.totalHeight = 0;\n    this.targetLeftTime = 0;\n    this.targetRightTime = 0;\n    this.updateContentElementSize();\n  }\n\n  private updateContentElementSize(): void {\n    let offsetWidth: number = this.vScrollElement.offsetLeft;\n    if (!offsetWidth) {\n      offsetWidth = this.contentElement.offsetWidth;\n    }\n    this.offsetWidth = offsetWidth;\n    this.offsetHeight = this.contentElement.offsetHeight;\n    this.delegate.setSize(this.offsetWidth, this.offsetHeight);\n  }\n\n  setContentHeight(totalHeight: number): void {\n    this.totalHeight = totalHeight;\n    this.vScrollContent.style.height = totalHeight + 'px';\n    this.updateScrollBar();\n    this.updateContentElementSize();\n    if (this.scrollTop + this.offsetHeight <= totalHeight) {\n      return;\n    }\n    this.scrollTop = Math.max(0, totalHeight - this.offsetHeight);\n    this.vScrollElement.scrollTop = this.scrollTop;\n  }\n\n  setScrollOffset(offset: number, height?: number): void {\n    height = height || 0;\n    if (this.vScrollElement.scrollTop > offset) {\n      this.vScrollElement.scrollTop = offset;\n    } else if (this.vScrollElement.scrollTop < offset - this.offsetHeight + height) {\n      this.vScrollElement.scrollTop = offset - this.offsetHeight + height;\n    }\n  }\n\n  scrollOffset(): number {\n    return this.vScrollElement.scrollTop;\n  }\n\n  chartHeight(): number {\n    return this.offsetHeight;\n  }\n\n  setBoundaries(zeroTime: number, totalTime: number): void {\n    this.minimumBoundary = zeroTime;\n    this.totalTime = totalTime;\n  }\n\n  private onMouseWheel(e: Event): void {\n    const wheelEvent = (e as WheelEvent);\n    const doZoomInstead = wheelEvent.shiftKey !==\n        (Common.Settings.Settings.instance().moduleSetting('flamechartMouseWheelAction').get() === 'zoom');\n    const panVertically = !doZoomInstead && (wheelEvent.deltaY || Math.abs(wheelEvent.deltaX) === 53);\n    const panHorizontally = doZoomInstead && Math.abs(wheelEvent.deltaX) > Math.abs(wheelEvent.deltaY);\n    if (panVertically) {\n      this.vScrollElement.scrollTop += (wheelEvent.deltaY || wheelEvent.deltaX) / 53 * this.offsetHeight / 8;\n    } else if (panHorizontally) {\n      this.handlePanGesture(wheelEvent.deltaX, /* animate */ true);\n    } else {  // Zoom.\n      const wheelZoomSpeed = 1 / 53;\n      this.handleZoomGesture(Math.pow(1.2, (wheelEvent.deltaY || wheelEvent.deltaX) * wheelZoomSpeed) - 1);\n    }\n\n    // Block swipe gesture.\n    e.consume(true);\n  }\n\n  private startDragging(event: MouseEvent): boolean {\n    if (event.shiftKey) {\n      return false;\n    }\n    this.isDraggingInternal = true;\n    this.dragStartPointX = event.pageX;\n    this.dragStartPointY = event.pageY;\n    this.dragStartScrollTop = this.vScrollElement.scrollTop;\n    this.viewportElement.style.cursor = '';\n    return true;\n  }\n\n  private dragging(event: MouseEvent): void {\n    const pixelShift = this.dragStartPointX - event.pageX;\n    this.dragStartPointX = event.pageX;\n    this.handlePanGesture(pixelShift);\n    const pixelScroll = this.dragStartPointY - event.pageY;\n    this.vScrollElement.scrollTop = this.dragStartScrollTop + pixelScroll;\n  }\n\n  private endDragging(): void {\n    this.isDraggingInternal = false;\n  }\n\n  private startRangeSelection(event: MouseEvent): boolean {\n    if (!event.shiftKey || !this.rangeSelectionEnabled) {\n      return false;\n    }\n    this.isDraggingInternal = true;\n    this.selectionOffsetShiftX = event.offsetX - event.pageX;\n    this.selectionOffsetShiftY = event.offsetY - event.pageY;\n    this.selectionStartX = event.offsetX;\n    const style = this.selectionOverlay.style;\n    style.left = this.selectionStartX + 'px';\n    style.width = '1px';\n    this.selectedTimeSpanLabel.textContent = '';\n    this.selectionOverlay.classList.remove('hidden');\n    return true;\n  }\n\n  private endRangeSelection(): void {\n    this.isDraggingInternal = false;\n    this.selectionStartX = null;\n  }\n\n  hideRangeSelection(): void {\n    this.selectionOverlay.classList.add('hidden');\n    this.rangeSelectionStart = null;\n    this.rangeSelectionEnd = null;\n  }\n\n  setRangeSelection(startTime: number, endTime: number): void {\n    if (!this.rangeSelectionEnabled) {\n      return;\n    }\n    this.rangeSelectionStart = Math.min(startTime, endTime);\n    this.rangeSelectionEnd = Math.max(startTime, endTime);\n    this.updateRangeSelectionOverlay();\n    this.delegate.updateRangeSelection(this.rangeSelectionStart, this.rangeSelectionEnd);\n  }\n\n  onClick(event: Event): void {\n    const mouseEvent = (event as MouseEvent);\n    const time = this.pixelToTime(mouseEvent.offsetX);\n    if (this.rangeSelectionStart !== null && this.rangeSelectionEnd !== null && time >= this.rangeSelectionStart &&\n        time <= this.rangeSelectionEnd) {\n      return;\n    }\n    this.hideRangeSelection();\n  }\n\n  private rangeSelectionDragging(event: MouseEvent): void {\n    const x = Platform.NumberUtilities.clamp(event.pageX + this.selectionOffsetShiftX, 0, this.offsetWidth);\n    const start = this.pixelToTime(this.selectionStartX || 0);\n    const end = this.pixelToTime(x);\n    this.setRangeSelection(start, end);\n  }\n\n  private updateRangeSelectionOverlay(): void {\n    const rangeSelectionStart = this.rangeSelectionStart || 0;\n    const rangeSelectionEnd = this.rangeSelectionEnd || 0;\n    const margin = 100;\n    const left =\n        Platform.NumberUtilities.clamp(this.timeToPosition(rangeSelectionStart), -margin, this.offsetWidth + margin);\n    const right =\n        Platform.NumberUtilities.clamp(this.timeToPosition(rangeSelectionEnd), -margin, this.offsetWidth + margin);\n    const style = this.selectionOverlay.style;\n    style.left = left + 'px';\n    style.width = (right - left) + 'px';\n    const timeSpan = rangeSelectionEnd - rangeSelectionStart;\n    this.selectedTimeSpanLabel.textContent = i18n.TimeUtilities.preciseMillisToString(timeSpan, 2);\n  }\n\n  private onScroll(): void {\n    this.scrollTop = this.vScrollElement.scrollTop;\n    this.scheduleUpdate();\n  }\n\n  private onMouseOut(): void {\n    this.lastMouseOffsetX = -1;\n    this.showCursor(false);\n  }\n\n  private updateCursorPosition(e: Event): void {\n    const mouseEvent = (e as MouseEvent);\n    this.showCursor(mouseEvent.shiftKey);\n    this.cursorElement.style.left = mouseEvent.offsetX + 'px';\n    this.lastMouseOffsetX = mouseEvent.offsetX;\n  }\n\n  pixelToTime(x: number): number {\n    return this.pixelToTimeOffset(x) + this.visibleLeftTime;\n  }\n\n  pixelToTimeOffset(x: number): number {\n    return x * (this.visibleRightTime - this.visibleLeftTime) / this.offsetWidth;\n  }\n\n  timeToPosition(time: number): number {\n    return Math.floor(\n        (time - this.visibleLeftTime) / (this.visibleRightTime - this.visibleLeftTime) * this.offsetWidth);\n  }\n\n  timeToPixel(): number {\n    return this.offsetWidth / (this.visibleRightTime - this.visibleLeftTime);\n  }\n\n  private showCursor(visible: boolean): void {\n    this.cursorElement.classList.toggle('hidden', !visible || this.isDraggingInternal);\n  }\n\n  private onChartKeyDown(e: Event): void {\n    const mouseEvent = (e as MouseEvent);\n    this.showCursor(mouseEvent.shiftKey);\n    this.handleZoomPanKeys(e);\n  }\n\n  private onChartKeyUp(e: Event): void {\n    const mouseEvent = (e as MouseEvent);\n    this.showCursor(mouseEvent.shiftKey);\n  }\n\n  private handleZoomPanKeys(e: Event): void {\n    if (!UI.KeyboardShortcut.KeyboardShortcut.hasNoModifiers(e)) {\n      return;\n    }\n    const keyboardEvent = (e as KeyboardEvent);\n    const zoomFactor = keyboardEvent.shiftKey ? 0.8 : 0.3;\n    const panOffset = keyboardEvent.shiftKey ? 320 : 160;\n    switch (keyboardEvent.code) {\n      case 'KeyA':\n        this.handlePanGesture(-panOffset, /* animate */ true);\n        break;\n      case 'KeyD':\n        this.handlePanGesture(panOffset, /* animate */ true);\n        break;\n      case 'KeyW':\n        this.handleZoomGesture(-zoomFactor);\n        break;\n      case 'KeyS':\n        this.handleZoomGesture(zoomFactor);\n        break;\n      default:\n        return;\n    }\n    e.consume(true);\n  }\n\n  private handleZoomGesture(zoom: number): void {\n    const bounds = {left: this.targetLeftTime, right: this.targetRightTime};\n    const cursorTime = this.pixelToTime(this.lastMouseOffsetX);\n    bounds.left += (bounds.left - cursorTime) * zoom;\n    bounds.right += (bounds.right - cursorTime) * zoom;\n    this.requestWindowTimes(bounds, /* animate */ true);\n  }\n\n  private handlePanGesture(offset: number, animate?: boolean): void {\n    const bounds = {left: this.targetLeftTime, right: this.targetRightTime};\n    const timeOffset = Platform.NumberUtilities.clamp(\n        this.pixelToTimeOffset(offset), this.minimumBoundary - bounds.left,\n        this.totalTime + this.minimumBoundary - bounds.right);\n    bounds.left += timeOffset;\n    bounds.right += timeOffset;\n    this.requestWindowTimes(bounds, Boolean(animate));\n  }\n\n  private requestWindowTimes(\n      bounds: {\n        left: number,\n        right: number,\n      },\n      animate: boolean): void {\n    const maxBound = this.minimumBoundary + this.totalTime;\n    if (bounds.left < this.minimumBoundary) {\n      bounds.right = Math.min(bounds.right + this.minimumBoundary - bounds.left, maxBound);\n      bounds.left = this.minimumBoundary;\n    } else if (bounds.right > maxBound) {\n      bounds.left = Math.max(bounds.left - bounds.right + maxBound, this.minimumBoundary);\n      bounds.right = maxBound;\n    }\n    if (bounds.right - bounds.left < MinimalTimeWindowMs) {\n      return;\n    }\n    this.delegate.windowChanged(bounds.left, bounds.right, animate);\n  }\n\n  scheduleUpdate(): void {\n    if (this.updateTimerId || this.cancelWindowTimesAnimation) {\n      return;\n    }\n    this.updateTimerId = this.element.window().requestAnimationFrame(() => {\n      this.updateTimerId = 0;\n      this.update();\n    });\n  }\n\n  private update(): void {\n    this.updateRangeSelectionOverlay();\n    this.delegate.update();\n  }\n\n  setWindowTimes(startTime: number, endTime: number, animate?: boolean): void {\n    if (startTime === this.targetLeftTime && endTime === this.targetRightTime) {\n      return;\n    }\n    if (!animate || this.visibleLeftTime === 0 || this.visibleRightTime === Infinity ||\n        (startTime === 0 && endTime === Infinity) || (startTime === Infinity && endTime === Infinity)) {\n      // Skip animation, move instantly.\n      this.targetLeftTime = startTime;\n      this.targetRightTime = endTime;\n      this.visibleLeftTime = startTime;\n      this.visibleRightTime = endTime;\n      this.scheduleUpdate();\n      return;\n    }\n    if (this.cancelWindowTimesAnimation) {\n      this.cancelWindowTimesAnimation();\n      this.visibleLeftTime = this.targetLeftTime;\n      this.visibleRightTime = this.targetRightTime;\n    }\n    this.targetLeftTime = startTime;\n    this.targetRightTime = endTime;\n    this.cancelWindowTimesAnimation = UI.UIUtils.animateFunction(\n        this.element.window(), animateWindowTimes.bind(this),\n        [{from: this.visibleLeftTime, to: startTime}, {from: this.visibleRightTime, to: endTime}], 100, () => {\n          this.cancelWindowTimesAnimation = null;\n        });\n\n    function animateWindowTimes(this: ChartViewport, startTime: number, endTime: number): void {\n      this.visibleLeftTime = startTime;\n      this.visibleRightTime = endTime;\n      this.update();\n    }\n  }\n\n  windowLeftTime(): number {\n    return this.visibleLeftTime;\n  }\n\n  windowRightTime(): number {\n    return this.visibleRightTime;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
