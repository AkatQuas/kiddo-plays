{
  "version": 3,
  "sources": ["../../../../../../../../front_end/ui/legacy/components/inline_editor/FontEditor.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as SDK from '../../../../core/sdk/sdk.js';\nimport * as IconButton from '../../../components/icon_button/icon_button.js';\nimport * as UI from '../../legacy.js';\n\nimport fontEditorStyles from './fontEditor.css.js';\nimport * as FontEditorUnitConverter from './FontEditorUnitConverter.js';\nimport * as FontEditorUtils from './FontEditorUtils.js';\n\nconst UIStrings = {\n  /**\n  *@description Font editor label for font family selector\n  */\n  fontFamily: 'Font Family',\n  /**\n  *@description Section header for CSS property inputs\n  */\n  cssProperties: 'CSS Properties',\n  /**\n  *@description Font size slider label for Font Editor\n  */\n  fontSize: 'Font Size',\n  /**\n  *@description Line height slider label for Font Editor\n  */\n  lineHeight: 'Line Height',\n  /**\n  *@description Font weight slider label for Font Editor\n  */\n  fontWeight: 'Font Weight',\n  /**\n  *@description Label for letter-spacing labels\n  */\n  spacing: 'Spacing',\n  /**\n  *@description Label for numbered fallback selectors\n  *@example {2} PH1\n  */\n  fallbackS: 'Fallback {PH1}',\n  /**\n  *@description Announcement for deleting an empty font family selector in the Font Editor\n  *@example {2} PH1\n  */\n  thereIsNoValueToDeleteAtIndexS: 'There is no value to delete at index: {PH1}',\n  /**\n  *@description Announcement when deleting a font selector in the Font Editor\n  *@example {2} PH1\n  */\n  fontSelectorDeletedAtIndexS: 'Font Selector deleted at index: {PH1}',\n  /**\n  *@description Label for Font Editor button to delete font family/fallback selectors\n  *@example {Fallback 1} PH1\n  */\n  deleteS: 'Delete {PH1}',\n  /**\n  * @description Warning message for Font Editor invalid text input. The placeholder is the name of\n  * the CSS attribute that is incorrect.\n  * @example {font-size} PH1\n  */\n  PleaseEnterAValidValueForSText: '* Please enter a valid value for {PH1} text input',\n  /**\n  *@description Error text in Font Editor\n  *@example {font-size} PH1\n  */\n  thisPropertyIsSetToContainUnits:\n      'This property is set to contain units but does not have a defined corresponding unitsArray: {PH1}',\n  /**\n  *@description Label for slider input in the Font Editor.\n  *@example {font-size} PH1\n  */\n  sSliderInput: '{PH1} Slider Input',\n  /**\n  *@description Accessible label for a text input for a property in the Font Editor.\n  *@example {font-size} PH1\n  */\n  sTextInput: '{PH1} Text Input',\n  /**\n  *@description Font Editor units text box label\n  */\n  units: 'Units',\n  /**\n  * @description Accessible name for Font Editor unit input. The placeholder is the name of the font\n  * property that this UI input controls. e.g. font-size, line-height, line-weight.\n  * @example {font-size} PH1\n  */\n  sUnitInput: '{PH1} Unit Input',\n  /**\n  *@description Text used in the Font Editor for the key values selector\n  *@example {font-size} PH1\n  */\n  sKeyValueSelector: '{PH1} Key Value Selector',\n  /**\n  * @description Label for Font Editor toggle input type button. The placeholder is the name of the\n  * font property that this UI input controls. e.g. font-size, line-height, line-weight. Tooltip for\n  * a button next to the text input which allows the user to change the input type. When they click\n  * this button, the UI changes to allow the user to choose from a list of pre-selected font\n  * categories.\n  * @example {font-size} PH1\n  */\n  sToggleInputType: '{PH1} toggle input type',\n  /**\n  *@description Label for Font Editor alert in CSS Properties section when toggling inputs\n  */\n  selectorInputMode: 'Selector Input Mode',\n  /**\n  *@description Label for Font Editor alert in CSS Properties section when toggling inputs\n  */\n  sliderInputMode: 'Slider Input Mode',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/components/inline_editor/FontEditor.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class FontEditor extends Common.ObjectWrapper.eventMixin<EventTypes, typeof UI.Widget.VBox>(UI.Widget.VBox) {\n  private readonly selectedNode: SDK.DOMModel.DOMNode|null;\n  private readonly propertyMap: Map<string, string>;\n  private readonly fontSelectorSection: HTMLElement;\n  private fontSelectors: FontEditor.FontSelectorObject[];\n  private fontsList: Map<string, string[]>[]|null;\n\n  constructor(propertyMap: Map<string, string>) {\n    super(true);\n    this.selectedNode = UI.Context.Context.instance().flavor(SDK.DOMModel.DOMNode);\n\n    this.propertyMap = propertyMap;\n    this.contentElement.tabIndex = 0;\n    this.setDefaultFocusedElement(this.contentElement);\n\n    // Font Selector Section\n    this.fontSelectorSection = this.contentElement.createChild('div', 'font-selector-section');\n    this.fontSelectorSection.createChild('h2', 'font-section-header').textContent = i18nString(UIStrings.fontFamily);\n\n    this.fontSelectors = [];\n\n    this.fontsList = null;\n\n    const propertyValue: string|undefined = this.propertyMap.get('font-family');\n\n    void this.createFontSelectorSection(propertyValue);\n\n    //  CSS Font Property Section\n    const cssPropertySection = this.contentElement.createChild('div', 'font-section');\n    cssPropertySection.createChild('h2', 'font-section-header').textContent = i18nString(UIStrings.cssProperties);\n\n    // The regexes only handle valid property values as invalid values are not passed into the property map.\n    const fontSizePropertyInfo = this.getPropertyInfo('font-size', FontEditorUtils.FontSizeStaticParams.regex);\n\n    const lineHeightPropertyInfo = this.getPropertyInfo('line-height', FontEditorUtils.LineHeightStaticParams.regex);\n\n    const fontWeightPropertyInfo = this.getPropertyInfo('font-weight', FontEditorUtils.FontWeightStaticParams.regex);\n\n    const letterSpacingPropertyInfo =\n        this.getPropertyInfo('letter-spacing', FontEditorUtils.LetterSpacingStaticParams.regex);\n\n    new FontPropertyInputs(\n        'font-size', i18nString(UIStrings.fontSize), cssPropertySection, fontSizePropertyInfo,\n        FontEditorUtils.FontSizeStaticParams, this.updatePropertyValue.bind(this), this.resizePopout.bind(this),\n        /** hasUnits= */ true);\n    new FontPropertyInputs(\n        'line-height', i18nString(UIStrings.lineHeight), cssPropertySection, lineHeightPropertyInfo,\n        FontEditorUtils.LineHeightStaticParams, this.updatePropertyValue.bind(this), this.resizePopout.bind(this),\n        /** hasUnits= */ true);\n    new FontPropertyInputs(\n        'font-weight', i18nString(UIStrings.fontWeight), cssPropertySection, fontWeightPropertyInfo,\n        FontEditorUtils.FontWeightStaticParams, this.updatePropertyValue.bind(this), this.resizePopout.bind(this),\n        /** hasUnits= */ false);\n    new FontPropertyInputs(\n        'letter-spacing', i18nString(UIStrings.spacing), cssPropertySection, letterSpacingPropertyInfo,\n        FontEditorUtils.LetterSpacingStaticParams, this.updatePropertyValue.bind(this), this.resizePopout.bind(this),\n        /** hasUnits= */ true);\n  }\n\n  wasShown(): void {\n    this.registerCSSFiles([fontEditorStyles]);\n  }\n\n  private async createFontSelectorSection(propertyValue?: string): Promise<void> {\n    if (propertyValue) {\n      // FIXME(crbug.com/1148434): propertyValue will not be split correctly for font family names that contain commas.\n      // e.g. font-family: \"Name,with,commas\"\n      const splitValue = propertyValue.split(',');\n      await this.createFontSelector(splitValue[0], /* isPrimary= */ true);\n      if (!FontEditorUtils.GlobalValues.includes(splitValue[0])) {\n        // We add one to the splitValue length so that we have an additional empty fallback selector\n        for (let i = 1; i < splitValue.length + 1; i++) {\n          void this.createFontSelector(splitValue[i]);\n        }\n      }\n    } else {\n      void this.createFontSelector('', true);\n    }\n    this.resizePopout();\n  }\n\n  private async createFontsList(): Promise<Map<string, string[]>[]> {\n    const computedFontArray = await FontEditorUtils.generateComputedFontArray();\n    const computedMap = new Map<string, string[]>();\n    const splicedArray = this.splitComputedFontArray(computedFontArray);\n\n    computedMap.set('Computed Fonts', splicedArray);\n    const systemMap = new Map<string, string[]>();\n    systemMap.set('System Fonts', FontEditorUtils.SystemFonts);\n    systemMap.set('Generic Families', FontEditorUtils.GenericFonts);\n\n    const fontList = [];\n    fontList.push(computedMap);\n    fontList.push(systemMap);\n    return fontList;\n  }\n\n  private splitComputedFontArray(computedFontArray: string[]): string[] {\n    const array: string[] = [];\n    for (const fontFamilyValue of computedFontArray) {\n      if (fontFamilyValue.includes(',')) {\n        const fonts = fontFamilyValue.split(',');\n        fonts.forEach(element => {\n          if (array.findIndex(item => item.toLowerCase() === element.trim().toLowerCase().replace(/\"/g, '\\'')) === -1) {\n            array.push(element.trim().replace(/\"/g, ''));\n          }\n        });\n      } else if (\n          array.findIndex(item => item.toLowerCase() === fontFamilyValue.toLowerCase().replace('\"', '\\'')) === -1) {\n        array.push(fontFamilyValue.replace(/\"/g, ''));\n      }\n    }\n    return array as string[];\n  }\n\n  private async createFontSelector(value: string, isPrimary?: boolean): Promise<void> {\n    // FIXME(crbug.com/1148434): Custom font family names that use single/double quotes in the font family name will not be handled correctly.\n    // e.g. font-family: \"FontWith\\\"DoubleQuotes\"\n    value = value ? value.trim() : '';\n    if (value) {\n      const firstChar = value.charAt(0);\n      if (firstChar === '\\'') {\n        value = value.replace(/'/g, '');\n      } else if (firstChar === '\"') {\n        value = value.replace(/\"/g, '');\n      }\n    }\n    const selectorField = this.fontSelectorSection.createChild('div', 'shadow-editor-field shadow-editor-flex-field');\n    if (!this.fontsList) {\n      this.fontsList = await this.createFontsList();\n    }\n    let label;\n    if (isPrimary) {\n      label = i18nString(UIStrings.fontFamily);\n      const globalValuesMap = new Map([['Global Values', FontEditorUtils.GlobalValues]]);\n      const primaryFontList = [...this.fontsList];\n      primaryFontList.push(globalValuesMap);\n      this.createSelector(selectorField, label, primaryFontList, value.trim());\n    } else {\n      label = i18nString(UIStrings.fallbackS, {PH1: this.fontSelectors.length});\n      this.createSelector(selectorField, label, this.fontsList, value.trim());\n    }\n  }\n\n  private deleteFontSelector(index: number, isGlobalValue?: boolean): void {\n    let fontSelectorObject: FontEditor.FontSelectorObject = this.fontSelectors[index];\n    const isPrimary = index === 0;\n    if (fontSelectorObject.input.value === '' && !isGlobalValue) {\n      UI.ARIAUtils.alert(i18nString(UIStrings.thereIsNoValueToDeleteAtIndexS, {PH1: index}));\n      return;\n    }\n    if (isPrimary) {\n      // When deleting the primary font selector, we overwrite the value of the primary selector\n      // with the value of the secondary selector and delete the secondary selector.\n      const secondarySelector = this.fontSelectors[1];\n      let newPrimarySelectorValue = '';\n      if (secondarySelector) {\n        newPrimarySelectorValue = secondarySelector.input.value;\n        fontSelectorObject = secondarySelector;\n      }\n      const primarySelector = this.fontSelectors[0].input;\n      primarySelector.value = newPrimarySelectorValue;\n      index = 1;\n    }\n    if (fontSelectorObject.input.parentNode) {\n      const hasSecondarySelector = this.fontSelectors.length > 1;\n      if (!isPrimary || hasSecondarySelector) {\n        const selectorElement = fontSelectorObject.input.parentElement;\n        if (selectorElement) {\n          selectorElement.remove();\n          this.fontSelectors.splice(index, 1);\n          this.updateFontSelectorList();\n        }\n      }\n      UI.ARIAUtils.alert(i18nString(UIStrings.fontSelectorDeletedAtIndexS, {PH1: index}));\n    }\n    this.onFontSelectorChanged();\n    this.resizePopout();\n    const focusIndex = isPrimary ? 0 : index - 1;\n    this.fontSelectors[focusIndex].input.focus();\n  }\n\n  private updateFontSelectorList(): void {\n    for (let i = 0; i < this.fontSelectors.length; i++) {\n      const fontSelectorObject = this.fontSelectors[i];\n      let label;\n      if (i === 0) {\n        label = i18nString(UIStrings.fontFamily);\n      } else {\n        label = i18nString(UIStrings.fallbackS, {PH1: i});\n      }\n      fontSelectorObject.label.textContent = label;\n      UI.ARIAUtils.setAccessibleName(fontSelectorObject.input, label);\n      fontSelectorObject.deleteButton.setTitle(i18nString(UIStrings.deleteS, {PH1: label}));\n      fontSelectorObject.index = i;\n    }\n  }\n\n  private getPropertyInfo(name: string, regex: RegExp): FontEditor.PropertyInfo {\n    const value = this.propertyMap.get(name);\n    if (value) {\n      const valueString = value;\n      const match = valueString.match(regex);\n      if (match) {\n        const retValue = match[1].charAt(0) === '+' ? match[1].substr(1) : match[1];\n        const retUnits = match[2] ? match[2] : '';\n        return {value: retValue, units: retUnits};\n      }\n      return {value: valueString, units: null};\n    }\n    return {value: null, units: null};\n  }\n\n  private createSelector(field: Element, label: string, options: Map<string, string[]>[], currentValue: string): void {\n    const index = this.fontSelectors.length;\n    const selectInput = (UI.UIUtils.createSelect(label, options) as HTMLSelectElement);\n    selectInput.value = currentValue;\n    const selectLabel = UI.UIUtils.createLabel(label, 'shadow-editor-label', selectInput);\n    selectInput.addEventListener('input', this.onFontSelectorChanged.bind(this), false);\n    // We want to prevent the Enter key from propagating to the SwatchPopoverHelper which will close the editor.\n    selectInput.addEventListener('keydown', (event: KeyboardEvent) => {\n      if (event.key === 'Enter') {\n        event.consume();\n      }\n    }, false);\n    field.appendChild(selectLabel);\n    field.appendChild(selectInput);\n\n    const deleteToolbar = new UI.Toolbar.Toolbar('', field);\n    const deleteButton =\n        new UI.Toolbar.ToolbarButton(i18nString(UIStrings.deleteS, {PH1: label}), 'largeicon-trash-bin');\n    deleteToolbar.appendToolbarItem(deleteButton);\n    const fontSelectorObject = {label: selectLabel, input: selectInput, deleteButton, index};\n    deleteButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, () => {\n      this.deleteFontSelector(fontSelectorObject.index);\n    });\n    deleteButton.element.addEventListener('keydown', (event: Event) => {\n      if (isEnterOrSpaceKey(event)) {\n        this.deleteFontSelector(fontSelectorObject.index);\n        event.consume();\n      }\n    }, false);\n    this.fontSelectors.push(fontSelectorObject);\n  }\n\n  private onFontSelectorChanged(): void {\n    let value = '';\n    const isGlobalValue = FontEditorUtils.GlobalValues.includes(this.fontSelectors[0].input.value);\n\n    if (isGlobalValue) {\n      for (let i = 1; i < this.fontSelectors.length; i++) {\n        this.deleteFontSelector(i, /** isGlobalValue= */ true);\n      }\n    }\n    for (const fontSelector of this.fontSelectors) {\n      const fontSelectorInput = fontSelector.input;\n      if (fontSelectorInput.value !== '') {\n        if (value === '') {\n          value = this.fontSelectors[0].input.value;\n        } else {\n          value += ', ' + fontSelectorInput.value;\n        }\n      }\n    }\n    // Add an extra blank selector as long as the last selector doesn't have an empty value, the primary\n    // selector's value is not a global value and if the list of selectors has not exceeded 10.\n    if (this.fontSelectors[this.fontSelectors.length - 1].input.value !== '' && !isGlobalValue &&\n        this.fontSelectors.length < 10) {\n      void this.createFontSelector(/** value= */ '');\n      this.resizePopout();\n    }\n    this.updatePropertyValue('font-family', value);\n  }\n\n  private updatePropertyValue(propertyName: string, value: string): void {\n    this.dispatchEventToListeners(Events.FontChanged, {propertyName, value});\n  }\n\n  private resizePopout(): void {\n    this.dispatchEventToListeners(Events.FontEditorResized);\n  }\n}\n\nnamespace FontEditor {\n  export interface PropertyInfo {\n    value: string|null;\n    units: string|null;\n  }\n\n  export interface FontSelectorObject {\n    label: Element;\n    input: HTMLSelectElement;\n    deleteButton: UI.Toolbar.ToolbarButton;\n    index: number;\n  }\n\n  export interface PropertyRange {\n    min: number;\n    max: number;\n    step: number;\n  }\n\n  export interface FontPropertyInputStaticParams {\n    regex: RegExp;\n    units: Set<string>|null;\n    keyValues: Set<string>;\n    rangeMap: Map<string, FontEditor.PropertyRange>;\n    defaultUnit: string|null;\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  FontChanged = 'FontChanged',\n  FontEditorResized = 'FontEditorResized',\n}\n\nexport interface FontChangedEvent {\n  propertyName: string;\n  value: string;\n}\n\nexport type EventTypes = {\n  [Events.FontChanged]: FontChangedEvent,\n  [Events.FontEditorResized]: void,\n};\n\nclass FontPropertyInputs {\n  private showSliderMode: boolean;\n  private errorText: HTMLElement;\n  private propertyInfo: FontEditor.PropertyInfo;\n  private readonly propertyName: string;\n  private readonly staticParams: FontEditor.FontPropertyInputStaticParams;\n  private readonly hasUnits: boolean|undefined;\n  private units: string;\n  private readonly addedUnit: boolean|undefined;\n  private initialRange: FontEditor.PropertyRange;\n  private readonly boundUpdateCallback: (arg0: string, arg1: string) => void;\n  private readonly boundResizeCallback: () => void;\n  private readonly selectedNode: SDK.DOMModel.DOMNode|null;\n  private sliderInput: UI.UIUtils.DevToolsSlider;\n  private textBoxInput: HTMLInputElement;\n  private unitInput: HTMLSelectElement;\n  private selectorInput: HTMLSelectElement;\n  private applyNextInput: boolean;\n\n  constructor(\n      propertyName: string, label: string, field: Element, propertyInfo: FontEditor.PropertyInfo,\n      staticParams: FontEditor.FontPropertyInputStaticParams, updateCallback: (arg0: string, arg1: string) => void,\n      resizeCallback: () => void, hasUnits?: boolean) {\n    this.showSliderMode = true;\n    const propertyField = field.createChild('div', 'shadow-editor-field shadow-editor-flex-field');\n    this.errorText = (field.createChild('div', 'error-text') as HTMLElement);\n    this.errorText.textContent = i18nString(UIStrings.PleaseEnterAValidValueForSText, {PH1: propertyName});\n    this.errorText.hidden = true;\n    UI.ARIAUtils.markAsAlert(this.errorText);\n    this.propertyInfo = propertyInfo;\n    this.propertyName = propertyName;\n    this.staticParams = staticParams;\n\n    // Unit handling\n    this.hasUnits = hasUnits;\n    if (this.hasUnits && this.staticParams.units && this.staticParams.defaultUnit !== null) {\n      const defaultUnits = this.staticParams.defaultUnit;\n      this.units = propertyInfo.units !== null ? propertyInfo.units : defaultUnits;\n      this.addedUnit = !this.staticParams.units.has(this.units);\n    } else if (this.hasUnits) {\n      throw new Error(i18nString(UIStrings.thisPropertyIsSetToContainUnits, {PH1: propertyName}));\n    } else {\n      this.units = '';\n    }\n    this.initialRange = this.getUnitRange();\n\n    this.boundUpdateCallback = updateCallback;\n    this.boundResizeCallback = resizeCallback;\n    this.selectedNode = UI.Context.Context.instance().flavor(SDK.DOMModel.DOMNode);\n    const propertyLabel = UI.UIUtils.createLabel(label, 'shadow-editor-label');\n    propertyField.append(propertyLabel);\n    this.sliderInput = this.createSliderInput(propertyField, label);\n    this.textBoxInput = this.createTextBoxInput(propertyField);\n    UI.ARIAUtils.bindLabelToControl(propertyLabel, this.textBoxInput);\n    this.unitInput = this.createUnitInput(propertyField);\n    this.selectorInput = this.createSelectorInput(propertyField);\n    this.createTypeToggle(propertyField);\n    this.checkSelectorValueAndToggle();\n    this.applyNextInput = false;\n  }\n\n  private setInvalidTextBoxInput(invalid: boolean): void {\n    if (invalid) {\n      if (this.errorText.hidden) {\n        this.errorText.hidden = false;\n        this.textBoxInput.classList.add('error-input');\n        this.boundResizeCallback();\n      }\n    } else {\n      if (!this.errorText.hidden) {\n        this.errorText.hidden = true;\n        this.textBoxInput.classList.remove('error-input');\n        this.boundResizeCallback();\n      }\n    }\n  }\n\n  private checkSelectorValueAndToggle(): boolean {\n    if (this.staticParams.keyValues && this.propertyInfo.value !== null &&\n        (this.staticParams.keyValues.has(this.propertyInfo.value))) {\n      this.toggleInputType();\n      return true;\n    }\n    return false;\n  }\n\n  private getUnitRange(): FontEditor.PropertyRange {\n    let min = 0;\n    let max = 100;\n    let step = 1;\n    if (this.propertyInfo.value !== null && /\\d/.test(this.propertyInfo.value)) {\n      if (this.staticParams.rangeMap.get(this.units)) {\n        const unitRangeMap = this.staticParams.rangeMap.get(this.units);\n        if (unitRangeMap) {\n          min = Math.min(unitRangeMap.min, parseFloat(this.propertyInfo.value));\n          max = Math.max(unitRangeMap.max, parseFloat(this.propertyInfo.value));\n          step = unitRangeMap.step;\n        }\n      } else {\n        const unitRangeMap = this.staticParams.rangeMap.get('px');\n        if (unitRangeMap) {\n          min = Math.min(unitRangeMap.min, parseFloat(this.propertyInfo.value));\n          max = Math.max(unitRangeMap.max, parseFloat(this.propertyInfo.value));\n          step = unitRangeMap.step;\n        }\n      }\n    } else {\n      const unitRangeMap = this.staticParams.rangeMap.get(this.units);\n      if (unitRangeMap) {\n        min = unitRangeMap.min;\n        max = unitRangeMap.max;\n        step = unitRangeMap.step;\n      }\n    }\n    return {min, max, step};\n  }\n\n  private createSliderInput(field: Element, _label: string): UI.UIUtils.DevToolsSlider {\n    const min = this.initialRange.min;\n    const max = this.initialRange.max;\n    const step = this.initialRange.step;\n\n    const slider = (UI.UIUtils.createSlider(min, max, -1) as UI.UIUtils.DevToolsSlider);\n    slider.sliderElement.step = step.toString();\n    slider.sliderElement.tabIndex = 0;\n    if (this.propertyInfo.value) {\n      slider.value = parseFloat(this.propertyInfo.value);\n    } else {\n      const newValue = (min + max) / 2;\n      slider.value = newValue;\n    }\n    slider.addEventListener('input', event => {\n      this.onSliderInput(event, /** apply= */ false);\n    });\n\n    slider.addEventListener('mouseup', event => {\n      this.onSliderInput(event, /** apply= */ true);\n    });\n    slider.addEventListener('keydown', event => {\n      if (event.key === 'ArrowUp' || event.key === 'ArrowDown' || event.key === 'ArrowLeft' ||\n          event.key === 'ArrowRight') {\n        // Pressing an arrow key will trigger two events for the slider: A keyboard event and an input event\n        // The keyboard event will come before the slider value has changed and the subsequent input event will cause\n        // the value to change.  We use the applyNextInput boolean to tell onSliderInput that the next input event\n        // is coming because of the keyboard event and that it should be applied to the section.\n        this.applyNextInput = true;\n      }\n    });\n    field.appendChild(slider);\n    UI.ARIAUtils.setAccessibleName(slider.sliderElement, i18nString(UIStrings.sSliderInput, {PH1: this.propertyName}));\n    return slider;\n  }\n\n  private createTextBoxInput(field: Element): HTMLInputElement {\n    const textBoxInput: HTMLInputElement = UI.UIUtils.createInput('shadow-editor-text-input', 'number');\n\n    textBoxInput.step = this.initialRange.step.toString();\n    textBoxInput.classList.add('font-editor-text-input');\n    if (this.propertyInfo.value !== null) {\n      if (this.propertyInfo.value.charAt(0) === '+') {\n        this.propertyInfo.value = this.propertyInfo.value.substr(1);\n      }\n      textBoxInput.value = this.propertyInfo.value;\n    }\n    textBoxInput.step = 'any';\n    textBoxInput.addEventListener('input', this.onTextBoxInput.bind(this), false);\n    field.appendChild(textBoxInput);\n    UI.ARIAUtils.setAccessibleName(textBoxInput, i18nString(UIStrings.sTextInput, {PH1: this.propertyName}));\n    return textBoxInput;\n  }\n\n  private createUnitInput(field: Element): HTMLSelectElement {\n    let unitInput;\n    if (this.hasUnits && this.staticParams.units) {\n      const currentValue = this.propertyInfo.units;\n      const options = this.staticParams.units;\n      unitInput = UI.UIUtils.createSelect(i18nString(UIStrings.units), options);\n      unitInput.classList.add('font-editor-select');\n      if (this.addedUnit && currentValue) {\n        unitInput.add(new Option(currentValue, currentValue));\n      }\n      if (currentValue) {\n        unitInput.value = currentValue;\n      }\n      unitInput.addEventListener('change', this.onUnitInput.bind(this), false);\n    } else {\n      unitInput = UI.UIUtils.createSelect(i18nString(UIStrings.units), []);\n      unitInput.classList.add('font-editor-select');\n      unitInput.disabled = true;\n    }\n    // We want to prevent the Enter key from propagating to the SwatchPopoverHelper which will close the editor.\n    unitInput.addEventListener('keydown', (event: KeyboardEvent) => {\n      if (event.key === 'Enter') {\n        event.consume();\n      }\n    }, false);\n    field.appendChild(unitInput);\n    UI.ARIAUtils.setAccessibleName(unitInput, i18nString(UIStrings.sUnitInput, {PH1: this.propertyName}));\n\n    return unitInput;\n  }\n\n  private createSelectorInput(field: Element): HTMLSelectElement {\n    const selectInput: HTMLSelectElement = UI.UIUtils.createSelect(\n        i18nString(UIStrings.sKeyValueSelector, {PH1: this.propertyName}), this.staticParams.keyValues);\n    selectInput.classList.add('font-selector-input');\n    if (this.propertyInfo.value) {\n      selectInput.value = this.propertyInfo.value;\n    }\n    selectInput.addEventListener('input', this.onSelectorInput.bind(this), false);\n    // We want to prevent the Enter key from propagating to the SwatchPopoverHelper which will close the editor.\n    selectInput.addEventListener('keydown', (event: KeyboardEvent) => {\n      if (event.key === 'Enter') {\n        event.consume();\n      }\n    }, false);\n    field.appendChild(selectInput);\n    selectInput.hidden = true;\n    return selectInput;\n  }\n\n  private onSelectorInput(event: Event): void {\n    if (event.currentTarget) {\n      const value = (event.currentTarget as HTMLInputElement).value;\n      this.textBoxInput.value = '';\n      const newValue =\n          (parseFloat(this.sliderInput.sliderElement.min) + parseFloat(this.sliderInput.sliderElement.max)) / 2;\n      this.sliderInput.value = newValue;\n      this.setInvalidTextBoxInput(false);\n      this.boundUpdateCallback(this.propertyName, value);\n    }\n  }\n\n  private onSliderInput(event: Event, apply: boolean): void {\n    const target = (event.currentTarget as HTMLInputElement);\n    if (target) {\n      const value = target.value;\n      this.textBoxInput.value = value;\n      this.selectorInput.value = '';\n      const valueString = this.hasUnits ? value + this.unitInput.value : value.toString();\n      this.setInvalidTextBoxInput(false);\n      if (apply || this.applyNextInput) {\n        this.boundUpdateCallback(this.propertyName, valueString);\n        this.applyNextInput = false;\n      }\n    }\n  }\n\n  private onTextBoxInput(event: Event): void {\n    const target = (event.currentTarget as HTMLInputElement);\n    if (target) {\n      const value = target.value;\n      const units = value === '' ? '' : this.unitInput.value;\n      const valueString = value + units;\n      if (this.staticParams.regex.test(valueString) || (value === '' && !target.validationMessage.length)) {\n        if (parseFloat(value) > parseFloat(this.sliderInput.sliderElement.max)) {\n          this.sliderInput.sliderElement.max = value;\n        } else if (parseFloat(value) < parseFloat(this.sliderInput.sliderElement.min)) {\n          this.sliderInput.sliderElement.min = value;\n        }\n        this.sliderInput.value = parseFloat(value);\n        this.selectorInput.value = '';\n        this.setInvalidTextBoxInput(false);\n        this.boundUpdateCallback(this.propertyName, valueString);\n      } else {\n        this.setInvalidTextBoxInput(true);\n      }\n    }\n  }\n\n  private async onUnitInput(event: Event): Promise<void> {\n    const unitInput = (event.currentTarget as HTMLInputElement);\n    const hasFocus = unitInput.hasFocus();\n    const newUnit = unitInput.value;\n    unitInput.disabled = true;\n    const prevUnit = this.units;\n    const conversionMultiplier =\n        await FontEditorUnitConverter.getUnitConversionMultiplier(prevUnit, newUnit, this.propertyName === 'font-size');\n    this.setInputUnits(conversionMultiplier, newUnit);\n    if (this.textBoxInput.value) {\n      this.boundUpdateCallback(this.propertyName, this.textBoxInput.value + newUnit);\n    }\n    this.units = newUnit;\n    unitInput.disabled = false;\n    if (hasFocus) {\n      unitInput.focus();\n    }\n  }\n\n  private createTypeToggle(field: Element): void {\n    const displaySwitcher = field.createChild('div', 'spectrum-switcher') as HTMLDivElement;\n    const icon = new IconButton.Icon.Icon();\n    icon.data = {iconName: 'switcherIcon', color: 'var(--color-text-primary)', width: '16px', height: '16px'};\n    displaySwitcher.appendChild(icon);\n    UI.UIUtils.setTitle(displaySwitcher, i18nString(UIStrings.sToggleInputType, {PH1: this.propertyName}));\n    displaySwitcher.tabIndex = 0;\n    self.onInvokeElement(displaySwitcher, this.toggleInputType.bind(this));\n    UI.ARIAUtils.markAsButton(displaySwitcher);\n  }\n\n  private toggleInputType(event?: Event): void {\n    if (event && (event as KeyboardEvent).key === 'Enter') {\n      event.consume();\n    }\n    if (this.showSliderMode) {\n      // Show selector input type\n      this.sliderInput.hidden = true;\n      this.textBoxInput.hidden = true;\n      this.unitInput.hidden = true;\n      this.selectorInput.hidden = false;\n      this.showSliderMode = false;\n      UI.ARIAUtils.alert(i18nString(UIStrings.selectorInputMode));\n    } else {\n      // Show sliderinput type\n      this.sliderInput.hidden = false;\n      this.textBoxInput.hidden = false;\n      this.unitInput.hidden = false;\n      this.selectorInput.hidden = true;\n      this.showSliderMode = true;\n      UI.ARIAUtils.alert(i18nString(UIStrings.sliderInputMode));\n    }\n  }\n\n  private setInputUnits(multiplier: number, newUnit: string): void {\n    const newRangeMap = this.staticParams.rangeMap.get(newUnit);\n    let newMin, newMax, newStep;\n    if (newRangeMap) {\n      newMin = newRangeMap.min;\n      newMax = newRangeMap.max;\n      newStep = newRangeMap.step;\n    } else {\n      newMin = 0;\n      newMax = 100;\n      newStep = 1;\n    }\n    let hasValue = false;\n    const roundingPrecision = FontEditorUtils.getRoundingPrecision(newStep);\n    let newValue: number = (newMin + newMax) / 2;\n    if (this.textBoxInput.value) {\n      hasValue = true;\n      newValue = parseFloat((parseFloat(this.textBoxInput.value) * multiplier).toFixed(roundingPrecision));\n    }\n    this.sliderInput.sliderElement.min = Math.min(newValue, newMin).toString();\n    this.sliderInput.sliderElement.max = Math.max(newValue, newMax).toString();\n    this.sliderInput.sliderElement.step = newStep.toString();\n    this.textBoxInput.step = newStep.toString();\n    if (hasValue) {\n      this.textBoxInput.value = newValue.toString();\n    }\n    this.sliderInput.value = newValue;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
