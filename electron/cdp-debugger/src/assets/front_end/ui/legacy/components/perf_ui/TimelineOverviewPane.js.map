{
  "version": 3,
  "sources": ["../../../../../../../../front_end/ui/legacy/components/perf_ui/TimelineOverviewPane.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../../../core/common/common.js';\nimport type * as SDK from '../../../../core/sdk/sdk.js';\nimport * as UI from '../../legacy.js';\nimport * as i18n from '../../../../core/i18n/i18n.js';\n\nimport type {WindowChangedWithPositionEvent} from './OverviewGrid.js';\nimport {Events as OverviewGridEvents, OverviewGrid} from './OverviewGrid.js';\nimport type {Calculator} from './TimelineGrid.js';\nimport timelineOverviewInfoStyles from './timelineOverviewInfo.css.js';\n\nexport class TimelineOverviewPane extends Common.ObjectWrapper.eventMixin<EventTypes, typeof UI.Widget.VBox>(\n    UI.Widget.VBox) {\n  private readonly overviewCalculator: TimelineOverviewCalculator;\n  private readonly overviewGrid: OverviewGrid;\n  private readonly cursorArea: HTMLElement;\n  private cursorElement: HTMLElement;\n  private overviewControls: TimelineOverview[];\n  private markers: Map<number, Element>;\n  private readonly overviewInfo: OverviewInfo;\n  private readonly updateThrottler: Common.Throttler.Throttler;\n  private cursorEnabled: boolean;\n  private cursorPosition: number;\n  private lastWidth: number;\n  private windowStartTime: number;\n  private windowEndTime: number;\n  private muteOnWindowChanged: boolean;\n\n  constructor(prefix: string) {\n    super();\n    this.element.id = prefix + '-overview-pane';\n\n    this.overviewCalculator = new TimelineOverviewCalculator();\n    this.overviewGrid = new OverviewGrid(prefix, this.overviewCalculator);\n    this.element.appendChild(this.overviewGrid.element);\n    this.cursorArea = this.overviewGrid.element.createChild('div', 'overview-grid-cursor-area');\n    this.cursorElement = this.overviewGrid.element.createChild('div', 'overview-grid-cursor-position');\n    this.cursorArea.addEventListener('mousemove', this.onMouseMove.bind(this), true);\n    this.cursorArea.addEventListener('mouseleave', this.hideCursor.bind(this), true);\n\n    this.overviewGrid.setResizeEnabled(false);\n    this.overviewGrid.addEventListener(OverviewGridEvents.WindowChangedWithPosition, this.onWindowChanged, this);\n    this.overviewGrid.setClickHandler(this.onClick.bind(this));\n    this.overviewControls = [];\n    this.markers = new Map();\n\n    this.overviewInfo = new OverviewInfo(this.cursorElement);\n    this.updateThrottler = new Common.Throttler.Throttler(100);\n\n    this.cursorEnabled = false;\n    this.cursorPosition = 0;\n    this.lastWidth = 0;\n\n    this.windowStartTime = 0;\n    this.windowEndTime = Infinity;\n    this.muteOnWindowChanged = false;\n  }\n\n  private onMouseMove(event: Event): void {\n    if (!this.cursorEnabled) {\n      return;\n    }\n    const mouseEvent = (event as MouseEvent);\n    const target = (event.target as HTMLElement);\n    this.cursorPosition = mouseEvent.offsetX + target.offsetLeft;\n    this.cursorElement.style.left = this.cursorPosition + 'px';\n    this.cursorElement.style.visibility = 'visible';\n    void this.overviewInfo.setContent(this.buildOverviewInfo());\n  }\n\n  private async buildOverviewInfo(): Promise<DocumentFragment> {\n    const document = this.element.ownerDocument;\n    const x = this.cursorPosition;\n    const elements = await Promise.all(this.overviewControls.map(control => control.overviewInfoPromise(x)));\n    const fragment = document.createDocumentFragment();\n    const nonNullElements = (elements.filter(element => element !== null) as Element[]);\n    fragment.append(...nonNullElements);\n    return fragment;\n  }\n\n  private hideCursor(): void {\n    this.cursorElement.style.visibility = 'hidden';\n    this.overviewInfo.hide();\n  }\n\n  wasShown(): void {\n    this.update();\n  }\n\n  willHide(): void {\n    this.overviewInfo.hide();\n  }\n\n  onResize(): void {\n    const width = this.element.offsetWidth;\n    if (width === this.lastWidth) {\n      return;\n    }\n    this.lastWidth = width;\n    this.scheduleUpdate();\n  }\n\n  setOverviewControls(overviewControls: TimelineOverview[]): void {\n    for (let i = 0; i < this.overviewControls.length; ++i) {\n      this.overviewControls[i].dispose();\n    }\n\n    for (let i = 0; i < overviewControls.length; ++i) {\n      overviewControls[i].setCalculator(this.overviewCalculator);\n      overviewControls[i].show(this.overviewGrid.element);\n    }\n    this.overviewControls = overviewControls;\n    this.update();\n  }\n\n  setBounds(minimumBoundary: number, maximumBoundary: number): void {\n    this.overviewCalculator.setBounds(minimumBoundary, maximumBoundary);\n    this.overviewGrid.setResizeEnabled(true);\n    this.cursorEnabled = true;\n  }\n\n  setNavStartTimes(navStartTimes: Map<string, SDK.TracingModel.Event>): void {\n    this.overviewCalculator.setNavStartTimes(navStartTimes);\n  }\n\n  scheduleUpdate(): void {\n    void this.updateThrottler.schedule(async () => {\n      this.update();\n    });\n  }\n\n  private update(): void {\n    if (!this.isShowing()) {\n      return;\n    }\n    this.overviewCalculator.setDisplayWidth(this.overviewGrid.clientWidth());\n    for (let i = 0; i < this.overviewControls.length; ++i) {\n      this.overviewControls[i].update();\n    }\n    this.overviewGrid.updateDividers(this.overviewCalculator);\n    this.updateMarkers();\n    this.updateWindow();\n  }\n\n  setMarkers(markers: Map<number, Element>): void {\n    this.markers = markers;\n  }\n\n  private updateMarkers(): void {\n    const filteredMarkers = new Map<number, Element>();\n    for (const time of this.markers.keys()) {\n      const marker = this.markers.get(time) as HTMLElement;\n      const position = Math.round(this.overviewCalculator.computePosition(time));\n      // Limit the number of markers to one per pixel.\n      if (filteredMarkers.has(position)) {\n        continue;\n      }\n      filteredMarkers.set(position, marker);\n      marker.style.left = position + 'px';\n    }\n    this.overviewGrid.removeEventDividers();\n    this.overviewGrid.addEventDividers([...filteredMarkers.values()]);\n  }\n\n  reset(): void {\n    this.windowStartTime = 0;\n    this.windowEndTime = Infinity;\n    this.overviewCalculator.reset();\n    this.overviewGrid.reset();\n    this.overviewGrid.setResizeEnabled(false);\n    this.cursorEnabled = false;\n    this.hideCursor();\n    this.markers = new Map();\n    for (const control of this.overviewControls) {\n      control.reset();\n    }\n    this.overviewInfo.hide();\n    this.scheduleUpdate();\n  }\n\n  private onClick(event: Event): boolean {\n    return this.overviewControls.some(control => control.onClick(event));\n  }\n\n  private onWindowChanged(event: Common.EventTarget.EventTargetEvent<WindowChangedWithPositionEvent>): void {\n    if (this.muteOnWindowChanged) {\n      return;\n    }\n    // Always use first control as a time converter.\n    if (!this.overviewControls.length) {\n      return;\n    }\n\n    this.windowStartTime = event.data.rawStartValue;\n    this.windowEndTime = event.data.rawEndValue;\n    const windowTimes = {startTime: this.windowStartTime, endTime: this.windowEndTime};\n\n    this.dispatchEventToListeners(Events.WindowChanged, windowTimes);\n  }\n\n  setWindowTimes(startTime: number, endTime: number): void {\n    if (startTime === this.windowStartTime && endTime === this.windowEndTime) {\n      return;\n    }\n    this.windowStartTime = startTime;\n    this.windowEndTime = endTime;\n    this.updateWindow();\n    this.dispatchEventToListeners(Events.WindowChanged, {startTime: startTime, endTime: endTime});\n  }\n\n  private updateWindow(): void {\n    if (!this.overviewControls.length) {\n      return;\n    }\n    const absoluteMin = this.overviewCalculator.minimumBoundary();\n    const timeSpan = this.overviewCalculator.maximumBoundary() - absoluteMin;\n    const haveRecords = absoluteMin > 0;\n    const left = haveRecords && this.windowStartTime ? Math.min((this.windowStartTime - absoluteMin) / timeSpan, 1) : 0;\n    const right = haveRecords && this.windowEndTime < Infinity ? (this.windowEndTime - absoluteMin) / timeSpan : 1;\n    this.muteOnWindowChanged = true;\n    this.overviewGrid.setWindow(left, right);\n    this.muteOnWindowChanged = false;\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  WindowChanged = 'WindowChanged',\n}\n\nexport interface WindowChangedEvent {\n  startTime: number;\n  endTime: number;\n}\n\nexport type EventTypes = {\n  [Events.WindowChanged]: WindowChangedEvent,\n};\n\nexport class TimelineOverviewCalculator implements Calculator {\n  private minimumBoundaryInternal!: number;\n  private maximumBoundaryInternal!: number;\n  private workingArea!: number;\n  private navStartTimes?: Map<string, SDK.TracingModel.Event>;\n\n  constructor() {\n    this.reset();\n  }\n\n  computePosition(time: number): number {\n    return (time - this.minimumBoundaryInternal) / this.boundarySpan() * this.workingArea;\n  }\n\n  positionToTime(position: number): number {\n    return position / this.workingArea * this.boundarySpan() + this.minimumBoundaryInternal;\n  }\n\n  setBounds(minimumBoundary: number, maximumBoundary: number): void {\n    this.minimumBoundaryInternal = minimumBoundary;\n    this.maximumBoundaryInternal = maximumBoundary;\n  }\n\n  setNavStartTimes(navStartTimes: Map<string, SDK.TracingModel.Event>): void {\n    this.navStartTimes = navStartTimes;\n  }\n\n  setDisplayWidth(clientWidth: number): void {\n    this.workingArea = clientWidth;\n  }\n\n  reset(): void {\n    this.setBounds(0, 100);\n  }\n\n  formatValue(value: number, precision?: number): string {\n    // If there are nav start times the value needs to be remapped.\n    if (this.navStartTimes) {\n      // Find the latest possible nav start time which is considered earlier\n      // than the value passed through.\n      const navStartTimes = Array.from(this.navStartTimes.values());\n      for (let i = navStartTimes.length - 1; i >= 0; i--) {\n        if (value > navStartTimes[i].startTime) {\n          value -= (navStartTimes[i].startTime - this.zeroTime());\n          break;\n        }\n      }\n    }\n\n    return i18n.TimeUtilities.preciseMillisToString(value - this.zeroTime(), precision);\n  }\n\n  maximumBoundary(): number {\n    return this.maximumBoundaryInternal;\n  }\n\n  minimumBoundary(): number {\n    return this.minimumBoundaryInternal;\n  }\n\n  zeroTime(): number {\n    return this.minimumBoundaryInternal;\n  }\n\n  boundarySpan(): number {\n    return this.maximumBoundaryInternal - this.minimumBoundaryInternal;\n  }\n}\n\nexport interface TimelineOverview {\n  show(parentElement: Element, insertBefore?: Element|null): void;\n  update(): void;\n  dispose(): void;\n  reset(): void;\n  overviewInfoPromise(x: number): Promise<Element|null>;\n  onClick(event: Event): boolean;\n  setCalculator(calculator: TimelineOverviewCalculator): void;\n}\n\nexport class TimelineOverviewBase extends UI.Widget.VBox implements TimelineOverview {\n  private calculatorInternal: TimelineOverviewCalculator|null;\n  private canvas: HTMLCanvasElement;\n  private contextInternal: CanvasRenderingContext2D|null;\n\n  constructor() {\n    super();\n    this.calculatorInternal = null;\n    this.canvas = (this.element.createChild('canvas', 'fill') as HTMLCanvasElement);\n    this.contextInternal = this.canvas.getContext('2d');\n  }\n\n  width(): number {\n    return this.canvas.width;\n  }\n\n  height(): number {\n    return this.canvas.height;\n  }\n\n  context(): CanvasRenderingContext2D {\n    if (!this.contextInternal) {\n      throw new Error('Unable to retrieve canvas context');\n    }\n    return this.contextInternal as CanvasRenderingContext2D;\n  }\n\n  calculator(): TimelineOverviewCalculator|null {\n    return this.calculatorInternal;\n  }\n\n  update(): void {\n    this.resetCanvas();\n  }\n\n  dispose(): void {\n    this.detach();\n  }\n\n  reset(): void {\n  }\n\n  async overviewInfoPromise(_x: number): Promise<Element|null> {\n    return null;\n  }\n\n  setCalculator(calculator: TimelineOverviewCalculator): void {\n    this.calculatorInternal = calculator;\n  }\n\n  onClick(_event: Event): boolean {\n    return false;\n  }\n\n  resetCanvas(): void {\n    if (this.element.clientWidth) {\n      this.setCanvasSize(this.element.clientWidth, this.element.clientHeight);\n    }\n  }\n\n  setCanvasSize(width: number, height: number): void {\n    this.canvas.width = width * window.devicePixelRatio;\n    this.canvas.height = height * window.devicePixelRatio;\n  }\n}\n\nexport class OverviewInfo {\n  private readonly anchorElement: Element;\n  private glassPane: UI.GlassPane.GlassPane;\n  private visible: boolean;\n  private readonly element: Element;\n\n  constructor(anchor: Element) {\n    this.anchorElement = anchor;\n    this.glassPane = new UI.GlassPane.GlassPane();\n    this.glassPane.setPointerEventsBehavior(UI.GlassPane.PointerEventsBehavior.PierceContents);\n    this.glassPane.setMarginBehavior(UI.GlassPane.MarginBehavior.Arrow);\n    this.glassPane.setSizeBehavior(UI.GlassPane.SizeBehavior.MeasureContent);\n    this.visible = false;\n    this.element = UI.Utils\n                       .createShadowRootWithCoreStyles(this.glassPane.contentElement, {\n                         cssFile: [timelineOverviewInfoStyles],\n                         delegatesFocus: undefined,\n                       })\n                       .createChild('div', 'overview-info');\n  }\n\n  async setContent(contentPromise: Promise<DocumentFragment>): Promise<void> {\n    this.visible = true;\n    const content = await contentPromise;\n    if (!this.visible) {\n      return;\n    }\n    this.element.removeChildren();\n    this.element.appendChild(content);\n    this.glassPane.setContentAnchorBox(this.anchorElement.boxInWindow());\n    if (!this.glassPane.isShowing()) {\n      this.glassPane.show((this.anchorElement.ownerDocument as Document));\n    }\n  }\n\n  hide(): void {\n    this.visible = false;\n    this.glassPane.hide();\n  }\n}\n"],
  "mappings": "AA8BA;AAEA;AACA;AAGA;AAEA;AAEO,0CAAmC,OAAO,cAAc,WAC3D,GAAG,OAAO,MAAM;AAAA,EACD;AAAA,EACA;AAAA,EACA;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EACS;AAAA,EACA;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAER,YAAY,QAAgB;AAC1B;AACA,SAAK,QAAQ,KAAK,SAAS;AAE3B,SAAK,qBAAqB,IAAI;AAC9B,SAAK,eAAe,IAAI,aAAa,QAAQ,KAAK;AAClD,SAAK,QAAQ,YAAY,KAAK,aAAa;AAC3C,SAAK,aAAa,KAAK,aAAa,QAAQ,YAAY,OAAO;AAC/D,SAAK,gBAAgB,KAAK,aAAa,QAAQ,YAAY,OAAO;AAClE,SAAK,WAAW,iBAAiB,aAAa,KAAK,YAAY,KAAK,OAAO;AAC3E,SAAK,WAAW,iBAAiB,cAAc,KAAK,WAAW,KAAK,OAAO;AAE3E,SAAK,aAAa,iBAAiB;AACnC,SAAK,aAAa,iBAAiB,mBAAmB,2BAA2B,KAAK,iBAAiB;AACvG,SAAK,aAAa,gBAAgB,KAAK,QAAQ,KAAK;AACpD,SAAK,mBAAmB;AACxB,SAAK,UAAU,oBAAI;AAEnB,SAAK,eAAe,IAAI,aAAa,KAAK;AAC1C,SAAK,kBAAkB,IAAI,OAAO,UAAU,UAAU;AAEtD,SAAK,gBAAgB;AACrB,SAAK,iBAAiB;AACtB,SAAK,YAAY;AAEjB,SAAK,kBAAkB;AACvB,SAAK,gBAAgB;AACrB,SAAK,sBAAsB;AAAA;AAAA,EAGrB,YAAY,OAAoB;AACtC,QAAI,CAAC,KAAK,eAAe;AACvB;AAAA;AAEF,UAAM,aAAc;AACpB,UAAM,SAAU,MAAM;AACtB,SAAK,iBAAiB,WAAW,UAAU,OAAO;AAClD,SAAK,cAAc,MAAM,OAAO,KAAK,iBAAiB;AACtD,SAAK,cAAc,MAAM,aAAa;AACtC,SAAK,KAAK,aAAa,WAAW,KAAK;AAAA;AAAA,QAG3B,oBAA+C;AAC3D,UAAM,WAAW,KAAK,QAAQ;AAC9B,UAAM,IAAI,KAAK;AACf,UAAM,WAAW,MAAM,QAAQ,IAAI,KAAK,iBAAiB,IAAI,aAAW,QAAQ,oBAAoB;AACpG,UAAM,WAAW,SAAS;AAC1B,UAAM,kBAAmB,SAAS,OAAO,aAAW,YAAY;AAChE,aAAS,OAAO,GAAG;AACnB,WAAO;AAAA;AAAA,EAGD,aAAmB;AACzB,SAAK,cAAc,MAAM,aAAa;AACtC,SAAK,aAAa;AAAA;AAAA,EAGpB,WAAiB;AACf,SAAK;AAAA;AAAA,EAGP,WAAiB;AACf,SAAK,aAAa;AAAA;AAAA,EAGpB,WAAiB;AACf,UAAM,QAAQ,KAAK,QAAQ;AAC3B,QAAI,UAAU,KAAK,WAAW;AAC5B;AAAA;AAEF,SAAK,YAAY;AACjB,SAAK;AAAA;AAAA,EAGP,oBAAoB,kBAA4C;AAC9D,aAAS,IAAI,GAAG,IAAI,KAAK,iBAAiB,QAAQ,EAAE,GAAG;AACrD,WAAK,iBAAiB,GAAG;AAAA;AAG3B,aAAS,IAAI,GAAG,IAAI,iBAAiB,QAAQ,EAAE,GAAG;AAChD,uBAAiB,GAAG,cAAc,KAAK;AACvC,uBAAiB,GAAG,KAAK,KAAK,aAAa;AAAA;AAE7C,SAAK,mBAAmB;AACxB,SAAK;AAAA;AAAA,EAGP,UAAU,iBAAyB,iBAA+B;AAChE,SAAK,mBAAmB,UAAU,iBAAiB;AACnD,SAAK,aAAa,iBAAiB;AACnC,SAAK,gBAAgB;AAAA;AAAA,EAGvB,iBAAiB,eAA0D;AACzE,SAAK,mBAAmB,iBAAiB;AAAA;AAAA,EAG3C,iBAAuB;AACrB,SAAK,KAAK,gBAAgB,SAAS,YAAY;AAC7C,WAAK;AAAA;AAAA;AAAA,EAID,SAAe;AACrB,QAAI,CAAC,KAAK,aAAa;AACrB;AAAA;AAEF,SAAK,mBAAmB,gBAAgB,KAAK,aAAa;AAC1D,aAAS,IAAI,GAAG,IAAI,KAAK,iBAAiB,QAAQ,EAAE,GAAG;AACrD,WAAK,iBAAiB,GAAG;AAAA;AAE3B,SAAK,aAAa,eAAe,KAAK;AACtC,SAAK;AACL,SAAK;AAAA;AAAA,EAGP,WAAW,SAAqC;AAC9C,SAAK,UAAU;AAAA;AAAA,EAGT,gBAAsB;AAC5B,UAAM,kBAAkB,oBAAI;AAC5B,eAAW,QAAQ,KAAK,QAAQ,QAAQ;AACtC,YAAM,SAAS,KAAK,QAAQ,IAAI;AAChC,YAAM,WAAW,KAAK,MAAM,KAAK,mBAAmB,gBAAgB;AAEpE,UAAI,gBAAgB,IAAI,WAAW;AACjC;AAAA;AAEF,sBAAgB,IAAI,UAAU;AAC9B,aAAO,MAAM,OAAO,WAAW;AAAA;AAEjC,SAAK,aAAa;AAClB,SAAK,aAAa,iBAAiB,CAAC,GAAG,gBAAgB;AAAA;AAAA,EAGzD,QAAc;AACZ,SAAK,kBAAkB;AACvB,SAAK,gBAAgB;AACrB,SAAK,mBAAmB;AACxB,SAAK,aAAa;AAClB,SAAK,aAAa,iBAAiB;AACnC,SAAK,gBAAgB;AACrB,SAAK;AACL,SAAK,UAAU,oBAAI;AACnB,eAAW,WAAW,KAAK,kBAAkB;AAC3C,cAAQ;AAAA;AAEV,SAAK,aAAa;AAClB,SAAK;AAAA;AAAA,EAGC,QAAQ,OAAuB;AACrC,WAAO,KAAK,iBAAiB,KAAK,aAAW,QAAQ,QAAQ;AAAA;AAAA,EAGvD,gBAAgB,OAAkF;AACxG,QAAI,KAAK,qBAAqB;AAC5B;AAAA;AAGF,QAAI,CAAC,KAAK,iBAAiB,QAAQ;AACjC;AAAA;AAGF,SAAK,kBAAkB,MAAM,KAAK;AAClC,SAAK,gBAAgB,MAAM,KAAK;AAChC,UAAM,cAAc,EAAC,WAAW,KAAK,iBAAiB,SAAS,KAAK;AAEpE,SAAK,yBAAyB,OAAO,eAAe;AAAA;AAAA,EAGtD,eAAe,WAAmB,SAAuB;AACvD,QAAI,cAAc,KAAK,mBAAmB,YAAY,KAAK,eAAe;AACxE;AAAA;AAEF,SAAK,kBAAkB;AACvB,SAAK,gBAAgB;AACrB,SAAK;AACL,SAAK,yBAAyB,OAAO,eAAe,EAAC,WAAsB;AAAA;AAAA,EAGrE,eAAqB;AAC3B,QAAI,CAAC,KAAK,iBAAiB,QAAQ;AACjC;AAAA;AAEF,UAAM,cAAc,KAAK,mBAAmB;AAC5C,UAAM,WAAW,KAAK,mBAAmB,oBAAoB;AAC7D,UAAM,cAAc,cAAc;AAClC,UAAM,OAAO,eAAe,KAAK,kBAAkB,KAAK,IAAK,MAAK,kBAAkB,eAAe,UAAU,KAAK;AAClH,UAAM,QAAQ,eAAe,KAAK,gBAAgB,WAAY,MAAK,gBAAgB,eAAe,WAAW;AAC7G,SAAK,sBAAsB;AAC3B,SAAK,aAAa,UAAU,MAAM;AAClC,SAAK,sBAAsB;AAAA;AAAA;AAMxB,WAAK,SAAL,kBAAK,YAAL;AACL,6BAAgB;AADN;AAAA;AAaL,wCAAuD;AAAA,EACpD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAER,cAAc;AACZ,SAAK;AAAA;AAAA,EAGP,gBAAgB,MAAsB;AACpC,WAAQ,QAAO,KAAK,2BAA2B,KAAK,iBAAiB,KAAK;AAAA;AAAA,EAG5E,eAAe,UAA0B;AACvC,WAAO,WAAW,KAAK,cAAc,KAAK,iBAAiB,KAAK;AAAA;AAAA,EAGlE,UAAU,iBAAyB,iBAA+B;AAChE,SAAK,0BAA0B;AAC/B,SAAK,0BAA0B;AAAA;AAAA,EAGjC,iBAAiB,eAA0D;AACzE,SAAK,gBAAgB;AAAA;AAAA,EAGvB,gBAAgB,aAA2B;AACzC,SAAK,cAAc;AAAA;AAAA,EAGrB,QAAc;AACZ,SAAK,UAAU,GAAG;AAAA;AAAA,EAGpB,YAAY,OAAe,WAA4B;AAErD,QAAI,KAAK,eAAe;AAGtB,YAAM,gBAAgB,MAAM,KAAK,KAAK,cAAc;AACpD,eAAS,IAAI,cAAc,SAAS,GAAG,KAAK,GAAG,KAAK;AAClD,YAAI,QAAQ,cAAc,GAAG,WAAW;AACtC,mBAAU,cAAc,GAAG,YAAY,KAAK;AAC5C;AAAA;AAAA;AAAA;AAKN,WAAO,KAAK,cAAc,sBAAsB,QAAQ,KAAK,YAAY;AAAA;AAAA,EAG3E,kBAA0B;AACxB,WAAO,KAAK;AAAA;AAAA,EAGd,kBAA0B;AACxB,WAAO,KAAK;AAAA;AAAA,EAGd,WAAmB;AACjB,WAAO,KAAK;AAAA;AAAA,EAGd,eAAuB;AACrB,WAAO,KAAK,0BAA0B,KAAK;AAAA;AAAA;AAcxC,0CAAmC,GAAG,OAAO,KAAiC;AAAA,EAC3E;AAAA,EACA;AAAA,EACA;AAAA,EAER,cAAc;AACZ;AACA,SAAK,qBAAqB;AAC1B,SAAK,SAAU,KAAK,QAAQ,YAAY,UAAU;AAClD,SAAK,kBAAkB,KAAK,OAAO,WAAW;AAAA;AAAA,EAGhD,QAAgB;AACd,WAAO,KAAK,OAAO;AAAA;AAAA,EAGrB,SAAiB;AACf,WAAO,KAAK,OAAO;AAAA;AAAA,EAGrB,UAAoC;AAClC,QAAI,CAAC,KAAK,iBAAiB;AACzB,YAAM,IAAI,MAAM;AAAA;AAElB,WAAO,KAAK;AAAA;AAAA,EAGd,aAA8C;AAC5C,WAAO,KAAK;AAAA;AAAA,EAGd,SAAe;AACb,SAAK;AAAA;AAAA,EAGP,UAAgB;AACd,SAAK;AAAA;AAAA,EAGP,QAAc;AAAA;AAAA,QAGR,oBAAoB,IAAmC;AAC3D,WAAO;AAAA;AAAA,EAGT,cAAc,YAA8C;AAC1D,SAAK,qBAAqB;AAAA;AAAA,EAG5B,QAAQ,QAAwB;AAC9B,WAAO;AAAA;AAAA,EAGT,cAAoB;AAClB,QAAI,KAAK,QAAQ,aAAa;AAC5B,WAAK,cAAc,KAAK,QAAQ,aAAa,KAAK,QAAQ;AAAA;AAAA;AAAA,EAI9D,cAAc,OAAe,QAAsB;AACjD,SAAK,OAAO,QAAQ,QAAQ,OAAO;AACnC,SAAK,OAAO,SAAS,SAAS,OAAO;AAAA;AAAA;AAIlC,0BAAmB;AAAA,EACP;AAAA,EACT;AAAA,EACA;AAAA,EACS;AAAA,EAEjB,YAAY,QAAiB;AAC3B,SAAK,gBAAgB;AACrB,SAAK,YAAY,IAAI,GAAG,UAAU;AAClC,SAAK,UAAU,yBAAyB,GAAG,UAAU,sBAAsB;AAC3E,SAAK,UAAU,kBAAkB,GAAG,UAAU,eAAe;AAC7D,SAAK,UAAU,gBAAgB,GAAG,UAAU,aAAa;AACzD,SAAK,UAAU;AACf,SAAK,UAAU,GAAG,MACE,+BAA+B,KAAK,UAAU,gBAAgB;AAAA,MAC7D,SAAS,CAAC;AAAA,MACV,gBAAgB;AAAA,OAEjB,YAAY,OAAO;AAAA;AAAA,QAGnC,WAAW,gBAA0D;AACzE,SAAK,UAAU;AACf,UAAM,UAAU,MAAM;AACtB,QAAI,CAAC,KAAK,SAAS;AACjB;AAAA;AAEF,SAAK,QAAQ;AACb,SAAK,QAAQ,YAAY;AACzB,SAAK,UAAU,oBAAoB,KAAK,cAAc;AACtD,QAAI,CAAC,KAAK,UAAU,aAAa;AAC/B,WAAK,UAAU,KAAM,KAAK,cAAc;AAAA;AAAA;AAAA,EAI5C,OAAa;AACX,SAAK,UAAU;AACf,SAAK,UAAU;AAAA;AAAA;",
  "names": []
}
