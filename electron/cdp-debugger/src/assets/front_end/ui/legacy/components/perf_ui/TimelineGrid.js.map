{
  "version": 3,
  "sources": ["../../../../../../../../front_end/ui/legacy/components/perf_ui/TimelineGrid.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2007, 2008 Apple Inc.  All rights reserved.\n * Copyright (C) 2008, 2009 Anthony Ricaud <rik@webkit.org>\n * Copyright (C) 2009 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Host from '../../../../core/host/host.js';\nimport * as ThemeSupport from '../../theme_support/theme_support.js';\n\nimport timelineGridStyles from './timelineGrid.css.legacy.js';\n\nconst labelMap = new Map<HTMLDivElement|HTMLElement, HTMLDivElement>();\n\nexport class TimelineGrid {\n  element: HTMLDivElement;\n  private readonly dividersElementInternal: HTMLElement;\n  private readonly gridHeaderElement: HTMLDivElement;\n  private eventDividersElement: HTMLElement;\n  private dividersLabelBarElementInternal: HTMLElement;\n\n  constructor() {\n    this.element = document.createElement('div');\n    ThemeSupport.ThemeSupport.instance().appendStyle(this.element, timelineGridStyles);\n\n    this.dividersElementInternal = this.element.createChild('div', 'resources-dividers');\n\n    this.gridHeaderElement = document.createElement('div');\n    this.gridHeaderElement.classList.add('timeline-grid-header');\n    this.eventDividersElement = this.gridHeaderElement.createChild('div', 'resources-event-dividers');\n    this.dividersLabelBarElementInternal = this.gridHeaderElement.createChild('div', 'resources-dividers-label-bar');\n    this.element.appendChild(this.gridHeaderElement);\n  }\n\n  static calculateGridOffsets(calculator: Calculator, freeZoneAtLeft?: number): DividersData {\n    /** @const */ const minGridSlicePx = 64;  // minimal distance between grid lines.\n\n    const clientWidth = calculator.computePosition(calculator.maximumBoundary());\n    let dividersCount: number|0 = clientWidth / minGridSlicePx;\n    let gridSliceTime: number = calculator.boundarySpan() / dividersCount;\n    const pixelsPerTime = clientWidth / calculator.boundarySpan();\n\n    // Align gridSliceTime to a nearest round value.\n    // We allow spans that fit into the formula: span = (1|2|5)x10^n,\n    // e.g.: ...  .1  .2  .5  1  2  5  10  20  50  ...\n    // After a span has been chosen make grid lines at multiples of the span.\n\n    const logGridSliceTime = Math.ceil(Math.log(gridSliceTime) / Math.LN10);\n    gridSliceTime = Math.pow(10, logGridSliceTime);\n    if (gridSliceTime * pixelsPerTime >= 5 * minGridSlicePx) {\n      gridSliceTime = gridSliceTime / 5;\n    }\n    if (gridSliceTime * pixelsPerTime >= 2 * minGridSlicePx) {\n      gridSliceTime = gridSliceTime / 2;\n    }\n\n    const firstDividerTime =\n        Math.ceil((calculator.minimumBoundary() - calculator.zeroTime()) / gridSliceTime) * gridSliceTime +\n        calculator.zeroTime();\n    let lastDividerTime = calculator.maximumBoundary();\n    // Add some extra space past the right boundary as the rightmost divider label text\n    // may be partially shown rather than just pop up when a new rightmost divider gets into the view.\n    lastDividerTime += minGridSlicePx / pixelsPerTime;\n    dividersCount = Math.ceil((lastDividerTime - firstDividerTime) / gridSliceTime);\n\n    if (!gridSliceTime) {\n      dividersCount = 0;\n    }\n\n    const offsets = [];\n    for (let i = 0; i < dividersCount; ++i) {\n      const time = firstDividerTime + gridSliceTime * i;\n      if (calculator.computePosition(time) < (freeZoneAtLeft || 0)) {\n        continue;\n      }\n      offsets.push({position: Math.floor(calculator.computePosition(time)), time: time});\n    }\n\n    return {offsets: offsets, precision: Math.max(0, -Math.floor(Math.log(gridSliceTime * 1.01) / Math.LN10))};\n  }\n\n  static drawCanvasGrid(context: CanvasRenderingContext2D, dividersData: DividersData): void {\n    context.save();\n    context.scale(window.devicePixelRatio, window.devicePixelRatio);\n    const height = Math.floor(context.canvas.height / window.devicePixelRatio);\n    context.strokeStyle = getComputedStyle(document.body).getPropertyValue('--divider-line');\n    context.lineWidth = 1;\n\n    context.translate(0.5, 0.5);\n    context.beginPath();\n    for (const offsetInfo of dividersData.offsets) {\n      context.moveTo(offsetInfo.position, 0);\n      context.lineTo(offsetInfo.position, height);\n    }\n    context.stroke();\n    context.restore();\n  }\n\n  static drawCanvasHeaders(\n      context: CanvasRenderingContext2D, dividersData: DividersData, formatTimeFunction: (arg0: number) => string,\n      paddingTop: number, headerHeight: number, freeZoneAtLeft?: number): void {\n    context.save();\n    context.scale(window.devicePixelRatio, window.devicePixelRatio);\n    const width = Math.ceil(context.canvas.width / window.devicePixelRatio);\n\n    context.beginPath();\n    context.fillStyle = ThemeSupport.ThemeSupport.instance().getComputedValue('--color-background-opacity-50');\n    context.fillRect(0, 0, width, headerHeight);\n\n    context.fillStyle = ThemeSupport.ThemeSupport.instance().getComputedValue('--color-text-primary');\n    context.textBaseline = 'hanging';\n    context.font = '11px ' + Host.Platform.fontFamily();\n\n    const paddingRight = 4;\n    for (const offsetInfo of dividersData.offsets) {\n      const text = formatTimeFunction(offsetInfo.time);\n      const textWidth = context.measureText(text).width;\n      const textPosition = offsetInfo.position - textWidth - paddingRight;\n      if (!freeZoneAtLeft || freeZoneAtLeft < textPosition) {\n        context.fillText(text, textPosition, paddingTop);\n      }\n    }\n    context.restore();\n  }\n\n  get dividersElement(): HTMLElement {\n    return this.dividersElementInternal;\n  }\n\n  get dividersLabelBarElement(): HTMLElement {\n    return this.dividersLabelBarElementInternal;\n  }\n\n  removeDividers(): void {\n    this.dividersElementInternal.removeChildren();\n    this.dividersLabelBarElementInternal.removeChildren();\n  }\n\n  updateDividers(calculator: Calculator, freeZoneAtLeft?: number): boolean {\n    const dividersData = TimelineGrid.calculateGridOffsets(calculator, freeZoneAtLeft);\n    const dividerOffsets = dividersData.offsets;\n    const precision = dividersData.precision;\n\n    const dividersElementClientWidth = this.dividersElementInternal.clientWidth;\n\n    // Reuse divider elements and labels.\n    let divider = (this.dividersElementInternal.firstChild as HTMLElement | null);\n    let dividerLabelBar = (this.dividersLabelBarElementInternal.firstChild as HTMLElement | null);\n\n    for (let i = 0; i < dividerOffsets.length; ++i) {\n      if (!divider) {\n        divider = document.createElement('div');\n        divider.className = 'resources-divider';\n        this.dividersElementInternal.appendChild(divider);\n\n        dividerLabelBar = document.createElement('div');\n        dividerLabelBar.className = 'resources-divider';\n        const label = document.createElement('div');\n        label.className = 'resources-divider-label';\n        labelMap.set(dividerLabelBar, label);\n        dividerLabelBar.appendChild(label);\n        this.dividersLabelBarElementInternal.appendChild(dividerLabelBar);\n      }\n\n      const time = dividerOffsets[i].time;\n      const position = dividerOffsets[i].position;\n      if (dividerLabelBar) {\n        const label = labelMap.get(dividerLabelBar);\n        if (label) {\n          label.textContent = calculator.formatValue(time, precision);\n        }\n      }\n\n      const percentLeft = 100 * position / dividersElementClientWidth;\n      divider.style.left = percentLeft + '%';\n      if (dividerLabelBar) {\n        dividerLabelBar.style.left = percentLeft + '%';\n      }\n      divider = (divider.nextSibling as HTMLElement | null);\n      if (dividerLabelBar) {\n        dividerLabelBar = (dividerLabelBar.nextSibling as HTMLElement | null);\n      }\n    }\n\n    // Remove extras.\n    while (divider) {\n      const nextDivider = divider.nextSibling;\n      this.dividersElementInternal.removeChild(divider);\n      if (nextDivider) {\n        divider = (nextDivider as HTMLElement);\n      } else {\n        break;\n      }\n    }\n    while (dividerLabelBar) {\n      const nextDivider = dividerLabelBar.nextSibling;\n      this.dividersLabelBarElementInternal.removeChild(dividerLabelBar);\n      if (nextDivider) {\n        dividerLabelBar = (nextDivider as HTMLElement);\n      } else {\n        break;\n      }\n    }\n    return true;\n  }\n\n  addEventDivider(divider: Element): void {\n    this.eventDividersElement.appendChild(divider);\n  }\n\n  addEventDividers(dividers: Element[]): void {\n    this.gridHeaderElement.removeChild(this.eventDividersElement);\n    for (const divider of dividers) {\n      this.eventDividersElement.appendChild(divider);\n    }\n    this.gridHeaderElement.appendChild(this.eventDividersElement);\n  }\n\n  removeEventDividers(): void {\n    this.eventDividersElement.removeChildren();\n  }\n\n  hideEventDividers(): void {\n    this.eventDividersElement.classList.add('hidden');\n  }\n\n  showEventDividers(): void {\n    this.eventDividersElement.classList.remove('hidden');\n  }\n\n  hideDividers(): void {\n    this.dividersElementInternal.classList.add('hidden');\n  }\n\n  showDividers(): void {\n    this.dividersElementInternal.classList.remove('hidden');\n  }\n\n  setScrollTop(scrollTop: number): void {\n    this.dividersLabelBarElementInternal.style.top = scrollTop + 'px';\n    this.eventDividersElement.style.top = scrollTop + 'px';\n  }\n}\n\nexport interface Calculator {\n  computePosition(time: number): number;\n  formatValue(time: number, precision?: number): string;\n  minimumBoundary(): number;\n  zeroTime(): number;\n  maximumBoundary(): number;\n  boundarySpan(): number;\n}\n\nexport interface DividersData {\n  offsets: {\n    position: number,\n    time: number,\n  }[];\n  precision: number;\n}\n"],
  "mappings": "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",
  "names": []
}
