{
  "version": 3,
  "sources": ["../../../../../../../../front_end/ui/legacy/components/quick_open/CommandMenu.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as Host from '../../../../core/host/host.js';\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as Platform from '../../../../core/platform/platform.js';\nimport * as Diff from '../../../../third_party/diff/diff.js';\nimport * as UI from '../../legacy.js';\n\nimport {FilteredListWidget, Provider, registerProvider} from './FilteredListWidget.js';\nimport {QuickOpenImpl} from './QuickOpen.js';\n\nconst UIStrings = {\n  /**\n  * @description Message to display if a setting change requires a reload of DevTools\n  */\n  oneOrMoreSettingsHaveChanged: 'One or more settings have changed which requires a reload to take effect.',\n  /**\n  * @description Text in Command Menu of the Command Menu\n  */\n  noCommandsFound: 'No commands found',\n  /**\n  * @description Text for command prefix of run a command\n  */\n  run: 'Run',\n  /**\n  * @description Text for command suggestion of run a command\n  */\n  command: 'Command',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/components/quick_open/CommandMenu.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet commandMenuInstance: CommandMenu;\n\nexport class CommandMenu {\n  private readonly commandsInternal: Command[];\n  private constructor() {\n    this.commandsInternal = [];\n    this.loadCommands();\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): CommandMenu {\n    const {forceNew} = opts;\n    if (!commandMenuInstance || forceNew) {\n      commandMenuInstance = new CommandMenu();\n    }\n    return commandMenuInstance;\n  }\n\n  static createCommand(options: CreateCommandOptions): Command {\n    const {category, keys, title, shortcut, executeHandler, availableHandler, userActionCode} = options;\n\n    let handler = executeHandler;\n    if (userActionCode) {\n      const actionCode = userActionCode;\n      handler = (): void => {\n        Host.userMetrics.actionTaken(actionCode);\n        executeHandler();\n      };\n    }\n    if (title === 'Show Issues') {\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const cached_handler = handler;\n      handler = (): void => {\n        Host.userMetrics.issuesPanelOpenedFrom(Host.UserMetrics.IssueOpener.CommandMenu);\n        cached_handler();\n      };\n    }\n\n    return new Command(category, title, keys, shortcut, handler, availableHandler);\n  }\n\n  static createSettingCommand<V>(setting: Common.Settings.Setting<V>, title: string, value: V): Command {\n    const category = setting.category();\n    if (!category) {\n      throw new Error(`Creating '${title}' setting command failed. Setting has no category.`);\n    }\n    const tags = setting.tags() || '';\n    const reloadRequired = Boolean(setting.reloadRequired());\n    return CommandMenu.createCommand({\n      category: Common.Settings.getLocalizedSettingsCategory(category),\n      keys: tags,\n      title,\n      shortcut: '',\n      executeHandler: (): void => {\n        setting.set(value);\n        if (reloadRequired) {\n          UI.InspectorView.InspectorView.instance().displayReloadRequiredWarning(\n              i18nString(UIStrings.oneOrMoreSettingsHaveChanged));\n        }\n      },\n      availableHandler,\n      userActionCode: undefined,\n    });\n\n    function availableHandler(): boolean {\n      return setting.get() !== value;\n    }\n  }\n\n  static createActionCommand(options: ActionCommandOptions): Command {\n    const {action, userActionCode} = options;\n    const shortcut = UI.ShortcutRegistry.ShortcutRegistry.instance().shortcutTitleForAction(action.id()) || '';\n\n    return CommandMenu.createCommand({\n      category: action.category(),\n      keys: action.tags() || '',\n      title: action.title() || '',\n      shortcut,\n      executeHandler: action.execute.bind(action),\n      userActionCode,\n      availableHandler: undefined,\n    });\n  }\n\n  static createRevealViewCommand(options: RevealViewCommandOptions): Command {\n    const {title, tags, category, userActionCode, id} = options;\n\n    return CommandMenu.createCommand({\n      category,\n      keys: tags,\n      title,\n      shortcut: '',\n      executeHandler: UI.ViewManager.ViewManager.instance().showView.bind(\n          UI.ViewManager.ViewManager.instance(), id, /* userGesture */ true),\n      userActionCode,\n      availableHandler: undefined,\n    });\n  }\n\n  private loadCommands(): void {\n    const locations = new Map<UI.ViewManager.ViewLocationValues, string>();\n    for (const {category, name} of UI.ViewManager.getRegisteredLocationResolvers()) {\n      if (category && name) {\n        locations.set(name, category);\n      }\n    }\n    const views = UI.ViewManager.getRegisteredViewExtensions();\n    for (const view of views) {\n      const viewLocation = view.location();\n      const category = viewLocation && locations.get(viewLocation);\n      if (!category) {\n        continue;\n      }\n\n      const options: RevealViewCommandOptions = {\n        title: view.commandPrompt(),\n        tags: view.tags() || '',\n        category,\n        userActionCode: undefined,\n        id: view.viewId(),\n      };\n      this.commandsInternal.push(CommandMenu.createRevealViewCommand(options));\n    }\n    // Populate allowlisted settings.\n    const settingsRegistrations = Common.Settings.getRegisteredSettings();\n    for (const settingRegistration of settingsRegistrations) {\n      const options = settingRegistration.options;\n      if (!options || !settingRegistration.category) {\n        continue;\n      }\n      for (const pair of options) {\n        const setting = Common.Settings.Settings.instance().moduleSetting(settingRegistration.settingName);\n        this.commandsInternal.push(CommandMenu.createSettingCommand(setting, pair.title(), pair.value));\n      }\n    }\n  }\n\n  commands(): Command[] {\n    return this.commandsInternal;\n  }\n}\nexport interface ActionCommandOptions {\n  action: UI.ActionRegistration.Action;\n  userActionCode?: number;\n}\n\nexport interface RevealViewCommandOptions {\n  id: string;\n  title: string;\n  tags: string;\n  category: string;\n  userActionCode?: number;\n}\n\nexport interface CreateCommandOptions {\n  category: string;\n  keys: string;\n  title: string;\n  shortcut: string;\n  executeHandler: () => void;\n  availableHandler?: () => boolean;\n  userActionCode?: number;\n}\n\nlet commandMenuProviderInstance: CommandMenuProvider;\n\nexport class CommandMenuProvider extends Provider {\n  private commands: Command[];\n  private constructor() {\n    super();\n    this.commands = [];\n  }\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): CommandMenuProvider {\n    const {forceNew} = opts;\n    if (!commandMenuProviderInstance || forceNew) {\n      commandMenuProviderInstance = new CommandMenuProvider();\n    }\n\n    return commandMenuProviderInstance;\n  }\n\n  attach(): void {\n    const allCommands = CommandMenu.instance().commands();\n\n    // Populate allowlisted actions.\n    const actions = UI.ActionRegistry.ActionRegistry.instance().availableActions();\n    for (const action of actions) {\n      const category = action.category();\n      if (!category) {\n        continue;\n      }\n\n      const options: ActionCommandOptions = {action, userActionCode: undefined};\n      this.commands.push(CommandMenu.createActionCommand(options));\n    }\n\n    for (const command of allCommands) {\n      if (command.available()) {\n        this.commands.push(command);\n      }\n    }\n\n    this.commands = this.commands.sort(commandComparator);\n\n    function commandComparator(left: Command, right: Command): number {\n      const cats = Platform.StringUtilities.compare(left.category(), right.category());\n      return cats ? cats : Platform.StringUtilities.compare(left.title(), right.title());\n    }\n  }\n\n  detach(): void {\n    this.commands = [];\n  }\n\n  itemCount(): number {\n    return this.commands.length;\n  }\n\n  itemKeyAt(itemIndex: number): string {\n    return this.commands[itemIndex].key();\n  }\n\n  itemScoreAt(itemIndex: number, query: string): number {\n    const command = this.commands[itemIndex];\n    let score = Diff.Diff.DiffWrapper.characterScore(query.toLowerCase(), command.title().toLowerCase());\n\n    // Score panel/drawer reveals above regular actions.\n    if (command.category().startsWith('Panel')) {\n      score += 2;\n    } else if (command.category().startsWith('Drawer')) {\n      score += 1;\n    }\n\n    return score;\n  }\n\n  renderItem(itemIndex: number, query: string, titleElement: Element, subtitleElement: Element): void {\n    const command = this.commands[itemIndex];\n\n    titleElement.removeChildren();\n    UI.UIUtils.createTextChild(titleElement, command.title());\n    FilteredListWidget.highlightRanges(titleElement, query, true);\n\n    subtitleElement.textContent = command.shortcut();\n\n    const tagElement = (titleElement.parentElement?.parentElement?.createChild('span', 'tag') as HTMLElement);\n    if (!tagElement) {\n      return;\n    }\n    const index = Platform.StringUtilities.hashCode(command.category()) % MaterialPaletteColors.length;\n    tagElement.style.backgroundColor = MaterialPaletteColors[index];\n    tagElement.style.color = 'var(--color-background)';\n    tagElement.textContent = command.category();\n  }\n\n  selectItem(itemIndex: number|null, _promptValue: string): void {\n    if (itemIndex === null) {\n      return;\n    }\n    this.commands[itemIndex].execute();\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.SelectCommandFromCommandMenu);\n  }\n\n  notFoundText(): string {\n    return i18nString(UIStrings.noCommandsFound);\n  }\n}\n\nexport const MaterialPaletteColors = [\n  '#F44336',\n  '#E91E63',\n  '#9C27B0',\n  '#673AB7',\n  '#3F51B5',\n  '#03A9F4',\n  '#00BCD4',\n  '#009688',\n  '#4CAF50',\n  '#8BC34A',\n  '#CDDC39',\n  '#FFC107',\n  '#FF9800',\n  '#FF5722',\n  '#795548',\n  '#9E9E9E',\n  '#607D8B',\n];\n\nexport class Command {\n  private readonly categoryInternal: string;\n  private readonly titleInternal: string;\n  private readonly keyInternal: string;\n  private readonly shortcutInternal: string;\n  private readonly executeHandler: () => void;\n  private readonly availableHandler?: () => boolean;\n\n  constructor(\n      category: string, title: string, key: string, shortcut: string, executeHandler: () => void,\n      availableHandler?: () => boolean) {\n    this.categoryInternal = category;\n    this.titleInternal = title;\n    this.keyInternal = category + '\\0' + title + '\\0' + key;\n    this.shortcutInternal = shortcut;\n    this.executeHandler = executeHandler;\n    this.availableHandler = availableHandler;\n  }\n\n  category(): string {\n    return this.categoryInternal;\n  }\n\n  title(): string {\n    return this.titleInternal;\n  }\n\n  key(): string {\n    return this.keyInternal;\n  }\n\n  shortcut(): string {\n    return this.shortcutInternal;\n  }\n\n  available(): boolean {\n    return this.availableHandler ? this.availableHandler() : true;\n  }\n\n  execute(): void {\n    this.executeHandler();\n  }\n}\n\nlet showActionDelegateInstance: ShowActionDelegate;\nexport class ShowActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ShowActionDelegate {\n    const {forceNew} = opts;\n    if (!showActionDelegateInstance || forceNew) {\n      showActionDelegateInstance = new ShowActionDelegate();\n    }\n\n    return showActionDelegateInstance;\n  }\n\n  handleAction(_context: UI.Context.Context, _actionId: string): boolean {\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.bringToFront();\n    QuickOpenImpl.show('>');\n    return true;\n  }\n}\n\nregisterProvider({\n  prefix: '>',\n  iconName: 'ic_command_run_command',\n  provider: () => Promise.resolve(CommandMenuProvider.instance()),\n  titlePrefix: (): Common.UIString.LocalizedString => i18nString(UIStrings.run),\n  titleSuggestion: (): Common.UIString.LocalizedString => i18nString(UIStrings.command),\n});\n"],
  "mappings": "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",
  "names": []
}
