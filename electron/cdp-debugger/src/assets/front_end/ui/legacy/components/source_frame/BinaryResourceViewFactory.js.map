{
  "version": 3,
  "sources": ["../../../../../../../../front_end/ui/legacy/components/source_frame/BinaryResourceViewFactory.ts"],
  "sourcesContent": ["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../../../core/common/common.js';\nimport type * as Platform from '../../../../core/platform/platform.js';\nimport * as TextUtils from '../../../../models/text_utils/text_utils.js';\n\nimport {ResourceSourceFrame} from './ResourceSourceFrame.js';\n\nexport class BinaryResourceViewFactory {\n  private base64content: string;\n  private readonly contentUrl: Platform.DevToolsPath.UrlString;\n  private readonly resourceType: Common.ResourceType.ResourceType;\n  private arrayPromise: Promise<Uint8Array>|null;\n  private hexPromise: Promise<TextUtils.ContentProvider.DeferredContent>|null;\n  private utf8Promise: Promise<TextUtils.ContentProvider.DeferredContent>|null;\n  constructor(\n      base64content: string, contentUrl: Platform.DevToolsPath.UrlString,\n      resourceType: Common.ResourceType.ResourceType) {\n    this.base64content = base64content;\n    this.contentUrl = contentUrl;\n    this.resourceType = resourceType;\n    this.arrayPromise = null;\n    this.hexPromise = null;\n    this.utf8Promise = null;\n  }\n\n  private async fetchContentAsArray(): Promise<Uint8Array> {\n    if (!this.arrayPromise) {\n      this.arrayPromise = new Promise(async resolve => {\n        const fetchResponse = await fetch('data:;base64,' + this.base64content);\n        resolve(new Uint8Array(await fetchResponse.arrayBuffer()));\n      });\n    }\n    return await this.arrayPromise;\n  }\n\n  async hex(): Promise<TextUtils.ContentProvider.DeferredContent> {\n    if (!this.hexPromise) {\n      const content = await this.fetchContentAsArray();\n      const hexString = BinaryResourceViewFactory.uint8ArrayToHexString(content);\n      return {content: hexString, isEncoded: false};\n    }\n\n    return this.hexPromise;\n  }\n\n  async base64(): Promise<TextUtils.ContentProvider.DeferredContent> {\n    return {content: this.base64content, isEncoded: true};\n  }\n\n  async utf8(): Promise<TextUtils.ContentProvider.DeferredContent> {\n    if (!this.utf8Promise) {\n      this.utf8Promise = new Promise(async resolve => {\n        const content = await this.fetchContentAsArray();\n        const utf8String = new TextDecoder('utf8').decode(content);\n        resolve({content: utf8String, isEncoded: false});\n      });\n    }\n\n    return this.utf8Promise;\n  }\n\n  createBase64View(): ResourceSourceFrame {\n    return new ResourceSourceFrame(\n        TextUtils.StaticContentProvider.StaticContentProvider.fromString(\n            this.contentUrl, this.resourceType, this.base64content),\n        this.resourceType.canonicalMimeType(), {lineNumbers: false, lineWrapping: true});\n  }\n\n  createHexView(): ResourceSourceFrame {\n    const hexViewerContentProvider =\n        new TextUtils.StaticContentProvider.StaticContentProvider(this.contentUrl, this.resourceType, async () => {\n          const contentAsArray = await this.fetchContentAsArray();\n          const content = BinaryResourceViewFactory.uint8ArrayToHexViewer(contentAsArray);\n          return {content, isEncoded: false};\n        });\n    return new ResourceSourceFrame(\n        hexViewerContentProvider, this.resourceType.canonicalMimeType(), {lineNumbers: false, lineWrapping: false});\n  }\n\n  createUtf8View(): ResourceSourceFrame {\n    const utf8fn = this.utf8.bind(this);\n    const utf8ContentProvider =\n        new TextUtils.StaticContentProvider.StaticContentProvider(this.contentUrl, this.resourceType, utf8fn);\n    return new ResourceSourceFrame(\n        utf8ContentProvider, this.resourceType.canonicalMimeType(), {lineNumbers: true, lineWrapping: true});\n  }\n\n  static uint8ArrayToHexString(uint8Array: Uint8Array): string {\n    let output = '';\n    for (let i = 0; i < uint8Array.length; i++) {\n      output += BinaryResourceViewFactory.numberToHex(uint8Array[i], 2);\n    }\n    return output;\n  }\n\n  static numberToHex(number: number, padding: number): string {\n    let hex = number.toString(16);\n    while (hex.length < padding) {\n      hex = '0' + hex;\n    }\n    return hex;\n  }\n\n  static uint8ArrayToHexViewer(array: Uint8Array): string {\n    let output = '';\n    let line = 0;\n\n    while ((line * 16) < array.length) {\n      const lineArray = array.slice(line * 16, (line + 1) * 16);\n\n      // line number\n      output += BinaryResourceViewFactory.numberToHex(line, 8) + ':';\n\n      // hex\n      let hexColsPrinted = 0;\n      for (let i = 0; i < lineArray.length; i++) {\n        if (i % 2 === 0) {\n          output += ' ';\n          hexColsPrinted++;\n        }\n        output += BinaryResourceViewFactory.numberToHex(lineArray[i], 2);\n        hexColsPrinted += 2;\n      }\n\n      // hex-ascii padding\n      while (hexColsPrinted < 42) {\n        output += ' ';\n        hexColsPrinted++;\n      }\n\n      // ascii\n      for (let i = 0; i < lineArray.length; i++) {\n        const code = lineArray[i];\n        if (code >= 32 && code <= 126) {\n          // printable ascii character\n          output += String.fromCharCode(code);\n        } else {\n          // non-printable\n          output += '.';\n        }\n      }\n\n      output += '\\n';\n      line++;\n    }\n    return output;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
