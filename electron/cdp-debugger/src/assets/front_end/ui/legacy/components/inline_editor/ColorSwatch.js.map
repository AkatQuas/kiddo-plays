{
  "version": 3,
  "sources": ["../../../../../../../../front_end/ui/legacy/components/inline_editor/ColorSwatch.ts"],
  "sourcesContent": ["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as ComponentHelpers from '../../../components/helpers/helpers.js';\nimport * as LitHtml from '../../../lit-html/lit-html.js';\n\nimport colorSwatchStyles from './colorSwatch.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Icon element title in Color Swatch of the inline editor in the Styles tab\n  */\n  shiftclickToChangeColorFormat: 'Shift-click to change color format',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/components/inline_editor/ColorSwatch.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class FormatChangedEvent extends Event {\n  static readonly eventName = 'formatchanged';\n\n  data: {format: string, text: string|null};\n\n  constructor(format: string, text: string|null) {\n    super(FormatChangedEvent.eventName, {});\n    this.data = {format, text};\n  }\n}\n\nexport class ClickEvent extends Event {\n  static readonly eventName = 'swatchclick';\n\n  constructor() {\n    super(ClickEvent.eventName, {});\n  }\n}\n\nexport class ColorSwatch extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-color-swatch`;\n  private readonly shadow = this.attachShadow({mode: 'open'});\n  private tooltip: string = i18nString(UIStrings.shiftclickToChangeColorFormat);\n  private text: string|null = null;\n  private color: Common.Color.Color|null = null;\n  private format: string|null = null;\n\n  constructor() {\n    super();\n    this.shadow.adoptedStyleSheets = [\n      colorSwatchStyles,\n    ];\n  }\n\n  static isColorSwatch(element: Element): element is ColorSwatch {\n    return element.localName === 'devtools-color-swatch';\n  }\n\n  getColor(): Common.Color.Color|null {\n    return this.color;\n  }\n\n  getFormat(): string|null {\n    return this.format;\n  }\n\n  getText(): string|null {\n    return this.text;\n  }\n\n  get anchorBox(): AnchorBox|null {\n    const swatch = this.shadow.querySelector('.color-swatch');\n    return swatch ? swatch.boxInWindow() : null;\n  }\n\n  /**\n   * Render this swatch given a color object or text to be parsed as a color.\n   * @param color The color object or string to use for this swatch.\n   * @param formatOrUseUserSetting Either the format to be used as a string, or true to auto-detect the user-set format.\n   * @param tooltip The tooltip to use on the swatch.\n   */\n  renderColor(color: Common.Color.Color|string, formatOrUseUserSetting?: string|boolean, tooltip?: string): void {\n    if (typeof color === 'string') {\n      this.color = Common.Color.Color.parse(color);\n      this.text = color;\n      if (!this.color) {\n        this.renderTextOnly();\n        return;\n      }\n    } else {\n      this.color = color;\n    }\n\n    if (typeof formatOrUseUserSetting === 'boolean' && formatOrUseUserSetting) {\n      this.format = Common.Settings.detectColorFormat(this.color);\n    } else if (typeof formatOrUseUserSetting === 'string') {\n      this.format = formatOrUseUserSetting;\n    } else {\n      this.format = this.color.format();\n    }\n\n    this.text = this.color.asString(this.format);\n\n    if (tooltip) {\n      this.tooltip = tooltip;\n    }\n\n    this.render();\n  }\n\n  private renderTextOnly(): void {\n    // Non-color values can be passed to the component (like 'none' from border style).\n    LitHtml.render(this.text, this.shadow, {host: this});\n  }\n\n  private render(): void {\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n\n    // Note that we use a <slot> with a default value here to display the color text. Consumers of this component are\n    // free to append any content to replace what is being shown here.\n    // Note also that whitespace between nodes is removed on purpose to avoid pushing these elements apart. Do not\n    // re-format the HTML code.\n    LitHtml.render(\n      LitHtml.html`<span class=\"color-swatch\" title=${this.tooltip}><span class=\"color-swatch-inner\"\n        style=\"background-color: ${this.text};\"\n        @click=${this.onClick}\n        @mousedown=${this.consume}\n        @dblclick=${this.consume}></span></span><slot><span>${this.text}</span></slot>`,\n      this.shadow, {host: this});\n    // clang-format on\n  }\n\n  private onClick(e: KeyboardEvent): void {\n    e.stopPropagation();\n\n    if (e.shiftKey) {\n      this.toggleNextFormat();\n      return;\n    }\n\n    this.dispatchEvent(new ClickEvent());\n  }\n\n  private consume(e: Event): void {\n    e.stopPropagation();\n  }\n\n  private toggleNextFormat(): void {\n    if (!this.color || !this.format) {\n      return;\n    }\n\n    let currentValue;\n    do {\n      this.format = nextColorFormat(this.color, this.format);\n      currentValue = this.color.asString(this.format);\n    } while (currentValue === this.text);\n\n    if (currentValue) {\n      this.text = currentValue;\n      this.render();\n\n      this.dispatchEvent(new FormatChangedEvent(this.format, this.text));\n    }\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-color-swatch', ColorSwatch);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-color-swatch': ColorSwatch;\n  }\n\n  interface HTMLElementEventMap {\n    [FormatChangedEvent.eventName]: FormatChangedEvent;\n    [ClickEvent.eventName]: Event;\n  }\n}\n\nfunction nextColorFormat(color: Common.Color.Color, curFormat: string): string {\n  // The format loop is as follows:\n  // * original\n  // * rgb(a)\n  // * hsl(a)\n  // * hwb(a)\n  // * nickname (if the color has a nickname)\n  // * shorthex (if has short hex)\n  // * hex\n  const cf = Common.Color.Format;\n\n  switch (curFormat) {\n    case cf.Original:\n      return !color.hasAlpha() ? cf.RGB : cf.RGBA;\n\n    case cf.RGB:\n    case cf.RGBA:\n      return !color.hasAlpha() ? cf.HSL : cf.HSLA;\n\n    case cf.HSL:\n    case cf.HSLA:\n      return !color.hasAlpha() ? cf.HWB : cf.HWBA;\n\n    case cf.HWB:\n    case cf.HWBA:\n      if (color.nickname()) {\n        return cf.Nickname;\n      }\n      return color.detectHEXFormat();\n\n    case cf.ShortHEX:\n      return cf.HEX;\n\n    case cf.ShortHEXA:\n      return cf.HEXA;\n\n    case cf.HEXA:\n    case cf.HEX:\n      return cf.Original;\n\n    case cf.Nickname:\n      return color.detectHEXFormat();\n\n    default:\n      return cf.RGBA;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
