{
  "version": 3,
  "sources": ["../../../../../../../../front_end/ui/legacy/components/perf_ui/OverviewGrid.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as Platform from '../../../../core/platform/platform.js';\nimport * as UI from '../../legacy.js';\nimport * as ThemeSupport from '../../theme_support/theme_support.js';\n\nimport type {Calculator} from './TimelineGrid.js';\nimport {TimelineGrid} from './TimelineGrid.js';\nimport overviewGridStyles from './overviewGrid.css.legacy.js';\n\nconst UIStrings = {\n  /**\n  *@description Label for the window for Overview grids\n  */\n  overviewGridWindow: 'Overview grid window',\n  /**\n  *@description Label for left window resizer for Overview grids\n  */\n  leftResizer: 'Left Resizer',\n  /**\n  *@description Label for right window resizer for Overview grids\n  */\n  rightResizer: 'Right Resizer',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/components/perf_ui/OverviewGrid.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class OverviewGrid {\n  element: HTMLDivElement;\n  private readonly grid: TimelineGrid;\n  private readonly window: Window;\n  constructor(prefix: string, calculator?: Calculator) {\n    this.element = document.createElement('div');\n    this.element.id = prefix + '-overview-container';\n\n    this.grid = new TimelineGrid();\n    this.grid.element.id = prefix + '-overview-grid';\n    this.grid.setScrollTop(0);\n\n    this.element.appendChild(this.grid.element);\n\n    this.window = new Window(this.element, this.grid.dividersLabelBarElement, calculator);\n  }\n\n  clientWidth(): number {\n    return this.element.clientWidth;\n  }\n\n  updateDividers(calculator: Calculator): void {\n    this.grid.updateDividers(calculator);\n  }\n\n  addEventDividers(dividers: Element[]): void {\n    this.grid.addEventDividers(dividers);\n  }\n\n  removeEventDividers(): void {\n    this.grid.removeEventDividers();\n  }\n\n  reset(): void {\n    this.window.reset();\n  }\n\n  windowLeft(): number {\n    return this.window.windowLeft || 0;\n  }\n\n  windowRight(): number {\n    return this.window.windowRight || 0;\n  }\n\n  setWindow(left: number, right: number): void {\n    this.window.setWindow(left, right);\n  }\n\n  addEventListener<T extends keyof EventTypes>(\n      eventType: T, listener: Common.EventTarget.EventListener<EventTypes, T>,\n      thisObject?: Object): Common.EventTarget.EventDescriptor {\n    return this.window.addEventListener(eventType, listener, thisObject);\n  }\n\n  setClickHandler(clickHandler: ((arg0: Event) => boolean)|null): void {\n    this.window.setClickHandler(clickHandler);\n  }\n\n  zoom(zoomFactor: number, referencePoint: number): void {\n    this.window.zoom(zoomFactor, referencePoint);\n  }\n\n  setResizeEnabled(enabled: boolean): void {\n    this.window.setEnabled(enabled);\n  }\n}\n\nexport const MinSelectableSize = 14;\nexport const WindowScrollSpeedFactor = .3;\nexport const ResizerOffset = 3.5;  // half pixel because offset values are not rounded but ceiled\nexport const OffsetFromWindowEnds = 10;\n\nexport class Window extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  private parentElement: Element;\n  private calculator: Calculator|undefined;\n  private leftResizeElement: HTMLElement;\n  private rightResizeElement: HTMLElement;\n  private leftCurtainElement: HTMLElement;\n  private rightCurtainElement: HTMLElement;\n  private overviewWindowSelector!: WindowSelector|undefined;\n  private offsetLeft!: number;\n  private dragStartPoint!: number;\n  private dragStartLeft!: number;\n  private dragStartRight!: number;\n  windowLeft?: number;\n  windowRight?: number;\n  private enabled?: boolean;\n  private clickHandler?: ((arg0: Event) => boolean)|null;\n  private resizerParentOffsetLeft?: number;\n  constructor(parentElement: Element, dividersLabelBarElement?: Element, calculator?: Calculator) {\n    super();\n    this.parentElement = parentElement;\n    UI.ARIAUtils.markAsGroup(this.parentElement);\n    this.calculator = calculator;\n\n    UI.ARIAUtils.setAccessibleName(this.parentElement, i18nString(UIStrings.overviewGridWindow));\n\n    UI.UIUtils.installDragHandle(\n        this.parentElement, this.startWindowSelectorDragging.bind(this), this.windowSelectorDragging.bind(this),\n        this.endWindowSelectorDragging.bind(this), 'text', null);\n    if (dividersLabelBarElement) {\n      UI.UIUtils.installDragHandle(\n          dividersLabelBarElement, this.startWindowDragging.bind(this), this.windowDragging.bind(this), null,\n          '-webkit-grabbing', '-webkit-grab');\n    }\n\n    this.parentElement.addEventListener('wheel', this.onMouseWheel.bind(this), true);\n    this.parentElement.addEventListener('dblclick', this.resizeWindowMaximum.bind(this), true);\n    ThemeSupport.ThemeSupport.instance().appendStyle(this.parentElement, overviewGridStyles);\n\n    this.leftResizeElement = parentElement.createChild('div', 'overview-grid-window-resizer') as HTMLElement;\n    UI.UIUtils.installDragHandle(\n        this.leftResizeElement, this.resizerElementStartDragging.bind(this), this.leftResizeElementDragging.bind(this),\n        null, 'ew-resize');\n    this.rightResizeElement = (parentElement.createChild('div', 'overview-grid-window-resizer') as HTMLElement);\n    UI.UIUtils.installDragHandle(\n        this.rightResizeElement, this.resizerElementStartDragging.bind(this),\n        this.rightResizeElementDragging.bind(this), null, 'ew-resize');\n\n    UI.ARIAUtils.setAccessibleName(this.leftResizeElement, i18nString(UIStrings.leftResizer));\n    UI.ARIAUtils.markAsSlider(this.leftResizeElement);\n    const leftKeyDown = (event: Event): void => this.handleKeyboardResizing(event, false);\n    this.leftResizeElement.addEventListener('keydown', leftKeyDown);\n\n    UI.ARIAUtils.setAccessibleName(this.rightResizeElement, i18nString(UIStrings.rightResizer));\n    UI.ARIAUtils.markAsSlider(this.rightResizeElement);\n\n    const rightKeyDown = (event: Event): void => this.handleKeyboardResizing(event, true);\n    this.rightResizeElement.addEventListener('keydown', rightKeyDown);\n    this.rightResizeElement.addEventListener('focus', this.onRightResizeElementFocused.bind(this));\n    this.leftCurtainElement = (parentElement.createChild('div', 'window-curtain-left') as HTMLElement);\n    this.rightCurtainElement = (parentElement.createChild('div', 'window-curtain-right') as HTMLElement);\n    this.reset();\n  }\n\n  private onRightResizeElementFocused(): void {\n    // To prevent browser focus from scrolling the element into view and shifting the contents of the strip\n    this.parentElement.scrollLeft = 0;\n  }\n\n  reset(): void {\n    this.windowLeft = 0.0;\n    this.windowRight = 1.0;\n    this.setEnabled(true);\n    this.updateCurtains();\n  }\n\n  setEnabled(enabled: boolean): void {\n    this.enabled = enabled;\n    this.rightResizeElement.tabIndex = enabled ? 0 : -1;\n    this.leftResizeElement.tabIndex = enabled ? 0 : -1;\n  }\n\n  setClickHandler(clickHandler: ((arg0: Event) => boolean)|null): void {\n    this.clickHandler = clickHandler;\n  }\n\n  private resizerElementStartDragging(event: Event): boolean {\n    const mouseEvent = (event as MouseEvent);\n    const target = (event.target as HTMLElement);\n    if (!this.enabled) {\n      return false;\n    }\n    this.resizerParentOffsetLeft = mouseEvent.pageX - mouseEvent.offsetX - target.offsetLeft;\n    event.stopPropagation();\n    return true;\n  }\n\n  private leftResizeElementDragging(event: Event): void {\n    const mouseEvent = (event as MouseEvent);\n    this.resizeWindowLeft(mouseEvent.pageX - (this.resizerParentOffsetLeft || 0));\n    event.preventDefault();\n  }\n\n  private rightResizeElementDragging(event: Event): void {\n    const mouseEvent = (event as MouseEvent);\n    this.resizeWindowRight(mouseEvent.pageX - (this.resizerParentOffsetLeft || 0));\n    event.preventDefault();\n  }\n\n  private handleKeyboardResizing(event: Event, moveRightResizer?: boolean): void {\n    const keyboardEvent = (event as KeyboardEvent);\n    const target = (event.target as HTMLElement);\n    let increment = false;\n    if (keyboardEvent.key === 'ArrowLeft' || keyboardEvent.key === 'ArrowRight') {\n      if (keyboardEvent.key === 'ArrowRight') {\n        increment = true;\n      }\n      const newPos = this.getNewResizerPosition(target.offsetLeft, increment, keyboardEvent.ctrlKey);\n      if (moveRightResizer) {\n        this.resizeWindowRight(newPos);\n      } else {\n        this.resizeWindowLeft(newPos);\n      }\n      event.consume(true);\n    }\n  }\n\n  private getNewResizerPosition(offset: number, increment?: boolean, ctrlPressed?: boolean): number {\n    let newPos;\n    // We shift by 10px if the ctrlKey is pressed and 2 otherwise.  1px shifts result in noOp due to rounding in updateCurtains\n    let pixelsToShift: number|(2 | 10) = ctrlPressed ? 10 : 2;\n    pixelsToShift = increment ? pixelsToShift : -Math.abs(pixelsToShift);\n    const offsetLeft = offset + ResizerOffset;\n    newPos = offsetLeft + pixelsToShift;\n    if (increment && newPos < OffsetFromWindowEnds) {\n      // When incrementing, snap to the window offset value (10px) if the new position is between 0px and 10px\n      newPos = OffsetFromWindowEnds;\n    } else if (!increment && newPos > this.parentElement.clientWidth - OffsetFromWindowEnds) {\n      // When decrementing, snap to the window offset value (10px) from the rightmost side if the new position is within 10px from the end.\n      newPos = this.parentElement.clientWidth - OffsetFromWindowEnds;\n    }\n\n    return newPos;\n  }\n\n  private startWindowSelectorDragging(event: Event): boolean {\n    if (!this.enabled) {\n      return false;\n    }\n    const mouseEvent = (event as MouseEvent);\n    this.offsetLeft = this.parentElement.totalOffsetLeft();\n    const position = mouseEvent.x - this.offsetLeft;\n    this.overviewWindowSelector = new WindowSelector(this.parentElement, position);\n    return true;\n  }\n\n  private windowSelectorDragging(event: Event): void {\n    if (!this.overviewWindowSelector) {\n      return;\n    }\n    const mouseEvent = (event as MouseEvent);\n    this.overviewWindowSelector.updatePosition(mouseEvent.x - this.offsetLeft);\n    event.preventDefault();\n  }\n\n  private endWindowSelectorDragging(event: Event): void {\n    if (!this.overviewWindowSelector) {\n      return;\n    }\n    const mouseEvent = (event as MouseEvent);\n    const window = this.overviewWindowSelector.close(mouseEvent.x - this.offsetLeft);\n    delete this.overviewWindowSelector;\n    const clickThreshold = 3;\n    if (window.end - window.start < clickThreshold) {\n      if (this.clickHandler && this.clickHandler.call(null, event)) {\n        return;\n      }\n      const middle = window.end;\n      window.start = Math.max(0, middle - MinSelectableSize / 2);\n      window.end = Math.min(this.parentElement.clientWidth, middle + MinSelectableSize / 2);\n    } else if (window.end - window.start < MinSelectableSize) {\n      if (this.parentElement.clientWidth - window.end > MinSelectableSize) {\n        window.end = window.start + MinSelectableSize;\n      } else {\n        window.start = window.end - MinSelectableSize;\n      }\n    }\n    this.setWindowPosition(window.start, window.end);\n  }\n\n  private startWindowDragging(event: Event): boolean {\n    const mouseEvent = (event as MouseEvent);\n    this.dragStartPoint = mouseEvent.pageX;\n    this.dragStartLeft = this.windowLeft || 0;\n    this.dragStartRight = this.windowRight || 0;\n    event.stopPropagation();\n    return true;\n  }\n\n  private windowDragging(event: Event): void {\n    const mouseEvent = (event as MouseEvent);\n    mouseEvent.preventDefault();\n    let delta: number = (mouseEvent.pageX - this.dragStartPoint) / this.parentElement.clientWidth;\n    if (this.dragStartLeft + delta < 0) {\n      delta = -this.dragStartLeft;\n    }\n\n    if (this.dragStartRight + delta > 1) {\n      delta = 1 - this.dragStartRight;\n    }\n\n    this.setWindow(this.dragStartLeft + delta, this.dragStartRight + delta);\n  }\n\n  private resizeWindowLeft(start: number): void {\n    // Glue to edge.\n    if (start < OffsetFromWindowEnds) {\n      start = 0;\n    } else if (start > this.rightResizeElement.offsetLeft - 4) {\n      start = this.rightResizeElement.offsetLeft - 4;\n    }\n    this.setWindowPosition(start, null);\n  }\n\n  private resizeWindowRight(end: number): void {\n    // Glue to edge.\n    if (end > this.parentElement.clientWidth - OffsetFromWindowEnds) {\n      end = this.parentElement.clientWidth;\n    } else if (end < this.leftResizeElement.offsetLeft + MinSelectableSize) {\n      end = this.leftResizeElement.offsetLeft + MinSelectableSize;\n    }\n    this.setWindowPosition(null, end);\n  }\n\n  private resizeWindowMaximum(): void {\n    this.setWindowPosition(0, this.parentElement.clientWidth);\n  }\n\n  private getRawSliderValue(leftSlider?: boolean): number {\n    if (!this.calculator) {\n      throw new Error('No calculator to calculate boundaries');\n    }\n\n    const minimumValue = this.calculator.minimumBoundary();\n    const valueSpan = this.calculator.maximumBoundary() - minimumValue;\n    if (leftSlider) {\n      return minimumValue + valueSpan * (this.windowLeft || 0);\n    }\n    return minimumValue + valueSpan * (this.windowRight || 0);\n  }\n\n  private updateResizeElementPositionValue(leftValue: number, rightValue: number): void {\n    const roundedLeftValue = leftValue.toFixed(2);\n    const roundedRightValue = rightValue.toFixed(2);\n    UI.ARIAUtils.setAriaValueNow(this.leftResizeElement, roundedLeftValue);\n    UI.ARIAUtils.setAriaValueNow(this.rightResizeElement, roundedRightValue);\n\n    // Left and right sliders cannot be within 0.5% of each other (Range of AriaValueMin/Max/Now is from 0-100).\n    const leftResizeCeiling = Number(roundedRightValue) - 0.5;\n    const rightResizeFloor = Number(roundedLeftValue) + 0.5;\n    UI.ARIAUtils.setAriaValueMinMax(this.leftResizeElement, '0', leftResizeCeiling.toString());\n    UI.ARIAUtils.setAriaValueMinMax(this.rightResizeElement, rightResizeFloor.toString(), '100');\n  }\n\n  private updateResizeElementPositionLabels(): void {\n    if (!this.calculator) {\n      return;\n    }\n    const startValue = this.calculator.formatValue(this.getRawSliderValue(/* leftSlider */ true));\n    const endValue = this.calculator.formatValue(this.getRawSliderValue(/* leftSlider */ false));\n    UI.ARIAUtils.setAriaValueText(this.leftResizeElement, String(startValue));\n    UI.ARIAUtils.setAriaValueText(this.rightResizeElement, String(endValue));\n  }\n\n  private updateResizeElementPercentageLabels(leftValue: string, rightValue: string): void {\n    UI.ARIAUtils.setAriaValueText(this.leftResizeElement, leftValue);\n    UI.ARIAUtils.setAriaValueText(this.rightResizeElement, rightValue);\n  }\n\n  private calculateWindowPosition(): {\n    rawStartValue: number,\n    rawEndValue: number,\n  } {\n    return {\n      rawStartValue: Number(this.getRawSliderValue(/* leftSlider */ true)),\n      rawEndValue: Number(this.getRawSliderValue(/* leftSlider */ false)),\n    };\n  }\n\n  setWindow(windowLeft: number, windowRight: number): void {\n    this.windowLeft = windowLeft;\n    this.windowRight = windowRight;\n    this.updateCurtains();\n    if (this.calculator) {\n      this.dispatchEventToListeners(Events.WindowChangedWithPosition, this.calculateWindowPosition());\n    }\n    this.dispatchEventToListeners(Events.WindowChanged);\n  }\n\n  private updateCurtains(): void {\n    const windowLeft = this.windowLeft || 0;\n    const windowRight = this.windowRight || 0;\n    let left = windowLeft;\n    let right = windowRight;\n    const width = right - left;\n\n    // OverviewGrids that are instantiated before the parentElement is shown will have a parent element client width of 0 which throws off the 'factor' calculation\n    if (this.parentElement.clientWidth !== 0) {\n      // We allow actual time window to be arbitrarily small but don't want the UI window to be too small.\n      const widthInPixels = width * this.parentElement.clientWidth;\n      const minWidthInPixels = MinSelectableSize / 2;\n      if (widthInPixels < minWidthInPixels) {\n        const factor = minWidthInPixels / widthInPixels;\n        left = ((windowRight + windowLeft) - width * factor) / 2;\n        right = ((windowRight + windowLeft) + width * factor) / 2;\n      }\n    }\n    const leftResizerPercLeftOffset = (100 * left);\n    const rightResizerPercLeftOffset = (100 * right);\n    const rightResizerPercRightOffset = (100 - (100 * right));\n\n    const leftResizerPercLeftOffsetString = leftResizerPercLeftOffset + '%';\n    const rightResizerPercLeftOffsetString = rightResizerPercLeftOffset + '%';\n\n    this.leftResizeElement.style.left = leftResizerPercLeftOffsetString;\n    this.rightResizeElement.style.left = rightResizerPercLeftOffsetString;\n\n    this.leftCurtainElement.style.width = leftResizerPercLeftOffsetString;\n    this.rightCurtainElement.style.width = rightResizerPercRightOffset + '%';\n\n    this.updateResizeElementPositionValue(leftResizerPercLeftOffset, rightResizerPercLeftOffset);\n    if (this.calculator) {\n      this.updateResizeElementPositionLabels();\n    } else {\n      this.updateResizeElementPercentageLabels(leftResizerPercLeftOffsetString, rightResizerPercLeftOffsetString);\n    }\n  }\n\n  private setWindowPosition(start: number|null, end: number|null): void {\n    const clientWidth = this.parentElement.clientWidth;\n    const windowLeft = typeof start === 'number' ? start / clientWidth : this.windowLeft;\n    const windowRight = typeof end === 'number' ? end / clientWidth : this.windowRight;\n    this.setWindow(windowLeft || 0, windowRight || 0);\n  }\n\n  private onMouseWheel(event: Event): void {\n    const wheelEvent = (event as WheelEvent);\n    if (!this.enabled) {\n      return;\n    }\n    if (wheelEvent.deltaY) {\n      const zoomFactor = 1.1;\n      const wheelZoomSpeed = 1 / 53;\n\n      const reference = wheelEvent.offsetX / this.parentElement.clientWidth;\n      this.zoom(Math.pow(zoomFactor, wheelEvent.deltaY * wheelZoomSpeed), reference);\n    }\n    if (wheelEvent.deltaX) {\n      let offset = Math.round(wheelEvent.deltaX * WindowScrollSpeedFactor);\n      const windowLeft = this.leftResizeElement.offsetLeft + ResizerOffset;\n      const windowRight = this.rightResizeElement.offsetLeft + ResizerOffset;\n\n      if (windowLeft - offset < 0) {\n        offset = windowLeft;\n      }\n\n      if (windowRight - offset > this.parentElement.clientWidth) {\n        offset = windowRight - this.parentElement.clientWidth;\n      }\n\n      this.setWindowPosition(windowLeft - offset, windowRight - offset);\n\n      wheelEvent.preventDefault();\n    }\n  }\n\n  zoom(factor: number, reference: number): void {\n    let left: number = this.windowLeft || 0;\n    let right: number = this.windowRight || 0;\n    const windowSize = right - left;\n    let newWindowSize: 1|number = factor * windowSize;\n    if (newWindowSize > 1) {\n      newWindowSize = 1;\n      factor = newWindowSize / windowSize;\n    }\n    left = reference + (left - reference) * factor;\n    left = Platform.NumberUtilities.clamp(left, 0, 1 - newWindowSize);\n\n    right = reference + (right - reference) * factor;\n    right = Platform.NumberUtilities.clamp(right, newWindowSize, 1);\n    this.setWindow(left, right);\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  WindowChanged = 'WindowChanged',\n  WindowChangedWithPosition = 'WindowChangedWithPosition',\n}\n\nexport interface WindowChangedWithPositionEvent {\n  rawStartValue: number;\n  rawEndValue: number;\n}\n\nexport type EventTypes = {\n  [Events.WindowChanged]: void,\n  [Events.WindowChangedWithPosition]: WindowChangedWithPositionEvent,\n};\n\nexport class WindowSelector {\n  private startPosition: number;\n  private width: number;\n  private windowSelector: HTMLDivElement;\n\n  constructor(parent: Element, position: number) {\n    this.startPosition = position;\n    this.width = (parent as HTMLElement).offsetWidth;\n    this.windowSelector = document.createElement('div');\n    this.windowSelector.className = 'overview-grid-window-selector';\n    this.windowSelector.style.left = this.startPosition + 'px';\n    this.windowSelector.style.right = this.width - this.startPosition + 'px';\n    parent.appendChild(this.windowSelector);\n  }\n\n  close(position: number): {\n    start: number,\n    end: number,\n  } {\n    position = Math.max(0, Math.min(position, this.width));\n    this.windowSelector.remove();\n    return this.startPosition < position ? {start: this.startPosition, end: position} :\n                                           {start: position, end: this.startPosition};\n  }\n\n  updatePosition(position: number): void {\n    position = Math.max(0, Math.min(position, this.width));\n    if (position < this.startPosition) {\n      this.windowSelector.style.left = position + 'px';\n      this.windowSelector.style.right = this.width - this.startPosition + 'px';\n    } else {\n      this.windowSelector.style.left = this.startPosition + 'px';\n      this.windowSelector.style.right = this.width - position + 'px';\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
