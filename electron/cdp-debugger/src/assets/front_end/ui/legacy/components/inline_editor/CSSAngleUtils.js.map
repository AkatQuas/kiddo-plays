{
  "version": 3,
  "sources": ["../../../../../../../../front_end/ui/legacy/components/inline_editor/CSSAngleUtils.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../../../core/platform/platform.js';\nimport * as UI from '../../legacy.js';\n\nexport const CSSAngleRegex = /(?<value>[+-]?\\d*\\.?\\d+)(?<unit>deg|grad|rad|turn)/;\n\nexport const enum AngleUnit {\n  Deg = 'deg',\n  Grad = 'grad',\n  Rad = 'rad',\n  Turn = 'turn',\n}\n\nexport interface Angle {\n  value: number;\n  unit: AngleUnit;\n}\n\nexport const parseText = (text: string): Angle|null => {\n  const result = text.match(CSSAngleRegex);\n  if (!result || !result.groups) {\n    return null;\n  }\n\n  return {\n    value: Number(result.groups.value),\n    unit: result.groups.unit as AngleUnit,\n  };\n};\n\nexport const getAngleFromRadians = (rad: number, targetUnit: AngleUnit): Angle => {\n  let value = rad;\n  switch (targetUnit) {\n    case AngleUnit.Grad:\n      value = UI.Geometry.radiansToGradians(rad);\n      break;\n    case AngleUnit.Deg:\n      value = UI.Geometry.radiansToDegrees(rad);\n      break;\n    case AngleUnit.Turn:\n      value = UI.Geometry.radiansToTurns(rad);\n      break;\n  }\n\n  return {\n    value,\n    unit: targetUnit,\n  };\n};\n\nexport const getRadiansFromAngle = (angle: Angle): number => {\n  switch (angle.unit) {\n    case AngleUnit.Deg:\n      return UI.Geometry.degreesToRadians(angle.value);\n    case AngleUnit.Grad:\n      return UI.Geometry.gradiansToRadians(angle.value);\n    case AngleUnit.Turn:\n      return UI.Geometry.turnsToRadians(angle.value);\n  }\n\n  return angle.value;\n};\n\nexport const get2DTranslationsForAngle = (angle: Angle, radius: number): {translateX: number, translateY: number} => {\n  const radian = getRadiansFromAngle(angle);\n  return {\n    translateX: Math.sin(radian) * radius,\n    translateY: -Math.cos(radian) * radius,\n  };\n};\n\nexport const roundAngleByUnit = (angle: Angle): Angle => {\n  let roundedValue = angle.value;\n\n  switch (angle.unit) {\n    case AngleUnit.Deg:\n    case AngleUnit.Grad:\n      // Round to nearest whole unit.\n      roundedValue = Math.round(angle.value);\n      break;\n    case AngleUnit.Rad:\n      // Allow up to 4 decimals.\n      roundedValue = Math.round(angle.value * 10000) / 10000;\n      break;\n    case AngleUnit.Turn:\n      // Allow up to 2 decimals.\n      roundedValue = Math.round(angle.value * 100) / 100;\n      break;\n    default:\n      Platform.assertNever(angle.unit, `Unknown angle unit: ${angle.unit}`);\n  }\n\n  return {\n    value: roundedValue,\n    unit: angle.unit,\n  };\n};\n\nexport const getNextUnit = (currentUnit: AngleUnit): AngleUnit => {\n  switch (currentUnit) {\n    case AngleUnit.Deg:\n      return AngleUnit.Grad;\n    case AngleUnit.Grad:\n      return AngleUnit.Rad;\n    case AngleUnit.Rad:\n      return AngleUnit.Turn;\n    default:\n      return AngleUnit.Deg;\n  }\n};\n\nexport const convertAngleUnit = (angle: Angle, newUnit: AngleUnit): Angle => {\n  if (angle.unit === newUnit) {\n    return angle;\n  }\n  const radian = getRadiansFromAngle(angle);\n  return getAngleFromRadians(radian, newUnit);\n};\n\nexport const getNewAngleFromEvent = (angle: Angle, event: MouseEvent|KeyboardEvent): Angle|undefined => {\n  const direction = UI.UIUtils.getValueModificationDirection(event);\n  if (direction === null) {\n    return;\n  }\n  let diff = direction === 'Up' ? Math.PI / 180 : -Math.PI / 180;\n  if (event.shiftKey) {\n    diff *= 10;\n  }\n\n  const radian = getRadiansFromAngle(angle);\n  return getAngleFromRadians(radian + diff, angle.unit);\n};\n"],
  "mappings": "AAIA;AACA;AAEO,aAAM,gBAAgB;AAEtB,WAAW,YAAX,kBAAW,eAAX;AACL,sBAAM;AACN,uBAAO;AACP,sBAAM;AACN,uBAAO;AAJS;AAAA;AAYX,aAAM,YAAY,CAAC,SAA6B;AACrD,QAAM,SAAS,KAAK,MAAM;AAC1B,MAAI,CAAC,UAAU,CAAC,OAAO,QAAQ;AAC7B,WAAO;AAAA;AAGT,SAAO;AAAA,IACL,OAAO,OAAO,OAAO,OAAO;AAAA,IAC5B,MAAM,OAAO,OAAO;AAAA;AAAA;AAIjB,aAAM,sBAAsB,CAAC,KAAa,eAAiC;AAChF,MAAI,QAAQ;AACZ,UAAQ;AAAA,SACD;AACH,cAAQ,GAAG,SAAS,kBAAkB;AACtC;AAAA,SACG;AACH,cAAQ,GAAG,SAAS,iBAAiB;AACrC;AAAA,SACG;AACH,cAAQ,GAAG,SAAS,eAAe;AACnC;AAAA;AAGJ,SAAO;AAAA,IACL;AAAA,IACA,MAAM;AAAA;AAAA;AAIH,aAAM,sBAAsB,CAAC,UAAyB;AAC3D,UAAQ,MAAM;AAAA,SACP;AACH,aAAO,GAAG,SAAS,iBAAiB,MAAM;AAAA,SACvC;AACH,aAAO,GAAG,SAAS,kBAAkB,MAAM;AAAA,SACxC;AACH,aAAO,GAAG,SAAS,eAAe,MAAM;AAAA;AAG5C,SAAO,MAAM;AAAA;AAGR,aAAM,4BAA4B,CAAC,OAAc,WAA6D;AACnH,QAAM,SAAS,oBAAoB;AACnC,SAAO;AAAA,IACL,YAAY,KAAK,IAAI,UAAU;AAAA,IAC/B,YAAY,CAAC,KAAK,IAAI,UAAU;AAAA;AAAA;AAI7B,aAAM,mBAAmB,CAAC,UAAwB;AACvD,MAAI,eAAe,MAAM;AAEzB,UAAQ,MAAM;AAAA,SACP;AAAA,SACA;AAEH,qBAAe,KAAK,MAAM,MAAM;AAChC;AAAA,SACG;AAEH,qBAAe,KAAK,MAAM,MAAM,QAAQ,OAAS;AACjD;AAAA,SACG;AAEH,qBAAe,KAAK,MAAM,MAAM,QAAQ,OAAO;AAC/C;AAAA;AAEA,eAAS,YAAY,MAAM,MAAM,uBAAuB,MAAM;AAAA;AAGlE,SAAO;AAAA,IACL,OAAO;AAAA,IACP,MAAM,MAAM;AAAA;AAAA;AAIT,aAAM,cAAc,CAAC,gBAAsC;AAChE,UAAQ;AAAA,SACD;AACH,aAAO;AAAA,SACJ;AACH,aAAO;AAAA,SACJ;AACH,aAAO;AAAA;AAEP,aAAO;AAAA;AAAA;AAIN,aAAM,mBAAmB,CAAC,OAAc,YAA8B;AAC3E,MAAI,MAAM,SAAS,SAAS;AAC1B,WAAO;AAAA;AAET,QAAM,SAAS,oBAAoB;AACnC,SAAO,oBAAoB,QAAQ;AAAA;AAG9B,aAAM,uBAAuB,CAAC,OAAc,UAAqD;AACtG,QAAM,YAAY,GAAG,QAAQ,8BAA8B;AAC3D,MAAI,cAAc,MAAM;AACtB;AAAA;AAEF,MAAI,OAAO,cAAc,OAAO,KAAK,KAAK,MAAM,CAAC,KAAK,KAAK;AAC3D,MAAI,MAAM,UAAU;AAClB,YAAQ;AAAA;AAGV,QAAM,SAAS,oBAAoB;AACnC,SAAO,oBAAoB,SAAS,MAAM,MAAM;AAAA;",
  "names": []
}
