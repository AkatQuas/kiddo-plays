{
  "version": 3,
  "sources": ["../../../../../../../../front_end/ui/legacy/components/inline_editor/CSSLengthUtils.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nexport const enum LengthUnit {\n  // absolute units\n  PIXEL = 'px',\n  CENTIMETER = 'cm',\n  MILLIMETER = 'mm',\n  INCH = 'in',\n  PICA = 'pc',\n  POINT = 'pt',\n\n  // relative units\n  CH = 'ch',\n  EM = 'em',\n  REM = 'rem',\n  VH = 'vh',\n  VW = 'vw',\n  VMIN = 'vmin',\n  VMAX = 'vmax',\n}\n\nexport const LENGTH_UNITS = [\n  LengthUnit.PIXEL,\n  LengthUnit.CENTIMETER,\n  LengthUnit.MILLIMETER,\n  LengthUnit.INCH,\n  LengthUnit.PICA,\n  LengthUnit.POINT,\n  LengthUnit.CH,\n  LengthUnit.EM,\n  LengthUnit.REM,\n  LengthUnit.VH,\n  LengthUnit.VW,\n  LengthUnit.VMIN,\n  LengthUnit.VMAX,\n] as const;\n\nexport const CSSLengthRegex = new RegExp(`(?<value>[+-]?\\\\d*\\\\.?\\\\d+)(?<unit>${LENGTH_UNITS.join('|')})`);\n\nexport interface Length {\n  value: number;\n  unit: LengthUnit;\n}\n\nexport const parseText = (text: string): Length|null => {\n  const result = text.match(CSSLengthRegex);\n  if (!result || !result.groups) {\n    return null;\n  }\n\n  return {\n    value: Number(result.groups.value),\n    unit: result.groups.unit as LengthUnit,\n  };\n};\n"],
  "mappings": "AAIO,WAAW,aAAX,kBAAW,gBAAX;AAEL,yBAAQ;AACR,8BAAa;AACb,8BAAa;AACb,wBAAO;AACP,wBAAO;AACP,yBAAQ;AAGR,sBAAK;AACL,sBAAK;AACL,uBAAM;AACN,sBAAK;AACL,sBAAK;AACL,wBAAO;AACP,wBAAO;AAhBS;AAAA;AAmBX,aAAM,eAAe;AAAA,EAC1B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAGK,aAAM,iBAAiB,IAAI,OAAO,sCAAsC,aAAa,KAAK;AAO1F,aAAM,YAAY,CAAC,SAA8B;AACtD,QAAM,SAAS,KAAK,MAAM;AAC1B,MAAI,CAAC,UAAU,CAAC,OAAO,QAAQ;AAC7B,WAAO;AAAA;AAGT,SAAO;AAAA,IACL,OAAO,OAAO,OAAO,OAAO;AAAA,IAC5B,MAAM,OAAO,OAAO;AAAA;AAAA;",
  "names": []
}
