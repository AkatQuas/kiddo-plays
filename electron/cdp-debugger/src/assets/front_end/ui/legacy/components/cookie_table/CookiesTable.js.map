{
  "version": 3,
  "sources": ["../../../../../../../../front_end/ui/legacy/components/cookie_table/CookiesTable.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2009 Apple Inc.  All rights reserved.\n * Copyright (C) 2009 Joseph Pecoraro\n * Copyright (C) 2010 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as Platform from '../../../../core/platform/platform.js';\nimport * as Root from '../../../../core/root/root.js';\nimport * as SDK from '../../../../core/sdk/sdk.js';\nimport * as Protocol from '../../../../generated/protocol.js';\nimport * as IssuesManager from '../../../../models/issues_manager/issues_manager.js';\nimport * as NetworkForward from '../../../../panels/network/forward/forward.js';\nimport * as UI from '../../legacy.js';\nimport * as DataGrid from '../data_grid/data_grid.js';\n\nimport cookiesTableStyles from './cookiesTable.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Cookie table cookies table expires session value in Cookies Table of the Cookies table in the Application panel\n  */\n  session: 'Session',\n  /**\n  *@description Text for the name of something\n  */\n  name: 'Name',\n  /**\n  *@description Text for the value of something\n  */\n  value: 'Value',\n  /**\n  *@description Text for the size of something\n  */\n  size: 'Size',\n  /**\n  *@description Data grid name for Editable Cookies data grid\n  */\n  editableCookies: 'Editable Cookies',\n  /**\n  *@description Text for web cookies\n  */\n  cookies: 'Cookies',\n  /**\n  *@description Text for something not available\n  */\n  na: 'N/A',\n  /**\n  *@description Text for Context Menu entry\n  */\n  showRequestsWithThisCookie: 'Show Requests With This Cookie',\n  /**\n  *@description Text for Context Menu entry\n  */\n  showIssueAssociatedWithThis: 'Show issue associated with this cookie',\n  /**\n  *@description Tooltip for the cell that shows the sourcePort property of a cookie in the cookie table. The source port is numberic attribute of a cookie.\n  */\n  sourcePortTooltip:\n      'Shows the source port (range 1-65535) the cookie was set on. If the port is unknown, this shows -1.',\n  /**\n  *@description Tooltip for the cell that shows the sourceScheme property of a cookie in the cookie table. The source scheme is a trinary attribute of a cookie.\n  */\n  sourceSchemeTooltip:\n      'Shows the source scheme (`Secure`, `NonSecure`) the cookie was set on. If the scheme is unknown, this shows `Unset`.',\n  /**\n   * @description Text for the date column displayed if the expiration time of the cookie is extremely far out in the future.\n   * @example {+275760-09-13T00:00:00.000Z} date\n   */\n  timeAfter: 'after {date}',\n  /**\n   * @description Tooltip for the date column displayed if the expiration time of the cookie is extremely far out in the future.\n   * @example {+275760-09-13T00:00:00.000Z} date\n   * @example {9001628746521180} seconds\n   */\n  timeAfterTooltip: 'The expiration timestamp is {seconds}, which corresponds to a date after {date}',\n  /**\n   * @description Text to be show in the Partition Key column in case it is an opaque origin.\n   */\n  opaquePartitionKey: '(opaque)',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/components/cookie_table/CookiesTable.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nconst expiresSessionValue = i18nLazyString(UIStrings.session);\n\nexport class CookiesTable extends UI.Widget.VBox {\n  private saveCallback?: ((arg0: SDK.Cookie.Cookie, arg1: SDK.Cookie.Cookie|null) => Promise<boolean>);\n  private readonly refreshCallback?: (() => void)|undefined;\n  private readonly deleteCallback?: ((arg0: SDK.Cookie.Cookie, arg1: () => void) => void);\n  private dataGrid: DataGrid.DataGrid.DataGridImpl<DataGridNode>;\n  private lastEditedColumnId: string|null;\n  private data: {folderName: string|null, cookies: Array<SDK.Cookie.Cookie>|null}[];\n  private cookieDomain: string;\n  private cookieToBlockedReasons: ReadonlyMap<SDK.Cookie.Cookie, SDK.CookieModel.BlockedReason[]>|null;\n  constructor(\n      renderInline?: boolean,\n      saveCallback?: ((arg0: SDK.Cookie.Cookie, arg1: SDK.Cookie.Cookie|null) => Promise<boolean>),\n      refreshCallback?: (() => void), selectedCallback?: (() => void),\n      deleteCallback?: ((arg0: SDK.Cookie.Cookie, arg1: () => void) => void)) {\n    super();\n\n    this.element.classList.add('cookies-table');\n\n    this.saveCallback = saveCallback;\n    this.refreshCallback = refreshCallback;\n    this.deleteCallback = deleteCallback;\n\n    const editable = Boolean(saveCallback);\n\n    const columns = [\n      {\n        id: SDK.Cookie.Attributes.Name,\n        title: i18nString(UIStrings.name),\n        sortable: true,\n        disclosure: editable,\n        sort: DataGrid.DataGrid.Order.Ascending,\n        longText: true,\n        weight: 24,\n        editable: editable,\n      },\n      {\n        id: SDK.Cookie.Attributes.Value,\n        title: i18nString(UIStrings.value),\n        sortable: true,\n        longText: true,\n        weight: 34,\n        editable: editable,\n      },\n      {\n        id: SDK.Cookie.Attributes.Domain,\n        title: 'Domain',\n        sortable: true,\n        weight: 7,\n        editable: editable,\n      },\n      {\n        id: SDK.Cookie.Attributes.Path,\n        title: 'Path',\n        sortable: true,\n        weight: 7,\n        editable: editable,\n      },\n      {\n        id: SDK.Cookie.Attributes.Expires,\n        title: 'Expires / Max-Age',\n        sortable: true,\n        weight: 7,\n        editable: editable,\n      },\n      {\n        id: SDK.Cookie.Attributes.Size,\n        title: i18nString(UIStrings.size),\n        sortable: true,\n        align: DataGrid.DataGrid.Align.Right,\n        weight: 7,\n      },\n      {\n        id: SDK.Cookie.Attributes.HttpOnly,\n        title: 'HttpOnly',\n        sortable: true,\n        align: DataGrid.DataGrid.Align.Center,\n        weight: 7,\n        dataType: DataGrid.DataGrid.DataType.Boolean,\n        editable,\n      },\n      {\n        id: SDK.Cookie.Attributes.Secure,\n        title: 'Secure',\n        sortable: true,\n        align: DataGrid.DataGrid.Align.Center,\n        weight: 7,\n        dataType: DataGrid.DataGrid.DataType.Boolean,\n        editable,\n      },\n      {\n        id: SDK.Cookie.Attributes.SameSite,\n        title: 'SameSite',\n        sortable: true,\n        weight: 7,\n        editable: editable,\n      },\n      {\n        id: SDK.Cookie.Attributes.SameParty,\n        title: 'SameParty',\n        sortable: true,\n        align: DataGrid.DataGrid.Align.Center,\n        weight: 7,\n        dataType: DataGrid.DataGrid.DataType.Boolean,\n        editable: editable,\n      },\n      {\n        id: SDK.Cookie.Attributes.PartitionKey,\n        title: 'Partition Key',\n        sortable: true,\n        weight: 7,\n        editable: editable,\n      },\n      {\n        id: SDK.Cookie.Attributes.Priority,\n        title: 'Priority',\n        sortable: true,\n        sort: DataGrid.DataGrid.Order.Descending,\n        weight: 7,\n        editable: editable,\n      },\n    ] as DataGrid.DataGrid.ColumnDescriptor[];\n\n    if (Root.Runtime.experiments.isEnabled('experimentalCookieFeatures')) {\n      const additionalColumns = [\n        {\n          id: SDK.Cookie.Attributes.SourceScheme,\n          title: 'SourceScheme',\n          sortable: true,\n          align: DataGrid.DataGrid.Align.Center,\n          weight: 7,\n          editable: editable,\n        },\n        {\n          id: SDK.Cookie.Attributes.SourcePort,\n          title: 'SourcePort',\n          sortable: true,\n          align: DataGrid.DataGrid.Align.Center,\n          weight: 7,\n          editable: editable,\n        },\n      ] as DataGrid.DataGrid.ColumnDescriptor[];\n      columns.push(...additionalColumns);\n    }\n\n    if (editable) {\n      this.dataGrid = new DataGrid.DataGrid.DataGridImpl({\n        displayName: i18nString(UIStrings.editableCookies),\n        columns,\n        editCallback: this.onUpdateCookie.bind(this),\n        deleteCallback: this.onDeleteCookie.bind(this),\n        refreshCallback,\n      });\n    } else {\n      this.dataGrid = new DataGrid.DataGrid.DataGridImpl({\n        displayName: i18nString(UIStrings.cookies),\n        columns,\n        editCallback: undefined,\n        deleteCallback: undefined,\n        refreshCallback: undefined,\n      });\n    }\n    this.dataGrid.setStriped(true);\n    this.dataGrid.setName('cookiesTable');\n    this.dataGrid.addEventListener(DataGrid.DataGrid.Events.SortingChanged, this.rebuildTable, this);\n    this.dataGrid.setRowContextMenuCallback(this.populateContextMenu.bind(this));\n    if (renderInline) {\n      this.dataGrid.renderInline();\n    }\n\n    if (selectedCallback) {\n      this.dataGrid.addEventListener(DataGrid.DataGrid.Events.SelectedNode, selectedCallback, this);\n    }\n\n    this.lastEditedColumnId = null;\n\n    this.dataGrid.asWidget().show(this.element);\n\n    this.data = [];\n\n    this.cookieDomain = '';\n\n    this.cookieToBlockedReasons = null;\n  }\n\n  wasShown(): void {\n    this.registerCSSFiles([cookiesTableStyles]);\n  }\n\n  setCookies(\n      cookies: SDK.Cookie.Cookie[],\n      cookieToBlockedReasons?: ReadonlyMap<SDK.Cookie.Cookie, SDK.CookieModel.BlockedReason[]>): void {\n    this.setCookieFolders([{cookies: cookies, folderName: null}], cookieToBlockedReasons);\n  }\n\n  setCookieFolders(\n      cookieFolders: {folderName: string|null, cookies: Array<SDK.Cookie.Cookie>|null}[],\n      cookieToBlockedReasons?: ReadonlyMap<SDK.Cookie.Cookie, SDK.CookieModel.BlockedReason[]>): void {\n    this.data = cookieFolders;\n    this.cookieToBlockedReasons = cookieToBlockedReasons || null;\n    this.rebuildTable();\n  }\n\n  setCookieDomain(cookieDomain: string): void {\n    this.cookieDomain = cookieDomain;\n  }\n\n  selectedCookie(): SDK.Cookie.Cookie|null {\n    const node = this.dataGrid.selectedNode as DataGridNode | null;\n    return node ? node.cookie : null;\n  }\n\n  private getSelectionCookies(): {current: SDK.Cookie.Cookie|null, neighbor: SDK.Cookie.Cookie|null} {\n    const node = this.dataGrid.selectedNode as DataGridNode | null;\n    const nextNeighbor = node && node.traverseNextNode(true) as DataGridNode | null;\n    const previousNeighbor = node && node.traversePreviousNode(true) as DataGridNode | null;\n\n    return {\n      current: node && node.cookie,\n      neighbor: (nextNeighbor && nextNeighbor.cookie) || (previousNeighbor && previousNeighbor.cookie),\n    };\n  }\n\n  willHide(): void {\n    this.lastEditedColumnId = null;\n  }\n\n  private findSelectedCookie(\n      selectionCookies: {current: SDK.Cookie.Cookie|null, neighbor: SDK.Cookie.Cookie|null},\n      cookies: SDK.Cookie.Cookie[]|null): SDK.Cookie.Cookie|null {\n    if (!cookies) {\n      return null;\n    }\n\n    const current = selectionCookies.current;\n    const foundCurrent = cookies.find(cookie => this.isSameCookie(cookie, current));\n    if (foundCurrent) {\n      return foundCurrent;\n    }\n\n    const neighbor = selectionCookies.neighbor;\n    const foundNeighbor = cookies.find(cookie => this.isSameCookie(cookie, neighbor));\n    if (foundNeighbor) {\n      return foundNeighbor;\n    }\n\n    return null;\n  }\n\n  private isSameCookie(cookieA: SDK.Cookie.Cookie, cookieB: SDK.Cookie.Cookie|null|undefined): boolean {\n    return cookieB !== null && cookieB !== undefined && cookieB.name() === cookieA.name() &&\n        cookieB.domain() === cookieA.domain() && cookieB.path() === cookieA.path();\n  }\n\n  private rebuildTable(): void {\n    const selectionCookies = this.getSelectionCookies();\n    const lastEditedColumnId = this.lastEditedColumnId;\n    this.lastEditedColumnId = null;\n    this.dataGrid.rootNode().removeChildren();\n    for (let i = 0; i < this.data.length; ++i) {\n      const item = this.data[i];\n      const selectedCookie = this.findSelectedCookie(selectionCookies, item.cookies);\n      if (item.folderName) {\n        const groupData = {} as {\n          [x: string]: string | number,\n        };\n        groupData[SDK.Cookie.Attributes.Name] = item.folderName;\n        groupData[SDK.Cookie.Attributes.Value] = '';\n        groupData[SDK.Cookie.Attributes.Size] = this.totalSize(item.cookies);\n        groupData[SDK.Cookie.Attributes.Domain] = '';\n        groupData[SDK.Cookie.Attributes.Path] = '';\n        groupData[SDK.Cookie.Attributes.Expires] = '';\n        groupData[SDK.Cookie.Attributes.HttpOnly] = '';\n        groupData[SDK.Cookie.Attributes.Secure] = '';\n        groupData[SDK.Cookie.Attributes.SameSite] = '';\n        groupData[SDK.Cookie.Attributes.SameParty] = '';\n        groupData[SDK.Cookie.Attributes.SourcePort] = '';\n        groupData[SDK.Cookie.Attributes.SourceScheme] = '';\n        groupData[SDK.Cookie.Attributes.Priority] = '';\n\n        const groupNode = new DataGrid.DataGrid.DataGridNode(groupData) as DataGrid.DataGrid.DataGridNode<DataGridNode>;\n        groupNode.selectable = true;\n        this.dataGrid.rootNode().appendChild(groupNode);\n        groupNode.element().classList.add('row-group');\n        this.populateNode(groupNode, item.cookies, selectedCookie, lastEditedColumnId);\n        groupNode.expand();\n      } else {\n        this.populateNode(this.dataGrid.rootNode(), item.cookies, selectedCookie, lastEditedColumnId);\n      }\n    }\n    if (selectionCookies.current && lastEditedColumnId && !this.dataGrid.selectedNode) {\n      this.addInactiveNode(this.dataGrid.rootNode(), selectionCookies.current, lastEditedColumnId);\n    }\n    if (this.saveCallback) {\n      this.dataGrid.addCreationNode(false);\n    }\n  }\n\n  private populateNode(\n      parentNode: DataGrid.DataGrid.DataGridNode<DataGridNode>, cookies: SDK.Cookie.Cookie[]|null,\n      selectedCookie: SDK.Cookie.Cookie|null, lastEditedColumnId: string|null): void {\n    parentNode.removeChildren();\n    if (!cookies) {\n      return;\n    }\n\n    this.sortCookies(cookies);\n    for (let i = 0; i < cookies.length; ++i) {\n      const cookie = cookies[i];\n      const cookieNode = this.createGridNode(cookie);\n      parentNode.appendChild(cookieNode);\n      if (this.isSameCookie(cookie, selectedCookie)) {\n        cookieNode.select();\n        if (lastEditedColumnId !== null) {\n          this.dataGrid.startEditingNextEditableColumnOfDataGridNode(cookieNode, lastEditedColumnId);\n        }\n      }\n    }\n  }\n\n  private addInactiveNode(\n      parentNode: DataGrid.DataGrid.DataGridNode<DataGridNode>, cookie: SDK.Cookie.Cookie,\n      editedColumnId: string|null): void {\n    const cookieNode = this.createGridNode(cookie);\n    parentNode.appendChild(cookieNode);\n    cookieNode.select();\n    cookieNode.setInactive(true);\n    if (editedColumnId !== null) {\n      this.dataGrid.startEditingNextEditableColumnOfDataGridNode(cookieNode, editedColumnId);\n    }\n  }\n  private totalSize(cookies: SDK.Cookie.Cookie[]|null): number {\n    let totalSize = 0;\n    for (let i = 0; cookies && i < cookies.length; ++i) {\n      totalSize += cookies[i].size();\n    }\n    return totalSize;\n  }\n\n  private sortCookies(cookies: SDK.Cookie.Cookie[]): void {\n    const sortDirection = this.dataGrid.isSortOrderAscending() ? 1 : -1;\n\n    function getValue(cookie: SDK.Cookie.Cookie, property: string): string {\n      switch (property) {\n        case SDK.Cookie.Attributes.Name:\n          return String(cookie.name());\n        case SDK.Cookie.Attributes.Value:\n          return String(cookie.value());\n        case SDK.Cookie.Attributes.Domain:\n          return String(cookie.domain());\n        case SDK.Cookie.Attributes.Path:\n          return String(cookie.path());\n        case SDK.Cookie.Attributes.HttpOnly:\n          return String(cookie.httpOnly());\n        case SDK.Cookie.Attributes.Secure:\n          return String(cookie.secure());\n        case SDK.Cookie.Attributes.SameSite:\n          return String(cookie.sameSite());\n        case SDK.Cookie.Attributes.SameParty:\n          return String(cookie.sameParty());\n        case SDK.Cookie.Attributes.PartitionKey:\n          return cookie.partitionKeyOpaque() ? i18nString(UIStrings.opaquePartitionKey) : String(cookie.partitionKey());\n        case SDK.Cookie.Attributes.SourceScheme:\n          return String(cookie.sourceScheme());\n        default:\n          return String(cookie.name());\n      }\n    }\n\n    function compareTo(property: string, cookie1: SDK.Cookie.Cookie, cookie2: SDK.Cookie.Cookie): number {\n      return sortDirection * Platform.StringUtilities.compare(getValue(cookie1, property), getValue(cookie2, property));\n    }\n\n    function numberCompare(\n        p: (cookie: SDK.Cookie.Cookie) => number, cookie1: SDK.Cookie.Cookie, cookie2: SDK.Cookie.Cookie): number {\n      return sortDirection * (p(cookie1) - p(cookie2));\n    }\n\n    function priorityCompare(cookie1: SDK.Cookie.Cookie, cookie2: SDK.Cookie.Cookie): number {\n      const priorities = [\n        Protocol.Network.CookiePriority.Low,\n        Protocol.Network.CookiePriority.Medium,\n        Protocol.Network.CookiePriority.High,\n      ];\n\n      const priority1 = priorities.indexOf(cookie1.priority());\n      const priority2 = priorities.indexOf(cookie2.priority());\n      return sortDirection * (priority1 - priority2);\n    }\n\n    function expiresCompare(cookie1: SDK.Cookie.Cookie, cookie2: SDK.Cookie.Cookie): number {\n      if (cookie1.session() !== cookie2.session()) {\n        return sortDirection * (cookie1.session() ? 1 : -1);\n      }\n\n      if (cookie1.session()) {\n        return 0;\n      }\n\n      if (cookie1.maxAge() && cookie2.maxAge()) {\n        return sortDirection * (cookie1.maxAge() - cookie2.maxAge());\n      }\n      if (cookie1.expires() && cookie2.expires()) {\n        return sortDirection * (cookie1.expires() - cookie2.expires());\n      }\n      return sortDirection * (cookie1.expires() ? 1 : -1);\n    }\n\n    let comparator;\n    const columnId = this.dataGrid.sortColumnId() || SDK.Cookie.Attributes.Name;\n    if (columnId === SDK.Cookie.Attributes.Expires) {\n      comparator = expiresCompare;\n    } else if (columnId === SDK.Cookie.Attributes.Size) {\n      comparator = numberCompare.bind(null, c => c.size());\n    } else if (columnId === SDK.Cookie.Attributes.SourcePort) {\n      comparator = numberCompare.bind(null, c => c.sourcePort());\n    } else if (columnId === SDK.Cookie.Attributes.Priority) {\n      comparator = priorityCompare;\n    } else {\n      comparator = compareTo.bind(null, columnId);\n    }\n    cookies.sort(comparator);\n  }\n\n  private createGridNode(cookie: SDK.Cookie.Cookie): DataGridNode {\n    const data = {} as {\n      [x: string]: string | number | boolean,\n    };\n    data[SDK.Cookie.Attributes.Name] = cookie.name();\n    data[SDK.Cookie.Attributes.Value] = cookie.value();\n\n    if (cookie.type() === SDK.Cookie.Type.Request) {\n      data[SDK.Cookie.Attributes.Domain] = cookie.domain() ? cookie.domain() : i18nString(UIStrings.na);\n      data[SDK.Cookie.Attributes.Path] = cookie.path() ? cookie.path() : i18nString(UIStrings.na);\n    } else {\n      data[SDK.Cookie.Attributes.Domain] = cookie.domain() || '';\n      data[SDK.Cookie.Attributes.Path] = cookie.path() || '';\n    }\n\n    let expiresTooltip = undefined;\n    if (cookie.maxAge()) {\n      data[SDK.Cookie.Attributes.Expires] = i18n.TimeUtilities.secondsToString(Math.floor(cookie.maxAge()));\n    } else if (cookie.expires()) {\n      const expires = cookie.expires();\n      if (expires < 0) {\n        data[SDK.Cookie.Attributes.Expires] = expiresSessionValue();\n      } else {\n        // See https://tc39.es/ecma262/#sec-time-values-and-time-range\n        const maxTimestamp: number = 8640000000000000;\n        if (expires > maxTimestamp) {\n          const date = new Date(maxTimestamp).toISOString();\n          data[SDK.Cookie.Attributes.Expires] = i18nString(UIStrings.timeAfter, {date});\n          expiresTooltip = i18nString(UIStrings.timeAfterTooltip, {seconds: expires, date});\n        } else {\n          data[SDK.Cookie.Attributes.Expires] = new Date(expires).toISOString();\n        }\n      }\n    } else {\n      data[SDK.Cookie.Attributes.Expires] =\n          cookie.type() === SDK.Cookie.Type.Request ? i18nString(UIStrings.na) : expiresSessionValue();\n    }\n\n    data[SDK.Cookie.Attributes.Size] = cookie.size();\n    data[SDK.Cookie.Attributes.HttpOnly] = cookie.httpOnly();\n    data[SDK.Cookie.Attributes.Secure] = cookie.secure();\n    data[SDK.Cookie.Attributes.SameSite] = cookie.sameSite() || '';\n    data[SDK.Cookie.Attributes.SameParty] = cookie.sameParty();\n    data[SDK.Cookie.Attributes.SourcePort] = cookie.sourcePort();\n    data[SDK.Cookie.Attributes.SourceScheme] = cookie.sourceScheme();\n    data[SDK.Cookie.Attributes.Priority] = cookie.priority() || '';\n    data[SDK.Cookie.Attributes.PartitionKey] = cookie.partitionKey() || '';\n\n    const blockedReasons = this.cookieToBlockedReasons?.get(cookie);\n    const node = new DataGridNode(data, cookie, blockedReasons || null);\n    if (expiresTooltip) {\n      node.setExpiresTooltip(expiresTooltip);\n    }\n    node.selectable = true;\n    return node;\n  }\n\n  private onDeleteCookie(node: DataGridNode): void {\n    if (node.cookie && this.deleteCallback) {\n      this.deleteCallback(node.cookie, () => this.refresh());\n    }\n  }\n\n  private onUpdateCookie(editingNode: DataGridNode, columnIdentifier: string, _oldText: string, _newText: string):\n      void {\n    this.lastEditedColumnId = columnIdentifier;\n    this.setDefaults(editingNode);\n    if (this.isValidCookieData(editingNode.data)) {\n      this.saveNode(editingNode);\n    } else {\n      editingNode.setDirty(true);\n    }\n  }\n\n  private setDefaults(node: DataGridNode): void {\n    if (node.data[SDK.Cookie.Attributes.Name] === null) {\n      node.data[SDK.Cookie.Attributes.Name] = '';\n    }\n    if (node.data[SDK.Cookie.Attributes.Value] === null) {\n      node.data[SDK.Cookie.Attributes.Value] = '';\n    }\n    if (node.data[SDK.Cookie.Attributes.Domain] === null) {\n      node.data[SDK.Cookie.Attributes.Domain] = this.cookieDomain;\n    }\n    if (node.data[SDK.Cookie.Attributes.Path] === null) {\n      node.data[SDK.Cookie.Attributes.Path] = '/';\n    }\n    if (node.data[SDK.Cookie.Attributes.Expires] === null) {\n      node.data[SDK.Cookie.Attributes.Expires] = expiresSessionValue();\n    }\n    if (node.data[SDK.Cookie.Attributes.PartitionKey] === null) {\n      node.data[SDK.Cookie.Attributes.PartitionKey] = '';\n    }\n  }\n\n  private saveNode(node: DataGridNode): void {\n    const oldCookie = node.cookie;\n    const newCookie = this.createCookieFromData(node.data);\n    node.cookie = newCookie;\n    if (!this.saveCallback) {\n      return;\n    }\n    void this.saveCallback(newCookie, oldCookie).then(success => {\n      if (success) {\n        this.refresh();\n      } else {\n        node.setDirty(true);\n      }\n    });\n  }\n\n  private createCookieFromData(data: {[x: string]: string}): SDK.Cookie.Cookie {\n    const cookie = new SDK.Cookie.Cookie(\n        data[SDK.Cookie.Attributes.Name], data[SDK.Cookie.Attributes.Value], null,\n        data[SDK.Cookie.Attributes.Priority] as Protocol.Network.CookiePriority);\n\n    cookie.addAttribute(SDK.Cookie.Attributes.Domain, data[SDK.Cookie.Attributes.Domain]);\n    cookie.addAttribute(SDK.Cookie.Attributes.Path, data[SDK.Cookie.Attributes.Path]);\n    if (data.expires && data.expires !== expiresSessionValue()) {\n      cookie.addAttribute(SDK.Cookie.Attributes.Expires, (new Date(data[SDK.Cookie.Attributes.Expires])).toUTCString());\n    }\n    if (data[SDK.Cookie.Attributes.HttpOnly]) {\n      cookie.addAttribute(SDK.Cookie.Attributes.HttpOnly);\n    }\n    if (data[SDK.Cookie.Attributes.Secure]) {\n      cookie.addAttribute(SDK.Cookie.Attributes.Secure);\n    }\n    if (data[SDK.Cookie.Attributes.SameSite]) {\n      cookie.addAttribute(SDK.Cookie.Attributes.SameSite, data[SDK.Cookie.Attributes.SameSite]);\n    }\n    if (data[SDK.Cookie.Attributes.SameParty]) {\n      cookie.addAttribute(SDK.Cookie.Attributes.SameParty);\n    }\n    if (SDK.Cookie.Attributes.SourceScheme in data) {\n      cookie.addAttribute(SDK.Cookie.Attributes.SourceScheme, data[SDK.Cookie.Attributes.SourceScheme]);\n    }\n    if (SDK.Cookie.Attributes.SourcePort in data) {\n      cookie.addAttribute(\n          SDK.Cookie.Attributes.SourcePort, Number.parseInt(data[SDK.Cookie.Attributes.SourcePort], 10) || undefined);\n    }\n    if (data[SDK.Cookie.Attributes.PartitionKey]) {\n      cookie.addAttribute(SDK.Cookie.Attributes.PartitionKey, data[SDK.Cookie.Attributes.PartitionKey]);\n    }\n    cookie.setSize(data[SDK.Cookie.Attributes.Name].length + data[SDK.Cookie.Attributes.Value].length);\n    return cookie;\n  }\n\n  private isValidCookieData(data: {[x: string]: string}): boolean {\n    return (Boolean(data.name) || Boolean(data.value)) && this.isValidDomain(data.domain) &&\n        this.isValidPath(data.path) && this.isValidDate(data.expires);\n  }\n\n  private isValidDomain(domain: string): boolean {\n    if (!domain) {\n      return true;\n    }\n    const parsedURL = Common.ParsedURL.ParsedURL.fromString('http://' + domain);\n    return parsedURL !== null && parsedURL.domain() === domain;\n  }\n\n  private isValidPath(path: string): boolean {\n    const parsedURL = Common.ParsedURL.ParsedURL.fromString('http://example.com' + path);\n    return parsedURL !== null && parsedURL.path === path;\n  }\n\n  private isValidDate(date: string): boolean {\n    return date === '' || date === expiresSessionValue() || !isNaN(Date.parse(date));\n  }\n\n  private refresh(): void {\n    if (this.refreshCallback) {\n      this.refreshCallback();\n    }\n  }\n\n  private populateContextMenu(\n      contextMenu: UI.ContextMenu.ContextMenu, gridNode: DataGrid.DataGrid.DataGridNode<DataGridNode>): void {\n    const maybeCookie = (gridNode as DataGridNode).cookie;\n    if (!maybeCookie) {\n      return;\n    }\n    const cookie = maybeCookie;\n\n    contextMenu.revealSection().appendItem(i18nString(UIStrings.showRequestsWithThisCookie), () => {\n      const requestFilter = NetworkForward.UIFilter.UIRequestFilter.filters([\n        {\n          filterType: NetworkForward.UIFilter.FilterType.CookieDomain,\n          filterValue: cookie.domain(),\n        },\n        {\n          filterType: NetworkForward.UIFilter.FilterType.CookieName,\n          filterValue: cookie.name(),\n        },\n      ]);\n      void Common.Revealer.reveal(requestFilter);\n    });\n    if (IssuesManager.RelatedIssue.hasIssues(cookie)) {\n      contextMenu.revealSection().appendItem(i18nString(UIStrings.showIssueAssociatedWithThis), () => {\n        // TODO(chromium:1077719): Just filter for the cookie instead of revealing one of the associated issues.\n        void IssuesManager.RelatedIssue.reveal(cookie);\n      });\n    }\n  }\n}\n\nexport class DataGridNode extends DataGrid.DataGrid.DataGridNode<DataGridNode> {\n  cookie: SDK.Cookie.Cookie;\n  private readonly blockedReasons: SDK.CookieModel.BlockedReason[]|null;\n  private expiresTooltip?: Platform.UIString.LocalizedString;\n\n  constructor(\n      data: {[x: string]: string|number|boolean}, cookie: SDK.Cookie.Cookie,\n      blockedReasons: SDK.CookieModel.BlockedReason[]|null) {\n    super(data);\n    this.cookie = cookie;\n    this.blockedReasons = blockedReasons;\n  }\n\n  createCells(element: Element): void {\n    super.createCells(element);\n    if (this.blockedReasons && this.blockedReasons.length) {\n      element.classList.add('flagged-cookie-attribute-row');\n    }\n  }\n\n  setExpiresTooltip(tooltip: Platform.UIString.LocalizedString): void {\n    this.expiresTooltip = tooltip;\n  }\n\n  createCell(columnId: string): HTMLElement {\n    const cell = super.createCell(columnId);\n    if (columnId === SDK.Cookie.Attributes.SourcePort) {\n      UI.Tooltip.Tooltip.install(cell, i18nString(UIStrings.sourcePortTooltip));\n    } else if (columnId === SDK.Cookie.Attributes.SourceScheme) {\n      UI.Tooltip.Tooltip.install(cell, i18nString(UIStrings.sourceSchemeTooltip));\n    } else if (columnId === SDK.Cookie.Attributes.Expires && this.expiresTooltip) {\n      UI.Tooltip.Tooltip.install(cell, this.expiresTooltip);\n    } else {\n      UI.Tooltip.Tooltip.install(cell, cell.textContent || '');\n    }\n\n    let blockedReasonString = '';\n    if (this.blockedReasons) {\n      for (const blockedReason of this.blockedReasons) {\n        const attributeMatches = blockedReason.attribute === columnId as string;\n        const useNameColumn = !blockedReason.attribute && columnId === SDK.Cookie.Attributes.Name;\n        if (attributeMatches || useNameColumn) {\n          if (blockedReasonString) {\n            blockedReasonString += '\\n';\n          }\n          blockedReasonString += blockedReason.uiString;\n        }\n      }\n    }\n\n    if (blockedReasonString) {\n      const infoElement = UI.Icon.Icon.create('smallicon-info', 'cookie-warning-icon');\n      UI.Tooltip.Tooltip.install(infoElement, blockedReasonString);\n      cell.insertBefore(infoElement, cell.firstChild);\n      cell.classList.add('flagged-cookie-attribute-cell');\n    }\n\n    return cell;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
