{
  "version": 3,
  "sources": ["../../../../../../../../front_end/ui/legacy/components/inline_editor/FontEditorUnitConverter.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../../../core/sdk/sdk.js';\nimport * as CssOverviewModule from '../../../../panels/css_overview/css_overview.js';\nimport * as UI from '../../legacy.js';\n\nconst computedArrayFontSizeIndex = 6;\n\nfunction getPxMultiplier(): number {\n  return 1;\n}\nasync function getEmMultiplier(isFontSizeProperty?: boolean): Promise<number> {\n  const selectedNode = UI.Context.Context.instance().flavor(SDK.DOMModel.DOMNode);\n  let currentFontSize;\n  if (selectedNode && selectedNode.parentNode && selectedNode.nodeName() !== 'HTML') {\n    const [model] =\n        SDK.TargetManager.TargetManager.instance().models(CssOverviewModule.CSSOverviewModel.CSSOverviewModel);\n    const fontSizeNodeId = isFontSizeProperty ? selectedNode.parentNode.id : selectedNode.id;\n    const computedFontSize = await model.getComputedStyleForNode(fontSizeNodeId).then(findFontSizeValue);\n    const computedFontSizeValue = computedFontSize.replace(/[a-z]/g, '');\n    currentFontSize = parseFloat(computedFontSizeValue);\n  } else {\n    currentFontSize = 16;\n  }\n  return currentFontSize;\n}\n\nasync function getRemMultiplier(): Promise<number> {\n  const selectedNode = UI.Context.Context.instance().flavor(SDK.DOMModel.DOMNode);\n  const htmlNode = findHtmlNode(selectedNode);\n  if (!htmlNode || !htmlNode.id) {\n    return 16;\n  }\n  const [model] =\n      SDK.TargetManager.TargetManager.instance().models(CssOverviewModule.CSSOverviewModel.CSSOverviewModel);\n  const computedRootFontSize = await model.getComputedStyleForNode(htmlNode.id).then(findFontSizeValue);\n  const rootFontSizeValue = computedRootFontSize.replace(/[a-z]/g, '');\n  const rootFontSize = parseFloat(rootFontSizeValue);\n  return rootFontSize;\n}\n\nasync function getPercentMultiplier(isFontSizeProperty?: boolean): Promise<number> {\n  const emMultiplier = await getEmMultiplier(isFontSizeProperty);\n  const percMultiplier = emMultiplier / 100;\n  return percMultiplier;\n}\n\nasync function getVhMultiplier(): Promise<number> {\n  const viewportObject = await getViewportObject();\n  if (!viewportObject) {\n    return 1;\n  }\n  const viewportHeight = viewportObject.height;\n  const vhMultiplier = viewportHeight / 100;\n  return vhMultiplier;\n}\n\nasync function getVwMultiplier(): Promise<number> {\n  const viewportObject = await getViewportObject();\n  if (!viewportObject) {\n    return 1;\n  }\n  const viewportWidth = viewportObject.width;\n  const vwMultiplier = viewportWidth / 100;\n  return vwMultiplier;\n}\n\nasync function getVminMultiplier(): Promise<number> {\n  const viewportObject = await getViewportObject();\n  if (!viewportObject) {\n    return 1;\n  }\n  const viewportWidth = viewportObject.width;\n  const viewportHeight = viewportObject.height;\n  const minViewportSize = Math.min(viewportWidth, viewportHeight);\n  const vminMultiplier = minViewportSize / 100;\n  return vminMultiplier;\n}\n\nasync function getVmaxMultiplier(): Promise<number> {\n  const viewportObject = await getViewportObject();\n  if (!viewportObject) {\n    return 1;\n  }\n  const viewportWidth = viewportObject.width;\n  const viewportHeight = viewportObject.height;\n  const maxViewportSize = Math.max(viewportWidth, viewportHeight);\n  const vmaxMultiplier = maxViewportSize / 100;\n  return vmaxMultiplier;\n}\n\nfunction getCmMultiplier(): number {\n  return 37.795;\n}\n\nfunction getMmMultiplier(): number {\n  return 3.7795;\n}\n\nfunction getInMultiplier(): number {\n  return 96;\n}\n\nfunction getPtMultiplier(): number {\n  return 4 / 3;\n}\n\nfunction getPcMultiplier(): number {\n  return 16;\n}\n\nfunction findFontSizeValue(computedObject: {\n  computedStyle: Array<{\n    name: string,\n    value: string,\n  }>,\n  getError: () => void,\n}): string {\n  const computedArray: {\n    name: string,\n    value: string,\n  }[] = computedObject.computedStyle;\n  let index = computedArrayFontSizeIndex;\n  if (computedArray[index].name && computedArray[index].name !== 'font-size') {\n    for (let i = 0; i < computedArray.length; i++) {\n      if (computedArray[i].name === 'font-size') {\n        index = i;\n        break;\n      }\n    }\n  }\n  return computedArray[index].value;\n}\n\nfunction findHtmlNode(selectedNode: SDK.DOMModel.DOMNode|null): SDK.DOMModel.DOMNode|null {\n  let node: SDK.DOMModel.DOMNode|(SDK.DOMModel.DOMNode | null) = selectedNode;\n  while (node && node.nodeName() !== 'HTML') {\n    if (node.parentNode) {\n      node = node.parentNode;\n    } else {\n      break;\n    }\n  }\n  return node;\n}\n\nconst widthEvaluateParams = {\n  expression: 'window.innerWidth',\n  objectGroup: undefined,\n  includeCommandLineAPI: false,\n  silent: true,\n  contextId: undefined,\n  returnByValue: false,\n  generatePreview: false,\n  userGesture: false,\n  awaitPromise: true,\n  throwOnSideEffect: false,\n  timeout: undefined,\n  disableBreaks: true,\n  replMode: false,\n  allowUnsafeEvalBlockedByCSP: false,\n};\n\nconst heightEvaluateParams = {\n  expression: 'window.innerHeight',\n  objectGroup: undefined,\n  includeCommandLineAPI: false,\n  silent: true,\n  contextId: undefined,\n  returnByValue: false,\n  generatePreview: false,\n  userGesture: false,\n  awaitPromise: true,\n  throwOnSideEffect: false,\n  timeout: undefined,\n  disableBreaks: true,\n  replMode: false,\n  allowUnsafeEvalBlockedByCSP: false,\n};\n\nasync function getViewportObject(): Promise<{\n  width: number,\n  height: number,\n}|null> {\n  const currentExecutionContext = UI.Context.Context.instance().flavor(SDK.RuntimeModel.ExecutionContext);\n  let width, height;\n  if (currentExecutionContext) {\n    const widthObject = await currentExecutionContext.evaluate(widthEvaluateParams, false, false);\n    const heightObject = await currentExecutionContext.evaluate(heightEvaluateParams, false, false);\n    if ('error' in widthObject || 'error' in heightObject) {\n      return null;\n    }\n    if (widthObject.object) {\n      width = widthObject.object.value;\n    }\n    if (heightObject.object) {\n      height = heightObject.object.value;\n    }\n  }\n  if (width === undefined || height === undefined) {\n    const selectedNode = UI.Context.Context.instance().flavor(SDK.DOMModel.DOMNode);\n    if (!selectedNode) {\n      return null;\n    }\n    const pageLayout = await selectedNode.domModel().target().pageAgent().invoke_getLayoutMetrics();\n    const zoom = pageLayout.visualViewport.zoom ? pageLayout.visualViewport.zoom : 1;\n    height = pageLayout.visualViewport.clientHeight / zoom;\n    width = pageLayout.visualViewport.clientWidth / zoom;\n  }\n  return {width, height};\n}\n\nconst unitConversionMap = new Map<string, (isFontSize?: boolean) => number | Promise<number>>();\nunitConversionMap.set('px', getPxMultiplier);\nunitConversionMap.set('em', getEmMultiplier);\nunitConversionMap.set('rem', getRemMultiplier);\nunitConversionMap.set('%', getPercentMultiplier);\nunitConversionMap.set('vh', getVhMultiplier);\nunitConversionMap.set('vw', getVwMultiplier);\nunitConversionMap.set('vmin', getVminMultiplier);\nunitConversionMap.set('vmax', getVmaxMultiplier);\nunitConversionMap.set('cm', getCmMultiplier);\nunitConversionMap.set('mm', getMmMultiplier);\nunitConversionMap.set('in', getInMultiplier);\nunitConversionMap.set('pt', getPtMultiplier);\nunitConversionMap.set('pc', getPcMultiplier);\n\nexport async function getUnitConversionMultiplier(\n    prevUnit: string, newUnit: string, isFontSize?: boolean): Promise<number> {\n  if (prevUnit === '') {\n    prevUnit = 'em';\n  }\n  if (newUnit === '') {\n    newUnit = 'em';\n  }\n  let prevUnitMultiplier, newUnitMultiplier;\n  const prevUnitFunction = unitConversionMap.get(prevUnit);\n  const newUnitFunction = unitConversionMap.get(newUnit);\n  if (prevUnitFunction && newUnitFunction) {\n    if (prevUnit === 'em' || prevUnit === '%') {\n      prevUnitMultiplier = await prevUnitFunction(isFontSize);\n    } else {\n      prevUnitMultiplier = await prevUnitFunction();\n    }\n    if (newUnit === 'em' || newUnit === '%') {\n      newUnitMultiplier = await newUnitFunction(isFontSize);\n    } else {\n      newUnitMultiplier = await newUnitFunction();\n    }\n  } else {\n    return 1;\n  }\n  return prevUnitMultiplier / newUnitMultiplier;\n}\n"],
  "mappings": "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",
  "names": []
}
