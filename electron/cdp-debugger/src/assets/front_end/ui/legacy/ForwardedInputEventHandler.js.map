{
  "version": 3,
  "sources": ["../../../../../../front_end/ui/legacy/ForwardedInputEventHandler.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\n\nimport {Context} from './Context.js';\nimport {KeyboardShortcut} from './KeyboardShortcut.js';\nimport {ForwardedShortcut, ShortcutRegistry} from './ShortcutRegistry.js';\n\n// This handler only forwards the keystrokes if DevTools front-end is\n// not running in hosted mode.\nexport class ForwardedInputEventHandler {\n  constructor() {\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.KeyEventUnhandled, this.onKeyEventUnhandled, this);\n  }\n\n  private async onKeyEventUnhandled(\n      event: Common.EventTarget.EventTargetEvent<Host.InspectorFrontendHostAPI.KeyEventUnhandledEvent>): Promise<void> {\n    const {type, key, keyCode, modifiers} = event.data;\n    if (type !== 'keydown') {\n      return;\n    }\n\n    const context = Context.instance();\n    const shortcutRegistry = ShortcutRegistry.instance();\n\n    context.setFlavor(ForwardedShortcut, ForwardedShortcut.instance);\n    await shortcutRegistry.handleKey(KeyboardShortcut.makeKey(keyCode, modifiers), key);\n    context.setFlavor(ForwardedShortcut, null);\n  }\n}\n\nnew ForwardedInputEventHandler();\n"],
  "mappings": "AAKA;AAEA;AACA;AACA;AAIO,wCAAiC;AAAA,EACtC,cAAc;AACZ,SAAK,sBAAsB,8BAA8B,OAAO,iBAC5D,KAAK,yBAAyB,OAAO,mBAAmB,KAAK,qBAAqB;AAAA;AAAA,QAG1E,oBACV,OAAiH;AACnH,UAAM,EAAC,MAAM,KAAK,SAAS,cAAa,MAAM;AAC9C,QAAI,SAAS,WAAW;AACtB;AAAA;AAGF,UAAM,UAAU,QAAQ;AACxB,UAAM,mBAAmB,iBAAiB;AAE1C,YAAQ,UAAU,mBAAmB,kBAAkB;AACvD,UAAM,iBAAiB,UAAU,iBAAiB,QAAQ,SAAS,YAAY;AAC/E,YAAQ,UAAU,mBAAmB;AAAA;AAAA;AAIzC,IAAI;",
  "names": []
}
