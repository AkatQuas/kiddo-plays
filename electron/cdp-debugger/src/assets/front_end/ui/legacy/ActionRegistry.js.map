{
  "version": 3,
  "sources": ["../../../../../../front_end/ui/legacy/ActionRegistry.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type {Action} from './ActionRegistration.js';\nimport {getRegisteredActionExtensions} from './ActionRegistration.js';\nimport {Context} from './Context.js';\n\nlet actionRegistryInstance: ActionRegistry|undefined;\n\nexport class ActionRegistry {\n  private readonly actionsById: Map<string, Action>;\n  private constructor() {\n    this.actionsById = new Map();\n    this.registerActions();\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ActionRegistry {\n    const {forceNew} = opts;\n    if (!actionRegistryInstance || forceNew) {\n      actionRegistryInstance = new ActionRegistry();\n    }\n\n    return actionRegistryInstance;\n  }\n\n  static removeInstance(): void {\n    actionRegistryInstance = undefined;\n  }\n\n  private registerActions(): void {\n    for (const action of getRegisteredActionExtensions()) {\n      this.actionsById.set(action.id(), action);\n      if (!action.canInstantiate()) {\n        action.setEnabled(false);\n      }\n    }\n  }\n\n  availableActions(): Action[] {\n    return this.applicableActions([...this.actionsById.keys()], Context.instance());\n  }\n\n  actions(): Action[] {\n    return [...this.actionsById.values()];\n  }\n\n  applicableActions(actionIds: string[], context: Context): Action[] {\n    const applicableActions: Action[] = [];\n    for (const actionId of actionIds) {\n      const action = this.actionsById.get(actionId);\n      if (action && action.enabled()) {\n        if (isActionApplicableToContextTypes((action as Action), context.flavors())) {\n          applicableActions.push((action as Action));\n        }\n      }\n    }\n    return applicableActions;\n\n    function isActionApplicableToContextTypes(action: Action, currentContextTypes: Set<unknown>): boolean {\n      const contextTypes = action.contextTypes();\n      if (!contextTypes) {\n        return true;\n      }\n      for (let i = 0; i < contextTypes.length; ++i) {\n        const contextType = contextTypes[i];\n        const isMatching = Boolean(contextType) && currentContextTypes.has(contextType);\n        if (isMatching) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n\n  action(actionId: string): Action|null {\n    return this.actionsById.get(actionId) || null;\n  }\n}\n"],
  "mappings": "AAKA;AACA;AAEA,IAAI;AAEG,4BAAqB;AAAA,EACT;AAAA,EACT,cAAc;AACpB,SAAK,cAAc,oBAAI;AACvB,SAAK;AAAA;AAAA,SAGA,SAAS,OAEZ,EAAC,UAAU,QAAuB;AACpC,UAAM,EAAC,aAAY;AACnB,QAAI,CAAC,0BAA0B,UAAU;AACvC,+BAAyB,IAAI;AAAA;AAG/B,WAAO;AAAA;AAAA,SAGF,iBAAuB;AAC5B,6BAAyB;AAAA;AAAA,EAGnB,kBAAwB;AAC9B,eAAW,UAAU,iCAAiC;AACpD,WAAK,YAAY,IAAI,OAAO,MAAM;AAClC,UAAI,CAAC,OAAO,kBAAkB;AAC5B,eAAO,WAAW;AAAA;AAAA;AAAA;AAAA,EAKxB,mBAA6B;AAC3B,WAAO,KAAK,kBAAkB,CAAC,GAAG,KAAK,YAAY,SAAS,QAAQ;AAAA;AAAA,EAGtE,UAAoB;AAClB,WAAO,CAAC,GAAG,KAAK,YAAY;AAAA;AAAA,EAG9B,kBAAkB,WAAqB,SAA4B;AACjE,UAAM,oBAA8B;AACpC,eAAW,YAAY,WAAW;AAChC,YAAM,SAAS,KAAK,YAAY,IAAI;AACpC,UAAI,UAAU,OAAO,WAAW;AAC9B,YAAI,iCAAkC,QAAmB,QAAQ,YAAY;AAC3E,4BAAkB,KAAM;AAAA;AAAA;AAAA;AAI9B,WAAO;AAEP,8CAA0C,QAAgB,qBAA4C;AACpG,YAAM,eAAe,OAAO;AAC5B,UAAI,CAAC,cAAc;AACjB,eAAO;AAAA;AAET,eAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,EAAE,GAAG;AAC5C,cAAM,cAAc,aAAa;AACjC,cAAM,aAAa,QAAQ,gBAAgB,oBAAoB,IAAI;AACnE,YAAI,YAAY;AACd,iBAAO;AAAA;AAAA;AAGX,aAAO;AAAA;AAAA;AAAA,EAIX,OAAO,UAA+B;AACpC,WAAO,KAAK,YAAY,IAAI,aAAa;AAAA;AAAA;",
  "names": []
}
