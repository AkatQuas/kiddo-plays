{
  "version": 3,
  "sources": ["../../../../../../front_end/ui/legacy/ListWidget.ts"],
  "sourcesContent": ["// Copyright 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\n\nimport * as ARIAUtils from './ARIAUtils.js';\nimport listWidgetStyles from './listWidget.css.legacy.js';\nimport {Toolbar, ToolbarButton} from './Toolbar.js';\nimport {Tooltip} from './Tooltip.js';\nimport {createInput, createTextButton, ElementFocusRestorer} from './UIUtils.js';\nimport {VBox} from './Widget.js';\n\nconst UIStrings = {\n  /**\n  *@description Text on a button to start editing text\n  */\n  editString: 'Edit',\n  /**\n  *@description Label for an item to remove something\n  */\n  removeString: 'Remove',\n  /**\n  *@description Text to save something\n  */\n  saveString: 'Save',\n  /**\n  *@description Text to add something\n  */\n  addString: 'Add',\n  /**\n  *@description Text to cancel something\n  */\n  cancelString: 'Cancel',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/ListWidget.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class ListWidget<T> extends VBox {\n  private delegate: Delegate<T>;\n  private readonly list: HTMLElement;\n  private lastSeparator: boolean;\n  private focusRestorer: ElementFocusRestorer|null;\n  private items: T[];\n  private editable: boolean[];\n  private elements: Element[];\n  private editor: Editor<T>|null;\n  private editItem: T|null;\n  private editElement: Element|null;\n  private emptyPlaceholder: Element|null;\n  constructor(delegate: Delegate<T>, delegatesFocus: boolean|undefined = true) {\n    super(true, delegatesFocus);\n    this.registerRequiredCSS(listWidgetStyles);\n    this.delegate = delegate;\n\n    this.list = this.contentElement.createChild('div', 'list');\n\n    this.lastSeparator = false;\n    this.focusRestorer = null;\n    this.items = [];\n    this.editable = [];\n    this.elements = [];\n    this.editor = null;\n    this.editItem = null;\n    this.editElement = null;\n\n    this.emptyPlaceholder = null;\n\n    this.updatePlaceholder();\n  }\n\n  clear(): void {\n    this.items = [];\n    this.editable = [];\n    this.elements = [];\n    this.lastSeparator = false;\n    this.list.removeChildren();\n    this.updatePlaceholder();\n    this.stopEditing();\n  }\n\n  appendItem(item: T, editable: boolean): void {\n    if (this.lastSeparator && this.items.length) {\n      const element = document.createElement('div');\n      element.classList.add('list-separator');\n      this.list.appendChild(element);\n    }\n    this.lastSeparator = false;\n\n    this.items.push(item);\n    this.editable.push(editable);\n\n    const element = this.list.createChild('div', 'list-item');\n    element.appendChild(this.delegate.renderItem(item, editable));\n    if (editable) {\n      element.classList.add('editable');\n      element.tabIndex = 0;\n      element.appendChild(this.createControls(item, element));\n    }\n    this.elements.push(element);\n    this.updatePlaceholder();\n  }\n\n  appendSeparator(): void {\n    this.lastSeparator = true;\n  }\n\n  removeItem(index: number): void {\n    if (this.editItem === this.items[index]) {\n      this.stopEditing();\n    }\n\n    const element = this.elements[index];\n\n    const previous = element.previousElementSibling;\n    const previousIsSeparator = previous && previous.classList.contains('list-separator');\n\n    const next = element.nextElementSibling;\n    const nextIsSeparator = next && next.classList.contains('list-separator');\n\n    if (previousIsSeparator && (nextIsSeparator || !next)) {\n      (previous as Element).remove();\n    }\n    if (nextIsSeparator && !previous) {\n      (next as Element).remove();\n    }\n    element.remove();\n\n    this.elements.splice(index, 1);\n    this.items.splice(index, 1);\n    this.editable.splice(index, 1);\n    this.updatePlaceholder();\n  }\n\n  addNewItem(index: number, item: T): void {\n    this.startEditing(item, null, this.elements[index] || null);\n  }\n\n  setEmptyPlaceholder(element: Element|null): void {\n    this.emptyPlaceholder = element;\n    this.updatePlaceholder();\n  }\n\n  private createControls(item: T, element: Element): Element {\n    const controls = document.createElement('div');\n    controls.classList.add('controls-container');\n    controls.classList.add('fill');\n    controls.createChild('div', 'controls-gradient');\n\n    const buttons = controls.createChild('div', 'controls-buttons');\n\n    const toolbar = new Toolbar('', buttons);\n\n    const editButton = new ToolbarButton(i18nString(UIStrings.editString), 'largeicon-edit');\n    editButton.addEventListener(ToolbarButton.Events.Click, onEditClicked.bind(this));\n    toolbar.appendToolbarItem(editButton);\n\n    const removeButton = new ToolbarButton(i18nString(UIStrings.removeString), 'largeicon-trash-bin');\n    removeButton.addEventListener(ToolbarButton.Events.Click, onRemoveClicked.bind(this));\n    toolbar.appendToolbarItem(removeButton);\n\n    return controls;\n\n    function onEditClicked(this: ListWidget<T>): void {\n      const index = this.elements.indexOf(element);\n      const insertionPoint = this.elements[index + 1] || null;\n      this.startEditing(item, element, insertionPoint);\n    }\n\n    function onRemoveClicked(this: ListWidget<T>): void {\n      const index = this.elements.indexOf(element);\n      this.element.focus();\n      this.delegate.removeItemRequested(this.items[index], index);\n    }\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    this.stopEditing();\n  }\n\n  private updatePlaceholder(): void {\n    if (!this.emptyPlaceholder) {\n      return;\n    }\n\n    if (!this.elements.length && !this.editor) {\n      this.list.appendChild(this.emptyPlaceholder);\n    } else {\n      this.emptyPlaceholder.remove();\n    }\n  }\n\n  private startEditing(item: T, element: Element|null, insertionPoint: Element|null): void {\n    if (element && this.editElement === element) {\n      return;\n    }\n\n    this.stopEditing();\n    this.focusRestorer = new ElementFocusRestorer(this.element);\n\n    this.list.classList.add('list-editing');\n    this.editItem = item;\n    this.editElement = element;\n    if (element) {\n      element.classList.add('hidden');\n    }\n\n    const index = element ? this.elements.indexOf(element) : -1;\n    this.editor = this.delegate.beginEdit(item);\n    this.updatePlaceholder();\n    this.list.insertBefore(this.editor.element, insertionPoint);\n    this.editor.beginEdit(\n        item, index, element ? i18nString(UIStrings.saveString) : i18nString(UIStrings.addString),\n        this.commitEditing.bind(this), this.stopEditing.bind(this));\n  }\n\n  private commitEditing(): void {\n    const editItem = this.editItem;\n    const isNew = !this.editElement;\n    const editor = (this.editor as Editor<T>);\n    this.stopEditing();\n    if (editItem) {\n      this.delegate.commitEdit(editItem, editor, isNew);\n    }\n  }\n\n  private stopEditing(): void {\n    this.list.classList.remove('list-editing');\n    if (this.focusRestorer) {\n      this.focusRestorer.restore();\n    }\n    if (this.editElement) {\n      this.editElement.classList.remove('hidden');\n    }\n    if (this.editor && this.editor.element.parentElement) {\n      this.editor.element.remove();\n    }\n\n    this.editor = null;\n    this.editItem = null;\n    this.editElement = null;\n    this.updatePlaceholder();\n  }\n}\n\nexport interface Delegate<T> {\n  renderItem(item: T, editable: boolean): Element;\n  removeItemRequested(item: T, index: number): void;\n  beginEdit(item: T): Editor<T>;\n  commitEdit(item: T, editor: Editor<T>, isNew: boolean): void;\n}\n\nexport interface CustomEditorControl<T> extends HTMLElement {\n  value: T;\n  validate: () => ValidatorResult;\n}\n\nexport type EditorControl<T = string> = (HTMLInputElement|HTMLSelectElement|CustomEditorControl<T>);\n\nexport class Editor<T> {\n  element: HTMLDivElement;\n  private readonly contentElementInternal: HTMLElement;\n  private commitButton: HTMLButtonElement;\n  private readonly cancelButton: HTMLButtonElement;\n  private errorMessageContainer: HTMLElement;\n  private readonly controls: EditorControl[];\n  private readonly controlByName: Map<string, EditorControl>;\n  private readonly validators: ((arg0: T, arg1: number, arg2: EditorControl) => ValidatorResult)[];\n  private commit: (() => void)|null;\n  private cancel: (() => void)|null;\n  private item: T|null;\n  private index: number;\n\n  constructor() {\n    this.element = document.createElement('div');\n    this.element.classList.add('editor-container');\n    this.element.addEventListener('keydown', onKeyDown.bind(null, isEscKey, this.cancelClicked.bind(this)), false);\n\n    this.contentElementInternal = this.element.createChild('div', 'editor-content');\n    this.contentElementInternal.addEventListener(\n        'keydown', onKeyDown.bind(null, event => event.key === 'Enter', this.commitClicked.bind(this)), false);\n\n    const buttonsRow = this.element.createChild('div', 'editor-buttons');\n    this.commitButton = createTextButton('', this.commitClicked.bind(this), '', true /* primary */);\n    buttonsRow.appendChild(this.commitButton);\n    this.cancelButton =\n        createTextButton(i18nString(UIStrings.cancelString), this.cancelClicked.bind(this), '', true /* primary */);\n    buttonsRow.appendChild(this.cancelButton);\n\n    this.errorMessageContainer = this.element.createChild('div', 'list-widget-input-validation-error');\n    ARIAUtils.markAsAlert(this.errorMessageContainer);\n\n    function onKeyDown(predicate: (arg0: KeyboardEvent) => boolean, callback: () => void, event: KeyboardEvent): void {\n      if (predicate(event)) {\n        event.consume(true);\n        callback();\n      }\n    }\n\n    this.controls = [];\n    this.controlByName = new Map();\n    this.validators = [];\n\n    this.commit = null;\n    this.cancel = null;\n    this.item = null;\n    this.index = -1;\n  }\n\n  contentElement(): Element {\n    return this.contentElementInternal;\n  }\n\n  createInput(\n      name: string, type: string, title: string,\n      validator: (arg0: T, arg1: number, arg2: EditorControl) => ValidatorResult): HTMLInputElement {\n    const input = (createInput('', type) as HTMLInputElement);\n    input.placeholder = title;\n    input.addEventListener('input', this.validateControls.bind(this, false), false);\n    input.addEventListener('blur', this.validateControls.bind(this, false), false);\n    ARIAUtils.setAccessibleName(input, title);\n    this.controlByName.set(name, input);\n    this.controls.push(input);\n    this.validators.push(validator);\n    return input;\n  }\n\n  createSelect(\n      name: string, options: string[], validator: (arg0: T, arg1: number, arg2: EditorControl) => ValidatorResult,\n      title?: string): HTMLSelectElement {\n    const select = document.createElement('select');\n    select.classList.add('chrome-select');\n    for (let index = 0; index < options.length; ++index) {\n      const option = (select.createChild('option') as HTMLOptionElement);\n      option.value = options[index];\n      option.textContent = options[index];\n    }\n    if (title) {\n      Tooltip.install(select, title);\n      ARIAUtils.setAccessibleName(select, title);\n    }\n    select.addEventListener('input', this.validateControls.bind(this, false), false);\n    select.addEventListener('blur', this.validateControls.bind(this, false), false);\n    this.controlByName.set(name, select);\n    this.controls.push(select);\n    this.validators.push(validator);\n    return select;\n  }\n\n  createCustomControl<S, U extends CustomEditorControl<S>>(\n      name: string, ctor: {new(): U},\n      validator: (arg0: T, arg1: number, arg2: EditorControl) => ValidatorResult): CustomEditorControl<S> {\n    const control = new ctor();\n    this.controlByName.set(name, control as unknown as CustomEditorControl<string>);\n    this.controls.push(control as unknown as CustomEditorControl<string>);\n    this.validators.push(validator);\n    return control;\n  }\n\n  control(name: string): EditorControl {\n    const control = this.controlByName.get(name);\n    if (!control) {\n      throw new Error(`Control with name ${name} does not exist, please verify.`);\n    }\n    return control;\n  }\n\n  private validateControls(forceValid: boolean): void {\n    let allValid = true;\n    this.errorMessageContainer.textContent = '';\n    for (let index = 0; index < this.controls.length; ++index) {\n      const input = this.controls[index];\n      const {valid, errorMessage} = this.validators[index].call(null, (this.item as T), this.index, input);\n\n      input.classList.toggle('error-input', !valid && !forceValid);\n      if (valid || forceValid) {\n        ARIAUtils.setInvalid(input, false);\n      } else {\n        ARIAUtils.setInvalid(input, true);\n      }\n\n      if (!forceValid && errorMessage && !this.errorMessageContainer.textContent) {\n        this.errorMessageContainer.textContent = errorMessage;\n      }\n\n      allValid = allValid && valid;\n    }\n    this.commitButton.disabled = !allValid;\n  }\n\n  requestValidation(): void {\n    this.validateControls(false);\n  }\n\n  beginEdit(item: T, index: number, commitButtonTitle: string, commit: () => void, cancel: () => void): void {\n    this.commit = commit;\n    this.cancel = cancel;\n    this.item = item;\n    this.index = index;\n\n    this.commitButton.textContent = commitButtonTitle;\n    this.element.scrollIntoViewIfNeeded(false);\n    if (this.controls.length) {\n      this.controls[0].focus();\n    }\n    this.validateControls(true);\n  }\n\n  private commitClicked(): void {\n    if (this.commitButton.disabled) {\n      return;\n    }\n\n    const commit = this.commit;\n    this.commit = null;\n    this.cancel = null;\n    this.item = null;\n    this.index = -1;\n    if (commit) {\n      commit();\n    }\n  }\n\n  private cancelClicked(): void {\n    const cancel = this.cancel;\n    this.commit = null;\n    this.cancel = null;\n    this.item = null;\n    this.index = -1;\n    if (cancel) {\n      cancel();\n    }\n  }\n}\nexport interface ValidatorResult {\n  valid: boolean;\n  errorMessage?: string;\n}\n"],
  "mappings": "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",
  "names": []
}
