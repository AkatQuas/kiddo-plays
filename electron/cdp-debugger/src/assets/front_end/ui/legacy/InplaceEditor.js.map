{
  "version": 3,
  "sources": ["../../../../../../front_end/ui/legacy/InplaceEditor.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\n\nimport * as ARIAUtils from './ARIAUtils.js';\nimport {Keys} from './KeyboardShortcut.js';\nimport {ElementFocusRestorer, markBeingEdited} from './UIUtils.js';\n\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet _defaultInstance: InplaceEditor<unknown>|null = null;\n\nexport class InplaceEditor<T> {\n  private focusRestorer?: ElementFocusRestorer;\n  static startEditing<T>(element: Element, config?: Config<T>): Controller|null {\n    if (!_defaultInstance) {\n      _defaultInstance = new InplaceEditor();\n    }\n    return _defaultInstance.startEditing(element, config as Config<unknown>);\n  }\n\n  editorContent(editingContext: EditingContext<T>): string {\n    const element = editingContext.element;\n    if (element.tagName === 'INPUT' && (element as HTMLInputElement).type === 'text') {\n      return (element as HTMLInputElement).value;\n    }\n\n    return element.textContent || '';\n  }\n\n  setUpEditor(editingContext: EditingContext<T>): void {\n    const element = (editingContext.element as HTMLElement);\n    element.classList.add('editing');\n    element.setAttribute('contenteditable', 'plaintext-only');\n\n    const oldRole = element.getAttribute('role');\n    ARIAUtils.markAsTextBox(element);\n    editingContext.oldRole = oldRole;\n\n    const oldTabIndex = element.tabIndex;\n    if (typeof oldTabIndex !== 'number' || oldTabIndex < 0) {\n      element.tabIndex = 0;\n    }\n    this.focusRestorer = new ElementFocusRestorer(element);\n    editingContext.oldTabIndex = oldTabIndex;\n  }\n\n  closeEditor(editingContext: EditingContext<T>): void {\n    const element = (editingContext.element as HTMLElement);\n    element.classList.remove('editing');\n    element.removeAttribute('contenteditable');\n\n    if (typeof editingContext.oldRole !== 'string') {\n      element.removeAttribute('role');\n    } else {\n      element.setAttribute('role', editingContext.oldRole);\n    }\n\n    if (typeof editingContext.oldTabIndex !== 'number') {\n      element.removeAttribute('tabIndex');\n    } else {\n      element.tabIndex = editingContext.oldTabIndex;\n    }\n    element.scrollTop = 0;\n    element.scrollLeft = 0;\n  }\n\n  cancelEditing(editingContext: EditingContext<T>): void {\n    const element = (editingContext.element as HTMLElement);\n    if (element.tagName === 'INPUT' && (element as HTMLInputElement).type === 'text') {\n      (element as HTMLInputElement).value = editingContext.oldText || '';\n    } else {\n      element.textContent = editingContext.oldText;\n    }\n  }\n\n  startEditing(element: Element, inputConfig?: Config<T>): Controller|null {\n    if (!markBeingEdited(element, true)) {\n      return null;\n    }\n\n    const config = inputConfig || new Config(function() {}, function() {});\n    const editingContext:\n        EditingContext<T> = {element: element, config: config, oldRole: null, oldTabIndex: null, oldText: null};\n    const committedCallback = config.commitHandler;\n    const cancelledCallback = config.cancelHandler;\n    const pasteCallback = config.pasteHandler;\n    const context = config.context;\n    let moveDirection = '';\n    const self = this;\n\n    this.setUpEditor(editingContext);\n\n    editingContext.oldText = this.editorContent(editingContext);\n\n    function blurEventListener(e?: Event): void {\n      if (config.blurHandler && !config.blurHandler(element, e)) {\n        return;\n      }\n      editingCommitted.call(element);\n    }\n\n    function cleanUpAfterEditing(): void {\n      markBeingEdited(element, false);\n\n      element.removeEventListener('blur', blurEventListener, false);\n      element.removeEventListener('keydown', keyDownEventListener, true);\n      if (pasteCallback) {\n        element.removeEventListener('paste', pasteEventListener, true);\n      }\n\n      if (self.focusRestorer) {\n        self.focusRestorer.restore();\n      }\n      self.closeEditor(editingContext);\n    }\n\n    function editingCancelled(this: Element): void {\n      self.cancelEditing(editingContext);\n      cleanUpAfterEditing();\n      cancelledCallback(this, context);\n    }\n\n    function editingCommitted(this: Element): void {\n      cleanUpAfterEditing();\n\n      committedCallback(this, self.editorContent(editingContext), editingContext.oldText || '', context, moveDirection);\n    }\n\n    function defaultFinishHandler(event: KeyboardEvent): string {\n      if (event.key === 'Enter') {\n        return 'commit';\n      }\n      if (event.keyCode === Keys.Esc.code || event.key === Platform.KeyboardUtilities.ESCAPE_KEY) {\n        return 'cancel';\n      }\n      if (event.key === 'Tab') {\n        return 'move-' + (event.shiftKey ? 'backward' : 'forward');\n      }\n      return '';\n    }\n\n    function handleEditingResult(result: string|undefined, event: Event): void {\n      if (result === 'commit') {\n        editingCommitted.call(element);\n        event.consume(true);\n      } else if (result === 'cancel') {\n        editingCancelled.call(element);\n        event.consume(true);\n      } else if (result && result.startsWith('move-')) {\n        moveDirection = result.substring(5);\n        if ((event as KeyboardEvent).key === 'Tab') {\n          event.consume(true);\n        }\n        blurEventListener();\n      }\n    }\n\n    function pasteEventListener(event: Event): void {\n      if (!pasteCallback) {\n        return;\n      }\n      const result = pasteCallback(event);\n      handleEditingResult(result, event);\n    }\n\n    function keyDownEventListener(event: Event): void {\n      let result = defaultFinishHandler((event as KeyboardEvent));\n      if (!result && config.postKeydownFinishHandler) {\n        const postKeydownResult = config.postKeydownFinishHandler(event);\n        if (postKeydownResult) {\n          result = postKeydownResult;\n        }\n      }\n      handleEditingResult(result, event);\n    }\n\n    element.addEventListener('blur', blurEventListener, false);\n    element.addEventListener('keydown', keyDownEventListener, true);\n    if (pasteCallback !== undefined) {\n      element.addEventListener('paste', pasteEventListener, true);\n    }\n\n    const handle = {cancel: editingCancelled.bind(element), commit: editingCommitted.bind(element)};\n    return handle;\n  }\n}\n\nexport type CommitHandler<T> = (arg0: Element, arg1: string, arg2: string, arg3: T, arg4: string) => void;\nexport type CancelHandler<T> = (arg0: Element, arg1: T) => void;\nexport type BlurHandler = (arg0: Element, arg1?: Event|undefined) => boolean;\n\nexport class Config<T = undefined> {\n  commitHandler: CommitHandler<T>;\n  cancelHandler: CancelHandler<T>;\n  context: T;\n  blurHandler: BlurHandler|undefined;\n  pasteHandler!: EventHandler|null;\n  postKeydownFinishHandler!: EventHandler|null;\n\n  constructor(\n      commitHandler: CommitHandler<T>, cancelHandler: CancelHandler<T>, context?: T, blurHandler?: BlurHandler) {\n    this.commitHandler = commitHandler;\n    this.cancelHandler = cancelHandler;\n    this.context = context as T;\n    this.blurHandler = blurHandler;\n  }\n\n  setPasteHandler(pasteHandler: EventHandler): void {\n    this.pasteHandler = pasteHandler;\n  }\n\n  setPostKeydownFinishHandler(postKeydownFinishHandler: EventHandler): void {\n    this.postKeydownFinishHandler = postKeydownFinishHandler;\n  }\n}\n\nexport type EventHandler = (event: Event) => string|undefined;\n\nexport interface Controller {\n  cancel: () => void;\n  commit: () => void;\n}\n\nexport interface EditingContext<T> {\n  element: Element;\n  config: Config<T>;\n  oldRole: string|null;\n  oldText: string|null;\n  oldTabIndex: number|null;\n}\n"],
  "mappings": "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",
  "names": []
}
