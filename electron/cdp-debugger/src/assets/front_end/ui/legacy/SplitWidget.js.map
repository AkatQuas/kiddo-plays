{
  "version": 3,
  "sources": ["../../../../../../front_end/ui/legacy/SplitWidget.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Platform from '../../core/platform/platform.js';\n\nimport * as ARIAUtils from './ARIAUtils.js';\nimport {Constraints} from './Geometry.js';\nimport type {ResizeUpdatePositionEvent} from './ResizerWidget.js';\nimport {Events as ResizerWidgetEvents, SimpleResizerWidget} from './ResizerWidget.js';\nimport {ToolbarButton} from './Toolbar.js';\nimport {Widget} from './Widget.js';\nimport {Events as ZoomManagerEvents, ZoomManager} from './ZoomManager.js';\nimport splitWidgetStyles from './splitWidget.css.legacy.js';\n\nexport class SplitWidget extends Common.ObjectWrapper.eventMixin<EventTypes, typeof Widget>(Widget) {\n  private sidebarElementInternal: HTMLElement;\n  private mainElement: HTMLElement;\n  private resizerElementInternal: HTMLElement;\n  private resizerElementSize: number|null;\n  private readonly resizerWidget: SimpleResizerWidget;\n  private defaultSidebarWidth: number;\n  private defaultSidebarHeight: number;\n  private readonly constraintsInDip: boolean;\n  private resizeStartSizeDIP: number;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private setting: Common.Settings.Setting<any>|null;\n  private totalSizeCSS: number;\n  private totalSizeOtherDimensionCSS: number;\n  private mainWidgetInternal: Widget|null;\n  private sidebarWidgetInternal: Widget|null;\n  private animationFrameHandle: number;\n  private animationCallback: (() => void)|null;\n  private showSidebarButtonTitle: Common.UIString.LocalizedString;\n  private hideSidebarButtonTitle: Common.UIString.LocalizedString;\n  private shownSidebarString: Common.UIString.LocalizedString;\n  private hiddenSidebarString: Common.UIString.LocalizedString;\n  private showHideSidebarButton: ToolbarButton|null;\n  private isVerticalInternal: boolean;\n  private sidebarMinimized: boolean;\n  private detaching: boolean;\n  private sidebarSizeDIP: number;\n  private savedSidebarSizeDIP: number;\n  private secondIsSidebar: boolean;\n  private shouldSaveShowMode: boolean;\n  private savedVerticalMainSize: number|null;\n  private savedHorizontalMainSize: number|null;\n  private showModeInternal: string;\n  private savedShowMode: string;\n\n  constructor(\n      isVertical: boolean, secondIsSidebar: boolean, settingName?: string, defaultSidebarWidth?: number,\n      defaultSidebarHeight?: number, constraintsInDip?: boolean) {\n    super(true);\n    this.element.classList.add('split-widget');\n    this.registerRequiredCSS(splitWidgetStyles);\n\n    this.contentElement.classList.add('shadow-split-widget');\n    this.sidebarElementInternal =\n        this.contentElement.createChild('div', 'shadow-split-widget-contents shadow-split-widget-sidebar vbox');\n    this.mainElement =\n        this.contentElement.createChild('div', 'shadow-split-widget-contents shadow-split-widget-main vbox');\n    (this.mainElement.createChild('slot') as HTMLSlotElement).name = 'insertion-point-main';\n    (this.sidebarElementInternal.createChild('slot') as HTMLSlotElement).name = 'insertion-point-sidebar';\n    this.resizerElementInternal = this.contentElement.createChild('div', 'shadow-split-widget-resizer');\n    this.resizerElementSize = null;\n\n    this.resizerWidget = new SimpleResizerWidget();\n    this.resizerWidget.setEnabled(true);\n    this.resizerWidget.addEventListener(ResizerWidgetEvents.ResizeStart, this.onResizeStart, this);\n    this.resizerWidget.addEventListener(ResizerWidgetEvents.ResizeUpdatePosition, this.onResizeUpdate, this);\n    this.resizerWidget.addEventListener(ResizerWidgetEvents.ResizeEnd, this.onResizeEnd, this);\n\n    this.defaultSidebarWidth = defaultSidebarWidth || 200;\n    this.defaultSidebarHeight = defaultSidebarHeight || this.defaultSidebarWidth;\n    this.constraintsInDip = Boolean(constraintsInDip);\n    this.resizeStartSizeDIP = 0;\n    this.setting = settingName ? Common.Settings.Settings.instance().createSetting(settingName, {}) : null;\n\n    this.totalSizeCSS = 0;\n    this.totalSizeOtherDimensionCSS = 0;\n    this.mainWidgetInternal = null;\n    this.sidebarWidgetInternal = null;\n    this.animationFrameHandle = 0;\n    this.animationCallback = null;\n    this.showSidebarButtonTitle = Common.UIString.LocalizedEmptyString;\n    this.hideSidebarButtonTitle = Common.UIString.LocalizedEmptyString;\n    this.shownSidebarString = Common.UIString.LocalizedEmptyString;\n    this.hiddenSidebarString = Common.UIString.LocalizedEmptyString;\n    this.showHideSidebarButton = null;\n    this.isVerticalInternal = false;\n    this.sidebarMinimized = false;\n    this.detaching = false;\n    this.sidebarSizeDIP = -1;\n    this.savedSidebarSizeDIP = this.sidebarSizeDIP;\n    this.secondIsSidebar = false;\n    this.shouldSaveShowMode = false;\n    this.savedVerticalMainSize = null;\n    this.savedHorizontalMainSize = null;\n\n    this.setSecondIsSidebar(secondIsSidebar);\n\n    this.innerSetVertical(isVertical);\n    this.showModeInternal = ShowMode.Both;\n    this.savedShowMode = this.showModeInternal;\n\n    // Should be called after isVertical has the right value.\n    this.installResizer(this.resizerElementInternal);\n  }\n\n  isVertical(): boolean {\n    return this.isVerticalInternal;\n  }\n\n  setVertical(isVertical: boolean): void {\n    if (this.isVerticalInternal === isVertical) {\n      return;\n    }\n\n    this.innerSetVertical(isVertical);\n\n    if (this.isShowing()) {\n      this.updateLayout();\n    }\n  }\n\n  private innerSetVertical(isVertical: boolean): void {\n    this.contentElement.classList.toggle('vbox', !isVertical);\n    this.contentElement.classList.toggle('hbox', isVertical);\n    this.isVerticalInternal = isVertical;\n\n    this.resizerElementSize = null;\n    this.sidebarSizeDIP = -1;\n    this.restoreSidebarSizeFromSettings();\n    if (this.shouldSaveShowMode) {\n      this.restoreAndApplyShowModeFromSettings();\n    }\n    this.updateShowHideSidebarButton();\n    // FIXME: reverse SplitWidget.isVertical meaning.\n    this.resizerWidget.setVertical(!isVertical);\n    this.invalidateConstraints();\n  }\n\n  private updateLayout(animate?: boolean): void {\n    this.totalSizeCSS = 0;  // Lazy update.\n    this.totalSizeOtherDimensionCSS = 0;\n\n    // Remove properties that might affect total size calculation.\n    this.mainElement.style.removeProperty('width');\n    this.mainElement.style.removeProperty('height');\n    this.sidebarElementInternal.style.removeProperty('width');\n    this.sidebarElementInternal.style.removeProperty('height');\n\n    this.innerSetSidebarSizeDIP(this.preferredSidebarSizeDIP(), Boolean(animate));\n  }\n\n  setMainWidget(widget: Widget): void {\n    if (this.mainWidgetInternal === widget) {\n      return;\n    }\n    this.suspendInvalidations();\n    if (this.mainWidgetInternal) {\n      this.mainWidgetInternal.detach();\n    }\n    this.mainWidgetInternal = widget;\n    if (widget) {\n      widget.element.slot = 'insertion-point-main';\n      if (this.showModeInternal === ShowMode.OnlyMain || this.showModeInternal === ShowMode.Both) {\n        widget.show(this.element);\n      }\n    }\n    this.resumeInvalidations();\n  }\n\n  setSidebarWidget(widget: Widget): void {\n    if (this.sidebarWidgetInternal === widget) {\n      return;\n    }\n    this.suspendInvalidations();\n    if (this.sidebarWidgetInternal) {\n      this.sidebarWidgetInternal.detach();\n    }\n    this.sidebarWidgetInternal = widget;\n    if (widget) {\n      widget.element.slot = 'insertion-point-sidebar';\n      if (this.showModeInternal === ShowMode.OnlySidebar || this.showModeInternal === ShowMode.Both) {\n        widget.show(this.element);\n      }\n    }\n    this.resumeInvalidations();\n  }\n\n  mainWidget(): Widget|null {\n    return this.mainWidgetInternal;\n  }\n\n  sidebarWidget(): Widget|null {\n    return this.sidebarWidgetInternal;\n  }\n\n  sidebarElement(): HTMLElement {\n    return this.sidebarElementInternal;\n  }\n\n  childWasDetached(widget: Widget): void {\n    if (this.detaching) {\n      return;\n    }\n    if (this.mainWidgetInternal === widget) {\n      this.mainWidgetInternal = null;\n    }\n    if (this.sidebarWidgetInternal === widget) {\n      this.sidebarWidgetInternal = null;\n    }\n    this.invalidateConstraints();\n  }\n\n  isSidebarSecond(): boolean {\n    return this.secondIsSidebar;\n  }\n\n  enableShowModeSaving(): void {\n    this.shouldSaveShowMode = true;\n    this.restoreAndApplyShowModeFromSettings();\n  }\n\n  showMode(): string {\n    return this.showModeInternal;\n  }\n\n  setSecondIsSidebar(secondIsSidebar: boolean): void {\n    if (secondIsSidebar === this.secondIsSidebar) {\n      return;\n    }\n    this.secondIsSidebar = secondIsSidebar;\n    if (!this.mainWidgetInternal || !this.mainWidgetInternal.shouldHideOnDetach()) {\n      if (secondIsSidebar) {\n        this.contentElement.insertBefore(this.mainElement, this.sidebarElementInternal);\n      } else {\n        this.contentElement.insertBefore(this.mainElement, this.resizerElementInternal);\n      }\n    } else if (!this.sidebarWidgetInternal || !this.sidebarWidgetInternal.shouldHideOnDetach()) {\n      if (secondIsSidebar) {\n        this.contentElement.insertBefore(this.sidebarElementInternal, this.resizerElementInternal);\n      } else {\n        this.contentElement.insertBefore(this.sidebarElementInternal, this.mainElement);\n      }\n    } else {\n      console.error('Could not swap split widget side. Both children widgets contain iframes.');\n      this.secondIsSidebar = !secondIsSidebar;\n    }\n  }\n\n  sidebarSide(): string|null {\n    if (this.showModeInternal !== ShowMode.Both) {\n      return null;\n    }\n    return this.isVerticalInternal ? (this.secondIsSidebar ? 'right' : 'left') :\n                                     (this.secondIsSidebar ? 'bottom' : 'top');\n  }\n\n  resizerElement(): Element {\n    return this.resizerElementInternal;\n  }\n\n  hideMain(animate?: boolean): void {\n    this.showOnly(\n        this.sidebarWidgetInternal, this.mainWidgetInternal, this.sidebarElementInternal, this.mainElement, animate);\n    this.updateShowMode(ShowMode.OnlySidebar);\n  }\n\n  hideSidebar(animate?: boolean): void {\n    this.showOnly(\n        this.mainWidgetInternal, this.sidebarWidgetInternal, this.mainElement, this.sidebarElementInternal, animate);\n    this.updateShowMode(ShowMode.OnlyMain);\n  }\n\n  setSidebarMinimized(minimized: boolean): void {\n    this.sidebarMinimized = minimized;\n    this.invalidateConstraints();\n  }\n\n  isSidebarMinimized(): boolean {\n    return this.sidebarMinimized;\n  }\n\n  private showOnly(\n      sideToShow: Widget|null, sideToHide: Widget|null, shadowToShow: Element, shadowToHide: Element,\n      animate?: boolean): void {\n    this.cancelAnimation();\n\n    function callback(this: SplitWidget): void {\n      if (sideToShow) {\n        // Make sure main is first in the children list.\n        if (sideToShow === this.mainWidgetInternal) {\n          this.mainWidgetInternal.show(\n              this.element, this.sidebarWidgetInternal ? this.sidebarWidgetInternal.element : null);\n        } else if (this.sidebarWidgetInternal) {\n          this.sidebarWidgetInternal.show(this.element);\n        }\n      }\n      if (sideToHide) {\n        this.detaching = true;\n        sideToHide.detach();\n        this.detaching = false;\n      }\n\n      this.resizerElementInternal.classList.add('hidden');\n      shadowToShow.classList.remove('hidden');\n      shadowToShow.classList.add('maximized');\n      shadowToHide.classList.add('hidden');\n      shadowToHide.classList.remove('maximized');\n      this.removeAllLayoutProperties();\n      this.doResize();\n      this.showFinishedForTest();\n    }\n\n    if (animate) {\n      this.animate(true, callback.bind(this));\n    } else {\n      callback.call(this);\n    }\n\n    this.sidebarSizeDIP = -1;\n    this.setResizable(false);\n  }\n\n  private showFinishedForTest(): void {\n    // This method is sniffed in tests.\n  }\n\n  private removeAllLayoutProperties(): void {\n    this.sidebarElementInternal.style.removeProperty('flexBasis');\n\n    this.mainElement.style.removeProperty('width');\n    this.mainElement.style.removeProperty('height');\n    this.sidebarElementInternal.style.removeProperty('width');\n    this.sidebarElementInternal.style.removeProperty('height');\n\n    this.resizerElementInternal.style.removeProperty('left');\n    this.resizerElementInternal.style.removeProperty('right');\n    this.resizerElementInternal.style.removeProperty('top');\n    this.resizerElementInternal.style.removeProperty('bottom');\n\n    this.resizerElementInternal.style.removeProperty('margin-left');\n    this.resizerElementInternal.style.removeProperty('margin-right');\n    this.resizerElementInternal.style.removeProperty('margin-top');\n    this.resizerElementInternal.style.removeProperty('margin-bottom');\n  }\n\n  showBoth(animate?: boolean): void {\n    if (this.showModeInternal === ShowMode.Both) {\n      animate = false;\n    }\n\n    this.cancelAnimation();\n    this.mainElement.classList.remove('maximized', 'hidden');\n    this.sidebarElementInternal.classList.remove('maximized', 'hidden');\n    this.resizerElementInternal.classList.remove('hidden');\n    this.setResizable(true);\n\n    // Make sure main is the first in the children list.\n    this.suspendInvalidations();\n    if (this.sidebarWidgetInternal) {\n      this.sidebarWidgetInternal.show(this.element);\n    }\n    if (this.mainWidgetInternal) {\n      this.mainWidgetInternal.show(\n          this.element, this.sidebarWidgetInternal ? this.sidebarWidgetInternal.element : null);\n    }\n    this.resumeInvalidations();\n    // Order widgets in DOM properly.\n    this.setSecondIsSidebar(this.secondIsSidebar);\n\n    this.sidebarSizeDIP = -1;\n    this.updateShowMode(ShowMode.Both);\n    this.updateLayout(animate);\n  }\n\n  setResizable(resizable: boolean): void {\n    this.resizerWidget.setEnabled(resizable);\n  }\n\n  isResizable(): boolean {\n    return this.resizerWidget.isEnabled();\n  }\n\n  setSidebarSize(size: number): void {\n    const sizeDIP = ZoomManager.instance().cssToDIP(size);\n    this.savedSidebarSizeDIP = sizeDIP;\n    this.saveSetting();\n    this.innerSetSidebarSizeDIP(sizeDIP, false, true);\n  }\n\n  sidebarSize(): number {\n    const sizeDIP = Math.max(0, this.sidebarSizeDIP);\n    return ZoomManager.instance().dipToCSS(sizeDIP);\n  }\n\n  /**\n   * Returns total size in DIP.\n   */\n  private totalSizeDIP(): number {\n    if (!this.totalSizeCSS) {\n      this.totalSizeCSS = this.isVerticalInternal ? this.contentElement.offsetWidth : this.contentElement.offsetHeight;\n      this.totalSizeOtherDimensionCSS =\n          this.isVerticalInternal ? this.contentElement.offsetHeight : this.contentElement.offsetWidth;\n    }\n    return ZoomManager.instance().cssToDIP(this.totalSizeCSS);\n  }\n\n  private updateShowMode(showMode: string): void {\n    this.showModeInternal = showMode;\n    this.saveShowModeToSettings();\n    this.updateShowHideSidebarButton();\n    this.dispatchEventToListeners(Events.ShowModeChanged, showMode);\n    this.invalidateConstraints();\n  }\n\n  private innerSetSidebarSizeDIP(sizeDIP: number, animate: boolean, userAction?: boolean): void {\n    if (this.showModeInternal !== ShowMode.Both || !this.isShowing()) {\n      return;\n    }\n\n    sizeDIP = this.applyConstraints(sizeDIP, userAction);\n    if (this.sidebarSizeDIP === sizeDIP) {\n      return;\n    }\n\n    if (!this.resizerElementSize) {\n      this.resizerElementSize =\n          this.isVerticalInternal ? this.resizerElementInternal.offsetWidth : this.resizerElementInternal.offsetHeight;\n    }\n\n    // Invalidate layout below.\n\n    this.removeAllLayoutProperties();\n\n    // this.totalSizeDIP is available below since we successfully applied constraints.\n    const roundSizeCSS = Math.round(ZoomManager.instance().dipToCSS(sizeDIP));\n    const sidebarSizeValue = roundSizeCSS + 'px';\n    const mainSizeValue = (this.totalSizeCSS - roundSizeCSS) + 'px';\n    this.sidebarElementInternal.style.flexBasis = sidebarSizeValue;\n\n    // Make both sides relayout boundaries.\n    if (this.isVerticalInternal) {\n      this.sidebarElementInternal.style.width = sidebarSizeValue;\n      this.mainElement.style.width = mainSizeValue;\n      this.sidebarElementInternal.style.height = this.totalSizeOtherDimensionCSS + 'px';\n      this.mainElement.style.height = this.totalSizeOtherDimensionCSS + 'px';\n    } else {\n      this.sidebarElementInternal.style.height = sidebarSizeValue;\n      this.mainElement.style.height = mainSizeValue;\n      this.sidebarElementInternal.style.width = this.totalSizeOtherDimensionCSS + 'px';\n      this.mainElement.style.width = this.totalSizeOtherDimensionCSS + 'px';\n    }\n\n    // Position resizer.\n    if (this.isVerticalInternal) {\n      if (this.secondIsSidebar) {\n        this.resizerElementInternal.style.right = sidebarSizeValue;\n        this.resizerElementInternal.style.marginRight = -this.resizerElementSize / 2 + 'px';\n      } else {\n        this.resizerElementInternal.style.left = sidebarSizeValue;\n        this.resizerElementInternal.style.marginLeft = -this.resizerElementSize / 2 + 'px';\n      }\n    } else {\n      if (this.secondIsSidebar) {\n        this.resizerElementInternal.style.bottom = sidebarSizeValue;\n        this.resizerElementInternal.style.marginBottom = -this.resizerElementSize / 2 + 'px';\n      } else {\n        this.resizerElementInternal.style.top = sidebarSizeValue;\n        this.resizerElementInternal.style.marginTop = -this.resizerElementSize / 2 + 'px';\n      }\n    }\n\n    this.sidebarSizeDIP = sizeDIP;\n\n    // Force layout.\n\n    if (animate) {\n      this.animate(false);\n    } else {\n      // No need to recalculate this.sidebarSizeDIP and this.totalSizeDIP again.\n      this.doResize();\n      this.dispatchEventToListeners(Events.SidebarSizeChanged, this.sidebarSize());\n    }\n  }\n\n  private animate(reverse: boolean, callback?: (() => void)): void {\n    const animationTime = 50;\n    this.animationCallback = callback || null;\n\n    let animatedMarginPropertyName: string;\n    if (this.isVerticalInternal) {\n      animatedMarginPropertyName = this.secondIsSidebar ? 'margin-right' : 'margin-left';\n    } else {\n      animatedMarginPropertyName = this.secondIsSidebar ? 'margin-bottom' : 'margin-top';\n    }\n\n    const marginFrom = reverse ? '0' : '-' + ZoomManager.instance().dipToCSS(this.sidebarSizeDIP) + 'px';\n    const marginTo = reverse ? '-' + ZoomManager.instance().dipToCSS(this.sidebarSizeDIP) + 'px' : '0';\n\n    // This order of things is important.\n    // 1. Resize main element early and force layout.\n    this.contentElement.style.setProperty(animatedMarginPropertyName, marginFrom);\n    if (!reverse) {\n      suppressUnused(this.mainElement.offsetWidth);\n      suppressUnused(this.sidebarElementInternal.offsetWidth);\n    }\n\n    // 2. Issue onresize to the sidebar element, its size won't change.\n    if (!reverse && this.sidebarWidgetInternal) {\n      this.sidebarWidgetInternal.doResize();\n    }\n\n    // 3. Configure and run animation\n    this.contentElement.style.setProperty('transition', animatedMarginPropertyName + ' ' + animationTime + 'ms linear');\n\n    const boundAnimationFrame = animationFrame.bind(this);\n    let startTime: number|null = null;\n    function animationFrame(this: SplitWidget): void {\n      this.animationFrameHandle = 0;\n\n      if (!startTime) {\n        // Kick animation on first frame.\n        this.contentElement.style.setProperty(animatedMarginPropertyName, marginTo);\n        startTime = window.performance.now();\n      } else if (window.performance.now() < startTime + animationTime) {\n        // Process regular animation frame.\n        if (this.mainWidgetInternal) {\n          this.mainWidgetInternal.doResize();\n        }\n      } else {\n        // Complete animation.\n        this.cancelAnimation();\n        if (this.mainWidgetInternal) {\n          this.mainWidgetInternal.doResize();\n        }\n        this.dispatchEventToListeners(Events.SidebarSizeChanged, this.sidebarSize());\n        return;\n      }\n      this.animationFrameHandle = this.contentElement.window().requestAnimationFrame(boundAnimationFrame);\n    }\n    this.animationFrameHandle = this.contentElement.window().requestAnimationFrame(boundAnimationFrame);\n  }\n\n  private cancelAnimation(): void {\n    this.contentElement.style.removeProperty('margin-top');\n    this.contentElement.style.removeProperty('margin-right');\n    this.contentElement.style.removeProperty('margin-bottom');\n    this.contentElement.style.removeProperty('margin-left');\n    this.contentElement.style.removeProperty('transition');\n\n    if (this.animationFrameHandle) {\n      this.contentElement.window().cancelAnimationFrame(this.animationFrameHandle);\n      this.animationFrameHandle = 0;\n    }\n    if (this.animationCallback) {\n      this.animationCallback();\n      this.animationCallback = null;\n    }\n  }\n\n  private applyConstraints(sidebarSize: number, userAction?: boolean): number {\n    const totalSize = this.totalSizeDIP();\n    const zoomFactor = this.constraintsInDip ? 1 : ZoomManager.instance().zoomFactor();\n\n    let constraints: Constraints =\n        this.sidebarWidgetInternal ? this.sidebarWidgetInternal.constraints() : new Constraints();\n    let minSidebarSize: 20|number = this.isVertical() ? constraints.minimum.width : constraints.minimum.height;\n    if (!minSidebarSize) {\n      minSidebarSize = MinPadding;\n    }\n    minSidebarSize *= zoomFactor;\n    if (this.sidebarMinimized) {\n      sidebarSize = minSidebarSize;\n    }\n\n    let preferredSidebarSize: 20|number =\n        this.isVertical() ? constraints.preferred.width : constraints.preferred.height;\n    if (!preferredSidebarSize) {\n      preferredSidebarSize = MinPadding;\n    }\n    preferredSidebarSize *= zoomFactor;\n    // Allow sidebar to be less than preferred by explicit user action.\n    if (sidebarSize < preferredSidebarSize) {\n      preferredSidebarSize = Math.max(sidebarSize, minSidebarSize);\n    }\n    preferredSidebarSize += zoomFactor;  // 1 css pixel for splitter border.\n\n    constraints = this.mainWidgetInternal ? this.mainWidgetInternal.constraints() : new Constraints();\n    let minMainSize: 20|number = this.isVertical() ? constraints.minimum.width : constraints.minimum.height;\n    if (!minMainSize) {\n      minMainSize = MinPadding;\n    }\n    minMainSize *= zoomFactor;\n\n    let preferredMainSize: 20|number = this.isVertical() ? constraints.preferred.width : constraints.preferred.height;\n    if (!preferredMainSize) {\n      preferredMainSize = MinPadding;\n    }\n    preferredMainSize *= zoomFactor;\n    const savedMainSize = this.isVertical() ? this.savedVerticalMainSize : this.savedHorizontalMainSize;\n    if (savedMainSize !== null) {\n      preferredMainSize = Math.min(preferredMainSize, savedMainSize * zoomFactor);\n    }\n    if (userAction) {\n      preferredMainSize = minMainSize;\n    }\n\n    // Enough space for preferred.\n    const totalPreferred = preferredMainSize + preferredSidebarSize;\n    if (totalPreferred <= totalSize) {\n      return Platform.NumberUtilities.clamp(sidebarSize, preferredSidebarSize, totalSize - preferredMainSize);\n    }\n\n    // Enough space for minimum.\n    if (minMainSize + minSidebarSize <= totalSize) {\n      const delta = totalPreferred - totalSize;\n      const sidebarDelta = delta * preferredSidebarSize / totalPreferred;\n      sidebarSize = preferredSidebarSize - sidebarDelta;\n      return Platform.NumberUtilities.clamp(sidebarSize, minSidebarSize, totalSize - minMainSize);\n    }\n\n    // Not enough space even for minimum sizes.\n    return Math.max(0, totalSize - minMainSize);\n  }\n\n  wasShown(): void {\n    this.forceUpdateLayout();\n    ZoomManager.instance().addEventListener(ZoomManagerEvents.ZoomChanged, this.onZoomChanged, this);\n  }\n\n  willHide(): void {\n    ZoomManager.instance().removeEventListener(ZoomManagerEvents.ZoomChanged, this.onZoomChanged, this);\n  }\n\n  onResize(): void {\n    this.updateLayout();\n  }\n\n  onLayout(): void {\n    this.updateLayout();\n  }\n\n  calculateConstraints(): Constraints {\n    if (this.showModeInternal === ShowMode.OnlyMain) {\n      return this.mainWidgetInternal ? this.mainWidgetInternal.constraints() : new Constraints();\n    }\n    if (this.showModeInternal === ShowMode.OnlySidebar) {\n      return this.sidebarWidgetInternal ? this.sidebarWidgetInternal.constraints() : new Constraints();\n    }\n\n    let mainConstraints: Constraints =\n        this.mainWidgetInternal ? this.mainWidgetInternal.constraints() : new Constraints();\n    let sidebarConstraints: Constraints =\n        this.sidebarWidgetInternal ? this.sidebarWidgetInternal.constraints() : new Constraints();\n    const min = MinPadding;\n    if (this.isVerticalInternal) {\n      mainConstraints = mainConstraints.widthToMax(min).addWidth(1);  // 1 for splitter\n      sidebarConstraints = sidebarConstraints.widthToMax(min);\n      return mainConstraints.addWidth(sidebarConstraints).heightToMax(sidebarConstraints);\n    }\n    mainConstraints = mainConstraints.heightToMax(min).addHeight(1);  // 1 for splitter\n    sidebarConstraints = sidebarConstraints.heightToMax(min);\n    return mainConstraints.widthToMax(sidebarConstraints).addHeight(sidebarConstraints);\n  }\n\n  private onResizeStart(): void {\n    this.resizeStartSizeDIP = this.sidebarSizeDIP;\n  }\n\n  private onResizeUpdate(event: Common.EventTarget.EventTargetEvent<ResizeUpdatePositionEvent>): void {\n    const offset = event.data.currentPosition - event.data.startPosition;\n    const offsetDIP = ZoomManager.instance().cssToDIP(offset);\n    const newSizeDIP = this.secondIsSidebar ? this.resizeStartSizeDIP - offsetDIP : this.resizeStartSizeDIP + offsetDIP;\n    const constrainedSizeDIP = this.applyConstraints(newSizeDIP, true);\n    this.savedSidebarSizeDIP = constrainedSizeDIP;\n    this.saveSetting();\n    this.innerSetSidebarSizeDIP(constrainedSizeDIP, false, true);\n    if (this.isVertical()) {\n      this.savedVerticalMainSize = this.totalSizeDIP() - this.sidebarSizeDIP;\n    } else {\n      this.savedHorizontalMainSize = this.totalSizeDIP() - this.sidebarSizeDIP;\n    }\n  }\n\n  private onResizeEnd(): void {\n    this.resizeStartSizeDIP = 0;\n  }\n\n  hideDefaultResizer(noSplitter?: boolean): void {\n    this.uninstallResizer(this.resizerElementInternal);\n    this.sidebarElementInternal.classList.toggle('no-default-splitter', Boolean(noSplitter));\n  }\n\n  installResizer(resizerElement: Element): void {\n    this.resizerWidget.addElement((resizerElement as HTMLElement));\n  }\n\n  uninstallResizer(resizerElement: Element): void {\n    this.resizerWidget.removeElement((resizerElement as HTMLElement));\n  }\n\n  hasCustomResizer(): boolean {\n    const elements = this.resizerWidget.elements();\n    return elements.length > 1 || (elements.length === 1 && elements[0] !== this.resizerElementInternal);\n  }\n\n  toggleResizer(resizer: Element, on: boolean): void {\n    if (on) {\n      this.installResizer(resizer);\n    } else {\n      this.uninstallResizer(resizer);\n    }\n  }\n\n  private settingForOrientation(): SettingForOrientation|null {\n    const state = this.setting ? this.setting.get() : {};\n    return this.isVerticalInternal ? state.vertical : state.horizontal;\n  }\n\n  private preferredSidebarSizeDIP(): number {\n    let size: number = this.savedSidebarSizeDIP;\n    if (!size) {\n      size = this.isVerticalInternal ? this.defaultSidebarWidth : this.defaultSidebarHeight;\n      // If we have default value in percents, calculate it on first use.\n      if (0 < size && size < 1) {\n        size *= this.totalSizeDIP();\n      }\n    }\n    return size;\n  }\n\n  private restoreSidebarSizeFromSettings(): void {\n    const settingForOrientation = this.settingForOrientation();\n    this.savedSidebarSizeDIP = settingForOrientation ? settingForOrientation.size : 0;\n  }\n\n  private restoreAndApplyShowModeFromSettings(): void {\n    const orientationState = this.settingForOrientation();\n    this.savedShowMode =\n        orientationState && orientationState.showMode ? orientationState.showMode : this.showModeInternal;\n    this.showModeInternal = this.savedShowMode;\n\n    switch (this.savedShowMode) {\n      case ShowMode.Both:\n        this.showBoth();\n        break;\n      case ShowMode.OnlyMain:\n        this.hideSidebar();\n        break;\n      case ShowMode.OnlySidebar:\n        this.hideMain();\n        break;\n    }\n  }\n\n  private saveShowModeToSettings(): void {\n    this.savedShowMode = this.showModeInternal;\n    this.saveSetting();\n  }\n\n  private saveSetting(): void {\n    if (!this.setting) {\n      return;\n    }\n    const state = this.setting.get();\n    const orientationState = (this.isVerticalInternal ? state.vertical : state.horizontal) || {};\n\n    orientationState.size = this.savedSidebarSizeDIP;\n    if (this.shouldSaveShowMode) {\n      orientationState.showMode = this.savedShowMode;\n    }\n\n    if (this.isVerticalInternal) {\n      state.vertical = orientationState;\n    } else {\n      state.horizontal = orientationState;\n    }\n    this.setting.set(state);\n  }\n\n  private forceUpdateLayout(): void {\n    // Force layout even if sidebar size does not change.\n    this.sidebarSizeDIP = -1;\n    this.updateLayout();\n  }\n\n  private onZoomChanged(): void {\n    this.forceUpdateLayout();\n  }\n\n  createShowHideSidebarButton(\n      showTitle: Common.UIString.LocalizedString, hideTitle: Common.UIString.LocalizedString,\n      shownString: Common.UIString.LocalizedString, hiddenString: Common.UIString.LocalizedString): ToolbarButton {\n    this.showSidebarButtonTitle = showTitle;\n    this.hideSidebarButtonTitle = hideTitle;\n    this.shownSidebarString = shownString;\n    this.hiddenSidebarString = hiddenString;\n    this.showHideSidebarButton = new ToolbarButton('', '');\n    this.showHideSidebarButton.addEventListener(ToolbarButton.Events.Click, buttonClicked, this);\n    this.updateShowHideSidebarButton();\n\n    function buttonClicked(this: SplitWidget): void {\n      this.toggleSidebar();\n    }\n\n    return this.showHideSidebarButton;\n  }\n\n  toggleSidebar(): void {\n    if (this.showModeInternal !== ShowMode.Both) {\n      this.showBoth(true);\n      ARIAUtils.alert(this.shownSidebarString);\n    } else {\n      this.hideSidebar(true);\n      ARIAUtils.alert(this.hiddenSidebarString);\n    }\n  }\n\n  private updateShowHideSidebarButton(): void {\n    if (!this.showHideSidebarButton) {\n      return;\n    }\n    const sidebarHidden = this.showModeInternal === ShowMode.OnlyMain;\n    let glyph = '';\n    if (sidebarHidden) {\n      glyph = this.isVertical() ?\n          (this.isSidebarSecond() ? 'largeicon-show-right-sidebar' : 'largeicon-show-left-sidebar') :\n          (this.isSidebarSecond() ? 'largeicon-show-bottom-sidebar' : 'largeicon-show-top-sidebar');\n    } else {\n      glyph = this.isVertical() ?\n          (this.isSidebarSecond() ? 'largeicon-hide-right-sidebar' : 'largeicon-hide-left-sidebar') :\n          (this.isSidebarSecond() ? 'largeicon-hide-bottom-sidebar' : 'largeicon-hide-top-sidebar');\n    }\n    this.showHideSidebarButton.setGlyph(glyph);\n    this.showHideSidebarButton.setTitle(sidebarHidden ? this.showSidebarButtonTitle : this.hideSidebarButtonTitle);\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum ShowMode {\n  Both = 'Both',\n  OnlyMain = 'OnlyMain',\n  OnlySidebar = 'OnlySidebar',\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  SidebarSizeChanged = 'SidebarSizeChanged',\n  ShowModeChanged = 'ShowModeChanged',\n}\n\nexport type EventTypes = {\n  [Events.SidebarSizeChanged]: number,\n  [Events.ShowModeChanged]: string,\n};\n\nconst MinPadding = 20;\nexport interface SettingForOrientation {\n  showMode: string;\n  size: number;\n}\n\nconst suppressUnused = function(_value: unknown): void {};\n"],
  "mappings": "AA8BA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEO,iCAA0B,OAAO,cAAc,WAAsC,QAAQ;AAAA,EAC1F;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACS;AAAA,EACT;AAAA,EACA;AAAA,EACS;AAAA,EACT;AAAA,EAGA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAER,YACI,YAAqB,iBAA0B,aAAsB,qBACrE,sBAA+B,kBAA4B;AAC7D,UAAM;AACN,SAAK,QAAQ,UAAU,IAAI;AAC3B,SAAK,oBAAoB;AAEzB,SAAK,eAAe,UAAU,IAAI;AAClC,SAAK,yBACD,KAAK,eAAe,YAAY,OAAO;AAC3C,SAAK,cACD,KAAK,eAAe,YAAY,OAAO;AAC3C,IAAC,KAAK,YAAY,YAAY,QAA4B,OAAO;AACjE,IAAC,KAAK,uBAAuB,YAAY,QAA4B,OAAO;AAC5E,SAAK,yBAAyB,KAAK,eAAe,YAAY,OAAO;AACrE,SAAK,qBAAqB;AAE1B,SAAK,gBAAgB,IAAI;AACzB,SAAK,cAAc,WAAW;AAC9B,SAAK,cAAc,iBAAiB,oBAAoB,aAAa,KAAK,eAAe;AACzF,SAAK,cAAc,iBAAiB,oBAAoB,sBAAsB,KAAK,gBAAgB;AACnG,SAAK,cAAc,iBAAiB,oBAAoB,WAAW,KAAK,aAAa;AAErF,SAAK,sBAAsB,uBAAuB;AAClD,SAAK,uBAAuB,wBAAwB,KAAK;AACzD,SAAK,mBAAmB,QAAQ;AAChC,SAAK,qBAAqB;AAC1B,SAAK,UAAU,cAAc,OAAO,SAAS,SAAS,WAAW,cAAc,aAAa,MAAM;AAElG,SAAK,eAAe;AACpB,SAAK,6BAA6B;AAClC,SAAK,qBAAqB;AAC1B,SAAK,wBAAwB;AAC7B,SAAK,uBAAuB;AAC5B,SAAK,oBAAoB;AACzB,SAAK,yBAAyB,OAAO,SAAS;AAC9C,SAAK,yBAAyB,OAAO,SAAS;AAC9C,SAAK,qBAAqB,OAAO,SAAS;AAC1C,SAAK,sBAAsB,OAAO,SAAS;AAC3C,SAAK,wBAAwB;AAC7B,SAAK,qBAAqB;AAC1B,SAAK,mBAAmB;AACxB,SAAK,YAAY;AACjB,SAAK,iBAAiB;AACtB,SAAK,sBAAsB,KAAK;AAChC,SAAK,kBAAkB;AACvB,SAAK,qBAAqB;AAC1B,SAAK,wBAAwB;AAC7B,SAAK,0BAA0B;AAE/B,SAAK,mBAAmB;AAExB,SAAK,iBAAiB;AACtB,SAAK,mBAAmB,SAAS;AACjC,SAAK,gBAAgB,KAAK;AAG1B,SAAK,eAAe,KAAK;AAAA;AAAA,EAG3B,aAAsB;AACpB,WAAO,KAAK;AAAA;AAAA,EAGd,YAAY,YAA2B;AACrC,QAAI,KAAK,uBAAuB,YAAY;AAC1C;AAAA;AAGF,SAAK,iBAAiB;AAEtB,QAAI,KAAK,aAAa;AACpB,WAAK;AAAA;AAAA;AAAA,EAID,iBAAiB,YAA2B;AAClD,SAAK,eAAe,UAAU,OAAO,QAAQ,CAAC;AAC9C,SAAK,eAAe,UAAU,OAAO,QAAQ;AAC7C,SAAK,qBAAqB;AAE1B,SAAK,qBAAqB;AAC1B,SAAK,iBAAiB;AACtB,SAAK;AACL,QAAI,KAAK,oBAAoB;AAC3B,WAAK;AAAA;AAEP,SAAK;AAEL,SAAK,cAAc,YAAY,CAAC;AAChC,SAAK;AAAA;AAAA,EAGC,aAAa,SAAyB;AAC5C,SAAK,eAAe;AACpB,SAAK,6BAA6B;AAGlC,SAAK,YAAY,MAAM,eAAe;AACtC,SAAK,YAAY,MAAM,eAAe;AACtC,SAAK,uBAAuB,MAAM,eAAe;AACjD,SAAK,uBAAuB,MAAM,eAAe;AAEjD,SAAK,uBAAuB,KAAK,2BAA2B,QAAQ;AAAA;AAAA,EAGtE,cAAc,QAAsB;AAClC,QAAI,KAAK,uBAAuB,QAAQ;AACtC;AAAA;AAEF,SAAK;AACL,QAAI,KAAK,oBAAoB;AAC3B,WAAK,mBAAmB;AAAA;AAE1B,SAAK,qBAAqB;AAC1B,QAAI,QAAQ;AACV,aAAO,QAAQ,OAAO;AACtB,UAAI,KAAK,qBAAqB,SAAS,YAAY,KAAK,qBAAqB,SAAS,MAAM;AAC1F,eAAO,KAAK,KAAK;AAAA;AAAA;AAGrB,SAAK;AAAA;AAAA,EAGP,iBAAiB,QAAsB;AACrC,QAAI,KAAK,0BAA0B,QAAQ;AACzC;AAAA;AAEF,SAAK;AACL,QAAI,KAAK,uBAAuB;AAC9B,WAAK,sBAAsB;AAAA;AAE7B,SAAK,wBAAwB;AAC7B,QAAI,QAAQ;AACV,aAAO,QAAQ,OAAO;AACtB,UAAI,KAAK,qBAAqB,SAAS,eAAe,KAAK,qBAAqB,SAAS,MAAM;AAC7F,eAAO,KAAK,KAAK;AAAA;AAAA;AAGrB,SAAK;AAAA;AAAA,EAGP,aAA0B;AACxB,WAAO,KAAK;AAAA;AAAA,EAGd,gBAA6B;AAC3B,WAAO,KAAK;AAAA;AAAA,EAGd,iBAA8B;AAC5B,WAAO,KAAK;AAAA;AAAA,EAGd,iBAAiB,QAAsB;AACrC,QAAI,KAAK,WAAW;AAClB;AAAA;AAEF,QAAI,KAAK,uBAAuB,QAAQ;AACtC,WAAK,qBAAqB;AAAA;AAE5B,QAAI,KAAK,0BAA0B,QAAQ;AACzC,WAAK,wBAAwB;AAAA;AAE/B,SAAK;AAAA;AAAA,EAGP,kBAA2B;AACzB,WAAO,KAAK;AAAA;AAAA,EAGd,uBAA6B;AAC3B,SAAK,qBAAqB;AAC1B,SAAK;AAAA;AAAA,EAGP,WAAmB;AACjB,WAAO,KAAK;AAAA;AAAA,EAGd,mBAAmB,iBAAgC;AACjD,QAAI,oBAAoB,KAAK,iBAAiB;AAC5C;AAAA;AAEF,SAAK,kBAAkB;AACvB,QAAI,CAAC,KAAK,sBAAsB,CAAC,KAAK,mBAAmB,sBAAsB;AAC7E,UAAI,iBAAiB;AACnB,aAAK,eAAe,aAAa,KAAK,aAAa,KAAK;AAAA,aACnD;AACL,aAAK,eAAe,aAAa,KAAK,aAAa,KAAK;AAAA;AAAA,eAEjD,CAAC,KAAK,yBAAyB,CAAC,KAAK,sBAAsB,sBAAsB;AAC1F,UAAI,iBAAiB;AACnB,aAAK,eAAe,aAAa,KAAK,wBAAwB,KAAK;AAAA,aAC9D;AACL,aAAK,eAAe,aAAa,KAAK,wBAAwB,KAAK;AAAA;AAAA,WAEhE;AACL,cAAQ,MAAM;AACd,WAAK,kBAAkB,CAAC;AAAA;AAAA;AAAA,EAI5B,cAA2B;AACzB,QAAI,KAAK,qBAAqB,SAAS,MAAM;AAC3C,aAAO;AAAA;AAET,WAAO,KAAK,qBAAsB,KAAK,kBAAkB,UAAU,SACjC,KAAK,kBAAkB,WAAW;AAAA;AAAA,EAGtE,iBAA0B;AACxB,WAAO,KAAK;AAAA;AAAA,EAGd,SAAS,SAAyB;AAChC,SAAK,SACD,KAAK,uBAAuB,KAAK,oBAAoB,KAAK,wBAAwB,KAAK,aAAa;AACxG,SAAK,eAAe,SAAS;AAAA;AAAA,EAG/B,YAAY,SAAyB;AACnC,SAAK,SACD,KAAK,oBAAoB,KAAK,uBAAuB,KAAK,aAAa,KAAK,wBAAwB;AACxG,SAAK,eAAe,SAAS;AAAA;AAAA,EAG/B,oBAAoB,WAA0B;AAC5C,SAAK,mBAAmB;AACxB,SAAK;AAAA;AAAA,EAGP,qBAA8B;AAC5B,WAAO,KAAK;AAAA;AAAA,EAGN,SACJ,YAAyB,YAAyB,cAAuB,cACzE,SAAyB;AAC3B,SAAK;AAEL,wBAA2C;AACzC,UAAI,YAAY;AAEd,YAAI,eAAe,KAAK,oBAAoB;AAC1C,eAAK,mBAAmB,KACpB,KAAK,SAAS,KAAK,wBAAwB,KAAK,sBAAsB,UAAU;AAAA,mBAC3E,KAAK,uBAAuB;AACrC,eAAK,sBAAsB,KAAK,KAAK;AAAA;AAAA;AAGzC,UAAI,YAAY;AACd,aAAK,YAAY;AACjB,mBAAW;AACX,aAAK,YAAY;AAAA;AAGnB,WAAK,uBAAuB,UAAU,IAAI;AAC1C,mBAAa,UAAU,OAAO;AAC9B,mBAAa,UAAU,IAAI;AAC3B,mBAAa,UAAU,IAAI;AAC3B,mBAAa,UAAU,OAAO;AAC9B,WAAK;AACL,WAAK;AACL,WAAK;AAAA;AAGP,QAAI,SAAS;AACX,WAAK,QAAQ,MAAM,SAAS,KAAK;AAAA,WAC5B;AACL,eAAS,KAAK;AAAA;AAGhB,SAAK,iBAAiB;AACtB,SAAK,aAAa;AAAA;AAAA,EAGZ,sBAA4B;AAAA;AAAA,EAI5B,4BAAkC;AACxC,SAAK,uBAAuB,MAAM,eAAe;AAEjD,SAAK,YAAY,MAAM,eAAe;AACtC,SAAK,YAAY,MAAM,eAAe;AACtC,SAAK,uBAAuB,MAAM,eAAe;AACjD,SAAK,uBAAuB,MAAM,eAAe;AAEjD,SAAK,uBAAuB,MAAM,eAAe;AACjD,SAAK,uBAAuB,MAAM,eAAe;AACjD,SAAK,uBAAuB,MAAM,eAAe;AACjD,SAAK,uBAAuB,MAAM,eAAe;AAEjD,SAAK,uBAAuB,MAAM,eAAe;AACjD,SAAK,uBAAuB,MAAM,eAAe;AACjD,SAAK,uBAAuB,MAAM,eAAe;AACjD,SAAK,uBAAuB,MAAM,eAAe;AAAA;AAAA,EAGnD,SAAS,SAAyB;AAChC,QAAI,KAAK,qBAAqB,SAAS,MAAM;AAC3C,gBAAU;AAAA;AAGZ,SAAK;AACL,SAAK,YAAY,UAAU,OAAO,aAAa;AAC/C,SAAK,uBAAuB,UAAU,OAAO,aAAa;AAC1D,SAAK,uBAAuB,UAAU,OAAO;AAC7C,SAAK,aAAa;AAGlB,SAAK;AACL,QAAI,KAAK,uBAAuB;AAC9B,WAAK,sBAAsB,KAAK,KAAK;AAAA;AAEvC,QAAI,KAAK,oBAAoB;AAC3B,WAAK,mBAAmB,KACpB,KAAK,SAAS,KAAK,wBAAwB,KAAK,sBAAsB,UAAU;AAAA;AAEtF,SAAK;AAEL,SAAK,mBAAmB,KAAK;AAE7B,SAAK,iBAAiB;AACtB,SAAK,eAAe,SAAS;AAC7B,SAAK,aAAa;AAAA;AAAA,EAGpB,aAAa,WAA0B;AACrC,SAAK,cAAc,WAAW;AAAA;AAAA,EAGhC,cAAuB;AACrB,WAAO,KAAK,cAAc;AAAA;AAAA,EAG5B,eAAe,MAAoB;AACjC,UAAM,UAAU,YAAY,WAAW,SAAS;AAChD,SAAK,sBAAsB;AAC3B,SAAK;AACL,SAAK,uBAAuB,SAAS,OAAO;AAAA;AAAA,EAG9C,cAAsB;AACpB,UAAM,UAAU,KAAK,IAAI,GAAG,KAAK;AACjC,WAAO,YAAY,WAAW,SAAS;AAAA;AAAA,EAMjC,eAAuB;AAC7B,QAAI,CAAC,KAAK,cAAc;AACtB,WAAK,eAAe,KAAK,qBAAqB,KAAK,eAAe,cAAc,KAAK,eAAe;AACpG,WAAK,6BACD,KAAK,qBAAqB,KAAK,eAAe,eAAe,KAAK,eAAe;AAAA;AAEvF,WAAO,YAAY,WAAW,SAAS,KAAK;AAAA;AAAA,EAGtC,eAAe,UAAwB;AAC7C,SAAK,mBAAmB;AACxB,SAAK;AACL,SAAK;AACL,SAAK,yBAAyB,OAAO,iBAAiB;AACtD,SAAK;AAAA;AAAA,EAGC,uBAAuB,SAAiB,SAAkB,YAA4B;AAC5F,QAAI,KAAK,qBAAqB,SAAS,QAAQ,CAAC,KAAK,aAAa;AAChE;AAAA;AAGF,cAAU,KAAK,iBAAiB,SAAS;AACzC,QAAI,KAAK,mBAAmB,SAAS;AACnC;AAAA;AAGF,QAAI,CAAC,KAAK,oBAAoB;AAC5B,WAAK,qBACD,KAAK,qBAAqB,KAAK,uBAAuB,cAAc,KAAK,uBAAuB;AAAA;AAKtG,SAAK;AAGL,UAAM,eAAe,KAAK,MAAM,YAAY,WAAW,SAAS;AAChE,UAAM,mBAAmB,eAAe;AACxC,UAAM,gBAAiB,KAAK,eAAe,eAAgB;AAC3D,SAAK,uBAAuB,MAAM,YAAY;AAG9C,QAAI,KAAK,oBAAoB;AAC3B,WAAK,uBAAuB,MAAM,QAAQ;AAC1C,WAAK,YAAY,MAAM,QAAQ;AAC/B,WAAK,uBAAuB,MAAM,SAAS,KAAK,6BAA6B;AAC7E,WAAK,YAAY,MAAM,SAAS,KAAK,6BAA6B;AAAA,WAC7D;AACL,WAAK,uBAAuB,MAAM,SAAS;AAC3C,WAAK,YAAY,MAAM,SAAS;AAChC,WAAK,uBAAuB,MAAM,QAAQ,KAAK,6BAA6B;AAC5E,WAAK,YAAY,MAAM,QAAQ,KAAK,6BAA6B;AAAA;AAInE,QAAI,KAAK,oBAAoB;AAC3B,UAAI,KAAK,iBAAiB;AACxB,aAAK,uBAAuB,MAAM,QAAQ;AAC1C,aAAK,uBAAuB,MAAM,cAAc,CAAC,KAAK,qBAAqB,IAAI;AAAA,aAC1E;AACL,aAAK,uBAAuB,MAAM,OAAO;AACzC,aAAK,uBAAuB,MAAM,aAAa,CAAC,KAAK,qBAAqB,IAAI;AAAA;AAAA,WAE3E;AACL,UAAI,KAAK,iBAAiB;AACxB,aAAK,uBAAuB,MAAM,SAAS;AAC3C,aAAK,uBAAuB,MAAM,eAAe,CAAC,KAAK,qBAAqB,IAAI;AAAA,aAC3E;AACL,aAAK,uBAAuB,MAAM,MAAM;AACxC,aAAK,uBAAuB,MAAM,YAAY,CAAC,KAAK,qBAAqB,IAAI;AAAA;AAAA;AAIjF,SAAK,iBAAiB;AAItB,QAAI,SAAS;AACX,WAAK,QAAQ;AAAA,WACR;AAEL,WAAK;AACL,WAAK,yBAAyB,OAAO,oBAAoB,KAAK;AAAA;AAAA;AAAA,EAI1D,QAAQ,SAAkB,UAA+B;AAC/D,UAAM,gBAAgB;AACtB,SAAK,oBAAoB,YAAY;AAErC,QAAI;AACJ,QAAI,KAAK,oBAAoB;AAC3B,mCAA6B,KAAK,kBAAkB,iBAAiB;AAAA,WAChE;AACL,mCAA6B,KAAK,kBAAkB,kBAAkB;AAAA;AAGxE,UAAM,aAAa,UAAU,MAAM,MAAM,YAAY,WAAW,SAAS,KAAK,kBAAkB;AAChG,UAAM,WAAW,UAAU,MAAM,YAAY,WAAW,SAAS,KAAK,kBAAkB,OAAO;AAI/F,SAAK,eAAe,MAAM,YAAY,4BAA4B;AAClE,QAAI,CAAC,SAAS;AACZ,qBAAe,KAAK,YAAY;AAChC,qBAAe,KAAK,uBAAuB;AAAA;AAI7C,QAAI,CAAC,WAAW,KAAK,uBAAuB;AAC1C,WAAK,sBAAsB;AAAA;AAI7B,SAAK,eAAe,MAAM,YAAY,cAAc,6BAA6B,MAAM,gBAAgB;AAEvG,UAAM,sBAAsB,eAAe,KAAK;AAChD,QAAI,YAAyB;AAC7B,8BAAiD;AAC/C,WAAK,uBAAuB;AAE5B,UAAI,CAAC,WAAW;AAEd,aAAK,eAAe,MAAM,YAAY,4BAA4B;AAClE,oBAAY,OAAO,YAAY;AAAA,iBACtB,OAAO,YAAY,QAAQ,YAAY,eAAe;AAE/D,YAAI,KAAK,oBAAoB;AAC3B,eAAK,mBAAmB;AAAA;AAAA,aAErB;AAEL,aAAK;AACL,YAAI,KAAK,oBAAoB;AAC3B,eAAK,mBAAmB;AAAA;AAE1B,aAAK,yBAAyB,OAAO,oBAAoB,KAAK;AAC9D;AAAA;AAEF,WAAK,uBAAuB,KAAK,eAAe,SAAS,sBAAsB;AAAA;AAEjF,SAAK,uBAAuB,KAAK,eAAe,SAAS,sBAAsB;AAAA;AAAA,EAGzE,kBAAwB;AAC9B,SAAK,eAAe,MAAM,eAAe;AACzC,SAAK,eAAe,MAAM,eAAe;AACzC,SAAK,eAAe,MAAM,eAAe;AACzC,SAAK,eAAe,MAAM,eAAe;AACzC,SAAK,eAAe,MAAM,eAAe;AAEzC,QAAI,KAAK,sBAAsB;AAC7B,WAAK,eAAe,SAAS,qBAAqB,KAAK;AACvD,WAAK,uBAAuB;AAAA;AAE9B,QAAI,KAAK,mBAAmB;AAC1B,WAAK;AACL,WAAK,oBAAoB;AAAA;AAAA;AAAA,EAIrB,iBAAiB,aAAqB,YAA8B;AAC1E,UAAM,YAAY,KAAK;AACvB,UAAM,aAAa,KAAK,mBAAmB,IAAI,YAAY,WAAW;AAEtE,QAAI,cACA,KAAK,wBAAwB,KAAK,sBAAsB,gBAAgB,IAAI;AAChF,QAAI,iBAA4B,KAAK,eAAe,YAAY,QAAQ,QAAQ,YAAY,QAAQ;AACpG,QAAI,CAAC,gBAAgB;AACnB,uBAAiB;AAAA;AAEnB,sBAAkB;AAClB,QAAI,KAAK,kBAAkB;AACzB,oBAAc;AAAA;AAGhB,QAAI,uBACA,KAAK,eAAe,YAAY,UAAU,QAAQ,YAAY,UAAU;AAC5E,QAAI,CAAC,sBAAsB;AACzB,6BAAuB;AAAA;AAEzB,4BAAwB;AAExB,QAAI,cAAc,sBAAsB;AACtC,6BAAuB,KAAK,IAAI,aAAa;AAAA;AAE/C,4BAAwB;AAExB,kBAAc,KAAK,qBAAqB,KAAK,mBAAmB,gBAAgB,IAAI;AACpF,QAAI,cAAyB,KAAK,eAAe,YAAY,QAAQ,QAAQ,YAAY,QAAQ;AACjG,QAAI,CAAC,aAAa;AAChB,oBAAc;AAAA;AAEhB,mBAAe;AAEf,QAAI,oBAA+B,KAAK,eAAe,YAAY,UAAU,QAAQ,YAAY,UAAU;AAC3G,QAAI,CAAC,mBAAmB;AACtB,0BAAoB;AAAA;AAEtB,yBAAqB;AACrB,UAAM,gBAAgB,KAAK,eAAe,KAAK,wBAAwB,KAAK;AAC5E,QAAI,kBAAkB,MAAM;AAC1B,0BAAoB,KAAK,IAAI,mBAAmB,gBAAgB;AAAA;AAElE,QAAI,YAAY;AACd,0BAAoB;AAAA;AAItB,UAAM,iBAAiB,oBAAoB;AAC3C,QAAI,kBAAkB,WAAW;AAC/B,aAAO,SAAS,gBAAgB,MAAM,aAAa,sBAAsB,YAAY;AAAA;AAIvF,QAAI,cAAc,kBAAkB,WAAW;AAC7C,YAAM,QAAQ,iBAAiB;AAC/B,YAAM,eAAe,QAAQ,uBAAuB;AACpD,oBAAc,uBAAuB;AACrC,aAAO,SAAS,gBAAgB,MAAM,aAAa,gBAAgB,YAAY;AAAA;AAIjF,WAAO,KAAK,IAAI,GAAG,YAAY;AAAA;AAAA,EAGjC,WAAiB;AACf,SAAK;AACL,gBAAY,WAAW,iBAAiB,kBAAkB,aAAa,KAAK,eAAe;AAAA;AAAA,EAG7F,WAAiB;AACf,gBAAY,WAAW,oBAAoB,kBAAkB,aAAa,KAAK,eAAe;AAAA;AAAA,EAGhG,WAAiB;AACf,SAAK;AAAA;AAAA,EAGP,WAAiB;AACf,SAAK;AAAA;AAAA,EAGP,uBAAoC;AAClC,QAAI,KAAK,qBAAqB,SAAS,UAAU;AAC/C,aAAO,KAAK,qBAAqB,KAAK,mBAAmB,gBAAgB,IAAI;AAAA;AAE/E,QAAI,KAAK,qBAAqB,SAAS,aAAa;AAClD,aAAO,KAAK,wBAAwB,KAAK,sBAAsB,gBAAgB,IAAI;AAAA;AAGrF,QAAI,kBACA,KAAK,qBAAqB,KAAK,mBAAmB,gBAAgB,IAAI;AAC1E,QAAI,qBACA,KAAK,wBAAwB,KAAK,sBAAsB,gBAAgB,IAAI;AAChF,UAAM,MAAM;AACZ,QAAI,KAAK,oBAAoB;AAC3B,wBAAkB,gBAAgB,WAAW,KAAK,SAAS;AAC3D,2BAAqB,mBAAmB,WAAW;AACnD,aAAO,gBAAgB,SAAS,oBAAoB,YAAY;AAAA;AAElE,sBAAkB,gBAAgB,YAAY,KAAK,UAAU;AAC7D,yBAAqB,mBAAmB,YAAY;AACpD,WAAO,gBAAgB,WAAW,oBAAoB,UAAU;AAAA;AAAA,EAG1D,gBAAsB;AAC5B,SAAK,qBAAqB,KAAK;AAAA;AAAA,EAGzB,eAAe,OAA6E;AAClG,UAAM,SAAS,MAAM,KAAK,kBAAkB,MAAM,KAAK;AACvD,UAAM,YAAY,YAAY,WAAW,SAAS;AAClD,UAAM,aAAa,KAAK,kBAAkB,KAAK,qBAAqB,YAAY,KAAK,qBAAqB;AAC1G,UAAM,qBAAqB,KAAK,iBAAiB,YAAY;AAC7D,SAAK,sBAAsB;AAC3B,SAAK;AACL,SAAK,uBAAuB,oBAAoB,OAAO;AACvD,QAAI,KAAK,cAAc;AACrB,WAAK,wBAAwB,KAAK,iBAAiB,KAAK;AAAA,WACnD;AACL,WAAK,0BAA0B,KAAK,iBAAiB,KAAK;AAAA;AAAA;AAAA,EAItD,cAAoB;AAC1B,SAAK,qBAAqB;AAAA;AAAA,EAG5B,mBAAmB,YAA4B;AAC7C,SAAK,iBAAiB,KAAK;AAC3B,SAAK,uBAAuB,UAAU,OAAO,uBAAuB,QAAQ;AAAA;AAAA,EAG9E,eAAe,gBAA+B;AAC5C,SAAK,cAAc,WAAY;AAAA;AAAA,EAGjC,iBAAiB,gBAA+B;AAC9C,SAAK,cAAc,cAAe;AAAA;AAAA,EAGpC,mBAA4B;AAC1B,UAAM,WAAW,KAAK,cAAc;AACpC,WAAO,SAAS,SAAS,KAAM,SAAS,WAAW,KAAK,SAAS,OAAO,KAAK;AAAA;AAAA,EAG/E,cAAc,SAAkB,IAAmB;AACjD,QAAI,IAAI;AACN,WAAK,eAAe;AAAA,WACf;AACL,WAAK,iBAAiB;AAAA;AAAA;AAAA,EAIlB,wBAAoD;AAC1D,UAAM,QAAQ,KAAK,UAAU,KAAK,QAAQ,QAAQ;AAClD,WAAO,KAAK,qBAAqB,MAAM,WAAW,MAAM;AAAA;AAAA,EAGlD,0BAAkC;AACxC,QAAI,OAAe,KAAK;AACxB,QAAI,CAAC,MAAM;AACT,aAAO,KAAK,qBAAqB,KAAK,sBAAsB,KAAK;AAEjE,UAAI,IAAI,QAAQ,OAAO,GAAG;AACxB,gBAAQ,KAAK;AAAA;AAAA;AAGjB,WAAO;AAAA;AAAA,EAGD,iCAAuC;AAC7C,UAAM,wBAAwB,KAAK;AACnC,SAAK,sBAAsB,wBAAwB,sBAAsB,OAAO;AAAA;AAAA,EAG1E,sCAA4C;AAClD,UAAM,mBAAmB,KAAK;AAC9B,SAAK,gBACD,oBAAoB,iBAAiB,WAAW,iBAAiB,WAAW,KAAK;AACrF,SAAK,mBAAmB,KAAK;AAE7B,YAAQ,KAAK;AAAA,WACN,SAAS;AACZ,aAAK;AACL;AAAA,WACG,SAAS;AACZ,aAAK;AACL;AAAA,WACG,SAAS;AACZ,aAAK;AACL;AAAA;AAAA;AAAA,EAIE,yBAA+B;AACrC,SAAK,gBAAgB,KAAK;AAC1B,SAAK;AAAA;AAAA,EAGC,cAAoB;AAC1B,QAAI,CAAC,KAAK,SAAS;AACjB;AAAA;AAEF,UAAM,QAAQ,KAAK,QAAQ;AAC3B,UAAM,mBAAoB,MAAK,qBAAqB,MAAM,WAAW,MAAM,eAAe;AAE1F,qBAAiB,OAAO,KAAK;AAC7B,QAAI,KAAK,oBAAoB;AAC3B,uBAAiB,WAAW,KAAK;AAAA;AAGnC,QAAI,KAAK,oBAAoB;AAC3B,YAAM,WAAW;AAAA,WACZ;AACL,YAAM,aAAa;AAAA;AAErB,SAAK,QAAQ,IAAI;AAAA;AAAA,EAGX,oBAA0B;AAEhC,SAAK,iBAAiB;AACtB,SAAK;AAAA;AAAA,EAGC,gBAAsB;AAC5B,SAAK;AAAA;AAAA,EAGP,4BACI,WAA4C,WAC5C,aAA8C,cAA8D;AAC9G,SAAK,yBAAyB;AAC9B,SAAK,yBAAyB;AAC9B,SAAK,qBAAqB;AAC1B,SAAK,sBAAsB;AAC3B,SAAK,wBAAwB,IAAI,cAAc,IAAI;AACnD,SAAK,sBAAsB,iBAAiB,cAAc,OAAO,OAAO,eAAe;AACvF,SAAK;AAEL,6BAAgD;AAC9C,WAAK;AAAA;AAGP,WAAO,KAAK;AAAA;AAAA,EAGd,gBAAsB;AACpB,QAAI,KAAK,qBAAqB,SAAS,MAAM;AAC3C,WAAK,SAAS;AACd,gBAAU,MAAM,KAAK;AAAA,WAChB;AACL,WAAK,YAAY;AACjB,gBAAU,MAAM,KAAK;AAAA;AAAA;AAAA,EAIjB,8BAAoC;AAC1C,QAAI,CAAC,KAAK,uBAAuB;AAC/B;AAAA;AAEF,UAAM,gBAAgB,KAAK,qBAAqB,SAAS;AACzD,QAAI,QAAQ;AACZ,QAAI,eAAe;AACjB,cAAQ,KAAK,eACR,KAAK,oBAAoB,iCAAiC,gCAC1D,KAAK,oBAAoB,kCAAkC;AAAA,WAC3D;AACL,cAAQ,KAAK,eACR,KAAK,oBAAoB,iCAAiC,gCAC1D,KAAK,oBAAoB,kCAAkC;AAAA;AAElE,SAAK,sBAAsB,SAAS;AACpC,SAAK,sBAAsB,SAAS,gBAAgB,KAAK,yBAAyB,KAAK;AAAA;AAAA;AAMpF,WAAK,WAAL,kBAAK,cAAL;AACL,sBAAO;AACP,0BAAW;AACX,6BAAc;AAHJ;AAAA;AAQL,WAAK,SAAL,kBAAK,YAAL;AACL,kCAAqB;AACrB,+BAAkB;AAFR;AAAA;AAUZ,MAAM,aAAa;AAMnB,MAAM,iBAAiB,SAAS,QAAuB;AAAA;",
  "names": []
}
