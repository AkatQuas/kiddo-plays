{
  "version": 3,
  "sources": ["../../../../../../front_end/ui/legacy/SettingsUI.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2014 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Settings from '../components/settings/settings.js';\n\nimport * as ARIAUtils from './ARIAUtils.js';\nimport {InspectorView} from './InspectorView.js';\nimport {Tooltip} from './Tooltip.js';\nimport {CheckboxLabel} from './UIUtils.js';\n\nconst UIStrings = {\n  /**\n  *@description Note when a setting change will require the user to reload DevTools\n  */\n  srequiresReload: '*Requires reload',\n  /**\n  *@description Message to display if a setting change requires a reload of DevTools\n  */\n  oneOrMoreSettingsHaveChanged: 'One or more settings have changed which requires a reload to take effect.',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/SettingsUI.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport const createSettingCheckbox = function(\n    name: string, setting: Common.Settings.Setting<boolean>, omitParagraphElement?: boolean,\n    tooltip?: string): Element {\n  const label = CheckboxLabel.create(name);\n  if (tooltip) {\n    Tooltip.install(label, tooltip);\n  }\n\n  const input = label.checkboxElement;\n  input.name = name;\n  bindCheckbox(input, setting);\n\n  if (omitParagraphElement) {\n    return label;\n  }\n\n  const p = document.createElement('p');\n  p.appendChild(label);\n  return p;\n};\n\nconst createSettingSelect = function(\n    name: string, options: Common.Settings.SimpleSettingOption[], requiresReload: boolean|null,\n    setting: Common.Settings.Setting<unknown>, subtitle?: string): Element {\n  const container = document.createElement('div');\n  const settingSelectElement = container.createChild('p');\n  settingSelectElement.classList.add('settings-select');\n  const label = settingSelectElement.createChild('label');\n  const select = (settingSelectElement.createChild('select', 'chrome-select') as HTMLSelectElement);\n  label.textContent = name;\n  if (subtitle) {\n    container.classList.add('chrome-select-label');\n    label.createChild('p').textContent = subtitle;\n  }\n  ARIAUtils.bindLabelToControl(label, select);\n\n  for (const option of options) {\n    if (option.text && typeof option.value === 'string') {\n      select.add(new Option(option.text, option.value));\n    }\n  }\n\n  let reloadWarning: HTMLElement|(Element | null) = (null as Element | null);\n  if (requiresReload) {\n    reloadWarning = container.createChild('span', 'reload-warning hidden');\n    reloadWarning.textContent = i18nString(UIStrings.srequiresReload);\n    ARIAUtils.markAsAlert(reloadWarning);\n  }\n\n  setting.addChangeListener(settingChanged);\n  settingChanged();\n  select.addEventListener('change', selectChanged, false);\n  return container;\n\n  function settingChanged(): void {\n    const newValue = setting.get();\n    for (let i = 0; i < options.length; i++) {\n      if (options[i].value === newValue) {\n        select.selectedIndex = i;\n      }\n    }\n    select.disabled = setting.disabled();\n  }\n\n  function selectChanged(): void {\n    // Don't use event.target.value to avoid conversion of the value to string.\n    setting.set(options[select.selectedIndex].value);\n    if (reloadWarning) {\n      reloadWarning.classList.remove('hidden');\n      InspectorView.instance().displayReloadRequiredWarning(i18nString(UIStrings.oneOrMoreSettingsHaveChanged));\n    }\n  }\n};\n\nexport const bindCheckbox = function(inputElement: Element, setting: Common.Settings.Setting<boolean>): void {\n  const input = (inputElement as HTMLInputElement);\n  function settingChanged(): void {\n    if (input.checked !== setting.get()) {\n      input.checked = setting.get();\n    }\n  }\n  setting.addChangeListener(settingChanged);\n  settingChanged();\n\n  function inputChanged(): void {\n    if (setting.get() !== input.checked) {\n      setting.set(input.checked);\n    }\n  }\n  input.addEventListener('change', inputChanged, false);\n};\n\nexport const createCustomSetting = function(name: string, element: Element): Element {\n  const p = document.createElement('p');\n  p.classList.add('settings-select');\n  const label = p.createChild('label');\n  label.textContent = name;\n  ARIAUtils.bindLabelToControl(label, element);\n  p.appendChild(element);\n  return p;\n};\n\nexport const createControlForSetting = function(setting: Common.Settings.Setting<unknown>, subtitle?: string): Element|\n    null {\n      const uiTitle = setting.title();\n      switch (setting.type()) {\n        case Common.Settings.SettingType.BOOLEAN: {\n          const component = new Settings.SettingCheckbox.SettingCheckbox();\n          component.data = {setting: setting as Common.Settings.Setting<boolean>};\n          return component;\n        }\n        case Common.Settings.SettingType.ENUM:\n          if (Array.isArray(setting.options())) {\n            return createSettingSelect(uiTitle, setting.options(), setting.reloadRequired(), setting, subtitle);\n          }\n          console.error('Enum setting defined without options');\n          return null;\n        default:\n          console.error('Invalid setting type: ' + setting.type());\n          return null;\n      }\n    };\n\nexport interface SettingUI {\n  settingElement(): Element|null;\n}\n"],
  "mappings": "AA8BA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,MAAM,YAAY;AAAA,EAIhB,iBAAiB;AAAA,EAIjB,8BAA8B;AAAA;AAEhC,MAAM,OAAO,KAAK,KAAK,kBAAkB,2BAA2B;AACpE,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AACzD,aAAM,wBAAwB,SACjC,MAAc,SAA2C,sBACzD,SAA2B;AAC7B,QAAM,QAAQ,cAAc,OAAO;AACnC,MAAI,SAAS;AACX,YAAQ,QAAQ,OAAO;AAAA;AAGzB,QAAM,QAAQ,MAAM;AACpB,QAAM,OAAO;AACb,eAAa,OAAO;AAEpB,MAAI,sBAAsB;AACxB,WAAO;AAAA;AAGT,QAAM,IAAI,SAAS,cAAc;AACjC,IAAE,YAAY;AACd,SAAO;AAAA;AAGT,MAAM,sBAAsB,SACxB,MAAc,SAAgD,gBAC9D,SAA2C,UAA4B;AACzE,QAAM,YAAY,SAAS,cAAc;AACzC,QAAM,uBAAuB,UAAU,YAAY;AACnD,uBAAqB,UAAU,IAAI;AACnC,QAAM,QAAQ,qBAAqB,YAAY;AAC/C,QAAM,SAAU,qBAAqB,YAAY,UAAU;AAC3D,QAAM,cAAc;AACpB,MAAI,UAAU;AACZ,cAAU,UAAU,IAAI;AACxB,UAAM,YAAY,KAAK,cAAc;AAAA;AAEvC,YAAU,mBAAmB,OAAO;AAEpC,aAAW,UAAU,SAAS;AAC5B,QAAI,OAAO,QAAQ,OAAO,OAAO,UAAU,UAAU;AACnD,aAAO,IAAI,IAAI,OAAO,OAAO,MAAM,OAAO;AAAA;AAAA;AAI9C,MAAI,gBAA+C;AACnD,MAAI,gBAAgB;AAClB,oBAAgB,UAAU,YAAY,QAAQ;AAC9C,kBAAc,cAAc,WAAW,UAAU;AACjD,cAAU,YAAY;AAAA;AAGxB,UAAQ,kBAAkB;AAC1B;AACA,SAAO,iBAAiB,UAAU,eAAe;AACjD,SAAO;AAEP,4BAAgC;AAC9B,UAAM,WAAW,QAAQ;AACzB,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,UAAI,QAAQ,GAAG,UAAU,UAAU;AACjC,eAAO,gBAAgB;AAAA;AAAA;AAG3B,WAAO,WAAW,QAAQ;AAAA;AAG5B,2BAA+B;AAE7B,YAAQ,IAAI,QAAQ,OAAO,eAAe;AAC1C,QAAI,eAAe;AACjB,oBAAc,UAAU,OAAO;AAC/B,oBAAc,WAAW,6BAA6B,WAAW,UAAU;AAAA;AAAA;AAAA;AAK1E,aAAM,eAAe,SAAS,cAAuB,SAAiD;AAC3G,QAAM,QAAS;AACf,4BAAgC;AAC9B,QAAI,MAAM,YAAY,QAAQ,OAAO;AACnC,YAAM,UAAU,QAAQ;AAAA;AAAA;AAG5B,UAAQ,kBAAkB;AAC1B;AAEA,0BAA8B;AAC5B,QAAI,QAAQ,UAAU,MAAM,SAAS;AACnC,cAAQ,IAAI,MAAM;AAAA;AAAA;AAGtB,QAAM,iBAAiB,UAAU,cAAc;AAAA;AAG1C,aAAM,sBAAsB,SAAS,MAAc,SAA2B;AACnF,QAAM,IAAI,SAAS,cAAc;AACjC,IAAE,UAAU,IAAI;AAChB,QAAM,QAAQ,EAAE,YAAY;AAC5B,QAAM,cAAc;AACpB,YAAU,mBAAmB,OAAO;AACpC,IAAE,YAAY;AACd,SAAO;AAAA;AAGF,aAAM,0BAA0B,SAAS,SAA2C,UAClF;AACH,QAAM,UAAU,QAAQ;AACxB,UAAQ,QAAQ;AAAA,SACT,OAAO,SAAS,YAAY,SAAS;AACxC,YAAM,YAAY,IAAI,SAAS,gBAAgB;AAC/C,gBAAU,OAAO,EAAC;AAClB,aAAO;AAAA;AAAA,SAEJ,OAAO,SAAS,YAAY;AAC/B,UAAI,MAAM,QAAQ,QAAQ,YAAY;AACpC,eAAO,oBAAoB,SAAS,QAAQ,WAAW,QAAQ,kBAAkB,SAAS;AAAA;AAE5F,cAAQ,MAAM;AACd,aAAO;AAAA;AAEP,cAAQ,MAAM,2BAA2B,QAAQ;AACjD,aAAO;AAAA;AAAA;",
  "names": []
}
