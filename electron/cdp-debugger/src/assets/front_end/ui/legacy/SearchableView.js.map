{
  "version": 3,
  "sources": ["../../../../../../front_end/ui/legacy/SearchableView.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2006, 2007, 2008 Apple Inc.  All rights reserved.\n * Copyright (C) 2007 Matt Lilek (pewtermoose@gmail.com).\n * Copyright (C) 2009 Joseph Pecoraro\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\n\nimport * as ARIAUtils from './ARIAUtils.js';\nimport {HistoryInput} from './HistoryInput.js';\nimport {InspectorView} from './InspectorView.js';\nimport searchableViewStyles from './searchableView.css.legacy.js';\nimport {Toolbar, ToolbarButton, ToolbarToggle} from './Toolbar.js';\nimport {Tooltip} from './Tooltip.js';\nimport {createTextButton} from './UIUtils.js';\nimport {VBox} from './Widget.js';\n\nconst UIStrings = {\n  /**\n  *@description Text on a button to replace one instance with input text for the ctrl+F search bar\n  */\n  replace: 'Replace',\n  /**\n  *@description Text to find an item\n  */\n  findString: 'Find',\n  /**\n  *@description Text on a button to search previous instance for the ctrl+F search bar\n  */\n  searchPrevious: 'Search previous',\n  /**\n  *@description Text on a button to search next instance for the ctrl+F search bar\n  */\n  searchNext: 'Search next',\n  /**\n  *@description Text to search by matching case of the input\n  */\n  matchCase: 'Match Case',\n  /**\n  *@description Text for searching with regular expressinn\n  */\n  useRegularExpression: 'Use Regular Expression',\n  /**\n  *@description Text to cancel something\n  */\n  cancel: 'Cancel',\n  /**\n  *@description Text on a button to replace all instances with input text for the ctrl+F search bar\n  */\n  replaceAll: 'Replace all',\n  /**\n  *@description Text to indicate the current match index and the total number of matches for the ctrl+F search bar\n  *@example {2} PH1\n  *@example {3} PH2\n  */\n  dOfD: '{PH1} of {PH2}',\n  /**\n  *@description Text to indicate search result for the ctrl+F search bar\n  */\n  matchString: '1 match',\n  /**\n  *@description Text to indicate search result for the ctrl+F search bar\n  *@example {2} PH1\n  */\n  dMatches: '{PH1} matches',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/SearchableView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class SearchableView extends VBox {\n  private searchProvider: Searchable;\n  private replaceProvider: Replaceable|null;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private setting: Common.Settings.Setting<any>|null;\n  private replaceable: boolean;\n  private readonly footerElementContainer: HTMLElement;\n  private readonly footerElement: HTMLElement;\n  private replaceToggleButton: ToolbarToggle;\n  private searchInputElement: HistoryInput;\n  private matchesElement: HTMLElement;\n  private searchNavigationPrevElement: HTMLElement;\n  private searchNavigationNextElement: HTMLElement;\n  private readonly replaceInputElement: HTMLInputElement;\n  private readonly buttonsContainer: HTMLElement;\n  private caseSensitiveButton: ToolbarToggle|undefined;\n  private regexButton: ToolbarToggle|undefined;\n  private readonly secondRowButtons: HTMLElement;\n  private replaceButtonElement: HTMLButtonElement;\n  private replaceAllButtonElement: HTMLButtonElement;\n  private minimalSearchQuerySize: number;\n  private searchIsVisible?: boolean;\n  private currentQuery?: string;\n  private valueChangedTimeoutId?: number;\n\n  constructor(searchable: Searchable, replaceable: Replaceable|null, settingName?: string) {\n    super(true);\n    this.registerRequiredCSS(searchableViewStyles);\n    searchableViewsByElement.set(this.element, this);\n\n    this.searchProvider = searchable;\n    this.replaceProvider = replaceable;\n    this.setting = settingName ? Common.Settings.Settings.instance().createSetting(settingName, {}) : null;\n    this.replaceable = false;\n\n    this.contentElement.createChild('slot');\n    this.footerElementContainer = this.contentElement.createChild('div', 'search-bar hidden');\n    this.footerElementContainer.style.order = '100';\n    this.footerElement = this.footerElementContainer.createChild('div', 'toolbar-search');\n\n    const replaceToggleToolbar = new Toolbar('replace-toggle-toolbar', this.footerElement);\n    this.replaceToggleButton = new ToolbarToggle(i18nString(UIStrings.replace), 'mediumicon-replace');\n    this.replaceToggleButton.addEventListener(ToolbarButton.Events.Click, this.toggleReplace, this);\n    replaceToggleToolbar.appendToolbarItem(this.replaceToggleButton);\n\n    const searchInputElements = this.footerElement.createChild('div', 'toolbar-search-inputs');\n    const searchControlElement = searchInputElements.createChild('div', 'toolbar-search-control');\n\n    this.searchInputElement = HistoryInput.create();\n    this.searchInputElement.type = 'search';\n    this.searchInputElement.classList.add('search-replace', 'custom-search-input');\n    this.searchInputElement.id = 'search-input-field';\n    this.searchInputElement.placeholder = i18nString(UIStrings.findString);\n    searchControlElement.appendChild(this.searchInputElement);\n\n    this.matchesElement = searchControlElement.createChild('label', 'search-results-matches');\n    this.matchesElement.setAttribute('for', 'search-input-field');\n\n    const searchNavigationElement = searchControlElement.createChild('div', 'toolbar-search-navigation-controls');\n\n    this.searchNavigationPrevElement =\n        searchNavigationElement.createChild('div', 'toolbar-search-navigation toolbar-search-navigation-prev');\n    this.searchNavigationPrevElement.addEventListener('click', this.onPrevButtonSearch.bind(this), false);\n    Tooltip.install(this.searchNavigationPrevElement, i18nString(UIStrings.searchPrevious));\n    ARIAUtils.setAccessibleName(this.searchNavigationPrevElement, i18nString(UIStrings.searchPrevious));\n\n    this.searchNavigationNextElement =\n        searchNavigationElement.createChild('div', 'toolbar-search-navigation toolbar-search-navigation-next');\n    this.searchNavigationNextElement.addEventListener('click', this.onNextButtonSearch.bind(this), false);\n    Tooltip.install(this.searchNavigationNextElement, i18nString(UIStrings.searchNext));\n    ARIAUtils.setAccessibleName(this.searchNavigationNextElement, i18nString(UIStrings.searchNext));\n\n    this.searchInputElement.addEventListener('keydown', this.onSearchKeyDown.bind(this), true);\n    this.searchInputElement.addEventListener('input', this.onInput.bind(this), false);\n    this.replaceInputElement =\n        (searchInputElements.createChild('input', 'search-replace toolbar-replace-control hidden') as HTMLInputElement);\n    this.replaceInputElement.addEventListener('keydown', this.onReplaceKeyDown.bind(this), true);\n    this.replaceInputElement.placeholder = i18nString(UIStrings.replace);\n\n    this.buttonsContainer = this.footerElement.createChild('div', 'toolbar-search-buttons');\n    const firstRowButtons = this.buttonsContainer.createChild('div', 'first-row-buttons');\n\n    const toolbar = new Toolbar('toolbar-search-options', firstRowButtons);\n\n    if (this.searchProvider.supportsCaseSensitiveSearch()) {\n      this.caseSensitiveButton = new ToolbarToggle(i18nString(UIStrings.matchCase));\n      this.caseSensitiveButton.setText('Aa');\n      this.caseSensitiveButton.addEventListener(ToolbarButton.Events.Click, this.toggleCaseSensitiveSearch, this);\n      toolbar.appendToolbarItem(this.caseSensitiveButton);\n    }\n\n    if (this.searchProvider.supportsRegexSearch()) {\n      this.regexButton = new ToolbarToggle(i18nString(UIStrings.useRegularExpression));\n      this.regexButton.setText('.*');\n      this.regexButton.addEventListener(ToolbarButton.Events.Click, this.toggleRegexSearch, this);\n      toolbar.appendToolbarItem(this.regexButton);\n    }\n\n    const cancelButtonElement =\n        createTextButton(i18nString(UIStrings.cancel), this.closeSearch.bind(this), 'search-action-button');\n    firstRowButtons.appendChild(cancelButtonElement);\n\n    this.secondRowButtons = this.buttonsContainer.createChild('div', 'second-row-buttons hidden');\n\n    this.replaceButtonElement =\n        createTextButton(i18nString(UIStrings.replace), this.replace.bind(this), 'search-action-button');\n    this.replaceButtonElement.disabled = true;\n    this.secondRowButtons.appendChild(this.replaceButtonElement);\n\n    this.replaceAllButtonElement =\n        createTextButton(i18nString(UIStrings.replaceAll), this.replaceAll.bind(this), 'search-action-button');\n    this.secondRowButtons.appendChild(this.replaceAllButtonElement);\n    this.replaceAllButtonElement.disabled = true;\n\n    this.minimalSearchQuerySize = 3;\n    this.loadSetting();\n  }\n\n  static fromElement(element: Element|null): SearchableView|null {\n    let view: (SearchableView|null)|null = null;\n    while (element && !view) {\n      view = searchableViewsByElement.get(element) || null;\n      element = element.parentElementOrShadowHost();\n    }\n    return view;\n  }\n\n  private toggleCaseSensitiveSearch(): void {\n    if (this.caseSensitiveButton) {\n      this.caseSensitiveButton.setToggled(!this.caseSensitiveButton.toggled());\n    }\n    this.saveSetting();\n    this.performSearch(false, true);\n  }\n\n  private toggleRegexSearch(): void {\n    if (this.regexButton) {\n      this.regexButton.setToggled(!this.regexButton.toggled());\n    }\n    this.saveSetting();\n    this.performSearch(false, true);\n  }\n\n  private toggleReplace(): void {\n    this.replaceToggleButton.setToggled(!this.replaceToggleButton.toggled());\n    this.updateSecondRowVisibility();\n  }\n\n  private saveSetting(): void {\n    if (!this.setting) {\n      return;\n    }\n    const settingValue = this.setting.get() || {};\n    if (this.caseSensitiveButton) {\n      settingValue.caseSensitive = this.caseSensitiveButton.toggled();\n    }\n    if (this.regexButton) {\n      settingValue.isRegex = this.regexButton.toggled();\n    }\n    this.setting.set(settingValue);\n  }\n\n  private loadSetting(): void {\n    const settingValue = this.setting ? (this.setting.get() || {}) : {};\n    if (this.searchProvider.supportsCaseSensitiveSearch() && this.caseSensitiveButton) {\n      this.caseSensitiveButton.setToggled(Boolean(settingValue.caseSensitive));\n    }\n    if (this.searchProvider.supportsRegexSearch() && this.regexButton) {\n      this.regexButton.setToggled(Boolean(settingValue.isRegex));\n    }\n  }\n\n  setMinimalSearchQuerySize(minimalSearchQuerySize: number): void {\n    this.minimalSearchQuerySize = minimalSearchQuerySize;\n  }\n\n  setPlaceholder(placeholder: string, ariaLabel?: string): void {\n    this.searchInputElement.placeholder = placeholder;\n    if (ariaLabel) {\n      ARIAUtils.setAccessibleName(this.searchInputElement, ariaLabel);\n    }\n  }\n\n  setReplaceable(replaceable: boolean): void {\n    this.replaceable = replaceable;\n  }\n\n  updateSearchMatchesCount(matches: number): void {\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const untypedSearchProvider = (this.searchProvider as any);\n    if (untypedSearchProvider.currentSearchMatches === matches) {\n      return;\n    }\n    untypedSearchProvider.currentSearchMatches = matches;\n    this.updateSearchMatchesCountAndCurrentMatchIndex(untypedSearchProvider.currentQuery ? matches : 0, -1);\n  }\n\n  updateCurrentMatchIndex(currentMatchIndex: number): void {\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const untypedSearchProvider = (this.searchProvider as any);\n    this.updateSearchMatchesCountAndCurrentMatchIndex(untypedSearchProvider.currentSearchMatches, currentMatchIndex);\n  }\n\n  isSearchVisible(): boolean {\n    return Boolean(this.searchIsVisible);\n  }\n\n  closeSearch(): void {\n    this.cancelSearch();\n    if (this.footerElementContainer.hasFocus()) {\n      this.focus();\n    }\n  }\n\n  private toggleSearchBar(toggled: boolean): void {\n    this.footerElementContainer.classList.toggle('hidden', !toggled);\n    this.doResize();\n  }\n\n  cancelSearch(): void {\n    if (!this.searchIsVisible) {\n      return;\n    }\n    this.resetSearch();\n    delete this.searchIsVisible;\n    this.toggleSearchBar(false);\n  }\n\n  resetSearch(): void {\n    this.clearSearch();\n    this.updateReplaceVisibility();\n    this.matchesElement.textContent = '';\n  }\n\n  refreshSearch(): void {\n    if (!this.searchIsVisible) {\n      return;\n    }\n    this.resetSearch();\n    this.performSearch(false, false);\n  }\n\n  handleFindNextShortcut(): boolean {\n    if (!this.searchIsVisible) {\n      return false;\n    }\n    this.searchProvider.jumpToNextSearchResult();\n    return true;\n  }\n\n  handleFindPreviousShortcut(): boolean {\n    if (!this.searchIsVisible) {\n      return false;\n    }\n    this.searchProvider.jumpToPreviousSearchResult();\n    return true;\n  }\n\n  handleFindShortcut(): boolean {\n    this.showSearchField();\n    return true;\n  }\n\n  handleCancelSearchShortcut(): boolean {\n    if (!this.searchIsVisible) {\n      return false;\n    }\n    this.closeSearch();\n    return true;\n  }\n\n  private updateSearchNavigationButtonState(enabled: boolean): void {\n    this.replaceButtonElement.disabled = !enabled;\n    this.replaceAllButtonElement.disabled = !enabled;\n    this.searchNavigationPrevElement.classList.toggle('enabled', enabled);\n    this.searchNavigationNextElement.classList.toggle('enabled', enabled);\n  }\n\n  private updateSearchMatchesCountAndCurrentMatchIndex(matches: number, currentMatchIndex: number): void {\n    if (!this.currentQuery) {\n      this.matchesElement.textContent = '';\n    } else if (matches === 0 || currentMatchIndex >= 0) {\n      this.matchesElement.textContent = i18nString(UIStrings.dOfD, {PH1: currentMatchIndex + 1, PH2: matches});\n    } else if (matches === 1) {\n      this.matchesElement.textContent = i18nString(UIStrings.matchString);\n    } else {\n      this.matchesElement.textContent = i18nString(UIStrings.dMatches, {PH1: matches});\n    }\n    this.updateSearchNavigationButtonState(matches > 0);\n  }\n\n  showSearchField(): void {\n    if (this.searchIsVisible) {\n      this.cancelSearch();\n    }\n\n    let queryCandidate;\n    if (!this.searchInputElement.hasFocus()) {\n      const selection = InspectorView.instance().element.window().getSelection();\n      if (selection && selection.rangeCount) {\n        queryCandidate = selection.toString().replace(/\\r?\\n.*/, '');\n      }\n    }\n\n    this.toggleSearchBar(true);\n    this.updateReplaceVisibility();\n    if (queryCandidate) {\n      this.searchInputElement.value = queryCandidate;\n    }\n    this.performSearch(false, false);\n    this.searchInputElement.focus();\n    this.searchInputElement.select();\n    this.searchIsVisible = true;\n  }\n\n  private updateReplaceVisibility(): void {\n    this.replaceToggleButton.setVisible(this.replaceable);\n    if (!this.replaceable) {\n      this.replaceToggleButton.setToggled(false);\n      this.updateSecondRowVisibility();\n    }\n  }\n\n  private onSearchKeyDown(ev: Event): void {\n    const event = (ev as KeyboardEvent);\n    if (isEscKey(event)) {\n      this.closeSearch();\n      event.consume(true);\n      return;\n    }\n    if (!(event.key === 'Enter')) {\n      return;\n    }\n\n    if (!this.currentQuery) {\n      this.performSearch(true, true, event.shiftKey);\n    } else {\n      this.jumpToNextSearchResult(event.shiftKey);\n    }\n  }\n\n  private onReplaceKeyDown(event: KeyboardEvent): void {\n    if (event.key === 'Enter') {\n      this.replace();\n    }\n  }\n\n  private jumpToNextSearchResult(isBackwardSearch?: boolean): void {\n    if (!this.currentQuery) {\n      return;\n    }\n\n    if (isBackwardSearch) {\n      this.searchProvider.jumpToPreviousSearchResult();\n    } else {\n      this.searchProvider.jumpToNextSearchResult();\n    }\n  }\n\n  private onNextButtonSearch(_event: Event): void {\n    if (!this.searchNavigationNextElement.classList.contains('enabled')) {\n      return;\n    }\n    this.jumpToNextSearchResult();\n    this.searchInputElement.focus();\n  }\n\n  private onPrevButtonSearch(_event: Event): void {\n    if (!this.searchNavigationPrevElement.classList.contains('enabled')) {\n      return;\n    }\n    this.jumpToNextSearchResult(true);\n    this.searchInputElement.focus();\n  }\n\n  private onFindClick(_event: Event): void {\n    if (!this.currentQuery) {\n      this.performSearch(true, true);\n    } else {\n      this.jumpToNextSearchResult();\n    }\n    this.searchInputElement.focus();\n  }\n\n  private onPreviousClick(_event: Event): void {\n    if (!this.currentQuery) {\n      this.performSearch(true, true, true);\n    } else {\n      this.jumpToNextSearchResult(true);\n    }\n    this.searchInputElement.focus();\n  }\n\n  private clearSearch(): void {\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const untypedSearchProvider = (this.searchProvider as any);\n    delete this.currentQuery;\n    if (Boolean(untypedSearchProvider.currentQuery)) {\n      delete untypedSearchProvider.currentQuery;\n      this.searchProvider.searchCanceled();\n    }\n    this.updateSearchMatchesCountAndCurrentMatchIndex(0, -1);\n  }\n\n  private performSearch(forceSearch: boolean, shouldJump: boolean, jumpBackwards?: boolean): void {\n    const query = this.searchInputElement.value;\n    if (!query || (!forceSearch && query.length < this.minimalSearchQuerySize && !this.currentQuery)) {\n      this.clearSearch();\n      return;\n    }\n\n    this.currentQuery = query;\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.searchProvider as any).currentQuery = query;\n\n    const searchConfig = this.currentSearchConfig();\n    this.searchProvider.performSearch(searchConfig, shouldJump, jumpBackwards);\n  }\n\n  private currentSearchConfig(): SearchConfig {\n    const query = this.searchInputElement.value;\n    const caseSensitive = this.caseSensitiveButton ? this.caseSensitiveButton.toggled() : false;\n    const isRegex = this.regexButton ? this.regexButton.toggled() : false;\n    return new SearchConfig(query, caseSensitive, isRegex);\n  }\n\n  private updateSecondRowVisibility(): void {\n    const secondRowVisible = this.replaceToggleButton.toggled();\n    this.footerElementContainer.classList.toggle('replaceable', secondRowVisible);\n    this.secondRowButtons.classList.toggle('hidden', !secondRowVisible);\n    this.replaceInputElement.classList.toggle('hidden', !secondRowVisible);\n\n    if (secondRowVisible) {\n      this.replaceInputElement.focus();\n    } else {\n      this.searchInputElement.focus();\n    }\n    this.doResize();\n  }\n\n  private replace(): void {\n    if (!this.replaceProvider) {\n      throw new Error('No \\'replacable\\' provided to SearchableView!');\n    }\n    const searchConfig = this.currentSearchConfig();\n    this.replaceProvider.replaceSelectionWith(searchConfig, this.replaceInputElement.value);\n    delete this.currentQuery;\n    this.performSearch(true, true);\n  }\n\n  private replaceAll(): void {\n    if (!this.replaceProvider) {\n      throw new Error('No \\'replacable\\' provided to SearchableView!');\n    }\n    const searchConfig = this.currentSearchConfig();\n    this.replaceProvider.replaceAllWith(searchConfig, this.replaceInputElement.value);\n  }\n\n  private onInput(_event: Event): void {\n    if (this.valueChangedTimeoutId) {\n      clearTimeout(this.valueChangedTimeoutId);\n    }\n    const timeout = this.searchInputElement.value.length < 3 ? 200 : 0;\n    this.valueChangedTimeoutId = window.setTimeout(this.onValueChanged.bind(this), timeout);\n  }\n\n  private onValueChanged(): void {\n    if (!this.searchIsVisible) {\n      return;\n    }\n    delete this.valueChangedTimeoutId;\n    this.performSearch(false, true);\n  }\n}\n\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const _symbol = Symbol('searchableView');\n\nconst searchableViewsByElement = new WeakMap<Element, SearchableView>();\n\nexport interface Searchable {\n  searchCanceled(): void;\n  performSearch(searchConfig: SearchConfig, shouldJump: boolean, jumpBackwards?: boolean): void;\n  jumpToNextSearchResult(): void;\n  jumpToPreviousSearchResult(): void;\n  supportsCaseSensitiveSearch(): boolean;\n  supportsRegexSearch(): boolean;\n}\n\nexport interface Replaceable {\n  replaceSelectionWith(searchConfig: SearchConfig, replacement: string): void;\n  replaceAllWith(searchConfig: SearchConfig, replacement: string): void;\n}\n\nexport interface SearchRegexResult {\n  regex: RegExp;\n  fromQuery: boolean;\n}\n\nexport class SearchConfig {\n  query: string;\n  caseSensitive: boolean;\n  isRegex: boolean;\n\n  constructor(query: string, caseSensitive: boolean, isRegex: boolean) {\n    this.query = query;\n    this.caseSensitive = caseSensitive;\n    this.isRegex = isRegex;\n  }\n\n  toSearchRegex(global?: boolean): SearchRegexResult {\n    let modifiers = this.caseSensitive ? '' : 'i';\n    if (global) {\n      modifiers += 'g';\n    }\n    const query = this.isRegex ? '/' + this.query + '/' : this.query;\n\n    let regex: RegExp|undefined;\n    let fromQuery = false;\n\n    // First try creating regex if user knows the / / hint.\n    try {\n      if (/^\\/.+\\/$/.test(query)) {\n        regex = new RegExp(query.substring(1, query.length - 1), modifiers);\n        fromQuery = true;\n      }\n    } catch (e) {\n      // Silent catch.\n    }\n\n    // Otherwise just do a plain text search.\n    if (!regex) {\n      regex = Platform.StringUtilities.createPlainTextSearchRegex(query, modifiers);\n    }\n\n    return {\n      regex,\n      fromQuery,\n    };\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
