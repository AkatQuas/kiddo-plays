{
  "version": 3,
  "sources": ["../../../../../../front_end/ui/legacy/GlassPane.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Utils from './utils/utils.js';\n\nimport type {Size} from './Geometry.js';\nimport {Icon} from './Icon.js';\nimport {deepElementFromEvent} from './UIUtils.js';\nimport type {WidgetElement} from './Widget.js';\nimport {Widget} from './Widget.js';\nimport glassPaneStyles from './glassPane.css.legacy.js';\n\nexport class GlassPane {\n  private readonly widgetInternal: Widget;\n  element: WidgetElement;\n  contentElement: HTMLDivElement;\n  private readonly arrowElement: Icon;\n  private readonly onMouseDownBound: (event: Event) => void;\n  private onClickOutsideCallback: ((arg0: Event) => void)|null;\n  private maxSize: Size|null;\n  private positionX: number|null;\n  private positionY: number|null;\n  private anchorBox: AnchorBox|null;\n  private anchorBehavior: AnchorBehavior;\n  private sizeBehavior: SizeBehavior;\n  private marginBehavior: MarginBehavior;\n\n  constructor() {\n    this.widgetInternal = new Widget(true);\n    this.widgetInternal.markAsRoot();\n    this.element = this.widgetInternal.element;\n    this.contentElement = this.widgetInternal.contentElement;\n    this.arrowElement = Icon.create('', 'arrow hidden');\n    if (this.element.shadowRoot) {\n      this.element.shadowRoot.appendChild(this.arrowElement);\n    }\n\n    this.registerRequiredCSS(glassPaneStyles);\n    this.setPointerEventsBehavior(PointerEventsBehavior.PierceGlassPane);\n\n    this.onMouseDownBound = this.onMouseDown.bind(this);\n    this.onClickOutsideCallback = null;\n    this.maxSize = null;\n    this.positionX = null;\n    this.positionY = null;\n    this.anchorBox = null;\n    this.anchorBehavior = AnchorBehavior.PreferTop;\n    this.sizeBehavior = SizeBehavior.SetExactSize;\n    this.marginBehavior = MarginBehavior.DefaultMargin;\n  }\n\n  isShowing(): boolean {\n    return this.widgetInternal.isShowing();\n  }\n\n  registerRequiredCSS(cssFile: {cssContent: string}): void {\n    this.widgetInternal.registerRequiredCSS(cssFile);\n  }\n\n  registerCSSFiles(cssFiles: CSSStyleSheet[]): void {\n    this.widgetInternal.registerCSSFiles(cssFiles);\n  }\n\n  setDefaultFocusedElement(element: Element|null): void {\n    this.widgetInternal.setDefaultFocusedElement(element);\n  }\n\n  setDimmed(dimmed: boolean): void {\n    this.element.classList.toggle('dimmed-pane', dimmed);\n  }\n\n  setPointerEventsBehavior(pointerEventsBehavior: PointerEventsBehavior): void {\n    this.element.classList.toggle(\n        'no-pointer-events', pointerEventsBehavior !== PointerEventsBehavior.BlockedByGlassPane);\n    this.contentElement.classList.toggle(\n        'no-pointer-events', pointerEventsBehavior === PointerEventsBehavior.PierceContents);\n  }\n\n  setOutsideClickCallback(callback: ((arg0: Event) => void)|null): void {\n    this.onClickOutsideCallback = callback;\n  }\n\n  setMaxContentSize(size: Size|null): void {\n    this.maxSize = size;\n    this.positionContent();\n  }\n\n  setSizeBehavior(sizeBehavior: SizeBehavior): void {\n    this.sizeBehavior = sizeBehavior;\n    this.positionContent();\n  }\n\n  setContentPosition(x: number|null, y: number|null): void {\n    this.positionX = x;\n    this.positionY = y;\n    this.positionContent();\n  }\n\n  setContentAnchorBox(anchorBox: AnchorBox|null): void {\n    this.anchorBox = anchorBox;\n    this.positionContent();\n  }\n\n  setAnchorBehavior(behavior: AnchorBehavior): void {\n    this.anchorBehavior = behavior;\n  }\n\n  setMarginBehavior(behavior: MarginBehavior): void {\n    this.marginBehavior = behavior;\n    this.arrowElement.classList.toggle('hidden', behavior !== MarginBehavior.Arrow);\n  }\n\n  show(document: Document): void {\n    if (this.isShowing()) {\n      return;\n    }\n    // TODO(crbug.com/1006759): Extract the magic number\n    // Deliberately starts with 3000 to hide other z-indexed elements below.\n    this.element.style.zIndex = `${3000 + 1000 * _panes.size}`;\n    document.body.addEventListener('mousedown', this.onMouseDownBound, true);\n    document.body.addEventListener('pointerdown', this.onMouseDownBound, true);\n    this.widgetInternal.show(document.body);\n    _panes.add(this);\n    this.positionContent();\n  }\n\n  hide(): void {\n    if (!this.isShowing()) {\n      return;\n    }\n    _panes.delete(this);\n    this.element.ownerDocument.body.removeEventListener('mousedown', this.onMouseDownBound, true);\n    this.element.ownerDocument.body.removeEventListener('pointerdown', this.onMouseDownBound, true);\n    this.widgetInternal.detach();\n  }\n\n  private onMouseDown(event: Event): void {\n    if (!this.onClickOutsideCallback) {\n      return;\n    }\n    const node = deepElementFromEvent(event);\n    if (!node || this.contentElement.isSelfOrAncestor(node)) {\n      return;\n    }\n    this.onClickOutsideCallback.call(null, event);\n  }\n\n  positionContent(): void {\n    if (!this.isShowing()) {\n      return;\n    }\n\n    const showArrow = this.marginBehavior === MarginBehavior.Arrow;\n    const gutterSize = showArrow ? 8 : (this.marginBehavior === MarginBehavior.NoMargin ? 0 : 3);\n    const scrollbarSize = Utils.measuredScrollbarWidth(this.element.ownerDocument);\n    const arrowSize = 10;\n\n    const container = (_containers.get((this.element.ownerDocument as Document))) as HTMLElement;\n    if (this.sizeBehavior === SizeBehavior.MeasureContent) {\n      this.contentElement.positionAt(0, 0);\n      this.contentElement.style.width = '';\n      this.contentElement.style.maxWidth = '';\n      this.contentElement.style.height = '';\n      this.contentElement.style.maxHeight = '';\n    }\n\n    const containerWidth = container.offsetWidth;\n    const containerHeight = container.offsetHeight;\n\n    let width = containerWidth - gutterSize * 2;\n    let height = containerHeight - gutterSize * 2;\n    let positionX = gutterSize;\n    let positionY = gutterSize;\n\n    if (this.maxSize) {\n      width = Math.min(width, this.maxSize.width);\n      height = Math.min(height, this.maxSize.height);\n    }\n\n    if (this.sizeBehavior === SizeBehavior.MeasureContent) {\n      const measuredRect = this.contentElement.getBoundingClientRect();\n      const widthOverflow = height < measuredRect.height ? scrollbarSize : 0;\n      const heightOverflow = width < measuredRect.width ? scrollbarSize : 0;\n      width = Math.min(width, measuredRect.width + widthOverflow);\n      height = Math.min(height, measuredRect.height + heightOverflow);\n    }\n\n    if (this.anchorBox) {\n      const anchorBox = this.anchorBox.relativeToElement(container);\n      let behavior: AnchorBehavior.PreferBottom|AnchorBehavior.PreferTop|AnchorBehavior.PreferRight|\n          AnchorBehavior.PreferLeft|AnchorBehavior = this.anchorBehavior;\n      this.arrowElement.classList.remove('arrow-none', 'arrow-top', 'arrow-bottom', 'arrow-left', 'arrow-right');\n\n      if (behavior === AnchorBehavior.PreferTop || behavior === AnchorBehavior.PreferBottom) {\n        const top = anchorBox.y - 2 * gutterSize;\n        const bottom = containerHeight - anchorBox.y - anchorBox.height - 2 * gutterSize;\n        if (behavior === AnchorBehavior.PreferTop && top < height && bottom > top) {\n          behavior = AnchorBehavior.PreferBottom;\n        }\n        if (behavior === AnchorBehavior.PreferBottom && bottom < height && top > bottom) {\n          behavior = AnchorBehavior.PreferTop;\n        }\n\n        let arrowY;\n        let enoughHeight = true;\n        if (behavior === AnchorBehavior.PreferTop) {\n          positionY = Math.max(gutterSize, anchorBox.y - height - gutterSize);\n          const spaceTop = anchorBox.y - positionY - gutterSize;\n          if (this.sizeBehavior === SizeBehavior.MeasureContent) {\n            if (height > spaceTop) {\n              this.arrowElement.classList.add('arrow-none');\n              enoughHeight = false;\n            }\n          } else {\n            height = Math.min(height, spaceTop);\n          }\n          this.arrowElement.setIconType('mediumicon-arrow-bottom');\n          this.arrowElement.classList.add('arrow-bottom');\n          arrowY = anchorBox.y - gutterSize;\n        } else {\n          positionY = anchorBox.y + anchorBox.height + gutterSize;\n          const spaceBottom = containerHeight - positionY - gutterSize;\n          if (this.sizeBehavior === SizeBehavior.MeasureContent) {\n            if (height > spaceBottom) {\n              this.arrowElement.classList.add('arrow-none');\n              positionY = containerHeight - gutterSize - height;\n              enoughHeight = false;\n            }\n          } else {\n            height = Math.min(height, spaceBottom);\n          }\n          this.arrowElement.setIconType('mediumicon-arrow-top');\n          this.arrowElement.classList.add('arrow-top');\n          arrowY = anchorBox.y + anchorBox.height + gutterSize;\n        }\n\n        positionX = Math.max(gutterSize, Math.min(anchorBox.x, containerWidth - width - gutterSize));\n        if (!enoughHeight) {\n          positionX = Math.min(positionX + arrowSize, containerWidth - width - gutterSize);\n        } else if (showArrow && positionX - arrowSize >= gutterSize) {\n          positionX -= arrowSize;\n        }\n        width = Math.min(width, containerWidth - positionX - gutterSize);\n        if (2 * arrowSize >= width) {\n          this.arrowElement.classList.add('arrow-none');\n        } else {\n          let arrowX: number = anchorBox.x + Math.min(50, Math.floor(anchorBox.width / 2));\n          arrowX = Platform.NumberUtilities.clamp(arrowX, positionX + arrowSize, positionX + width - arrowSize);\n          this.arrowElement.positionAt(arrowX, arrowY, container);\n        }\n      } else {\n        const left = anchorBox.x - 2 * gutterSize;\n        const right = containerWidth - anchorBox.x - anchorBox.width - 2 * gutterSize;\n        if (behavior === AnchorBehavior.PreferLeft && left < width && right > left) {\n          behavior = AnchorBehavior.PreferRight;\n        }\n        if (behavior === AnchorBehavior.PreferRight && right < width && left > right) {\n          behavior = AnchorBehavior.PreferLeft;\n        }\n\n        let arrowX;\n        let enoughWidth = true;\n        if (behavior === AnchorBehavior.PreferLeft) {\n          positionX = Math.max(gutterSize, anchorBox.x - width - gutterSize);\n          const spaceLeft = anchorBox.x - positionX - gutterSize;\n          if (this.sizeBehavior === SizeBehavior.MeasureContent) {\n            if (width > spaceLeft) {\n              this.arrowElement.classList.add('arrow-none');\n              enoughWidth = false;\n            }\n          } else {\n            width = Math.min(width, spaceLeft);\n          }\n          this.arrowElement.setIconType('mediumicon-arrow-right');\n          this.arrowElement.classList.add('arrow-right');\n          arrowX = anchorBox.x - gutterSize;\n        } else {\n          positionX = anchorBox.x + anchorBox.width + gutterSize;\n          const spaceRight = containerWidth - positionX - gutterSize;\n          if (this.sizeBehavior === SizeBehavior.MeasureContent) {\n            if (width > spaceRight) {\n              this.arrowElement.classList.add('arrow-none');\n              positionX = containerWidth - gutterSize - width;\n              enoughWidth = false;\n            }\n          } else {\n            width = Math.min(width, spaceRight);\n          }\n          this.arrowElement.setIconType('mediumicon-arrow-left');\n          this.arrowElement.classList.add('arrow-left');\n          arrowX = anchorBox.x + anchorBox.width + gutterSize;\n        }\n\n        positionY = Math.max(gutterSize, Math.min(anchorBox.y, containerHeight - height - gutterSize));\n        if (!enoughWidth) {\n          positionY = Math.min(positionY + arrowSize, containerHeight - height - gutterSize);\n        } else if (showArrow && positionY - arrowSize >= gutterSize) {\n          positionY -= arrowSize;\n        }\n        height = Math.min(height, containerHeight - positionY - gutterSize);\n        if (2 * arrowSize >= height) {\n          this.arrowElement.classList.add('arrow-none');\n        } else {\n          let arrowY: number = anchorBox.y + Math.min(50, Math.floor(anchorBox.height / 2));\n          arrowY = Platform.NumberUtilities.clamp(arrowY, positionY + arrowSize, positionY + height - arrowSize);\n          this.arrowElement.positionAt(arrowX, arrowY, container);\n        }\n      }\n    } else {\n      positionX = this.positionX !== null ? this.positionX : (containerWidth - width) / 2;\n      positionY = this.positionY !== null ? this.positionY : (containerHeight - height) / 2;\n      width = Math.min(width, containerWidth - positionX - gutterSize);\n      height = Math.min(height, containerHeight - positionY - gutterSize);\n      this.arrowElement.classList.add('arrow-none');\n    }\n\n    this.contentElement.style.width = width + 'px';\n    if (this.sizeBehavior === SizeBehavior.SetExactWidthMaxHeight) {\n      this.contentElement.style.maxHeight = height + 'px';\n    } else {\n      this.contentElement.style.height = height + 'px';\n    }\n\n    this.contentElement.positionAt(positionX, positionY, container);\n    this.widgetInternal.doResize();\n  }\n\n  widget(): Widget {\n    return this.widgetInternal;\n  }\n\n  static setContainer(element: Element): void {\n    _containers.set((element.ownerDocument as Document), element);\n    GlassPane.containerMoved(element);\n  }\n\n  static container(document: Document): Element {\n    return _containers.get(document) as Element;\n  }\n\n  static containerMoved(element: Element): void {\n    for (const pane of _panes) {\n      if (pane.isShowing() && pane.element.ownerDocument === element.ownerDocument) {\n        pane.positionContent();\n      }\n    }\n  }\n}\n\nexport const enum PointerEventsBehavior {\n  BlockedByGlassPane = 'BlockedByGlassPane',\n  PierceGlassPane = 'PierceGlassPane',\n  PierceContents = 'PierceContents',\n}\n\nexport const enum AnchorBehavior {\n  PreferTop = 'PreferTop',\n  PreferBottom = 'PreferBottom',\n  PreferLeft = 'PreferLeft',\n  PreferRight = 'PreferRight',\n}\n\nexport const enum SizeBehavior {\n  SetExactSize = 'SetExactSize',\n  SetExactWidthMaxHeight = 'SetExactWidthMaxHeight',\n  MeasureContent = 'MeasureContent',\n}\n\nexport const enum MarginBehavior {\n  Arrow = 'Arrow',\n  DefaultMargin = 'DefaultMargin',\n  NoMargin = 'NoMargin',\n}\n\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst _containers = new Map<Document, Element>();\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst _panes = new Set<GlassPane>();\n\n// Exported for layout tests.\nexport const GlassPanePanes = _panes;\n"],
  "mappings": "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",
  "names": []
}
