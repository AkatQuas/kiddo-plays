{
  "version": 3,
  "sources": ["../../../../../../front_end/ui/legacy/Toolbar.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2009 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport * as Utils from './utils/utils.js';\n\nimport type {Action} from './ActionRegistration.js';\nimport {Events as ActionEvents} from './ActionRegistration.js';\nimport {ActionRegistry} from './ActionRegistry.js';\nimport * as ARIAUtils from './ARIAUtils.js';\nimport {ContextMenu} from './ContextMenu.js';\nimport {GlassPane, PointerEventsBehavior} from './GlassPane.js';\nimport {Icon} from './Icon.js';\nimport {bindCheckbox} from './SettingsUI.js';\nimport type {Suggestion} from './SuggestBox.js';\nimport {Events as TextPromptEvents, TextPrompt} from './TextPrompt.js';\nimport {Tooltip} from './Tooltip.js';\nimport {CheckboxLabel, LongClickController} from './UIUtils.js';\nimport toolbarStyles from './toolbar.css.legacy.js';\n\nconst UIStrings = {\n  /**\n  *@description Announced screen reader message for ToolbarSettingToggle when the setting is toggled on.\n  */\n  pressed: 'pressed',\n  /**\n  *@description Announced screen reader message for ToolbarSettingToggle when the setting is toggled off.\n  */\n  notPressed: 'not pressed',\n  /**\n  *@description Tooltip shown when the user hovers over the clear icon to empty the text input.\n  */\n  clearInput: 'Clear input',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/Toolbar.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class Toolbar {\n  private items: ToolbarItem[];\n  element: HTMLElement;\n  enabled: boolean;\n  private readonly shadowRoot: ShadowRoot;\n  private contentElement: Element;\n  private insertionPoint: Element;\n  private compactLayout = false;\n\n  constructor(className: string, parentElement?: Element) {\n    this.items = [];\n    this.element = (parentElement ? parentElement.createChild('div') : document.createElement('div')) as HTMLElement;\n    this.element.className = className;\n    this.element.classList.add('toolbar');\n    this.enabled = true;\n    this.shadowRoot =\n        Utils.createShadowRootWithCoreStyles(this.element, {cssFile: toolbarStyles, delegatesFocus: undefined});\n    this.contentElement = this.shadowRoot.createChild('div', 'toolbar-shadow');\n    this.insertionPoint = this.contentElement.createChild('slot');\n  }\n\n  hasCompactLayout(): boolean {\n    return this.compactLayout;\n  }\n\n  registerCSSFiles(cssFiles: CSSStyleSheet[]): void {\n    this.shadowRoot.adoptedStyleSheets = this.shadowRoot.adoptedStyleSheets.concat(cssFiles);\n  }\n\n  setCompactLayout(enable: boolean): void {\n    if (this.compactLayout === enable) {\n      return;\n    }\n    this.compactLayout = enable;\n    for (const item of this.items) {\n      item.setCompactLayout(enable);\n    }\n  }\n\n  static createLongPressActionButton(\n      action: Action, toggledOptions: ToolbarButton[], untoggledOptions: ToolbarButton[]): ToolbarButton {\n    const button = Toolbar.createActionButton(action);\n    const mainButtonClone = Toolbar.createActionButton(action);\n\n    let longClickController: LongClickController|null = null;\n    let longClickButtons: ToolbarButton[]|null = null;\n    let longClickGlyph: Icon|null = null;\n\n    action.addEventListener(ActionEvents.Toggled, updateOptions);\n    updateOptions();\n    return button;\n\n    function updateOptions(): void {\n      const buttons = action.toggled() ? (toggledOptions || null) : (untoggledOptions || null);\n\n      if (buttons && buttons.length) {\n        if (!longClickController) {\n          longClickController = new LongClickController(button.element, showOptions);\n          longClickGlyph = Icon.create('largeicon-longclick-triangle', 'long-click-glyph');\n          button.element.appendChild(longClickGlyph);\n          longClickButtons = buttons;\n        }\n      } else {\n        if (longClickController) {\n          longClickController.dispose();\n          longClickController = null;\n          if (longClickGlyph) {\n            longClickGlyph.remove();\n          }\n          longClickGlyph = null;\n          longClickButtons = null;\n        }\n      }\n    }\n\n    function showOptions(): void {\n      let buttons: ToolbarButton[] = longClickButtons ? longClickButtons.slice() : [];\n      buttons.push(mainButtonClone);\n\n      const document = button.element.ownerDocument;\n      document.documentElement.addEventListener('mouseup', mouseUp, false);\n\n      const optionsGlassPane = new GlassPane();\n      optionsGlassPane.setPointerEventsBehavior(PointerEventsBehavior.BlockedByGlassPane);\n      optionsGlassPane.show(document);\n      const optionsBar = new Toolbar('fill', optionsGlassPane.contentElement);\n      optionsBar.contentElement.classList.add('floating');\n      const buttonHeight = 26;\n\n      const hostButtonPosition = button.element.boxInWindow().relativeToElement(GlassPane.container(document));\n\n      const topNotBottom = hostButtonPosition.y + buttonHeight * buttons.length < document.documentElement.offsetHeight;\n\n      if (topNotBottom) {\n        buttons = buttons.reverse();\n      }\n\n      optionsBar.element.style.height = (buttonHeight * buttons.length) + 'px';\n      if (topNotBottom) {\n        optionsBar.element.style.top = (hostButtonPosition.y - 5) + 'px';\n      } else {\n        optionsBar.element.style.top = (hostButtonPosition.y - (buttonHeight * (buttons.length - 1)) - 6) + 'px';\n      }\n      optionsBar.element.style.left = (hostButtonPosition.x - 5) + 'px';\n\n      for (let i = 0; i < buttons.length; ++i) {\n        buttons[i].element.addEventListener('mousemove', mouseOver, false);\n        buttons[i].element.addEventListener('mouseout', mouseOut, false);\n        optionsBar.appendToolbarItem(buttons[i]);\n      }\n      const hostButtonIndex = topNotBottom ? 0 : buttons.length - 1;\n      buttons[hostButtonIndex].element.classList.add('emulate-active');\n\n      function mouseOver(e: Event): void {\n        if ((e as MouseEvent).which !== 1) {\n          return;\n        }\n        if (e.target instanceof HTMLElement) {\n          const buttonElement = e.target.enclosingNodeOrSelfWithClass('toolbar-item');\n          buttonElement.classList.add('emulate-active');\n        }\n      }\n\n      function mouseOut(e: Event): void {\n        if ((e as MouseEvent).which !== 1) {\n          return;\n        }\n        if (e.target instanceof HTMLElement) {\n          const buttonElement = e.target.enclosingNodeOrSelfWithClass('toolbar-item');\n          buttonElement.classList.remove('emulate-active');\n        }\n      }\n\n      function mouseUp(e: Event): void {\n        if ((e as MouseEvent).which !== 1) {\n          return;\n        }\n        optionsGlassPane.hide();\n        document.documentElement.removeEventListener('mouseup', mouseUp, false);\n\n        for (let i = 0; i < buttons.length; ++i) {\n          if (buttons[i].element.classList.contains('emulate-active')) {\n            buttons[i].element.classList.remove('emulate-active');\n            buttons[i].clicked(e);\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  static createActionButton(action: Action, options: ToolbarButtonOptions|undefined = TOOLBAR_BUTTON_DEFAULT_OPTIONS):\n      ToolbarButton {\n    const button = action.toggleable() ? makeToggle() : makeButton();\n\n    if (options.showLabel) {\n      button.setText(action.title());\n    }\n\n    let handler = (_event: {\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      data: any,\n    }): void => {\n      void action.execute();\n    };\n    if (options.userActionCode) {\n      const actionCode = options.userActionCode;\n      handler = (): void => {\n        Host.userMetrics.actionTaken(actionCode);\n        void action.execute();\n      };\n    }\n    button.addEventListener(ToolbarButton.Events.Click, handler, action);\n    action.addEventListener(ActionEvents.Enabled, enabledChanged);\n    button.setEnabled(action.enabled());\n    return button;\n\n    function makeButton(): ToolbarButton {\n      const button = new ToolbarButton(action.title(), action.icon());\n      if (action.title()) {\n        Tooltip.installWithActionBinding(button.element, action.title(), action.id());\n      }\n      return button;\n    }\n\n    function makeToggle(): ToolbarToggle {\n      const toggleButton = new ToolbarToggle(action.title(), action.icon(), action.toggledIcon());\n      toggleButton.setToggleWithRedColor(action.toggleWithRedColor());\n      action.addEventListener(ActionEvents.Toggled, toggled);\n      toggled();\n      return toggleButton;\n\n      function toggled(): void {\n        toggleButton.setToggled(action.toggled());\n        if (action.title()) {\n          toggleButton.setTitle(action.title());\n          Tooltip.installWithActionBinding(toggleButton.element, action.title(), action.id());\n        }\n      }\n    }\n\n    function enabledChanged(event: Common.EventTarget.EventTargetEvent<boolean>): void {\n      button.setEnabled(event.data);\n    }\n  }\n\n  static createActionButtonForId(\n      actionId: string, options: ToolbarButtonOptions|undefined = TOOLBAR_BUTTON_DEFAULT_OPTIONS): ToolbarButton {\n    const action = ActionRegistry.instance().action(actionId);\n    return Toolbar.createActionButton((action as Action), options);\n  }\n\n  gripElementForResize(): Element {\n    return this.contentElement;\n  }\n\n  makeWrappable(growVertically?: boolean): void {\n    this.contentElement.classList.add('wrappable');\n    if (growVertically) {\n      this.contentElement.classList.add('toolbar-grow-vertical');\n    }\n  }\n\n  makeVertical(): void {\n    this.contentElement.classList.add('vertical');\n  }\n\n  makeBlueOnHover(): void {\n    this.contentElement.classList.add('toolbar-blue-on-hover');\n  }\n\n  makeToggledGray(): void {\n    this.contentElement.classList.add('toolbar-toggled-gray');\n  }\n\n  renderAsLinks(): void {\n    this.contentElement.classList.add('toolbar-render-as-links');\n  }\n\n  empty(): boolean {\n    return !this.items.length;\n  }\n\n  setEnabled(enabled: boolean): void {\n    this.enabled = enabled;\n    for (const item of this.items) {\n      item.applyEnabledState(this.enabled && item.enabled);\n    }\n  }\n\n  appendToolbarItem(item: ToolbarItem): void {\n    this.items.push(item);\n    item.toolbar = this;\n    item.setCompactLayout(this.hasCompactLayout());\n    if (!this.enabled) {\n      item.applyEnabledState(false);\n    }\n    this.contentElement.insertBefore(item.element, this.insertionPoint);\n    this.hideSeparatorDupes();\n  }\n\n  appendSeparator(): void {\n    this.appendToolbarItem(new ToolbarSeparator());\n  }\n\n  appendSpacer(): void {\n    this.appendToolbarItem(new ToolbarSeparator(true));\n  }\n\n  appendText(text: string): void {\n    this.appendToolbarItem(new ToolbarText(text));\n  }\n\n  removeToolbarItem(itemToRemove: ToolbarItem): void {\n    const updatedItems = [];\n    for (const item of this.items) {\n      if (item === itemToRemove) {\n        item.element.remove();\n      } else {\n        updatedItems.push(item);\n      }\n    }\n    this.items = updatedItems;\n  }\n\n  removeToolbarItems(): void {\n    for (const item of this.items) {\n      item.toolbar = null;\n    }\n    this.items = [];\n    this.contentElement.removeChildren();\n    this.insertionPoint = this.contentElement.createChild('slot');\n  }\n\n  setColor(color: string): void {\n    const style = document.createElement('style');\n    style.textContent = '.toolbar-glyph { background-color: ' + color + ' !important }';\n    this.shadowRoot.appendChild(style);\n  }\n\n  setToggledColor(color: string): void {\n    const style = document.createElement('style');\n    style.textContent =\n        '.toolbar-button.toolbar-state-on .toolbar-glyph { background-color: ' + color + ' !important }';\n    this.shadowRoot.appendChild(style);\n  }\n\n  hideSeparatorDupes(): void {\n    if (!this.items.length) {\n      return;\n    }\n    // Don't hide first and last separators if they were added explicitly.\n    let previousIsSeparator = false;\n    let lastSeparator;\n    let nonSeparatorVisible = false;\n    for (let i = 0; i < this.items.length; ++i) {\n      if (this.items[i] instanceof ToolbarSeparator) {\n        this.items[i].setVisible(!previousIsSeparator);\n        previousIsSeparator = true;\n        lastSeparator = this.items[i];\n        continue;\n      }\n      if (this.items[i].visible()) {\n        previousIsSeparator = false;\n        lastSeparator = null;\n        nonSeparatorVisible = true;\n      }\n    }\n    if (lastSeparator && lastSeparator !== this.items[this.items.length - 1]) {\n      lastSeparator.setVisible(false);\n    }\n\n    this.element.classList.toggle(\n        'hidden',\n        lastSeparator !== null && lastSeparator !== undefined && lastSeparator.visible() && !nonSeparatorVisible);\n  }\n\n  async appendItemsAtLocation(location: string): Promise<void> {\n    const extensions: ToolbarItemRegistration[] = getRegisteredToolbarItems();\n\n    extensions.sort((extension1, extension2) => {\n      const order1 = extension1.order || 0;\n      const order2 = extension2.order || 0;\n      return order1 - order2;\n    });\n\n    const filtered = extensions.filter(e => e.location === location);\n    const items = await Promise.all(filtered.map(extension => {\n      const {separator, actionId, showLabel, loadItem} = extension;\n      if (separator) {\n        return new ToolbarSeparator();\n      }\n      if (actionId) {\n        return Toolbar.createActionButtonForId(actionId, {showLabel: Boolean(showLabel), userActionCode: undefined});\n      }\n      // TODO(crbug.com/1134103) constratint the case checked with this if using TS type definitions once UI is TS-authored.\n      if (!loadItem) {\n        throw new Error('Could not load a toolbar item registration with no loadItem function');\n      }\n      return loadItem().then(p => (p as Provider).item());\n    }));\n\n    for (const item of items) {\n      if (item) {\n        this.appendToolbarItem(item);\n      }\n    }\n  }\n}\nexport interface ToolbarButtonOptions {\n  showLabel: boolean;\n  userActionCode?: Host.UserMetrics.Action;\n}\n\nconst TOOLBAR_BUTTON_DEFAULT_OPTIONS: ToolbarButtonOptions = {\n  showLabel: false,\n  userActionCode: undefined,\n};\n\n// We need any here because Common.ObjectWrapper.ObjectWrapper is invariant in T.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport class ToolbarItem<T = any> extends Common.ObjectWrapper.ObjectWrapper<T> {\n  element: HTMLElement;\n  private visibleInternal: boolean;\n  enabled: boolean;\n  toolbar: Toolbar|null;\n  protected title?: string;\n\n  constructor(element: Element) {\n    super();\n    this.element = (element as HTMLElement);\n    this.element.classList.add('toolbar-item');\n    this.visibleInternal = true;\n    this.enabled = true;\n\n    /**\n     * Set by the parent toolbar during appending.\n     */\n    this.toolbar = null;\n  }\n\n  setTitle(title: string, actionId: string|undefined = undefined): void {\n    if (this.title === title) {\n      return;\n    }\n    this.title = title;\n    ARIAUtils.setAccessibleName(this.element, title);\n    if (actionId === undefined) {\n      Tooltip.install(this.element, title);\n    } else {\n      Tooltip.installWithActionBinding(this.element, title, actionId);\n    }\n  }\n\n  setEnabled(value: boolean): void {\n    if (this.enabled === value) {\n      return;\n    }\n    this.enabled = value;\n    this.applyEnabledState(this.enabled && (!this.toolbar || this.toolbar.enabled));\n  }\n\n  applyEnabledState(enabled: boolean): void {\n    // @ts-ignore: Ignoring in favor of an `instanceof` check for all the different\n    //             kind of HTMLElement classes that have a disabled attribute.\n    this.element.disabled = !enabled;\n  }\n\n  visible(): boolean {\n    return this.visibleInternal;\n  }\n\n  setVisible(x: boolean): void {\n    if (this.visibleInternal === x) {\n      return;\n    }\n    this.element.classList.toggle('hidden', !x);\n    this.visibleInternal = x;\n    if (this.toolbar && !(this instanceof ToolbarSeparator)) {\n      this.toolbar.hideSeparatorDupes();\n    }\n  }\n\n  setRightAligned(alignRight: boolean): void {\n    this.element.classList.toggle('toolbar-item-right-aligned', alignRight);\n  }\n\n  setCompactLayout(_enable: boolean): void {\n  }\n}\n\nexport const enum ToolbarItemWithCompactLayoutEvents {\n  CompactLayoutUpdated = 'CompactLayoutUpdated',\n}\n\ntype ToolbarItemWithCompactLayoutEventTypes = {\n  [ToolbarItemWithCompactLayoutEvents.CompactLayoutUpdated]: boolean,\n};\n\nexport class ToolbarItemWithCompactLayout extends ToolbarItem<ToolbarItemWithCompactLayoutEventTypes> {\n  constructor(element: Element) {\n    super(element);\n  }\n\n  override setCompactLayout(enable: boolean): void {\n    this.dispatchEventToListeners(ToolbarItemWithCompactLayoutEvents.CompactLayoutUpdated, enable);\n  }\n}\n\nexport class ToolbarText extends ToolbarItem<void> {\n  constructor(text?: string) {\n    const element = document.createElement('div');\n    element.classList.add('toolbar-text');\n    super(element);\n    this.element.classList.add('toolbar-text');\n    this.setText(text || '');\n  }\n\n  text(): string {\n    return this.element.textContent || '';\n  }\n\n  setText(text: string): void {\n    this.element.textContent = text;\n  }\n}\n\nexport class ToolbarButton extends ToolbarItem<ToolbarButton.EventTypes> {\n  private readonly glyphElement: Icon;\n  private textElement: HTMLElement;\n  private text?: string;\n  private glyph?: string;\n  private icon?: HTMLElement;\n  /**\n   * TODO(crbug.com/1126026): remove glyph parameter in favor of icon.\n   */\n  constructor(title: string, glyphOrIcon?: string|HTMLElement, text?: string) {\n    const element = document.createElement('button');\n    element.classList.add('toolbar-button');\n    super(element);\n    this.element.addEventListener('click', this.clicked.bind(this), false);\n    this.element.addEventListener('mousedown', this.mouseDown.bind(this), false);\n\n    this.glyphElement = Icon.create('', 'toolbar-glyph hidden');\n    this.element.appendChild(this.glyphElement);\n    this.textElement = this.element.createChild('div', 'toolbar-text hidden');\n\n    this.setTitle(title);\n    if (glyphOrIcon) {\n      this.setGlyphOrIcon(glyphOrIcon);\n    }\n    this.setText(text || '');\n    this.title = '';\n  }\n\n  focus(): void {\n    this.element.focus();\n  }\n\n  setText(text: string): void {\n    if (this.text === text) {\n      return;\n    }\n    this.textElement.textContent = text;\n    this.textElement.classList.toggle('hidden', !text);\n    this.text = text;\n  }\n\n  setGlyphOrIcon(glyphOrIcon: string|HTMLElement): void {\n    if (glyphOrIcon instanceof HTMLElement) {\n      glyphOrIcon.classList.add('toolbar-icon');\n      if (this.icon) {\n        this.icon.replaceWith(glyphOrIcon);\n      } else {\n        this.element.appendChild(glyphOrIcon);\n      }\n      this.icon = glyphOrIcon;\n    } else if (glyphOrIcon) {\n      this.setGlyph(glyphOrIcon);\n    }\n  }\n\n  setGlyph(glyph: string): void {\n    if (this.glyph === glyph) {\n      return;\n    }\n    this.glyphElement.setIconType(glyph);\n    this.glyphElement.classList.toggle('hidden', !glyph);\n    this.element.classList.toggle('toolbar-has-glyph', Boolean(glyph));\n    this.glyph = glyph;\n  }\n\n  setBackgroundImage(iconURL: string): void {\n    this.element.style.backgroundImage = 'url(' + iconURL + ')';\n  }\n\n  setSecondary(): void {\n    this.element.classList.add('toolbar-button-secondary');\n  }\n\n  setDarkText(): void {\n    this.element.classList.add('dark-text');\n  }\n\n  turnIntoSelect(shrinkable: boolean|undefined = false): void {\n    this.element.classList.add('toolbar-has-dropdown');\n    if (shrinkable) {\n      this.element.classList.add('toolbar-has-dropdown-shrinkable');\n    }\n    const dropdownArrowIcon = Icon.create('smallicon-triangle-down', 'toolbar-dropdown-arrow');\n    this.element.appendChild(dropdownArrowIcon);\n  }\n\n  clicked(event: Event): void {\n    if (!this.enabled) {\n      return;\n    }\n    this.dispatchEventToListeners(ToolbarButton.Events.Click, event);\n    event.consume();\n  }\n\n  protected mouseDown(event: MouseEvent): void {\n    if (!this.enabled) {\n      return;\n    }\n    this.dispatchEventToListeners(ToolbarButton.Events.MouseDown, event);\n  }\n}\n\nexport namespace ToolbarButton {\n  // TODO(crbug.com/1167717): Make this a const enum again\n  // eslint-disable-next-line rulesdir/const_enum\n  export enum Events {\n    Click = 'Click',\n    MouseDown = 'MouseDown',\n  }\n\n  export type EventTypes = {\n    [Events.Click]: Event,\n    [Events.MouseDown]: MouseEvent,\n  };\n}\n\nexport class ToolbarInput extends ToolbarItem<ToolbarInput.EventTypes> {\n  private prompt: TextPrompt;\n  private readonly proxyElement: Element;\n\n  constructor(\n      placeholder: string, accessiblePlaceholder?: string, growFactor?: number, shrinkFactor?: number, tooltip?: string,\n      completions?: ((arg0: string, arg1: string, arg2?: boolean|undefined) => Promise<Suggestion[]>),\n      dynamicCompletions?: boolean) {\n    const element = document.createElement('div');\n    element.classList.add('toolbar-input');\n    super(element);\n\n    const internalPromptElement = this.element.createChild('div', 'toolbar-input-prompt');\n    ARIAUtils.setAccessibleName(internalPromptElement, placeholder);\n    internalPromptElement.addEventListener('focus', () => this.element.classList.add('focused'));\n    internalPromptElement.addEventListener('blur', () => this.element.classList.remove('focused'));\n\n    this.prompt = new TextPrompt();\n    this.proxyElement = this.prompt.attach(internalPromptElement);\n    this.proxyElement.classList.add('toolbar-prompt-proxy');\n    this.proxyElement.addEventListener('keydown', (event: Event) => this.onKeydownCallback(event));\n    this.prompt.initialize(completions || ((): Promise<never[]> => Promise.resolve([])), ' ', dynamicCompletions);\n    if (tooltip) {\n      this.prompt.setTitle(tooltip);\n    }\n    this.prompt.setPlaceholder(placeholder, accessiblePlaceholder);\n    this.prompt.addEventListener(TextPromptEvents.TextChanged, this.onChangeCallback.bind(this));\n\n    if (growFactor) {\n      this.element.style.flexGrow = String(growFactor);\n    }\n    if (shrinkFactor) {\n      this.element.style.flexShrink = String(shrinkFactor);\n    }\n\n    const clearButton = this.element.createChild('div', 'toolbar-input-clear-button');\n    clearButton.title = UIStrings.clearInput;\n    clearButton.appendChild(Icon.create('mediumicon-gray-cross-active', 'search-cancel-button'));\n    clearButton.addEventListener('click', () => {\n      this.setValue('', true);\n      this.prompt.focus();\n    });\n\n    this.updateEmptyStyles();\n  }\n\n  applyEnabledState(enabled: boolean): void {\n    this.prompt.setEnabled(enabled);\n  }\n\n  setValue(value: string, notify?: boolean): void {\n    this.prompt.setText(value);\n    if (notify) {\n      this.onChangeCallback();\n    }\n    this.updateEmptyStyles();\n  }\n\n  value(): string {\n    return this.prompt.textWithCurrentSuggestion();\n  }\n\n  private onKeydownCallback(event: Event): void {\n    if ((event as KeyboardEvent).key === 'Enter' && this.prompt.text()) {\n      this.dispatchEventToListeners(ToolbarInput.Event.EnterPressed, this.prompt.text());\n    }\n    if (!isEscKey(event) || !this.prompt.text()) {\n      return;\n    }\n    this.setValue('', true);\n    event.consume(true);\n  }\n\n  private onChangeCallback(): void {\n    this.updateEmptyStyles();\n    this.dispatchEventToListeners(ToolbarInput.Event.TextChanged, this.prompt.text());\n  }\n\n  private updateEmptyStyles(): void {\n    this.element.classList.toggle('toolbar-input-empty', !this.prompt.text());\n  }\n}\n\nexport namespace ToolbarInput {\n  // TODO(crbug.com/1167717): Make this a const enum again\n  // eslint-disable-next-line rulesdir/const_enum\n  export enum Event {\n    TextChanged = 'TextChanged',\n    EnterPressed = 'EnterPressed',\n  }\n\n  export interface EventTypes {\n    [Event.TextChanged]: string;\n    [Event.EnterPressed]: string;\n  }\n}\n\nexport class ToolbarToggle extends ToolbarButton {\n  private toggledInternal: boolean;\n  private readonly untoggledGlyphOrIcon: string|HTMLElement|undefined;\n  private readonly toggledGlyphOrIcon: string|HTMLElement|undefined;\n\n  constructor(title: string, glyphOrIcon?: string|HTMLElement, toggledGlyphOrIcon?: string|HTMLElement) {\n    super(title, glyphOrIcon, '');\n    this.toggledInternal = false;\n    this.untoggledGlyphOrIcon = glyphOrIcon;\n    this.toggledGlyphOrIcon = toggledGlyphOrIcon;\n    this.element.classList.add('toolbar-state-off');\n    ARIAUtils.setPressed(this.element, false);\n  }\n\n  toggled(): boolean {\n    return this.toggledInternal;\n  }\n\n  setToggled(toggled: boolean): void {\n    if (this.toggledInternal === toggled) {\n      return;\n    }\n    this.toggledInternal = toggled;\n    this.element.classList.toggle('toolbar-state-on', toggled);\n    this.element.classList.toggle('toolbar-state-off', !toggled);\n    ARIAUtils.setPressed(this.element, toggled);\n    if (this.toggledGlyphOrIcon && this.untoggledGlyphOrIcon) {\n      this.setGlyphOrIcon(toggled ? this.toggledGlyphOrIcon : this.untoggledGlyphOrIcon);\n    }\n  }\n\n  setDefaultWithRedColor(withRedColor: boolean): void {\n    this.element.classList.toggle('toolbar-default-with-red-color', withRedColor);\n  }\n\n  setToggleWithRedColor(toggleWithRedColor: boolean): void {\n    this.element.classList.toggle('toolbar-toggle-with-red-color', toggleWithRedColor);\n  }\n\n  setToggleWithDot(toggleWithDot: boolean): void {\n    this.element.classList.toggle('toolbar-toggle-with-dot', toggleWithDot);\n  }\n}\n\nexport class ToolbarMenuButton extends ToolbarButton {\n  private readonly contextMenuHandler: (arg0: ContextMenu) => void;\n  private readonly useSoftMenu: boolean;\n  private triggerTimeout?: number;\n  private lastTriggerTime?: number;\n  constructor(contextMenuHandler: (arg0: ContextMenu) => void, useSoftMenu?: boolean) {\n    super('', 'largeicon-menu');\n    this.contextMenuHandler = contextMenuHandler;\n    this.useSoftMenu = Boolean(useSoftMenu);\n    ARIAUtils.markAsMenuButton(this.element);\n  }\n\n  mouseDown(event: MouseEvent): void {\n    if (event.buttons !== 1) {\n      super.mouseDown(event);\n      return;\n    }\n\n    if (!this.triggerTimeout) {\n      this.triggerTimeout = window.setTimeout(this.trigger.bind(this, event), 200);\n    }\n  }\n\n  private trigger(event: Event): void {\n    delete this.triggerTimeout;\n\n    // Throttling avoids entering a bad state on Macs when rapidly triggering context menus just\n    // after the window gains focus. See crbug.com/655556\n    if (this.lastTriggerTime && Date.now() - this.lastTriggerTime < 300) {\n      return;\n    }\n    const contextMenu = new ContextMenu(event, {\n      useSoftMenu: this.useSoftMenu,\n      x: this.element.totalOffsetLeft(),\n      y: this.element.totalOffsetTop() + this.element.offsetHeight,\n    });\n    this.contextMenuHandler(contextMenu);\n    void contextMenu.show();\n    this.lastTriggerTime = Date.now();\n  }\n\n  clicked(event: Event): void {\n    if (this.triggerTimeout) {\n      clearTimeout(this.triggerTimeout);\n    }\n    this.trigger(event);\n  }\n}\n\nexport class ToolbarSettingToggle extends ToolbarToggle {\n  private readonly defaultTitle: string;\n  private readonly setting: Common.Settings.Setting<boolean>;\n  private willAnnounceState: boolean;\n\n  constructor(setting: Common.Settings.Setting<boolean>, glyph: string, title: string) {\n    super(title, glyph);\n    this.defaultTitle = title;\n    this.setting = setting;\n    this.settingChanged();\n    this.setting.addChangeListener(this.settingChanged, this);\n\n    // Determines whether the toggle state will be announced to a screen reader\n    this.willAnnounceState = false;\n  }\n\n  private settingChanged(): void {\n    const toggled = this.setting.get();\n    this.setToggled(toggled);\n    const toggleAnnouncement = toggled ? i18nString(UIStrings.pressed) : i18nString(UIStrings.notPressed);\n    if (this.willAnnounceState) {\n      ARIAUtils.alert(toggleAnnouncement);\n    }\n    this.willAnnounceState = false;\n    this.setTitle(this.defaultTitle);\n  }\n\n  clicked(event: Event): void {\n    this.willAnnounceState = true;\n    this.setting.set(!this.toggled());\n    super.clicked(event);\n  }\n}\n\nexport class ToolbarSeparator extends ToolbarItem<void> {\n  constructor(spacer?: boolean) {\n    const element = document.createElement('div');\n    element.classList.add(spacer ? 'toolbar-spacer' : 'toolbar-divider');\n    super(element);\n  }\n}\n\nexport interface Provider {\n  item(): ToolbarItem|null;\n}\n\nexport interface ItemsProvider {\n  toolbarItems(): ToolbarItem[];\n}\n\nexport class ToolbarComboBox extends ToolbarItem<void> {\n  protected selectElementInternal: HTMLSelectElement;\n\n  constructor(changeHandler: ((arg0: Event) => void)|null, title: string, className?: string) {\n    const element = document.createElement('span');\n    element.classList.add('toolbar-select-container');\n    super(element);\n    this.selectElementInternal = (this.element.createChild('select', 'toolbar-item') as HTMLSelectElement);\n    const dropdownArrowIcon = Icon.create('smallicon-triangle-down', 'toolbar-dropdown-arrow');\n    this.element.appendChild(dropdownArrowIcon);\n    if (changeHandler) {\n      this.selectElementInternal.addEventListener('change', changeHandler, false);\n    }\n    ARIAUtils.setAccessibleName(this.selectElementInternal, title);\n    super.setTitle(title);\n    if (className) {\n      this.selectElementInternal.classList.add(className);\n    }\n  }\n\n  selectElement(): HTMLSelectElement {\n    return this.selectElementInternal;\n  }\n\n  size(): number {\n    return this.selectElementInternal.childElementCount;\n  }\n\n  options(): HTMLOptionElement[] {\n    return Array.prototype.slice.call(this.selectElementInternal.children, 0);\n  }\n\n  addOption(option: Element): void {\n    this.selectElementInternal.appendChild(option);\n  }\n\n  createOption(label: string, value?: string): Element {\n    const option = (this.selectElementInternal.createChild('option') as HTMLOptionElement);\n    option.text = label;\n    if (typeof value !== 'undefined') {\n      option.value = value;\n    }\n    return option;\n  }\n\n  applyEnabledState(enabled: boolean): void {\n    super.applyEnabledState(enabled);\n    this.selectElementInternal.disabled = !enabled;\n  }\n\n  removeOption(option: Element): void {\n    this.selectElementInternal.removeChild(option);\n  }\n\n  removeOptions(): void {\n    this.selectElementInternal.removeChildren();\n  }\n\n  selectedOption(): HTMLOptionElement|null {\n    if (this.selectElementInternal.selectedIndex >= 0) {\n      return this.selectElementInternal[this.selectElementInternal.selectedIndex] as HTMLOptionElement;\n    }\n    return null;\n  }\n\n  select(option: Element): void {\n    this.selectElementInternal.selectedIndex =\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Array.prototype.indexOf.call((this.selectElementInternal as any), option);\n  }\n\n  setSelectedIndex(index: number): void {\n    this.selectElementInternal.selectedIndex = index;\n  }\n\n  selectedIndex(): number {\n    return this.selectElementInternal.selectedIndex;\n  }\n\n  setMaxWidth(width: number): void {\n    this.selectElementInternal.style.maxWidth = width + 'px';\n  }\n\n  setMinWidth(width: number): void {\n    this.selectElementInternal.style.minWidth = width + 'px';\n  }\n}\n\nexport interface Option {\n  value: string;\n  label: string;\n}\n\nexport class ToolbarSettingComboBox extends ToolbarComboBox {\n  private optionsInternal: Option[];\n  private readonly setting: Common.Settings.Setting<string>;\n  private muteSettingListener?: boolean;\n  constructor(options: Option[], setting: Common.Settings.Setting<string>, accessibleName: string) {\n    super(null, accessibleName);\n    this.optionsInternal = options;\n    this.setting = setting;\n    this.selectElementInternal.addEventListener('change', this.valueChanged.bind(this), false);\n    this.setOptions(options);\n    setting.addChangeListener(this.settingChanged, this);\n  }\n\n  setOptions(options: Option[]): void {\n    this.optionsInternal = options;\n    this.selectElementInternal.removeChildren();\n    for (let i = 0; i < options.length; ++i) {\n      const dataOption = options[i];\n      const option = this.createOption(dataOption.label, dataOption.value);\n      this.selectElementInternal.appendChild(option);\n      if (this.setting.get() === dataOption.value) {\n        this.setSelectedIndex(i);\n      }\n    }\n  }\n\n  value(): string {\n    return this.optionsInternal[this.selectedIndex()].value;\n  }\n\n  private settingChanged(): void {\n    if (this.muteSettingListener) {\n      return;\n    }\n\n    const value = this.setting.get();\n    for (let i = 0; i < this.optionsInternal.length; ++i) {\n      if (value === this.optionsInternal[i].value) {\n        this.setSelectedIndex(i);\n        break;\n      }\n    }\n  }\n\n  private valueChanged(_event: Event): void {\n    const option = this.optionsInternal[this.selectedIndex()];\n    this.muteSettingListener = true;\n    this.setting.set(option.value);\n    this.muteSettingListener = false;\n  }\n}\n\nexport class ToolbarCheckbox extends ToolbarItem<void> {\n  inputElement: HTMLInputElement;\n\n  constructor(text: string, tooltip?: string, listener?: ((arg0: MouseEvent) => void)) {\n    super(CheckboxLabel.create(text));\n    this.element.classList.add('checkbox');\n    this.inputElement = (this.element as CheckboxLabel).checkboxElement;\n    if (tooltip) {\n      // install on the checkbox\n      Tooltip.install(this.inputElement, tooltip);\n      Tooltip.install((this.element as CheckboxLabel).textElement, tooltip);\n    }\n    if (listener) {\n      this.inputElement.addEventListener('click', listener, false);\n    }\n  }\n\n  checked(): boolean {\n    return this.inputElement.checked;\n  }\n\n  setChecked(value: boolean): void {\n    this.inputElement.checked = value;\n  }\n\n  applyEnabledState(enabled: boolean): void {\n    super.applyEnabledState(enabled);\n    this.inputElement.disabled = !enabled;\n  }\n\n  setIndeterminate(indeterminate: boolean): void {\n    this.inputElement.indeterminate = indeterminate;\n  }\n}\n\nexport class ToolbarSettingCheckbox extends ToolbarCheckbox {\n  constructor(setting: Common.Settings.Setting<boolean>, tooltip?: string, alternateTitle?: string) {\n    super(alternateTitle || setting.title() || '', tooltip);\n    bindCheckbox(this.inputElement, setting);\n  }\n}\n\nconst registeredToolbarItems: ToolbarItemRegistration[] = [];\n\nexport function registerToolbarItem(registration: ToolbarItemRegistration): void {\n  registeredToolbarItems.push(registration);\n}\n\nfunction getRegisteredToolbarItems(): ToolbarItemRegistration[] {\n  return registeredToolbarItems.filter(\n      item => Root.Runtime.Runtime.isDescriptorEnabled({experiment: undefined, condition: item.condition}));\n}\n\nexport interface ToolbarItemRegistration {\n  order?: number;\n  location: ToolbarItemLocation;\n  separator?: boolean;\n  showLabel?: boolean;\n  actionId?: string;\n  condition?: string;\n  loadItem?: (() => Promise<Provider>);\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum ToolbarItemLocation {\n  FILES_NAVIGATION_TOOLBAR = 'files-navigator-toolbar',\n  MAIN_TOOLBAR_RIGHT = 'main-toolbar-right',\n  MAIN_TOOLBAR_LEFT = 'main-toolbar-left',\n  STYLES_SIDEBARPANE_TOOLBAR = 'styles-sidebarpane-toolbar',\n}\n"],
  "mappings": "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",
  "names": []
}
