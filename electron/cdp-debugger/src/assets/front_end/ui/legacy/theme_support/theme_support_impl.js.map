{
  "version": 3,
  "sources": ["../../../../../../../front_end/ui/legacy/theme_support/theme_support_impl.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2011 Google Inc.  All rights reserved.\n * Copyright (C) 2006, 2007, 2008 Apple Inc.  All rights reserved.\n * Copyright (C) 2007 Matt Lilek (pewtermoose@gmail.com).\n * Copyright (C) 2009 Joseph Pecoraro\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../../core/common/common.js';\n\nimport inspectorSyntaxHighlightStyles from '../inspectorSyntaxHighlight.css.legacy.js';\n\nlet themeSupportInstance: ThemeSupport;\n\nconst themeValuesCache = new Map<CSSStyleDeclaration, Map<string, string>>();\n\nexport class ThemeSupport extends EventTarget {\n  private themeNameInternal = 'default';\n  private customSheets: Set<string> = new Set();\n  private computedRoot = Common.Lazy.lazy(() => window.getComputedStyle(document.documentElement));\n\n  private constructor(private setting: Common.Settings.Setting<string>) {\n    super();\n  }\n\n  static hasInstance(): boolean {\n    return typeof themeSupportInstance !== 'undefined';\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n    setting: Common.Settings.Setting<string>|null,\n  } = {forceNew: null, setting: null}): ThemeSupport {\n    const {forceNew, setting} = opts;\n    if (!themeSupportInstance || forceNew) {\n      if (!setting) {\n        throw new Error(`Unable to create theme support: setting must be provided: ${new Error().stack}`);\n      }\n\n      themeSupportInstance = new ThemeSupport(setting);\n    }\n\n    return themeSupportInstance;\n  }\n\n  getComputedValue(variableName: string, target: Element|null = null): string {\n    const computedRoot = target ? window.getComputedStyle(target) : this.computedRoot();\n    if (typeof computedRoot === 'symbol') {\n      throw new Error(`Computed value for property (${variableName}) could not be found on :root.`);\n    }\n\n    // Since we might query the same variable name from various targets we need to support\n    // per-target caching of computed values. Here we attempt to locate the particular computed\n    // value cache for the target. If no target was specified we use the default computed root,\n    // which belongs to the document element.\n    let computedRootCache = themeValuesCache.get(computedRoot);\n    if (!computedRootCache) {\n      computedRootCache = new Map<string, string>();\n      themeValuesCache.set(computedRoot, computedRootCache);\n    }\n\n    // Since theme changes trigger a reload, we can avoid repeatedly looking up color values\n    // dynamically. Instead we can look up the first time and cache them for future use,\n    // knowing that the cache will be invalidated by virtue of a reload when the theme changes.\n    let cachedValue = computedRootCache.get(variableName);\n    if (!cachedValue) {\n      cachedValue = computedRoot.getPropertyValue(variableName).trim();\n\n      // If we receive back an empty value (nothing has been set) we don't store it for the future.\n      // This means that subsequent requests will continue to query the styles in case the value\n      // has been set.\n      if (cachedValue) {\n        computedRootCache.set(variableName, cachedValue);\n      }\n    }\n\n    return cachedValue;\n  }\n\n  hasTheme(): boolean {\n    return this.themeNameInternal !== 'default';\n  }\n\n  themeName(): string {\n    return this.themeNameInternal;\n  }\n\n  injectHighlightStyleSheets(element: Element|ShadowRoot): void {\n    this.appendStyle(element, inspectorSyntaxHighlightStyles);\n  }\n\n  appendStyle(node: Node, {cssContent}: {cssContent: string}): void {\n    const styleElement = document.createElement('style');\n    styleElement.textContent = cssContent;\n    node.appendChild(styleElement);\n  }\n\n  injectCustomStyleSheets(element: Element|ShadowRoot): void {\n    for (const sheet of this.customSheets) {\n      const styleElement = document.createElement('style');\n      styleElement.textContent = sheet;\n      element.appendChild(styleElement);\n    }\n  }\n\n  addCustomStylesheet(sheetText: string): void {\n    this.customSheets.add(sheetText);\n  }\n\n  applyTheme(document: Document): void {\n    const isForcedColorsMode = window.matchMedia('(forced-colors: active)').matches;\n    if (isForcedColorsMode) {\n      return;\n    }\n\n    const systemPreferredTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'default';\n    this.themeNameInternal = this.setting.get() === 'systemPreferred' ? systemPreferredTheme : this.setting.get();\n\n    const wasDarkThemed = document.documentElement.classList.contains('-theme-with-dark-background');\n    document.documentElement.classList.toggle('-theme-with-dark-background', this.themeNameInternal === 'dark');\n\n    const isDarkThemed = document.documentElement.classList.contains('-theme-with-dark-background');\n\n    // In the event the theme changes we need to clear caches and notify subscribers.\n    if (wasDarkThemed !== isDarkThemed) {\n      themeValuesCache.clear();\n      this.customSheets.clear();\n      this.dispatchEvent(new ThemeChangeEvent());\n    }\n  }\n}\n\nexport class ThemeChangeEvent extends Event {\n  static readonly eventName = 'themechange';\n\n  constructor() {\n    super(ThemeChangeEvent.eventName, {bubbles: true, composed: true});\n  }\n}\n"],
  "mappings": "AAmCA;AAEA;AAEA,IAAI;AAEJ,MAAM,mBAAmB,oBAAI;AAEtB,kCAA2B,YAAY;AAAA,EAKpC,YAAoB,SAA0C;AACpE;AAD0B;AAAA;AAAA,EAJpB,oBAAoB;AAAA,EACpB,eAA4B,oBAAI;AAAA,EAChC,eAAe,OAAO,KAAK,KAAK,MAAM,OAAO,iBAAiB,SAAS;AAAA,SAMxE,cAAuB;AAC5B,WAAO,OAAO,yBAAyB;AAAA;AAAA,SAGlC,SAAS,OAGZ,EAAC,UAAU,MAAM,SAAS,QAAqB;AACjD,UAAM,EAAC,UAAU,YAAW;AAC5B,QAAI,CAAC,wBAAwB,UAAU;AACrC,UAAI,CAAC,SAAS;AACZ,cAAM,IAAI,MAAM,6DAA6D,IAAI,QAAQ;AAAA;AAG3F,6BAAuB,IAAI,aAAa;AAAA;AAG1C,WAAO;AAAA;AAAA,EAGT,iBAAiB,cAAsB,SAAuB,MAAc;AAC1E,UAAM,eAAe,SAAS,OAAO,iBAAiB,UAAU,KAAK;AACrE,QAAI,OAAO,iBAAiB,UAAU;AACpC,YAAM,IAAI,MAAM,gCAAgC;AAAA;AAOlD,QAAI,oBAAoB,iBAAiB,IAAI;AAC7C,QAAI,CAAC,mBAAmB;AACtB,0BAAoB,oBAAI;AACxB,uBAAiB,IAAI,cAAc;AAAA;AAMrC,QAAI,cAAc,kBAAkB,IAAI;AACxC,QAAI,CAAC,aAAa;AAChB,oBAAc,aAAa,iBAAiB,cAAc;AAK1D,UAAI,aAAa;AACf,0BAAkB,IAAI,cAAc;AAAA;AAAA;AAIxC,WAAO;AAAA;AAAA,EAGT,WAAoB;AAClB,WAAO,KAAK,sBAAsB;AAAA;AAAA,EAGpC,YAAoB;AAClB,WAAO,KAAK;AAAA;AAAA,EAGd,2BAA2B,SAAmC;AAC5D,SAAK,YAAY,SAAS;AAAA;AAAA,EAG5B,YAAY,MAAY,EAAC,cAAyC;AAChE,UAAM,eAAe,SAAS,cAAc;AAC5C,iBAAa,cAAc;AAC3B,SAAK,YAAY;AAAA;AAAA,EAGnB,wBAAwB,SAAmC;AACzD,eAAW,SAAS,KAAK,cAAc;AACrC,YAAM,eAAe,SAAS,cAAc;AAC5C,mBAAa,cAAc;AAC3B,cAAQ,YAAY;AAAA;AAAA;AAAA,EAIxB,oBAAoB,WAAyB;AAC3C,SAAK,aAAa,IAAI;AAAA;AAAA,EAGxB,WAAW,WAA0B;AACnC,UAAM,qBAAqB,OAAO,WAAW,2BAA2B;AACxE,QAAI,oBAAoB;AACtB;AAAA;AAGF,UAAM,uBAAuB,OAAO,WAAW,gCAAgC,UAAU,SAAS;AAClG,SAAK,oBAAoB,KAAK,QAAQ,UAAU,oBAAoB,uBAAuB,KAAK,QAAQ;AAExG,UAAM,gBAAgB,UAAS,gBAAgB,UAAU,SAAS;AAClE,cAAS,gBAAgB,UAAU,OAAO,+BAA+B,KAAK,sBAAsB;AAEpG,UAAM,eAAe,UAAS,gBAAgB,UAAU,SAAS;AAGjE,QAAI,kBAAkB,cAAc;AAClC,uBAAiB;AACjB,WAAK,aAAa;AAClB,WAAK,cAAc,IAAI;AAAA;AAAA;AAAA;AAKtB,sCAA+B,MAAM;AAAA,SAC1B,YAAY;AAAA,EAE5B,cAAc;AACZ,UAAM,iBAAiB,WAAW,EAAC,SAAS,MAAM,UAAU;AAAA;AAAA;",
  "names": []
}
