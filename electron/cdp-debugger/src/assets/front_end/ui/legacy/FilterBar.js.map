{
  "version": 3,
  "sources": ["../../../../../../front_end/ui/legacy/FilterBar.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\n\nimport * as ARIAUtils from './ARIAUtils.js';\nimport {Icon} from './Icon.js';\nimport {KeyboardShortcut, Modifiers} from './KeyboardShortcut.js';\nimport {bindCheckbox} from './SettingsUI.js';\nimport type {Suggestions} from './SuggestBox.js';\nimport {Events, TextPrompt} from './TextPrompt.js';\nimport type {ToolbarButton} from './Toolbar.js';\nimport {ToolbarSettingToggle} from './Toolbar.js';\nimport {Tooltip} from './Tooltip.js';\nimport {CheckboxLabel, createTextChild} from './UIUtils.js';\nimport {HBox} from './Widget.js';\nimport filterStyles from './filter.css.legacy.js';\n\nconst UIStrings = {\n  /**\n  *@description Text to filter result items\n  */\n  filter: 'Filter',\n  /**\n  *@description Text that appears when hover over the filter bar in the Network tool\n  */\n  egSmalldUrlacomb: 'e.g. `/small[\\d]+/ url:a.com/b`',\n  /**\n  *@description Text that appears when hover over the All button in the Network tool\n  *@example {Ctrl + } PH1\n  */\n  sclickToSelectMultipleTypes: '{PH1}Click to select multiple types',\n  /**\n  *@description Text for everything\n  */\n  allStrings: 'All',\n  /**\n   * @description Hover text for button to clear the filter that is applied\n   */\n  clearFilter: 'Clear input',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/FilterBar.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class FilterBar extends Common.ObjectWrapper.eventMixin<FilterBarEventTypes, typeof HBox>(HBox) {\n  private enabled: boolean;\n  private readonly stateSetting: Common.Settings.Setting<boolean>;\n  private readonly filterButtonInternal: ToolbarSettingToggle;\n  private filters: FilterUI[];\n  private alwaysShowFilters?: boolean;\n  private showingWidget?: boolean;\n\n  constructor(name: string, visibleByDefault?: boolean) {\n    super();\n    this.registerRequiredCSS(filterStyles);\n    this.enabled = true;\n    this.element.classList.add('filter-bar');\n\n    this.stateSetting =\n        Common.Settings.Settings.instance().createSetting('filterBar-' + name + '-toggled', Boolean(visibleByDefault));\n    this.filterButtonInternal =\n        new ToolbarSettingToggle(this.stateSetting, 'largeicon-filter', i18nString(UIStrings.filter));\n\n    this.filters = [];\n\n    this.updateFilterBar();\n    this.stateSetting.addChangeListener(this.updateFilterBar.bind(this));\n  }\n\n  filterButton(): ToolbarButton {\n    return this.filterButtonInternal;\n  }\n\n  addFilter(filter: FilterUI): void {\n    this.filters.push(filter);\n    this.element.appendChild(filter.element());\n    filter.addEventListener(FilterUIEvents.FilterChanged, this.filterChanged, this);\n    this.updateFilterButton();\n  }\n\n  setEnabled(enabled: boolean): void {\n    this.enabled = enabled;\n    this.filterButtonInternal.setEnabled(enabled);\n    this.updateFilterBar();\n  }\n\n  forceShowFilterBar(): void {\n    this.alwaysShowFilters = true;\n    this.updateFilterBar();\n  }\n\n  showOnce(): void {\n    this.stateSetting.set(true);\n  }\n\n  private filterChanged(): void {\n    this.updateFilterButton();\n    this.dispatchEventToListeners(FilterBarEvents.Changed);\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    this.updateFilterBar();\n  }\n\n  private updateFilterBar(): void {\n    if (!this.parentWidget() || this.showingWidget) {\n      return;\n    }\n    if (this.visible()) {\n      this.showingWidget = true;\n      this.showWidget();\n      this.showingWidget = false;\n    } else {\n      this.hideWidget();\n    }\n  }\n\n  focus(): void {\n    for (let i = 0; i < this.filters.length; ++i) {\n      if (this.filters[i] instanceof TextFilterUI) {\n        const textFilterUI = (this.filters[i] as TextFilterUI);\n        textFilterUI.focus();\n        break;\n      }\n    }\n  }\n\n  private updateFilterButton(): void {\n    let isActive = false;\n    for (const filter of this.filters) {\n      isActive = isActive || filter.isActive();\n    }\n    this.filterButtonInternal.setDefaultWithRedColor(isActive);\n    this.filterButtonInternal.setToggleWithRedColor(isActive);\n  }\n\n  clear(): void {\n    this.element.removeChildren();\n    this.filters = [];\n    this.updateFilterButton();\n  }\n\n  setting(): Common.Settings.Setting<boolean> {\n    return this.stateSetting;\n  }\n\n  visible(): boolean {\n    return this.alwaysShowFilters || (this.stateSetting.get() && this.enabled);\n  }\n}\n\nexport const enum FilterBarEvents {\n  Changed = 'Changed',\n}\n\nexport type FilterBarEventTypes = {\n  [FilterBarEvents.Changed]: void,\n};\n\nexport interface FilterUI extends Common.EventTarget.EventTarget<FilterUIEventTypes> {\n  isActive(): boolean;\n  element(): Element;\n}\n\nexport const enum FilterUIEvents {\n  FilterChanged = 'FilterChanged',\n}\n\nexport type FilterUIEventTypes = {\n  [FilterUIEvents.FilterChanged]: void,\n};\n\nexport class TextFilterUI extends Common.ObjectWrapper.ObjectWrapper<FilterUIEventTypes> implements FilterUI {\n  private readonly filterElement: HTMLDivElement;\n  private readonly filterInputElement: HTMLElement;\n  private prompt: TextPrompt;\n  private readonly proxyElement: HTMLElement;\n  private suggestionProvider: ((arg0: string, arg1: string, arg2?: boolean|undefined) => Promise<Suggestions>)|null;\n  constructor() {\n    super();\n    this.filterElement = document.createElement('div');\n    this.filterElement.className = 'filter-text-filter';\n\n    const container = this.filterElement.createChild('div', 'filter-input-container');\n    this.filterInputElement = container.createChild('span', 'filter-input-field');\n\n    this.prompt = new TextPrompt();\n    this.prompt.initialize(this.completions.bind(this), ' ', true);\n    this.proxyElement = (this.prompt.attach(this.filterInputElement) as HTMLElement);\n    Tooltip.install(this.proxyElement, i18nString(UIStrings.egSmalldUrlacomb));\n    this.prompt.setPlaceholder(i18nString(UIStrings.filter));\n    this.prompt.addEventListener(Events.TextChanged, this.valueChanged.bind(this));\n\n    this.suggestionProvider = null;\n\n    const clearButton = container.createChild('div', 'filter-input-clear-button');\n    Tooltip.install(clearButton, i18nString(UIStrings.clearFilter));\n    clearButton.appendChild(Icon.create('mediumicon-gray-cross-active', 'filter-cancel-button'));\n    clearButton.addEventListener('click', () => {\n      this.clear();\n      this.focus();\n    });\n    this.updateEmptyStyles();\n  }\n\n  private completions(expression: string, prefix: string, force?: boolean): Promise<Suggestions> {\n    if (this.suggestionProvider) {\n      return this.suggestionProvider(expression, prefix, force);\n    }\n    return Promise.resolve([]);\n  }\n  isActive(): boolean {\n    return Boolean(this.prompt.text());\n  }\n\n  element(): Element {\n    return this.filterElement;\n  }\n\n  value(): string {\n    return this.prompt.textWithCurrentSuggestion();\n  }\n\n  setValue(value: string): void {\n    this.prompt.setText(value);\n    this.valueChanged();\n  }\n\n  focus(): void {\n    this.filterInputElement.focus();\n  }\n\n  setSuggestionProvider(\n      suggestionProvider: (arg0: string, arg1: string, arg2?: boolean|undefined) => Promise<Suggestions>): void {\n    this.prompt.clearAutocomplete();\n    this.suggestionProvider = suggestionProvider;\n  }\n\n  private valueChanged(): void {\n    this.dispatchEventToListeners(FilterUIEvents.FilterChanged);\n    this.updateEmptyStyles();\n  }\n\n  private updateEmptyStyles(): void {\n    this.filterElement.classList.toggle('filter-text-empty', !this.prompt.text());\n  }\n\n  clear(): void {\n    this.setValue('');\n  }\n}\n\nexport class NamedBitSetFilterUI extends Common.ObjectWrapper.ObjectWrapper<FilterUIEventTypes> implements FilterUI {\n  private readonly filtersElement: HTMLDivElement;\n  private readonly typeFilterElementTypeNames: WeakMap<HTMLElement, string>;\n  private allowedTypes: Set<string>;\n  private readonly typeFilterElements: HTMLElement[];\n  private readonly setting: Common.Settings.Setting<{[key: string]: boolean}>|undefined;\n\n  constructor(items: Item[], setting?: Common.Settings.Setting<{[key: string]: boolean}>) {\n    super();\n    this.filtersElement = document.createElement('div');\n    this.filtersElement.classList.add('filter-bitset-filter');\n    ARIAUtils.markAsListBox(this.filtersElement);\n    ARIAUtils.markAsMultiSelectable(this.filtersElement);\n    Tooltip.install(this.filtersElement, i18nString(UIStrings.sclickToSelectMultipleTypes, {\n                      PH1: KeyboardShortcut.shortcutToString('', Modifiers.CtrlOrMeta),\n                    }));\n\n    this.typeFilterElementTypeNames = new WeakMap();\n    this.allowedTypes = new Set();\n    this.typeFilterElements = [];\n    this.addBit(NamedBitSetFilterUI.ALL_TYPES, i18nString(UIStrings.allStrings));\n    this.typeFilterElements[0].tabIndex = 0;\n    this.filtersElement.createChild('div', 'filter-bitset-filter-divider');\n\n    for (let i = 0; i < items.length; ++i) {\n      this.addBit(items[i].name, items[i].label(), items[i].title);\n    }\n\n    if (setting) {\n      this.setting = setting;\n      setting.addChangeListener(this.settingChanged.bind(this));\n      this.settingChanged();\n    } else {\n      this.toggleTypeFilter(NamedBitSetFilterUI.ALL_TYPES, false /* allowMultiSelect */);\n    }\n  }\n\n  reset(): void {\n    this.toggleTypeFilter(NamedBitSetFilterUI.ALL_TYPES, false /* allowMultiSelect */);\n  }\n\n  isActive(): boolean {\n    return !this.allowedTypes.has(NamedBitSetFilterUI.ALL_TYPES);\n  }\n\n  element(): Element {\n    return this.filtersElement;\n  }\n\n  accept(typeName: string): boolean {\n    return this.allowedTypes.has(NamedBitSetFilterUI.ALL_TYPES) || this.allowedTypes.has(typeName);\n  }\n\n  private settingChanged(): void {\n    const allowedTypesFromSetting = (this.setting as Common.Settings.Setting<{[key: string]: boolean}>).get();\n    this.allowedTypes = new Set();\n    for (const element of this.typeFilterElements) {\n      const typeName = this.typeFilterElementTypeNames.get(element);\n      if (typeName && allowedTypesFromSetting[typeName]) {\n        this.allowedTypes.add(typeName);\n      }\n    }\n    this.update();\n  }\n\n  private update(): void {\n    if (this.allowedTypes.size === 0 || this.allowedTypes.has(NamedBitSetFilterUI.ALL_TYPES)) {\n      this.allowedTypes = new Set();\n      this.allowedTypes.add(NamedBitSetFilterUI.ALL_TYPES);\n    }\n    for (const element of this.typeFilterElements) {\n      const typeName = this.typeFilterElementTypeNames.get(element);\n      const active = this.allowedTypes.has(typeName || '');\n      element.classList.toggle('selected', active);\n      ARIAUtils.setSelected(element, active);\n    }\n    this.dispatchEventToListeners(FilterUIEvents.FilterChanged);\n  }\n\n  private addBit(name: string, label: string, title?: string): void {\n    const typeFilterElement = (this.filtersElement.createChild('span', name) as HTMLElement);\n    typeFilterElement.tabIndex = -1;\n    this.typeFilterElementTypeNames.set(typeFilterElement, name);\n    createTextChild(typeFilterElement, label);\n    ARIAUtils.markAsOption(typeFilterElement);\n    if (title) {\n      typeFilterElement.title = title;\n    }\n    typeFilterElement.addEventListener('click', this.onTypeFilterClicked.bind(this), false);\n    typeFilterElement.addEventListener('keydown', this.onTypeFilterKeydown.bind(this), false);\n    this.typeFilterElements.push(typeFilterElement);\n  }\n\n  private onTypeFilterClicked(event: Event): void {\n    const e = (event as KeyboardEvent);\n    let toggle;\n    if (Host.Platform.isMac()) {\n      toggle = e.metaKey && !e.ctrlKey && !e.altKey && !e.shiftKey;\n    } else {\n      toggle = e.ctrlKey && !e.metaKey && !e.altKey && !e.shiftKey;\n    }\n    if (e.target) {\n      const element = (e.target as HTMLElement);\n      const typeName = (this.typeFilterElementTypeNames.get(element) as string);\n      this.toggleTypeFilter(typeName, toggle);\n    }\n  }\n\n  private onTypeFilterKeydown(ev: Event): void {\n    const event = (ev as KeyboardEvent);\n    const element = (event.target as HTMLElement | null);\n    if (!element) {\n      return;\n    }\n\n    if (event.key === 'ArrowLeft' || event.key === 'ArrowUp') {\n      if (this.keyFocusNextBit(element, true /* selectPrevious */)) {\n        event.consume(true);\n      }\n    } else if (event.key === 'ArrowRight' || event.key === 'ArrowDown') {\n      if (this.keyFocusNextBit(element, false /* selectPrevious */)) {\n        event.consume(true);\n      }\n    } else if (isEnterOrSpaceKey(event)) {\n      this.onTypeFilterClicked(event);\n    }\n  }\n\n  private keyFocusNextBit(target: HTMLElement, selectPrevious: boolean): boolean {\n    const index = this.typeFilterElements.indexOf(target);\n    if (index === -1) {\n      return false;\n    }\n    const nextIndex = selectPrevious ? index - 1 : index + 1;\n    if (nextIndex < 0 || nextIndex >= this.typeFilterElements.length) {\n      return false;\n    }\n\n    const nextElement = this.typeFilterElements[nextIndex];\n    nextElement.tabIndex = 0;\n    target.tabIndex = -1;\n    nextElement.focus();\n    return true;\n  }\n\n  private toggleTypeFilter(typeName: string, allowMultiSelect: boolean): void {\n    if (allowMultiSelect && typeName !== NamedBitSetFilterUI.ALL_TYPES) {\n      this.allowedTypes.delete(NamedBitSetFilterUI.ALL_TYPES);\n    } else {\n      this.allowedTypes = new Set();\n    }\n\n    if (this.allowedTypes.has(typeName)) {\n      this.allowedTypes.delete(typeName);\n    } else {\n      this.allowedTypes.add(typeName);\n    }\n\n    if (this.setting) {\n      // Settings do not support `Sets` so convert it back to the Map-like object.\n      const updatedSetting = ({} as {[key: string]: boolean});\n      for (const type of this.allowedTypes) {\n        updatedSetting[type] = true;\n      }\n      this.setting.set(updatedSetting);\n    } else {\n      this.update();\n    }\n  }\n\n  static readonly ALL_TYPES = 'all';\n}\n\nexport class CheckboxFilterUI extends Common.ObjectWrapper.ObjectWrapper<FilterUIEventTypes> implements FilterUI {\n  private readonly filterElement: HTMLDivElement;\n  private readonly activeWhenChecked: boolean;\n  private label: CheckboxLabel;\n  private checkboxElement: HTMLInputElement;\n  constructor(\n      className: string, title: string, activeWhenChecked?: boolean, setting?: Common.Settings.Setting<boolean>) {\n    super();\n    this.filterElement = document.createElement('div');\n    this.filterElement.classList.add('filter-checkbox-filter');\n    this.activeWhenChecked = Boolean(activeWhenChecked);\n    this.label = CheckboxLabel.create(title);\n    this.filterElement.appendChild(this.label);\n    this.checkboxElement = this.label.checkboxElement;\n    if (setting) {\n      bindCheckbox(this.checkboxElement, setting);\n    } else {\n      this.checkboxElement.checked = true;\n    }\n    this.checkboxElement.addEventListener('change', this.fireUpdated.bind(this), false);\n  }\n\n  isActive(): boolean {\n    return this.activeWhenChecked === this.checkboxElement.checked;\n  }\n\n  checked(): boolean {\n    return this.checkboxElement.checked;\n  }\n\n  setChecked(checked: boolean): void {\n    this.checkboxElement.checked = checked;\n  }\n\n  element(): HTMLDivElement {\n    return this.filterElement;\n  }\n\n  labelElement(): Element {\n    return this.label;\n  }\n\n  private fireUpdated(): void {\n    this.dispatchEventToListeners(FilterUIEvents.FilterChanged);\n  }\n\n  setColor(backgroundColor: string, borderColor: string): void {\n    this.label.backgroundColor = backgroundColor;\n    this.label.borderColor = borderColor;\n  }\n}\nexport interface Item {\n  name: string;\n  label: () => string;\n  title?: string;\n}\n"],
  "mappings": "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",
  "names": []
}
