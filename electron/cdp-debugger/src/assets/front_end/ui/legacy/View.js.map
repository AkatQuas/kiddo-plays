{
  "version": 3,
  "sources": ["../../../../../../front_end/ui/legacy/View.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../core/platform/platform.js';\n\nimport type {TabbedPane} from './TabbedPane.js';\nimport type {ToolbarItem, ToolbarMenuButton} from './Toolbar.js';\nimport {ViewManager} from './ViewManager.js';\nimport type {Widget} from './Widget.js';\nimport {VBox} from './Widget.js';\n\nexport interface View {\n  viewId(): string;\n\n  title(): Platform.UIString.LocalizedString;\n\n  isCloseable(): boolean;\n\n  isPreviewFeature(): boolean;\n\n  isTransient(): boolean;\n\n  toolbarItems(): Promise<ToolbarItem[]>;\n\n  widget(): Promise<Widget>;\n\n  disposeView(): void|Promise<void>;\n}\n\nexport class SimpleView extends VBox implements View {\n  readonly #title: Platform.UIString.LocalizedString;\n  readonly #viewId: string;\n\n  constructor(title: Platform.UIString.LocalizedString, isWebComponent?: boolean, viewId?: string) {\n    super(isWebComponent);\n    this.#title = title;\n    this.#viewId = viewId ?? title;\n  }\n\n  viewId(): string {\n    return this.#viewId;\n  }\n\n  title(): Platform.UIString.LocalizedString {\n    return this.#title;\n  }\n\n  isCloseable(): boolean {\n    return false;\n  }\n\n  isTransient(): boolean {\n    return false;\n  }\n\n  toolbarItems(): Promise<ToolbarItem[]> {\n    return Promise.resolve([]);\n  }\n\n  widget(): Promise<Widget> {\n    return Promise.resolve(this);\n  }\n\n  revealView(): Promise<void> {\n    return ViewManager.instance().revealView(this);\n  }\n\n  disposeView(): void {\n  }\n\n  isPreviewFeature(): boolean {\n    return false;\n  }\n}\n\nexport interface ViewLocation {\n  appendApplicableItems(locationName: string): void;\n  appendView(view: View, insertBefore?: View|null): void;\n  showView(view: View, insertBefore?: View|null, userGesture?: boolean): Promise<void>;\n  removeView(view: View): void;\n  widget(): Widget;\n}\n\nexport interface TabbedViewLocation extends ViewLocation {\n  tabbedPane(): TabbedPane;\n  enableMoreTabsButton(): ToolbarMenuButton;\n}\n\nexport interface ViewLocationResolver {\n  resolveLocation(location: string): ViewLocation|null;\n}\n"],
  "mappings": "AAQA;AAEA;AAoBO,gCAAyB,KAAqB;AAAA;AAAA;AAAA,EAInD,YAAY,OAA0C,gBAA0B,QAAiB;AAC/F,UAAM;AACN,kBAAc;AACd,mBAAe,UAAU;AAAA;AAAA,EAG3B,SAAiB;AACf,WAAO;AAAA;AAAA,EAGT,QAA2C;AACzC,WAAO;AAAA;AAAA,EAGT,cAAuB;AACrB,WAAO;AAAA;AAAA,EAGT,cAAuB;AACrB,WAAO;AAAA;AAAA,EAGT,eAAuC;AACrC,WAAO,QAAQ,QAAQ;AAAA;AAAA,EAGzB,SAA0B;AACxB,WAAO,QAAQ,QAAQ;AAAA;AAAA,EAGzB,aAA4B;AAC1B,WAAO,YAAY,WAAW,WAAW;AAAA;AAAA,EAG3C,cAAoB;AAAA;AAAA,EAGpB,mBAA4B;AAC1B,WAAO;AAAA;AAAA;",
  "names": []
}
