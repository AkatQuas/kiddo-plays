{
  "version": 3,
  "sources": ["../../../../../../front_end/ui/legacy/ZoomManager.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport type * as Host from '../../core/host/host.js';\n\nlet zoomManagerInstance: ZoomManager|undefined;\n\nexport class ZoomManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  private frontendHost: Host.InspectorFrontendHostAPI.InspectorFrontendHostAPI;\n  private zoomFactorInternal: number;\n\n  private constructor(window: Window, frontendHost: Host.InspectorFrontendHostAPI.InspectorFrontendHostAPI) {\n    super();\n    this.frontendHost = frontendHost;\n    this.zoomFactorInternal = this.frontendHost.zoomFactor();\n    window.addEventListener('resize', this.onWindowResize.bind(this), true);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n    win: Window|null,\n    frontendHost: Host.InspectorFrontendHostAPI.InspectorFrontendHostAPI|null,\n  } = {forceNew: null, win: null, frontendHost: null}): ZoomManager {\n    const {forceNew, win, frontendHost} = opts;\n    if (!zoomManagerInstance || forceNew) {\n      if (!win || !frontendHost) {\n        throw new Error(\n            `Unable to create zoom manager: window and frontendHost must be provided: ${new Error().stack}`);\n      }\n\n      zoomManagerInstance = new ZoomManager(win, frontendHost);\n    }\n\n    return zoomManagerInstance;\n  }\n\n  static removeInstance(): void {\n    zoomManagerInstance = undefined;\n  }\n\n  zoomFactor(): number {\n    return this.zoomFactorInternal;\n  }\n\n  cssToDIP(value: number): number {\n    return value * this.zoomFactorInternal;\n  }\n\n  dipToCSS(valueDIP: number): number {\n    return valueDIP / this.zoomFactorInternal;\n  }\n\n  private onWindowResize(): void {\n    const oldZoomFactor = this.zoomFactorInternal;\n    this.zoomFactorInternal = this.frontendHost.zoomFactor();\n    if (oldZoomFactor !== this.zoomFactorInternal) {\n      this.dispatchEventToListeners(Events.ZoomChanged, {from: oldZoomFactor, to: this.zoomFactorInternal});\n    }\n  }\n}\n\nexport const enum Events {\n  ZoomChanged = 'ZoomChanged',\n}\n\nexport interface ZoomChangedEvent {\n  from: number;\n  to: number;\n}\n\nexport type EventTypes = {\n  [Events.ZoomChanged]: ZoomChangedEvent,\n};\n"],
  "mappings": "AAIA;AAGA,IAAI;AAEG,iCAA0B,OAAO,cAAc,cAA0B;AAAA,EACtE;AAAA,EACA;AAAA,EAEA,YAAY,QAAgB,cAAsE;AACxG;AACA,SAAK,eAAe;AACpB,SAAK,qBAAqB,KAAK,aAAa;AAC5C,WAAO,iBAAiB,UAAU,KAAK,eAAe,KAAK,OAAO;AAAA;AAAA,SAG7D,SAAS,OAIZ,EAAC,UAAU,MAAM,KAAK,MAAM,cAAc,QAAoB;AAChE,UAAM,EAAC,UAAU,KAAK,iBAAgB;AACtC,QAAI,CAAC,uBAAuB,UAAU;AACpC,UAAI,CAAC,OAAO,CAAC,cAAc;AACzB,cAAM,IAAI,MACN,4EAA4E,IAAI,QAAQ;AAAA;AAG9F,4BAAsB,IAAI,YAAY,KAAK;AAAA;AAG7C,WAAO;AAAA;AAAA,SAGF,iBAAuB;AAC5B,0BAAsB;AAAA;AAAA,EAGxB,aAAqB;AACnB,WAAO,KAAK;AAAA;AAAA,EAGd,SAAS,OAAuB;AAC9B,WAAO,QAAQ,KAAK;AAAA;AAAA,EAGtB,SAAS,UAA0B;AACjC,WAAO,WAAW,KAAK;AAAA;AAAA,EAGjB,iBAAuB;AAC7B,UAAM,gBAAgB,KAAK;AAC3B,SAAK,qBAAqB,KAAK,aAAa;AAC5C,QAAI,kBAAkB,KAAK,oBAAoB;AAC7C,WAAK,yBAAyB,OAAO,aAAa,EAAC,MAAM,eAAe,IAAI,KAAK;AAAA;AAAA;AAAA;AAKhF,WAAW,SAAX,kBAAW,YAAX;AACL,2BAAc;AADE;AAAA;",
  "names": []
}
