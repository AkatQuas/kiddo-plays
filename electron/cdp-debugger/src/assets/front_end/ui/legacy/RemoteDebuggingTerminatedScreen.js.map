{
  "version": 3,
  "sources": ["../../../../../../front_end/ui/legacy/RemoteDebuggingTerminatedScreen.ts"],
  "sourcesContent": ["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\n\nimport {Dialog} from './Dialog.js';\nimport {SizeBehavior} from './GlassPane.js';\nimport remoteDebuggingTerminatedScreenStyles from './remoteDebuggingTerminatedScreen.css.legacy.js';\nimport {createTextButton} from './UIUtils.js';\nimport {VBox} from './Widget.js';\n\nconst UIStrings = {\n  /**\n   * @description Text in a dialog box in DevTools stating why remote debugging has been terminated.\n   * \"Remote debugging\" here means that DevTools on a PC is inspecting a website running on an actual mobile device\n   * (see https://developer.chrome.com/docs/devtools/remote-debugging/).\n   */\n  debuggingConnectionWasClosed: 'Debugging connection was closed. Reason: ',\n  /**\n   * @description Text in a dialog box showing how to reconnect to DevTools when remote debugging has been terminated.\n   * \"Remote debugging\" here means that DevTools on a PC is inspecting a website running on an actual mobile device\n   * (see https://developer.chrome.com/docs/devtools/remote-debugging/).\n   * \"Reconnect when ready\", refers to the state of the mobile device. The developer first has to put the mobile\n   * device back in a state where it can be inspected, before DevTools can reconnect to it.\n   */\n  reconnectWhenReadyByReopening: 'Reconnect when ready by reopening DevTools.',\n  /**\n   * @description Text on a button to reconnect Devtools when remote debugging terminated.\n   * \"Remote debugging\" here means that DevTools on a PC is inspecting a website running on an actual mobile device\n   * (see https://developer.chrome.com/docs/devtools/remote-debugging/).\n   */\n  reconnectDevtools: 'Reconnect `DevTools`',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/RemoteDebuggingTerminatedScreen.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class RemoteDebuggingTerminatedScreen extends VBox {\n  constructor(reason: string) {\n    super(true);\n    this.registerRequiredCSS(remoteDebuggingTerminatedScreenStyles);\n    const message = this.contentElement.createChild('div', 'message');\n    const span = message.createChild('span');\n    span.append(i18nString(UIStrings.debuggingConnectionWasClosed));\n    const reasonElement = span.createChild('span', 'reason');\n    reasonElement.textContent = reason;\n    this.contentElement.createChild('div', 'message').textContent = i18nString(UIStrings.reconnectWhenReadyByReopening);\n    const button = createTextButton(i18nString(UIStrings.reconnectDevtools), () => window.location.reload());\n    this.contentElement.createChild('div', 'button').appendChild(button);\n  }\n\n  static show(reason: string): void {\n    const dialog = new Dialog();\n    dialog.setSizeBehavior(SizeBehavior.MeasureContent);\n    dialog.addCloseButton();\n    dialog.setDimmed(true);\n    new RemoteDebuggingTerminatedScreen(reason).show(dialog.contentElement);\n    dialog.show();\n  }\n}\n"],
  "mappings": "AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA,MAAM,YAAY;AAAA,EAMhB,8BAA8B;AAAA,EAQ9B,+BAA+B;AAAA,EAM/B,mBAAmB;AAAA;AAErB,MAAM,OAAO,KAAK,KAAK,kBAAkB,gDAAgD;AACzF,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AACzD,qDAA8C,KAAK;AAAA,EACxD,YAAY,QAAgB;AAC1B,UAAM;AACN,SAAK,oBAAoB;AACzB,UAAM,UAAU,KAAK,eAAe,YAAY,OAAO;AACvD,UAAM,OAAO,QAAQ,YAAY;AACjC,SAAK,OAAO,WAAW,UAAU;AACjC,UAAM,gBAAgB,KAAK,YAAY,QAAQ;AAC/C,kBAAc,cAAc;AAC5B,SAAK,eAAe,YAAY,OAAO,WAAW,cAAc,WAAW,UAAU;AACrF,UAAM,SAAS,iBAAiB,WAAW,UAAU,oBAAoB,MAAM,OAAO,SAAS;AAC/F,SAAK,eAAe,YAAY,OAAO,UAAU,YAAY;AAAA;AAAA,SAGxD,KAAK,QAAsB;AAChC,UAAM,SAAS,IAAI;AACnB,WAAO,gBAAgB,aAAa;AACpC,WAAO;AACP,WAAO,UAAU;AACjB,QAAI,gCAAgC,QAAQ,KAAK,OAAO;AACxD,WAAO;AAAA;AAAA;",
  "names": []
}
