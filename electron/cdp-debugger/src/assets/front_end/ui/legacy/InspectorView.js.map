{
  "version": 3,
  "sources": ["../../../../../../front_end/ui/legacy/InspectorView.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\n\nimport type {ActionDelegate as ActionDelegateInterface} from './ActionRegistration.js';\nimport type {Context} from './Context.js';\nimport type {ContextMenu} from './ContextMenu.js';\nimport {Dialog} from './Dialog.js';\nimport {DockController, DockState} from './DockController.js';\nimport {GlassPane} from './GlassPane.js';\nimport type {Icon} from './Icon.js';\nimport {Infobar, Type as InfobarType} from './Infobar.js';\nimport {KeyboardShortcut} from './KeyboardShortcut.js';\nimport type {Panel} from './Panel.js';\nimport {SplitWidget} from './SplitWidget.js';\nimport {Events as TabbedPaneEvents} from './TabbedPane.js';\nimport type {EventData, TabbedPane, TabbedPaneTabDelegate} from './TabbedPane.js';\nimport {ToolbarButton} from './Toolbar.js';\nimport type {TabbedViewLocation, View, ViewLocation, ViewLocationResolver} from './View.js';\nimport {ViewManager} from './ViewManager.js';\nimport type {Widget} from './Widget.js';\nimport {VBox, WidgetFocusRestorer} from './Widget.js';\nimport * as ARIAUtils from './ARIAUtils.js';\nimport inspectorViewTabbedPaneStyles from './inspectorViewTabbedPane.css.legacy.js';\n\nconst UIStrings = {\n  /**\n  *@description Title of more tabs button in inspector view\n  */\n  moreTools: 'More Tools',\n  /**\n  *@description Text that appears when hovor over the close button on the drawer view\n  */\n  closeDrawer: 'Close drawer',\n  /**\n  *@description The aria label for main tabbed pane that contains Panels\n  */\n  panels: 'Panels',\n  /**\n  *@description Title of an action that reloads the DevTools\n  */\n  reloadDevtools: 'Reload DevTools',\n  /**\n  *@description Text for context menu action to move a tab to the main panel\n  */\n  moveToTop: 'Move to top',\n  /**\n  *@description Text for context menu action to move a tab to the drawer\n  */\n  moveToBottom: 'Move to bottom',\n  /**\n   * @description Text shown in a prompt to the user when DevTools is started and the\n   * currently selected DevTools locale does not match Chrome's locale.\n   * The placeholder is the current Chrome language.\n   * @example {German} PH1\n   */\n  devToolsLanguageMissmatch: 'DevTools is now available in {PH1}!',\n  /**\n   * @description An option the user can select when we notice that DevTools\n   * is configured with a different locale than Chrome. This option means DevTools will\n   * always try and display the DevTools UI in the same language as Chrome.\n   */\n  setToBrowserLanguage: 'Always match Chrome\\'s language',\n  /**\n   * @description An option the user can select when DevTools notices that DevTools\n   * is configured with a different locale than Chrome. This option means DevTools UI\n   * will be switched to the language specified in the placeholder.\n   * @example {German} PH1\n   */\n  setToSpecificLanguage: 'Switch DevTools to {PH1}',\n  /**\n  *@description The aria label for main toolbar\n  */\n  mainToolbar: 'Main toolbar',\n  /**\n  *@description The aria label for the drawer.\n  */\n  drawer: 'Tool drawer',\n  /**\n  *@description The aria label for the drawer shown.\n  */\n  drawerShown: 'Drawer shown',\n  /**\n  *@description The aria label for the drawer hidden.\n  */\n  drawerHidden: 'Drawer hidden',\n  /**\n  * @description Request for the user to select a local file system folder for DevTools\n  * to store local overrides in.\n  */\n  selectOverrideFolder: 'Select a folder to store override files in.',\n  /**\n  *@description Label for a button which opens a file picker.\n  */\n  selectFolder: 'Select folder',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/InspectorView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet inspectorViewInstance: InspectorView;\n\nexport class InspectorView extends VBox implements ViewLocationResolver {\n  private readonly drawerSplitWidget: SplitWidget;\n  private readonly tabDelegate: InspectorViewTabDelegate;\n  private readonly drawerTabbedLocation: TabbedViewLocation;\n  private drawerTabbedPane: TabbedPane;\n  private infoBarDiv!: HTMLDivElement|null;\n  private readonly tabbedLocation: TabbedViewLocation;\n  readonly tabbedPane: TabbedPane;\n  private readonly keyDownBound: (event: Event) => void;\n  private currentPanelLocked?: boolean;\n  private focusRestorer?: WidgetFocusRestorer|null;\n  private ownerSplitWidget?: SplitWidget;\n  private reloadRequiredInfobar?: Infobar;\n  #selectOverrideFolderInfobar?: Infobar;\n\n  constructor() {\n    super();\n    GlassPane.setContainer(this.element);\n    this.setMinimumSize(250, 72);\n\n    // DevTools sidebar is a vertical split of panels tabbed pane and a drawer.\n    this.drawerSplitWidget = new SplitWidget(false, true, 'Inspector.drawerSplitViewState', 200, 200);\n    this.drawerSplitWidget.hideSidebar();\n    this.drawerSplitWidget.enableShowModeSaving();\n    this.drawerSplitWidget.show(this.element);\n\n    this.tabDelegate = new InspectorViewTabDelegate();\n\n    // Create drawer tabbed pane.\n    this.drawerTabbedLocation =\n        ViewManager.instance().createTabbedLocation(this.showDrawer.bind(this, false), 'drawer-view', true, true);\n    const moreTabsButton = this.drawerTabbedLocation.enableMoreTabsButton();\n    moreTabsButton.setTitle(i18nString(UIStrings.moreTools));\n    this.drawerTabbedPane = this.drawerTabbedLocation.tabbedPane();\n    this.drawerTabbedPane.setMinimumSize(0, 27);\n    this.drawerTabbedPane.element.classList.add('drawer-tabbed-pane');\n    const closeDrawerButton = new ToolbarButton(i18nString(UIStrings.closeDrawer), 'largeicon-delete');\n    closeDrawerButton.addEventListener(ToolbarButton.Events.Click, this.closeDrawer, this);\n    this.drawerTabbedPane.addEventListener(TabbedPaneEvents.TabSelected, this.tabSelected, this);\n    this.drawerTabbedPane.setTabDelegate(this.tabDelegate);\n\n    const drawerElement = this.drawerTabbedPane.element;\n    ARIAUtils.markAsComplementary(drawerElement);\n    ARIAUtils.setAccessibleName(drawerElement, i18nString(UIStrings.drawer));\n\n    this.drawerSplitWidget.installResizer(this.drawerTabbedPane.headerElement());\n    this.drawerSplitWidget.setSidebarWidget(this.drawerTabbedPane);\n    this.drawerTabbedPane.rightToolbar().appendToolbarItem(closeDrawerButton);\n\n    // Create main area tabbed pane.\n    this.tabbedLocation = ViewManager.instance().createTabbedLocation(\n        Host.InspectorFrontendHost.InspectorFrontendHostInstance.bringToFront.bind(\n            Host.InspectorFrontendHost.InspectorFrontendHostInstance),\n        'panel', true, true, Root.Runtime.Runtime.queryParam('panel'));\n\n    this.tabbedPane = this.tabbedLocation.tabbedPane();\n    this.tabbedPane.element.classList.add('main-tabbed-pane');\n    this.tabbedPane.registerRequiredCSS(inspectorViewTabbedPaneStyles);\n    this.tabbedPane.addEventListener(TabbedPaneEvents.TabSelected, this.tabSelected, this);\n    this.tabbedPane.setAccessibleName(i18nString(UIStrings.panels));\n    this.tabbedPane.setTabDelegate(this.tabDelegate);\n\n    const mainHeaderElement = this.tabbedPane.headerElement();\n    ARIAUtils.markAsNavigation(mainHeaderElement);\n    ARIAUtils.setAccessibleName(mainHeaderElement, i18nString(UIStrings.mainToolbar));\n\n    // Store the initial selected panel for use in launch histograms\n    Host.userMetrics.setLaunchPanel(this.tabbedPane.selectedTabId);\n\n    if (Host.InspectorFrontendHost.isUnderTest()) {\n      this.tabbedPane.setAutoSelectFirstItemOnShow(false);\n    }\n    this.drawerSplitWidget.setMainWidget(this.tabbedPane);\n\n    this.keyDownBound = this.keyDown.bind(this);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.ShowPanel, showPanel.bind(this));\n\n    function showPanel(this: InspectorView, {data: panelName}: Common.EventTarget.EventTargetEvent<string>): void {\n      void this.showPanel(panelName);\n    }\n\n    if (shouldShowLocaleInfobar()) {\n      const infobar = createLocaleInfobar();\n      infobar.setParentView(this);\n      this.attachInfobar(infobar);\n    }\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  }|undefined = {forceNew: null}): InspectorView {\n    const {forceNew} = opts;\n    if (!inspectorViewInstance || forceNew) {\n      inspectorViewInstance = new InspectorView();\n    }\n\n    return inspectorViewInstance;\n  }\n\n  static maybeGetInspectorViewInstance(): InspectorView|undefined {\n    return inspectorViewInstance;\n  }\n\n  wasShown(): void {\n    this.element.ownerDocument.addEventListener('keydown', this.keyDownBound, false);\n  }\n\n  willHide(): void {\n    this.element.ownerDocument.removeEventListener('keydown', this.keyDownBound, false);\n  }\n\n  resolveLocation(locationName: string): ViewLocation|null {\n    if (locationName === 'drawer-view') {\n      return this.drawerTabbedLocation;\n    }\n    if (locationName === 'panel') {\n      return this.tabbedLocation;\n    }\n    return null;\n  }\n\n  async createToolbars(): Promise<void> {\n    await this.tabbedPane.leftToolbar().appendItemsAtLocation('main-toolbar-left');\n    await this.tabbedPane.rightToolbar().appendItemsAtLocation('main-toolbar-right');\n  }\n\n  addPanel(view: View): void {\n    this.tabbedLocation.appendView(view);\n  }\n\n  hasPanel(panelName: string): boolean {\n    return this.tabbedPane.hasTab(panelName);\n  }\n\n  async panel(panelName: string): Promise<Panel> {\n    const view = ViewManager.instance().view(panelName);\n    if (!view) {\n      throw new Error(`Expected view for panel '${panelName}'`);\n    }\n    return view.widget() as Promise<Panel>;\n  }\n\n  onSuspendStateChanged(allTargetsSuspended: boolean): void {\n    this.currentPanelLocked = allTargetsSuspended;\n    this.tabbedPane.setCurrentTabLocked(this.currentPanelLocked);\n    this.tabbedPane.leftToolbar().setEnabled(!this.currentPanelLocked);\n    this.tabbedPane.rightToolbar().setEnabled(!this.currentPanelLocked);\n  }\n\n  canSelectPanel(panelName: string): boolean {\n    return !this.currentPanelLocked || this.tabbedPane.selectedTabId === panelName;\n  }\n\n  async showPanel(panelName: string): Promise<void> {\n    await ViewManager.instance().showView(panelName);\n  }\n\n  setPanelIcon(tabId: string, icon: Icon|null): void {\n    // Find the tabbed location where the panel lives\n    const tabbedPane = this.getTabbedPaneForTabId(tabId);\n    if (tabbedPane) {\n      tabbedPane.setTabIcon(tabId, icon);\n    }\n  }\n\n  private emitDrawerChangeEvent(isDrawerOpen: boolean): void {\n    const evt = new CustomEvent(Events.DrawerChange, {bubbles: true, cancelable: true, detail: {isDrawerOpen}});\n    document.body.dispatchEvent(evt);\n  }\n\n  private getTabbedPaneForTabId(tabId: string): TabbedPane|null {\n    // Tab exists in the main panel\n    if (this.tabbedPane.hasTab(tabId)) {\n      return this.tabbedPane;\n    }\n\n    // Tab exists in the drawer\n    if (this.drawerTabbedPane.hasTab(tabId)) {\n      return this.drawerTabbedPane;\n    }\n\n    // Tab is not open\n    return null;\n  }\n\n  currentPanelDeprecated(): Widget|null {\n    return (ViewManager.instance().materializedWidget(this.tabbedPane.selectedTabId || '') as Widget | null);\n  }\n\n  showDrawer(focus: boolean): void {\n    if (this.drawerTabbedPane.isShowing()) {\n      return;\n    }\n    this.drawerSplitWidget.showBoth();\n    if (focus) {\n      this.focusRestorer = new WidgetFocusRestorer(this.drawerTabbedPane);\n    } else {\n      this.focusRestorer = null;\n    }\n    this.emitDrawerChangeEvent(true);\n    ARIAUtils.alert(i18nString(UIStrings.drawerShown));\n  }\n\n  drawerVisible(): boolean {\n    return this.drawerTabbedPane.isShowing();\n  }\n\n  closeDrawer(): void {\n    if (!this.drawerTabbedPane.isShowing()) {\n      return;\n    }\n    if (this.focusRestorer) {\n      this.focusRestorer.restore();\n    }\n    this.drawerSplitWidget.hideSidebar(true);\n\n    this.emitDrawerChangeEvent(false);\n    ARIAUtils.alert(i18nString(UIStrings.drawerHidden));\n  }\n\n  setDrawerMinimized(minimized: boolean): void {\n    this.drawerSplitWidget.setSidebarMinimized(minimized);\n    this.drawerSplitWidget.setResizable(!minimized);\n  }\n\n  isDrawerMinimized(): boolean {\n    return this.drawerSplitWidget.isSidebarMinimized();\n  }\n\n  closeDrawerTab(id: string, userGesture?: boolean): void {\n    this.drawerTabbedPane.closeTab(id, userGesture);\n    Host.userMetrics.panelClosed(id);\n  }\n\n  private keyDown(event: Event): void {\n    const keyboardEvent = (event as KeyboardEvent);\n    if (!KeyboardShortcut.eventHasCtrlEquivalentKey(keyboardEvent) || keyboardEvent.altKey || keyboardEvent.shiftKey) {\n      return;\n    }\n\n    // Ctrl/Cmd + 1-9 should show corresponding panel.\n    const panelShortcutEnabled = Common.Settings.moduleSetting('shortcutPanelSwitch').get();\n    if (panelShortcutEnabled) {\n      let panelIndex = -1;\n      if (keyboardEvent.keyCode > 0x30 && keyboardEvent.keyCode < 0x3A) {\n        panelIndex = keyboardEvent.keyCode - 0x31;\n      } else if (\n          keyboardEvent.keyCode > 0x60 && keyboardEvent.keyCode < 0x6A &&\n          keyboardEvent.location === KeyboardEvent.DOM_KEY_LOCATION_NUMPAD) {\n        panelIndex = keyboardEvent.keyCode - 0x61;\n      }\n      if (panelIndex !== -1) {\n        const panelName = this.tabbedPane.tabIds()[panelIndex];\n        if (panelName) {\n          if (!Dialog.hasInstance() && !this.currentPanelLocked) {\n            void this.showPanel(panelName);\n          }\n          event.consume(true);\n        }\n      }\n    }\n  }\n\n  onResize(): void {\n    GlassPane.containerMoved(this.element);\n  }\n\n  topResizerElement(): Element {\n    return this.tabbedPane.headerElement();\n  }\n\n  toolbarItemResized(): void {\n    this.tabbedPane.headerResized();\n  }\n\n  private tabSelected(event: Common.EventTarget.EventTargetEvent<EventData>): void {\n    const {tabId} = event.data;\n    Host.userMetrics.panelShown(tabId);\n  }\n\n  setOwnerSplit(splitWidget: SplitWidget): void {\n    this.ownerSplitWidget = splitWidget;\n  }\n\n  ownerSplit(): SplitWidget|null {\n    return this.ownerSplitWidget || null;\n  }\n\n  minimize(): void {\n    if (this.ownerSplitWidget) {\n      this.ownerSplitWidget.setSidebarMinimized(true);\n    }\n  }\n\n  restore(): void {\n    if (this.ownerSplitWidget) {\n      this.ownerSplitWidget.setSidebarMinimized(false);\n    }\n  }\n\n  displayReloadRequiredWarning(message: string): void {\n    if (!this.reloadRequiredInfobar) {\n      const infobar = new Infobar(InfobarType.Info, message, [\n        {\n          text: i18nString(UIStrings.reloadDevtools),\n          highlight: true,\n          delegate: (): void => reloadDevTools(),\n          dismiss: false,\n        },\n      ]);\n      infobar.setParentView(this);\n      this.attachInfobar(infobar);\n      this.reloadRequiredInfobar = infobar;\n      infobar.setCloseCallback(() => {\n        delete this.reloadRequiredInfobar;\n      });\n    }\n  }\n\n  displaySelectOverrideFolderInfobar(callback: () => void): void {\n    if (!this.#selectOverrideFolderInfobar) {\n      const infobar = new Infobar(InfobarType.Info, i18nString(UIStrings.selectOverrideFolder), [\n        {\n          text: i18nString(UIStrings.selectFolder),\n          highlight: true,\n          delegate: (): void => callback(),\n          dismiss: true,\n        },\n      ]);\n      infobar.setParentView(this);\n      this.attachInfobar(infobar);\n      this.#selectOverrideFolderInfobar = infobar;\n      infobar.setCloseCallback(() => {\n        this.#selectOverrideFolderInfobar = undefined;\n      });\n    }\n  }\n\n  private createInfoBarDiv(): void {\n    if (!this.infoBarDiv) {\n      this.infoBarDiv = document.createElement('div');\n      this.infoBarDiv.classList.add('flex-none');\n      this.contentElement.insertBefore(this.infoBarDiv, this.contentElement.firstChild);\n    }\n  }\n\n  private attachInfobar(infobar: Infobar): void {\n    this.createInfoBarDiv();\n    this.infoBarDiv?.appendChild(infobar.element);\n  }\n}\n\nfunction getDisableLocaleInfoBarSetting(): Common.Settings.Setting<boolean> {\n  return Common.Settings.Settings.instance().createSetting('disableLocaleInfoBar', false);\n}\n\nfunction shouldShowLocaleInfobar(): boolean {\n  if (getDisableLocaleInfoBarSetting().get()) {\n    return false;\n  }\n\n  // If the language setting is different than 'en-US', the user already\n  // used the setting before, so don't show the toolbar.\n  const languageSettingValue = Common.Settings.Settings.instance().moduleSetting<string>('language').get();\n  if (languageSettingValue !== 'en-US') {\n    return false;\n  }\n\n  // When the selected DevTools locale differs from the locale of the browser UI, we want to notify\n  // users only once, that they have the opportunity to adjust DevTools locale to match Chrome's locale.\n  return !i18n.DevToolsLocale.localeLanguagesMatch(navigator.language, languageSettingValue) &&\n      i18n.DevToolsLocale.DevToolsLocale.instance().languageIsSupportedByDevTools(navigator.language);\n}\n\nfunction createLocaleInfobar(): Infobar {\n  const devtoolsLocale = i18n.DevToolsLocale.DevToolsLocale.instance();\n  const closestSupportedLocale = devtoolsLocale.lookupClosestDevToolsLocale(navigator.language);\n  const locale = new Intl.Locale(closestSupportedLocale);\n  const closestSupportedLanguageInCurrentLocale =\n      new Intl.DisplayNames([devtoolsLocale.locale], {type: 'language'}).of(locale.language || 'en') || 'English';\n\n  const languageSetting = Common.Settings.Settings.instance().moduleSetting<string>('language');\n  return new Infobar(\n      InfobarType.Info, i18nString(UIStrings.devToolsLanguageMissmatch, {PH1: closestSupportedLanguageInCurrentLocale}),\n      [\n        {\n          text: i18nString(UIStrings.setToBrowserLanguage),\n          highlight: true,\n          delegate: (): void => {\n            languageSetting.set('browserLanguage');\n            getDisableLocaleInfoBarSetting().set(true);\n            reloadDevTools();\n          },\n          dismiss: true,\n        },\n        {\n          text: i18nString(UIStrings.setToSpecificLanguage, {PH1: closestSupportedLanguageInCurrentLocale}),\n          highlight: true,\n          delegate: (): void => {\n            languageSetting.set(closestSupportedLocale);\n            getDisableLocaleInfoBarSetting().set(true);\n            reloadDevTools();\n          },\n          dismiss: true,\n        },\n      ],\n      getDisableLocaleInfoBarSetting());\n}\n\nfunction reloadDevTools(): void {\n  if (DockController.instance().canDock() && DockController.instance().dockSide() === DockState.UNDOCKED) {\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.setIsDocked(true, function() {});\n  }\n  Host.InspectorFrontendHost.InspectorFrontendHostInstance.reattach(() => window.location.reload());\n}\n\nlet actionDelegateInstance: ActionDelegate;\n\nexport class ActionDelegate implements ActionDelegateInterface {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ActionDelegate {\n    const {forceNew} = opts;\n    if (!actionDelegateInstance || forceNew) {\n      actionDelegateInstance = new ActionDelegate();\n    }\n\n    return actionDelegateInstance;\n  }\n\n  handleAction(context: Context, actionId: string): boolean {\n    switch (actionId) {\n      case 'main.toggle-drawer':\n        if (InspectorView.instance().drawerVisible()) {\n          InspectorView.instance().closeDrawer();\n        } else {\n          InspectorView.instance().showDrawer(true);\n        }\n        return true;\n      case 'main.next-tab':\n        InspectorView.instance().tabbedPane.selectNextTab();\n        InspectorView.instance().tabbedPane.focus();\n        return true;\n      case 'main.previous-tab':\n        InspectorView.instance().tabbedPane.selectPrevTab();\n        InspectorView.instance().tabbedPane.focus();\n        return true;\n    }\n    return false;\n  }\n}\n\nexport class InspectorViewTabDelegate implements TabbedPaneTabDelegate {\n  closeTabs(tabbedPane: TabbedPane, ids: string[]): void {\n    tabbedPane.closeTabs(ids, true);\n    // Log telemetry about the closure\n    ids.forEach(id => {\n      Host.userMetrics.panelClosed(id);\n    });\n  }\n\n  moveToDrawer(tabId: string): void {\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.TabMovedToDrawer);\n    ViewManager.instance().moveView(tabId, 'drawer-view');\n  }\n\n  moveToMainPanel(tabId: string): void {\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.TabMovedToMainPanel);\n    ViewManager.instance().moveView(tabId, 'panel');\n  }\n\n  onContextMenu(tabId: string, contextMenu: ContextMenu): void {\n    // Special case for console, we don't show the movable context panel for this two tabs\n    if (tabId === 'console' || tabId === 'console-view') {\n      return;\n    }\n\n    const locationName = ViewManager.instance().locationNameForViewId(tabId);\n    if (locationName === 'drawer-view') {\n      contextMenu.defaultSection().appendItem(i18nString(UIStrings.moveToTop), this.moveToMainPanel.bind(this, tabId));\n    } else {\n      contextMenu.defaultSection().appendItem(i18nString(UIStrings.moveToBottom), this.moveToDrawer.bind(this, tabId));\n    }\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  DrawerChange = 'drawerchange',\n}\n"],
  "mappings": "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",
  "names": []
}
