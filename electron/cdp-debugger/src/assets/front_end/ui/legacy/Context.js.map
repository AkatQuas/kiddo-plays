{
  "version": 3,
  "sources": ["../../../../../../front_end/ui/legacy/Context.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Root from '../../core/root/root.js';  // eslint-disable-line @typescript-eslint/no-unused-vars\n\nimport type {ContextFlavorListener} from './ContextFlavorListener.js';\n\nlet contextInstance: Context;\n\ninterface ConstructorFn<T> {\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  new(...args: any[]): T;\n}\n\nexport class Context {\n  private readonly flavorsInternal: Map<ConstructorFn<unknown>, Object>;\n  private readonly eventDispatchers: Map<ConstructorFn<unknown>, Common.ObjectWrapper.ObjectWrapper<EventTypes>>;\n\n  private constructor() {\n    this.flavorsInternal = new Map();\n    this.eventDispatchers = new Map();\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): Context {\n    const {forceNew} = opts;\n    if (!contextInstance || forceNew) {\n      contextInstance = new Context();\n    }\n\n    return contextInstance;\n  }\n\n  setFlavor<T>(flavorType: ConstructorFn<T>, flavorValue: T|null): void {\n    const value = this.flavorsInternal.get(flavorType) || null;\n    if (value === flavorValue) {\n      return;\n    }\n    if (flavorValue) {\n      this.flavorsInternal.set(flavorType, flavorValue);\n    } else {\n      this.flavorsInternal.delete(flavorType);\n    }\n\n    this.dispatchFlavorChange(flavorType, flavorValue);\n  }\n\n  private dispatchFlavorChange<T>(flavorType: ConstructorFn<T>, flavorValue: T|null): void {\n    for (const extension of getRegisteredListeners()) {\n      if (extension.contextTypes().includes(flavorType)) {\n        void extension.loadListener().then(instance => instance.flavorChanged(flavorValue));\n      }\n    }\n    const dispatcher = this.eventDispatchers.get(flavorType);\n    if (!dispatcher) {\n      return;\n    }\n    dispatcher.dispatchEventToListeners(Events.FlavorChanged, flavorValue);\n  }\n\n  addFlavorChangeListener<T>(\n      flavorType: ConstructorFn<T>, listener: (arg0: Common.EventTarget.EventTargetEvent<T>) => void,\n      thisObject?: Object): void {\n    let dispatcher = this.eventDispatchers.get(flavorType);\n    if (!dispatcher) {\n      dispatcher = new Common.ObjectWrapper.ObjectWrapper<EventTypes>();\n      this.eventDispatchers.set(flavorType, dispatcher);\n    }\n    dispatcher.addEventListener(Events.FlavorChanged, listener, thisObject);\n  }\n\n  removeFlavorChangeListener<T>(\n      flavorType: ConstructorFn<T>, listener: (arg0: Common.EventTarget.EventTargetEvent<T>) => void,\n      thisObject?: Object): void {\n    const dispatcher = this.eventDispatchers.get(flavorType);\n    if (!dispatcher) {\n      return;\n    }\n    dispatcher.removeEventListener(Events.FlavorChanged, listener, thisObject);\n    if (!dispatcher.hasEventListeners(Events.FlavorChanged)) {\n      this.eventDispatchers.delete(flavorType);\n    }\n  }\n\n  flavor<T>(flavorType: ConstructorFn<T>): T|null {\n    return (this.flavorsInternal.get(flavorType) as T | null) || null;\n  }\n\n  flavors(): Set<ConstructorFn<unknown>> {\n    return new Set(this.flavorsInternal.keys());\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nenum Events {\n  FlavorChanged = 'FlavorChanged',\n}\n\nexport type EventTypes = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [Events.FlavorChanged]: any,\n};\n\nconst registeredListeners: ContextFlavorListenerRegistration[] = [];\n\nexport function registerListener(registration: ContextFlavorListenerRegistration): void {\n  registeredListeners.push(registration);\n}\n\nfunction getRegisteredListeners(): ContextFlavorListenerRegistration[] {\n  return registeredListeners;\n}\nexport interface ContextFlavorListenerRegistration {\n  contextTypes: () => Array<Function>;\n  loadListener: () => Promise<ContextFlavorListener>;\n}\n"],
  "mappings": "AAIA;AAKA,IAAI;AAQG,qBAAc;AAAA,EACF;AAAA,EACA;AAAA,EAET,cAAc;AACpB,SAAK,kBAAkB,oBAAI;AAC3B,SAAK,mBAAmB,oBAAI;AAAA;AAAA,SAGvB,SAAS,OAEZ,EAAC,UAAU,QAAgB;AAC7B,UAAM,EAAC,aAAY;AACnB,QAAI,CAAC,mBAAmB,UAAU;AAChC,wBAAkB,IAAI;AAAA;AAGxB,WAAO;AAAA;AAAA,EAGT,UAAa,YAA8B,aAA2B;AACpE,UAAM,QAAQ,KAAK,gBAAgB,IAAI,eAAe;AACtD,QAAI,UAAU,aAAa;AACzB;AAAA;AAEF,QAAI,aAAa;AACf,WAAK,gBAAgB,IAAI,YAAY;AAAA,WAChC;AACL,WAAK,gBAAgB,OAAO;AAAA;AAG9B,SAAK,qBAAqB,YAAY;AAAA;AAAA,EAGhC,qBAAwB,YAA8B,aAA2B;AACvF,eAAW,aAAa,0BAA0B;AAChD,UAAI,UAAU,eAAe,SAAS,aAAa;AACjD,aAAK,UAAU,eAAe,KAAK,cAAY,SAAS,cAAc;AAAA;AAAA;AAG1E,UAAM,aAAa,KAAK,iBAAiB,IAAI;AAC7C,QAAI,CAAC,YAAY;AACf;AAAA;AAEF,eAAW,yBAAyB,OAAO,eAAe;AAAA;AAAA,EAG5D,wBACI,YAA8B,UAC9B,YAA2B;AAC7B,QAAI,aAAa,KAAK,iBAAiB,IAAI;AAC3C,QAAI,CAAC,YAAY;AACf,mBAAa,IAAI,OAAO,cAAc;AACtC,WAAK,iBAAiB,IAAI,YAAY;AAAA;AAExC,eAAW,iBAAiB,OAAO,eAAe,UAAU;AAAA;AAAA,EAG9D,2BACI,YAA8B,UAC9B,YAA2B;AAC7B,UAAM,aAAa,KAAK,iBAAiB,IAAI;AAC7C,QAAI,CAAC,YAAY;AACf;AAAA;AAEF,eAAW,oBAAoB,OAAO,eAAe,UAAU;AAC/D,QAAI,CAAC,WAAW,kBAAkB,OAAO,gBAAgB;AACvD,WAAK,iBAAiB,OAAO;AAAA;AAAA;AAAA,EAIjC,OAAU,YAAsC;AAC9C,WAAQ,KAAK,gBAAgB,IAAI,eAA4B;AAAA;AAAA,EAG/D,UAAuC;AACrC,WAAO,IAAI,IAAI,KAAK,gBAAgB;AAAA;AAAA;AAMxC,IAAK,SAAL,kBAAK,YAAL;AACE,6BAAgB;AADb;AAAA;AASL,MAAM,sBAA2D;AAE1D,iCAA0B,cAAuD;AACtF,sBAAoB,KAAK;AAAA;AAG3B,kCAAuE;AACrE,SAAO;AAAA;",
  "names": []
}
