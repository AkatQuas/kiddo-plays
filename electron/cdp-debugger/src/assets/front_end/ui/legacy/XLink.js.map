{
  "version": 3,
  "sources": ["../../../../../../front_end/ui/legacy/XLink.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../core/host/host.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as ComponentHelpers from '../components/helpers/helpers.js';\nimport * as LitHtml from '../lit-html/lit-html.js';\n\nimport * as ARIAUtils from './ARIAUtils.js';\nimport type {ContextMenu, Provider} from './ContextMenu.js';\nimport {html} from './Fragment.js';\nimport {Tooltip} from './Tooltip.js';\nimport {\n  addReferrerToURLIfNecessary,\n  copyLinkAddressLabel,\n  MaxLengthForDisplayedURLs,\n  openLinkExternallyLabel,\n} from './UIUtils.js';\nimport {XElement} from './XElement.js';\n\nexport class XLink extends XElement {\n  hrefInternal: Platform.DevToolsPath.UrlString|null;\n  private clickable: boolean;\n  private readonly onClick: (arg0: Event) => void;\n  private readonly onKeyDown: (arg0: Event) => void;\n  static create(url: string, linkText?: string, className?: string, preventClick?: boolean): HTMLElement {\n    if (!linkText) {\n      linkText = url;\n    }\n    className = className || '';\n    // clang-format off\n    // TODO(dgozman): migrate css from 'devtools-link' to 'x-link'.\n    const element = html `\n  <x-link href='${url}' tabindex=\"0\" class='${className} devtools-link' ${preventClick ? 'no-click' : ''}\n  >${Platform.StringUtilities.trimMiddle(linkText, MaxLengthForDisplayedURLs)}</x-link>`;\n    // clang-format on\n    return element as HTMLElement;\n  }\n\n  constructor() {\n    super();\n\n    this.style.setProperty('display', 'inline');\n    ARIAUtils.markAsLink(this);\n    this.setAttribute('tabindex', '0');\n    this.setAttribute('target', '_blank');\n    this.setAttribute('rel', 'noopener');\n\n    this.hrefInternal = null;\n    this.clickable = true;\n\n    this.onClick = (event: Event): void => {\n      event.consume(true);\n      if (this.hrefInternal) {\n        Host.InspectorFrontendHost.InspectorFrontendHostInstance.openInNewTab(this.hrefInternal);\n      }\n      this.dispatchEvent(new Event('x-link-invoke'));\n    };\n    this.onKeyDown = (event: Event): void => {\n      if (isEnterOrSpaceKey(event)) {\n        event.consume(true);\n        if (this.hrefInternal) {\n          Host.InspectorFrontendHost.InspectorFrontendHostInstance.openInNewTab(this.hrefInternal);\n        }\n      }\n      this.dispatchEvent(new Event('x-link-invoke'));\n    };\n  }\n\n  static get observedAttributes(): string[] {\n    // TODO(dgozman): should be super.observedAttributes, but it does not compile.\n    return XElement.observedAttributes.concat(['href', 'no-click']);\n  }\n\n  get href(): Platform.DevToolsPath.UrlString|null {\n    return this.hrefInternal;\n  }\n\n  attributeChangedCallback(attr: string, oldValue: string|null, newValue: string|null): void {\n    if (attr === 'no-click') {\n      this.clickable = !newValue;\n      this.updateClick();\n      return;\n    }\n\n    if (attr === 'href') {\n      // For invalid or non-absolute URLs, `href` should remain `null`.\n      if (!newValue) {\n        newValue = '';\n      }\n      let href: Platform.DevToolsPath.UrlString|null = null;\n      let url: URL|null = null;\n      try {\n        url = new URL(addReferrerToURLIfNecessary(newValue as Platform.DevToolsPath.UrlString));\n        href = url.toString() as Platform.DevToolsPath.UrlString;\n      } catch {\n      }\n      if (url && url.protocol === 'javascript:') {\n        href = null;\n      }\n\n      this.hrefInternal = href;\n      Tooltip.install(this, newValue);\n      this.updateClick();\n      return;\n    }\n\n    super.attributeChangedCallback(attr, oldValue, newValue);\n  }\n\n  private updateClick(): void {\n    if (this.hrefInternal !== null && this.clickable) {\n      this.addEventListener('click', this.onClick, false);\n      this.addEventListener('keydown', this.onKeyDown, false);\n      this.style.setProperty('cursor', 'pointer');\n    } else {\n      this.removeEventListener('click', this.onClick, false);\n      this.removeEventListener('keydown', this.onKeyDown, false);\n      this.style.removeProperty('cursor');\n    }\n  }\n}\n\nlet contextMenuProviderInstance: ContextMenuProvider;\n\nexport class ContextMenuProvider implements Provider {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ContextMenuProvider {\n    const {forceNew} = opts;\n    if (!contextMenuProviderInstance || forceNew) {\n      contextMenuProviderInstance = new ContextMenuProvider();\n    }\n\n    return contextMenuProviderInstance;\n  }\n\n  appendApplicableItems(event: Event, contextMenu: ContextMenu, target: Object): void {\n    let targetNode: (Node|null) = (target as Node | null);\n    while (targetNode && !(targetNode instanceof XLink)) {\n      targetNode = targetNode.parentNodeOrShadowHost();\n    }\n    if (!targetNode || !targetNode.href) {\n      return;\n    }\n    const node: XLink = targetNode;\n    contextMenu.revealSection().appendItem(openLinkExternallyLabel(), () => {\n      if (node.href) {\n        Host.InspectorFrontendHost.InspectorFrontendHostInstance.openInNewTab(node.href);\n      }\n    });\n    contextMenu.revealSection().appendItem(copyLinkAddressLabel(), () => {\n      if (node.href) {\n        Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(node.href);\n      }\n    });\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('x-link', XLink);\n\nexport const sample = LitHtml.html`<p>Hello, <x-link>world!</x-link></p>`;\n"],
  "mappings": "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",
  "names": []
}
