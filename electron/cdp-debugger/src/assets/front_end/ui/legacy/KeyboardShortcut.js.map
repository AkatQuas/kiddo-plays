{
  "version": 3,
  "sources": ["../../../../../../front_end/ui/legacy/KeyboardShortcut.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2009 Apple Inc. All rights reserved.\n * Copyright (C) 2009 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Host from '../../core/host/host.js';\nimport {DefaultShortcutSetting} from './ShortcutRegistry.js';\n\nexport class KeyboardShortcut {\n  descriptors: Descriptor[];\n  action: string;\n  type: Type;\n  keybindSets: Set<string>;\n\n  constructor(descriptors: Descriptor[], action: string, type: Type, keybindSets?: Set<string>) {\n    this.descriptors = descriptors;\n    this.action = action;\n    this.type = type;\n    this.keybindSets = keybindSets || new Set();\n  }\n\n  title(): string {\n    return this.descriptors.map(descriptor => descriptor.name).join(' ');\n  }\n\n  isDefault(): boolean {\n    return this.type === Type.DefaultShortcut || this.type === Type.DisabledDefault ||\n        (this.type === Type.KeybindSetShortcut && this.keybindSets.has(DefaultShortcutSetting));\n  }\n\n  changeType(type: Type): KeyboardShortcut {\n    return new KeyboardShortcut(this.descriptors, this.action, type);\n  }\n\n  changeKeys(descriptors: Descriptor[]): KeyboardShortcut {\n    this.descriptors = descriptors;\n    return this;\n  }\n\n  descriptorsMatch(descriptors: Descriptor[]): boolean {\n    if (descriptors.length !== this.descriptors.length) {\n      return false;\n    }\n    return descriptors.every((descriptor, index) => descriptor.key === this.descriptors[index].key);\n  }\n\n  hasKeybindSet(keybindSet: string): boolean {\n    return !this.keybindSets || this.keybindSets.has(keybindSet);\n  }\n\n  equals(shortcut: KeyboardShortcut): boolean {\n    return this.descriptorsMatch(shortcut.descriptors) && this.type === shortcut.type &&\n        this.action === shortcut.action;\n  }\n\n  static createShortcutFromSettingObject(settingObject: {\n    action: string,\n    descriptors: Array<Descriptor>,\n    type: Type,\n  }): KeyboardShortcut {\n    return new KeyboardShortcut(settingObject.descriptors, settingObject.action, settingObject.type);\n  }\n\n  /**\n   * Creates a number encoding keyCode in the lower 8 bits and modifiers mask in the higher 8 bits.\n   * It is useful for matching pressed keys.\n   */\n  static makeKey(keyCode: string|number, modifiers?: number): number {\n    if (typeof keyCode === 'string') {\n      keyCode = keyCode.charCodeAt(0) - (/^[a-z]/.test(keyCode) ? 32 : 0);\n    }\n    modifiers = modifiers || Modifiers.None;\n    return KeyboardShortcut.makeKeyFromCodeAndModifiers(keyCode, modifiers);\n  }\n\n  static makeKeyFromEvent(keyboardEvent: KeyboardEvent): number {\n    let modifiers = Modifiers.None;\n    if (keyboardEvent.shiftKey) {\n      modifiers |= Modifiers.Shift;\n    }\n    if (keyboardEvent.ctrlKey) {\n      modifiers |= Modifiers.Ctrl;\n    }\n    if (keyboardEvent.altKey) {\n      modifiers |= Modifiers.Alt;\n    }\n    if (keyboardEvent.metaKey) {\n      modifiers |= Modifiers.Meta;\n    }\n\n    // Use either a real or a synthetic keyCode (for events originating from extensions).\n    // @ts-ignore ExtensionServer.js installs '__keyCode' on some events.\n    const keyCode = keyboardEvent.keyCode || keyboardEvent['__keyCode'];\n    return KeyboardShortcut.makeKeyFromCodeAndModifiers(keyCode, modifiers);\n  }\n\n  static makeKeyFromEventIgnoringModifiers(keyboardEvent: KeyboardEvent): number {\n    // @ts-ignore ExtensionServer.js installs '__keyCode' on some events.\n    const keyCode = keyboardEvent.keyCode || keyboardEvent['__keyCode'];\n    return KeyboardShortcut.makeKeyFromCodeAndModifiers(keyCode, Modifiers.None);\n  }\n\n  // This checks if a \"control equivalent\" key is pressed. For non-mac platforms this means checking\n  // if control is pressed but not meta. On mac, we instead check if meta is pressed but not control.\n  static eventHasCtrlEquivalentKey(event: KeyboardEvent|MouseEvent): boolean {\n    return Host.Platform.isMac() ? event.metaKey && !event.ctrlKey : event.ctrlKey && !event.metaKey;\n  }\n\n  static eventHasEitherCtrlOrMeta(event: KeyboardEvent|MouseEvent): boolean {\n    return event.metaKey || event.ctrlKey;\n  }\n\n  static hasNoModifiers(event: Event): boolean {\n    const keyboardEvent = (event as KeyboardEvent);\n    return !keyboardEvent.ctrlKey && !keyboardEvent.shiftKey && !keyboardEvent.altKey && !keyboardEvent.metaKey;\n  }\n\n  static makeDescriptor(key: string|Key, modifiers?: number): Descriptor {\n    return {\n      key: KeyboardShortcut.makeKey(typeof key === 'string' ? key : key.code, modifiers),\n      name: KeyboardShortcut.shortcutToString(key, modifiers),\n    };\n  }\n\n  static makeDescriptorFromBindingShortcut(shortcut: string): Descriptor {\n    const [keyString, ...modifierStrings] = shortcut.split(/\\+(?!$)/).reverse();\n    let modifiers = 0;\n    for (const modifierString of modifierStrings) {\n      const modifier = Modifiers[modifierString];\n      console.assert(\n          typeof modifier !== 'undefined', `Only one key other than modifier is allowed in shortcut <${shortcut}>`);\n      modifiers |= modifier;\n    }\n    console.assert(keyString.length > 0, `Modifiers-only shortcuts are not allowed (encountered <${shortcut}>)`);\n\n    const key = Keys[keyString] || KeyBindings[keyString];\n    if (key && 'shiftKey' in key && key.shiftKey) {\n      modifiers |= Modifiers.Shift;\n    }\n    return KeyboardShortcut.makeDescriptor(key ? key : keyString, modifiers);\n  }\n\n  static shortcutToString(key: string|Key, modifiers?: number): string {\n    if (typeof key !== 'string' && KeyboardShortcut.isModifier(key.code)) {\n      return KeyboardShortcut.modifiersToString(modifiers);\n    }\n    return KeyboardShortcut.modifiersToString(modifiers) + KeyboardShortcut.keyName(key);\n  }\n\n  private static keyName(key: string|Key): string {\n    if (typeof key === 'string') {\n      return key.toUpperCase();\n    }\n    if (typeof key.name === 'string') {\n      return key.name;\n    }\n    return key.name[Host.Platform.platform()] || key.name.other || '';\n  }\n\n  private static makeKeyFromCodeAndModifiers(keyCode: number, modifiers: number|null): number {\n    return (keyCode & 255) | ((modifiers || 0) << 8);\n  }\n\n  static keyCodeAndModifiersFromKey(key: number): {\n    keyCode: number,\n    modifiers: number,\n  } {\n    return {keyCode: key & 255, modifiers: key >> 8};\n  }\n\n  static isModifier(key: number): boolean {\n    const {keyCode} = KeyboardShortcut.keyCodeAndModifiersFromKey(key);\n    return keyCode === Keys.Shift.code || keyCode === Keys.Ctrl.code || keyCode === Keys.Alt.code ||\n        keyCode === Keys.Meta.code;\n  }\n\n  private static modifiersToString(modifiers: number|undefined): string {\n    const isMac = Host.Platform.isMac();\n    const m = Modifiers;\n    const modifierNames = new Map([\n      [m.Ctrl, isMac ? 'Ctrl\\u2004' : 'Ctrl\\u200A+\\u200A'],\n      [m.Alt, isMac ? '\\u2325\\u2004' : 'Alt\\u200A+\\u200A'],\n      [m.Shift, isMac ? '\\u21e7\\u2004' : 'Shift\\u200A+\\u200A'],\n      [m.Meta, isMac ? '\\u2318\\u2004' : 'Win\\u200A+\\u200A'],\n    ]);\n    return [m.Meta, m.Ctrl, m.Alt, m.Shift].map(mapModifiers).join('');\n\n    function mapModifiers(m: number): string {\n      return (modifiers || 0) & m ? /** @type {string} */ modifierNames.get(m) as string : '';\n    }\n  }\n}\n\n/**\n * Constants for encoding modifier key set as a bit mask.\n * see #makeKeyFromCodeAndModifiers\n */\nexport const Modifiers: {\n  [x: string]: number,\n} = {\n  None: 0,\n  Shift: 1,\n  Ctrl: 2,\n  Alt: 4,\n  Meta: 8,\n  // \"default\" command/ctrl key for platform, Command on Mac, Ctrl on other platforms\n  CtrlOrMeta: Host.Platform.isMac() ? 8 /* Meta */ : 2 /* Ctrl */,\n  // Option on Mac, Shift on other platforms\n  ShiftOrOption: Host.Platform.isMac() ? 4 /* Alt */ : 1 /* Shift */,\n};\n\nconst leftKey = {\n  code: 37,\n  name: '\u2190',\n};\nconst upKey = {\n  code: 38,\n  name: '\u2191',\n};\nconst rightKey = {\n  code: 39,\n  name: '\u2192',\n};\nconst downKey = {\n  code: 40,\n  name: '\u2193',\n};\nconst ctrlKey = {\n  code: 17,\n  name: 'Ctrl',\n};\nconst escKey = {\n  code: 27,\n  name: 'Esc',\n};\nconst spaceKey = {\n  code: 32,\n  name: 'Space',\n};\nconst plusKey = {\n  code: 187,\n  name: '+',\n};\nconst backquoteKey = {\n  code: 192,\n  name: '`',\n};\nconst quoteKey = {\n  code: 222,\n  name: '\\'',\n};\n\nexport const Keys: {\n  [x: string]: Key,\n} = {\n  Backspace: {code: 8, name: '\\u21a4'},\n  Tab: {code: 9, name: {mac: '\\u21e5', other: 'Tab'}},\n  Enter: {code: 13, name: {mac: '\\u21a9', other: 'Enter'}},\n  Shift: {code: 16, name: {mac: '\\u21e7', other: 'Shift'}},\n  Ctrl: ctrlKey,\n  Control: ctrlKey,\n  Alt: {code: 18, name: 'Alt'},\n  Esc: escKey,\n  Escape: escKey,\n  Space: spaceKey,\n  ' ': spaceKey,\n  PageUp: {code: 33, name: {mac: '\\u21de', other: 'PageUp'}},      // also NUM_NORTH_EAST\n  PageDown: {code: 34, name: {mac: '\\u21df', other: 'PageDown'}},  // also NUM_SOUTH_EAST\n  End: {code: 35, name: {mac: '\\u2197', other: 'End'}},            // also NUM_SOUTH_WEST\n  Home: {code: 36, name: {mac: '\\u2196', other: 'Home'}},          // also NUM_NORTH_WEST\n  Left: leftKey,                                                   // also NUM_WEST\n  Up: upKey,                                                       // also NUM_NORTH\n  Right: rightKey,                                                 // also NUM_EAST\n  Down: downKey,                                                   // also NUM_SOUTH\n  ArrowLeft: leftKey,\n  ArrowUp: upKey,\n  ArrowRight: rightKey,\n  ArrowDown: downKey,\n  Delete: {code: 46, name: 'Del'},\n  Zero: {code: 48, name: '0'},\n  H: {code: 72, name: 'H'},\n  N: {code: 78, name: 'N'},\n  P: {code: 80, name: 'P'},\n  Meta: {code: 91, name: 'Meta'},\n  F1: {code: 112, name: 'F1'},\n  F2: {code: 113, name: 'F2'},\n  F3: {code: 114, name: 'F3'},\n  F4: {code: 115, name: 'F4'},\n  F5: {code: 116, name: 'F5'},\n  F6: {code: 117, name: 'F6'},\n  F7: {code: 118, name: 'F7'},\n  F8: {code: 119, name: 'F8'},\n  F9: {code: 120, name: 'F9'},\n  F10: {code: 121, name: 'F10'},\n  F11: {code: 122, name: 'F11'},\n  F12: {code: 123, name: 'F12'},\n  Semicolon: {code: 186, name: ';'},\n  NumpadPlus: {code: 107, name: 'Numpad +'},\n  NumpadMinus: {code: 109, name: 'Numpad -'},\n  Numpad0: {code: 96, name: 'Numpad 0'},\n  Plus: plusKey,\n  Equal: plusKey,\n  Comma: {code: 188, name: ','},\n  Minus: {code: 189, name: '-'},\n  Period: {code: 190, name: '.'},\n  Slash: {code: 191, name: '/'},\n  QuestionMark: {code: 191, name: '?'},\n  Apostrophe: backquoteKey,\n  Tilde: {code: 192, name: 'Tilde'},\n  Backquote: backquoteKey,\n  IntlBackslash: backquoteKey,\n  LeftSquareBracket: {code: 219, name: '['},\n  RightSquareBracket: {code: 221, name: ']'},\n  Backslash: {code: 220, name: '\\\\'},\n  SingleQuote: quoteKey,\n  Quote: quoteKey,\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  get CtrlOrMeta() {\n    // \"default\" command/ctrl key for platform, Command on Mac, Ctrl on other platforms\n    return Host.Platform.isMac() ? this.Meta : this.Ctrl;\n  },\n};\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Type {\n  UserShortcut = 'UserShortcut',\n  DefaultShortcut = 'DefaultShortcut',\n  DisabledDefault = 'DisabledDefault',\n  UnsetShortcut = 'UnsetShortcut',\n  KeybindSetShortcut = 'KeybindSetShortcut',\n}\n\nexport const KeyBindings: {\n  [x: string]: Key,\n} = {};\n\n(function(): void {\nfor (const key in Keys) {\n  const descriptor = Keys[key];\n  if (typeof descriptor === 'object' && descriptor['code']) {\n    const name = typeof descriptor['name'] === 'string' ? descriptor['name'] : key;\n    KeyBindings[name] = descriptor;\n  }\n}\n})();\nexport interface Key {\n  code: number;\n  name: string|{\n    [x: string]: string,\n  };\n  shiftKey?: boolean;\n}\nexport interface Descriptor {\n  key: number;\n  name: string;\n}\n"],
  "mappings": "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",
  "names": []
}
