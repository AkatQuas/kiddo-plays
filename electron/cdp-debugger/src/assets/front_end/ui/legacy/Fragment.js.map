{
  "version": 3,
  "sources": ["../../../../../../front_end/ui/legacy/Fragment.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nfunction getNodeData(node: Node): string {\n  return (node as unknown as {\n           data: string,\n         })\n      .data;\n}\n\nfunction setNodeData<T>(node: Node, value: T): void {\n  (node as unknown as {\n    data: T,\n  }).data = value;\n}\n\nexport class Fragment {\n  private readonly elementInternal: Element;\n  private readonly elementsById: Map<string, Element>;\n\n  constructor(element: Element) {\n    this.elementInternal = element;\n\n    this.elementsById = new Map();\n  }\n\n  element(): Element {\n    return this.elementInternal;\n  }\n\n  $(elementId: string): Element {\n    return this.elementsById.get(elementId) as Element;\n  }\n\n  static build(strings: TemplateDefinition, ...values: any[]): Fragment {\n    return Fragment.render(Fragment.template(strings), values);\n  }\n\n  static cached(strings: TemplateDefinition, ...values: any[]): Fragment {\n    let template = templateCache.get(strings);\n    if (!template) {\n      template = Fragment.template(strings);\n      templateCache.set(strings, template);\n    }\n    return Fragment.render(template, values);\n  }\n\n  private static template(strings: TemplateDefinition): Template {\n    let html = '';\n    let insideText = true;\n    for (let i = 0; i < strings.length - 1; i++) {\n      html += strings[i];\n      const close = strings[i].lastIndexOf('>');\n      const open = strings[i].indexOf('<', close + 1);\n      if (close !== -1 && open === -1) {\n        insideText = true;\n      } else if (open !== -1) {\n        insideText = false;\n      }\n      html += insideText ? textMarker : attributeMarker(i);\n    }\n    html += strings[strings.length - 1];\n\n    const template = document.createElement('template');\n    template.innerHTML = html;\n    const walker =\n        template.ownerDocument.createTreeWalker(template.content, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_TEXT, null);\n    let valueIndex = 0;\n    const emptyTextNodes = [];\n    const binds: Bind[] = [];\n    const nodesToMark = [];\n    while (walker.nextNode()) {\n      const node = (walker.currentNode as HTMLElement);\n      if (node.nodeType === Node.ELEMENT_NODE && node.hasAttributes()) {\n        if (node.hasAttribute('$')) {\n          nodesToMark.push(node);\n          binds.push({replaceNodeIndex: undefined, attr: undefined, elementId: node.getAttribute('$') || ''});\n          node.removeAttribute('$');\n        }\n\n        const attributesToRemove = [];\n        for (let i = 0; i < node.attributes.length; i++) {\n          const name = node.attributes[i].name;\n\n          if (!attributeMarkerRegex.test(name) && !attributeMarkerRegex.test(node.attributes[i].value)) {\n            continue;\n          }\n\n          attributesToRemove.push(name);\n          nodesToMark.push(node);\n\n          const attr = {\n            index: valueIndex,\n            names: name.split(attributeMarkerRegex),\n            values: node.attributes[i].value.split(attributeMarkerRegex),\n          };\n          valueIndex += attr.names.length - 1;\n          valueIndex += attr.values.length - 1;\n          const bind: Bind = {\n            elementId: undefined,\n            replaceNodeIndex: undefined,\n            attr,\n          };\n          binds.push(bind);\n        }\n        for (let i = 0; i < attributesToRemove.length; i++) {\n          node.removeAttribute(attributesToRemove[i]);\n        }\n      }\n\n      if (node.nodeType === Node.TEXT_NODE && getNodeData(node).indexOf(textMarker) !== -1) {\n        const texts = getNodeData(node).split(textMarkerRegex);\n        setNodeData(node, texts[texts.length - 1]);\n        const parentNode = (node.parentNode as HTMLElement);\n        for (let i = 0; i < texts.length - 1; i++) {\n          if (texts[i]) {\n            parentNode.insertBefore(document.createTextNode(texts[i]), node);\n          }\n          const nodeToReplace = document.createElement('span');\n          nodesToMark.push(nodeToReplace);\n          binds.push({attr: undefined, elementId: undefined, replaceNodeIndex: valueIndex++});\n          parentNode.insertBefore(nodeToReplace, node);\n        }\n      }\n\n      if (node.nodeType === Node.TEXT_NODE &&\n          (!node.previousSibling || node.previousSibling.nodeType === Node.ELEMENT_NODE) &&\n          (!node.nextSibling || node.nextSibling.nodeType === Node.ELEMENT_NODE) && /^\\s*$/.test(getNodeData(node))) {\n        emptyTextNodes.push(node);\n      }\n    }\n\n    for (let i = 0; i < nodesToMark.length; i++) {\n      nodesToMark[i].classList.add(generateClassName(i));\n    }\n\n    for (const emptyTextNode of emptyTextNodes) {\n      emptyTextNode.remove();\n    }\n    return {template, binds};\n  }\n\n  private static render(template: Template, values: any[]): Fragment {\n    const content = template.template.ownerDocument.importNode(template.template.content, true);\n    const resultElement = (content.firstChild === content.lastChild ? content.firstChild : content) as Element;\n    const result = new Fragment(resultElement);\n\n    const boundElements = [];\n    for (let i = 0; i < template.binds.length; i++) {\n      const className = generateClassName(i);\n      const element = (content.querySelector('.' + className) as Element);\n      element.classList.remove(className);\n      boundElements.push(element);\n    }\n\n    for (let bindIndex = 0; bindIndex < template.binds.length; bindIndex++) {\n      const bind = template.binds[bindIndex];\n      const element = boundElements[bindIndex];\n      if (bind.elementId !== undefined) {\n        result.elementsById.set(bind.elementId, element);\n      } else if (bind.replaceNodeIndex !== undefined) {\n        const value = values[bind.replaceNodeIndex];\n        (element.parentNode as HTMLElement).replaceChild(this.nodeForValue(value), element);\n      } else if (bind.attr !== undefined) {\n        if (bind.attr.names.length === 2 && bind.attr.values.length === 1 &&\n            typeof values[bind.attr.index] === 'function') {\n          values[bind.attr.index].call(null, element);\n        } else {\n          let name = bind.attr.names[0];\n          for (let i = 1; i < bind.attr.names.length; i++) {\n            name += values[bind.attr.index + i - 1];\n            name += bind.attr.names[i];\n          }\n          if (name) {\n            let value = bind.attr.values[0];\n            for (let i = 1; i < bind.attr.values.length; i++) {\n              value += values[bind.attr.index + bind.attr.names.length - 1 + i - 1];\n              value += bind.attr.values[i];\n            }\n            element.setAttribute(name, value);\n          }\n        }\n      } else {\n        throw new Error('Unexpected bind');\n      }\n    }\n    return result;\n  }\n\n  private static nodeForValue(value: any): Node {\n    if (value instanceof Node) {\n      return value;\n    }\n    if (value instanceof Fragment) {\n      return value.elementInternal;\n    }\n    if (Array.isArray(value)) {\n      const node = document.createDocumentFragment();\n      for (const v of value) {\n        node.appendChild(this.nodeForValue(v));\n      }\n      return node;\n    }\n    return document.createTextNode(String(value));\n  }\n}\n\nexport const textMarker = '{{template-text}}';\nconst textMarkerRegex = /{{template-text}}/;\nexport const attributeMarker = (index: number): string => 'template-attribute' + index;\nconst attributeMarkerRegex = /template-attribute\\d+/;\nconst generateClassName = (index: number): string => 'template-class-' + index;\nconst templateCache = new Map<TemplateDefinition, Template>();\n\nexport const html = (strings: TemplateDefinition, ...vararg: any[]): Element => {\n  return Fragment.cached(strings, ...vararg).element();\n};\n\nexport type TemplateDefinition = string[]|TemplateStringsArray;\n\nexport interface Bind {\n  elementId?: string;\n  attr?: {\n    index: number,\n    names: string[],\n    values: string[],\n  };\n  replaceNodeIndex?: number;\n}\n\nexport interface Template {\n  template: HTMLTemplateElement;\n  binds: Bind[];\n}\n"],
  "mappings": "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",
  "names": []
}
