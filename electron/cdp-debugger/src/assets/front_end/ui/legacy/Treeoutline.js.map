{
  "version": 3,
  "sources": ["../../../../../../front_end/ui/legacy/Treeoutline.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2007 Apple Inc.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Platform from '../../core/platform/platform.js';\n\nimport * as ARIAUtils from './ARIAUtils.js';\nimport * as ThemeSupport from './theme_support/theme_support.js';\nimport * as Utils from './utils/utils.js';\n\nimport type * as IconButton from '../components/icon_button/icon_button.js';\nimport type {Icon} from './Icon.js';\nimport type {Config} from './InplaceEditor.js';\nimport {InplaceEditor} from './InplaceEditor.js';\nimport {Keys} from './KeyboardShortcut.js';\nimport {Tooltip} from './Tooltip.js';\nimport {deepElementFromPoint, enclosingNodeOrSelfWithNodeNameInArray, isEditing} from './UIUtils.js';\nimport treeoutlineStyles from './treeoutline.css.legacy.js';\n\ntype AnyIcon = Icon|IconButton.Icon.Icon;\n\nconst nodeToParentTreeElementMap = new WeakMap<Node, TreeElement>();\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  ElementAttached = 'ElementAttached',\n  ElementsDetached = 'ElementsDetached',\n  ElementExpanded = 'ElementExpanded',\n  ElementCollapsed = 'ElementCollapsed',\n  ElementSelected = 'ElementSelected',\n}\n\nexport type EventTypes = {\n  [Events.ElementAttached]: TreeElement,\n  [Events.ElementsDetached]: void,\n  [Events.ElementExpanded]: TreeElement,\n  [Events.ElementCollapsed]: TreeElement,\n  [Events.ElementSelected]: TreeElement,\n};\n\nexport class TreeOutline extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  readonly rootElementInternal: TreeElement;\n  renderSelection: boolean;\n  selectedTreeElement: TreeElement|null;\n  expandTreeElementsWhenArrowing: boolean;\n  comparator: ((arg0: TreeElement, arg1: TreeElement) => number)|null;\n  contentElement: HTMLOListElement;\n  preventTabOrder: boolean;\n  showSelectionOnKeyboardFocus: boolean;\n  private focusable: boolean;\n  element: HTMLElement;\n  private useLightSelectionColor: boolean;\n  private treeElementToScrollIntoView: TreeElement|null;\n  private centerUponScrollIntoView: boolean;\n\n  constructor() {\n    super();\n    this.rootElementInternal = this.createRootElement();\n    this.renderSelection = false;\n\n    this.selectedTreeElement = null;\n    this.expandTreeElementsWhenArrowing = false;\n    this.comparator = null;\n\n    this.contentElement = this.rootElementInternal.childrenListNode;\n    this.contentElement.addEventListener('keydown', this.treeKeyDown.bind(this), false);\n\n    this.preventTabOrder = false;\n    this.showSelectionOnKeyboardFocus = false;\n    this.focusable = true;\n    this.setFocusable(true);\n    this.element = this.contentElement;\n    ARIAUtils.markAsTree(this.element);\n    this.useLightSelectionColor = false;\n    this.treeElementToScrollIntoView = null;\n    this.centerUponScrollIntoView = false;\n  }\n\n  setShowSelectionOnKeyboardFocus(show: boolean, preventTabOrder?: boolean): void {\n    this.contentElement.classList.toggle('hide-selection-when-blurred', show);\n    this.preventTabOrder = Boolean(preventTabOrder);\n    if (this.focusable) {\n      this.contentElement.tabIndex = Boolean(preventTabOrder) ? -1 : 0;\n    }\n    this.showSelectionOnKeyboardFocus = show;\n  }\n\n  private createRootElement(): TreeElement {\n    const rootElement = new TreeElement();\n    rootElement.treeOutline = this;\n    rootElement.root = true;\n    rootElement.selectable = false;\n    rootElement.expanded = true;\n    rootElement.childrenListNode.classList.remove('children');\n    return rootElement;\n  }\n\n  rootElement(): TreeElement {\n    return this.rootElementInternal;\n  }\n\n  firstChild(): TreeElement|null {\n    return this.rootElementInternal.firstChild();\n  }\n\n  private lastDescendent(): TreeElement|null {\n    let last = this.rootElementInternal.lastChild();\n    while (last && last.expanded && last.childCount()) {\n      last = last.lastChild();\n    }\n    return last;\n  }\n\n  appendChild(child: TreeElement, comparator?: ((arg0: TreeElement, arg1: TreeElement) => number)): void {\n    this.rootElementInternal.appendChild(child, comparator);\n  }\n\n  insertChild(child: TreeElement, index: number): void {\n    this.rootElementInternal.insertChild(child, index);\n  }\n\n  removeChild(child: TreeElement): void {\n    this.rootElementInternal.removeChild(child);\n  }\n\n  removeChildren(): void {\n    this.rootElementInternal.removeChildren();\n  }\n\n  treeElementFromPoint(x: number, y: number): TreeElement|null {\n    const node = deepElementFromPoint(this.contentElement.ownerDocument, x, y);\n    if (!node) {\n      return null;\n    }\n\n    const listNode = enclosingNodeOrSelfWithNodeNameInArray(node, ['ol', 'li']);\n    if (listNode) {\n      return nodeToParentTreeElementMap.get(listNode) || treeElementBylistItemNode.get(listNode) || null;\n    }\n    return null;\n  }\n\n  treeElementFromEvent(event: MouseEvent|null): TreeElement|null {\n    return event ? this.treeElementFromPoint(event.pageX, event.pageY) : null;\n  }\n\n  setComparator(comparator: ((arg0: TreeElement, arg1: TreeElement) => number)|null): void {\n    this.comparator = comparator;\n  }\n\n  setFocusable(focusable: boolean): void {\n    this.focusable = focusable;\n    this.updateFocusable();\n  }\n\n  updateFocusable(): void {\n    if (this.focusable) {\n      this.contentElement.tabIndex = (this.preventTabOrder || Boolean(this.selectedTreeElement)) ? -1 : 0;\n      if (this.selectedTreeElement) {\n        this.selectedTreeElement.setFocusable(true);\n      }\n    } else {\n      this.contentElement.removeAttribute('tabIndex');\n      if (this.selectedTreeElement) {\n        this.selectedTreeElement.setFocusable(false);\n      }\n    }\n  }\n\n  focus(): void {\n    if (this.selectedTreeElement) {\n      this.selectedTreeElement.listItemElement.focus();\n    } else {\n      this.contentElement.focus();\n    }\n  }\n\n  setUseLightSelectionColor(flag: boolean): void {\n    this.useLightSelectionColor = flag;\n  }\n\n  getUseLightSelectionColor(): boolean {\n    return this.useLightSelectionColor;\n  }\n\n  bindTreeElement(element: TreeElement): void {\n    if (element.treeOutline) {\n      console.error('Binding element for the second time: ' + new Error().stack);\n    }\n    element.treeOutline = this;\n    element.onbind();\n  }\n\n  unbindTreeElement(element: TreeElement): void {\n    if (!element.treeOutline) {\n      console.error('Unbinding element that was not bound: ' + new Error().stack);\n    }\n\n    element.deselect();\n    element.onunbind();\n    element.treeOutline = null;\n  }\n\n  selectPrevious(): boolean {\n    let nextSelectedElement: (TreeElement|null) =\n        this.selectedTreeElement && this.selectedTreeElement.traversePreviousTreeElement(true);\n    while (nextSelectedElement && !nextSelectedElement.selectable) {\n      nextSelectedElement = nextSelectedElement.traversePreviousTreeElement(!this.expandTreeElementsWhenArrowing);\n    }\n    if (!nextSelectedElement) {\n      return false;\n    }\n    nextSelectedElement.select(false, true);\n    return true;\n  }\n\n  selectNext(): boolean {\n    let nextSelectedElement: (TreeElement|null) =\n        this.selectedTreeElement && this.selectedTreeElement.traverseNextTreeElement(true);\n    while (nextSelectedElement && !nextSelectedElement.selectable) {\n      nextSelectedElement = nextSelectedElement.traverseNextTreeElement(!this.expandTreeElementsWhenArrowing);\n    }\n    if (!nextSelectedElement) {\n      return false;\n    }\n    nextSelectedElement.select(false, true);\n    return true;\n  }\n\n  forceSelect(omitFocus: boolean|undefined = false, selectedByUser: boolean|undefined = true): void {\n    if (this.selectedTreeElement) {\n      this.selectedTreeElement.deselect();\n    }\n    this.selectFirst(omitFocus, selectedByUser);\n  }\n\n  private selectFirst(omitFocus: boolean|undefined = false, selectedByUser: boolean|undefined = true): boolean {\n    let first = this.firstChild();\n    while (first && !first.selectable) {\n      first = first.traverseNextTreeElement(true);\n    }\n    if (!first) {\n      return false;\n    }\n    first.select(omitFocus, selectedByUser);\n    return true;\n  }\n\n  private selectLast(): boolean {\n    let last = this.lastDescendent();\n    while (last && !last.selectable) {\n      last = last.traversePreviousTreeElement(true);\n    }\n    if (!last) {\n      return false;\n    }\n    last.select(false, true);\n    return true;\n  }\n\n  private treeKeyDown(event: KeyboardEvent): void {\n    if (event.shiftKey || event.metaKey || event.ctrlKey || isEditing()) {\n      return;\n    }\n\n    let handled = false;\n    if (!this.selectedTreeElement) {\n      if (event.key === 'ArrowUp' && !event.altKey) {\n        handled = this.selectLast();\n      } else if (event.key === 'ArrowDown' && !event.altKey) {\n        handled = this.selectFirst();\n      }\n    } else if (event.key === 'ArrowUp' && !event.altKey) {\n      handled = this.selectPrevious();\n    } else if (event.key === 'ArrowDown' && !event.altKey) {\n      handled = this.selectNext();\n    } else if (event.key === 'ArrowLeft') {\n      handled = this.selectedTreeElement.collapseOrAscend(event.altKey);\n    } else if (event.key === 'ArrowRight') {\n      if (!this.selectedTreeElement.revealed()) {\n        this.selectedTreeElement.reveal();\n        handled = true;\n      } else {\n        handled = this.selectedTreeElement.descendOrExpand(event.altKey);\n      }\n    } else if (event.keyCode === 8 /* Backspace */ || event.keyCode === 46 /* Delete */) {\n      handled = this.selectedTreeElement.ondelete();\n    } else if (event.key === 'Enter') {\n      handled = this.selectedTreeElement.onenter();\n    } else if (event.keyCode === Keys.Space.code) {\n      handled = this.selectedTreeElement.onspace();\n    } else if (event.key === 'Home') {\n      handled = this.selectFirst();\n    } else if (event.key === 'End') {\n      handled = this.selectLast();\n    }\n\n    if (handled) {\n      event.consume(true);\n    }\n  }\n\n  deferredScrollIntoView(treeElement: TreeElement, center: boolean): void {\n    const deferredScrollIntoView = (): void => {\n      if (!this.treeElementToScrollIntoView) {\n        return;\n      }\n\n      // This function doesn't use scrollIntoViewIfNeeded because it always\n      // scrolls in both directions even if only one is necessary to bring the\n      // item into view.\n      const itemRect = this.treeElementToScrollIntoView.listItemElement.getBoundingClientRect();\n      const treeRect = this.contentElement.getBoundingClientRect();\n\n      // Usually, this.element is the tree container that scrolls. But sometimes\n      // (i.e. in the Elements panel), its parent is.\n      let scrollParentElement: HTMLElement = this.element;\n      while (getComputedStyle(scrollParentElement).overflow === 'visible' && scrollParentElement.parentElement) {\n        scrollParentElement = scrollParentElement.parentElement;\n      }\n\n      const viewRect = scrollParentElement.getBoundingClientRect();\n\n      const currentScrollX = viewRect.left - treeRect.left;\n      const currentScrollY = viewRect.top - treeRect.top + this.contentElement.offsetTop;\n\n      // Only scroll into view on each axis if the item is not visible at all\n      // but if we do scroll and centerUponScrollIntoView is true\n      // then we center the top left corner of the item in view.\n      let deltaLeft: number = itemRect.left - treeRect.left;\n      if (deltaLeft > currentScrollX && deltaLeft < currentScrollX + viewRect.width) {\n        deltaLeft = currentScrollX;\n      } else if (this.centerUponScrollIntoView) {\n        deltaLeft = deltaLeft - viewRect.width / 2;\n      }\n      let deltaTop: number = itemRect.top - treeRect.top;\n      if (deltaTop > currentScrollY && deltaTop < currentScrollY + viewRect.height) {\n        deltaTop = currentScrollY;\n      } else if (this.centerUponScrollIntoView) {\n        deltaTop = deltaTop - viewRect.height / 2;\n      }\n      scrollParentElement.scrollTo(deltaLeft, deltaTop);\n      this.treeElementToScrollIntoView = null;\n    };\n\n    if (!this.treeElementToScrollIntoView) {\n      this.element.window().requestAnimationFrame(deferredScrollIntoView);\n    }\n    this.treeElementToScrollIntoView = treeElement;\n    this.centerUponScrollIntoView = center;\n  }\n\n  onStartedEditingTitle(_treeElement: TreeElement): void {\n  }\n}\n\nexport class TreeOutlineInShadow extends TreeOutline {\n  element: HTMLElement;\n  shadowRoot: ShadowRoot;\n  private readonly disclosureElement: Element;\n  renderSelection: boolean;\n  constructor() {\n    super();\n    this.contentElement.classList.add('tree-outline');\n    this.element = document.createElement('div');\n    this.shadowRoot =\n        Utils.createShadowRootWithCoreStyles(this.element, {cssFile: treeoutlineStyles, delegatesFocus: undefined});\n    this.disclosureElement = this.shadowRoot.createChild('div', 'tree-outline-disclosure');\n    this.disclosureElement.appendChild(this.contentElement);\n    this.renderSelection = true;\n  }\n\n  registerRequiredCSS(cssFile: {cssContent: string}): void {\n    ThemeSupport.ThemeSupport.instance().appendStyle(this.shadowRoot, cssFile);\n  }\n\n  registerCSSFiles(cssFiles: CSSStyleSheet[]): void {\n    this.shadowRoot.adoptedStyleSheets = this.shadowRoot.adoptedStyleSheets.concat(cssFiles);\n  }\n\n  hideOverflow(): void {\n    this.disclosureElement.classList.add('tree-outline-disclosure-hide-overflow');\n  }\n\n  makeDense(): void {\n    this.contentElement.classList.add('tree-outline-dense');\n  }\n\n  onStartedEditingTitle(treeElement: TreeElement): void {\n    const selection = this.shadowRoot.getSelection();\n    if (selection) {\n      selection.selectAllChildren(treeElement.titleElement);\n    }\n  }\n}\n\nexport const treeElementBylistItemNode = new WeakMap<Node, TreeElement>();\nexport class TreeElement {\n  treeOutline: TreeOutline|null;\n  parent: TreeElement|null;\n  previousSibling: TreeElement|null;\n  nextSibling: TreeElement|null;\n  private readonly boundOnFocus: () => void;\n  private readonly boundOnBlur: () => void;\n  readonly listItemNode: HTMLLIElement;\n  titleElement: Node;\n  titleInternal: string|Node;\n  private childrenInternal: TreeElement[]|null;\n  childrenListNode: HTMLOListElement;\n  private hiddenInternal: boolean;\n  private selectableInternal: boolean;\n  expanded: boolean;\n  selected: boolean;\n  private expandable!: boolean;\n  #expandRecursively: boolean = true;\n  private collapsible: boolean;\n  toggleOnClick: boolean;\n  button: HTMLButtonElement|null;\n  root: boolean;\n  private tooltipInternal: string;\n  private leadingIconsElement: HTMLElement|null;\n  private trailingIconsElement: HTMLElement|null;\n  protected selectionElementInternal: HTMLElement|null;\n  private disableSelectFocus: boolean;\n  constructor(title?: string|Node, expandable?: boolean) {\n    this.treeOutline = null;\n    this.parent = null;\n    this.previousSibling = null;\n    this.nextSibling = null;\n    this.boundOnFocus = this.onFocus.bind(this);\n    this.boundOnBlur = this.onBlur.bind(this);\n    this.listItemNode = document.createElement('li');\n\n    this.titleElement = this.listItemNode.createChild('span', 'tree-element-title');\n    treeElementBylistItemNode.set(this.listItemNode, this);\n    this.titleInternal = '';\n    if (title) {\n      this.title = title;\n    }\n    this.listItemNode.addEventListener('mousedown', (this.handleMouseDown.bind(this) as EventListener), false);\n    this.listItemNode.addEventListener('click', (this.treeElementToggled.bind(this) as EventListener), false);\n    this.listItemNode.addEventListener('dblclick', this.handleDoubleClick.bind(this), false);\n    ARIAUtils.markAsTreeitem(this.listItemNode);\n\n    this.childrenInternal = null;\n    this.childrenListNode = document.createElement('ol');\n    nodeToParentTreeElementMap.set(this.childrenListNode, this);\n    this.childrenListNode.classList.add('children');\n    ARIAUtils.markAsGroup(this.childrenListNode);\n\n    this.hiddenInternal = false;\n    this.selectableInternal = true;\n    this.expanded = false;\n    this.selected = false;\n    this.setExpandable(expandable || false);\n    this.collapsible = true;\n    this.toggleOnClick = false;\n    this.button = null;\n    this.root = false;\n    this.tooltipInternal = '';\n    this.leadingIconsElement = null;\n    this.trailingIconsElement = null;\n    this.selectionElementInternal = null;\n    this.disableSelectFocus = false;\n  }\n\n  static getTreeElementBylistItemNode(node: Node): TreeElement|undefined {\n    return treeElementBylistItemNode.get(node);\n  }\n\n  hasAncestor(ancestor: TreeElement|null): boolean {\n    if (!ancestor) {\n      return false;\n    }\n\n    let currentNode: (TreeElement|null) = this.parent;\n    while (currentNode) {\n      if (ancestor === currentNode) {\n        return true;\n      }\n      currentNode = currentNode.parent;\n    }\n\n    return false;\n  }\n\n  hasAncestorOrSelf(ancestor: TreeElement|null): boolean {\n    return this === ancestor || this.hasAncestor(ancestor);\n  }\n\n  isHidden(): boolean {\n    if (this.hidden) {\n      return true;\n    }\n\n    let currentNode: (TreeElement|null) = this.parent;\n    while (currentNode) {\n      if (currentNode.hidden) {\n        return true;\n      }\n      currentNode = currentNode.parent;\n    }\n\n    return false;\n  }\n\n  children(): TreeElement[] {\n    return this.childrenInternal || [];\n  }\n\n  childCount(): number {\n    return this.childrenInternal ? this.childrenInternal.length : 0;\n  }\n\n  firstChild(): TreeElement|null {\n    return this.childrenInternal ? this.childrenInternal[0] : null;\n  }\n\n  lastChild(): TreeElement|null {\n    return this.childrenInternal ? this.childrenInternal[this.childrenInternal.length - 1] : null;\n  }\n\n  childAt(index: number): TreeElement|null {\n    return this.childrenInternal ? this.childrenInternal[index] : null;\n  }\n\n  indexOfChild(child: TreeElement): number {\n    return this.childrenInternal ? this.childrenInternal.indexOf(child) : -1;\n  }\n\n  appendChild(child: TreeElement, comparator?: ((arg0: TreeElement, arg1: TreeElement) => number)): void {\n    if (!this.childrenInternal) {\n      this.childrenInternal = [];\n    }\n\n    let insertionIndex;\n    if (comparator) {\n      insertionIndex = Platform.ArrayUtilities.lowerBound(this.childrenInternal, child, comparator);\n    } else if (this.treeOutline && this.treeOutline.comparator) {\n      insertionIndex = Platform.ArrayUtilities.lowerBound(this.childrenInternal, child, this.treeOutline.comparator);\n    } else {\n      insertionIndex = this.childrenInternal.length;\n    }\n    this.insertChild(child, insertionIndex);\n  }\n\n  insertChild(child: TreeElement, index: number): void {\n    if (!this.childrenInternal) {\n      this.childrenInternal = [];\n    }\n\n    if (!child) {\n      throw 'child can\\'t be undefined or null';\n    }\n\n    console.assert(\n        !child.parent, 'Attempting to insert a child that is already in the tree, reparenting is not supported.');\n\n    const previousChild = (index > 0 ? this.childrenInternal[index - 1] : null);\n    if (previousChild) {\n      previousChild.nextSibling = child;\n      child.previousSibling = previousChild;\n    } else {\n      child.previousSibling = null;\n    }\n\n    const nextChild = this.childrenInternal[index];\n    if (nextChild) {\n      nextChild.previousSibling = child;\n      child.nextSibling = nextChild;\n    } else {\n      child.nextSibling = null;\n    }\n\n    this.childrenInternal.splice(index, 0, child);\n\n    this.setExpandable(true);\n    child.parent = this;\n\n    if (this.treeOutline) {\n      this.treeOutline.bindTreeElement(child);\n    }\n    for (let current = child.firstChild(); this.treeOutline && current;\n         current = current.traverseNextTreeElement(false, child, true)) {\n      this.treeOutline.bindTreeElement(current);\n    }\n    child.onattach();\n    child.ensureSelection();\n    if (this.treeOutline) {\n      this.treeOutline.dispatchEventToListeners(Events.ElementAttached, child);\n    }\n    const nextSibling = child.nextSibling ? child.nextSibling.listItemNode : null;\n    this.childrenListNode.insertBefore(child.listItemNode, nextSibling);\n    this.childrenListNode.insertBefore(child.childrenListNode, nextSibling);\n    if (child.selected) {\n      child.select();\n    }\n    if (child.expanded) {\n      child.expand();\n    }\n  }\n\n  removeChildAtIndex(childIndex: number): void {\n    if (!this.childrenInternal || childIndex < 0 || childIndex >= this.childrenInternal.length) {\n      throw 'childIndex out of range';\n    }\n\n    const child = this.childrenInternal[childIndex];\n    this.childrenInternal.splice(childIndex, 1);\n\n    const parent = child.parent;\n    if (this.treeOutline && this.treeOutline.selectedTreeElement &&\n        this.treeOutline.selectedTreeElement.hasAncestorOrSelf(child)) {\n      if (child.nextSibling) {\n        child.nextSibling.select(true);\n      } else if (child.previousSibling) {\n        child.previousSibling.select(true);\n      } else if (parent) {\n        parent.select(true);\n      }\n    }\n\n    if (child.previousSibling) {\n      child.previousSibling.nextSibling = child.nextSibling;\n    }\n    if (child.nextSibling) {\n      child.nextSibling.previousSibling = child.previousSibling;\n    }\n    child.parent = null;\n\n    if (this.treeOutline) {\n      this.treeOutline.unbindTreeElement(child);\n    }\n    for (let current = child.firstChild(); this.treeOutline && current;\n         current = current.traverseNextTreeElement(false, child, true)) {\n      this.treeOutline.unbindTreeElement(current);\n    }\n\n    child.detach();\n    if (this.treeOutline) {\n      this.treeOutline.dispatchEventToListeners(Events.ElementsDetached);\n    }\n  }\n\n  removeChild(child: TreeElement): void {\n    if (!child) {\n      throw 'child can\\'t be undefined or null';\n    }\n    if (child.parent !== this) {\n      return;\n    }\n\n    const childIndex = this.childrenInternal ? this.childrenInternal.indexOf(child) : -1;\n    if (childIndex === -1) {\n      throw 'child not found in this node\\'s children';\n    }\n\n    this.removeChildAtIndex(childIndex);\n  }\n\n  removeChildren(): void {\n    if (!this.root && this.treeOutline && this.treeOutline.selectedTreeElement &&\n        this.treeOutline.selectedTreeElement.hasAncestorOrSelf(this)) {\n      this.select(true);\n    }\n\n    if (this.childrenInternal) {\n      for (const child of this.childrenInternal) {\n        child.previousSibling = null;\n        child.nextSibling = null;\n        child.parent = null;\n\n        if (this.treeOutline) {\n          this.treeOutline.unbindTreeElement(child);\n        }\n        for (let current = child.firstChild(); this.treeOutline && current;\n             current = current.traverseNextTreeElement(false, child, true)) {\n          this.treeOutline.unbindTreeElement(current);\n        }\n        child.detach();\n      }\n    }\n    this.childrenInternal = [];\n    if (this.treeOutline) {\n      this.treeOutline.dispatchEventToListeners(Events.ElementsDetached);\n    }\n  }\n\n  get selectable(): boolean {\n    if (this.isHidden()) {\n      return false;\n    }\n    return this.selectableInternal;\n  }\n\n  set selectable(x: boolean) {\n    this.selectableInternal = x;\n  }\n\n  get listItemElement(): HTMLLIElement {\n    return this.listItemNode;\n  }\n\n  get childrenListElement(): HTMLOListElement {\n    return this.childrenListNode;\n  }\n\n  get title(): string|Node {\n    return this.titleInternal;\n  }\n\n  set title(x: string|Node) {\n    if (this.titleInternal === x) {\n      return;\n    }\n    this.titleInternal = x;\n\n    if (typeof x === 'string') {\n      this.titleElement.textContent = x;\n      this.tooltip = x;\n    } else {\n      this.titleElement = x;\n      this.tooltip = '';\n    }\n\n    this.listItemNode.removeChildren();\n    if (this.leadingIconsElement) {\n      this.listItemNode.appendChild(this.leadingIconsElement);\n    }\n    this.listItemNode.appendChild(this.titleElement);\n    if (this.trailingIconsElement) {\n      this.listItemNode.appendChild(this.trailingIconsElement);\n    }\n    this.ensureSelection();\n  }\n\n  titleAsText(): string {\n    if (!this.titleInternal) {\n      return '';\n    }\n    if (typeof this.titleInternal === 'string') {\n      return this.titleInternal;\n    }\n    return this.titleInternal.textContent || '';\n  }\n\n  startEditingTitle<T>(editingConfig: Config<T>): void {\n    InplaceEditor.startEditing((this.titleElement as Element), editingConfig);\n    if (this.treeOutline) {\n      this.treeOutline.onStartedEditingTitle(this);\n    }\n  }\n\n  setLeadingIcons(icons: AnyIcon[]): void {\n    if (!this.leadingIconsElement && !icons.length) {\n      return;\n    }\n    if (!this.leadingIconsElement) {\n      this.leadingIconsElement = document.createElement('div');\n      this.leadingIconsElement.classList.add('leading-icons');\n      this.leadingIconsElement.classList.add('icons-container');\n      this.listItemNode.insertBefore(this.leadingIconsElement, this.titleElement);\n      this.ensureSelection();\n    }\n    this.leadingIconsElement.removeChildren();\n    for (const icon of icons) {\n      this.leadingIconsElement.appendChild(icon);\n    }\n  }\n\n  setTrailingIcons(icons: AnyIcon[]): void {\n    if (!this.trailingIconsElement && !icons.length) {\n      return;\n    }\n    if (!this.trailingIconsElement) {\n      this.trailingIconsElement = document.createElement('div');\n      this.trailingIconsElement.classList.add('trailing-icons');\n      this.trailingIconsElement.classList.add('icons-container');\n      this.listItemNode.appendChild(this.trailingIconsElement);\n      this.ensureSelection();\n    }\n    this.trailingIconsElement.removeChildren();\n    for (const icon of icons) {\n      this.trailingIconsElement.appendChild(icon);\n    }\n  }\n\n  get tooltip(): string {\n    return this.tooltipInternal;\n  }\n\n  set tooltip(x: string) {\n    if (this.tooltipInternal === x) {\n      return;\n    }\n    this.tooltipInternal = x;\n    Tooltip.install(this.listItemNode, x);\n  }\n\n  isExpandable(): boolean {\n    return this.expandable;\n  }\n\n  setExpandable(expandable: boolean): void {\n    if (this.expandable === expandable) {\n      return;\n    }\n\n    this.expandable = expandable;\n\n    this.listItemNode.classList.toggle('parent', expandable);\n    if (!expandable) {\n      this.collapse();\n      ARIAUtils.unsetExpandable(this.listItemNode);\n    } else {\n      ARIAUtils.setExpanded(this.listItemNode, false);\n    }\n  }\n\n  isExpandRecursively(): boolean {\n    return this.#expandRecursively;\n  }\n\n  setExpandRecursively(expandRecursively: boolean): void {\n    this.#expandRecursively = expandRecursively;\n  }\n\n  isCollapsible(): boolean {\n    return this.collapsible;\n  }\n\n  setCollapsible(collapsible: boolean): void {\n    if (this.collapsible === collapsible) {\n      return;\n    }\n\n    this.collapsible = collapsible;\n\n    this.listItemNode.classList.toggle('always-parent', !collapsible);\n    if (!collapsible) {\n      this.expand();\n    }\n  }\n\n  get hidden(): boolean {\n    return this.hiddenInternal;\n  }\n\n  set hidden(x: boolean) {\n    if (this.hiddenInternal === x) {\n      return;\n    }\n\n    this.hiddenInternal = x;\n\n    this.listItemNode.classList.toggle('hidden', x);\n    this.childrenListNode.classList.toggle('hidden', x);\n\n    if (x && this.treeOutline && this.treeOutline.selectedTreeElement &&\n        this.treeOutline.selectedTreeElement.hasAncestorOrSelf(this)) {\n      const hadFocus = this.treeOutline.selectedTreeElement.listItemElement.hasFocus();\n      this.treeOutline.forceSelect(!hadFocus, /* selectedByUser */ false);\n    }\n  }\n\n  invalidateChildren(): void {\n    if (this.childrenInternal) {\n      this.removeChildren();\n      this.childrenInternal = null;\n    }\n  }\n\n  private ensureSelection(): void {\n    if (!this.treeOutline || !this.treeOutline.renderSelection) {\n      return;\n    }\n    if (!this.selectionElementInternal) {\n      this.selectionElementInternal = document.createElement('div');\n      this.selectionElementInternal.classList.add('selection');\n      this.selectionElementInternal.classList.add('fill');\n    }\n    this.listItemNode.insertBefore(this.selectionElementInternal, this.listItemElement.firstChild);\n  }\n\n  private treeElementToggled(event: MouseEvent): void {\n    const element = (event.currentTarget as Node | null);\n    if (!element || treeElementBylistItemNode.get(element) !== this || element.hasSelection()) {\n      return;\n    }\n\n    console.assert(Boolean(this.treeOutline));\n    const showSelectionOnKeyboardFocus = this.treeOutline ? this.treeOutline.showSelectionOnKeyboardFocus : false;\n    const toggleOnClick = this.toggleOnClick && (showSelectionOnKeyboardFocus || !this.selectable);\n    const isInTriangle = this.isEventWithinDisclosureTriangle(event);\n    if (!toggleOnClick && !isInTriangle) {\n      return;\n    }\n\n    if (this.expanded) {\n      if (event.altKey) {\n        this.collapseRecursively();\n      } else {\n        this.collapse();\n      }\n    } else {\n      if (event.altKey) {\n        void this.expandRecursively();\n      } else {\n        this.expand();\n      }\n    }\n    event.consume();\n  }\n\n  private handleMouseDown(event: MouseEvent): void {\n    const element = (event.currentTarget as Node | null);\n    if (!element) {\n      return;\n    }\n    if (!this.selectable) {\n      return;\n    }\n    if (treeElementBylistItemNode.get(element) !== this) {\n      return;\n    }\n\n    if (this.isEventWithinDisclosureTriangle(event)) {\n      return;\n    }\n\n    this.selectOnMouseDown(event);\n  }\n\n  private handleDoubleClick(event: Event): void {\n    const element = (event.currentTarget as Node | null);\n    if (!element || treeElementBylistItemNode.get(element) !== this) {\n      return;\n    }\n\n    const handled = this.ondblclick(event);\n    if (handled) {\n      return;\n    }\n    if (this.expandable && !this.expanded) {\n      this.expand();\n    }\n  }\n\n  private detach(): void {\n    this.listItemNode.remove();\n    this.childrenListNode.remove();\n  }\n\n  collapse(): void {\n    if (!this.expanded || !this.collapsible) {\n      return;\n    }\n    this.listItemNode.classList.remove('expanded');\n    this.childrenListNode.classList.remove('expanded');\n    ARIAUtils.setExpanded(this.listItemNode, false);\n    this.expanded = false;\n    this.oncollapse();\n    if (this.treeOutline) {\n      this.treeOutline.dispatchEventToListeners(Events.ElementCollapsed, this);\n    }\n\n    const selectedTreeElement = this.treeOutline && this.treeOutline.selectedTreeElement;\n    if (selectedTreeElement && selectedTreeElement.hasAncestor(this)) {\n      this.select(/* omitFocus */ true, /* selectedByUser */ true);\n    }\n  }\n\n  collapseRecursively(): void {\n    let item: (TreeElement|null)|this = this;\n    while (item) {\n      if (item.expanded) {\n        item.collapse();\n      }\n      item = item.traverseNextTreeElement(false, this, true);\n    }\n  }\n\n  collapseChildren(): void {\n    if (!this.childrenInternal) {\n      return;\n    }\n    for (const child of this.childrenInternal) {\n      child.collapseRecursively();\n    }\n  }\n\n  expand(): void {\n    if (!this.expandable || (this.expanded && this.childrenInternal)) {\n      return;\n    }\n\n    // Set this before onpopulate. Since onpopulate can add elements, this makes\n    // sure the expanded flag is true before calling those functions. This prevents the possibility\n    // of an infinite loop if onpopulate were to call expand.\n\n    this.expanded = true;\n\n    void this.populateIfNeeded();\n    this.listItemNode.classList.add('expanded');\n    this.childrenListNode.classList.add('expanded');\n    ARIAUtils.setExpanded(this.listItemNode, true);\n\n    if (this.treeOutline) {\n      this.onexpand();\n      this.treeOutline.dispatchEventToListeners(Events.ElementExpanded, this);\n    }\n  }\n\n  async expandRecursively(maxDepth?: number): Promise<void> {\n    let item: (TreeElement|null)|this = this;\n    const info = {depthChange: 0};\n    let depth = 0;\n\n    // The Inspector uses TreeOutlines to represents object properties, so recursive expansion\n    // in some case can be infinite, since JavaScript objects can hold circular references.\n    // So default to a recursion cap of 3 levels, since that gives fairly good results.\n    if (maxDepth === undefined || isNaN(maxDepth)) {\n      maxDepth = 3;\n    }\n\n    do {\n      if (item.isExpandRecursively()) {\n        await item.populateIfNeeded();\n\n        if (depth < maxDepth) {\n          item.expand();\n        }\n      }\n      item = item.traverseNextTreeElement(!item.isExpandRecursively(), this, true, info);\n      depth += info.depthChange;\n    } while (item !== null);\n  }\n\n  collapseOrAscend(altKey: boolean): boolean {\n    if (this.expanded && this.collapsible) {\n      if (altKey) {\n        this.collapseRecursively();\n      } else {\n        this.collapse();\n      }\n      return true;\n    }\n\n    if (!this.parent || this.parent.root) {\n      return false;\n    }\n\n    if (!this.parent.selectable) {\n      this.parent.collapse();\n      return true;\n    }\n\n    let nextSelectedElement: (TreeElement|null)|TreeElement = this.parent;\n    while (nextSelectedElement && !nextSelectedElement.selectable) {\n      nextSelectedElement = nextSelectedElement.parent;\n    }\n\n    if (!nextSelectedElement) {\n      return false;\n    }\n    nextSelectedElement.select(false, true);\n    return true;\n  }\n\n  descendOrExpand(altKey: boolean): boolean {\n    if (!this.expandable) {\n      return false;\n    }\n\n    if (!this.expanded) {\n      if (altKey) {\n        void this.expandRecursively();\n      } else {\n        this.expand();\n      }\n      return true;\n    }\n\n    let nextSelectedElement = this.firstChild();\n    while (nextSelectedElement && !nextSelectedElement.selectable) {\n      nextSelectedElement = nextSelectedElement.nextSibling;\n    }\n\n    if (!nextSelectedElement) {\n      return false;\n    }\n    nextSelectedElement.select(false, true);\n    return true;\n  }\n\n  reveal(center?: boolean): void {\n    let currentAncestor: (TreeElement|null) = this.parent;\n    while (currentAncestor && !currentAncestor.root) {\n      if (!currentAncestor.expanded) {\n        currentAncestor.expand();\n      }\n      currentAncestor = currentAncestor.parent;\n    }\n\n    if (this.treeOutline) {\n      this.treeOutline.deferredScrollIntoView(this, Boolean(center));\n    }\n  }\n\n  revealed(): boolean {\n    let currentAncestor: (TreeElement|null) = this.parent;\n    while (currentAncestor && !currentAncestor.root) {\n      if (!currentAncestor.expanded) {\n        return false;\n      }\n      currentAncestor = currentAncestor.parent;\n    }\n\n    return true;\n  }\n\n  selectOnMouseDown(event: MouseEvent): void {\n    if (this.select(false, true)) {\n      event.consume(true);\n    }\n\n    if (this.listItemNode.draggable && this.selectionElementInternal && this.treeOutline) {\n      const marginLeft = this.treeOutline.element.getBoundingClientRect().left -\n          this.listItemNode.getBoundingClientRect().left - this.treeOutline.element.scrollLeft;\n      // By default the left margin extends far off screen. This is not a problem except when dragging an element.\n      // Setting the margin once here should be fine, because we believe the left margin should never change.\n      this.selectionElementInternal.style.setProperty('margin-left', marginLeft + 'px');\n    }\n  }\n\n  select(omitFocus?: boolean, selectedByUser?: boolean): boolean {\n    omitFocus = omitFocus || this.disableSelectFocus;\n    if (!this.treeOutline || !this.selectable || this.selected) {\n      if (!omitFocus) {\n        this.listItemElement.focus();\n      }\n      return false;\n    }\n    // Wait to deselect this element so that focus only changes once\n    const lastSelected = this.treeOutline.selectedTreeElement;\n    this.treeOutline.selectedTreeElement = null;\n\n    if (this.treeOutline.rootElementInternal === this) {\n      if (lastSelected) {\n        lastSelected.deselect();\n      }\n      if (!omitFocus) {\n        this.listItemElement.focus();\n      }\n      return false;\n    }\n\n    this.selected = true;\n\n    this.treeOutline.selectedTreeElement = this;\n    this.treeOutline.updateFocusable();\n    if (!omitFocus || this.treeOutline.contentElement.hasFocus()) {\n      this.listItemElement.focus();\n    }\n\n    this.listItemNode.classList.add('selected');\n    ARIAUtils.setSelected(this.listItemNode, true);\n    this.treeOutline.dispatchEventToListeners(Events.ElementSelected, this);\n    if (lastSelected) {\n      lastSelected.deselect();\n    }\n    return this.onselect(selectedByUser);\n  }\n\n  setFocusable(focusable: boolean): void {\n    if (focusable) {\n      this.listItemNode.setAttribute('tabIndex', (this.treeOutline && this.treeOutline.preventTabOrder) ? '-1' : '0');\n      this.listItemNode.addEventListener('focus', this.boundOnFocus, false);\n      this.listItemNode.addEventListener('blur', this.boundOnBlur, false);\n    } else {\n      this.listItemNode.removeAttribute('tabIndex');\n      this.listItemNode.removeEventListener('focus', this.boundOnFocus, false);\n      this.listItemNode.removeEventListener('blur', this.boundOnBlur, false);\n    }\n  }\n\n  private onFocus(): void {\n    if (!this.treeOutline || this.treeOutline.getUseLightSelectionColor()) {\n      return;\n    }\n    if (!this.treeOutline.contentElement.classList.contains('hide-selection-when-blurred')) {\n      this.listItemNode.classList.add('force-white-icons');\n    }\n  }\n\n  private onBlur(): void {\n    if (!this.treeOutline || this.treeOutline.getUseLightSelectionColor()) {\n      return;\n    }\n    if (!this.treeOutline.contentElement.classList.contains('hide-selection-when-blurred')) {\n      this.listItemNode.classList.remove('force-white-icons');\n    }\n  }\n\n  revealAndSelect(omitFocus?: boolean): void {\n    this.reveal(true);\n    this.select(omitFocus);\n  }\n\n  deselect(): void {\n    const hadFocus = this.listItemNode.hasFocus();\n    this.selected = false;\n    this.listItemNode.classList.remove('selected');\n    ARIAUtils.clearSelected(this.listItemNode);\n    this.setFocusable(false);\n\n    if (this.treeOutline && this.treeOutline.selectedTreeElement === this) {\n      this.treeOutline.selectedTreeElement = null;\n      this.treeOutline.updateFocusable();\n      if (hadFocus) {\n        this.treeOutline.focus();\n      }\n    }\n  }\n\n  private async populateIfNeeded(): Promise<void> {\n    if (this.treeOutline && this.expandable && !this.childrenInternal) {\n      this.childrenInternal = [];\n      await this.onpopulate();\n    }\n  }\n\n  async onpopulate(): Promise<void> {\n    // Overridden by subclasses.\n  }\n\n  onenter(): boolean {\n    return false;\n  }\n\n  ondelete(): boolean {\n    return false;\n  }\n\n  onspace(): boolean {\n    return false;\n  }\n\n  onbind(): void {\n  }\n\n  onunbind(): void {\n  }\n\n  onattach(): void {\n  }\n\n  onexpand(): void {\n  }\n\n  oncollapse(): void {\n  }\n\n  ondblclick(_e: Event): boolean {\n    return false;\n  }\n\n  onselect(_selectedByUser?: boolean): boolean {\n    return false;\n  }\n\n  traverseNextTreeElement(skipUnrevealed: boolean, stayWithin?: TreeElement|null, dontPopulate?: boolean, info?: {\n    depthChange: number,\n  }): TreeElement|null {\n    if (!dontPopulate) {\n      void this.populateIfNeeded();\n    }\n\n    if (info) {\n      info.depthChange = 0;\n    }\n\n    let element: (TreeElement|null)|this =\n        skipUnrevealed ? (this.revealed() ? this.firstChild() : null) : this.firstChild();\n    if (element && (!skipUnrevealed || (skipUnrevealed && this.expanded))) {\n      if (info) {\n        info.depthChange = 1;\n      }\n      return element;\n    }\n\n    if (this === stayWithin) {\n      return null;\n    }\n\n    element = skipUnrevealed ? (this.revealed() ? this.nextSibling : null) : this.nextSibling;\n    if (element) {\n      return element;\n    }\n\n    element = this;\n    while (element && !element.root &&\n           !(skipUnrevealed ? (element.revealed() ? element.nextSibling : null) : element.nextSibling) &&\n           element.parent !== stayWithin) {\n      if (info) {\n        info.depthChange -= 1;\n      }\n      element = element.parent;\n    }\n\n    if (!element || element.root) {\n      return null;\n    }\n\n    return (skipUnrevealed ? (element.revealed() ? element.nextSibling : null) : element.nextSibling);\n  }\n\n  traversePreviousTreeElement(skipUnrevealed: boolean, dontPopulate?: boolean): TreeElement|null {\n    let element: (TreeElement|null) =\n        skipUnrevealed ? (this.revealed() ? this.previousSibling : null) : this.previousSibling;\n    if (!dontPopulate && element) {\n      void element.populateIfNeeded();\n    }\n\n    while (element &&\n           (skipUnrevealed ? (element.revealed() && element.expanded ? element.lastChild() : null) :\n                             element.lastChild())) {\n      if (!dontPopulate) {\n        void element.populateIfNeeded();\n      }\n      element =\n          (skipUnrevealed ? (element.revealed() && element.expanded ? element.lastChild() : null) :\n                            element.lastChild());\n    }\n\n    if (element) {\n      return element;\n    }\n\n    if (!this.parent || this.parent.root) {\n      return null;\n    }\n\n    return this.parent;\n  }\n\n  isEventWithinDisclosureTriangle(event: MouseEvent): boolean {\n    const arrowToggleWidth = 10;\n    // FIXME: We should not use getComputedStyle(). For that we need to get rid of using ::before for disclosure triangle. (http://webk.it/74446)\n    const paddingLeftValue = window.getComputedStyle(this.listItemNode).paddingLeft;\n    console.assert(paddingLeftValue.endsWith('px'));\n    const computedLeftPadding = parseFloat(paddingLeftValue);\n    const left = this.listItemNode.totalOffsetLeft() + computedLeftPadding;\n    return event.pageX >= left && event.pageX <= left + arrowToggleWidth && this.expandable;\n  }\n\n  setDisableSelectFocus(toggle: boolean): void {\n    this.disableSelectFocus = toggle;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
