{
  "version": 3,
  "sources": ["../../../../../../front_end/ui/legacy/ShortcutRegistry.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\n\nimport type {Action} from './ActionRegistration.js';\nimport {getRegisteredActionExtensions, KeybindSet} from './ActionRegistration.js';\nimport type {ActionRegistry} from './ActionRegistry.js';\nimport {Context} from './Context.js';\nimport {Dialog} from './Dialog.js';\nimport {KeyboardShortcut, Modifiers, Type} from './KeyboardShortcut.js';\nimport {isEditing} from './UIUtils.js';\n\nlet shortcutRegistryInstance: ShortcutRegistry|undefined;\n\nexport class ShortcutRegistry {\n  private readonly actionRegistry: ActionRegistry;\n  private readonly actionToShortcut: Platform.MapUtilities.Multimap<string, KeyboardShortcut>;\n  private readonly keyMap: ShortcutTreeNode;\n  private activePrefixKey: ShortcutTreeNode|null;\n  private activePrefixTimeout: number|null;\n  private consumePrefix: (() => Promise<void>)|null;\n  private readonly devToolsDefaultShortcutActions: Set<string>;\n  private readonly disabledDefaultShortcutsForAction: Platform.MapUtilities.Multimap<string, KeyboardShortcut>;\n  private readonly keybindSetSetting: Common.Settings.Setting<string>;\n  private readonly userShortcutsSetting: Common.Settings.Setting<KeyboardShortcut[]>;\n\n  constructor(actionRegistry: ActionRegistry) {\n    this.actionRegistry = actionRegistry;\n    this.actionToShortcut = new Platform.MapUtilities.Multimap();\n    this.keyMap = new ShortcutTreeNode(0, 0);\n    this.activePrefixKey = null;\n    this.activePrefixTimeout = null;\n    this.consumePrefix = null;\n    this.devToolsDefaultShortcutActions = new Set();\n    this.disabledDefaultShortcutsForAction = new Platform.MapUtilities.Multimap();\n    this.keybindSetSetting = Common.Settings.Settings.instance().moduleSetting('activeKeybindSet');\n    this.keybindSetSetting.addChangeListener(event => {\n      Host.userMetrics.keybindSetSettingChanged(event.data);\n      this.registerBindings();\n    });\n    this.userShortcutsSetting = Common.Settings.Settings.instance().moduleSetting('userShortcuts');\n    this.userShortcutsSetting.addChangeListener(this.registerBindings, this);\n\n    this.registerBindings();\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n    actionRegistry: ActionRegistry|null,\n  } = {forceNew: null, actionRegistry: null}): ShortcutRegistry {\n    const {forceNew, actionRegistry} = opts;\n    if (!shortcutRegistryInstance || forceNew) {\n      if (!actionRegistry) {\n        throw new Error('Missing actionRegistry for shortcutRegistry');\n      }\n      shortcutRegistryInstance = new ShortcutRegistry(actionRegistry);\n    }\n\n    return shortcutRegistryInstance;\n  }\n\n  static removeInstance(): void {\n    shortcutRegistryInstance = undefined;\n  }\n  private applicableActions(key: number, handlers: {\n    [x: string]: () => Promise<boolean>,\n  }|undefined = {}): Action[] {\n    let actions: string[] = [];\n    const keyMap = this.activePrefixKey || this.keyMap;\n    const keyNode = keyMap.getNode(key);\n    if (keyNode) {\n      actions = keyNode.actions();\n    }\n    const applicableActions = this.actionRegistry.applicableActions(actions, Context.instance());\n    if (keyNode) {\n      for (const actionId of Object.keys(handlers)) {\n        if (keyNode.actions().indexOf(actionId) >= 0) {\n          const action = this.actionRegistry.action(actionId);\n          if (action) {\n            applicableActions.push(action);\n          }\n        }\n      }\n    }\n    return applicableActions;\n  }\n\n  shortcutsForAction(action: string): KeyboardShortcut[] {\n    return [...this.actionToShortcut.get(action)];\n  }\n\n  actionsForDescriptors(descriptors: {\n    key: number,\n    name: string,\n  }[]): string[] {\n    let keyMapNode: (ShortcutTreeNode|null)|ShortcutTreeNode = this.keyMap;\n    for (const {key} of descriptors) {\n      if (!keyMapNode) {\n        return [];\n      }\n      keyMapNode = keyMapNode.getNode(key);\n    }\n    return keyMapNode ? keyMapNode.actions() : [];\n  }\n\n  globalShortcutKeys(): number[] {\n    const keys = [];\n    for (const node of this.keyMap.chords().values()) {\n      const actions = node.actions();\n      const applicableActions = this.actionRegistry.applicableActions(actions, Context.instance());\n      if (applicableActions.length || node.hasChords()) {\n        keys.push(node.key());\n      }\n    }\n    return keys;\n  }\n\n  keysForActions(actionIds: string[]): number[] {\n    const keys = actionIds.flatMap(\n        action => [...this.actionToShortcut.get(action)].flatMap(\n            shortcut => shortcut.descriptors.map(descriptor => descriptor.key)));\n    return [...(new Set(keys))];\n  }\n\n  shortcutTitleForAction(actionId: string): string|undefined {\n    for (const shortcut of this.actionToShortcut.get(actionId)) {\n      return shortcut.title();\n    }\n    return undefined;\n  }\n\n  handleShortcut(event: KeyboardEvent, handlers?: {\n    [x: string]: () => Promise<boolean>,\n  }): void {\n    void this.handleKey(KeyboardShortcut.makeKeyFromEvent(event), event.key, event, handlers);\n  }\n\n  actionHasDefaultShortcut(actionId: string): boolean {\n    return this.devToolsDefaultShortcutActions.has(actionId);\n  }\n\n  getShortcutListener(handlers: {[x: string]: () => Promise<boolean>}): (event: KeyboardEvent) => void {\n    const shortcuts = Object.keys(handlers).flatMap(action => [...this.actionToShortcut.get(action)]);\n    // We only want keys for these specific actions to get handled this\n    // way; all others should be allowed to bubble up.\n    const allowlistKeyMap = new ShortcutTreeNode(0, 0);\n    shortcuts.forEach(shortcut => {\n      allowlistKeyMap.addKeyMapping(shortcut.descriptors.map(descriptor => descriptor.key), shortcut.action);\n    });\n\n    return (event: KeyboardEvent): void => {\n      const key = KeyboardShortcut.makeKeyFromEvent(event);\n      const keyMap = this.activePrefixKey ? allowlistKeyMap.getNode(this.activePrefixKey.key()) : allowlistKeyMap;\n      if (!keyMap) {\n        return;\n      }\n      if (keyMap.getNode(key)) {\n        this.handleShortcut(event, handlers);\n      }\n    };\n  }\n\n  addShortcutListener(element: Element, handlers: {\n    [x: string]: () => Promise<boolean>,\n  }): (arg0: Event) => void {\n    const listener = this.getShortcutListener(handlers) as (event: Event) => void;\n    element.addEventListener('keydown', listener);\n    return listener;\n  }\n\n  async handleKey(key: number, domKey: string, event?: KeyboardEvent, handlers?: {\n    [x: string]: () => Promise<boolean>,\n  }): Promise<void> {\n    const keyModifiers = key >> 8;\n    const hasHandlersOrPrefixKey = Boolean(handlers) || Boolean(this.activePrefixKey);\n    const keyMapNode = this.keyMap.getNode(key);\n    const maybeHasActions =\n        (this.applicableActions(key, handlers)).length > 0 || (keyMapNode && keyMapNode.hasChords());\n    if ((!hasHandlersOrPrefixKey && isPossiblyInputKey()) || !maybeHasActions ||\n        KeyboardShortcut.isModifier(KeyboardShortcut.keyCodeAndModifiersFromKey(key).keyCode)) {\n      return;\n    }\n    if (event) {\n      event.consume(true);\n    }\n    if (!hasHandlersOrPrefixKey && Dialog.hasInstance()) {\n      return;\n    }\n\n    if (this.activePrefixTimeout) {\n      clearTimeout(this.activePrefixTimeout);\n      const handled = await maybeExecuteActionForKey.call(this);\n      this.activePrefixKey = null;\n      this.activePrefixTimeout = null;\n      if (handled) {\n        return;\n      }\n      if (this.consumePrefix) {\n        await this.consumePrefix();\n      }\n    }\n    if (keyMapNode && keyMapNode.hasChords()) {\n      this.activePrefixKey = keyMapNode;\n      this.consumePrefix = async(): Promise<void> => {\n        this.activePrefixKey = null;\n        this.activePrefixTimeout = null;\n        await maybeExecuteActionForKey.call(this);\n      };\n      this.activePrefixTimeout = window.setTimeout(this.consumePrefix, KeyTimeout);\n    } else {\n      await maybeExecuteActionForKey.call(this);\n    }\n\n    function isPossiblyInputKey(): boolean {\n      if (!event || !isEditing() || /^F\\d+|Control|Shift|Alt|Meta|Escape|Win|U\\+001B$/.test(domKey)) {\n        return false;\n      }\n\n      if (!keyModifiers) {\n        return true;\n      }\n\n      const modifiers = Modifiers;\n      // Undo/Redo will also cause input, so textual undo should take precedence over DevTools undo when editing.\n      if (Host.Platform.isMac()) {\n        if (KeyboardShortcut.makeKey('z', modifiers.Meta) === key) {\n          return true;\n        }\n        if (KeyboardShortcut.makeKey('z', modifiers.Meta | modifiers.Shift) === key) {\n          return true;\n        }\n      } else {\n        if (KeyboardShortcut.makeKey('z', modifiers.Ctrl) === key) {\n          return true;\n        }\n        if (KeyboardShortcut.makeKey('y', modifiers.Ctrl) === key) {\n          return true;\n        }\n        if (!Host.Platform.isWin() && KeyboardShortcut.makeKey('z', modifiers.Ctrl | modifiers.Shift) === key) {\n          return true;\n        }\n      }\n\n      if ((keyModifiers & (modifiers.Ctrl | modifiers.Alt)) === (modifiers.Ctrl | modifiers.Alt)) {\n        return Host.Platform.isWin();\n      }\n\n      return !hasModifier(modifiers.Ctrl) && !hasModifier(modifiers.Alt) && !hasModifier(modifiers.Meta);\n    }\n\n    function hasModifier(mod: number): boolean {\n      return Boolean(keyModifiers & mod);\n    }\n\n    /** ;\n     */\n    async function maybeExecuteActionForKey(this: ShortcutRegistry): Promise<boolean> {\n      const actions = this.applicableActions(key, handlers);\n      if (!actions.length) {\n        return false;\n      }\n      for (const action of actions) {\n        let handled;\n        if (handlers && handlers[action.id()]) {\n          handled = await handlers[action.id()]();\n        }\n        if (!handlers) {\n          handled = await action.execute();\n        }\n        if (handled) {\n          Host.userMetrics.keyboardShortcutFired(action.id());\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n\n  registerUserShortcut(shortcut: KeyboardShortcut): void {\n    for (const otherShortcut of this.disabledDefaultShortcutsForAction.get(shortcut.action)) {\n      if (otherShortcut.descriptorsMatch(shortcut.descriptors) &&\n          otherShortcut.hasKeybindSet(this.keybindSetSetting.get())) {\n        // this user shortcut is the same as a disabled default shortcut,\n        // so we should just enable the default\n        this.removeShortcut(otherShortcut);\n        return;\n      }\n    }\n    for (const otherShortcut of this.actionToShortcut.get(shortcut.action)) {\n      if (otherShortcut.descriptorsMatch(shortcut.descriptors) &&\n          otherShortcut.hasKeybindSet(this.keybindSetSetting.get())) {\n        // don't allow duplicate shortcuts\n        return;\n      }\n    }\n    this.addShortcutToSetting(shortcut);\n  }\n\n  removeShortcut(shortcut: KeyboardShortcut): void {\n    if (shortcut.type === Type.DefaultShortcut || shortcut.type === Type.KeybindSetShortcut) {\n      this.addShortcutToSetting(shortcut.changeType(Type.DisabledDefault));\n    } else {\n      this.removeShortcutFromSetting(shortcut);\n    }\n  }\n\n  disabledDefaultsForAction(actionId: string): Set<KeyboardShortcut> {\n    return this.disabledDefaultShortcutsForAction.get(actionId);\n  }\n\n  private addShortcutToSetting(shortcut: KeyboardShortcut): void {\n    const userShortcuts = this.userShortcutsSetting.get();\n    userShortcuts.push(shortcut);\n    this.userShortcutsSetting.set(userShortcuts);\n  }\n\n  private removeShortcutFromSetting(shortcut: KeyboardShortcut): void {\n    const userShortcuts = this.userShortcutsSetting.get();\n    const index = userShortcuts.findIndex(shortcut.equals, shortcut);\n    if (index !== -1) {\n      userShortcuts.splice(index, 1);\n      this.userShortcutsSetting.set(userShortcuts);\n    }\n  }\n\n  private registerShortcut(shortcut: KeyboardShortcut): void {\n    this.actionToShortcut.set(shortcut.action, shortcut);\n    this.keyMap.addKeyMapping(shortcut.descriptors.map(descriptor => descriptor.key), shortcut.action);\n  }\n\n  private registerBindings(): void {\n    this.actionToShortcut.clear();\n    this.keyMap.clear();\n    const keybindSet = this.keybindSetSetting.get();\n    this.disabledDefaultShortcutsForAction.clear();\n    this.devToolsDefaultShortcutActions.clear();\n    const forwardedKeys: {\n      keyCode: number,\n      modifiers: number,\n    }[] = [];\n    if (Root.Runtime.experiments.isEnabled('keyboardShortcutEditor')) {\n      const userShortcuts = this.userShortcutsSetting.get();\n      for (const userShortcut of userShortcuts) {\n        const shortcut = KeyboardShortcut.createShortcutFromSettingObject(userShortcut);\n        if (shortcut.type === Type.DisabledDefault) {\n          this.disabledDefaultShortcutsForAction.set(shortcut.action, shortcut);\n        } else {\n          if (ForwardedActions.has(shortcut.action)) {\n            forwardedKeys.push(\n                ...shortcut.descriptors.map(descriptor => KeyboardShortcut.keyCodeAndModifiersFromKey(descriptor.key)));\n          }\n          this.registerShortcut(shortcut);\n        }\n      }\n    }\n    for (const actionExtension of getRegisteredActionExtensions()) {\n      const actionId = actionExtension.id();\n      const bindings = actionExtension.bindings();\n      for (let i = 0; bindings && i < bindings.length; ++i) {\n        const keybindSets = bindings[i].keybindSets;\n        if (!platformMatches(bindings[i].platform) || !keybindSetsMatch(keybindSets)) {\n          continue;\n        }\n        const keys = bindings[i].shortcut.split(/\\s+/);\n        const shortcutDescriptors = keys.map(KeyboardShortcut.makeDescriptorFromBindingShortcut);\n        if (shortcutDescriptors.length > 0) {\n          if (this.isDisabledDefault(shortcutDescriptors, actionId)) {\n            this.devToolsDefaultShortcutActions.add(actionId);\n            continue;\n          }\n\n          if (ForwardedActions.has(actionId)) {\n            forwardedKeys.push(\n                ...shortcutDescriptors.map(shortcut => KeyboardShortcut.keyCodeAndModifiersFromKey(shortcut.key)));\n          }\n          if (!keybindSets) {\n            this.devToolsDefaultShortcutActions.add(actionId);\n            this.registerShortcut(new KeyboardShortcut(shortcutDescriptors, actionId, Type.DefaultShortcut));\n          } else {\n            if (keybindSets.includes(KeybindSet.DEVTOOLS_DEFAULT)) {\n              this.devToolsDefaultShortcutActions.add(actionId);\n            }\n            this.registerShortcut(\n                new KeyboardShortcut(shortcutDescriptors, actionId, Type.KeybindSetShortcut, new Set(keybindSets)));\n          }\n        }\n      }\n    }\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.setWhitelistedShortcuts(JSON.stringify(forwardedKeys));\n\n    function platformMatches(platformsString?: string): boolean {\n      if (!platformsString) {\n        return true;\n      }\n      const platforms = platformsString.split(',');\n      let isMatch = false;\n      const currentPlatform = Host.Platform.platform();\n      for (let i = 0; !isMatch && i < platforms.length; ++i) {\n        isMatch = platforms[i] === currentPlatform;\n      }\n      return isMatch;\n    }\n\n    function keybindSetsMatch(keybindSets?: string[]): boolean {\n      if (!keybindSets) {\n        return true;\n      }\n      return keybindSets.includes(keybindSet);\n    }\n  }\n\n  private isDisabledDefault(\n      shortcutDescriptors: {\n        key: number,\n        name: string,\n      }[],\n      action: string): boolean {\n    const disabledDefaults = this.disabledDefaultShortcutsForAction.get(action);\n    for (const disabledDefault of disabledDefaults) {\n      if (disabledDefault.descriptorsMatch(shortcutDescriptors)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\nexport class ShortcutTreeNode {\n  private readonly keyInternal: number;\n  private actionsInternal: string[];\n  private chordsInternal: Map<number, ShortcutTreeNode>;\n  private readonly depth: number;\n\n  constructor(key: number, depth: number = 0) {\n    this.keyInternal = key;\n    this.actionsInternal = [];\n    this.chordsInternal = new Map();\n    this.depth = depth;\n  }\n\n  addAction(action: string): void {\n    this.actionsInternal.push(action);\n  }\n\n  key(): number {\n    return this.keyInternal;\n  }\n\n  chords(): Map<number, ShortcutTreeNode> {\n    return this.chordsInternal;\n  }\n\n  hasChords(): boolean {\n    return this.chordsInternal.size > 0;\n  }\n\n  addKeyMapping(keys: number[], action: string): void {\n    if (keys.length < this.depth) {\n      return;\n    }\n\n    if (keys.length === this.depth) {\n      this.addAction(action);\n    } else {\n      const key = keys[this.depth];\n      if (!this.chordsInternal.has(key)) {\n        this.chordsInternal.set(key, new ShortcutTreeNode(key, this.depth + 1));\n      }\n      (this.chordsInternal.get(key) as ShortcutTreeNode).addKeyMapping(keys, action);\n    }\n  }\n\n  getNode(key: number): ShortcutTreeNode|null {\n    return this.chordsInternal.get(key) || null;\n  }\n\n  actions(): string[] {\n    return this.actionsInternal;\n  }\n\n  clear(): void {\n    this.actionsInternal = [];\n    this.chordsInternal = new Map();\n  }\n}\n\nexport class ForwardedShortcut {\n  static instance = new ForwardedShortcut();\n}\n\nexport const ForwardedActions = new Set<string>([\n  'main.toggle-dock',\n  'debugger.toggle-breakpoints-active',\n  'debugger.toggle-pause',\n  'commandMenu.show',\n  'console.show',\n]);\nexport const KeyTimeout = 1000;\nexport const DefaultShortcutSetting = 'devToolsDefault';\n"],
  "mappings": "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",
  "names": []
}
