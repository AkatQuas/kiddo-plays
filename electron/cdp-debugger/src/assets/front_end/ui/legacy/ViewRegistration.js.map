{
  "version": 3,
  "sources": ["../../../../../../front_end/ui/legacy/ViewRegistration.ts"],
  "sourcesContent": ["\n// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\n\nimport type {ViewLocationResolver} from './View.js';\nimport {PreRegisteredView} from './ViewManager.js';\n\nimport type {Widget} from './Widget.js';\n\nconst registeredViewExtensions: Array<PreRegisteredView> = [];\n\nexport const enum ViewPersistence {\n  CLOSEABLE = 'closeable',\n  PERMANENT = 'permanent',\n  TRANSIENT = 'transient',\n}\n\nexport const enum ViewLocationValues {\n  PANEL = 'panel',\n  SETTINGS_VIEW = 'settings-view',\n  ELEMENTS_SIDEBAR = 'elements-sidebar',\n  SOURCES_SIDEBAR_BOTTOM = 'sources.sidebar-bottom',\n  NAVIGATOR_VIEW = 'navigator-view',\n  DRAWER_VIEW = 'drawer-view',\n  DRAWER_SIDEBAR = 'drawer-sidebar',\n  NETWORK_SIDEBAR = 'network-sidebar',\n  SOURCES_SIDEBAR_TOP = 'sources.sidebar-top',\n  SOURCES_SIDEBAR_TABS = 'sources.sidebar-tabs',\n}\n\nexport interface ViewRegistration {\n  /**\n   * The name of the experiment a view is associated with. Enabling and disabling the declared\n   * experiment will enable and disable the view respectively.\n   */\n  experiment?: Root.Runtime.ExperimentName;\n  /**\n   * A condition represented as a string the view's availability depends on. Conditions come\n   * from the queryParamsObject defined in Runtime and just as the experiment field, they determine the availability\n   * of the view. A condition can be negated by prepending a \u2018!\u2019 to the value of the condition\n   * property and in that case the behaviour of the view's availability will be inverted.\n   */\n  condition?: Root.Runtime.ConditionName;\n  /**\n   * The command added to the command menu used to show the view. It usually follows the shape Show <title> as it must\n   * not be localized at declaration since it is localized internally when appending the commands to the command menu.\n   * The existing duplication of the declaration of the title is expected to be removed once the migration to the version\n   * 2 of the localization model has been completed (crbug.com/1136655).\n   */\n  commandPrompt: () => Platform.UIString.LocalizedString;\n\n  /**\n   * A UI string used as the title of the view.\n   */\n  title: () => Platform.UIString.LocalizedString;\n\n  /**\n   * Whether the view is permanently visible or can be opened temporarily.\n   */\n  persistence?: ViewPersistence;\n\n  /**\n   * Whether the view is a preview feature (a corresponding icon is shown then).\n   */\n  isPreviewFeature?: boolean;\n  /**\n   * Unique identifier of the view.\n   */\n  id: string;\n  /**\n   * An identifier for the location of the view. The location is resolved by\n   * an extension of type '@UI.ViewLocationResolver'.\n   */\n  location?: ViewLocationValues;\n  /**\n   * Whether the view has a toolbar.\n   */\n  hasToolbar?: boolean;\n  /**\n   * Returns an instance of the class that wraps the view.\n   * The common pattern for implementing this function is loading the module with the wrapping 'Widget'\n   * lazily loaded. As an example:\n   *\n   * ```js\n   * let loadedElementsModule;\n   *\n   * async function loadElementsModule() {\n   *\n   *   if (!loadedElementsModule) {\n   *     loadedElementsModule = await import('./elements.js');\n   *   }\n   *   return loadedElementsModule;\n   * }\n   * UI.ViewManager.registerViewExtension({\n   *   <...>\n   *   async loadView() {\n   *      const Elements = await loadElementsModule();\n   *      return Elements.ElementsPanel.ElementsPanel.instance();\n   *   },\n   *   <...>\n   * });\n   * ```\n   */\n  loadView: () => Promise<Widget>;\n  /**\n   * Used to sort the views that appear in a shared location.\n   */\n  order?: number;\n  /**\n   * The names of the settings the registered view performs as UI for.\n   */\n  settings?: Array<string>;\n  /**\n   * Words used to find the view in the Command Menu.\n   */\n  tags?: Array<() => Platform.UIString.LocalizedString>;\n}\n\nconst viewIdSet = new Set<string>();\nexport function registerViewExtension(registration: ViewRegistration): void {\n  const viewId = registration.id;\n  Platform.DCHECK(() => !viewIdSet.has(viewId), `Duplicate view id '${viewId}'`);\n  viewIdSet.add(viewId);\n  registeredViewExtensions.push(new PreRegisteredView(registration));\n}\n\nexport function getRegisteredViewExtensions(): Array<PreRegisteredView> {\n  return registeredViewExtensions.filter(\n      view => Root.Runtime.Runtime.isDescriptorEnabled({experiment: view.experiment(), condition: view.condition()}));\n}\n\nexport function maybeRemoveViewExtension(viewId: string): boolean {\n  const viewIndex = registeredViewExtensions.findIndex(view => view.viewId() === viewId);\n  if (viewIndex < 0 || !viewIdSet.delete(viewId)) {\n    return false;\n  }\n  registeredViewExtensions.splice(viewIndex, 1);\n  return true;\n}\n\nconst registeredLocationResolvers: Array<LocationResolverRegistration> = [];\n\nconst viewLocationNameSet = new Set<ViewLocationValues>();\n\nexport function registerLocationResolver(registration: LocationResolverRegistration): void {\n  const locationName = registration.name;\n  if (viewLocationNameSet.has(locationName)) {\n    throw new Error(`Duplicate view location name registration '${locationName}'`);\n  }\n  viewLocationNameSet.add(locationName);\n  registeredLocationResolvers.push(registration);\n}\n\nexport function getRegisteredLocationResolvers(): Array<LocationResolverRegistration> {\n  return registeredLocationResolvers;\n}\n\nexport function resetViewRegistration(): void {\n  registeredViewExtensions.length = 0;\n  registeredLocationResolvers.length = 0;\n  viewLocationNameSet.clear();\n}\n\n// TODO(crbug.com/1181019)\nexport const ViewLocationCategoryValues = {\n  ELEMENTS: 'Elements',\n  DRAWER: 'Drawer',\n  DRAWER_SIDEBAR: 'Drawer sidebar',\n  PANEL: 'Panel',\n  NETWORK: 'Network',\n  SETTINGS: 'Settings',\n  SOURCES: 'Sources',\n};\n\ntype ViewLocationCategory = typeof ViewLocationCategoryValues[keyof typeof ViewLocationCategoryValues];\n\nexport interface LocationResolverRegistration {\n  name: ViewLocationValues;\n  category: ViewLocationCategory;\n  loadResolver: () => Promise<ViewLocationResolver>;\n}\n"],
  "mappings": "AAIA;AACA;AAGA;AAIA,MAAM,2BAAqD;AAEpD,WAAW,kBAAX,kBAAW,qBAAX;AACL,kCAAY;AACZ,kCAAY;AACZ,kCAAY;AAHI;AAAA;AAMX,WAAW,qBAAX,kBAAW,wBAAX;AACL,iCAAQ;AACR,yCAAgB;AAChB,4CAAmB;AACnB,kDAAyB;AACzB,0CAAiB;AACjB,uCAAc;AACd,0CAAiB;AACjB,2CAAkB;AAClB,+CAAsB;AACtB,gDAAuB;AAVP;AAAA;AAqGlB,MAAM,YAAY,oBAAI;AACf,sCAA+B,cAAsC;AAC1E,QAAM,SAAS,aAAa;AAC5B,WAAS,OAAO,MAAM,CAAC,UAAU,IAAI,SAAS,sBAAsB;AACpE,YAAU,IAAI;AACd,2BAAyB,KAAK,IAAI,kBAAkB;AAAA;AAG/C,8CAAiE;AACtE,SAAO,yBAAyB,OAC5B,UAAQ,KAAK,QAAQ,QAAQ,oBAAoB,EAAC,YAAY,KAAK,cAAc,WAAW,KAAK;AAAA;AAGhG,yCAAkC,QAAyB;AAChE,QAAM,YAAY,yBAAyB,UAAU,UAAQ,KAAK,aAAa;AAC/E,MAAI,YAAY,KAAK,CAAC,UAAU,OAAO,SAAS;AAC9C,WAAO;AAAA;AAET,2BAAyB,OAAO,WAAW;AAC3C,SAAO;AAAA;AAGT,MAAM,8BAAmE;AAEzE,MAAM,sBAAsB,oBAAI;AAEzB,yCAAkC,cAAkD;AACzF,QAAM,eAAe,aAAa;AAClC,MAAI,oBAAoB,IAAI,eAAe;AACzC,UAAM,IAAI,MAAM,8CAA8C;AAAA;AAEhE,sBAAoB,IAAI;AACxB,8BAA4B,KAAK;AAAA;AAG5B,iDAA+E;AACpF,SAAO;AAAA;AAGF,wCAAuC;AAC5C,2BAAyB,SAAS;AAClC,8BAA4B,SAAS;AACrC,sBAAoB;AAAA;AAIf,aAAM,6BAA6B;AAAA,EACxC,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,gBAAgB;AAAA,EAChB,OAAO;AAAA,EACP,SAAS;AAAA,EACT,UAAU;AAAA,EACV,SAAS;AAAA;",
  "names": []
}
