{
  "version": 3,
  "sources": ["../../../../../../front_end/services/puppeteer/PuppeteerConnection.ts"],
  "sourcesContent": ["// Copyright (c) 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as puppeteer from '../../third_party/puppeteer/puppeteer.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\n\nexport class Transport implements puppeteer.ConnectionTransport {\n  #connection: SDK.Connections.ParallelConnectionInterface;\n  #knownIds = new Set<number>();\n\n  constructor(connection: SDK.Connections.ParallelConnectionInterface) {\n    this.#connection = connection;\n  }\n\n  send(message: string): void {\n    const data = JSON.parse(message);\n    this.#knownIds.add(data.id);\n    this.#connection.sendRawMessage(JSON.stringify(data));\n  }\n\n  close(): void {\n    void this.#connection.disconnect();\n  }\n\n  set onmessage(cb: (message: string) => void) {\n    this.#connection.setOnMessage((message: Object) => {\n      if (!cb) {\n        return;\n      }\n      const data = (message) as {id: number, method: string, params: unknown, sessionId?: string};\n      if (data.id && !this.#knownIds.has(data.id)) {\n        return;\n      }\n      this.#knownIds.delete(data.id);\n      if (!data.sessionId) {\n        return;\n      }\n      return cb(JSON.stringify({\n        ...data,\n        // Puppeteer is expecting to use the default session, but we give it a non-default session in #connection.\n        // Replace that sessionId with undefined so Puppeteer treats it as default.\n        sessionId: data.sessionId === this.#connection.getSessionId() ? undefined : data.sessionId,\n      }));\n    });\n  }\n\n  set onclose(cb: () => void) {\n    const prev = this.#connection.getOnDisconnect();\n    this.#connection.setOnDisconnect(reason => {\n      if (prev) {\n        prev(reason);\n      }\n      if (cb) {\n        cb();\n      }\n    });\n  }\n}\n\nexport class PuppeteerConnection extends puppeteer.Connection {\n  // Overriding Puppeteer's API here.\n  // eslint-disable-next-line rulesdir/no_underscored_properties\n  async _onMessage(message: string): Promise<void> {\n    const msgObj = JSON.parse(message) as {id: number, method: string, params: unknown, sessionId?: string};\n    if (msgObj.sessionId && !this._sessions.has(msgObj.sessionId)) {\n      return;\n    }\n    void super._onMessage(message);\n  }\n}\n\nexport async function getPuppeteerConnection(\n    rawConnection: SDK.Connections.ParallelConnectionInterface,\n    mainFrameId: string,\n    mainTargetId: string,\n    ): Promise<{page: puppeteer.Page | null, browser: puppeteer.Browser}> {\n  const transport = new Transport(rawConnection);\n\n  // url is an empty string in this case parallel to:\n  // https://github.com/puppeteer/puppeteer/blob/f63a123ecef86693e6457b07437a96f108f3e3c5/src/common/BrowserConnector.ts#L72\n  const connection = new PuppeteerConnection('', transport);\n\n  const targetFilterCallback = (targetInfo: Protocol.Target.TargetInfo): boolean => {\n    if (targetInfo.type !== 'page' && targetInfo.type !== 'iframe') {\n      return false;\n    }\n    // TODO only connect to iframes that are related to the main target. This requires refactoring in Puppeteer: https://github.com/puppeteer/puppeteer/issues/3667.\n    return targetInfo.targetId === mainTargetId || targetInfo.openerId === mainTargetId || targetInfo.type === 'iframe';\n  };\n\n  const browser = await puppeteer.Browser.create(\n      connection,\n      [] /* contextIds */,\n      false /* ignoreHTTPSErrors */,\n      undefined /* defaultViewport */,\n      undefined /* process */,\n      undefined /* closeCallback */,\n      targetFilterCallback,\n  );\n\n  const pages = await browser.pages();\n  const page = pages.find(p => p.mainFrame()._id === mainFrameId) || null;\n\n  return {page, browser};\n}\n"],
  "mappings": "AAIA;AAIO,uBAAyD;AAAA;AAAA,cAElD,oBAAI;AAAA,EAEhB,YAAY,YAAyD;AACnE,uBAAmB;AAAA;AAAA,EAGrB,KAAK,SAAuB;AAC1B,UAAM,OAAO,KAAK,MAAM;AACxB,mBAAe,IAAI,KAAK;AACxB,qBAAiB,eAAe,KAAK,UAAU;AAAA;AAAA,EAGjD,QAAc;AACZ,SAAK,iBAAiB;AAAA;AAAA,MAGpB,UAAU,IAA+B;AAC3C,qBAAiB,aAAa,CAAC,YAAoB;AACjD,UAAI,CAAC,IAAI;AACP;AAAA;AAEF,YAAM,OAAQ;AACd,UAAI,KAAK,MAAM,CAAC,eAAe,IAAI,KAAK,KAAK;AAC3C;AAAA;AAEF,qBAAe,OAAO,KAAK;AAC3B,UAAI,CAAC,KAAK,WAAW;AACnB;AAAA;AAEF,aAAO,GAAG,KAAK,UAAU;AAAA,WACpB;AAAA,QAGH,WAAW,KAAK,cAAc,iBAAiB,iBAAiB,SAAY,KAAK;AAAA;AAAA;AAAA;AAAA,MAKnF,QAAQ,IAAgB;AAC1B,UAAM,OAAO,iBAAiB;AAC9B,qBAAiB,gBAAgB,YAAU;AACzC,UAAI,MAAM;AACR,aAAK;AAAA;AAEP,UAAI,IAAI;AACN;AAAA;AAAA;AAAA;AAAA;AAMD,yCAAkC,UAAU,WAAW;AAAA,QAGtD,WAAW,SAAgC;AAC/C,UAAM,SAAS,KAAK,MAAM;AAC1B,QAAI,OAAO,aAAa,CAAC,KAAK,UAAU,IAAI,OAAO,YAAY;AAC7D;AAAA;AAEF,SAAK,MAAM,WAAW;AAAA;AAAA;AAI1B,6CACI,eACA,aACA,cACsE;AACxE,QAAM,YAAY,IAAI,UAAU;AAIhC,QAAM,aAAa,IAAI,oBAAoB,IAAI;AAE/C,QAAM,uBAAuB,CAAC,eAAoD;AAChF,QAAI,WAAW,SAAS,UAAU,WAAW,SAAS,UAAU;AAC9D,aAAO;AAAA;AAGT,WAAO,WAAW,aAAa,gBAAgB,WAAW,aAAa,gBAAgB,WAAW,SAAS;AAAA;AAG7G,QAAM,UAAU,MAAM,UAAU,QAAQ,OACpC,YACA,IACA,OACA,QACA,QACA,QACA;AAGJ,QAAM,QAAQ,MAAM,QAAQ;AAC5B,QAAM,OAAO,MAAM,KAAK,OAAK,EAAE,YAAY,QAAQ,gBAAgB;AAEnE,SAAO,EAAC,MAAM;AAAA;",
  "names": []
}
