{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/emulation/DeviceModeWrapper.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as EmulationModel from '../../models/emulation/emulation.js';\n\nimport {DeviceModeView} from './DeviceModeView.js';\nimport type {InspectedPagePlaceholder} from './InspectedPagePlaceholder.js';\n\nlet deviceModeWrapperInstance: DeviceModeWrapper;\n\nexport class DeviceModeWrapper extends UI.Widget.VBox {\n  private readonly inspectedPagePlaceholder: InspectedPagePlaceholder;\n  private deviceModeView: DeviceModeView|null;\n  private readonly toggleDeviceModeAction: UI.ActionRegistration.Action|null;\n  private showDeviceModeSetting: Common.Settings.Setting<boolean>;\n\n  private constructor(inspectedPagePlaceholder: InspectedPagePlaceholder) {\n    super();\n    this.inspectedPagePlaceholder = inspectedPagePlaceholder;\n    this.deviceModeView = null;\n    this.toggleDeviceModeAction = UI.ActionRegistry.ActionRegistry.instance().action('emulation.toggle-device-mode');\n    const model = EmulationModel.DeviceModeModel.DeviceModeModel.instance();\n    this.showDeviceModeSetting = model.enabledSetting();\n    this.showDeviceModeSetting.setRequiresUserAction(Boolean(Root.Runtime.Runtime.queryParam('hasOtherClients')));\n    this.showDeviceModeSetting.addChangeListener(this.update.bind(this, false));\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.OverlayModel.OverlayModel, SDK.OverlayModel.Events.ScreenshotRequested, this.screenshotRequestedFromOverlay,\n        this);\n    this.update(true);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n    inspectedPagePlaceholder: InspectedPagePlaceholder|null,\n  } = {forceNew: null, inspectedPagePlaceholder: null}): DeviceModeWrapper {\n    const {forceNew, inspectedPagePlaceholder} = opts;\n    if (!deviceModeWrapperInstance || forceNew) {\n      if (!inspectedPagePlaceholder) {\n        throw new Error(\n            `Unable to create DeviceModeWrapper: inspectedPagePlaceholder must be provided: ${new Error().stack}`);\n      }\n\n      deviceModeWrapperInstance = new DeviceModeWrapper(inspectedPagePlaceholder);\n    }\n\n    return deviceModeWrapperInstance;\n  }\n\n  toggleDeviceMode(): void {\n    this.showDeviceModeSetting.set(!this.showDeviceModeSetting.get());\n  }\n\n  isDeviceModeOn(): boolean {\n    return this.showDeviceModeSetting.get();\n  }\n\n  captureScreenshot(fullSize?: boolean, clip?: Protocol.Page.Viewport): boolean {\n    if (!this.deviceModeView) {\n      this.deviceModeView = new DeviceModeView();\n    }\n    this.deviceModeView.setNonEmulatedAvailableSize(this.inspectedPagePlaceholder.element);\n    if (fullSize) {\n      void this.deviceModeView.captureFullSizeScreenshot();\n    } else if (clip) {\n      void this.deviceModeView.captureAreaScreenshot(clip);\n    } else {\n      void this.deviceModeView.captureScreenshot();\n    }\n    return true;\n  }\n\n  private screenshotRequestedFromOverlay(event: Common.EventTarget.EventTargetEvent<Protocol.Page.Viewport>): void {\n    const clip = event.data;\n    this.captureScreenshot(false, clip);\n  }\n\n  private update(force: boolean): void {\n    if (this.toggleDeviceModeAction) {\n      this.toggleDeviceModeAction.setToggled(this.showDeviceModeSetting.get());\n    }\n    if (!force) {\n      const showing = this.deviceModeView && this.deviceModeView.isShowing();\n      if (this.showDeviceModeSetting.get() === showing) {\n        return;\n      }\n    }\n\n    if (this.showDeviceModeSetting.get()) {\n      if (!this.deviceModeView) {\n        this.deviceModeView = new DeviceModeView();\n      }\n      this.deviceModeView.show(this.element);\n      this.inspectedPagePlaceholder.clearMinimumSize();\n      this.inspectedPagePlaceholder.show(this.deviceModeView.element);\n    } else {\n      if (this.deviceModeView) {\n        this.deviceModeView.exitHingeMode();\n        this.deviceModeView.detach();\n      }\n      this.inspectedPagePlaceholder.restoreMinimumSize();\n      this.inspectedPagePlaceholder.show(this.element);\n    }\n  }\n}\n\nlet actionDelegateInstance: ActionDelegate;\n\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  handleAction(context: UI.Context.Context, actionId: string): boolean {\n    if (DeviceModeWrapper.instance()) {\n      switch (actionId) {\n        case 'emulation.capture-screenshot':\n          return DeviceModeWrapper.instance().captureScreenshot();\n\n        case 'emulation.capture-node-screenshot': {\n          const node = UI.Context.Context.instance().flavor(SDK.DOMModel.DOMNode);\n          if (!node) {\n            return true;\n          }\n          async function captureClip(): Promise<void> {\n            if (!node) {\n              return;\n            }\n\n            const object = await node.resolveToObject();\n            if (!object) {\n              return;\n            }\n            const result = await object.callFunction(function() {\n              const rect = (this as Element).getBoundingClientRect();\n              const docRect = (this as Element).ownerDocument.documentElement.getBoundingClientRect();\n              return JSON.stringify({\n                x: rect.left - docRect.left,\n                y: rect.top - docRect.top,\n                width: rect.width,\n                height: rect.height,\n                scale: 1,\n              });\n            });\n            if (!result.object) {\n              throw new Error('Clipping error: could not get object data.');\n            }\n            const clip = (JSON.parse((result.object.value as string)));\n            const response = await node.domModel().target().pageAgent().invoke_getLayoutMetrics();\n            const error = response.getError();\n            // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            const page_zoom = !error && response.visualViewport.zoom || 1;\n            clip.x *= page_zoom;\n            clip.y *= page_zoom;\n            clip.width *= page_zoom;\n            clip.height *= page_zoom;\n            DeviceModeWrapper.instance().captureScreenshot(false, clip);\n          }\n          void captureClip();\n          return true;\n        }\n\n        case 'emulation.capture-full-height-screenshot':\n          return DeviceModeWrapper.instance().captureScreenshot(true);\n\n        case 'emulation.toggle-device-mode':\n          DeviceModeWrapper.instance().toggleDeviceMode();\n          return true;\n      }\n    }\n    return false;\n  }\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ActionDelegate {\n    const {forceNew} = opts;\n    if (!actionDelegateInstance || forceNew) {\n      actionDelegateInstance = new ActionDelegate();\n    }\n\n    return actionDelegateInstance;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
