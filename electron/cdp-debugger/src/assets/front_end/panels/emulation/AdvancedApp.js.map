{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/emulation/AdvancedApp.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as ThemeSupport from '../../ui/legacy/theme_support/theme_support.js';\n\nimport {DeviceModeWrapper} from './DeviceModeWrapper.js';\nimport type {Bounds} from './InspectedPagePlaceholder.js';\nimport {Events, InspectedPagePlaceholder} from './InspectedPagePlaceholder.js';\n\nlet appInstance: AdvancedApp;\n\nexport class AdvancedApp implements Common.App.App {\n  private rootSplitWidget!: UI.SplitWidget.SplitWidget;\n  private deviceModeView!: DeviceModeWrapper;\n  private inspectedPagePlaceholder!: InspectedPagePlaceholder;\n  private toolboxWindow?: Window|null;\n  private toolboxRootView?: UI.RootView.RootView;\n  private changingDockSide?: boolean;\n\n  constructor() {\n    UI.DockController.DockController.instance().addEventListener(\n        UI.DockController.Events.BeforeDockSideChanged, this.openToolboxWindow, this);\n  }\n\n  /**\n   * Note: it's used by toolbox.ts without real type checks.\n   */\n  static instance(): AdvancedApp {\n    if (!appInstance) {\n      appInstance = new AdvancedApp();\n    }\n    return appInstance;\n  }\n\n  presentUI(document: Document): void {\n    const rootView = new UI.RootView.RootView();\n\n    this.rootSplitWidget = new UI.SplitWidget.SplitWidget(false, true, 'InspectorView.splitViewState', 555, 300, true);\n    this.rootSplitWidget.show(rootView.element);\n    this.rootSplitWidget.setSidebarWidget(UI.InspectorView.InspectorView.instance());\n    this.rootSplitWidget.setDefaultFocusedChild(UI.InspectorView.InspectorView.instance());\n    UI.InspectorView.InspectorView.instance().setOwnerSplit(this.rootSplitWidget);\n\n    this.inspectedPagePlaceholder = InspectedPagePlaceholder.instance();\n    this.inspectedPagePlaceholder.addEventListener(Events.Update, this.onSetInspectedPageBounds.bind(this), this);\n    this.deviceModeView =\n        DeviceModeWrapper.instance({inspectedPagePlaceholder: this.inspectedPagePlaceholder, forceNew: false});\n\n    UI.DockController.DockController.instance().addEventListener(\n        UI.DockController.Events.BeforeDockSideChanged, this.onBeforeDockSideChange, this);\n    UI.DockController.DockController.instance().addEventListener(\n        UI.DockController.Events.DockSideChanged, this.onDockSideChange, this);\n    UI.DockController.DockController.instance().addEventListener(\n        UI.DockController.Events.AfterDockSideChanged, this.onAfterDockSideChange, this);\n    this.onDockSideChange();\n\n    console.timeStamp('AdvancedApp.attachToBody');\n    rootView.attachToDocument(document);\n    rootView.focus();\n    this.inspectedPagePlaceholder.update();\n  }\n\n  private openToolboxWindow(event: Common.EventTarget.EventTargetEvent<UI.DockController.ChangeEvent>): void {\n    if (event.data.to !== UI.DockController.DockState.UNDOCKED) {\n      return;\n    }\n\n    if (this.toolboxWindow) {\n      return;\n    }\n\n    const url = window.location.href.replace('devtools_app.html', 'device_mode_emulation_frame.html');\n    this.toolboxWindow = window.open(url, undefined);\n  }\n\n  deviceModeEmulationFrameLoaded(toolboxDocument: Document): void {\n    ThemeSupport.ThemeSupport.instance().applyTheme(toolboxDocument);\n    ThemeSupport.ThemeSupport.instance().addEventListener(ThemeSupport.ThemeChangeEvent.eventName, () => {\n      ThemeSupport.ThemeSupport.instance().applyTheme(toolboxDocument);\n    });\n    UI.UIUtils.initializeUIUtils(toolboxDocument);\n    UI.UIUtils.installComponentRootStyles((toolboxDocument.body as Element));\n    UI.ContextMenu.ContextMenu.installHandler(toolboxDocument);\n\n    this.toolboxRootView = new UI.RootView.RootView();\n    this.toolboxRootView.attachToDocument(toolboxDocument);\n\n    this.updateDeviceModeView();\n  }\n\n  private updateDeviceModeView(): void {\n    if (this.isDocked()) {\n      this.rootSplitWidget.setMainWidget(this.deviceModeView);\n    } else if (this.toolboxRootView) {\n      this.deviceModeView.show(this.toolboxRootView.element);\n    }\n  }\n\n  private onBeforeDockSideChange(event: Common.EventTarget.EventTargetEvent<UI.DockController.ChangeEvent>): void {\n    if (event.data.to === UI.DockController.DockState.UNDOCKED && this.toolboxRootView) {\n      // Hide inspectorView and force layout to mimic the undocked state.\n      this.rootSplitWidget.hideSidebar();\n      this.inspectedPagePlaceholder.update();\n    }\n\n    this.changingDockSide = true;\n  }\n\n  private onDockSideChange(event?: Common.EventTarget.EventTargetEvent<UI.DockController.ChangeEvent>): void {\n    this.updateDeviceModeView();\n\n    const toDockSide = event ? event.data.to : UI.DockController.DockController.instance().dockSide();\n    if (toDockSide === undefined) {\n      throw new Error('Got onDockSideChange event with unexpected undefined for dockSide()');\n    }\n    if (toDockSide === UI.DockController.DockState.UNDOCKED) {\n      this.updateForUndocked();\n    } else if (this.toolboxRootView && event && event.data.from === UI.DockController.DockState.UNDOCKED) {\n      // Don't update yet for smooth transition.\n      this.rootSplitWidget.hideSidebar();\n    } else {\n      this.updateForDocked(toDockSide);\n    }\n  }\n\n  private onAfterDockSideChange(event: Common.EventTarget.EventTargetEvent<UI.DockController.ChangeEvent>): void {\n    // We may get here on the first dock side change while loading without BeforeDockSideChange.\n    if (!this.changingDockSide) {\n      return;\n    }\n    if (event.data.from && event.data.from === UI.DockController.DockState.UNDOCKED) {\n      this.updateForDocked(event.data.to);\n    }\n    this.changingDockSide = false;\n    this.inspectedPagePlaceholder.update();\n  }\n\n  private updateForDocked(dockSide: UI.DockController.DockState): void {\n    const resizerElement = (this.rootSplitWidget.resizerElement() as HTMLElement);\n    resizerElement.style.transform = dockSide === UI.DockController.DockState.RIGHT ?\n        'translateX(2px)' :\n        dockSide === UI.DockController.DockState.LEFT ? 'translateX(-2px)' : '';\n    this.rootSplitWidget.setVertical(\n        dockSide === UI.DockController.DockState.RIGHT || dockSide === UI.DockController.DockState.LEFT);\n    this.rootSplitWidget.setSecondIsSidebar(\n        dockSide === UI.DockController.DockState.RIGHT || dockSide === UI.DockController.DockState.BOTTOM);\n    this.rootSplitWidget.toggleResizer(this.rootSplitWidget.resizerElement(), true);\n    this.rootSplitWidget.toggleResizer(\n        UI.InspectorView.InspectorView.instance().topResizerElement(), dockSide === UI.DockController.DockState.BOTTOM);\n    this.rootSplitWidget.showBoth();\n  }\n\n  private updateForUndocked(): void {\n    this.rootSplitWidget.toggleResizer(this.rootSplitWidget.resizerElement(), false);\n    this.rootSplitWidget.toggleResizer(UI.InspectorView.InspectorView.instance().topResizerElement(), false);\n    this.rootSplitWidget.hideMain();\n  }\n\n  private isDocked(): boolean {\n    return UI.DockController.DockController.instance().dockSide() !== UI.DockController.DockState.UNDOCKED;\n  }\n\n  private onSetInspectedPageBounds(event: Common.EventTarget.EventTargetEvent<Bounds>): void {\n    if (this.changingDockSide) {\n      return;\n    }\n    const window = this.inspectedPagePlaceholder.element.window();\n    if (!window.innerWidth || !window.innerHeight) {\n      return;\n    }\n    if (!this.inspectedPagePlaceholder.isShowing()) {\n      return;\n    }\n    const bounds = event.data;\n    console.timeStamp('AdvancedApp.setInspectedPageBounds');\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.setInspectedPageBounds(bounds);\n  }\n}\n\n// Export required for usage in toolbox.ts\n// @ts-ignore Exported for Tests.js\nglobalThis.Emulation = globalThis.Emulation || {};\n// @ts-ignore Exported for Tests.js\nglobalThis.Emulation.AdvancedApp = AdvancedApp;\n\nlet advancedAppProviderInstance: AdvancedAppProvider;\n\nexport class AdvancedAppProvider implements Common.AppProvider.AppProvider {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): AdvancedAppProvider {\n    const {forceNew} = opts;\n    if (!advancedAppProviderInstance || forceNew) {\n      advancedAppProviderInstance = new AdvancedAppProvider();\n    }\n\n    return advancedAppProviderInstance;\n  }\n\n  createApp(): Common.App.App {\n    return AdvancedApp.instance();\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
