{
  "version": 3,
  "sources": ["../../../../../../../front_end/panels/emulation/components/DeviceSizeInputElement.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../../core/platform/platform.js';\nimport * as EmulationModel from '../../../models/emulation/emulation.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\nimport * as UILegacy from '../../../ui/legacy/legacy.js';\n\nclass SizeChangedEvent extends Event {\n  static readonly eventName = 'sizechanged';\n  constructor(public size: number) {\n    super(SizeChangedEvent.eventName);\n  }\n}\n\nfunction getInputValue(event: Event): number {\n  return Number((event.target as HTMLInputElement).value);\n}\n\nexport class SizeInputElement extends HTMLElement {\n  #root = this.attachShadow({mode: 'open'});\n  #disabled = false;\n  #size = '0';\n  #placeholder = '';\n  #title: Platform.UIString.LocalizedString;\n\n  static readonly litTagName = LitHtml.literal`device-mode-emulation-size-input`;\n\n  constructor(title: Platform.UIString.LocalizedString) {\n    super();\n    this.#title = title;\n  }\n\n  connectedCallback(): void {\n    this.render();\n  }\n\n  set disabled(disabled: boolean) {\n    this.#disabled = disabled;\n    this.render();\n  }\n\n  set size(size: string) {\n    this.#size = size;\n    this.render();\n  }\n\n  set placeholder(placeholder: string) {\n    this.#placeholder = placeholder;\n    this.render();\n  }\n\n  render(): void {\n    LitHtml.render(\n        // Since the emulation code runs in a different frame, we can't\n        // use constructed stylesheets (they are disallowed cross-frame).\n        // For now, use an inline style tag and later we can refactor this\n        // to use proper constructed stylesheets, when the code runs\n        // in the correct frame context.\n        // eslint-disable-next-line rulesdir/ban_style_tags_in_lit_html\n        LitHtml.html`\n      <style>\n        input {\n          /*\n           * 4 characters for the maximum size of the value,\n           * 2 characters for the width of the step-buttons,\n           * 2 pixels padding between the characters and the\n           * step-buttons.\n           */\n          width: calc(4ch + 2ch + 2px);\n          max-height: 18px;\n          margin: 0 2px;\n          text-align: center;\n          font-size: inherit;\n          font-family: inherit;\n        }\n\n        input:disabled {\n          user-select: none;\n        }\n\n        input:focus::-webkit-input-placeholder {\n          color: transparent;\n        }\n      </style>\n      <input type=\"number\"\n             max=${EmulationModel.DeviceModeModel.MaxDeviceSize}\n             min=${EmulationModel.DeviceModeModel.MinDeviceSize}\n             maxlength=\"4\"\n             title=${this.#title}\n             placeholder=${this.#placeholder}\n             ?disabled=${this.#disabled}\n             .value=${this.#size}\n             @change=${this.#fireSizeChange}\n             @keydown=${this.#handleModifierKeys} />\n    `,\n        this.#root, {host: this});\n  }\n\n  #fireSizeChange(event: Event): void {\n    this.dispatchEvent(new SizeChangedEvent(getInputValue(event)));\n  }\n\n  #handleModifierKeys(event: Event): void {\n    let modifiedValue = UILegacy.UIUtils.modifiedFloatNumber(getInputValue(event), event);\n    if (modifiedValue === null) {\n      return;\n    }\n\n    modifiedValue = Math.min(modifiedValue, EmulationModel.DeviceModeModel.MaxDeviceSize);\n    modifiedValue = Math.max(modifiedValue, EmulationModel.DeviceModeModel.MinDeviceSize);\n\n    event.preventDefault();\n    (event.target as HTMLInputElement).value = String(modifiedValue);\n    this.dispatchEvent(new SizeChangedEvent(modifiedValue));\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('device-mode-emulation-size-input', SizeInputElement);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'device-mode-emulation-size-input': SizeInputElement;\n  }\n  interface HTMLElementEventMap {\n    'sizechanged': SizeChangedEvent;\n  }\n}\n"],
  "mappings": "AAKA;AACA;AACA;AACA;AAEA,+BAA+B,MAAM;AAAA,EAEnC,YAAmB,MAAc;AAC/B,UAAM,iBAAiB;AADN;AAAA;AAAA,SADH,YAAY;AAAA;AAM9B,uBAAuB,OAAsB;AAC3C,SAAO,OAAQ,MAAM,OAA4B;AAAA;AAG5C,sCAA+B,YAAY;AAAA,UACxC,KAAK,aAAa,EAAC,MAAM;AAAA,cACrB;AAAA,UACJ;AAAA,iBACO;AAAA;AAAA,SAGC,aAAa,QAAQ;AAAA,EAErC,YAAY,OAA0C;AACpD;AACA,kBAAc;AAAA;AAAA,EAGhB,oBAA0B;AACxB,SAAK;AAAA;AAAA,MAGH,SAAS,UAAmB;AAC9B,qBAAiB;AACjB,SAAK;AAAA;AAAA,MAGH,KAAK,MAAc;AACrB,iBAAa;AACb,SAAK;AAAA;AAAA,MAGH,YAAY,aAAqB;AACnC,wBAAoB;AACpB,SAAK;AAAA;AAAA,EAGP,SAAe;AACb,YAAQ,OAOJ,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBA0BG,eAAe,gBAAgB;AAAA,mBAC/B,eAAe,gBAAgB;AAAA;AAAA,qBAE7B;AAAA,2BACM;AAAA,yBACF;AAAA,sBACH;AAAA,uBACC;AAAA,wBACC;AAAA,OAEhB,YAAY,EAAC,MAAM;AAAA;AAAA,kBAGT,OAAoB;AAClC,SAAK,cAAc,IAAI,iBAAiB,cAAc;AAAA;AAAA,sBAGpC,OAAoB;AACtC,QAAI,gBAAgB,SAAS,QAAQ,oBAAoB,cAAc,QAAQ;AAC/E,QAAI,kBAAkB,MAAM;AAC1B;AAAA;AAGF,oBAAgB,KAAK,IAAI,eAAe,eAAe,gBAAgB;AACvE,oBAAgB,KAAK,IAAI,eAAe,eAAe,gBAAgB;AAEvE,UAAM;AACN,IAAC,MAAM,OAA4B,QAAQ,OAAO;AAClD,SAAK,cAAc,IAAI,iBAAiB;AAAA;AAAA;AAI5C,iBAAiB,eAAe,gBAAgB,oCAAoC;",
  "names": []
}
