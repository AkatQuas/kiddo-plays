{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/emulation/DeviceModeToolbar.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as EmulationModel from '../../models/emulation/emulation.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as MobileThrottling from '../mobile_throttling/mobile_throttling.js';\nimport * as EmulationComponents from './components/components.js';\n\nimport deviceModeToolbarStyles from './deviceModeToolbar.css.legacy.js';\n\nconst UIStrings = {\n  /**\n  * @description Title of the device dimensions selection iteam in the Device Mode Toolbar.\n  * webpage in pixels.\n  */\n  dimensions: 'Dimensions',\n  /**\n  * @description Title of the width input textbox in the Device Mode Toolbar, for the width of the\n  * webpage in pixels.\n  */\n  width: 'Width',\n  /**\n  * @description Title of the height input textbox in the Device Mode Toolbar, for the height of the\n  * webpage in pixels. 'leave empty for full' is an instruction to the user - the webpage will be\n  * full-height if this textbox is left empty.\n  */\n  heightLeaveEmptyForFull: 'Height (leave empty for full)',\n  /**\n  * @description Tooltip text for a drop-down menu where the user can select the zoom percentage of\n  * the webpage preview.\n  */\n  zoom: 'Zoom',\n  /**\n  * @description Tooltip tip for a drop-down menu where the user can select the device pixel ratio\n  * (the ratio between the physical pixels on a screen and CSS logical pixels) of the webpage\n  * preview.\n  */\n  devicePixelRatio: 'Device pixel ratio',\n  /**\n  * @description Tooltip tip for a drop-down menu where the user can select the device type e.g.\n  * Mobile, Desktop.\n  */\n  deviceType: 'Device type',\n  /**\n  * @description Tooltip text for a button to disable Experimental Web Platform Features when they are enabled.\n  */\n  experimentalWebPlatformFeature: '\"`Experimental Web Platform Feature`\" flag is enabled. Click to disable it.',\n  /**\n  * @description Tooltip text for a button to enable Experimental Web Platform Features when they are disabled.\n  */\n  experimentalWebPlatformFeatureFlag: '\"`Experimental Web Platform Feature`\" flag is disabled. Click to enable it.',\n  /**\n  * @description Tooltip text for a 'three dots' style menu button which shows an expanded set of options.\n  */\n  moreOptions: 'More options',\n  /**\n  * @description A context menu item in the Device Mode Toolbar. This is a command to resize the\n  * webpage preview to fit the current window. The placholder is the percentage of full-size that\n  * will be displayed after fitting.\n  * @example {30.0} PH1\n  */\n  fitToWindowF: 'Fit to window ({PH1}%)',\n  /**\n  * @description A checkbox setting that appears in the context menu for the zoom level, in the\n  * Device Mode Toolbar.\n  */\n  autoadjustZoom: 'Auto-adjust zoom',\n  /**\n  * @description A menu item in the drop-down box that allows the user to select the device pixel\n  * ratio. Labels the default value which varies between device types, represented by the\n  * placeholder, which is a number. In the Device Mode Toolbar.\n  * @example {4.3} PH1\n  */\n  defaultF: 'Default: {PH1}',\n  /**\n  * @description Command to hide the frame (like a picture frame) around the mobile device screen.\n  */\n  hideDeviceFrame: 'Hide device frame',\n  /**\n  * @description Command to show the frame (like a picture frame) around the mobile device screen.\n  */\n  showDeviceFrame: 'Show device frame',\n  /**\n  * @description Command to hide a display in the Device Mode Toolbar that shows the different media\n  * queries for the device, above the device screen.\n  * https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries\n  */\n  hideMediaQueries: 'Hide media queries',\n  /**\n  * @description Command to show a display in the Device Mode Toolbar that shows the different media\n  * queries for the device, above the device screen.\n  * https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries\n  */\n  showMediaQueries: 'Show media queries',\n  /**\n  * @description Command in the Device Mode Toolbar to hide a virtual ruler (for measuring),\n  * displayed above and next to the device screen.\n  */\n  hideRulers: 'Hide rulers',\n  /**\n  * @description Command in the Device Mode Toolbar to show a virtual ruler (for measuring),\n  * displayed above and next to the device screen.\n  */\n  showRulers: 'Show rulers',\n  /**\n  * @description Command in the Device Mode Toolbar to remove the drop-down menu from the toolbar\n  * that lets the user override the device pixel ratio of the emulated device.\n  */\n  removeDevicePixelRatio: 'Remove device pixel ratio',\n  /**\n  * @description Command in the Device Mode Toolbar to add the drop-down menu to the toolbar\n  * that lets the user override the device pixel ratio of the emulated device.\n  */\n  addDevicePixelRatio: 'Add device pixel ratio',\n  /**\n  * @description Command in the Device Mode Toolbar to add the drop-down menu to the toolbar\n  * that lets the user set the device type (e.g. Desktop or Mobile).\n  */\n  removeDeviceType: 'Remove device type',\n  /**\n  * @description Command in the Device Mode Toolbar to add the drop-down menu to the toolbar\n  * that lets the user add the device type (e.g. Desktop or Mobile).\n  */\n  addDeviceType: 'Add device type',\n  /**\n  * @description A context menu item in the Device Mode Toolbar that resets all settings back to\n  * their default values.\n  */\n  resetToDefaults: 'Reset to defaults',\n  /**\n  * @description A menu command in the Device Mode Toolbar that closes DevTools.\n  */\n  closeDevtools: 'Close DevTools',\n  /**\n  * @description Title of the device selected in the Device Mode Toolbar. The 'response' device is\n  * not a specific phone/tablet model but a virtual device that can change its height and width\n  * dynamically by clicking and dragging the sides. 'Response' refers to response design:\n  * https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Responsive_Design\n  */\n  responsive: 'Responsive',\n  /**\n  * @description A context menu item in the Device Mode Toolbar that takes the user to a new screen\n  * where they can add/edit/remove custom devices.\n  */\n  edit: 'Edit\u2026',\n  /**\n  * @description Text describing the current orientation of the phone/device (vs. landscape).\n  */\n  portrait: 'Portrait',\n  /**\n  * @description Text describing the current orientation of the phone/device (vs. portrait).\n  */\n  landscape: 'Landscape',\n  /**\n  * @description Title of button in the Device Mode Toolbar which rotates the device 90 degrees.\n  */\n  rotate: 'Rotate',\n  /**\n  * @description Fallback/default text used for the name of a custom device when no name has been\n  * provided by the user.\n  */\n  none: 'None',\n  /**\n  * @description Tooltip of the rotate/screen orientation button.\n  */\n  screenOrientationOptions: 'Screen orientation options',\n  /**\n  * @description Tooltip for a button which turns on/off dual-screen mode, which emulates devices\n  * like tablets which have two screens.\n  */\n  toggleDualscreenMode: 'Toggle dual-screen mode',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/emulation/DeviceModeToolbar.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n/**\n * Even though the emulation panel uses all UI elements, the tooltips are not supported.\n * That's because the emulation elements are rendered around the page context, rather\n * than in the DevTools panel itself. Therefore, we need to fall back to using the\n * built-in tooltip by setting the title attribute on the button's element.\n */\nfunction setTitleForButton(button: UI.Toolbar.ToolbarButton, title: string): void {\n  button.setTitle(title);\n  button.element.title = title;\n}\n\nexport class DeviceModeToolbar {\n  private model: EmulationModel.DeviceModeModel.DeviceModeModel;\n  private readonly showMediaInspectorSetting: Common.Settings.Setting<boolean>;\n  private readonly showRulersSetting: Common.Settings.Setting<boolean>;\n  private readonly experimentDualScreenSupport: boolean;\n  private readonly deviceOutlineSetting: Common.Settings.Setting<boolean>;\n  private readonly showDeviceScaleFactorSetting: Common.Settings.Setting<boolean>;\n  private readonly showUserAgentTypeSetting: Common.Settings.Setting<boolean>;\n  private autoAdjustScaleSetting: Common.Settings.Setting<boolean>;\n  private readonly lastMode: Map<EmulationModel.EmulatedDevices.EmulatedDevice, EmulationModel.EmulatedDevices.Mode>;\n  private readonly elementInternal: HTMLDivElement;\n  private readonly emulatedDevicesList: EmulationModel.EmulatedDevices.EmulatedDevicesList;\n  private readonly persistenceSetting: Common.Settings.Setting<{device: string, orientation: string, mode: string}>;\n  private spanButton!: UI.Toolbar.ToolbarButton;\n  private modeButton!: UI.Toolbar.ToolbarButton;\n  private widthInput: EmulationComponents.DeviceSizeInputElement.SizeInputElement;\n  private heightInput: EmulationComponents.DeviceSizeInputElement.SizeInputElement;\n  private deviceScaleItem!: UI.Toolbar.ToolbarMenuButton;\n  private deviceSelectItem!: UI.Toolbar.ToolbarMenuButton;\n  private scaleItem!: UI.Toolbar.ToolbarMenuButton;\n  private uaItem!: UI.Toolbar.ToolbarMenuButton;\n  private experimentalButton!: UI.Toolbar.ToolbarToggle|null;\n  private cachedDeviceScale!: number|null;\n  private cachedUaType!: string|null;\n  private xItem?: UI.Toolbar.ToolbarItem;\n  private throttlingConditionsItem?: UI.Toolbar.ToolbarMenuButton;\n  private cachedModelType?: EmulationModel.DeviceModeModel.Type;\n  private cachedScale?: number;\n  private cachedModelDevice?: EmulationModel.EmulatedDevices.EmulatedDevice|null;\n  private cachedModelMode?: EmulationModel.EmulatedDevices.Mode|null;\n\n  constructor(\n      model: EmulationModel.DeviceModeModel.DeviceModeModel,\n      showMediaInspectorSetting: Common.Settings.Setting<boolean>,\n      showRulersSetting: Common.Settings.Setting<boolean>) {\n    this.model = model;\n    this.showMediaInspectorSetting = showMediaInspectorSetting;\n    this.showRulersSetting = showRulersSetting;\n\n    this.experimentDualScreenSupport = Root.Runtime.experiments.isEnabled('dualScreenSupport');\n\n    this.deviceOutlineSetting = this.model.deviceOutlineSetting();\n    this.showDeviceScaleFactorSetting =\n        Common.Settings.Settings.instance().createSetting('emulation.showDeviceScaleFactor', false);\n    this.showDeviceScaleFactorSetting.addChangeListener(this.updateDeviceScaleFactorVisibility, this);\n\n    this.showUserAgentTypeSetting =\n        Common.Settings.Settings.instance().createSetting('emulation.showUserAgentType', false);\n    this.showUserAgentTypeSetting.addChangeListener(this.updateUserAgentTypeVisibility, this);\n\n    this.autoAdjustScaleSetting = Common.Settings.Settings.instance().createSetting('emulation.autoAdjustScale', true);\n\n    this.lastMode = new Map();\n\n    this.elementInternal = document.createElement('div');\n    this.elementInternal.classList.add('device-mode-toolbar');\n\n    const leftContainer = this.elementInternal.createChild('div', 'device-mode-toolbar-spacer');\n    leftContainer.createChild('div', 'device-mode-toolbar-spacer');\n    const leftToolbar = new UI.Toolbar.Toolbar('', leftContainer);\n    this.fillLeftToolbar(leftToolbar);\n\n    const mainToolbar = new UI.Toolbar.Toolbar('', this.elementInternal);\n    mainToolbar.makeWrappable();\n    this.widthInput = new EmulationComponents.DeviceSizeInputElement.SizeInputElement(i18nString(UIStrings.width));\n    this.widthInput.addEventListener('sizechanged', ({size: width}) => {\n      this.model.setWidthAndScaleToFit(width);\n    });\n    this.heightInput =\n        new EmulationComponents.DeviceSizeInputElement.SizeInputElement(i18nString(UIStrings.heightLeaveEmptyForFull));\n    this.heightInput.addEventListener('sizechanged', ({size: height}) => {\n      this.model.setHeightAndScaleToFit(height);\n    });\n    this.fillMainToolbar(mainToolbar);\n\n    const rightContainer = this.elementInternal.createChild('div', 'device-mode-toolbar-spacer');\n    const rightToolbar = new UI.Toolbar.Toolbar('device-mode-toolbar-fixed-size', rightContainer);\n    rightToolbar.makeWrappable();\n    this.fillRightToolbar(rightToolbar);\n    const modeToolbar = new UI.Toolbar.Toolbar('device-mode-toolbar-fixed-size', rightContainer);\n    modeToolbar.makeWrappable();\n    this.fillModeToolbar(modeToolbar);\n    rightContainer.createChild('div', 'device-mode-toolbar-spacer');\n    const optionsToolbar = new UI.Toolbar.Toolbar('device-mode-toolbar-options', rightContainer);\n    optionsToolbar.makeWrappable();\n    this.fillOptionsToolbar(optionsToolbar);\n\n    this.emulatedDevicesList = EmulationModel.EmulatedDevices.EmulatedDevicesList.instance();\n    this.emulatedDevicesList.addEventListener(\n        EmulationModel.EmulatedDevices.Events.CustomDevicesUpdated, this.deviceListChanged, this);\n    this.emulatedDevicesList.addEventListener(\n        EmulationModel.EmulatedDevices.Events.StandardDevicesUpdated, this.deviceListChanged, this);\n\n    this.persistenceSetting = Common.Settings.Settings.instance().createSetting(\n        'emulation.deviceModeValue', {device: '', orientation: '', mode: ''});\n\n    this.model.toolbarControlsEnabledSetting().addChangeListener(updateToolbarsEnabled);\n    updateToolbarsEnabled();\n\n    function updateToolbarsEnabled(): void {\n      const enabled = model.toolbarControlsEnabledSetting().get();\n      leftToolbar.setEnabled(enabled);\n      mainToolbar.setEnabled(enabled);\n      rightToolbar.setEnabled(enabled);\n      modeToolbar.setEnabled(enabled);\n      optionsToolbar.setEnabled(enabled);\n    }\n  }\n\n  private createEmptyToolbarElement(): Element {\n    const element = document.createElement('div');\n    element.classList.add('device-mode-empty-toolbar-element');\n    return element;\n  }\n\n  private fillLeftToolbar(toolbar: UI.Toolbar.Toolbar): void {\n    toolbar.appendToolbarItem(this.wrapToolbarItem(this.createEmptyToolbarElement()));\n    this.deviceSelectItem = new UI.Toolbar.ToolbarMenuButton(this.appendDeviceMenuItems.bind(this));\n    this.deviceSelectItem.setGlyph('');\n    this.deviceSelectItem.turnIntoSelect(true);\n    this.deviceSelectItem.setDarkText();\n    toolbar.appendToolbarItem(this.deviceSelectItem);\n  }\n\n  private fillMainToolbar(toolbar: UI.Toolbar.Toolbar): void {\n    toolbar.appendToolbarItem(new UI.Toolbar.ToolbarItem(this.widthInput));\n\n    const xElement = document.createElement('div');\n    xElement.classList.add('device-mode-x');\n    xElement.textContent = '\u00D7';\n    this.xItem = this.wrapToolbarItem(xElement);\n    toolbar.appendToolbarItem(this.xItem);\n\n    toolbar.appendToolbarItem(new UI.Toolbar.ToolbarItem(this.heightInput));\n  }\n\n  private fillRightToolbar(toolbar: UI.Toolbar.Toolbar): void {\n    toolbar.appendToolbarItem(this.wrapToolbarItem(this.createEmptyToolbarElement()));\n    this.scaleItem = new UI.Toolbar.ToolbarMenuButton(this.appendScaleMenuItems.bind(this));\n    setTitleForButton(this.scaleItem, i18nString(UIStrings.zoom));\n    this.scaleItem.setGlyph('');\n    this.scaleItem.turnIntoSelect();\n    this.scaleItem.setDarkText();\n    toolbar.appendToolbarItem(this.scaleItem);\n\n    toolbar.appendToolbarItem(this.wrapToolbarItem(this.createEmptyToolbarElement()));\n\n    this.deviceScaleItem = new UI.Toolbar.ToolbarMenuButton(this.appendDeviceScaleMenuItems.bind(this));\n    this.deviceScaleItem.setVisible(this.showDeviceScaleFactorSetting.get());\n    setTitleForButton(this.deviceScaleItem, i18nString(UIStrings.devicePixelRatio));\n    this.deviceScaleItem.setGlyph('');\n    this.deviceScaleItem.turnIntoSelect();\n    this.deviceScaleItem.setDarkText();\n    toolbar.appendToolbarItem(this.deviceScaleItem);\n\n    toolbar.appendToolbarItem(this.wrapToolbarItem(this.createEmptyToolbarElement()));\n    this.uaItem = new UI.Toolbar.ToolbarMenuButton(this.appendUserAgentMenuItems.bind(this));\n    this.uaItem.setVisible(this.showUserAgentTypeSetting.get());\n    setTitleForButton(this.uaItem, i18nString(UIStrings.deviceType));\n    this.uaItem.setGlyph('');\n    this.uaItem.turnIntoSelect();\n    this.uaItem.setDarkText();\n    toolbar.appendToolbarItem(this.uaItem);\n\n    this.throttlingConditionsItem =\n        MobileThrottling.ThrottlingManager.throttlingManager().createMobileThrottlingButton();\n    toolbar.appendToolbarItem(this.throttlingConditionsItem);\n  }\n\n  private fillModeToolbar(toolbar: UI.Toolbar.Toolbar): void {\n    toolbar.appendToolbarItem(this.wrapToolbarItem(this.createEmptyToolbarElement()));\n    this.modeButton = new UI.Toolbar.ToolbarButton('', 'largeicon-rotate-screen');\n    this.modeButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.modeMenuClicked, this);\n    toolbar.appendToolbarItem(this.modeButton);\n\n    if (this.experimentDualScreenSupport) {\n      this.spanButton = new UI.Toolbar.ToolbarButton('', 'largeicon-dual-screen');\n      this.spanButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.spanClicked, this);\n      toolbar.appendToolbarItem(this.spanButton);\n\n      this.createExperimentalButton(toolbar);\n    }\n  }\n\n  private createExperimentalButton(toolbar: UI.Toolbar.Toolbar): void {\n    toolbar.appendToolbarItem(new UI.Toolbar.ToolbarSeparator(true));\n\n    const title = (this.model.webPlatformExperimentalFeaturesEnabled()) ?\n        i18nString(UIStrings.experimentalWebPlatformFeature) :\n        i18nString(UIStrings.experimentalWebPlatformFeatureFlag);\n    this.experimentalButton = new UI.Toolbar.ToolbarToggle(title, 'largeicon-experimental-api');\n    this.experimentalButton.setToggled(this.model.webPlatformExperimentalFeaturesEnabled());\n    this.experimentalButton.setEnabled(true);\n    this.experimentalButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.experimentalClicked, this);\n\n    toolbar.appendToolbarItem(this.experimentalButton);\n  }\n\n  private experimentalClicked(): void {\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.openInNewTab(\n        'chrome://flags/#enable-experimental-web-platform-features' as Platform.DevToolsPath.UrlString);\n  }\n\n  private fillOptionsToolbar(toolbar: UI.Toolbar.Toolbar): void {\n    toolbar.appendToolbarItem(this.wrapToolbarItem(this.createEmptyToolbarElement()));\n    const moreOptionsButton = new UI.Toolbar.ToolbarMenuButton(this.appendOptionsMenuItems.bind(this));\n    setTitleForButton(moreOptionsButton, i18nString(UIStrings.moreOptions));\n    toolbar.appendToolbarItem(moreOptionsButton);\n  }\n\n  private appendScaleMenuItems(contextMenu: UI.ContextMenu.ContextMenu): void {\n    if (this.model.type() === EmulationModel.DeviceModeModel.Type.Device) {\n      contextMenu.footerSection().appendItem(\n          i18nString(UIStrings.fitToWindowF, {PH1: this.getPrettyFitZoomPercentage()}),\n          this.onScaleMenuChanged.bind(this, this.model.fitScale()), false);\n    }\n    contextMenu.footerSection().appendCheckboxItem(\n        i18nString(UIStrings.autoadjustZoom), this.onAutoAdjustScaleChanged.bind(this),\n        this.autoAdjustScaleSetting.get());\n    const boundAppendScaleItem = appendScaleItem.bind(this);\n    boundAppendScaleItem('50%', 0.5);\n    boundAppendScaleItem('75%', 0.75);\n    boundAppendScaleItem('100%', 1);\n    boundAppendScaleItem('125%', 1.25);\n    boundAppendScaleItem('150%', 1.5);\n\n    function appendScaleItem(this: DeviceModeToolbar, title: string, value: number): void {\n      contextMenu.defaultSection().appendCheckboxItem(\n          title, this.onScaleMenuChanged.bind(this, value), this.model.scaleSetting().get() === value, false);\n    }\n  }\n\n  private onScaleMenuChanged(value: number): void {\n    this.model.scaleSetting().set(value);\n  }\n\n  private onAutoAdjustScaleChanged(): void {\n    this.autoAdjustScaleSetting.set(!this.autoAdjustScaleSetting.get());\n  }\n\n  private appendDeviceScaleMenuItems(contextMenu: UI.ContextMenu.ContextMenu): void {\n    const deviceScaleFactorSetting = this.model.deviceScaleFactorSetting();\n    const defaultValue = this.model.uaSetting().get() === EmulationModel.DeviceModeModel.UA.Mobile ||\n            this.model.uaSetting().get() === EmulationModel.DeviceModeModel.UA.MobileNoTouch ?\n        EmulationModel.DeviceModeModel.defaultMobileScaleFactor :\n        window.devicePixelRatio;\n    appendDeviceScaleFactorItem(contextMenu.headerSection(), i18nString(UIStrings.defaultF, {PH1: defaultValue}), 0);\n    appendDeviceScaleFactorItem(contextMenu.defaultSection(), '1', 1);\n    appendDeviceScaleFactorItem(contextMenu.defaultSection(), '2', 2);\n    appendDeviceScaleFactorItem(contextMenu.defaultSection(), '3', 3);\n\n    function appendDeviceScaleFactorItem(section: UI.ContextMenu.Section, title: string, value: number): void {\n      section.appendCheckboxItem(\n          title, deviceScaleFactorSetting.set.bind(deviceScaleFactorSetting, value),\n          deviceScaleFactorSetting.get() === value);\n    }\n  }\n\n  private appendUserAgentMenuItems(contextMenu: UI.ContextMenu.ContextMenu): void {\n    const uaSetting = this.model.uaSetting();\n    appendUAItem(EmulationModel.DeviceModeModel.UA.Mobile, EmulationModel.DeviceModeModel.UA.Mobile);\n    appendUAItem(EmulationModel.DeviceModeModel.UA.MobileNoTouch, EmulationModel.DeviceModeModel.UA.MobileNoTouch);\n    appendUAItem(EmulationModel.DeviceModeModel.UA.Desktop, EmulationModel.DeviceModeModel.UA.Desktop);\n    appendUAItem(EmulationModel.DeviceModeModel.UA.DesktopTouch, EmulationModel.DeviceModeModel.UA.DesktopTouch);\n\n    function appendUAItem(title: string, value: EmulationModel.DeviceModeModel.UA): void {\n      contextMenu.defaultSection().appendCheckboxItem(\n          title, uaSetting.set.bind(uaSetting, value), uaSetting.get() === value);\n    }\n  }\n\n  private appendOptionsMenuItems(contextMenu: UI.ContextMenu.ContextMenu): void {\n    const model = this.model;\n    appendToggleItem(\n        contextMenu.headerSection(), this.deviceOutlineSetting, i18nString(UIStrings.hideDeviceFrame),\n        i18nString(UIStrings.showDeviceFrame), model.type() !== EmulationModel.DeviceModeModel.Type.Device);\n    appendToggleItem(\n        contextMenu.headerSection(), this.showMediaInspectorSetting, i18nString(UIStrings.hideMediaQueries),\n        i18nString(UIStrings.showMediaQueries));\n    appendToggleItem(\n        contextMenu.headerSection(), this.showRulersSetting, i18nString(UIStrings.hideRulers),\n        i18nString(UIStrings.showRulers));\n    appendToggleItem(\n        contextMenu.defaultSection(), this.showDeviceScaleFactorSetting, i18nString(UIStrings.removeDevicePixelRatio),\n        i18nString(UIStrings.addDevicePixelRatio));\n    appendToggleItem(\n        contextMenu.defaultSection(), this.showUserAgentTypeSetting, i18nString(UIStrings.removeDeviceType),\n        i18nString(UIStrings.addDeviceType));\n    contextMenu.appendItemsAtLocation('deviceModeMenu');\n    contextMenu.footerSection().appendItem(i18nString(UIStrings.resetToDefaults), this.reset.bind(this));\n    contextMenu.footerSection().appendItem(\n        i18nString(UIStrings.closeDevtools),\n        Host.InspectorFrontendHost.InspectorFrontendHostInstance.closeWindow.bind(\n            Host.InspectorFrontendHost.InspectorFrontendHostInstance));\n\n    function appendToggleItem(\n        section: UI.ContextMenu.Section, setting: Common.Settings.Setting<unknown>, title1: string, title2: string,\n        disabled?: boolean): void {\n      if (typeof disabled === 'undefined') {\n        disabled = model.type() === EmulationModel.DeviceModeModel.Type.None;\n      }\n      section.appendItem(setting.get() ? title1 : title2, setting.set.bind(setting, !setting.get()), disabled);\n    }\n  }\n\n  private reset(): void {\n    this.deviceOutlineSetting.set(false);\n    this.showDeviceScaleFactorSetting.set(false);\n    this.showUserAgentTypeSetting.set(false);\n    this.showMediaInspectorSetting.set(false);\n    this.showRulersSetting.set(false);\n    this.model.reset();\n  }\n\n  private wrapToolbarItem(element: Element): UI.Toolbar.ToolbarItem {\n    const container = document.createElement('div');\n    const shadowRoot = UI.Utils.createShadowRootWithCoreStyles(\n        container, {cssFile: deviceModeToolbarStyles, delegatesFocus: undefined});\n    shadowRoot.appendChild(element);\n    return new UI.Toolbar.ToolbarItem(container);\n  }\n\n  private emulateDevice(device: EmulationModel.EmulatedDevices.EmulatedDevice): void {\n    const scale = this.autoAdjustScaleSetting.get() ? undefined : this.model.scaleSetting().get();\n    this.model.emulate(\n        EmulationModel.DeviceModeModel.Type.Device, device, this.lastMode.get(device) || device.modes[0], scale);\n  }\n\n  private switchToResponsive(): void {\n    this.model.emulate(EmulationModel.DeviceModeModel.Type.Responsive, null, null);\n  }\n\n  private filterDevices(devices: EmulationModel.EmulatedDevices.EmulatedDevice[]):\n      EmulationModel.EmulatedDevices.EmulatedDevice[] {\n    devices = devices.filter(function(d) {\n      return d.show();\n    });\n    devices.sort(EmulationModel.EmulatedDevices.EmulatedDevice.deviceComparator);\n    return devices;\n  }\n\n  private standardDevices(): EmulationModel.EmulatedDevices.EmulatedDevice[] {\n    return this.filterDevices(this.emulatedDevicesList.standard());\n  }\n\n  private customDevices(): EmulationModel.EmulatedDevices.EmulatedDevice[] {\n    return this.filterDevices(this.emulatedDevicesList.custom());\n  }\n\n  private allDevices(): EmulationModel.EmulatedDevices.EmulatedDevice[] {\n    return this.standardDevices().concat(this.customDevices());\n  }\n\n  private appendDeviceMenuItems(contextMenu: UI.ContextMenu.ContextMenu): void {\n    contextMenu.headerSection().appendCheckboxItem(\n        i18nString(UIStrings.responsive), this.switchToResponsive.bind(this),\n        this.model.type() === EmulationModel.DeviceModeModel.Type.Responsive, false);\n    appendGroup.call(this, this.standardDevices());\n    appendGroup.call(this, this.customDevices());\n    contextMenu.footerSection().appendItem(\n        i18nString(UIStrings.edit), this.emulatedDevicesList.revealCustomSetting.bind(this.emulatedDevicesList), false);\n\n    function appendGroup(this: DeviceModeToolbar, devices: EmulationModel.EmulatedDevices.EmulatedDevice[]): void {\n      if (!devices.length) {\n        return;\n      }\n      const section = contextMenu.section();\n      for (const device of devices) {\n        section.appendCheckboxItem(\n            device.title, this.emulateDevice.bind(this, device), this.model.device() === device, false);\n      }\n    }\n  }\n\n  private deviceListChanged(): void {\n    const device = this.model.device();\n    if (!device) {\n      return;\n    }\n\n    const devices = this.allDevices();\n    if (devices.indexOf(device) === -1) {\n      if (devices.length) {\n        this.emulateDevice(devices[0]);\n      } else {\n        this.model.emulate(EmulationModel.DeviceModeModel.Type.Responsive, null, null);\n      }\n    } else {\n      this.emulateDevice(device);\n    }\n  }\n\n  private updateDeviceScaleFactorVisibility(): void {\n    if (this.deviceScaleItem) {\n      this.deviceScaleItem.setVisible(this.showDeviceScaleFactorSetting.get());\n    }\n  }\n\n  private updateUserAgentTypeVisibility(): void {\n    if (this.uaItem) {\n      this.uaItem.setVisible(this.showUserAgentTypeSetting.get());\n    }\n  }\n\n  private spanClicked(): void {\n    const device = this.model.device();\n\n    if (!device || !device.isDualScreen) {\n      return;\n    }\n\n    const scale = this.autoAdjustScaleSetting.get() ? undefined : this.model.scaleSetting().get();\n    const mode = this.model.mode();\n    if (!mode) {\n      return;\n    }\n\n    const newMode = device.getSpanPartner(mode);\n    if (!newMode) {\n      return;\n    }\n    this.model.emulate(this.model.type(), device, newMode, scale);\n    return;\n  }\n\n  private modeMenuClicked(event: {\n    data: Event,\n  }): void {\n    const device = this.model.device();\n    const model = this.model;\n    const autoAdjustScaleSetting = this.autoAdjustScaleSetting;\n\n    if (model.type() === EmulationModel.DeviceModeModel.Type.Responsive) {\n      const appliedSize = model.appliedDeviceSize();\n      if (autoAdjustScaleSetting.get()) {\n        model.setSizeAndScaleToFit(appliedSize.height, appliedSize.width);\n      } else {\n        model.setWidth(appliedSize.height);\n        model.setHeight(appliedSize.width);\n      }\n      return;\n    }\n\n    if (!device) {\n      return;\n    }\n\n    if ((device.isDualScreen || device.modes.length === 2) &&\n        device.modes[0].orientation !== device.modes[1].orientation) {\n      const scale = autoAdjustScaleSetting.get() ? undefined : model.scaleSetting().get();\n      const mode = model.mode();\n      if (!mode) {\n        return;\n      }\n      const rotationPartner = device.getRotationPartner(mode);\n      if (!rotationPartner) {\n        return;\n      }\n\n      model.emulate(model.type(), model.device(), rotationPartner, scale);\n      return;\n    }\n\n    if (!this.modeButton) {\n      return;\n    }\n\n    const contextMenu = new UI.ContextMenu.ContextMenu(event.data, {\n      useSoftMenu: false,\n      x: this.modeButton.element.totalOffsetLeft(),\n      y: this.modeButton.element.totalOffsetTop() + (this.modeButton.element as HTMLElement).offsetHeight,\n    });\n    addOrientation(EmulationModel.EmulatedDevices.Vertical, i18nString(UIStrings.portrait));\n    addOrientation(EmulationModel.EmulatedDevices.Horizontal, i18nString(UIStrings.landscape));\n    void contextMenu.show();\n\n    function addOrientation(orientation: string, title: string): void {\n      if (!device) {\n        return;\n      }\n\n      const modes = device.modesForOrientation(orientation);\n      if (!modes.length) {\n        return;\n      }\n      if (modes.length === 1) {\n        addMode(modes[0], title);\n      } else {\n        for (let index = 0; index < modes.length; index++) {\n          addMode(modes[index], title + ' \\u2013 ' + modes[index].title);\n        }\n      }\n    }\n\n    function addMode(mode: EmulationModel.EmulatedDevices.Mode, title: string): void {\n      contextMenu.defaultSection().appendCheckboxItem(title, applyMode.bind(null, mode), model.mode() === mode, false);\n    }\n\n    function applyMode(mode: EmulationModel.EmulatedDevices.Mode): void {\n      const scale = autoAdjustScaleSetting.get() ? undefined : model.scaleSetting().get();\n      model.emulate(model.type(), model.device(), mode, scale);\n    }\n  }\n\n  private getPrettyFitZoomPercentage(): string {\n    return `${(this.model.fitScale() * 100).toFixed(0)}`;\n  }\n\n  private getPrettyZoomPercentage(): string {\n    return `${(this.model.scale() * 100).toFixed(0)}`;\n  }\n\n  element(): Element {\n    return this.elementInternal;\n  }\n\n  update(): void {\n    if (this.model.type() !== this.cachedModelType) {\n      this.cachedModelType = this.model.type();\n      this.widthInput.disabled = this.model.type() !== EmulationModel.DeviceModeModel.Type.Responsive;\n\n      this.heightInput.disabled = this.model.type() !== EmulationModel.DeviceModeModel.Type.Responsive;\n      this.deviceScaleItem.setEnabled(this.model.type() === EmulationModel.DeviceModeModel.Type.Responsive);\n      this.uaItem.setEnabled(this.model.type() === EmulationModel.DeviceModeModel.Type.Responsive);\n\n      if (this.model.type() === EmulationModel.DeviceModeModel.Type.Responsive) {\n        this.modeButton.setEnabled(true);\n        setTitleForButton(this.modeButton, i18nString(UIStrings.rotate));\n      } else {\n        this.modeButton.setEnabled(false);\n      }\n    }\n\n    const size = this.model.appliedDeviceSize();\n    this.widthInput.size = String(size.width);\n    this.heightInput.size =\n        this.model.type() === EmulationModel.DeviceModeModel.Type.Responsive && this.model.isFullHeight() ?\n        '' :\n        String(size.height);\n    this.heightInput.placeholder = String(size.height);\n\n    if (this.model.scale() !== this.cachedScale) {\n      this.scaleItem.setText(`${this.getPrettyZoomPercentage()}%`);\n      this.cachedScale = this.model.scale();\n    }\n\n    const deviceScale = this.model.appliedDeviceScaleFactor();\n    if (deviceScale !== this.cachedDeviceScale) {\n      this.deviceScaleItem.setText(`DPR: ${deviceScale.toFixed(1)}`);\n      this.cachedDeviceScale = deviceScale;\n    }\n\n    const uaType = this.model.appliedUserAgentType();\n    if (uaType !== this.cachedUaType) {\n      this.uaItem.setText(uaType);\n      this.cachedUaType = uaType;\n    }\n\n    let deviceItemTitle: string = i18nString(UIStrings.none);\n    if (this.model.type() === EmulationModel.DeviceModeModel.Type.Responsive) {\n      deviceItemTitle = i18nString(UIStrings.responsive);\n    }\n    const device = this.model.device();\n    if (this.model.type() === EmulationModel.DeviceModeModel.Type.Device && device) {\n      deviceItemTitle = device.title;\n    }\n    this.deviceSelectItem.setText(`${i18nString(UIStrings.dimensions)}: ${deviceItemTitle}`);\n\n    if (this.model.device() !== this.cachedModelDevice) {\n      const device = this.model.device();\n      if (device) {\n        const modeCount = device ? device.modes.length : 0;\n        this.modeButton.setEnabled(modeCount >= 2);\n        setTitleForButton(\n            this.modeButton,\n            modeCount === 2 ? i18nString(UIStrings.rotate) : i18nString(UIStrings.screenOrientationOptions));\n      }\n      this.cachedModelDevice = device;\n    }\n\n    if (this.experimentDualScreenSupport && this.experimentalButton) {\n      const device = this.model.device();\n      if (device && device.isDualScreen) {\n        this.spanButton.setVisible(true);\n        this.experimentalButton.setVisible(true);\n      } else {\n        this.spanButton.setVisible(false);\n        this.experimentalButton.setVisible(false);\n      }\n      setTitleForButton(this.spanButton, i18nString(UIStrings.toggleDualscreenMode));\n    }\n\n    if (this.model.type() === EmulationModel.DeviceModeModel.Type.Device) {\n      this.lastMode.set(\n          (this.model.device() as EmulationModel.EmulatedDevices.EmulatedDevice),\n          (this.model.mode() as EmulationModel.EmulatedDevices.Mode));\n    }\n\n    if (this.model.mode() !== this.cachedModelMode && this.model.type() !== EmulationModel.DeviceModeModel.Type.None) {\n      this.cachedModelMode = this.model.mode();\n      const value = this.persistenceSetting.get();\n      const device = this.model.device();\n      if (device) {\n        value.device = device.title;\n        const mode = this.model.mode();\n        value.orientation = mode ? mode.orientation : '';\n        value.mode = mode ? mode.title : '';\n      } else {\n        value.device = '';\n        value.orientation = '';\n        value.mode = '';\n      }\n      this.persistenceSetting.set(value);\n    }\n  }\n\n  restore(): void {\n    for (const device of this.allDevices()) {\n      if (device.title === this.persistenceSetting.get().device) {\n        for (const mode of device.modes) {\n          if (mode.orientation === this.persistenceSetting.get().orientation &&\n              mode.title === this.persistenceSetting.get().mode) {\n            this.lastMode.set(device, mode);\n            this.emulateDevice(device);\n            return;\n          }\n        }\n      }\n    }\n\n    this.model.emulate(EmulationModel.DeviceModeModel.Type.Responsive, null, null);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
