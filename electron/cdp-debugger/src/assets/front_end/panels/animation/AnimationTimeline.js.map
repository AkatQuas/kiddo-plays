{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/animation/AnimationTimeline.ts"],
  "sourcesContent": ["// Copyright (c) 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {AnimationGroupPreviewUI} from './AnimationGroupPreviewUI.js';\nimport animationTimelineStyles from './animationTimeline.css.js';\n\nimport type {AnimationEffect, AnimationGroup, AnimationImpl} from './AnimationModel.js';\nimport {AnimationModel, Events} from './AnimationModel.js';\nimport {AnimationScreenshotPopover} from './AnimationScreenshotPopover.js';\nimport {AnimationUI} from './AnimationUI.js';\n\nconst UIStrings = {\n  /**\n  *@description Timeline hint text content in Animation Timeline of the Animation Inspector\n  */\n  selectAnEffectAboveToInspectAnd: 'Select an effect above to inspect and modify.',\n  /**\n  *@description Text to clear everything\n  */\n  clearAll: 'Clear all',\n  /**\n  *@description Tooltip text that appears when hovering over largeicon pause button in Animation Timeline of the Animation Inspector\n  */\n  pauseAll: 'Pause all',\n  /**\n  *@description Title of the playback rate button listbox\n  */\n  playbackRates: 'Playback rates',\n  /**\n  *@description Text in Animation Timeline of the Animation Inspector\n  *@example {50} PH1\n  */\n  playbackRatePlaceholder: '{PH1}%',\n  /**\n  *@description Text of an item that pause the running task\n  */\n  pause: 'Pause',\n  /**\n  *@description Button title in Animation Timeline of the Animation Inspector\n  *@example {50%} PH1\n  */\n  setSpeedToS: 'Set speed to {PH1}',\n  /**\n  *@description Title of Animation Previews listbox\n  */\n  animationPreviews: 'Animation previews',\n  /**\n  *@description Empty buffer hint text content in Animation Timeline of the Animation Inspector\n  */\n  waitingForAnimations: 'Waiting for animations...',\n  /**\n  *@description Tooltip text that appears when hovering over largeicon replay animation button in Animation Timeline of the Animation Inspector\n  */\n  replayTimeline: 'Replay timeline',\n  /**\n  *@description Text in Animation Timeline of the Animation Inspector\n  */\n  resumeAll: 'Resume all',\n  /**\n  *@description Title of control button in animation timeline of the animation inspector\n  */\n  playTimeline: 'Play timeline',\n  /**\n  *@description Title of control button in animation timeline of the animation inspector\n  */\n  pauseTimeline: 'Pause timeline',\n  /**\n  *@description Title of a specific Animation Preview\n  *@example {1} PH1\n  */\n  animationPreviewS: 'Animation Preview {PH1}',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/animation/AnimationTimeline.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst nodeUIsByNode = new WeakMap<SDK.DOMModel.DOMNode, NodeUI>();\n\nconst playbackRates = new WeakMap<HTMLElement, number>();\n\nlet animationTimelineInstance: AnimationTimeline;\n\nexport class AnimationTimeline extends UI.Widget.VBox implements SDK.TargetManager.SDKModelObserver<AnimationModel> {\n  #gridWrapper: HTMLElement;\n  #grid: Element;\n  #playbackRate: number;\n  #allPaused: boolean;\n  #animationsContainer: HTMLElement;\n  #playbackRateButtons!: HTMLElement[];\n  #previewContainer!: HTMLElement;\n  #timelineScrubber!: HTMLElement;\n  #currentTime!: HTMLElement;\n  #popoverHelper!: UI.PopoverHelper.PopoverHelper;\n  #clearButton!: UI.Toolbar.ToolbarButton;\n  #selectedGroup!: AnimationGroup|null;\n  #renderQueue!: AnimationUI[];\n  #defaultDuration: number;\n  #durationInternal: number;\n  #timelineControlsWidth: number;\n  readonly #nodesMap: Map<number, NodeUI>;\n  #uiAnimations: AnimationUI[];\n  #groupBuffer: AnimationGroup[];\n  readonly #previewMap: Map<AnimationGroup, AnimationGroupPreviewUI>;\n  readonly #animationsMap: Map<string, AnimationImpl>;\n  #timelineScrubberLine?: HTMLElement;\n  #pauseButton?: UI.Toolbar.ToolbarToggle;\n  #controlButton?: UI.Toolbar.ToolbarToggle;\n  #controlState?: ControlState;\n  #redrawing?: boolean;\n  #cachedTimelineWidth?: number;\n  #cachedTimelineHeight?: number;\n  #scrubberPlayer?: Animation;\n  #gridOffsetLeft?: number;\n  #originalScrubberTime?: number|null;\n  #originalMousePosition?: number;\n\n  private constructor() {\n    super(true);\n\n    this.element.classList.add('animations-timeline');\n\n    this.#gridWrapper = this.contentElement.createChild('div', 'grid-overflow-wrapper');\n    this.#grid = UI.UIUtils.createSVGChild(this.#gridWrapper, 'svg', 'animation-timeline-grid');\n\n    this.#playbackRate = 1;\n    this.#allPaused = false;\n    this.createHeader();\n    this.#animationsContainer = this.contentElement.createChild('div', 'animation-timeline-rows');\n    const timelineHint = this.contentElement.createChild('div', 'animation-timeline-rows-hint');\n    timelineHint.textContent = i18nString(UIStrings.selectAnEffectAboveToInspectAnd);\n\n    /** @const */ this.#defaultDuration = 100;\n    this.#durationInternal = this.#defaultDuration;\n    /** @const */ this.#timelineControlsWidth = 150;\n    this.#nodesMap = new Map();\n    this.#uiAnimations = [];\n    this.#groupBuffer = [];\n    this.#previewMap = new Map();\n    this.#animationsMap = new Map();\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.DOMModel.DOMModel, SDK.DOMModel.Events.NodeRemoved, this.nodeRemoved, this);\n    SDK.TargetManager.TargetManager.instance().observeModels(AnimationModel, this);\n    UI.Context.Context.instance().addFlavorChangeListener(SDK.DOMModel.DOMNode, this.nodeChanged, this);\n  }\n\n  static instance(): AnimationTimeline {\n    if (!animationTimelineInstance) {\n      animationTimelineInstance = new AnimationTimeline();\n    }\n    return animationTimelineInstance;\n  }\n\n  get previewMap(): Map<AnimationGroup, AnimationGroupPreviewUI> {\n    return this.#previewMap;\n  }\n\n  get uiAnimations(): AnimationUI[] {\n    return this.#uiAnimations;\n  }\n\n  get groupBuffer(): AnimationGroup[] {\n    return this.#groupBuffer;\n  }\n\n  wasShown(): void {\n    for (const animationModel of SDK.TargetManager.TargetManager.instance().models(AnimationModel)) {\n      this.addEventListeners(animationModel);\n    }\n    this.registerCSSFiles([animationTimelineStyles]);\n  }\n\n  willHide(): void {\n    for (const animationModel of SDK.TargetManager.TargetManager.instance().models(AnimationModel)) {\n      this.removeEventListeners(animationModel);\n    }\n\n    if (this.#popoverHelper) {\n      this.#popoverHelper.hidePopover();\n    }\n  }\n\n  modelAdded(animationModel: AnimationModel): void {\n    if (this.isShowing()) {\n      this.addEventListeners(animationModel);\n    }\n  }\n\n  modelRemoved(animationModel: AnimationModel): void {\n    this.removeEventListeners(animationModel);\n  }\n\n  private addEventListeners(animationModel: AnimationModel): void {\n    void animationModel.ensureEnabled();\n    animationModel.addEventListener(Events.AnimationGroupStarted, this.animationGroupStarted, this);\n    animationModel.addEventListener(Events.ModelReset, this.reset, this);\n  }\n\n  private removeEventListeners(animationModel: AnimationModel): void {\n    animationModel.removeEventListener(Events.AnimationGroupStarted, this.animationGroupStarted, this);\n    animationModel.removeEventListener(Events.ModelReset, this.reset, this);\n  }\n\n  private nodeChanged(): void {\n    for (const nodeUI of this.#nodesMap.values()) {\n      nodeUI.nodeChanged();\n    }\n  }\n\n  private createScrubber(): HTMLElement {\n    this.#timelineScrubber = document.createElement('div');\n    this.#timelineScrubber.classList.add('animation-scrubber');\n    this.#timelineScrubber.classList.add('hidden');\n    this.#timelineScrubberLine = this.#timelineScrubber.createChild('div', 'animation-scrubber-line');\n    this.#timelineScrubberLine.createChild('div', 'animation-scrubber-head');\n    this.#timelineScrubber.createChild('div', 'animation-time-overlay');\n    return this.#timelineScrubber;\n  }\n\n  private createHeader(): HTMLElement {\n    const toolbarContainer = this.contentElement.createChild('div', 'animation-timeline-toolbar-container');\n    const topToolbar = new UI.Toolbar.Toolbar('animation-timeline-toolbar', toolbarContainer);\n    this.#clearButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.clearAll), 'largeicon-clear');\n    this.#clearButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.reset.bind(this));\n    topToolbar.appendToolbarItem(this.#clearButton);\n    topToolbar.appendSeparator();\n\n    this.#pauseButton =\n        new UI.Toolbar.ToolbarToggle(i18nString(UIStrings.pauseAll), 'largeicon-pause', 'largeicon-resume');\n    this.#pauseButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.togglePauseAll.bind(this));\n    topToolbar.appendToolbarItem(this.#pauseButton);\n\n    const playbackRateControl = toolbarContainer.createChild('div', 'animation-playback-rate-control');\n    playbackRateControl.addEventListener('keydown', this.handlePlaybackRateControlKeyDown.bind(this));\n    UI.ARIAUtils.markAsListBox(playbackRateControl);\n    UI.ARIAUtils.setAccessibleName(playbackRateControl, i18nString(UIStrings.playbackRates));\n\n    this.#playbackRateButtons = [];\n    for (const playbackRate of GlobalPlaybackRates) {\n      const button = (playbackRateControl.createChild('button', 'animation-playback-rate-button') as HTMLElement);\n      button.textContent = playbackRate ? i18nString(UIStrings.playbackRatePlaceholder, {PH1: playbackRate * 100}) :\n                                          i18nString(UIStrings.pause);\n      playbackRates.set(button, playbackRate);\n      button.addEventListener('click', this.setPlaybackRate.bind(this, playbackRate));\n      UI.ARIAUtils.markAsOption(button);\n      UI.Tooltip.Tooltip.install(button, i18nString(UIStrings.setSpeedToS, {PH1: button.textContent}));\n      button.tabIndex = -1;\n      this.#playbackRateButtons.push(button);\n    }\n    this.updatePlaybackControls();\n    this.#previewContainer = (this.contentElement.createChild('div', 'animation-timeline-buffer') as HTMLElement);\n    UI.ARIAUtils.markAsListBox(this.#previewContainer);\n    UI.ARIAUtils.setAccessibleName(this.#previewContainer, i18nString(UIStrings.animationPreviews));\n    this.#popoverHelper = new UI.PopoverHelper.PopoverHelper(this.#previewContainer, this.getPopoverRequest.bind(this));\n    this.#popoverHelper.setDisableOnClick(true);\n    this.#popoverHelper.setTimeout(0);\n    const emptyBufferHint = this.contentElement.createChild('div', 'animation-timeline-buffer-hint');\n    emptyBufferHint.textContent = i18nString(UIStrings.waitingForAnimations);\n    const container = this.contentElement.createChild('div', 'animation-timeline-header');\n    const controls = container.createChild('div', 'animation-controls');\n    this.#currentTime = (controls.createChild('div', 'animation-timeline-current-time monospace') as HTMLElement);\n\n    const toolbar = new UI.Toolbar.Toolbar('animation-controls-toolbar', controls);\n    this.#controlButton =\n        new UI.Toolbar.ToolbarToggle(i18nString(UIStrings.replayTimeline), 'largeicon-replay-animation');\n    this.#controlState = ControlState.Replay;\n    this.#controlButton.setToggled(true);\n    this.#controlButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.controlButtonToggle.bind(this));\n    toolbar.appendToolbarItem(this.#controlButton);\n\n    const gridHeader = container.createChild('div', 'animation-grid-header');\n    UI.UIUtils.installDragHandle(\n        gridHeader, this.repositionScrubber.bind(this), this.scrubberDragMove.bind(this),\n        this.scrubberDragEnd.bind(this), 'text');\n    this.#gridWrapper.appendChild(this.createScrubber());\n\n    if (this.#timelineScrubberLine) {\n      UI.UIUtils.installDragHandle(\n          this.#timelineScrubberLine, this.scrubberDragStart.bind(this), this.scrubberDragMove.bind(this),\n          this.scrubberDragEnd.bind(this), 'col-resize');\n    }\n    this.#currentTime.textContent = '';\n\n    return container;\n  }\n\n  private handlePlaybackRateControlKeyDown(event: Event): void {\n    const keyboardEvent = (event as KeyboardEvent);\n    switch (keyboardEvent.key) {\n      case 'ArrowLeft':\n      case 'ArrowUp':\n        this.focusNextPlaybackRateButton(event.target, /* focusPrevious */ true);\n        break;\n      case 'ArrowRight':\n      case 'ArrowDown':\n        this.focusNextPlaybackRateButton(event.target);\n        break;\n    }\n  }\n\n  private focusNextPlaybackRateButton(target: EventTarget|null, focusPrevious?: boolean): void {\n    const button = (target as HTMLElement);\n    const currentIndex = this.#playbackRateButtons.indexOf(button);\n    const nextIndex = focusPrevious ? currentIndex - 1 : currentIndex + 1;\n    if (nextIndex < 0 || nextIndex >= this.#playbackRateButtons.length) {\n      return;\n    }\n    const nextButton = this.#playbackRateButtons[nextIndex];\n    nextButton.tabIndex = 0;\n    nextButton.focus();\n    if (target) {\n      (target as HTMLElement).tabIndex = -1;\n    }\n  }\n\n  private getPopoverRequest(event: Event): UI.PopoverHelper.PopoverRequest|null {\n    const element = (event.target as HTMLElement);\n    if (!element || !element.isDescendant(this.#previewContainer)) {\n      return null;\n    }\n\n    return {\n      box: element.boxInWindow(),\n      show: (popover: UI.GlassPane.GlassPane): Promise<boolean> => {\n        let animGroup;\n        for (const [group, previewUI] of this.#previewMap) {\n          if (previewUI.element === element || previewUI.element === element.parentElement) {\n            animGroup = group;\n          }\n        }\n        console.assert(typeof animGroup !== 'undefined');\n        if (!animGroup) {\n          return Promise.resolve(false);\n        }\n        const screenshots = animGroup.screenshots();\n        if (!screenshots.length) {\n          return Promise.resolve(false);\n        }\n\n        let fulfill: (arg0: boolean) => void;\n        const promise = new Promise<boolean>(x => {\n          fulfill = x;\n        });\n        if (!screenshots[0].complete) {\n          screenshots[0].onload = onFirstScreenshotLoaded.bind(null, screenshots);\n        } else {\n          onFirstScreenshotLoaded(screenshots);\n        }\n        return promise;\n\n        function onFirstScreenshotLoaded(screenshots: HTMLImageElement[]): void {\n          new AnimationScreenshotPopover(screenshots).show(popover.contentElement);\n          fulfill(true);\n        }\n      },\n      hide: undefined,\n    };\n  }\n\n  private togglePauseAll(): void {\n    this.#allPaused = !this.#allPaused;\n    if (this.#pauseButton) {\n      this.#pauseButton.setToggled(this.#allPaused);\n    }\n    this.setPlaybackRate(this.#playbackRate);\n    if (this.#pauseButton) {\n      this.#pauseButton.setTitle(this.#allPaused ? i18nString(UIStrings.resumeAll) : i18nString(UIStrings.pauseAll));\n    }\n  }\n\n  private setPlaybackRate(playbackRate: number): void {\n    this.#playbackRate = playbackRate;\n    for (const animationModel of SDK.TargetManager.TargetManager.instance().models(AnimationModel)) {\n      animationModel.setPlaybackRate(this.#allPaused ? 0 : this.#playbackRate);\n    }\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.AnimationsPlaybackRateChanged);\n    if (this.#scrubberPlayer) {\n      this.#scrubberPlayer.playbackRate = this.effectivePlaybackRate();\n    }\n\n    this.updatePlaybackControls();\n  }\n\n  private updatePlaybackControls(): void {\n    for (const button of this.#playbackRateButtons) {\n      const selected = this.#playbackRate === playbackRates.get(button);\n      button.classList.toggle('selected', selected);\n      button.tabIndex = selected ? 0 : -1;\n    }\n  }\n\n  private controlButtonToggle(): void {\n    if (this.#controlState === ControlState.Play) {\n      this.togglePause(false);\n    } else if (this.#controlState === ControlState.Replay) {\n      this.replay();\n    } else {\n      this.togglePause(true);\n    }\n  }\n\n  private updateControlButton(): void {\n    if (!this.#controlButton) {\n      return;\n    }\n\n    this.#controlButton.setEnabled(Boolean(this.#selectedGroup));\n    if (this.#selectedGroup && this.#selectedGroup.paused()) {\n      this.#controlState = ControlState.Play;\n      this.#controlButton.setToggled(true);\n      this.#controlButton.setTitle(i18nString(UIStrings.playTimeline));\n      this.#controlButton.setGlyph('largeicon-play-animation');\n    } else if (\n        !this.#scrubberPlayer || !this.#scrubberPlayer.currentTime ||\n        this.#scrubberPlayer.currentTime >= this.duration()) {\n      this.#controlState = ControlState.Replay;\n      this.#controlButton.setToggled(true);\n      this.#controlButton.setTitle(i18nString(UIStrings.replayTimeline));\n      this.#controlButton.setGlyph('largeicon-replay-animation');\n    } else {\n      this.#controlState = ControlState.Pause;\n      this.#controlButton.setToggled(false);\n      this.#controlButton.setTitle(i18nString(UIStrings.pauseTimeline));\n      this.#controlButton.setGlyph('largeicon-pause-animation');\n    }\n  }\n\n  private effectivePlaybackRate(): number {\n    return (this.#allPaused || (this.#selectedGroup && this.#selectedGroup.paused())) ? 0 : this.#playbackRate;\n  }\n\n  private togglePause(pause: boolean): void {\n    if (this.#selectedGroup) {\n      this.#selectedGroup.togglePause(pause);\n      const preview = this.#previewMap.get(this.#selectedGroup);\n      if (preview) {\n        preview.element.classList.toggle('paused', pause);\n      }\n    }\n    if (this.#scrubberPlayer) {\n      this.#scrubberPlayer.playbackRate = this.effectivePlaybackRate();\n    }\n    this.updateControlButton();\n  }\n\n  private replay(): void {\n    if (!this.#selectedGroup) {\n      return;\n    }\n    this.#selectedGroup.seekTo(0);\n    this.animateTime(0);\n    this.updateControlButton();\n  }\n\n  duration(): number {\n    return this.#durationInternal;\n  }\n\n  setDuration(duration: number): void {\n    this.#durationInternal = duration;\n    this.scheduleRedraw();\n  }\n\n  private clearTimeline(): void {\n    this.#uiAnimations = [];\n    this.#nodesMap.clear();\n    this.#animationsMap.clear();\n    this.#animationsContainer.removeChildren();\n    this.#durationInternal = this.#defaultDuration;\n    this.#timelineScrubber.classList.add('hidden');\n    this.#selectedGroup = null;\n    if (this.#scrubberPlayer) {\n      this.#scrubberPlayer.cancel();\n    }\n    this.#scrubberPlayer = undefined;\n    this.#currentTime.textContent = '';\n    this.updateControlButton();\n  }\n\n  private reset(): void {\n    this.clearTimeline();\n    if (this.#allPaused) {\n      this.togglePauseAll();\n    } else {\n      this.setPlaybackRate(this.#playbackRate);\n    }\n\n    for (const group of this.#groupBuffer) {\n      group.release();\n    }\n    this.#groupBuffer = [];\n    this.#previewMap.clear();\n    this.#previewContainer.removeChildren();\n    this.#popoverHelper.hidePopover();\n    this.renderGrid();\n  }\n\n  private animationGroupStarted({data}: Common.EventTarget.EventTargetEvent<AnimationGroup>): void {\n    this.addAnimationGroup(data);\n  }\n\n  private addAnimationGroup(group: AnimationGroup): void {\n    function startTimeComparator(left: AnimationGroup, right: AnimationGroup): 0|1|- 1 {\n      if (left.startTime() === right.startTime()) {\n        return 0;\n      }\n      return left.startTime() > right.startTime() ? 1 : -1;\n    }\n\n    const previewGroup = this.#previewMap.get(group);\n    if (previewGroup) {\n      if (this.#selectedGroup === group) {\n        this.syncScrubber();\n      } else {\n        previewGroup.replay();\n      }\n      return;\n    }\n    this.#groupBuffer.sort(startTimeComparator);\n    // Discard oldest groups from buffer if necessary\n    const groupsToDiscard = [];\n    const bufferSize = this.width() / 50;\n    while (this.#groupBuffer.length > bufferSize) {\n      const toDiscard = this.#groupBuffer.splice(this.#groupBuffer[0] === this.#selectedGroup ? 1 : 0, 1);\n      groupsToDiscard.push(toDiscard[0]);\n    }\n    for (const g of groupsToDiscard) {\n      const discardGroup = this.#previewMap.get(g);\n      if (!discardGroup) {\n        continue;\n      }\n      discardGroup.element.remove();\n      this.#previewMap.delete(g);\n      g.release();\n    }\n    // Generate preview\n    const preview = new AnimationGroupPreviewUI(group);\n    this.#groupBuffer.push(group);\n    this.#previewMap.set(group, preview);\n    this.#previewContainer.appendChild(preview.element);\n    preview.removeButton().addEventListener('click', this.removeAnimationGroup.bind(this, group));\n    preview.element.addEventListener('click', this.selectAnimationGroup.bind(this, group));\n    preview.element.addEventListener('keydown', this.handleAnimationGroupKeyDown.bind(this, group));\n    UI.ARIAUtils.setAccessibleName(\n        preview.element, i18nString(UIStrings.animationPreviewS, {PH1: this.#groupBuffer.indexOf(group) + 1}));\n    UI.ARIAUtils.markAsOption(preview.element);\n\n    if (this.#previewMap.size === 1) {\n      const preview = this.#previewMap.get(this.#groupBuffer[0]);\n      if (preview) {\n        preview.element.tabIndex = 0;\n      }\n    }\n  }\n\n  private handleAnimationGroupKeyDown(group: AnimationGroup, event: KeyboardEvent): void {\n    switch (event.key) {\n      case ' ':\n      case 'Enter':\n        this.selectAnimationGroup(group);\n        break;\n      case 'Backspace':\n      case 'Delete':\n        this.removeAnimationGroup(group, event);\n        break;\n      case 'ArrowLeft':\n      case 'ArrowUp':\n        this.focusNextGroup(group, /* target */ event.target, /* focusPrevious */ true);\n        break;\n      case 'ArrowRight':\n      case 'ArrowDown':\n        this.focusNextGroup(group, /* target */ event.target);\n    }\n  }\n\n  private focusNextGroup(group: AnimationGroup, target: EventTarget|null, focusPrevious?: boolean): void {\n    const currentGroupIndex = this.#groupBuffer.indexOf(group);\n    const nextIndex = focusPrevious ? currentGroupIndex - 1 : currentGroupIndex + 1;\n    if (nextIndex < 0 || nextIndex >= this.#groupBuffer.length) {\n      return;\n    }\n    const preview = this.#previewMap.get(this.#groupBuffer[nextIndex]);\n    if (preview) {\n      preview.element.tabIndex = 0;\n      preview.element.focus();\n    }\n\n    if (target) {\n      (target as HTMLElement).tabIndex = -1;\n    }\n  }\n\n  private removeAnimationGroup(group: AnimationGroup, event: Event): void {\n    const currentGroupIndex = this.#groupBuffer.indexOf(group);\n\n    Platform.ArrayUtilities.removeElement(this.#groupBuffer, group);\n    const previewGroup = this.#previewMap.get(group);\n    if (previewGroup) {\n      previewGroup.element.remove();\n    }\n    this.#previewMap.delete(group);\n    group.release();\n    event.consume(true);\n\n    if (this.#selectedGroup === group) {\n      this.clearTimeline();\n      this.renderGrid();\n    }\n\n    const groupLength = this.#groupBuffer.length;\n    if (groupLength === 0) {\n      (this.#clearButton.element as HTMLElement).focus();\n      return;\n    }\n    const nextGroup = currentGroupIndex >= this.#groupBuffer.length ?\n        this.#previewMap.get(this.#groupBuffer[this.#groupBuffer.length - 1]) :\n        this.#previewMap.get(this.#groupBuffer[currentGroupIndex]);\n\n    if (nextGroup) {\n      nextGroup.element.tabIndex = 0;\n      nextGroup.element.focus();\n    }\n  }\n\n  private selectAnimationGroup(group: AnimationGroup): void {\n    function applySelectionClass(this: AnimationTimeline, ui: AnimationGroupPreviewUI, group: AnimationGroup): void {\n      ui.element.classList.toggle('selected', this.#selectedGroup === group);\n    }\n\n    if (this.#selectedGroup === group) {\n      this.togglePause(false);\n      this.replay();\n      return;\n    }\n    this.clearTimeline();\n    this.#selectedGroup = group;\n    this.#previewMap.forEach(applySelectionClass, this);\n    this.setDuration(Math.max(500, group.finiteDuration() + 100));\n    for (const anim of group.animations()) {\n      this.addAnimation(anim);\n    }\n    this.scheduleRedraw();\n    this.#timelineScrubber.classList.remove('hidden');\n    this.togglePause(false);\n    this.replay();\n  }\n\n  private addAnimation(animation: AnimationImpl): void {\n    function nodeResolved(this: AnimationTimeline, node: SDK.DOMModel.DOMNode|null): void {\n      uiAnimation.setNode(node);\n      if (node && nodeUI) {\n        nodeUI.nodeResolved(node);\n        nodeUIsByNode.set(node, nodeUI);\n      }\n    }\n\n    let nodeUI = this.#nodesMap.get(animation.source().backendNodeId());\n    if (!nodeUI) {\n      nodeUI = new NodeUI(animation.source());\n      this.#animationsContainer.appendChild(nodeUI.element);\n      this.#nodesMap.set(animation.source().backendNodeId(), nodeUI);\n    }\n    const nodeRow = nodeUI.createNewRow();\n    const uiAnimation = new AnimationUI(animation, this, nodeRow);\n    animation.source().deferredNode().resolve(nodeResolved.bind(this));\n    this.#uiAnimations.push(uiAnimation);\n    this.#animationsMap.set(animation.id(), animation);\n  }\n\n  private nodeRemoved(\n      event: Common.EventTarget.EventTargetEvent<{node: SDK.DOMModel.DOMNode, parent: SDK.DOMModel.DOMNode}>): void {\n    const {node} = event.data;\n    const nodeUI = nodeUIsByNode.get(node);\n    if (nodeUI) {\n      nodeUI.nodeRemoved();\n    }\n  }\n\n  private renderGrid(): void {\n    /** @const */ const gridSize = 250;\n    const gridWidth = (this.width() + 10).toString();\n    const gridHeight = ((this.#cachedTimelineHeight || 0) + 30).toString();\n\n    this.#gridWrapper.style.width = gridWidth + 'px';\n    this.#gridWrapper.style.height = gridHeight.toString() + 'px';\n    this.#grid.setAttribute('width', gridWidth);\n    this.#grid.setAttribute('height', gridHeight.toString());\n    this.#grid.setAttribute('shape-rendering', 'crispEdges');\n    this.#grid.removeChildren();\n    let lastDraw: number|undefined = undefined;\n    for (let time = 0; time < this.duration(); time += gridSize) {\n      const line = UI.UIUtils.createSVGChild(this.#grid, 'rect', 'animation-timeline-grid-line');\n      line.setAttribute('x', (time * this.pixelMsRatio() + 10).toString());\n      line.setAttribute('y', '23');\n      line.setAttribute('height', '100%');\n      line.setAttribute('width', '1');\n    }\n    for (let time = 0; time < this.duration(); time += gridSize) {\n      const gridWidth = time * this.pixelMsRatio();\n      if (lastDraw === undefined || gridWidth - lastDraw > 50) {\n        lastDraw = gridWidth;\n        const label = UI.UIUtils.createSVGChild(this.#grid, 'text', 'animation-timeline-grid-label');\n        label.textContent = i18n.TimeUtilities.millisToString(time);\n        label.setAttribute('x', (gridWidth + 10).toString());\n        label.setAttribute('y', '16');\n      }\n    }\n  }\n\n  scheduleRedraw(): void {\n    this.#renderQueue = [];\n    for (const ui of this.#uiAnimations) {\n      this.#renderQueue.push(ui);\n    }\n    if (this.#redrawing) {\n      return;\n    }\n    this.#redrawing = true;\n    this.renderGrid();\n    this.#animationsContainer.window().requestAnimationFrame(this.render.bind(this));\n  }\n\n  private render(timestamp?: number): void {\n    while (this.#renderQueue.length && (!timestamp || window.performance.now() - timestamp < 50)) {\n      const animationUI = this.#renderQueue.shift();\n      if (animationUI) {\n        animationUI.redraw();\n      }\n    }\n    if (this.#renderQueue.length) {\n      this.#animationsContainer.window().requestAnimationFrame(this.render.bind(this));\n    } else {\n      this.#redrawing = undefined;\n    }\n  }\n\n  onResize(): void {\n    this.#cachedTimelineWidth = Math.max(0, this.#animationsContainer.offsetWidth - this.#timelineControlsWidth) || 0;\n    this.#cachedTimelineHeight = this.#animationsContainer.offsetHeight;\n    this.scheduleRedraw();\n    if (this.#scrubberPlayer) {\n      this.syncScrubber();\n    }\n    this.#gridOffsetLeft = undefined;\n  }\n\n  width(): number {\n    return this.#cachedTimelineWidth || 0;\n  }\n\n  private resizeWindow(animation: AnimationImpl): boolean {\n    let resized = false;\n\n    // This shows at most 3 iterations\n    const duration = animation.source().duration() * Math.min(2, animation.source().iterations());\n    const requiredDuration = animation.source().delay() + duration + animation.source().endDelay();\n    if (requiredDuration > this.#durationInternal) {\n      resized = true;\n      this.#durationInternal = requiredDuration + 200;\n    }\n    return resized;\n  }\n\n  private syncScrubber(): void {\n    if (!this.#selectedGroup) {\n      return;\n    }\n    void this.#selectedGroup.currentTimePromise()\n        .then(this.animateTime.bind(this))\n        .then(this.updateControlButton.bind(this));\n  }\n\n  private animateTime(currentTime: number): void {\n    if (this.#scrubberPlayer) {\n      this.#scrubberPlayer.cancel();\n    }\n\n    this.#scrubberPlayer = this.#timelineScrubber.animate(\n        [{transform: 'translateX(0px)'}, {transform: 'translateX(' + this.width() + 'px)'}],\n        {duration: this.duration(), fill: 'forwards'});\n    this.#scrubberPlayer.playbackRate = this.effectivePlaybackRate();\n    this.#scrubberPlayer.onfinish = this.updateControlButton.bind(this);\n    this.#scrubberPlayer.currentTime = currentTime;\n    this.element.window().requestAnimationFrame(this.updateScrubber.bind(this));\n  }\n\n  pixelMsRatio(): number {\n    return this.width() / this.duration() || 0;\n  }\n\n  private updateScrubber(_timestamp: number): void {\n    if (!this.#scrubberPlayer) {\n      return;\n    }\n    this.#currentTime.textContent = i18n.TimeUtilities.millisToString(this.#scrubberPlayer.currentTime || 0);\n    if (this.#scrubberPlayer.playState.toString() === 'pending' || this.#scrubberPlayer.playState === 'running') {\n      this.element.window().requestAnimationFrame(this.updateScrubber.bind(this));\n    } else if (this.#scrubberPlayer.playState === 'finished') {\n      this.#currentTime.textContent = '';\n    }\n  }\n\n  private repositionScrubber(event: Event): boolean {\n    if (!this.#selectedGroup) {\n      return false;\n    }\n\n    // Seek to current mouse position.\n    if (!this.#gridOffsetLeft) {\n      this.#gridOffsetLeft = this.#grid.totalOffsetLeft() + 10;\n    }\n\n    const {x} = (event as any);  // eslint-disable-line @typescript-eslint/no-explicit-any\n    const seekTime = Math.max(0, x - this.#gridOffsetLeft) / this.pixelMsRatio();\n    this.#selectedGroup.seekTo(seekTime);\n    this.togglePause(true);\n    this.animateTime(seekTime);\n\n    // Interface with scrubber drag.\n    this.#originalScrubberTime = seekTime;\n    this.#originalMousePosition = x;\n    return true;\n  }\n\n  private scrubberDragStart(event: Event): boolean {\n    if (!this.#scrubberPlayer || !this.#selectedGroup) {\n      return false;\n    }\n\n    this.#originalScrubberTime = this.#scrubberPlayer.currentTime;\n    this.#timelineScrubber.classList.remove('animation-timeline-end');\n    this.#scrubberPlayer.pause();\n\n    const {x} = (event as any);  // eslint-disable-line @typescript-eslint/no-explicit-any\n    this.#originalMousePosition = x;\n\n    this.togglePause(true);\n    return true;\n  }\n\n  private scrubberDragMove(event: Event): void {\n    const {x} = (event as any);  // eslint-disable-line @typescript-eslint/no-explicit-any\n    const delta = x - (this.#originalMousePosition || 0);\n    const currentTime =\n        Math.max(0, Math.min((this.#originalScrubberTime || 0) + delta / this.pixelMsRatio(), this.duration()));\n    if (this.#scrubberPlayer) {\n      this.#scrubberPlayer.currentTime = currentTime;\n    }\n    this.#currentTime.textContent = i18n.TimeUtilities.millisToString(Math.round(currentTime));\n\n    if (this.#selectedGroup) {\n      this.#selectedGroup.seekTo(currentTime);\n    }\n  }\n\n  private scrubberDragEnd(_event: Event): void {\n    if (this.#scrubberPlayer) {\n      const currentTime = Math.max(0, this.#scrubberPlayer.currentTime || 0);\n      this.#scrubberPlayer.play();\n      this.#scrubberPlayer.currentTime = currentTime;\n    }\n    this.#currentTime.window().requestAnimationFrame(this.updateScrubber.bind(this));\n  }\n}\n\nexport const GlobalPlaybackRates = [1, 0.25, 0.1];\n\nconst enum ControlState {\n  Play = 'play-outline',\n  Replay = 'replay-outline',\n  Pause = 'pause-outline',\n}\n\nexport class NodeUI {\n  element: HTMLDivElement;\n  readonly #description: HTMLElement;\n  readonly #timelineElement: HTMLElement;\n  #node?: SDK.DOMModel.DOMNode|null;\n\n  constructor(_animationEffect: AnimationEffect) {\n    this.element = document.createElement('div');\n    this.element.classList.add('animation-node-row');\n    this.#description = this.element.createChild('div', 'animation-node-description');\n    this.#timelineElement = this.element.createChild('div', 'animation-node-timeline');\n    UI.ARIAUtils.markAsApplication(this.#timelineElement);\n  }\n\n  nodeResolved(node: SDK.DOMModel.DOMNode|null): void {\n    if (!node) {\n      UI.UIUtils.createTextChild(this.#description, '<node>');\n      return;\n    }\n    this.#node = node;\n    this.nodeChanged();\n    void Common.Linkifier.Linkifier.linkify(node).then(link => this.#description.appendChild(link));\n    if (!node.ownerDocument) {\n      this.nodeRemoved();\n    }\n  }\n\n  createNewRow(): Element {\n    return this.#timelineElement.createChild('div', 'animation-timeline-row');\n  }\n\n  nodeRemoved(): void {\n    this.element.classList.add('animation-node-removed');\n    this.#node = null;\n  }\n\n  nodeChanged(): void {\n    let animationNodeSelected = false;\n    if (this.#node) {\n      animationNodeSelected = (this.#node === UI.Context.Context.instance().flavor(SDK.DOMModel.DOMNode));\n    }\n\n    this.element.classList.toggle('animation-node-selected', animationNodeSelected);\n  }\n}\n\nexport class StepTimingFunction {\n  steps: number;\n  stepAtPosition: string;\n  constructor(steps: number, stepAtPosition: string) {\n    this.steps = steps;\n    this.stepAtPosition = stepAtPosition;\n  }\n\n  static parse(text: string): StepTimingFunction|null {\n    let match = text.match(/^steps\\((\\d+), (start|middle)\\)$/);\n    if (match) {\n      return new StepTimingFunction(parseInt(match[1], 10), match[2]);\n    }\n    match = text.match(/^steps\\((\\d+)\\)$/);\n    if (match) {\n      return new StepTimingFunction(parseInt(match[1], 10), 'end');\n    }\n    return null;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
