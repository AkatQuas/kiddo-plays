{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/changes/ChangesView.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport type * as Formatter from '../../models/formatter/formatter.js';\nimport {formatCSSChangesFromDiff} from '../../panels/utils/utils.js';\nimport * as Diff from '../../third_party/diff/diff.js';\nimport * as DiffView from '../../ui/components/diff_view/diff_view.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport changesViewStyles from './changesView.css.js';\n\nimport type * as Workspace from '../../models/workspace/workspace.js';\nimport * as WorkspaceDiff from '../../models/workspace_diff/workspace_diff.js';\n\nimport {ChangesSidebar, Events} from './ChangesSidebar.js';\n\nconst UIStrings = {\n  /**\n  *@description Screen reader/tooltip label for a button in the Changes tool that reverts all changes to the currently open file.\n  */\n  revertAllChangesToCurrentFile: 'Revert all changes to current file',\n  /**\n  *@description Screen reader/tooltip label for a button in the Changes tool that copies all changes from the currently open file.\n  */\n  copyAllChangesFromCurrentFile: 'Copy all changes from current file',\n  /**\n  *@description Text in Changes View of the Changes tab\n  */\n  noChanges: 'No changes',\n  /**\n  *@description Text in Changes View of the Changes tab\n  */\n  binaryData: 'Binary data',\n  /**\n  * @description Text in the Changes tab that indicates how many lines of code have changed in the\n  * selected file. An insertion refers to an added line of code. The (+) is a visual cue to indicate\n  * lines were added (not translatable).\n  */\n  sInsertions: '{n, plural, =1 {# insertion (+)} other {# insertions (+)}}',\n  /**\n  * @description Text in the Changes tab that indicates how many lines of code have changed in the\n  * selected file. A deletion refers to a removed line of code. The (-) is a visual cue to indicate\n  * lines were removed (not translatable).\n  */\n  sDeletions: '{n, plural, =1 {# deletion (-)} other {# deletions (-)}}',\n  /**\n  *@description Text for a button in the Changes tool that copies all the changes from the currently open file.\n  */\n  copy: 'Copy',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/changes/ChangesView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nfunction diffStats(diff: Diff.Diff.DiffArray): string {\n  const insertions =\n      diff.reduce((ins, token) => ins + (token[0] === Diff.Diff.Operation.Insert ? token[1].length : 0), 0);\n  const deletions =\n      diff.reduce((ins, token) => ins + (token[0] === Diff.Diff.Operation.Delete ? token[1].length : 0), 0);\n  const deletionText = i18nString(UIStrings.sDeletions, {n: deletions});\n  const insertionText = i18nString(UIStrings.sInsertions, {n: insertions});\n  return `${insertionText}, ${deletionText}`;\n}\n\nlet changesViewInstance: ChangesView;\n\nexport class ChangesView extends UI.Widget.VBox {\n  private emptyWidget: UI.EmptyWidget.EmptyWidget;\n  private readonly workspaceDiff: WorkspaceDiff.WorkspaceDiff.WorkspaceDiffImpl;\n  readonly changesSidebar: ChangesSidebar;\n  private selectedUISourceCode: Workspace.UISourceCode.UISourceCode|null;\n  #selectedSourceCodeFormattedMapping?: Formatter.ScriptFormatter.FormatterSourceMapping;\n  private readonly diffContainer: HTMLElement;\n  private readonly toolbar: UI.Toolbar.Toolbar;\n  private readonly diffStats: UI.Toolbar.ToolbarText;\n  private readonly diffView: DiffView.DiffView.DiffView;\n  private readonly copyButton: UI.Toolbar.ToolbarButton;\n  private readonly copyButtonSeparator: UI.Toolbar.ToolbarSeparator;\n\n  private constructor() {\n    super(true);\n\n    const splitWidget = new UI.SplitWidget.SplitWidget(true /* vertical */, false /* sidebar on left */);\n    const mainWidget = new UI.Widget.Widget();\n    splitWidget.setMainWidget(mainWidget);\n    splitWidget.show(this.contentElement);\n\n    this.emptyWidget = new UI.EmptyWidget.EmptyWidget('');\n    this.emptyWidget.show(mainWidget.element);\n\n    this.workspaceDiff = WorkspaceDiff.WorkspaceDiff.workspaceDiff();\n    this.changesSidebar = new ChangesSidebar(this.workspaceDiff);\n    this.changesSidebar.addEventListener(Events.SelectedUISourceCodeChanged, this.selectedUISourceCodeChanged, this);\n    splitWidget.setSidebarWidget(this.changesSidebar);\n\n    this.selectedUISourceCode = null;\n\n    this.diffContainer = mainWidget.element.createChild('div', 'diff-container');\n    UI.ARIAUtils.markAsTabpanel(this.diffContainer);\n    this.diffContainer.addEventListener('click', event => this.click(event));\n\n    this.diffView = this.diffContainer.appendChild(new DiffView.DiffView.DiffView());\n\n    this.toolbar = new UI.Toolbar.Toolbar('changes-toolbar', mainWidget.element);\n    const revertButton =\n        new UI.Toolbar.ToolbarButton(i18nString(UIStrings.revertAllChangesToCurrentFile), 'largeicon-undo');\n    revertButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.revert.bind(this));\n    this.toolbar.appendToolbarItem(revertButton);\n    this.diffStats = new UI.Toolbar.ToolbarText('');\n    this.toolbar.appendToolbarItem(this.diffStats);\n\n    this.copyButton = new UI.Toolbar.ToolbarButton(\n        i18nString(UIStrings.copyAllChangesFromCurrentFile), 'largeicon-copy', UIStrings.copy);\n    this.copyButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.copyChanges.bind(this));\n    this.copyButtonSeparator = new UI.Toolbar.ToolbarSeparator();\n    this.toolbar.setEnabled(false);\n\n    this.hideDiff(i18nString(UIStrings.noChanges));\n    this.selectedUISourceCodeChanged();\n  }\n\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): ChangesView {\n    const {forceNew} = opts;\n    if (!changesViewInstance || forceNew) {\n      changesViewInstance = new ChangesView();\n    }\n\n    return changesViewInstance;\n  }\n\n  private selectedUISourceCodeChanged(): void {\n    this.revealUISourceCode(this.changesSidebar.selectedUISourceCode());\n    if (this.selectedUISourceCode?.contentType() === Common.ResourceType.resourceTypes.Stylesheet) {\n      this.toolbar.appendToolbarItem(this.copyButtonSeparator);\n      this.toolbar.appendToolbarItem(this.copyButton);\n    } else {\n      this.toolbar.removeToolbarItem(this.copyButtonSeparator);\n      this.toolbar.removeToolbarItem(this.copyButton);\n    }\n  }\n\n  private revert(): void {\n    const uiSourceCode = this.selectedUISourceCode;\n    if (!uiSourceCode) {\n      return;\n    }\n    void this.workspaceDiff.revertToOriginal(uiSourceCode);\n  }\n\n  private async copyChanges(): Promise<void> {\n    const uiSourceCode = this.selectedUISourceCode;\n    if (!uiSourceCode) {\n      return;\n    }\n    const diffResponse = await this.workspaceDiff.requestDiff(uiSourceCode, {shouldFormatDiff: true});\n    // Diff array with real diff will contain at least 2 lines.\n    if (!diffResponse || diffResponse?.diff.length < 2) {\n      return;\n    }\n    const changes = await formatCSSChangesFromDiff(diffResponse.diff);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(changes);\n  }\n\n  private click(event: MouseEvent): void {\n    if (!this.selectedUISourceCode) {\n      return;\n    }\n\n    for (const target of event.composedPath()) {\n      if (!(target instanceof HTMLElement)) {\n        continue;\n      }\n      const selection = target.ownerDocument.getSelection();\n      if (selection?.toString()) {\n        // We abort source revelation when user has text selection.\n        break;\n      }\n      if (target.classList.contains('diff-line-content') && target.hasAttribute('data-line-number')) {\n        let lineNumber = Number(target.dataset.lineNumber) - 1;\n        // Unfortunately, caretRangeFromPoint is broken in shadow\n        // roots, which makes determining the character offset more\n        // work than justified here.\n        if (Root.Runtime.experiments.isEnabled(Root.Runtime.ExperimentName.PRECISE_CHANGES) &&\n            this.#selectedSourceCodeFormattedMapping) {\n          lineNumber = this.#selectedSourceCodeFormattedMapping.formattedToOriginal(lineNumber, 0)[0];\n        }\n        void Common.Revealer.reveal(this.selectedUISourceCode.uiLocation(lineNumber, 0), false);\n        event.consume(true);\n        break;\n      } else if (target.classList.contains('diff-listing')) {\n        break;\n      }\n    }\n  }\n\n  private revealUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode|null): void {\n    if (this.selectedUISourceCode === uiSourceCode) {\n      return;\n    }\n\n    if (this.selectedUISourceCode) {\n      this.workspaceDiff.unsubscribeFromDiffChange(this.selectedUISourceCode, this.refreshDiff, this);\n    }\n    if (uiSourceCode && this.isShowing()) {\n      this.workspaceDiff.subscribeToDiffChange(uiSourceCode, this.refreshDiff, this);\n    }\n\n    this.selectedUISourceCode = uiSourceCode;\n    void this.refreshDiff();\n  }\n\n  wasShown(): void {\n    void this.refreshDiff();\n    this.registerCSSFiles([changesViewStyles]);\n  }\n\n  private async refreshDiff(): Promise<void> {\n    if (!this.isShowing()) {\n      return;\n    }\n\n    if (!this.selectedUISourceCode) {\n      this.renderDiffRows();\n      return;\n    }\n    const uiSourceCode = this.selectedUISourceCode;\n    if (!uiSourceCode.contentType().isTextType()) {\n      this.hideDiff(i18nString(UIStrings.binaryData));\n      return;\n    }\n    const diffResponse = await this.workspaceDiff.requestDiff(\n        uiSourceCode,\n        {shouldFormatDiff: Root.Runtime.experiments.isEnabled(Root.Runtime.ExperimentName.PRECISE_CHANGES)});\n    if (this.selectedUISourceCode !== uiSourceCode) {\n      return;\n    }\n    this.#selectedSourceCodeFormattedMapping = diffResponse?.formattedCurrentMapping;\n    this.renderDiffRows(diffResponse?.diff);\n  }\n\n  private hideDiff(message: string): void {\n    this.diffStats.setText('');\n    this.toolbar.setEnabled(false);\n    this.diffContainer.style.display = 'none';\n    this.emptyWidget.text = message;\n    this.emptyWidget.showWidget();\n  }\n\n  private renderDiffRows(diff?: Diff.Diff.DiffArray): void {\n    if (!diff || (diff.length === 1 && diff[0][0] === Diff.Diff.Operation.Equal)) {\n      this.hideDiff(i18nString(UIStrings.noChanges));\n    } else {\n      this.diffStats.setText(diffStats(diff));\n      this.toolbar.setEnabled(true);\n      this.emptyWidget.hideWidget();\n      const mimeType = (this.selectedUISourceCode as Workspace.UISourceCode.UISourceCode).mimeType();\n      this.diffContainer.style.display = 'block';\n      this.diffView.data = {diff, mimeType};\n    }\n  }\n}\n\nlet diffUILocationRevealerInstance: DiffUILocationRevealer;\nexport class DiffUILocationRevealer implements Common.Revealer.Revealer {\n  static instance(opts: {forceNew: boolean} = {forceNew: false}): DiffUILocationRevealer {\n    const {forceNew} = opts;\n    if (!diffUILocationRevealerInstance || forceNew) {\n      diffUILocationRevealerInstance = new DiffUILocationRevealer();\n    }\n\n    return diffUILocationRevealerInstance;\n  }\n\n  async reveal(diffUILocation: Object, omitFocus?: boolean|undefined): Promise<void> {\n    if (!(diffUILocation instanceof WorkspaceDiff.WorkspaceDiff.DiffUILocation)) {\n      throw new Error('Internal error: not a diff ui location');\n    }\n    await UI.ViewManager.ViewManager.instance().showView('changes.changes');\n    ChangesView.instance().changesSidebar.selectUISourceCode(diffUILocation.uiSourceCode, omitFocus);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
