{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/coverage/CoverageView.ts"],
  "sourcesContent": ["// Copyright (c) 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {CoverageDecorationManager} from './CoverageDecorationManager.js';\nimport {CoverageListView} from './CoverageListView.js';\nimport coverageViewStyles from './coverageView.css.js';\n\nimport type {CoverageInfo, URLCoverageInfo} from './CoverageModel.js';\nimport {CoverageModel, Events, CoverageType} from './CoverageModel.js';\n\nconst UIStrings = {\n  /**\n  *@description Tooltip in Coverage List View of the Coverage tab for selecting JavaScript coverage mode\n  */\n  chooseCoverageGranularityPer:\n      'Choose coverage granularity: Per function has low overhead, per block has significant overhead.',\n  /**\n  *@description Text in Coverage List View of the Coverage tab\n  */\n  perFunction: 'Per function',\n  /**\n  *@description Text in Coverage List View of the Coverage tab\n  */\n  perBlock: 'Per block',\n  /**\n  *@description Text to clear everything\n  */\n  clearAll: 'Clear all',\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon download button in the Coverage View of the Coverage tab\n  */\n  export: 'Export...',\n  /**\n  *@description Text in Coverage View of the Coverage tab\n  */\n  urlFilter: 'URL filter',\n  /**\n  *@description Label for the type filter in the Converage Panel\n  */\n  filterCoverageByType: 'Filter coverage by type',\n  /**\n  *@description Text for everything\n  */\n  all: 'All',\n  /**\n  *@description Text that appears on a button for the css resource type filter.\n  */\n  css: 'CSS',\n  /**\n  *@description Text in Timeline Tree View of the Performance panel\n  */\n  javascript: 'JavaScript',\n  /**\n  *@description Tooltip text that appears on the setting when hovering over it in Coverage View of the Coverage tab\n  */\n  includeExtensionContentScripts: 'Include extension content scripts',\n  /**\n  *@description Title for a type of source files\n  */\n  contentScripts: 'Content scripts',\n  /**\n  *@description Message in Coverage View of the Coverage tab\n  *@example {record button icon} PH1\n  */\n  clickTheReloadButtonSToReloadAnd: 'Click the reload button {PH1} to reload and start capturing coverage.',\n  /**\n  *@description Message in Coverage View of the Coverage tab\n  *@example {record button icon} PH1\n  */\n  clickTheRecordButtonSToStart: 'Click the record button {PH1} to start capturing coverage.',\n  /**\n  *@description Footer message in Coverage View of the Coverage tab\n  *@example {300k used, 600k unused} PH1\n  *@example {500k used, 800k unused} PH2\n  */\n  filteredSTotalS: 'Filtered: {PH1}  Total: {PH2}',\n  /**\n  *@description Footer message in Coverage View of the Coverage tab\n  *@example {1.5 MB} PH1\n  *@example {2.1 MB} PH2\n  *@example {71%} PH3\n  *@example {29%} PH4\n  */\n  sOfSSUsedSoFarSUnused: '{PH1} of {PH2} ({PH3}%) used so far, {PH4} unused.',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/coverage/CoverageView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet coverageViewInstance: CoverageView;\n\nexport class CoverageView extends UI.Widget.VBox {\n  private model: CoverageModel|null;\n  private decorationManager: CoverageDecorationManager|null;\n  private resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel|null;\n  private readonly coverageTypeComboBox: UI.Toolbar.ToolbarComboBox;\n  private readonly coverageTypeComboBoxSetting: Common.Settings.Setting<number>;\n  private toggleRecordAction: UI.ActionRegistration.Action;\n  private readonly toggleRecordButton: UI.Toolbar.ToolbarButton;\n  private inlineReloadButton: Element|null;\n  private readonly startWithReloadButton: UI.Toolbar.ToolbarButton|undefined;\n  private readonly clearButton: UI.Toolbar.ToolbarButton;\n  private readonly saveButton: UI.Toolbar.ToolbarButton;\n  private textFilterRegExp: RegExp|null;\n  private readonly filterInput: UI.Toolbar.ToolbarInput;\n  private typeFilterValue: number|null;\n  private readonly filterByTypeComboBox: UI.Toolbar.ToolbarComboBox;\n  private showContentScriptsSetting: Common.Settings.Setting<boolean>;\n  private readonly contentScriptsCheckbox: UI.Toolbar.ToolbarSettingCheckbox;\n  private readonly coverageResultsElement: HTMLElement;\n  private readonly landingPage: UI.Widget.VBox;\n  private listView: CoverageListView;\n  private readonly statusToolbarElement: HTMLElement;\n  private statusMessageElement: HTMLElement;\n\n  private constructor() {\n    super(true);\n\n    this.model = null;\n    this.decorationManager = null;\n    this.resourceTreeModel = null;\n\n    const toolbarContainer = this.contentElement.createChild('div', 'coverage-toolbar-container');\n    const toolbar = new UI.Toolbar.Toolbar('coverage-toolbar', toolbarContainer);\n    toolbar.makeWrappable(true);\n\n    this.coverageTypeComboBox = new UI.Toolbar.ToolbarComboBox(\n        this.onCoverageTypeComboBoxSelectionChanged.bind(this), i18nString(UIStrings.chooseCoverageGranularityPer));\n    const coverageTypes = [\n      {\n        label: i18nString(UIStrings.perFunction),\n        value: CoverageType.JavaScript | CoverageType.JavaScriptPerFunction,\n      },\n      {\n        label: i18nString(UIStrings.perBlock),\n        value: CoverageType.JavaScript,\n      },\n    ];\n    for (const type of coverageTypes) {\n      this.coverageTypeComboBox.addOption(this.coverageTypeComboBox.createOption(type.label, `${type.value}`));\n    }\n    this.coverageTypeComboBoxSetting = Common.Settings.Settings.instance().createSetting('coverageViewCoverageType', 0);\n    this.coverageTypeComboBox.setSelectedIndex(this.coverageTypeComboBoxSetting.get());\n    this.coverageTypeComboBox.setEnabled(true);\n    toolbar.appendToolbarItem(this.coverageTypeComboBox);\n    this.toggleRecordAction =\n        UI.ActionRegistry.ActionRegistry.instance().action('coverage.toggle-recording') as UI.ActionRegistration.Action;\n    this.toggleRecordButton = UI.Toolbar.Toolbar.createActionButton(this.toggleRecordAction);\n    toolbar.appendToolbarItem(this.toggleRecordButton);\n\n    const mainTarget = SDK.TargetManager.TargetManager.instance().mainTarget();\n    const mainTargetSupportsRecordOnReload = mainTarget && mainTarget.model(SDK.ResourceTreeModel.ResourceTreeModel);\n    this.inlineReloadButton = null;\n    if (mainTargetSupportsRecordOnReload) {\n      const startWithReloadAction = UI.ActionRegistry.ActionRegistry.instance().action('coverage.start-with-reload') as\n          UI.ActionRegistration.Action;\n      this.startWithReloadButton = UI.Toolbar.Toolbar.createActionButton(startWithReloadAction);\n      toolbar.appendToolbarItem(this.startWithReloadButton);\n      this.toggleRecordButton.setEnabled(false);\n      this.toggleRecordButton.setVisible(false);\n    }\n    this.clearButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.clearAll), 'largeicon-clear');\n    this.clearButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.clear.bind(this));\n    toolbar.appendToolbarItem(this.clearButton);\n\n    toolbar.appendSeparator();\n    this.saveButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.export), 'largeicon-download');\n    this.saveButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, _event => {\n      void this.exportReport();\n    });\n    toolbar.appendToolbarItem(this.saveButton);\n    this.saveButton.setEnabled(false);\n\n    this.textFilterRegExp = null;\n    toolbar.appendSeparator();\n    this.filterInput = new UI.Toolbar.ToolbarInput(i18nString(UIStrings.urlFilter), '', 0.4, 1);\n    this.filterInput.setEnabled(false);\n    this.filterInput.addEventListener(UI.Toolbar.ToolbarInput.Event.TextChanged, this.onFilterChanged, this);\n    toolbar.appendToolbarItem(this.filterInput);\n\n    toolbar.appendSeparator();\n\n    this.typeFilterValue = null;\n    this.filterByTypeComboBox = new UI.Toolbar.ToolbarComboBox(\n        this.onFilterByTypeChanged.bind(this), i18nString(UIStrings.filterCoverageByType));\n    const options = [\n      {\n        label: i18nString(UIStrings.all),\n        value: '',\n      },\n      {\n        label: i18nString(UIStrings.css),\n        value: CoverageType.CSS,\n      },\n      {\n        label: i18nString(UIStrings.javascript),\n        value: CoverageType.JavaScript | CoverageType.JavaScriptPerFunction,\n      },\n    ];\n    for (const option of options) {\n      this.filterByTypeComboBox.addOption(this.filterByTypeComboBox.createOption(option.label, `${option.value}`));\n    }\n\n    this.filterByTypeComboBox.setSelectedIndex(0);\n    this.filterByTypeComboBox.setEnabled(false);\n    toolbar.appendToolbarItem(this.filterByTypeComboBox);\n\n    toolbar.appendSeparator();\n    this.showContentScriptsSetting = Common.Settings.Settings.instance().createSetting('showContentScripts', false);\n    this.showContentScriptsSetting.addChangeListener(this.onFilterChanged, this);\n    this.contentScriptsCheckbox = new UI.Toolbar.ToolbarSettingCheckbox(\n        this.showContentScriptsSetting, i18nString(UIStrings.includeExtensionContentScripts),\n        i18nString(UIStrings.contentScripts));\n    this.contentScriptsCheckbox.setEnabled(false);\n    toolbar.appendToolbarItem(this.contentScriptsCheckbox);\n\n    this.coverageResultsElement = this.contentElement.createChild('div', 'coverage-results');\n    this.landingPage = this.buildLandingPage();\n    this.listView = new CoverageListView(this.isVisible.bind(this, false));\n\n    this.statusToolbarElement = this.contentElement.createChild('div', 'coverage-toolbar-summary');\n    this.statusMessageElement = this.statusToolbarElement.createChild('div', 'coverage-message');\n    this.landingPage.show(this.coverageResultsElement);\n  }\n\n  static instance(): CoverageView {\n    if (!coverageViewInstance) {\n      coverageViewInstance = new CoverageView();\n    }\n    return coverageViewInstance;\n  }\n\n  private buildLandingPage(): UI.Widget.VBox {\n    const widget = new UI.Widget.VBox();\n    let message;\n    if (this.startWithReloadButton) {\n      this.inlineReloadButton =\n          UI.UIUtils.createInlineButton(UI.Toolbar.Toolbar.createActionButtonForId('coverage.start-with-reload'));\n      message = i18n.i18n.getFormatLocalizedString(\n          str_, UIStrings.clickTheReloadButtonSToReloadAnd, {PH1: this.inlineReloadButton});\n    } else {\n      const recordButton =\n          UI.UIUtils.createInlineButton(UI.Toolbar.Toolbar.createActionButton(this.toggleRecordAction));\n      message = i18n.i18n.getFormatLocalizedString(str_, UIStrings.clickTheRecordButtonSToStart, {PH1: recordButton});\n    }\n    message.classList.add('message');\n    widget.contentElement.appendChild(message);\n    widget.element.classList.add('landing-page');\n    return widget;\n  }\n\n  private clear(): void {\n    if (this.model) {\n      this.model.reset();\n    }\n    this.reset();\n  }\n\n  private reset(): void {\n    if (this.decorationManager) {\n      this.decorationManager.dispose();\n      this.decorationManager = null;\n    }\n    this.listView.reset();\n    this.listView.detach();\n    this.landingPage.show(this.coverageResultsElement);\n    this.statusMessageElement.textContent = '';\n    this.filterInput.setEnabled(false);\n    this.filterByTypeComboBox.setEnabled(false);\n    this.contentScriptsCheckbox.setEnabled(false);\n    this.saveButton.setEnabled(false);\n  }\n\n  toggleRecording(): void {\n    const enable = !this.toggleRecordAction.toggled();\n\n    if (enable) {\n      void this.startRecording({reload: false, jsCoveragePerBlock: this.isBlockCoverageSelected()});\n    } else {\n      void this.stopRecording();\n    }\n  }\n\n  isBlockCoverageSelected(): boolean {\n    const option = this.coverageTypeComboBox.selectedOption();\n    const coverageType = Number(option ? option.value : Number.NaN);\n    // Check that Coverage.CoverageType.JavaScriptPerFunction is not present.\n    return coverageType === CoverageType.JavaScript;\n  }\n\n  private selectCoverageType(jsCoveragePerBlock: boolean): void {\n    const selectedIndex = jsCoveragePerBlock ? 1 : 0;\n    this.coverageTypeComboBox.setSelectedIndex(selectedIndex);\n  }\n\n  private onCoverageTypeComboBoxSelectionChanged(): void {\n    this.coverageTypeComboBoxSetting.set(this.coverageTypeComboBox.selectedIndex());\n  }\n\n  async ensureRecordingStarted(): Promise<void> {\n    const enabled = this.toggleRecordAction.toggled();\n\n    if (enabled) {\n      await this.stopRecording();\n    }\n    await this.startRecording({reload: false, jsCoveragePerBlock: false});\n  }\n\n  async startRecording(options: {reload: (boolean|undefined), jsCoveragePerBlock: (boolean|undefined)}|\n                       null): Promise<void> {\n    let hadFocus, reloadButtonFocused;\n    if ((this.startWithReloadButton && this.startWithReloadButton.element.hasFocus()) ||\n        (this.inlineReloadButton && this.inlineReloadButton.hasFocus())) {\n      reloadButtonFocused = true;\n    } else if (this.hasFocus()) {\n      hadFocus = true;\n    }\n\n    this.reset();\n    const mainTarget = SDK.TargetManager.TargetManager.instance().mainTarget();\n    if (!mainTarget) {\n      return;\n    }\n\n    const {reload, jsCoveragePerBlock} = {reload: false, jsCoveragePerBlock: false, ...options};\n\n    if (!this.model || reload) {\n      this.model = mainTarget.model(CoverageModel);\n    }\n    if (!this.model) {\n      return;\n    }\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.CoverageStarted);\n    if (jsCoveragePerBlock) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.CoverageStartedPerBlock);\n    }\n    const success = await this.model.start(Boolean(jsCoveragePerBlock));\n    if (!success) {\n      return;\n    }\n    this.selectCoverageType(Boolean(jsCoveragePerBlock));\n\n    this.model.addEventListener(Events.CoverageUpdated, this.onCoverageDataReceived, this);\n    this.resourceTreeModel =\n        mainTarget.model(SDK.ResourceTreeModel.ResourceTreeModel) as SDK.ResourceTreeModel.ResourceTreeModel | null;\n    if (this.resourceTreeModel) {\n      this.resourceTreeModel.addEventListener(\n          SDK.ResourceTreeModel.Events.MainFrameNavigated, this.onMainFrameNavigated, this);\n    }\n    this.decorationManager = new CoverageDecorationManager(this.model as CoverageModel);\n    this.toggleRecordAction.setToggled(true);\n    this.clearButton.setEnabled(false);\n    if (this.startWithReloadButton) {\n      this.startWithReloadButton.setEnabled(false);\n      this.startWithReloadButton.setVisible(false);\n      this.toggleRecordButton.setEnabled(true);\n      this.toggleRecordButton.setVisible(true);\n      if (reloadButtonFocused) {\n        this.toggleRecordButton.focus();\n      }\n    }\n    this.coverageTypeComboBox.setEnabled(false);\n    this.filterInput.setEnabled(true);\n    this.filterByTypeComboBox.setEnabled(true);\n    this.contentScriptsCheckbox.setEnabled(true);\n    if (this.landingPage.isShowing()) {\n      this.landingPage.detach();\n    }\n    this.listView.show(this.coverageResultsElement);\n    if (hadFocus && !reloadButtonFocused) {\n      this.listView.focus();\n    }\n    if (reload && this.resourceTreeModel) {\n      this.resourceTreeModel.reloadPage();\n    } else {\n      void this.model.startPolling();\n    }\n  }\n\n  private onCoverageDataReceived(event: Common.EventTarget.EventTargetEvent<CoverageInfo[]>): void {\n    const data = event.data;\n    this.updateViews(data);\n  }\n\n  async stopRecording(): Promise<void> {\n    if (this.resourceTreeModel) {\n      this.resourceTreeModel.removeEventListener(\n          SDK.ResourceTreeModel.Events.MainFrameNavigated, this.onMainFrameNavigated, this);\n      this.resourceTreeModel = null;\n    }\n    if (this.hasFocus()) {\n      this.listView.focus();\n    }\n    // Stopping the model triggers one last poll to get the final data.\n    if (this.model) {\n      await this.model.stop();\n      this.model.removeEventListener(Events.CoverageUpdated, this.onCoverageDataReceived, this);\n    }\n    this.toggleRecordAction.setToggled(false);\n    this.coverageTypeComboBox.setEnabled(true);\n    if (this.startWithReloadButton) {\n      this.startWithReloadButton.setEnabled(true);\n      this.startWithReloadButton.setVisible(true);\n      this.toggleRecordButton.setEnabled(false);\n      this.toggleRecordButton.setVisible(false);\n    }\n    this.clearButton.setEnabled(true);\n  }\n\n  processBacklog(): void {\n    this.model && this.model.processJSBacklog();\n  }\n\n  private onMainFrameNavigated(): void {\n    this.model && this.model.reset();\n    this.decorationManager && this.decorationManager.reset();\n    this.listView.reset();\n    this.model && this.model.startPolling();\n  }\n\n  private updateViews(updatedEntries: CoverageInfo[]): void {\n    this.updateStats();\n    this.listView.update(this.model && this.model.entries() || []);\n    this.saveButton.setEnabled(this.model !== null && this.model.entries().length > 0);\n    this.decorationManager && this.decorationManager.update(updatedEntries);\n  }\n\n  private updateStats(): void {\n    const all = {total: 0, unused: 0};\n    const filtered = {total: 0, unused: 0};\n    let filterApplied = false;\n    if (this.model) {\n      for (const info of this.model.entries()) {\n        all.total += info.size();\n        all.unused += info.unusedSize();\n        if (this.isVisible(false, info)) {\n          filtered.total += info.size();\n          filtered.unused += info.unusedSize();\n        } else {\n          filterApplied = true;\n        }\n      }\n    }\n    this.statusMessageElement.textContent = filterApplied ?\n        i18nString(UIStrings.filteredSTotalS, {PH1: formatStat(filtered), PH2: formatStat(all)}) :\n        formatStat(all);\n\n    function formatStat({total, unused}: {total: number, unused: number}): string {\n      const used = total - unused;\n      const percentUsed = total ? Math.round(100 * used / total) : 0;\n      return i18nString(UIStrings.sOfSSUsedSoFarSUnused, {\n        PH1: Platform.NumberUtilities.bytesToString(used),\n        PH2: Platform.NumberUtilities.bytesToString(total),\n        PH3: percentUsed,\n        PH4: Platform.NumberUtilities.bytesToString(unused),\n      });\n    }\n  }\n\n  private onFilterChanged(): void {\n    if (!this.listView) {\n      return;\n    }\n    const text = this.filterInput.value();\n    this.textFilterRegExp = text ? Platform.StringUtilities.createPlainTextSearchRegex(text, 'i') : null;\n    this.listView.updateFilterAndHighlight(this.textFilterRegExp);\n    this.updateStats();\n  }\n\n  private onFilterByTypeChanged(): void {\n    if (!this.listView) {\n      return;\n    }\n\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.CoverageReportFiltered);\n\n    const option = this.filterByTypeComboBox.selectedOption();\n    const type = option && option.value;\n    this.typeFilterValue = parseInt(type || '', 10) || null;\n    this.listView.updateFilterAndHighlight(this.textFilterRegExp);\n    this.updateStats();\n  }\n\n  private isVisible(ignoreTextFilter: boolean, coverageInfo: URLCoverageInfo): boolean {\n    const url = coverageInfo.url();\n    if (url.startsWith(CoverageView.EXTENSION_BINDINGS_URL_PREFIX)) {\n      return false;\n    }\n    if (coverageInfo.isContentScript() && !this.showContentScriptsSetting.get()) {\n      return false;\n    }\n    if (this.typeFilterValue && !(coverageInfo.type() & this.typeFilterValue)) {\n      return false;\n    }\n\n    return ignoreTextFilter || !this.textFilterRegExp || this.textFilterRegExp.test(url);\n  }\n\n  private async exportReport(): Promise<void> {\n    const fos = new Bindings.FileUtils.FileOutputStream();\n    const fileName =\n        `Coverage-${Platform.DateUtilities.toISO8601Compact(new Date())}.json` as Platform.DevToolsPath.RawPathString;\n    const accepted = await fos.open(fileName);\n    if (!accepted) {\n      return;\n    }\n    this.model && this.model.exportReport(fos);\n  }\n\n  selectCoverageItemByUrl(url: string): void {\n    this.listView.selectByUrl(url);\n  }\n\n  static readonly EXTENSION_BINDINGS_URL_PREFIX = 'extensions::';\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([coverageViewStyles]);\n  }\n}\n\nlet actionDelegateInstance: ActionDelegate;\n\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  handleAction(context: UI.Context.Context, actionId: string): boolean {\n    const coverageViewId = 'coverage';\n    void UI.ViewManager.ViewManager.instance()\n        .showView(coverageViewId, /** userGesture= */ false, /** omitFocus= */ true)\n        .then(() => {\n          const view = UI.ViewManager.ViewManager.instance().view(coverageViewId);\n          return view && view.widget();\n        })\n        .then(widget => this.innerHandleAction(widget as CoverageView, actionId));\n\n    return true;\n  }\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): ActionDelegate {\n    const {forceNew} = opts;\n    if (!actionDelegateInstance || forceNew) {\n      actionDelegateInstance = new ActionDelegate();\n    }\n    return actionDelegateInstance;\n  }\n\n  private innerHandleAction(coverageView: CoverageView, actionId: string): void {\n    switch (actionId) {\n      case 'coverage.toggle-recording':\n        coverageView.toggleRecording();\n        break;\n      case 'coverage.start-with-reload':\n        void coverageView.startRecording({reload: true, jsCoveragePerBlock: coverageView.isBlockCoverageSelected()});\n        break;\n      default:\n        console.assert(false, `Unknown action: ${actionId}`);\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
