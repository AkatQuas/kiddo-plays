{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/coverage/CoverageDecorationManager.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport type * as Common from '../../core/common/common.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\n\nimport type {CoverageInfo, CoverageModel} from './CoverageModel.js';\n\nexport const decoratorType = 'coverage';\n\nexport class CoverageDecorationManager {\n  private coverageModel: CoverageModel;\n  private readonly textByProvider: Map<TextUtils.ContentProvider.ContentProvider, TextUtils.Text.Text|null>;\n  private readonly uiSourceCodeByContentProvider:\n      Platform.MapUtilities.Multimap<TextUtils.ContentProvider.ContentProvider, Workspace.UISourceCode.UISourceCode>;\n\n  constructor(coverageModel: CoverageModel) {\n    this.coverageModel = coverageModel;\n    this.textByProvider = new Map();\n    this.uiSourceCodeByContentProvider = new Platform.MapUtilities.Multimap();\n\n    for (const uiSourceCode of Workspace.Workspace.WorkspaceImpl.instance().uiSourceCodes()) {\n      uiSourceCode.setDecorationData(decoratorType, this);\n    }\n    Workspace.Workspace.WorkspaceImpl.instance().addEventListener(\n        Workspace.Workspace.Events.UISourceCodeAdded, this.onUISourceCodeAdded, this);\n  }\n\n  reset(): void {\n    for (const uiSourceCode of Workspace.Workspace.WorkspaceImpl.instance().uiSourceCodes()) {\n      uiSourceCode.setDecorationData(decoratorType, undefined);\n    }\n  }\n\n  dispose(): void {\n    this.reset();\n    Workspace.Workspace.WorkspaceImpl.instance().removeEventListener(\n        Workspace.Workspace.Events.UISourceCodeAdded, this.onUISourceCodeAdded, this);\n  }\n\n  update(updatedEntries: CoverageInfo[]): void {\n    for (const entry of updatedEntries) {\n      for (const uiSourceCode of this.uiSourceCodeByContentProvider.get(entry.getContentProvider())) {\n        uiSourceCode.setDecorationData(decoratorType, this);\n      }\n    }\n  }\n\n  async usageByLine(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<(boolean | undefined)[]> {\n    const result = [];\n    const {content} = await uiSourceCode.requestContent();\n    if (!content) {\n      return [];\n    }\n    const sourceText = new TextUtils.Text.Text(content as string);\n    await this.updateTexts(uiSourceCode, sourceText);\n    const lineEndings = sourceText.lineEndings();\n    for (let line = 0; line < sourceText.lineCount(); ++line) {\n      const lineLength = lineEndings[line] - (line ? lineEndings[line - 1] : 0) - 1;\n      if (!lineLength) {\n        result.push(undefined);\n        continue;\n      }\n      const startLocationsPromise = this.rawLocationsForSourceLocation(uiSourceCode, line, 0);\n      const endLocationsPromise = this.rawLocationsForSourceLocation(uiSourceCode, line, lineLength);\n      const [startLocations, endLocations] = await Promise.all([startLocationsPromise, endLocationsPromise]);\n      let used: (boolean|undefined)|undefined = undefined;\n      for (let startIndex = 0, endIndex = 0; startIndex < startLocations.length; ++startIndex) {\n        const start = startLocations[startIndex];\n        while (endIndex < endLocations.length &&\n               CoverageDecorationManager.compareLocations(start, endLocations[endIndex]) >= 0) {\n          ++endIndex;\n        }\n        if (endIndex >= endLocations.length || endLocations[endIndex].id !== start.id) {\n          continue;\n        }\n        const end = endLocations[endIndex++];\n        const text = this.textByProvider.get(end.contentProvider);\n        if (!text) {\n          continue;\n        }\n        const textValue = text.value();\n        let startOffset = Math.min(text.offsetFromPosition(start.line, start.column), textValue.length - 1);\n        let endOffset = Math.min(text.offsetFromPosition(end.line, end.column), textValue.length - 1);\n        while (startOffset <= endOffset && /\\s/.test(textValue[startOffset])) {\n          ++startOffset;\n        }\n        while (startOffset <= endOffset && /\\s/.test(textValue[endOffset])) {\n          --endOffset;\n        }\n        if (startOffset <= endOffset) {\n          used = this.coverageModel.usageForRange(end.contentProvider, startOffset, endOffset);\n        }\n        if (used) {\n          break;\n        }\n      }\n      result.push(used);\n    }\n    return result;\n  }\n\n  private async updateTexts(uiSourceCode: Workspace.UISourceCode.UISourceCode, text: TextUtils.Text.Text):\n      Promise<void> {\n    const promises = [];\n    for (let line = 0; line < text.lineCount(); ++line) {\n      for (const entry of await this.rawLocationsForSourceLocation(uiSourceCode, line, 0)) {\n        if (this.textByProvider.has(entry.contentProvider)) {\n          continue;\n        }\n        this.textByProvider.set(entry.contentProvider, null);\n        this.uiSourceCodeByContentProvider.set(entry.contentProvider, uiSourceCode);\n        promises.push(this.updateTextForProvider(entry.contentProvider));\n      }\n    }\n    await Promise.all(promises);\n  }\n\n  private async updateTextForProvider(contentProvider: TextUtils.ContentProvider.ContentProvider): Promise<void> {\n    const {content} = await contentProvider.requestContent();\n    this.textByProvider.set(contentProvider, new TextUtils.Text.Text(content || ''));\n  }\n\n  private async rawLocationsForSourceLocation(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, line: number, column: number): Promise<RawLocation[]> {\n    const result: RawLocation[] = [];\n    const contentType = uiSourceCode.contentType();\n    if (contentType.hasScripts()) {\n      let locations =\n          await Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance().uiLocationToRawLocations(\n              uiSourceCode, line, column);\n      locations = locations.filter(location => Boolean(location.script()));\n      for (const location of locations) {\n        const script = location.script();\n        if (!script) {\n          continue;\n        }\n        if (script.isInlineScript() && contentType.isDocument()) {\n          location.lineNumber -= script.lineOffset;\n          if (!location.lineNumber) {\n            location.columnNumber -= script.columnOffset;\n          }\n        }\n        result.push({\n          id: `js:${location.scriptId}`,\n          contentProvider: script,\n          line: location.lineNumber,\n          column: location.columnNumber,\n        });\n      }\n    }\n    if (contentType.isStyleSheet() || contentType.isDocument()) {\n      const rawStyleLocations = Bindings.CSSWorkspaceBinding.CSSWorkspaceBinding.instance().uiLocationToRawLocations(\n          new Workspace.UISourceCode.UILocation(uiSourceCode, line, column));\n      for (const location of rawStyleLocations) {\n        const header = location.header();\n        if (!header) {\n          continue;\n        }\n        if (header.isInline && contentType.isDocument()) {\n          location.lineNumber -= header.startLine;\n          if (!location.lineNumber) {\n            location.columnNumber -= header.startColumn;\n          }\n        }\n        result.push({\n          id: `css:${location.styleSheetId}`,\n          contentProvider: header,\n          line: location.lineNumber,\n          column: location.columnNumber,\n        });\n      }\n    }\n    return result.sort(CoverageDecorationManager.compareLocations);\n  }\n\n  private static compareLocations(a: RawLocation, b: RawLocation): number {\n    return a.id.localeCompare(b.id) || a.line - b.line || a.column - b.column;\n  }\n\n  private onUISourceCodeAdded(event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.UISourceCode>): void {\n    const uiSourceCode = event.data;\n    uiSourceCode.setDecorationData(decoratorType, this);\n  }\n}\nexport interface RawLocation {\n  id: string;\n  contentProvider: TextUtils.ContentProvider.ContentProvider;\n  line: number;\n  column: number;\n}\n"],
  "mappings": "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",
  "names": []
}
