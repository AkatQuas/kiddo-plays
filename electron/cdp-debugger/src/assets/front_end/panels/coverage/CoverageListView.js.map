{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/coverage/CoverageListView.ts"],
  "sourcesContent": ["// Copyright (c) 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Formatter from '../../models/formatter/formatter.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport coverageListViewStyles from './coverageListView.css.js';\n\nimport type {URLCoverageInfo} from './CoverageModel.js';\nimport {CoverageType} from './CoverageModel.js';\n\nconst UIStrings = {\n  /**\n  *@description Text that appears on a button for the css resource type filter.\n  */\n  css: 'CSS',\n  /**\n  *@description Text in Coverage List View of the Coverage tab\n  */\n  jsPerFunction: 'JS (per function)',\n  /**\n  *@description Text in Coverage List View of the Coverage tab\n  */\n  jsPerBlock: 'JS (per block)',\n  /**\n  *@description Text for web URLs\n  */\n  url: 'URL',\n  /**\n  *@description Text that refers to some types\n  */\n  type: 'Type',\n  /**\n  *@description Text in Coverage List View of the Coverage tab\n  */\n  totalBytes: 'Total Bytes',\n  /**\n  *@description Text in Coverage List View of the Coverage tab\n  */\n  unusedBytes: 'Unused Bytes',\n  /**\n  *@description Text in the Coverage List View of the Coverage Tab\n  */\n  usageVisualization: 'Usage Visualization',\n  /**\n  *@description Data grid name for Coverage data grids\n  */\n  codeCoverage: 'Code Coverage',\n  /**\n  *@description Cell title in Coverage List View of the Coverage tab. The coverage tool tells\n  *developers which functions (logical groups of lines of code) were actually run/executed. If a\n  *function does get run, then it is marked in the UI to indicate that it was covered.\n  */\n  jsCoverageWithPerFunction:\n      'JS coverage with per function granularity: Once a function was executed, the whole function is marked as covered.',\n  /**\n  *@description Cell title in Coverage List View of the Coverage tab. The coverage tool tells\n  *developers which blocks (logical groups of lines of code, smaller than a function) were actually\n  *run/executed. If a block does get run, then it is marked in the UI to indicate that it was\n  *covered.\n  */\n  jsCoverageWithPerBlock:\n      'JS coverage with per block granularity: Once a block of JavaScript was executed, that block is marked as covered.',\n  /**\n  *@description Accessible text for the value in bytes in memory allocation or coverage view.\n  */\n  sBytes: '{n, plural, =1 {# byte} other {# bytes}}',\n  /**\n  *@description Accessible text for the unused bytes column in the coverage tool that describes the total unused bytes and percentage of the file unused.\n  *@example {88%} percentage\n  */\n  sBytesS: '{n, plural, =1 {# byte, {percentage}} other {# bytes, {percentage}}}',\n  /**\n  *@description Tooltip text for the bar in the coverage list view of the coverage tool that illustrates the relation between used and unused bytes.\n  *@example {1000} PH1\n  *@example {12.34} PH2\n  */\n  sBytesSBelongToFunctionsThatHave: '{PH1} bytes ({PH2}) belong to functions that have not (yet) been executed.',\n  /**\n  *@description Tooltip text for the bar in the coverage list view of the coverage tool that illustrates the relation between used and unused bytes.\n  *@example {1000} PH1\n  *@example {12.34} PH2\n  */\n  sBytesSBelongToBlocksOf: '{PH1} bytes ({PH2}) belong to blocks of JavaScript that have not (yet) been executed.',\n  /**\n  *@description Message in Coverage View of the Coverage tab\n  *@example {1000} PH1\n  *@example {12.34} PH2\n  */\n  sBytesSBelongToFunctionsThatHaveExecuted: '{PH1} bytes ({PH2}) belong to functions that have executed at least once.',\n  /**\n  *@description Message in Coverage View of the Coverage tab\n  *@example {1000} PH1\n  *@example {12.34} PH2\n  */\n  sBytesSBelongToBlocksOfJavascript:\n      '{PH1} bytes ({PH2}) belong to blocks of JavaScript that have executed at least once.',\n  /**\n  *@description Accessible text for the visualization column of coverage tool. Contains percentage of unused bytes to used bytes.\n  *@example {12.3} PH1\n  *@example {12.3} PH2\n  */\n  sOfFileUnusedSOfFileUsed: '{PH1} % of file unused, {PH2} % of file used',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/coverage/CoverageListView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport function coverageTypeToString(type: CoverageType): string {\n  const types = [];\n  if (type & CoverageType.CSS) {\n    types.push(i18nString(UIStrings.css));\n  }\n  if (type & CoverageType.JavaScriptPerFunction) {\n    types.push(i18nString(UIStrings.jsPerFunction));\n  } else if (type & CoverageType.JavaScript) {\n    types.push(i18nString(UIStrings.jsPerBlock));\n  }\n  return types.join('+');\n}\n\nexport class CoverageListView extends UI.Widget.VBox {\n  private readonly nodeForCoverageInfo: Map<URLCoverageInfo, GridNode>;\n  private readonly isVisibleFilter: (arg0: URLCoverageInfo) => boolean;\n  private highlightRegExp: RegExp|null;\n  private dataGrid: DataGrid.SortableDataGrid.SortableDataGrid<GridNode>;\n\n  constructor(isVisibleFilter: (arg0: URLCoverageInfo) => boolean) {\n    super(true);\n    this.nodeForCoverageInfo = new Map();\n    this.isVisibleFilter = isVisibleFilter;\n    this.highlightRegExp = null;\n\n    const columns: DataGrid.DataGrid.ColumnDescriptor[] = [\n      {id: 'url', title: i18nString(UIStrings.url), width: '250px', weight: 3, fixedWidth: false, sortable: true},\n      {id: 'type', title: i18nString(UIStrings.type), width: '45px', weight: 1, fixedWidth: true, sortable: true},\n      {\n        id: 'size',\n        title: i18nString(UIStrings.totalBytes),\n        width: '60px',\n        fixedWidth: true,\n        sortable: true,\n        align: DataGrid.DataGrid.Align.Right,\n        weight: 1,\n      },\n      {\n        id: 'unusedSize',\n        title: i18nString(UIStrings.unusedBytes),\n        width: '100px',\n        fixedWidth: true,\n        sortable: true,\n        align: DataGrid.DataGrid.Align.Right,\n        sort: DataGrid.DataGrid.Order.Descending,\n        weight: 1,\n      },\n      {\n        id: 'bars',\n        title: i18nString(UIStrings.usageVisualization),\n        width: '250px',\n        fixedWidth: false,\n        sortable: true,\n        weight: 1,\n      },\n    ];\n    this.dataGrid = new DataGrid.SortableDataGrid.SortableDataGrid<GridNode>({\n      displayName: i18nString(UIStrings.codeCoverage),\n      columns,\n      editCallback: undefined,\n      refreshCallback: undefined,\n      deleteCallback: undefined,\n    });\n    this.dataGrid.setResizeMethod(DataGrid.DataGrid.ResizeMethod.Last);\n    this.dataGrid.element.classList.add('flex-auto');\n    this.dataGrid.element.addEventListener('keydown', this.onKeyDown.bind(this), false);\n    this.dataGrid.addEventListener(DataGrid.DataGrid.Events.OpenedNode, this.onOpenedNode, this);\n    this.dataGrid.addEventListener(DataGrid.DataGrid.Events.SortingChanged, this.sortingChanged, this);\n\n    const dataGridWidget = this.dataGrid.asWidget();\n    dataGridWidget.show(this.contentElement);\n    this.setDefaultFocusedChild(dataGridWidget);\n  }\n\n  update(coverageInfo: URLCoverageInfo[]): void {\n    let hadUpdates = false;\n    const maxSize = coverageInfo.reduce((acc, entry) => Math.max(acc, entry.size()), 0);\n    const rootNode = this.dataGrid.rootNode();\n    for (const entry of coverageInfo) {\n      let node = this.nodeForCoverageInfo.get(entry);\n      if (node) {\n        if (this.isVisibleFilter(node.coverageInfo)) {\n          hadUpdates = node.refreshIfNeeded(maxSize) || hadUpdates;\n        }\n        continue;\n      }\n      node = new GridNode(entry, maxSize);\n      this.nodeForCoverageInfo.set(entry, node);\n      if (this.isVisibleFilter(node.coverageInfo)) {\n        rootNode.appendChild(node);\n        hadUpdates = true;\n      }\n    }\n    if (hadUpdates) {\n      this.sortingChanged();\n    }\n  }\n\n  reset(): void {\n    this.nodeForCoverageInfo.clear();\n    this.dataGrid.rootNode().removeChildren();\n  }\n\n  updateFilterAndHighlight(highlightRegExp: RegExp|null): void {\n    this.highlightRegExp = highlightRegExp;\n    let hadTreeUpdates = false;\n    for (const node of this.nodeForCoverageInfo.values()) {\n      const shouldBeVisible = this.isVisibleFilter(node.coverageInfo);\n      const isVisible = Boolean(node.parent);\n      if (shouldBeVisible) {\n        node.setHighlight(this.highlightRegExp);\n      }\n      if (shouldBeVisible === isVisible) {\n        continue;\n      }\n      hadTreeUpdates = true;\n      if (!shouldBeVisible) {\n        node.remove();\n      } else {\n        this.dataGrid.rootNode().appendChild(node);\n      }\n    }\n    if (hadTreeUpdates) {\n      this.sortingChanged();\n    }\n  }\n\n  selectByUrl(url: string): void {\n    for (const [info, node] of this.nodeForCoverageInfo.entries()) {\n      if (info.url() === url) {\n        node.revealAndSelect();\n        break;\n      }\n    }\n  }\n\n  private onOpenedNode(): void {\n    void this.revealSourceForSelectedNode();\n  }\n\n  private onKeyDown(event: KeyboardEvent): void {\n    if (!(event.key === 'Enter')) {\n      return;\n    }\n    event.consume(true);\n    void this.revealSourceForSelectedNode();\n  }\n\n  private async revealSourceForSelectedNode(): Promise<void> {\n    const node = this.dataGrid.selectedNode;\n    if (!node) {\n      return;\n    }\n    const coverageInfo = (node as GridNode).coverageInfo;\n    let sourceCode = Workspace.Workspace.WorkspaceImpl.instance().uiSourceCodeForURL(coverageInfo.url());\n    if (!sourceCode) {\n      return;\n    }\n\n    const formatData = await Formatter.SourceFormatter.SourceFormatter.instance().format(sourceCode);\n    sourceCode = formatData.formattedSourceCode;\n\n    if (this.dataGrid.selectedNode !== node) {\n      return;\n    }\n    void Common.Revealer.reveal(sourceCode);\n  }\n\n  private sortingChanged(): void {\n    const columnId = this.dataGrid.sortColumnId();\n    if (!columnId) {\n      return;\n    }\n    const sortFunction = GridNode.sortFunctionForColumn(columnId) as (\n                             (arg0: DataGrid.SortableDataGrid.SortableDataGridNode<GridNode>,\n                              arg1: DataGrid.SortableDataGrid.SortableDataGridNode<GridNode>) => number) |\n        null;\n    if (!sortFunction) {\n      return;\n    }\n    this.dataGrid.sortNodes(sortFunction, !this.dataGrid.isSortOrderAscending());\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([coverageListViewStyles]);\n  }\n}\n\nlet percentageFormatter: Intl.NumberFormat|null = null;\n\nfunction getPercentageFormatter(): Intl.NumberFormat {\n  if (!percentageFormatter) {\n    percentageFormatter = new Intl.NumberFormat(i18n.DevToolsLocale.DevToolsLocale.instance().locale, {\n      style: 'percent',\n      maximumFractionDigits: 1,\n    });\n  }\n  return percentageFormatter;\n}\n\nexport class GridNode extends DataGrid.SortableDataGrid.SortableDataGridNode<GridNode> {\n  coverageInfo: URLCoverageInfo;\n  private lastUsedSize!: number|undefined;\n  private url: Platform.DevToolsPath.UrlString;\n  private maxSize: number;\n  private highlightRegExp: RegExp|null;\n\n  constructor(coverageInfo: URLCoverageInfo, maxSize: number) {\n    super();\n    this.coverageInfo = coverageInfo;\n    this.url = coverageInfo.url();\n    this.maxSize = maxSize;\n    this.highlightRegExp = null;\n  }\n\n  setHighlight(highlightRegExp: RegExp|null): void {\n    if (this.highlightRegExp === highlightRegExp) {\n      return;\n    }\n    this.highlightRegExp = highlightRegExp;\n    this.refresh();\n  }\n\n  refreshIfNeeded(maxSize: number): boolean {\n    if (this.lastUsedSize === this.coverageInfo.usedSize() && maxSize === this.maxSize) {\n      return false;\n    }\n    this.lastUsedSize = this.coverageInfo.usedSize();\n    this.maxSize = maxSize;\n    this.refresh();\n    return true;\n  }\n\n  createCell(columnId: string): HTMLElement {\n    const cell = this.createTD(columnId);\n    switch (columnId) {\n      case 'url': {\n        UI.Tooltip.Tooltip.install(cell, this.url);\n        const outer = cell.createChild('div', 'url-outer');\n        const prefix = outer.createChild('div', 'url-prefix');\n        const suffix = outer.createChild('div', 'url-suffix');\n        const splitURL = /^(.*)(\\/[^/]*)$/.exec(this.url);\n        prefix.textContent = splitURL ? splitURL[1] : this.url;\n        suffix.textContent = splitURL ? splitURL[2] : '';\n        if (this.highlightRegExp) {\n          this.highlight(outer, this.url);\n        }\n        this.setCellAccessibleName(this.url, cell, columnId);\n        break;\n      }\n      case 'type': {\n        cell.textContent = coverageTypeToString(this.coverageInfo.type());\n        if (this.coverageInfo.type() & CoverageType.JavaScriptPerFunction) {\n          UI.Tooltip.Tooltip.install(cell, i18nString(UIStrings.jsCoverageWithPerFunction));\n        } else if (this.coverageInfo.type() & CoverageType.JavaScript) {\n          UI.Tooltip.Tooltip.install(cell, i18nString(UIStrings.jsCoverageWithPerBlock));\n        }\n        break;\n      }\n      case 'size': {\n        const sizeSpan = cell.createChild('span');\n        sizeSpan.textContent = Platform.NumberUtilities.withThousandsSeparator(this.coverageInfo.size() || 0);\n        const sizeAccessibleName = i18nString(UIStrings.sBytes, {n: this.coverageInfo.size() || 0});\n        this.setCellAccessibleName(sizeAccessibleName, cell, columnId);\n        break;\n      }\n      case 'unusedSize': {\n        const unusedSize = this.coverageInfo.unusedSize() || 0;\n        const unusedSizeSpan = cell.createChild('span');\n        const unusedPercentsSpan = cell.createChild('span', 'percent-value');\n        unusedSizeSpan.textContent = Platform.NumberUtilities.withThousandsSeparator(unusedSize);\n        const unusedPercentFormatted = getPercentageFormatter().format(this.coverageInfo.unusedPercentage());\n        unusedPercentsSpan.textContent = unusedPercentFormatted;\n        const unusedAccessibleName = i18nString(UIStrings.sBytesS, {n: unusedSize, percentage: unusedPercentFormatted});\n        this.setCellAccessibleName(unusedAccessibleName, cell, columnId);\n        break;\n      }\n      case 'bars': {\n        const barContainer = cell.createChild('div', 'bar-container');\n        const unusedPercent = getPercentageFormatter().format(this.coverageInfo.unusedPercentage());\n        const usedPercent = getPercentageFormatter().format(this.coverageInfo.usedPercentage());\n        if (this.coverageInfo.unusedSize() > 0) {\n          const unusedSizeBar = barContainer.createChild('div', 'bar bar-unused-size');\n          unusedSizeBar.style.width = ((this.coverageInfo.unusedSize() / this.maxSize) * 100 || 0) + '%';\n          if (this.coverageInfo.type() & CoverageType.JavaScriptPerFunction) {\n            UI.Tooltip.Tooltip.install(\n                unusedSizeBar,\n                i18nString(\n                    UIStrings.sBytesSBelongToFunctionsThatHave,\n                    {PH1: this.coverageInfo.unusedSize(), PH2: unusedPercent}));\n          } else if (this.coverageInfo.type() & CoverageType.JavaScript) {\n            UI.Tooltip.Tooltip.install(\n                unusedSizeBar,\n                i18nString(\n                    UIStrings.sBytesSBelongToBlocksOf, {PH1: this.coverageInfo.unusedSize(), PH2: unusedPercent}));\n          }\n        }\n        if (this.coverageInfo.usedSize() > 0) {\n          const usedSizeBar = barContainer.createChild('div', 'bar bar-used-size');\n          usedSizeBar.style.width = ((this.coverageInfo.usedSize() / this.maxSize) * 100 || 0) + '%';\n          if (this.coverageInfo.type() & CoverageType.JavaScriptPerFunction) {\n            UI.Tooltip.Tooltip.install(\n                usedSizeBar,\n                i18nString(\n                    UIStrings.sBytesSBelongToFunctionsThatHaveExecuted,\n                    {PH1: this.coverageInfo.usedSize(), PH2: usedPercent}));\n          } else if (this.coverageInfo.type() & CoverageType.JavaScript) {\n            UI.Tooltip.Tooltip.install(\n                usedSizeBar,\n                i18nString(\n                    UIStrings.sBytesSBelongToBlocksOfJavascript,\n                    {PH1: this.coverageInfo.usedSize(), PH2: usedPercent}));\n          }\n        }\n        this.setCellAccessibleName(\n            i18nString(UIStrings.sOfFileUnusedSOfFileUsed, {PH1: unusedPercent, PH2: usedPercent}), cell, columnId);\n      }\n    }\n    return cell;\n  }\n\n  private highlight(element: Element, textContent: string): void {\n    if (!this.highlightRegExp) {\n      return;\n    }\n    const matches = this.highlightRegExp.exec(textContent);\n    if (!matches || !matches.length) {\n      return;\n    }\n    const range = new TextUtils.TextRange.SourceRange(matches.index, matches[0].length);\n    UI.UIUtils.highlightRangesWithStyleClass(element, [range], 'filter-highlight');\n  }\n\n  static sortFunctionForColumn(columnId: string): ((arg0: GridNode, arg1: GridNode) => number)|null {\n    const compareURL = (a: GridNode, b: GridNode): number => a.url.localeCompare(b.url);\n    switch (columnId) {\n      case 'url':\n        return compareURL;\n      case 'type':\n        return (a: GridNode, b: GridNode): number => {\n          const typeA = coverageTypeToString(a.coverageInfo.type());\n          const typeB = coverageTypeToString(b.coverageInfo.type());\n          return typeA.localeCompare(typeB) || compareURL(a, b);\n        };\n      case 'size':\n        return (a: GridNode, b: GridNode): number => a.coverageInfo.size() - b.coverageInfo.size() || compareURL(a, b);\n      case 'bars':\n      case 'unusedSize':\n        return (a: GridNode, b: GridNode): number =>\n                   a.coverageInfo.unusedSize() - b.coverageInfo.unusedSize() || compareURL(a, b);\n      default:\n        console.assert(false, 'Unknown sort field: ' + columnId);\n        return null;\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
