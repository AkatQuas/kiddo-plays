{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/settings/settings-meta.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport './emulation/emulation-meta.js';\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type * as Settings from './settings.js';\n\nconst UIStrings = {\n  /**\n   *@description Text for keyboard shortcuts\n   */\n  shortcuts: 'Shortcuts',\n  /**\n   *@description Text in Settings Screen of the Settings\n   */\n  preferences: 'Preferences',\n  /**\n   *@description Text in Settings Screen of the Settings\n   */\n  experiments: 'Experiments',\n  /**\n   *@description Title of Ignore List settings\n   */\n  ignoreList: 'Ignore List',\n  /**\n   *@description Command for showing the keyboard shortcuts in Settings\n   */\n  showShortcuts: 'Show Shortcuts',\n  /**\n   *@description Command for showing the preference tab in the Settings Screen\n   */\n  showPreferences: 'Show Preferences',\n  /**\n   *@description Command for showing the experiments tab in the Settings Screen\n   */\n  showExperiments: 'Show Experiments',\n  /**\n   *@description Command for showing the Ignore List settings\n   */\n  showIgnoreList: 'Show Ignore List',\n  /**\n  *@description Name of the Settings view\n  */\n  settings: 'Settings',\n  /**\n   *@description Text for the documentation of something\n  */\n  documentation: 'Documentation',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/settings/settings-meta.ts', UIStrings);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nlet loadedSettingsModule: (typeof Settings|undefined);\n\nasync function loadSettingsModule(): Promise<typeof Settings> {\n  if (!loadedSettingsModule) {\n    loadedSettingsModule = await import('./settings.js');\n  }\n  return loadedSettingsModule;\n}\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.SETTINGS_VIEW,\n  id: 'preferences',\n  title: i18nLazyString(UIStrings.preferences),\n  commandPrompt: i18nLazyString(UIStrings.showPreferences),\n  order: 0,\n  async loadView() {\n    const Settings = await loadSettingsModule();\n    return Settings.SettingsScreen.GenericSettingsTab.instance();\n  },\n});\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.SETTINGS_VIEW,\n  id: 'experiments',\n  title: i18nLazyString(UIStrings.experiments),\n  commandPrompt: i18nLazyString(UIStrings.showExperiments),\n  order: 3,\n  experiment: Root.Runtime.ExperimentName.ALL,\n  async loadView() {\n    const Settings = await loadSettingsModule();\n    return Settings.SettingsScreen.ExperimentsSettingsTab.instance();\n  },\n});\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.SETTINGS_VIEW,\n  id: 'blackbox',\n  title: i18nLazyString(UIStrings.ignoreList),\n  commandPrompt: i18nLazyString(UIStrings.showIgnoreList),\n  order: 4,\n  async loadView() {\n    const Settings = await loadSettingsModule();\n    return Settings.FrameworkIgnoreListSettingsTab.FrameworkIgnoreListSettingsTab.instance();\n  },\n});\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.SETTINGS_VIEW,\n  id: 'keybinds',\n  title: i18nLazyString(UIStrings.shortcuts),\n  commandPrompt: i18nLazyString(UIStrings.showShortcuts),\n  order: 100,\n  async loadView() {\n    const Settings = await loadSettingsModule();\n    return Settings.KeybindsSettingsTab.KeybindsSettingsTab.instance();\n  },\n});\n\nUI.ActionRegistration.registerActionExtension({\n  category: UI.ActionRegistration.ActionCategory.SETTINGS,\n  actionId: 'settings.show',\n  title: i18nLazyString(UIStrings.settings),\n  async loadActionDelegate() {\n    const Settings = await loadSettingsModule();\n    return Settings.SettingsScreen.ActionDelegate.instance();\n  },\n  iconClass: UI.ActionRegistration.IconClass.LARGEICON_SETTINGS_GEAR,\n  bindings: [\n    {\n      shortcut: 'F1',\n      keybindSets: [\n        UI.ActionRegistration.KeybindSet.DEVTOOLS_DEFAULT,\n      ],\n    },\n    {\n      shortcut: 'Shift+?',\n    },\n    {\n      platform: UI.ActionRegistration.Platforms.WindowsLinux,\n      shortcut: 'Ctrl+,',\n      keybindSets: [\n        UI.ActionRegistration.KeybindSet.VS_CODE,\n      ],\n    },\n    {\n      platform: UI.ActionRegistration.Platforms.Mac,\n      shortcut: 'Meta+,',\n      keybindSets: [\n        UI.ActionRegistration.KeybindSet.VS_CODE,\n      ],\n    },\n  ],\n});\n\nUI.ActionRegistration.registerActionExtension({\n  category: UI.ActionRegistration.ActionCategory.SETTINGS,\n  actionId: 'settings.documentation',\n  title: i18nLazyString(UIStrings.documentation),\n  async loadActionDelegate() {\n    const Settings = await loadSettingsModule();\n    return Settings.SettingsScreen.ActionDelegate.instance();\n  },\n});\n\nUI.ActionRegistration.registerActionExtension({\n  category: UI.ActionRegistration.ActionCategory.SETTINGS,\n  actionId: 'settings.shortcuts',\n  title: i18nLazyString(UIStrings.shortcuts),\n  async loadActionDelegate() {\n    const Settings = await loadSettingsModule();\n    return Settings.SettingsScreen.ActionDelegate.instance();\n  },\n  bindings: [\n    {\n      platform: UI.ActionRegistration.Platforms.WindowsLinux,\n      shortcut: 'Ctrl+K Ctrl+S',\n      keybindSets: [\n        UI.ActionRegistration.KeybindSet.VS_CODE,\n      ],\n    },\n    {\n      platform: UI.ActionRegistration.Platforms.Mac,\n      shortcut: 'Meta+K Meta+S',\n      keybindSets: [\n        UI.ActionRegistration.KeybindSet.VS_CODE,\n      ],\n    },\n  ],\n});\n\nUI.ViewManager.registerLocationResolver({\n  name: UI.ViewManager.ViewLocationValues.SETTINGS_VIEW,\n  category: UI.ViewManager.ViewLocationCategoryValues.SETTINGS,\n  async loadResolver() {\n    const Settings = await loadSettingsModule();\n    return Settings.SettingsScreen.SettingsScreen.instance();\n  },\n});\n\nCommon.Revealer.registerRevealer({\n  contextTypes() {\n    return [\n      Common.Settings.Setting,\n    ];\n  },\n  async loadRevealer() {\n    const Settings = await loadSettingsModule();\n    return Settings.SettingsScreen.Revealer.instance();\n  },\n  destination: undefined,\n});\n\nUI.ContextMenu.registerItem({\n  location: UI.ContextMenu.ItemLocation.MAIN_MENU_FOOTER,\n  actionId: 'settings.shortcuts',\n  order: undefined,\n});\n\nUI.ContextMenu.registerItem({\n  location: UI.ContextMenu.ItemLocation.MAIN_MENU_HELP_DEFAULT,\n  actionId: 'settings.documentation',\n  order: undefined,\n});\n"],
  "mappings": "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",
  "names": []
}
