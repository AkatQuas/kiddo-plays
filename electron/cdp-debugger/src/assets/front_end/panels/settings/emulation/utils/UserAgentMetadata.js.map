{
  "version": 3,
  "sources": ["../../../../../../../../front_end/panels/settings/emulation/utils/UserAgentMetadata.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n//\n// Helper functions for working with UserAgentMetadata protocol objects, in\n// particular their plain string representation.\n\nimport type * as UI from '../../../../ui/legacy/legacy.js';\nimport type * as Protocol from '../../../../generated/protocol.js';\n\nimport type {Item, List, Parameters, ParamName, String as SHString} from './StructuredHeaders.js';\nimport {parseList, ResultKind, serializeItem, serializeList} from './StructuredHeaders.js';\n\n/* Returned string is for error, either parseErrorString or structErrorString.\n */\nexport function parseBrandsList(stringForm: string, parseErrorString: string, structErrorString: string):\n    Protocol.Emulation.UserAgentBrandVersion[]|string {\n  const brandList: Protocol.Emulation.UserAgentBrandVersion[] = [];\n  const parseResult = parseList(stringForm);\n  if (parseResult.kind === ResultKind.ERROR) {\n    return parseErrorString;\n  }\n  for (const listItem of parseResult.items) {\n    if (listItem.kind !== ResultKind.ITEM) {\n      return structErrorString;\n    }\n    const bareItem = listItem.value;\n    if (bareItem.kind !== ResultKind.STRING) {\n      return structErrorString;\n    }\n    if (listItem.parameters.items.length !== 1) {\n      return structErrorString;\n    }\n    const param = listItem.parameters.items[0];\n    if (param.name.value !== 'v') {\n      return structErrorString;\n    }\n    const paramValue = param.value;\n    if (paramValue.kind !== ResultKind.STRING) {\n      return structErrorString;\n    }\n\n    brandList.push({brand: bareItem.value, version: paramValue.value});\n  }\n\n  return brandList;\n}\n\nexport function serializeBrandsList(brands: Protocol.Emulation.UserAgentBrandVersion[]): string {\n  const shList: List = {kind: ResultKind.LIST, items: []};\n  const vParamName: ParamName = {kind: ResultKind.PARAM_NAME, value: 'v'};\n  for (const brand of brands) {\n    const nameString: SHString = {kind: ResultKind.STRING, value: brand.brand};\n    const verString: SHString = {kind: ResultKind.STRING, value: brand.version};\n    const verParams: Parameters = {\n      kind: ResultKind.PARAMETERS,\n      items: [{kind: ResultKind.PARAMETER, name: vParamName, value: verString}],\n    };\n\n    const shItem: Item = {kind: ResultKind.ITEM, value: nameString, parameters: verParams};\n    shList.items.push(shItem);\n  }\n\n  const serializeResult = serializeList(shList);\n  return serializeResult.kind === ResultKind.ERROR ? '' : serializeResult.value;\n}\n\n/*\n * This checks whether the value provided is representable as a structured headers string,\n * which is the validity requirement for the fields in UserAgentMetadata that are not the brand list\n * or mobile bool.\n *\n * errorMessage will be passed through on failure.\n */\nexport function validateAsStructuredHeadersString(value: string, errorString: string): UI.ListWidget.ValidatorResult {\n  const parsedResult = serializeItem({\n    kind: ResultKind.ITEM,\n    value: {kind: ResultKind.STRING, value: value},\n    parameters: {kind: ResultKind.PARAMETERS, items: []},\n  });\n  if (parsedResult.kind === ResultKind.ERROR) {\n    return {valid: false, errorMessage: errorString};\n  }\n  return {valid: true, errorMessage: undefined};\n}\n"],
  "mappings": "AAWA;AAIO,gCAAyB,YAAoB,kBAA0B,mBACxB;AACpD,QAAM,YAAwD;AAC9D,QAAM,cAAc,UAAU;AAC9B,MAAI,YAAY,SAAS,WAAW,OAAO;AACzC,WAAO;AAAA;AAET,aAAW,YAAY,YAAY,OAAO;AACxC,QAAI,SAAS,SAAS,WAAW,MAAM;AACrC,aAAO;AAAA;AAET,UAAM,WAAW,SAAS;AAC1B,QAAI,SAAS,SAAS,WAAW,QAAQ;AACvC,aAAO;AAAA;AAET,QAAI,SAAS,WAAW,MAAM,WAAW,GAAG;AAC1C,aAAO;AAAA;AAET,UAAM,QAAQ,SAAS,WAAW,MAAM;AACxC,QAAI,MAAM,KAAK,UAAU,KAAK;AAC5B,aAAO;AAAA;AAET,UAAM,aAAa,MAAM;AACzB,QAAI,WAAW,SAAS,WAAW,QAAQ;AACzC,aAAO;AAAA;AAGT,cAAU,KAAK,EAAC,OAAO,SAAS,OAAO,SAAS,WAAW;AAAA;AAG7D,SAAO;AAAA;AAGF,oCAA6B,QAA4D;AAC9F,QAAM,SAAe,EAAC,MAAM,WAAW,MAAM,OAAO;AACpD,QAAM,aAAwB,EAAC,MAAM,WAAW,YAAY,OAAO;AACnE,aAAW,SAAS,QAAQ;AAC1B,UAAM,aAAuB,EAAC,MAAM,WAAW,QAAQ,OAAO,MAAM;AACpE,UAAM,YAAsB,EAAC,MAAM,WAAW,QAAQ,OAAO,MAAM;AACnE,UAAM,YAAwB;AAAA,MAC5B,MAAM,WAAW;AAAA,MACjB,OAAO,CAAC,EAAC,MAAM,WAAW,WAAW,MAAM,YAAY,OAAO;AAAA;AAGhE,UAAM,SAAe,EAAC,MAAM,WAAW,MAAM,OAAO,YAAY,YAAY;AAC5E,WAAO,MAAM,KAAK;AAAA;AAGpB,QAAM,kBAAkB,cAAc;AACtC,SAAO,gBAAgB,SAAS,WAAW,QAAQ,KAAK,gBAAgB;AAAA;AAUnE,kDAA2C,OAAe,aAAoD;AACnH,QAAM,eAAe,cAAc;AAAA,IACjC,MAAM,WAAW;AAAA,IACjB,OAAO,EAAC,MAAM,WAAW,QAAQ;AAAA,IACjC,YAAY,EAAC,MAAM,WAAW,YAAY,OAAO;AAAA;AAEnD,MAAI,aAAa,SAAS,WAAW,OAAO;AAC1C,WAAO,EAAC,OAAO,OAAO,cAAc;AAAA;AAEtC,SAAO,EAAC,OAAO,MAAM,cAAc;AAAA;",
  "names": []
}
