{
  "version": 3,
  "sources": ["../../../../../../../front_end/panels/settings/emulation/DevicesSettingsTab.ts"],
  "sourcesContent": ["// Copyright 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as EmulationModel from '../../../models/emulation/emulation.js';\nimport * as UI from '../../../ui/legacy/legacy.js';\n\nimport * as EmulationComponents from './components/components.js';\n\nimport devicesSettingsTabStyles from './devicesSettingsTab.css.js';\n\nlet devicesSettingsTabInstance: DevicesSettingsTab;\n\nconst UIStrings = {\n  /**\n  *@description Title for a section of the UI that shows all of the devices the user can emulate, in the Device Toolbar.\n  */\n  emulatedDevices: 'Emulated Devices',\n  /**\n  *@description Button to add a custom device (e.g. phone, tablet) the Device Toolbar.\n  */\n  addCustomDevice: 'Add custom device...',\n  /**\n  *@description Label/title for UI to add a new custom device type. Device means mobile/tablet etc.\n  */\n  device: 'Device',\n  /**\n  *@description Placeholder for text input for the name of a custom device.\n  */\n  deviceName: 'Device Name',\n  /**\n  *@description Placeholder text for text input for the width of a custom device in pixels.\n  */\n  width: 'Width',\n  /**\n  *@description Placeholder text for text input for the height of a custom device in pixels.\n  */\n  height: 'Height',\n  /**\n  *@description Placeholder text for text input for the height/width ratio of a custom device in pixels.\n  */\n  devicePixelRatio: 'Device pixel ratio',\n  /**\n  *@description Label in the Devices settings pane for the user agent string input of a custom device\n  */\n  userAgentString: 'User agent string',\n  /**\n  *@description Tooltip text for a drop-down in the Devices settings pane, for the 'user agent type' input of a custom device.\n  * 'Type' refers to different options e.g. mobile or desktop.\n  */\n  userAgentType: 'User agent type',\n  /**\n  *@description Error message in the Devices settings pane that declares the maximum length of the device name input\n  *@example {50} PH1\n  */\n  deviceNameMustBeLessThanS: 'Device name must be less than {PH1} characters.',\n  /**\n  *@description Error message in the Devices settings pane that declares that the device name input must not be empty\n  */\n  deviceNameCannotBeEmpty: 'Device name cannot be empty.',\n  /**\n  *@description Success message for screen readers when device is added.\n  *@example {TestDevice} PH1\n  */\n  deviceAddedOrUpdated: 'Device {PH1} successfully added/updated.',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/settings/emulation/DevicesSettingsTab.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class DevicesSettingsTab extends UI.Widget.VBox implements\n    UI.ListWidget.Delegate<EmulationModel.EmulatedDevices.EmulatedDevice> {\n  containerElement: HTMLElement;\n  private readonly addCustomButton: HTMLButtonElement;\n  private readonly ariaSuccessMessageElement: HTMLElement;\n  private readonly list: UI.ListWidget.ListWidget<EmulationModel.EmulatedDevices.EmulatedDevice>;\n  private muteUpdate: boolean;\n  private emulatedDevicesList: EmulationModel.EmulatedDevices.EmulatedDevicesList;\n  private editor?: UI.ListWidget.Editor<EmulationModel.EmulatedDevices.EmulatedDevice>;\n\n  private constructor() {\n    super();\n    this.element.classList.add('settings-tab-container');\n    this.element.classList.add('devices-settings-tab');\n\n    const header = this.element.createChild('header');\n    UI.UIUtils.createTextChild(header.createChild('h1'), i18nString(UIStrings.emulatedDevices));\n    this.containerElement = this.element.createChild('div', 'settings-container-wrapper')\n                                .createChild('div', 'settings-tab settings-content settings-container');\n\n    const buttonsRow = this.containerElement.createChild('div', 'devices-button-row');\n    this.addCustomButton =\n        UI.UIUtils.createTextButton(i18nString(UIStrings.addCustomDevice), this.addCustomDevice.bind(this));\n    this.addCustomButton.id = 'custom-device-add-button';\n    buttonsRow.appendChild(this.addCustomButton);\n    this.ariaSuccessMessageElement = this.containerElement.createChild('div', 'device-success-message');\n    UI.ARIAUtils.markAsPoliteLiveRegion(this.ariaSuccessMessageElement, false);\n\n    this.list = new UI.ListWidget.ListWidget(this, false /* delegatesFocus */);\n    this.list.element.classList.add('devices-list');\n    this.list.show(this.containerElement);\n\n    this.muteUpdate = false;\n    this.emulatedDevicesList = EmulationModel.EmulatedDevices.EmulatedDevicesList.instance();\n    this.emulatedDevicesList.addEventListener(\n        EmulationModel.EmulatedDevices.Events.CustomDevicesUpdated, this.devicesUpdated, this);\n    this.emulatedDevicesList.addEventListener(\n        EmulationModel.EmulatedDevices.Events.StandardDevicesUpdated, this.devicesUpdated, this);\n\n    this.setDefaultFocusedElement(this.addCustomButton);\n  }\n\n  static instance(): DevicesSettingsTab {\n    if (!devicesSettingsTabInstance) {\n      devicesSettingsTabInstance = new DevicesSettingsTab();\n    }\n    return devicesSettingsTabInstance;\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    this.devicesUpdated();\n    this.registerCSSFiles([devicesSettingsTabStyles]);\n    this.list.registerCSSFiles([devicesSettingsTabStyles]);\n  }\n\n  private devicesUpdated(): void {\n    if (this.muteUpdate) {\n      return;\n    }\n\n    this.list.clear();\n\n    let devices = this.emulatedDevicesList.custom().slice();\n    for (let i = 0; i < devices.length; ++i) {\n      this.list.appendItem(devices[i], true);\n    }\n\n    this.list.appendSeparator();\n\n    devices = this.emulatedDevicesList.standard().slice();\n    devices.sort(EmulationModel.EmulatedDevices.EmulatedDevice.deviceComparator);\n    for (let i = 0; i < devices.length; ++i) {\n      this.list.appendItem(devices[i], false);\n    }\n  }\n\n  private muteAndSaveDeviceList(custom: boolean): void {\n    this.muteUpdate = true;\n    if (custom) {\n      this.emulatedDevicesList.saveCustomDevices();\n    } else {\n      this.emulatedDevicesList.saveStandardDevices();\n    }\n    this.muteUpdate = false;\n  }\n\n  private addCustomDevice(): void {\n    const device = new EmulationModel.EmulatedDevices.EmulatedDevice();\n    device.deviceScaleFactor = 0;\n    device.horizontal.width = 700;\n    device.horizontal.height = 400;\n    device.vertical.width = 400;\n    device.vertical.height = 700;\n    this.list.addNewItem(this.emulatedDevicesList.custom().length, device);\n  }\n\n  private toNumericInputValue(value: number): string {\n    return value ? String(value) : '';\n  }\n\n  renderItem(device: EmulationModel.EmulatedDevices.EmulatedDevice, editable: boolean): Element {\n    const label = document.createElement('label');\n    label.classList.add('devices-list-item');\n    const checkbox = (label.createChild('input', 'devices-list-checkbox') as HTMLInputElement);\n    checkbox.type = 'checkbox';\n    checkbox.checked = device.show();\n    checkbox.addEventListener('click', onItemClicked.bind(this), false);\n    const span = document.createElement('span');\n    span.classList.add('device-name');\n    span.appendChild(document.createTextNode(device.title));\n    label.appendChild(span);\n    return label;\n\n    function onItemClicked(this: DevicesSettingsTab, event: Event): void {\n      const show = checkbox.checked;\n      device.setShow(show);\n      this.muteAndSaveDeviceList(editable);\n      event.consume();\n    }\n  }\n\n  removeItemRequested(item: EmulationModel.EmulatedDevices.EmulatedDevice): void {\n    this.emulatedDevicesList.removeCustomDevice(item);\n  }\n\n  commitEdit(\n      device: EmulationModel.EmulatedDevices.EmulatedDevice,\n      editor: UI.ListWidget.Editor<EmulationModel.EmulatedDevices.EmulatedDevice>, isNew: boolean): void {\n    device.title = editor.control('title').value.trim();\n    device.vertical.width = editor.control('width').value ? parseInt(editor.control('width').value, 10) : 0;\n    device.vertical.height = editor.control('height').value ? parseInt(editor.control('height').value, 10) : 0;\n    device.horizontal.width = device.vertical.height;\n    device.horizontal.height = device.vertical.width;\n    device.deviceScaleFactor = editor.control('scale').value ? parseFloat(editor.control('scale').value) : 0;\n    device.userAgent = editor.control('user-agent').value;\n    device.modes = [];\n    device.modes.push({\n      title: '',\n      orientation: EmulationModel.EmulatedDevices.Vertical,\n      insets: new EmulationModel.DeviceModeModel.Insets(0, 0, 0, 0),\n      image: null,\n    });\n    device.modes.push({\n      title: '',\n      orientation: EmulationModel.EmulatedDevices.Horizontal,\n      insets: new EmulationModel.DeviceModeModel.Insets(0, 0, 0, 0),\n      image: null,\n    });\n    device.capabilities = [];\n    const uaType = editor.control('ua-type').value;\n    if (uaType === EmulationModel.DeviceModeModel.UA.Mobile ||\n        uaType === EmulationModel.DeviceModeModel.UA.MobileNoTouch) {\n      device.capabilities.push(EmulationModel.EmulatedDevices.Capability.Mobile);\n    }\n    if (uaType === EmulationModel.DeviceModeModel.UA.Mobile ||\n        uaType === EmulationModel.DeviceModeModel.UA.DesktopTouch) {\n      device.capabilities.push(EmulationModel.EmulatedDevices.Capability.Touch);\n    }\n    const userAgentControlValue =\n        (editor.control('ua-metadata') as\n         UI.ListWidget.CustomEditorControl<EmulationComponents.UserAgentClientHintsForm.UserAgentClientHintsFormData>)\n            .value.metaData;\n    if (userAgentControlValue) {\n      device.userAgentMetadata = {\n        ...userAgentControlValue,\n        mobile:\n            (uaType === EmulationModel.DeviceModeModel.UA.Mobile ||\n             uaType === EmulationModel.DeviceModeModel.UA.MobileNoTouch),\n      };\n    }\n    if (isNew) {\n      this.emulatedDevicesList.addCustomDevice(device);\n    } else {\n      this.emulatedDevicesList.saveCustomDevices();\n    }\n    this.addCustomButton.scrollIntoViewIfNeeded();\n    this.addCustomButton.focus();\n    this.ariaSuccessMessageElement.setAttribute(\n        'aria-label', i18nString(UIStrings.deviceAddedOrUpdated, {PH1: device.title}));\n  }\n\n  beginEdit(device: EmulationModel.EmulatedDevices.EmulatedDevice):\n      UI.ListWidget.Editor<EmulationModel.EmulatedDevices.EmulatedDevice> {\n    const editor = this.createEditor();\n    editor.control('title').value = device.title;\n    editor.control('width').value = this.toNumericInputValue(device.vertical.width);\n    editor.control('height').value = this.toNumericInputValue(device.vertical.height);\n    editor.control('scale').value = this.toNumericInputValue(device.deviceScaleFactor);\n    editor.control('user-agent').value = device.userAgent;\n    let uaType;\n    if (device.mobile()) {\n      uaType =\n          device.touch() ? EmulationModel.DeviceModeModel.UA.Mobile : EmulationModel.DeviceModeModel.UA.MobileNoTouch;\n    } else {\n      uaType =\n          device.touch() ? EmulationModel.DeviceModeModel.UA.DesktopTouch : EmulationModel.DeviceModeModel.UA.Desktop;\n    }\n    editor.control('ua-type').value = uaType;\n    (editor.control('ua-metadata') as\n     UI.ListWidget.CustomEditorControl<EmulationComponents.UserAgentClientHintsForm.UserAgentClientHintsFormData>)\n        .value = {metaData: device.userAgentMetadata || undefined};\n    return editor;\n  }\n\n  private createEditor(): UI.ListWidget.Editor<EmulationModel.EmulatedDevices.EmulatedDevice> {\n    if (this.editor) {\n      return this.editor;\n    }\n\n    const editor = new UI.ListWidget.Editor<EmulationModel.EmulatedDevices.EmulatedDevice>();\n    this.editor = editor;\n    const content = editor.contentElement();\n\n    const deviceFields = content.createChild('div', 'devices-edit-fields');\n    UI.UIUtils.createTextChild(deviceFields.createChild('b'), i18nString(UIStrings.device));\n    const deviceNameField = editor.createInput('title', 'text', i18nString(UIStrings.deviceName), titleValidator);\n    deviceFields.createChild('div', 'hbox').appendChild(deviceNameField);\n    deviceNameField.id = 'custom-device-name-field';\n    const screen = deviceFields.createChild('div', 'hbox');\n    screen.appendChild(editor.createInput('width', 'text', i18nString(UIStrings.width), widthValidator));\n    screen.appendChild(editor.createInput('height', 'text', i18nString(UIStrings.height), heightValidator));\n    const dpr = editor.createInput('scale', 'text', i18nString(UIStrings.devicePixelRatio), scaleValidator);\n    dpr.classList.add('device-edit-fixed');\n    screen.appendChild(dpr);\n\n    const uaStringFields = content.createChild('div', 'devices-edit-fields');\n    UI.UIUtils.createTextChild(uaStringFields.createChild('b'), i18nString(UIStrings.userAgentString));\n\n    const ua = uaStringFields.createChild('div', 'hbox');\n    ua.appendChild(editor.createInput('user-agent', 'text', i18nString(UIStrings.userAgentString), () => {\n      return {valid: true, errorMessage: undefined};\n    }));\n    const uaTypeOptions = [\n      EmulationModel.DeviceModeModel.UA.Mobile,\n      EmulationModel.DeviceModeModel.UA.MobileNoTouch,\n      EmulationModel.DeviceModeModel.UA.Desktop,\n      EmulationModel.DeviceModeModel.UA.DesktopTouch,\n    ];\n    const uaType = editor.createSelect('ua-type', uaTypeOptions, () => {\n      return {valid: true, errorMessage: undefined};\n    }, i18nString(UIStrings.userAgentType));\n    uaType.classList.add('device-edit-fixed');\n    ua.appendChild(uaType);\n\n    const uaMetadata = editor.createCustomControl(\n        'ua-metadata', EmulationComponents.UserAgentClientHintsForm.UserAgentClientHintsForm,\n        userAgentMetadataValidator);\n    uaMetadata.value = {};\n    uaMetadata.addEventListener('clienthintschange', () => editor.requestValidation(), false);\n    content.appendChild(uaMetadata);\n\n    return editor;\n\n    function userAgentMetadataValidator(): UI.ListWidget.ValidatorResult {\n      return uaMetadata.validate();\n    }\n\n    function titleValidator(\n        item: EmulationModel.EmulatedDevices.EmulatedDevice, index: number,\n        input: UI.ListWidget.EditorControl): UI.ListWidget.ValidatorResult {\n      let valid = false;\n      let errorMessage;\n\n      const value = input.value.trim();\n      if (value.length >= EmulationModel.DeviceModeModel.MaxDeviceNameLength) {\n        errorMessage =\n            i18nString(UIStrings.deviceNameMustBeLessThanS, {PH1: EmulationModel.DeviceModeModel.MaxDeviceNameLength});\n      } else if (value.length === 0) {\n        errorMessage = i18nString(UIStrings.deviceNameCannotBeEmpty);\n      } else {\n        valid = true;\n      }\n\n      return {valid, errorMessage};\n    }\n\n    function widthValidator(\n        item: EmulationModel.EmulatedDevices.EmulatedDevice, index: number,\n        input: UI.ListWidget.EditorControl): UI.ListWidget.ValidatorResult {\n      return EmulationModel.DeviceModeModel.DeviceModeModel.widthValidator(input.value);\n    }\n\n    function heightValidator(\n        item: EmulationModel.EmulatedDevices.EmulatedDevice, index: number,\n        input: UI.ListWidget.EditorControl): UI.ListWidget.ValidatorResult {\n      return EmulationModel.DeviceModeModel.DeviceModeModel.heightValidator(input.value);\n    }\n\n    function scaleValidator(\n        item: EmulationModel.EmulatedDevices.EmulatedDevice, index: number,\n        input: UI.ListWidget.EditorControl): UI.ListWidget.ValidatorResult {\n      return EmulationModel.DeviceModeModel.DeviceModeModel.scaleValidator(input.value);\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
