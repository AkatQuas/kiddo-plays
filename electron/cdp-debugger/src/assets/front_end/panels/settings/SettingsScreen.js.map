{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/settings/SettingsScreen.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as PanelComponents from './components/components.js';\n\nimport settingsScreenStyles from './settingsScreen.css.js';\n\nimport type {KeybindsSettingsTab} from './KeybindsSettingsTab.js';\n\nconst UIStrings = {\n  /**\n  *@description Name of the Settings view\n  */\n  settings: 'Settings',\n  /**\n  *@description Text for keyboard shortcuts\n  */\n  shortcuts: 'Shortcuts',\n  /**\n  *@description Text in Settings Screen of the Settings\n  */\n  preferences: 'Preferences',\n  /**\n  *@description Text of button in Settings Screen of the Settings\n  */\n  restoreDefaultsAndReload: 'Restore defaults and reload',\n  /**\n  *@description Text in Settings Screen of the Settings\n  */\n  experiments: 'Experiments',\n  /**\n  *@description Message shown in the experiments panel to warn users about any possible unstable features.\n  */\n  theseExperimentsCouldBeUnstable:\n      'These experiments could be unstable or unreliable and may require you to restart DevTools.',\n  /**\n  *@description Message text content in Settings Screen of the Settings\n  */\n  theseExperimentsAreParticularly: 'These experiments are particularly unstable. Enable at your own risk.',\n  /**\n  *@description Warning text content in Settings Screen of the Settings\n  */\n  warning: 'WARNING:',\n  /**\n  *@description Message to display if a setting change requires a reload of DevTools\n  */\n  oneOrMoreSettingsHaveChanged: 'One or more settings have changed which requires a reload to take effect.',\n  /**\n  * @description Label for a filter text input that controls which experiments are shown.\n  */\n  filterExperimentsLabel: 'Filter',\n  /**\n  * @description Warning text shown when the user has entered text to filter the\n  * list of experiments, but no experiments match the filter.\n  */\n  noResults: 'No experiments match the filter',\n  /**\n  *@description Text that is usually a hyperlink to more documentation\n  */\n  learnMore: 'Learn more',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/settings/SettingsScreen.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet settingsScreenInstance: SettingsScreen;\n\nexport class SettingsScreen extends UI.Widget.VBox implements UI.View.ViewLocationResolver {\n  private readonly tabbedLocation: UI.View.TabbedViewLocation;\n  private keybindsTab?: KeybindsSettingsTab;\n  private reportTabOnReveal: boolean;\n\n  private constructor() {\n    super(true);\n\n    this.contentElement.classList.add('settings-window-main');\n    this.contentElement.classList.add('vbox');\n\n    const settingsLabelElement = document.createElement('div');\n    const settingsTitleElement =\n        UI.Utils\n            .createShadowRootWithCoreStyles(\n                settingsLabelElement, {cssFile: [settingsScreenStyles], delegatesFocus: undefined})\n            .createChild('div', 'settings-window-title');\n\n    UI.ARIAUtils.markAsHeading(settingsTitleElement, 1);\n    settingsTitleElement.textContent = i18nString(UIStrings.settings);\n\n    this.tabbedLocation = UI.ViewManager.ViewManager.instance().createTabbedLocation(\n        () => SettingsScreen.revealSettingsScreen(), 'settings-view');\n    const tabbedPane = this.tabbedLocation.tabbedPane();\n    tabbedPane.registerCSSFiles([settingsScreenStyles]);\n    tabbedPane.leftToolbar().appendToolbarItem(new UI.Toolbar.ToolbarItem(settingsLabelElement));\n    tabbedPane.setShrinkableTabs(false);\n    tabbedPane.makeVerticalTabLayout();\n    const keyBindsView = UI.ViewManager.ViewManager.instance().view('keybinds');\n    if (keyBindsView) {\n      void keyBindsView.widget().then(widget => {\n        this.keybindsTab = widget as KeybindsSettingsTab;\n      });\n    }\n    tabbedPane.show(this.contentElement);\n    tabbedPane.selectTab('preferences');\n    tabbedPane.addEventListener(UI.TabbedPane.Events.TabInvoked, this.tabInvoked, this);\n    this.reportTabOnReveal = false;\n  }\n\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): SettingsScreen {\n    const {forceNew} = opts;\n    if (!settingsScreenInstance || forceNew) {\n      settingsScreenInstance = new SettingsScreen();\n    }\n\n    return settingsScreenInstance;\n  }\n\n  private static revealSettingsScreen(): SettingsScreen {\n    const settingsScreen = SettingsScreen.instance();\n    if (settingsScreen.isShowing()) {\n      return settingsScreen;\n    }\n\n    settingsScreen.reportTabOnReveal = true;\n    const dialog = new UI.Dialog.Dialog();\n    dialog.contentElement.tabIndex = -1;\n    dialog.addCloseButton();\n    dialog.setOutsideClickCallback(() => {});\n    dialog.setPointerEventsBehavior(UI.GlassPane.PointerEventsBehavior.PierceGlassPane);\n    dialog.setOutsideTabIndexBehavior(UI.Dialog.OutsideTabIndexBehavior.PreserveMainViewTabIndex);\n    settingsScreen.show(dialog.contentElement);\n    dialog.setEscapeKeyCallback(settingsScreen.onEscapeKeyPressed.bind(settingsScreen));\n    dialog.setMarginBehavior(UI.GlassPane.MarginBehavior.NoMargin);\n    // UI.Dialog extends GlassPane and overrides the `show` method with a wider\n    // accepted type. However, TypeScript uses the supertype declaration to\n    // determine the full type, which requires a `!Document`.\n    // @ts-ignore\n    dialog.show();\n\n    return settingsScreen;\n  }\n\n  static async showSettingsScreen(\n      options: ShowSettingsScreenOptions|undefined = {name: undefined, focusTabHeader: undefined}): Promise<void> {\n    const {name, focusTabHeader} = options;\n    const settingsScreen = SettingsScreen.revealSettingsScreen();\n\n    settingsScreen.selectTab(name || 'preferences');\n    const tabbedPane = settingsScreen.tabbedLocation.tabbedPane();\n    await tabbedPane.waitForTabElementUpdate();\n    if (focusTabHeader) {\n      tabbedPane.focusSelectedTabHeader();\n    } else {\n      tabbedPane.focus();\n    }\n  }\n\n  resolveLocation(_locationName: string): UI.View.ViewLocation|null {\n    return this.tabbedLocation;\n  }\n\n  private selectTab(name: string): void {\n    this.tabbedLocation.tabbedPane().selectTab(name, /* userGesture */ true);\n  }\n\n  private tabInvoked(event: Common.EventTarget.EventTargetEvent<UI.TabbedPane.EventData>): void {\n    const eventData = event.data;\n    if (!eventData.isUserGesture) {\n      return;\n    }\n\n    const prevTabId = eventData.prevTabId;\n    const tabId = eventData.tabId;\n    if (!this.reportTabOnReveal && prevTabId && prevTabId === tabId) {\n      return;\n    }\n\n    this.reportTabOnReveal = false;\n    this.reportSettingsPanelShown(tabId);\n  }\n\n  private reportSettingsPanelShown(tabId: string): void {\n    if (tabId === i18nString(UIStrings.shortcuts)) {\n      Host.userMetrics.settingsPanelShown('shortcuts');\n      return;\n    }\n\n    Host.userMetrics.settingsPanelShown(tabId);\n  }\n\n  private onEscapeKeyPressed(event: Event): void {\n    if (this.tabbedLocation.tabbedPane().selectedTabId === 'keybinds' && this.keybindsTab) {\n      this.keybindsTab.onEscapeKeyPressed(event);\n    }\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([settingsScreenStyles]);\n  }\n}\n\nclass SettingsTab extends UI.Widget.VBox {\n  containerElement: HTMLElement;\n  constructor(name: string, id?: string) {\n    super();\n    this.element.classList.add('settings-tab-container');\n    if (id) {\n      this.element.id = id;\n    }\n    const header = this.element.createChild('header');\n    UI.UIUtils.createTextChild(header.createChild('h1'), name);\n    this.containerElement = this.element.createChild('div', 'settings-container-wrapper')\n                                .createChild('div', 'settings-tab settings-content settings-container');\n  }\n\n  protected appendSection(name?: string): HTMLElement {\n    const block = this.containerElement.createChild('div', 'settings-block');\n    if (name) {\n      UI.ARIAUtils.markAsGroup(block);\n      const title = block.createChild('div', 'settings-section-title');\n      title.textContent = name;\n      UI.ARIAUtils.markAsHeading(title, 2);\n      UI.ARIAUtils.setAccessibleName(block, name);\n    }\n    return block;\n  }\n}\n\nlet genericSettingsTabInstance: GenericSettingsTab;\n\nexport class GenericSettingsTab extends SettingsTab {\n  private readonly syncSection: PanelComponents.SyncSection.SyncSection = new PanelComponents.SyncSection.SyncSection();\n\n  constructor() {\n    super(i18nString(UIStrings.preferences), 'preferences-tab-content');\n\n    // GRID, MOBILE, EMULATION, and RENDERING are intentionally excluded from this list.\n    const explicitSectionOrder: Common.Settings.SettingCategory[] = [\n      Common.Settings.SettingCategory.NONE,\n      Common.Settings.SettingCategory.APPEARANCE,\n      Common.Settings.SettingCategory.SOURCES,\n      Common.Settings.SettingCategory.ELEMENTS,\n      Common.Settings.SettingCategory.NETWORK,\n      Common.Settings.SettingCategory.PERFORMANCE,\n      Common.Settings.SettingCategory.MEMORY,\n      Common.Settings.SettingCategory.CONSOLE,\n      Common.Settings.SettingCategory.EXTENSIONS,\n      Common.Settings.SettingCategory.PERSISTENCE,\n      Common.Settings.SettingCategory.DEBUGGER,\n      Common.Settings.SettingCategory.GLOBAL,\n    ];\n    if (Root.Runtime.experiments.isEnabled(Root.Runtime.ExperimentName.SYNC_SETTINGS)) {\n      explicitSectionOrder.push(Common.Settings.SettingCategory.SYNC);\n    }\n\n    // Some settings define their initial ordering.\n    const preRegisteredSettings = Common.Settings.getRegisteredSettings().sort(\n        (firstSetting, secondSetting) => {\n          if (firstSetting.order && secondSetting.order) {\n            return (firstSetting.order - secondSetting.order);\n          }\n          if (firstSetting.order) {\n            return -1;\n          }\n          if (secondSetting.order) {\n            return 1;\n          }\n          return 0;\n        },\n    );\n\n    for (const sectionCategory of explicitSectionOrder) {\n      const settingsForSection = preRegisteredSettings.filter(\n          setting => setting.category === sectionCategory && GenericSettingsTab.isSettingVisible(setting));\n      this.createSectionElement(sectionCategory, settingsForSection);\n    }\n\n    this.appendSection().appendChild(\n        UI.UIUtils.createTextButton(i18nString(UIStrings.restoreDefaultsAndReload), restoreAndReload));\n\n    function restoreAndReload(): void {\n      Common.Settings.Settings.instance().clearAll();\n      Components.Reload.reload();\n    }\n  }\n\n  static instance(opts = {forceNew: null}): GenericSettingsTab {\n    const {forceNew} = opts;\n    if (!genericSettingsTabInstance || forceNew) {\n      genericSettingsTabInstance = new GenericSettingsTab();\n    }\n\n    return genericSettingsTabInstance;\n  }\n\n  static isSettingVisible(setting: Common.Settings.SettingRegistration): boolean {\n    const titleMac = setting.titleMac && setting.titleMac();\n    const defaultTitle = setting.title && setting.title();\n    const title = titleMac || defaultTitle;\n    return Boolean(title && setting.category);\n  }\n\n  override wasShown(): void {\n    super.wasShown();\n    this.updateSyncSection();\n  }\n\n  private updateSyncSection(): void {\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.getSyncInformation(syncInfo => {\n      this.syncSection.data = {\n        syncInfo,\n        syncSetting: Common.Settings.moduleSetting('sync_preferences') as Common.Settings.Setting<boolean>,\n      };\n    });\n  }\n\n  private createExtensionSection(settings: Common.Settings.SettingRegistration[]): void {\n    const sectionName = Common.Settings.SettingCategory.EXTENSIONS;\n    const settingUI = Components.Linkifier.LinkHandlerSettingUI.instance() as UI.SettingsUI.SettingUI;\n    const element = settingUI.settingElement();\n    if (element) {\n      const sectionElement = this.createStandardSectionElement(sectionName, settings);\n      sectionElement.appendChild(element);\n    }\n  }\n\n  private createSectionElement(\n      category: Common.Settings.SettingCategory, settings: Common.Settings.SettingRegistration[]): void {\n    // Always create the EXTENSIONS section and append the link handling control.\n    if (category === Common.Settings.SettingCategory.EXTENSIONS) {\n      this.createExtensionSection(settings);\n    } else if (category === Common.Settings.SettingCategory.SYNC && settings.length > 0) {\n      this.containerElement.appendChild(this.syncSection);\n    } else if (settings.length > 0) {\n      this.createStandardSectionElement(category, settings);\n    }\n  }\n\n  private createStandardSectionElement(\n      category: Common.Settings.SettingCategory, settings: Common.Settings.SettingRegistration[]): Element {\n    const uiSectionName = Common.Settings.getLocalizedSettingsCategory(category);\n    const sectionElement = this.appendSection(uiSectionName);\n    for (const settingRegistration of settings) {\n      const setting = Common.Settings.Settings.instance().moduleSetting(settingRegistration.settingName);\n      const settingControl = UI.SettingsUI.createControlForSetting(setting);\n      if (settingControl) {\n        sectionElement.appendChild(settingControl);\n      }\n    }\n    return sectionElement;\n  }\n}\n\nlet experimentsSettingsTabInstance: ExperimentsSettingsTab;\n\nexport class ExperimentsSettingsTab extends SettingsTab {\n  private experimentsSection: HTMLElement|undefined;\n  private unstableExperimentsSection: HTMLElement|undefined;\n\n  constructor() {\n    super(i18nString(UIStrings.experiments), 'experiments-tab-content');\n    const filterSection = this.appendSection();\n    filterSection.classList.add('experiments-filter');\n\n    const labelElement = filterSection.createChild('label');\n    labelElement.textContent = i18nString(UIStrings.filterExperimentsLabel);\n    const inputElement = UI.UIUtils.createInput('', 'text');\n    UI.ARIAUtils.bindLabelToControl(labelElement, inputElement);\n    filterSection.appendChild(inputElement);\n    inputElement.addEventListener('input', () => this.renderExperiments(inputElement.value.toLowerCase()), false);\n\n    this.renderExperiments('');\n  }\n\n  private renderExperiments(filterText: string): void {\n    if (this.experimentsSection) {\n      this.experimentsSection.remove();\n    }\n    if (this.unstableExperimentsSection) {\n      this.unstableExperimentsSection.remove();\n    }\n    const experiments = Root.Runtime.experiments.allConfigurableExperiments().sort();\n    const unstableExperiments = experiments.filter(e => e.unstable && e.title.toLowerCase().includes(filterText));\n    const stableExperiments = experiments.filter(e => !e.unstable && e.title.toLowerCase().includes(filterText));\n    if (stableExperiments.length) {\n      this.experimentsSection = this.appendSection();\n      const warningMessage = i18nString(UIStrings.theseExperimentsCouldBeUnstable);\n      this.experimentsSection.appendChild(this.createExperimentsWarningSubsection(warningMessage));\n      for (const experiment of stableExperiments) {\n        this.experimentsSection.appendChild(this.createExperimentCheckbox(experiment));\n      }\n    }\n    if (unstableExperiments.length) {\n      this.unstableExperimentsSection = this.appendSection();\n      const warningMessage = i18nString(UIStrings.theseExperimentsAreParticularly);\n      this.unstableExperimentsSection.appendChild(this.createExperimentsWarningSubsection(warningMessage));\n      for (const experiment of unstableExperiments) {\n        this.unstableExperimentsSection.appendChild(this.createExperimentCheckbox(experiment));\n      }\n    }\n    if (!stableExperiments.length && !unstableExperiments.length) {\n      this.experimentsSection = this.appendSection();\n      const warning = this.experimentsSection.createChild('span');\n      warning.textContent = i18nString(UIStrings.noResults);\n    }\n  }\n\n  static instance(opts = {forceNew: null}): ExperimentsSettingsTab {\n    const {forceNew} = opts;\n    if (!experimentsSettingsTabInstance || forceNew) {\n      experimentsSettingsTabInstance = new ExperimentsSettingsTab();\n    }\n\n    return experimentsSettingsTabInstance;\n  }\n\n  private createExperimentsWarningSubsection(warningMessage: string): Element {\n    const subsection = document.createElement('div');\n    const warning = subsection.createChild('span', 'settings-experiments-warning-subsection-warning');\n    warning.textContent = i18nString(UIStrings.warning);\n    UI.UIUtils.createTextChild(subsection, ' ');\n    const message = subsection.createChild('span', 'settings-experiments-warning-subsection-message');\n    message.textContent = warningMessage;\n    return subsection;\n  }\n\n  private createExperimentCheckbox(experiment: Root.Runtime.Experiment): HTMLParagraphElement {\n    const label = UI.UIUtils.CheckboxLabel.create(experiment.title, experiment.isEnabled());\n    const input = label.checkboxElement;\n    input.name = experiment.name;\n    function listener(): void {\n      experiment.setEnabled(input.checked);\n      Host.userMetrics.experimentChanged(experiment.name, experiment.isEnabled());\n      UI.InspectorView.InspectorView.instance().displayReloadRequiredWarning(\n          i18nString(UIStrings.oneOrMoreSettingsHaveChanged));\n    }\n    input.addEventListener('click', listener, false);\n\n    const p = document.createElement('p');\n    p.classList.add('settings-experiment');\n    if (experiment.unstable && !experiment.isEnabled()) {\n      p.classList.add('settings-experiment-unstable');\n    }\n    p.appendChild(label);\n\n    if (experiment.docLink) {\n      const link = UI.XLink.XLink.create(experiment.docLink);\n      link.textContent = '';\n      link.setAttribute('aria-label', i18nString(UIStrings.learnMore));\n\n      const linkIcon = new IconButton.Icon.Icon();\n      linkIcon.data = {iconName: 'help_outline', color: 'var(--color-text-secondary)', width: '16px', height: '16px'};\n      linkIcon.classList.add('link-icon');\n      link.prepend(linkIcon);\n\n      p.appendChild(link);\n    }\n\n    return p;\n  }\n}\n\nlet actionDelegateInstance: ActionDelegate;\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): ActionDelegate {\n    const {forceNew} = opts;\n    if (!actionDelegateInstance || forceNew) {\n      actionDelegateInstance = new ActionDelegate();\n    }\n\n    return actionDelegateInstance;\n  }\n\n  handleAction(context: UI.Context.Context, actionId: string): boolean {\n    switch (actionId) {\n      case 'settings.show':\n        void SettingsScreen.showSettingsScreen({focusTabHeader: true} as ShowSettingsScreenOptions);\n        return true;\n      case 'settings.documentation':\n        Host.InspectorFrontendHost.InspectorFrontendHostInstance.openInNewTab(UI.UIUtils.addReferrerToURL(\n            'https://developer.chrome.com/docs/devtools/' as Platform.DevToolsPath.UrlString));\n        return true;\n      case 'settings.shortcuts':\n        void SettingsScreen.showSettingsScreen({name: 'keybinds', focusTabHeader: true});\n        return true;\n    }\n    return false;\n  }\n}\nlet revealerInstance: Revealer;\nexport class Revealer implements Common.Revealer.Revealer {\n  static instance(opts: {forceNew: boolean} = {forceNew: false}): Revealer {\n    const {forceNew} = opts;\n    if (!revealerInstance || forceNew) {\n      revealerInstance = new Revealer();\n    }\n\n    return revealerInstance;\n  }\n\n  reveal(object: Object): Promise<void> {\n    console.assert(object instanceof Common.Settings.Setting);\n    const setting = object as Common.Settings.Setting<string>;\n    let success = false;\n\n    for (const settingRegistration of Common.Settings.getRegisteredSettings()) {\n      if (!GenericSettingsTab.isSettingVisible(settingRegistration)) {\n        continue;\n      }\n      if (settingRegistration.settingName === setting.name) {\n        Host.InspectorFrontendHost.InspectorFrontendHostInstance.bringToFront();\n        void SettingsScreen.showSettingsScreen();\n        success = true;\n      }\n    }\n\n    // Reveal settings views\n    for (const view of UI.ViewManager.getRegisteredViewExtensions()) {\n      const id = view.viewId();\n      const location = view.location();\n      if (location !== UI.ViewManager.ViewLocationValues.SETTINGS_VIEW) {\n        continue;\n      }\n      const settings = view.settings();\n      if (settings && settings.indexOf(setting.name) !== -1) {\n        Host.InspectorFrontendHost.InspectorFrontendHostInstance.bringToFront();\n        void SettingsScreen.showSettingsScreen({name: id} as ShowSettingsScreenOptions);\n        success = true;\n      }\n    }\n\n    return success ? Promise.resolve() : Promise.reject();\n  }\n}\nexport interface ShowSettingsScreenOptions {\n  name?: string;\n  focusTabHeader?: boolean;\n}\n"],
  "mappings": "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",
  "names": []
}
