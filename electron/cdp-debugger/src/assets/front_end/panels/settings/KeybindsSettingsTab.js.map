{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/settings/KeybindsSettingsTab.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport keybindsSettingsTabStyles from './keybindsSettingsTab.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Text for keyboard shortcuts\n  */\n  shortcuts: 'Shortcuts',\n  /**\n  *@description Text appearing before a select control offering users their choice of keyboard shortcut presets.\n  */\n  matchShortcutsFromPreset: 'Match shortcuts from preset',\n  /**\n  *@description Screen reader label for list of keyboard shortcuts in settings\n  */\n  keyboardShortcutsList: 'Keyboard shortcuts list',\n  /**\n  *@description Screen reader label for an icon denoting a shortcut that has been changed from its default\n  */\n  shortcutModified: 'Shortcut modified',\n  /**\n  *@description Screen reader label for an empty shortcut cell in custom shortcuts settings tab\n  */\n  noShortcutForAction: 'No shortcut for action',\n  /**\n  *@description Link text in the settings pane to add another shortcut for an action\n  */\n  addAShortcut: 'Add a shortcut',\n  /**\n  *@description Label for a button in the settings pane that confirms changes to a keyboard shortcut\n  */\n  confirmChanges: 'Confirm changes',\n  /**\n  *@description Label for a button in the settings pane that discards changes to the shortcut being edited\n  */\n  discardChanges: 'Discard changes',\n  /**\n  *@description Label for a button in the settings pane that removes a keyboard shortcut.\n  */\n  removeShortcut: 'Remove shortcut',\n  /**\n  *@description Label for a button in the settings pane that edits a keyboard shortcut\n  */\n  editShortcut: 'Edit shortcut',\n  /**\n  *@description Message shown in settings when the user inputs a modifier-only shortcut such as Ctrl+Shift.\n  */\n  shortcutsCannotContainOnly: 'Shortcuts cannot contain only modifier keys.',\n  /**\n  *@description Messages shown in shortcuts settings when the user inputs a shortcut that is already in use.\n  *@example {Performance} PH1\n  *@example {Start/stop recording} PH2\n  */\n  thisShortcutIsInUseByS: 'This shortcut is in use by {PH1}: {PH2}.',\n  /**\n  *@description Message shown in settings when to restore default shortcuts.\n  */\n  RestoreDefaultShortcuts: 'Restore default shortcuts',\n  /**\n  *@description Message shown in settings to show the full list of keyboard shortcuts.\n  */\n  FullListOfDevtoolsKeyboard: 'Full list of DevTools keyboard shortcuts and gestures',\n  /**\n   *@description Label for a button in the shortcut editor that resets all shortcuts for the current action.\n  */\n  ResetShortcutsForAction: 'Reset shortcuts for action',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/settings/KeybindsSettingsTab.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet keybindsSettingsTabInstance: KeybindsSettingsTab;\nexport class KeybindsSettingsTab extends UI.Widget.VBox implements UI.ListControl.ListDelegate<KeybindsItem> {\n  private readonly items: UI.ListModel.ListModel<KeybindsItem>;\n  private list: UI.ListControl.ListControl<string|UI.ActionRegistration.Action>;\n  private editingItem: UI.ActionRegistration.Action|null;\n  private editingRow: ShortcutListItem|null;\n  constructor() {\n    super(true);\n\n    const header = this.contentElement.createChild('header');\n    header.createChild('h1').textContent = i18nString(UIStrings.shortcuts);\n    const keybindsSetSetting = Common.Settings.Settings.instance().moduleSetting('activeKeybindSet');\n    const userShortcutsSetting = Common.Settings.Settings.instance().moduleSetting('userShortcuts');\n    userShortcutsSetting.addChangeListener(this.update, this);\n    keybindsSetSetting.addChangeListener(this.update, this);\n    const keybindsSetSelect =\n        UI.SettingsUI.createControlForSetting(keybindsSetSetting, i18nString(UIStrings.matchShortcutsFromPreset));\n    if (keybindsSetSelect) {\n      keybindsSetSelect.classList.add('keybinds-set-select');\n      this.contentElement.appendChild(keybindsSetSelect);\n    }\n\n    this.items = new UI.ListModel.ListModel();\n    this.list = new UI.ListControl.ListControl(this.items, this, UI.ListControl.ListMode.NonViewport);\n    this.items.replaceAll(this.createListItems());\n    UI.ARIAUtils.markAsList(this.list.element);\n\n    this.contentElement.appendChild(this.list.element);\n    UI.ARIAUtils.setAccessibleName(this.list.element, i18nString(UIStrings.keyboardShortcutsList));\n    const footer = this.contentElement.createChild('div');\n    footer.classList.add('keybinds-footer');\n    const docsLink = UI.XLink.XLink.create(\n        'https://developer.chrome.com/docs/devtools/shortcuts/', i18nString(UIStrings.FullListOfDevtoolsKeyboard));\n    docsLink.classList.add('docs-link');\n    footer.appendChild(docsLink);\n    footer.appendChild(UI.UIUtils.createTextButton(i18nString(UIStrings.RestoreDefaultShortcuts), () => {\n      userShortcutsSetting.set([]);\n      keybindsSetSetting.set(UI.ShortcutRegistry.DefaultShortcutSetting);\n    }));\n    this.editingItem = null;\n    this.editingRow = null;\n\n    this.update();\n  }\n\n  static instance(opts = {forceNew: null}): KeybindsSettingsTab {\n    const {forceNew} = opts;\n    if (!keybindsSettingsTabInstance || forceNew) {\n      keybindsSettingsTabInstance = new KeybindsSettingsTab();\n    }\n\n    return keybindsSettingsTabInstance;\n  }\n\n  createElementForItem(item: KeybindsItem): Element {\n    let itemElement = document.createElement('div');\n\n    if (typeof item === 'string') {\n      UI.ARIAUtils.setLevel(itemElement, 1);\n      itemElement.classList.add('keybinds-category-header');\n      itemElement.textContent = item;\n    } else {\n      const listItem = new ShortcutListItem(item, this, item === this.editingItem);\n      itemElement = listItem.element;\n      UI.ARIAUtils.setLevel(itemElement, 2);\n      if (item === this.editingItem) {\n        this.editingRow = listItem;\n      }\n    }\n\n    itemElement.classList.add('keybinds-list-item');\n    UI.ARIAUtils.markAsListitem(itemElement);\n    itemElement.tabIndex = item === this.list.selectedItem() && item !== this.editingItem ? 0 : -1;\n    return itemElement;\n  }\n\n  commitChanges(\n      item: UI.ActionRegistration.Action,\n      editedShortcuts: Map<UI.KeyboardShortcut.KeyboardShortcut, UI.KeyboardShortcut.Descriptor[]|null>): void {\n    for (const [originalShortcut, newDescriptors] of editedShortcuts) {\n      if (originalShortcut.type !== UI.KeyboardShortcut.Type.UnsetShortcut) {\n        UI.ShortcutRegistry.ShortcutRegistry.instance().removeShortcut(originalShortcut);\n        if (!newDescriptors) {\n          Host.userMetrics.actionTaken(Host.UserMetrics.Action.ShortcutRemoved);\n        }\n      }\n      if (newDescriptors) {\n        UI.ShortcutRegistry.ShortcutRegistry.instance().registerUserShortcut(\n            originalShortcut.changeKeys(newDescriptors as UI.KeyboardShortcut.Descriptor[])\n                .changeType(UI.KeyboardShortcut.Type.UserShortcut));\n        if (originalShortcut.type === UI.KeyboardShortcut.Type.UnsetShortcut) {\n          Host.userMetrics.actionTaken(Host.UserMetrics.Action.UserShortcutAdded);\n        } else {\n          Host.userMetrics.actionTaken(Host.UserMetrics.Action.ShortcutModified);\n        }\n      }\n    }\n    this.stopEditing(item);\n  }\n\n  /**\n   * This method will never be called.\n   */\n  heightForItem(_item: KeybindsItem): number {\n    return 0;\n  }\n\n  isItemSelectable(_item: KeybindsItem): boolean {\n    return true;\n  }\n\n  selectedItemChanged(\n      from: KeybindsItem|null, to: KeybindsItem|null, fromElement: HTMLElement|null,\n      toElement: HTMLElement|null): void {\n    if (fromElement) {\n      fromElement.tabIndex = -1;\n    }\n    if (toElement) {\n      if (to === this.editingItem && this.editingRow) {\n        this.editingRow.focus();\n      } else {\n        toElement.tabIndex = 0;\n        if (this.list.element.hasFocus()) {\n          toElement.focus();\n        }\n      }\n      this.setDefaultFocusedElement(toElement);\n    }\n  }\n\n  updateSelectedItemARIA(_fromElement: Element|null, _toElement: Element|null): boolean {\n    return true;\n  }\n\n  startEditing(action: UI.ActionRegistration.Action): void {\n    if (this.editingItem) {\n      this.stopEditing(this.editingItem);\n    }\n    UI.UIUtils.markBeingEdited(this.list.element, true);\n    this.editingItem = action;\n    this.list.refreshItem(action);\n  }\n\n  stopEditing(action: UI.ActionRegistration.Action): void {\n    UI.UIUtils.markBeingEdited(this.list.element, false);\n    this.editingItem = null;\n    this.editingRow = null;\n    this.list.refreshItem(action);\n    this.focus();\n  }\n\n  private createListItems(): KeybindsItem[] {\n    const actions = UI.ActionRegistry.ActionRegistry.instance().actions().sort((actionA, actionB) => {\n      if (actionA.category() < actionB.category()) {\n        return -1;\n      }\n      if (actionA.category() > actionB.category()) {\n        return 1;\n      }\n      if (actionA.id() < actionB.id()) {\n        return -1;\n      }\n      if (actionA.id() > actionB.id()) {\n        return 1;\n      }\n      return 0;\n    });\n\n    const items: KeybindsItem[] = [];\n\n    let currentCategory: string;\n    actions.forEach(action => {\n      if (action.id() === 'elements.toggle-element-search') {\n        return;\n      }\n\n      if (currentCategory !== action.category()) {\n        items.push(action.category());\n      }\n      items.push(action);\n      currentCategory = action.category();\n    });\n    return items;\n  }\n\n  onEscapeKeyPressed(event: Event): void {\n    const deepActiveElement = Platform.DOMUtilities.deepActiveElement(document);\n    if (this.editingRow && deepActiveElement && deepActiveElement.nodeName === 'INPUT') {\n      this.editingRow.onEscapeKeyPressed(event);\n    }\n  }\n\n  update(): void {\n    if (this.editingItem) {\n      this.stopEditing(this.editingItem);\n    }\n    this.list.refreshAllItems();\n    if (!this.list.selectedItem()) {\n      this.list.selectItem(this.items.at(0));\n    }\n  }\n\n  willHide(): void {\n    if (this.editingItem) {\n      this.stopEditing(this.editingItem);\n    }\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([keybindsSettingsTabStyles]);\n  }\n}\n\nexport class ShortcutListItem {\n  private isEditing: boolean;\n  private settingsTab: KeybindsSettingsTab;\n  private item: UI.ActionRegistration.Action;\n  element: HTMLDivElement;\n  private editedShortcuts: Map<UI.KeyboardShortcut.KeyboardShortcut, UI.KeyboardShortcut.Descriptor[]|null>;\n  private readonly shortcutInputs: Map<UI.KeyboardShortcut.KeyboardShortcut, Element>;\n  private readonly shortcuts: UI.KeyboardShortcut.KeyboardShortcut[];\n  private elementToFocus: HTMLElement|null;\n  private confirmButton: HTMLButtonElement|null;\n  private addShortcutLinkContainer: Element|null;\n  private errorMessageElement: Element|null;\n  private secondKeyTimeout: number|null;\n  constructor(item: UI.ActionRegistration.Action, settingsTab: KeybindsSettingsTab, isEditing?: boolean) {\n    this.isEditing = Boolean(isEditing);\n    this.settingsTab = settingsTab;\n    this.item = item;\n    this.element = document.createElement('div');\n    this.editedShortcuts = new Map();\n    this.shortcutInputs = new Map();\n    this.shortcuts = UI.ShortcutRegistry.ShortcutRegistry.instance().shortcutsForAction(item.id());\n    this.elementToFocus = null;\n    this.confirmButton = null;\n    this.addShortcutLinkContainer = null;\n    this.errorMessageElement = null;\n    this.secondKeyTimeout = null;\n\n    this.update();\n  }\n\n  focus(): void {\n    if (this.elementToFocus) {\n      this.elementToFocus.focus();\n    }\n  }\n\n  private update(): void {\n    this.element.removeChildren();\n    this.elementToFocus = null;\n    this.shortcutInputs.clear();\n\n    this.element.classList.toggle('keybinds-editing', this.isEditing);\n    this.element.createChild('div', 'keybinds-action-name keybinds-list-text').textContent = this.item.title();\n    this.shortcuts.forEach(this.createShortcutRow, this);\n    if (this.shortcuts.length === 0) {\n      this.createEmptyInfo();\n    }\n    if (this.isEditing) {\n      this.setupEditor();\n    }\n  }\n\n  private createEmptyInfo(): void {\n    if (UI.ShortcutRegistry.ShortcutRegistry.instance().actionHasDefaultShortcut(this.item.id())) {\n      const icon = UI.Icon.Icon.create('largeicon-shortcut-changed', 'keybinds-modified');\n      UI.ARIAUtils.setAccessibleName(icon, i18nString(UIStrings.shortcutModified));\n      this.element.appendChild(icon);\n    }\n    if (!this.isEditing) {\n      const emptyElement = this.element.createChild('div', 'keybinds-shortcut keybinds-list-text');\n      UI.ARIAUtils.setAccessibleName(emptyElement, i18nString(UIStrings.noShortcutForAction));\n      if (Root.Runtime.experiments.isEnabled('keyboardShortcutEditor')) {\n        this.element.appendChild(this.createEditButton());\n      }\n    }\n  }\n\n  private setupEditor(): void {\n    this.addShortcutLinkContainer = this.element.createChild('div', 'keybinds-shortcut devtools-link');\n    const addShortcutLink = this.addShortcutLinkContainer.createChild('span', 'devtools-link') as HTMLDivElement;\n    addShortcutLink.textContent = i18nString(UIStrings.addAShortcut);\n    addShortcutLink.tabIndex = 0;\n    UI.ARIAUtils.markAsLink(addShortcutLink);\n    self.onInvokeElement(addShortcutLink, this.addShortcut.bind(this));\n    if (!this.elementToFocus) {\n      this.elementToFocus = addShortcutLink;\n    }\n\n    this.errorMessageElement = this.element.createChild('div', 'keybinds-info keybinds-error hidden');\n    UI.ARIAUtils.markAsAlert(this.errorMessageElement);\n    this.element.appendChild(this.createIconButton(\n        i18nString(UIStrings.ResetShortcutsForAction), 'largeicon-undo', '', this.resetShortcutsToDefaults.bind(this)));\n    this.confirmButton = this.createIconButton(\n        i18nString(UIStrings.confirmChanges), 'largeicon-checkmark', 'keybinds-confirm-button',\n        () => this.settingsTab.commitChanges(this.item, this.editedShortcuts));\n    this.element.appendChild(this.confirmButton);\n    this.element.appendChild(this.createIconButton(\n        i18nString(UIStrings.discardChanges), 'largeicon-delete', 'keybinds-cancel-button',\n        () => this.settingsTab.stopEditing(this.item)));\n    this.element.addEventListener('keydown', event => {\n      if (isEscKey(event)) {\n        this.settingsTab.stopEditing(this.item);\n        event.consume(true);\n      }\n    });\n  }\n\n  private addShortcut(): void {\n    const shortcut =\n        new UI.KeyboardShortcut.KeyboardShortcut([], this.item.id(), UI.KeyboardShortcut.Type.UnsetShortcut);\n    this.shortcuts.push(shortcut);\n    this.update();\n    const shortcutInput = this.shortcutInputs.get(shortcut) as HTMLElement;\n    if (shortcutInput) {\n      shortcutInput.focus();\n    }\n  }\n\n  private createShortcutRow(shortcut: UI.KeyboardShortcut.KeyboardShortcut, index?: number): void {\n    if (this.editedShortcuts.has(shortcut) && !this.editedShortcuts.get(shortcut)) {\n      return;\n    }\n    let icon: UI.Icon.Icon;\n    if (shortcut.type !== UI.KeyboardShortcut.Type.UnsetShortcut && !shortcut.isDefault()) {\n      icon = UI.Icon.Icon.create('largeicon-shortcut-changed', 'keybinds-modified');\n      UI.ARIAUtils.setAccessibleName(icon, i18nString(UIStrings.shortcutModified));\n      this.element.appendChild(icon);\n    }\n    const shortcutElement = this.element.createChild('div', 'keybinds-shortcut keybinds-list-text');\n    if (this.isEditing) {\n      const shortcutInput = shortcutElement.createChild('input', 'harmony-input') as HTMLInputElement;\n      shortcutInput.spellcheck = false;\n      shortcutInput.maxLength = 0;\n      this.shortcutInputs.set(shortcut, shortcutInput);\n      if (!this.elementToFocus) {\n        this.elementToFocus = shortcutInput;\n      }\n      shortcutInput.value = shortcut.title();\n      const userDescriptors = this.editedShortcuts.get(shortcut);\n      if (userDescriptors) {\n        shortcutInput.value = this.shortcutInputTextForDescriptors(userDescriptors);\n      }\n      shortcutInput.addEventListener('keydown', this.onShortcutInputKeyDown.bind(this, shortcut, shortcutInput));\n      shortcutInput.addEventListener('blur', () => {\n        if (this.secondKeyTimeout !== null) {\n          clearTimeout(this.secondKeyTimeout);\n          this.secondKeyTimeout = null;\n        }\n      });\n      shortcutElement.appendChild(this.createIconButton(\n          i18nString(UIStrings.removeShortcut), 'largeicon-trash-bin', 'keybinds-delete-button', () => {\n            const index = this.shortcuts.indexOf(shortcut);\n            if (!shortcut.isDefault()) {\n              this.shortcuts.splice(index, 1);\n            }\n            this.editedShortcuts.set(shortcut, null);\n            this.update();\n            this.focus();\n            this.validateInputs();\n          }));\n    } else {\n      const keys = shortcut.descriptors.flatMap(descriptor => descriptor.name.split('\u200A+\u200A'));\n      keys.forEach(key => {\n        shortcutElement.createChild('span', 'keybinds-key').textContent = key;\n      });\n      if (Root.Runtime.experiments.isEnabled('keyboardShortcutEditor') && index === 0) {\n        this.element.appendChild(this.createEditButton());\n      }\n    }\n  }\n\n  private createEditButton(): Element {\n    return this.createIconButton(\n        i18nString(UIStrings.editShortcut), 'largeicon-edit', 'keybinds-edit-button',\n        () => this.settingsTab.startEditing(this.item));\n  }\n\n  private createIconButton(label: string, iconName: string, className: string, listener: () => void):\n      HTMLButtonElement {\n    const button = document.createElement('button') as HTMLButtonElement;\n    button.appendChild(UI.Icon.Icon.create(iconName));\n    button.addEventListener('click', listener);\n    UI.ARIAUtils.setAccessibleName(button, label);\n    if (className) {\n      button.classList.add(className);\n    }\n    return button;\n  }\n\n  private onShortcutInputKeyDown(\n      shortcut: UI.KeyboardShortcut.KeyboardShortcut, shortcutInput: HTMLInputElement, event: Event): void {\n    if ((event as KeyboardEvent).key !== 'Tab') {\n      const eventDescriptor = this.descriptorForEvent(event as KeyboardEvent);\n      const userDescriptors = this.editedShortcuts.get(shortcut) || [];\n      this.editedShortcuts.set(shortcut, userDescriptors);\n      const isLastKeyOfShortcut =\n          userDescriptors.length === 2 && UI.KeyboardShortcut.KeyboardShortcut.isModifier(userDescriptors[1].key);\n      const shouldClearOldShortcut = userDescriptors.length === 2 && !isLastKeyOfShortcut;\n      if (shouldClearOldShortcut) {\n        userDescriptors.splice(0, 2);\n      }\n      if (this.secondKeyTimeout) {\n        clearTimeout(this.secondKeyTimeout);\n        this.secondKeyTimeout = null;\n        userDescriptors.push(eventDescriptor);\n      } else if (isLastKeyOfShortcut) {\n        userDescriptors[1] = eventDescriptor;\n      } else if (!UI.KeyboardShortcut.KeyboardShortcut.isModifier(eventDescriptor.key)) {\n        userDescriptors[0] = eventDescriptor;\n        this.secondKeyTimeout = window.setTimeout(() => {\n          this.secondKeyTimeout = null;\n        }, UI.ShortcutRegistry.KeyTimeout);\n      } else {\n        userDescriptors[0] = eventDescriptor;\n      }\n      shortcutInput.value = this.shortcutInputTextForDescriptors(userDescriptors);\n      this.validateInputs();\n      event.consume(true);\n    }\n  }\n\n  private descriptorForEvent(event: KeyboardEvent): UI.KeyboardShortcut.Descriptor {\n    const userKey = UI.KeyboardShortcut.KeyboardShortcut.makeKeyFromEvent(event as KeyboardEvent);\n    const codeAndModifiers = UI.KeyboardShortcut.KeyboardShortcut.keyCodeAndModifiersFromKey(userKey);\n    let key: UI.KeyboardShortcut.Key|string =\n        UI.KeyboardShortcut.Keys[event.key] || UI.KeyboardShortcut.KeyBindings[event.key];\n\n    if (!key && !/^[a-z]$/i.test(event.key)) {\n      const keyCode = event.code;\n      // if we still don't have a key name, let's try the code before falling back to the raw key\n      key = UI.KeyboardShortcut.Keys[keyCode] || UI.KeyboardShortcut.KeyBindings[keyCode];\n      if (keyCode.startsWith('Digit')) {\n        key = keyCode.slice(5);\n      } else if (keyCode.startsWith('Key')) {\n        key = keyCode.slice(3);\n      }\n    }\n\n    return UI.KeyboardShortcut.KeyboardShortcut.makeDescriptor(key || event.key, codeAndModifiers.modifiers);\n  }\n\n  private shortcutInputTextForDescriptors(descriptors: UI.KeyboardShortcut.Descriptor[]): string {\n    return descriptors.map(descriptor => descriptor.name).join(' ');\n  }\n\n  private resetShortcutsToDefaults(): void {\n    this.editedShortcuts.clear();\n    for (const shortcut of this.shortcuts) {\n      if (shortcut.type === UI.KeyboardShortcut.Type.UnsetShortcut) {\n        const index = this.shortcuts.indexOf(shortcut);\n        this.shortcuts.splice(index, 1);\n      } else if (shortcut.type === UI.KeyboardShortcut.Type.UserShortcut) {\n        this.editedShortcuts.set(shortcut, null);\n      }\n    }\n    const disabledDefaults = UI.ShortcutRegistry.ShortcutRegistry.instance().disabledDefaultsForAction(this.item.id());\n    disabledDefaults.forEach(shortcut => {\n      this.shortcuts.push(shortcut);\n      this.editedShortcuts.set(shortcut, shortcut.descriptors);\n    });\n    this.update();\n    this.focus();\n  }\n\n  onEscapeKeyPressed(event: Event): void {\n    const activeElement = Platform.DOMUtilities.deepActiveElement(document);\n    for (const [shortcut, shortcutInput] of this.shortcutInputs.entries()) {\n      if (activeElement === shortcutInput) {\n        this.onShortcutInputKeyDown(\n            shortcut as UI.KeyboardShortcut.KeyboardShortcut, shortcutInput as HTMLInputElement,\n            event as KeyboardEvent);\n      }\n    }\n  }\n\n  private validateInputs(): void {\n    const confirmButton = this.confirmButton;\n    const errorMessageElement = this.errorMessageElement;\n    if (!confirmButton || !errorMessageElement) {\n      return;\n    }\n\n    confirmButton.disabled = false;\n    errorMessageElement.classList.add('hidden');\n    this.shortcutInputs.forEach((shortcutInput, shortcut) => {\n      const userDescriptors = this.editedShortcuts.get(shortcut);\n      if (!userDescriptors) {\n        return;\n      }\n      if (userDescriptors.some(descriptor => UI.KeyboardShortcut.KeyboardShortcut.isModifier(descriptor.key))) {\n        confirmButton.disabled = true;\n        shortcutInput.classList.add('error-input');\n        UI.ARIAUtils.setInvalid(shortcutInput, true);\n        errorMessageElement.classList.remove('hidden');\n        errorMessageElement.textContent = i18nString(UIStrings.shortcutsCannotContainOnly);\n        return;\n      }\n      const conflicts = UI.ShortcutRegistry.ShortcutRegistry.instance()\n                            .actionsForDescriptors(userDescriptors)\n                            .filter(actionId => actionId !== this.item.id());\n      if (conflicts.length) {\n        confirmButton.disabled = true;\n        shortcutInput.classList.add('error-input');\n        UI.ARIAUtils.setInvalid(shortcutInput, true);\n        errorMessageElement.classList.remove('hidden');\n        const action = UI.ActionRegistry.ActionRegistry.instance().action(conflicts[0]);\n        if (!action) {\n          return;\n        }\n        const actionTitle = action.title();\n        const actionCategory = action.category();\n        errorMessageElement.textContent =\n            i18nString(UIStrings.thisShortcutIsInUseByS, {PH1: actionCategory, PH2: actionTitle});\n        return;\n      }\n      shortcutInput.classList.remove('error-input');\n      UI.ARIAUtils.setInvalid(shortcutInput, false);\n    });\n  }\n}\n\nexport type KeybindsItem = string|UI.ActionRegistration.Action;\n"],
  "mappings": "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",
  "names": []
}
