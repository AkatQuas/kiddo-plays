{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/input/input-meta.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type * as Input from './input.js';\n\nconst UIStrings = {\n  /**\n    *@description Title of the inputs tool, which records user input.\n    */\n  inputs: 'Inputs',\n  /**\n    *@description Command to pause the replaying of user inputs.\n    */\n  pause: 'Pause',\n  /**\n    *@description Command to resume the replaying of user inputs.\n    */\n  resume: 'Resume',\n  /**\n    *@description Command for showing the inputs tool.\n    */\n  showInputs: 'Show Inputs',\n  /**\n    *@description Command to begin a recording of user input.\n    */\n  startRecording: 'Start recording',\n  /**\n    *@description Command to start replaying the recorded user input.\n    */\n  startReplaying: 'Start replaying',\n  /**\n    *@description Command to stop a recording of user input.\n    */\n  stopRecording: 'Stop recording',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/input//input-meta.ts', UIStrings);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nlet loadedInputModule: (typeof Input|undefined);\n\nasync function loadInputModule(): Promise<typeof Input> {\n  if (!loadedInputModule) {\n    loadedInputModule = await import('./input.js');\n  }\n  return loadedInputModule;\n}\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.DRAWER_VIEW,\n  id: 'Inputs',\n  title: i18nLazyString(UIStrings.inputs),\n  commandPrompt: i18nLazyString(UIStrings.showInputs),\n  persistence: UI.ViewManager.ViewPersistence.CLOSEABLE,\n  order: 7,\n  async loadView() {\n    const Input = await loadInputModule();\n    return Input.InputTimeline.InputTimeline.instance();\n  },\n  experiment: Root.Runtime.ExperimentName.TIMELINE_REPLAY_EVENT,\n});\n\nUI.ActionRegistration.registerActionExtension({\n  actionId: 'input.toggle-recording',\n  iconClass: UI.ActionRegistration.IconClass.LARGEICON_START_RECORDING,\n  toggleable: true,\n  toggledIconClass: UI.ActionRegistration.IconClass.LARGEICON_STOP_RECORDING,\n  toggleWithRedColor: true,\n  async loadActionDelegate() {\n    const Input = await loadInputModule();\n    return Input.InputTimeline.ActionDelegate.instance();\n  },\n  category: UI.ActionRegistration.ActionCategory.INPUTS,\n  experiment: Root.Runtime.ExperimentName.TIMELINE_REPLAY_EVENT,\n  options: [\n    {\n      value: true,\n      title: i18nLazyString(UIStrings.startRecording),\n    },\n    {\n      value: false,\n      title: i18nLazyString(UIStrings.stopRecording),\n    },\n  ],\n});\n\nUI.ActionRegistration.registerActionExtension({\n  actionId: 'input.start-replaying',\n  iconClass: UI.ActionRegistration.IconClass.LARGEICON_PLAY,\n  toggleable: false,\n  async loadActionDelegate() {\n    const Input = await loadInputModule();\n    return Input.InputTimeline.ActionDelegate.instance();\n  },\n  category: UI.ActionRegistration.ActionCategory.INPUTS,\n  experiment: Root.Runtime.ExperimentName.TIMELINE_REPLAY_EVENT,\n  options: [\n    {\n      value: true,\n      title: i18nLazyString(UIStrings.startReplaying),\n    },\n  ],\n});\n\nUI.ActionRegistration.registerActionExtension({\n  actionId: 'input.toggle-pause',\n  iconClass: UI.ActionRegistration.IconClass.LARGEICON_PAUSE,\n  toggleable: true,\n  toggledIconClass: UI.ActionRegistration.IconClass.LARGEICON_RESUME,\n  async loadActionDelegate() {\n    const Input = await loadInputModule();\n    return Input.InputTimeline.ActionDelegate.instance();\n  },\n  category: UI.ActionRegistration.ActionCategory.INPUTS,\n  experiment: Root.Runtime.ExperimentName.TIMELINE_REPLAY_EVENT,\n  options: [\n    {\n      value: true,\n      title: i18nLazyString(UIStrings.pause),\n    },\n    {\n      value: false,\n      title: i18nLazyString(UIStrings.resume),\n    },\n  ],\n});\n"],
  "mappings": "AAIA;AACA;AACA;AAIA,MAAM,YAAY;AAAA,EAIhB,QAAQ;AAAA,EAIR,OAAO;AAAA,EAIP,QAAQ;AAAA,EAIR,YAAY;AAAA,EAIZ,gBAAgB;AAAA,EAIhB,gBAAgB;AAAA,EAIhB,eAAe;AAAA;AAEjB,MAAM,OAAO,KAAK,KAAK,kBAAkB,+BAA+B;AACxE,MAAM,iBAAiB,KAAK,KAAK,iCAAiC,KAAK,QAAW;AAElF,IAAI;AAEJ,iCAAwD;AACtD,MAAI,CAAC,mBAAmB;AACtB,wBAAoB,MAAM,OAAO;AAAA;AAEnC,SAAO;AAAA;AAGT,GAAG,YAAY,sBAAsB;AAAA,EACnC,UAAU,GAAG,YAAY,mBAAmB;AAAA,EAC5C,IAAI;AAAA,EACJ,OAAO,eAAe,UAAU;AAAA,EAChC,eAAe,eAAe,UAAU;AAAA,EACxC,aAAa,GAAG,YAAY,gBAAgB;AAAA,EAC5C,OAAO;AAAA,QACD,WAAW;AACf,UAAM,QAAQ,MAAM;AACpB,WAAO,MAAM,cAAc,cAAc;AAAA;AAAA,EAE3C,YAAY,KAAK,QAAQ,eAAe;AAAA;AAG1C,GAAG,mBAAmB,wBAAwB;AAAA,EAC5C,UAAU;AAAA,EACV,WAAW,GAAG,mBAAmB,UAAU;AAAA,EAC3C,YAAY;AAAA,EACZ,kBAAkB,GAAG,mBAAmB,UAAU;AAAA,EAClD,oBAAoB;AAAA,QACd,qBAAqB;AACzB,UAAM,QAAQ,MAAM;AACpB,WAAO,MAAM,cAAc,eAAe;AAAA;AAAA,EAE5C,UAAU,GAAG,mBAAmB,eAAe;AAAA,EAC/C,YAAY,KAAK,QAAQ,eAAe;AAAA,EACxC,SAAS;AAAA,IACP;AAAA,MACE,OAAO;AAAA,MACP,OAAO,eAAe,UAAU;AAAA;AAAA,IAElC;AAAA,MACE,OAAO;AAAA,MACP,OAAO,eAAe,UAAU;AAAA;AAAA;AAAA;AAKtC,GAAG,mBAAmB,wBAAwB;AAAA,EAC5C,UAAU;AAAA,EACV,WAAW,GAAG,mBAAmB,UAAU;AAAA,EAC3C,YAAY;AAAA,QACN,qBAAqB;AACzB,UAAM,QAAQ,MAAM;AACpB,WAAO,MAAM,cAAc,eAAe;AAAA;AAAA,EAE5C,UAAU,GAAG,mBAAmB,eAAe;AAAA,EAC/C,YAAY,KAAK,QAAQ,eAAe;AAAA,EACxC,SAAS;AAAA,IACP;AAAA,MACE,OAAO;AAAA,MACP,OAAO,eAAe,UAAU;AAAA;AAAA;AAAA;AAKtC,GAAG,mBAAmB,wBAAwB;AAAA,EAC5C,UAAU;AAAA,EACV,WAAW,GAAG,mBAAmB,UAAU;AAAA,EAC3C,YAAY;AAAA,EACZ,kBAAkB,GAAG,mBAAmB,UAAU;AAAA,QAC5C,qBAAqB;AACzB,UAAM,QAAQ,MAAM;AACpB,WAAO,MAAM,cAAc,eAAe;AAAA;AAAA,EAE5C,UAAU,GAAG,mBAAmB,eAAe;AAAA,EAC/C,YAAY,KAAK,QAAQ,eAAe;AAAA,EACxC,SAAS;AAAA,IACP;AAAA,MACE,OAAO;AAAA,MACP,OAAO,eAAe,UAAU;AAAA;AAAA,IAElC;AAAA,MACE,OAAO;AAAA,MACP,OAAO,eAAe,UAAU;AAAA;AAAA;AAAA;",
  "names": []
}
