{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/input/InputTimeline.ts"],
  "sourcesContent": ["// Copyright (c) 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Timeline from '../timeline/timeline.js';\nimport inputTimelineStyles from './inputTimeline.css.js';\n\nimport {InputModel} from './InputModel.js';\n\nconst UIStrings = {\n  /**\n  *@description Text to clear everything\n  */\n  clearAll: 'Clear all',\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon load button\n  */\n  loadProfile: 'Load profile\u2026',\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon download button\n  */\n  saveProfile: 'Save profile\u2026',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/input//InputTimeline.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet inputTimelineInstance: InputTimeline;\nexport class InputTimeline extends UI.Widget.VBox implements Timeline.TimelineLoader.Client {\n  private tracingClient: TracingClient|null;\n  private tracingModel: SDK.TracingModel.TracingModel|null;\n  private inputModel: InputModel|null;\n  private state: State;\n  private readonly toggleRecordAction: UI.ActionRegistration.Action;\n  private readonly startReplayAction: UI.ActionRegistration.Action;\n  private readonly togglePauseAction: UI.ActionRegistration.Action;\n  private readonly panelToolbar: UI.Toolbar.Toolbar;\n  private readonly clearButton: UI.Toolbar.ToolbarButton;\n  private readonly loadButton: UI.Toolbar.ToolbarButton;\n  private readonly saveButton: UI.Toolbar.ToolbarButton;\n  private fileSelectorElement?: HTMLInputElement;\n  private loader?: Timeline.TimelineLoader.TimelineLoader;\n\n  constructor() {\n    super(true);\n    this.element.classList.add('inputs-timeline');\n\n    this.tracingClient = null;\n    this.tracingModel = null;\n    this.inputModel = null;\n\n    this.state = State.Idle;\n    this.toggleRecordAction =\n        UI.ActionRegistry.ActionRegistry.instance().action('input.toggle-recording') as UI.ActionRegistration.Action;\n    this.startReplayAction =\n        UI.ActionRegistry.ActionRegistry.instance().action('input.start-replaying') as UI.ActionRegistration.Action;\n    this.togglePauseAction =\n        UI.ActionRegistry.ActionRegistry.instance().action('input.toggle-pause') as UI.ActionRegistration.Action;\n\n    const toolbarContainer = this.contentElement.createChild('div', 'input-timeline-toolbar-container');\n    this.panelToolbar = new UI.Toolbar.Toolbar('input-timeline-toolbar', toolbarContainer);\n\n    this.panelToolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButton(this.toggleRecordAction));\n    this.panelToolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButton(this.startReplayAction));\n    this.panelToolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButton(this.togglePauseAction));\n\n    this.clearButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.clearAll), 'largeicon-clear');\n    this.clearButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.reset.bind(this));\n    this.panelToolbar.appendToolbarItem(this.clearButton);\n\n    this.panelToolbar.appendSeparator();\n\n    // Load / Save\n    this.loadButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.loadProfile), 'largeicon-load');\n    this.loadButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, () => this.selectFileToLoad());\n    this.saveButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.saveProfile), 'largeicon-download');\n    this.saveButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, _event => {\n      void this.saveToFile();\n    });\n    this.panelToolbar.appendSeparator();\n    this.panelToolbar.appendToolbarItem(this.loadButton);\n    this.panelToolbar.appendToolbarItem(this.saveButton);\n    this.panelToolbar.appendSeparator();\n    this.createFileSelector();\n\n    this.updateControls();\n  }\n\n  static instance(opts: {forceNew: boolean} = {forceNew: false}): InputTimeline {\n    const {forceNew} = opts;\n    if (!inputTimelineInstance || forceNew) {\n      inputTimelineInstance = new InputTimeline();\n    }\n\n    return inputTimelineInstance;\n  }\n\n  private reset(): void {\n    this.tracingClient = null;\n    this.tracingModel = null;\n    this.inputModel = null;\n    this.setState(State.Idle);\n  }\n\n  private createFileSelector(): void {\n    if (this.fileSelectorElement) {\n      this.fileSelectorElement.remove();\n    }\n    this.fileSelectorElement = UI.UIUtils.createFileSelectorElement(this.loadFromFile.bind(this));\n    this.element.appendChild(this.fileSelectorElement);\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([inputTimelineStyles]);\n  }\n\n  willHide(): void {\n  }\n\n  private setState(state: State): void {\n    this.state = state;\n    this.updateControls();\n  }\n\n  private isAvailableState(): boolean {\n    return this.state === State.Idle || this.state === State.ReplayPaused;\n  }\n\n  private updateControls(): void {\n    this.toggleRecordAction.setToggled(this.state === State.Recording);\n    this.toggleRecordAction.setEnabled(this.isAvailableState() || this.state === State.Recording);\n    this.startReplayAction.setEnabled(this.isAvailableState() && Boolean(this.tracingModel));\n    this.togglePauseAction.setEnabled(this.state === State.Replaying || this.state === State.ReplayPaused);\n    this.togglePauseAction.setToggled(this.state === State.ReplayPaused);\n    this.clearButton.setEnabled(this.isAvailableState());\n    this.loadButton.setEnabled(this.isAvailableState());\n    this.saveButton.setEnabled(this.isAvailableState() && Boolean(this.tracingModel));\n  }\n\n  toggleRecording(): void {\n    switch (this.state) {\n      case State.Recording: {\n        void this.stopRecording();\n        break;\n      }\n      case State.Idle: {\n        void this.startRecording();\n        break;\n      }\n    }\n  }\n\n  startReplay(): void {\n    void this.replayEvents();\n  }\n\n  toggleReplayPause(): void {\n    switch (this.state) {\n      case State.Replaying: {\n        this.pauseReplay();\n        break;\n      }\n      case State.ReplayPaused: {\n        this.resumeReplay();\n        break;\n      }\n    }\n  }\n\n  /**\n   * Saves all current events in a file (JSON format).\n   */\n  private async saveToFile(): Promise<void> {\n    console.assert(this.state === State.Idle);\n    if (!this.tracingModel) {\n      return;\n    }\n\n    const fileName = `InputProfile-${Platform.DateUtilities.toISO8601Compact(new Date())}.json` as\n        Platform.DevToolsPath.RawPathString;\n    const stream = new Bindings.FileUtils.FileOutputStream();\n\n    const accepted = await stream.open(fileName);\n    if (!accepted) {\n      return;\n    }\n\n    const backingStorage = this.tracingModel.backingStorage() as Bindings.TempFile.TempFileBackingStorage;\n    await backingStorage.writeToStream(stream);\n    void stream.close();\n  }\n\n  private selectFileToLoad(): void {\n    if (this.fileSelectorElement) {\n      this.fileSelectorElement.click();\n    }\n  }\n\n  private loadFromFile(file: File): void {\n    console.assert(this.isAvailableState());\n\n    this.setState(State.Loading);\n    this.loader = Timeline.TimelineLoader.TimelineLoader.loadFromFile(file, this);\n\n    this.createFileSelector();\n  }\n\n  private async startRecording(): Promise<void> {\n    this.setState(State.StartPending);\n    this.tracingClient =\n        new TracingClient(SDK.TargetManager.TargetManager.instance().mainTarget() as SDK.Target.Target, this);\n\n    const response = await this.tracingClient.startRecording();\n    if (!response || response.getError()) {\n      this.recordingFailed();\n    } else {\n      this.setState(State.Recording);\n    }\n  }\n\n  private async stopRecording(): Promise<void> {\n    if (!this.tracingClient) {\n      return;\n    }\n    this.setState(State.StopPending);\n    await this.tracingClient.stopRecording();\n    this.tracingClient = null;\n  }\n\n  private async replayEvents(): Promise<void> {\n    if (!this.inputModel) {\n      return;\n    }\n    this.setState(State.Replaying);\n    await this.inputModel.startReplay(this.replayStopped.bind(this));\n  }\n\n  private pauseReplay(): void {\n    if (!this.inputModel) {\n      return;\n    }\n    this.inputModel.pause();\n    this.setState(State.ReplayPaused);\n  }\n\n  private resumeReplay(): void {\n    if (!this.inputModel) {\n      return;\n    }\n    this.inputModel.resume();\n    this.setState(State.Replaying);\n  }\n\n  loadingStarted(): void {\n  }\n\n  loadingProgress(_progress?: number): void {\n  }\n\n  processingStarted(): void {\n  }\n\n  loadingComplete(tracingModel: SDK.TracingModel.TracingModel|null): void {\n    if (!tracingModel) {\n      this.reset();\n      return;\n    }\n    this.inputModel = new InputModel(SDK.TargetManager.TargetManager.instance().mainTarget() as SDK.Target.Target);\n    this.tracingModel = tracingModel;\n    this.inputModel.setEvents(tracingModel);\n\n    this.setState(State.Idle);\n  }\n\n  private recordingFailed(): void {\n    this.tracingClient = null;\n    this.setState(State.Idle);\n  }\n\n  replayStopped(): void {\n    this.setState(State.Idle);\n  }\n}\n\nexport const enum State {\n  Idle = 'Idle',\n  StartPending = 'StartPending',\n  Recording = 'Recording',\n  StopPending = 'StopPending',\n  Replaying = 'Replaying',\n  ReplayPaused = 'ReplayPaused',\n  Loading = 'Loading',\n}\n\nlet actionDelegateInstance: ActionDelegate;\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): ActionDelegate {\n    const {forceNew} = opts;\n    if (!actionDelegateInstance || forceNew) {\n      actionDelegateInstance = new ActionDelegate();\n    }\n\n    return actionDelegateInstance;\n  }\n\n  handleAction(context: UI.Context.Context, actionId: string): boolean {\n    const inputViewId = 'Inputs';\n    void UI.ViewManager.ViewManager.instance()\n        .showView(inputViewId)\n        .then(() => UI.ViewManager.ViewManager.instance().view(inputViewId).widget())\n        .then(widget => this.innerHandleAction(widget as InputTimeline, actionId));\n\n    return true;\n  }\n\n  private innerHandleAction(inputTimeline: InputTimeline, actionId: string): void {\n    switch (actionId) {\n      case 'input.toggle-recording':\n        inputTimeline.toggleRecording();\n        break;\n      case 'input.start-replaying':\n        inputTimeline.startReplay();\n        break;\n      case 'input.toggle-pause':\n        inputTimeline.toggleReplayPause();\n        break;\n      default:\n        console.assert(false, `Unknown action: ${actionId}`);\n    }\n  }\n}\n\nexport class TracingClient implements SDK.TracingManager.TracingManagerClient {\n  private readonly target: SDK.Target.Target;\n  private tracingManager: SDK.TracingManager.TracingManager|null;\n  private readonly client: InputTimeline;\n  private readonly tracingModel: SDK.TracingModel.TracingModel;\n  private tracingCompleteCallback: (() => void)|null;\n  constructor(target: SDK.Target.Target, client: InputTimeline) {\n    this.target = target;\n    this.tracingManager = target.model(SDK.TracingManager.TracingManager);\n    this.client = client;\n\n    const backingStorage = new Bindings.TempFile.TempFileBackingStorage();\n    this.tracingModel = new SDK.TracingModel.TracingModel(backingStorage);\n\n    this.tracingCompleteCallback = null;\n  }\n\n  async startRecording(): Promise<Protocol.ProtocolResponseWithError|undefined> {\n    if (!this.tracingManager) {\n      return;\n    }\n\n    const categoriesArray = ['devtools.timeline', 'disabled-by-default-devtools.timeline.inputs'];\n    const categories = categoriesArray.join(',');\n\n    const response = await this.tracingManager.start(this, categories, '');\n    if (response.getError()) {\n      await this.waitForTracingToStop(false);\n    }\n    return response;\n  }\n\n  async stopRecording(): Promise<void> {\n    if (this.tracingManager) {\n      this.tracingManager.stop();\n    }\n\n    await this.waitForTracingToStop(true);\n    await SDK.TargetManager.TargetManager.instance().resumeAllTargets();\n    this.tracingModel.tracingComplete();\n    this.client.loadingComplete(this.tracingModel);\n  }\n  traceEventsCollected(events: SDK.TracingManager.EventPayload[]): void {\n    this.tracingModel.addEvents(events);\n  }\n\n  tracingComplete(): void {\n    if (this.tracingCompleteCallback) {\n      this.tracingCompleteCallback();\n    }\n    this.tracingCompleteCallback = null;\n  }\n\n  tracingBufferUsage(_usage: number): void {\n  }\n\n  eventsRetrievalProgress(_progress: number): void {\n  }\n\n  private waitForTracingToStop(awaitTracingCompleteCallback: boolean): Promise<void> {\n    return new Promise(resolve => {\n      if (this.tracingManager && awaitTracingCompleteCallback) {\n        this.tracingCompleteCallback = resolve;\n      } else {\n        resolve();\n      }\n    });\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
