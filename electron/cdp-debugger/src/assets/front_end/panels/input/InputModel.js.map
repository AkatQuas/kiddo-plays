{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/input/InputModel.ts"],
  "sourcesContent": ["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nexport class InputModel extends SDK.SDKModel.SDKModel<void> {\n  private readonly inputAgent: ProtocolProxyApi.InputApi;\n  private eventDispatchTimer: number;\n  private dispatchEventDataList: EventData[];\n  private finishCallback: (() => void)|null;\n  private dispatchingIndex!: number;\n  private lastEventTime?: number|null;\n  private replayPaused?: boolean;\n\n  constructor(target: SDK.Target.Target) {\n    super(target);\n    this.inputAgent = target.inputAgent();\n    this.eventDispatchTimer = 0;\n    this.dispatchEventDataList = [];\n    this.finishCallback = null;\n\n    this.reset();\n  }\n\n  private reset(): void {\n    this.lastEventTime = null;\n    this.replayPaused = false;\n    this.dispatchingIndex = 0;\n    window.clearTimeout(this.eventDispatchTimer);\n  }\n\n  setEvents(tracingModel: SDK.TracingModel.TracingModel): void {\n    this.dispatchEventDataList = [];\n    for (const process of tracingModel.sortedProcesses()) {\n      for (const thread of process.sortedThreads()) {\n        this.processThreadEvents(tracingModel, thread);\n      }\n    }\n    function compareTimestamp(a: EventData, b: EventData): number {\n      return a.timestamp - b.timestamp;\n    }\n    this.dispatchEventDataList.sort(compareTimestamp);\n  }\n\n  startReplay(finishCallback: (() => void)|null): void {\n    this.reset();\n    this.finishCallback = finishCallback;\n    if (this.dispatchEventDataList.length) {\n      this.dispatchNextEvent();\n    } else {\n      this.replayStopped();\n    }\n  }\n\n  pause(): void {\n    window.clearTimeout(this.eventDispatchTimer);\n    if (this.dispatchingIndex >= this.dispatchEventDataList.length) {\n      this.replayStopped();\n    } else {\n      this.replayPaused = true;\n    }\n  }\n\n  resume(): void {\n    this.replayPaused = false;\n    if (this.dispatchingIndex < this.dispatchEventDataList.length) {\n      this.dispatchNextEvent();\n    }\n  }\n\n  private processThreadEvents(_tracingModel: SDK.TracingModel.TracingModel, thread: SDK.TracingModel.Thread): void {\n    for (const event of thread.events()) {\n      if (event.name === 'EventDispatch' && this.isValidInputEvent(event.args.data)) {\n        this.dispatchEventDataList.push(event.args.data);\n      }\n    }\n  }\n\n  private isValidInputEvent(eventData: EventData): boolean {\n    return this.isMouseEvent(eventData as MouseEventData) || this.isKeyboardEvent(eventData as KeyboardEventData);\n  }\n\n  private isMouseEvent(eventData: MouseEventData): boolean {\n    if (!MOUSE_EVENT_TYPE_TO_REQUEST_TYPE.has(eventData.type)) {\n      return false;\n    }\n    if (!('x' in eventData && 'y' in eventData)) {\n      return false;\n    }\n    return true;\n  }\n\n  private isKeyboardEvent(eventData: KeyboardEventData): boolean {\n    if (!KEYBOARD_EVENT_TYPE_TO_REQUEST_TYPE.has(eventData.type)) {\n      return false;\n    }\n    if (!('code' in eventData && 'key' in eventData)) {\n      return false;\n    }\n    return true;\n  }\n\n  private dispatchNextEvent(): void {\n    const eventData = this.dispatchEventDataList[this.dispatchingIndex];\n    this.lastEventTime = eventData.timestamp;\n    if (MOUSE_EVENT_TYPE_TO_REQUEST_TYPE.has(eventData.type)) {\n      void this.dispatchMouseEvent(eventData as MouseEventData);\n    } else if (KEYBOARD_EVENT_TYPE_TO_REQUEST_TYPE.has(eventData.type)) {\n      void this.dispatchKeyEvent(eventData as KeyboardEventData);\n    }\n\n    ++this.dispatchingIndex;\n    if (this.dispatchingIndex < this.dispatchEventDataList.length) {\n      const waitTime = (this.dispatchEventDataList[this.dispatchingIndex].timestamp - this.lastEventTime) / 1000;\n      this.eventDispatchTimer = window.setTimeout(this.dispatchNextEvent.bind(this), waitTime);\n    } else {\n      this.replayStopped();\n    }\n  }\n\n  private async dispatchMouseEvent(eventData: MouseEventData): Promise<void> {\n    const type = MOUSE_EVENT_TYPE_TO_REQUEST_TYPE.get(eventData.type);\n    if (!type) {\n      throw new Error(`Could not find mouse event type for eventData ${eventData.type}`);\n    }\n    const buttonActionName = BUTTONID_TO_ACTION_NAME.get(eventData.button);\n    const params = {\n      type,\n      x: eventData.x,\n      y: eventData.y,\n      modifiers: eventData.modifiers,\n      button: (eventData.type === 'mousedown' || eventData.type === 'mouseup') ? buttonActionName :\n                                                                                 Protocol.Input.MouseButton.None,\n      buttons: eventData.buttons,\n      clickCount: eventData.clickCount,\n      deltaX: eventData.deltaX,\n      deltaY: eventData.deltaY,\n    };\n    await this.inputAgent.invoke_dispatchMouseEvent(params);\n  }\n\n  private async dispatchKeyEvent(eventData: KeyboardEventData): Promise<void> {\n    const type = KEYBOARD_EVENT_TYPE_TO_REQUEST_TYPE.get(eventData.type);\n    if (!type) {\n      throw new Error(`Could not find key event type for eventData ${eventData.type}`);\n    }\n    const text = eventData.type === 'keypress' ? eventData.key[0] : undefined;\n    const params = {\n      type,\n      modifiers: eventData.modifiers,\n      text: text,\n      unmodifiedText: text ? text.toLowerCase() : undefined,\n      code: eventData.code,\n      key: eventData.key,\n    };\n    await this.inputAgent.invoke_dispatchKeyEvent(params);\n  }\n\n  private replayStopped(): void {\n    window.clearTimeout(this.eventDispatchTimer);\n    this.reset();\n    if (this.finishCallback) {\n      this.finishCallback();\n    }\n  }\n}\n\nconst MOUSE_EVENT_TYPE_TO_REQUEST_TYPE = new Map<string, Protocol.Input.DispatchMouseEventRequestType>([\n  ['mousedown', Protocol.Input.DispatchMouseEventRequestType.MousePressed],\n  ['mouseup', Protocol.Input.DispatchMouseEventRequestType.MouseReleased],\n  ['mousemove', Protocol.Input.DispatchMouseEventRequestType.MouseMoved],\n  ['wheel', Protocol.Input.DispatchMouseEventRequestType.MouseWheel],\n]);\n\nconst KEYBOARD_EVENT_TYPE_TO_REQUEST_TYPE = new Map<string, Protocol.Input.DispatchKeyEventRequestType>([\n  ['keydown', Protocol.Input.DispatchKeyEventRequestType.KeyDown],\n  ['keyup', Protocol.Input.DispatchKeyEventRequestType.KeyUp],\n  ['keypress', Protocol.Input.DispatchKeyEventRequestType.Char],\n]);\n\nconst BUTTONID_TO_ACTION_NAME = new Map<number, Protocol.Input.MouseButton>([\n  [0, Protocol.Input.MouseButton.Left],\n  [1, Protocol.Input.MouseButton.Middle],\n  [2, Protocol.Input.MouseButton.Right],\n  [3, Protocol.Input.MouseButton.Back],\n  [4, Protocol.Input.MouseButton.Forward],\n]);\n\nSDK.SDKModel.SDKModel.register(InputModel, {capabilities: SDK.Target.Capability.Input, autostart: false});\nexport interface MouseEventData {\n  type: string;\n  modifiers: number;\n  timestamp: number;\n  x: number;\n  y: number;\n  button: number;\n  buttons: number;\n  clickCount: number;\n  deltaX: number;\n  deltaY: number;\n}\nexport interface KeyboardEventData {\n  type: string;\n  modifiers: number;\n  timestamp: number;\n  code: string;\n  key: string;\n}\n\nexport type EventData = MouseEventData|KeyboardEventData;\n"],
  "mappings": "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",
  "names": []
}
