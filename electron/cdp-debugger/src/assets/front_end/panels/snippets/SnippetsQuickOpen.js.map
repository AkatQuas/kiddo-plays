{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/snippets/SnippetsQuickOpen.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as QuickOpen from '../../ui/legacy/components/quick_open/quick_open.js';\nimport type * as Workspace from '../../models/workspace/workspace.js';\n\nimport {evaluateScriptSnippet, findSnippetsProject} from './ScriptSnippetFileSystem.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Snippets Quick Open of the Sources panel when opening snippets\n  */\n  noSnippetsFound: 'No snippets found.',\n  /**\n  *@description Text for command prefix of run a code snippet\n  */\n  run: 'Run',\n  /**\n  *@description Text for suggestion of run a code snippet\n  */\n  snippet: 'Snippet',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/snippets/SnippetsQuickOpen.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nlet snippetsQuickOpenInstance: SnippetsQuickOpen;\n\nexport class SnippetsQuickOpen extends QuickOpen.FilteredListWidget.Provider {\n  private snippets: Workspace.UISourceCode.UISourceCode[];\n  private constructor() {\n    super();\n    this.snippets = [];\n  }\n\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): SnippetsQuickOpen {\n    const {forceNew} = opts;\n    if (!snippetsQuickOpenInstance || forceNew) {\n      snippetsQuickOpenInstance = new SnippetsQuickOpen();\n    }\n\n    return snippetsQuickOpenInstance;\n  }\n\n  selectItem(itemIndex: number|null, _promptValue: string): void {\n    if (itemIndex === null) {\n      return;\n    }\n    void evaluateScriptSnippet(this.snippets[itemIndex]);\n  }\n\n  notFoundText(_query: string): string {\n    return i18nString(UIStrings.noSnippetsFound);\n  }\n\n  attach(): void {\n    this.snippets = findSnippetsProject().uiSourceCodes();\n  }\n\n  detach(): void {\n    this.snippets = [];\n  }\n\n  itemScoreAt(itemIndex: number, query: string): number {\n    // Prefer short matches over long matches\n    return query.length / this.snippets[itemIndex].name().length;\n  }\n\n  itemCount(): number {\n    return this.snippets.length;\n  }\n\n  itemKeyAt(itemIndex: number): string {\n    return this.snippets[itemIndex].name();\n  }\n\n  renderItem(itemIndex: number, query: string, titleElement: Element, _subtitleElement: Element): void {\n    titleElement.textContent = this.snippets[itemIndex].name();\n    titleElement.classList.add('monospace');\n    QuickOpen.FilteredListWidget.FilteredListWidget.highlightRanges(titleElement, query, true);\n  }\n}\n\nQuickOpen.FilteredListWidget.registerProvider({\n  prefix: '!',\n  iconName: 'ic_command_run_snippet',\n  provider: () => Promise.resolve(SnippetsQuickOpen.instance()),\n  titlePrefix: i18nLazyString(UIStrings.run),\n  titleSuggestion: i18nLazyString(UIStrings.snippet),\n});\n"],
  "mappings": "AAIA;AACA;AAGA;AAEA,MAAM,YAAY;AAAA,EAIhB,iBAAiB;AAAA,EAIjB,KAAK;AAAA,EAIL,SAAS;AAAA;AAEX,MAAM,OAAO,KAAK,KAAK,kBAAkB,wCAAwC;AACjF,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAChE,MAAM,iBAAiB,KAAK,KAAK,iCAAiC,KAAK,QAAW;AAElF,IAAI;AAEG,uCAAgC,UAAU,mBAAmB,SAAS;AAAA,EACnE;AAAA,EACA,cAAc;AACpB;AACA,SAAK,WAAW;AAAA;AAAA,SAGX,SAAS,OAAiC,EAAC,UAAU,QAA0B;AACpF,UAAM,EAAC,aAAY;AACnB,QAAI,CAAC,6BAA6B,UAAU;AAC1C,kCAA4B,IAAI;AAAA;AAGlC,WAAO;AAAA;AAAA,EAGT,WAAW,WAAwB,cAA4B;AAC7D,QAAI,cAAc,MAAM;AACtB;AAAA;AAEF,SAAK,sBAAsB,KAAK,SAAS;AAAA;AAAA,EAG3C,aAAa,QAAwB;AACnC,WAAO,WAAW,UAAU;AAAA;AAAA,EAG9B,SAAe;AACb,SAAK,WAAW,sBAAsB;AAAA;AAAA,EAGxC,SAAe;AACb,SAAK,WAAW;AAAA;AAAA,EAGlB,YAAY,WAAmB,OAAuB;AAEpD,WAAO,MAAM,SAAS,KAAK,SAAS,WAAW,OAAO;AAAA;AAAA,EAGxD,YAAoB;AAClB,WAAO,KAAK,SAAS;AAAA;AAAA,EAGvB,UAAU,WAA2B;AACnC,WAAO,KAAK,SAAS,WAAW;AAAA;AAAA,EAGlC,WAAW,WAAmB,OAAe,cAAuB,kBAAiC;AACnG,iBAAa,cAAc,KAAK,SAAS,WAAW;AACpD,iBAAa,UAAU,IAAI;AAC3B,cAAU,mBAAmB,mBAAmB,gBAAgB,cAAc,OAAO;AAAA;AAAA;AAIzF,UAAU,mBAAmB,iBAAiB;AAAA,EAC5C,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,UAAU,MAAM,QAAQ,QAAQ,kBAAkB;AAAA,EAClD,aAAa,eAAe,UAAU;AAAA,EACtC,iBAAiB,eAAe,UAAU;AAAA;",
  "names": []
}
