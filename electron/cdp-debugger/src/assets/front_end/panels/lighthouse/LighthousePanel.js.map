{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/lighthouse/LighthousePanel.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as EmulationModel from '../../models/emulation/emulation.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Emulation from '../emulation/emulation.js';\n\nimport type {\n  AuditProgressChangedEvent, PageAuditabilityChangedEvent, PageWarningsChangedEvent} from './LighthouseController.js';\nimport {Events, LighthouseController} from './LighthouseController.js';\nimport lighthousePanelStyles from './lighthousePanel.css.js';\nimport type {LighthouseRun} from './LighthouseProtocolService.js';\nimport {ProtocolService} from './LighthouseProtocolService.js';\n\nimport type {ReportJSON, RunnerResultArtifacts} from './LighthouseReporterTypes.js';\nimport * as LighthouseReport from '../../third_party/lighthouse/report/report.js';\nimport {LighthouseReportRenderer, LighthouseReportUIFeatures} from './LighthouseReportRenderer.js';\nimport {Item, ReportSelector} from './LighthouseReportSelector.js';\nimport {StartView} from './LighthouseStartView.js';\nimport {StartViewFR} from './LighthouseStartViewFR.js';\nimport {StatusView} from './LighthouseStatusView.js';\nimport {TimespanView} from './LighthouseTimespanView.js';\n\nconst UIStrings = {\n  /**\n  *@description Text that appears when user drag and drop something (for example, a file) in Lighthouse Panel\n  */\n  dropLighthouseJsonHere: 'Drop `Lighthouse` JSON here',\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon add button in the Lighthouse Panel\n  */\n  performAnAudit: 'Perform an audit\u2026',\n  /**\n  *@description Text to clear everything\n  */\n  clearAll: 'Clear all',\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon settings gear in show settings pane setting in start view of the audits panel\n  */\n  lighthouseSettings: '`Lighthouse` settings',\n  /**\n  *@description Status header in the Lighthouse panel\n  */\n  printing: 'Printing',\n  /**\n  *@description Status text in the Lighthouse panel\n  */\n  thePrintPopupWindowIsOpenPlease: 'The print popup window is open. Please close it to continue.',\n  /**\n  *@description Text in Lighthouse Panel\n  */\n  cancelling: 'Cancelling',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/lighthouse/LighthousePanel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet lighthousePanelInstace: LighthousePanel;\ntype Nullable<T> = T|null;\n\nexport class LighthousePanel extends UI.Panel.Panel {\n  private readonly protocolService: ProtocolService;\n  private readonly controller: LighthouseController;\n  private readonly startView: StartView;\n  private readonly statusView: StatusView;\n  private readonly timespanView: TimespanView|null;\n  private warningText: Nullable<string>;\n  private unauditableExplanation: Nullable<string>;\n  private readonly cachedRenderedReports: Map<ReportJSON, HTMLElement>;\n  private readonly dropTarget: UI.DropTarget.DropTarget;\n  private readonly auditResultsElement: HTMLElement;\n  private clearButton!: UI.Toolbar.ToolbarButton;\n  private newButton!: UI.Toolbar.ToolbarButton;\n  private reportSelector!: ReportSelector;\n  private settingsPane!: UI.Widget.Widget;\n  private rightToolbar!: UI.Toolbar.Toolbar;\n  private showSettingsPaneSetting!: Common.Settings.Setting<boolean>;\n  private stateBefore?: {\n    emulation: {\n      type: EmulationModel.DeviceModeModel.Type,\n      enabled: boolean,\n      outlineEnabled: boolean,\n      toolbarControlsEnabled: boolean,\n      scale: number,\n      device: EmulationModel.EmulatedDevices.EmulatedDevice|null,\n      mode: EmulationModel.EmulatedDevices.Mode|null,\n    },\n    network: {conditions: SDK.NetworkManager.Conditions},\n  };\n  private isLHAttached?: boolean;\n  private currentLighthouseRun?: LighthouseRun;\n\n  private constructor() {\n    super('lighthouse');\n\n    this.protocolService = new ProtocolService();\n    this.controller = new LighthouseController(this.protocolService);\n    if (Root.Runtime.experiments.isEnabled('lighthousePanelFR')) {\n      this.startView = new StartViewFR(this.controller);\n      this.timespanView = new TimespanView(this.controller);\n    } else {\n      this.startView = new StartView(this.controller);\n      this.timespanView = null;\n    }\n    this.statusView = new StatusView(this.controller);\n\n    this.warningText = null;\n    this.unauditableExplanation = null;\n    this.cachedRenderedReports = new Map();\n\n    this.dropTarget = new UI.DropTarget.DropTarget(\n        this.contentElement, [UI.DropTarget.Type.File], i18nString(UIStrings.dropLighthouseJsonHere),\n        this.handleDrop.bind(this));\n\n    this.controller.addEventListener(Events.PageAuditabilityChanged, this.refreshStartAuditUI.bind(this));\n    this.controller.addEventListener(Events.PageWarningsChanged, this.refreshWarningsUI.bind(this));\n    this.controller.addEventListener(Events.AuditProgressChanged, this.refreshStatusUI.bind(this));\n    this.controller.addEventListener(Events.RequestLighthouseTimespanStart, this.onLighthouseTimespanStart.bind(this));\n    this.controller.addEventListener(Events.RequestLighthouseTimespanEnd, this.onLighthouseTimespanEnd.bind(this));\n    this.controller.addEventListener(Events.RequestLighthouseStart, this.onLighthouseStart.bind(this));\n    this.controller.addEventListener(Events.RequestLighthouseCancel, this.onLighthouseCancel.bind(this));\n\n    this.renderToolbar();\n    this.auditResultsElement = this.contentElement.createChild('div', 'lighthouse-results-container');\n    this.renderStartView();\n\n    this.controller.recomputePageAuditability();\n  }\n\n  static instance(opts = {forceNew: null}): LighthousePanel {\n    const {forceNew} = opts;\n    if (!lighthousePanelInstace || forceNew) {\n      lighthousePanelInstace = new LighthousePanel();\n    }\n\n    return lighthousePanelInstace;\n  }\n\n  static getEvents(): typeof Events {\n    return Events;\n  }\n\n  private async onLighthouseTimespanStart(): Promise<void> {\n    this.timespanView?.show(this.contentElement);\n    await this.startLighthouse();\n    this.timespanView?.ready();\n  }\n\n  private async onLighthouseTimespanEnd(): Promise<void> {\n    this.timespanView?.hide();\n    await this.collectLighthouseResults();\n  }\n\n  private async onLighthouseStart(): Promise<void> {\n    await this.startLighthouse();\n    await this.collectLighthouseResults();\n  }\n\n  private async onLighthouseCancel(): Promise<void> {\n    this.timespanView?.hide();\n    void this.cancelLighthouse();\n  }\n\n  private refreshWarningsUI(evt: Common.EventTarget.EventTargetEvent<PageWarningsChangedEvent>): void {\n    // PageWarningsChanged fires multiple times during an audit, which we want to ignore.\n    if (this.isLHAttached) {\n      return;\n    }\n\n    this.warningText = evt.data.warning;\n    this.startView.setWarningText(evt.data.warning);\n  }\n\n  private refreshStartAuditUI(evt: Common.EventTarget.EventTargetEvent<PageAuditabilityChangedEvent>): void {\n    // PageAuditabilityChanged fires multiple times during an audit, which we want to ignore.\n    if (this.isLHAttached) {\n      return;\n    }\n\n    this.startView.refresh();\n\n    this.unauditableExplanation = evt.data.helpText;\n    this.startView.setUnauditableExplanation(evt.data.helpText);\n    this.startView.setStartButtonEnabled(!evt.data.helpText);\n  }\n\n  private refreshStatusUI(evt: Common.EventTarget.EventTargetEvent<AuditProgressChangedEvent>): void {\n    this.statusView.updateStatus(evt.data.message);\n  }\n\n  private refreshToolbarUI(): void {\n    this.clearButton.setEnabled(this.reportSelector.hasItems());\n  }\n\n  private clearAll(): void {\n    this.reportSelector.clearAll();\n    this.renderStartView();\n    this.refreshToolbarUI();\n  }\n\n  private renderToolbar(): void {\n    const lighthouseToolbarContainer = this.element.createChild('div', 'lighthouse-toolbar-container');\n\n    const toolbar = new UI.Toolbar.Toolbar('', lighthouseToolbarContainer);\n\n    this.newButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.performAnAudit), 'largeicon-add');\n    toolbar.appendToolbarItem(this.newButton);\n    this.newButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.renderStartView.bind(this));\n\n    toolbar.appendSeparator();\n\n    this.reportSelector = new ReportSelector(() => this.renderStartView());\n    toolbar.appendToolbarItem(this.reportSelector.comboBox());\n\n    this.clearButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.clearAll), 'largeicon-clear');\n    toolbar.appendToolbarItem(this.clearButton);\n    this.clearButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.clearAll.bind(this));\n\n    this.settingsPane = new UI.Widget.HBox();\n    this.settingsPane.show(this.contentElement);\n    this.settingsPane.element.classList.add('lighthouse-settings-pane');\n    this.settingsPane.element.appendChild(this.startView.settingsToolbar().element);\n    this.showSettingsPaneSetting = Common.Settings.Settings.instance().createSetting(\n        'lighthouseShowSettingsToolbar', false, Common.Settings.SettingStorageType.Synced);\n\n    this.rightToolbar = new UI.Toolbar.Toolbar('', lighthouseToolbarContainer);\n    this.rightToolbar.appendSeparator();\n    this.rightToolbar.appendToolbarItem(new UI.Toolbar.ToolbarSettingToggle(\n        this.showSettingsPaneSetting, 'largeicon-settings-gear', i18nString(UIStrings.lighthouseSettings)));\n    this.showSettingsPaneSetting.addChangeListener(this.updateSettingsPaneVisibility.bind(this));\n    this.updateSettingsPaneVisibility();\n\n    this.refreshToolbarUI();\n  }\n\n  private updateSettingsPaneVisibility(): void {\n    this.settingsPane.element.classList.toggle('hidden', !this.showSettingsPaneSetting.get());\n  }\n\n  private toggleSettingsDisplay(show: boolean): void {\n    this.rightToolbar.element.classList.toggle('hidden', !show);\n    this.settingsPane.element.classList.toggle('hidden', !show);\n    this.updateSettingsPaneVisibility();\n  }\n\n  private renderStartView(): void {\n    this.auditResultsElement.removeChildren();\n    this.statusView.hide();\n\n    this.reportSelector.selectNewReport();\n    this.contentElement.classList.toggle('in-progress', false);\n\n    this.startView.show(this.contentElement);\n    this.toggleSettingsDisplay(true);\n    this.startView.setUnauditableExplanation(this.unauditableExplanation);\n    this.startView.setStartButtonEnabled(!this.unauditableExplanation);\n    if (!this.unauditableExplanation) {\n      this.startView.focusStartButton();\n    }\n    this.startView.setWarningText(this.warningText);\n\n    this.newButton.setEnabled(false);\n    this.refreshToolbarUI();\n    this.setDefaultFocusedChild(this.startView);\n  }\n\n  private renderStatusView(inspectedURL: string): void {\n    this.contentElement.classList.toggle('in-progress', true);\n    this.statusView.setInspectedURL(inspectedURL);\n    this.statusView.show(this.contentElement);\n  }\n\n  private beforePrint(): void {\n    this.statusView.show(this.contentElement);\n    this.statusView.toggleCancelButton(false);\n    this.statusView.renderText(i18nString(UIStrings.printing), i18nString(UIStrings.thePrintPopupWindowIsOpenPlease));\n  }\n\n  private afterPrint(): void {\n    this.statusView.hide();\n    this.statusView.toggleCancelButton(true);\n  }\n\n  private renderReport(lighthouseResult: ReportJSON, artifacts?: RunnerResultArtifacts): void {\n    this.toggleSettingsDisplay(false);\n    this.contentElement.classList.toggle('in-progress', false);\n    this.startView.hideWidget();\n    this.statusView.hide();\n    this.auditResultsElement.removeChildren();\n    this.newButton.setEnabled(true);\n    this.refreshToolbarUI();\n\n    const cachedRenderedReport = this.cachedRenderedReports.get(lighthouseResult);\n    if (cachedRenderedReport) {\n      this.auditResultsElement.appendChild(cachedRenderedReport);\n      return;\n    }\n\n    const reportContainer = this.auditResultsElement.createChild('div', 'lh-vars lh-root lh-devtools');\n\n    const dom = new LighthouseReport.DOM(this.auditResultsElement.ownerDocument as Document, reportContainer);\n    const renderer = new LighthouseReportRenderer(dom) as LighthouseReport.ReportRenderer;\n\n    const el = renderer.renderReport(lighthouseResult, reportContainer);\n    // Linkifying requires the target be loaded. Do not block the report\n    // from rendering, as this is just an embellishment and the main target\n    // could take awhile to load.\n    void this.waitForMainTargetLoad().then(() => {\n      void LighthouseReportRenderer.linkifyNodeDetails(el);\n      void LighthouseReportRenderer.linkifySourceLocationDetails(el);\n    });\n    LighthouseReportRenderer.handleDarkMode(el);\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const features = new LighthouseReportUIFeatures(dom) as any;\n    features.setBeforePrint(this.beforePrint.bind(this));\n    features.setAfterPrint(this.afterPrint.bind(this));\n    LighthouseReportRenderer.addViewTraceButton(el, features, artifacts);\n    features.initFeatures(lighthouseResult);\n\n    this.cachedRenderedReports.set(lighthouseResult, reportContainer);\n  }\n\n  private async waitForMainTargetLoad(): Promise<void> {\n    const mainTarget = SDK.TargetManager.TargetManager.instance().mainTarget();\n    if (!mainTarget) {\n      return;\n    }\n    const resourceTreeModel = mainTarget.model(SDK.ResourceTreeModel.ResourceTreeModel);\n    if (!resourceTreeModel) {\n      return;\n    }\n    await resourceTreeModel.once(SDK.ResourceTreeModel.Events.Load);\n  }\n\n  private buildReportUI(lighthouseResult: ReportJSON, artifacts?: RunnerResultArtifacts): void {\n    if (lighthouseResult === null) {\n      return;\n    }\n\n    const optionElement = new Item(\n        lighthouseResult, () => this.renderReport(lighthouseResult, artifacts), this.renderStartView.bind(this));\n    this.reportSelector.prepend(optionElement);\n    this.refreshToolbarUI();\n    this.renderReport(lighthouseResult);\n  }\n\n  private handleDrop(dataTransfer: DataTransfer): void {\n    const items = dataTransfer.items;\n    if (!items.length) {\n      return;\n    }\n    const item = items[0];\n    if (item.kind === 'file') {\n      const file = items[0].getAsFile();\n      if (!file) {\n        return;\n      }\n\n      const reader = new FileReader();\n      reader.onload = (): void => this.loadedFromFile(reader.result as string);\n      reader.readAsText(file);\n    }\n  }\n\n  private loadedFromFile(report: string): void {\n    const data = JSON.parse(report);\n    if (!data['lighthouseVersion']) {\n      return;\n    }\n    this.buildReportUI(data as ReportJSON);\n  }\n\n  private async startLighthouse(): Promise<void> {\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.LighthouseStarted);\n\n    try {\n      const inspectedURL = await this.controller.getInspectedURL({force: true});\n      const categoryIDs = this.controller.getCategoryIDs();\n      const flags = this.controller.getFlags();\n\n      this.currentLighthouseRun = {inspectedURL, categoryIDs, flags};\n\n      await this.setupEmulationAndProtocolConnection();\n\n      if (flags.mode === 'timespan') {\n        await this.protocolService.startTimespan(this.currentLighthouseRun);\n      }\n\n    } catch (err) {\n      await this.restoreEmulationAndProtocolConnection();\n      if (err instanceof Error) {\n        this.statusView.renderBugReport(err);\n      }\n    }\n  }\n\n  private async collectLighthouseResults(): Promise<void> {\n    try {\n      if (!this.currentLighthouseRun) {\n        throw new Error('Lighthouse is not started');\n      }\n      this.renderStatusView(this.currentLighthouseRun.inspectedURL);\n\n      const lighthouseResponse = await this.protocolService.collectLighthouseResults(this.currentLighthouseRun);\n\n      if (lighthouseResponse && lighthouseResponse.fatal) {\n        const error = new Error(lighthouseResponse.message);\n        error.stack = lighthouseResponse.stack;\n        throw error;\n      }\n\n      if (!lighthouseResponse) {\n        throw new Error('Auditing failed to produce a result');\n      }\n\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.LighthouseFinished);\n\n      await this.restoreEmulationAndProtocolConnection();\n      this.buildReportUI(lighthouseResponse.lhr, lighthouseResponse.artifacts);\n      // Give focus to the new audit button when completed\n      this.newButton.element.focus();\n    } catch (err) {\n      await this.restoreEmulationAndProtocolConnection();\n      if (err instanceof Error) {\n        this.statusView.renderBugReport(err);\n      }\n    } finally {\n      this.currentLighthouseRun = undefined;\n    }\n  }\n\n  private async cancelLighthouse(): Promise<void> {\n    this.currentLighthouseRun = undefined;\n    this.statusView.updateStatus(i18nString(UIStrings.cancelling));\n    await this.restoreEmulationAndProtocolConnection();\n    this.renderStartView();\n  }\n\n  /**\n   * We set the device emulation on the DevTools-side for two reasons:\n   * 1. To workaround some odd device metrics emulation bugs like occuluding viewports\n   * 2. To get the attractive device outline\n   *\n   * We also set flags.internalDisableDeviceScreenEmulation = true to let LH only apply UA emulation\n   */\n  private async setupEmulationAndProtocolConnection(): Promise<void> {\n    const flags = this.controller.getFlags();\n\n    const emulationModel = EmulationModel.DeviceModeModel.DeviceModeModel.instance();\n    this.stateBefore = {\n      emulation: {\n        type: emulationModel.type(),\n        enabled: emulationModel.enabledSetting().get(),\n        outlineEnabled: emulationModel.deviceOutlineSetting().get(),\n        toolbarControlsEnabled: emulationModel.toolbarControlsEnabledSetting().get(),\n        scale: emulationModel.scaleSetting().get(),\n        device: emulationModel.device(),\n        mode: emulationModel.mode(),\n      },\n      network: {conditions: SDK.NetworkManager.MultitargetNetworkManager.instance().networkConditions()},\n    };\n\n    emulationModel.toolbarControlsEnabledSetting().set(false);\n    if ('emulatedFormFactor' in flags && flags.emulatedFormFactor === 'desktop') {\n      emulationModel.enabledSetting().set(false);\n      emulationModel.emulate(EmulationModel.DeviceModeModel.Type.None, null, null);\n    } else if (flags.emulatedFormFactor === 'mobile') {\n      emulationModel.enabledSetting().set(true);\n      emulationModel.deviceOutlineSetting().set(true);\n\n      for (const device of EmulationModel.EmulatedDevices.EmulatedDevicesList.instance().standard()) {\n        if (device.title === 'Moto G4') {\n          emulationModel.emulate(EmulationModel.DeviceModeModel.Type.Device, device, device.modes[0], 1);\n        }\n      }\n    }\n\n    await this.protocolService.attach();\n    this.isLHAttached = true;\n  }\n\n  private async restoreEmulationAndProtocolConnection(): Promise<void> {\n    if (!this.isLHAttached) {\n      return;\n    }\n\n    this.isLHAttached = false;\n    await this.protocolService.detach();\n\n    if (this.stateBefore) {\n      const emulationModel = EmulationModel.DeviceModeModel.DeviceModeModel.instance();\n\n      // Detaching a session after overriding device metrics will prevent other sessions from overriding device metrics in the future.\n      // A workaround is to call \"Emulation.clearDeviceMetricOverride\" which is the result of the next line.\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=1337089\n      emulationModel.emulate(EmulationModel.DeviceModeModel.Type.None, null, null);\n\n      const {type, enabled, outlineEnabled, toolbarControlsEnabled, scale, device, mode} = this.stateBefore.emulation;\n      emulationModel.enabledSetting().set(enabled);\n      emulationModel.deviceOutlineSetting().set(outlineEnabled);\n      emulationModel.toolbarControlsEnabledSetting().set(toolbarControlsEnabled);\n\n      // `emulate` will ignore the `scale` parameter for responsive emulation.\n      // In this case we can just set it here.\n      if (type === EmulationModel.DeviceModeModel.Type.Responsive) {\n        emulationModel.scaleSetting().set(scale);\n      }\n\n      emulationModel.emulate(type, device, mode, scale);\n\n      SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(this.stateBefore.network.conditions);\n      delete this.stateBefore;\n    }\n\n    Emulation.InspectedPagePlaceholder.InspectedPagePlaceholder.instance().update(true);\n\n    const mainTarget = SDK.TargetManager.TargetManager.instance().mainTarget();\n    if (!mainTarget) {\n      return;\n    }\n    const resourceTreeModel = mainTarget.model(SDK.ResourceTreeModel.ResourceTreeModel);\n    if (!resourceTreeModel) {\n      return;\n    }\n    // reload to reset the page state\n    const inspectedURL = await this.controller.getInspectedURL();\n    await resourceTreeModel.navigate(inspectedURL);\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([lighthousePanelStyles]);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
