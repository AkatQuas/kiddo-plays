{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/lighthouse/RadioSetting.ts"],
  "sourcesContent": ["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\ninterface RadioOption {\n  value: string;\n  label: () => Common.UIString.LocalizedString;\n  tooltip?: () => Common.UIString.LocalizedString;\n}\n\nexport class RadioSetting {\n  private readonly setting: Common.Settings.Setting<string>;\n  private options: RadioOption[];\n  element: HTMLDivElement;\n  private radioElements: HTMLInputElement[];\n  private ignoreChangeEvents: boolean;\n  private selectedIndex: number;\n  constructor(options: RadioOption[], setting: Common.Settings.Setting<string>, description: string) {\n    this.setting = setting;\n    this.options = options;\n\n    this.element = document.createElement('div');\n    UI.ARIAUtils.setDescription(this.element, description);\n    UI.ARIAUtils.markAsRadioGroup(this.element);\n\n    this.radioElements = [];\n    for (const option of this.options) {\n      const fragment = UI.Fragment.Fragment.build`\n  <label $=\"label\" class=\"lighthouse-radio\">\n  <input $=\"input\" type=\"radio\" value=${option.value} name=${setting.name}>\n  <span $=\"span\" class=\"lighthouse-radio-text\">${option.label()}</span>\n  </label>\n  `;\n\n      this.element.appendChild(fragment.element());\n\n      const tooltip = option.tooltip?.() || description;\n      if (description) {\n        UI.Tooltip.Tooltip.install(fragment.$('input') as HTMLElement, tooltip);\n        UI.Tooltip.Tooltip.install(fragment.$('span') as HTMLElement, tooltip);\n      }\n      const radioElement = fragment.$('input') as HTMLInputElement;\n      radioElement.addEventListener('change', this.valueChanged.bind(this));\n      this.radioElements.push(radioElement);\n    }\n\n    this.ignoreChangeEvents = false;\n    this.selectedIndex = -1;\n\n    setting.addChangeListener(this.settingChanged, this);\n    this.settingChanged();\n  }\n\n  private updateUI(): void {\n    this.ignoreChangeEvents = true;\n    this.radioElements[this.selectedIndex].checked = true;\n    this.ignoreChangeEvents = false;\n  }\n\n  private settingChanged(): void {\n    const value = this.setting.get();\n    this.selectedIndex = this.options.findIndex(option => option.value === value);\n    this.updateUI();\n  }\n\n  private valueChanged(_event: Event): void {\n    if (this.ignoreChangeEvents) {\n      return;\n    }\n\n    const selectedRadio = this.radioElements.find(radio => radio.checked);\n    if (!selectedRadio) {\n      return;\n    }\n    this.setting.set(selectedRadio.value);\n  }\n}\n"],
  "mappings": "AAKA;AAQO,0BAAmB;AAAA,EACP;AAAA,EACT;AAAA,EACR;AAAA,EACQ;AAAA,EACA;AAAA,EACA;AAAA,EACR,YAAY,SAAwB,SAA0C,aAAqB;AACjG,SAAK,UAAU;AACf,SAAK,UAAU;AAEf,SAAK,UAAU,SAAS,cAAc;AACtC,OAAG,UAAU,eAAe,KAAK,SAAS;AAC1C,OAAG,UAAU,iBAAiB,KAAK;AAEnC,SAAK,gBAAgB;AACrB,eAAW,UAAU,KAAK,SAAS;AACjC,YAAM,WAAW,GAAG,SAAS,SAAS;AAAA;AAAA,wCAEJ,OAAO,cAAc,QAAQ;AAAA,iDACpB,OAAO;AAAA;AAAA;AAIlD,WAAK,QAAQ,YAAY,SAAS;AAElC,YAAM,UAAU,OAAO,eAAe;AACtC,UAAI,aAAa;AACf,WAAG,QAAQ,QAAQ,QAAQ,SAAS,EAAE,UAAyB;AAC/D,WAAG,QAAQ,QAAQ,QAAQ,SAAS,EAAE,SAAwB;AAAA;AAEhE,YAAM,eAAe,SAAS,EAAE;AAChC,mBAAa,iBAAiB,UAAU,KAAK,aAAa,KAAK;AAC/D,WAAK,cAAc,KAAK;AAAA;AAG1B,SAAK,qBAAqB;AAC1B,SAAK,gBAAgB;AAErB,YAAQ,kBAAkB,KAAK,gBAAgB;AAC/C,SAAK;AAAA;AAAA,EAGC,WAAiB;AACvB,SAAK,qBAAqB;AAC1B,SAAK,cAAc,KAAK,eAAe,UAAU;AACjD,SAAK,qBAAqB;AAAA;AAAA,EAGpB,iBAAuB;AAC7B,UAAM,QAAQ,KAAK,QAAQ;AAC3B,SAAK,gBAAgB,KAAK,QAAQ,UAAU,YAAU,OAAO,UAAU;AACvE,SAAK;AAAA;AAAA,EAGC,aAAa,QAAqB;AACxC,QAAI,KAAK,oBAAoB;AAC3B;AAAA;AAGF,UAAM,gBAAgB,KAAK,cAAc,KAAK,WAAS,MAAM;AAC7D,QAAI,CAAC,eAAe;AAClB;AAAA;AAEF,SAAK,QAAQ,IAAI,cAAc;AAAA;AAAA;",
  "names": []
}
