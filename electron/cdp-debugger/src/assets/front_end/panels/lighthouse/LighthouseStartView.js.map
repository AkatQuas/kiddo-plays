{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/lighthouse/LighthouseStartView.ts"],
  "sourcesContent": ["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport lighthouseStartViewStyles from './lighthouseStartView.css.js';\nimport type * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type {LighthouseController, Preset} from './LighthouseController.js';\nimport {Events, Presets, RuntimeSettings} from './LighthouseController.js';\nimport {RadioSetting} from './RadioSetting.js';\n\nconst UIStrings = {\n  /**\n  *@description Text that is usually a hyperlink to more documentation\n  */\n  learnMore: 'Learn more',\n  /**\n  *@description Text that refers to device such as a phone\n  */\n  device: 'Device',\n  /**\n  *@description Title in the Lighthouse Start View for list of categories to run during audit\n  */\n  categories: 'Categories',\n  /**\n  *@description Text in Lighthouse Status View\n  */\n  communityPluginsBeta: 'Community Plugins (beta)',\n  /**\n  *@description Text of audits start button in Lighthouse Start View\n  */\n  generateReport: 'Generate report',\n  /**\n  *@description Text in Lighthouse Start View\n  */\n  identifyAndFixCommonProblemsThat:\n      'Identify and fix common problems that affect your site\\'s performance, accessibility, and user experience.',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/lighthouse/LighthouseStartView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class StartView extends UI.Widget.Widget {\n  protected controller: LighthouseController;\n  protected readonly settingsToolbarInternal: UI.Toolbar.Toolbar;\n  protected startButton!: HTMLButtonElement;\n  protected helpText?: Element;\n  protected warningText?: Element;\n  protected checkboxes: Array<{preset: Preset, checkbox: UI.Toolbar.ToolbarCheckbox}> = [];\n  private shouldConfirm?: boolean;\n\n  constructor(controller: LighthouseController) {\n    super();\n\n    this.controller = controller;\n    this.settingsToolbarInternal = new UI.Toolbar.Toolbar('');\n    this.render();\n  }\n\n  settingsToolbar(): UI.Toolbar.Toolbar {\n    return this.settingsToolbarInternal;\n  }\n\n  protected populateRuntimeSettingAsRadio(settingName: string, label: string, parentElement: Element): void {\n    const runtimeSetting = RuntimeSettings.find(item => item.setting.name === settingName);\n    if (!runtimeSetting || !runtimeSetting.options) {\n      throw new Error(`${settingName} is not a setting with options`);\n    }\n\n    const labelEl = document.createElement('div');\n    labelEl.classList.add('lighthouse-form-section-label');\n    labelEl.textContent = label;\n\n    if (runtimeSetting.learnMore) {\n      const link =\n          UI.XLink.XLink.create(runtimeSetting.learnMore, i18nString(UIStrings.learnMore), 'lighthouse-learn-more');\n      labelEl.append(link);\n    }\n    parentElement.appendChild(labelEl);\n\n    const control = new RadioSetting(\n        runtimeSetting.options, runtimeSetting.setting as Common.Settings.Setting<string>,\n        runtimeSetting.description());\n    parentElement.appendChild(control.element);\n    UI.ARIAUtils.setAccessibleName(control.element, label);\n  }\n\n  protected populateRuntimeSettingAsToolbarCheckbox(settingName: string, toolbar: UI.Toolbar.Toolbar): void {\n    const runtimeSetting = RuntimeSettings.find(item => item.setting.name === settingName);\n    if (!runtimeSetting || !runtimeSetting.title) {\n      throw new Error(`${settingName} is not a setting with a title`);\n    }\n\n    runtimeSetting.setting.setTitle(runtimeSetting.title());\n    const control = new UI.Toolbar.ToolbarSettingCheckbox(\n        runtimeSetting.setting as Common.Settings.Setting<boolean>, runtimeSetting.description());\n    toolbar.appendToolbarItem(control);\n    if (runtimeSetting.learnMore) {\n      const link =\n          UI.XLink.XLink.create(runtimeSetting.learnMore, i18nString(UIStrings.learnMore), 'lighthouse-learn-more');\n      link.style.padding = '5px';\n      control.element.appendChild(link);\n    }\n  }\n\n  protected populateRuntimeSettingAsToolbarDropdown(settingName: string, toolbar: UI.Toolbar.Toolbar): void {\n    const runtimeSetting = RuntimeSettings.find(item => item.setting.name === settingName);\n    if (!runtimeSetting || !runtimeSetting.title) {\n      throw new Error(`${settingName} is not a setting with a title`);\n    }\n\n    const options = runtimeSetting.options?.map(option => ({label: option.label(), value: option.value})) || [];\n\n    runtimeSetting.setting.setTitle(runtimeSetting.title());\n    const control = new UI.Toolbar.ToolbarSettingComboBox(\n        options,\n        runtimeSetting.setting as Common.Settings.Setting<string>,\n        runtimeSetting.title(),\n    );\n    control.setTitle(runtimeSetting.description());\n    toolbar.appendToolbarItem(control);\n    if (runtimeSetting.learnMore) {\n      const link =\n          UI.XLink.XLink.create(runtimeSetting.learnMore, i18nString(UIStrings.learnMore), 'lighthouse-learn-more');\n      link.style.padding = '5px';\n      control.element.appendChild(link);\n    }\n  }\n\n  protected populateFormControls(fragment: UI.Fragment.Fragment, mode?: string): void {\n    // Populate the device type\n    const deviceTypeFormElements = fragment.$('device-type-form-elements');\n    this.populateRuntimeSettingAsRadio('lighthouse.device_type', i18nString(UIStrings.device), deviceTypeFormElements);\n\n    // Populate the categories\n    const categoryFormElements = fragment.$('categories-form-elements') as HTMLElement;\n    const pluginFormElements = fragment.$('plugins-form-elements') as HTMLElement;\n\n    this.checkboxes = [];\n    for (const preset of Presets) {\n      const formElements = preset.plugin ? pluginFormElements : categoryFormElements;\n      preset.setting.setTitle(preset.title());\n      const checkbox = new UI.Toolbar.ToolbarSettingCheckbox(preset.setting, preset.description());\n      const row = formElements.createChild('div', 'vbox lighthouse-launcher-row');\n      row.appendChild(checkbox.element);\n      this.checkboxes.push({preset, checkbox});\n      if (mode && !preset.supportedModes.includes(mode)) {\n        checkbox.setEnabled(false);\n        checkbox.setIndeterminate(true);\n      }\n    }\n    UI.ARIAUtils.markAsGroup(categoryFormElements);\n    UI.ARIAUtils.setAccessibleName(categoryFormElements, i18nString(UIStrings.categories));\n    UI.ARIAUtils.markAsGroup(pluginFormElements);\n    UI.ARIAUtils.setAccessibleName(pluginFormElements, i18nString(UIStrings.communityPluginsBeta));\n  }\n\n  protected render(): void {\n    this.populateRuntimeSettingAsToolbarCheckbox('lighthouse.legacy_navigation', this.settingsToolbarInternal);\n    this.populateRuntimeSettingAsToolbarCheckbox('lighthouse.clear_storage', this.settingsToolbarInternal);\n    this.populateRuntimeSettingAsToolbarDropdown('lighthouse.throttling', this.settingsToolbarInternal);\n\n    this.startButton = UI.UIUtils.createTextButton(\n        i18nString(UIStrings.generateReport),\n        () => this.controller.dispatchEventToListeners(\n            Events.RequestLighthouseStart,\n            /* keyboardInitiated */ this.startButton.matches(':focus-visible')),\n        /* className */ '', /* primary */ true);\n    this.setDefaultFocusedElement(this.startButton);\n\n    const auditsDescription = i18nString(UIStrings.identifyAndFixCommonProblemsThat);  // crbug.com/972969\n\n    const fragment = UI.Fragment.Fragment.build`\n  <div class=\"vbox lighthouse-start-view\">\n  <header>\n  <div class=\"lighthouse-logo\"></div>\n  <div class=\"lighthouse-start-button-container hbox\">\n  ${this.startButton}\n  </div>\n  <div $=\"help-text\" class=\"lighthouse-help-text hidden\"></div>\n  <div class=\"lighthouse-start-view-text\">\n  <span>${auditsDescription}</span>\n  ${UI.XLink.XLink.create('https://developers.google.com/web/tools/lighthouse/', i18nString(UIStrings.learnMore))}\n  </div>\n  <div $=\"warning-text\" class=\"lighthouse-warning-text hidden\"></div>\n  </header>\n  <form>\n  <div class=\"lighthouse-form-categories\">\n  <div class=\"lighthouse-form-section\">\n  <div class=\"lighthouse-form-section-label\">\n  ${i18nString(UIStrings.categories)}\n  </div>\n  <div class=\"lighthouse-form-elements\" $=\"categories-form-elements\"></div>\n  </div>\n  <div class=\"lighthouse-form-section\">\n  <div class=\"lighthouse-form-section-label\">\n  <div class=\"lighthouse-icon-label\">${i18nString(UIStrings.communityPluginsBeta)}</div>\n  </div>\n  <div class=\"lighthouse-form-elements\" $=\"plugins-form-elements\"></div>\n  </div>\n  </div>\n  <div class=\"lighthouse-form-section\">\n  <div class=\"lighthouse-form-elements\" $=\"device-type-form-elements\"></div>\n  </div>\n  </form>\n  </div>\n  `;\n\n    this.helpText = fragment.$('help-text');\n    this.warningText = fragment.$('warning-text');\n    this.populateFormControls(fragment);\n    this.contentElement.appendChild(fragment.element());\n    this.contentElement.style.overflow = 'auto';\n  }\n\n  refresh(): void {\n    // Do nothing in default case.\n  }\n\n  onResize(): void {\n    const useNarrowLayout = this.contentElement.offsetWidth < 560;\n    const startViewEl = this.contentElement.querySelector('.lighthouse-start-view');\n    if (!startViewEl) {\n      return;\n    }\n    startViewEl.classList.toggle('hbox', !useNarrowLayout);\n    startViewEl.classList.toggle('vbox', useNarrowLayout);\n  }\n\n  focusStartButton(): void {\n    this.startButton.focus();\n  }\n\n  setStartButtonEnabled(isEnabled: boolean): void {\n    if (this.helpText) {\n      this.helpText.classList.toggle('hidden', isEnabled);\n    }\n\n    if (this.startButton) {\n      this.startButton.disabled = !isEnabled;\n    }\n  }\n\n  setUnauditableExplanation(text: string|null): void {\n    if (this.helpText) {\n      this.helpText.textContent = text;\n    }\n  }\n\n  setWarningText(text: string|null): void {\n    if (this.warningText) {\n      this.warningText.textContent = text;\n      this.warningText.classList.toggle('hidden', !text);\n      this.shouldConfirm = Boolean(text);\n    }\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.controller.recomputePageAuditability();\n    this.registerCSSFiles([lighthouseStartViewStyles]);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
