{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/lighthouse/LighthouseStartViewFR.ts"],
  "sourcesContent": ["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport type * as Platform from '../../core/platform/platform.js';\n\nimport {StartView} from './LighthouseStartView.js';\nimport {Events} from './LighthouseController.js';\n\nconst UIStrings = {\n  /**\n   * @description Text displayed as the title of a panel that can be used to audit a web page with Lighthouse.\n   */\n  generateLighthouseReport: 'Generate a Lighthouse report',\n  /**\n   * @description Text that refers to the Lighthouse mode\n   */\n  mode: 'Mode',\n  /**\n   * @description Title in the Lighthouse Start View for list of categories to run during audit\n   */\n  categories: 'Categories',\n  /**\n   * @description Title in the Lighthouse Start View for list of available start plugins\n   */\n  plugins: 'Plugins',\n  /**\n   * @description Label for a button to start analyzing a page navigation with Lighthouse\n   */\n  analyzeNavigation: 'Analyze page load',\n  /**\n   * @description Label for a button to start analyzing the current page state with Lighthouse\n   */\n  analyzeSnapshot: 'Analyze page state',\n  /**\n   * @description Label for a button that starts a Lighthouse mode that analyzes user interactions over a period of time.\n   */\n  startTimespan: 'Start timespan',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/lighthouse/LighthouseStartViewFR.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class StartViewFR extends StartView {\n  changeFormMode?: (mode: string) => void;\n\n  protected render(): void {\n    this.populateRuntimeSettingAsToolbarCheckbox('lighthouse.legacy_navigation', this.settingsToolbarInternal);\n    this.populateRuntimeSettingAsToolbarCheckbox('lighthouse.clear_storage', this.settingsToolbarInternal);\n    this.populateRuntimeSettingAsToolbarDropdown('lighthouse.throttling', this.settingsToolbarInternal);\n\n    const {mode} = this.controller.getFlags();\n    this.populateStartButton(mode);\n\n    const fragment = UI.Fragment.Fragment.build`\n<form class=\"lighthouse-start-view-fr\">\n  <header class=\"hbox\">\n    <div class=\"lighthouse-logo\"></div>\n    <div class=\"lighthouse-title\">${i18nString(UIStrings.generateLighthouseReport)}</div>\n    <div class=\"lighthouse-start-button-container\" $=\"start-button-container\">${this.startButton}</div>\n  </header>\n  <div $=\"help-text\" class=\"lighthouse-help-text hidden\"></div>\n  <div class=\"lighthouse-options hbox\">\n    <div class=\"lighthouse-form-section\">\n      <div class=\"lighthouse-form-elements\" $=\"mode-form-elements\"></div>\n    </div>\n    <div class=\"lighthouse-form-section\">\n      <div class=\"lighthouse-form-elements\" $=\"device-type-form-elements\"></div>\n    </div>\n    <div class=\"lighthouse-form-categories\">\n      <div class=\"lighthouse-form-section\">\n        <div class=\"lighthouse-form-section-label\">${i18nString(UIStrings.categories)}</div>\n        <div class=\"lighthouse-form-elements\" $=\"categories-form-elements\"></div>\n      </div>\n      <div class=\"lighthouse-form-section\">\n        <div class=\"lighthouse-form-section-label\">\n          <div class=\"lighthouse-icon-label\">${i18nString(UIStrings.plugins)}</div>\n        </div>\n        <div class=\"lighthouse-form-elements\" $=\"plugins-form-elements\"></div>\n      </div>\n    </div>\n  </div>\n  <div $=\"warning-text\" class=\"lighthouse-warning-text hidden\"></div>\n</form>\n    `;\n\n    this.helpText = fragment.$('help-text');\n    this.warningText = fragment.$('warning-text');\n\n    const modeFormElements = fragment.$('mode-form-elements');\n    this.populateRuntimeSettingAsRadio('lighthouse.mode', i18nString(UIStrings.mode), modeFormElements);\n\n    // The previous radios are removed later and don't exist on the new fragment yet.\n    this.populateFormControls(fragment, mode);\n\n    this.contentElement.textContent = '';\n    this.contentElement.append(fragment.element());\n\n    this.refresh();\n  }\n\n  private populateStartButton(mode: string): void {\n    let buttonLabel: Platform.UIString.LocalizedString;\n    let callback: () => void;\n\n    if (mode === 'timespan') {\n      buttonLabel = i18nString(UIStrings.startTimespan);\n      callback = (): void => {\n        this.controller.dispatchEventToListeners(\n            Events.RequestLighthouseTimespanStart,\n            /* keyboardInitiated */ this.startButton.matches(':focus-visible'),\n        );\n      };\n    } else if (mode === 'snapshot') {\n      buttonLabel = i18nString(UIStrings.analyzeSnapshot);\n      callback = (): void => {\n        this.controller.dispatchEventToListeners(\n            Events.RequestLighthouseStart,\n            /* keyboardInitiated */ this.startButton.matches(':focus-visible'),\n        );\n      };\n    } else {\n      buttonLabel = i18nString(UIStrings.analyzeNavigation);\n      callback = (): void => {\n        this.controller.dispatchEventToListeners(\n            Events.RequestLighthouseStart,\n            /* keyboardInitiated */ this.startButton.matches(':focus-visible'),\n        );\n      };\n    }\n\n    const startButtonContainer = this.contentElement.querySelector('.lighthouse-start-button-container');\n    if (startButtonContainer) {\n      startButtonContainer.textContent = '';\n      this.startButton = UI.UIUtils.createTextButton(\n          buttonLabel,\n          callback,\n          /* className */ '',\n          /* primary */ true,\n      );\n      startButtonContainer.append(this.startButton);\n    }\n  }\n\n  refresh(): void {\n    const {mode} = this.controller.getFlags();\n    this.populateStartButton(mode);\n\n    for (const {checkbox, preset} of this.checkboxes) {\n      if (preset.supportedModes.includes(mode)) {\n        checkbox.setEnabled(true);\n        checkbox.setIndeterminate(false);\n      } else {\n        checkbox.setEnabled(false);\n        checkbox.setIndeterminate(true);\n      }\n    }\n\n    // Ensure the correct layout is used after refresh.\n    this.onResize();\n  }\n\n  onResize(): void {\n    const useNarrowLayout = this.contentElement.offsetWidth < 500;\n    const useWideLayout = this.contentElement.offsetWidth > 800;\n    const headerEl = this.contentElement.querySelector('.lighthouse-start-view-fr header');\n    const optionsEl = this.contentElement.querySelector('.lighthouse-options');\n    if (headerEl) {\n      headerEl.classList.toggle('hbox', !useNarrowLayout);\n      headerEl.classList.toggle('vbox', useNarrowLayout);\n    }\n    if (optionsEl) {\n      optionsEl.classList.toggle('wide', useWideLayout);\n      optionsEl.classList.toggle('narrow', useNarrowLayout);\n    }\n  }\n}\n"],
  "mappings": "AAIA;AACA;AAGA;AACA;AAEA,MAAM,YAAY;AAAA,EAIhB,0BAA0B;AAAA,EAI1B,MAAM;AAAA,EAIN,YAAY;AAAA,EAIZ,SAAS;AAAA,EAIT,mBAAmB;AAAA,EAInB,iBAAiB;AAAA,EAIjB,eAAe;AAAA;AAGjB,MAAM,OAAO,KAAK,KAAK,kBAAkB,8CAA8C;AACvF,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAEzD,iCAA0B,UAAU;AAAA,EACzC;AAAA,EAEU,SAAe;AACvB,SAAK,wCAAwC,gCAAgC,KAAK;AAClF,SAAK,wCAAwC,4BAA4B,KAAK;AAC9E,SAAK,wCAAwC,yBAAyB,KAAK;AAE3E,UAAM,EAAC,SAAQ,KAAK,WAAW;AAC/B,SAAK,oBAAoB;AAEzB,UAAM,WAAW,GAAG,SAAS,SAAS;AAAA;AAAA;AAAA;AAAA,oCAIN,WAAW,UAAU;AAAA,gFACuB,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAYhC,WAAW,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,+CAK3B,WAAW,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUhE,SAAK,WAAW,SAAS,EAAE;AAC3B,SAAK,cAAc,SAAS,EAAE;AAE9B,UAAM,mBAAmB,SAAS,EAAE;AACpC,SAAK,8BAA8B,mBAAmB,WAAW,UAAU,OAAO;AAGlF,SAAK,qBAAqB,UAAU;AAEpC,SAAK,eAAe,cAAc;AAClC,SAAK,eAAe,OAAO,SAAS;AAEpC,SAAK;AAAA;AAAA,EAGC,oBAAoB,MAAoB;AAC9C,QAAI;AACJ,QAAI;AAEJ,QAAI,SAAS,YAAY;AACvB,oBAAc,WAAW,UAAU;AACnC,iBAAW,MAAY;AACrB,aAAK,WAAW,yBACZ,OAAO,gCACiB,KAAK,YAAY,QAAQ;AAAA;AAAA,eAG9C,SAAS,YAAY;AAC9B,oBAAc,WAAW,UAAU;AACnC,iBAAW,MAAY;AACrB,aAAK,WAAW,yBACZ,OAAO,wBACiB,KAAK,YAAY,QAAQ;AAAA;AAAA,WAGlD;AACL,oBAAc,WAAW,UAAU;AACnC,iBAAW,MAAY;AACrB,aAAK,WAAW,yBACZ,OAAO,wBACiB,KAAK,YAAY,QAAQ;AAAA;AAAA;AAKzD,UAAM,uBAAuB,KAAK,eAAe,cAAc;AAC/D,QAAI,sBAAsB;AACxB,2BAAqB,cAAc;AACnC,WAAK,cAAc,GAAG,QAAQ,iBAC1B,aACA,UACgB,IACF;AAElB,2BAAqB,OAAO,KAAK;AAAA;AAAA;AAAA,EAIrC,UAAgB;AACd,UAAM,EAAC,SAAQ,KAAK,WAAW;AAC/B,SAAK,oBAAoB;AAEzB,eAAW,EAAC,UAAU,YAAW,KAAK,YAAY;AAChD,UAAI,OAAO,eAAe,SAAS,OAAO;AACxC,iBAAS,WAAW;AACpB,iBAAS,iBAAiB;AAAA,aACrB;AACL,iBAAS,WAAW;AACpB,iBAAS,iBAAiB;AAAA;AAAA;AAK9B,SAAK;AAAA;AAAA,EAGP,WAAiB;AACf,UAAM,kBAAkB,KAAK,eAAe,cAAc;AAC1D,UAAM,gBAAgB,KAAK,eAAe,cAAc;AACxD,UAAM,WAAW,KAAK,eAAe,cAAc;AACnD,UAAM,YAAY,KAAK,eAAe,cAAc;AACpD,QAAI,UAAU;AACZ,eAAS,UAAU,OAAO,QAAQ,CAAC;AACnC,eAAS,UAAU,OAAO,QAAQ;AAAA;AAEpC,QAAI,WAAW;AACb,gBAAU,UAAU,OAAO,QAAQ;AACnC,gBAAU,UAAU,OAAO,UAAU;AAAA;AAAA;AAAA;",
  "names": []
}
