{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/lighthouse/LighthouseStatusView.ts"],
  "sourcesContent": ["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport lighthouseDialogStyles from './lighthouseDialog.css.js';\n\nimport type {LighthouseController} from './LighthouseController.js';\nimport {Events, RuntimeSettings} from './LighthouseController.js';\n\nconst UIStrings = {\n  /**\n  *@description Text to cancel something\n  */\n  cancel: 'Cancel',\n  /**\n  *@description Text when something is loading\n  */\n  loading: 'Loading\u2026',\n  /**\n  *@description Status text in Lighthouse splash screen while an audit is being performed\n  *@example {github.com} PH1\n  */\n  auditingS: 'Auditing {PH1}',\n  /**\n  *@description Status text in Lighthouse splash screen while an audit is being performed\n  */\n  auditingYourWebPage: 'Auditing your web page',\n  /**\n  *@description Status text in Lighthouse splash screen while an audit is being performed, and cancellation to take effect\n  */\n  cancelling: 'Cancelling\u2026',\n  /**\n  *@description Status text in Lighthouse splash screen while preparing for an audit\n  */\n  lighthouseIsWarmingUp: '`Lighthouse` is warming up\u2026',\n  /**\n  *@description Status text in Lighthouse splash screen while an audit is being performed\n  */\n  lighthouseIsLoadingYourPage: '`Lighthouse` is loading your page',\n  /**\n  *@description Text in Lighthouse Status View\n  *@example {75% of global mobile users in 2016 were on 2G or 3G [Source: GSMA Mobile]} PH1\n  */\n  fastFactMessageWithPlaceholder: '\uD83D\uDCA1 {PH1}',\n  /**\n  *@description Text of a DOM element in Lighthouse Status View\n  */\n  ahSorryWeRanIntoAnError: 'Ah, sorry! We ran into an error.',\n  /**\n  *@description Text in Lighthouse Status View\n  */\n  tryToNavigateToTheUrlInAFresh:\n      'Try to navigate to the URL in a fresh `Chrome` profile without any other tabs or extensions open and try again.',\n  /**\n  *@description Text of a DOM element in Lighthouse Status View\n  */\n  ifThisIssueIsReproduciblePlease: 'If this issue is reproducible, please report it at the `Lighthouse` `GitHub` repo.',\n  /**\n  *@description Text in Lighthouse splash screen when loading the page for auditing\n  */\n  lighthouseIsLoadingThePage: 'Lighthouse is loading the page.',\n  /**\n  *@description Text in Lighthouse splash screen when Lighthouse is gathering information for display\n  */\n  lighthouseIsGatheringInformation: '`Lighthouse` is gathering information about the page to compute your score.',\n  /**\n  *@description Text in Lighthouse splash screen when Lighthouse is generating a report.\n  */\n  almostThereLighthouseIsNow: 'Almost there! `Lighthouse` is now generating your report.',\n  /**\n  *@description Text in Lighthouse splash screen when loading the page for auditing\n  */\n  lighthouseIsLoadingYourPageWith:\n      '`Lighthouse` is loading your page with throttling to measure performance on a mobile device on 3G.',\n  /**\n  *@description Text in Lighthouse splash screen when loading the page for auditing\n  */\n  lighthouseIsLoadingYourPageWithThrottling:\n      '`Lighthouse` is loading your page with throttling to measure performance on a slow desktop on 3G.',\n  /**\n  *@description Text in Lighthouse splash screen when loading the page for auditing\n  */\n  lighthouseIsLoadingYourPageWithMobile: '`Lighthouse` is loading your page with mobile emulation.',\n  /**\n  *@description Fast fact in the splash screen while Lighthouse is performing an audit\n  */\n  mbTakesAMinimumOfSecondsTo:\n      '1MB takes a minimum of 5 seconds to download on a typical 3G connection [Source: `WebPageTest` and `DevTools` 3G definition].',\n  /**\n  *@description Fast fact in the splash screen while Lighthouse is performing an audit\n  */\n  rebuildingPinterestPagesFor:\n      'Rebuilding Pinterest pages for performance increased conversion rates by 15% [Source: `WPO Stats`]',\n  /**\n  *@description Fast fact in the splash screen while Lighthouse is performing an audit\n  */\n  byReducingTheResponseSizeOfJson:\n      'By reducing the response size of JSON needed for displaying comments, Instagram saw increased impressions [Source: `WPO Stats`]',\n  /**\n  *@description Fast fact in the splash screen while Lighthouse is performing an audit\n  */\n  walmartSawAIncreaseInRevenueFor:\n      'Walmart saw a 1% increase in revenue for every 100ms improvement in page load [Source: `WPO Stats`]',\n  /**\n  *@description Fast fact in the splash screen while Lighthouse is performing an audit\n  */\n  ifASiteTakesSecondToBecome:\n      'If a site takes >1 second to become interactive, users lose attention, and their perception of completing the page task is broken [Source: `Google Developers Blog`]',\n  /**\n  *@description Fast fact in the splash screen while Lighthouse is performing an audit\n  */\n  OfGlobalMobileUsersInWereOnGOrG: '75% of global mobile users in 2016 were on 2G or 3G [Source: `GSMA Mobile`]',\n  /**\n  *@description Fast fact in the splash screen while Lighthouse is performing an audit\n  */\n  theAverageUserDeviceCostsLess:\n      'The average user device costs less than 200 USD. [Source: `International Data Corporation`]',\n  /**\n  *@description Fast fact in the splash screen while Lighthouse is performing an audit\n  */\n  SecondsIsTheAverageTimeAMobile:\n      '19 seconds is the average time a mobile web page takes to load on a 3G connection [Source: `Google DoubleClick blog`]',\n  /**\n  *@description Fast fact in the splash screen while Lighthouse is performing an audit\n  */\n  OfMobilePagesTakeNearlySeconds:\n      '70% of mobile pages take nearly 7 seconds for the visual content above the fold to display on the screen. [Source: `Think with Google`]',\n  /**\n  *@description Fast fact in the splash screen while Lighthouse is performing an audit\n  */\n  asPageLoadTimeIncreasesFromOne:\n      'As page load time increases from one second to seven seconds, the probability of a mobile site visitor bouncing increases 113%. [Source: `Think with Google`]',\n  /**\n  *@description Fast fact in the splash screen while Lighthouse is performing an audit\n  */\n  asTheNumberOfElementsOnAPage:\n      'As the number of elements on a page increases from 400 to 6,000, the probability of conversion drops 95%. [Source: `Think with Google`]',\n  /**\n  *@description Fast fact in the splash screen while Lighthouse is performing an audit\n  */\n  lighthouseOnlySimulatesMobile:\n      '`Lighthouse` only simulates mobile performance; to measure performance on a real device, try WebPageTest.org [Source: `Lighthouse` team]',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/lighthouse/LighthouseStatusView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nexport class StatusView {\n  private readonly controller: LighthouseController;\n  private statusView: Element|null;\n  private statusHeader: Element|null;\n  private progressWrapper: Element|null;\n  private progressBar: Element|null;\n  private statusText: Element|null;\n  private cancelButton: HTMLButtonElement|null;\n  private inspectedURL: string;\n  private textChangedAt: number;\n  private fastFactsQueued: Common.UIString.LocalizedString[];\n  private currentPhase: StatusPhase|null;\n  private scheduledTextChangeTimeout: number|null;\n  private scheduledFastFactTimeout: number|null;\n  private readonly dialog: UI.Dialog.Dialog;\n\n  constructor(controller: LighthouseController) {\n    this.controller = controller;\n\n    this.statusView = null;\n    this.statusHeader = null;\n    this.progressWrapper = null;\n    this.progressBar = null;\n    this.statusText = null;\n    this.cancelButton = null;\n\n    this.inspectedURL = '';\n    this.textChangedAt = 0;\n    this.fastFactsQueued = FastFacts.map(lazyString => lazyString());\n    this.currentPhase = null;\n    this.scheduledTextChangeTimeout = null;\n    this.scheduledFastFactTimeout = null;\n\n    this.dialog = new UI.Dialog.Dialog();\n    this.dialog.setDimmed(true);\n    this.dialog.setCloseOnEscape(false);\n    this.dialog.setOutsideClickCallback(event => event.consume(true));\n    this.render();\n  }\n\n  private render(): void {\n    const dialogRoot = UI.Utils.createShadowRootWithCoreStyles(\n        this.dialog.contentElement, {cssFile: [lighthouseDialogStyles], delegatesFocus: undefined});\n    const lighthouseViewElement = dialogRoot.createChild('div', 'lighthouse-view vbox');\n\n    const cancelButton = UI.UIUtils.createTextButton(i18nString(UIStrings.cancel), this.cancel.bind(this));\n    const fragment = UI.Fragment.Fragment.build`\n  <div class=\"lighthouse-view vbox\">\n  <h2 $=\"status-header\">Auditing your web page\u2026</h2>\n  <div class=\"lighthouse-status vbox\" $=\"status-view\">\n  <div class=\"lighthouse-progress-wrapper\" $=\"progress-wrapper\">\n  <div class=\"lighthouse-progress-bar\" $=\"progress-bar\"></div>\n  </div>\n  <div class=\"lighthouse-status-text\" $=\"status-text\"></div>\n  </div>\n  ${cancelButton}\n  </div>\n  `;\n\n    lighthouseViewElement.appendChild(fragment.element());\n\n    this.statusView = fragment.$('status-view');\n    this.statusHeader = fragment.$('status-header');\n    this.progressWrapper = fragment.$('progress-wrapper');\n    this.progressBar = fragment.$('progress-bar');\n    this.statusText = fragment.$('status-text');\n    // Use StatusPhases array index as progress bar value\n    UI.ARIAUtils.markAsProgressBar(this.progressBar, 0, StatusPhases.length - 1);\n    this.cancelButton = cancelButton;\n    UI.ARIAUtils.markAsStatus(this.statusText);\n\n    this.dialog.setDefaultFocusedElement(cancelButton);\n    this.dialog.setSizeBehavior(UI.GlassPane.SizeBehavior.SetExactWidthMaxHeight);\n    this.dialog.setMaxContentSize(new UI.Geometry.Size(500, 400));\n  }\n\n  private reset(): void {\n    this.resetProgressBarClasses();\n    clearTimeout(this.scheduledFastFactTimeout as number);\n\n    this.textChangedAt = 0;\n    this.fastFactsQueued = FastFacts.map(lazyString => lazyString());\n    this.currentPhase = null;\n    this.scheduledTextChangeTimeout = null;\n    this.scheduledFastFactTimeout = null;\n  }\n\n  show(dialogRenderElement: Element): void {\n    this.reset();\n    this.updateStatus(i18nString(UIStrings.loading));\n\n    const parsedURL = Common.ParsedURL.ParsedURL.fromString(this.inspectedURL);\n    const pageHost = parsedURL && parsedURL.host;\n    const statusHeader =\n        pageHost ? i18nString(UIStrings.auditingS, {PH1: pageHost}) : i18nString(UIStrings.auditingYourWebPage);\n    this.renderStatusHeader(statusHeader);\n    // @ts-ignore TS expects Document, but gets Element (show takes Element|Document)\n    this.dialog.show(dialogRenderElement);\n  }\n\n  private renderStatusHeader(statusHeader?: string): void {\n    if (this.statusHeader) {\n      this.statusHeader.textContent = `${statusHeader}\u2026`;\n    }\n  }\n\n  hide(): void {\n    if (this.dialog.isShowing()) {\n      this.dialog.hide();\n    }\n  }\n\n  setInspectedURL(url: string = ''): void {\n    this.inspectedURL = url;\n  }\n\n  updateStatus(message: string|null): void {\n    if (!message || !this.statusText) {\n      return;\n    }\n\n    if (message.startsWith('Cancel')) {\n      this.commitTextChange(i18nString(UIStrings.cancelling));\n      clearTimeout(this.scheduledFastFactTimeout as number);\n      return;\n    }\n\n    const nextPhase = this.getPhaseForMessage(message);\n\n    // @ts-ignore indexOf null is valid.\n    const nextPhaseIndex = StatusPhases.indexOf(nextPhase);\n\n    // @ts-ignore indexOf null is valid.\n    const currentPhaseIndex = StatusPhases.indexOf(this.currentPhase);\n    if (!nextPhase && !this.currentPhase) {\n      this.commitTextChange(i18nString(UIStrings.lighthouseIsWarmingUp));\n      clearTimeout(this.scheduledFastFactTimeout as number);\n    } else if (nextPhase && (!this.currentPhase || currentPhaseIndex < nextPhaseIndex)) {\n      this.currentPhase = nextPhase;\n      const text = this.getMessageForPhase(nextPhase);\n      this.scheduleTextChange(text);\n      this.scheduleFastFactCheck();\n      this.resetProgressBarClasses();\n\n      if (this.progressBar) {\n        this.progressBar.classList.add(nextPhase.progressBarClass);\n        UI.ARIAUtils.setProgressBarValue(this.progressBar, nextPhaseIndex, text);\n      }\n    }\n  }\n\n  private cancel(): void {\n    this.controller.dispatchEventToListeners(Events.RequestLighthouseCancel);\n  }\n\n  private getMessageForPhase(phase: StatusPhase): string {\n    if (phase.message()) {\n      return phase.message();\n    }\n\n    const deviceTypeSetting = RuntimeSettings.find(item => item.setting.name === 'lighthouse.device_type');\n    const throttleSetting = RuntimeSettings.find(item => item.setting.name === 'lighthouse.throttling');\n    const deviceType = deviceTypeSetting ? deviceTypeSetting.setting.get() : '';\n    const throttling = throttleSetting ? throttleSetting.setting.get() : '';\n    const match = LoadingMessages.find(item => {\n      return item.deviceType === deviceType && item.throttling === throttling;\n    });\n\n    return match ? match.message() : i18nString(UIStrings.lighthouseIsLoadingYourPage);\n  }\n\n  private getPhaseForMessage(message: string): StatusPhase|null {\n    return StatusPhases.find(phase => phase.statusMessageRegex.test(message)) || null;\n  }\n\n  private resetProgressBarClasses(): void {\n    if (this.progressBar) {\n      this.progressBar.className = 'lighthouse-progress-bar';\n    }\n  }\n\n  private scheduleFastFactCheck(): void {\n    if (!this.currentPhase || this.scheduledFastFactTimeout) {\n      return;\n    }\n\n    this.scheduledFastFactTimeout = window.setTimeout(() => {\n      this.updateFastFactIfNecessary();\n      this.scheduledFastFactTimeout = null;\n\n      this.scheduleFastFactCheck();\n    }, 100);\n  }\n\n  private updateFastFactIfNecessary(): void {\n    const now = performance.now();\n    if (now - this.textChangedAt < fastFactRotationInterval) {\n      return;\n    }\n    if (!this.fastFactsQueued.length) {\n      return;\n    }\n\n    const fastFactIndex = Math.floor(Math.random() * this.fastFactsQueued.length);\n    this.scheduleTextChange(\n        i18nString(UIStrings.fastFactMessageWithPlaceholder, {PH1: this.fastFactsQueued[fastFactIndex]}));\n    this.fastFactsQueued.splice(fastFactIndex, 1);\n  }\n\n  private commitTextChange(text: string): void {\n    if (!this.statusText) {\n      return;\n    }\n    this.textChangedAt = performance.now();\n    this.statusText.textContent = text;\n  }\n\n  private scheduleTextChange(text: string): void {\n    if (this.scheduledTextChangeTimeout) {\n      clearTimeout(this.scheduledTextChangeTimeout);\n    }\n\n    const msSinceLastChange = performance.now() - this.textChangedAt;\n    const msToTextChange = minimumTextVisibilityDuration - msSinceLastChange;\n\n    this.scheduledTextChangeTimeout = window.setTimeout(() => {\n      this.commitTextChange(text);\n    }, Math.max(msToTextChange, 0));\n  }\n\n  renderBugReport(err: Error): void {\n    console.error(err);\n    if (this.scheduledFastFactTimeout) {\n      window.clearTimeout(this.scheduledFastFactTimeout);\n    }\n\n    if (this.scheduledTextChangeTimeout) {\n      window.clearTimeout(this.scheduledTextChangeTimeout);\n    }\n\n    this.resetProgressBarClasses();\n\n    if (this.progressBar) {\n      this.progressBar.classList.add('errored');\n    }\n\n    if (this.statusText) {\n      this.commitTextChange('');\n      UI.UIUtils.createTextChild(this.statusText.createChild('p'), i18nString(UIStrings.ahSorryWeRanIntoAnError));\n      if (KnownBugPatterns.some(pattern => pattern.test(err.message))) {\n        const message = i18nString(UIStrings.tryToNavigateToTheUrlInAFresh);\n        UI.UIUtils.createTextChild(this.statusText.createChild('p'), message);\n      } else {\n        this.renderBugReportBody(err, this.inspectedURL);\n      }\n    }\n  }\n\n  renderText(statusHeader: string, text: string): void {\n    this.renderStatusHeader(statusHeader);\n    this.commitTextChange(text);\n  }\n\n  toggleCancelButton(show: boolean): void {\n    if (this.cancelButton) {\n      this.cancelButton.style.visibility = show ? 'visible' : 'hidden';\n    }\n  }\n\n  private renderBugReportBody(err: Error, auditURL: string): void {\n    const chromeVersion = navigator.userAgent.match(/Chrome\\/(\\S+)/) || ['', 'Unknown'];\n    // @ts-ignore Lighthouse sets `friendlyMessage` on certain\n    // important errors such as PROTOCOL_TIMEOUT.\n    const errorMessage = err.friendlyMessage || err.message;\n    const issueBody = `\n${errorMessage}\n\\`\\`\\`\nChannel: DevTools\nInitial URL: ${auditURL}\nChrome Version: ${chromeVersion[1]}\nStack Trace: ${err.stack}\n\\`\\`\\`\n`;\n    if (this.statusText) {\n      UI.UIUtils.createTextChild(\n          this.statusText.createChild('p'), i18nString(UIStrings.ifThisIssueIsReproduciblePlease));\n      UI.UIUtils.createTextChild(this.statusText.createChild('code', 'monospace'), issueBody.trim());\n    }\n  }\n}\n\nexport const fastFactRotationInterval = 6000;\n\nexport const minimumTextVisibilityDuration = 3000;\n\nconst KnownBugPatterns: RegExp[] = [\n  /PARSING_PROBLEM/,\n  /DOCUMENT_REQUEST/,\n  /READ_FAILED/,\n  /TRACING_ALREADY_STARTED/,\n  /^You must provide a url to the runner/,\n  /^You probably have multiple tabs open/,\n];\n\nexport interface StatusPhase {\n  id: string;\n  progressBarClass: string;\n  message: () => Common.UIString.LocalizedString;\n  statusMessageRegex: RegExp;\n}\n\nexport const StatusPhases: StatusPhase[] = [\n  {\n    id: 'loading',\n    progressBarClass: 'loading',\n    message: i18nLazyString(UIStrings.lighthouseIsLoadingThePage),\n    statusMessageRegex: /^(Loading page|Navigating to)/,\n  },\n  {\n    id: 'gathering',\n    progressBarClass: 'gathering',\n    message: i18nLazyString(UIStrings.lighthouseIsGatheringInformation),\n    statusMessageRegex: /^(Gathering|Computing artifact)/,\n  },\n  {\n    id: 'auditing',\n    progressBarClass: 'auditing',\n    message: i18nLazyString(UIStrings.almostThereLighthouseIsNow),\n    statusMessageRegex: /^Auditing/,\n  },\n];\n\nconst LoadingMessages = [\n  {\n    deviceType: 'mobile',\n    throttling: 'on',\n    message: i18nLazyString(UIStrings.lighthouseIsLoadingYourPageWith),\n  },\n  {\n    deviceType: 'desktop',\n    throttling: 'on',\n    message: i18nLazyString(UIStrings.lighthouseIsLoadingYourPageWithThrottling),\n  },\n  {\n    deviceType: 'mobile',\n    throttling: 'off',\n    message: i18nLazyString(UIStrings.lighthouseIsLoadingYourPageWithMobile),\n  },\n  {\n    deviceType: 'desktop',\n    throttling: 'off',\n    message: i18nLazyString(UIStrings.lighthouseIsLoadingThePage),\n  },\n];\n\nconst FastFacts = [\n  i18nLazyString(UIStrings.mbTakesAMinimumOfSecondsTo),\n  i18nLazyString(UIStrings.rebuildingPinterestPagesFor),\n  i18nLazyString(UIStrings.byReducingTheResponseSizeOfJson),\n  i18nLazyString(UIStrings.walmartSawAIncreaseInRevenueFor),\n  i18nLazyString(UIStrings.ifASiteTakesSecondToBecome),\n  i18nLazyString(UIStrings.OfGlobalMobileUsersInWereOnGOrG),\n  i18nLazyString(UIStrings.theAverageUserDeviceCostsLess),\n  i18nLazyString(UIStrings.SecondsIsTheAverageTimeAMobile),\n  i18nLazyString(UIStrings.OfMobilePagesTakeNearlySeconds),\n  i18nLazyString(UIStrings.asPageLoadTimeIncreasesFromOne),\n  i18nLazyString(UIStrings.asTheNumberOfElementsOnAPage),\n  i18nLazyString(UIStrings.OfMobilePagesTakeNearlySeconds),\n  i18nLazyString(UIStrings.lighthouseOnlySimulatesMobile),\n];\n"],
  "mappings": "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",
  "names": []
}
