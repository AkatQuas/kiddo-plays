{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/lighthouse/LighthouseReportRenderer.ts"],
  "sourcesContent": ["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport * as LighthouseReport from '../../third_party/lighthouse/report/report.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as ThemeSupport from '../../ui/legacy/theme_support/theme_support.js';\nimport * as Timeline from '../timeline/timeline.js';\nimport type {RunnerResultArtifacts, NodeDetailsJSON, SourceLocationDetailsJSON} from './LighthouseReporterTypes.js';\n\nconst UIStrings = {\n  /**\n  *@description Label for view trace button when simulated throttling is enabled\n  */\n  viewOriginalTrace: 'View Original Trace',\n  /**\n  *@description Text of the timeline button in Lighthouse Report Renderer\n  */\n  viewTrace: 'View Trace',\n  /**\n  *@description Help text for 'View Trace' button\n  */\n  thePerformanceMetricsAboveAre:\n      'The performance metrics above are simulated and won\\'t match the timings found in this trace. Disable simulated throttling in \"Lighthouse Settings\" if you want the timings to match.',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/lighthouse/LighthouseReportRenderer.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst MaxLengthForLinks = 40;\n\nexport class LighthouseReportRenderer extends LighthouseReport.ReportRenderer {\n  constructor(dom: LighthouseReport.DOM) {\n    super(dom);\n  }\n\n  static addViewTraceButton(\n      el: Element, reportUIFeatures: LighthouseReport.ReportUIFeatures, artifacts?: RunnerResultArtifacts): void {\n    if (!artifacts || !artifacts.traces || !artifacts.traces.defaultPass) {\n      return;\n    }\n\n    const simulated = artifacts.settings.throttlingMethod === 'simulate';\n    const container = el.querySelector('.lh-audit-group');\n    if (!container) {\n      return;\n    }\n\n    const defaultPassTrace = artifacts.traces.defaultPass;\n    const text = simulated ? i18nString(UIStrings.viewOriginalTrace) : i18nString(UIStrings.viewTrace);\n    const timelineButton = reportUIFeatures.addButton({\n      text,\n      onClick: onViewTraceClick,\n    });\n    if (timelineButton) {\n      timelineButton.classList.add('lh-button--trace');\n      if (simulated) {\n        UI.Tooltip.Tooltip.install(timelineButton, i18nString(UIStrings.thePerformanceMetricsAboveAre));\n      }\n    }\n\n    async function onViewTraceClick(): Promise<void> {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.LighthouseViewTrace);\n      await UI.InspectorView.InspectorView.instance().showPanel('timeline');\n      Timeline.TimelinePanel.TimelinePanel.instance().loadFromEvents(defaultPassTrace.traceEvents);\n    }\n  }\n\n  static async linkifyNodeDetails(el: Element): Promise<void> {\n    const mainTarget = SDK.TargetManager.TargetManager.instance().mainTarget();\n    if (!mainTarget) {\n      return;\n    }\n    const domModel = mainTarget.model(SDK.DOMModel.DOMModel);\n    if (!domModel) {\n      return;\n    }\n\n    for (const origElement of el.getElementsByClassName('lh-node')) {\n      const origHTMLElement = origElement as HTMLElement;\n      const detailsItem = origHTMLElement.dataset as unknown as NodeDetailsJSON;\n      if (!detailsItem.path) {\n        continue;\n      }\n\n      const nodeId = await domModel.pushNodeByPathToFrontend(detailsItem.path);\n\n      if (!nodeId) {\n        continue;\n      }\n      const node = domModel.nodeForId(nodeId);\n      if (!node) {\n        continue;\n      }\n\n      const element = await Common.Linkifier.Linkifier.linkify(\n          node, {tooltip: detailsItem.snippet, preventKeyboardFocus: undefined});\n      UI.Tooltip.Tooltip.install(origHTMLElement, '');\n\n      const screenshotElement = origHTMLElement.querySelector('.lh-element-screenshot');\n      origHTMLElement.textContent = '';\n      if (screenshotElement) {\n        origHTMLElement.append(screenshotElement);\n      }\n      origHTMLElement.appendChild(element);\n    }\n  }\n\n  static async linkifySourceLocationDetails(el: Element): Promise<void> {\n    for (const origElement of el.getElementsByClassName('lh-source-location')) {\n      const origHTMLElement = origElement as HTMLElement;\n      const detailsItem = origHTMLElement.dataset as SourceLocationDetailsJSON;\n      if (!detailsItem.sourceUrl || !detailsItem.sourceLine || !detailsItem.sourceColumn) {\n        continue;\n      }\n      const url = detailsItem.sourceUrl;\n      const line = Number(detailsItem.sourceLine);\n      const column = Number(detailsItem.sourceColumn);\n      const element = await Components.Linkifier.Linkifier.linkifyURL(url, {\n        lineNumber: line,\n        columnNumber: column,\n        showColumnNumber: false,\n        inlineFrameIndex: 0,\n        maxLength: MaxLengthForLinks,\n      });\n      UI.Tooltip.Tooltip.install(origHTMLElement, '');\n      origHTMLElement.textContent = '';\n      origHTMLElement.appendChild(element);\n    }\n  }\n\n  static handleDarkMode(el: Element): void {\n    const updateDarkModeIfNecessary = (): void => {\n      el.classList.toggle('lh-dark', ThemeSupport.ThemeSupport.instance().themeName() === 'dark');\n    };\n    ThemeSupport.ThemeSupport.instance().addEventListener(\n        ThemeSupport.ThemeChangeEvent.eventName, updateDarkModeIfNecessary);\n    updateDarkModeIfNecessary();\n  }\n}\n\n// @ts-ignore https://github.com/GoogleChrome/lighthouse/issues/11628\nexport class LighthouseReportUIFeatures extends LighthouseReport.ReportUIFeatures {\n  private beforePrint: (() => void)|null;\n  private afterPrint: (() => void)|null;\n\n  constructor(dom: LighthouseReport.DOM) {\n    super(dom);\n    this.beforePrint = null;\n    this.afterPrint = null;\n    this._topbar._print = this._print.bind(this);\n  }\n\n  setBeforePrint(beforePrint: (() => void)|null): void {\n    this.beforePrint = beforePrint;\n  }\n\n  setAfterPrint(afterPrint: (() => void)|null): void {\n    this.afterPrint = afterPrint;\n  }\n\n  /**\n   * Returns the html that recreates this report.\n   */\n  getReportHtml(): string {\n    this.resetUIState();\n    // @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\n    return Lighthouse.ReportGenerator.generateReportHtml(this.json);\n  }\n\n  /**\n   * Downloads a file (blob) using the system dialog prompt.\n   */\n  // This implements the interface ReportUIFeatures from lighthouse\n  // which follows a different naming convention.\n  // eslint-disable-next-line rulesdir/no_underscored_properties, @typescript-eslint/naming-convention\n  async _saveFile(blob: Blob|File): Promise<void> {\n    const domain = new Common.ParsedURL.ParsedURL(this.json.finalUrl).domain();\n    const sanitizedDomain = domain.replace(/[^a-z0-9.-]+/gi, '_');\n    const timestamp = Platform.DateUtilities.toISO8601Compact(new Date(this.json.fetchTime));\n    const ext = blob.type.match('json') ? '.json' : '.html';\n    const basename = `${sanitizedDomain}-${timestamp}${ext}` as Platform.DevToolsPath.RawPathString;\n    const text = await blob.text();\n    void Workspace.FileManager.FileManager.instance().save(basename, text, true /* forceSaveAs */);\n  }\n\n  // This implements the interface ReportUIFeatures from lighthouse\n  // which follows a different naming convention.\n  // eslint-disable-next-line rulesdir/no_underscored_properties, @typescript-eslint/naming-convention\n  async _print(): Promise<void> {\n    const document = this.getDocument();\n    const clonedReport = (document.querySelector('.lh-root') as HTMLElement).cloneNode(true);\n    const printWindow = window.open('', '_blank', 'channelmode=1,status=1,resizable=1');\n    if (!printWindow) {\n      return;\n    }\n\n    printWindow.document.body.replaceWith(clonedReport);\n    // Linkified nodes are shadow elements, which aren't exposed via `cloneNode`.\n    await LighthouseReportRenderer.linkifyNodeDetails(clonedReport as HTMLElement);\n\n    if (this.beforePrint) {\n      this.beforePrint();\n    }\n    printWindow.focus();\n    printWindow.print();\n    printWindow.close();\n    if (this.afterPrint) {\n      this.afterPrint();\n    }\n  }\n\n  getDocument(): Document {\n    return this._dom.document();\n  }\n\n  resetUIState(): void {\n    this._resetUIState();\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
