{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/layers/LayersPanel.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as LayerViewer from '../layer_viewer/layer_viewer.js';\n\nimport {LayerPaintProfilerView} from './LayerPaintProfilerView.js';\nimport {Events, LayerTreeModel} from './LayerTreeModel.js';\n\nconst UIStrings = {\n  /**\n  *@description Text for the details of something\n  */\n  details: 'Details',\n  /**\n  *@description Title of the Profiler tool\n  */\n  profiler: 'Profiler',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/layers/LayersPanel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet layersPanelInstance: LayersPanel;\n\nexport class LayersPanel extends UI.Panel.PanelWithSidebar implements SDK.TargetManager.Observer {\n  private model: LayerTreeModel|null;\n  private readonly layerViewHost: LayerViewer.LayerViewHost.LayerViewHost;\n  private readonly layerTreeOutline: LayerViewer.LayerTreeOutline.LayerTreeOutline;\n  private readonly rightSplitWidget: UI.SplitWidget.SplitWidget;\n  private readonly layers3DView: LayerViewer.Layers3DView.Layers3DView;\n  private tabbedPane: UI.TabbedPane.TabbedPane;\n  private readonly layerDetailsView: LayerViewer.LayerDetailsView.LayerDetailsView;\n  private readonly paintProfilerView: LayerPaintProfilerView;\n  private readonly updateThrottler: Common.Throttler.Throttler;\n  private layerBeingProfiled?: SDK.LayerTreeBase.Layer|null;\n  constructor() {\n    super('layers', 225);\n    this.model = null;\n\n    SDK.TargetManager.TargetManager.instance().observeTargets(this);\n    this.layerViewHost = new LayerViewer.LayerViewHost.LayerViewHost();\n    this.layerTreeOutline = new LayerViewer.LayerTreeOutline.LayerTreeOutline(this.layerViewHost);\n    this.layerTreeOutline.addEventListener(\n        LayerViewer.LayerTreeOutline.Events.PaintProfilerRequested, this.onPaintProfileRequested, this);\n    this.panelSidebarElement().appendChild(this.layerTreeOutline.element);\n    this.setDefaultFocusedElement(this.layerTreeOutline.element);\n\n    this.rightSplitWidget = new UI.SplitWidget.SplitWidget(false, true, 'layerDetailsSplitViewState');\n    this.splitWidget().setMainWidget(this.rightSplitWidget);\n\n    this.layers3DView = new LayerViewer.Layers3DView.Layers3DView(this.layerViewHost);\n    this.rightSplitWidget.setMainWidget(this.layers3DView);\n    this.layers3DView.addEventListener(\n        LayerViewer.Layers3DView.Events.PaintProfilerRequested, this.onPaintProfileRequested, this);\n    this.layers3DView.addEventListener(LayerViewer.Layers3DView.Events.ScaleChanged, this.onScaleChanged, this);\n\n    this.tabbedPane = new UI.TabbedPane.TabbedPane();\n    this.rightSplitWidget.setSidebarWidget(this.tabbedPane);\n\n    this.layerDetailsView = new LayerViewer.LayerDetailsView.LayerDetailsView(this.layerViewHost);\n    this.layerDetailsView.addEventListener(\n        LayerViewer.LayerDetailsView.Events.PaintProfilerRequested, this.onPaintProfileRequested, this);\n    this.tabbedPane.appendTab(DetailsViewTabs.Details, i18nString(UIStrings.details), this.layerDetailsView);\n\n    this.paintProfilerView = new LayerPaintProfilerView(this.showImage.bind(this));\n    this.tabbedPane.addEventListener(UI.TabbedPane.Events.TabClosed, this.onTabClosed, this);\n    this.updateThrottler = new Common.Throttler.Throttler(100);\n  }\n\n  static instance(opts = {forceNew: null}): LayersPanel {\n    const {forceNew} = opts;\n    if (!layersPanelInstance || forceNew) {\n      layersPanelInstance = new LayersPanel();\n    }\n\n    return layersPanelInstance;\n  }\n\n  focus(): void {\n    this.layerTreeOutline.focus();\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    if (this.model) {\n      this.model.enable();\n    }\n  }\n\n  willHide(): void {\n    if (this.model) {\n      void this.model.disable();\n    }\n    super.willHide();\n  }\n\n  targetAdded(target: SDK.Target.Target): void {\n    if (this.model) {\n      return;\n    }\n    this.model = target.model(LayerTreeModel);\n    if (!this.model) {\n      return;\n    }\n    this.model.addEventListener(Events.LayerTreeChanged, this.onLayerTreeUpdated, this);\n    this.model.addEventListener(Events.LayerPainted, this.onLayerPainted, this);\n    if (this.isShowing()) {\n      this.model.enable();\n    }\n  }\n\n  targetRemoved(target: SDK.Target.Target): void {\n    if (!this.model || this.model.target() !== target) {\n      return;\n    }\n    this.model.removeEventListener(Events.LayerTreeChanged, this.onLayerTreeUpdated, this);\n    this.model.removeEventListener(Events.LayerPainted, this.onLayerPainted, this);\n    void this.model.disable();\n    this.model = null;\n  }\n\n  private onLayerTreeUpdated(): void {\n    void this.updateThrottler.schedule(this.update.bind(this));\n  }\n\n  private update(): Promise<void> {\n    if (this.model) {\n      this.layerViewHost.setLayerTree(this.model.layerTree());\n      const resourceModel = this.model.target().model(SDK.ResourceTreeModel.ResourceTreeModel);\n      if (resourceModel) {\n        const mainFrame = resourceModel.mainFrame;\n        if (mainFrame) {\n          const url = mainFrame.url;\n          // Add the currently visualized url as an attribute to make it accessibles to e2e tests\n          this.element.setAttribute('test-current-url', url);\n        }\n      }\n    }\n    return Promise.resolve();\n  }\n\n  private onLayerPainted({data: layer}: Common.EventTarget.EventTargetEvent<SDK.LayerTreeBase.Layer>): void {\n    if (!this.model) {\n      return;\n    }\n    const selection = this.layerViewHost.selection();\n    if (selection && selection.layer() === layer) {\n      this.layerDetailsView.update();\n    }\n    this.layers3DView.updateLayerSnapshot(layer);\n  }\n\n  private onPaintProfileRequested({data: selection}:\n                                      Common.EventTarget.EventTargetEvent<LayerViewer.LayerViewHost.Selection>): void {\n    void this.layers3DView.snapshotForSelection(selection).then(snapshotWithRect => {\n      if (!snapshotWithRect) {\n        return;\n      }\n      this.layerBeingProfiled = selection.layer();\n      if (!this.tabbedPane.hasTab(DetailsViewTabs.Profiler)) {\n        this.tabbedPane.appendTab(\n            DetailsViewTabs.Profiler, i18nString(UIStrings.profiler), this.paintProfilerView, undefined, true, true);\n      }\n      this.tabbedPane.selectTab(DetailsViewTabs.Profiler);\n      this.paintProfilerView.profile(snapshotWithRect.snapshot);\n    });\n  }\n\n  private onTabClosed(event: Common.EventTarget.EventTargetEvent<UI.TabbedPane.EventData>): void {\n    if (event.data.tabId !== DetailsViewTabs.Profiler || !this.layerBeingProfiled) {\n      return;\n    }\n    this.paintProfilerView.reset();\n    this.layers3DView.showImageForLayer(this.layerBeingProfiled, undefined);\n    this.layerBeingProfiled = null;\n  }\n\n  private showImage(imageURL?: string): void {\n    if (this.layerBeingProfiled) {\n      this.layers3DView.showImageForLayer(this.layerBeingProfiled, imageURL);\n    }\n  }\n\n  private onScaleChanged(event: Common.EventTarget.EventTargetEvent<number>): void {\n    this.paintProfilerView.setScale(event.data);\n  }\n}\n\nexport const DetailsViewTabs = {\n  Details: 'details',\n  Profiler: 'profiler',\n};\n"],
  "mappings": "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",
  "names": []
}
