{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/layers/LayerPaintProfilerView.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as LayerViewer from '../layer_viewer/layer_viewer.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nexport class LayerPaintProfilerView extends UI.SplitWidget.SplitWidget {\n  private readonly logTreeView: LayerViewer.PaintProfilerView.PaintProfilerCommandLogView;\n  private readonly paintProfilerView: LayerViewer.PaintProfilerView.PaintProfilerView;\n  constructor(showImageCallback: (arg0?: string|undefined) => void) {\n    super(true, false);\n\n    this.logTreeView = new LayerViewer.PaintProfilerView.PaintProfilerCommandLogView();\n    this.setSidebarWidget(this.logTreeView);\n    this.paintProfilerView = new LayerViewer.PaintProfilerView.PaintProfilerView(showImageCallback);\n    this.setMainWidget(this.paintProfilerView);\n\n    this.paintProfilerView.addEventListener(\n        LayerViewer.PaintProfilerView.Events.WindowChanged, this.onWindowChanged, this);\n\n    this.logTreeView.focus();\n  }\n\n  reset(): void {\n    void this.paintProfilerView.setSnapshotAndLog(null, [], null);\n  }\n\n  profile(snapshot: SDK.PaintProfiler.PaintProfilerSnapshot): void {\n    void snapshot.commandLog().then(log => setSnapshotAndLog.call(this, snapshot, log));\n\n    function setSnapshotAndLog(\n        this: LayerPaintProfilerView, snapshot: SDK.PaintProfiler.PaintProfilerSnapshot|null,\n        log: SDK.PaintProfiler.PaintProfilerLogItem[]|null): void {\n      this.logTreeView.setCommandLog(log || []);\n      void this.paintProfilerView.setSnapshotAndLog(snapshot, log || [], null);\n      if (snapshot) {\n        snapshot.release();\n      }\n    }\n  }\n\n  setScale(scale: number): void {\n    this.paintProfilerView.setScale(scale);\n  }\n\n  private onWindowChanged(): void {\n    this.logTreeView.updateWindow(this.paintProfilerView.selectionWindow());\n  }\n}\n"],
  "mappings": "AAIA;AAEA;AAEO,4CAAqC,GAAG,YAAY,YAAY;AAAA,EACpD;AAAA,EACA;AAAA,EACjB,YAAY,mBAAsD;AAChE,UAAM,MAAM;AAEZ,SAAK,cAAc,IAAI,YAAY,kBAAkB;AACrD,SAAK,iBAAiB,KAAK;AAC3B,SAAK,oBAAoB,IAAI,YAAY,kBAAkB,kBAAkB;AAC7E,SAAK,cAAc,KAAK;AAExB,SAAK,kBAAkB,iBACnB,YAAY,kBAAkB,OAAO,eAAe,KAAK,iBAAiB;AAE9E,SAAK,YAAY;AAAA;AAAA,EAGnB,QAAc;AACZ,SAAK,KAAK,kBAAkB,kBAAkB,MAAM,IAAI;AAAA;AAAA,EAG1D,QAAQ,UAAyD;AAC/D,SAAK,SAAS,aAAa,KAAK,SAAO,kBAAkB,KAAK,MAAM,UAAU;AAE9E,+BACkC,WAC9B,KAA0D;AAC5D,WAAK,YAAY,cAAc,OAAO;AACtC,WAAK,KAAK,kBAAkB,kBAAkB,WAAU,OAAO,IAAI;AACnE,UAAI,WAAU;AACZ,kBAAS;AAAA;AAAA;AAAA;AAAA,EAKf,SAAS,OAAqB;AAC5B,SAAK,kBAAkB,SAAS;AAAA;AAAA,EAG1B,kBAAwB;AAC9B,SAAK,YAAY,aAAa,KAAK,kBAAkB;AAAA;AAAA;",
  "names": []
}
