{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/event_listeners/EventListenersView.ts"],
  "sourcesContent": ["// Copyright 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as ObjectUI from '../../ui/legacy/components/object_ui/object_ui.js';\n/* eslint-disable rulesdir/es_modules_import */\nimport objectValueStyles from '../../ui/legacy/components/object_ui/objectValue.css.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport eventListenersViewStyles from './eventListenersView.css.js';\n\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport type {FrameworkEventListenersObject} from './EventListenersUtils.js';\nimport {frameworkEventListeners} from './EventListenersUtils.js';\n\nconst UIStrings = {\n  /**\n  *@description Empty holder text content in Event Listeners View of the Event Listener Debugging pane in the Sources panel\n  */\n  noEventListeners: 'No event listeners',\n  /**\n  *@description Label for an item to remove something\n  */\n  remove: 'Remove',\n  /**\n  *@description Delete button title in Event Listeners View of the Event Listener Debugging pane in the Sources panel\n  */\n  deleteEventListener: 'Delete event listener',\n  /**\n  *@description Passive button text content in Event Listeners View of the Event Listener Debugging pane in the Sources panel\n  */\n  togglePassive: 'Toggle Passive',\n  /**\n  *@description Passive button title in Event Listeners View of the Event Listener Debugging pane in the Sources panel\n  */\n  toggleWhetherEventListenerIs: 'Toggle whether event listener is passive or blocking',\n  /**\n  *@description A context menu item to reveal a node in the DOM tree of the Elements Panel\n  */\n  revealInElementsPanel: 'Reveal in Elements panel',\n  /**\n  *@description Text in Event Listeners Widget of the Elements panel\n  */\n  passive: 'Passive',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/event_listeners/EventListenersView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class EventListenersView extends UI.Widget.VBox {\n  private changeCallback: () => void;\n  private enableDefaultTreeFocus: boolean;\n  treeOutline: UI.TreeOutline.TreeOutlineInShadow;\n  private emptyHolder: HTMLDivElement;\n  private linkifier: Components.Linkifier.Linkifier;\n  private readonly treeItemMap: Map<string, EventListenersTreeElement>;\n  constructor(changeCallback: () => void, enableDefaultTreeFocus: boolean|undefined = false) {\n    super();\n    this.changeCallback = changeCallback;\n    this.enableDefaultTreeFocus = enableDefaultTreeFocus;\n    this.treeOutline = new UI.TreeOutline.TreeOutlineInShadow();\n    this.treeOutline.hideOverflow();\n\n    this.treeOutline.setComparator(EventListenersTreeElement.comparator);\n    this.treeOutline.element.classList.add('monospace');\n    this.treeOutline.setShowSelectionOnKeyboardFocus(true);\n    this.treeOutline.setFocusable(true);\n    this.element.appendChild(this.treeOutline.element);\n    this.emptyHolder = document.createElement('div');\n    this.emptyHolder.classList.add('gray-info-message');\n    this.emptyHolder.textContent = i18nString(UIStrings.noEventListeners);\n    this.emptyHolder.tabIndex = -1;\n    this.linkifier = new Components.Linkifier.Linkifier();\n    this.treeItemMap = new Map();\n  }\n\n  focus(): void {\n    if (!this.enableDefaultTreeFocus) {\n      return;\n    }\n    if (!this.emptyHolder.parentNode) {\n      this.treeOutline.forceSelect();\n    } else {\n      this.emptyHolder.focus();\n    }\n  }\n\n  async addObjects(objects: (SDK.RemoteObject.RemoteObject|null)[]): Promise<void> {\n    this.reset();\n    await Promise.all(objects.map(obj => obj ? this.addObject(obj) : Promise.resolve()));\n    this.addEmptyHolderIfNeeded();\n    this.eventListenersArrivedForTest();\n  }\n\n  private addObject(object: SDK.RemoteObject.RemoteObject): Promise<void> {\n    let eventListeners: SDK.DOMDebuggerModel.EventListener[];\n    let frameworkEventListenersObject: (FrameworkEventListenersObject|null)|null = null;\n\n    const promises = [];\n    const domDebuggerModel = object.runtimeModel().target().model(SDK.DOMDebuggerModel.DOMDebuggerModel);\n    // TODO(kozyatinskiy): figure out how this should work for |window| when there is no DOMDebugger.\n    if (domDebuggerModel) {\n      promises.push(domDebuggerModel.eventListeners(object).then(storeEventListeners));\n    }\n    promises.push(frameworkEventListeners(object).then(storeFrameworkEventListenersObject));\n    return Promise.all(promises).then(markInternalEventListeners).then(addEventListeners.bind(this));\n\n    function storeEventListeners(result: SDK.DOMDebuggerModel.EventListener[]): void {\n      eventListeners = result;\n    }\n\n    function storeFrameworkEventListenersObject(result: FrameworkEventListenersObject|null): void {\n      frameworkEventListenersObject = result;\n    }\n\n    async function markInternalEventListeners(): Promise<void> {\n      if (!frameworkEventListenersObject) {\n        return;\n      }\n\n      if (!frameworkEventListenersObject.internalHandlers) {\n        return;\n      }\n      return frameworkEventListenersObject.internalHandlers.object()\n          .callFunctionJSON(isInternalEventListener as (this: Object) => boolean[], eventListeners.map(handlerArgument))\n          .then(setIsInternal);\n\n      function handlerArgument(listener: SDK.DOMDebuggerModel.EventListener): Protocol.Runtime.CallArgument {\n        return SDK.RemoteObject.RemoteObject.toCallArgument(listener.handler());\n      }\n\n      function isInternalEventListener(this: Function[]): boolean[] {\n        const isInternal = [];\n        const internalHandlersSet = new Set<Function>(this);\n        for (const handler of arguments) {\n          isInternal.push(internalHandlersSet.has(handler));\n        }\n        return isInternal;\n      }\n\n      function setIsInternal(isInternal: boolean[]): void {\n        for (let i = 0; i < eventListeners.length; ++i) {\n          if (isInternal[i]) {\n            eventListeners[i].markAsFramework();\n          }\n        }\n      }\n    }\n\n    function addEventListeners(this: EventListenersView): void {\n      this.addObjectEventListeners(object, eventListeners);\n      if (frameworkEventListenersObject) {\n        this.addObjectEventListeners(object, frameworkEventListenersObject.eventListeners);\n      }\n    }\n  }\n\n  private addObjectEventListeners(\n      object: SDK.RemoteObject.RemoteObject, eventListeners: SDK.DOMDebuggerModel.EventListener[]|null): void {\n    if (!eventListeners) {\n      return;\n    }\n    for (const eventListener of eventListeners) {\n      const treeItem = this.getOrCreateTreeElementForType(eventListener.type());\n      treeItem.addObjectEventListener(eventListener, object);\n    }\n  }\n\n  showFrameworkListeners(showFramework: boolean, showPassive: boolean, showBlocking: boolean): void {\n    const eventTypes = this.treeOutline.rootElement().children();\n    for (const eventType of eventTypes) {\n      let hiddenEventType = true;\n      for (const listenerElement of eventType.children()) {\n        const objectListenerElement = listenerElement as ObjectEventListenerBar;\n        const listenerOrigin = objectListenerElement.eventListener().origin();\n        let hidden = false;\n        if (listenerOrigin === SDK.DOMDebuggerModel.EventListener.Origin.FrameworkUser && !showFramework) {\n          hidden = true;\n        }\n        if (listenerOrigin === SDK.DOMDebuggerModel.EventListener.Origin.Framework && showFramework) {\n          hidden = true;\n        }\n        if (!showPassive && objectListenerElement.eventListener().passive()) {\n          hidden = true;\n        }\n        if (!showBlocking && !objectListenerElement.eventListener().passive()) {\n          hidden = true;\n        }\n        objectListenerElement.hidden = hidden;\n        hiddenEventType = hiddenEventType && hidden;\n      }\n      eventType.hidden = hiddenEventType;\n    }\n  }\n\n  private getOrCreateTreeElementForType(type: string): EventListenersTreeElement {\n    let treeItem = this.treeItemMap.get(type);\n    if (!treeItem) {\n      treeItem = new EventListenersTreeElement(type, this.linkifier, this.changeCallback);\n      this.treeItemMap.set(type, treeItem);\n      treeItem.hidden = true;\n      this.treeOutline.appendChild(treeItem);\n    }\n    this.emptyHolder.remove();\n    return treeItem;\n  }\n\n  addEmptyHolderIfNeeded(): void {\n    let allHidden = true;\n    let firstVisibleChild: UI.TreeOutline.TreeElement|null = null;\n    for (const eventType of this.treeOutline.rootElement().children()) {\n      eventType.hidden = !eventType.firstChild();\n      allHidden = allHidden && eventType.hidden;\n      if (!firstVisibleChild && !eventType.hidden) {\n        firstVisibleChild = eventType;\n      }\n    }\n    if (allHidden && !this.emptyHolder.parentNode) {\n      this.element.appendChild(this.emptyHolder);\n    }\n    if (firstVisibleChild) {\n      firstVisibleChild.select(true /* omitFocus */);\n    }\n\n    this.treeOutline.setFocusable(Boolean(firstVisibleChild));\n  }\n\n  reset(): void {\n    const eventTypes = this.treeOutline.rootElement().children();\n    for (const eventType of eventTypes) {\n      eventType.removeChildren();\n    }\n    this.linkifier.reset();\n  }\n\n  private eventListenersArrivedForTest(): void {\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.treeOutline.registerCSSFiles([eventListenersViewStyles, objectValueStyles]);\n  }\n}\n\nexport class EventListenersTreeElement extends UI.TreeOutline.TreeElement {\n  toggleOnClick: boolean;\n  private readonly linkifier: Components.Linkifier.Linkifier;\n  private readonly changeCallback: () => void;\n  constructor(type: string, linkifier: Components.Linkifier.Linkifier, changeCallback: () => void) {\n    super(type);\n    this.toggleOnClick = true;\n    this.linkifier = linkifier;\n    this.changeCallback = changeCallback;\n    UI.ARIAUtils.setAccessibleName(this.listItemElement, `${type}, event listener`);\n  }\n\n  static comparator(element1: UI.TreeOutline.TreeElement, element2: UI.TreeOutline.TreeElement): number {\n    if (element1.title === element2.title) {\n      return 0;\n    }\n    return element1.title > element2.title ? 1 : -1;\n  }\n\n  addObjectEventListener(eventListener: SDK.DOMDebuggerModel.EventListener, object: SDK.RemoteObject.RemoteObject):\n      void {\n    const treeElement = new ObjectEventListenerBar(eventListener, object, this.linkifier, this.changeCallback);\n    this.appendChild(treeElement as UI.TreeOutline.TreeElement);\n  }\n}\n\nexport class ObjectEventListenerBar extends UI.TreeOutline.TreeElement {\n  private eventListenerInternal: SDK.DOMDebuggerModel.EventListener;\n  editable: boolean;\n  private readonly changeCallback: () => void;\n  private valueTitle?: Element;\n  constructor(\n      eventListener: SDK.DOMDebuggerModel.EventListener, object: SDK.RemoteObject.RemoteObject,\n      linkifier: Components.Linkifier.Linkifier, changeCallback: () => void) {\n    super('', true);\n    this.eventListenerInternal = eventListener;\n    this.editable = false;\n    this.setTitle(object, linkifier);\n    this.changeCallback = changeCallback;\n  }\n\n  async onpopulate(): Promise<void> {\n    const properties = [];\n    const eventListener = this.eventListenerInternal;\n    const runtimeModel = eventListener.domDebuggerModel().runtimeModel();\n    properties.push(runtimeModel.createRemotePropertyFromPrimitiveValue('useCapture', eventListener.useCapture()));\n    properties.push(runtimeModel.createRemotePropertyFromPrimitiveValue('passive', eventListener.passive()));\n    properties.push(runtimeModel.createRemotePropertyFromPrimitiveValue('once', eventListener.once()));\n    if (typeof eventListener.handler() !== 'undefined') {\n      properties.push(new SDK.RemoteObject.RemoteObjectProperty('handler', eventListener.handler()));\n    }\n    ObjectUI.ObjectPropertiesSection.ObjectPropertyTreeElement.populateWithProperties(\n        this, properties, [], true, true, null);\n  }\n\n  private setTitle(object: SDK.RemoteObject.RemoteObject, linkifier: Components.Linkifier.Linkifier): void {\n    const title = this.listItemElement.createChild('span', 'event-listener-details');\n\n    const propertyValue = ObjectUI.ObjectPropertiesSection.ObjectPropertiesSection.createPropertyValue(\n        object, /* wasThrown */ false, /* showPreview */ false);\n    this.valueTitle = propertyValue.element;\n    title.appendChild(this.valueTitle);\n\n    if (this.eventListenerInternal.canRemove()) {\n      const deleteButton = title.createChild('span', 'event-listener-button');\n      deleteButton.textContent = i18nString(UIStrings.remove);\n      UI.Tooltip.Tooltip.install(deleteButton, i18nString(UIStrings.deleteEventListener));\n      deleteButton.addEventListener('click', event => {\n        this.removeListener();\n        event.consume();\n      }, false);\n      title.appendChild(deleteButton);\n    }\n\n    if (this.eventListenerInternal.isScrollBlockingType() && this.eventListenerInternal.canTogglePassive()) {\n      const passiveButton = title.createChild('span', 'event-listener-button');\n      passiveButton.textContent = i18nString(UIStrings.togglePassive);\n      UI.Tooltip.Tooltip.install(passiveButton, i18nString(UIStrings.toggleWhetherEventListenerIs));\n      passiveButton.addEventListener('click', event => {\n        this.togglePassiveListener();\n        event.consume();\n      }, false);\n      title.appendChild(passiveButton);\n    }\n\n    const subtitle = title.createChild('span', 'event-listener-tree-subtitle');\n    const linkElement =\n        linkifier.linkifyRawLocation(this.eventListenerInternal.location(), this.eventListenerInternal.sourceURL());\n    subtitle.appendChild(linkElement);\n\n    this.listItemElement.addEventListener('contextmenu', event => {\n      const menu = new UI.ContextMenu.ContextMenu(event);\n      if (event.target !== linkElement) {\n        menu.appendApplicableItems(linkElement);\n      }\n      if (object.subtype === 'node') {\n        menu.defaultSection().appendItem(\n            i18nString(UIStrings.revealInElementsPanel), () => Common.Revealer.reveal(object));\n      }\n      menu.defaultSection().appendItem(\n          i18nString(UIStrings.deleteEventListener), this.removeListener.bind(this),\n          !this.eventListenerInternal.canRemove());\n      menu.defaultSection().appendCheckboxItem(\n          i18nString(UIStrings.passive), this.togglePassiveListener.bind(this), this.eventListenerInternal.passive(),\n          !this.eventListenerInternal.canTogglePassive());\n      void menu.show();\n    });\n  }\n\n  private removeListener(): void {\n    this.removeListenerBar();\n    void this.eventListenerInternal.remove();\n  }\n\n  private togglePassiveListener(): void {\n    void this.eventListenerInternal.togglePassive().then(() => this.changeCallback());\n  }\n\n  private removeListenerBar(): void {\n    const parent = this.parent;\n    if (!parent) {\n      return;\n    }\n    parent.removeChild(this);\n    if (!parent.childCount()) {\n      parent.collapse();\n    }\n    let allHidden = true;\n    for (const child of parent.children()) {\n      if (!child.hidden) {\n        allHidden = false;\n      }\n    }\n    parent.hidden = allHidden;\n  }\n\n  eventListener(): SDK.DOMDebuggerModel.EventListener {\n    return this.eventListenerInternal;\n  }\n\n  onenter(): boolean {\n    if (this.valueTitle) {\n      (this.valueTitle as HTMLElement).click();\n      return true;\n    }\n\n    return false;\n  }\n\n  ondelete(): boolean {\n    if (this.eventListenerInternal.canRemove()) {\n      this.removeListener();\n      return true;\n    }\n\n    return false;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
