{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/performance_monitor/performance_monitor-meta.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type * as PerformanceMonitor from './performance_monitor.js';\n\nconst UIStrings = {\n  /**\n  *@description Title of the 'Performance monitor' tool in the bottom drawer\n  */\n  performanceMonitor: 'Performance monitor',\n  /**\n *@description A tag of Performance Monitor that can be searched in the command menu\n */\n  performance: 'performance',\n  /**\n *@description A tag of Performance Monitor that can be searched in the command menu\n */\n  systemMonitor: 'system monitor',\n  /**\n *@description A tag of Performance Monitor that can be searched in the command menu\n */\n  monitor: 'monitor',\n  /**\n *@description A tag of Performance Monitor that can be searched in the command menu\n */\n  activity: 'activity',\n  /**\n *@description A tag of Performance Monitor that can be searched in the command menu\n */\n  metrics: 'metrics',\n  /**\n  *@description Command for showing the 'Performance monitor' tool in the bottom drawer\n  */\n  showPerformanceMonitor: 'Show Performance monitor',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/performance_monitor/performance_monitor-meta.ts', UIStrings);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nlet loadedPerformanceMonitorModule: (typeof PerformanceMonitor|undefined);\n\nasync function loadPerformanceMonitorModule(): Promise<typeof PerformanceMonitor> {\n  if (!loadedPerformanceMonitorModule) {\n    loadedPerformanceMonitorModule = await import('./performance_monitor.js');\n  }\n  return loadedPerformanceMonitorModule;\n}\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.DRAWER_VIEW,\n  id: 'performance.monitor',\n  title: i18nLazyString(UIStrings.performanceMonitor),\n  commandPrompt: i18nLazyString(UIStrings.showPerformanceMonitor),\n  persistence: UI.ViewManager.ViewPersistence.CLOSEABLE,\n  order: 100,\n  async loadView() {\n    const PerformanceMonitor = await loadPerformanceMonitorModule();\n    return PerformanceMonitor.PerformanceMonitor.PerformanceMonitorImpl.instance();\n  },\n  tags: [\n    i18nLazyString(UIStrings.performance),\n    i18nLazyString(UIStrings.systemMonitor),\n    i18nLazyString(UIStrings.monitor),\n    i18nLazyString(UIStrings.activity),\n    i18nLazyString(UIStrings.metrics),\n  ],\n});\n"],
  "mappings": "AAIA;AACA;AAIA,MAAM,YAAY;AAAA,EAIhB,oBAAoB;AAAA,EAIpB,aAAa;AAAA,EAIb,eAAe;AAAA,EAIf,SAAS;AAAA,EAIT,UAAU;AAAA,EAIV,SAAS;AAAA,EAIT,wBAAwB;AAAA;AAG1B,MAAM,OAAO,KAAK,KAAK,kBAAkB,0DAA0D;AACnG,MAAM,iBAAiB,KAAK,KAAK,iCAAiC,KAAK,QAAW;AAElF,IAAI;AAEJ,8CAAkF;AAChF,MAAI,CAAC,gCAAgC;AACnC,qCAAiC,MAAM,OAAO;AAAA;AAEhD,SAAO;AAAA;AAGT,GAAG,YAAY,sBAAsB;AAAA,EACnC,UAAU,GAAG,YAAY,mBAAmB;AAAA,EAC5C,IAAI;AAAA,EACJ,OAAO,eAAe,UAAU;AAAA,EAChC,eAAe,eAAe,UAAU;AAAA,EACxC,aAAa,GAAG,YAAY,gBAAgB;AAAA,EAC5C,OAAO;AAAA,QACD,WAAW;AACf,UAAM,qBAAqB,MAAM;AACjC,WAAO,mBAAmB,mBAAmB,uBAAuB;AAAA;AAAA,EAEtE,MAAM;AAAA,IACJ,eAAe,UAAU;AAAA,IACzB,eAAe,UAAU;AAAA,IACzB,eAAe,UAAU;AAAA,IACzB,eAAe,UAAU;AAAA,IACzB,eAAe,UAAU;AAAA;AAAA;",
  "names": []
}
