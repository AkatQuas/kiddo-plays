{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/performance_monitor/PerformanceMonitor.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as ThemeSupport from '../../ui/legacy/theme_support/theme_support.js';\n\nimport performanceMonitorStyles from './performanceMonitor.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Aria accessible name in Performance Monitor of the Performance monitor tab\n  */\n  graphsDisplayingARealtimeViewOf: 'Graphs displaying a real-time view of performance metrics',\n  /**\n  *@description Text in Performance Monitor of the Performance monitor tab\n  */\n  paused: 'Paused',\n  /**\n  *@description Text in Performance Monitor of the Performance monitor tab\n  */\n  cpuUsage: 'CPU usage',\n  /**\n  *@description Text in Performance Monitor of the Performance monitor tab\n  */\n  jsHeapSize: 'JS heap size',\n  /**\n  *@description Text in Performance Monitor of the Performance monitor tab\n  */\n  domNodes: 'DOM Nodes',\n  /**\n  *@description Text in Performance Monitor of the Performance monitor tab\n  */\n  jsEventListeners: 'JS event listeners',\n  /**\n  *@description Text for documents, a type of resources\n  */\n  documents: 'Documents',\n  /**\n  *@description Text in Performance Monitor of the Performance monitor tab\n  */\n  documentFrames: 'Document Frames',\n  /**\n  *@description Text in Performance Monitor of the Performance monitor tab\n  */\n  layoutsSec: 'Layouts / sec',\n  /**\n  *@description Text in Performance Monitor of the Performance monitor tab\n  */\n  styleRecalcsSec: 'Style recalcs / sec',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/performance_monitor/PerformanceMonitor.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet performanceMonitorImplInstance: PerformanceMonitorImpl;\n\nexport class PerformanceMonitorImpl extends UI.Widget.HBox implements\n    SDK.TargetManager.SDKModelObserver<SDK.PerformanceMetricsModel.PerformanceMetricsModel> {\n  private metricsBuffer: {timestamp: number, metrics: Map<string, number>}[];\n  private readonly pixelsPerMs: number;\n  private pollIntervalMs: number;\n  private readonly scaleHeight: number;\n  private graphHeight: number;\n  private gridColor: string;\n  private controlPane: ControlPane;\n  private canvas: HTMLCanvasElement;\n  private animationId!: number;\n  private width!: number;\n  private height!: number;\n  private model?: SDK.PerformanceMetricsModel.PerformanceMetricsModel|null;\n  private startTimestamp?: number;\n  private pollTimer?: number;\n\n  constructor() {\n    super(true);\n\n    this.contentElement.classList.add('perfmon-pane');\n    this.metricsBuffer = [];\n    /** @const */\n    this.pixelsPerMs = 10 / 1000;\n    /** @const */\n    this.pollIntervalMs = 500;\n    /** @const */\n    this.scaleHeight = 16;\n    /** @const */\n    this.graphHeight = 90;\n    this.gridColor = ThemeSupport.ThemeSupport.instance().getComputedValue('--divider-line');\n    this.controlPane = new ControlPane(this.contentElement);\n    const chartContainer = this.contentElement.createChild('div', 'perfmon-chart-container');\n    this.canvas = chartContainer.createChild('canvas') as HTMLCanvasElement;\n    this.canvas.tabIndex = -1;\n    UI.ARIAUtils.setAccessibleName(this.canvas, i18nString(UIStrings.graphsDisplayingARealtimeViewOf));\n    this.contentElement.createChild('div', 'perfmon-chart-suspend-overlay fill').createChild('div').textContent =\n        i18nString(UIStrings.paused);\n    this.controlPane.addEventListener(Events.MetricChanged, this.recalcChartHeight, this);\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.PerformanceMetricsModel.PerformanceMetricsModel, this);\n  }\n\n  static instance(opts = {forceNew: null}): PerformanceMonitorImpl {\n    const {forceNew} = opts;\n    if (!performanceMonitorImplInstance || forceNew) {\n      performanceMonitorImplInstance = new PerformanceMonitorImpl();\n    }\n\n    return performanceMonitorImplInstance;\n  }\n\n  wasShown(): void {\n    if (!this.model) {\n      return;\n    }\n    this.registerCSSFiles([performanceMonitorStyles]);\n    this.controlPane.instantiateMetricData();\n    const themeSupport = ThemeSupport.ThemeSupport.instance();\n    themeSupport.addEventListener(ThemeSupport.ThemeChangeEvent.eventName, () => {\n      // instantiateMetricData sets the colors for the metrics, which we need\n      // to re-evaluate when the theme changes before re-drawing the canvas.\n      this.controlPane.instantiateMetricData();\n      this.draw();\n    });\n    SDK.TargetManager.TargetManager.instance().addEventListener(\n        SDK.TargetManager.Events.SuspendStateChanged, this.suspendStateChanged, this);\n    void this.model.enable();\n    this.suspendStateChanged();\n  }\n\n  willHide(): void {\n    if (!this.model) {\n      return;\n    }\n    SDK.TargetManager.TargetManager.instance().removeEventListener(\n        SDK.TargetManager.Events.SuspendStateChanged, this.suspendStateChanged, this);\n    this.stopPolling();\n    void this.model.disable();\n  }\n\n  modelAdded(model: SDK.PerformanceMetricsModel.PerformanceMetricsModel): void {\n    if (this.model) {\n      return;\n    }\n    this.model = model;\n    if (this.isShowing()) {\n      this.wasShown();\n    }\n  }\n\n  modelRemoved(model: SDK.PerformanceMetricsModel.PerformanceMetricsModel): void {\n    if (this.model !== model) {\n      return;\n    }\n    if (this.isShowing()) {\n      this.willHide();\n    }\n    this.model = null;\n  }\n\n  private suspendStateChanged(): void {\n    const suspended = SDK.TargetManager.TargetManager.instance().allTargetsSuspended();\n    if (suspended) {\n      this.stopPolling();\n    } else {\n      this.startPolling();\n    }\n    this.contentElement.classList.toggle('suspended', suspended);\n  }\n\n  private startPolling(): void {\n    this.startTimestamp = 0;\n    this.pollTimer = window.setInterval(() => this.poll(), this.pollIntervalMs);\n    this.onResize();\n    const animate = (): void => {\n      this.draw();\n      this.animationId = this.contentElement.window().requestAnimationFrame(() => {\n        animate();\n      });\n    };\n    animate();\n  }\n\n  private stopPolling(): void {\n    window.clearInterval(this.pollTimer);\n    this.contentElement.window().cancelAnimationFrame(this.animationId);\n    this.metricsBuffer = [];\n  }\n\n  private async poll(): Promise<void> {\n    if (!this.model) {\n      return;\n    }\n    const data = await this.model.requestMetrics();\n    const timestamp = data.timestamp;\n    const metrics = data.metrics;\n    this.metricsBuffer.push({timestamp, metrics: metrics});\n    const millisPerWidth = this.width / this.pixelsPerMs;\n    // Multiply by 2 as the pollInterval has some jitter and to have some extra samples if window is resized.\n    const maxCount = Math.ceil(millisPerWidth / this.pollIntervalMs * 2);\n    if (this.metricsBuffer.length > maxCount * 2)  // Multiply by 2 to have a hysteresis.\n    {\n      this.metricsBuffer.splice(0, this.metricsBuffer.length - maxCount);\n    }\n    this.controlPane.updateMetrics(metrics);\n  }\n\n  private draw(): void {\n    const ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\n    ctx.save();\n    ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n    ctx.clearRect(0, 0, this.width, this.height);\n    ctx.save();\n    ctx.translate(0, this.scaleHeight);  // Reserve space for the scale bar.\n    for (const chartInfo of this.controlPane.charts()) {\n      if (!this.controlPane.isActive(chartInfo.metrics[0].name)) {\n        continue;\n      }\n      this.drawChart(ctx, chartInfo, this.graphHeight);\n      ctx.translate(0, this.graphHeight);\n    }\n    ctx.restore();\n    this.drawHorizontalGrid(ctx);\n    ctx.restore();\n  }\n\n  private drawHorizontalGrid(ctx: CanvasRenderingContext2D): void {\n    const labelDistanceSeconds = 10;\n    const lightGray = ThemeSupport.ThemeSupport.instance().getComputedValue('--color-background-inverted-opacity-2');\n    ctx.font = '10px ' + Host.Platform.fontFamily();\n    ctx.fillStyle = ThemeSupport.ThemeSupport.instance().getComputedValue('--color-background-inverted-opacity-50');\n    const currentTime = Date.now() / 1000;\n    for (let sec = Math.ceil(currentTime);; --sec) {\n      const x = this.width - ((currentTime - sec) * 1000 - this.pollIntervalMs) * this.pixelsPerMs;\n      if (x < -50) {\n        break;\n      }\n      ctx.beginPath();\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, this.height);\n      if (sec >= 0 && sec % labelDistanceSeconds === 0) {\n        ctx.fillText(new Date(sec * 1000).toLocaleTimeString(), x + 4, 12);\n      }\n      ctx.strokeStyle = sec % labelDistanceSeconds ? lightGray : this.gridColor;\n      ctx.stroke();\n    }\n  }\n\n  private drawChart(ctx: CanvasRenderingContext2D, chartInfo: ChartInfo, height: number): void {\n    ctx.save();\n    ctx.rect(0, 0, this.width, height);\n    ctx.clip();\n    const bottomPadding = 8;\n    const extraSpace = 1.05;\n    const max = this.calcMax(chartInfo) * extraSpace;\n    const stackedChartBaseLandscape = chartInfo.stacked ? new Map() : null;\n    const paths = [];\n    for (let i = chartInfo.metrics.length - 1; i >= 0; --i) {\n      const metricInfo = chartInfo.metrics[i];\n      paths.push({\n        path: this.buildMetricPath(\n            chartInfo, metricInfo, height - bottomPadding, max, i ? stackedChartBaseLandscape : null),\n        color: metricInfo.color,\n      });\n    }\n    const backgroundColor =\n        Common.Color.Color.parse(ThemeSupport.ThemeSupport.instance().getComputedValue('--color-background'));\n\n    if (backgroundColor) {\n      for (const path of paths.reverse()) {\n        const color = path.color;\n        ctx.save();\n        const parsedColor = Common.Color.Color.parse(color);\n        if (!parsedColor) {\n          continue;\n        }\n        ctx.fillStyle = backgroundColor.blendWith(parsedColor.setAlpha(0.2)).asString(null) || '';\n        ctx.fill(path.path);\n        ctx.strokeStyle = color;\n        ctx.lineWidth = 0.5;\n        ctx.stroke(path.path);\n        ctx.restore();\n      }\n    }\n    ctx.fillStyle = ThemeSupport.ThemeSupport.instance().getComputedValue('--color-background-inverted-opacity-50');\n    ctx.font = `10px  ${Host.Platform.fontFamily()}`;\n    ctx.fillText(chartInfo.title, 8, 10);\n    this.drawVerticalGrid(ctx, height - bottomPadding, max, chartInfo);\n    ctx.restore();\n  }\n\n  private calcMax(chartInfo: ChartInfo): number {\n    if (chartInfo.max) {\n      return chartInfo.max;\n    }\n    const width = this.width;\n    const startTime = performance.now() - this.pollIntervalMs - width / this.pixelsPerMs;\n    let max: number = -Infinity;\n    for (const metricInfo of chartInfo.metrics) {\n      for (let i = this.metricsBuffer.length - 1; i >= 0; --i) {\n        const metrics = this.metricsBuffer[i];\n        const value = metrics.metrics.get(metricInfo.name);\n        if (value !== undefined) {\n          max = Math.max(max, value);\n        }\n        if (metrics.timestamp < startTime) {\n          break;\n        }\n      }\n    }\n    if (!this.metricsBuffer.length) {\n      return 10;\n    }\n\n    const base10 = Math.pow(10, Math.floor(Math.log10(max)));\n    max = Math.ceil(max / base10 / 2) * base10 * 2;\n\n    const alpha = 0.2;\n    chartInfo.currentMax = max * alpha + (chartInfo.currentMax || max) * (1 - alpha);\n    return chartInfo.currentMax;\n  }\n\n  private drawVerticalGrid(ctx: CanvasRenderingContext2D, height: number, max: number, info: ChartInfo): void {\n    let base = Math.pow(10, Math.floor(Math.log10(max)));\n    const firstDigit = Math.floor(max / base);\n    if (firstDigit !== 1 && firstDigit % 2 === 1) {\n      base *= 2;\n    }\n    let scaleValue = Math.floor(max / base) * base;\n\n    const span = max;\n    const topPadding = 18;\n    const visibleHeight = height - topPadding;\n    ctx.fillStyle = ThemeSupport.ThemeSupport.instance().getComputedValue('--color-background-inverted-opacity-50');\n    ctx.strokeStyle = this.gridColor;\n    ctx.beginPath();\n    for (let i = 0; i < 2; ++i) {\n      const y = calcY(scaleValue);\n      const labelText = MetricIndicator.formatNumber(scaleValue, info);\n      ctx.moveTo(0, y);\n      ctx.lineTo(4, y);\n      ctx.moveTo(ctx.measureText(labelText).width + 12, y);\n      ctx.lineTo(this.width, y);\n      ctx.fillText(labelText, 8, calcY(scaleValue) + 3);\n      scaleValue /= 2;\n    }\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.moveTo(0, height + 0.5);\n    ctx.lineTo(this.width, height + 0.5);\n    ctx.strokeStyle = ThemeSupport.ThemeSupport.instance().getComputedValue('--color-background-inverted-opacity-2');\n    ctx.stroke();\n    function calcY(value: number): number {\n      return Math.round(height - visibleHeight * value / span) + 0.5;\n    }\n  }\n\n  private buildMetricPath(\n      chartInfo: ChartInfo, metricInfo: MetricInfo, height: number, scaleMax: number,\n      stackedChartBaseLandscape: Map<number, number>|null): Path2D {\n    const path = new Path2D();\n    const topPadding = 18;\n    const visibleHeight = height - topPadding;\n    if (visibleHeight < 1) {\n      return path;\n    }\n    const span = scaleMax;\n    const metricName = metricInfo.name;\n    const pixelsPerMs = this.pixelsPerMs;\n    const startTime = performance.now() - this.pollIntervalMs - this.width / pixelsPerMs;\n    const smooth = chartInfo.smooth;\n\n    let x = 0;\n    let lastY = 0;\n    let lastX = 0;\n    if (this.metricsBuffer.length) {\n      x = (this.metricsBuffer[0].timestamp - startTime) * pixelsPerMs;\n      path.moveTo(x, calcY(0));\n      path.lineTo(this.width + 5, calcY(0));\n      lastY = calcY(\n          (this.metricsBuffer[this.metricsBuffer.length - 1] as {\n            metrics: Map<string, number>,\n          }).metrics.get(metricName) ||\n          0);\n      lastX = this.width + 5;\n      path.lineTo(lastX, lastY);\n    }\n    for (let i = this.metricsBuffer.length - 1; i >= 0; --i) {\n      const metrics = this.metricsBuffer[i];\n      const timestamp = metrics.timestamp;\n      let value: number = metrics.metrics.get(metricName) || 0;\n      if (stackedChartBaseLandscape) {\n        value += stackedChartBaseLandscape.get(timestamp) || 0;\n        value = Platform.NumberUtilities.clamp(value, 0, 1);\n        stackedChartBaseLandscape.set(timestamp, value);\n      }\n      const y = calcY(value);\n      x = (timestamp - startTime) * pixelsPerMs;\n      if (smooth) {\n        const midX = (lastX + x) / 2;\n        path.bezierCurveTo(midX, lastY, midX, y, x, y);\n      } else {\n        path.lineTo(x, lastY);\n        path.lineTo(x, y);\n      }\n      lastX = x;\n      lastY = y;\n      if (timestamp < startTime) {\n        break;\n      }\n    }\n    return path;\n\n    function calcY(value: number): number {\n      return Math.round(height - visibleHeight * value / span) + 0.5;\n    }\n  }\n\n  onResize(): void {\n    super.onResize();\n    this.width = this.canvas.offsetWidth;\n    this.canvas.width = Math.round(this.width * window.devicePixelRatio);\n    this.recalcChartHeight();\n  }\n\n  private recalcChartHeight(): void {\n    let height = this.scaleHeight;\n    for (const chartInfo of this.controlPane.charts()) {\n      if (this.controlPane.isActive(chartInfo.metrics[0].name)) {\n        height += this.graphHeight;\n      }\n    }\n    this.height = Math.ceil(height * window.devicePixelRatio);\n    this.canvas.height = this.height;\n    this.canvas.style.height = `${this.height / window.devicePixelRatio}px`;\n  }\n}\n\nexport const enum Format {\n  Percent = 'Percent',\n  Bytes = 'Bytes',\n}\n\nexport class ControlPane extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  element: Element;\n  private readonly enabledChartsSetting: Common.Settings.Setting<string[]>;\n  private readonly enabledCharts: Set<string>;\n\n  private chartsInfo: ChartInfo[] = [];\n  private indicators: Map<string, MetricIndicator> = new Map();\n\n  constructor(parent: Element) {\n    super();\n    this.element = parent.createChild('div', 'perfmon-control-pane');\n\n    this.enabledChartsSetting = Common.Settings.Settings.instance().createSetting(\n        'perfmonActiveIndicators2', ['TaskDuration', 'JSHeapTotalSize', 'Nodes']);\n    this.enabledCharts = new Set(this.enabledChartsSetting.get());\n  }\n\n  instantiateMetricData(): void {\n    const defaults = {\n      color: undefined,\n      format: undefined,\n      currentMax: undefined,\n      max: undefined,\n      smooth: undefined,\n      stacked: undefined,\n    };\n\n    // Get ThemeSupport instance here just to make things a little less verbose.\n    const themeSupport = ThemeSupport.ThemeSupport.instance();\n    this.chartsInfo = [\n      {\n        ...defaults,\n        title: i18nString(UIStrings.cpuUsage),\n        metrics: [\n          {\n            name: 'TaskDuration',\n            color: themeSupport.getComputedValue('--override-color-perf-monitor-cpu-task-duration', this.element),\n          },\n          {\n            name: 'ScriptDuration',\n            color: themeSupport.getComputedValue('--override-color-perf-monitor-cpu-script-duration', this.element),\n          },\n          {\n            name: 'LayoutDuration',\n            color: themeSupport.getComputedValue('--override-color-perf-monitor-cpu-layout-duration', this.element),\n          },\n          {\n            name: 'RecalcStyleDuration',\n            color:\n                themeSupport.getComputedValue('--override-color-perf-monitor-cpu-recalc-style-duration', this.element),\n          },\n        ],\n        format: Format.Percent,\n        smooth: true,\n        stacked: true,\n        color: themeSupport.getComputedValue('--override-color-perf-monitor-cpu', this.element),\n        max: 1,\n        currentMax: undefined,\n      },\n      {\n        ...defaults,\n        title: i18nString(UIStrings.jsHeapSize),\n        metrics: [\n          {\n            name: 'JSHeapTotalSize',\n            color: themeSupport.getComputedValue('--override-color-perf-monitor-jsheap-total-size', this.element),\n          },\n          {\n            name: 'JSHeapUsedSize',\n            color: themeSupport.getComputedValue('--override-color-perf-monitor-jsheap-used-size', this.element),\n          },\n        ],\n        format: Format.Bytes,\n        color: themeSupport.getComputedValue('--override-color-perf-monitor-jsheap'),\n      },\n      {\n        ...defaults,\n        title: i18nString(UIStrings.domNodes),\n        metrics: [\n          {\n            name: 'Nodes',\n            color: themeSupport.getComputedValue('--override-color-perf-monitor-dom-nodes', this.element),\n          },\n        ],\n      },\n      {\n        ...defaults,\n        title: i18nString(UIStrings.jsEventListeners),\n        metrics: [\n          {\n            name: 'JSEventListeners',\n            color: themeSupport.getComputedValue('--override-color-perf-monitor-js-event-listeners', this.element),\n          },\n        ],\n      },\n      {\n        ...defaults,\n        title: i18nString(UIStrings.documents),\n        metrics: [{\n          name: 'Documents',\n          color: themeSupport.getComputedValue('--override-color-perf-monitor-documents', this.element),\n        }],\n      },\n      {\n        ...defaults,\n        title: i18nString(UIStrings.documentFrames),\n        metrics: [{\n          name: 'Frames',\n          color: themeSupport.getComputedValue('--override-color-perf-monitor-document-frames', this.element),\n        }],\n      },\n      {\n        ...defaults,\n        title: i18nString(UIStrings.layoutsSec),\n        metrics: [{\n          name: 'LayoutCount',\n          color: themeSupport.getComputedValue('--override-color-perf-monitor-layout-count', this.element),\n        }],\n      },\n      {\n        ...defaults,\n        title: i18nString(UIStrings.styleRecalcsSec),\n        metrics: [\n          {\n            name: 'RecalcStyleCount',\n            color: themeSupport.getComputedValue('--override-color-perf-monitor-recalc-style-count', this.element),\n          },\n        ],\n      },\n    ];\n\n    // Clear any existing child elements.\n    this.element.removeChildren();\n\n    this.indicators = new Map();\n    for (const chartInfo of this.chartsInfo) {\n      const chartName = chartInfo.metrics[0].name;\n      const active = this.enabledCharts.has(chartName);\n      const indicator = new MetricIndicator(this.element, chartInfo, active, this.onToggle.bind(this, chartName));\n      this.indicators.set(chartName, indicator);\n    }\n  }\n\n  private onToggle(chartName: string, active: boolean): void {\n    if (active) {\n      this.enabledCharts.add(chartName);\n    } else {\n      this.enabledCharts.delete(chartName);\n    }\n    this.enabledChartsSetting.set(Array.from(this.enabledCharts));\n    this.dispatchEventToListeners(Events.MetricChanged);\n  }\n\n  charts(): ChartInfo[] {\n    return this.chartsInfo;\n  }\n\n  isActive(metricName: string): boolean {\n    return this.enabledCharts.has(metricName);\n  }\n\n  updateMetrics(metrics: Map<string, number>): void {\n    for (const name of this.indicators.keys()) {\n      const metric = metrics.get(name);\n      if (metric !== undefined) {\n        const indicator = this.indicators.get(name);\n        if (indicator) {\n          indicator.setValue(metric);\n        }\n      }\n    }\n  }\n}\n\nconst enum Events {\n  MetricChanged = 'MetricChanged',\n}\n\ntype EventTypes = {\n  [Events.MetricChanged]: void,\n};\n\nlet numberFormatter: Intl.NumberFormat;\nlet percentFormatter: Intl.NumberFormat;\n\nexport class MetricIndicator {\n  private info: ChartInfo;\n  private active: boolean;\n  private readonly onToggle: (arg0: boolean) => void;\n  element: HTMLElement;\n  private readonly swatchElement: UI.Icon.Icon;\n  private valueElement: HTMLElement;\n\n  constructor(parent: Element, info: ChartInfo, active: boolean, onToggle: (arg0: boolean) => void) {\n    const color = info.color || info.metrics[0].color;\n    this.info = info;\n    this.active = active;\n    this.onToggle = onToggle;\n    this.element = parent.createChild('div', 'perfmon-indicator') as HTMLElement;\n    this.swatchElement = UI.Icon.Icon.create('smallicon-checkmark-square', 'perfmon-indicator-swatch');\n    this.swatchElement.style.backgroundColor = color;\n    this.element.appendChild(this.swatchElement);\n    this.element.createChild('div', 'perfmon-indicator-title').textContent = info.title;\n    this.valueElement = this.element.createChild('div', 'perfmon-indicator-value') as HTMLElement;\n    this.valueElement.style.color = color;\n    this.element.addEventListener('click', () => this.toggleIndicator());\n    this.element.addEventListener('keypress', event => this.handleKeypress(event));\n    this.element.classList.toggle('active', active);\n    UI.ARIAUtils.markAsCheckbox(this.element);\n    UI.ARIAUtils.setChecked(this.element, this.active);\n    this.element.tabIndex = 0;\n  }\n\n  static formatNumber(value: number, info: ChartInfo): string {\n    if (!numberFormatter) {\n      numberFormatter = new Intl.NumberFormat('en-US', {maximumFractionDigits: 1});\n      percentFormatter = new Intl.NumberFormat('en-US', {maximumFractionDigits: 1, style: 'percent'});\n    }\n    switch (info.format) {\n      case Format.Percent:\n        return percentFormatter.format(value);\n      case Format.Bytes:\n        return Platform.NumberUtilities.bytesToString(value);\n      default:\n        return numberFormatter.format(value);\n    }\n  }\n\n  setValue(value: number): void {\n    this.valueElement.textContent = MetricIndicator.formatNumber(value, this.info);\n  }\n\n  private toggleIndicator(): void {\n    this.active = !this.active;\n    this.element.classList.toggle('active', this.active);\n    UI.ARIAUtils.setChecked(this.element, this.active);\n    this.onToggle(this.active);\n  }\n\n  private handleKeypress(event: Event): void {\n    const keyboardEvent = event as KeyboardEvent;\n    if (keyboardEvent.key === ' ' || keyboardEvent.key === 'Enter') {\n      this.toggleIndicator();\n    }\n  }\n}\n\nexport const format = new Intl.NumberFormat('en-US', {maximumFractionDigits: 1});\nexport interface MetricInfo {\n  name: string;\n  color: string;\n}\nexport interface ChartInfo {\n  title: string;\n  metrics: {name: string, color: string}[];\n  max?: number;\n  currentMax?: number;\n  format?: Format;\n  smooth?: boolean;\n  color?: string;\n  stacked?: boolean;\n}\n"],
  "mappings": "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",
  "names": []
}
