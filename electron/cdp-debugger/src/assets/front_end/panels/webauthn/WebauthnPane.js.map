{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/webauthn/WebauthnPane.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport webauthnPaneStyles from './webauthnPane.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Label for button that allows user to download the private key related to a credential.\n  */\n  export: 'Export',\n  /**\n  *@description Label for an item to remove something\n  */\n  remove: 'Remove',\n  /**\n  *@description Label for empty credentials table.\n  *@example {navigator.credentials.create()} PH1\n  */\n  noCredentialsTryCallingSFromYour: 'No credentials. Try calling {PH1} from your website.',\n  /**\n  *@description Label for checkbox to toggle the virtual authenticator environment allowing user to interact with software-based virtual authenticators.\n  */\n  enableVirtualAuthenticator: 'Enable virtual authenticator environment',\n  /**\n  *@description Label for ID field for credentials.\n  */\n  id: 'ID',\n  /**\n  *@description Label for field that describes whether a credential is a resident credential.\n  */\n  isResident: 'Is Resident',\n  /**\n  *@description Label for credential field that represents the Relying Party ID that the credential is scoped to.\n  */\n  rpId: 'RP ID',\n  /**\n  *@description Label for a column in a table. A field/unique ID that represents the user a credential is mapped to.\n  */\n  userHandle: 'User Handle',\n  /**\n  *@description Label for signature counter field for credentials which represents the number of successful assertions.\n  * See https://w3c.github.io/webauthn/#signature-counter.\n  */\n  signCount: 'Signature Count',\n  /**\n  *@description Label for column with actions for credentials.\n  */\n  actions: 'Actions',\n  /**\n  *@description Title for the table that holds the credentials that a authenticator has registered.\n  */\n  credentials: 'Credentials',\n  /**\n  *@description Label for the learn more link that is shown before the virtual environment is enabled.\n  */\n  useWebauthnForPhishingresistant: 'Use WebAuthn for phishing-resistant authentication',\n  /**\n  *@description Text that is usually a hyperlink to more documentation\n  */\n  learnMore: 'Learn more',\n  /**\n  *@description Title for section of interface that allows user to add a new virtual authenticator.\n  */\n  newAuthenticator: 'New authenticator',\n  /**\n  *@description Text for security or network protocol\n  */\n  protocol: 'Protocol',\n  /**\n  *@description Label for input to select which transport option to use on virtual authenticators, e.g. USB or Bluetooth.\n  */\n  transport: 'Transport',\n  /**\n  *@description Label for checkbox that toggles resident key support on virtual authenticators.\n  */\n  supportsResidentKeys: 'Supports resident keys',\n  /**\n  *@description Label for checkbox that toggles large blob support on virtual authenticators. Large blobs are opaque data associated\n  * with a WebAuthn credential that a website can store, like an SSH certificate or a symmetric encryption key.\n  * See https://w3c.github.io/webauthn/#sctn-large-blob-extension\n  */\n  supportsLargeBlob: 'Supports large blob',\n  /**\n  *@description Text to add something\n  */\n  add: 'Add',\n  /**\n  *@description Label for button to add a new virtual authenticator.\n  */\n  addAuthenticator: 'Add authenticator',\n  /**\n  *@description Label for radio button that toggles whether an authenticator is active.\n  */\n  active: 'Active',\n  /**\n  *@description Title for button that enables user to customize name of authenticator.\n  */\n  editName: 'Edit name',\n  /**\n  *@description Title for button that enables user to save name of authenticator after editing it.\n  */\n  saveName: 'Save name',\n  /**\n  *@description Title for a user-added virtual authenticator which is uniquely identified with its AUTHENTICATORID.\n  *@example {8c7873be-0b13-4996-a794-1521331bbd96} PH1\n  */\n  authenticatorS: 'Authenticator {PH1}',\n  /**\n  *@description Name for generated file which user can download. A private key is a secret code which enables encoding and decoding of a credential. .pem is the file extension.\n  */\n  privateKeypem: 'Private key.pem',\n  /**\n  *@description Label for field that holds an authenticator's universally unique identifier (UUID).\n  */\n  uuid: 'UUID',\n  /**\n  *@description Label for checkbox that toggles user verification support on virtual authenticators.\n  */\n  supportsUserVerification: 'Supports user verification',\n  /**\n  *@description Text in Timeline indicating that input has happened recently\n  */\n  yes: 'Yes',\n  /**\n  *@description Text in Timeline indicating that input has not happened recently\n  */\n  no: 'No',\n  /**\n  *@description Title of radio button that sets an authenticator as active.\n  *@example {Authenticator ABCDEF} PH1\n  */\n  setSAsTheActiveAuthenticator: 'Set {PH1} as the active authenticator',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/webauthn/WebauthnPane.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst TIMEOUT = 1000;\n\nconst enum Events {\n  ExportCredential = 'ExportCredential',\n  RemoveCredential = 'RemoveCredential',\n}\n\ntype EventTypes = {\n  [Events.ExportCredential]: Protocol.WebAuthn.Credential,\n  [Events.RemoveCredential]: Protocol.WebAuthn.Credential,\n};\n\nclass DataGridNode extends DataGrid.DataGrid.DataGridNode<DataGridNode> {\n  constructor(private readonly credential: Protocol.WebAuthn.Credential) {\n    super(credential);\n  }\n\n  nodeSelfHeight(): number {\n    return 24;\n  }\n\n  createCell(columnId: string): HTMLElement {\n    const cell = super.createCell(columnId);\n    UI.Tooltip.Tooltip.install(cell, cell.textContent || '');\n\n    if (columnId !== 'actions') {\n      return cell;\n    }\n\n    const exportButton = UI.UIUtils.createTextButton(i18nString(UIStrings.export), (): void => {\n      if (this.dataGrid) {\n        (this.dataGrid as WebauthnDataGrid).dispatchEventToListeners(Events.ExportCredential, this.credential);\n      }\n    });\n\n    cell.appendChild(exportButton);\n\n    const removeButton = UI.UIUtils.createTextButton(i18nString(UIStrings.remove), (): void => {\n      if (this.dataGrid) {\n        (this.dataGrid as WebauthnDataGrid).dispatchEventToListeners(Events.RemoveCredential, this.credential);\n      }\n    });\n\n    cell.appendChild(removeButton);\n\n    return cell;\n  }\n}\n\nclass WebauthnDataGridBase extends DataGrid.DataGrid.DataGridImpl<DataGridNode> {}\nclass WebauthnDataGrid extends Common.ObjectWrapper.eventMixin<EventTypes, typeof WebauthnDataGridBase>(\n    WebauthnDataGridBase) {}\n\nclass EmptyDataGridNode extends DataGrid.DataGrid.DataGridNode<DataGridNode> {\n  createCells(element: Element): void {\n    element.removeChildren();\n    const td = (this.createTDWithClass(DataGrid.DataGrid.Align.Center) as HTMLTableCellElement);\n    if (this.dataGrid) {\n      td.colSpan = this.dataGrid.visibleColumnsArray.length;\n    }\n\n    const code = document.createElement('span', {is: 'source-code'});\n    code.textContent = 'navigator.credentials.create()';\n    code.classList.add('code');\n    const message = i18n.i18n.getFormatLocalizedString(str_, UIStrings.noCredentialsTryCallingSFromYour, {PH1: code});\n\n    td.appendChild(message);\n    element.appendChild(td);\n  }\n}\n\ntype AvailableAuthenticatorOptions = Protocol.WebAuthn.VirtualAuthenticatorOptions&{\n  active: boolean,\n  authenticatorId: Protocol.WebAuthn.AuthenticatorId,\n};\n\nlet webauthnPaneImplInstance: WebauthnPaneImpl;\n\n// We extrapolate this variable as otherwise git detects a private key, even though we\n// perform string manipulation. If we extract the name, then the regex doesn't match\n// and we can upload as expected.\nconst PRIVATE_NAME = 'PRIVATE';\nconst PRIVATE_KEY_HEADER = `-----BEGIN ${PRIVATE_NAME} KEY-----\n`;\nconst PRIVATE_KEY_FOOTER = `-----END ${PRIVATE_NAME} KEY-----`;\n\nconst PROTOCOL_AUTHENTICATOR_VALUES: Protocol.EnumerableEnum<typeof Protocol.WebAuthn.AuthenticatorProtocol> = {\n  Ctap2: Protocol.WebAuthn.AuthenticatorProtocol.Ctap2,\n  U2f: Protocol.WebAuthn.AuthenticatorProtocol.U2f,\n};\n\nexport class WebauthnPaneImpl extends UI.Widget.VBox implements\n    SDK.TargetManager.SDKModelObserver<SDK.WebAuthnModel.WebAuthnModel> {\n  #activeAuthId: Protocol.WebAuthn.AuthenticatorId|null = null;\n  #hasBeenEnabled = false;\n  readonly #dataGrids = new Map<Protocol.WebAuthn.AuthenticatorId, DataGrid.DataGrid.DataGridImpl<DataGridNode>>();\n  #enableCheckbox!: UI.Toolbar.ToolbarCheckbox;\n  readonly #availableAuthenticatorSetting: Common.Settings.Setting<AvailableAuthenticatorOptions[]>;\n  #model?: SDK.WebAuthnModel.WebAuthnModel;\n  #authenticatorsView: HTMLElement;\n  #topToolbarContainer: HTMLElement|undefined;\n  #topToolbar: UI.Toolbar.Toolbar|undefined;\n  #learnMoreView: HTMLElement|undefined;\n  #newAuthenticatorSection: HTMLElement|undefined;\n  #newAuthenticatorForm: HTMLElement|undefined;\n  #protocolSelect: HTMLSelectElement|undefined;\n  #transportSelect: HTMLSelectElement|undefined;\n  #residentKeyCheckboxLabel: UI.UIUtils.CheckboxLabel|undefined;\n  residentKeyCheckbox: HTMLInputElement|undefined;\n  #userVerificationCheckboxLabel: UI.UIUtils.CheckboxLabel|undefined;\n  #userVerificationCheckbox: HTMLInputElement|undefined;\n  #largeBlobCheckboxLabel: UI.UIUtils.CheckboxLabel|undefined;\n  largeBlobCheckbox: HTMLInputElement|undefined;\n  addAuthenticatorButton: HTMLButtonElement|undefined;\n  #isEnabling?: Promise<void>;\n\n  constructor() {\n    super(true);\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.WebAuthnModel.WebAuthnModel, this);\n\n    this.contentElement.classList.add('webauthn-pane');\n\n    this.#availableAuthenticatorSetting =\n        Common.Settings.Settings.instance().createSetting<AvailableAuthenticatorOptions[]>(\n            'webauthnAuthenticators', []);\n\n    this.#createToolbar();\n    this.#authenticatorsView = this.contentElement.createChild('div', 'authenticators-view');\n    this.#createNewAuthenticatorSection();\n    this.#updateVisibility(false);\n  }\n\n  static instance(opts = {forceNew: null}): WebauthnPaneImpl {\n    const {forceNew} = opts;\n    if (!webauthnPaneImplInstance || forceNew) {\n      webauthnPaneImplInstance = new WebauthnPaneImpl();\n    }\n\n    return webauthnPaneImplInstance;\n  }\n\n  modelAdded(model: SDK.WebAuthnModel.WebAuthnModel): void {\n    if (model.target() === SDK.TargetManager.TargetManager.instance().mainTarget()) {\n      this.#model = model;\n    }\n  }\n\n  modelRemoved(model: SDK.WebAuthnModel.WebAuthnModel): void {\n    if (model.target() === SDK.TargetManager.TargetManager.instance().mainTarget()) {\n      this.#model = undefined;\n    }\n  }\n\n  async #loadInitialAuthenticators(): Promise<void> {\n    let activeAuthenticatorId: Protocol.WebAuthn.AuthenticatorId|null = null;\n    const availableAuthenticators = this.#availableAuthenticatorSetting.get();\n    for (const options of availableAuthenticators) {\n      if (!this.#model) {\n        continue;\n      }\n\n      const authenticatorId = await this.#model.addAuthenticator(options);\n      void this.#addAuthenticatorSection(authenticatorId, options);\n      // Update the authenticatorIds in the options.\n      options.authenticatorId = authenticatorId;\n      if (options.active) {\n        activeAuthenticatorId = authenticatorId;\n      }\n    }\n\n    // Update the settings to reflect the new authenticatorIds.\n    this.#availableAuthenticatorSetting.set(availableAuthenticators);\n    if (activeAuthenticatorId) {\n      void this.#setActiveAuthenticator(activeAuthenticatorId);\n    }\n  }\n\n  async ownerViewDisposed(): Promise<void> {\n    if (this.#enableCheckbox) {\n      this.#enableCheckbox.setChecked(false);\n    }\n    await this.#setVirtualAuthEnvEnabled(false);\n  }\n\n  #createToolbar(): void {\n    this.#topToolbarContainer = this.contentElement.createChild('div', 'webauthn-toolbar-container');\n    this.#topToolbar = new UI.Toolbar.Toolbar('webauthn-toolbar', this.#topToolbarContainer);\n    const enableCheckboxTitle = i18nString(UIStrings.enableVirtualAuthenticator);\n    this.#enableCheckbox =\n        new UI.Toolbar.ToolbarCheckbox(enableCheckboxTitle, enableCheckboxTitle, this.#handleCheckboxToggle.bind(this));\n    this.#topToolbar.appendToolbarItem(this.#enableCheckbox);\n  }\n\n  #createCredentialsDataGrid(authenticatorId: Protocol.WebAuthn.AuthenticatorId):\n      DataGrid.DataGrid.DataGridImpl<DataGridNode> {\n    const columns = ([\n      {\n        id: 'credentialId',\n        title: i18nString(UIStrings.id),\n        longText: true,\n        weight: 24,\n      },\n      {\n        id: 'isResidentCredential',\n        title: i18nString(UIStrings.isResident),\n        dataType: DataGrid.DataGrid.DataType.Boolean,\n        weight: 10,\n      },\n      {\n        id: 'rpId',\n        title: i18nString(UIStrings.rpId),\n      },\n      {\n        id: 'userHandle',\n        title: i18nString(UIStrings.userHandle),\n      },\n      {\n        id: 'signCount',\n        title: i18nString(UIStrings.signCount),\n      },\n      {id: 'actions', title: i18nString(UIStrings.actions)},\n    ] as DataGrid.DataGrid.ColumnDescriptor[]);\n\n    const dataGridConfig = {\n      displayName: i18nString(UIStrings.credentials),\n      columns,\n      editCallback: undefined,\n      deleteCallback: undefined,\n      refreshCallback: undefined,\n    };\n    const dataGrid = new WebauthnDataGrid(dataGridConfig);\n    dataGrid.renderInline();\n    dataGrid.setStriped(true);\n    dataGrid.addEventListener(Events.ExportCredential, this.#handleExportCredential, this);\n    dataGrid.addEventListener(Events.RemoveCredential, this.#handleRemoveCredential.bind(this, authenticatorId));\n\n    this.#dataGrids.set(authenticatorId, dataGrid);\n\n    return dataGrid;\n  }\n\n  #handleExportCredential({data: credential}: Common.EventTarget.EventTargetEvent<Protocol.WebAuthn.Credential>): void {\n    this.#exportCredential(credential);\n  }\n\n  #handleRemoveCredential(authenticatorId: Protocol.WebAuthn.AuthenticatorId, {\n    data: credential,\n  }: Common.EventTarget.EventTargetEvent<Protocol.WebAuthn.Credential>): void {\n    void this.#removeCredential(authenticatorId, credential.credentialId);\n  }\n\n  async #updateCredentials(authenticatorId: Protocol.WebAuthn.AuthenticatorId): Promise<void> {\n    const dataGrid = this.#dataGrids.get(authenticatorId);\n    if (!dataGrid) {\n      return;\n    }\n\n    if (this.#model) {\n      const credentials = await this.#model.getCredentials(authenticatorId);\n\n      dataGrid.rootNode().removeChildren();\n      for (const credential of credentials) {\n        const node = new DataGridNode(credential);\n        dataGrid.rootNode().appendChild(node);\n      }\n\n      this.#maybeAddEmptyNode(dataGrid);\n    }\n\n    // TODO(crbug.com/1112528): Add back-end events for credential creation and removal to avoid polling.\n    window.setTimeout(this.#updateCredentials.bind(this, authenticatorId), TIMEOUT);\n  }\n\n  #maybeAddEmptyNode(dataGrid: DataGrid.DataGrid.DataGridImpl<DataGridNode>): void {\n    if (dataGrid.rootNode().children.length) {\n      return;\n    }\n\n    const node = new EmptyDataGridNode();\n    dataGrid.rootNode().appendChild(node);\n  }\n\n  async #setVirtualAuthEnvEnabled(enable: boolean): Promise<void> {\n    await this.#isEnabling;\n    this.#isEnabling = new Promise<void>(async (resolve: (value: void) => void) => {\n      if (enable && !this.#hasBeenEnabled) {\n        // Ensures metric is only tracked once per session.\n        Host.userMetrics.actionTaken(Host.UserMetrics.Action.VirtualAuthenticatorEnvironmentEnabled);\n        this.#hasBeenEnabled = true;\n      }\n      if (this.#model) {\n        await this.#model.setVirtualAuthEnvEnabled(enable);\n      }\n\n      if (enable) {\n        await this.#loadInitialAuthenticators();\n      } else {\n        this.#removeAuthenticatorSections();\n      }\n\n      this.#updateVisibility(enable);\n      this.#isEnabling = undefined;\n      resolve();\n    });\n  }\n\n  #updateVisibility(enabled: boolean): void {\n    this.contentElement.classList.toggle('enabled', enabled);\n  }\n\n  #removeAuthenticatorSections(): void {\n    this.#authenticatorsView.innerHTML = '';\n    for (const dataGrid of this.#dataGrids.values()) {\n      dataGrid.asWidget().detach();\n    }\n    this.#dataGrids.clear();\n  }\n\n  #handleCheckboxToggle(e: MouseEvent): void {\n    void this.#setVirtualAuthEnvEnabled((e.target as HTMLInputElement).checked);\n  }\n\n  #updateEnabledTransportOptions(enabledOptions: Protocol.WebAuthn.AuthenticatorTransport[]): void {\n    if (!this.#transportSelect) {\n      return;\n    }\n\n    const prevValue = this.#transportSelect.value;\n    this.#transportSelect.removeChildren();\n\n    for (const option of enabledOptions) {\n      this.#transportSelect.appendChild(new Option(option, option));\n    }\n\n    // Make sure the currently selected value stays the same.\n    this.#transportSelect.value = prevValue;\n    // If the new set does not include the previous value.\n    if (!this.#transportSelect.value) {\n      // Select the first available value.\n      this.#transportSelect.selectedIndex = 0;\n    }\n  }\n\n  #updateNewAuthenticatorSectionOptions(): void {\n    if (!this.#protocolSelect || !this.residentKeyCheckbox || !this.#userVerificationCheckbox ||\n        !this.largeBlobCheckbox) {\n      return;\n    }\n\n    if (this.#protocolSelect.value === Protocol.WebAuthn.AuthenticatorProtocol.Ctap2) {\n      this.residentKeyCheckbox.disabled = false;\n      this.#userVerificationCheckbox.disabled = false;\n      this.largeBlobCheckbox.disabled = !this.residentKeyCheckbox.checked;\n      if (this.largeBlobCheckbox.disabled) {\n        this.largeBlobCheckbox.checked = false;\n      }\n      this.#updateEnabledTransportOptions([\n        Protocol.WebAuthn.AuthenticatorTransport.Usb,\n        Protocol.WebAuthn.AuthenticatorTransport.Ble,\n        Protocol.WebAuthn.AuthenticatorTransport.Nfc,\n        // TODO (crbug.com/1034663): Toggle cable as option depending on if cablev2 flag is on.\n        // Protocol.WebAuthn.AuthenticatorTransport.Cable,\n        Protocol.WebAuthn.AuthenticatorTransport.Internal,\n      ]);\n    } else {\n      this.residentKeyCheckbox.checked = false;\n      this.residentKeyCheckbox.disabled = true;\n      this.#userVerificationCheckbox.checked = false;\n      this.#userVerificationCheckbox.disabled = true;\n      this.largeBlobCheckbox.checked = false;\n      this.largeBlobCheckbox.disabled = true;\n      this.#updateEnabledTransportOptions([\n        Protocol.WebAuthn.AuthenticatorTransport.Usb,\n        Protocol.WebAuthn.AuthenticatorTransport.Ble,\n        Protocol.WebAuthn.AuthenticatorTransport.Nfc,\n      ]);\n    }\n  }\n\n  #createNewAuthenticatorSection(): void {\n    this.#learnMoreView = this.contentElement.createChild('div', 'learn-more');\n    this.#learnMoreView.appendChild(UI.Fragment.html`\n  <div>\n  ${i18nString(UIStrings.useWebauthnForPhishingresistant)}<br /><br />\n  ${\n        UI.XLink.XLink.create(\n            'https://developers.google.com/web/updates/2018/05/webauthn', i18nString(UIStrings.learnMore))}\n  </div>\n  `);\n\n    this.#newAuthenticatorSection = this.contentElement.createChild('div', 'new-authenticator-container');\n    const newAuthenticatorTitle =\n        UI.UIUtils.createLabel(i18nString(UIStrings.newAuthenticator), 'new-authenticator-title');\n    this.#newAuthenticatorSection.appendChild(newAuthenticatorTitle);\n    this.#newAuthenticatorForm = this.#newAuthenticatorSection.createChild('div', 'new-authenticator-form');\n\n    const protocolGroup = this.#newAuthenticatorForm.createChild('div', 'authenticator-option');\n    const transportGroup = this.#newAuthenticatorForm.createChild('div', 'authenticator-option');\n    const residentKeyGroup = this.#newAuthenticatorForm.createChild('div', 'authenticator-option');\n    const userVerificationGroup = this.#newAuthenticatorForm.createChild('div', 'authenticator-option');\n    const largeBlobGroup = this.#newAuthenticatorForm.createChild('div', 'authenticator-option');\n    const addButtonGroup = this.#newAuthenticatorForm.createChild('div', 'authenticator-option');\n\n    const protocolSelectTitle = UI.UIUtils.createLabel(i18nString(UIStrings.protocol), 'authenticator-option-label');\n    protocolGroup.appendChild(protocolSelectTitle);\n    this.#protocolSelect = (protocolGroup.createChild('select', 'chrome-select') as HTMLSelectElement);\n    UI.ARIAUtils.bindLabelToControl(protocolSelectTitle, (this.#protocolSelect as Element));\n    Object.values(PROTOCOL_AUTHENTICATOR_VALUES)\n        .sort()\n        .forEach((option: Protocol.WebAuthn.AuthenticatorProtocol): void => {\n          if (this.#protocolSelect) {\n            this.#protocolSelect.appendChild(new Option(option, option));\n          }\n        });\n\n    if (this.#protocolSelect) {\n      this.#protocolSelect.value = Protocol.WebAuthn.AuthenticatorProtocol.Ctap2;\n    }\n\n    const transportSelectTitle = UI.UIUtils.createLabel(i18nString(UIStrings.transport), 'authenticator-option-label');\n    transportGroup.appendChild(transportSelectTitle);\n    this.#transportSelect = (transportGroup.createChild('select', 'chrome-select') as HTMLSelectElement);\n    UI.ARIAUtils.bindLabelToControl(transportSelectTitle, (this.#transportSelect as Element));\n    // transportSelect will be populated in updateNewAuthenticatorSectionOptions.\n\n    this.#residentKeyCheckboxLabel = UI.UIUtils.CheckboxLabel.create(i18nString(UIStrings.supportsResidentKeys), false);\n    this.#residentKeyCheckboxLabel.textElement.classList.add('authenticator-option-label');\n    residentKeyGroup.appendChild(this.#residentKeyCheckboxLabel.textElement);\n    this.residentKeyCheckbox = this.#residentKeyCheckboxLabel.checkboxElement;\n    this.residentKeyCheckbox.checked = false;\n    this.residentKeyCheckbox.classList.add('authenticator-option-checkbox');\n    residentKeyGroup.appendChild(this.#residentKeyCheckboxLabel);\n\n    this.#userVerificationCheckboxLabel = UI.UIUtils.CheckboxLabel.create('Supports user verification', false);\n    this.#userVerificationCheckboxLabel.textElement.classList.add('authenticator-option-label');\n    userVerificationGroup.appendChild(this.#userVerificationCheckboxLabel.textElement);\n    this.#userVerificationCheckbox = this.#userVerificationCheckboxLabel.checkboxElement;\n    this.#userVerificationCheckbox.checked = false;\n    this.#userVerificationCheckbox.classList.add('authenticator-option-checkbox');\n    userVerificationGroup.appendChild(this.#userVerificationCheckboxLabel);\n\n    this.#largeBlobCheckboxLabel = UI.UIUtils.CheckboxLabel.create(i18nString(UIStrings.supportsLargeBlob), false);\n    this.#largeBlobCheckboxLabel.textElement.classList.add('authenticator-option-label');\n    largeBlobGroup.appendChild(this.#largeBlobCheckboxLabel.textElement);\n    this.largeBlobCheckbox = this.#largeBlobCheckboxLabel.checkboxElement;\n    this.largeBlobCheckbox.checked = false;\n    this.largeBlobCheckbox.classList.add('authenticator-option-checkbox');\n    this.largeBlobCheckbox.name = 'large-blob-checkbox';\n    largeBlobGroup.appendChild(this.#largeBlobCheckboxLabel);\n\n    this.addAuthenticatorButton =\n        UI.UIUtils.createTextButton(i18nString(UIStrings.add), this.#handleAddAuthenticatorButton.bind(this), '');\n    addButtonGroup.createChild('div', 'authenticator-option-label');\n    addButtonGroup.appendChild(this.addAuthenticatorButton);\n    const addAuthenticatorTitle = UI.UIUtils.createLabel(i18nString(UIStrings.addAuthenticator), '');\n    UI.ARIAUtils.bindLabelToControl(addAuthenticatorTitle, this.addAuthenticatorButton);\n\n    this.#updateNewAuthenticatorSectionOptions();\n    if (this.#protocolSelect) {\n      this.#protocolSelect.addEventListener('change', this.#updateNewAuthenticatorSectionOptions.bind(this));\n    }\n    if (this.residentKeyCheckbox) {\n      this.residentKeyCheckbox.addEventListener('change', this.#updateNewAuthenticatorSectionOptions.bind(this));\n    }\n  }\n\n  async #handleAddAuthenticatorButton(): Promise<void> {\n    const options = this.#createOptionsFromCurrentInputs();\n    if (this.#model) {\n      const authenticatorId = await this.#model.addAuthenticator(options);\n      const availableAuthenticators = this.#availableAuthenticatorSetting.get();\n      availableAuthenticators.push({authenticatorId, active: true, ...options});\n      this.#availableAuthenticatorSetting.set(\n          availableAuthenticators.map(a => ({...a, active: a.authenticatorId === authenticatorId})));\n      const section = await this.#addAuthenticatorSection(authenticatorId, options);\n      const mediaQueryList = window.matchMedia('(prefers-reduced-motion: reduce)');\n      const prefersReducedMotion = mediaQueryList.matches;\n      section.scrollIntoView({block: 'start', behavior: prefersReducedMotion ? 'auto' : 'smooth'});\n    }\n  }\n\n  async #addAuthenticatorSection(\n      authenticatorId: Protocol.WebAuthn.AuthenticatorId,\n      options: Protocol.WebAuthn.VirtualAuthenticatorOptions): Promise<HTMLDivElement> {\n    const section = document.createElement('div');\n    section.classList.add('authenticator-section');\n    section.setAttribute('data-authenticator-id', authenticatorId);\n    this.#authenticatorsView.appendChild(section);\n\n    const headerElement = section.createChild('div', 'authenticator-section-header');\n    const titleElement = headerElement.createChild('div', 'authenticator-section-title');\n    UI.ARIAUtils.markAsHeading(titleElement, 2);\n\n    await this.#clearActiveAuthenticator();\n    const activeButtonContainer = headerElement.createChild('div', 'active-button-container');\n    const activeLabel =\n        UI.UIUtils.createRadioLabel(`active-authenticator-${authenticatorId}`, i18nString(UIStrings.active));\n    activeLabel.radioElement.addEventListener('click', this.#setActiveAuthenticator.bind(this, authenticatorId));\n    activeButtonContainer.appendChild(activeLabel);\n    (activeLabel.radioElement as HTMLInputElement).checked = true;\n    this.#activeAuthId = authenticatorId;  // Newly added authenticator is automatically set as active.\n\n    const removeButton = headerElement.createChild('button', 'text-button');\n    removeButton.textContent = i18nString(UIStrings.remove);\n    removeButton.addEventListener('click', this.#removeAuthenticator.bind(this, authenticatorId));\n\n    const toolbar = new UI.Toolbar.Toolbar('edit-name-toolbar', titleElement);\n    const editName = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.editName), 'largeicon-edit');\n    const saveName = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.saveName), 'largeicon-checkmark');\n    saveName.setVisible(false);\n\n    const nameField = (titleElement.createChild('input', 'authenticator-name-field') as HTMLInputElement);\n    nameField.disabled = true;\n    const userFriendlyName = authenticatorId.slice(-5);  // User friendly name defaults to last 5 chars of UUID.\n    nameField.value = i18nString(UIStrings.authenticatorS, {PH1: userFriendlyName});\n    this.#updateActiveLabelTitle(activeLabel, nameField.value);\n\n    editName.addEventListener(\n        UI.Toolbar.ToolbarButton.Events.Click,\n        (): void => this.#handleEditNameButton(titleElement, nameField, editName, saveName));\n    saveName.addEventListener(\n        UI.Toolbar.ToolbarButton.Events.Click,\n        (): void => this.#handleSaveNameButton(titleElement, nameField, editName, saveName, activeLabel));\n\n    nameField.addEventListener(\n        'focusout', (): void => this.#handleSaveNameButton(titleElement, nameField, editName, saveName, activeLabel));\n    nameField.addEventListener('keydown', (event: KeyboardEvent): void => {\n      if (event.key === 'Enter') {\n        this.#handleSaveNameButton(titleElement, nameField, editName, saveName, activeLabel);\n      }\n    });\n\n    toolbar.appendToolbarItem(editName);\n    toolbar.appendToolbarItem(saveName);\n\n    this.#createAuthenticatorFields(section, authenticatorId, options);\n\n    const label = document.createElement('div');\n    label.classList.add('credentials-title');\n    label.textContent = i18nString(UIStrings.credentials);\n    section.appendChild(label);\n\n    const dataGrid = this.#createCredentialsDataGrid(authenticatorId);\n    dataGrid.asWidget().show(section);\n\n    void this.#updateCredentials(authenticatorId);\n\n    return section;\n  }\n\n  #exportCredential(credential: Protocol.WebAuthn.Credential): void {\n    let pem = PRIVATE_KEY_HEADER;\n    for (let i = 0; i < credential.privateKey.length; i += 64) {\n      pem += credential.privateKey.substring(i, i + 64) + '\\n';\n    }\n    pem += PRIVATE_KEY_FOOTER;\n\n    const link = document.createElement('a');\n    link.download = i18nString(UIStrings.privateKeypem);\n    link.href = 'data:application/x-pem-file,' + encodeURIComponent(pem);\n    link.click();\n  }\n\n  async #removeCredential(authenticatorId: Protocol.WebAuthn.AuthenticatorId, credentialId: string): Promise<void> {\n    const dataGrid = this.#dataGrids.get(authenticatorId);\n    if (!dataGrid) {\n      return;\n    }\n\n    // @ts-ignore dataGrid node type is indeterminate.\n    dataGrid.rootNode()\n        .children\n        .find((n: DataGrid.DataGrid.DataGridNode<DataGridNode>): boolean => n.data.credentialId === credentialId)\n        .remove();\n    this.#maybeAddEmptyNode(dataGrid);\n\n    if (this.#model) {\n      await this.#model.removeCredential(authenticatorId, credentialId);\n    }\n  }\n\n  /**\n   * Creates the fields describing the authenticator in the front end.\n   */\n  #createAuthenticatorFields(\n      section: Element, authenticatorId: string, options: Protocol.WebAuthn.VirtualAuthenticatorOptions): void {\n    const sectionFields = section.createChild('div', 'authenticator-fields');\n    const uuidField = sectionFields.createChild('div', 'authenticator-field');\n    const protocolField = sectionFields.createChild('div', 'authenticator-field');\n    const transportField = sectionFields.createChild('div', 'authenticator-field');\n    const srkField = sectionFields.createChild('div', 'authenticator-field');\n    const slbField = sectionFields.createChild('div', 'authenticator-field');\n    const suvField = sectionFields.createChild('div', 'authenticator-field');\n\n    uuidField.appendChild(UI.UIUtils.createLabel(i18nString(UIStrings.uuid), 'authenticator-option-label'));\n    protocolField.appendChild(UI.UIUtils.createLabel(i18nString(UIStrings.protocol), 'authenticator-option-label'));\n    transportField.appendChild(UI.UIUtils.createLabel(i18nString(UIStrings.transport), 'authenticator-option-label'));\n    srkField.appendChild(\n        UI.UIUtils.createLabel(i18nString(UIStrings.supportsResidentKeys), 'authenticator-option-label'));\n    slbField.appendChild(UI.UIUtils.createLabel(i18nString(UIStrings.supportsLargeBlob), 'authenticator-option-label'));\n    suvField.appendChild(\n        UI.UIUtils.createLabel(i18nString(UIStrings.supportsUserVerification), 'authenticator-option-label'));\n\n    uuidField.createChild('div', 'authenticator-field-value').textContent = authenticatorId;\n    protocolField.createChild('div', 'authenticator-field-value').textContent = options.protocol;\n    transportField.createChild('div', 'authenticator-field-value').textContent = options.transport;\n    srkField.createChild('div', 'authenticator-field-value').textContent =\n        options.hasResidentKey ? i18nString(UIStrings.yes) : i18nString(UIStrings.no);\n    slbField.createChild('div', 'authenticator-field-value').textContent =\n        options.hasLargeBlob ? i18nString(UIStrings.yes) : i18nString(UIStrings.no);\n    suvField.createChild('div', 'authenticator-field-value').textContent =\n        options.hasUserVerification ? i18nString(UIStrings.yes) : i18nString(UIStrings.no);\n  }\n\n  #handleEditNameButton(\n      titleElement: Element, nameField: HTMLInputElement, editName: UI.Toolbar.ToolbarButton,\n      saveName: UI.Toolbar.ToolbarButton): void {\n    nameField.disabled = false;\n    titleElement.classList.add('editing-name');\n    nameField.focus();\n    saveName.setVisible(true);\n    editName.setVisible(false);\n  }\n\n  #handleSaveNameButton(\n      titleElement: Element, nameField: HTMLInputElement, editName: UI.Toolbar.ToolbarItem,\n      saveName: UI.Toolbar.ToolbarItem, activeLabel: UI.UIUtils.DevToolsRadioButton): void {\n    nameField.disabled = true;\n    titleElement.classList.remove('editing-name');\n    editName.setVisible(true);\n    saveName.setVisible(false);\n    this.#updateActiveLabelTitle(activeLabel, nameField.value);\n  }\n\n  #updateActiveLabelTitle(activeLabel: UI.UIUtils.DevToolsRadioButton, authenticatorName: string): void {\n    UI.Tooltip.Tooltip.install(\n        activeLabel.radioElement, i18nString(UIStrings.setSAsTheActiveAuthenticator, {PH1: authenticatorName}));\n  }\n\n  /**\n   * Removes both the authenticator and its respective UI element.\n   */\n  #removeAuthenticator(authenticatorId: Protocol.WebAuthn.AuthenticatorId): void {\n    if (this.#authenticatorsView) {\n      const child = this.#authenticatorsView.querySelector(`[data-authenticator-id=${CSS.escape(authenticatorId)}]`);\n      if (child) {\n        child.remove();\n      }\n    }\n    const dataGrid = this.#dataGrids.get(authenticatorId);\n    if (dataGrid) {\n      dataGrid.asWidget().detach();\n      this.#dataGrids.delete(authenticatorId);\n    }\n\n    if (this.#model) {\n      void this.#model.removeAuthenticator(authenticatorId);\n    }\n\n    // Update available authenticator setting.\n    const prevAvailableAuthenticators = this.#availableAuthenticatorSetting.get();\n    const newAvailableAuthenticators = prevAvailableAuthenticators.filter(a => a.authenticatorId !== authenticatorId);\n    this.#availableAuthenticatorSetting.set(newAvailableAuthenticators);\n\n    if (this.#activeAuthId === authenticatorId) {\n      const availableAuthenticatorIds = Array.from(this.#dataGrids.keys());\n      if (availableAuthenticatorIds.length) {\n        void this.#setActiveAuthenticator(availableAuthenticatorIds[0]);\n      } else {\n        this.#activeAuthId = null;\n      }\n    }\n  }\n\n  #createOptionsFromCurrentInputs(): Protocol.WebAuthn.VirtualAuthenticatorOptions {\n    // TODO(crbug.com/1034663): Add optionality for isUserVerified param.\n    if (!this.#protocolSelect || !this.#transportSelect || !this.residentKeyCheckbox ||\n        !this.#userVerificationCheckbox || !this.largeBlobCheckbox) {\n      throw new Error('Unable to create options from current inputs');\n    }\n\n    return {\n      protocol: this.#protocolSelect.options[this.#protocolSelect.selectedIndex].value as\n          Protocol.WebAuthn.AuthenticatorProtocol,\n      ctap2Version: Protocol.WebAuthn.Ctap2Version.Ctap2_1,\n      transport: this.#transportSelect.options[this.#transportSelect.selectedIndex].value as\n          Protocol.WebAuthn.AuthenticatorTransport,\n      hasResidentKey: this.residentKeyCheckbox.checked,\n      hasUserVerification: this.#userVerificationCheckbox.checked,\n      hasLargeBlob: this.largeBlobCheckbox.checked,\n      automaticPresenceSimulation: true,\n      isUserVerified: true,\n    };\n  }\n\n  /**\n   * Sets the given authenticator as active.\n   * Note that a newly added authenticator will automatically be set as active.\n   */\n  async #setActiveAuthenticator(authenticatorId: Protocol.WebAuthn.AuthenticatorId): Promise<void> {\n    await this.#clearActiveAuthenticator();\n    if (this.#model) {\n      await this.#model.setAutomaticPresenceSimulation(authenticatorId, true);\n    }\n    this.#activeAuthId = authenticatorId;\n\n    const prevAvailableAuthenticators = this.#availableAuthenticatorSetting.get();\n    const newAvailableAuthenticators =\n        prevAvailableAuthenticators.map(a => ({...a, active: a.authenticatorId === authenticatorId}));\n    this.#availableAuthenticatorSetting.set(newAvailableAuthenticators);\n\n    this.#updateActiveButtons();\n  }\n\n  #updateActiveButtons(): void {\n    const authenticators = this.#authenticatorsView.getElementsByClassName('authenticator-section');\n    Array.from(authenticators).forEach((authenticator: Element): void => {\n      const button = (authenticator.querySelector('input.dt-radio-button') as HTMLInputElement);\n      if (!button) {\n        return;\n      }\n      button.checked = (authenticator as HTMLElement).dataset.authenticatorId === this.#activeAuthId;\n    });\n  }\n\n  async #clearActiveAuthenticator(): Promise<void> {\n    if (this.#activeAuthId && this.#model) {\n      await this.#model.setAutomaticPresenceSimulation(this.#activeAuthId, false);\n    }\n    this.#activeAuthId = null;\n    this.#updateActiveButtons();\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([webauthnPaneStyles]);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
