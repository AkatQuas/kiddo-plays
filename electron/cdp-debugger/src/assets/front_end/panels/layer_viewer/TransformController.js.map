{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/layer_viewer/TransformController.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nconst UIStrings = {\n  /**\n  *@description Tooltip text that appears when hovering over largeicon pan button in Transform Controller of the Layers panel\n  */\n  panModeX: 'Pan mode (X)',\n  /**\n  *@description Tooltip text that appears when hovering over largeicon rotate button in Transform Controller of the Layers panel\n  */\n  rotateModeV: 'Rotate mode (V)',\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon center button in the Transform Controller of the Layers panel\n  */\n  resetTransform: 'Reset transform (0)',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/layer_viewer/TransformController.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class TransformController extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  private mode!: Modes;\n  private scaleInternal: number;\n  private offsetXInternal: number;\n  private offsetYInternal: number;\n  private rotateXInternal: number;\n  private rotateYInternal: number;\n  private oldRotateX: number;\n  private oldRotateY: number;\n  private originX: number;\n  private originY: number;\n  element: HTMLElement;\n  private minScale: number;\n  private maxScale: number;\n  private readonly controlPanelToolbar: UI.Toolbar.Toolbar;\n  private readonly modeButtons: {[x: string]: UI.Toolbar.ToolbarToggle};\n  constructor(element: HTMLElement, disableRotate?: boolean) {\n    super();\n    this.scaleInternal = 1;\n    this.offsetXInternal = 0;\n    this.offsetYInternal = 0;\n    this.rotateXInternal = 0;\n    this.rotateYInternal = 0;\n    this.oldRotateX = 0;\n    this.oldRotateY = 0;\n    this.originX = 0;\n    this.originY = 0;\n    this.element = element;\n    this.registerShortcuts();\n    UI.UIUtils.installDragHandle(\n        element, this.onDragStart.bind(this), this.onDrag.bind(this), this.onDragEnd.bind(this), 'move', null);\n    element.addEventListener('wheel', this.onMouseWheel.bind(this), false);\n    this.minScale = 0;\n    this.maxScale = Infinity;\n\n    this.controlPanelToolbar = new UI.Toolbar.Toolbar('transform-control-panel');\n\n    this.modeButtons = {};\n    if (!disableRotate) {\n      const panModeButton = new UI.Toolbar.ToolbarToggle(i18nString(UIStrings.panModeX), 'largeicon-pan');\n      panModeButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.setMode.bind(this, Modes.Pan));\n      this.modeButtons[Modes.Pan] = panModeButton;\n      this.controlPanelToolbar.appendToolbarItem(panModeButton);\n      const rotateModeButton = new UI.Toolbar.ToolbarToggle(i18nString(UIStrings.rotateModeV), 'largeicon-rotate');\n      rotateModeButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.setMode.bind(this, Modes.Rotate));\n      this.modeButtons[Modes.Rotate] = rotateModeButton;\n      this.controlPanelToolbar.appendToolbarItem(rotateModeButton);\n    }\n    this.setMode(Modes.Pan);\n\n    const resetButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.resetTransform), 'largeicon-center');\n    resetButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.resetAndNotify.bind(this, undefined));\n    this.controlPanelToolbar.appendToolbarItem(resetButton);\n\n    this.reset();\n  }\n\n  toolbar(): UI.Toolbar.Toolbar {\n    return this.controlPanelToolbar;\n  }\n\n  private registerShortcuts(): void {\n    const zoomFactor = 1.1;\n    UI.ShortcutRegistry.ShortcutRegistry.instance().addShortcutListener(this.element, {\n      'layers.reset-view': async(): Promise<true> => {\n        this.resetAndNotify();\n        return true;\n      },\n      'layers.pan-mode': async(): Promise<true> => {\n        this.setMode(Modes.Pan);\n        return true;\n      },\n      'layers.rotate-mode': async(): Promise<true> => {\n        this.setMode(Modes.Rotate);\n        return true;\n      },\n      'layers.zoom-in': this.onKeyboardZoom.bind(this, zoomFactor),\n      'layers.zoom-out': this.onKeyboardZoom.bind(this, 1 / zoomFactor),\n      'layers.up': this.onKeyboardPanOrRotate.bind(this, 0, -1),\n      'layers.down': this.onKeyboardPanOrRotate.bind(this, 0, 1),\n      'layers.left': this.onKeyboardPanOrRotate.bind(this, -1, 0),\n      'layers.right': this.onKeyboardPanOrRotate.bind(this, 1, 0),\n    });\n  }\n\n  private postChangeEvent(): void {\n    this.dispatchEventToListeners(Events.TransformChanged);\n  }\n\n  private reset(): void {\n    this.scaleInternal = 1;\n    this.offsetXInternal = 0;\n    this.offsetYInternal = 0;\n    this.rotateXInternal = 0;\n    this.rotateYInternal = 0;\n  }\n\n  private setMode(mode: Modes): void {\n    if (this.mode === mode) {\n      return;\n    }\n    this.mode = mode;\n    this.updateModeButtons();\n  }\n\n  private updateModeButtons(): void {\n    for (const mode in this.modeButtons) {\n      this.modeButtons[mode].setToggled(mode === this.mode);\n    }\n  }\n\n  resetAndNotify(event?: Event): void {\n    this.reset();\n    this.postChangeEvent();\n    if (event) {\n      event.preventDefault();\n    }\n    this.element.focus();\n  }\n\n  setScaleConstraints(minScale: number, maxScale: number): void {\n    this.minScale = minScale;\n    this.maxScale = maxScale;\n    this.scaleInternal = Platform.NumberUtilities.clamp(this.scaleInternal, minScale, maxScale);\n  }\n\n  clampOffsets(minX: number, maxX: number, minY: number, maxY: number): void {\n    this.offsetXInternal = Platform.NumberUtilities.clamp(this.offsetXInternal, minX, maxX);\n    this.offsetYInternal = Platform.NumberUtilities.clamp(this.offsetYInternal, minY, maxY);\n  }\n\n  scale(): number {\n    return this.scaleInternal;\n  }\n\n  offsetX(): number {\n    return this.offsetXInternal;\n  }\n\n  offsetY(): number {\n    return this.offsetYInternal;\n  }\n\n  rotateX(): number {\n    return this.rotateXInternal;\n  }\n\n  rotateY(): number {\n    return this.rotateYInternal;\n  }\n\n  private onScale(scaleFactor: number, x: number, y: number): void {\n    scaleFactor = Platform.NumberUtilities.clamp(this.scaleInternal * scaleFactor, this.minScale, this.maxScale) /\n        this.scaleInternal;\n    this.scaleInternal *= scaleFactor;\n    this.offsetXInternal -= (x - this.offsetXInternal) * (scaleFactor - 1);\n    this.offsetYInternal -= (y - this.offsetYInternal) * (scaleFactor - 1);\n    this.postChangeEvent();\n  }\n\n  private onPan(offsetX: number, offsetY: number): void {\n    this.offsetXInternal += offsetX;\n    this.offsetYInternal += offsetY;\n    this.postChangeEvent();\n  }\n\n  private onRotate(rotateX: number, rotateY: number): void {\n    this.rotateXInternal = rotateX;\n    this.rotateYInternal = rotateY;\n    this.postChangeEvent();\n  }\n\n  private async onKeyboardZoom(zoomFactor: number): Promise<boolean> {\n    this.onScale(zoomFactor, this.element.clientWidth / 2, this.element.clientHeight / 2);\n    return true;\n  }\n\n  private async onKeyboardPanOrRotate(xMultiplier: number, yMultiplier: number): Promise<boolean> {\n    const panStepInPixels = 6;\n    const rotateStepInDegrees = 5;\n\n    if (this.mode === Modes.Rotate) {\n      // Sic! onRotate treats X and Y as \"rotate around X\" and \"rotate around Y\", so swap X/Y multiplers.\n      this.onRotate(\n          this.rotateXInternal + yMultiplier * rotateStepInDegrees,\n          this.rotateYInternal + xMultiplier * rotateStepInDegrees);\n    } else {\n      this.onPan(xMultiplier * panStepInPixels, yMultiplier * panStepInPixels);\n    }\n    return true;\n  }\n\n  private onMouseWheel(event: Event): void {\n    /** @const */\n    const zoomFactor = 1.1;\n    /** @const */\n    const wheelZoomSpeed = 1 / 53;\n    const mouseEvent = event as WheelEvent;\n    const scaleFactor = Math.pow(zoomFactor, -mouseEvent.deltaY * wheelZoomSpeed);\n    this.onScale(\n        scaleFactor, mouseEvent.clientX - this.element.totalOffsetLeft(),\n        mouseEvent.clientY - this.element.totalOffsetTop());\n  }\n\n  private onDrag(event: Event): void {\n    const {clientX, clientY} = event as MouseEvent;\n    if (this.mode === Modes.Rotate) {\n      this.onRotate(\n          this.oldRotateX + (this.originY - clientY) / this.element.clientHeight * 180,\n          this.oldRotateY - (this.originX - clientX) / this.element.clientWidth * 180);\n    } else {\n      this.onPan(clientX - this.originX, clientY - this.originY);\n      this.originX = clientX;\n      this.originY = clientY;\n    }\n  }\n\n  private onDragStart(event: MouseEvent): boolean {\n    this.element.focus();\n    this.originX = event.clientX;\n    this.originY = event.clientY;\n    this.oldRotateX = this.rotateXInternal;\n    this.oldRotateY = this.rotateYInternal;\n    return true;\n  }\n\n  private onDragEnd(): void {\n    this.originX = 0;\n    this.originY = 0;\n    this.oldRotateX = 0;\n    this.oldRotateY = 0;\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  TransformChanged = 'TransformChanged',\n}\n\nexport type EventTypes = {\n  [Events.TransformChanged]: void,\n};\n\nexport const enum Modes {\n  Pan = 'Pan',\n  Rotate = 'Rotate',\n}\n"],
  "mappings": "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",
  "names": []
}
