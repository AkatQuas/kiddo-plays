{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/layer_viewer/LayerTreeOutline.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type {LayerView, LayerViewHost, Selection, SnapshotSelection} from './LayerViewHost.js';\nimport {LayerSelection} from './LayerViewHost.js';\n\nconst UIStrings = {\n  /**\n  *@description Label for layers sidepanel tree\n  */\n  layersTreePane: 'Layers Tree Pane',\n  /**\n  *@description A context menu item in the DView of the Layers panel\n  */\n  showPaintProfiler: 'Show Paint Profiler',\n  /**\n  *@description Details text content in Layer Tree Outline of the Layers panel\n  *@example {10} PH1\n  *@example {10} PH2\n  */\n  updateChildDimension: ' ({PH1} \u00D7 {PH2})',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/layer_viewer/LayerTreeOutline.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class LayerTreeOutline extends Common.ObjectWrapper.eventMixin<EventTypes, typeof UI.TreeOutline.TreeOutline>(\n    UI.TreeOutline.TreeOutline) implements Common.EventTarget.EventTarget<EventTypes>, LayerView {\n  private layerViewHost: LayerViewHost;\n  private treeOutline: UI.TreeOutline.TreeOutlineInShadow;\n  private lastHoveredNode: LayerTreeElement|null;\n  element: HTMLElement;\n  private layerTree?: SDK.LayerTreeBase.LayerTreeBase|null;\n  private layerSnapshotMap?: Map<SDK.LayerTreeBase.Layer, SnapshotSelection>;\n\n  constructor(layerViewHost: LayerViewHost) {\n    super();\n    this.layerViewHost = layerViewHost;\n    this.layerViewHost.registerView(this);\n\n    this.treeOutline = new UI.TreeOutline.TreeOutlineInShadow();\n    this.treeOutline.element.classList.add('layer-tree', 'overflow-auto');\n    this.treeOutline.element.addEventListener('mousemove', this.onMouseMove.bind(this) as EventListener, false);\n    this.treeOutline.element.addEventListener('mouseout', this.onMouseMove.bind(this) as EventListener, false);\n    this.treeOutline.element.addEventListener('contextmenu', this.onContextMenu.bind(this) as EventListener, true);\n    UI.ARIAUtils.setAccessibleName(this.treeOutline.contentElement, i18nString(UIStrings.layersTreePane));\n\n    this.lastHoveredNode = null;\n    this.element = this.treeOutline.element;\n    this.layerViewHost.showInternalLayersSetting().addChangeListener(this.update, this);\n  }\n\n  focus(): void {\n    this.treeOutline.focus();\n  }\n\n  selectObject(selection: Selection|null): void {\n    this.hoverObject(null);\n    const layer = selection && selection.layer();\n    const node = layer && layerToTreeElement.get(layer);\n    if (node) {\n      node.revealAndSelect(true);\n    } else if (this.treeOutline.selectedTreeElement) {\n      this.treeOutline.selectedTreeElement.deselect();\n    }\n  }\n\n  hoverObject(selection: Selection|null): void {\n    const layer = selection && selection.layer();\n    const node = layer && layerToTreeElement.get(layer);\n    if (node === this.lastHoveredNode) {\n      return;\n    }\n    if (this.lastHoveredNode) {\n      this.lastHoveredNode.setHovered(false);\n    }\n    if (node) {\n      node.setHovered(true);\n    }\n    this.lastHoveredNode = node as LayerTreeElement;\n  }\n\n  setLayerTree(layerTree: SDK.LayerTreeBase.LayerTreeBase|null): void {\n    this.layerTree = layerTree;\n    this.update();\n  }\n\n  private update(): void {\n    const showInternalLayers = this.layerViewHost.showInternalLayersSetting().get();\n    const seenLayers = new Map<SDK.LayerTreeBase.Layer, boolean>();\n    let root: (SDK.LayerTreeBase.Layer|null)|null = null;\n    if (this.layerTree) {\n      if (!showInternalLayers) {\n        root = this.layerTree.contentRoot();\n      }\n      if (!root) {\n        root = this.layerTree.root();\n      }\n    }\n\n    function updateLayer(this: LayerTreeOutline, layer: SDK.LayerTreeBase.Layer): void {\n      if (!layer.drawsContent() && !showInternalLayers) {\n        return;\n      }\n      if (seenLayers.get(layer)) {\n        console.assert(false, 'Duplicate layer: ' + layer.id());\n      }\n      seenLayers.set(layer, true);\n      let node: LayerTreeElement|null = layerToTreeElement.get(layer) || null;\n      let parentLayer = layer.parent();\n      // Skip till nearest visible ancestor.\n      while (parentLayer && parentLayer !== root && !parentLayer.drawsContent() && !showInternalLayers) {\n        parentLayer = parentLayer.parent();\n      }\n      const parent =\n          layer === root ? this.treeOutline.rootElement() : parentLayer && layerToTreeElement.get(parentLayer);\n      if (!parent) {\n        console.assert(false, 'Parent is not in the tree');\n        return;\n      }\n      if (!node) {\n        node = new LayerTreeElement(this, layer);\n        parent.appendChild(node);\n        // Expand all new non-content layers to expose content layers better.\n        if (!layer.drawsContent()) {\n          node.expand();\n        }\n      } else {\n        if (node.parent !== parent) {\n          const oldSelection = this.treeOutline.selectedTreeElement;\n          if (node.parent) {\n            node.parent.removeChild(node);\n          }\n          parent.appendChild(node);\n          if (oldSelection && oldSelection !== this.treeOutline.selectedTreeElement) {\n            oldSelection.select();\n          }\n        }\n        node.update();\n      }\n    }\n    if (root && this.layerTree) {\n      this.layerTree.forEachLayer(updateLayer.bind(this), root);\n    }\n    // Cleanup layers that don't exist anymore from tree.\n    const rootElement = this.treeOutline.rootElement();\n    for (let node = rootElement.firstChild(); node instanceof LayerTreeElement && !node.root;) {\n      if (seenLayers.get(node.layer)) {\n        node = node.traverseNextTreeElement(false);\n      } else {\n        const nextNode = node.nextSibling || node.parent;\n        if (node.parent) {\n          node.parent.removeChild(node);\n        }\n        if (node === this.lastHoveredNode) {\n          this.lastHoveredNode = null;\n        }\n        node = nextNode;\n      }\n    }\n    if (!this.treeOutline.selectedTreeElement && this.layerTree) {\n      const elementToSelect = this.layerTree.contentRoot() || this.layerTree.root();\n      if (elementToSelect) {\n        const layer = layerToTreeElement.get(elementToSelect);\n        if (layer) {\n          layer.revealAndSelect(true);\n        }\n      }\n    }\n  }\n\n  private onMouseMove(event: MouseEvent): void {\n    const node = this.treeOutline.treeElementFromEvent(event) as LayerTreeElement | null;\n    if (node === this.lastHoveredNode) {\n      return;\n    }\n    this.layerViewHost.hoverObject(this.selectionForNode(node));\n  }\n\n  selectedNodeChanged(node: LayerTreeElement): void {\n    this.layerViewHost.selectObject(this.selectionForNode(node));\n  }\n\n  private onContextMenu(event: MouseEvent): void {\n    const selection = this.selectionForNode(this.treeOutline.treeElementFromEvent(event) as LayerTreeElement | null);\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    const layer = selection && selection.layer();\n    if (layer) {\n      this.layerSnapshotMap = this.layerViewHost.getLayerSnapshotMap();\n      if (this.layerSnapshotMap.has(layer)) {\n        contextMenu.defaultSection().appendItem(\n            i18nString(UIStrings.showPaintProfiler),\n            () => this.dispatchEventToListeners(Events.PaintProfilerRequested, selection as Selection), false);\n      }\n    }\n    this.layerViewHost.showContextMenu(contextMenu, selection);\n  }\n\n  private selectionForNode(node: LayerTreeElement|null): Selection|null {\n    return node && node.layer ? new LayerSelection(node.layer) : null;\n  }\n}\n\nexport const enum Events {\n  PaintProfilerRequested = 'PaintProfilerRequested',\n}\n\nexport type EventTypes = {\n  [Events.PaintProfilerRequested]: Selection,\n};\n\nexport class LayerTreeElement extends UI.TreeOutline.TreeElement {\n  // Watch out: This is different from treeOutline that\n  // LayerTreeElement inherits from UI.TreeOutline.TreeElement.\n  treeOutlineInternal: LayerTreeOutline;\n  layer: SDK.LayerTreeBase.Layer;\n\n  constructor(tree: LayerTreeOutline, layer: SDK.LayerTreeBase.Layer) {\n    super();\n    this.treeOutlineInternal = tree;\n    this.layer = layer;\n    layerToTreeElement.set(layer, this);\n    this.update();\n  }\n\n  update(): void {\n    const node = this.layer.nodeForSelfOrAncestor();\n    const title = document.createDocumentFragment();\n    UI.UIUtils.createTextChild(title, node ? node.simpleSelector() : '#' + this.layer.id());\n    const details = title.createChild('span', 'dimmed');\n    details.textContent =\n        i18nString(UIStrings.updateChildDimension, {PH1: this.layer.width(), PH2: this.layer.height()});\n    this.title = title;\n  }\n\n  onselect(): boolean {\n    this.treeOutlineInternal.selectedNodeChanged(this);\n    return false;\n  }\n\n  setHovered(hovered: boolean): void {\n    this.listItemElement.classList.toggle('hovered', hovered);\n  }\n}\n\nexport const layerToTreeElement = new WeakMap<SDK.LayerTreeBase.Layer, LayerTreeElement>();\n"],
  "mappings": "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",
  "names": []
}
