{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/layer_viewer/PaintProfilerView.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\n\nimport paintProfilerStyles from './paintProfiler.css.js';\n\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nconst UIStrings = {\n  /**\n  *@description Text to indicate the progress of a profile\n  */\n  profiling: 'Profiling\u2026',\n  /**\n  *@description Text in Paint Profiler View of the Layers panel\n  */\n  shapes: 'Shapes',\n  /**\n  *@description Text in Paint Profiler View of the Layers panel\n  */\n  bitmap: 'Bitmap',\n  /**\n  *@description Generic label for any text\n  */\n  text: 'Text',\n  /**\n  *@description Text in Paint Profiler View of the Layers panel\n  */\n  misc: 'Misc',\n  /**\n  *@description ARIA label for a pie chart that shows the results of the paint profiler\n  */\n  profilingResults: 'Profiling results',\n  /**\n  *@description Label for command log tree in the Profiler tab\n  */\n  commandLog: 'Command Log',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/layer_viewer/PaintProfilerView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet categories: {[x: string]: PaintProfilerCategory}|null = null;\n\nlet logItemCategoriesMap: {[x: string]: PaintProfilerCategory}|null = null;\n\nexport class PaintProfilerView extends Common.ObjectWrapper.eventMixin<EventTypes, typeof UI.Widget.HBox>(\n    UI.Widget.HBox) {\n  private canvasContainer: HTMLElement;\n  private readonly progressBanner: HTMLElement;\n  private pieChart: PerfUI.PieChart.PieChart;\n  private readonly showImageCallback: (arg0?: string|undefined) => void;\n  private canvas: HTMLCanvasElement;\n  private context: CanvasRenderingContext2D;\n  private readonly selectionWindowInternal: PerfUI.OverviewGrid.Window;\n  private readonly innerBarWidth: number;\n  private minBarHeight: number;\n  private readonly barPaddingWidth: number;\n  private readonly outerBarWidth: number;\n  private pendingScale: number;\n  private scale: number;\n  private samplesPerBar: number;\n  private log: SDK.PaintProfiler.PaintProfilerLogItem[];\n  private snapshot?: SDK.PaintProfiler.PaintProfilerSnapshot|null;\n  private logCategories?: PaintProfilerCategory[];\n  private profiles?: Protocol.LayerTree.PaintProfile[]|null;\n  private updateImageTimer?: number;\n\n  constructor(showImageCallback: (arg0?: string|undefined) => void) {\n    super(true);\n\n    this.contentElement.classList.add('paint-profiler-overview');\n    this.canvasContainer = this.contentElement.createChild('div', 'paint-profiler-canvas-container');\n    this.progressBanner = this.contentElement.createChild('div', 'full-widget-dimmed-banner hidden');\n    this.progressBanner.textContent = i18nString(UIStrings.profiling);\n    this.pieChart = new PerfUI.PieChart.PieChart();\n    this.populatePieChart(0, []);\n    this.pieChart.classList.add('paint-profiler-pie-chart');\n    this.contentElement.appendChild(this.pieChart);\n\n    this.showImageCallback = showImageCallback;\n    this.canvas = this.canvasContainer.createChild('canvas', 'fill') as HTMLCanvasElement;\n    this.context = this.canvas.getContext('2d') as CanvasRenderingContext2D;\n    this.selectionWindowInternal = new PerfUI.OverviewGrid.Window(this.canvasContainer);\n    this.selectionWindowInternal.addEventListener(PerfUI.OverviewGrid.Events.WindowChanged, this.onWindowChanged, this);\n\n    this.innerBarWidth = 4 * window.devicePixelRatio;\n    this.minBarHeight = window.devicePixelRatio;\n    this.barPaddingWidth = 2 * window.devicePixelRatio;\n    this.outerBarWidth = this.innerBarWidth + this.barPaddingWidth;\n    this.pendingScale = 1;\n    this.scale = this.pendingScale;\n    this.samplesPerBar = 0;\n    this.log = [];\n\n    this.reset();\n  }\n\n  static categories(): {[x: string]: PaintProfilerCategory} {\n    if (!categories) {\n      categories = {\n        shapes: new PaintProfilerCategory('shapes', i18nString(UIStrings.shapes), 'rgb(255, 161, 129)'),\n        bitmap: new PaintProfilerCategory('bitmap', i18nString(UIStrings.bitmap), 'rgb(136, 196, 255)'),\n        text: new PaintProfilerCategory('text', i18nString(UIStrings.text), 'rgb(180, 255, 137)'),\n        misc: new PaintProfilerCategory('misc', i18nString(UIStrings.misc), 'rgb(206, 160, 255)'),\n      };\n    }\n    return categories;\n  }\n\n  private static initLogItemCategories(): {[x: string]: PaintProfilerCategory} {\n    if (!logItemCategoriesMap) {\n      const categories = PaintProfilerView.categories();\n\n      const logItemCategories: {[x: string]: PaintProfilerCategory} = {};\n      logItemCategories['Clear'] = categories['misc'];\n      logItemCategories['DrawPaint'] = categories['misc'];\n      logItemCategories['DrawData'] = categories['misc'];\n      logItemCategories['SetMatrix'] = categories['misc'];\n      logItemCategories['PushCull'] = categories['misc'];\n      logItemCategories['PopCull'] = categories['misc'];\n      logItemCategories['Translate'] = categories['misc'];\n      logItemCategories['Scale'] = categories['misc'];\n      logItemCategories['Concat'] = categories['misc'];\n      logItemCategories['Restore'] = categories['misc'];\n      logItemCategories['SaveLayer'] = categories['misc'];\n      logItemCategories['Save'] = categories['misc'];\n      logItemCategories['BeginCommentGroup'] = categories['misc'];\n      logItemCategories['AddComment'] = categories['misc'];\n      logItemCategories['EndCommentGroup'] = categories['misc'];\n      logItemCategories['ClipRect'] = categories['misc'];\n      logItemCategories['ClipRRect'] = categories['misc'];\n      logItemCategories['ClipPath'] = categories['misc'];\n      logItemCategories['ClipRegion'] = categories['misc'];\n      logItemCategories['DrawPoints'] = categories['shapes'];\n      logItemCategories['DrawRect'] = categories['shapes'];\n      logItemCategories['DrawOval'] = categories['shapes'];\n      logItemCategories['DrawRRect'] = categories['shapes'];\n      logItemCategories['DrawPath'] = categories['shapes'];\n      logItemCategories['DrawVertices'] = categories['shapes'];\n      logItemCategories['DrawDRRect'] = categories['shapes'];\n      logItemCategories['DrawBitmap'] = categories['bitmap'];\n      logItemCategories['DrawBitmapRectToRect'] = categories['bitmap'];\n      logItemCategories['DrawBitmapMatrix'] = categories['bitmap'];\n      logItemCategories['DrawBitmapNine'] = categories['bitmap'];\n      logItemCategories['DrawSprite'] = categories['bitmap'];\n      logItemCategories['DrawPicture'] = categories['bitmap'];\n      logItemCategories['DrawText'] = categories['text'];\n      logItemCategories['DrawPosText'] = categories['text'];\n      logItemCategories['DrawPosTextH'] = categories['text'];\n      logItemCategories['DrawTextOnPath'] = categories['text'];\n\n      logItemCategoriesMap = logItemCategories;\n    }\n\n    return logItemCategoriesMap;\n  }\n\n  private static categoryForLogItem(logItem: SDK.PaintProfiler.PaintProfilerLogItem): PaintProfilerCategory {\n    const method = Platform.StringUtilities.toTitleCase(logItem.method);\n\n    const logItemCategories = PaintProfilerView.initLogItemCategories();\n    let result: PaintProfilerCategory = logItemCategories[method];\n    if (!result) {\n      result = PaintProfilerView.categories()['misc'];\n      logItemCategories[method] = result;\n    }\n    return result;\n  }\n\n  onResize(): void {\n    this.update();\n  }\n\n  async setSnapshotAndLog(\n      snapshot: SDK.PaintProfiler.PaintProfilerSnapshot|null, log: SDK.PaintProfiler.PaintProfilerLogItem[],\n      clipRect: Protocol.DOM.Rect|null): Promise<void> {\n    this.reset();\n    this.snapshot = snapshot;\n    if (this.snapshot) {\n      this.snapshot.addReference();\n    }\n    this.log = log;\n    this.logCategories = this.log.map(PaintProfilerView.categoryForLogItem);\n\n    if (!snapshot) {\n      this.update();\n      this.populatePieChart(0, []);\n      this.selectionWindowInternal.setEnabled(false);\n      return;\n    }\n\n    this.selectionWindowInternal.setEnabled(true);\n    this.progressBanner.classList.remove('hidden');\n    this.updateImage();\n\n    const profiles = await snapshot.profile(clipRect);\n\n    this.progressBanner.classList.add('hidden');\n    this.profiles = profiles;\n    this.update();\n    this.updatePieChart();\n  }\n\n  setScale(scale: number): void {\n    const needsUpdate = scale > this.scale;\n    const predictiveGrowthFactor = 2;\n    this.pendingScale = Math.min(1, scale * predictiveGrowthFactor);\n    if (needsUpdate && this.snapshot) {\n      this.updateImage();\n    }\n  }\n\n  private update(): void {\n    this.canvas.width = this.canvasContainer.clientWidth * window.devicePixelRatio;\n    this.canvas.height = this.canvasContainer.clientHeight * window.devicePixelRatio;\n    this.samplesPerBar = 0;\n    if (!this.profiles || !this.profiles.length || !this.logCategories) {\n      return;\n    }\n\n    const maxBars = Math.floor((this.canvas.width - 2 * this.barPaddingWidth) / this.outerBarWidth);\n    const sampleCount = this.log.length;\n    this.samplesPerBar = Math.ceil(sampleCount / maxBars);\n\n    let maxBarTime = 0;\n    const barTimes = [];\n    const barHeightByCategory = [];\n    let heightByCategory: {[category: string]: number} = {};\n    for (let i = 0, lastBarIndex = 0, lastBarTime = 0; i < sampleCount;) {\n      let categoryName = (this.logCategories[i] && this.logCategories[i].name) || 'misc';\n      const sampleIndex = this.log[i].commandIndex;\n      for (let row = 0; row < this.profiles.length; row++) {\n        const sample = this.profiles[row][sampleIndex];\n        lastBarTime += sample;\n        heightByCategory[categoryName] = (heightByCategory[categoryName] || 0) + sample;\n      }\n      ++i;\n      if (i - lastBarIndex === this.samplesPerBar || i === sampleCount) {\n        // Normalize by total number of samples accumulated.\n        const factor = this.profiles.length * (i - lastBarIndex);\n        lastBarTime /= factor;\n        for (categoryName in heightByCategory) {\n          heightByCategory[categoryName] /= factor;\n        }\n\n        barTimes.push(lastBarTime);\n        barHeightByCategory.push(heightByCategory);\n\n        if (lastBarTime > maxBarTime) {\n          maxBarTime = lastBarTime;\n        }\n        lastBarTime = 0;\n        heightByCategory = {};\n        lastBarIndex = i;\n      }\n    }\n\n    const paddingHeight = 4 * window.devicePixelRatio;\n    const scale = (this.canvas.height - paddingHeight - this.minBarHeight) / maxBarTime;\n    for (let i = 0; i < barTimes.length; ++i) {\n      for (const categoryName in barHeightByCategory[i]) {\n        barHeightByCategory[i][categoryName] *= (barTimes[i] * scale + this.minBarHeight) / barTimes[i];\n      }\n      this.renderBar(i, barHeightByCategory[i]);\n    }\n  }\n\n  private renderBar(index: number, heightByCategory: {[x: string]: number}): void {\n    const categories = PaintProfilerView.categories();\n    let currentHeight = 0;\n    const x = this.barPaddingWidth + index * this.outerBarWidth;\n    for (const categoryName in categories) {\n      if (!heightByCategory[categoryName]) {\n        continue;\n      }\n      currentHeight += heightByCategory[categoryName];\n      const y = this.canvas.height - currentHeight;\n      this.context.fillStyle = categories[categoryName].color;\n      this.context.fillRect(x, y, this.innerBarWidth, heightByCategory[categoryName]);\n    }\n  }\n\n  private onWindowChanged(): void {\n    this.dispatchEventToListeners(Events.WindowChanged);\n    this.updatePieChart();\n    if (this.updateImageTimer) {\n      return;\n    }\n    this.updateImageTimer = window.setTimeout(this.updateImage.bind(this), 100);\n  }\n\n  private updatePieChart(): void {\n    const {total, slices} = this.calculatePieChart();\n    this.populatePieChart(total, slices);\n  }\n\n  private calculatePieChart(): {total: number, slices: Array<{value: number, color: string, title: string}>} {\n    const window = this.selectionWindow();\n    if (!this.profiles || !this.profiles.length || !window) {\n      return {total: 0, slices: []};\n    }\n    let totalTime = 0;\n    const timeByCategory: {[x: string]: number} = {};\n    for (let i = window.left; i < window.right; ++i) {\n      const logEntry = this.log[i];\n      const category = PaintProfilerView.categoryForLogItem(logEntry);\n      timeByCategory[category.color] = timeByCategory[category.color] || 0;\n      for (let j = 0; j < this.profiles.length; ++j) {\n        const time = this.profiles[j][logEntry.commandIndex];\n        totalTime += time;\n        timeByCategory[category.color] += time;\n      }\n    }\n    const slices: PerfUI.PieChart.Slice[] = [];\n    for (const color in timeByCategory) {\n      slices.push({value: timeByCategory[color] / this.profiles.length, color, title: ''});\n    }\n    return {total: totalTime / this.profiles.length, slices};\n  }\n\n  private populatePieChart(total: number, slices: PerfUI.PieChart.Slice[]): void {\n    this.pieChart.data = {\n      chartName: i18nString(UIStrings.profilingResults),\n      size: 55,\n      formatter: this.formatPieChartTime.bind(this),\n      showLegend: false,\n      total,\n      slices,\n    };\n  }\n\n  private formatPieChartTime(value: number): string {\n    return i18n.TimeUtilities.millisToString(value * 1000, true);\n  }\n\n  selectionWindow(): {left: number, right: number}|null {\n    if (!this.log) {\n      return null;\n    }\n\n    const screenLeft = (this.selectionWindowInternal.windowLeft || 0) * this.canvas.width;\n    const screenRight = (this.selectionWindowInternal.windowRight || 0) * this.canvas.width;\n    const barLeft = Math.floor(screenLeft / this.outerBarWidth);\n    const barRight = Math.floor((screenRight + this.innerBarWidth - this.barPaddingWidth / 2) / this.outerBarWidth);\n    const stepLeft = Platform.NumberUtilities.clamp(barLeft * this.samplesPerBar, 0, this.log.length - 1);\n    const stepRight = Platform.NumberUtilities.clamp(barRight * this.samplesPerBar, 0, this.log.length);\n\n    return {left: stepLeft, right: stepRight};\n  }\n\n  private updateImage(): void {\n    delete this.updateImageTimer;\n    let left;\n    let right;\n    const window = this.selectionWindow();\n    if (this.profiles && this.profiles.length && window) {\n      left = this.log[window.left].commandIndex;\n      right = this.log[window.right - 1].commandIndex;\n    }\n    const scale = this.pendingScale;\n    if (!this.snapshot) {\n      return;\n    }\n    void this.snapshot.replay(scale, left, right).then(image => {\n      if (!image) {\n        return;\n      }\n      this.scale = scale;\n      this.showImageCallback(image);\n    });\n  }\n\n  private reset(): void {\n    if (this.snapshot) {\n      this.snapshot.release();\n    }\n    this.snapshot = null;\n    this.profiles = null;\n    this.selectionWindowInternal.reset();\n    this.selectionWindowInternal.setEnabled(false);\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([paintProfilerStyles]);\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  WindowChanged = 'WindowChanged',\n}\n\nexport type EventTypes = {\n  [Events.WindowChanged]: void,\n};\n\nexport class PaintProfilerCommandLogView extends UI.ThrottledWidget.ThrottledWidget {\n  private readonly treeOutline: UI.TreeOutline.TreeOutlineInShadow;\n  private log: SDK.PaintProfiler.PaintProfilerLogItem[];\n  private readonly treeItemCache: Map<SDK.PaintProfiler.PaintProfilerLogItem, LogTreeElement>;\n  private selectionWindow?: {left: number, right: number}|null;\n  constructor() {\n    super();\n    this.setMinimumSize(100, 25);\n    this.element.classList.add('overflow-auto');\n\n    this.treeOutline = new UI.TreeOutline.TreeOutlineInShadow();\n    UI.ARIAUtils.setAccessibleName(this.treeOutline.contentElement, i18nString(UIStrings.commandLog));\n    this.element.appendChild(this.treeOutline.element);\n    this.setDefaultFocusedElement(this.treeOutline.contentElement);\n\n    this.log = [];\n    this.treeItemCache = new Map();\n  }\n\n  setCommandLog(log: SDK.PaintProfiler.PaintProfilerLogItem[]): void {\n    this.log = log;\n\n    this.updateWindow({left: 0, right: this.log.length});\n  }\n\n  private appendLogItem(logItem: SDK.PaintProfiler.PaintProfilerLogItem): void {\n    let treeElement = this.treeItemCache.get(logItem);\n    if (!treeElement) {\n      treeElement = new LogTreeElement(this, logItem);\n      this.treeItemCache.set(logItem, treeElement);\n    } else if (treeElement.parent) {\n      return;\n    }\n    this.treeOutline.appendChild(treeElement);\n  }\n\n  updateWindow(selectionWindow: {left: number, right: number}|null): void {\n    this.selectionWindow = selectionWindow;\n    this.update();\n  }\n\n  doUpdate(): Promise<void> {\n    if (!this.selectionWindow || !this.log.length) {\n      this.treeOutline.removeChildren();\n      return Promise.resolve();\n    }\n    const root = this.treeOutline.rootElement();\n    for (;;) {\n      const child = root.firstChild() as LogTreeElement;\n      if (!child || child.logItem.commandIndex >= this.selectionWindow.left) {\n        break;\n      }\n      root.removeChildAtIndex(0);\n    }\n    for (;;) {\n      const child = root.lastChild() as LogTreeElement;\n      if (!child || child.logItem.commandIndex < this.selectionWindow.right) {\n        break;\n      }\n      root.removeChildAtIndex(root.children().length - 1);\n    }\n    for (let i = this.selectionWindow.left, right = this.selectionWindow.right; i < right; ++i) {\n      this.appendLogItem(this.log[i]);\n    }\n    return Promise.resolve();\n  }\n}\n\nexport class LogTreeElement extends UI.TreeOutline.TreeElement {\n  readonly logItem: SDK.PaintProfiler.PaintProfilerLogItem;\n  private readonly ownerView: PaintProfilerCommandLogView;\n  private readonly filled: boolean;\n\n  constructor(ownerView: PaintProfilerCommandLogView, logItem: SDK.PaintProfiler.PaintProfilerLogItem) {\n    super('', Boolean(logItem.params));\n    this.logItem = logItem;\n    this.ownerView = ownerView;\n    this.filled = false;\n  }\n\n  onattach(): void {\n    this.update();\n  }\n\n  async onpopulate(): Promise<void> {\n    for (const param in this.logItem.params) {\n      LogPropertyTreeElement.appendLogPropertyItem(this, param, this.logItem.params[param]);\n    }\n  }\n\n  private paramToString(param: SDK.PaintProfiler.RawPaintProfilerLogItemParamValue, name: string): string {\n    if (typeof param !== 'object') {\n      return typeof param === 'string' && param.length > 100 ? name : JSON.stringify(param);\n    }\n    let str = '';\n    let keyCount = 0;\n    for (const key in param) {\n      if (++keyCount > 4 || typeof param[key] === 'object' ||\n          (typeof param[key] === 'string' && param[key].length > 100)) {\n        return name;\n      }\n      if (str) {\n        str += ', ';\n      }\n      str += param[key];\n    }\n    return str;\n  }\n\n  private paramsToString(params: SDK.PaintProfiler.RawPaintProfilerLogItemParams|null): string {\n    let str = '';\n    for (const key in params) {\n      if (str) {\n        str += ', ';\n      }\n      str += this.paramToString(params[key], key);\n    }\n    return str;\n  }\n\n  private update(): void {\n    const title = document.createDocumentFragment();\n    UI.UIUtils.createTextChild(title, this.logItem.method + '(' + this.paramsToString(this.logItem.params) + ')');\n    this.title = title;\n  }\n}\n\nexport class LogPropertyTreeElement extends UI.TreeOutline.TreeElement {\n  private property: {name: string, value: SDK.PaintProfiler.RawPaintProfilerLogItemParamValue};\n\n  constructor(property: {name: string, value: SDK.PaintProfiler.RawPaintProfilerLogItemParamValue}) {\n    super();\n    this.property = property;\n  }\n\n  static appendLogPropertyItem(\n      element: UI.TreeOutline.TreeElement, name: string,\n      value: SDK.PaintProfiler.RawPaintProfilerLogItemParamValue): void {\n    const treeElement = new LogPropertyTreeElement({name: name, value: value});\n    element.appendChild(treeElement);\n    if (value && typeof value === 'object') {\n      for (const property in value) {\n        LogPropertyTreeElement.appendLogPropertyItem(treeElement, property, value[property]);\n      }\n    }\n  }\n\n  onattach(): void {\n    const title = document.createDocumentFragment();\n    const nameElement = title.createChild('span', 'name');\n    nameElement.textContent = this.property.name;\n    const separatorElement = title.createChild('span', 'separator');\n    separatorElement.textContent = ': ';\n    if (this.property.value === null || typeof this.property.value !== 'object') {\n      const valueElement = title.createChild('span', 'value');\n      valueElement.textContent = JSON.stringify(this.property.value);\n      valueElement.classList.add('cm-js-' + (this.property.value === null ? 'null' : typeof this.property.value));\n    }\n    this.title = title;\n  }\n}\n\nexport class PaintProfilerCategory {\n  name: string;\n  title: string;\n  color: string;\n\n  constructor(name: string, title: string, color: string) {\n    this.name = name;\n    this.title = title;\n    this.color = color;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
