{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/layer_viewer/LayerViewHost.ts"],
  "sourcesContent": ["// Copyright 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\n\nimport type * as UI from '../../ui/legacy/legacy.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Layer View Host of the Layers panel\n  */\n  showInternalLayers: 'Show internal layers',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/layer_viewer/LayerViewHost.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport abstract class LayerView {\n  abstract hoverObject(selection: Selection|null): void;\n  abstract selectObject(selection: Selection|null): void;\n  abstract setLayerTree(layerTree: SDK.LayerTreeBase.LayerTreeBase|null): void;\n}\n\nexport class Selection {\n  readonly typeInternal: Type;\n  private readonly layerInternal: SDK.LayerTreeBase.Layer;\n\n  constructor(type: Type, layer: SDK.LayerTreeBase.Layer) {\n    this.typeInternal = type;\n    this.layerInternal = layer;\n  }\n\n  static isEqual(a: Selection|null, b: Selection|null): boolean {\n    return a && b ? a.isEqual(b) : a === b;\n  }\n\n  type(): Type {\n    return this.typeInternal;\n  }\n\n  layer(): SDK.LayerTreeBase.Layer {\n    return this.layerInternal;\n  }\n\n  isEqual(_other: Selection): boolean {\n    return false;\n  }\n}\n\nexport const enum Type {\n  Layer = 'Layer',\n  ScrollRect = 'ScrollRect',\n  Snapshot = 'Snapshot',\n}\n\nexport class LayerSelection extends Selection {\n  constructor(layer: SDK.LayerTreeBase.Layer) {\n    console.assert(Boolean(layer), 'LayerSelection with empty layer');\n    super(Type.Layer, layer);\n  }\n\n  isEqual(other: Selection): boolean {\n    return other.typeInternal === Type.Layer && other.layer().id() === this.layer().id();\n  }\n}\n\nexport class ScrollRectSelection extends Selection {\n  scrollRectIndex: number;\n  constructor(layer: SDK.LayerTreeBase.Layer, scrollRectIndex: number) {\n    super(Type.ScrollRect, layer);\n    this.scrollRectIndex = scrollRectIndex;\n  }\n\n  isEqual(other: Selection): boolean {\n    return other.typeInternal === Type.ScrollRect && this.layer().id() === other.layer().id() &&\n        this.scrollRectIndex === (other as ScrollRectSelection).scrollRectIndex;\n  }\n}\n\nexport class SnapshotSelection extends Selection {\n  private readonly snapshotInternal: SDK.PaintProfiler.SnapshotWithRect;\n  constructor(layer: SDK.LayerTreeBase.Layer, snapshot: SDK.PaintProfiler.SnapshotWithRect) {\n    super(Type.Snapshot, layer);\n    this.snapshotInternal = snapshot;\n  }\n\n  isEqual(other: Selection): boolean {\n    return other.typeInternal === Type.Snapshot && this.layer().id() === other.layer().id() &&\n        this.snapshotInternal === (other as SnapshotSelection).snapshotInternal;\n  }\n\n  snapshot(): SDK.PaintProfiler.SnapshotWithRect {\n    return this.snapshotInternal;\n  }\n}\n\nexport class LayerViewHost {\n  private readonly views: LayerView[];\n  private selectedObject: Selection|null;\n  private hoveredObject: Selection|null;\n  private showInternalLayersSettingInternal: Common.Settings.Setting<boolean>;\n  private snapshotLayers: Map<SDK.LayerTreeBase.Layer, SnapshotSelection>;\n  private target?: SDK.Target.Target|null;\n  constructor() {\n    this.views = [];\n    this.selectedObject = null;\n    this.hoveredObject = null;\n    this.showInternalLayersSettingInternal =\n        Common.Settings.Settings.instance().createSetting('layersShowInternalLayers', false);\n    this.snapshotLayers = new Map();\n  }\n\n  registerView(layerView: LayerView): void {\n    this.views.push(layerView);\n  }\n\n  setLayerSnapshotMap(snapshotLayers: Map<SDK.LayerTreeBase.Layer, SnapshotSelection>): void {\n    this.snapshotLayers = snapshotLayers;\n  }\n\n  getLayerSnapshotMap(): Map<SDK.LayerTreeBase.Layer, SnapshotSelection> {\n    return this.snapshotLayers;\n  }\n\n  setLayerTree(layerTree: SDK.LayerTreeBase.LayerTreeBase|null): void {\n    if (!layerTree) {\n      return;\n    }\n    this.target = layerTree.target();\n    const selectedLayer = this.selectedObject && this.selectedObject.layer();\n    if (selectedLayer && (!layerTree || !layerTree.layerById(selectedLayer.id()))) {\n      this.selectObject(null);\n    }\n    const hoveredLayer = this.hoveredObject && this.hoveredObject.layer();\n    if (hoveredLayer && (!layerTree || !layerTree.layerById(hoveredLayer.id()))) {\n      this.hoverObject(null);\n    }\n    for (const view of this.views) {\n      view.setLayerTree(layerTree);\n    }\n  }\n\n  hoverObject(selection: Selection|null): void {\n    if (Selection.isEqual(this.hoveredObject, selection)) {\n      return;\n    }\n    this.hoveredObject = selection;\n    const layer = selection && selection.layer();\n    this.toggleNodeHighlight(layer ? layer.nodeForSelfOrAncestor() : null);\n    for (const view of this.views) {\n      view.hoverObject(selection);\n    }\n  }\n\n  selectObject(selection: Selection|null): void {\n    if (Selection.isEqual(this.selectedObject, selection)) {\n      return;\n    }\n    this.selectedObject = selection;\n    for (const view of this.views) {\n      view.selectObject(selection);\n    }\n  }\n\n  selection(): Selection|null {\n    return this.selectedObject;\n  }\n\n  showContextMenu(contextMenu: UI.ContextMenu.ContextMenu, selection: Selection|null): void {\n    contextMenu.defaultSection().appendCheckboxItem(\n        i18nString(UIStrings.showInternalLayers), this.toggleShowInternalLayers.bind(this),\n        this.showInternalLayersSettingInternal.get());\n    const node = selection && selection.layer() && selection.layer().nodeForSelfOrAncestor();\n    if (node) {\n      contextMenu.appendApplicableItems(node);\n    }\n    void contextMenu.show();\n  }\n\n  showInternalLayersSetting(): Common.Settings.Setting<boolean> {\n    return this.showInternalLayersSettingInternal;\n  }\n\n  private toggleShowInternalLayers(): void {\n    this.showInternalLayersSettingInternal.set(!this.showInternalLayersSettingInternal.get());\n  }\n\n  private toggleNodeHighlight(node: SDK.DOMModel.DOMNode|null): void {\n    if (node) {\n      node.highlightForTwoSeconds();\n      return;\n    }\n    SDK.OverlayModel.OverlayModel.hideDOMNodeHighlight();\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
