{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/accessibility/AccessibilityNodeView.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport accessibilityNodeStyles from './accessibilityNode.css.js';\nimport {AXAttributes, AXNativeSourceTypes, AXSourceTypes} from './AccessibilityStrings.js';\nimport {AccessibilitySubPane} from './AccessibilitySubPane.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Accessibility Node View of the Accessibility panel\n  */\n  computedProperties: 'Computed Properties',\n  /**\n  *@description Text in Accessibility Node View of the Accessibility panel\n  */\n  noAccessibilityNode: 'No accessibility node',\n  /**\n  *@description Text in Accessibility Node View of the Accessibility panel\n  */\n  accessibilityNodeNotExposed: 'Accessibility node not exposed',\n  /**\n  *@description Text in Accessibility Node View of the Accessibility panel\n  */\n  invalidSource: 'Invalid source.',\n  /**\n  *@description Text in Accessibility Node View of the Accessibility panel\n  */\n  notSpecified: 'Not specified',\n  /**\n  *@description Text in Accessibility Node View of the Accessibility panel\n  */\n  noNodeWithThisId: 'No node with this ID.',\n  /**\n  *@description Text which appears in the Accessibility Node View of the Accessibility panel when an element is covered by a modal/popup window\n  */\n  elementIsHiddenBy: 'Element is hidden by active modal dialog:\\xA0',\n  /**\n  *@description Reason element in Accessibility Node View of the Accessibility panel\n  */\n  ancestorChildrenAreAll: 'Ancestor\\'s children are all presentational:\\xA0',\n  /**\n  *@description Reason element in Accessibility Node View of the Accessibility panel\n  @example {aria-hidden} PH1\n  */\n  elementIsPlaceholder: 'Element is {PH1}.',\n  /**\n  *@description Reason element in Accessibility Node View of the Accessibility panel\n  *@example {aria-hidden} PH1\n  *@example {true} PH2\n  */\n  placeholderIsPlaceholderOnAncestor: '{PH1} is {PH2} on ancestor:\\xA0',\n  /**\n  *@description Text in Accessibility Node View of the Accessibility panel\n  */\n  elementHasEmptyAltText: 'Element has empty alt text.',\n  /**\n  *@description Reason element in Accessibility Node View of the Accessibility panel\n  */\n  noTextContent: 'No text content.',\n  /**\n  *@description Reason element in Accessibility Node View of the Accessibility panel\n  */\n  elementIsInert: 'Element is `inert`.',\n  /**\n  *@description Reason element in Accessibility Node View of the Accessibility panel\n  */\n  elementIsInAnInertSubTree: 'Element is in an `inert` subtree from\\xA0',\n  /**\n  *@description Reason element in Accessibility Node View of the Accessibility panel\n  */\n  elementsInheritsPresentational: 'Element inherits presentational role from\\xA0',\n  /**\n  *@description Reason element in Accessibility Node View of the Accessibility panel\n  */\n  partOfLabelElement: 'Part of label element:\\xA0',\n  /**\n  *@description Reason element in Accessibility Node View of the Accessibility panel\n  */\n  labelFor: 'Label for\\xA0',\n  /**\n  *@description Reason element in Accessibility Node View of the Accessibility panel\n  */\n  elementIsNotRendered: 'Element is not rendered.',\n  /**\n  *@description Reason element in Accessibility Node View of the Accessibility panel\n  */\n  elementIsNotVisible: 'Element is not visible.',\n  /**\n  *@description Reason element in Accessibility Node View of the Accessibility panel. Indicates the\n  *ARIA role for this element, which will always have the format 'role=', but with different roles\n  *(which are not translated). https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\n  *@example {role=link} PH1\n  */\n  elementHasPlaceholder: 'Element has {PH1}.',\n  /**\n  *@description Reason element in Accessibility Node View of the Accessibility panel\n  */\n  elementIsPresentational: 'Element is presentational.',\n  /**\n  * @description Reason element in Accessibility Node View of the Accessibility pane. Here\n  * 'interesting' is from the perspective of the accessibility engine in Chrome. A non-interesting\n  * element doesn't have any special accessibility considerations\n  */\n  elementNotInteresting: 'Element not interesting for accessibility.',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/accessibility/AccessibilityNodeView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class AXNodeSubPane extends AccessibilitySubPane {\n  axNode: SDK.AccessibilityModel.AccessibilityNode|null;\n  private readonly noNodeInfo: Element;\n  private readonly ignoredInfo: Element;\n  private readonly treeOutline: UI.TreeOutline.TreeOutline;\n  private readonly ignoredReasonsTree: UI.TreeOutline.TreeOutline;\n  constructor() {\n    super(i18nString(UIStrings.computedProperties));\n\n    this.axNode = null;\n\n    this.contentElement.classList.add('ax-subpane');\n\n    this.noNodeInfo = this.createInfo(i18nString(UIStrings.noAccessibilityNode));\n    this.ignoredInfo = this.createInfo(i18nString(UIStrings.accessibilityNodeNotExposed), 'ax-ignored-info hidden');\n\n    this.treeOutline = this.createTreeOutline();\n    this.ignoredReasonsTree = this.createTreeOutline();\n\n    this.element.classList.add('accessibility-computed');\n\n    this.treeOutline.setFocusable(true);\n  }\n\n  setAXNode(axNode: SDK.AccessibilityModel.AccessibilityNode|null): void {\n    if (this.axNode === axNode) {\n      return;\n    }\n    this.axNode = axNode;\n\n    const treeOutline = this.treeOutline;\n    treeOutline.removeChildren();\n    const ignoredReasons = this.ignoredReasonsTree;\n    ignoredReasons.removeChildren();\n\n    if (!axNode) {\n      treeOutline.element.classList.add('hidden');\n      this.ignoredInfo.classList.add('hidden');\n      ignoredReasons.element.classList.add('hidden');\n\n      this.noNodeInfo.classList.remove('hidden');\n      this.element.classList.add('ax-ignored-node-pane');\n\n      return;\n    }\n\n    if (axNode.ignored()) {\n      this.noNodeInfo.classList.add('hidden');\n      treeOutline.element.classList.add('hidden');\n      this.element.classList.add('ax-ignored-node-pane');\n\n      this.ignoredInfo.classList.remove('hidden');\n      ignoredReasons.element.classList.remove('hidden');\n      function addIgnoredReason(property: Protocol.Accessibility.AXProperty): void {\n        ignoredReasons.appendChild(\n            new AXNodeIgnoredReasonTreeElement(property, axNode as SDK.AccessibilityModel.AccessibilityNode));\n      }\n      const ignoredReasonsArray = axNode.ignoredReasons() as Protocol.Accessibility.AXProperty[];\n      for (const reason of ignoredReasonsArray) {\n        addIgnoredReason(reason);\n      }\n      if (!ignoredReasons.firstChild()) {\n        ignoredReasons.element.classList.add('hidden');\n      }\n      return;\n    }\n    this.element.classList.remove('ax-ignored-node-pane');\n\n    this.ignoredInfo.classList.add('hidden');\n    ignoredReasons.element.classList.add('hidden');\n    this.noNodeInfo.classList.add('hidden');\n\n    treeOutline.element.classList.remove('hidden');\n\n    function addProperty(property: SDK.AccessibilityModel.CoreOrProtocolAxProperty): void {\n      treeOutline.appendChild(\n          new AXNodePropertyTreePropertyElement(property, axNode as SDK.AccessibilityModel.AccessibilityNode));\n    }\n\n    for (const property of axNode.coreProperties()) {\n      addProperty(property);\n    }\n\n    const role = axNode.role();\n    if (role) {\n      const roleProperty: SDK.AccessibilityModel.CoreOrProtocolAxProperty = {\n        name: SDK.AccessibilityModel.CoreAxPropertyName.Role,\n        value: role,\n      };\n      addProperty(roleProperty);\n    }\n    for (const property of axNode.properties() as Protocol.Accessibility.AXProperty[]) {\n      addProperty(property);\n    }\n\n    const firstNode = treeOutline.firstChild();\n    if (firstNode) {\n      firstNode.select(/* omitFocus= */ true, /* selectedByUser= */ false);\n    }\n  }\n\n  setNode(node: SDK.DOMModel.DOMNode|null): void {\n    super.setNode(node);\n    this.axNode = null;\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([accessibilityNodeStyles]);\n  }\n}\n\nexport class AXNodePropertyTreeElement extends UI.TreeOutline.TreeElement {\n  protected axNode: SDK.AccessibilityModel.AccessibilityNode;\n  constructor(axNode: SDK.AccessibilityModel.AccessibilityNode) {\n    // Pass an empty title, the title gets made later in onattach.\n    super('');\n    this.axNode = axNode;\n  }\n\n  static createSimpleValueElement(type: Protocol.Accessibility.AXValueType|null, value: string): Element {\n    let valueElement;\n    if (!type || type === Protocol.Accessibility.AXValueType.ValueUndefined ||\n        type === Protocol.Accessibility.AXValueType.ComputedString) {\n      valueElement = document.createElement('span');\n    } else {\n      valueElement = document.createElement('span');\n      valueElement.classList.add('monospace');\n    }\n    let valueText;\n    const isStringProperty = type && StringProperties.has(type);\n    if (isStringProperty) {\n      // Render \\n as a nice unicode cr symbol.\n      valueText = '\"' + value.replace(/\\n/g, '\\u21B5') + '\"';\n    } else {\n      valueText = String(value);\n    }\n\n    if (type && type in TypeStyles) {\n      valueElement.classList.add(TypeStyles[type]);\n    }\n\n    valueElement.setTextContentTruncatedIfNeeded(valueText || '');\n\n    UI.Tooltip.Tooltip.install(valueElement, String(value) || '');\n\n    return valueElement;\n  }\n\n  static createExclamationMark(tooltip: string): Element {\n    const exclamationElement = document.createElement('span', {is: 'dt-icon-label'}) as UI.UIUtils.DevToolsIconLabel;\n    exclamationElement.type = 'smallicon-warning';\n    UI.Tooltip.Tooltip.install(exclamationElement, tooltip);\n    return exclamationElement;\n  }\n\n  appendNameElement(name: string): void {\n    const nameElement = document.createElement('span');\n    if (name in AXAttributes) {\n      // @ts-ignore TS can't cast name here but we checked it's valid.\n      const attribute = AXAttributes[name];\n      nameElement.textContent = attribute.name();\n      UI.Tooltip.Tooltip.install(nameElement, attribute.description());\n      nameElement.classList.add('ax-readable-name');\n    } else {\n      nameElement.textContent = name;\n      nameElement.classList.add('ax-name');\n      nameElement.classList.add('monospace');\n    }\n    this.listItemElement.appendChild(nameElement);\n  }\n\n  appendValueElement(value: Protocol.Accessibility.AXValue): void {\n    if (value.type === Protocol.Accessibility.AXValueType.Idref ||\n        value.type === Protocol.Accessibility.AXValueType.Node ||\n        value.type === Protocol.Accessibility.AXValueType.IdrefList ||\n        value.type === Protocol.Accessibility.AXValueType.NodeList) {\n      this.appendRelatedNodeListValueElement(value);\n      return;\n    }\n    if (value.sources) {\n      const sources = value.sources;\n      for (let i = 0; i < sources.length; i++) {\n        const source = sources[i];\n        const child = new AXValueSourceTreeElement(source, this.axNode);\n        this.appendChild(child);\n      }\n      this.expand();\n    }\n    const element = AXNodePropertyTreeElement.createSimpleValueElement(value.type, String(value.value));\n    this.listItemElement.appendChild(element);\n  }\n\n  appendRelatedNode(relatedNode: Protocol.Accessibility.AXRelatedNode, _index: number): void {\n    const deferredNode =\n        new SDK.DOMModel.DeferredDOMNode(this.axNode.accessibilityModel().target(), relatedNode.backendDOMNodeId);\n    const nodeTreeElement =\n        new AXRelatedNodeSourceTreeElement({deferredNode: deferredNode, idref: undefined}, relatedNode);\n    this.appendChild(nodeTreeElement);\n  }\n\n  appendRelatedNodeInline(relatedNode: Protocol.Accessibility.AXRelatedNode): void {\n    const deferredNode =\n        new SDK.DOMModel.DeferredDOMNode(this.axNode.accessibilityModel().target(), relatedNode.backendDOMNodeId);\n    const linkedNode = new AXRelatedNodeElement({deferredNode: deferredNode, idref: undefined}, relatedNode);\n    this.listItemElement.appendChild(linkedNode.render());\n  }\n\n  appendRelatedNodeListValueElement(value: Protocol.Accessibility.AXValue): void {\n    if (value.relatedNodes && value.relatedNodes.length === 1 && !value.value) {\n      this.appendRelatedNodeInline(value.relatedNodes[0]);\n      return;\n    }\n\n    if (value.relatedNodes) {\n      value.relatedNodes.forEach(this.appendRelatedNode, this);\n    }\n    if (value.relatedNodes && value.relatedNodes.length <= 3) {\n      this.expand();\n    } else {\n      this.collapse();\n    }\n  }\n}\n\nexport const TypeStyles: {\n  [x: string]: string,\n} = {\n  attribute: 'ax-value-string',\n  boolean: 'object-value-boolean',\n  booleanOrUndefined: 'object-value-boolean',\n  computedString: 'ax-readable-string',\n  idref: 'ax-value-string',\n  idrefList: 'ax-value-string',\n  integer: 'object-value-number',\n  internalRole: 'ax-internal-role',\n  number: 'ax-value-number',\n  role: 'ax-role',\n  string: 'ax-value-string',\n  tristate: 'object-value-boolean',\n  valueUndefined: 'ax-value-undefined',\n};\n\nexport const StringProperties = new Set<Protocol.Accessibility.AXValueType>([\n  Protocol.Accessibility.AXValueType.String,\n  Protocol.Accessibility.AXValueType.ComputedString,\n  Protocol.Accessibility.AXValueType.IdrefList,\n  Protocol.Accessibility.AXValueType.Idref,\n]);\n\nexport class AXNodePropertyTreePropertyElement extends AXNodePropertyTreeElement {\n  private readonly property: SDK.AccessibilityModel.CoreOrProtocolAxProperty;\n  toggleOnClick: boolean;\n  constructor(\n      property: SDK.AccessibilityModel.CoreOrProtocolAxProperty, axNode: SDK.AccessibilityModel.AccessibilityNode) {\n    super(axNode);\n\n    this.property = property;\n    this.toggleOnClick = true;\n\n    this.listItemElement.classList.add('property');\n  }\n\n  onattach(): void {\n    this.update();\n  }\n\n  private update(): void {\n    this.listItemElement.removeChildren();\n\n    this.appendNameElement(this.property.name);\n\n    this.listItemElement.createChild('span', 'separator').textContent = ':\\xA0';\n\n    this.appendValueElement(this.property.value);\n  }\n}\n\nexport class AXValueSourceTreeElement extends AXNodePropertyTreeElement {\n  private readonly source: Protocol.Accessibility.AXValueSource;\n  constructor(source: Protocol.Accessibility.AXValueSource, axNode: SDK.AccessibilityModel.AccessibilityNode) {\n    super(axNode);\n    this.source = source;\n  }\n\n  onattach(): void {\n    this.update();\n  }\n\n  appendRelatedNodeWithIdref(relatedNode: Protocol.Accessibility.AXRelatedNode, idref: string): void {\n    const deferredNode =\n        new SDK.DOMModel.DeferredDOMNode(this.axNode.accessibilityModel().target(), relatedNode.backendDOMNodeId);\n    const nodeTreeElement = new AXRelatedNodeSourceTreeElement({deferredNode: deferredNode, idref: idref}, relatedNode);\n    this.appendChild(nodeTreeElement);\n  }\n\n  appendIDRefValueElement(value: Protocol.Accessibility.AXValue): void {\n    if (value.value === null) {\n      return;\n    }\n\n    const relatedNodes = value.relatedNodes || [];\n\n    // Content attribute is empty, but if the relationship was set via the IDL\n    // then there may be related nodes.\n    if (value.value === '') {\n      for (const node of relatedNodes) {\n        const idref = node.idref || '';\n        this.appendRelatedNodeWithIdref(node, idref);\n      }\n      return;\n    }\n\n    const idrefs = value.value.trim().split(/\\s+/);\n    for (const idref of idrefs) {\n      const matchingNode = relatedNodes.find(node => node.idref === idref);\n\n      // If there is exactly one related node, it is rendered on the same line\n      // of the label. If there are more, they are each rendered on their own\n      // line below the label.\n      // TODO(aboxhall): exclamation mark if not idreflist type\n      if (matchingNode) {\n        this.appendRelatedNodeWithIdref(matchingNode, idref);\n      } else if (idrefs.length === 1) {\n        this.listItemElement.appendChild(new AXRelatedNodeElement({deferredNode: undefined, idref: idref}).render());\n      } else {\n        this.appendChild(new AXRelatedNodeSourceTreeElement({deferredNode: undefined, idref: idref}));\n      }\n    }\n  }\n\n  appendRelatedNodeListValueElement(value: Protocol.Accessibility.AXValue): void {\n    const relatedNodes = value.relatedNodes;\n    const numNodes = relatedNodes ? relatedNodes.length : 0;\n\n    if (value.type === Protocol.Accessibility.AXValueType.IdrefList ||\n        value.type === Protocol.Accessibility.AXValueType.Idref) {\n      this.appendIDRefValueElement(value);\n    } else {\n      super.appendRelatedNodeListValueElement(value);\n    }\n\n    if (numNodes <= 3) {\n      this.expand();\n    } else {\n      this.collapse();\n    }\n  }\n\n  appendSourceNameElement(source: Protocol.Accessibility.AXValueSource): void {\n    const nameElement = document.createElement('span');\n    const type = source.type;\n    switch (type) {\n      case Protocol.Accessibility.AXValueSourceType.Attribute:\n      case Protocol.Accessibility.AXValueSourceType.Placeholder:\n      case Protocol.Accessibility.AXValueSourceType.RelatedElement:\n        if (source.nativeSource) {\n          const nativeSource = source.nativeSource;\n          nameElement.textContent = AXNativeSourceTypes[nativeSource].name();\n          UI.Tooltip.Tooltip.install(nameElement, AXNativeSourceTypes[nativeSource].description());\n          nameElement.classList.add('ax-readable-name');\n          break;\n        }\n        nameElement.textContent = source.attribute || null;\n        nameElement.classList.add('ax-name');\n        nameElement.classList.add('monospace');\n        break;\n      default:\n        if (type in AXSourceTypes) {\n          nameElement.textContent = AXSourceTypes[type].name();\n          UI.Tooltip.Tooltip.install(nameElement, AXSourceTypes[type].description());\n          nameElement.classList.add('ax-readable-name');\n        } else {\n          console.warn(type, 'not in AXSourceTypes');\n          nameElement.textContent = type;\n        }\n    }\n    this.listItemElement.appendChild(nameElement);\n  }\n\n  private update(): void {\n    this.listItemElement.removeChildren();\n\n    if (this.source.invalid) {\n      const exclamationMark = AXNodePropertyTreeElement.createExclamationMark(i18nString(UIStrings.invalidSource));\n      this.listItemElement.appendChild(exclamationMark);\n      this.listItemElement.classList.add('ax-value-source-invalid');\n    } else if (this.source.superseded) {\n      this.listItemElement.classList.add('ax-value-source-unused');\n    }\n\n    this.appendSourceNameElement(this.source);\n\n    this.listItemElement.createChild('span', 'separator').textContent = ':\\xA0';\n\n    if (this.source.attributeValue) {\n      this.appendValueElement(this.source.attributeValue);\n      UI.UIUtils.createTextChild(this.listItemElement, '\\xA0');\n    } else if (this.source.nativeSourceValue) {\n      this.appendValueElement(this.source.nativeSourceValue);\n      UI.UIUtils.createTextChild(this.listItemElement, '\\xA0');\n      if (this.source.value) {\n        this.appendValueElement(this.source.value);\n      }\n    } else if (this.source.value) {\n      this.appendValueElement(this.source.value);\n    } else {\n      const valueElement = AXNodePropertyTreeElement.createSimpleValueElement(\n          Protocol.Accessibility.AXValueType.ValueUndefined, i18nString(UIStrings.notSpecified));\n      this.listItemElement.appendChild(valueElement);\n      this.listItemElement.classList.add('ax-value-source-unused');\n    }\n\n    if (this.source.value && this.source.superseded) {\n      this.listItemElement.classList.add('ax-value-source-superseded');\n    }\n  }\n}\n\nexport class AXRelatedNodeSourceTreeElement extends UI.TreeOutline.TreeElement {\n  private value: Protocol.Accessibility.AXRelatedNode|undefined;\n  private readonly axRelatedNodeElement: AXRelatedNodeElement;\n\n  constructor(\n      node: {\n        deferredNode?: SDK.DOMModel.DeferredDOMNode,\n        idref?: string,\n      },\n      value?: Protocol.Accessibility.AXRelatedNode) {\n    super('');\n\n    this.value = value;\n    this.axRelatedNodeElement = new AXRelatedNodeElement(node, value);\n    this.selectable = true;\n  }\n\n  onattach(): void {\n    this.listItemElement.appendChild(this.axRelatedNodeElement.render());\n    if (!this.value) {\n      return;\n    }\n\n    if (this.value.text) {\n      this.listItemElement.appendChild(AXNodePropertyTreeElement.createSimpleValueElement(\n          Protocol.Accessibility.AXValueType.ComputedString, this.value.text));\n    }\n  }\n\n  onenter(): boolean {\n    this.axRelatedNodeElement.revealNode();\n    return true;\n  }\n}\n\nexport class AXRelatedNodeElement {\n  private readonly deferredNode: SDK.DOMModel.DeferredDOMNode|undefined;\n  private readonly idref: string|undefined;\n  private readonly value: Protocol.Accessibility.AXRelatedNode|undefined;\n  constructor(\n      node: {\n        deferredNode?: SDK.DOMModel.DeferredDOMNode,\n        idref?: string,\n      },\n      value?: Protocol.Accessibility.AXRelatedNode) {\n    this.deferredNode = node.deferredNode;\n    this.idref = node.idref;\n    this.value = value;\n  }\n\n  render(): Element {\n    const element = document.createElement('span');\n\n    if (this.deferredNode) {\n      const valueElement = document.createElement('span');\n      element.appendChild(valueElement);\n      void this.deferredNode.resolvePromise().then(node => {\n        void Common.Linkifier.Linkifier.linkify(node, {tooltip: undefined, preventKeyboardFocus: true})\n            .then(linkfied => valueElement.appendChild(linkfied));\n      });\n    } else if (this.idref) {\n      element.classList.add('invalid');\n      const valueElement = AXNodePropertyTreeElement.createExclamationMark(i18nString(UIStrings.noNodeWithThisId));\n      UI.UIUtils.createTextChild(valueElement, this.idref);\n      element.appendChild(valueElement);\n    }\n\n    return element;\n  }\n\n  /**\n   * Attempts to cause the node referred to by the related node to be selected in the tree.\n   */\n  revealNode(): void {\n    if (this.deferredNode) {\n      void this.deferredNode.resolvePromise().then(node => Common.Revealer.reveal(node));\n    }\n  }\n}\n\nexport class AXNodeIgnoredReasonTreeElement extends AXNodePropertyTreeElement {\n  private property: Protocol.Accessibility.AXProperty;\n  toggleOnClick: boolean;\n  private reasonElement?: Element|null;\n\n  constructor(property: Protocol.Accessibility.AXProperty, axNode: SDK.AccessibilityModel.AccessibilityNode) {\n    super(axNode);\n    this.property = property;\n    this.axNode = axNode;\n    this.toggleOnClick = true;\n    this.selectable = false;\n  }\n\n  static createReasonElement(reason: string|null, axNode: SDK.AccessibilityModel.AccessibilityNode|null): Element|null {\n    let reasonElement: Element|null = null;\n    switch (reason) {\n      case 'activeModalDialog':\n        reasonElement = i18n.i18n.getFormatLocalizedString(str_, UIStrings.elementIsHiddenBy, {});\n        break;\n      case 'ancestorIsLeafNode':\n        reasonElement = i18n.i18n.getFormatLocalizedString(str_, UIStrings.ancestorChildrenAreAll, {});\n        break;\n      case 'ariaHiddenElement': {\n        const ariaHiddenSpan = document.createElement('span', {is: 'source-code'}).textContent = 'aria-hidden';\n        reasonElement = i18n.i18n.getFormatLocalizedString(str_, UIStrings.elementIsPlaceholder, {PH1: ariaHiddenSpan});\n        break;\n      }\n      case 'ariaHiddenSubtree': {\n        const ariaHiddenSpan = document.createElement('span', {is: 'source-code'}).textContent = 'aria-hidden';\n        const trueSpan = document.createElement('span', {is: 'source-code'}).textContent = 'true';\n        reasonElement = i18n.i18n.getFormatLocalizedString(\n            str_, UIStrings.placeholderIsPlaceholderOnAncestor, {PH1: ariaHiddenSpan, PH2: trueSpan});\n        break;\n      }\n      case 'emptyAlt':\n        reasonElement = i18n.i18n.getFormatLocalizedString(str_, UIStrings.elementHasEmptyAltText, {});\n        break;\n      case 'emptyText':\n        reasonElement = i18n.i18n.getFormatLocalizedString(str_, UIStrings.noTextContent, {});\n        break;\n      case 'inertElement':\n        reasonElement = i18n.i18n.getFormatLocalizedString(str_, UIStrings.elementIsInert, {});\n        break;\n      case 'inertSubtree':\n        reasonElement = i18n.i18n.getFormatLocalizedString(str_, UIStrings.elementIsInAnInertSubTree, {});\n        break;\n      case 'inheritsPresentation':\n        reasonElement = i18n.i18n.getFormatLocalizedString(str_, UIStrings.elementsInheritsPresentational, {});\n        break;\n      case 'labelContainer':\n        reasonElement = i18n.i18n.getFormatLocalizedString(str_, UIStrings.partOfLabelElement, {});\n        break;\n      case 'labelFor':\n        reasonElement = i18n.i18n.getFormatLocalizedString(str_, UIStrings.labelFor, {});\n        break;\n      case 'notRendered':\n        reasonElement = i18n.i18n.getFormatLocalizedString(str_, UIStrings.elementIsNotRendered, {});\n        break;\n      case 'notVisible':\n        reasonElement = i18n.i18n.getFormatLocalizedString(str_, UIStrings.elementIsNotVisible, {});\n        break;\n      case 'presentationalRole': {\n        const role = axNode && axNode.role()?.value || '';\n        const rolePresentationSpan = document.createElement('span', {is: 'source-code'}).textContent = 'role=' + role;\n        reasonElement =\n            i18n.i18n.getFormatLocalizedString(str_, UIStrings.elementHasPlaceholder, {PH1: rolePresentationSpan});\n        break;\n      }\n      case 'probablyPresentational':\n        reasonElement = i18n.i18n.getFormatLocalizedString(str_, UIStrings.elementIsPresentational, {});\n        break;\n      case 'uninteresting':\n        reasonElement = i18n.i18n.getFormatLocalizedString(str_, UIStrings.elementNotInteresting, {});\n        break;\n    }\n    if (reasonElement) {\n      reasonElement.classList.add('ax-reason');\n    }\n    return reasonElement;\n  }\n\n  onattach(): void {\n    this.listItemElement.removeChildren();\n\n    this.reasonElement = AXNodeIgnoredReasonTreeElement.createReasonElement(this.property.name, this.axNode);\n    if (this.reasonElement) {\n      this.listItemElement.appendChild(this.reasonElement);\n    }\n\n    const value = this.property.value;\n    if (value.type === Protocol.Accessibility.AXValueType.Idref) {\n      this.appendRelatedNodeListValueElement(value);\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
