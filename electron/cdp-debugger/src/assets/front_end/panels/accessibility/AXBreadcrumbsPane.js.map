{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/accessibility/AXBreadcrumbsPane.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Feedback from '../../ui/components/panel_feedback/panel_feedback.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport axBreadcrumbsStyles from './axBreadcrumbs.css.js';\n\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport type {AccessibilitySidebarView} from './AccessibilitySidebarView.js';\nimport {AccessibilitySubPane} from './AccessibilitySubPane.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in AXBreadcrumbs Pane of the Accessibility panel\n  */\n  accessibilityTree: 'Accessibility Tree',\n  /**\n  *@description Text to scroll the displayed content into view\n  */\n  scrollIntoView: 'Scroll into view',\n  /**\n  *@description Ignored node element text content in AXBreadcrumbs Pane of the Accessibility panel\n  */\n  ignored: 'Ignored',\n  /**\n  *@description Name for experimental tree toggle.\n  */\n  fullTreeExperimentName: 'Enable full-page accessibility tree',\n  /**\n  *@description Description text for experimental tree toggle.\n  */\n  fullTreeExperimentDescription: 'The accessibility tree moved to the top right corner of the DOM tree.',\n  /**\n  *@description Message saying that DevTools must be restarted before the experiment is enabled.\n  */\n  reloadRequired: 'Reload required before the change takes effect.',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/accessibility/AXBreadcrumbsPane.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class AXBreadcrumbsPane extends AccessibilitySubPane {\n  private readonly axSidebarView: AccessibilitySidebarView;\n  private preselectedBreadcrumb: AXBreadcrumb|null;\n  private inspectedNodeBreadcrumb: AXBreadcrumb|null;\n  private collapsingBreadcrumbId: number;\n  private hoveredBreadcrumb: AXBreadcrumb|null;\n  private readonly rootElement: HTMLElement;\n  #legacyTreeDisabled = false;\n\n  constructor(axSidebarView: AccessibilitySidebarView) {\n    super(i18nString(UIStrings.accessibilityTree));\n\n    this.element.classList.add('ax-subpane');\n    this.element.tabIndex = -1;\n\n    this.axSidebarView = axSidebarView;\n    this.preselectedBreadcrumb = null;\n    this.inspectedNodeBreadcrumb = null;\n\n    this.collapsingBreadcrumbId = -1;\n\n    this.rootElement = this.element.createChild('div', 'ax-breadcrumbs');\n\n    this.hoveredBreadcrumb = null;\n    const previewToggle = new Feedback.PreviewToggle.PreviewToggle();\n    const name = i18nString(UIStrings.fullTreeExperimentName);\n    const experiment = Root.Runtime.ExperimentName.FULL_ACCESSIBILITY_TREE;\n    const onChangeCallback: (checked: boolean) => void = checked => {\n      Host.userMetrics.experimentChanged(experiment, checked);\n      UI.InspectorView.InspectorView.instance().displayReloadRequiredWarning(i18nString(UIStrings.reloadRequired));\n    };\n    if (Root.Runtime.experiments.isEnabled(experiment)) {\n      this.#legacyTreeDisabled = true;\n      const feedbackURL = 'https://g.co/devtools/a11y-tree-feedback';\n      previewToggle.data = {\n        name,\n        helperText: i18nString(UIStrings.fullTreeExperimentDescription),\n        feedbackURL,\n        experiment,\n        onChangeCallback,\n      };\n      this.element.appendChild(previewToggle);\n      return;\n    }\n    previewToggle.data = {name, helperText: null, feedbackURL: null, experiment, onChangeCallback};\n    this.element.prepend(previewToggle);\n\n    UI.ARIAUtils.markAsTree(this.rootElement);\n\n    this.rootElement.addEventListener('keydown', this.onKeyDown.bind(this), true);\n    this.rootElement.addEventListener('mousemove', this.onMouseMove.bind(this), false);\n    this.rootElement.addEventListener('mouseleave', this.onMouseLeave.bind(this), false);\n    this.rootElement.addEventListener('click', this.onClick.bind(this), false);\n    this.rootElement.addEventListener('contextmenu', this.contextMenuEventFired.bind(this), false);\n    this.rootElement.addEventListener('focusout', this.onFocusOut.bind(this), false);\n  }\n\n  focus(): void {\n    if (this.inspectedNodeBreadcrumb) {\n      this.inspectedNodeBreadcrumb.nodeElement().focus();\n    } else {\n      this.element.focus();\n    }\n  }\n\n  setAXNode(axNode: SDK.AccessibilityModel.AccessibilityNode|null): void {\n    if (this.#legacyTreeDisabled) {\n      return;\n    }\n    const hadFocus = this.element.hasFocus();\n    super.setAXNode(axNode);\n\n    this.rootElement.removeChildren();\n\n    if (!axNode) {\n      return;\n    }\n\n    const ancestorChain = [];\n    let ancestor: (SDK.AccessibilityModel.AccessibilityNode|null)|SDK.AccessibilityModel.AccessibilityNode = axNode;\n    while (ancestor) {\n      ancestorChain.push(ancestor);\n      ancestor = ancestor.parentNode();\n    }\n    ancestorChain.reverse();\n\n    let depth = 0;\n    let parent: AXBreadcrumb|null = null;\n    this.inspectedNodeBreadcrumb = null;\n    for (ancestor of ancestorChain) {\n      if (ancestor !== axNode && ancestor.ignored() && ancestor.parentNode()) {\n        continue;\n      }\n      const breadcrumb = new AXBreadcrumb(ancestor, depth, (ancestor === axNode));\n      if (parent) {\n        parent.appendChild(breadcrumb);\n      } else {\n        this.rootElement.appendChild(breadcrumb.element());\n      }\n      parent = breadcrumb;\n      depth++;\n      this.inspectedNodeBreadcrumb = breadcrumb;\n    }\n\n    if (this.inspectedNodeBreadcrumb) {\n      this.inspectedNodeBreadcrumb.setPreselected(true, hadFocus);\n    }\n\n    this.setPreselectedBreadcrumb(this.inspectedNodeBreadcrumb);\n\n    function append(\n        parentBreadcrumb: AXBreadcrumb, axNode: SDK.AccessibilityModel.AccessibilityNode, localDepth: number): void {\n      if (axNode.ignored()) {\n        axNode.children().map(child => append(parentBreadcrumb, child, localDepth));\n        return;\n      }\n      const childBreadcrumb = new AXBreadcrumb(axNode, localDepth, false);\n      parentBreadcrumb.appendChild(childBreadcrumb);\n\n      // In most cases there will be no children here, but there are some special cases.\n      for (const child of axNode.children()) {\n        append(childBreadcrumb, child, localDepth + 1);\n      }\n    }\n\n    if (this.inspectedNodeBreadcrumb && !axNode.ignored()) {\n      for (const child of axNode.children()) {\n        append(this.inspectedNodeBreadcrumb, child, depth);\n        if (child.backendDOMNodeId() === this.collapsingBreadcrumbId) {\n          this.setPreselectedBreadcrumb(this.inspectedNodeBreadcrumb.lastChild());\n        }\n      }\n    }\n    this.collapsingBreadcrumbId = -1;\n  }\n\n  willHide(): void {\n    this.setPreselectedBreadcrumb(null);\n  }\n\n  private onKeyDown(event: Event): void {\n    const preselectedBreadcrumb = this.preselectedBreadcrumb;\n    if (!preselectedBreadcrumb) {\n      return;\n    }\n    const keyboardEvent = event as KeyboardEvent;\n    if (!keyboardEvent.composedPath().some(element => element === preselectedBreadcrumb.element())) {\n      return;\n    }\n    if (keyboardEvent.shiftKey || keyboardEvent.metaKey || keyboardEvent.ctrlKey) {\n      return;\n    }\n\n    let handled = false;\n    if (keyboardEvent.key === 'ArrowUp' && !keyboardEvent.altKey) {\n      handled = this.preselectPrevious();\n    } else if ((keyboardEvent.key === 'ArrowDown') && !keyboardEvent.altKey) {\n      handled = this.preselectNext();\n    } else if (keyboardEvent.key === 'ArrowLeft' && !keyboardEvent.altKey) {\n      if (preselectedBreadcrumb.hasExpandedChildren()) {\n        this.collapseBreadcrumb(preselectedBreadcrumb);\n      } else {\n        handled = this.preselectParent();\n      }\n    } else if ((keyboardEvent.key === 'Enter' ||\n                (keyboardEvent.key === 'ArrowRight' && !keyboardEvent.altKey &&\n                 preselectedBreadcrumb.axNode().hasOnlyUnloadedChildren()))) {\n      handled = this.inspectDOMNode(preselectedBreadcrumb.axNode());\n    }\n\n    if (handled) {\n      keyboardEvent.consume(true);\n    }\n  }\n\n  private preselectPrevious(): boolean {\n    if (!this.preselectedBreadcrumb) {\n      return false;\n    }\n    const previousBreadcrumb = this.preselectedBreadcrumb.previousBreadcrumb();\n    if (!previousBreadcrumb) {\n      return false;\n    }\n    this.setPreselectedBreadcrumb(previousBreadcrumb);\n    return true;\n  }\n\n  private preselectNext(): boolean {\n    if (!this.preselectedBreadcrumb) {\n      return false;\n    }\n    const nextBreadcrumb = this.preselectedBreadcrumb.nextBreadcrumb();\n    if (!nextBreadcrumb) {\n      return false;\n    }\n    this.setPreselectedBreadcrumb(nextBreadcrumb);\n    return true;\n  }\n\n  private preselectParent(): boolean {\n    if (!this.preselectedBreadcrumb) {\n      return false;\n    }\n    const parentBreadcrumb = this.preselectedBreadcrumb.parentBreadcrumb();\n    if (!parentBreadcrumb) {\n      return false;\n    }\n    this.setPreselectedBreadcrumb(parentBreadcrumb);\n    return true;\n  }\n\n  private setPreselectedBreadcrumb(breadcrumb: AXBreadcrumb|null): void {\n    if (breadcrumb === this.preselectedBreadcrumb) {\n      return;\n    }\n    const hadFocus = this.element.hasFocus();\n    if (this.preselectedBreadcrumb) {\n      this.preselectedBreadcrumb.setPreselected(false, hadFocus);\n    }\n\n    if (breadcrumb) {\n      this.preselectedBreadcrumb = breadcrumb;\n    } else {\n      this.preselectedBreadcrumb = this.inspectedNodeBreadcrumb;\n    }\n    if (this.preselectedBreadcrumb) {\n      this.preselectedBreadcrumb.setPreselected(true, hadFocus);\n    }\n    if (!breadcrumb && hadFocus) {\n      SDK.OverlayModel.OverlayModel.hideDOMNodeHighlight();\n    }\n  }\n\n  private collapseBreadcrumb(breadcrumb: AXBreadcrumb): void {\n    if (!breadcrumb.parentBreadcrumb()) {\n      return;\n    }\n    const backendNodeId = breadcrumb.axNode().backendDOMNodeId();\n    if (backendNodeId !== null) {\n      this.collapsingBreadcrumbId = backendNodeId;\n    }\n    const parentBreadcrumb = breadcrumb.parentBreadcrumb();\n    if (parentBreadcrumb) {\n      this.inspectDOMNode(parentBreadcrumb.axNode());\n    }\n  }\n\n  private onMouseLeave(_event: Event): void {\n    this.setHoveredBreadcrumb(null);\n  }\n\n  private onMouseMove(event: Event): void {\n    const target = event.target as Element | null;\n    if (!target) {\n      return;\n    }\n    const breadcrumbElement = target.enclosingNodeOrSelfWithClass('ax-breadcrumb');\n    if (!breadcrumbElement) {\n      this.setHoveredBreadcrumb(null);\n      return;\n    }\n    const breadcrumb = elementsToAXBreadcrumb.get(breadcrumbElement);\n    if (!breadcrumb || !breadcrumb.isDOMNode()) {\n      return;\n    }\n    this.setHoveredBreadcrumb(breadcrumb);\n  }\n\n  private onFocusOut(event: Event): void {\n    if (!this.preselectedBreadcrumb || event.target !== this.preselectedBreadcrumb.nodeElement()) {\n      return;\n    }\n    this.setPreselectedBreadcrumb(null);\n  }\n\n  private onClick(event: Event): void {\n    const target = event.target as Element | null;\n    if (!target) {\n      return;\n    }\n    const breadcrumbElement = target.enclosingNodeOrSelfWithClass('ax-breadcrumb');\n    if (!breadcrumbElement) {\n      this.setHoveredBreadcrumb(null);\n      return;\n    }\n    const breadcrumb = elementsToAXBreadcrumb.get(breadcrumbElement);\n    if (!breadcrumb) {\n      return;\n    }\n    if (breadcrumb.inspected()) {\n      // This will collapse and preselect/focus the breadcrumb.\n      this.collapseBreadcrumb(breadcrumb);\n      breadcrumb.nodeElement().focus();\n      return;\n    }\n    if (!breadcrumb.isDOMNode()) {\n      return;\n    }\n    this.inspectDOMNode(breadcrumb.axNode());\n  }\n\n  private setHoveredBreadcrumb(breadcrumb: AXBreadcrumb|null): void {\n    if (breadcrumb === this.hoveredBreadcrumb) {\n      return;\n    }\n\n    if (this.hoveredBreadcrumb) {\n      this.hoveredBreadcrumb.setHovered(false);\n    }\n    const node = this.node();\n    if (breadcrumb) {\n      breadcrumb.setHovered(true);\n    } else if (node && node.id) {\n      // Highlight and scroll into view the currently inspected node.\n      node.domModel().overlayModel().nodeHighlightRequested({nodeId: node.id});\n    }\n\n    this.hoveredBreadcrumb = breadcrumb;\n  }\n\n  private inspectDOMNode(axNode: SDK.AccessibilityModel.AccessibilityNode): boolean {\n    if (!axNode.isDOMNode()) {\n      return false;\n    }\n\n    const deferredNode = axNode.deferredDOMNode();\n    if (deferredNode) {\n      deferredNode.resolve(domNode => {\n        this.axSidebarView.setNode(domNode, true /* fromAXTree */);\n        void Common.Revealer.reveal(domNode, true /* omitFocus */);\n      });\n    }\n\n    return true;\n  }\n\n  private contextMenuEventFired(event: Event): void {\n    const target = event.target as Element | null;\n    if (!target) {\n      return;\n    }\n    const breadcrumbElement = target.enclosingNodeOrSelfWithClass('ax-breadcrumb');\n    if (!breadcrumbElement) {\n      return;\n    }\n\n    const breadcrumb = elementsToAXBreadcrumb.get(breadcrumbElement);\n    if (!breadcrumb) {\n      return;\n    }\n\n    const axNode = breadcrumb.axNode();\n    if (!axNode.isDOMNode() || !axNode.deferredDOMNode()) {\n      return;\n    }\n\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    contextMenu.viewSection().appendItem(i18nString(UIStrings.scrollIntoView), () => {\n      const deferredNode = axNode.deferredDOMNode();\n      if (!deferredNode) {\n        return;\n      }\n      void deferredNode.resolvePromise().then(domNode => {\n        if (!domNode) {\n          return;\n        }\n        void domNode.scrollIntoView();\n      });\n    });\n\n    const deferredNode = axNode.deferredDOMNode();\n    if (deferredNode) {\n      contextMenu.appendApplicableItems(deferredNode);\n    }\n    void contextMenu.show();\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([axBreadcrumbsStyles]);\n  }\n}\n\nconst elementsToAXBreadcrumb = new WeakMap<Element, AXBreadcrumb>();\n\nexport class AXBreadcrumb {\n  private readonly axNodeInternal: SDK.AccessibilityModel.AccessibilityNode;\n  private readonly elementInternal: HTMLDivElement;\n  private nodeElementInternal: HTMLDivElement;\n  private readonly nodeWrapper: HTMLDivElement;\n  private readonly selectionElement: HTMLDivElement;\n  private readonly childrenGroupElement: HTMLDivElement;\n  private readonly children: AXBreadcrumb[];\n  private hovered: boolean;\n  private preselectedInternal: boolean;\n  private parent: AXBreadcrumb|null;\n  private inspectedInternal: boolean;\n  constructor(axNode: SDK.AccessibilityModel.AccessibilityNode, depth: number, inspected: boolean) {\n    this.axNodeInternal = axNode;\n\n    this.elementInternal = document.createElement('div');\n    this.elementInternal.classList.add('ax-breadcrumb');\n    elementsToAXBreadcrumb.set(this.elementInternal, this);\n\n    this.nodeElementInternal = document.createElement('div');\n    this.nodeElementInternal.classList.add('ax-node');\n    UI.ARIAUtils.markAsTreeitem(this.nodeElementInternal);\n    this.nodeElementInternal.tabIndex = -1;\n    this.elementInternal.appendChild(this.nodeElementInternal);\n    this.nodeWrapper = document.createElement('div');\n    this.nodeWrapper.classList.add('wrapper');\n    this.nodeElementInternal.appendChild(this.nodeWrapper);\n\n    this.selectionElement = document.createElement('div');\n    this.selectionElement.classList.add('selection');\n    this.selectionElement.classList.add('fill');\n    this.nodeElementInternal.appendChild(this.selectionElement);\n\n    this.childrenGroupElement = document.createElement('div');\n    this.childrenGroupElement.classList.add('children');\n    UI.ARIAUtils.markAsGroup(this.childrenGroupElement);\n    this.elementInternal.appendChild(this.childrenGroupElement);\n\n    this.children = [];\n    this.hovered = false;\n    this.preselectedInternal = false;\n    this.parent = null;\n\n    this.inspectedInternal = inspected;\n    this.nodeElementInternal.classList.toggle('inspected', inspected);\n\n    this.nodeElementInternal.style.paddingLeft = (16 * depth + 4) + 'px';\n\n    if (this.axNodeInternal.ignored()) {\n      this.appendIgnoredNodeElement();\n    } else {\n      this.appendRoleElement(this.axNodeInternal.role());\n      const axNodeName = this.axNodeInternal.name();\n      if (axNodeName && axNodeName.value) {\n        this.nodeWrapper.createChild('span', 'separator').textContent = '\\xA0';\n        this.appendNameElement(axNodeName.value as string);\n      }\n    }\n\n    if (!this.axNodeInternal.ignored() && this.axNodeInternal.hasOnlyUnloadedChildren()) {\n      this.nodeElementInternal.classList.add('children-unloaded');\n      UI.ARIAUtils.setExpanded(this.nodeElementInternal, false);\n    }\n\n    if (!this.axNodeInternal.isDOMNode()) {\n      this.nodeElementInternal.classList.add('no-dom-node');\n    }\n  }\n\n  element(): HTMLElement {\n    return this.elementInternal;\n  }\n\n  nodeElement(): HTMLElement {\n    return this.nodeElementInternal;\n  }\n\n  appendChild(breadcrumb: AXBreadcrumb): void {\n    this.children.push(breadcrumb);\n    breadcrumb.setParent(this);\n    this.nodeElementInternal.classList.add('parent');\n    UI.ARIAUtils.setExpanded(this.nodeElementInternal, true);\n    this.childrenGroupElement.appendChild(breadcrumb.element());\n  }\n\n  hasExpandedChildren(): number {\n    return this.children.length;\n  }\n\n  setParent(breadcrumb: AXBreadcrumb): void {\n    this.parent = breadcrumb;\n  }\n\n  preselected(): boolean {\n    return this.preselectedInternal;\n  }\n\n  setPreselected(preselected: boolean, selectedByUser: boolean): void {\n    if (this.preselectedInternal === preselected) {\n      return;\n    }\n    this.preselectedInternal = preselected;\n    this.nodeElementInternal.classList.toggle('preselected', preselected);\n    if (preselected) {\n      this.nodeElementInternal.tabIndex = 0;\n    } else {\n      this.nodeElementInternal.tabIndex = -1;\n    }\n    if (this.preselectedInternal) {\n      if (selectedByUser) {\n        this.nodeElementInternal.focus();\n      }\n      if (!this.inspectedInternal) {\n        this.axNodeInternal.highlightDOMNode();\n      } else {\n        SDK.OverlayModel.OverlayModel.hideDOMNodeHighlight();\n      }\n    }\n  }\n\n  setHovered(hovered: boolean): void {\n    if (this.hovered === hovered) {\n      return;\n    }\n    this.hovered = hovered;\n    this.nodeElementInternal.classList.toggle('hovered', hovered);\n    if (this.hovered) {\n      this.nodeElementInternal.classList.toggle('hovered', true);\n      this.axNodeInternal.highlightDOMNode();\n    }\n  }\n\n  axNode(): SDK.AccessibilityModel.AccessibilityNode {\n    return this.axNodeInternal;\n  }\n\n  inspected(): boolean {\n    return this.inspectedInternal;\n  }\n\n  isDOMNode(): boolean {\n    return this.axNodeInternal.isDOMNode();\n  }\n\n  nextBreadcrumb(): AXBreadcrumb|null {\n    if (this.children.length) {\n      return this.children[0];\n    }\n    const nextSibling = this.element().nextSibling;\n    if (nextSibling) {\n      return elementsToAXBreadcrumb.get(nextSibling as HTMLElement) || null;\n    }\n    return null;\n  }\n\n  previousBreadcrumb(): AXBreadcrumb|null {\n    const previousSibling = this.element().previousSibling;\n    if (previousSibling) {\n      return elementsToAXBreadcrumb.get(previousSibling as HTMLElement) || null;\n    }\n\n    return this.parent;\n  }\n\n  parentBreadcrumb(): AXBreadcrumb|null {\n    return this.parent;\n  }\n\n  lastChild(): AXBreadcrumb {\n    return this.children[this.children.length - 1];\n  }\n\n  private appendNameElement(name: string): void {\n    const nameElement = document.createElement('span');\n    nameElement.textContent = '\"' + name + '\"';\n    nameElement.classList.add('ax-readable-string');\n    this.nodeWrapper.appendChild(nameElement);\n  }\n\n  private appendRoleElement(role: Protocol.Accessibility.AXValue|null): void {\n    if (!role) {\n      return;\n    }\n\n    const roleElement = document.createElement('span');\n    roleElement.classList.add('monospace');\n    roleElement.classList.add(RoleStyles[role.type]);\n    roleElement.setTextContentTruncatedIfNeeded(role.value || '');\n\n    this.nodeWrapper.appendChild(roleElement);\n  }\n\n  private appendIgnoredNodeElement(): void {\n    const ignoredNodeElement = document.createElement('span');\n    ignoredNodeElement.classList.add('monospace');\n    ignoredNodeElement.textContent = i18nString(UIStrings.ignored);\n    ignoredNodeElement.classList.add('ax-breadcrumbs-ignored-node');\n    this.nodeWrapper.appendChild(ignoredNodeElement);\n  }\n}\n\ntype RoleStyles = {\n  [type: string]: string,\n};\n\nexport const RoleStyles: RoleStyles = {\n  internalRole: 'ax-internal-role',\n  role: 'ax-role',\n};\n"],
  "mappings": "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",
  "names": []
}
