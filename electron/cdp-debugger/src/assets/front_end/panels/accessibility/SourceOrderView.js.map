{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/accessibility/SourceOrderView.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {AccessibilitySubPane} from './AccessibilitySubPane.js';\n\nconst UIStrings = {\n  /**\n  * @description Name of a tool which allows the developer to view the contents of the page in the\n  * 'source order' (the order in which the HTML elements show up in the source code). In the\n  * Accessibility panel.\n  */\n  sourceOrderViewer: 'Source Order Viewer',\n  /**\n  *@description Text in Source Order Viewer of the Accessibility panel shown when the selected node has no child elements\n  */\n  noSourceOrderInformation: 'No source order information available',\n  /**\n  *@description Text in Source Order Viewer of the Accessibility panel shown when the selected node has many child elements\n  */\n  thereMayBeADelayInDisplaying: 'There may be a delay in displaying source order for elements with many children',\n  /**\n  * @description Checkbox label in Source Order Viewer of the Accessibility panel. Source order\n  * means the order in which the HTML elements show up in the source code.\n  */\n  showSourceOrder: 'Show source order',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/accessibility/SourceOrderView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst MAX_CHILD_ELEMENTS_THRESHOLD = 300;\n\nexport class SourceOrderPane extends AccessibilitySubPane {\n  private readonly noNodeInfo: Element;\n  private readonly warning: Element;\n  private checked: boolean;\n  private checkboxLabel: UI.UIUtils.CheckboxLabel;\n  private checkboxElement: HTMLInputElement;\n  private overlayModel: SDK.OverlayModel.OverlayModel|null;\n  constructor() {\n    super(i18nString(UIStrings.sourceOrderViewer));\n\n    this.noNodeInfo = this.createInfo(i18nString(UIStrings.noSourceOrderInformation));\n    this.warning = this.createInfo(i18nString(UIStrings.thereMayBeADelayInDisplaying));\n    this.warning.id = 'source-order-warning';\n    this.checked = false;\n    this.checkboxLabel =\n        UI.UIUtils.CheckboxLabel.create(/* title */ i18nString(UIStrings.showSourceOrder), /* checked */ false);\n    this.checkboxElement = this.checkboxLabel.checkboxElement;\n\n    this.checkboxLabel.classList.add('source-order-checkbox');\n    this.checkboxElement.addEventListener('click', this.checkboxClicked.bind(this), false);\n    this.element.appendChild(this.checkboxLabel);\n\n    this.nodeInternal = null;\n    this.overlayModel = null;\n  }\n\n  async setNodeAsync(node: SDK.DOMModel.DOMNode|null): Promise<void> {\n    if (!this.checkboxLabel.classList.contains('hidden')) {\n      this.checked = this.checkboxElement.checked;\n    }\n    this.checkboxElement.checked = false;\n    this.checkboxClicked();\n    super.setNode(node);\n    if (!this.nodeInternal) {\n      this.overlayModel = null;\n      return;\n    }\n\n    let foundSourceOrder = false;\n    const childCount = this.nodeInternal.childNodeCount();\n    if (childCount > 0) {\n      if (!this.nodeInternal.children()) {\n        await this.nodeInternal.getSubtree(1, false);\n      }\n      const children = this.nodeInternal.children() as SDK.DOMModel.DOMNode[];\n      foundSourceOrder = children.some(child => child.nodeType() === Node.ELEMENT_NODE);\n    }\n\n    this.noNodeInfo.classList.toggle('hidden', foundSourceOrder);\n    this.warning.classList.toggle('hidden', childCount < MAX_CHILD_ELEMENTS_THRESHOLD);\n    this.checkboxLabel.classList.toggle('hidden', !foundSourceOrder);\n    if (foundSourceOrder) {\n      this.overlayModel = this.nodeInternal.domModel().overlayModel();\n      this.checkboxElement.checked = this.checked;\n      this.checkboxClicked();\n    } else {\n      this.overlayModel = null;\n    }\n  }\n\n  private checkboxClicked(): void {\n    if (!this.nodeInternal || !this.overlayModel) {\n      return;\n    }\n\n    if (this.checkboxElement.checked) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.SourceOrderViewActivated);\n      this.overlayModel.highlightSourceOrderInOverlay(this.nodeInternal);\n    } else {\n      this.overlayModel.hideSourceOrderInOverlay();\n    }\n  }\n}\n"],
  "mappings": "AAIA;AACA;AAEA;AAEA;AAEA,MAAM,YAAY;AAAA,EAMhB,mBAAmB;AAAA,EAInB,0BAA0B;AAAA,EAI1B,8BAA8B;AAAA,EAK9B,iBAAiB;AAAA;AAEnB,MAAM,OAAO,KAAK,KAAK,kBAAkB,2CAA2C;AACpF,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAChE,MAAM,+BAA+B;AAE9B,qCAA8B,qBAAqB;AAAA,EACvC;AAAA,EACA;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACR,cAAc;AACZ,UAAM,WAAW,UAAU;AAE3B,SAAK,aAAa,KAAK,WAAW,WAAW,UAAU;AACvD,SAAK,UAAU,KAAK,WAAW,WAAW,UAAU;AACpD,SAAK,QAAQ,KAAK;AAClB,SAAK,UAAU;AACf,SAAK,gBACD,GAAG,QAAQ,cAAc,OAAmB,WAAW,UAAU,kBAAgC;AACrG,SAAK,kBAAkB,KAAK,cAAc;AAE1C,SAAK,cAAc,UAAU,IAAI;AACjC,SAAK,gBAAgB,iBAAiB,SAAS,KAAK,gBAAgB,KAAK,OAAO;AAChF,SAAK,QAAQ,YAAY,KAAK;AAE9B,SAAK,eAAe;AACpB,SAAK,eAAe;AAAA;AAAA,QAGhB,aAAa,MAAgD;AACjE,QAAI,CAAC,KAAK,cAAc,UAAU,SAAS,WAAW;AACpD,WAAK,UAAU,KAAK,gBAAgB;AAAA;AAEtC,SAAK,gBAAgB,UAAU;AAC/B,SAAK;AACL,UAAM,QAAQ;AACd,QAAI,CAAC,KAAK,cAAc;AACtB,WAAK,eAAe;AACpB;AAAA;AAGF,QAAI,mBAAmB;AACvB,UAAM,aAAa,KAAK,aAAa;AACrC,QAAI,aAAa,GAAG;AAClB,UAAI,CAAC,KAAK,aAAa,YAAY;AACjC,cAAM,KAAK,aAAa,WAAW,GAAG;AAAA;AAExC,YAAM,WAAW,KAAK,aAAa;AACnC,yBAAmB,SAAS,KAAK,WAAS,MAAM,eAAe,KAAK;AAAA;AAGtE,SAAK,WAAW,UAAU,OAAO,UAAU;AAC3C,SAAK,QAAQ,UAAU,OAAO,UAAU,aAAa;AACrD,SAAK,cAAc,UAAU,OAAO,UAAU,CAAC;AAC/C,QAAI,kBAAkB;AACpB,WAAK,eAAe,KAAK,aAAa,WAAW;AACjD,WAAK,gBAAgB,UAAU,KAAK;AACpC,WAAK;AAAA,WACA;AACL,WAAK,eAAe;AAAA;AAAA;AAAA,EAIhB,kBAAwB;AAC9B,QAAI,CAAC,KAAK,gBAAgB,CAAC,KAAK,cAAc;AAC5C;AAAA;AAGF,QAAI,KAAK,gBAAgB,SAAS;AAChC,WAAK,YAAY,YAAY,KAAK,YAAY,OAAO;AACrD,WAAK,aAAa,8BAA8B,KAAK;AAAA,WAChD;AACL,WAAK,aAAa;AAAA;AAAA;AAAA;",
  "names": []
}
