{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/accessibility/ARIAAttributesView.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {AccessibilitySubPane} from './AccessibilitySubPane.js';\nimport {ariaMetadata} from './ARIAMetadata.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in ARIAAttributes View of the Accessibility panel\n  */\n  ariaAttributes: 'ARIA Attributes',\n  /**\n  *@description Text in ARIAAttributes View of the Accessibility panel\n  */\n  noAriaAttributes: 'No ARIA attributes',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/accessibility/ARIAAttributesView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class ARIAAttributesPane extends AccessibilitySubPane {\n  private readonly noPropertiesInfo: Element;\n  private readonly treeOutline: UI.TreeOutline.TreeOutline;\n  constructor() {\n    super(i18nString(UIStrings.ariaAttributes));\n\n    this.noPropertiesInfo = this.createInfo(i18nString(UIStrings.noAriaAttributes));\n    this.treeOutline = this.createTreeOutline();\n  }\n\n  setNode(node: SDK.DOMModel.DOMNode|null): void {\n    super.setNode(node);\n    this.treeOutline.removeChildren();\n    if (!node) {\n      return;\n    }\n    const target = node.domModel().target();\n    const attributes = node.attributes();\n    for (let i = 0; i < attributes.length; ++i) {\n      const attribute = attributes[i];\n      if (!this.isARIAAttribute(attribute)) {\n        continue;\n      }\n\n      this.treeOutline.appendChild(new ARIAAttributesTreeElement(this, attribute, target));\n    }\n\n    const foundAttributes = (this.treeOutline.rootElement().childCount() !== 0);\n    this.noPropertiesInfo.classList.toggle('hidden', foundAttributes);\n    this.treeOutline.element.classList.toggle('hidden', !foundAttributes);\n  }\n\n  private isARIAAttribute(attribute: SDK.DOMModel.Attribute): boolean {\n    return ATTRIBUTES.has(attribute.name);\n  }\n}\n\nexport class ARIAAttributesTreeElement extends UI.TreeOutline.TreeElement {\n  private readonly parentPane: ARIAAttributesPane;\n  private readonly attribute: SDK.DOMModel.Attribute;\n  private nameElement?: HTMLSpanElement;\n  private valueElement?: Element;\n  private prompt?: ARIAAttributePrompt;\n\n  constructor(parentPane: ARIAAttributesPane, attribute: SDK.DOMModel.Attribute, _target: SDK.Target.Target) {\n    super('');\n\n    this.parentPane = parentPane;\n    this.attribute = attribute;\n\n    this.selectable = false;\n  }\n\n  static createARIAValueElement(value: string): Element {\n    const valueElement = document.createElement('span');\n    valueElement.classList.add('monospace');\n    // TODO(aboxhall): quotation marks?\n    valueElement.setTextContentTruncatedIfNeeded(value || '');\n    return valueElement;\n  }\n\n  onattach(): void {\n    this.populateListItem();\n    this.listItemElement.addEventListener('click', this.mouseClick.bind(this));\n  }\n\n  private populateListItem(): void {\n    this.listItemElement.removeChildren();\n    this.appendNameElement(this.attribute.name);\n    this.listItemElement.createChild('span', 'separator').textContent = ':\\xA0';\n    this.appendAttributeValueElement(this.attribute.value);\n  }\n\n  appendNameElement(name: string): void {\n    this.nameElement = document.createElement('span');\n    this.nameElement.textContent = name;\n    this.nameElement.classList.add('ax-name');\n    this.nameElement.classList.add('monospace');\n    this.listItemElement.appendChild(this.nameElement);\n  }\n\n  appendAttributeValueElement(value: string): void {\n    this.valueElement = ARIAAttributesTreeElement.createARIAValueElement(value);\n    this.listItemElement.appendChild(this.valueElement);\n  }\n\n  private mouseClick(event: Event): void {\n    if (event.target === this.listItemElement) {\n      return;\n    }\n\n    event.consume(true);\n\n    this.startEditing();\n  }\n\n  private startEditing(): void {\n    const valueElement = this.valueElement;\n\n    if (!valueElement || UI.UIUtils.isBeingEdited(valueElement)) {\n      return;\n    }\n\n    const previousContent = valueElement.textContent || '';\n\n    function blurListener(this: ARIAAttributesTreeElement, previousContent: string, event: Event): void {\n      const target = event.target as HTMLElement;\n      const text = target.textContent || '';\n      this.editingCommitted(text, previousContent);\n    }\n\n    const attributeName = (this.nameElement as HTMLSpanElement).textContent || '';\n    this.prompt = new ARIAAttributePrompt(ariaMetadata().valuesForProperty(attributeName), this);\n    this.prompt.setAutocompletionTimeout(0);\n    const proxyElement =\n        this.prompt.attachAndStartEditing(valueElement, blurListener.bind(this, previousContent)) as HTMLElement;\n\n    proxyElement.addEventListener('keydown', event => this.editingValueKeyDown(previousContent, event), false);\n\n    const selection = valueElement.getComponentSelection();\n    if (selection) {\n      selection.selectAllChildren(valueElement);\n    }\n  }\n\n  private removePrompt(): void {\n    if (!this.prompt) {\n      return;\n    }\n    this.prompt.detach();\n    delete this.prompt;\n  }\n\n  private editingCommitted(userInput: string, previousContent: string): void {\n    this.removePrompt();\n\n    // Make the changes to the attribute\n    if (userInput !== previousContent) {\n      const node = this.parentPane.node() as SDK.DOMModel.DOMNode;\n      node.setAttributeValue(this.attribute.name, userInput);\n    }\n  }\n\n  private editingCancelled(): void {\n    this.removePrompt();\n    this.populateListItem();\n  }\n\n  private editingValueKeyDown(previousContent: string, event: KeyboardEvent): void {\n    if (event.handled) {\n      return;\n    }\n\n    if (event.key === 'Enter') {\n      const target = event.target as HTMLElement;\n      this.editingCommitted(target.textContent || '', previousContent);\n      event.consume();\n      return;\n    }\n\n    if (isEscKey(event)) {\n      this.editingCancelled();\n      event.consume();\n      return;\n    }\n  }\n}\n\nexport class ARIAAttributePrompt extends UI.TextPrompt.TextPrompt {\n  private readonly ariaCompletions: string[];\n  private readonly treeElement: ARIAAttributesTreeElement;\n  constructor(ariaCompletions: string[], treeElement: ARIAAttributesTreeElement) {\n    super();\n    this.initialize(this.buildPropertyCompletions.bind(this));\n\n    this.ariaCompletions = ariaCompletions;\n    this.treeElement = treeElement;\n  }\n\n  private async buildPropertyCompletions(expression: string, prefix: string, force?: boolean):\n      Promise<UI.SuggestBox.Suggestions> {\n    prefix = prefix.toLowerCase();\n    if (!prefix && !force && expression) {\n      return [];\n    }\n    return this.ariaCompletions.filter(value => value.startsWith(prefix)).map(c => {\n      return {\n        text: c,\n        title: undefined,\n        subtitle: undefined,\n        iconType: undefined,\n        priority: undefined,\n        isSecondary: undefined,\n        subtitleRenderer: undefined,\n        selectionRange: undefined,\n        hideGhostText: undefined,\n        iconElement: undefined,\n      };\n    });\n  }\n}\n\n// Keep this list in sync with https://w3c.github.io/aria/#state_prop_def\nconst ATTRIBUTES = new Set<string>([\n  'role',\n  'aria-activedescendant',\n  'aria-atomic',\n  'aria-autocomplete',\n  'aria-brailleroledescription',\n  'aria-busy',\n  'aria-checked',\n  'aria-colcount',\n  'aria-colindex',\n  'aria-colindextext',\n  'aria-colspan',\n  'aria-controls',\n  'aria-current',\n  'aria-describedby',\n  'aria-details',\n  'aria-disabled',\n  'aria-dropeffect',\n  'aria-errormessage',\n  'aria-expanded',\n  'aria-flowto',\n  'aria-grabbed',\n  'aria-haspopup',\n  'aria-hidden',\n  'aria-invalid',\n  'aria-keyshortcuts',\n  'aria-label',\n  'aria-labelledby',\n  'aria-level',\n  'aria-live',\n  'aria-modal',\n  'aria-multiline',\n  'aria-multiselectable',\n  'aria-orientation',\n  'aria-owns',\n  'aria-placeholder',\n  'aria-posinset',\n  'aria-pressed',\n  'aria-readonly',\n  'aria-relevant',\n  'aria-required',\n  'aria-roledescription',\n  'aria-rowcount',\n  'aria-rowindex',\n  'aria-rowindextext',\n  'aria-rowspan',\n  'aria-selected',\n  'aria-setsize',\n  'aria-sort',\n  'aria-valuemax',\n  'aria-valuemin',\n  'aria-valuenow',\n  'aria-valuetext',\n]);\n"],
  "mappings": "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
  "names": []
}
