{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/developer_resources/DeveloperResourcesView.ts"],
  "sourcesContent": ["// Copyright (c) 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {DeveloperResourcesListView} from './DeveloperResourcesListView.js';\nimport developerResourcesViewStyles from './developerResourcesView.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Placeholder for a search field in a toolbar\n  */\n  enterTextToSearchTheUrlAndError: 'Enter text to search the URL and Error columns',\n  /**\n  * @description Tooltip for a checkbox in the toolbar of the developer resources view. The\n  * inspected target is the webpage that DevTools is debugging/inspecting/attached to.\n  */\n  loadHttpsDeveloperResources: 'Load `HTTP(S)` developer resources through the inspected target',\n  /**\n  * @description Text for a checkbox in the toolbar of the developer resources view. The target is\n  * the webpage that DevTools is debugging/inspecting/attached to. This setting makes it so\n  * developer resources are requested from the webpage itself, and not from the DevTools\n  * application.\n  */\n  enableLoadingThroughTarget: 'Enable loading through target',\n  /**\n   *@description Text for resources load status\n   *@example {1} PH1\n   *@example {1} PH2\n   */\n  resourcesCurrentlyLoading: '{PH1} resources, {PH2} currently loading',\n  /**\n   * @description Status text that appears to tell the developer how many resources were loaded in\n   * total. Resources are files related to the webpage.\n   */\n  resources: '{n, plural, =1 {# resource} other {# resources}}',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/developer_resources/DeveloperResourcesView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet developerResourcesViewInstance: DeveloperResourcesView;\n\nexport class DeveloperResourcesView extends UI.Widget.VBox {\n  private textFilterRegExp: RegExp|null;\n  private readonly filterInput: UI.Toolbar.ToolbarInput;\n  private readonly coverageResultsElement: HTMLElement;\n  private listView: DeveloperResourcesListView;\n  private readonly statusToolbarElement: HTMLElement;\n  private statusMessageElement: HTMLElement;\n  private readonly throttler: Common.Throttler.Throttler;\n  private readonly loader: SDK.PageResourceLoader.PageResourceLoader;\n  private constructor() {\n    super(true);\n\n    const toolbarContainer = this.contentElement.createChild('div', 'developer-resource-view-toolbar-container');\n    const toolbar = new UI.Toolbar.Toolbar('developer-resource-view-toolbar', toolbarContainer);\n\n    this.textFilterRegExp = null;\n    const accessiblePlaceholder = '';  // Indicates that ToobarInput should use the placeholder as ARIA label.\n    this.filterInput =\n        new UI.Toolbar.ToolbarInput(i18nString(UIStrings.enterTextToSearchTheUrlAndError), accessiblePlaceholder, 1);\n    this.filterInput.addEventListener(UI.Toolbar.ToolbarInput.Event.TextChanged, this.onFilterChanged, this);\n    toolbar.appendToolbarItem(this.filterInput);\n\n    const loadThroughTarget = SDK.PageResourceLoader.getLoadThroughTargetSetting();\n    const loadThroughTargetCheckbox = new UI.Toolbar.ToolbarSettingCheckbox(\n        loadThroughTarget, i18nString(UIStrings.loadHttpsDeveloperResources),\n        i18nString(UIStrings.enableLoadingThroughTarget));\n    toolbar.appendToolbarItem(loadThroughTargetCheckbox);\n\n    this.coverageResultsElement = this.contentElement.createChild('div', 'developer-resource-view-results');\n    this.listView = new DeveloperResourcesListView(this.isVisible.bind(this));\n    this.listView.show(this.coverageResultsElement);\n    this.statusToolbarElement = this.contentElement.createChild('div', 'developer-resource-view-toolbar-summary');\n    this.statusMessageElement = this.statusToolbarElement.createChild('div', 'developer-resource-view-message');\n\n    this.throttler = new Common.Throttler.Throttler(100);\n    this.loader = SDK.PageResourceLoader.PageResourceLoader.instance();\n    this.loader.addEventListener(SDK.PageResourceLoader.Events.Update, this.onUpdate, this);\n    this.onUpdate();\n  }\n\n  static instance(): DeveloperResourcesView {\n    if (!developerResourcesViewInstance) {\n      developerResourcesViewInstance = new DeveloperResourcesView();\n    }\n    return developerResourcesViewInstance;\n  }\n\n  private onUpdate(): void {\n    void this.throttler.schedule(this.update.bind(this));\n  }\n\n  private async update(): Promise<void> {\n    this.listView.reset();\n    this.listView.update(this.loader.getResourcesLoaded().values());\n    this.updateStats();\n  }\n\n  private updateStats(): void {\n    const {loading, resources} = this.loader.getNumberOfResources();\n    if (loading > 0) {\n      this.statusMessageElement.textContent =\n          i18nString(UIStrings.resourcesCurrentlyLoading, {PH1: resources, PH2: loading});\n    } else {\n      this.statusMessageElement.textContent = i18nString(UIStrings.resources, {n: resources});\n    }\n  }\n\n  private isVisible(item: SDK.PageResourceLoader.PageResource): boolean {\n    return !this.textFilterRegExp || this.textFilterRegExp.test(item.url) ||\n        this.textFilterRegExp.test(item.errorMessage || '');\n  }\n\n  /**\n   *\n   */\n  private onFilterChanged(): void {\n    if (!this.listView) {\n      return;\n    }\n\n    const text = this.filterInput.value();\n    this.textFilterRegExp = text ? Platform.StringUtilities.createPlainTextSearchRegex(text, 'i') : null;\n    this.listView.updateFilterAndHighlight(this.textFilterRegExp);\n    this.updateStats();\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([developerResourcesViewStyles]);\n  }\n}\n"],
  "mappings": "AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA,MAAM,YAAY;AAAA,EAIhB,iCAAiC;AAAA,EAKjC,6BAA6B;AAAA,EAO7B,4BAA4B;AAAA,EAM5B,2BAA2B;AAAA,EAK3B,WAAW;AAAA;AAEb,MAAM,OAAO,KAAK,KAAK,kBAAkB,wDAAwD;AACjG,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAEhE,IAAI;AAEG,4CAAqC,GAAG,OAAO,KAAK;AAAA,EACjD;AAAA,EACS;AAAA,EACA;AAAA,EACT;AAAA,EACS;AAAA,EACT;AAAA,EACS;AAAA,EACA;AAAA,EACT,cAAc;AACpB,UAAM;AAEN,UAAM,mBAAmB,KAAK,eAAe,YAAY,OAAO;AAChE,UAAM,UAAU,IAAI,GAAG,QAAQ,QAAQ,mCAAmC;AAE1E,SAAK,mBAAmB;AACxB,UAAM,wBAAwB;AAC9B,SAAK,cACD,IAAI,GAAG,QAAQ,aAAa,WAAW,UAAU,kCAAkC,uBAAuB;AAC9G,SAAK,YAAY,iBAAiB,GAAG,QAAQ,aAAa,MAAM,aAAa,KAAK,iBAAiB;AACnG,YAAQ,kBAAkB,KAAK;AAE/B,UAAM,oBAAoB,IAAI,mBAAmB;AACjD,UAAM,4BAA4B,IAAI,GAAG,QAAQ,uBAC7C,mBAAmB,WAAW,UAAU,8BACxC,WAAW,UAAU;AACzB,YAAQ,kBAAkB;AAE1B,SAAK,yBAAyB,KAAK,eAAe,YAAY,OAAO;AACrE,SAAK,WAAW,IAAI,2BAA2B,KAAK,UAAU,KAAK;AACnE,SAAK,SAAS,KAAK,KAAK;AACxB,SAAK,uBAAuB,KAAK,eAAe,YAAY,OAAO;AACnE,SAAK,uBAAuB,KAAK,qBAAqB,YAAY,OAAO;AAEzE,SAAK,YAAY,IAAI,OAAO,UAAU,UAAU;AAChD,SAAK,SAAS,IAAI,mBAAmB,mBAAmB;AACxD,SAAK,OAAO,iBAAiB,IAAI,mBAAmB,OAAO,QAAQ,KAAK,UAAU;AAClF,SAAK;AAAA;AAAA,SAGA,WAAmC;AACxC,QAAI,CAAC,gCAAgC;AACnC,uCAAiC,IAAI;AAAA;AAEvC,WAAO;AAAA;AAAA,EAGD,WAAiB;AACvB,SAAK,KAAK,UAAU,SAAS,KAAK,OAAO,KAAK;AAAA;AAAA,QAGlC,SAAwB;AACpC,SAAK,SAAS;AACd,SAAK,SAAS,OAAO,KAAK,OAAO,qBAAqB;AACtD,SAAK;AAAA;AAAA,EAGC,cAAoB;AAC1B,UAAM,EAAC,SAAS,cAAa,KAAK,OAAO;AACzC,QAAI,UAAU,GAAG;AACf,WAAK,qBAAqB,cACtB,WAAW,UAAU,2BAA2B,EAAC,KAAK,WAAW,KAAK;AAAA,WACrE;AACL,WAAK,qBAAqB,cAAc,WAAW,UAAU,WAAW,EAAC,GAAG;AAAA;AAAA;AAAA,EAIxE,UAAU,MAAoD;AACpE,WAAO,CAAC,KAAK,oBAAoB,KAAK,iBAAiB,KAAK,KAAK,QAC7D,KAAK,iBAAiB,KAAK,KAAK,gBAAgB;AAAA;AAAA,EAM9C,kBAAwB;AAC9B,QAAI,CAAC,KAAK,UAAU;AAClB;AAAA;AAGF,UAAM,OAAO,KAAK,YAAY;AAC9B,SAAK,mBAAmB,OAAO,SAAS,gBAAgB,2BAA2B,MAAM,OAAO;AAChG,SAAK,SAAS,yBAAyB,KAAK;AAC5C,SAAK;AAAA;AAAA,EAEP,WAAiB;AACf,UAAM;AACN,SAAK,iBAAiB,CAAC;AAAA;AAAA;",
  "names": []
}
