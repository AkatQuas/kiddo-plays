{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/sources/ProfilePlugin.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport type * as Workspace from '../../models/workspace/workspace.js';\nimport * as CodeMirror from '../../third_party/codemirror.next/codemirror.next.js';\nimport * as SourceFrame from '../../ui/legacy/components/source_frame/source_frame.js';\nimport type * as TextEditor from '../../ui/components/text_editor/text_editor.js';\n\nimport {Plugin} from './Plugin.js';\n\n// Defines plugins that show profiling information in the editor\n// gutter when available.\n\nconst UIStrings = {\n  /**\n  *@description The milisecond unit\n  */\n  ms: 'ms',\n  /**\n  *@description Unit for data size in DevTools\n  */\n  mb: 'MB',\n  /**\n  *@description A unit\n  */\n  kb: 'kB',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/sources/ProfilePlugin.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nclass MemoryMarker extends CodeMirror.GutterMarker {\n  constructor(readonly value: number) {\n    super();\n  }\n\n  eq(other: MemoryMarker): boolean {\n    return this.value === other.value;\n  }\n\n  toDOM(): HTMLElement {\n    const element = document.createElement('div');\n    element.className = 'cm-profileMarker';\n    let value = this.value;\n    const intensity = Platform.NumberUtilities.clamp(Math.log10(1 + 2e-3 * value) / 5, 0.02, 1);\n    element.style.backgroundColor = `hsla(217, 100%, 70%, ${intensity.toFixed(3)})`;\n    value /= 1e3;\n    let units;\n    let fractionDigits;\n    if (value >= 1e3) {\n      units = i18nString(UIStrings.mb);\n      value /= 1e3;\n      fractionDigits = value >= 20 ? 0 : 1;\n    } else {\n      units = i18nString(UIStrings.kb);\n      fractionDigits = 0;\n    }\n    element.textContent = value.toFixed(fractionDigits);\n    const unitElement = element.appendChild(document.createElement('span'));\n    unitElement.className = 'cm-units';\n    unitElement.textContent = units;\n    return element;\n  }\n}\n\nclass PerformanceMarker extends CodeMirror.GutterMarker {\n  constructor(readonly value: number) {\n    super();\n  }\n\n  eq(other: MemoryMarker): boolean {\n    return this.value === other.value;\n  }\n\n  toDOM(): HTMLElement {\n    const element = document.createElement('div');\n    element.className = 'cm-profileMarker';\n    const intensity = Platform.NumberUtilities.clamp(Math.log10(1 + 10 * this.value) / 5, 0.02, 1);\n    element.textContent = this.value.toFixed(1);\n    element.style.backgroundColor = `hsla(44, 100%, 50%, ${intensity.toFixed(3)})`;\n    const span = document.createElement('span');\n    span.className = 'cm-units';\n    span.textContent = i18nString(UIStrings.ms);\n    element.appendChild(span);\n    return element;\n  }\n}\n\nfunction markersFromProfileData(\n    map: Map<number, number>, state: CodeMirror.EditorState,\n    type: SourceFrame.SourceFrame.DecoratorType): CodeMirror.RangeSet<CodeMirror.GutterMarker> {\n  const markerType = type === SourceFrame.SourceFrame.DecoratorType.PERFORMANCE ? PerformanceMarker : MemoryMarker;\n  const markers: CodeMirror.Range<CodeMirror.GutterMarker>[] = [];\n  for (const [line, value] of map) {\n    if (line <= state.doc.lines) {\n      const {from} = state.doc.line(line);\n      markers.push(new markerType(value).range(from));\n    }\n  }\n  return CodeMirror.RangeSet.of(markers, true);\n}\n\nconst makeLineLevelProfilePlugin = (type: SourceFrame.SourceFrame.DecoratorType): typeof Plugin =>\n    class extends Plugin {\n  updateEffect = CodeMirror.StateEffect.define<Map<number, number>>();\n  field: CodeMirror.StateField<CodeMirror.RangeSet<CodeMirror.GutterMarker>>;\n  gutter: CodeMirror.Extension;\n  compartment: CodeMirror.Compartment = new CodeMirror.Compartment();\n\n  constructor(uiSourceCode: Workspace.UISourceCode.UISourceCode) {\n    super(uiSourceCode);\n\n    this.field = CodeMirror.StateField.define<CodeMirror.RangeSet<CodeMirror.GutterMarker>>({\n      create(): CodeMirror.RangeSet<CodeMirror.GutterMarker> {\n        return CodeMirror.RangeSet.empty;\n      },\n      update: (markers, tr) => {\n        return tr.effects.reduce((markers, effect) => {\n          return effect.is(this.updateEffect) ? markersFromProfileData(effect.value, tr.state, type) : markers;\n        }, markers.map(tr.changes));\n      },\n    });\n\n    this.gutter = CodeMirror.gutter({\n      markers: (view): CodeMirror.RangeSet<CodeMirror.GutterMarker> => view.state.field(this.field),\n      class: `cm-${type}Gutter`,\n    });\n  }\n\n  static accepts(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n    return uiSourceCode.contentType().hasScripts();\n  }\n\n  private getLineMap(): Map<number, number>|undefined {\n    return this.uiSourceCode.getDecorationData(type);\n  }\n\n  editorExtension(): CodeMirror.Extension {\n    const map = this.getLineMap();\n    return this.compartment.of(\n        !map ? [] : [this.field.init(state => markersFromProfileData(map, state, type)), this.gutter, theme]);\n  }\n\n  decorationChanged(type: SourceFrame.SourceFrame.DecoratorType, editor: TextEditor.TextEditor.TextEditor): void {\n    const installed = Boolean(editor.state.field(this.field, false));\n    const map = this.getLineMap();\n    if (!map) {\n      if (installed) {\n        editor.dispatch({effects: this.compartment.reconfigure([])});\n      }\n    } else if (!installed) {\n      editor.dispatch({\n        effects: this.compartment.reconfigure(\n            [this.field.init(state => markersFromProfileData(map, state, type)), this.gutter, theme]),\n      });\n    } else {\n      editor.dispatch({effects: this.updateEffect.of(map)});\n    }\n  }\n};\n\nconst theme = CodeMirror.EditorView.baseTheme({\n  '.cm-performanceGutter': {\n    width: '60px',\n    backgroundColor: 'var(--color-background)',\n    marginLeft: '3px',\n  },\n  '.cm-memoryGutter': {\n    width: '48px',\n    backgroundColor: 'var(--color-background)',\n    marginLeft: '3px',\n  },\n  '.cm-profileMarker': {\n    textAlign: 'right',\n    paddingRight: '3px',\n  },\n  '.cm-profileMarker .cm-units': {\n    color: 'var(--color-text-secondary)',\n    fontSize: '75%',\n    marginLeft: '3px',\n  },\n});\n\nexport const MemoryProfilePlugin = makeLineLevelProfilePlugin(SourceFrame.SourceFrame.DecoratorType.MEMORY);\n\nexport const PerformanceProfilePlugin = makeLineLevelProfilePlugin(SourceFrame.SourceFrame.DecoratorType.PERFORMANCE);\n"],
  "mappings": "AAIA;AACA;AAEA;AACA;AAGA;AAKA,MAAM,YAAY;AAAA,EAIhB,IAAI;AAAA,EAIJ,IAAI;AAAA,EAIJ,IAAI;AAAA;AAEN,MAAM,OAAO,KAAK,KAAK,kBAAkB,mCAAmC;AAC5E,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAEhE,2BAA2B,WAAW,aAAa;AAAA,EACjD,YAAqB,OAAe;AAClC;AADmB;AAAA;AAAA,EAIrB,GAAG,OAA8B;AAC/B,WAAO,KAAK,UAAU,MAAM;AAAA;AAAA,EAG9B,QAAqB;AACnB,UAAM,UAAU,SAAS,cAAc;AACvC,YAAQ,YAAY;AACpB,QAAI,QAAQ,KAAK;AACjB,UAAM,YAAY,SAAS,gBAAgB,MAAM,KAAK,MAAM,IAAI,OAAO,SAAS,GAAG,MAAM;AACzF,YAAQ,MAAM,kBAAkB,wBAAwB,UAAU,QAAQ;AAC1E,aAAS;AACT,QAAI;AACJ,QAAI;AACJ,QAAI,SAAS,KAAK;AAChB,cAAQ,WAAW,UAAU;AAC7B,eAAS;AACT,uBAAiB,SAAS,KAAK,IAAI;AAAA,WAC9B;AACL,cAAQ,WAAW,UAAU;AAC7B,uBAAiB;AAAA;AAEnB,YAAQ,cAAc,MAAM,QAAQ;AACpC,UAAM,cAAc,QAAQ,YAAY,SAAS,cAAc;AAC/D,gBAAY,YAAY;AACxB,gBAAY,cAAc;AAC1B,WAAO;AAAA;AAAA;AAIX,gCAAgC,WAAW,aAAa;AAAA,EACtD,YAAqB,OAAe;AAClC;AADmB;AAAA;AAAA,EAIrB,GAAG,OAA8B;AAC/B,WAAO,KAAK,UAAU,MAAM;AAAA;AAAA,EAG9B,QAAqB;AACnB,UAAM,UAAU,SAAS,cAAc;AACvC,YAAQ,YAAY;AACpB,UAAM,YAAY,SAAS,gBAAgB,MAAM,KAAK,MAAM,IAAI,KAAK,KAAK,SAAS,GAAG,MAAM;AAC5F,YAAQ,cAAc,KAAK,MAAM,QAAQ;AACzC,YAAQ,MAAM,kBAAkB,uBAAuB,UAAU,QAAQ;AACzE,UAAM,OAAO,SAAS,cAAc;AACpC,SAAK,YAAY;AACjB,SAAK,cAAc,WAAW,UAAU;AACxC,YAAQ,YAAY;AACpB,WAAO;AAAA;AAAA;AAIX,gCACI,KAA0B,OAC1B,MAA2F;AAC7F,QAAM,aAAa,SAAS,YAAY,YAAY,cAAc,cAAc,oBAAoB;AACpG,QAAM,UAAuD;AAC7D,aAAW,CAAC,MAAM,UAAU,KAAK;AAC/B,QAAI,QAAQ,MAAM,IAAI,OAAO;AAC3B,YAAM,EAAC,SAAQ,MAAM,IAAI,KAAK;AAC9B,cAAQ,KAAK,IAAI,WAAW,OAAO,MAAM;AAAA;AAAA;AAG7C,SAAO,WAAW,SAAS,GAAG,SAAS;AAAA;AAGzC,MAAM,6BAA6B,CAAC,SAChC,cAAc,OAAO;AAAA,EACvB,eAAe,WAAW,YAAY;AAAA,EACtC;AAAA,EACA;AAAA,EACA,cAAsC,IAAI,WAAW;AAAA,EAErD,YAAY,cAAmD;AAC7D,UAAM;AAEN,SAAK,QAAQ,WAAW,WAAW,OAAqD;AAAA,MACtF,SAAuD;AACrD,eAAO,WAAW,SAAS;AAAA;AAAA,MAE7B,QAAQ,CAAC,SAAS,OAAO;AACvB,eAAO,GAAG,QAAQ,OAAO,CAAC,UAAS,WAAW;AAC5C,iBAAO,OAAO,GAAG,KAAK,gBAAgB,uBAAuB,OAAO,OAAO,GAAG,OAAO,QAAQ;AAAA,WAC5F,QAAQ,IAAI,GAAG;AAAA;AAAA;AAItB,SAAK,SAAS,WAAW,OAAO;AAAA,MAC9B,SAAS,CAAC,SAAuD,KAAK,MAAM,MAAM,KAAK;AAAA,MACvF,OAAO,MAAM;AAAA;AAAA;AAAA,SAIV,QAAQ,cAA4D;AACzE,WAAO,aAAa,cAAc;AAAA;AAAA,EAG5B,aAA4C;AAClD,WAAO,KAAK,aAAa,kBAAkB;AAAA;AAAA,EAG7C,kBAAwC;AACtC,UAAM,MAAM,KAAK;AACjB,WAAO,KAAK,YAAY,GACpB,CAAC,MAAM,KAAK,CAAC,KAAK,MAAM,KAAK,WAAS,uBAAuB,KAAK,OAAO,QAAQ,KAAK,QAAQ;AAAA;AAAA,EAGpG,kBAAkB,OAA6C,QAAgD;AAC7G,UAAM,YAAY,QAAQ,OAAO,MAAM,MAAM,KAAK,OAAO;AACzD,UAAM,MAAM,KAAK;AACjB,QAAI,CAAC,KAAK;AACR,UAAI,WAAW;AACb,eAAO,SAAS,EAAC,SAAS,KAAK,YAAY,YAAY;AAAA;AAAA,eAEhD,CAAC,WAAW;AACrB,aAAO,SAAS;AAAA,QACd,SAAS,KAAK,YAAY,YACtB,CAAC,KAAK,MAAM,KAAK,WAAS,uBAAuB,KAAK,OAAO,SAAQ,KAAK,QAAQ;AAAA;AAAA,WAEnF;AACL,aAAO,SAAS,EAAC,SAAS,KAAK,aAAa,GAAG;AAAA;AAAA;AAAA;AAKrD,MAAM,QAAQ,WAAW,WAAW,UAAU;AAAA,EAC5C,yBAAyB;AAAA,IACvB,OAAO;AAAA,IACP,iBAAiB;AAAA,IACjB,YAAY;AAAA;AAAA,EAEd,oBAAoB;AAAA,IAClB,OAAO;AAAA,IACP,iBAAiB;AAAA,IACjB,YAAY;AAAA;AAAA,EAEd,qBAAqB;AAAA,IACnB,WAAW;AAAA,IACX,cAAc;AAAA;AAAA,EAEhB,+BAA+B;AAAA,IAC7B,OAAO;AAAA,IACP,UAAU;AAAA,IACV,YAAY;AAAA;AAAA;AAIT,aAAM,sBAAsB,2BAA2B,YAAY,YAAY,cAAc;AAE7F,aAAM,2BAA2B,2BAA2B,YAAY,YAAY,cAAc;",
  "names": []
}
