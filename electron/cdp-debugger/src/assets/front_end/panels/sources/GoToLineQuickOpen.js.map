{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/sources/GoToLineQuickOpen.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Workspace from '../../models/workspace/workspace.js';\nimport * as QuickOpen from '../../ui/legacy/components/quick_open/quick_open.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {SourcesView} from './SourcesView.js';\nimport type {UISourceCodeFrame} from './UISourceCodeFrame.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Go To Line Quick Open of the Sources panel\n  */\n  noFileSelected: 'No file selected.',\n  /**\n  *@description Text to show no results have been found\n  */\n  noResultsFound: 'No results found',\n  /**\n  *@description Text in Go To Line Quick Open of the Sources panel\n  */\n  typeANumberToGoToThatLine: 'Type a number to go to that line.',\n  /**\n  *@description Text in Go To Line Quick Open of the Sources panel\n  *@example {abc} PH1\n  *@example {000} PH2\n  *@example {bbb} PH3\n  */\n  currentPositionXsTypeAnOffset:\n      'Current position: 0x{PH1}. Type an offset between 0x{PH2} and 0x{PH3} to navigate to.',\n  /**\n  *@description Text in the GoToLine dialog of the Sources pane that describes the current line number, file line number range, and use of the GoToLine dialog\n  *@example {1} PH1\n  *@example {100} PH2\n  */\n  currentLineSTypeALineNumber: 'Current line: {PH1}. Type a line number between 1 and {PH2} to navigate to.',\n  /**\n  *@description Text in Go To Line Quick Open of the Sources panel\n  *@example {abc} PH1\n  */\n  goToOffsetXs: 'Go to offset 0x{PH1}.',\n  /**\n  *@description Text in Go To Line Quick Open of the Sources panel\n  *@example {2} PH1\n  *@example {2} PH2\n  */\n  goToLineSAndColumnS: 'Go to line {PH1} and column {PH2}.',\n  /**\n  *@description Text in Go To Line Quick Open of the Sources panel\n  *@example {2} PH1\n  */\n  goToLineS: 'Go to line {PH1}.',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/sources/GoToLineQuickOpen.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet goToLineQuickOpenInstance: GoToLineQuickOpen;\nexport class GoToLineQuickOpen extends QuickOpen.FilteredListWidget.Provider {\n  #goToLineStrings: string[] = [];\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): GoToLineQuickOpen {\n    const {forceNew} = opts;\n    if (!goToLineQuickOpenInstance || forceNew) {\n      goToLineQuickOpenInstance = new GoToLineQuickOpen();\n    }\n\n    return goToLineQuickOpenInstance;\n  }\n\n  selectItem(_itemIndex: number|null, promptValue: string): void {\n    const uiSourceCode = this.currentUISourceCode();\n    if (!uiSourceCode) {\n      return;\n    }\n    const position = this.parsePosition(promptValue);\n    if (!position) {\n      return;\n    }\n    void Common.Revealer.reveal(uiSourceCode.uiLocation(position.line - 1, position.column - 1));\n  }\n\n  updateGoToLineStrings(query: string): void {\n    this.#goToLineStrings = [];\n    if (!this.currentUISourceCode()) {\n      return;\n    }\n    const position = this.parsePosition(query);\n    const sourceFrame = this.currentSourceFrame();\n    if (!position) {\n      if (!sourceFrame) {\n        this.#goToLineStrings.push(i18nString(UIStrings.typeANumberToGoToThatLine));\n        return;\n      }\n      const editorState = sourceFrame.textEditor.state;\n      const disassembly = sourceFrame.wasmDisassembly;\n      const currentLineNumber = editorState.doc.lineAt(editorState.selection.main.head).number - 1;\n      if (disassembly) {\n        const lastBytecodeOffset = disassembly.lineNumberToBytecodeOffset(disassembly.lineNumbers - 1);\n        const bytecodeOffsetDigits = lastBytecodeOffset.toString(16).length;\n        const currentPosition = disassembly.lineNumberToBytecodeOffset(currentLineNumber);\n        this.#goToLineStrings.push(i18nString(UIStrings.currentPositionXsTypeAnOffset, {\n          PH1: currentPosition.toString(16).padStart(bytecodeOffsetDigits, '0'),\n          PH2: '0'.padStart(bytecodeOffsetDigits, '0'),\n          PH3: lastBytecodeOffset.toString(16),\n        }));\n        return;\n      }\n      const linesCount = editorState.doc.lines;\n      this.#goToLineStrings.push(\n          i18nString(UIStrings.currentLineSTypeALineNumber, {PH1: currentLineNumber + 1, PH2: linesCount}));\n      return;\n    }\n\n    if (sourceFrame && sourceFrame.wasmDisassembly) {\n      this.#goToLineStrings.push(i18nString(UIStrings.goToOffsetXs, {PH1: (position.column - 1).toString(16)}));\n      return;\n    }\n    if (position.column && position.column > 1) {\n      this.#goToLineStrings.push(i18nString(UIStrings.goToLineSAndColumnS, {PH1: position.line, PH2: position.column}));\n      return;\n    }\n    if (sourceFrame && position.line > sourceFrame.textEditor.state.doc.lines) {\n      return;\n    }\n    this.#goToLineStrings.push(i18nString(UIStrings.goToLineS, {PH1: position.line}));\n  }\n\n  itemCount(): number {\n    return this.#goToLineStrings.length;\n  }\n\n  renderItem(itemIndex: number, _query: string, titleElement: Element, _subtitleElement: Element): void {\n    UI.UIUtils.createTextChild(titleElement, this.#goToLineStrings[itemIndex]);\n  }\n\n  rewriteQuery(_query: string): string {\n    // For Go to Line Quick Open, we don't need to filter any item, set query to empty string, so the filter regex matching will be skipped\n    return '';\n  }\n\n  queryChanged(query: string): void {\n    this.updateGoToLineStrings(query);\n  }\n\n  notFoundText(_query: string): string {\n    if (!this.currentUISourceCode()) {\n      return i18nString(UIStrings.noFileSelected);\n    }\n    return i18nString(UIStrings.noResultsFound);\n  }\n\n  private parsePosition(query: string): {\n    line: number,\n    column: number,\n  }|null {\n    const sourceFrame = this.currentSourceFrame();\n    if (sourceFrame && sourceFrame.wasmDisassembly) {\n      const parts = query.match(/0x([0-9a-fA-F]+)/);\n      if (!parts || !parts[0] || parts[0].length !== query.length) {\n        return null;\n      }\n\n      const column = parseInt(parts[0], 16) + 1;\n      return {line: 0, column};\n    }\n\n    const parts = query.match(/([0-9]+)(\\:[0-9]*)?/);\n    if (!parts || !parts[0] || parts[0].length !== query.length) {\n      return null;\n    }\n    const line = parseInt(parts[1], 10);\n    let column = 0;\n    if (parts[2]) {\n      column = parseInt(parts[2].substring(1), 10);\n    }\n    return {line: Math.max(line | 0, 1), column: Math.max(column | 0, 1)};\n  }\n\n  private currentUISourceCode(): Workspace.UISourceCode.UISourceCode|null {\n    const sourcesView = UI.Context.Context.instance().flavor(SourcesView);\n    if (!sourcesView) {\n      return null;\n    }\n    return sourcesView.currentUISourceCode();\n  }\n\n  private currentSourceFrame(): UISourceCodeFrame|null {\n    const sourcesView = UI.Context.Context.instance().flavor(SourcesView);\n    if (!sourcesView) {\n      return null;\n    }\n    return sourcesView.currentSourceFrame();\n  }\n}\n"],
  "mappings": "AAIA;AACA;AAEA;AACA;AAEA;AAGA,MAAM,YAAY;AAAA,EAIhB,gBAAgB;AAAA,EAIhB,gBAAgB;AAAA,EAIhB,2BAA2B;AAAA,EAO3B,+BACI;AAAA,EAMJ,6BAA6B;AAAA,EAK7B,cAAc;AAAA,EAMd,qBAAqB;AAAA,EAKrB,WAAW;AAAA;AAEb,MAAM,OAAO,KAAK,KAAK,kBAAkB,uCAAuC;AAChF,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAEhE,IAAI;AACG,uCAAgC,UAAU,mBAAmB,SAAS;AAAA,qBAC9C;AAAA,SAEtB,SAAS,OAEZ,EAAC,UAAU,QAA0B;AACvC,UAAM,EAAC,aAAY;AACnB,QAAI,CAAC,6BAA6B,UAAU;AAC1C,kCAA4B,IAAI;AAAA;AAGlC,WAAO;AAAA;AAAA,EAGT,WAAW,YAAyB,aAA2B;AAC7D,UAAM,eAAe,KAAK;AAC1B,QAAI,CAAC,cAAc;AACjB;AAAA;AAEF,UAAM,WAAW,KAAK,cAAc;AACpC,QAAI,CAAC,UAAU;AACb;AAAA;AAEF,SAAK,OAAO,SAAS,OAAO,aAAa,WAAW,SAAS,OAAO,GAAG,SAAS,SAAS;AAAA;AAAA,EAG3F,sBAAsB,OAAqB;AACzC,4BAAwB;AACxB,QAAI,CAAC,KAAK,uBAAuB;AAC/B;AAAA;AAEF,UAAM,WAAW,KAAK,cAAc;AACpC,UAAM,cAAc,KAAK;AACzB,QAAI,CAAC,UAAU;AACb,UAAI,CAAC,aAAa;AAChB,8BAAsB,KAAK,WAAW,UAAU;AAChD;AAAA;AAEF,YAAM,cAAc,YAAY,WAAW;AAC3C,YAAM,cAAc,YAAY;AAChC,YAAM,oBAAoB,YAAY,IAAI,OAAO,YAAY,UAAU,KAAK,MAAM,SAAS;AAC3F,UAAI,aAAa;AACf,cAAM,qBAAqB,YAAY,2BAA2B,YAAY,cAAc;AAC5F,cAAM,uBAAuB,mBAAmB,SAAS,IAAI;AAC7D,cAAM,kBAAkB,YAAY,2BAA2B;AAC/D,8BAAsB,KAAK,WAAW,UAAU,+BAA+B;AAAA,UAC7E,KAAK,gBAAgB,SAAS,IAAI,SAAS,sBAAsB;AAAA,UACjE,KAAK,IAAI,SAAS,sBAAsB;AAAA,UACxC,KAAK,mBAAmB,SAAS;AAAA;AAEnC;AAAA;AAEF,YAAM,aAAa,YAAY,IAAI;AACnC,4BAAsB,KAClB,WAAW,UAAU,6BAA6B,EAAC,KAAK,oBAAoB,GAAG,KAAK;AACxF;AAAA;AAGF,QAAI,eAAe,YAAY,iBAAiB;AAC9C,4BAAsB,KAAK,WAAW,UAAU,cAAc,EAAC,KAAM,UAAS,SAAS,GAAG,SAAS;AACnG;AAAA;AAEF,QAAI,SAAS,UAAU,SAAS,SAAS,GAAG;AAC1C,4BAAsB,KAAK,WAAW,UAAU,qBAAqB,EAAC,KAAK,SAAS,MAAM,KAAK,SAAS;AACxG;AAAA;AAEF,QAAI,eAAe,SAAS,OAAO,YAAY,WAAW,MAAM,IAAI,OAAO;AACzE;AAAA;AAEF,0BAAsB,KAAK,WAAW,UAAU,WAAW,EAAC,KAAK,SAAS;AAAA;AAAA,EAG5E,YAAoB;AAClB,WAAO,sBAAsB;AAAA;AAAA,EAG/B,WAAW,WAAmB,QAAgB,cAAuB,kBAAiC;AACpG,OAAG,QAAQ,gBAAgB,cAAc,sBAAsB;AAAA;AAAA,EAGjE,aAAa,QAAwB;AAEnC,WAAO;AAAA;AAAA,EAGT,aAAa,OAAqB;AAChC,SAAK,sBAAsB;AAAA;AAAA,EAG7B,aAAa,QAAwB;AACnC,QAAI,CAAC,KAAK,uBAAuB;AAC/B,aAAO,WAAW,UAAU;AAAA;AAE9B,WAAO,WAAW,UAAU;AAAA;AAAA,EAGtB,cAAc,OAGf;AACL,UAAM,cAAc,KAAK;AACzB,QAAI,eAAe,YAAY,iBAAiB;AAC9C,YAAM,SAAQ,MAAM,MAAM;AAC1B,UAAI,CAAC,UAAS,CAAC,OAAM,MAAM,OAAM,GAAG,WAAW,MAAM,QAAQ;AAC3D,eAAO;AAAA;AAGT,YAAM,UAAS,SAAS,OAAM,IAAI,MAAM;AACxC,aAAO,EAAC,MAAM,GAAG;AAAA;AAGnB,UAAM,QAAQ,MAAM,MAAM;AAC1B,QAAI,CAAC,SAAS,CAAC,MAAM,MAAM,MAAM,GAAG,WAAW,MAAM,QAAQ;AAC3D,aAAO;AAAA;AAET,UAAM,OAAO,SAAS,MAAM,IAAI;AAChC,QAAI,SAAS;AACb,QAAI,MAAM,IAAI;AACZ,eAAS,SAAS,MAAM,GAAG,UAAU,IAAI;AAAA;AAE3C,WAAO,EAAC,MAAM,KAAK,IAAI,OAAO,GAAG,IAAI,QAAQ,KAAK,IAAI,SAAS,GAAG;AAAA;AAAA,EAG5D,sBAAgE;AACtE,UAAM,cAAc,GAAG,QAAQ,QAAQ,WAAW,OAAO;AACzD,QAAI,CAAC,aAAa;AAChB,aAAO;AAAA;AAET,WAAO,YAAY;AAAA;AAAA,EAGb,qBAA6C;AACnD,UAAM,cAAc,GAAG,QAAQ,QAAQ,WAAW,OAAO;AACzD,QAAI,CAAC,aAAa;AAChB,aAAO;AAAA;AAET,WAAO,YAAY;AAAA;AAAA;",
  "names": []
}
