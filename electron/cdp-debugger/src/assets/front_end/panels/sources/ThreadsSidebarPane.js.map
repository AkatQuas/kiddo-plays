{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/sources/ThreadsSidebarPane.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport threadsSidebarPaneStyles from './threadsSidebarPane.css.js';\nimport type * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Threads Sidebar Pane of the Sources panel\n  */\n  paused: 'paused',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/sources/ThreadsSidebarPane.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet threadsSidebarPaneInstance: ThreadsSidebarPane;\n\nexport class ThreadsSidebarPane extends UI.Widget.VBox implements\n    SDK.TargetManager.SDKModelObserver<SDK.DebuggerModel.DebuggerModel>,\n    UI.ListControl.ListDelegate<SDK.DebuggerModel.DebuggerModel> {\n  private readonly items: UI.ListModel.ListModel<SDK.DebuggerModel.DebuggerModel>;\n  private readonly list: UI.ListControl.ListControl<SDK.DebuggerModel.DebuggerModel>;\n  private selectedModel: SDK.DebuggerModel.DebuggerModel|null;\n\n  private constructor() {\n    super(true);\n\n    this.items = new UI.ListModel.ListModel();\n    this.list = new UI.ListControl.ListControl(this.items, this, UI.ListControl.ListMode.NonViewport);\n    const currentTarget = UI.Context.Context.instance().flavor(SDK.Target.Target);\n    this.selectedModel = currentTarget !== null ? currentTarget.model(SDK.DebuggerModel.DebuggerModel) : null;\n    this.contentElement.appendChild(this.list.element);\n\n    UI.Context.Context.instance().addFlavorChangeListener(SDK.Target.Target, this.targetFlavorChanged, this);\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.DebuggerModel.DebuggerModel, this);\n  }\n\n  static instance(): ThreadsSidebarPane {\n    if (!threadsSidebarPaneInstance) {\n      threadsSidebarPaneInstance = new ThreadsSidebarPane();\n    }\n    return threadsSidebarPaneInstance;\n  }\n\n  static shouldBeShown(): boolean {\n    return SDK.TargetManager.TargetManager.instance().models(SDK.DebuggerModel.DebuggerModel).length >= 2;\n  }\n\n  createElementForItem(debuggerModel: SDK.DebuggerModel.DebuggerModel): Element {\n    const element = document.createElement('div');\n    element.classList.add('thread-item');\n    const title = element.createChild('div', 'thread-item-title');\n    const pausedState = element.createChild('div', 'thread-item-paused-state');\n    element.appendChild(UI.Icon.Icon.create('smallicon-thick-right-arrow', 'selected-thread-icon'));\n    element.tabIndex = -1;\n    self.onInvokeElement(element, event => {\n      UI.Context.Context.instance().setFlavor(SDK.Target.Target, debuggerModel.target());\n      event.consume(true);\n    });\n    const isSelected = UI.Context.Context.instance().flavor(SDK.Target.Target) === debuggerModel.target();\n    element.classList.toggle('selected', isSelected);\n    UI.ARIAUtils.setSelected(element, isSelected);\n\n    function updateTitle(): void {\n      const executionContext = debuggerModel.runtimeModel().defaultExecutionContext();\n      title.textContent =\n          executionContext && executionContext.label() ? executionContext.label() : debuggerModel.target().name();\n    }\n\n    function updatePausedState(): void {\n      pausedState.textContent = debuggerModel.isPaused() ? i18nString(UIStrings.paused) : '';\n    }\n\n    function targetNameChanged(event: Common.EventTarget.EventTargetEvent<SDK.Target.Target>): void {\n      const target = event.data;\n      if (target === debuggerModel.target()) {\n        updateTitle();\n      }\n    }\n\n    debuggerModel.addEventListener(SDK.DebuggerModel.Events.DebuggerPaused, updatePausedState);\n    debuggerModel.addEventListener(SDK.DebuggerModel.Events.DebuggerResumed, updatePausedState);\n    debuggerModel.runtimeModel().addEventListener(SDK.RuntimeModel.Events.ExecutionContextChanged, updateTitle);\n    SDK.TargetManager.TargetManager.instance().addEventListener(\n        SDK.TargetManager.Events.NameChanged, targetNameChanged);\n\n    updatePausedState();\n    updateTitle();\n    return element;\n  }\n\n  heightForItem(_debuggerModel: SDK.DebuggerModel.DebuggerModel): number {\n    console.assert(false);  // Should not be called.\n    return 0;\n  }\n\n  isItemSelectable(_debuggerModel: SDK.DebuggerModel.DebuggerModel): boolean {\n    return true;\n  }\n\n  selectedItemChanged(\n      _from: SDK.DebuggerModel.DebuggerModel|null, _to: SDK.DebuggerModel.DebuggerModel|null, fromElement: Element|null,\n      toElement: Element|null): void {\n    const fromEle = (fromElement as HTMLElement | null);\n    if (fromEle) {\n      fromEle.tabIndex = -1;\n    }\n    const toEle = (toElement as HTMLElement | null);\n    if (toEle) {\n      this.setDefaultFocusedElement(toEle);\n      toEle.tabIndex = 0;\n      if (this.hasFocus()) {\n        toEle.focus();\n      }\n    }\n  }\n\n  updateSelectedItemARIA(_fromElement: Element|null, _toElement: Element|null): boolean {\n    return false;\n  }\n\n  modelAdded(debuggerModel: SDK.DebuggerModel.DebuggerModel): void {\n    this.items.insert(this.items.length, debuggerModel);\n    const currentTarget = UI.Context.Context.instance().flavor(SDK.Target.Target);\n    if (currentTarget === debuggerModel.target()) {\n      this.list.selectItem(debuggerModel);\n    }\n  }\n\n  modelRemoved(debuggerModel: SDK.DebuggerModel.DebuggerModel): void {\n    this.items.remove(this.items.indexOf(debuggerModel));\n  }\n\n  private targetFlavorChanged({data: target}: Common.EventTarget.EventTargetEvent<SDK.Target.Target>): void {\n    const hadFocus = this.hasFocus();\n    const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n    this.list.selectItem(debuggerModel);\n    if (debuggerModel) {\n      this.list.refreshItem(debuggerModel);\n    }\n    if (this.selectedModel !== null) {\n      this.list.refreshItem(this.selectedModel);\n    }\n    this.selectedModel = debuggerModel;\n    if (hadFocus) {\n      this.focus();\n    }\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([threadsSidebarPaneStyles]);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
