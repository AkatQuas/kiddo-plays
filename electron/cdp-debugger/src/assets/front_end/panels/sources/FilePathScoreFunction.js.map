{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/sources/FilePathScoreFunction.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nexport class FilePathScoreFunction {\n  private query: string;\n  private readonly queryUpperCase: string;\n  private score: Int32Array;\n  private sequence: Int32Array;\n  private dataUpperCase: string;\n  private fileNameIndex: number;\n\n  constructor(query: string) {\n    this.query = query;\n    this.queryUpperCase = query.toUpperCase();\n    this.score = new Int32Array(20 * 100);\n    this.sequence = new Int32Array(20 * 100);\n    this.dataUpperCase = '';\n    this.fileNameIndex = 0;\n  }\n\n  calculateScore(data: string, matchIndexes: number[]|null): number {\n    if (!data || !this.query) {\n      return 0;\n    }\n    const n = this.query.length;\n    const m = data.length;\n    if (!this.score || this.score.length < n * m) {\n      this.score = new Int32Array(n * m * 2);\n      this.sequence = new Int32Array(n * m * 2);\n    }\n    const score = this.score;\n    const sequence = (this.sequence as Int32Array);\n    this.dataUpperCase = data.toUpperCase();\n    this.fileNameIndex = data.lastIndexOf('/');\n    for (let i = 0; i < n; ++i) {\n      for (let j = 0; j < m; ++j) {\n        const skipCharScore = j === 0 ? 0 : score[i * m + j - 1];\n        const prevCharScore = i === 0 || j === 0 ? 0 : score[(i - 1) * m + j - 1];\n        const consecutiveMatch = i === 0 || j === 0 ? 0 : sequence[(i - 1) * m + j - 1];\n        const pickCharScore = this.match(this.query, data, i, j, consecutiveMatch);\n        if (pickCharScore && prevCharScore + pickCharScore >= skipCharScore) {\n          sequence[i * m + j] = consecutiveMatch + 1;\n          score[i * m + j] = (prevCharScore + pickCharScore);\n        } else {\n          sequence[i * m + j] = 0;\n          score[i * m + j] = skipCharScore;\n        }\n      }\n    }\n    if (matchIndexes) {\n      this.restoreMatchIndexes(sequence, n, m, matchIndexes);\n    }\n    const maxDataLength = 256;\n    return score[n * m - 1] * maxDataLength + (maxDataLength - data.length);\n  }\n\n  private testWordStart(data: string, j: number): boolean {\n    if (j === 0) {\n      return true;\n    }\n\n    const prevChar = data.charAt(j - 1);\n    return prevChar === '_' || prevChar === '-' || prevChar === '/' || prevChar === '.' || prevChar === ' ' ||\n        (data[j - 1] !== this.dataUpperCase[j - 1] && data[j] === this.dataUpperCase[j]);\n  }\n\n  private restoreMatchIndexes(sequence: Int32Array, n: number, m: number, out: number[]): void {\n    let i = n - 1, j = m - 1;\n    while (i >= 0 && j >= 0) {\n      switch (sequence[i * m + j]) {\n        case 0:\n          --j;\n          break;\n        default:\n          out.push(j);\n          --i;\n          --j;\n          break;\n      }\n    }\n    out.reverse();\n  }\n\n  private singleCharScore(query: string, data: string, i: number, j: number): number {\n    const isWordStart = this.testWordStart(data, j);\n    const isFileName = j > this.fileNameIndex;\n    const isPathTokenStart = j === 0 || data[j - 1] === '/';\n    const isCapsMatch = query[i] === data[j] && query[i] === this.queryUpperCase[i];\n    let score = 10;\n    if (isPathTokenStart) {\n      score += 4;\n    }\n    if (isWordStart) {\n      score += 2;\n    }\n    if (isCapsMatch) {\n      score += 6;\n    }\n    if (isFileName) {\n      score += 4;\n    }\n    // promote the case of making the whole match in the filename\n    if (j === this.fileNameIndex + 1 && i === 0) {\n      score += 5;\n    }\n    if (isFileName && isWordStart) {\n      score += 3;\n    }\n    return score;\n  }\n\n  private sequenceCharScore(query: string, data: string, i: number, j: number, sequenceLength: number): number {\n    const isFileName = j > this.fileNameIndex;\n    const isPathTokenStart = j === 0 || data[j - 1] === '/';\n    let score = 10;\n    if (isFileName) {\n      score += 4;\n    }\n    if (isPathTokenStart) {\n      score += 5;\n    }\n    score += sequenceLength * 4;\n    return score;\n  }\n\n  private match(query: string, data: string, i: number, j: number, consecutiveMatch: number): number {\n    if (this.queryUpperCase[i] !== this.dataUpperCase[j]) {\n      return 0;\n    }\n\n    if (!consecutiveMatch) {\n      return this.singleCharScore(query, data, i, j);\n    }\n    return this.sequenceCharScore(query, data, i, j - consecutiveMatch, consecutiveMatch);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
