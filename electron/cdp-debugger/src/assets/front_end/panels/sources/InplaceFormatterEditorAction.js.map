{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/sources/InplaceFormatterEditorAction.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Formatter from '../../models/formatter/formatter.js';\nimport * as Persistence from '../../models/persistence/persistence.js';\nimport type * as Workspace from '../../models/workspace/workspace.js';\nimport type * as SourceFrame from '../../ui/legacy/components/source_frame/source_frame.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type {EditorAction, EditorClosedEvent, SourcesView} from './SourcesView.js';\nimport {Events, registerEditorAction} from './SourcesView.js';\n\nconst UIStrings = {\n  /**\n  *@description Title of the format button in the Sources panel\n  *@example {file name} PH1\n  */\n  formatS: 'Format {PH1}',\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon pretty print button in the Inplace Formatter Editor Action of the Sources panel\n  */\n  format: 'Format',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/sources/InplaceFormatterEditorAction.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet inplaceFormatterEditorActionInstance: InplaceFormatterEditorAction;\n\nexport class InplaceFormatterEditorAction implements EditorAction {\n  private button!: UI.Toolbar.ToolbarButton;\n  private sourcesView!: SourcesView;\n  constructor() {\n  }\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): InplaceFormatterEditorAction {\n    const {forceNew} = opts;\n    if (!inplaceFormatterEditorActionInstance || forceNew) {\n      inplaceFormatterEditorActionInstance = new InplaceFormatterEditorAction();\n    }\n\n    return inplaceFormatterEditorActionInstance;\n  }\n\n  private editorSelected(event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.UISourceCode>): void {\n    const uiSourceCode = event.data;\n    this.updateButton(uiSourceCode);\n  }\n\n  private editorClosed(event: Common.EventTarget.EventTargetEvent<EditorClosedEvent>): void {\n    const {wasSelected} = event.data;\n    if (wasSelected) {\n      this.updateButton(null);\n    }\n  }\n\n  private updateButton(uiSourceCode: Workspace.UISourceCode.UISourceCode|null): void {\n    const isFormattable = this.isFormattable(uiSourceCode);\n    this.button.element.classList.toggle('hidden', !isFormattable);\n    if (uiSourceCode && isFormattable) {\n      this.button.setTitle(i18nString(UIStrings.formatS, {PH1: uiSourceCode.name()}));\n    }\n  }\n\n  getOrCreateButton(sourcesView: SourcesView): UI.Toolbar.ToolbarButton {\n    if (this.button) {\n      return this.button;\n    }\n\n    this.sourcesView = sourcesView;\n    this.sourcesView.addEventListener(Events.EditorSelected, this.editorSelected.bind(this));\n    this.sourcesView.addEventListener(Events.EditorClosed, this.editorClosed.bind(this));\n\n    this.button = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.format), 'largeicon-pretty-print');\n    this.button.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.formatSourceInPlace, this);\n    this.updateButton(sourcesView.currentUISourceCode());\n\n    return this.button;\n  }\n\n  private isFormattable(uiSourceCode: Workspace.UISourceCode.UISourceCode|null): boolean {\n    if (!uiSourceCode) {\n      return false;\n    }\n    if (uiSourceCode.project().canSetFileContent()) {\n      return true;\n    }\n    if (Persistence.Persistence.PersistenceImpl.instance().binding(uiSourceCode)) {\n      return true;\n    }\n    return uiSourceCode.contentType().isStyleSheet();\n  }\n\n  private formatSourceInPlace(): void {\n    const uiSourceCode = this.sourcesView.currentUISourceCode();\n    if (!uiSourceCode || !this.isFormattable(uiSourceCode)) {\n      return;\n    }\n\n    if (uiSourceCode.isDirty()) {\n      void this.contentLoaded(uiSourceCode, uiSourceCode.workingCopy());\n    } else {\n      void uiSourceCode.requestContent().then(deferredContent => {\n        void this.contentLoaded((uiSourceCode as Workspace.UISourceCode.UISourceCode), deferredContent.content || '');\n      });\n    }\n  }\n\n  private async contentLoaded(uiSourceCode: Workspace.UISourceCode.UISourceCode, content: string): Promise<void> {\n    const highlighterType = uiSourceCode.mimeType();\n    const {formattedContent, formattedMapping} =\n        await Formatter.ScriptFormatter.format(uiSourceCode.contentType(), highlighterType, content);\n    this.formattingComplete(uiSourceCode, formattedContent, formattedMapping);\n  }\n\n  /**\n   * Post-format callback\n   */\n  private formattingComplete(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, formattedContent: string,\n      formatterMapping: Formatter.ScriptFormatter.FormatterSourceMapping): void {\n    if (uiSourceCode.workingCopy() === formattedContent) {\n      return;\n    }\n    const sourceFrame = (this.sourcesView.viewForFile(uiSourceCode) as SourceFrame.SourceFrame.SourceFrameImpl);\n    let start: number[]|number[] = [0, 0];\n    if (sourceFrame) {\n      const selection = sourceFrame.textEditor.toLineColumn(sourceFrame.textEditor.state.selection.main.head);\n      start = formatterMapping.originalToFormatted(selection.lineNumber, selection.columnNumber);\n    }\n    uiSourceCode.setWorkingCopy(formattedContent);\n\n    this.sourcesView.showSourceLocation(uiSourceCode, {lineNumber: start[0], columnNumber: start[1]});\n  }\n}\n\nregisterEditorAction(InplaceFormatterEditorAction.instance);\n"],
  "mappings": "AAKA;AACA;AACA;AAGA;AAGA;AAEA,MAAM,YAAY;AAAA,EAKhB,SAAS;AAAA,EAIT,QAAQ;AAAA;AAEV,MAAM,OAAO,KAAK,KAAK,kBAAkB,kDAAkD;AAC3F,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAEhE,IAAI;AAEG,0CAA2D;AAAA,EACxD;AAAA,EACA;AAAA,EACR,cAAc;AAAA;AAAA,SAEP,SAAS,OAEZ,EAAC,UAAU,QAAqC;AAClD,UAAM,EAAC,aAAY;AACnB,QAAI,CAAC,wCAAwC,UAAU;AACrD,6CAAuC,IAAI;AAAA;AAG7C,WAAO;AAAA;AAAA,EAGD,eAAe,OAAuF;AAC5G,UAAM,eAAe,MAAM;AAC3B,SAAK,aAAa;AAAA;AAAA,EAGZ,aAAa,OAAqE;AACxF,UAAM,EAAC,gBAAe,MAAM;AAC5B,QAAI,aAAa;AACf,WAAK,aAAa;AAAA;AAAA;AAAA,EAId,aAAa,cAA8D;AACjF,UAAM,gBAAgB,KAAK,cAAc;AACzC,SAAK,OAAO,QAAQ,UAAU,OAAO,UAAU,CAAC;AAChD,QAAI,gBAAgB,eAAe;AACjC,WAAK,OAAO,SAAS,WAAW,UAAU,SAAS,EAAC,KAAK,aAAa;AAAA;AAAA;AAAA,EAI1E,kBAAkB,aAAoD;AACpE,QAAI,KAAK,QAAQ;AACf,aAAO,KAAK;AAAA;AAGd,SAAK,cAAc;AACnB,SAAK,YAAY,iBAAiB,OAAO,gBAAgB,KAAK,eAAe,KAAK;AAClF,SAAK,YAAY,iBAAiB,OAAO,cAAc,KAAK,aAAa,KAAK;AAE9E,SAAK,SAAS,IAAI,GAAG,QAAQ,cAAc,WAAW,UAAU,SAAS;AACzE,SAAK,OAAO,iBAAiB,GAAG,QAAQ,cAAc,OAAO,OAAO,KAAK,qBAAqB;AAC9F,SAAK,aAAa,YAAY;AAE9B,WAAO,KAAK;AAAA;AAAA,EAGN,cAAc,cAAiE;AACrF,QAAI,CAAC,cAAc;AACjB,aAAO;AAAA;AAET,QAAI,aAAa,UAAU,qBAAqB;AAC9C,aAAO;AAAA;AAET,QAAI,YAAY,YAAY,gBAAgB,WAAW,QAAQ,eAAe;AAC5E,aAAO;AAAA;AAET,WAAO,aAAa,cAAc;AAAA;AAAA,EAG5B,sBAA4B;AAClC,UAAM,eAAe,KAAK,YAAY;AACtC,QAAI,CAAC,gBAAgB,CAAC,KAAK,cAAc,eAAe;AACtD;AAAA;AAGF,QAAI,aAAa,WAAW;AAC1B,WAAK,KAAK,cAAc,cAAc,aAAa;AAAA,WAC9C;AACL,WAAK,aAAa,iBAAiB,KAAK,qBAAmB;AACzD,aAAK,KAAK,cAAe,cAAsD,gBAAgB,WAAW;AAAA;AAAA;AAAA;AAAA,QAKlG,cAAc,cAAmD,SAAgC;AAC7G,UAAM,kBAAkB,aAAa;AACrC,UAAM,EAAC,kBAAkB,qBACrB,MAAM,UAAU,gBAAgB,OAAO,aAAa,eAAe,iBAAiB;AACxF,SAAK,mBAAmB,cAAc,kBAAkB;AAAA;AAAA,EAMlD,mBACJ,cAAmD,kBACnD,kBAA0E;AAC5E,QAAI,aAAa,kBAAkB,kBAAkB;AACnD;AAAA;AAEF,UAAM,cAAe,KAAK,YAAY,YAAY;AAClD,QAAI,QAA2B,CAAC,GAAG;AACnC,QAAI,aAAa;AACf,YAAM,YAAY,YAAY,WAAW,aAAa,YAAY,WAAW,MAAM,UAAU,KAAK;AAClG,cAAQ,iBAAiB,oBAAoB,UAAU,YAAY,UAAU;AAAA;AAE/E,iBAAa,eAAe;AAE5B,SAAK,YAAY,mBAAmB,cAAc,EAAC,YAAY,MAAM,IAAI,cAAc,MAAM;AAAA;AAAA;AAIjG,qBAAqB,6BAA6B;",
  "names": []
}
