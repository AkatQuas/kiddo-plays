{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/sources/SourcesPanel.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2008 Apple Inc. All Rights Reserved.\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as Extensions from '../../models/extensions/extensions.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\nimport * as ObjectUI from '../../ui/legacy/components/object_ui/object_ui.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Snippets from '../snippets/snippets.js';\n\nimport {CallStackSidebarPane} from './CallStackSidebarPane.js';\nimport {DebuggerPausedMessage} from './DebuggerPausedMessage.js';\nimport sourcesPanelStyles from './sourcesPanel.css.js';\n\nimport type {NavigatorView} from './NavigatorView.js';\nimport {\n  ContentScriptsNavigatorView,\n  FilesNavigatorView,\n  NetworkNavigatorView,\n  OverridesNavigatorView,\n  SnippetsNavigatorView,\n} from './SourcesNavigator.js';\nimport {Events, SourcesView} from './SourcesView.js';\nimport {ThreadsSidebarPane} from './ThreadsSidebarPane.js';\nimport {UISourceCodeFrame} from './UISourceCodeFrame.js';\n\nconst UIStrings = {\n  /**\n  *@description Text that appears when user drag and drop something (for example, a file) in Sources Panel of the Sources panel\n  */\n  dropWorkspaceFolderHere: 'Drop workspace folder here',\n  /**\n  *@description Text to show more options\n  */\n  moreOptions: 'More options',\n  /**\n  * @description Tooltip for the the navigator toggle in the Sources panel. Command to open/show the\n  * sidebar containing the navigator tool.\n  */\n  showNavigator: 'Show navigator',\n  /**\n  * @description Tooltip for the the navigator toggle in the Sources panel. Command to close/hide\n  * the sidebar containing the navigator tool.\n  */\n  hideNavigator: 'Hide navigator',\n  /**\n   * @description Screen reader announcement when the navigator sidebar is shown in the Sources panel.\n   */\n  navigatorShown: 'Navigator sidebar shown',\n  /**\n   * @description Screen reader announcement when the navigator sidebar is hidden in the Sources panel.\n   */\n  navigatorHidden: 'Navigator sidebar hidden',\n  /**\n   * @description Screen reader announcement when the navigator sidebar is shown in the Sources panel.\n   */\n  debuggerShown: 'Debugger sidebar shown',\n  /**\n   * @description Screen reader announcement when the navigator sidebar is hidden in the Sources panel.\n   */\n  debuggerHidden: 'Debugger sidebar hidden',\n  /**\n  * @description Tooltip for the the debugger toggle in the Sources panel. Command to open/show the\n  * sidebar containing the debugger tool.\n  */\n  showDebugger: 'Show debugger',\n  /**\n  * @description Tooltip for the the debugger toggle in the Sources panel. Command to close/hide the\n  * sidebar containing the debugger tool.\n  */\n  hideDebugger: 'Hide debugger',\n  /**\n  *@description Text in Sources Panel of the Sources panel\n  */\n  groupByFolder: 'Group by folder',\n  /**\n  *@description Text in Sources Panel of the Sources panel\n  */\n  groupByAuthored: 'Group by Authored/Deployed',\n  /**\n  *@description Text for pausing the debugger on exceptions\n  */\n  pauseOnExceptions: 'Pause on exceptions',\n  /**\n  *@description Text in Sources Panel of the Sources panel\n  */\n  dontPauseOnExceptions: 'Don\\'t pause on exceptions',\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon play button in the Sources Panel of the Sources panel\n  */\n  resumeWithAllPausesBlockedForMs: 'Resume with all pauses blocked for 500 ms',\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon terminate execution button in the Sources Panel of the Sources panel\n  */\n  terminateCurrentJavascriptCall: 'Terminate current JavaScript call',\n  /**\n  *@description Text in Sources Panel of the Sources panel\n  */\n  pauseOnCaughtExceptions: 'Pause on caught exceptions',\n  /**\n  *@description A context menu item in the Sources Panel of the Sources panel\n  */\n  revealInSidebar: 'Reveal in sidebar',\n  /**\n  *@description A context menu item in the Sources Panel of the Sources panel when debugging JS code.\n  * When clicked, the execution is resumed until it reaches the line specified by the right-click that\n  * opened the context menu.\n  */\n  continueToHere: 'Continue to here',\n  /**\n  *@description A context menu item in the Console that stores selection as a temporary global variable\n  *@example {string} PH1\n  */\n  storeSAsGlobalVariable: 'Store {PH1} as global variable',\n  /**\n  *@description A context menu item in the Console, Sources, and Network panel\n  *@example {string} PH1\n  */\n  copyS: 'Copy {PH1}',\n  /**\n  *@description A context menu item for strings in the Console, Sources, and Network panel.\n  * When clicked, the raw contents of the string is copied to the clipboard.\n  */\n  copyStringContents: 'Copy string contents',\n  /**\n  *@description A context menu item for strings in the Console, Sources, and Network panel.\n  * When clicked, the string is copied to the clipboard as a valid JavaScript literal.\n  */\n  copyStringAsJSLiteral: 'Copy string as JavaScript literal',\n  /**\n  *@description A context menu item for strings in the Console, Sources, and Network panel.\n  * When clicked, the string is copied to the clipboard as a valid JSON literal.\n  */\n  copyStringAsJSONLiteral: 'Copy string as JSON literal',\n  /**\n  *@description A context menu item in the Sources Panel of the Sources panel\n  */\n  showFunctionDefinition: 'Show function definition',\n  /**\n  *@description Text in Sources Panel of the Sources panel\n  */\n  openInSourcesPanel: 'Open in Sources panel',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/sources/SourcesPanel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst primitiveRemoteObjectTypes = new Set(['number', 'boolean', 'bigint', 'undefined']);\nlet sourcesPanelInstance: SourcesPanel;\nlet wrapperViewInstance: WrapperView;\n\nexport class SourcesPanel extends UI.Panel.Panel implements UI.ContextMenu.Provider, SDK.TargetManager.Observer,\n                                                            UI.View.ViewLocationResolver {\n  private readonly workspace: Workspace.Workspace.WorkspaceImpl;\n  private readonly togglePauseAction: UI.ActionRegistration.Action;\n  private readonly stepOverAction: UI.ActionRegistration.Action;\n  private readonly stepIntoAction: UI.ActionRegistration.Action;\n  private readonly stepOutAction: UI.ActionRegistration.Action;\n  private readonly stepAction: UI.ActionRegistration.Action;\n  private readonly toggleBreakpointsActiveAction: UI.ActionRegistration.Action;\n  private readonly debugToolbar: UI.Toolbar.Toolbar;\n  private readonly debugToolbarDrawer: HTMLDivElement;\n  private readonly debuggerPausedMessage: DebuggerPausedMessage;\n  private splitWidget: UI.SplitWidget.SplitWidget;\n  editorView: UI.SplitWidget.SplitWidget;\n  private navigatorTabbedLocation: UI.View.TabbedViewLocation;\n  sourcesViewInternal: SourcesView;\n  private readonly toggleNavigatorSidebarButton: UI.Toolbar.ToolbarButton;\n  private readonly toggleDebuggerSidebarButton: UI.Toolbar.ToolbarButton;\n  private threadsSidebarPane: UI.View.View|null;\n  private readonly watchSidebarPane: UI.View.View;\n  private readonly callstackPane: CallStackSidebarPane;\n  private liveLocationPool: Bindings.LiveLocation.LiveLocationPool;\n  private lastModificationTime: number;\n  private pausedInternal?: boolean;\n  private switchToPausedTargetTimeout?: number;\n  private ignoreExecutionLineEvents?: boolean;\n  private executionLineLocation?: Bindings.DebuggerWorkspaceBinding.Location|null;\n  private pauseOnExceptionButton?: UI.Toolbar.ToolbarToggle;\n  private sidebarPaneStack?: UI.View.ViewLocation;\n  private tabbedLocationHeader?: Element|null;\n  private extensionSidebarPanesContainer?: UI.View.ViewLocation;\n  sidebarPaneView?: UI.Widget.VBox|UI.SplitWidget.SplitWidget;\n  constructor() {\n    super('sources');\n\n    new UI.DropTarget.DropTarget(\n        this.element, [UI.DropTarget.Type.Folder], i18nString(UIStrings.dropWorkspaceFolderHere),\n        this.handleDrop.bind(this));\n\n    this.workspace = Workspace.Workspace.WorkspaceImpl.instance();\n    this.togglePauseAction =\n        (UI.ActionRegistry.ActionRegistry.instance().action('debugger.toggle-pause') as UI.ActionRegistration.Action);\n    this.stepOverAction =\n        (UI.ActionRegistry.ActionRegistry.instance().action('debugger.step-over') as UI.ActionRegistration.Action);\n    this.stepIntoAction =\n        (UI.ActionRegistry.ActionRegistry.instance().action('debugger.step-into') as UI.ActionRegistration.Action);\n    this.stepOutAction =\n        (UI.ActionRegistry.ActionRegistry.instance().action('debugger.step-out') as UI.ActionRegistration.Action);\n    this.stepAction =\n        (UI.ActionRegistry.ActionRegistry.instance().action('debugger.step') as UI.ActionRegistration.Action);\n    this.toggleBreakpointsActiveAction =\n        (UI.ActionRegistry.ActionRegistry.instance().action('debugger.toggle-breakpoints-active') as\n         UI.ActionRegistration.Action);\n\n    this.debugToolbar = this.createDebugToolbar();\n    this.debugToolbarDrawer = this.createDebugToolbarDrawer();\n    this.debuggerPausedMessage = new DebuggerPausedMessage();\n\n    const initialDebugSidebarWidth = 225;\n    this.splitWidget =\n        new UI.SplitWidget.SplitWidget(true, true, 'sourcesPanelSplitViewState', initialDebugSidebarWidth);\n    this.splitWidget.enableShowModeSaving();\n    this.splitWidget.show(this.element);\n\n    // Create scripts navigator\n    const initialNavigatorWidth = 225;\n    this.editorView =\n        new UI.SplitWidget.SplitWidget(true, false, 'sourcesPanelNavigatorSplitViewState', initialNavigatorWidth);\n    this.editorView.enableShowModeSaving();\n    this.splitWidget.setMainWidget(this.editorView);\n\n    // Create navigator tabbed pane with toolbar.\n    this.navigatorTabbedLocation = UI.ViewManager.ViewManager.instance().createTabbedLocation(\n        this.revealNavigatorSidebar.bind(this), 'navigator-view', true);\n    const tabbedPane = this.navigatorTabbedLocation.tabbedPane();\n    tabbedPane.setMinimumSize(100, 25);\n    tabbedPane.element.classList.add('navigator-tabbed-pane');\n    const navigatorMenuButton = new UI.Toolbar.ToolbarMenuButton(this.populateNavigatorMenu.bind(this), true);\n    navigatorMenuButton.setTitle(i18nString(UIStrings.moreOptions));\n    tabbedPane.rightToolbar().appendToolbarItem(navigatorMenuButton);\n\n    if (UI.ViewManager.ViewManager.instance().hasViewsForLocation('run-view-sidebar')) {\n      const navigatorSplitWidget =\n          new UI.SplitWidget.SplitWidget(false, true, 'sourcePanelNavigatorSidebarSplitViewState');\n      navigatorSplitWidget.setMainWidget(tabbedPane);\n      const runViewTabbedPane = UI.ViewManager.ViewManager.instance()\n                                    .createTabbedLocation(this.revealNavigatorSidebar.bind(this), 'run-view-sidebar')\n                                    .tabbedPane();\n      navigatorSplitWidget.setSidebarWidget(runViewTabbedPane);\n      navigatorSplitWidget.installResizer(runViewTabbedPane.headerElement());\n      this.editorView.setSidebarWidget(navigatorSplitWidget);\n    } else {\n      this.editorView.setSidebarWidget(tabbedPane);\n    }\n\n    this.sourcesViewInternal = new SourcesView();\n    this.sourcesViewInternal.addEventListener(Events.EditorSelected, this.editorSelected.bind(this));\n\n    this.toggleNavigatorSidebarButton = this.editorView.createShowHideSidebarButton(\n        i18nString(UIStrings.showNavigator), i18nString(UIStrings.hideNavigator), i18nString(UIStrings.navigatorShown),\n        i18nString(UIStrings.navigatorHidden));\n    this.toggleDebuggerSidebarButton = this.splitWidget.createShowHideSidebarButton(\n        i18nString(UIStrings.showDebugger), i18nString(UIStrings.hideDebugger), i18nString(UIStrings.debuggerShown),\n        i18nString(UIStrings.debuggerHidden));\n    this.editorView.setMainWidget(this.sourcesViewInternal);\n\n    this.threadsSidebarPane = null;\n    this.watchSidebarPane = UI.ViewManager.ViewManager.instance().view('sources.watch');\n    this.callstackPane = CallStackSidebarPane.instance();\n\n    Common.Settings.Settings.instance()\n        .moduleSetting('sidebarPosition')\n        .addChangeListener(this.updateSidebarPosition.bind(this));\n    this.updateSidebarPosition();\n\n    void this.updateDebuggerButtonsAndStatus();\n    this.pauseOnExceptionEnabledChanged();\n    Common.Settings.Settings.instance()\n        .moduleSetting('pauseOnExceptionEnabled')\n        .addChangeListener(this.pauseOnExceptionEnabledChanged, this);\n\n    this.liveLocationPool = new Bindings.LiveLocation.LiveLocationPool();\n\n    this.setTarget(UI.Context.Context.instance().flavor(SDK.Target.Target));\n    Common.Settings.Settings.instance()\n        .moduleSetting('breakpointsActive')\n        .addChangeListener(this.breakpointsActiveStateChanged, this);\n    UI.Context.Context.instance().addFlavorChangeListener(SDK.Target.Target, this.onCurrentTargetChanged, this);\n    UI.Context.Context.instance().addFlavorChangeListener(SDK.DebuggerModel.CallFrame, this.callFrameChanged, this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.DebuggerModel.DebuggerModel, SDK.DebuggerModel.Events.DebuggerWasEnabled, this.debuggerWasEnabled, this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.DebuggerModel.DebuggerModel, SDK.DebuggerModel.Events.DebuggerPaused, this.debuggerPaused, this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.DebuggerModel.DebuggerModel, SDK.DebuggerModel.Events.DebuggerResumed,\n        event => this.debuggerResumed(event.data));\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.DebuggerModel.DebuggerModel, SDK.DebuggerModel.Events.GlobalObjectCleared,\n        event => this.debuggerResumed(event.data));\n    Extensions.ExtensionServer.ExtensionServer.instance().addEventListener(\n        Extensions.ExtensionServer.Events.SidebarPaneAdded, this.extensionSidebarPaneAdded, this);\n    SDK.TargetManager.TargetManager.instance().observeTargets(this);\n    this.lastModificationTime = -Infinity;\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  }|undefined = {forceNew: null}): SourcesPanel {\n    const {forceNew} = opts;\n    if (!sourcesPanelInstance || forceNew) {\n      sourcesPanelInstance = new SourcesPanel();\n    }\n\n    return sourcesPanelInstance;\n  }\n\n  static updateResizerAndSidebarButtons(panel: SourcesPanel): void {\n    panel.sourcesViewInternal.leftToolbar().removeToolbarItems();\n    panel.sourcesViewInternal.rightToolbar().removeToolbarItems();\n    panel.sourcesViewInternal.bottomToolbar().removeToolbarItems();\n    const isInWrapper = WrapperView.isShowing() && !UI.InspectorView.InspectorView.instance().isDrawerMinimized();\n    if (panel.splitWidget.isVertical() || isInWrapper) {\n      panel.splitWidget.uninstallResizer(panel.sourcesViewInternal.toolbarContainerElement());\n    } else {\n      panel.splitWidget.installResizer(panel.sourcesViewInternal.toolbarContainerElement());\n    }\n    if (!isInWrapper) {\n      panel.sourcesViewInternal.leftToolbar().appendToolbarItem(panel.toggleNavigatorSidebarButton);\n      if (panel.splitWidget.isVertical()) {\n        panel.sourcesViewInternal.rightToolbar().appendToolbarItem(panel.toggleDebuggerSidebarButton);\n      } else {\n        panel.sourcesViewInternal.bottomToolbar().appendToolbarItem(panel.toggleDebuggerSidebarButton);\n      }\n    }\n  }\n\n  targetAdded(_target: SDK.Target.Target): void {\n    this.showThreadsIfNeeded();\n  }\n\n  targetRemoved(_target: SDK.Target.Target): void {\n  }\n\n  private showThreadsIfNeeded(): void {\n    if (ThreadsSidebarPane.shouldBeShown() && !this.threadsSidebarPane) {\n      this.threadsSidebarPane = UI.ViewManager.ViewManager.instance().view('sources.threads');\n      if (this.sidebarPaneStack && this.threadsSidebarPane) {\n        void this.sidebarPaneStack.showView(\n            this.threadsSidebarPane, this.splitWidget.isVertical() ? this.watchSidebarPane : this.callstackPane);\n      }\n    }\n  }\n\n  private setTarget(target: SDK.Target.Target|null): void {\n    if (!target) {\n      return;\n    }\n    const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n    if (!debuggerModel) {\n      return;\n    }\n\n    if (debuggerModel.isPaused()) {\n      this.showDebuggerPausedDetails(\n          (debuggerModel.debuggerPausedDetails() as SDK.DebuggerModel.DebuggerPausedDetails));\n    } else {\n      this.pausedInternal = false;\n      this.clearInterface();\n      this.toggleDebuggerSidebarButton.setEnabled(true);\n    }\n  }\n\n  private onCurrentTargetChanged({data: target}: Common.EventTarget.EventTargetEvent<SDK.Target.Target|null>): void {\n    this.setTarget(target);\n  }\n  paused(): boolean {\n    return this.pausedInternal || false;\n  }\n\n  wasShown(): void {\n    UI.Context.Context.instance().setFlavor(SourcesPanel, this);\n    this.registerCSSFiles([sourcesPanelStyles]);\n    super.wasShown();\n    const wrapper = WrapperView.instance();\n    if (wrapper && wrapper.isShowing()) {\n      UI.InspectorView.InspectorView.instance().setDrawerMinimized(true);\n      SourcesPanel.updateResizerAndSidebarButtons(this);\n    }\n    this.editorView.setMainWidget(this.sourcesViewInternal);\n  }\n\n  willHide(): void {\n    super.willHide();\n    UI.Context.Context.instance().setFlavor(SourcesPanel, null);\n    if (WrapperView.isShowing()) {\n      WrapperView.instance().showViewInWrapper();\n      UI.InspectorView.InspectorView.instance().setDrawerMinimized(false);\n      SourcesPanel.updateResizerAndSidebarButtons(this);\n    }\n  }\n\n  resolveLocation(locationName: string): UI.View.ViewLocation|null {\n    if (locationName === 'sources.sidebar-top' || locationName === 'sources.sidebar-bottom' ||\n        locationName === 'sources.sidebar-tabs') {\n      return this.sidebarPaneStack || null;\n    }\n    return this.navigatorTabbedLocation;\n  }\n\n  ensureSourcesViewVisible(): boolean {\n    if (WrapperView.isShowing()) {\n      return true;\n    }\n    if (!UI.InspectorView.InspectorView.instance().canSelectPanel('sources')) {\n      return false;\n    }\n    void UI.ViewManager.ViewManager.instance().showView('sources');\n    return true;\n  }\n\n  onResize(): void {\n    if (Common.Settings.Settings.instance().moduleSetting('sidebarPosition').get() === 'auto') {\n      this.element.window().requestAnimationFrame(this.updateSidebarPosition.bind(this));\n    }  // Do not force layout.\n  }\n\n  searchableView(): UI.SearchableView.SearchableView {\n    return this.sourcesViewInternal.searchableView();\n  }\n\n  toggleNavigatorSidebar(): void {\n    this.editorView.toggleSidebar();\n  }\n\n  toggleDebuggerSidebar(): void {\n    this.splitWidget.toggleSidebar();\n  }\n\n  private debuggerPaused(event: Common.EventTarget.EventTargetEvent<SDK.DebuggerModel.DebuggerModel>): void {\n    const debuggerModel = event.data;\n    const details = debuggerModel.debuggerPausedDetails();\n    if (!this.pausedInternal &&\n        Common.Settings.Settings.instance().moduleSetting('autoFocusOnDebuggerPausedEnabled').get()) {\n      void this.setAsCurrentPanel();\n    }\n\n    if (UI.Context.Context.instance().flavor(SDK.Target.Target) === debuggerModel.target()) {\n      this.showDebuggerPausedDetails((details as SDK.DebuggerModel.DebuggerPausedDetails));\n    } else if (!this.pausedInternal) {\n      UI.Context.Context.instance().setFlavor(SDK.Target.Target, debuggerModel.target());\n    }\n  }\n\n  private showDebuggerPausedDetails(details: SDK.DebuggerModel.DebuggerPausedDetails): void {\n    this.pausedInternal = true;\n    void this.updateDebuggerButtonsAndStatus();\n    UI.Context.Context.instance().setFlavor(SDK.DebuggerModel.DebuggerPausedDetails, details);\n    this.toggleDebuggerSidebarButton.setEnabled(false);\n    this.revealDebuggerSidebar();\n    window.focus();\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.bringToFront();\n  }\n\n  private debuggerResumed(debuggerModel: SDK.DebuggerModel.DebuggerModel): void {\n    const target = debuggerModel.target();\n    if (UI.Context.Context.instance().flavor(SDK.Target.Target) !== target) {\n      return;\n    }\n    this.pausedInternal = false;\n    this.clearInterface();\n    this.toggleDebuggerSidebarButton.setEnabled(true);\n    this.switchToPausedTargetTimeout = window.setTimeout(this.switchToPausedTarget.bind(this, debuggerModel), 500);\n  }\n\n  private debuggerWasEnabled(event: Common.EventTarget.EventTargetEvent<SDK.DebuggerModel.DebuggerModel>): void {\n    const debuggerModel = event.data;\n    if (UI.Context.Context.instance().flavor(SDK.Target.Target) !== debuggerModel.target()) {\n      return;\n    }\n\n    void this.updateDebuggerButtonsAndStatus();\n  }\n\n  get visibleView(): UI.Widget.Widget|null {\n    return this.sourcesViewInternal.visibleView();\n  }\n\n  showUISourceCode(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, lineNumber?: number, columnNumber?: number,\n      omitFocus?: boolean): void {\n    if (omitFocus) {\n      const wrapperShowing = WrapperView.isShowing();\n      if (!this.isShowing() && !wrapperShowing) {\n        return;\n      }\n    } else {\n      this.showEditor();\n    }\n    this.sourcesViewInternal.showSourceLocation(\n        uiSourceCode, lineNumber === undefined ? undefined : {lineNumber, columnNumber}, omitFocus);\n  }\n\n  private showEditor(): void {\n    if (WrapperView.isShowing()) {\n      return;\n    }\n    void this.setAsCurrentPanel();\n  }\n\n  showUILocation(uiLocation: Workspace.UISourceCode.UILocation, omitFocus?: boolean): void {\n    this.showUISourceCode(uiLocation.uiSourceCode, uiLocation.lineNumber, uiLocation.columnNumber, omitFocus);\n  }\n\n  revealInNavigator(uiSourceCode: Workspace.UISourceCode.UISourceCode, skipReveal?: boolean): void {\n    for (const navigator of registeredNavigatorViews) {\n      const navigatorView = navigator.navigatorView();\n      const viewId = navigator.viewId;\n      if (viewId && navigatorView.acceptProject(uiSourceCode.project())) {\n        navigatorView.revealUISourceCode(uiSourceCode, true);\n        if (skipReveal) {\n          this.navigatorTabbedLocation.tabbedPane().selectTab(viewId);\n        } else {\n          void UI.ViewManager.ViewManager.instance().showView(viewId);\n        }\n      }\n    }\n  }\n\n  private toggleAuthoredDeployedExperiment(): void {\n    const experiment = Root.Runtime.ExperimentName.AUTHORED_DEPLOYED_GROUPING;\n    const checked = Root.Runtime.experiments.isEnabled(experiment);\n    Root.Runtime.experiments.setEnabled(experiment, !checked);\n    Host.userMetrics.experimentChanged(experiment, checked);\n    // Need to signal to the NavigatorView that grouping has changed. Unfortunately,\n    // it can't listen to an experiment, and this class doesn't directly interact\n    // with it, so we will convince it a different grouping setting changed. When we switch\n    // from using an experiment to a setting, it will listen to that setting and we\n    // won't need to do this.\n    const groupByFolderSetting = Common.Settings.Settings.instance().moduleSetting('navigatorGroupByFolder');\n    groupByFolderSetting.set(groupByFolderSetting.get());\n  }\n\n  private populateNavigatorMenu(contextMenu: UI.ContextMenu.ContextMenu): void {\n    const groupByFolderSetting = Common.Settings.Settings.instance().moduleSetting('navigatorGroupByFolder');\n    contextMenu.appendItemsAtLocation('navigatorMenu');\n    contextMenu.viewSection().appendCheckboxItem(\n        i18nString(UIStrings.groupByFolder), () => groupByFolderSetting.set(!groupByFolderSetting.get()),\n        groupByFolderSetting.get());\n    const previewIcon = new IconButton.Icon.Icon();\n    const experiment = Root.Runtime.ExperimentName.AUTHORED_DEPLOYED_GROUPING;\n    previewIcon.data = {\n      iconName: 'ic_preview_feature',\n      color: 'var(--icon-color)',\n      width: '14px',\n    };\n    contextMenu.viewSection().appendCheckboxItem(\n        i18nString(UIStrings.groupByAuthored), this.toggleAuthoredDeployedExperiment,\n        Root.Runtime.experiments.isEnabled(experiment), false, previewIcon);\n  }\n\n  setIgnoreExecutionLineEvents(ignoreExecutionLineEvents: boolean): void {\n    this.ignoreExecutionLineEvents = ignoreExecutionLineEvents;\n  }\n\n  updateLastModificationTime(): void {\n    this.lastModificationTime = window.performance.now();\n  }\n\n  private async executionLineChanged(liveLocation: Bindings.LiveLocation.LiveLocation): Promise<void> {\n    const uiLocation = await liveLocation.uiLocation();\n    if (liveLocation.isDisposed()) {\n      return;\n    }\n    if (!uiLocation) {\n      return;\n    }\n    if (window.performance.now() - this.lastModificationTime < lastModificationTimeout) {\n      return;\n    }\n    this.sourcesViewInternal.showSourceLocation(uiLocation.uiSourceCode, uiLocation, undefined, true);\n  }\n\n  private lastModificationTimeoutPassedForTest(): void {\n    lastModificationTimeout = Number.MIN_VALUE;\n  }\n\n  private updateLastModificationTimeForTest(): void {\n    lastModificationTimeout = Number.MAX_VALUE;\n  }\n\n  private async callFrameChanged(): Promise<void> {\n    const callFrame = UI.Context.Context.instance().flavor(SDK.DebuggerModel.CallFrame);\n    if (!callFrame) {\n      return;\n    }\n    if (this.executionLineLocation) {\n      this.executionLineLocation.dispose();\n    }\n    this.executionLineLocation =\n        await Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance().createCallFrameLiveLocation(\n            callFrame.location(), this.executionLineChanged.bind(this), this.liveLocationPool);\n  }\n\n  private pauseOnExceptionEnabledChanged(): void {\n    const enabled = Common.Settings.Settings.instance().moduleSetting('pauseOnExceptionEnabled').get();\n    const button = (this.pauseOnExceptionButton as UI.Toolbar.ToolbarToggle);\n    button.setToggled(enabled);\n    button.setTitle(enabled ? i18nString(UIStrings.dontPauseOnExceptions) : i18nString(UIStrings.pauseOnExceptions));\n    this.debugToolbarDrawer.classList.toggle('expanded', enabled);\n  }\n\n  private async updateDebuggerButtonsAndStatus(): Promise<void> {\n    const currentTarget = UI.Context.Context.instance().flavor(SDK.Target.Target);\n    const currentDebuggerModel = currentTarget ? currentTarget.model(SDK.DebuggerModel.DebuggerModel) : null;\n    if (!currentDebuggerModel) {\n      this.togglePauseAction.setEnabled(false);\n      this.stepOverAction.setEnabled(false);\n      this.stepIntoAction.setEnabled(false);\n      this.stepOutAction.setEnabled(false);\n      this.stepAction.setEnabled(false);\n    } else if (this.pausedInternal) {\n      this.togglePauseAction.setToggled(true);\n      this.togglePauseAction.setEnabled(true);\n      this.stepOverAction.setEnabled(true);\n      this.stepIntoAction.setEnabled(true);\n      this.stepOutAction.setEnabled(true);\n      this.stepAction.setEnabled(true);\n    } else {\n      this.togglePauseAction.setToggled(false);\n      this.togglePauseAction.setEnabled(!currentDebuggerModel.isPausing());\n      this.stepOverAction.setEnabled(false);\n      this.stepIntoAction.setEnabled(false);\n      this.stepOutAction.setEnabled(false);\n      this.stepAction.setEnabled(false);\n    }\n\n    const details = currentDebuggerModel ? currentDebuggerModel.debuggerPausedDetails() : null;\n    await this.debuggerPausedMessage.render(\n        details, Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance(),\n        Bindings.BreakpointManager.BreakpointManager.instance());\n    if (details) {\n      this.updateDebuggerButtonsAndStatusForTest();\n    }\n  }\n\n  private updateDebuggerButtonsAndStatusForTest(): void {\n  }\n\n  private clearInterface(): void {\n    void this.updateDebuggerButtonsAndStatus();\n    UI.Context.Context.instance().setFlavor(SDK.DebuggerModel.DebuggerPausedDetails, null);\n\n    if (this.switchToPausedTargetTimeout) {\n      clearTimeout(this.switchToPausedTargetTimeout);\n    }\n    this.liveLocationPool.disposeAll();\n  }\n\n  private switchToPausedTarget(debuggerModel: SDK.DebuggerModel.DebuggerModel): void {\n    delete this.switchToPausedTargetTimeout;\n    if (this.pausedInternal || debuggerModel.isPaused()) {\n      return;\n    }\n\n    for (const debuggerModel of SDK.TargetManager.TargetManager.instance().models(SDK.DebuggerModel.DebuggerModel)) {\n      if (debuggerModel.isPaused()) {\n        UI.Context.Context.instance().setFlavor(SDK.Target.Target, debuggerModel.target());\n        break;\n      }\n    }\n  }\n\n  private togglePauseOnExceptions(): void {\n    Common.Settings.Settings.instance()\n        .moduleSetting('pauseOnExceptionEnabled')\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n        // @ts-expect-error\n        .set(!(this.pauseOnExceptionButton).toggled());\n  }\n\n  runSnippet(): void {\n    const uiSourceCode = this.sourcesViewInternal.currentUISourceCode();\n    if (uiSourceCode) {\n      void Snippets.ScriptSnippetFileSystem.evaluateScriptSnippet(uiSourceCode);\n    }\n  }\n\n  private editorSelected(event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.UISourceCode>): void {\n    const uiSourceCode = event.data;\n    if (this.editorView.mainWidget() &&\n        Common.Settings.Settings.instance().moduleSetting('autoRevealInNavigator').get()) {\n      this.revealInNavigator(uiSourceCode, true);\n    }\n  }\n\n  togglePause(): boolean {\n    const target = UI.Context.Context.instance().flavor(SDK.Target.Target);\n    if (!target) {\n      return true;\n    }\n    const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n    if (!debuggerModel) {\n      return true;\n    }\n\n    if (this.pausedInternal) {\n      this.pausedInternal = false;\n      debuggerModel.resume();\n    } else {\n      // Make sure pauses didn't stick skipped.\n      debuggerModel.pause();\n    }\n\n    this.clearInterface();\n    return true;\n  }\n\n  private prepareToResume(): SDK.DebuggerModel.DebuggerModel|null {\n    if (!this.pausedInternal) {\n      return null;\n    }\n\n    this.pausedInternal = false;\n\n    this.clearInterface();\n    const target = UI.Context.Context.instance().flavor(SDK.Target.Target);\n    return target ? target.model(SDK.DebuggerModel.DebuggerModel) : null;\n  }\n\n  private longResume(): void {\n    const debuggerModel = this.prepareToResume();\n    if (debuggerModel) {\n      debuggerModel.skipAllPausesUntilReloadOrTimeout(500);\n      debuggerModel.resume();\n    }\n  }\n\n  private terminateExecution(): void {\n    const debuggerModel = this.prepareToResume();\n    if (debuggerModel) {\n      void debuggerModel.runtimeModel().terminateExecution();\n      debuggerModel.resume();\n    }\n  }\n\n  stepOver(): boolean {\n    const debuggerModel = this.prepareToResume();\n    if (debuggerModel) {\n      void debuggerModel.stepOver();\n    }\n    return true;\n  }\n\n  stepInto(): boolean {\n    const debuggerModel = this.prepareToResume();\n    if (debuggerModel) {\n      void debuggerModel.stepInto();\n    }\n    return true;\n  }\n\n  stepIntoAsync(): boolean {\n    const debuggerModel = this.prepareToResume();\n    if (debuggerModel) {\n      debuggerModel.scheduleStepIntoAsync();\n    }\n    return true;\n  }\n\n  stepOut(): boolean {\n    const debuggerModel = this.prepareToResume();\n    if (debuggerModel) {\n      void debuggerModel.stepOut();\n    }\n    return true;\n  }\n\n  private async continueToLocation(uiLocation: Workspace.UISourceCode.UILocation): Promise<void> {\n    const executionContext = UI.Context.Context.instance().flavor(SDK.RuntimeModel.ExecutionContext);\n    if (!executionContext) {\n      return;\n    }\n    // Always use 0 column.\n    const rawLocations =\n        await Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance().uiLocationToRawLocations(\n            uiLocation.uiSourceCode, uiLocation.lineNumber, 0);\n    const rawLocation = rawLocations.find(location => location.debuggerModel === executionContext.debuggerModel);\n    if (rawLocation && this.prepareToResume()) {\n      rawLocation.continueToLocation();\n    }\n  }\n\n  toggleBreakpointsActive(): void {\n    Common.Settings.Settings.instance()\n        .moduleSetting('breakpointsActive')\n        .set(!Common.Settings.Settings.instance().moduleSetting('breakpointsActive').get());\n  }\n\n  private breakpointsActiveStateChanged(): void {\n    const active = Common.Settings.Settings.instance().moduleSetting('breakpointsActive').get();\n    this.toggleBreakpointsActiveAction.setToggled(!active);\n    this.sourcesViewInternal.toggleBreakpointsActiveState(active);\n  }\n\n  private createDebugToolbar(): UI.Toolbar.Toolbar {\n    const debugToolbar = new UI.Toolbar.Toolbar('scripts-debug-toolbar');\n\n    const longResumeButton =\n        new UI.Toolbar.ToolbarButton(i18nString(UIStrings.resumeWithAllPausesBlockedForMs), 'largeicon-play');\n    longResumeButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.longResume, this);\n    const terminateExecutionButton = new UI.Toolbar.ToolbarButton(\n        i18nString(UIStrings.terminateCurrentJavascriptCall), 'largeicon-terminate-execution');\n    terminateExecutionButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.terminateExecution, this);\n    debugToolbar.appendToolbarItem(UI.Toolbar.Toolbar.createLongPressActionButton(\n        this.togglePauseAction, [terminateExecutionButton, longResumeButton], []));\n\n    debugToolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButton(this.stepOverAction));\n    debugToolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButton(this.stepIntoAction));\n    debugToolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButton(this.stepOutAction));\n    debugToolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButton(this.stepAction));\n\n    debugToolbar.appendSeparator();\n    debugToolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButton(this.toggleBreakpointsActiveAction));\n\n    this.pauseOnExceptionButton = new UI.Toolbar.ToolbarToggle('', 'largeicon-pause-on-exceptions');\n    this.pauseOnExceptionButton.addEventListener(\n        UI.Toolbar.ToolbarButton.Events.Click, this.togglePauseOnExceptions, this);\n    debugToolbar.appendToolbarItem(this.pauseOnExceptionButton);\n\n    return debugToolbar;\n  }\n\n  private createDebugToolbarDrawer(): HTMLDivElement {\n    const debugToolbarDrawer = document.createElement('div');\n    debugToolbarDrawer.classList.add('scripts-debug-toolbar-drawer');\n\n    const label = i18nString(UIStrings.pauseOnCaughtExceptions);\n    const setting = Common.Settings.Settings.instance().moduleSetting('pauseOnCaughtException');\n    debugToolbarDrawer.appendChild(UI.SettingsUI.createSettingCheckbox(label, setting, true));\n\n    return debugToolbarDrawer;\n  }\n\n  appendApplicableItems(event: Event, contextMenu: UI.ContextMenu.ContextMenu, target: Object): void {\n    this.appendUISourceCodeItems(event, contextMenu, target);\n    this.appendUISourceCodeFrameItems(event, contextMenu, target);\n    this.appendUILocationItems(contextMenu, target);\n    this.appendRemoteObjectItems(contextMenu, target);\n    this.appendNetworkRequestItems(contextMenu, target);\n  }\n\n  private appendUISourceCodeItems(event: Event, contextMenu: UI.ContextMenu.ContextMenu, target: Object): void {\n    if (!(target instanceof Workspace.UISourceCode.UISourceCode) || !event.target) {\n      return;\n    }\n\n    const uiSourceCode = (target as Workspace.UISourceCode.UISourceCode);\n    const eventTarget = (event.target as Node);\n    if (!uiSourceCode.project().isServiceProject() &&\n        !eventTarget.isSelfOrDescendant(this.navigatorTabbedLocation.widget().element)) {\n      contextMenu.revealSection().appendItem(\n          i18nString(UIStrings.revealInSidebar), this.handleContextMenuReveal.bind(this, uiSourceCode));\n    }\n  }\n\n  private appendUISourceCodeFrameItems(event: Event, contextMenu: UI.ContextMenu.ContextMenu, target: Object): void {\n    if (!(target instanceof UISourceCodeFrame)) {\n      return;\n    }\n    if (target.uiSourceCode().contentType().isFromSourceMap() || target.textEditor.state.selection.main.empty) {\n      return;\n    }\n    contextMenu.debugSection().appendAction('debugger.evaluate-selection');\n  }\n\n  appendUILocationItems(contextMenu: UI.ContextMenu.ContextMenu, object: Object): void {\n    if (!(object instanceof Workspace.UISourceCode.UILocation)) {\n      return;\n    }\n    const uiLocation = (object as Workspace.UISourceCode.UILocation);\n    const uiSourceCode = uiLocation.uiSourceCode;\n\n    if (!Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance()\n             .scriptsForUISourceCode(uiSourceCode)\n             .every(script => script.isJavaScript())) {\n      // Ignore List and 'Continue to here' currently only works for JavaScript debugging.\n      return;\n    }\n    const contentType = uiSourceCode.contentType();\n    if (contentType.hasScripts()) {\n      const target = UI.Context.Context.instance().flavor(SDK.Target.Target);\n      const debuggerModel = target ? target.model(SDK.DebuggerModel.DebuggerModel) : null;\n      if (debuggerModel && debuggerModel.isPaused()) {\n        contextMenu.debugSection().appendItem(\n            i18nString(UIStrings.continueToHere), this.continueToLocation.bind(this, uiLocation));\n      }\n\n      this.callstackPane.appendIgnoreListURLContextMenuItems(contextMenu, uiSourceCode);\n    }\n  }\n\n  private handleContextMenuReveal(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    this.editorView.showBoth();\n    this.revealInNavigator(uiSourceCode);\n  }\n\n  private appendRemoteObjectItems(contextMenu: UI.ContextMenu.ContextMenu, target: Object): void {\n    if (!(target instanceof SDK.RemoteObject.RemoteObject)) {\n      return;\n    }\n    const indent = Common.Settings.Settings.instance().moduleSetting('textEditorIndent').get();\n    const remoteObject = (target as SDK.RemoteObject.RemoteObject);\n    const executionContext = UI.Context.Context.instance().flavor(SDK.RuntimeModel.ExecutionContext);\n\n    function getObjectTitle(): string|undefined {\n      if (remoteObject.type === 'wasm') {\n        return remoteObject.subtype;\n      }\n      if (remoteObject.subtype === 'node') {\n        return 'outerHTML';\n      }\n      return remoteObject.type;\n    }\n    const copyContextMenuTitle = getObjectTitle();\n\n    contextMenu.debugSection().appendItem(\n        i18nString(UIStrings.storeSAsGlobalVariable, {PH1: String(copyContextMenuTitle)}),\n        () => SDK.ConsoleModel.ConsoleModel.instance().saveToTempVariable(executionContext, remoteObject));\n\n    const ctxMenuClipboardSection = contextMenu.clipboardSection();\n    const inspectorFrontendHost = Host.InspectorFrontendHost.InspectorFrontendHostInstance;\n\n    if (remoteObject.type === 'string') {\n      ctxMenuClipboardSection.appendItem(i18nString(UIStrings.copyStringContents), () => {\n        inspectorFrontendHost.copyText(remoteObject.value);\n      });\n      ctxMenuClipboardSection.appendItem(i18nString(UIStrings.copyStringAsJSLiteral), () => {\n        inspectorFrontendHost.copyText(Platform.StringUtilities.formatAsJSLiteral(remoteObject.value));\n      });\n      ctxMenuClipboardSection.appendItem(i18nString(UIStrings.copyStringAsJSONLiteral), () => {\n        inspectorFrontendHost.copyText(JSON.stringify(remoteObject.value));\n      });\n    }\n    // We are trying to copy a primitive value.\n    else if (primitiveRemoteObjectTypes.has(remoteObject.type)) {\n      ctxMenuClipboardSection.appendItem(i18nString(UIStrings.copyS, {PH1: String(copyContextMenuTitle)}), () => {\n        inspectorFrontendHost.copyText(remoteObject.description);\n      });\n    }\n    // We are trying to copy a remote object.\n    else if (remoteObject.type === 'object') {\n      const copyDecodedValueHandler = async(): Promise<void> => {\n        const result = await remoteObject.callFunctionJSON(toStringForClipboard, [{\n                                                             value: {\n                                                               subtype: remoteObject.subtype,\n                                                               indent: indent,\n                                                             },\n                                                           }]);\n        inspectorFrontendHost.copyText(result);\n      };\n\n      ctxMenuClipboardSection.appendItem(\n          i18nString(UIStrings.copyS, {PH1: String(copyContextMenuTitle)}), copyDecodedValueHandler);\n    }\n\n    else if (remoteObject.type === 'function') {\n      contextMenu.debugSection().appendItem(\n          i18nString(UIStrings.showFunctionDefinition), this.showFunctionDefinition.bind(this, remoteObject));\n    }\n\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    function toStringForClipboard(this: Object, data: any): string|undefined {\n      const subtype = data.subtype;\n      const indent = data.indent;\n\n      if (subtype === 'node') {\n        return this instanceof Element ? this.outerHTML : undefined;\n      }\n      if (subtype && typeof this === 'undefined') {\n        return String(subtype);\n      }\n      try {\n        return JSON.stringify(this, null, indent);\n      } catch (error) {\n        return String(this);\n      }\n    }\n  }\n\n  private appendNetworkRequestItems(contextMenu: UI.ContextMenu.ContextMenu, target: Object): void {\n    if (!(target instanceof SDK.NetworkRequest.NetworkRequest)) {\n      return;\n    }\n    const request = (target as SDK.NetworkRequest.NetworkRequest);\n    const uiSourceCode = this.workspace.uiSourceCodeForURL(request.url());\n    if (!uiSourceCode) {\n      return;\n    }\n    const openText = i18nString(UIStrings.openInSourcesPanel);\n    const callback: () => void = this.showUILocation.bind(this, uiSourceCode.uiLocation(0, 0));\n    contextMenu.revealSection().appendItem(openText, callback);\n  }\n\n  private showFunctionDefinition(remoteObject: SDK.RemoteObject.RemoteObject): void {\n    void remoteObject.debuggerModel().functionDetailsPromise(remoteObject).then(this.didGetFunctionDetails.bind(this));\n  }\n\n  private async didGetFunctionDetails(response: {\n    location: SDK.DebuggerModel.Location|null,\n  }|null): Promise<void> {\n    if (!response || !response.location) {\n      return;\n    }\n\n    const uiLocation =\n        await Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance().rawLocationToUILocation(\n            response.location);\n    if (uiLocation) {\n      this.showUILocation(uiLocation);\n    }\n  }\n\n  private revealNavigatorSidebar(): void {\n    void this.setAsCurrentPanel();\n    this.editorView.showBoth(true);\n  }\n\n  private revealDebuggerSidebar(): void {\n    if (!Common.Settings.Settings.instance().moduleSetting('autoFocusOnDebuggerPausedEnabled').get()) {\n      return;\n    }\n    void this.setAsCurrentPanel();\n    this.splitWidget.showBoth(true);\n  }\n\n  private updateSidebarPosition(): void {\n    let vertically;\n    const position = Common.Settings.Settings.instance().moduleSetting('sidebarPosition').get();\n    if (position === 'right') {\n      vertically = false;\n    } else if (position === 'bottom') {\n      vertically = true;\n    } else {\n      vertically = UI.InspectorView.InspectorView.instance().element.offsetWidth < 680;\n    }\n\n    if (this.sidebarPaneView && vertically === !this.splitWidget.isVertical()) {\n      return;\n    }\n\n    if (this.sidebarPaneView && this.sidebarPaneView.shouldHideOnDetach()) {\n      return;\n    }  // We can't reparent extension iframes.\n\n    if (this.sidebarPaneView) {\n      this.sidebarPaneView.detach();\n    }\n\n    this.splitWidget.setVertical(!vertically);\n    this.splitWidget.element.classList.toggle('sources-split-view-vertical', vertically);\n\n    SourcesPanel.updateResizerAndSidebarButtons(this);\n\n    // Create vertical box with stack.\n    const vbox = new UI.Widget.VBox();\n    vbox.element.appendChild(this.debugToolbar.element);\n    vbox.element.appendChild(this.debugToolbarDrawer);\n\n    vbox.setMinimumAndPreferredSizes(minToolbarWidth, 25, minToolbarWidth, 100);\n    this.sidebarPaneStack =\n        UI.ViewManager.ViewManager.instance().createStackLocation(this.revealDebuggerSidebar.bind(this));\n    this.sidebarPaneStack.widget().element.classList.add('overflow-auto');\n    this.sidebarPaneStack.widget().show(vbox.element);\n    this.sidebarPaneStack.widget().element.appendChild(this.debuggerPausedMessage.element());\n    this.sidebarPaneStack.appendApplicableItems('sources.sidebar-top');\n\n    if (this.threadsSidebarPane) {\n      void this.sidebarPaneStack.showView(this.threadsSidebarPane);\n    }\n\n    const jsBreakpoints = UI.ViewManager.ViewManager.instance().view('sources.jsBreakpoints');\n    const scopeChainView = UI.ViewManager.ViewManager.instance().view('sources.scopeChain');\n\n    if (this.tabbedLocationHeader) {\n      this.splitWidget.uninstallResizer(this.tabbedLocationHeader);\n      this.tabbedLocationHeader = null;\n    }\n\n    if (!vertically) {\n      // Populate the rest of the stack.\n      this.sidebarPaneStack.appendView(this.watchSidebarPane);\n      void this.sidebarPaneStack.showView(jsBreakpoints);\n      void this.sidebarPaneStack.showView(scopeChainView);\n      void this.sidebarPaneStack.showView(this.callstackPane);\n      this.extensionSidebarPanesContainer = this.sidebarPaneStack;\n      this.sidebarPaneView = vbox;\n      this.splitWidget.uninstallResizer(this.debugToolbar.gripElementForResize());\n    } else {\n      const splitWidget = new UI.SplitWidget.SplitWidget(true, true, 'sourcesPanelDebuggerSidebarSplitViewState', 0.5);\n      splitWidget.setMainWidget(vbox);\n\n      // Populate the left stack.\n      void this.sidebarPaneStack.showView(jsBreakpoints);\n      void this.sidebarPaneStack.showView(this.callstackPane);\n\n      const tabbedLocation =\n          UI.ViewManager.ViewManager.instance().createTabbedLocation(this.revealDebuggerSidebar.bind(this));\n      splitWidget.setSidebarWidget(tabbedLocation.tabbedPane());\n      this.tabbedLocationHeader = tabbedLocation.tabbedPane().headerElement();\n      this.splitWidget.installResizer(this.tabbedLocationHeader);\n      this.splitWidget.installResizer(this.debugToolbar.gripElementForResize());\n      tabbedLocation.appendView(scopeChainView);\n      tabbedLocation.appendView(this.watchSidebarPane);\n      tabbedLocation.appendApplicableItems('sources.sidebar-tabs');\n      this.extensionSidebarPanesContainer = tabbedLocation;\n      this.sidebarPaneView = splitWidget;\n    }\n\n    this.sidebarPaneStack.appendApplicableItems('sources.sidebar-bottom');\n    const extensionSidebarPanes = Extensions.ExtensionServer.ExtensionServer.instance().sidebarPanes();\n    for (let i = 0; i < extensionSidebarPanes.length; ++i) {\n      this.addExtensionSidebarPane(extensionSidebarPanes[i]);\n    }\n\n    this.splitWidget.setSidebarWidget(this.sidebarPaneView);\n  }\n\n  setAsCurrentPanel(): Promise<void> {\n    return UI.ViewManager.ViewManager.instance().showView('sources');\n  }\n\n  private extensionSidebarPaneAdded(\n      event: Common.EventTarget.EventTargetEvent<Extensions.ExtensionPanel.ExtensionSidebarPane>): void {\n    this.addExtensionSidebarPane(event.data);\n  }\n\n  private addExtensionSidebarPane(pane: Extensions.ExtensionPanel.ExtensionSidebarPane): void {\n    if (pane.panelName() === this.name) {\n      (this.extensionSidebarPanesContainer as UI.View.ViewLocation).appendView(pane);\n    }\n  }\n\n  sourcesView(): SourcesView {\n    return this.sourcesViewInternal;\n  }\n\n  private handleDrop(dataTransfer: DataTransfer): void {\n    const items = dataTransfer.items;\n    if (!items.length) {\n      return;\n    }\n    const entry = items[0].webkitGetAsEntry();\n    if (entry && entry.isDirectory) {\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.upgradeDraggedFileSystemPermissions(entry.filesystem);\n    }\n  }\n}\n\nexport let lastModificationTimeout = 200;\nexport const minToolbarWidth = 215;\n\nlet uILocationRevealerInstance: UILocationRevealer;\n\nexport class UILocationRevealer implements Common.Revealer.Revealer {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): UILocationRevealer {\n    const {forceNew} = opts;\n    if (!uILocationRevealerInstance || forceNew) {\n      uILocationRevealerInstance = new UILocationRevealer();\n    }\n\n    return uILocationRevealerInstance;\n  }\n\n  async reveal(uiLocation: Object, omitFocus?: boolean): Promise<void> {\n    if (!(uiLocation instanceof Workspace.UISourceCode.UILocation)) {\n      throw new Error('Internal error: not a ui location');\n    }\n    SourcesPanel.instance().showUILocation(uiLocation, omitFocus);\n  }\n}\n\nlet debuggerLocationRevealerInstance: DebuggerLocationRevealer;\n\nexport class DebuggerLocationRevealer implements Common.Revealer.Revealer {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): DebuggerLocationRevealer {\n    const {forceNew} = opts;\n    if (!debuggerLocationRevealerInstance || forceNew) {\n      debuggerLocationRevealerInstance = new DebuggerLocationRevealer();\n    }\n\n    return debuggerLocationRevealerInstance;\n  }\n\n  async reveal(rawLocation: Object, omitFocus?: boolean): Promise<void> {\n    if (!(rawLocation instanceof SDK.DebuggerModel.Location)) {\n      throw new Error('Internal error: not a debugger location');\n    }\n    const uiLocation =\n        await Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance().rawLocationToUILocation(\n            rawLocation);\n    if (uiLocation) {\n      SourcesPanel.instance().showUILocation(uiLocation, omitFocus);\n    }\n  }\n}\n\nlet uISourceCodeRevealerInstance: UISourceCodeRevealer;\n\nexport class UISourceCodeRevealer implements Common.Revealer.Revealer {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): UISourceCodeRevealer {\n    const {forceNew} = opts;\n    if (!uISourceCodeRevealerInstance || forceNew) {\n      uISourceCodeRevealerInstance = new UISourceCodeRevealer();\n    }\n\n    return uISourceCodeRevealerInstance;\n  }\n\n  async reveal(uiSourceCode: Object, omitFocus?: boolean): Promise<void> {\n    if (!(uiSourceCode instanceof Workspace.UISourceCode.UISourceCode)) {\n      throw new Error('Internal error: not a ui source code');\n    }\n    SourcesPanel.instance().showUISourceCode(uiSourceCode, undefined, undefined, omitFocus);\n  }\n}\n\nlet debuggerPausedDetailsRevealerInstance: DebuggerPausedDetailsRevealer;\n\nexport class DebuggerPausedDetailsRevealer implements Common.Revealer.Revealer {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): DebuggerPausedDetailsRevealer {\n    const {forceNew} = opts;\n    if (!debuggerPausedDetailsRevealerInstance || forceNew) {\n      debuggerPausedDetailsRevealerInstance = new DebuggerPausedDetailsRevealer();\n    }\n\n    return debuggerPausedDetailsRevealerInstance;\n  }\n\n  async reveal(_object: Object): Promise<void> {\n    if (Common.Settings.Settings.instance().moduleSetting('autoFocusOnDebuggerPausedEnabled').get()) {\n      return SourcesPanel.instance().setAsCurrentPanel();\n    }\n  }\n}\n\nlet revealingActionDelegateInstance: RevealingActionDelegate;\n\nexport class RevealingActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): RevealingActionDelegate {\n    const {forceNew} = opts;\n    if (!revealingActionDelegateInstance || forceNew) {\n      revealingActionDelegateInstance = new RevealingActionDelegate();\n    }\n\n    return revealingActionDelegateInstance;\n  }\n  handleAction(context: UI.Context.Context, actionId: string): boolean {\n    const panel = SourcesPanel.instance();\n    if (!panel.ensureSourcesViewVisible()) {\n      return false;\n    }\n    switch (actionId) {\n      case 'debugger.toggle-pause': {\n        // This action can be triggered both on the DevTools front-end itself,\n        // or on the inspected target. If triggered on the DevTools front-end,\n        // it will take care of resuming.\n        //\n        // If triggered on the target, NOT in hosted mode:\n        //   * ..and the paused overlay is enabled:\n        //       => do not take any action here, as the paused overlay will resume\n        //   * ..and the paused overlay is disabled:\n        //       => take care of the resume here\n        // If triggered on the target in hosted mode:\n        //   * ..and the paused overlay is enabled:\n        //       => execution will not reach here, as shortcuts are not forwarded\n        //          and the paused overlay will resume\n        //   * ..and the paused overlay is disabled:\n        //       => overlay will not take care of resume, and neither will\n        //          DevTools as no shortcuts are forwarded from the target\n\n        // Do not trigger a resume action, if: the shortcut was forwarded and the\n        // paused overlay is enabled.\n        const actionHandledInPausedOverlay = context.flavor(UI.ShortcutRegistry.ForwardedShortcut) &&\n            !Common.Settings.Settings.instance().moduleSetting('disablePausedStateOverlay').get();\n        if (actionHandledInPausedOverlay) {\n          // Taken care of by inspector overlay: handled set to true to\n          // register user metric.\n          return true;\n        }\n        panel.togglePause();\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\nlet actionDelegateInstance: ActionDelegate;\n\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ActionDelegate {\n    const {forceNew} = opts;\n    if (!actionDelegateInstance || forceNew) {\n      actionDelegateInstance = new ActionDelegate();\n    }\n\n    return actionDelegateInstance;\n  }\n  handleAction(context: UI.Context.Context, actionId: string): boolean {\n    const panel = SourcesPanel.instance();\n    switch (actionId) {\n      case 'debugger.step-over': {\n        panel.stepOver();\n        return true;\n      }\n      case 'debugger.step-into': {\n        panel.stepIntoAsync();\n        return true;\n      }\n      case 'debugger.step': {\n        panel.stepInto();\n        return true;\n      }\n      case 'debugger.step-out': {\n        panel.stepOut();\n        return true;\n      }\n      case 'debugger.run-snippet': {\n        panel.runSnippet();\n        return true;\n      }\n      case 'debugger.toggle-breakpoints-active': {\n        panel.toggleBreakpointsActive();\n        return true;\n      }\n      case 'debugger.evaluate-selection': {\n        const frame = UI.Context.Context.instance().flavor(UISourceCodeFrame);\n        if (frame) {\n          const {state: editorState} = frame.textEditor;\n          let text = editorState.sliceDoc(editorState.selection.main.from, editorState.selection.main.to);\n          const executionContext = UI.Context.Context.instance().flavor(SDK.RuntimeModel.ExecutionContext);\n          if (executionContext) {\n            const message = SDK.ConsoleModel.ConsoleModel.instance().addCommandMessage(executionContext, text);\n            text = ObjectUI.JavaScriptREPL.JavaScriptREPL.wrapObjectLiteral(text);\n            void SDK.ConsoleModel.ConsoleModel.instance().evaluateCommandInConsole(\n                executionContext, message, text, /* useCommandLineAPI */ true);\n          }\n        }\n        return true;\n      }\n      case 'sources.toggle-navigator-sidebar': {\n        panel.toggleNavigatorSidebar();\n        return true;\n      }\n      case 'sources.toggle-debugger-sidebar': {\n        panel.toggleDebuggerSidebar();\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\nexport class WrapperView extends UI.Widget.VBox {\n  private readonly view: SourcesView;\n  constructor() {\n    super();\n    this.element.classList.add('sources-view-wrapper');\n    this.view = SourcesPanel.instance().sourcesView();\n  }\n\n  static instance(): WrapperView {\n    if (!wrapperViewInstance) {\n      wrapperViewInstance = new WrapperView();\n    }\n\n    return wrapperViewInstance;\n  }\n\n  static isShowing(): boolean {\n    return Boolean(wrapperViewInstance) && wrapperViewInstance.isShowing();\n  }\n\n  wasShown(): void {\n    if (!SourcesPanel.instance().isShowing()) {\n      this.showViewInWrapper();\n    } else {\n      UI.InspectorView.InspectorView.instance().setDrawerMinimized(true);\n    }\n    SourcesPanel.updateResizerAndSidebarButtons(SourcesPanel.instance());\n  }\n\n  willHide(): void {\n    UI.InspectorView.InspectorView.instance().setDrawerMinimized(false);\n    queueMicrotask(() => {\n      SourcesPanel.updateResizerAndSidebarButtons(SourcesPanel.instance());\n    });\n  }\n\n  showViewInWrapper(): void {\n    this.view.show(this.element);\n  }\n}\n\nconst registeredNavigatorViews: NavigatorViewRegistration[] = [\n  {\n    viewId: 'navigator-network',\n    navigatorView: NetworkNavigatorView.instance,\n    experiment: undefined,\n  },\n  {\n    viewId: 'navigator-files',\n    navigatorView: FilesNavigatorView.instance,\n    experiment: undefined,\n  },\n  {\n    viewId: 'navigator-snippets',\n    navigatorView: SnippetsNavigatorView.instance,\n    experiment: undefined,\n  },\n  {\n    viewId: 'navigator-overrides',\n    navigatorView: OverridesNavigatorView.instance,\n    experiment: undefined,\n  },\n  {\n    viewId: 'navigator-contentScripts',\n    navigatorView: ContentScriptsNavigatorView.instance,\n    experiment: undefined,\n  },\n];\nexport interface NavigatorViewRegistration {\n  navigatorView: () => NavigatorView;\n  viewId: string;\n  experiment?: string;\n}\n"],
  "mappings": "AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAEA,MAAM,YAAY;AAAA,EAIhB,yBAAyB;AAAA,EAIzB,aAAa;AAAA,EAKb,eAAe;AAAA,EAKf,eAAe;AAAA,EAIf,gBAAgB;AAAA,EAIhB,iBAAiB;AAAA,EAIjB,eAAe;AAAA,EAIf,gBAAgB;AAAA,EAKhB,cAAc;AAAA,EAKd,cAAc;AAAA,EAId,eAAe;AAAA,EAIf,iBAAiB;AAAA,EAIjB,mBAAmB;AAAA,EAInB,uBAAuB;AAAA,EAIvB,iCAAiC;AAAA,EAIjC,gCAAgC;AAAA,EAIhC,yBAAyB;AAAA,EAIzB,iBAAiB;AAAA,EAMjB,gBAAgB;AAAA,EAKhB,wBAAwB;AAAA,EAKxB,OAAO;AAAA,EAKP,oBAAoB;AAAA,EAKpB,uBAAuB;AAAA,EAKvB,yBAAyB;AAAA,EAIzB,wBAAwB;AAAA,EAIxB,oBAAoB;AAAA;AAEtB,MAAM,OAAO,KAAK,KAAK,kBAAkB,kCAAkC;AAC3E,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAChE,MAAM,6BAA6B,oBAAI,IAAI,CAAC,UAAU,WAAW,UAAU;AAC3E,IAAI;AACJ,IAAI;AAEG,kCAA2B,GAAG,MAAM,MAC8C;AAAA,EACtE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACT;AAAA,EACR;AAAA,EACQ;AAAA,EACR;AAAA,EACiB;AAAA,EACA;AAAA,EACT;AAAA,EACS;AAAA,EACA;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACR;AAAA,EACA,cAAc;AACZ,UAAM;AAEN,QAAI,GAAG,WAAW,WACd,KAAK,SAAS,CAAC,GAAG,WAAW,KAAK,SAAS,WAAW,UAAU,0BAChE,KAAK,WAAW,KAAK;AAEzB,SAAK,YAAY,UAAU,UAAU,cAAc;AACnD,SAAK,oBACA,GAAG,eAAe,eAAe,WAAW,OAAO;AACxD,SAAK,iBACA,GAAG,eAAe,eAAe,WAAW,OAAO;AACxD,SAAK,iBACA,GAAG,eAAe,eAAe,WAAW,OAAO;AACxD,SAAK,gBACA,GAAG,eAAe,eAAe,WAAW,OAAO;AACxD,SAAK,aACA,GAAG,eAAe,eAAe,WAAW,OAAO;AACxD,SAAK,gCACA,GAAG,eAAe,eAAe,WAAW,OAAO;AAGxD,SAAK,eAAe,KAAK;AACzB,SAAK,qBAAqB,KAAK;AAC/B,SAAK,wBAAwB,IAAI;AAEjC,UAAM,2BAA2B;AACjC,SAAK,cACD,IAAI,GAAG,YAAY,YAAY,MAAM,MAAM,8BAA8B;AAC7E,SAAK,YAAY;AACjB,SAAK,YAAY,KAAK,KAAK;AAG3B,UAAM,wBAAwB;AAC9B,SAAK,aACD,IAAI,GAAG,YAAY,YAAY,MAAM,OAAO,uCAAuC;AACvF,SAAK,WAAW;AAChB,SAAK,YAAY,cAAc,KAAK;AAGpC,SAAK,0BAA0B,GAAG,YAAY,YAAY,WAAW,qBACjE,KAAK,uBAAuB,KAAK,OAAO,kBAAkB;AAC9D,UAAM,aAAa,KAAK,wBAAwB;AAChD,eAAW,eAAe,KAAK;AAC/B,eAAW,QAAQ,UAAU,IAAI;AACjC,UAAM,sBAAsB,IAAI,GAAG,QAAQ,kBAAkB,KAAK,sBAAsB,KAAK,OAAO;AACpG,wBAAoB,SAAS,WAAW,UAAU;AAClD,eAAW,eAAe,kBAAkB;AAE5C,QAAI,GAAG,YAAY,YAAY,WAAW,oBAAoB,qBAAqB;AACjF,YAAM,uBACF,IAAI,GAAG,YAAY,YAAY,OAAO,MAAM;AAChD,2BAAqB,cAAc;AACnC,YAAM,oBAAoB,GAAG,YAAY,YAAY,WACtB,qBAAqB,KAAK,uBAAuB,KAAK,OAAO,oBAC7D;AAC/B,2BAAqB,iBAAiB;AACtC,2BAAqB,eAAe,kBAAkB;AACtD,WAAK,WAAW,iBAAiB;AAAA,WAC5B;AACL,WAAK,WAAW,iBAAiB;AAAA;AAGnC,SAAK,sBAAsB,IAAI;AAC/B,SAAK,oBAAoB,iBAAiB,OAAO,gBAAgB,KAAK,eAAe,KAAK;AAE1F,SAAK,+BAA+B,KAAK,WAAW,4BAChD,WAAW,UAAU,gBAAgB,WAAW,UAAU,gBAAgB,WAAW,UAAU,iBAC/F,WAAW,UAAU;AACzB,SAAK,8BAA8B,KAAK,YAAY,4BAChD,WAAW,UAAU,eAAe,WAAW,UAAU,eAAe,WAAW,UAAU,gBAC7F,WAAW,UAAU;AACzB,SAAK,WAAW,cAAc,KAAK;AAEnC,SAAK,qBAAqB;AAC1B,SAAK,mBAAmB,GAAG,YAAY,YAAY,WAAW,KAAK;AACnE,SAAK,gBAAgB,qBAAqB;AAE1C,WAAO,SAAS,SAAS,WACpB,cAAc,mBACd,kBAAkB,KAAK,sBAAsB,KAAK;AACvD,SAAK;AAEL,SAAK,KAAK;AACV,SAAK;AACL,WAAO,SAAS,SAAS,WACpB,cAAc,2BACd,kBAAkB,KAAK,gCAAgC;AAE5D,SAAK,mBAAmB,IAAI,SAAS,aAAa;AAElD,SAAK,UAAU,GAAG,QAAQ,QAAQ,WAAW,OAAO,IAAI,OAAO;AAC/D,WAAO,SAAS,SAAS,WACpB,cAAc,qBACd,kBAAkB,KAAK,+BAA+B;AAC3D,OAAG,QAAQ,QAAQ,WAAW,wBAAwB,IAAI,OAAO,QAAQ,KAAK,wBAAwB;AACtG,OAAG,QAAQ,QAAQ,WAAW,wBAAwB,IAAI,cAAc,WAAW,KAAK,kBAAkB;AAC1G,QAAI,cAAc,cAAc,WAAW,iBACvC,IAAI,cAAc,eAAe,IAAI,cAAc,OAAO,oBAAoB,KAAK,oBAAoB;AAC3G,QAAI,cAAc,cAAc,WAAW,iBACvC,IAAI,cAAc,eAAe,IAAI,cAAc,OAAO,gBAAgB,KAAK,gBAAgB;AACnG,QAAI,cAAc,cAAc,WAAW,iBACvC,IAAI,cAAc,eAAe,IAAI,cAAc,OAAO,iBAC1D,WAAS,KAAK,gBAAgB,MAAM;AACxC,QAAI,cAAc,cAAc,WAAW,iBACvC,IAAI,cAAc,eAAe,IAAI,cAAc,OAAO,qBAC1D,WAAS,KAAK,gBAAgB,MAAM;AACxC,eAAW,gBAAgB,gBAAgB,WAAW,iBAClD,WAAW,gBAAgB,OAAO,kBAAkB,KAAK,2BAA2B;AACxF,QAAI,cAAc,cAAc,WAAW,eAAe;AAC1D,SAAK,uBAAuB;AAAA;AAAA,SAGvB,SAAS,OAEF,EAAC,UAAU,QAAqB;AAC5C,UAAM,EAAC,aAAY;AACnB,QAAI,CAAC,wBAAwB,UAAU;AACrC,6BAAuB,IAAI;AAAA;AAG7B,WAAO;AAAA;AAAA,SAGF,+BAA+B,OAA2B;AAC/D,UAAM,oBAAoB,cAAc;AACxC,UAAM,oBAAoB,eAAe;AACzC,UAAM,oBAAoB,gBAAgB;AAC1C,UAAM,cAAc,YAAY,eAAe,CAAC,GAAG,cAAc,cAAc,WAAW;AAC1F,QAAI,MAAM,YAAY,gBAAgB,aAAa;AACjD,YAAM,YAAY,iBAAiB,MAAM,oBAAoB;AAAA,WACxD;AACL,YAAM,YAAY,eAAe,MAAM,oBAAoB;AAAA;AAE7D,QAAI,CAAC,aAAa;AAChB,YAAM,oBAAoB,cAAc,kBAAkB,MAAM;AAChE,UAAI,MAAM,YAAY,cAAc;AAClC,cAAM,oBAAoB,eAAe,kBAAkB,MAAM;AAAA,aAC5D;AACL,cAAM,oBAAoB,gBAAgB,kBAAkB,MAAM;AAAA;AAAA;AAAA;AAAA,EAKxE,YAAY,SAAkC;AAC5C,SAAK;AAAA;AAAA,EAGP,cAAc,SAAkC;AAAA;AAAA,EAGxC,sBAA4B;AAClC,QAAI,mBAAmB,mBAAmB,CAAC,KAAK,oBAAoB;AAClE,WAAK,qBAAqB,GAAG,YAAY,YAAY,WAAW,KAAK;AACrE,UAAI,KAAK,oBAAoB,KAAK,oBAAoB;AACpD,aAAK,KAAK,iBAAiB,SACvB,KAAK,oBAAoB,KAAK,YAAY,eAAe,KAAK,mBAAmB,KAAK;AAAA;AAAA;AAAA;AAAA,EAKxF,UAAU,QAAsC;AACtD,QAAI,CAAC,QAAQ;AACX;AAAA;AAEF,UAAM,gBAAgB,OAAO,MAAM,IAAI,cAAc;AACrD,QAAI,CAAC,eAAe;AAClB;AAAA;AAGF,QAAI,cAAc,YAAY;AAC5B,WAAK,0BACA,cAAc;AAAA,WACd;AACL,WAAK,iBAAiB;AACtB,WAAK;AACL,WAAK,4BAA4B,WAAW;AAAA;AAAA;AAAA,EAIxC,uBAAuB,EAAC,MAAM,UAA4E;AAChH,SAAK,UAAU;AAAA;AAAA,EAEjB,SAAkB;AAChB,WAAO,KAAK,kBAAkB;AAAA;AAAA,EAGhC,WAAiB;AACf,OAAG,QAAQ,QAAQ,WAAW,UAAU,cAAc;AACtD,SAAK,iBAAiB,CAAC;AACvB,UAAM;AACN,UAAM,UAAU,YAAY;AAC5B,QAAI,WAAW,QAAQ,aAAa;AAClC,SAAG,cAAc,cAAc,WAAW,mBAAmB;AAC7D,mBAAa,+BAA+B;AAAA;AAE9C,SAAK,WAAW,cAAc,KAAK;AAAA;AAAA,EAGrC,WAAiB;AACf,UAAM;AACN,OAAG,QAAQ,QAAQ,WAAW,UAAU,cAAc;AACtD,QAAI,YAAY,aAAa;AAC3B,kBAAY,WAAW;AACvB,SAAG,cAAc,cAAc,WAAW,mBAAmB;AAC7D,mBAAa,+BAA+B;AAAA;AAAA;AAAA,EAIhD,gBAAgB,cAAiD;AAC/D,QAAI,iBAAiB,yBAAyB,iBAAiB,4BAC3D,iBAAiB,wBAAwB;AAC3C,aAAO,KAAK,oBAAoB;AAAA;AAElC,WAAO,KAAK;AAAA;AAAA,EAGd,2BAAoC;AAClC,QAAI,YAAY,aAAa;AAC3B,aAAO;AAAA;AAET,QAAI,CAAC,GAAG,cAAc,cAAc,WAAW,eAAe,YAAY;AACxE,aAAO;AAAA;AAET,SAAK,GAAG,YAAY,YAAY,WAAW,SAAS;AACpD,WAAO;AAAA;AAAA,EAGT,WAAiB;AACf,QAAI,OAAO,SAAS,SAAS,WAAW,cAAc,mBAAmB,UAAU,QAAQ;AACzF,WAAK,QAAQ,SAAS,sBAAsB,KAAK,sBAAsB,KAAK;AAAA;AAAA;AAAA,EAIhF,iBAAmD;AACjD,WAAO,KAAK,oBAAoB;AAAA;AAAA,EAGlC,yBAA+B;AAC7B,SAAK,WAAW;AAAA;AAAA,EAGlB,wBAA8B;AAC5B,SAAK,YAAY;AAAA;AAAA,EAGX,eAAe,OAAmF;AACxG,UAAM,gBAAgB,MAAM;AAC5B,UAAM,UAAU,cAAc;AAC9B,QAAI,CAAC,KAAK,kBACN,OAAO,SAAS,SAAS,WAAW,cAAc,oCAAoC,OAAO;AAC/F,WAAK,KAAK;AAAA;AAGZ,QAAI,GAAG,QAAQ,QAAQ,WAAW,OAAO,IAAI,OAAO,YAAY,cAAc,UAAU;AACtF,WAAK,0BAA2B;AAAA,eACvB,CAAC,KAAK,gBAAgB;AAC/B,SAAG,QAAQ,QAAQ,WAAW,UAAU,IAAI,OAAO,QAAQ,cAAc;AAAA;AAAA;AAAA,EAIrE,0BAA0B,SAAwD;AACxF,SAAK,iBAAiB;AACtB,SAAK,KAAK;AACV,OAAG,QAAQ,QAAQ,WAAW,UAAU,IAAI,cAAc,uBAAuB;AACjF,SAAK,4BAA4B,WAAW;AAC5C,SAAK;AACL,WAAO;AACP,SAAK,sBAAsB,8BAA8B;AAAA;AAAA,EAGnD,gBAAgB,eAAsD;AAC5E,UAAM,SAAS,cAAc;AAC7B,QAAI,GAAG,QAAQ,QAAQ,WAAW,OAAO,IAAI,OAAO,YAAY,QAAQ;AACtE;AAAA;AAEF,SAAK,iBAAiB;AACtB,SAAK;AACL,SAAK,4BAA4B,WAAW;AAC5C,SAAK,8BAA8B,OAAO,WAAW,KAAK,qBAAqB,KAAK,MAAM,gBAAgB;AAAA;AAAA,EAGpG,mBAAmB,OAAmF;AAC5G,UAAM,gBAAgB,MAAM;AAC5B,QAAI,GAAG,QAAQ,QAAQ,WAAW,OAAO,IAAI,OAAO,YAAY,cAAc,UAAU;AACtF;AAAA;AAGF,SAAK,KAAK;AAAA;AAAA,MAGR,cAAqC;AACvC,WAAO,KAAK,oBAAoB;AAAA;AAAA,EAGlC,iBACI,cAAmD,YAAqB,cACxE,WAA2B;AAC7B,QAAI,WAAW;AACb,YAAM,iBAAiB,YAAY;AACnC,UAAI,CAAC,KAAK,eAAe,CAAC,gBAAgB;AACxC;AAAA;AAAA,WAEG;AACL,WAAK;AAAA;AAEP,SAAK,oBAAoB,mBACrB,cAAc,eAAe,SAAY,SAAY,EAAC,YAAY,gBAAe;AAAA;AAAA,EAG/E,aAAmB;AACzB,QAAI,YAAY,aAAa;AAC3B;AAAA;AAEF,SAAK,KAAK;AAAA;AAAA,EAGZ,eAAe,YAA+C,WAA2B;AACvF,SAAK,iBAAiB,WAAW,cAAc,WAAW,YAAY,WAAW,cAAc;AAAA;AAAA,EAGjG,kBAAkB,cAAmD,YAA4B;AAC/F,eAAW,aAAa,0BAA0B;AAChD,YAAM,gBAAgB,UAAU;AAChC,YAAM,SAAS,UAAU;AACzB,UAAI,UAAU,cAAc,cAAc,aAAa,YAAY;AACjE,sBAAc,mBAAmB,cAAc;AAC/C,YAAI,YAAY;AACd,eAAK,wBAAwB,aAAa,UAAU;AAAA,eAC/C;AACL,eAAK,GAAG,YAAY,YAAY,WAAW,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,EAMpD,mCAAyC;AAC/C,UAAM,aAAa,KAAK,QAAQ,eAAe;AAC/C,UAAM,UAAU,KAAK,QAAQ,YAAY,UAAU;AACnD,SAAK,QAAQ,YAAY,WAAW,YAAY,CAAC;AACjD,SAAK,YAAY,kBAAkB,YAAY;AAM/C,UAAM,uBAAuB,OAAO,SAAS,SAAS,WAAW,cAAc;AAC/E,yBAAqB,IAAI,qBAAqB;AAAA;AAAA,EAGxC,sBAAsB,aAA+C;AAC3E,UAAM,uBAAuB,OAAO,SAAS,SAAS,WAAW,cAAc;AAC/E,gBAAY,sBAAsB;AAClC,gBAAY,cAAc,mBACtB,WAAW,UAAU,gBAAgB,MAAM,qBAAqB,IAAI,CAAC,qBAAqB,QAC1F,qBAAqB;AACzB,UAAM,cAAc,IAAI,WAAW,KAAK;AACxC,UAAM,aAAa,KAAK,QAAQ,eAAe;AAC/C,gBAAY,OAAO;AAAA,MACjB,UAAU;AAAA,MACV,OAAO;AAAA,MACP,OAAO;AAAA;AAET,gBAAY,cAAc,mBACtB,WAAW,UAAU,kBAAkB,KAAK,kCAC5C,KAAK,QAAQ,YAAY,UAAU,aAAa,OAAO;AAAA;AAAA,EAG7D,6BAA6B,2BAA0C;AACrE,SAAK,4BAA4B;AAAA;AAAA,EAGnC,6BAAmC;AACjC,SAAK,uBAAuB,OAAO,YAAY;AAAA;AAAA,QAGnC,qBAAqB,cAAiE;AAClG,UAAM,aAAa,MAAM,aAAa;AACtC,QAAI,aAAa,cAAc;AAC7B;AAAA;AAEF,QAAI,CAAC,YAAY;AACf;AAAA;AAEF,QAAI,OAAO,YAAY,QAAQ,KAAK,uBAAuB,yBAAyB;AAClF;AAAA;AAEF,SAAK,oBAAoB,mBAAmB,WAAW,cAAc,YAAY,QAAW;AAAA;AAAA,EAGtF,uCAA6C;AACnD,8BAA0B,OAAO;AAAA;AAAA,EAG3B,oCAA0C;AAChD,8BAA0B,OAAO;AAAA;AAAA,QAGrB,mBAAkC;AAC9C,UAAM,YAAY,GAAG,QAAQ,QAAQ,WAAW,OAAO,IAAI,cAAc;AACzE,QAAI,CAAC,WAAW;AACd;AAAA;AAEF,QAAI,KAAK,uBAAuB;AAC9B,WAAK,sBAAsB;AAAA;AAE7B,SAAK,wBACD,MAAM,SAAS,yBAAyB,yBAAyB,WAAW,4BACxE,UAAU,YAAY,KAAK,qBAAqB,KAAK,OAAO,KAAK;AAAA;AAAA,EAGnE,iCAAuC;AAC7C,UAAM,UAAU,OAAO,SAAS,SAAS,WAAW,cAAc,2BAA2B;AAC7F,UAAM,SAAU,KAAK;AACrB,WAAO,WAAW;AAClB,WAAO,SAAS,UAAU,WAAW,UAAU,yBAAyB,WAAW,UAAU;AAC7F,SAAK,mBAAmB,UAAU,OAAO,YAAY;AAAA;AAAA,QAGzC,iCAAgD;AAC5D,UAAM,gBAAgB,GAAG,QAAQ,QAAQ,WAAW,OAAO,IAAI,OAAO;AACtE,UAAM,uBAAuB,gBAAgB,cAAc,MAAM,IAAI,cAAc,iBAAiB;AACpG,QAAI,CAAC,sBAAsB;AACzB,WAAK,kBAAkB,WAAW;AAClC,WAAK,eAAe,WAAW;AAC/B,WAAK,eAAe,WAAW;AAC/B,WAAK,cAAc,WAAW;AAC9B,WAAK,WAAW,WAAW;AAAA,eAClB,KAAK,gBAAgB;AAC9B,WAAK,kBAAkB,WAAW;AAClC,WAAK,kBAAkB,WAAW;AAClC,WAAK,eAAe,WAAW;AAC/B,WAAK,eAAe,WAAW;AAC/B,WAAK,cAAc,WAAW;AAC9B,WAAK,WAAW,WAAW;AAAA,WACtB;AACL,WAAK,kBAAkB,WAAW;AAClC,WAAK,kBAAkB,WAAW,CAAC,qBAAqB;AACxD,WAAK,eAAe,WAAW;AAC/B,WAAK,eAAe,WAAW;AAC/B,WAAK,cAAc,WAAW;AAC9B,WAAK,WAAW,WAAW;AAAA;AAG7B,UAAM,UAAU,uBAAuB,qBAAqB,0BAA0B;AACtF,UAAM,KAAK,sBAAsB,OAC7B,SAAS,SAAS,yBAAyB,yBAAyB,YACpE,SAAS,kBAAkB,kBAAkB;AACjD,QAAI,SAAS;AACX,WAAK;AAAA;AAAA;AAAA,EAID,wCAA8C;AAAA;AAAA,EAG9C,iBAAuB;AAC7B,SAAK,KAAK;AACV,OAAG,QAAQ,QAAQ,WAAW,UAAU,IAAI,cAAc,uBAAuB;AAEjF,QAAI,KAAK,6BAA6B;AACpC,mBAAa,KAAK;AAAA;AAEpB,SAAK,iBAAiB;AAAA;AAAA,EAGhB,qBAAqB,eAAsD;AACjF,WAAO,KAAK;AACZ,QAAI,KAAK,kBAAkB,cAAc,YAAY;AACnD;AAAA;AAGF,eAAW,kBAAiB,IAAI,cAAc,cAAc,WAAW,OAAO,IAAI,cAAc,gBAAgB;AAC9G,UAAI,eAAc,YAAY;AAC5B,WAAG,QAAQ,QAAQ,WAAW,UAAU,IAAI,OAAO,QAAQ,eAAc;AACzE;AAAA;AAAA;AAAA;AAAA,EAKE,0BAAgC;AACtC,WAAO,SAAS,SAAS,WACpB,cAAc,2BAGd,IAAI,CAAE,KAAK,uBAAwB;AAAA;AAAA,EAG1C,aAAmB;AACjB,UAAM,eAAe,KAAK,oBAAoB;AAC9C,QAAI,cAAc;AAChB,WAAK,SAAS,wBAAwB,sBAAsB;AAAA;AAAA;AAAA,EAIxD,eAAe,OAAuF;AAC5G,UAAM,eAAe,MAAM;AAC3B,QAAI,KAAK,WAAW,gBAChB,OAAO,SAAS,SAAS,WAAW,cAAc,yBAAyB,OAAO;AACpF,WAAK,kBAAkB,cAAc;AAAA;AAAA;AAAA,EAIzC,cAAuB;AACrB,UAAM,SAAS,GAAG,QAAQ,QAAQ,WAAW,OAAO,IAAI,OAAO;AAC/D,QAAI,CAAC,QAAQ;AACX,aAAO;AAAA;AAET,UAAM,gBAAgB,OAAO,MAAM,IAAI,cAAc;AACrD,QAAI,CAAC,eAAe;AAClB,aAAO;AAAA;AAGT,QAAI,KAAK,gBAAgB;AACvB,WAAK,iBAAiB;AACtB,oBAAc;AAAA,WACT;AAEL,oBAAc;AAAA;AAGhB,SAAK;AACL,WAAO;AAAA;AAAA,EAGD,kBAAwD;AAC9D,QAAI,CAAC,KAAK,gBAAgB;AACxB,aAAO;AAAA;AAGT,SAAK,iBAAiB;AAEtB,SAAK;AACL,UAAM,SAAS,GAAG,QAAQ,QAAQ,WAAW,OAAO,IAAI,OAAO;AAC/D,WAAO,SAAS,OAAO,MAAM,IAAI,cAAc,iBAAiB;AAAA;AAAA,EAG1D,aAAmB;AACzB,UAAM,gBAAgB,KAAK;AAC3B,QAAI,eAAe;AACjB,oBAAc,kCAAkC;AAChD,oBAAc;AAAA;AAAA;AAAA,EAIV,qBAA2B;AACjC,UAAM,gBAAgB,KAAK;AAC3B,QAAI,eAAe;AACjB,WAAK,cAAc,eAAe;AAClC,oBAAc;AAAA;AAAA;AAAA,EAIlB,WAAoB;AAClB,UAAM,gBAAgB,KAAK;AAC3B,QAAI,eAAe;AACjB,WAAK,cAAc;AAAA;AAErB,WAAO;AAAA;AAAA,EAGT,WAAoB;AAClB,UAAM,gBAAgB,KAAK;AAC3B,QAAI,eAAe;AACjB,WAAK,cAAc;AAAA;AAErB,WAAO;AAAA;AAAA,EAGT,gBAAyB;AACvB,UAAM,gBAAgB,KAAK;AAC3B,QAAI,eAAe;AACjB,oBAAc;AAAA;AAEhB,WAAO;AAAA;AAAA,EAGT,UAAmB;AACjB,UAAM,gBAAgB,KAAK;AAC3B,QAAI,eAAe;AACjB,WAAK,cAAc;AAAA;AAErB,WAAO;AAAA;AAAA,QAGK,mBAAmB,YAA8D;AAC7F,UAAM,mBAAmB,GAAG,QAAQ,QAAQ,WAAW,OAAO,IAAI,aAAa;AAC/E,QAAI,CAAC,kBAAkB;AACrB;AAAA;AAGF,UAAM,eACF,MAAM,SAAS,yBAAyB,yBAAyB,WAAW,yBACxE,WAAW,cAAc,WAAW,YAAY;AACxD,UAAM,cAAc,aAAa,KAAK,cAAY,SAAS,kBAAkB,iBAAiB;AAC9F,QAAI,eAAe,KAAK,mBAAmB;AACzC,kBAAY;AAAA;AAAA;AAAA,EAIhB,0BAAgC;AAC9B,WAAO,SAAS,SAAS,WACpB,cAAc,qBACd,IAAI,CAAC,OAAO,SAAS,SAAS,WAAW,cAAc,qBAAqB;AAAA;AAAA,EAG3E,gCAAsC;AAC5C,UAAM,SAAS,OAAO,SAAS,SAAS,WAAW,cAAc,qBAAqB;AACtF,SAAK,8BAA8B,WAAW,CAAC;AAC/C,SAAK,oBAAoB,6BAA6B;AAAA;AAAA,EAGhD,qBAAyC;AAC/C,UAAM,eAAe,IAAI,GAAG,QAAQ,QAAQ;AAE5C,UAAM,mBACF,IAAI,GAAG,QAAQ,cAAc,WAAW,UAAU,kCAAkC;AACxF,qBAAiB,iBAAiB,GAAG,QAAQ,cAAc,OAAO,OAAO,KAAK,YAAY;AAC1F,UAAM,2BAA2B,IAAI,GAAG,QAAQ,cAC5C,WAAW,UAAU,iCAAiC;AAC1D,6BAAyB,iBAAiB,GAAG,QAAQ,cAAc,OAAO,OAAO,KAAK,oBAAoB;AAC1G,iBAAa,kBAAkB,GAAG,QAAQ,QAAQ,4BAC9C,KAAK,mBAAmB,CAAC,0BAA0B,mBAAmB;AAE1E,iBAAa,kBAAkB,GAAG,QAAQ,QAAQ,mBAAmB,KAAK;AAC1E,iBAAa,kBAAkB,GAAG,QAAQ,QAAQ,mBAAmB,KAAK;AAC1E,iBAAa,kBAAkB,GAAG,QAAQ,QAAQ,mBAAmB,KAAK;AAC1E,iBAAa,kBAAkB,GAAG,QAAQ,QAAQ,mBAAmB,KAAK;AAE1E,iBAAa;AACb,iBAAa,kBAAkB,GAAG,QAAQ,QAAQ,mBAAmB,KAAK;AAE1E,SAAK,yBAAyB,IAAI,GAAG,QAAQ,cAAc,IAAI;AAC/D,SAAK,uBAAuB,iBACxB,GAAG,QAAQ,cAAc,OAAO,OAAO,KAAK,yBAAyB;AACzE,iBAAa,kBAAkB,KAAK;AAEpC,WAAO;AAAA;AAAA,EAGD,2BAA2C;AACjD,UAAM,qBAAqB,SAAS,cAAc;AAClD,uBAAmB,UAAU,IAAI;AAEjC,UAAM,QAAQ,WAAW,UAAU;AACnC,UAAM,UAAU,OAAO,SAAS,SAAS,WAAW,cAAc;AAClE,uBAAmB,YAAY,GAAG,WAAW,sBAAsB,OAAO,SAAS;AAEnF,WAAO;AAAA;AAAA,EAGT,sBAAsB,OAAc,aAAyC,QAAsB;AACjG,SAAK,wBAAwB,OAAO,aAAa;AACjD,SAAK,6BAA6B,OAAO,aAAa;AACtD,SAAK,sBAAsB,aAAa;AACxC,SAAK,wBAAwB,aAAa;AAC1C,SAAK,0BAA0B,aAAa;AAAA;AAAA,EAGtC,wBAAwB,OAAc,aAAyC,QAAsB;AAC3G,QAAI,CAAE,mBAAkB,UAAU,aAAa,iBAAiB,CAAC,MAAM,QAAQ;AAC7E;AAAA;AAGF,UAAM,eAAgB;AACtB,UAAM,cAAe,MAAM;AAC3B,QAAI,CAAC,aAAa,UAAU,sBACxB,CAAC,YAAY,mBAAmB,KAAK,wBAAwB,SAAS,UAAU;AAClF,kBAAY,gBAAgB,WACxB,WAAW,UAAU,kBAAkB,KAAK,wBAAwB,KAAK,MAAM;AAAA;AAAA;AAAA,EAI/E,6BAA6B,OAAc,aAAyC,QAAsB;AAChH,QAAI,CAAE,mBAAkB,oBAAoB;AAC1C;AAAA;AAEF,QAAI,OAAO,eAAe,cAAc,qBAAqB,OAAO,WAAW,MAAM,UAAU,KAAK,OAAO;AACzG;AAAA;AAEF,gBAAY,eAAe,aAAa;AAAA;AAAA,EAG1C,sBAAsB,aAAyC,QAAsB;AACnF,QAAI,CAAE,mBAAkB,UAAU,aAAa,aAAa;AAC1D;AAAA;AAEF,UAAM,aAAc;AACpB,UAAM,eAAe,WAAW;AAEhC,QAAI,CAAC,SAAS,yBAAyB,yBAAyB,WACtD,uBAAuB,cACvB,MAAM,YAAU,OAAO,iBAAiB;AAEhD;AAAA;AAEF,UAAM,cAAc,aAAa;AACjC,QAAI,YAAY,cAAc;AAC5B,YAAM,SAAS,GAAG,QAAQ,QAAQ,WAAW,OAAO,IAAI,OAAO;AAC/D,YAAM,gBAAgB,SAAS,OAAO,MAAM,IAAI,cAAc,iBAAiB;AAC/E,UAAI,iBAAiB,cAAc,YAAY;AAC7C,oBAAY,eAAe,WACvB,WAAW,UAAU,iBAAiB,KAAK,mBAAmB,KAAK,MAAM;AAAA;AAG/E,WAAK,cAAc,oCAAoC,aAAa;AAAA;AAAA;AAAA,EAIhE,wBAAwB,cAAyD;AACvF,SAAK,WAAW;AAChB,SAAK,kBAAkB;AAAA;AAAA,EAGjB,wBAAwB,aAAyC,QAAsB;AAC7F,QAAI,CAAE,mBAAkB,IAAI,aAAa,eAAe;AACtD;AAAA;AAEF,UAAM,SAAS,OAAO,SAAS,SAAS,WAAW,cAAc,oBAAoB;AACrF,UAAM,eAAgB;AACtB,UAAM,mBAAmB,GAAG,QAAQ,QAAQ,WAAW,OAAO,IAAI,aAAa;AAE/E,8BAA4C;AAC1C,UAAI,aAAa,SAAS,QAAQ;AAChC,eAAO,aAAa;AAAA;AAEtB,UAAI,aAAa,YAAY,QAAQ;AACnC,eAAO;AAAA;AAET,aAAO,aAAa;AAAA;AAEtB,UAAM,uBAAuB;AAE7B,gBAAY,eAAe,WACvB,WAAW,UAAU,wBAAwB,EAAC,KAAK,OAAO,0BAC1D,MAAM,IAAI,aAAa,aAAa,WAAW,mBAAmB,kBAAkB;AAExF,UAAM,0BAA0B,YAAY;AAC5C,UAAM,wBAAwB,KAAK,sBAAsB;AAEzD,QAAI,aAAa,SAAS,UAAU;AAClC,8BAAwB,WAAW,WAAW,UAAU,qBAAqB,MAAM;AACjF,8BAAsB,SAAS,aAAa;AAAA;AAE9C,8BAAwB,WAAW,WAAW,UAAU,wBAAwB,MAAM;AACpF,8BAAsB,SAAS,SAAS,gBAAgB,kBAAkB,aAAa;AAAA;AAEzF,8BAAwB,WAAW,WAAW,UAAU,0BAA0B,MAAM;AACtF,8BAAsB,SAAS,KAAK,UAAU,aAAa;AAAA;AAAA,eAItD,2BAA2B,IAAI,aAAa,OAAO;AAC1D,8BAAwB,WAAW,WAAW,UAAU,OAAO,EAAC,KAAK,OAAO,0BAAyB,MAAM;AACzG,8BAAsB,SAAS,aAAa;AAAA;AAAA,eAIvC,aAAa,SAAS,UAAU;AACvC,YAAM,0BAA0B,YAA0B;AACxD,cAAM,SAAS,MAAM,aAAa,iBAAiB,sBAAsB,CAAC;AAAA,UACrB,OAAO;AAAA,YACL,SAAS,aAAa;AAAA,YACtB;AAAA;AAAA;AAGvD,8BAAsB,SAAS;AAAA;AAGjC,8BAAwB,WACpB,WAAW,UAAU,OAAO,EAAC,KAAK,OAAO,0BAAyB;AAAA,eAG/D,aAAa,SAAS,YAAY;AACzC,kBAAY,eAAe,WACvB,WAAW,UAAU,yBAAyB,KAAK,uBAAuB,KAAK,MAAM;AAAA;AAK3F,kCAA4C,MAA6B;AACvE,YAAM,UAAU,KAAK;AACrB,YAAM,UAAS,KAAK;AAEpB,UAAI,YAAY,QAAQ;AACtB,eAAO,gBAAgB,UAAU,KAAK,YAAY;AAAA;AAEpD,UAAI,WAAW,OAAO,SAAS,aAAa;AAC1C,eAAO,OAAO;AAAA;AAEhB,UAAI;AACF,eAAO,KAAK,UAAU,MAAM,MAAM;AAAA,eAC3B,OAAP;AACA,eAAO,OAAO;AAAA;AAAA;AAAA;AAAA,EAKZ,0BAA0B,aAAyC,QAAsB;AAC/F,QAAI,CAAE,mBAAkB,IAAI,eAAe,iBAAiB;AAC1D;AAAA;AAEF,UAAM,UAAW;AACjB,UAAM,eAAe,KAAK,UAAU,mBAAmB,QAAQ;AAC/D,QAAI,CAAC,cAAc;AACjB;AAAA;AAEF,UAAM,WAAW,WAAW,UAAU;AACtC,UAAM,WAAuB,KAAK,eAAe,KAAK,MAAM,aAAa,WAAW,GAAG;AACvF,gBAAY,gBAAgB,WAAW,UAAU;AAAA;AAAA,EAG3C,uBAAuB,cAAmD;AAChF,SAAK,aAAa,gBAAgB,uBAAuB,cAAc,KAAK,KAAK,sBAAsB,KAAK;AAAA;AAAA,QAGhG,sBAAsB,UAEb;AACrB,QAAI,CAAC,YAAY,CAAC,SAAS,UAAU;AACnC;AAAA;AAGF,UAAM,aACF,MAAM,SAAS,yBAAyB,yBAAyB,WAAW,wBACxE,SAAS;AACjB,QAAI,YAAY;AACd,WAAK,eAAe;AAAA;AAAA;AAAA,EAIhB,yBAA+B;AACrC,SAAK,KAAK;AACV,SAAK,WAAW,SAAS;AAAA;AAAA,EAGnB,wBAA8B;AACpC,QAAI,CAAC,OAAO,SAAS,SAAS,WAAW,cAAc,oCAAoC,OAAO;AAChG;AAAA;AAEF,SAAK,KAAK;AACV,SAAK,YAAY,SAAS;AAAA;AAAA,EAGpB,wBAA8B;AACpC,QAAI;AACJ,UAAM,WAAW,OAAO,SAAS,SAAS,WAAW,cAAc,mBAAmB;AACtF,QAAI,aAAa,SAAS;AACxB,mBAAa;AAAA,eACJ,aAAa,UAAU;AAChC,mBAAa;AAAA,WACR;AACL,mBAAa,GAAG,cAAc,cAAc,WAAW,QAAQ,cAAc;AAAA;AAG/E,QAAI,KAAK,mBAAmB,eAAe,CAAC,KAAK,YAAY,cAAc;AACzE;AAAA;AAGF,QAAI,KAAK,mBAAmB,KAAK,gBAAgB,sBAAsB;AACrE;AAAA;AAGF,QAAI,KAAK,iBAAiB;AACxB,WAAK,gBAAgB;AAAA;AAGvB,SAAK,YAAY,YAAY,CAAC;AAC9B,SAAK,YAAY,QAAQ,UAAU,OAAO,+BAA+B;AAEzE,iBAAa,+BAA+B;AAG5C,UAAM,OAAO,IAAI,GAAG,OAAO;AAC3B,SAAK,QAAQ,YAAY,KAAK,aAAa;AAC3C,SAAK,QAAQ,YAAY,KAAK;AAE9B,SAAK,4BAA4B,iBAAiB,IAAI,iBAAiB;AACvE,SAAK,mBACD,GAAG,YAAY,YAAY,WAAW,oBAAoB,KAAK,sBAAsB,KAAK;AAC9F,SAAK,iBAAiB,SAAS,QAAQ,UAAU,IAAI;AACrD,SAAK,iBAAiB,SAAS,KAAK,KAAK;AACzC,SAAK,iBAAiB,SAAS,QAAQ,YAAY,KAAK,sBAAsB;AAC9E,SAAK,iBAAiB,sBAAsB;AAE5C,QAAI,KAAK,oBAAoB;AAC3B,WAAK,KAAK,iBAAiB,SAAS,KAAK;AAAA;AAG3C,UAAM,gBAAgB,GAAG,YAAY,YAAY,WAAW,KAAK;AACjE,UAAM,iBAAiB,GAAG,YAAY,YAAY,WAAW,KAAK;AAElE,QAAI,KAAK,sBAAsB;AAC7B,WAAK,YAAY,iBAAiB,KAAK;AACvC,WAAK,uBAAuB;AAAA;AAG9B,QAAI,CAAC,YAAY;AAEf,WAAK,iBAAiB,WAAW,KAAK;AACtC,WAAK,KAAK,iBAAiB,SAAS;AACpC,WAAK,KAAK,iBAAiB,SAAS;AACpC,WAAK,KAAK,iBAAiB,SAAS,KAAK;AACzC,WAAK,iCAAiC,KAAK;AAC3C,WAAK,kBAAkB;AACvB,WAAK,YAAY,iBAAiB,KAAK,aAAa;AAAA,WAC/C;AACL,YAAM,cAAc,IAAI,GAAG,YAAY,YAAY,MAAM,MAAM,6CAA6C;AAC5G,kBAAY,cAAc;AAG1B,WAAK,KAAK,iBAAiB,SAAS;AACpC,WAAK,KAAK,iBAAiB,SAAS,KAAK;AAEzC,YAAM,iBACF,GAAG,YAAY,YAAY,WAAW,qBAAqB,KAAK,sBAAsB,KAAK;AAC/F,kBAAY,iBAAiB,eAAe;AAC5C,WAAK,uBAAuB,eAAe,aAAa;AACxD,WAAK,YAAY,eAAe,KAAK;AACrC,WAAK,YAAY,eAAe,KAAK,aAAa;AAClD,qBAAe,WAAW;AAC1B,qBAAe,WAAW,KAAK;AAC/B,qBAAe,sBAAsB;AACrC,WAAK,iCAAiC;AACtC,WAAK,kBAAkB;AAAA;AAGzB,SAAK,iBAAiB,sBAAsB;AAC5C,UAAM,wBAAwB,WAAW,gBAAgB,gBAAgB,WAAW;AACpF,aAAS,IAAI,GAAG,IAAI,sBAAsB,QAAQ,EAAE,GAAG;AACrD,WAAK,wBAAwB,sBAAsB;AAAA;AAGrD,SAAK,YAAY,iBAAiB,KAAK;AAAA;AAAA,EAGzC,oBAAmC;AACjC,WAAO,GAAG,YAAY,YAAY,WAAW,SAAS;AAAA;AAAA,EAGhD,0BACJ,OAAkG;AACpG,SAAK,wBAAwB,MAAM;AAAA;AAAA,EAG7B,wBAAwB,MAA4D;AAC1F,QAAI,KAAK,gBAAgB,KAAK,MAAM;AAClC,MAAC,KAAK,+BAAwD,WAAW;AAAA;AAAA;AAAA,EAI7E,cAA2B;AACzB,WAAO,KAAK;AAAA;AAAA,EAGN,WAAW,cAAkC;AACnD,UAAM,QAAQ,aAAa;AAC3B,QAAI,CAAC,MAAM,QAAQ;AACjB;AAAA;AAEF,UAAM,QAAQ,MAAM,GAAG;AACvB,QAAI,SAAS,MAAM,aAAa;AAC9B,WAAK,sBAAsB,8BAA8B,oCAAoC,MAAM;AAAA;AAAA;AAAA;AAKlG,WAAI,0BAA0B;AAC9B,aAAM,kBAAkB;AAE/B,IAAI;AAEG,gCAA6D;AAAA,SAC3D,SAAS,OAEZ,EAAC,UAAU,QAA2B;AACxC,UAAM,EAAC,aAAY;AACnB,QAAI,CAAC,8BAA8B,UAAU;AAC3C,mCAA6B,IAAI;AAAA;AAGnC,WAAO;AAAA;AAAA,QAGH,OAAO,YAAoB,WAAoC;AACnE,QAAI,CAAE,uBAAsB,UAAU,aAAa,aAAa;AAC9D,YAAM,IAAI,MAAM;AAAA;AAElB,iBAAa,WAAW,eAAe,YAAY;AAAA;AAAA;AAIvD,IAAI;AAEG,sCAAmE;AAAA,SACjE,SAAS,OAEZ,EAAC,UAAU,QAAiC;AAC9C,UAAM,EAAC,aAAY;AACnB,QAAI,CAAC,oCAAoC,UAAU;AACjD,yCAAmC,IAAI;AAAA;AAGzC,WAAO;AAAA;AAAA,QAGH,OAAO,aAAqB,WAAoC;AACpE,QAAI,CAAE,wBAAuB,IAAI,cAAc,WAAW;AACxD,YAAM,IAAI,MAAM;AAAA;AAElB,UAAM,aACF,MAAM,SAAS,yBAAyB,yBAAyB,WAAW,wBACxE;AACR,QAAI,YAAY;AACd,mBAAa,WAAW,eAAe,YAAY;AAAA;AAAA;AAAA;AAKzD,IAAI;AAEG,kCAA+D;AAAA,SAC7D,SAAS,OAEZ,EAAC,UAAU,QAA6B;AAC1C,UAAM,EAAC,aAAY;AACnB,QAAI,CAAC,gCAAgC,UAAU;AAC7C,qCAA+B,IAAI;AAAA;AAGrC,WAAO;AAAA;AAAA,QAGH,OAAO,cAAsB,WAAoC;AACrE,QAAI,CAAE,yBAAwB,UAAU,aAAa,eAAe;AAClE,YAAM,IAAI,MAAM;AAAA;AAElB,iBAAa,WAAW,iBAAiB,cAAc,QAAW,QAAW;AAAA;AAAA;AAIjF,IAAI;AAEG,2CAAwE;AAAA,SACtE,SAAS,OAEZ,EAAC,UAAU,QAAsC;AACnD,UAAM,EAAC,aAAY;AACnB,QAAI,CAAC,yCAAyC,UAAU;AACtD,8CAAwC,IAAI;AAAA;AAG9C,WAAO;AAAA;AAAA,QAGH,OAAO,SAAgC;AAC3C,QAAI,OAAO,SAAS,SAAS,WAAW,cAAc,oCAAoC,OAAO;AAC/F,aAAO,aAAa,WAAW;AAAA;AAAA;AAAA;AAKrC,IAAI;AAEG,qCAA8E;AAAA,SAC5E,SAAS,OAEZ,EAAC,UAAU,QAAgC;AAC7C,UAAM,EAAC,aAAY;AACnB,QAAI,CAAC,mCAAmC,UAAU;AAChD,wCAAkC,IAAI;AAAA;AAGxC,WAAO;AAAA;AAAA,EAET,aAAa,SAA6B,UAA2B;AACnE,UAAM,QAAQ,aAAa;AAC3B,QAAI,CAAC,MAAM,4BAA4B;AACrC,aAAO;AAAA;AAET,YAAQ;AAAA,WACD,yBAAyB;AAoB5B,cAAM,+BAA+B,QAAQ,OAAO,GAAG,iBAAiB,sBACpE,CAAC,OAAO,SAAS,SAAS,WAAW,cAAc,6BAA6B;AACpF,YAAI,8BAA8B;AAGhC,iBAAO;AAAA;AAET,cAAM;AACN,eAAO;AAAA;AAAA;AAGX,WAAO;AAAA;AAAA;AAIX,IAAI;AAEG,4BAAqE;AAAA,SACnE,SAAS,OAEZ,EAAC,UAAU,QAAuB;AACpC,UAAM,EAAC,aAAY;AACnB,QAAI,CAAC,0BAA0B,UAAU;AACvC,+BAAyB,IAAI;AAAA;AAG/B,WAAO;AAAA;AAAA,EAET,aAAa,SAA6B,UAA2B;AACnE,UAAM,QAAQ,aAAa;AAC3B,YAAQ;AAAA,WACD,sBAAsB;AACzB,cAAM;AACN,eAAO;AAAA;AAAA,WAEJ,sBAAsB;AACzB,cAAM;AACN,eAAO;AAAA;AAAA,WAEJ,iBAAiB;AACpB,cAAM;AACN,eAAO;AAAA;AAAA,WAEJ,qBAAqB;AACxB,cAAM;AACN,eAAO;AAAA;AAAA,WAEJ,wBAAwB;AAC3B,cAAM;AACN,eAAO;AAAA;AAAA,WAEJ,sCAAsC;AACzC,cAAM;AACN,eAAO;AAAA;AAAA,WAEJ,+BAA+B;AAClC,cAAM,QAAQ,GAAG,QAAQ,QAAQ,WAAW,OAAO;AACnD,YAAI,OAAO;AACT,gBAAM,EAAC,OAAO,gBAAe,MAAM;AACnC,cAAI,OAAO,YAAY,SAAS,YAAY,UAAU,KAAK,MAAM,YAAY,UAAU,KAAK;AAC5F,gBAAM,mBAAmB,GAAG,QAAQ,QAAQ,WAAW,OAAO,IAAI,aAAa;AAC/E,cAAI,kBAAkB;AACpB,kBAAM,UAAU,IAAI,aAAa,aAAa,WAAW,kBAAkB,kBAAkB;AAC7F,mBAAO,SAAS,eAAe,eAAe,kBAAkB;AAChE,iBAAK,IAAI,aAAa,aAAa,WAAW,yBAC1C,kBAAkB,SAAS,MAA8B;AAAA;AAAA;AAGjE,eAAO;AAAA;AAAA,WAEJ,oCAAoC;AACvC,cAAM;AACN,eAAO;AAAA;AAAA,WAEJ,mCAAmC;AACtC,cAAM;AACN,eAAO;AAAA;AAAA;AAGX,WAAO;AAAA;AAAA;AAIJ,iCAA0B,GAAG,OAAO,KAAK;AAAA,EAC7B;AAAA,EACjB,cAAc;AACZ;AACA,SAAK,QAAQ,UAAU,IAAI;AAC3B,SAAK,OAAO,aAAa,WAAW;AAAA;AAAA,SAG/B,WAAwB;AAC7B,QAAI,CAAC,qBAAqB;AACxB,4BAAsB,IAAI;AAAA;AAG5B,WAAO;AAAA;AAAA,SAGF,YAAqB;AAC1B,WAAO,QAAQ,wBAAwB,oBAAoB;AAAA;AAAA,EAG7D,WAAiB;AACf,QAAI,CAAC,aAAa,WAAW,aAAa;AACxC,WAAK;AAAA,WACA;AACL,SAAG,cAAc,cAAc,WAAW,mBAAmB;AAAA;AAE/D,iBAAa,+BAA+B,aAAa;AAAA;AAAA,EAG3D,WAAiB;AACf,OAAG,cAAc,cAAc,WAAW,mBAAmB;AAC7D,mBAAe,MAAM;AACnB,mBAAa,+BAA+B,aAAa;AAAA;AAAA;AAAA,EAI7D,oBAA0B;AACxB,SAAK,KAAK,KAAK,KAAK;AAAA;AAAA;AAIxB,MAAM,2BAAwD;AAAA,EAC5D;AAAA,IACE,QAAQ;AAAA,IACR,eAAe,qBAAqB;AAAA,IACpC,YAAY;AAAA;AAAA,EAEd;AAAA,IACE,QAAQ;AAAA,IACR,eAAe,mBAAmB;AAAA,IAClC,YAAY;AAAA;AAAA,EAEd;AAAA,IACE,QAAQ;AAAA,IACR,eAAe,sBAAsB;AAAA,IACrC,YAAY;AAAA;AAAA,EAEd;AAAA,IACE,QAAQ;AAAA,IACR,eAAe,uBAAuB;AAAA,IACtC,YAAY;AAAA;AAAA,EAEd;AAAA,IACE,QAAQ;AAAA,IACR,eAAe,4BAA4B;AAAA,IAC3C,YAAY;AAAA;AAAA;",
  "names": []
}
