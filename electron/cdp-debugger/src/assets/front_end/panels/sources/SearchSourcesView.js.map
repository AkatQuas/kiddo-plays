{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/sources/SearchSourcesView.ts"],
  "sourcesContent": ["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Search from '../search/search.js';\n\nimport {SourcesSearchScope} from './SourcesSearchScope.js';\n\nlet searchSourcesViewInstance: SearchSourcesView;\n\nexport class SearchSourcesView extends Search.SearchView.SearchView {\n  private constructor() {\n    super('sources');\n  }\n\n  static instance(): SearchSourcesView {\n    if (!searchSourcesViewInstance) {\n      searchSourcesViewInstance = new SearchSourcesView();\n    }\n    return searchSourcesViewInstance;\n  }\n\n  static async openSearch(query: string, searchImmediately?: boolean): Promise<UI.Widget.Widget> {\n    const view = UI.ViewManager.ViewManager.instance().view('sources.search-sources-tab');\n    // Deliberately use target location name so that it could be changed\n    // based on the setting later.\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const location = (await UI.ViewManager.ViewManager.instance().resolveLocation('drawer-view') as any);\n    location.appendView(view);\n    await UI.ViewManager.ViewManager.instance().revealView(view);\n    const widget = (await view.widget() as Search.SearchView.SearchView);\n    void widget.toggle(query, Boolean(searchImmediately));\n    return widget;\n  }\n\n  createScope(): Search.SearchConfig.SearchScope {\n    return new SourcesSearchScope();\n  }\n}\n\nlet actionDelegateInstance: ActionDelegate;\n\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  static instance(opts: {\n    forceNew: boolean|null,\n  }|undefined = {forceNew: null}): ActionDelegate {\n    const {forceNew} = opts;\n    if (!actionDelegateInstance || forceNew) {\n      actionDelegateInstance = new ActionDelegate();\n    }\n\n    return actionDelegateInstance;\n  }\n  handleAction(_context: UI.Context.Context, _actionId: string): boolean {\n    void this.showSearch();\n    return true;\n  }\n\n  private showSearch(): Promise<UI.Widget.Widget> {\n    const selection = UI.InspectorView.InspectorView.instance().element.window().getSelection();\n    let queryCandidate = '';\n    if (selection && selection.rangeCount) {\n      queryCandidate = selection.toString().replace(/\\r?\\n.*/, '');\n    }\n\n    return SearchSourcesView.openSearch(queryCandidate);\n  }\n}\n"],
  "mappings": "AAIA;AACA;AAEA;AAEA,IAAI;AAEG,uCAAgC,OAAO,WAAW,WAAW;AAAA,EAC1D,cAAc;AACpB,UAAM;AAAA;AAAA,SAGD,WAA8B;AACnC,QAAI,CAAC,2BAA2B;AAC9B,kCAA4B,IAAI;AAAA;AAElC,WAAO;AAAA;AAAA,eAGI,WAAW,OAAe,mBAAwD;AAC7F,UAAM,OAAO,GAAG,YAAY,YAAY,WAAW,KAAK;AAKxD,UAAM,WAAY,MAAM,GAAG,YAAY,YAAY,WAAW,gBAAgB;AAC9E,aAAS,WAAW;AACpB,UAAM,GAAG,YAAY,YAAY,WAAW,WAAW;AACvD,UAAM,SAAU,MAAM,KAAK;AAC3B,SAAK,OAAO,OAAO,OAAO,QAAQ;AAClC,WAAO;AAAA;AAAA,EAGT,cAA+C;AAC7C,WAAO,IAAI;AAAA;AAAA;AAIf,IAAI;AAEG,4BAAqE;AAAA,SACnE,SAAS,OAEF,EAAC,UAAU,QAAuB;AAC9C,UAAM,EAAC,aAAY;AACnB,QAAI,CAAC,0BAA0B,UAAU;AACvC,+BAAyB,IAAI;AAAA;AAG/B,WAAO;AAAA;AAAA,EAET,aAAa,UAA8B,WAA4B;AACrE,SAAK,KAAK;AACV,WAAO;AAAA;AAAA,EAGD,aAAwC;AAC9C,UAAM,YAAY,GAAG,cAAc,cAAc,WAAW,QAAQ,SAAS;AAC7E,QAAI,iBAAiB;AACrB,QAAI,aAAa,UAAU,YAAY;AACrC,uBAAiB,UAAU,WAAW,QAAQ,WAAW;AAAA;AAG3D,WAAO,kBAAkB,WAAW;AAAA;AAAA;",
  "names": []
}
