{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/sources/BreakpointEditDialog.ts"],
  "sourcesContent": ["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as CodeMirror from '../../third_party/codemirror.next/codemirror.next.js';\nimport * as TextEditor from '../../ui/components/text_editor/text_editor.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport breakpointEditDialogStyles from './breakpointEditDialog.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Screen reader label for a select box that chooses the breakpoint type in the Sources panel when editing a breakpoint\n  */\n  breakpointType: 'Breakpoint type',\n  /**\n  *@description Text in Breakpoint Edit Dialog of the Sources panel\n  */\n  breakpoint: 'Breakpoint',\n  /**\n  *@description Text in Breakpoint Edit Dialog of the Sources panel\n  */\n  conditionalBreakpoint: 'Conditional breakpoint',\n  /**\n  *@description Text in Breakpoint Edit Dialog of the Sources panel\n  */\n  logpoint: 'Logpoint',\n  /**\n  *@description Text in Breakpoint Edit Dialog of the Sources panel\n  */\n  expressionToCheckBeforePausingEg: 'Expression to check before pausing, e.g. x > 5',\n  /**\n  *@description Type selector element title in Breakpoint Edit Dialog of the Sources panel\n  */\n  pauseOnlyWhenTheConditionIsTrue: 'Pause only when the condition is true',\n  /**\n  *@description Text in Breakpoint Edit Dialog of the Sources panel. It is used as\n  *the placeholder for a text input field before the user enters text. Provides the user with\n  *an example on how to use Logpoints. 'Log' is a verb and 'message' is a noun.\n  *See: https://developer.chrome.com/blog/new-in-devtools-73/#logpoints\n  */\n  logMessageEgXIsX: 'Log message, e.g. `\\'x is\\', x`',\n  /**\n  *@description Type selector element title in Breakpoint Edit Dialog of the Sources panel\n  */\n  logAMessageToConsoleDoNotBreak: 'Log a message to Console, do not break',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/sources/BreakpointEditDialog.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class BreakpointEditDialog extends UI.Widget.Widget {\n  private readonly onFinish: (arg0: {\n    committed: boolean,\n    condition: string,\n  }) => Promise<void>;\n  private finished: boolean;\n  private editor: TextEditor.TextEditor.TextEditor;\n  private isLogpoint: boolean;\n  private readonly typeSelector: UI.Toolbar.ToolbarComboBox;\n  private placeholderCompartment: CodeMirror.Compartment;\n\n  constructor(\n      editorLineNumber: number,\n      oldCondition: string,\n      preferLogpoint: boolean,\n      onFinish: (arg0: {committed: boolean, condition: string}) => Promise<void>,\n  ) {\n    super(true);\n\n    const editorConfig = [\n      CodeMirror.javascript.javascriptLanguage,\n      TextEditor.Config.baseConfiguration(oldCondition || ''),\n      TextEditor.Config.closeBrackets,\n      TextEditor.Config.autocompletion,\n      CodeMirror.EditorView.lineWrapping,\n      TextEditor.Config.showCompletionHint,\n      TextEditor.JavaScript.argumentHints(),\n    ];\n\n    this.onFinish = onFinish;\n    this.finished = false;\n    this.element.tabIndex = -1;\n\n    const logpointPrefix = LogpointPrefix;\n    const logpointSuffix = LogpointSuffix;\n    this.isLogpoint = oldCondition.startsWith(logpointPrefix) && oldCondition.endsWith(logpointSuffix);\n    if (this.isLogpoint) {\n      oldCondition = oldCondition.substring(logpointPrefix.length, oldCondition.length - logpointSuffix.length);\n    }\n    this.isLogpoint = this.isLogpoint || preferLogpoint;\n\n    this.element.classList.add('sources-edit-breakpoint-dialog');\n    const toolbar = new UI.Toolbar.Toolbar('source-frame-breakpoint-toolbar', this.contentElement);\n    toolbar.appendText(`Line ${editorLineNumber + 1}:`);\n\n    this.typeSelector =\n        new UI.Toolbar.ToolbarComboBox(this.onTypeChanged.bind(this), i18nString(UIStrings.breakpointType));\n    this.typeSelector.createOption(i18nString(UIStrings.breakpoint), BreakpointType.Breakpoint);\n    const conditionalOption =\n        this.typeSelector.createOption(i18nString(UIStrings.conditionalBreakpoint), BreakpointType.Conditional);\n    const logpointOption = this.typeSelector.createOption(i18nString(UIStrings.logpoint), BreakpointType.Logpoint);\n    this.typeSelector.select(this.isLogpoint ? logpointOption : conditionalOption);\n    toolbar.appendToolbarItem(this.typeSelector);\n\n    const content = oldCondition || '';\n    const finishIfComplete = (view: CodeMirror.EditorView): boolean => {\n      void TextEditor.JavaScript.isExpressionComplete(view.state.doc.toString()).then((complete): void => {\n        if (complete) {\n          this.finishEditing(true, this.editor.state.doc.toString());\n        } else {\n          CodeMirror.insertNewlineAndIndent(view);\n        }\n      });\n      return true;\n    };\n    const keymap = [\n      {\n        key: 'Mod-Enter',\n        run: finishIfComplete,\n      },\n      {\n        key: 'Enter',\n        run: finishIfComplete,\n      },\n      {\n        key: 'Shift-Enter',\n        run: CodeMirror.insertNewlineAndIndent,\n      },\n      {\n        key: 'Escape',\n        run: (): boolean => {\n          this.finishEditing(false, '');\n          return true;\n        },\n      },\n    ];\n\n    this.placeholderCompartment = new CodeMirror.Compartment();\n\n    const editorWrapper = this.contentElement.appendChild(document.createElement('div'));\n    editorWrapper.classList.add('condition-editor');\n\n    this.editor = new TextEditor.TextEditor.TextEditor(CodeMirror.EditorState.create({\n      doc: content,\n      selection: {anchor: 0, head: content.length},\n      extensions: [\n        this.placeholderCompartment.of(this.getPlaceholder()),\n        CodeMirror.keymap.of(keymap),\n        editorConfig,\n      ],\n    }));\n    editorWrapper.appendChild(this.editor);\n\n    this.updateTooltip();\n\n    this.element.addEventListener('blur', event => {\n      if (!event.relatedTarget ||\n          (event.relatedTarget && !(event.relatedTarget as Node).isSelfOrDescendant(this.element))) {\n        this.finishEditing(true, this.editor.state.doc.toString());\n      }\n    }, true);\n  }\n\n  focusEditor(): void {\n    this.editor.editor.focus();\n  }\n  private static conditionForLogpoint(condition: string): string {\n    return `${LogpointPrefix}${condition}${LogpointSuffix}`;\n  }\n\n  private onTypeChanged(): void {\n    const type = this.breakpointType;\n    this.isLogpoint = type === BreakpointType.Logpoint;\n    if (type === BreakpointType.Breakpoint) {\n      this.finishEditing(true, '');\n      return;\n    }\n    this.editor.dispatch({effects: this.placeholderCompartment.reconfigure(this.getPlaceholder())});\n    this.updateTooltip();\n  }\n\n  private get breakpointType(): string|null {\n    const option = this.typeSelector.selectedOption();\n    return option ? option.value : null;\n  }\n\n  private getPlaceholder(): CodeMirror.Extension {\n    const type = this.breakpointType;\n    if (type === BreakpointType.Conditional) {\n      return CodeMirror.placeholder(i18nString(UIStrings.expressionToCheckBeforePausingEg));\n    }\n    if (type === BreakpointType.Logpoint) {\n      return CodeMirror.placeholder(i18nString(UIStrings.logMessageEgXIsX));\n    }\n    return [];\n  }\n\n  private updateTooltip(): void {\n    const type = this.breakpointType;\n    if (type === BreakpointType.Conditional) {\n      UI.Tooltip.Tooltip.install((this.typeSelector.element), i18nString(UIStrings.pauseOnlyWhenTheConditionIsTrue));\n    } else if (type === BreakpointType.Logpoint) {\n      UI.Tooltip.Tooltip.install((this.typeSelector.element), i18nString(UIStrings.logAMessageToConsoleDoNotBreak));\n    }\n  }\n\n  finishEditing(committed: boolean, condition: string): void {\n    if (this.finished) {\n      return;\n    }\n    this.finished = true;\n    this.editor.remove();\n    if (this.isLogpoint) {\n      condition = BreakpointEditDialog.conditionForLogpoint(condition);\n    }\n    void this.onFinish({committed, condition});\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([breakpointEditDialogStyles]);\n  }\n}\n\nexport const LogpointPrefix = '/** DEVTOOLS_LOGPOINT */ console.log(';\nexport const LogpointSuffix = ')';\n\nexport const BreakpointType = {\n  Breakpoint: 'Breakpoint',\n  Conditional: 'Conditional',\n  Logpoint: 'Logpoint',\n};\n"],
  "mappings": "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",
  "names": []
}
