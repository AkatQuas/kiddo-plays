{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/sources/TabbedEditorContainer.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Extensions from '../../models/extensions/extensions.js';\nimport * as Persistence from '../../models/persistence/persistence.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport type * as CodeMirror from '../../third_party/codemirror.next/codemirror.next.js';\nimport * as SourceFrame from '../../ui/legacy/components/source_frame/source_frame.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Snippets from '../snippets/snippets.js';\n\nimport {SourcesView} from './SourcesView.js';\nimport {UISourceCodeFrame} from './UISourceCodeFrame.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Tabbed Editor Container of the Sources panel\n  *@example {example.file} PH1\n  */\n  areYouSureYouWantToCloseUnsaved: 'Are you sure you want to close unsaved file: {PH1}?',\n  /**\n  *@description Error message for tooltip showing that a file in Sources could not be loaded\n  */\n  unableToLoadThisContent: 'Unable to load this content.',\n  /**\n  *@description Icon title in Tabbed Editor Container of the Sources panel\n  */\n  changesToThisFileWereNotSavedTo: 'Changes to this file were not saved to file system.',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/sources/TabbedEditorContainer.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport interface TabbedEditorContainerDelegate {\n  viewForFile(uiSourceCode: Workspace.UISourceCode.UISourceCode): UI.Widget.Widget;\n\n  recycleUISourceCodeFrame(sourceFrame: UISourceCodeFrame, uiSourceCode: Workspace.UISourceCode.UISourceCode): void;\n}\n\nexport class TabbedEditorContainer extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  private readonly delegate: TabbedEditorContainerDelegate;\n  private readonly tabbedPane: UI.TabbedPane.TabbedPane;\n  private tabIds: Map<Workspace.UISourceCode.UISourceCode, string>;\n  private readonly files: Map<string, Workspace.UISourceCode.UISourceCode>;\n  private readonly previouslyViewedFilesSetting: Common.Settings.Setting<SerializedHistoryItem[]>;\n  private readonly history: History;\n  private readonly uriToUISourceCode: Map<Platform.DevToolsPath.UrlString, Workspace.UISourceCode.UISourceCode>;\n  private readonly idToUISourceCode: Map<string, Workspace.UISourceCode.UISourceCode>;\n  private currentFileInternal!: Workspace.UISourceCode.UISourceCode|null;\n  private currentView!: UI.Widget.Widget|null;\n  private scrollTimer?: number;\n  constructor(\n      delegate: TabbedEditorContainerDelegate, setting: Common.Settings.Setting<SerializedHistoryItem[]>,\n      placeholderElement: Element, focusedPlaceholderElement?: Element) {\n    super();\n    this.delegate = delegate;\n\n    this.tabbedPane = new UI.TabbedPane.TabbedPane();\n    this.tabbedPane.setPlaceholderElement(placeholderElement, focusedPlaceholderElement);\n    this.tabbedPane.setTabDelegate(new EditorContainerTabDelegate(this));\n\n    this.tabbedPane.setCloseableTabs(true);\n    this.tabbedPane.setAllowTabReorder(true, true);\n\n    this.tabbedPane.addEventListener(UI.TabbedPane.Events.TabClosed, this.tabClosed, this);\n    this.tabbedPane.addEventListener(UI.TabbedPane.Events.TabSelected, this.tabSelected, this);\n\n    Persistence.Persistence.PersistenceImpl.instance().addEventListener(\n        Persistence.Persistence.Events.BindingCreated, this.onBindingCreated, this);\n    Persistence.Persistence.PersistenceImpl.instance().addEventListener(\n        Persistence.Persistence.Events.BindingRemoved, this.onBindingRemoved, this);\n\n    this.tabIds = new Map();\n    this.files = new Map();\n\n    this.previouslyViewedFilesSetting = setting;\n    this.history = History.fromObject(this.previouslyViewedFilesSetting.get());\n    this.uriToUISourceCode = new Map();\n    this.idToUISourceCode = new Map();\n  }\n\n  private onBindingCreated(event: Common.EventTarget.EventTargetEvent<Persistence.Persistence.PersistenceBinding>):\n      void {\n    const binding = event.data;\n    this.updateFileTitle(binding.fileSystem);\n\n    const networkTabId = this.tabIds.get(binding.network);\n    let fileSystemTabId = this.tabIds.get(binding.fileSystem);\n\n    const wasSelectedInNetwork = this.currentFileInternal === binding.network;\n    const currentSelectionRange = this.history.selectionRange(binding.network.url());\n    const currentScrollLineNumber = this.history.scrollLineNumber(binding.network.url());\n    this.history.remove(binding.network.url());\n\n    if (!networkTabId) {\n      return;\n    }\n\n    if (!fileSystemTabId) {\n      const networkView = this.tabbedPane.tabView(networkTabId);\n      const tabIndex = this.tabbedPane.tabIndex(networkTabId);\n      if (networkView instanceof UISourceCodeFrame) {\n        this.delegate.recycleUISourceCodeFrame(networkView, binding.fileSystem);\n        fileSystemTabId = this.appendFileTab(binding.fileSystem, false, tabIndex, networkView);\n      } else {\n        fileSystemTabId = this.appendFileTab(binding.fileSystem, false, tabIndex);\n        const fileSystemTabView = (this.tabbedPane.tabView(fileSystemTabId) as UI.Widget.Widget);\n        this.restoreEditorProperties(fileSystemTabView, currentSelectionRange, currentScrollLineNumber);\n      }\n    }\n\n    this.closeTabs([networkTabId], true);\n    if (wasSelectedInNetwork) {\n      this.tabbedPane.selectTab(fileSystemTabId, false);\n    }\n\n    this.updateHistory();\n  }\n\n  private onBindingRemoved(event: Common.EventTarget.EventTargetEvent<Persistence.Persistence.PersistenceBinding>):\n      void {\n    const binding = event.data;\n    this.updateFileTitle(binding.fileSystem);\n  }\n\n  get view(): UI.Widget.Widget {\n    return this.tabbedPane;\n  }\n\n  get visibleView(): UI.Widget.Widget|null {\n    return this.tabbedPane.visibleView;\n  }\n\n  fileViews(): UI.Widget.Widget[] {\n    return this.tabbedPane.tabViews();\n  }\n\n  leftToolbar(): UI.Toolbar.Toolbar {\n    return this.tabbedPane.leftToolbar();\n  }\n\n  rightToolbar(): UI.Toolbar.Toolbar {\n    return this.tabbedPane.rightToolbar();\n  }\n\n  show(parentElement: Element): void {\n    this.tabbedPane.show(parentElement);\n  }\n\n  showFile(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    const binding = Persistence.Persistence.PersistenceImpl.instance().binding(uiSourceCode);\n    uiSourceCode = binding ? binding.fileSystem : uiSourceCode;\n\n    const frame = UI.Context.Context.instance().flavor(SourcesView);\n    // If the content has already been set and the current frame is showing\n    // the incoming uiSourceCode, then fire the event that the file has been loaded.\n    // Otherwise, this event will fire as soon as the content has been set.\n    if (frame?.currentSourceFrame()?.contentSet && this.currentFileInternal === uiSourceCode &&\n        frame?.currentUISourceCode() === uiSourceCode) {\n      Common.EventTarget.fireEvent('source-file-loaded', uiSourceCode.displayName(true));\n    } else {\n      this.innerShowFile(this.canonicalUISourceCode(uiSourceCode), true);\n    }\n  }\n\n  closeFile(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    const tabId = this.tabIds.get(uiSourceCode);\n    if (!tabId) {\n      return;\n    }\n    this.closeTabs([tabId]);\n  }\n\n  closeAllFiles(): void {\n    this.closeTabs(this.tabbedPane.tabIds());\n  }\n\n  historyUISourceCodes(): Workspace.UISourceCode.UISourceCode[] {\n    const result = [];\n    const uris = this.history.urls();\n    for (const uri of uris) {\n      const uiSourceCode = this.uriToUISourceCode.get(uri);\n      if (uiSourceCode) {\n        result.push(uiSourceCode);\n      }\n    }\n    return result;\n  }\n\n  private addViewListeners(): void {\n    if (!this.currentView || !(this.currentView instanceof SourceFrame.SourceFrame.SourceFrameImpl)) {\n      return;\n    }\n    this.currentView.addEventListener(SourceFrame.SourceFrame.Events.EditorUpdate, this.onEditorUpdate, this);\n    this.currentView.addEventListener(SourceFrame.SourceFrame.Events.EditorScroll, this.onScrollChanged, this);\n  }\n\n  private removeViewListeners(): void {\n    if (!this.currentView || !(this.currentView instanceof SourceFrame.SourceFrame.SourceFrameImpl)) {\n      return;\n    }\n    this.currentView.removeEventListener(SourceFrame.SourceFrame.Events.EditorUpdate, this.onEditorUpdate, this);\n    this.currentView.removeEventListener(SourceFrame.SourceFrame.Events.EditorScroll, this.onScrollChanged, this);\n  }\n\n  private onScrollChanged(): void {\n    if (this.currentView instanceof SourceFrame.SourceFrame.SourceFrameImpl) {\n      if (this.scrollTimer) {\n        clearTimeout(this.scrollTimer);\n      }\n      this.scrollTimer = window.setTimeout(() => this.history.save(this.previouslyViewedFilesSetting), 100);\n      if (this.currentFileInternal) {\n        const {editor} = this.currentView.textEditor;\n        const topBlock = editor.lineBlockAtHeight(editor.scrollDOM.getBoundingClientRect().top - editor.documentTop);\n        const topLine = editor.state.doc.lineAt(topBlock.from).number - 1;\n        this.history.updateScrollLineNumber(this.currentFileInternal.url(), topLine);\n      }\n    }\n  }\n\n  private onEditorUpdate({data: update}: Common.EventTarget.EventTargetEvent<CodeMirror.ViewUpdate>): void {\n    if (update.docChanged || update.selectionSet) {\n      const {main} = update.state.selection;\n      const lineFrom = update.state.doc.lineAt(main.from), lineTo = update.state.doc.lineAt(main.to);\n      const range = new TextUtils.TextRange.TextRange(\n          lineFrom.number - 1, main.from - lineFrom.from, lineTo.number - 1, main.to - lineTo.from);\n      if (this.currentFileInternal) {\n        this.history.updateSelectionRange(this.currentFileInternal.url(), range);\n      }\n      this.history.save(this.previouslyViewedFilesSetting);\n\n      if (this.currentFileInternal) {\n        Extensions.ExtensionServer.ExtensionServer.instance().sourceSelectionChanged(\n            this.currentFileInternal.url(), range);\n      }\n    }\n  }\n\n  private innerShowFile(uiSourceCode: Workspace.UISourceCode.UISourceCode, userGesture?: boolean): void {\n    const binding = Persistence.Persistence.PersistenceImpl.instance().binding(uiSourceCode);\n    uiSourceCode = binding ? binding.fileSystem : uiSourceCode;\n    if (this.currentFileInternal === uiSourceCode) {\n      return;\n    }\n\n    this.removeViewListeners();\n    this.currentFileInternal = uiSourceCode;\n\n    const tabId = this.tabIds.get(uiSourceCode) || this.appendFileTab(uiSourceCode, userGesture);\n\n    this.tabbedPane.selectTab(tabId, userGesture);\n    if (userGesture) {\n      this.editorSelectedByUserAction();\n    }\n\n    const previousView = this.currentView;\n    this.currentView = this.visibleView;\n    this.addViewListeners();\n\n    const eventData = {\n      currentFile: this.currentFileInternal,\n      currentView: this.currentView,\n      previousView: previousView,\n      userGesture: userGesture,\n    };\n    this.dispatchEventToListeners(Events.EditorSelected, eventData);\n  }\n\n  private titleForFile(uiSourceCode: Workspace.UISourceCode.UISourceCode): string {\n    const maxDisplayNameLength = 30;\n    let title = Platform.StringUtilities.trimMiddle(uiSourceCode.displayName(true), maxDisplayNameLength);\n    if (uiSourceCode.isDirty()) {\n      title += '*';\n    }\n    return title;\n  }\n\n  private maybeCloseTab(id: string, nextTabId: string|null): boolean {\n    const uiSourceCode = this.files.get(id);\n    if (!uiSourceCode) {\n      return false;\n    }\n    const shouldPrompt = uiSourceCode.isDirty() && uiSourceCode.project().canSetFileContent();\n    // FIXME: this should be replaced with common Save/Discard/Cancel dialog.\n    if (!shouldPrompt || confirm(i18nString(UIStrings.areYouSureYouWantToCloseUnsaved, {PH1: uiSourceCode.name()}))) {\n      uiSourceCode.resetWorkingCopy();\n      if (nextTabId) {\n        this.tabbedPane.selectTab(nextTabId, true);\n      }\n      this.tabbedPane.closeTab(id, true);\n      return true;\n    }\n    return false;\n  }\n\n  closeTabs(ids: string[], forceCloseDirtyTabs?: boolean): void {\n    const dirtyTabs = [];\n    const cleanTabs = [];\n    for (let i = 0; i < ids.length; ++i) {\n      const id = ids[i];\n      const uiSourceCode = this.files.get(id);\n      if (uiSourceCode) {\n        if (!forceCloseDirtyTabs && uiSourceCode.isDirty()) {\n          dirtyTabs.push(id);\n        } else {\n          cleanTabs.push(id);\n        }\n      }\n    }\n    if (dirtyTabs.length) {\n      this.tabbedPane.selectTab(dirtyTabs[0], true);\n    }\n    this.tabbedPane.closeTabs(cleanTabs, true);\n    for (let i = 0; i < dirtyTabs.length; ++i) {\n      const nextTabId = i + 1 < dirtyTabs.length ? dirtyTabs[i + 1] : null;\n      if (!this.maybeCloseTab(dirtyTabs[i], nextTabId)) {\n        break;\n      }\n    }\n  }\n\n  onContextMenu(tabId: string, contextMenu: UI.ContextMenu.ContextMenu): void {\n    const uiSourceCode = this.files.get(tabId);\n    if (uiSourceCode) {\n      contextMenu.appendApplicableItems(uiSourceCode);\n    }\n  }\n\n  private canonicalUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode):\n      Workspace.UISourceCode.UISourceCode {\n    // Check if we have already a UISourceCode for this url\n    const existingSourceCode = this.idToUISourceCode.get(uiSourceCode.canononicalScriptId());\n    if (existingSourceCode) {\n      // Ignore incoming uiSourceCode, we already have this file.\n      return existingSourceCode;\n    }\n    this.idToUISourceCode.set(uiSourceCode.canononicalScriptId(), uiSourceCode);\n    this.uriToUISourceCode.set(uiSourceCode.url(), uiSourceCode);\n    return uiSourceCode;\n  }\n\n  addUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    const canonicalSourceCode = this.canonicalUISourceCode(uiSourceCode);\n    const duplicated = canonicalSourceCode !== uiSourceCode;\n    const binding = Persistence.Persistence.PersistenceImpl.instance().binding(canonicalSourceCode);\n    uiSourceCode = binding ? binding.fileSystem : canonicalSourceCode;\n\n    if (duplicated && uiSourceCode.project().type() !== Workspace.Workspace.projectTypes.FileSystem) {\n      uiSourceCode.disableEdit();\n    }\n\n    if (this.currentFileInternal === uiSourceCode) {\n      return;\n    }\n\n    const uri = uiSourceCode.url();\n    const index = this.history.index(uri);\n    if (index === -1) {\n      return;\n    }\n\n    if (!this.tabIds.has(uiSourceCode)) {\n      this.appendFileTab(uiSourceCode, false);\n    }\n\n    // Select tab if this file was the last to be shown.\n    if (!index) {\n      this.innerShowFile(uiSourceCode, false);\n      return;\n    }\n\n    if (!this.currentFileInternal) {\n      return;\n    }\n\n    const currentProjectIsSnippets = Snippets.ScriptSnippetFileSystem.isSnippetsUISourceCode(this.currentFileInternal);\n    const addedProjectIsSnippets = Snippets.ScriptSnippetFileSystem.isSnippetsUISourceCode(uiSourceCode);\n    if (this.history.index(this.currentFileInternal.url()) && currentProjectIsSnippets && !addedProjectIsSnippets) {\n      this.innerShowFile(uiSourceCode, false);\n    }\n  }\n\n  removeUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    this.removeUISourceCodes([uiSourceCode]);\n  }\n\n  removeUISourceCodes(uiSourceCodes: Workspace.UISourceCode.UISourceCode[]): void {\n    const tabIds = [];\n    for (const uiSourceCode of uiSourceCodes) {\n      const tabId = this.tabIds.get(uiSourceCode);\n      if (tabId) {\n        tabIds.push(tabId);\n      }\n      if (this.uriToUISourceCode.get(uiSourceCode.url()) === uiSourceCode) {\n        this.uriToUISourceCode.delete(uiSourceCode.url());\n      }\n      if (this.idToUISourceCode.get(uiSourceCode.canononicalScriptId()) === uiSourceCode) {\n        this.idToUISourceCode.delete(uiSourceCode.canononicalScriptId());\n      }\n    }\n    this.tabbedPane.closeTabs(tabIds);\n  }\n\n  private editorClosedByUserAction(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    this.history.remove(uiSourceCode.url());\n    this.updateHistory();\n  }\n\n  private editorSelectedByUserAction(): void {\n    this.updateHistory();\n  }\n\n  private updateHistory(): void {\n    const tabIds = this.tabbedPane.lastOpenedTabIds(maximalPreviouslyViewedFilesCount);\n\n    function tabIdToURI(this: TabbedEditorContainer, tabId: string): Platform.DevToolsPath.UrlString {\n      const tab = this.files.get(tabId);\n      if (!tab) {\n        return Platform.DevToolsPath.EmptyUrlString;\n      }\n      return tab.url();\n    }\n\n    this.history.update(tabIds.map(tabIdToURI.bind(this)));\n    this.history.save(this.previouslyViewedFilesSetting);\n  }\n\n  private tooltipForFile(uiSourceCode: Workspace.UISourceCode.UISourceCode): string {\n    uiSourceCode = Persistence.Persistence.PersistenceImpl.instance().network(uiSourceCode) || uiSourceCode;\n    return uiSourceCode.url();\n  }\n\n  private appendFileTab(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, userGesture?: boolean, index?: number,\n      replaceView?: UI.Widget.Widget): string {\n    const view = replaceView || this.delegate.viewForFile(uiSourceCode);\n    const title = this.titleForFile(uiSourceCode);\n    const tooltip = this.tooltipForFile(uiSourceCode);\n\n    const tabId = this.generateTabId();\n    this.tabIds.set(uiSourceCode, tabId);\n    this.files.set(tabId, uiSourceCode);\n\n    if (!replaceView) {\n      const savedSelectionRange = this.history.selectionRange(uiSourceCode.url());\n      const savedScrollLineNumber = this.history.scrollLineNumber(uiSourceCode.url());\n      this.restoreEditorProperties(view, savedSelectionRange, savedScrollLineNumber);\n    }\n\n    this.tabbedPane.appendTab(tabId, title, view, tooltip, userGesture, undefined, undefined, index);\n\n    this.updateFileTitle(uiSourceCode);\n    this.addUISourceCodeListeners(uiSourceCode);\n    if (uiSourceCode.loadError()) {\n      this.addLoadErrorIcon(tabId);\n    } else if (!uiSourceCode.contentLoaded()) {\n      void uiSourceCode.requestContent().then(_content => {\n        if (uiSourceCode.loadError()) {\n          this.addLoadErrorIcon(tabId);\n        }\n      });\n    }\n    return tabId;\n  }\n\n  private addLoadErrorIcon(tabId: string): void {\n    const icon = UI.Icon.Icon.create('smallicon-error');\n    UI.Tooltip.Tooltip.install(icon, i18nString(UIStrings.unableToLoadThisContent));\n    if (this.tabbedPane.tabView(tabId)) {\n      this.tabbedPane.setTabIcon(tabId, icon);\n    }\n  }\n\n  private restoreEditorProperties(\n      editorView: UI.Widget.Widget, selection?: TextUtils.TextRange.TextRange, firstLineNumber?: number): void {\n    const sourceFrame = editorView instanceof SourceFrame.SourceFrame.SourceFrameImpl ?\n        editorView as SourceFrame.SourceFrame.SourceFrameImpl :\n        null;\n    if (!sourceFrame) {\n      return;\n    }\n    if (selection) {\n      sourceFrame.setSelection(selection);\n    }\n    if (typeof firstLineNumber === 'number') {\n      sourceFrame.scrollToLine(firstLineNumber);\n    }\n  }\n\n  private tabClosed(event: Common.EventTarget.EventTargetEvent<UI.TabbedPane.EventData>): void {\n    const {tabId, isUserGesture} = event.data;\n    const uiSourceCode = this.files.get(tabId);\n    if (this.currentFileInternal === uiSourceCode) {\n      this.removeViewListeners();\n      this.currentView = null;\n      this.currentFileInternal = null;\n    }\n    if (uiSourceCode) {\n      this.tabIds.delete(uiSourceCode);\n    }\n    this.files.delete(tabId);\n\n    if (uiSourceCode) {\n      this.removeUISourceCodeListeners(uiSourceCode);\n\n      this.dispatchEventToListeners(Events.EditorClosed, uiSourceCode);\n\n      if (isUserGesture) {\n        this.editorClosedByUserAction(uiSourceCode);\n      }\n    }\n  }\n\n  private tabSelected(event: Common.EventTarget.EventTargetEvent<UI.TabbedPane.EventData>): void {\n    const {tabId, isUserGesture} = event.data;\n\n    const uiSourceCode = this.files.get(tabId);\n    if (uiSourceCode) {\n      this.innerShowFile(uiSourceCode, isUserGesture);\n    }\n  }\n\n  private addUISourceCodeListeners(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    uiSourceCode.addEventListener(Workspace.UISourceCode.Events.TitleChanged, this.uiSourceCodeTitleChanged, this);\n    uiSourceCode.addEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyChanged, this.uiSourceCodeWorkingCopyChanged, this);\n    uiSourceCode.addEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyCommitted, this.uiSourceCodeWorkingCopyCommitted, this);\n  }\n\n  private removeUISourceCodeListeners(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    uiSourceCode.removeEventListener(Workspace.UISourceCode.Events.TitleChanged, this.uiSourceCodeTitleChanged, this);\n    uiSourceCode.removeEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyChanged, this.uiSourceCodeWorkingCopyChanged, this);\n    uiSourceCode.removeEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyCommitted, this.uiSourceCodeWorkingCopyCommitted, this);\n  }\n\n  private updateFileTitle(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    const tabId = this.tabIds.get(uiSourceCode);\n    if (tabId) {\n      const title = this.titleForFile(uiSourceCode);\n      const tooltip = this.tooltipForFile(uiSourceCode);\n      this.tabbedPane.changeTabTitle(tabId, title, tooltip);\n      let icon: UI.Icon.Icon|(UI.Icon.Icon | null)|null = null;\n      if (uiSourceCode.loadError()) {\n        icon = UI.Icon.Icon.create('smallicon-error');\n        UI.Tooltip.Tooltip.install(icon, i18nString(UIStrings.unableToLoadThisContent));\n      } else if (Persistence.Persistence.PersistenceImpl.instance().hasUnsavedCommittedChanges(uiSourceCode)) {\n        icon = UI.Icon.Icon.create('smallicon-warning');\n        UI.Tooltip.Tooltip.install(icon, i18nString(UIStrings.changesToThisFileWereNotSavedTo));\n      } else {\n        icon = Persistence.PersistenceUtils.PersistenceUtils.iconForUISourceCode(uiSourceCode);\n      }\n      this.tabbedPane.setTabIcon(tabId, icon);\n    }\n  }\n\n  private uiSourceCodeTitleChanged(event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.UISourceCode>):\n      void {\n    const uiSourceCode = event.data;\n    this.updateFileTitle(uiSourceCode);\n    this.updateHistory();\n\n    // Remove from map under old url if it has changed.\n    for (const [k, v] of this.uriToUISourceCode) {\n      if (v === uiSourceCode && k !== v.url()) {\n        this.uriToUISourceCode.delete(k);\n      }\n    }\n    // Remove from map under old id if it has changed.\n    for (const [k, v] of this.idToUISourceCode) {\n      if (v === uiSourceCode && k !== v.canononicalScriptId()) {\n        this.idToUISourceCode.delete(k);\n      }\n    }\n    // Ensure it is mapped under current url and id.\n    this.canonicalUISourceCode(uiSourceCode);\n  }\n\n  private uiSourceCodeWorkingCopyChanged(\n      event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.UISourceCode>): void {\n    const uiSourceCode = event.data;\n    this.updateFileTitle(uiSourceCode);\n  }\n\n  private uiSourceCodeWorkingCopyCommitted(\n      event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.WorkingCopyCommitedEvent>): void {\n    const uiSourceCode = event.data.uiSourceCode;\n    this.updateFileTitle(uiSourceCode);\n  }\n\n  private generateTabId(): string {\n    return 'tab_' + (tabId++);\n  }\n\n  currentFile(): Workspace.UISourceCode.UISourceCode|null {\n    return this.currentFileInternal || null;\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  EditorSelected = 'EditorSelected',\n  EditorClosed = 'EditorClosed',\n}\n\nexport interface EditorSelectedEvent {\n  currentFile: Workspace.UISourceCode.UISourceCode;\n  currentView: UI.Widget.Widget|null;\n  previousView: UI.Widget.Widget|null;\n  userGesture: boolean|undefined;\n}\n\nexport type EventTypes = {\n  [Events.EditorSelected]: EditorSelectedEvent,\n  [Events.EditorClosed]: Workspace.UISourceCode.UISourceCode,\n};\n\nexport let tabId = 0;\nexport const maximalPreviouslyViewedFilesCount = 30;\n\ninterface SerializedHistoryItem {\n  url: Platform.DevToolsPath.UrlString;\n  selectionRange?: TextUtils.TextRange.SerializedTextRange;\n  scrollLineNumber?: number;\n}\n\nexport class HistoryItem {\n  url: Platform.DevToolsPath.UrlString;\n  private isSerializable: boolean;\n  selectionRange: TextUtils.TextRange.TextRange|undefined;\n  scrollLineNumber: number|undefined;\n\n  constructor(\n      url: Platform.DevToolsPath.UrlString, selectionRange?: TextUtils.TextRange.TextRange, scrollLineNumber?: number) {\n    this.url = url;\n    this.isSerializable = url.length < HistoryItem.serializableUrlLengthLimit;\n    this.selectionRange = selectionRange;\n    this.scrollLineNumber = scrollLineNumber;\n  }\n\n  static fromObject(serializedHistoryItem: SerializedHistoryItem): HistoryItem {\n    const selectionRange = serializedHistoryItem.selectionRange ?\n        TextUtils.TextRange.TextRange.fromObject(serializedHistoryItem.selectionRange) :\n        undefined;\n    return new HistoryItem(serializedHistoryItem.url, selectionRange, serializedHistoryItem.scrollLineNumber);\n  }\n\n  serializeToObject(): SerializedHistoryItem|null {\n    if (!this.isSerializable) {\n      return null;\n    }\n    const serializedHistoryItem = {\n      url: this.url,\n      selectionRange: this.selectionRange,\n      scrollLineNumber: this.scrollLineNumber,\n    };\n    return serializedHistoryItem;\n  }\n\n  static readonly serializableUrlLengthLimit = 4096;\n}\n\nexport class History {\n  private items: HistoryItem[];\n  private itemsIndex: Map<string, number>;\n\n  constructor(items: HistoryItem[]) {\n    this.items = items;\n    this.itemsIndex = new Map();\n    this.rebuildItemIndex();\n  }\n\n  static fromObject(serializedHistory: SerializedHistoryItem[]): History {\n    const items = [];\n    for (let i = 0; i < serializedHistory.length; ++i) {\n      // crbug.com/876265 Old versions of DevTools don't have urls set in their localStorage\n      if ('url' in serializedHistory[i] && serializedHistory[i].url) {\n        items.push(HistoryItem.fromObject(serializedHistory[i]));\n      }\n    }\n    return new History(items);\n  }\n\n  index(url: Platform.DevToolsPath.UrlString): number {\n    const index = this.itemsIndex.get(url);\n    if (index !== undefined) {\n      return index;\n    }\n    return -1;\n  }\n\n  private rebuildItemIndex(): void {\n    this.itemsIndex = new Map();\n    for (let i = 0; i < this.items.length; ++i) {\n      console.assert(!this.itemsIndex.has(this.items[i].url));\n      this.itemsIndex.set(this.items[i].url, i);\n    }\n  }\n\n  selectionRange(url: Platform.DevToolsPath.UrlString): TextUtils.TextRange.TextRange|undefined {\n    const index = this.index(url);\n    return index !== -1 ? this.items[index].selectionRange : undefined;\n  }\n\n  updateSelectionRange(url: Platform.DevToolsPath.UrlString, selectionRange?: TextUtils.TextRange.TextRange): void {\n    if (!selectionRange) {\n      return;\n    }\n    const index = this.index(url);\n    if (index === -1) {\n      return;\n    }\n    this.items[index].selectionRange = selectionRange;\n  }\n\n  scrollLineNumber(url: Platform.DevToolsPath.UrlString): number|undefined {\n    const index = this.index(url);\n    return index !== -1 ? this.items[index].scrollLineNumber : undefined;\n  }\n\n  updateScrollLineNumber(url: Platform.DevToolsPath.UrlString, scrollLineNumber: number): void {\n    const index = this.index(url);\n    if (index === -1) {\n      return;\n    }\n    this.items[index].scrollLineNumber = scrollLineNumber;\n  }\n\n  update(urls: Platform.DevToolsPath.UrlString[]): void {\n    for (let i = urls.length - 1; i >= 0; --i) {\n      const index = this.index(urls[i]);\n      let item;\n      if (index !== -1) {\n        item = this.items[index];\n        this.items.splice(index, 1);\n      } else {\n        item = new HistoryItem(urls[i]);\n      }\n      this.items.unshift(item);\n      this.rebuildItemIndex();\n    }\n  }\n\n  remove(url: Platform.DevToolsPath.UrlString): void {\n    const index = this.index(url);\n    if (index !== -1) {\n      this.items.splice(index, 1);\n      this.rebuildItemIndex();\n    }\n  }\n\n  save(setting: Common.Settings.Setting<SerializedHistoryItem[]>): void {\n    setting.set(this.serializeToObject());\n  }\n\n  private serializeToObject(): SerializedHistoryItem[] {\n    const serializedHistory = [];\n    for (let i = 0; i < this.items.length; ++i) {\n      const serializedItem = this.items[i].serializeToObject();\n      if (serializedItem) {\n        serializedHistory.push(serializedItem);\n      }\n      if (serializedHistory.length === maximalPreviouslyViewedFilesCount) {\n        break;\n      }\n    }\n    return serializedHistory;\n  }\n\n  urls(): Platform.DevToolsPath.UrlString[] {\n    const result = [];\n    for (let i = 0; i < this.items.length; ++i) {\n      result.push(this.items[i].url);\n    }\n    return result;\n  }\n}\n\nexport class EditorContainerTabDelegate implements UI.TabbedPane.TabbedPaneTabDelegate {\n  private readonly editorContainer: TabbedEditorContainer;\n\n  constructor(editorContainer: TabbedEditorContainer) {\n    this.editorContainer = editorContainer;\n  }\n\n  closeTabs(_tabbedPane: UI.TabbedPane.TabbedPane, ids: string[]): void {\n    this.editorContainer.closeTabs(ids);\n  }\n\n  onContextMenu(tabId: string, contextMenu: UI.ContextMenu.ContextMenu): void {\n    this.editorContainer.onContextMenu(tabId, contextMenu);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
