{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/sources/FilteredUISourceCodeListProvider.ts"],
  "sourcesContent": ["// Copyright 2012 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Persistence from '../../models/persistence/persistence.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport * as QuickOpen from '../../ui/legacy/components/quick_open/quick_open.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {FilePathScoreFunction} from './FilePathScoreFunction.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Filtered UISource Code List Provider of the Sources panel\n  */\n  noFilesFound: 'No files found',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/sources/FilteredUISourceCodeListProvider.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class FilteredUISourceCodeListProvider extends QuickOpen.FilteredListWidget.Provider {\n  private queryLineNumberAndColumnNumber: string;\n  private defaultScores: Map<Workspace.UISourceCode.UISourceCode, number>|null;\n  private scorer: FilePathScoreFunction;\n  private uiSourceCodes: Workspace.UISourceCode.UISourceCode[];\n  private readonly uiSourceCodeUrls: Set<string>;\n  private query!: string;\n  constructor() {\n    super();\n\n    this.queryLineNumberAndColumnNumber = '';\n    this.defaultScores = null;\n    this.scorer = new FilePathScoreFunction('');\n\n    this.uiSourceCodes = [];\n    this.uiSourceCodeUrls = new Set();\n  }\n\n  private projectRemoved(event: Common.EventTarget.EventTargetEvent<Workspace.Workspace.Project>): void {\n    const project = event.data;\n    this.populate(project);\n    this.refresh();\n  }\n\n  private populate(skipProject?: Workspace.Workspace.Project): void {\n    this.uiSourceCodes = [];\n    this.uiSourceCodeUrls.clear();\n    for (const project of Workspace.Workspace.WorkspaceImpl.instance().projects()) {\n      if (project !== skipProject && this.filterProject(project)) {\n        for (const uiSourceCode of project.uiSourceCodes()) {\n          if (this.filterUISourceCode(uiSourceCode)) {\n            this.uiSourceCodes.push(uiSourceCode);\n            this.uiSourceCodeUrls.add(uiSourceCode.url());\n          }\n        }\n      }\n    }\n  }\n\n  private filterUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n    if (this.uiSourceCodeUrls.has(uiSourceCode.url())) {\n      return false;\n    }\n    const binding = Persistence.Persistence.PersistenceImpl.instance().binding(uiSourceCode);\n    return !binding || binding.fileSystem === uiSourceCode;\n  }\n\n  uiSourceCodeSelected(\n      _uiSourceCode: Workspace.UISourceCode.UISourceCode|null, _lineNumber?: number, _columnNumber?: number): void {\n    // Overridden by subclasses\n  }\n\n  filterProject(_project: Workspace.Workspace.Project): boolean {\n    return true;\n    // Overridden by subclasses\n  }\n\n  itemCount(): number {\n    return this.uiSourceCodes.length;\n  }\n\n  itemContentTypeAt(itemIndex: number): Common.ResourceType.ResourceType {\n    return this.uiSourceCodes[itemIndex].contentType();\n  }\n\n  itemKeyAt(itemIndex: number): string {\n    return this.uiSourceCodes[itemIndex].url();\n  }\n\n  setDefaultScores(defaultScores: Map<Workspace.UISourceCode.UISourceCode, number>|null): void {\n    this.defaultScores = defaultScores;\n  }\n\n  itemScoreAt(itemIndex: number, query: string): number {\n    const uiSourceCode = this.uiSourceCodes[itemIndex];\n    const score = this.defaultScores ? (this.defaultScores.get(uiSourceCode) || 0) : 0;\n    if (!query || query.length < 2) {\n      return score;\n    }\n\n    if (this.query !== query) {\n      this.query = query;\n      this.scorer = new FilePathScoreFunction(query);\n    }\n\n    let multiplier = 10;\n    if (uiSourceCode.project().type() === Workspace.Workspace.projectTypes.FileSystem &&\n        !Persistence.Persistence.PersistenceImpl.instance().binding(uiSourceCode)) {\n      multiplier = 5;\n    }\n\n    let contentTypeBonus = 0;\n    if (uiSourceCode.contentType().isFromSourceMap()) {\n      contentTypeBonus = 100;\n      // Maybe also have a bonus for being a script?\n    }\n\n    const fullDisplayName = uiSourceCode.fullDisplayName();\n    return score + multiplier * (contentTypeBonus + this.scorer.calculateScore(fullDisplayName, null));\n  }\n\n  renderItem(itemIndex: number, query: string, titleElement: Element, subtitleElement: Element): void {\n    query = this.rewriteQuery(query);\n    const uiSourceCode = this.uiSourceCodes[itemIndex];\n    const fullDisplayName = uiSourceCode.fullDisplayName();\n    const indexes: number[] = [];\n    new FilePathScoreFunction(query).calculateScore(fullDisplayName, indexes);\n    const fileNameIndex = fullDisplayName.lastIndexOf('/');\n\n    titleElement.textContent = uiSourceCode.displayName() + (this.queryLineNumberAndColumnNumber || '');\n    this.renderSubtitleElement(subtitleElement, fullDisplayName.substring(0, fileNameIndex + 1));\n    UI.Tooltip.Tooltip.install((subtitleElement as HTMLElement), fullDisplayName);\n    const ranges = [];\n    for (let i = 0; i < indexes.length; ++i) {\n      ranges.push({offset: indexes[i], length: 1});\n    }\n\n    if (indexes[0] > fileNameIndex) {\n      for (let i = 0; i < ranges.length; ++i) {\n        ranges[i].offset -= fileNameIndex + 1;\n      }\n      UI.UIUtils.highlightRangesWithStyleClass(titleElement, ranges, 'highlight');\n    } else {\n      UI.UIUtils.highlightRangesWithStyleClass(subtitleElement, ranges, 'highlight');\n    }\n  }\n\n  private renderSubtitleElement(element: Element, text: string): void {\n    element.removeChildren();\n    let splitPosition = text.lastIndexOf('/');\n    const maxTextLength = 43;\n    if (text.length > maxTextLength) {\n      splitPosition = text.length - maxTextLength;\n    }\n    const first = element.createChild('div', 'first-part');\n    first.textContent = text.substring(0, splitPosition);\n    const second = element.createChild('div', 'second-part');\n    second.textContent = text.substring(splitPosition);\n    UI.Tooltip.Tooltip.install((element as HTMLElement), text);\n  }\n\n  selectItem(itemIndex: number|null, promptValue: string): void {\n    const parsedExpression = promptValue.trim().match(/^([^:]*)(:\\d+)?(:\\d+)?$/);\n    if (!parsedExpression) {\n      return;\n    }\n\n    let lineNumber;\n    let columnNumber;\n    if (parsedExpression[2]) {\n      lineNumber = parseInt(parsedExpression[2].substr(1), 10) - 1;\n    }\n    if (parsedExpression[3]) {\n      columnNumber = parseInt(parsedExpression[3].substr(1), 10) - 1;\n    }\n    const uiSourceCode = itemIndex !== null ? this.uiSourceCodes[itemIndex] : null;\n    this.uiSourceCodeSelected(uiSourceCode, lineNumber, columnNumber);\n  }\n\n  rewriteQuery(query: string): string {\n    query = query ? query.trim() : '';\n    if (!query || query === ':') {\n      return '';\n    }\n    const lineNumberMatch = query.match(/^([^:]+)((?::[^:]*){0,2})$/);\n    this.queryLineNumberAndColumnNumber = lineNumberMatch ? lineNumberMatch[2] : '';\n    return lineNumberMatch ? lineNumberMatch[1] : query;\n  }\n\n  private uiSourceCodeAdded(event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.UISourceCode>): void {\n    const uiSourceCode = event.data;\n    if (!this.filterUISourceCode(uiSourceCode) || !this.filterProject(uiSourceCode.project())) {\n      return;\n    }\n    this.uiSourceCodes.push(uiSourceCode);\n    this.uiSourceCodeUrls.add(uiSourceCode.url());\n    this.refresh();\n  }\n\n  notFoundText(): string {\n    return i18nString(UIStrings.noFilesFound);\n  }\n\n  attach(): void {\n    Workspace.Workspace.WorkspaceImpl.instance().addEventListener(\n        Workspace.Workspace.Events.UISourceCodeAdded, this.uiSourceCodeAdded, this);\n    Workspace.Workspace.WorkspaceImpl.instance().addEventListener(\n        Workspace.Workspace.Events.ProjectRemoved, this.projectRemoved, this);\n    this.populate();\n  }\n\n  detach(): void {\n    Workspace.Workspace.WorkspaceImpl.instance().removeEventListener(\n        Workspace.Workspace.Events.UISourceCodeAdded, this.uiSourceCodeAdded, this);\n    Workspace.Workspace.WorkspaceImpl.instance().removeEventListener(\n        Workspace.Workspace.Events.ProjectRemoved, this.projectRemoved, this);\n    this.queryLineNumberAndColumnNumber = '';\n    this.defaultScores = null;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
