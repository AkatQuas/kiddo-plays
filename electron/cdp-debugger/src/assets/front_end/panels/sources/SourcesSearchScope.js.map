{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/sources/SourcesSearchScope.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as Persistence from '../../models/persistence/persistence.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport type * as Search from '../search/search.js';\n\nexport class SourcesSearchScope implements Search.SearchConfig.SearchScope {\n  private searchId: number;\n  private searchResultCandidates: Workspace.UISourceCode.UISourceCode[];\n  private searchResultCallback: ((arg0: Search.SearchConfig.SearchResult) => void)|null;\n  private searchFinishedCallback: ((arg0: boolean) => void)|null;\n  private searchConfig: Workspace.Workspace.ProjectSearchConfig|null;\n  constructor() {\n    // FIXME: Add title once it is used by search controller.\n    this.searchId = 0;\n    this.searchResultCandidates = [];\n    this.searchResultCallback = null;\n    this.searchFinishedCallback = null;\n    this.searchConfig = null;\n  }\n\n  private static filesComparator(\n      uiSourceCode1: Workspace.UISourceCode.UISourceCode, uiSourceCode2: Workspace.UISourceCode.UISourceCode): number {\n    if (uiSourceCode1.isDirty() && !uiSourceCode2.isDirty()) {\n      return -1;\n    }\n    if (!uiSourceCode1.isDirty() && uiSourceCode2.isDirty()) {\n      return 1;\n    }\n    const isFileSystem1 = uiSourceCode1.project().type() === Workspace.Workspace.projectTypes.FileSystem &&\n        !Persistence.Persistence.PersistenceImpl.instance().binding(uiSourceCode1);\n    const isFileSystem2 = uiSourceCode2.project().type() === Workspace.Workspace.projectTypes.FileSystem &&\n        !Persistence.Persistence.PersistenceImpl.instance().binding(uiSourceCode2);\n    if (isFileSystem1 !== isFileSystem2) {\n      return isFileSystem1 ? 1 : -1;\n    }\n    const url1 = uiSourceCode1.url();\n    const url2 = uiSourceCode2.url();\n    if (url1 && !url2) {\n      return -1;\n    }\n    if (!url1 && url2) {\n      return 1;\n    }\n    return Platform.StringUtilities.naturalOrderComparator(\n        uiSourceCode1.fullDisplayName(), uiSourceCode2.fullDisplayName());\n  }\n\n  performIndexing(progress: Common.Progress.Progress): void {\n    this.stopSearch();\n\n    const projects = this.projects();\n    const compositeProgress = new Common.Progress.CompositeProgress(progress);\n    for (let i = 0; i < projects.length; ++i) {\n      const project = projects[i];\n      const projectProgress = compositeProgress.createSubProgress(project.uiSourceCodes().length);\n      project.indexContent(projectProgress);\n    }\n  }\n\n  private projects(): Workspace.Workspace.Project[] {\n    const searchInAnonymousAndContentScripts =\n        Common.Settings.Settings.instance().moduleSetting('searchInAnonymousAndContentScripts').get();\n\n    return Workspace.Workspace.WorkspaceImpl.instance().projects().filter(project => {\n      if (project.type() === Workspace.Workspace.projectTypes.Service) {\n        return false;\n      }\n      if (!searchInAnonymousAndContentScripts && project.isServiceProject() &&\n          project.type() !== Workspace.Workspace.projectTypes.Formatter) {\n        return false;\n      }\n      if (!searchInAnonymousAndContentScripts && project.type() === Workspace.Workspace.projectTypes.ContentScripts) {\n        return false;\n      }\n      return true;\n    });\n  }\n\n  performSearch(\n      searchConfig: Workspace.Workspace.ProjectSearchConfig, progress: Common.Progress.Progress,\n      searchResultCallback: (arg0: Search.SearchConfig.SearchResult) => void,\n      searchFinishedCallback: (arg0: boolean) => void): void {\n    this.stopSearch();\n    this.searchResultCandidates = [];\n    this.searchResultCallback = searchResultCallback;\n    this.searchFinishedCallback = searchFinishedCallback;\n    this.searchConfig = searchConfig;\n\n    const promises = [];\n    const compositeProgress = new Common.Progress.CompositeProgress(progress);\n    const searchContentProgress = compositeProgress.createSubProgress();\n    const findMatchingFilesProgress = new Common.Progress.CompositeProgress(compositeProgress.createSubProgress());\n    for (const project of this.projects()) {\n      const weight = project.uiSourceCodes().length;\n      const findMatchingFilesInProjectProgress = findMatchingFilesProgress.createSubProgress(weight);\n      const filesMatchingFileQuery = this.projectFilesMatchingFileQuery(project, searchConfig);\n      const promise =\n          project\n              .findFilesMatchingSearchRequest(searchConfig, filesMatchingFileQuery, findMatchingFilesInProjectProgress)\n              .then(this.processMatchingFilesForProject.bind(\n                  this, this.searchId, project, searchConfig, filesMatchingFileQuery));\n      promises.push(promise);\n    }\n\n    void Promise.all(promises).then(this.processMatchingFiles.bind(\n        this, this.searchId, searchContentProgress, this.searchFinishedCallback.bind(this, true)));\n  }\n\n  private projectFilesMatchingFileQuery(\n      project: Workspace.Workspace.Project, searchConfig: Workspace.Workspace.ProjectSearchConfig,\n      dirtyOnly?: boolean): Platform.DevToolsPath.UrlString[] {\n    const result = [];\n    const uiSourceCodes = project.uiSourceCodes();\n    for (let i = 0; i < uiSourceCodes.length; ++i) {\n      const uiSourceCode = uiSourceCodes[i];\n      if (!uiSourceCode.contentType().isTextType()) {\n        continue;\n      }\n      const binding = Persistence.Persistence.PersistenceImpl.instance().binding(uiSourceCode);\n      if (binding && binding.network === uiSourceCode) {\n        continue;\n      }\n      if (dirtyOnly && !uiSourceCode.isDirty()) {\n        continue;\n      }\n      if (searchConfig.filePathMatchesFileQuery(\n              uiSourceCode.fullDisplayName() as Platform.DevToolsPath.UrlString |\n              Platform.DevToolsPath.EncodedPathString)) {\n        result.push(uiSourceCode.url());\n      }\n    }\n    result.sort(Platform.StringUtilities.naturalOrderComparator);\n    return result;\n  }\n\n  private processMatchingFilesForProject(\n      searchId: number, project: Workspace.Workspace.Project, searchConfig: Workspace.Workspace.ProjectSearchConfig,\n      filesMatchingFileQuery: string[], files: string[]): void {\n    if (searchId !== this.searchId && this.searchFinishedCallback) {\n      this.searchFinishedCallback(false);\n      return;\n    }\n\n    files.sort(Platform.StringUtilities.naturalOrderComparator);\n    files = Platform.ArrayUtilities.intersectOrdered(\n        files, filesMatchingFileQuery, Platform.StringUtilities.naturalOrderComparator);\n    const dirtyFiles = this.projectFilesMatchingFileQuery(project, searchConfig, true);\n    files = Platform.ArrayUtilities.mergeOrdered(files, dirtyFiles, Platform.StringUtilities.naturalOrderComparator);\n\n    const uiSourceCodes = [];\n    for (const file of files) {\n      const uiSourceCode = project.uiSourceCodeForURL(file as Platform.DevToolsPath.UrlString);\n      if (!uiSourceCode) {\n        continue;\n      }\n      const script = Bindings.DefaultScriptMapping.DefaultScriptMapping.scriptForUISourceCode(uiSourceCode);\n      if (script && !script.isAnonymousScript()) {\n        continue;\n      }\n      uiSourceCodes.push(uiSourceCode);\n    }\n    uiSourceCodes.sort(SourcesSearchScope.filesComparator);\n    this.searchResultCandidates = Platform.ArrayUtilities.mergeOrdered(\n        this.searchResultCandidates, uiSourceCodes, SourcesSearchScope.filesComparator);\n  }\n\n  private processMatchingFiles(searchId: number, progress: Common.Progress.Progress, callback: () => void): void {\n    if (searchId !== this.searchId && this.searchFinishedCallback) {\n      this.searchFinishedCallback(false);\n      return;\n    }\n\n    const files = this.searchResultCandidates;\n    if (!files.length) {\n      progress.done();\n      callback();\n      return;\n    }\n\n    progress.setTotalWork(files.length);\n\n    let fileIndex = 0;\n    const maxFileContentRequests = 20;\n    let callbacksLeft = 0;\n\n    for (let i = 0; i < maxFileContentRequests && i < files.length; ++i) {\n      scheduleSearchInNextFileOrFinish.call(this);\n    }\n\n    function searchInNextFile(this: SourcesSearchScope, uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n      if (uiSourceCode.isDirty()) {\n        contentLoaded.call(this, uiSourceCode, uiSourceCode.workingCopy());\n      } else {\n        void uiSourceCode.requestContent().then(deferredContent => {\n          contentLoaded.call(this, uiSourceCode, deferredContent.content || '');\n        });\n      }\n    }\n\n    function scheduleSearchInNextFileOrFinish(this: SourcesSearchScope): void {\n      if (fileIndex >= files.length) {\n        if (!callbacksLeft) {\n          progress.done();\n          callback();\n          return;\n        }\n        return;\n      }\n\n      ++callbacksLeft;\n      const uiSourceCode = files[fileIndex++];\n      window.setTimeout(searchInNextFile.bind(this, uiSourceCode), 0);\n    }\n\n    function contentLoaded(\n        this: SourcesSearchScope, uiSourceCode: Workspace.UISourceCode.UISourceCode, content: string): void {\n      function matchesComparator(\n          a: TextUtils.ContentProvider.SearchMatch, b: TextUtils.ContentProvider.SearchMatch): number {\n        return a.lineNumber - b.lineNumber;\n      }\n\n      progress.incrementWorked(1);\n      let matches: TextUtils.ContentProvider.SearchMatch[] = [];\n      const searchConfig = (this.searchConfig as Workspace.Workspace.ProjectSearchConfig);\n      const queries = searchConfig.queries();\n      if (content !== null) {\n        for (let i = 0; i < queries.length; ++i) {\n          const nextMatches = TextUtils.TextUtils.performSearchInContent(\n              content, queries[i], !searchConfig.ignoreCase(), searchConfig.isRegex());\n          matches = Platform.ArrayUtilities.mergeOrdered(matches, nextMatches, matchesComparator);\n        }\n      }\n      if (matches && this.searchResultCallback) {\n        const searchResult = new FileBasedSearchResult(uiSourceCode, matches);\n        this.searchResultCallback(searchResult);\n      }\n\n      --callbacksLeft;\n      scheduleSearchInNextFileOrFinish.call(this);\n    }\n  }\n\n  stopSearch(): void {\n    ++this.searchId;\n  }\n}\n\nexport class FileBasedSearchResult implements Search.SearchConfig.SearchResult {\n  private readonly uiSourceCode: Workspace.UISourceCode.UISourceCode;\n  private readonly searchMatches: TextUtils.ContentProvider.SearchMatch[];\n  constructor(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, searchMatches: TextUtils.ContentProvider.SearchMatch[]) {\n    this.uiSourceCode = uiSourceCode;\n    this.searchMatches = searchMatches;\n  }\n\n  label(): string {\n    return this.uiSourceCode.displayName();\n  }\n\n  description(): string {\n    return this.uiSourceCode.fullDisplayName();\n  }\n\n  matchesCount(): number {\n    return this.searchMatches.length;\n  }\n\n  matchLineContent(index: number): string {\n    return this.searchMatches[index].lineContent;\n  }\n\n  matchRevealable(index: number): Object {\n    const match = this.searchMatches[index];\n    return this.uiSourceCode.uiLocation(match.lineNumber, match.columnNumber);\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  matchLabel(index: number): any {\n    return this.searchMatches[index].lineNumber + 1;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
