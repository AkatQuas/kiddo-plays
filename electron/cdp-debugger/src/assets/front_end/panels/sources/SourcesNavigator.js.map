{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/sources/SourcesNavigator.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Persistence from '../../models/persistence/persistence.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport * as Feedback from '../../ui/components/panel_feedback/panel_feedback.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Snippets from '../snippets/snippets.js';\n\nimport type {NavigatorUISourceCodeTreeNode} from './NavigatorView.js';\nimport {NavigatorView} from './NavigatorView.js';\nimport sourcesNavigatorStyles from './sourcesNavigator.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Sources Navigator of the Sources panel\n  */\n  syncChangesInDevtoolsWithThe: 'Sync changes in DevTools with the local filesystem',\n  /**\n   * @description Text for link in the Filesystem Side View in Sources Panel. Workspaces is a\n   * DevTools feature that allows editing local files inside DevTools.\n   * See: https://developer.chrome.com/docs/devtools/workspaces/\n   */\n  learnMoreAboutWorkspaces: 'Learn more about Workspaces',\n  /**\n  *@description Text in Sources Navigator of the Sources panel\n  */\n  overridePageAssetsWithFilesFromA: 'Override page assets with files from a local folder',\n  /**\n  *@description Text that is usually a hyperlink to more documentation\n  */\n  learnMore: 'Learn more',\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon clear button in the Sources Navigator of the Sources panel\n  */\n  clearConfiguration: 'Clear configuration',\n  /**\n  *@description Text in Sources Navigator of the Sources panel\n  */\n  selectFolderForOverrides: 'Select folder for overrides',\n  /**\n  *@description Text in Sources Navigator of the Sources panel\n  */\n  contentScriptsServedByExtensions: 'Content scripts served by extensions appear here',\n  /**\n  *@description Text in Sources Navigator of the Sources panel\n  */\n  createAndSaveCodeSnippetsFor: 'Create and save code snippets for later reuse',\n  /**\n  *@description Text in Sources Navigator of the Sources panel\n  */\n  newSnippet: 'New snippet',\n  /**\n  *@description Title of an action in the sources tool to create snippet\n  */\n  createNewSnippet: 'Create new snippet',\n  /**\n  *@description A context menu item in the Sources Navigator of the Sources panel\n  */\n  run: 'Run',\n  /**\n  *@description A context menu item in the Navigator View of the Sources panel\n  */\n  rename: 'Rename\u2026',\n  /**\n  *@description Label for an item to remove something\n  */\n  remove: 'Remove',\n  /**\n  *@description Text to save content as a specific file type\n  */\n  saveAs: 'Save as...',\n  /**\n   *@description Description of the new experimental Authored/Deployed view\n   */\n  authoredDescription: 'Group files by Authored/Deployed',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/sources/SourcesNavigator.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet networkNavigatorViewInstance: NetworkNavigatorView;\n\nexport class NetworkNavigatorView extends NavigatorView {\n  private previewToggle: Feedback.PreviewToggle.PreviewToggle;\n  private constructor() {\n    super(true);\n    SDK.TargetManager.TargetManager.instance().addEventListener(\n        SDK.TargetManager.Events.InspectedURLChanged, this.inspectedURLChanged, this);\n\n    this.previewToggle = new Feedback.PreviewToggle.PreviewToggle();\n    this.onGroupingChanged();\n\n    const div = UI.Fragment.html`<div class=\"border-container\"></div>`;\n    div.append(this.previewToggle);\n    this.contentElement.prepend(div);\n\n    // Record the sources tool load time after the file navigator has loaded.\n    Host.userMetrics.panelLoaded('sources', 'DevTools.Launch.Sources');\n  }\n\n  onGroupingChanged(): void {\n    // Setting the data will re-render it.\n    this.previewToggle.data = {\n      name: i18nString(UIStrings.authoredDescription),\n      helperText: null,\n      experiment: Root.Runtime.ExperimentName.AUTHORED_DEPLOYED_GROUPING,\n      learnMoreURL: 'https://goo.gle/authored-deployed',\n      feedbackURL: 'https://goo.gle/authored-deployed-feedback',\n      onChangeCallback: this.onAuthoredDeployedChanged,\n    };\n  }\n\n  wasShown(): void {\n    this.registerCSSFiles([sourcesNavigatorStyles]);\n    super.wasShown();\n  }\n\n  private onAuthoredDeployedChanged(checked: boolean): void {\n    Host.userMetrics.experimentChanged(Root.Runtime.ExperimentName.AUTHORED_DEPLOYED_GROUPING, checked);\n    // Need to signal to the NavigatorView that grouping has changed. Unfortunately,\n    // it can't listen to an experiment, and this class doesn't directly interact\n    // with it, so we will convince it a different grouping setting changed. When we switch\n    // from using an experiment to a setting, it will listen to that setting and we\n    // won't need to do this.\n    const groupByFolderSetting = Common.Settings.Settings.instance().moduleSetting('navigatorGroupByFolder');\n    groupByFolderSetting.set(groupByFolderSetting.get());\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): NetworkNavigatorView {\n    const {forceNew} = opts;\n    if (!networkNavigatorViewInstance || forceNew) {\n      networkNavigatorViewInstance = new NetworkNavigatorView();\n    }\n\n    return networkNavigatorViewInstance;\n  }\n\n  acceptProject(project: Workspace.Workspace.Project): boolean {\n    return project.type() === Workspace.Workspace.projectTypes.Network;\n  }\n\n  private inspectedURLChanged(event: Common.EventTarget.EventTargetEvent<SDK.Target.Target>): void {\n    const mainTarget = SDK.TargetManager.TargetManager.instance().mainTarget();\n    if (event.data !== mainTarget) {\n      return;\n    }\n    const inspectedURL = mainTarget && mainTarget.inspectedURL();\n    if (!inspectedURL) {\n      return;\n    }\n    for (const uiSourceCode of this.workspace().uiSourceCodes()) {\n      if (this.acceptProject(uiSourceCode.project()) && uiSourceCode.url() === inspectedURL) {\n        this.revealUISourceCode(uiSourceCode, true);\n      }\n    }\n  }\n\n  uiSourceCodeAdded(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    const mainTarget = SDK.TargetManager.TargetManager.instance().mainTarget();\n    const inspectedURL = mainTarget && mainTarget.inspectedURL();\n    if (!inspectedURL) {\n      return;\n    }\n    if (uiSourceCode.url() === inspectedURL) {\n      this.revealUISourceCode(uiSourceCode, true);\n    }\n  }\n}\n\nlet filesNavigatorViewInstance: FilesNavigatorView;\n\nexport class FilesNavigatorView extends NavigatorView {\n  private constructor() {\n    super();\n    const placeholder = new UI.EmptyWidget.EmptyWidget('');\n    this.setPlaceholder(placeholder);\n    placeholder.appendParagraph().appendChild(UI.Fragment.html`\n  <div>${i18nString(UIStrings.syncChangesInDevtoolsWithThe)}</div><br />\n  ${\n        UI.XLink.XLink.create(\n            'https://developer.chrome.com/docs/devtools/workspaces/', i18nString(UIStrings.learnMoreAboutWorkspaces))}\n  `);\n\n    const toolbar = new UI.Toolbar.Toolbar('navigator-toolbar');\n    void toolbar.appendItemsAtLocation('files-navigator-toolbar').then(() => {\n      if (!toolbar.empty()) {\n        this.contentElement.insertBefore(toolbar.element, this.contentElement.firstChild);\n      }\n    });\n  }\n\n  static instance(): FilesNavigatorView {\n    if (!filesNavigatorViewInstance) {\n      filesNavigatorViewInstance = new FilesNavigatorView();\n    }\n    return filesNavigatorViewInstance;\n  }\n\n  acceptProject(project: Workspace.Workspace.Project): boolean {\n    return project.type() === Workspace.Workspace.projectTypes.FileSystem &&\n        Persistence.FileSystemWorkspaceBinding.FileSystemWorkspaceBinding.fileSystemType(project) !== 'overrides' &&\n        !Snippets.ScriptSnippetFileSystem.isSnippetsProject(project);\n  }\n\n  handleContextMenu(event: Event): void {\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    contextMenu.defaultSection().appendAction('sources.add-folder-to-workspace', undefined, true);\n    void contextMenu.show();\n  }\n}\n\nlet overridesNavigatorViewInstance: OverridesNavigatorView;\n\nexport class OverridesNavigatorView extends NavigatorView {\n  private readonly toolbar: UI.Toolbar.Toolbar;\n  private constructor() {\n    super();\n    const placeholder = new UI.EmptyWidget.EmptyWidget('');\n    this.setPlaceholder(placeholder);\n    placeholder.appendParagraph().appendChild(UI.Fragment.html`\n  <div>${i18nString(UIStrings.overridePageAssetsWithFilesFromA)}</div><br />\n  ${\n        UI.XLink.XLink.create(\n            'https://developers.google.com/web/updates/2018/01/devtools#overrides', i18nString(UIStrings.learnMore))}\n  `);\n\n    this.toolbar = new UI.Toolbar.Toolbar('navigator-toolbar');\n\n    this.contentElement.insertBefore(this.toolbar.element, this.contentElement.firstChild);\n\n    Persistence.NetworkPersistenceManager.NetworkPersistenceManager.instance().addEventListener(\n        Persistence.NetworkPersistenceManager.Events.ProjectChanged, this.updateProjectAndUI, this);\n    this.workspace().addEventListener(Workspace.Workspace.Events.ProjectAdded, this.onProjectAddOrRemoved, this);\n    this.workspace().addEventListener(Workspace.Workspace.Events.ProjectRemoved, this.onProjectAddOrRemoved, this);\n    this.updateProjectAndUI();\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): OverridesNavigatorView {\n    const {forceNew} = opts;\n    if (!overridesNavigatorViewInstance || forceNew) {\n      overridesNavigatorViewInstance = new OverridesNavigatorView();\n    }\n\n    return overridesNavigatorViewInstance;\n  }\n\n  private onProjectAddOrRemoved(event: Common.EventTarget.EventTargetEvent<Workspace.Workspace.Project>): void {\n    const project = event.data;\n    if (project && project.type() === Workspace.Workspace.projectTypes.FileSystem &&\n        Persistence.FileSystemWorkspaceBinding.FileSystemWorkspaceBinding.fileSystemType(project) !== 'overrides') {\n      return;\n    }\n    this.updateUI();\n  }\n\n  private updateProjectAndUI(): void {\n    this.reset();\n    const project = Persistence.NetworkPersistenceManager.NetworkPersistenceManager.instance().project();\n    if (project) {\n      this.tryAddProject(project);\n    }\n    this.updateUI();\n  }\n\n  private updateUI(): void {\n    this.toolbar.removeToolbarItems();\n    const project = Persistence.NetworkPersistenceManager.NetworkPersistenceManager.instance().project();\n    if (project) {\n      const enableCheckbox = new UI.Toolbar.ToolbarSettingCheckbox(\n          Common.Settings.Settings.instance().moduleSetting('persistenceNetworkOverridesEnabled'));\n      this.toolbar.appendToolbarItem(enableCheckbox);\n\n      this.toolbar.appendToolbarItem(new UI.Toolbar.ToolbarSeparator(true));\n      const clearButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.clearConfiguration), 'largeicon-clear');\n      clearButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, () => {\n        project.remove();\n      });\n      this.toolbar.appendToolbarItem(clearButton);\n      return;\n    }\n    const title = i18nString(UIStrings.selectFolderForOverrides);\n    const setupButton = new UI.Toolbar.ToolbarButton(title, 'largeicon-add', title);\n    setupButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, _event => {\n      void this.setupNewWorkspace();\n    }, this);\n    this.toolbar.appendToolbarItem(setupButton);\n  }\n\n  async setupNewWorkspace(): Promise<void> {\n    const fileSystem =\n        await Persistence.IsolatedFileSystemManager.IsolatedFileSystemManager.instance().addFileSystem('overrides');\n    if (!fileSystem) {\n      return;\n    }\n    Common.Settings.Settings.instance().moduleSetting('persistenceNetworkOverridesEnabled').set(true);\n  }\n\n  acceptProject(project: Workspace.Workspace.Project): boolean {\n    return project === Persistence.NetworkPersistenceManager.NetworkPersistenceManager.instance().project();\n  }\n}\n\nlet contentScriptsNavigatorViewInstance: ContentScriptsNavigatorView;\n\nexport class ContentScriptsNavigatorView extends NavigatorView {\n  private constructor() {\n    super();\n    const placeholder = new UI.EmptyWidget.EmptyWidget('');\n    this.setPlaceholder(placeholder);\n    placeholder.appendParagraph().appendChild(UI.Fragment.html`\n  <div>${i18nString(UIStrings.contentScriptsServedByExtensions)}</div><br />\n  ${UI.XLink.XLink.create('https://developer.chrome.com/extensions/content_scripts', i18nString(UIStrings.learnMore))}\n  `);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ContentScriptsNavigatorView {\n    const {forceNew} = opts;\n    if (!contentScriptsNavigatorViewInstance || forceNew) {\n      contentScriptsNavigatorViewInstance = new ContentScriptsNavigatorView();\n    }\n\n    return contentScriptsNavigatorViewInstance;\n  }\n\n  acceptProject(project: Workspace.Workspace.Project): boolean {\n    return project.type() === Workspace.Workspace.projectTypes.ContentScripts;\n  }\n}\n\nlet snippetsNavigatorViewInstance: SnippetsNavigatorView;\n\nexport class SnippetsNavigatorView extends NavigatorView {\n  constructor() {\n    super();\n    const placeholder = new UI.EmptyWidget.EmptyWidget('');\n    this.setPlaceholder(placeholder);\n    placeholder.appendParagraph().appendChild(UI.Fragment.html`\n  <div>${i18nString(UIStrings.createAndSaveCodeSnippetsFor)}</div><br />\n  ${\n        UI.XLink.XLink.create(\n            'https://developer.chrome.com/docs/devtools/javascript/snippets/', i18nString(UIStrings.learnMore))}\n  `);\n\n    const toolbar = new UI.Toolbar.Toolbar('navigator-toolbar');\n    const newButton = new UI.Toolbar.ToolbarButton(\n        i18nString(UIStrings.newSnippet), 'largeicon-add', i18nString(UIStrings.newSnippet));\n    newButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, _event => {\n      void this.create(\n          Snippets.ScriptSnippetFileSystem.findSnippetsProject(), '' as Platform.DevToolsPath.EncodedPathString);\n    });\n    toolbar.appendToolbarItem(newButton);\n    this.contentElement.insertBefore(toolbar.element, this.contentElement.firstChild);\n  }\n\n  static instance(): SnippetsNavigatorView {\n    if (!snippetsNavigatorViewInstance) {\n      snippetsNavigatorViewInstance = new SnippetsNavigatorView();\n    }\n    return snippetsNavigatorViewInstance;\n  }\n\n  acceptProject(project: Workspace.Workspace.Project): boolean {\n    return Snippets.ScriptSnippetFileSystem.isSnippetsProject(project);\n  }\n\n  handleContextMenu(event: Event): void {\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    contextMenu.headerSection().appendItem(\n        i18nString(UIStrings.createNewSnippet),\n        () => this.create(\n            Snippets.ScriptSnippetFileSystem.findSnippetsProject(), '' as Platform.DevToolsPath.EncodedPathString));\n    void contextMenu.show();\n  }\n\n  handleFileContextMenu(event: Event, node: NavigatorUISourceCodeTreeNode): void {\n    const uiSourceCode = node.uiSourceCode();\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    contextMenu.headerSection().appendItem(\n        i18nString(UIStrings.run), () => Snippets.ScriptSnippetFileSystem.evaluateScriptSnippet(uiSourceCode));\n    contextMenu.editSection().appendItem(i18nString(UIStrings.rename), () => this.rename(node, false));\n    contextMenu.editSection().appendItem(\n        i18nString(UIStrings.remove), () => uiSourceCode.project().deleteFile(uiSourceCode));\n    contextMenu.saveSection().appendItem(i18nString(UIStrings.saveAs), this.handleSaveAs.bind(this, uiSourceCode));\n    void contextMenu.show();\n  }\n\n  private async handleSaveAs(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    uiSourceCode.commitWorkingCopy();\n    const {content} = await uiSourceCode.requestContent();\n    void Workspace.FileManager.FileManager.instance().save(\n        this.addJSExtension(uiSourceCode.url()), content || '', true);\n    Workspace.FileManager.FileManager.instance().close(uiSourceCode.url());\n  }\n\n  private addJSExtension(url: Platform.DevToolsPath.UrlString): Platform.DevToolsPath.UrlString {\n    return Common.ParsedURL.ParsedURL.concatenate(url, '.js');\n  }\n}\n\nlet actionDelegateInstance: ActionDelegate;\n\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ActionDelegate {\n    const {forceNew} = opts;\n    if (!actionDelegateInstance || forceNew) {\n      actionDelegateInstance = new ActionDelegate();\n    }\n\n    return actionDelegateInstance;\n  }\n  handleAction(context: UI.Context.Context, actionId: string): boolean {\n    switch (actionId) {\n      case 'sources.create-snippet':\n        void Snippets.ScriptSnippetFileSystem.findSnippetsProject()\n            .createFile(Platform.DevToolsPath.EmptyEncodedPathString, null, '')\n            .then(uiSourceCode => Common.Revealer.reveal(uiSourceCode));\n        return true;\n      case 'sources.add-folder-to-workspace':\n        void Persistence.IsolatedFileSystemManager.IsolatedFileSystemManager.instance().addFileSystem();\n        return true;\n    }\n    return false;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
