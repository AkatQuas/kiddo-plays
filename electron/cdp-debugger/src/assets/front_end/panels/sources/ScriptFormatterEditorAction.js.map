{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/sources/ScriptFormatterEditorAction.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as FormatterModule from '../../models/formatter/formatter.js';\nimport * as Persistence from '../../models/persistence/persistence.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport * as SourceFrame from '../../ui/legacy/components/source_frame/source_frame.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type {EditorAction, EditorClosedEvent, SourcesView} from './SourcesView.js';\nimport {Events, registerEditorAction} from './SourcesView.js';\n\nconst UIStrings = {\n  /**\n  *@description Title of the pretty print button in the Sources panel\n  *@example {file name} PH1\n  */\n  prettyPrintS: 'Pretty print {PH1}',\n  /**\n  *@description Text to pretty print a file\n  */\n  prettyPrint: 'Pretty print',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/sources/ScriptFormatterEditorAction.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet scriptFormatterEditorActionInstance: ScriptFormatterEditorAction;\n\nexport class ScriptFormatterEditorAction implements EditorAction {\n  private readonly pathsToFormatOnLoad: Set<Platform.DevToolsPath.UrlString>;\n  private sourcesView!: SourcesView;\n  private button!: UI.Toolbar.ToolbarButton;\n  private constructor() {\n    this.pathsToFormatOnLoad = new Set();\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ScriptFormatterEditorAction {\n    const {forceNew} = opts;\n    if (!scriptFormatterEditorActionInstance || forceNew) {\n      scriptFormatterEditorActionInstance = new ScriptFormatterEditorAction();\n    }\n\n    return scriptFormatterEditorActionInstance;\n  }\n\n  private editorSelected(event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.UISourceCode>): void {\n    const uiSourceCode = event.data;\n    this.updateButton(uiSourceCode);\n\n    if (this.isFormattableScript(uiSourceCode) && this.pathsToFormatOnLoad.has(uiSourceCode.url()) &&\n        !FormatterModule.SourceFormatter.SourceFormatter.instance().hasFormatted(uiSourceCode)) {\n      void this.showFormatted(uiSourceCode);\n    }\n  }\n\n  private async editorClosed(event: Common.EventTarget.EventTargetEvent<EditorClosedEvent>): Promise<void> {\n    const {uiSourceCode, wasSelected} = event.data;\n\n    if (wasSelected) {\n      this.updateButton(null);\n    }\n    const original =\n        await FormatterModule.SourceFormatter.SourceFormatter.instance().discardFormattedUISourceCode(uiSourceCode);\n    if (original) {\n      this.pathsToFormatOnLoad.delete(original.url());\n    }\n  }\n\n  private updateButton(uiSourceCode: Workspace.UISourceCode.UISourceCode|null): void {\n    const isFormattable = this.isFormattableScript(uiSourceCode);\n    this.button.element.classList.toggle('hidden', !isFormattable);\n    if (uiSourceCode) {\n      // We always update the title of the button, even if the {uiSourceCode} is\n      // not formattable, since we use the title (the aria-label actually) as a\n      // signal for the E2E tests that the source code loading is done.\n      this.button.setTitle(i18nString(UIStrings.prettyPrintS, {PH1: uiSourceCode.name()}));\n    }\n  }\n\n  getOrCreateButton(sourcesView: SourcesView): UI.Toolbar.ToolbarButton {\n    if (this.button) {\n      return this.button;\n    }\n\n    this.sourcesView = sourcesView;\n    this.sourcesView.addEventListener(Events.EditorSelected, event => {\n      this.editorSelected(event);\n    });\n    this.sourcesView.addEventListener(Events.EditorClosed, event => {\n      void this.editorClosed(event);\n    });\n\n    this.button = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.prettyPrint), 'largeicon-pretty-print');\n    this.button.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.onFormatScriptButtonClicked, this);\n    this.updateButton(sourcesView.currentUISourceCode());\n\n    return this.button;\n  }\n\n  private isFormattableScript(uiSourceCode: Workspace.UISourceCode.UISourceCode|null): boolean {\n    if (!uiSourceCode) {\n      return false;\n    }\n    if (uiSourceCode.project().canSetFileContent()) {\n      return false;\n    }\n    if (uiSourceCode.project().type() === Workspace.Workspace.projectTypes.Formatter) {\n      return false;\n    }\n    if (Persistence.Persistence.PersistenceImpl.instance().binding(uiSourceCode)) {\n      return false;\n    }\n    if (uiSourceCode.mimeType() === 'application/wasm') {\n      return false;\n    }\n    return uiSourceCode.contentType().hasScripts();\n  }\n\n  isCurrentUISourceCodeFormattable(): boolean {\n    const uiSourceCode = this.sourcesView.currentUISourceCode();\n    return this.isFormattableScript(uiSourceCode);\n  }\n\n  private onFormatScriptButtonClicked(): void {\n    this.toggleFormatScriptSource();\n  }\n\n  toggleFormatScriptSource(): void {\n    const uiSourceCode = this.sourcesView.currentUISourceCode();\n    if (!uiSourceCode || !this.isFormattableScript(uiSourceCode)) {\n      return;\n    }\n    this.pathsToFormatOnLoad.add(uiSourceCode.url());\n    void this.showFormatted(uiSourceCode);\n  }\n\n  private async showFormatted(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    const formatData = await FormatterModule.SourceFormatter.SourceFormatter.instance().format(uiSourceCode);\n    if (uiSourceCode !== this.sourcesView.currentUISourceCode()) {\n      return;\n    }\n    const sourceFrame = this.sourcesView.viewForFile(uiSourceCode);\n    let start: number[]|number[] = [0, 0];\n    if (sourceFrame instanceof SourceFrame.SourceFrame.SourceFrameImpl) {\n      const selection = sourceFrame.textEditor.toLineColumn(sourceFrame.textEditor.state.selection.main.head);\n      start = formatData.mapping.originalToFormatted(selection.lineNumber, selection.columnNumber);\n    }\n    this.sourcesView.showSourceLocation(formatData.formattedSourceCode, {lineNumber: start[0], columnNumber: start[1]});\n  }\n}\n\nregisterEditorAction(ScriptFormatterEditorAction.instance);\n"],
  "mappings": "AAKA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA,MAAM,YAAY;AAAA,EAKhB,cAAc;AAAA,EAId,aAAa;AAAA;AAEf,MAAM,OAAO,KAAK,KAAK,kBAAkB,iDAAiD;AAC1F,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAEhE,IAAI;AAEG,yCAA0D;AAAA,EAC9C;AAAA,EACT;AAAA,EACA;AAAA,EACA,cAAc;AACpB,SAAK,sBAAsB,oBAAI;AAAA;AAAA,SAG1B,SAAS,OAEZ,EAAC,UAAU,QAAoC;AACjD,UAAM,EAAC,aAAY;AACnB,QAAI,CAAC,uCAAuC,UAAU;AACpD,4CAAsC,IAAI;AAAA;AAG5C,WAAO;AAAA;AAAA,EAGD,eAAe,OAAuF;AAC5G,UAAM,eAAe,MAAM;AAC3B,SAAK,aAAa;AAElB,QAAI,KAAK,oBAAoB,iBAAiB,KAAK,oBAAoB,IAAI,aAAa,UACpF,CAAC,gBAAgB,gBAAgB,gBAAgB,WAAW,aAAa,eAAe;AAC1F,WAAK,KAAK,cAAc;AAAA;AAAA;AAAA,QAId,aAAa,OAA8E;AACvG,UAAM,EAAC,cAAc,gBAAe,MAAM;AAE1C,QAAI,aAAa;AACf,WAAK,aAAa;AAAA;AAEpB,UAAM,WACF,MAAM,gBAAgB,gBAAgB,gBAAgB,WAAW,6BAA6B;AAClG,QAAI,UAAU;AACZ,WAAK,oBAAoB,OAAO,SAAS;AAAA;AAAA;AAAA,EAIrC,aAAa,cAA8D;AACjF,UAAM,gBAAgB,KAAK,oBAAoB;AAC/C,SAAK,OAAO,QAAQ,UAAU,OAAO,UAAU,CAAC;AAChD,QAAI,cAAc;AAIhB,WAAK,OAAO,SAAS,WAAW,UAAU,cAAc,EAAC,KAAK,aAAa;AAAA;AAAA;AAAA,EAI/E,kBAAkB,aAAoD;AACpE,QAAI,KAAK,QAAQ;AACf,aAAO,KAAK;AAAA;AAGd,SAAK,cAAc;AACnB,SAAK,YAAY,iBAAiB,OAAO,gBAAgB,WAAS;AAChE,WAAK,eAAe;AAAA;AAEtB,SAAK,YAAY,iBAAiB,OAAO,cAAc,WAAS;AAC9D,WAAK,KAAK,aAAa;AAAA;AAGzB,SAAK,SAAS,IAAI,GAAG,QAAQ,cAAc,WAAW,UAAU,cAAc;AAC9E,SAAK,OAAO,iBAAiB,GAAG,QAAQ,cAAc,OAAO,OAAO,KAAK,6BAA6B;AACtG,SAAK,aAAa,YAAY;AAE9B,WAAO,KAAK;AAAA;AAAA,EAGN,oBAAoB,cAAiE;AAC3F,QAAI,CAAC,cAAc;AACjB,aAAO;AAAA;AAET,QAAI,aAAa,UAAU,qBAAqB;AAC9C,aAAO;AAAA;AAET,QAAI,aAAa,UAAU,WAAW,UAAU,UAAU,aAAa,WAAW;AAChF,aAAO;AAAA;AAET,QAAI,YAAY,YAAY,gBAAgB,WAAW,QAAQ,eAAe;AAC5E,aAAO;AAAA;AAET,QAAI,aAAa,eAAe,oBAAoB;AAClD,aAAO;AAAA;AAET,WAAO,aAAa,cAAc;AAAA;AAAA,EAGpC,mCAA4C;AAC1C,UAAM,eAAe,KAAK,YAAY;AACtC,WAAO,KAAK,oBAAoB;AAAA;AAAA,EAG1B,8BAAoC;AAC1C,SAAK;AAAA;AAAA,EAGP,2BAAiC;AAC/B,UAAM,eAAe,KAAK,YAAY;AACtC,QAAI,CAAC,gBAAgB,CAAC,KAAK,oBAAoB,eAAe;AAC5D;AAAA;AAEF,SAAK,oBAAoB,IAAI,aAAa;AAC1C,SAAK,KAAK,cAAc;AAAA;AAAA,QAGZ,cAAc,cAAkE;AAC5F,UAAM,aAAa,MAAM,gBAAgB,gBAAgB,gBAAgB,WAAW,OAAO;AAC3F,QAAI,iBAAiB,KAAK,YAAY,uBAAuB;AAC3D;AAAA;AAEF,UAAM,cAAc,KAAK,YAAY,YAAY;AACjD,QAAI,QAA2B,CAAC,GAAG;AACnC,QAAI,uBAAuB,YAAY,YAAY,iBAAiB;AAClE,YAAM,YAAY,YAAY,WAAW,aAAa,YAAY,WAAW,MAAM,UAAU,KAAK;AAClG,cAAQ,WAAW,QAAQ,oBAAoB,UAAU,YAAY,UAAU;AAAA;AAEjF,SAAK,YAAY,mBAAmB,WAAW,qBAAqB,EAAC,YAAY,MAAM,IAAI,cAAc,MAAM;AAAA;AAAA;AAInH,qBAAqB,4BAA4B;",
  "names": []
}
