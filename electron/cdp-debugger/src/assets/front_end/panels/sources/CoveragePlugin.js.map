{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/sources/CoveragePlugin.ts"],
  "sourcesContent": ["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Formatter from '../../models/formatter/formatter.js';\nimport type * as Workspace from '../../models/workspace/workspace.js';\nimport * as CodeMirror from '../../third_party/codemirror.next/codemirror.next.js';\nimport * as SourceFrame from '../../ui/legacy/components/source_frame/source_frame.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport type * as TextEditor from '../../ui/components/text_editor/text_editor.js';\nimport * as Coverage from '../coverage/coverage.js';\n\nimport {Plugin} from './Plugin.js';\n\n// Plugin that shows a gutter with coverage information when available.\n\nconst UIStrings = {\n  /**\n  *@description Text for Coverage Status Bar Item in Sources Panel\n  */\n  clickToShowCoveragePanel: 'Click to show Coverage Panel',\n  /**\n  *@description Text for Coverage Status Bar Item in Sources Panel\n  */\n  showDetails: 'Show Details',\n  /**\n  *@description Text to show in the status bar if coverage data is available\n  *@example {12.3} PH1\n  */\n  coverageS: 'Coverage: {PH1}',\n  /**\n  *@description Text to be shown in the status bar if no coverage data is available\n  */\n  coverageNa: 'Coverage: n/a',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/sources/CoveragePlugin.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class CoveragePlugin extends Plugin {\n  private originalSourceCode: Workspace.UISourceCode.UISourceCode;\n  private infoInToolbar: UI.Toolbar.ToolbarButton;\n  private model: Coverage.CoverageModel.CoverageModel|null|undefined;\n  private coverage: Coverage.CoverageModel.URLCoverageInfo|null|undefined;\n\n  constructor(uiSourceCode: Workspace.UISourceCode.UISourceCode) {\n    super(uiSourceCode);\n    this.originalSourceCode =\n        Formatter.SourceFormatter.SourceFormatter.instance().getOriginalUISourceCode(this.uiSourceCode);\n    this.infoInToolbar = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.clickToShowCoveragePanel));\n    this.infoInToolbar.setSecondary();\n    this.infoInToolbar.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, () => {\n      void UI.ViewManager.ViewManager.instance().showView('coverage');\n    });\n\n    const mainTarget = SDK.TargetManager.TargetManager.instance().mainTarget();\n    if (mainTarget) {\n      this.model = mainTarget.model(Coverage.CoverageModel.CoverageModel);\n      if (this.model) {\n        this.model.addEventListener(Coverage.CoverageModel.Events.CoverageReset, this.handleReset, this);\n\n        this.coverage = this.model.getCoverageForUrl(this.originalSourceCode.url());\n        if (this.coverage) {\n          this.coverage.addEventListener(\n              Coverage.CoverageModel.URLCoverageInfo.Events.SizesChanged, this.handleCoverageSizesChanged, this);\n        }\n      }\n    }\n\n    this.updateStats();\n  }\n\n  dispose(): void {\n    if (this.coverage) {\n      this.coverage.removeEventListener(\n          Coverage.CoverageModel.URLCoverageInfo.Events.SizesChanged, this.handleCoverageSizesChanged, this);\n    }\n    if (this.model) {\n      this.model.removeEventListener(Coverage.CoverageModel.Events.CoverageReset, this.handleReset, this);\n    }\n  }\n\n  static accepts(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n    return uiSourceCode.contentType().isDocumentOrScriptOrStyleSheet();\n  }\n\n  private handleReset(): void {\n    this.coverage = null;\n    this.updateStats();\n  }\n\n  private handleCoverageSizesChanged(): void {\n    this.updateStats();\n  }\n\n  private updateStats(): void {\n    if (this.coverage) {\n      this.infoInToolbar.setTitle(i18nString(UIStrings.showDetails));\n      const formatter = new Intl.NumberFormat(i18n.DevToolsLocale.DevToolsLocale.instance().locale, {\n        style: 'percent',\n        maximumFractionDigits: 1,\n      });\n      this.infoInToolbar.setText(\n          i18nString(UIStrings.coverageS, {PH1: formatter.format(this.coverage.usedPercentage())}));\n    } else {\n      this.infoInToolbar.setTitle(i18nString(UIStrings.clickToShowCoveragePanel));\n      this.infoInToolbar.setText(i18nString(UIStrings.coverageNa));\n    }\n  }\n\n  async rightToolbarItems(): Promise<UI.Toolbar.ToolbarItem[]> {\n    return [this.infoInToolbar];\n  }\n\n  editorExtension(): CodeMirror.Extension {\n    return coverageCompartment.of([]);\n  }\n\n  private getCoverageManager(): Coverage.CoverageDecorationManager.CoverageDecorationManager|undefined {\n    return this.uiSourceCode.getDecorationData(SourceFrame.SourceFrame.DecoratorType.COVERAGE);\n  }\n\n  editorInitialized(editor: TextEditor.TextEditor.TextEditor): void {\n    if (this.getCoverageManager()) {\n      this.startDecoUpdate(editor);\n    }\n  }\n\n  decorationChanged(type: SourceFrame.SourceFrame.DecoratorType, editor: TextEditor.TextEditor.TextEditor): void {\n    if (type === SourceFrame.SourceFrame.DecoratorType.COVERAGE) {\n      this.startDecoUpdate(editor);\n    }\n  }\n\n  private startDecoUpdate(editor: TextEditor.TextEditor.TextEditor): void {\n    const manager = this.getCoverageManager();\n    void (manager ? manager.usageByLine(this.uiSourceCode) : Promise.resolve([])).then(usageByLine => {\n      const enabled = Boolean(editor.state.field(coverageState, false));\n      if (!usageByLine.length) {\n        if (enabled) {\n          editor.dispatch({effects: coverageCompartment.reconfigure([])});\n        }\n      } else if (!enabled) {\n        editor.dispatch({\n          effects: coverageCompartment.reconfigure([\n            coverageState.init(state => markersFromCoverageData(usageByLine, state)),\n            coverageGutter(this.uiSourceCode.url()),\n            theme,\n          ]),\n        });\n      } else {\n        editor.dispatch({effects: setCoverageState.of(usageByLine)});\n      }\n    });\n  }\n}\n\nconst coveredMarker = new (class extends CodeMirror.GutterMarker {\n  elementClass = 'cm-coverageUsed';\n})();\n\nconst notCoveredMarker = new (class extends CodeMirror.GutterMarker {\n  elementClass = 'cm-coverageUnused';\n})();\n\nfunction markersFromCoverageData(\n    usageByLine: (boolean|undefined)[], state: CodeMirror.EditorState): CodeMirror.RangeSet<CodeMirror.GutterMarker> {\n  const builder = new CodeMirror.RangeSetBuilder<CodeMirror.GutterMarker>();\n  for (let line = 0; line < usageByLine.length; line++) {\n    const usage = usageByLine[line];\n    if (usage !== undefined && line < state.doc.lines) {\n      const lineStart = state.doc.line(line + 1).from;\n      builder.add(lineStart, lineStart, usage ? coveredMarker : notCoveredMarker);\n    }\n  }\n  return builder.finish();\n}\n\nconst setCoverageState = CodeMirror.StateEffect.define<(boolean | undefined)[]>();\n\nconst coverageState = CodeMirror.StateField.define<CodeMirror.RangeSet<CodeMirror.GutterMarker>>({\n  create(): CodeMirror.RangeSet<CodeMirror.GutterMarker> {\n    return CodeMirror.RangeSet.empty;\n  },\n  update(markers, tr) {\n    return tr.effects.reduce((markers, effect) => {\n      return effect.is(setCoverageState) ? markersFromCoverageData(effect.value, tr.state) : markers;\n    }, markers.map(tr.changes));\n  },\n});\n\nfunction coverageGutter(url: Platform.DevToolsPath.UrlString): CodeMirror.Extension {\n  return CodeMirror.gutter({\n    markers: (view): CodeMirror.RangeSet<CodeMirror.GutterMarker> => view.state.field(coverageState),\n\n    domEventHandlers: {\n      click() {\n        void UI.ViewManager.ViewManager.instance()\n            .showView('coverage')\n            .then(() => {\n              const view = UI.ViewManager.ViewManager.instance().view('coverage');\n              return view && view.widget();\n            })\n            .then(widget => {\n              const matchFormattedSuffix = url.match(/(.*):formatted$/);\n              const urlWithoutFormattedSuffix = (matchFormattedSuffix && matchFormattedSuffix[1]) || url;\n              (widget as Coverage.CoverageView.CoverageView).selectCoverageItemByUrl(urlWithoutFormattedSuffix);\n            });\n        return true;\n      },\n    },\n\n    class: 'cm-coverageGutter',\n  });\n}\n\nconst coverageCompartment = new CodeMirror.Compartment();\n\nconst theme = CodeMirror.EditorView.baseTheme({\n  '.cm-coverageGutter': {\n    width: '5px',\n    marginLeft: '3px',\n  },\n  '.cm-coverageUnused': {\n    backgroundColor: 'var(--color-accent-red)',\n  },\n  '.cm-coverageUsed': {\n    backgroundColor: 'var(--color-coverage-used)',\n  },\n});\n"],
  "mappings": "AAIA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAIA,MAAM,YAAY;AAAA,EAIhB,0BAA0B;AAAA,EAI1B,aAAa;AAAA,EAKb,WAAW;AAAA,EAIX,YAAY;AAAA;AAEd,MAAM,OAAO,KAAK,KAAK,kBAAkB,oCAAoC;AAC7E,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAEzD,oCAA6B,OAAO;AAAA,EACjC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAER,YAAY,cAAmD;AAC7D,UAAM;AACN,SAAK,qBACD,UAAU,gBAAgB,gBAAgB,WAAW,wBAAwB,KAAK;AACtF,SAAK,gBAAgB,IAAI,GAAG,QAAQ,cAAc,WAAW,UAAU;AACvE,SAAK,cAAc;AACnB,SAAK,cAAc,iBAAiB,GAAG,QAAQ,cAAc,OAAO,OAAO,MAAM;AAC/E,WAAK,GAAG,YAAY,YAAY,WAAW,SAAS;AAAA;AAGtD,UAAM,aAAa,IAAI,cAAc,cAAc,WAAW;AAC9D,QAAI,YAAY;AACd,WAAK,QAAQ,WAAW,MAAM,SAAS,cAAc;AACrD,UAAI,KAAK,OAAO;AACd,aAAK,MAAM,iBAAiB,SAAS,cAAc,OAAO,eAAe,KAAK,aAAa;AAE3F,aAAK,WAAW,KAAK,MAAM,kBAAkB,KAAK,mBAAmB;AACrE,YAAI,KAAK,UAAU;AACjB,eAAK,SAAS,iBACV,SAAS,cAAc,gBAAgB,OAAO,cAAc,KAAK,4BAA4B;AAAA;AAAA;AAAA;AAKvG,SAAK;AAAA;AAAA,EAGP,UAAgB;AACd,QAAI,KAAK,UAAU;AACjB,WAAK,SAAS,oBACV,SAAS,cAAc,gBAAgB,OAAO,cAAc,KAAK,4BAA4B;AAAA;AAEnG,QAAI,KAAK,OAAO;AACd,WAAK,MAAM,oBAAoB,SAAS,cAAc,OAAO,eAAe,KAAK,aAAa;AAAA;AAAA;AAAA,SAI3F,QAAQ,cAA4D;AACzE,WAAO,aAAa,cAAc;AAAA;AAAA,EAG5B,cAAoB;AAC1B,SAAK,WAAW;AAChB,SAAK;AAAA;AAAA,EAGC,6BAAmC;AACzC,SAAK;AAAA;AAAA,EAGC,cAAoB;AAC1B,QAAI,KAAK,UAAU;AACjB,WAAK,cAAc,SAAS,WAAW,UAAU;AACjD,YAAM,YAAY,IAAI,KAAK,aAAa,KAAK,eAAe,eAAe,WAAW,QAAQ;AAAA,QAC5F,OAAO;AAAA,QACP,uBAAuB;AAAA;AAEzB,WAAK,cAAc,QACf,WAAW,UAAU,WAAW,EAAC,KAAK,UAAU,OAAO,KAAK,SAAS;AAAA,WACpE;AACL,WAAK,cAAc,SAAS,WAAW,UAAU;AACjD,WAAK,cAAc,QAAQ,WAAW,UAAU;AAAA;AAAA;AAAA,QAI9C,oBAAuD;AAC3D,WAAO,CAAC,KAAK;AAAA;AAAA,EAGf,kBAAwC;AACtC,WAAO,oBAAoB,GAAG;AAAA;AAAA,EAGxB,qBAA6F;AACnG,WAAO,KAAK,aAAa,kBAAkB,YAAY,YAAY,cAAc;AAAA;AAAA,EAGnF,kBAAkB,QAAgD;AAChE,QAAI,KAAK,sBAAsB;AAC7B,WAAK,gBAAgB;AAAA;AAAA;AAAA,EAIzB,kBAAkB,MAA6C,QAAgD;AAC7G,QAAI,SAAS,YAAY,YAAY,cAAc,UAAU;AAC3D,WAAK,gBAAgB;AAAA;AAAA;AAAA,EAIjB,gBAAgB,QAAgD;AACtE,UAAM,UAAU,KAAK;AACrB,SAAM,WAAU,QAAQ,YAAY,KAAK,gBAAgB,QAAQ,QAAQ,KAAK,KAAK,iBAAe;AAChG,YAAM,UAAU,QAAQ,OAAO,MAAM,MAAM,eAAe;AAC1D,UAAI,CAAC,YAAY,QAAQ;AACvB,YAAI,SAAS;AACX,iBAAO,SAAS,EAAC,SAAS,oBAAoB,YAAY;AAAA;AAAA,iBAEnD,CAAC,SAAS;AACnB,eAAO,SAAS;AAAA,UACd,SAAS,oBAAoB,YAAY;AAAA,YACvC,cAAc,KAAK,WAAS,wBAAwB,aAAa;AAAA,YACjE,eAAe,KAAK,aAAa;AAAA,YACjC;AAAA;AAAA;AAAA,aAGC;AACL,eAAO,SAAS,EAAC,SAAS,iBAAiB,GAAG;AAAA;AAAA;AAAA;AAAA;AAMtD,MAAM,gBAAgB,IAAK,cAAc,WAAW,aAAa;AAAA,EAC/D,eAAe;AAAA;AAGjB,MAAM,mBAAmB,IAAK,cAAc,WAAW,aAAa;AAAA,EAClE,eAAe;AAAA;AAGjB,iCACI,aAAoC,OAA6E;AACnH,QAAM,UAAU,IAAI,WAAW;AAC/B,WAAS,OAAO,GAAG,OAAO,YAAY,QAAQ,QAAQ;AACpD,UAAM,QAAQ,YAAY;AAC1B,QAAI,UAAU,UAAa,OAAO,MAAM,IAAI,OAAO;AACjD,YAAM,YAAY,MAAM,IAAI,KAAK,OAAO,GAAG;AAC3C,cAAQ,IAAI,WAAW,WAAW,QAAQ,gBAAgB;AAAA;AAAA;AAG9D,SAAO,QAAQ;AAAA;AAGjB,MAAM,mBAAmB,WAAW,YAAY;AAEhD,MAAM,gBAAgB,WAAW,WAAW,OAAqD;AAAA,EAC/F,SAAuD;AACrD,WAAO,WAAW,SAAS;AAAA;AAAA,EAE7B,OAAO,SAAS,IAAI;AAClB,WAAO,GAAG,QAAQ,OAAO,CAAC,UAAS,WAAW;AAC5C,aAAO,OAAO,GAAG,oBAAoB,wBAAwB,OAAO,OAAO,GAAG,SAAS;AAAA,OACtF,QAAQ,IAAI,GAAG;AAAA;AAAA;AAItB,wBAAwB,KAA4D;AAClF,SAAO,WAAW,OAAO;AAAA,IACvB,SAAS,CAAC,SAAuD,KAAK,MAAM,MAAM;AAAA,IAElF,kBAAkB;AAAA,MAChB,QAAQ;AACN,aAAK,GAAG,YAAY,YAAY,WAC3B,SAAS,YACT,KAAK,MAAM;AACV,gBAAM,OAAO,GAAG,YAAY,YAAY,WAAW,KAAK;AACxD,iBAAO,QAAQ,KAAK;AAAA,WAErB,KAAK,YAAU;AACd,gBAAM,uBAAuB,IAAI,MAAM;AACvC,gBAAM,4BAA6B,wBAAwB,qBAAqB,MAAO;AACvF,UAAC,OAA8C,wBAAwB;AAAA;AAE7E,eAAO;AAAA;AAAA;AAAA,IAIX,OAAO;AAAA;AAAA;AAIX,MAAM,sBAAsB,IAAI,WAAW;AAE3C,MAAM,QAAQ,WAAW,WAAW,UAAU;AAAA,EAC5C,sBAAsB;AAAA,IACpB,OAAO;AAAA,IACP,YAAY;AAAA;AAAA,EAEd,sBAAsB;AAAA,IACpB,iBAAiB;AAAA;AAAA,EAEnB,oBAAoB;AAAA,IAClB,iBAAiB;AAAA;AAAA;",
  "names": []
}
