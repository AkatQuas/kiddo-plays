{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/sources/NavigatorView.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as Persistence from '../../models/persistence/persistence.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Snippets from '../snippets/snippets.js';\n\nimport navigatorTreeStyles from './navigatorTree.css.js';\nimport navigatorViewStyles from './navigatorView.css.js';\nimport {SearchSourcesView} from './SearchSourcesView.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Navigator View of the Sources panel\n  */\n  searchInFolder: 'Search in folder',\n  /**\n  *@description Search label in Navigator View of the Sources panel\n  */\n  searchInAllFiles: 'Search in all files',\n  /**\n  *@description Text in Navigator View of the Sources panel\n  */\n  noDomain: '(no domain)',\n  /**\n  *@description Text in Navigator View of the Sources panel\n  */\n  authored: 'Authored',\n  /**\n  *@description Text in Navigator View of the Sources panel\n  */\n  authoredTooltip: 'Contains original sources',\n  /**\n  *@description Text in Navigator View of the Sources panel\n  */\n  deployed: 'Deployed',\n  /**\n  *@description Text in Navigator View of the Sources panel\n  */\n  deployedTooltip: 'Contains final sources the browser sees',\n  /**\n  *@description Text in Navigator View of the Sources panel\n  */\n  areYouSureYouWantToExcludeThis: 'Are you sure you want to exclude this folder?',\n  /**\n  *@description Text in Navigator View of the Sources panel\n  */\n  areYouSureYouWantToDeleteThis: 'Are you sure you want to delete this file?',\n  /**\n  *@description A context menu item in the Navigator View of the Sources panel\n  */\n  rename: 'Rename\u2026',\n  /**\n  *@description A context menu item in the Navigator View of the Sources panel\n  */\n  makeACopy: 'Make a copy\u2026',\n  /**\n  *@description Text to delete something\n  */\n  delete: 'Delete',\n  /**\n  *@description Text in Navigator View of the Sources panel\n  */\n  areYouSureYouWantToDeleteAll: 'Are you sure you want to delete all overrides contained in this folder?',\n  /**\n  *@description A context menu item in the Navigator View of the Sources panel\n  */\n  openFolder: 'Open folder',\n  /**\n  *@description A context menu item in the Navigator View of the Sources panel\n  */\n  newFile: 'New file',\n  /**\n  *@description A context menu item in the Navigator View of the Sources panel\n  */\n  excludeFolder: 'Exclude folder',\n  /**\n  *@description A context menu item in the Navigator View of the Sources panel\n  */\n  removeFolderFromWorkspace: 'Remove folder from workspace',\n  /**\n  *@description Text in Navigator View of the Sources panel\n  */\n  areYouSureYouWantToRemoveThis: 'Are you sure you want to remove this folder?',\n  /**\n  *@description A context menu item in the Navigator View of the Sources panel\n  */\n  deleteAllOverrides: 'Delete all overrides',\n  /**\n  *@description Name of an item from source map\n  *@example {compile.html} PH1\n  */\n  sFromSourceMap: '{PH1} (from source map)',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/sources/NavigatorView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport const Types = {\n  Authored: 'authored',\n  Deployed: 'deployed',\n  Domain: 'domain',\n  File: 'file',\n  FileSystem: 'fs',\n  FileSystemFolder: 'fs-folder',\n  Frame: 'frame',\n  NetworkFolder: 'nw-folder',\n  Root: 'root',\n  SourceMapFolder: 'sm-folder',\n  Worker: 'worker',\n};\n\nconst TYPE_ORDERS = new Map([\n  [Types.Root, 1],\n  [Types.Authored, 1],\n  [Types.Deployed, 5],\n  [Types.Domain, 10],\n  [Types.FileSystemFolder, 1],\n  [Types.NetworkFolder, 1],\n  [Types.SourceMapFolder, 2],\n  [Types.File, 10],\n  [Types.Frame, 70],\n  [Types.Worker, 90],\n  [Types.FileSystem, 100],\n]);\n\nexport class NavigatorView extends UI.Widget.VBox implements SDK.TargetManager.Observer {\n  private placeholder: UI.Widget.Widget|null;\n  scriptsTree: UI.TreeOutline.TreeOutlineInShadow;\n  private readonly uiSourceCodeNodes:\n      Platform.MapUtilities.Multimap<Workspace.UISourceCode.UISourceCode, NavigatorUISourceCodeTreeNode>;\n  private readonly subfolderNodes: Map<string, NavigatorFolderTreeNode>;\n  private readonly rootNode: NavigatorRootTreeNode;\n  private readonly frameNodes: Map<SDK.ResourceTreeModel.ResourceTreeFrame, NavigatorGroupTreeNode>;\n  private authoredNode?: NavigatorGroupTreeNode;\n  private deployedNode?: NavigatorGroupTreeNode;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private navigatorGroupByFolderSetting: Common.Settings.Setting<any>;\n  private navigatorGroupByAuthoredExperiment?: string;\n  private workspaceInternal!: Workspace.Workspace.WorkspaceImpl;\n  private lastSelectedUISourceCode?: Workspace.UISourceCode.UISourceCode;\n  private groupByFrame?: boolean;\n  private groupByAuthored?: boolean;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private groupByDomain?: any;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private groupByFolder?: any;\n  constructor(enableAuthoredGrouping?: boolean) {\n    super(true);\n\n    this.placeholder = null;\n    this.scriptsTree = new UI.TreeOutline.TreeOutlineInShadow();\n\n    this.scriptsTree.setComparator(NavigatorView.treeElementsCompare);\n    this.scriptsTree.setFocusable(false);\n    this.contentElement.appendChild(this.scriptsTree.element);\n    this.setDefaultFocusedElement(this.scriptsTree.element);\n\n    this.uiSourceCodeNodes = new Platform.MapUtilities.Multimap();\n    this.subfolderNodes = new Map();\n\n    this.rootNode = new NavigatorRootTreeNode(this);\n    this.rootNode.populate();\n\n    this.frameNodes = new Map();\n\n    this.contentElement.addEventListener('contextmenu', this.handleContextMenu.bind(this), false);\n    UI.ShortcutRegistry.ShortcutRegistry.instance().addShortcutListener(\n        this.contentElement, {'sources.rename': this.renameShortcut.bind(this)});\n\n    this.navigatorGroupByFolderSetting = Common.Settings.Settings.instance().moduleSetting('navigatorGroupByFolder');\n    this.navigatorGroupByFolderSetting.addChangeListener(this.groupingChanged.bind(this));\n    if (enableAuthoredGrouping) {\n      this.navigatorGroupByAuthoredExperiment = Root.Runtime.ExperimentName.AUTHORED_DEPLOYED_GROUPING;\n    }\n\n    this.initGrouping();\n\n    Persistence.Persistence.PersistenceImpl.instance().addEventListener(\n        Persistence.Persistence.Events.BindingCreated, this.onBindingChanged, this);\n    Persistence.Persistence.PersistenceImpl.instance().addEventListener(\n        Persistence.Persistence.Events.BindingRemoved, this.onBindingChanged, this);\n    SDK.TargetManager.TargetManager.instance().addEventListener(\n        SDK.TargetManager.Events.NameChanged, this.targetNameChanged, this);\n\n    SDK.TargetManager.TargetManager.instance().observeTargets(this);\n    this.resetWorkspace(Workspace.Workspace.WorkspaceImpl.instance());\n    this.workspaceInternal.uiSourceCodes().forEach(this.addUISourceCode.bind(this));\n    Bindings.NetworkProject.NetworkProjectManager.instance().addEventListener(\n        Bindings.NetworkProject.Events.FrameAttributionAdded, this.frameAttributionAdded, this);\n    Bindings.NetworkProject.NetworkProjectManager.instance().addEventListener(\n        Bindings.NetworkProject.Events.FrameAttributionRemoved, this.frameAttributionRemoved, this);\n  }\n\n  private static treeElementOrder(treeElement: UI.TreeOutline.TreeElement): number {\n    if (boostOrderForNode.has(treeElement)) {\n      return 0;\n    }\n\n    const actualElement = (treeElement as NavigatorSourceTreeElement);\n\n    let order = TYPE_ORDERS.get(actualElement.nodeType) || 0;\n    if (actualElement.uiSourceCode) {\n      const contentType = actualElement.uiSourceCode.contentType();\n      if (contentType.isDocument()) {\n        order += 3;\n      } else if (contentType.isScript()) {\n        order += 5;\n      } else if (contentType.isStyleSheet()) {\n        order += 10;\n      } else {\n        order += 15;\n      }\n    }\n\n    return order;\n  }\n\n  static appendSearchItem(contextMenu: UI.ContextMenu.ContextMenu, path?: Platform.DevToolsPath.EncodedPathString):\n      void {\n    let searchLabel = i18nString(UIStrings.searchInFolder);\n    if (!path || !path.trim()) {\n      path = '*' as Platform.DevToolsPath.EncodedPathString;\n      searchLabel = i18nString(UIStrings.searchInAllFiles);\n    }\n    contextMenu.viewSection().appendItem(searchLabel, () => {\n      if (path) {\n        void SearchSourcesView.openSearch(`file:${path.trim()}`);\n      }\n    });\n  }\n\n  private static treeElementsCompare(\n      treeElement1: UI.TreeOutline.TreeElement, treeElement2: UI.TreeOutline.TreeElement): number {\n    const typeWeight1 = NavigatorView.treeElementOrder(treeElement1);\n    const typeWeight2 = NavigatorView.treeElementOrder(treeElement2);\n\n    if (typeWeight1 > typeWeight2) {\n      return 1;\n    }\n    if (typeWeight1 < typeWeight2) {\n      return -1;\n    }\n    return Platform.StringUtilities.naturalOrderComparator(treeElement1.titleAsText(), treeElement2.titleAsText());\n  }\n\n  setPlaceholder(placeholder: UI.Widget.Widget): void {\n    console.assert(!this.placeholder, 'A placeholder widget was already set');\n    this.placeholder = placeholder;\n    placeholder.show(this.contentElement, this.contentElement.firstChild);\n    updateVisibility.call(this);\n    this.scriptsTree.addEventListener(UI.TreeOutline.Events.ElementAttached, updateVisibility.bind(this));\n    this.scriptsTree.addEventListener(UI.TreeOutline.Events.ElementsDetached, updateVisibility.bind(this));\n\n    function updateVisibility(this: NavigatorView): void {\n      const showTree = this.scriptsTree.firstChild();\n      if (showTree) {\n        placeholder.hideWidget();\n      } else {\n        placeholder.showWidget();\n      }\n      this.scriptsTree.element.classList.toggle('hidden', !showTree);\n    }\n  }\n\n  private onBindingChanged(event: Common.EventTarget.EventTargetEvent<Persistence.Persistence.PersistenceBinding>):\n      void {\n    const binding = event.data;\n\n    let isFromSourceMap = false;\n    // Update UISourceCode titles.\n    const networkNodes = this.uiSourceCodeNodes.get(binding.network);\n    for (const networkNode of networkNodes) {\n      networkNode.updateTitle();\n      isFromSourceMap ||= networkNode.uiSourceCode().contentType().isFromSourceMap();\n    }\n    const fileSystemNodes = this.uiSourceCodeNodes.get(binding.fileSystem);\n    for (const fileSystemNode of fileSystemNodes) {\n      fileSystemNode.updateTitle();\n      isFromSourceMap ||= fileSystemNode.uiSourceCode().contentType().isFromSourceMap();\n    }\n\n    // Update folder titles.\n    const pathTokens =\n        Persistence.FileSystemWorkspaceBinding.FileSystemWorkspaceBinding.relativePath(binding.fileSystem);\n    let folderPath = Platform.DevToolsPath.EmptyEncodedPathString;\n    for (let i = 0; i < pathTokens.length - 1; ++i) {\n      folderPath = Common.ParsedURL.ParsedURL.concatenate(folderPath, pathTokens[i]);\n      const folderId = this.folderNodeId(\n          binding.fileSystem.project(), null, null, binding.fileSystem.origin(), isFromSourceMap, folderPath);\n      const folderNode = this.subfolderNodes.get(folderId);\n      if (folderNode) {\n        folderNode.updateTitle();\n      }\n      folderPath = Common.ParsedURL.ParsedURL.concatenate(folderPath, '/');\n    }\n\n    // Update fileSystem root title.\n    const fileSystemRoot = this.rootOrDeployedNode().child(binding.fileSystem.project().id());\n    if (fileSystemRoot) {\n      fileSystemRoot.updateTitle();\n    }\n  }\n\n  focus(): void {\n    this.scriptsTree.focus();\n  }\n\n  /**\n   * Central place to add elements to the tree to\n   * enable focus if the tree has elements\n   */\n  appendChild(parent: UI.TreeOutline.TreeElement, child: UI.TreeOutline.TreeElement): void {\n    this.scriptsTree.setFocusable(true);\n    parent.appendChild(child);\n  }\n\n  /**\n   * Central place to remove elements from the tree to\n   * disable focus if the tree is empty\n   */\n  removeChild(parent: UI.TreeOutline.TreeElement, child: UI.TreeOutline.TreeElement): void {\n    parent.removeChild(child);\n    if (this.scriptsTree.rootElement().childCount() === 0) {\n      this.scriptsTree.setFocusable(false);\n    }\n  }\n\n  private resetWorkspace(workspace: Workspace.Workspace.WorkspaceImpl): void {\n    // Clear old event listeners first.\n    if (this.workspaceInternal) {\n      this.workspaceInternal.removeEventListener(\n          Workspace.Workspace.Events.UISourceCodeAdded, this.uiSourceCodeAddedCallback, this);\n      this.workspaceInternal.removeEventListener(\n          Workspace.Workspace.Events.UISourceCodeRemoved, this.uiSourceCodeRemovedCallback, this);\n      this.workspaceInternal.removeEventListener(\n          Workspace.Workspace.Events.ProjectAdded, this.projectAddedCallback, this);\n      this.workspaceInternal.removeEventListener(\n          Workspace.Workspace.Events.ProjectRemoved, this.projectRemovedCallback, this);\n    }\n\n    this.workspaceInternal = workspace;\n    this.workspaceInternal.addEventListener(\n        Workspace.Workspace.Events.UISourceCodeAdded, this.uiSourceCodeAddedCallback, this);\n    this.workspaceInternal.addEventListener(\n        Workspace.Workspace.Events.UISourceCodeRemoved, this.uiSourceCodeRemovedCallback, this);\n    this.workspaceInternal.addEventListener(Workspace.Workspace.Events.ProjectAdded, this.projectAddedCallback, this);\n    this.workspaceInternal.addEventListener(\n        Workspace.Workspace.Events.ProjectRemoved, this.projectRemovedCallback, this);\n    this.workspaceInternal.projects().forEach(this.projectAdded.bind(this));\n    this.computeUniqueFileSystemProjectNames();\n  }\n\n  private projectAddedCallback(event: Common.EventTarget.EventTargetEvent<Workspace.Workspace.Project>): void {\n    const project = event.data;\n    this.projectAdded(project);\n    if (project.type() === Workspace.Workspace.projectTypes.FileSystem) {\n      this.computeUniqueFileSystemProjectNames();\n    }\n  }\n\n  private projectRemovedCallback(event: Common.EventTarget.EventTargetEvent<Workspace.Workspace.Project>): void {\n    const project = event.data;\n    this.removeProject(project);\n    if (project.type() === Workspace.Workspace.projectTypes.FileSystem) {\n      this.computeUniqueFileSystemProjectNames();\n    }\n  }\n\n  workspace(): Workspace.Workspace.WorkspaceImpl {\n    return this.workspaceInternal;\n  }\n\n  acceptProject(project: Workspace.Workspace.Project): boolean {\n    return !project.isServiceProject();\n  }\n\n  private frameAttributionAdded(\n      event: Common.EventTarget.EventTargetEvent<Bindings.NetworkProject.FrameAttributionEvent>): void {\n    const {uiSourceCode} = event.data;\n    if (!this.acceptsUISourceCode(uiSourceCode)) {\n      return;\n    }\n\n    const addedFrame = (event.data.frame as SDK.ResourceTreeModel.ResourceTreeFrame | null);\n    // This event does not happen for UISourceCodes without initial attribution.\n    this.addUISourceCodeNode(uiSourceCode, addedFrame);\n  }\n\n  private frameAttributionRemoved(\n      event: Common.EventTarget.EventTargetEvent<Bindings.NetworkProject.FrameAttributionEvent>): void {\n    const {uiSourceCode} = event.data;\n    if (!this.acceptsUISourceCode(uiSourceCode)) {\n      return;\n    }\n\n    const removedFrame = (event.data.frame as SDK.ResourceTreeModel.ResourceTreeFrame | null);\n    const node = Array.from(this.uiSourceCodeNodes.get(uiSourceCode)).find(node => node.frame() === removedFrame);\n    if (node) {\n      this.removeUISourceCodeNode(node);\n    }\n  }\n\n  private acceptsUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n    return this.acceptProject(uiSourceCode.project());\n  }\n\n  private addUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    if (!this.acceptsUISourceCode(uiSourceCode)) {\n      return;\n    }\n\n    const frames = Bindings.NetworkProject.NetworkProject.framesForUISourceCode(uiSourceCode);\n    if (frames.length) {\n      for (const frame of frames) {\n        this.addUISourceCodeNode(uiSourceCode, frame);\n      }\n    } else {\n      this.addUISourceCodeNode(uiSourceCode, null);\n    }\n    this.uiSourceCodeAdded(uiSourceCode);\n  }\n\n  private addUISourceCodeNode(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, frame: SDK.ResourceTreeModel.ResourceTreeFrame|null): void {\n    const isFromSourceMap = uiSourceCode.contentType().isFromSourceMap();\n    let path;\n    if (uiSourceCode.project().type() === Workspace.Workspace.projectTypes.FileSystem) {\n      path =\n          Persistence.FileSystemWorkspaceBinding.FileSystemWorkspaceBinding.relativePath(uiSourceCode).slice(0, -1) as\n          Platform.DevToolsPath.EncodedPathString[];\n    } else {\n      path = Common.ParsedURL.ParsedURL.extractPath(uiSourceCode.url()).split('/').slice(1, -1) as\n          Platform.DevToolsPath.EncodedPathString[];\n    }\n\n    const project = uiSourceCode.project();\n    const target = Bindings.NetworkProject.NetworkProject.targetForUISourceCode(uiSourceCode);\n    const folderNode =\n        this.folderNode(uiSourceCode, project, target, frame, uiSourceCode.origin(), path, isFromSourceMap);\n    const uiSourceCodeNode = new NavigatorUISourceCodeTreeNode(this, uiSourceCode, frame);\n    const existingNode = folderNode.child(uiSourceCodeNode.id);\n    if (existingNode && existingNode instanceof NavigatorUISourceCodeTreeNode) {\n      this.uiSourceCodeNodes.set(uiSourceCode, existingNode);\n    } else {\n      folderNode.appendChild(uiSourceCodeNode);\n      this.uiSourceCodeNodes.set(uiSourceCode, uiSourceCodeNode);\n    }\n    this.selectDefaultTreeNode();\n  }\n\n  uiSourceCodeAdded(_uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n  }\n\n  private uiSourceCodeAddedCallback(event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.UISourceCode>):\n      void {\n    const uiSourceCode = event.data;\n    this.addUISourceCode(uiSourceCode);\n  }\n\n  private uiSourceCodeRemovedCallback(event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.UISourceCode>):\n      void {\n    const uiSourceCode = event.data;\n    this.removeUISourceCode(uiSourceCode);\n  }\n\n  tryAddProject(project: Workspace.Workspace.Project): void {\n    this.projectAdded(project);\n    project.uiSourceCodes().forEach(this.addUISourceCode.bind(this));\n  }\n\n  private projectAdded(project: Workspace.Workspace.Project): void {\n    const rootOrDeployed = this.rootOrDeployedNode();\n    if (!this.acceptProject(project) || project.type() !== Workspace.Workspace.projectTypes.FileSystem ||\n        Snippets.ScriptSnippetFileSystem.isSnippetsProject(project) || rootOrDeployed.child(project.id())) {\n      return;\n    }\n    rootOrDeployed.appendChild(\n        new NavigatorGroupTreeNode(this, project, project.id(), Types.FileSystem, project.displayName()));\n    this.selectDefaultTreeNode();\n  }\n\n  // TODO(einbinder) remove this code after crbug.com/964075 is fixed\n  private selectDefaultTreeNode(): void {\n    const children = this.rootNode.children();\n    if (children.length && !this.scriptsTree.selectedTreeElement) {\n      children[0].treeNode().select(true /* omitFocus */, false /* selectedByUser */);\n    }\n  }\n\n  private computeUniqueFileSystemProjectNames(): void {\n    const fileSystemProjects = this.workspaceInternal.projectsForType(Workspace.Workspace.projectTypes.FileSystem);\n    if (!fileSystemProjects.length) {\n      return;\n    }\n    const encoder = new Persistence.Persistence.PathEncoder();\n    const reversedPaths = fileSystemProjects.map(project => {\n      const fileSystem = (project as Persistence.FileSystemWorkspaceBinding.FileSystem);\n      return Platform.StringUtilities.reverse(encoder.encode(fileSystem.fileSystemPath()));\n    });\n    const reversedIndex = new Common.Trie.Trie();\n    for (const reversedPath of reversedPaths) {\n      reversedIndex.add(reversedPath);\n    }\n\n    const rootOrDeployed = this.rootOrDeployedNode();\n\n    for (let i = 0; i < fileSystemProjects.length; ++i) {\n      const reversedPath = reversedPaths[i];\n      const project = fileSystemProjects[i];\n      reversedIndex.remove(reversedPath);\n      const commonPrefix = reversedIndex.longestPrefix(reversedPath, false /* fullWordOnly */);\n      reversedIndex.add(reversedPath);\n      const prefixPath = reversedPath.substring(0, commonPrefix.length + 1);\n      const path = Common.ParsedURL.ParsedURL.encodedPathToRawPathString(\n          encoder.decode(Platform.StringUtilities.reverse(prefixPath)) as Platform.DevToolsPath.EncodedPathString);\n\n      const fileSystemNode = rootOrDeployed.child(project.id());\n      if (fileSystemNode) {\n        fileSystemNode.setTitle(path);\n      }\n    }\n  }\n\n  private removeProject(project: Workspace.Workspace.Project): void {\n    const uiSourceCodes = project.uiSourceCodes();\n    for (let i = 0; i < uiSourceCodes.length; ++i) {\n      this.removeUISourceCode(uiSourceCodes[i]);\n    }\n    if (project.type() !== Workspace.Workspace.projectTypes.FileSystem) {\n      return;\n    }\n    const fileSystemNode = this.rootNode.child(project.id());\n    if (!fileSystemNode) {\n      return;\n    }\n    this.rootNode.removeChild(fileSystemNode);\n  }\n\n  private folderNodeId(\n      project: Workspace.Workspace.Project, target: SDK.Target.Target|null,\n      frame: SDK.ResourceTreeModel.ResourceTreeFrame|null, projectOrigin: string, isFromSourceMap: boolean,\n      path: Platform.DevToolsPath.EncodedPathString): string {\n    let targetId = target && !(this.groupByAuthored && isFromSourceMap) ? target.id() : '';\n    const projectId = project.type() === Workspace.Workspace.projectTypes.FileSystem ? project.id() : '';\n    if (this.groupByAuthored) {\n      targetId = isFromSourceMap ? 'Authored' : 'Deployed:' + targetId;\n    }\n    const frameId = this.groupByFrame && frame ? frame.id : '';\n    return targetId + ':' + projectId + ':' + frameId + ':' + projectOrigin + ':' + path;\n  }\n\n  private folderNode(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, project: Workspace.Workspace.Project,\n      target: SDK.Target.Target|null, frame: SDK.ResourceTreeModel.ResourceTreeFrame|null, projectOrigin: string,\n      path: Platform.DevToolsPath.EncodedPathString[], fromSourceMap: boolean): NavigatorTreeNode {\n    if (Snippets.ScriptSnippetFileSystem.isSnippetsUISourceCode(uiSourceCode)) {\n      return this.rootNode;\n    }\n\n    if (target && !this.groupByFolder && !fromSourceMap) {\n      return this.domainNode(uiSourceCode, project, target, frame, projectOrigin);\n    }\n\n    const folderPath = Common.ParsedURL.ParsedURL.join(path, '/');\n    const folderId = this.folderNodeId(project, target, frame, projectOrigin, fromSourceMap, folderPath);\n    let folderNode = this.subfolderNodes.get(folderId);\n    if (folderNode) {\n      return folderNode;\n    }\n\n    if (!path.length) {\n      if (target) {\n        return this.domainNode(uiSourceCode, project, target, frame, projectOrigin);\n      }\n      return this.rootOrDeployedNode().child(project.id()) as NavigatorTreeNode;\n    }\n\n    const parentNode =\n        this.folderNode(uiSourceCode, project, target, frame, projectOrigin, path.slice(0, -1), fromSourceMap);\n    let type: string = fromSourceMap ? Types.SourceMapFolder : Types.NetworkFolder;\n    if (project.type() === Workspace.Workspace.projectTypes.FileSystem) {\n      type = Types.FileSystemFolder;\n    }\n    const name = Common.ParsedURL.ParsedURL.encodedPathToRawPathString(path[path.length - 1]);\n\n    folderNode = new NavigatorFolderTreeNode(this, project, folderId, type, folderPath, name);\n    this.subfolderNodes.set(folderId, folderNode);\n    parentNode.appendChild(folderNode);\n    return folderNode;\n  }\n\n  private domainNode(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, project: Workspace.Workspace.Project,\n      target: SDK.Target.Target, frame: SDK.ResourceTreeModel.ResourceTreeFrame|null,\n      projectOrigin: string): NavigatorTreeNode {\n    const isAuthored = uiSourceCode.contentType().isFromSourceMap();\n    const frameNode = this.frameNode(project, target, frame, isAuthored);\n    if (!this.groupByDomain) {\n      return frameNode;\n    }\n    let domainNode = frameNode.child(projectOrigin);\n    if (domainNode) {\n      return domainNode;\n    }\n\n    domainNode = new NavigatorGroupTreeNode(\n        this, project, projectOrigin, Types.Domain, this.computeProjectDisplayName(target, projectOrigin));\n    if (frame && projectOrigin === Common.ParsedURL.ParsedURL.extractOrigin(frame.url)) {\n      boostOrderForNode.add(domainNode.treeNode());\n    }\n    frameNode.appendChild(domainNode);\n    if (isAuthored && this.groupByAuthored) {\n      domainNode.treeNode().expand();\n    }\n    return domainNode;\n  }\n\n  private frameNode(\n      project: Workspace.Workspace.Project, target: SDK.Target.Target,\n      frame: SDK.ResourceTreeModel.ResourceTreeFrame|null, isAuthored: boolean): NavigatorTreeNode {\n    if (!this.groupByFrame || !frame || (this.groupByAuthored && isAuthored)) {\n      return this.targetNode(project, target, isAuthored);\n    }\n\n    let frameNode = this.frameNodes.get(frame);\n    if (frameNode) {\n      return frameNode;\n    }\n\n    frameNode =\n        new NavigatorGroupTreeNode(this, project, target.id() + ':' + frame.id, Types.Frame, frame.displayName());\n    frameNode.setHoverCallback(hoverCallback);\n    this.frameNodes.set(frame, frameNode);\n\n    const parentFrame = frame.parentFrame();\n    this.frameNode(project, parentFrame ? parentFrame.resourceTreeModel().target() : target, parentFrame, isAuthored)\n        .appendChild(frameNode);\n    if (!parentFrame) {\n      boostOrderForNode.add(frameNode.treeNode());\n      frameNode.treeNode().expand();\n    }\n\n    function hoverCallback(hovered: boolean): void {\n      if (hovered) {\n        const overlayModel = target.model(SDK.OverlayModel.OverlayModel);\n        if (overlayModel && frame) {\n          overlayModel.highlightFrame(frame.id);\n        }\n      } else {\n        SDK.OverlayModel.OverlayModel.hideDOMNodeHighlight();\n      }\n    }\n    return frameNode;\n  }\n\n  private targetNode(project: Workspace.Workspace.Project, target: SDK.Target.Target, isAuthored: boolean):\n      NavigatorTreeNode {\n    if (this.groupByAuthored && isAuthored) {\n      if (!this.authoredNode) {\n        this.authoredNode = new NavigatorGroupTreeNode(\n            this, null, 'group:Authored', Types.Authored, i18nString(UIStrings.authored),\n            i18nString(UIStrings.authoredTooltip));\n        this.rootNode.appendChild(this.authoredNode);\n        this.authoredNode.treeNode().expand();\n      }\n      return this.authoredNode;\n    }\n\n    const rootOrDeployed = this.rootOrDeployedNode();\n    if (target === SDK.TargetManager.TargetManager.instance().mainTarget()) {\n      return rootOrDeployed;\n    }\n\n    let targetNode = rootOrDeployed.child('target:' + target.id());\n    if (!targetNode) {\n      targetNode = new NavigatorGroupTreeNode(\n          this, project, 'target:' + target.id(), target.type() === SDK.Target.Type.Frame ? Types.Frame : Types.Worker,\n          target.name());\n      rootOrDeployed.appendChild(targetNode);\n    }\n    return targetNode;\n  }\n\n  private rootOrDeployedNode(): NavigatorTreeNode {\n    if (this.groupByAuthored) {\n      if (!this.deployedNode) {\n        this.deployedNode = new NavigatorGroupTreeNode(\n            this, null, 'group:Deployed', Types.Deployed, i18nString(UIStrings.deployed),\n            i18nString(UIStrings.deployedTooltip));\n        this.rootNode.appendChild(this.deployedNode);\n      }\n      return this.deployedNode;\n    }\n    return this.rootNode;\n  }\n\n  private computeProjectDisplayName(target: SDK.Target.Target, projectOrigin: string): string {\n    const runtimeModel = target.model(SDK.RuntimeModel.RuntimeModel);\n    const executionContexts = runtimeModel ? runtimeModel.executionContexts() : [];\n    for (const context of executionContexts) {\n      if (context.name && context.origin && projectOrigin.startsWith(context.origin)) {\n        return context.name;\n      }\n    }\n\n    if (!projectOrigin) {\n      return i18nString(UIStrings.noDomain);\n    }\n\n    const parsedURL = new Common.ParsedURL.ParsedURL(projectOrigin);\n    const prettyURL = parsedURL.isValid ? parsedURL.host + (parsedURL.port ? (':' + parsedURL.port) : '') : '';\n\n    return (prettyURL || projectOrigin);\n  }\n\n  revealUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode, select?: boolean): NavigatorUISourceCodeTreeNode\n      |null {\n    const nodes = this.uiSourceCodeNodes.get(uiSourceCode);\n    if (nodes.size === 0) {\n      return null;\n    }\n    const node = nodes.values().next().value;\n    if (!node) {\n      return null;\n    }\n    if (this.scriptsTree.selectedTreeElement) {\n      this.scriptsTree.selectedTreeElement.deselect();\n    }\n    this.lastSelectedUISourceCode = uiSourceCode;\n    // TODO(dgozman): figure out revealing multiple.\n    node.reveal(select);\n    return node;\n  }\n\n  sourceSelected(uiSourceCode: Workspace.UISourceCode.UISourceCode, focusSource: boolean): void {\n    this.lastSelectedUISourceCode = uiSourceCode;\n    void Common.Revealer.reveal(uiSourceCode, !focusSource);\n  }\n\n  private removeUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    const nodes = this.uiSourceCodeNodes.get(uiSourceCode);\n    for (const node of nodes) {\n      this.removeUISourceCodeNode(node);\n    }\n  }\n\n  private removeUISourceCodeNode(node: NavigatorUISourceCodeTreeNode): void {\n    const uiSourceCode = node.uiSourceCode();\n    this.uiSourceCodeNodes.delete(uiSourceCode, node);\n    const project = uiSourceCode.project();\n    const target = Bindings.NetworkProject.NetworkProject.targetForUISourceCode(uiSourceCode);\n    const frame = node.frame();\n\n    let parentNode: (NavigatorTreeNode|null) = node.parent;\n    if (!parentNode) {\n      return;\n    }\n    parentNode.removeChild(node);\n    let currentNode: (NavigatorTreeNode|null) = parentNode;\n\n    while (currentNode) {\n      parentNode = currentNode.parent;\n      if (!parentNode || !currentNode.isEmpty()) {\n        break;\n      }\n      if ((parentNode === this.rootNode || parentNode === this.deployedNode) &&\n          project.type() === Workspace.Workspace.projectTypes.FileSystem) {\n        break;\n      }\n      if (!(currentNode instanceof NavigatorGroupTreeNode || currentNode instanceof NavigatorFolderTreeNode)) {\n        break;\n      }\n      if (currentNode.type === Types.Frame) {\n        this.discardFrame(\n            frame as SDK.ResourceTreeModel.ResourceTreeFrame,\n            Boolean(this.groupByAuthored) && uiSourceCode.contentType().isFromSourceMap());\n        break;\n      }\n\n      const folderId = this.folderNodeId(\n          project, target, frame, uiSourceCode.origin(), uiSourceCode.contentType().isFromSourceMap(),\n          currentNode instanceof NavigatorFolderTreeNode && currentNode.folderPath ||\n              Platform.DevToolsPath.EmptyEncodedPathString);\n      this.subfolderNodes.delete(folderId);\n      parentNode.removeChild(currentNode);\n\n      if (currentNode === this.authoredNode) {\n        this.authoredNode = undefined;\n      } else if (currentNode === this.deployedNode) {\n        this.deployedNode = undefined;\n      }\n\n      currentNode = parentNode;\n    }\n  }\n\n  reset(tearDownOnly?: boolean): void {\n    for (const node of this.uiSourceCodeNodes.valuesArray()) {\n      node.dispose();\n    }\n\n    this.scriptsTree.removeChildren();\n    this.scriptsTree.setFocusable(false);\n    this.uiSourceCodeNodes.clear();\n    this.subfolderNodes.clear();\n    this.frameNodes.clear();\n    this.rootNode.reset();\n    this.authoredNode = undefined;\n    this.deployedNode = undefined;\n    if (!tearDownOnly) {\n      // Reset the workspace to repopulate filesystem folders.\n      this.resetWorkspace(Workspace.Workspace.WorkspaceImpl.instance());\n    }\n  }\n\n  handleContextMenu(_event: Event): void {\n  }\n\n  private async renameShortcut(): Promise<boolean> {\n    const selectedTreeElement = (this.scriptsTree.selectedTreeElement as NavigatorSourceTreeElement | null);\n    const node = selectedTreeElement && selectedTreeElement.node;\n    if (!node || !node.uiSourceCode() || !node.uiSourceCode().canRename()) {\n      return false;\n    }\n    this.rename(node, false);\n    return true;\n  }\n\n  private handleContextMenuCreate(\n      project: Workspace.Workspace.Project, path: Platform.DevToolsPath.EncodedPathString,\n      uiSourceCode?: Workspace.UISourceCode.UISourceCode): void {\n    if (uiSourceCode) {\n      const relativePath = Persistence.FileSystemWorkspaceBinding.FileSystemWorkspaceBinding.relativePath(uiSourceCode);\n      relativePath.pop();\n      path = Common.ParsedURL.ParsedURL.join(relativePath, '/');\n    }\n    void this.create(project, path, uiSourceCode);\n  }\n\n  private handleContextMenuRename(node: NavigatorUISourceCodeTreeNode): void {\n    this.rename(node, false);\n  }\n\n  private async handleContextMenuExclude(\n      project: Workspace.Workspace.Project, path: Platform.DevToolsPath.EncodedPathString): Promise<void> {\n    const shouldExclude = await UI.UIUtils.ConfirmDialog.show(i18nString(UIStrings.areYouSureYouWantToExcludeThis));\n    if (shouldExclude) {\n      UI.UIUtils.startBatchUpdate();\n      project.excludeFolder(\n          Persistence.FileSystemWorkspaceBinding.FileSystemWorkspaceBinding.completeURL(project, path));\n      UI.UIUtils.endBatchUpdate();\n    }\n  }\n\n  private async handleContextMenuDelete(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    const shouldDelete = await UI.UIUtils.ConfirmDialog.show(i18nString(UIStrings.areYouSureYouWantToDeleteThis));\n    if (shouldDelete) {\n      uiSourceCode.project().deleteFile(uiSourceCode);\n    }\n  }\n\n  handleFileContextMenu(event: Event, node: NavigatorUISourceCodeTreeNode): void {\n    const uiSourceCode = node.uiSourceCode();\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    contextMenu.appendApplicableItems(uiSourceCode);\n\n    const project = uiSourceCode.project();\n    if (project.type() === Workspace.Workspace.projectTypes.FileSystem) {\n      contextMenu.editSection().appendItem(i18nString(UIStrings.rename), this.handleContextMenuRename.bind(this, node));\n      contextMenu.editSection().appendItem(\n          i18nString(UIStrings.makeACopy),\n          this.handleContextMenuCreate.bind(this, project, Platform.DevToolsPath.EmptyEncodedPathString, uiSourceCode));\n      contextMenu.editSection().appendItem(\n          i18nString(UIStrings.delete), this.handleContextMenuDelete.bind(this, uiSourceCode));\n    }\n\n    void contextMenu.show();\n  }\n\n  private async handleDeleteOverrides(node: NavigatorTreeNode): Promise<void> {\n    const shouldRemove = await UI.UIUtils.ConfirmDialog.show(i18nString(UIStrings.areYouSureYouWantToDeleteAll));\n    if (shouldRemove) {\n      this.handleDeleteOverridesHelper(node);\n    }\n  }\n\n  private handleDeleteOverridesHelper(node: NavigatorTreeNode): void {\n    node.children().forEach(child => {\n      this.handleDeleteOverridesHelper(child);\n    });\n    if (node instanceof NavigatorUISourceCodeTreeNode) {\n      // Only delete confirmed overrides and not just any file that happens to be in the folder.\n      const binding = Persistence.Persistence.PersistenceImpl.instance().binding(node.uiSourceCode());\n      if (binding) {\n        node.uiSourceCode().project().deleteFile(node.uiSourceCode());\n      }\n    }\n  }\n\n  handleFolderContextMenu(event: Event, node: NavigatorTreeNode): void {\n    const path = (node as NavigatorFolderTreeNode).folderPath || Platform.DevToolsPath.EmptyEncodedPathString;\n    const project = (node as NavigatorFolderTreeNode).project || null;\n\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    NavigatorView.appendSearchItem(contextMenu, path);\n\n    if (!project) {\n      return;\n    }\n\n    if (project.type() === Workspace.Workspace.projectTypes.FileSystem) {\n      const folderPath = Common.ParsedURL.ParsedURL.urlToRawPathString(\n          Persistence.FileSystemWorkspaceBinding.FileSystemWorkspaceBinding.completeURL(project, path),\n          Host.Platform.isWin());\n      contextMenu.revealSection().appendItem(\n          i18nString(UIStrings.openFolder),\n          () => Host.InspectorFrontendHost.InspectorFrontendHostInstance.showItemInFolder(folderPath));\n      if (project.canCreateFile()) {\n        contextMenu.defaultSection().appendItem(i18nString(UIStrings.newFile), () => {\n          this.handleContextMenuCreate(project, path, undefined);\n        });\n      }\n    }\n\n    if (project.canExcludeFolder(path)) {\n      contextMenu.defaultSection().appendItem(\n          i18nString(UIStrings.excludeFolder), this.handleContextMenuExclude.bind(this, project, path));\n    }\n\n    if (project.type() === Workspace.Workspace.projectTypes.FileSystem) {\n      contextMenu.defaultSection().appendAction('sources.add-folder-to-workspace', undefined, true);\n      if (node instanceof NavigatorGroupTreeNode) {\n        contextMenu.defaultSection().appendItem(i18nString(UIStrings.removeFolderFromWorkspace), async () => {\n          const shouldRemove = await UI.UIUtils.ConfirmDialog.show(i18nString(UIStrings.areYouSureYouWantToRemoveThis));\n          if (shouldRemove) {\n            project.remove();\n          }\n        });\n      }\n      if ((project as Persistence.FileSystemWorkspaceBinding.FileSystem).fileSystem().type() === 'overrides') {\n        contextMenu.defaultSection().appendItem(\n            i18nString(UIStrings.deleteAllOverrides), this.handleDeleteOverrides.bind(this, node));\n      }\n    }\n\n    void contextMenu.show();\n  }\n\n  rename(node: NavigatorUISourceCodeTreeNode, creatingNewUISourceCode: boolean): void {\n    const uiSourceCode = node.uiSourceCode();\n    node.rename(callback.bind(this));\n\n    function callback(this: NavigatorView, committed: boolean): void {\n      if (!creatingNewUISourceCode) {\n        return;\n      }\n      if (!committed) {\n        uiSourceCode.remove();\n      } else if (node.treeElement && node.treeElement.listItemElement.hasFocus()) {\n        this.sourceSelected(uiSourceCode, true);\n      }\n    }\n  }\n\n  async create(\n      project: Workspace.Workspace.Project, path: Platform.DevToolsPath.EncodedPathString,\n      uiSourceCodeToCopy?: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    let content = '';\n    if (uiSourceCodeToCopy) {\n      content = (await uiSourceCodeToCopy.requestContent()).content || '';\n    }\n    const uiSourceCode = await project.createFile(path, null, content);\n    if (!uiSourceCode) {\n      return;\n    }\n    this.sourceSelected(uiSourceCode, false);\n    const node = this.revealUISourceCode(uiSourceCode, true);\n    if (node) {\n      this.rename(node, true);\n    }\n  }\n\n  /**\n   * Subclasses can override to listen to grouping changes.\n   */\n  onGroupingChanged(): void {\n  }\n\n  private groupingChanged(): void {\n    this.reset(true);\n    this.initGrouping();\n    // Reset the workspace to repopulate filesystem folders.\n    this.onGroupingChanged();\n    this.resetWorkspace(Workspace.Workspace.WorkspaceImpl.instance());\n    this.workspaceInternal.uiSourceCodes().forEach(this.addUISourceCode.bind(this));\n  }\n\n  private initGrouping(): void {\n    this.groupByFrame = true;\n    this.groupByDomain = this.navigatorGroupByFolderSetting.get();\n    this.groupByFolder = this.groupByDomain;\n    if (this.navigatorGroupByAuthoredExperiment) {\n      this.groupByAuthored = Root.Runtime.experiments.isEnabled(this.navigatorGroupByAuthoredExperiment);\n    } else {\n      this.groupByAuthored = false;\n    }\n  }\n\n  private resetForTest(): void {\n    this.reset();\n    this.workspaceInternal.uiSourceCodes().forEach(this.addUISourceCode.bind(this));\n  }\n\n  private discardFrame(frame: SDK.ResourceTreeModel.ResourceTreeFrame, isAuthored: boolean): void {\n    if (isAuthored) {\n      return;\n    }\n    const node = this.frameNodes.get(frame);\n    if (!node) {\n      return;\n    }\n\n    if (node.parent) {\n      node.parent.removeChild(node);\n    }\n    this.frameNodes.delete(frame);\n    for (const child of frame.childFrames) {\n      this.discardFrame(child, isAuthored);\n    }\n  }\n\n  targetAdded(_target: SDK.Target.Target): void {\n  }\n\n  targetRemoved(target: SDK.Target.Target): void {\n    const rootOrDeployed = this.rootOrDeployedNode();\n    const targetNode = rootOrDeployed.child('target:' + target.id());\n    if (targetNode) {\n      rootOrDeployed.removeChild(targetNode);\n    }\n  }\n\n  private targetNameChanged(event: Common.EventTarget.EventTargetEvent<SDK.Target.Target>): void {\n    const target = event.data;\n    const targetNode = this.rootOrDeployedNode().child('target:' + target.id());\n    if (targetNode) {\n      targetNode.setTitle(target.name());\n    }\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.scriptsTree.registerCSSFiles([navigatorTreeStyles]);\n    this.registerCSSFiles([navigatorViewStyles]);\n  }\n}\n\nconst boostOrderForNode = new WeakSet<UI.TreeOutline.TreeElement>();\n\nexport class NavigatorFolderTreeElement extends UI.TreeOutline.TreeElement {\n  private readonly nodeType: string;\n  private readonly navigatorView: NavigatorView;\n  private hoverCallback: ((arg0: boolean) => void)|undefined;\n  node!: NavigatorTreeNode;\n  private hovered?: boolean;\n\n  constructor(navigatorView: NavigatorView, type: string, title: string, hoverCallback?: ((arg0: boolean) => void)) {\n    super('', true);\n    this.listItemElement.classList.add('navigator-' + type + '-tree-item', 'navigator-folder-tree-item');\n    UI.ARIAUtils.setAccessibleName(this.listItemElement, `${title}, ${type}`);\n    this.nodeType = type;\n    this.title = title;\n    this.tooltip = title;\n    this.navigatorView = navigatorView;\n    this.hoverCallback = hoverCallback;\n\n    let iconType = 'largeicon-navigator-folder';\n    let legacyIcon = true;\n\n    if (type === Types.Domain) {\n      iconType = 'largeicon-navigator-domain';\n    } else if (type === Types.Frame) {\n      iconType = 'largeicon-navigator-frame';\n    } else if (type === Types.Worker) {\n      iconType = 'largeicon-navigator-worker';\n    } else if (type === Types.Authored) {\n      iconType = 'ic_sources_authored';\n      legacyIcon = false;\n    } else if (type === Types.Deployed) {\n      iconType = 'ic_sources_deployed';\n      legacyIcon = false;\n    }\n\n    if (legacyIcon) {\n      this.setLeadingIcons([UI.Icon.Icon.create(iconType, 'icon')]);\n    } else {\n      const icon = new IconButton.Icon.Icon();\n      const iconPath = new URL(`../../Images/${iconType}.svg`, import.meta.url).toString();\n      icon.data = {iconPath: iconPath, color: 'var(--override-folder-tree-item-color)', width: '18px'};\n      this.setLeadingIcons([icon]);\n    }\n  }\n\n  async onpopulate(): Promise<void> {\n    this.node.populate();\n  }\n\n  onattach(): void {\n    this.collapse();\n    this.node.onattach();\n    this.listItemElement.addEventListener('contextmenu', this.handleContextMenuEvent.bind(this), false);\n    this.listItemElement.addEventListener('mousemove', this.mouseMove.bind(this), false);\n    this.listItemElement.addEventListener('mouseleave', this.mouseLeave.bind(this), false);\n  }\n\n  setNode(node: NavigatorTreeNode): void {\n    this.node = node;\n    if (node.tooltip) {\n      this.tooltip = node.tooltip;\n    } else {\n      const paths = [];\n      let currentNode: NavigatorTreeNode|null = node;\n      while (currentNode && !currentNode.isRoot() && currentNode.type === node.type) {\n        paths.push(currentNode.title);\n        currentNode = currentNode.parent;\n      }\n      paths.reverse();\n      this.tooltip = paths.join('/');\n    }\n    UI.ARIAUtils.setAccessibleName(this.listItemElement, `${this.title}, ${this.nodeType}`);\n  }\n\n  private handleContextMenuEvent(event: Event): void {\n    if (!this.node) {\n      return;\n    }\n    this.select();\n    this.navigatorView.handleFolderContextMenu(event, this.node);\n  }\n\n  private mouseMove(_event: Event): void {\n    if (this.hovered || !this.hoverCallback) {\n      return;\n    }\n    this.hovered = true;\n    this.hoverCallback(true);\n  }\n\n  private mouseLeave(_event: Event): void {\n    if (!this.hoverCallback) {\n      return;\n    }\n    this.hovered = false;\n    this.hoverCallback(false);\n  }\n}\n\nexport class NavigatorSourceTreeElement extends UI.TreeOutline.TreeElement {\n  readonly nodeType: string;\n  readonly node: NavigatorUISourceCodeTreeNode;\n  private readonly navigatorView: NavigatorView;\n  uiSourceCodeInternal: Workspace.UISourceCode.UISourceCode;\n\n  constructor(\n      navigatorView: NavigatorView, uiSourceCode: Workspace.UISourceCode.UISourceCode, title: string,\n      node: NavigatorUISourceCodeTreeNode) {\n    super('', false);\n    this.nodeType = Types.File;\n    this.node = node;\n    this.title = title;\n    this.listItemElement.classList.add(\n        'navigator-' + uiSourceCode.contentType().name() + '-tree-item', 'navigator-file-tree-item');\n    this.tooltip = uiSourceCode.url();\n    UI.ARIAUtils.setAccessibleName(this.listItemElement, `${uiSourceCode.name()}, ${this.nodeType}`);\n    Common.EventTarget.fireEvent('source-tree-file-added', uiSourceCode.fullDisplayName());\n    this.navigatorView = navigatorView;\n    this.uiSourceCodeInternal = uiSourceCode;\n    this.updateIcon();\n  }\n\n  updateIcon(): void {\n    const binding = Persistence.Persistence.PersistenceImpl.instance().binding(this.uiSourceCodeInternal);\n    if (binding) {\n      const container = document.createElement('span');\n      container.classList.add('icon-stack');\n      let iconType = 'largeicon-navigator-file-sync';\n      if (Snippets.ScriptSnippetFileSystem.isSnippetsUISourceCode(binding.fileSystem)) {\n        iconType = 'largeicon-navigator-snippet';\n      }\n      const icon = UI.Icon.Icon.create(iconType, 'icon');\n      const badge = UI.Icon.Icon.create('badge-navigator-file-sync', 'icon-badge');\n      // TODO(allada) This does not play well with dark theme. Add an actual icon and use it.\n      if (Persistence.NetworkPersistenceManager.NetworkPersistenceManager.instance().project() ===\n          binding.fileSystem.project()) {\n        badge.style.filter = 'hue-rotate(160deg)';\n      }\n      container.appendChild(icon);\n      container.appendChild(badge);\n      UI.Tooltip.Tooltip.install(\n          container, Persistence.PersistenceUtils.PersistenceUtils.tooltipForUISourceCode(this.uiSourceCodeInternal));\n      this.setLeadingIcons([(container as UI.Icon.Icon)]);\n    } else {\n      let iconType = 'largeicon-navigator-file';\n      if (Snippets.ScriptSnippetFileSystem.isSnippetsUISourceCode(this.uiSourceCodeInternal)) {\n        iconType = 'largeicon-navigator-snippet';\n      }\n      const defaultIcon = UI.Icon.Icon.create(iconType, 'icon');\n      this.setLeadingIcons([defaultIcon]);\n    }\n  }\n\n  get uiSourceCode(): Workspace.UISourceCode.UISourceCode {\n    return this.uiSourceCodeInternal;\n  }\n\n  onattach(): void {\n    this.listItemElement.draggable = true;\n    this.listItemElement.addEventListener('click', this.onclick.bind(this), false);\n    this.listItemElement.addEventListener('contextmenu', this.handleContextMenuEvent.bind(this), false);\n    this.listItemElement.addEventListener('dragstart', this.ondragstart.bind(this), false);\n  }\n\n  private shouldRenameOnMouseDown(): boolean {\n    if (!this.uiSourceCodeInternal.canRename()) {\n      return false;\n    }\n    if (!this.treeOutline) {\n      return false;\n    }\n    const isSelected = this === this.treeOutline.selectedTreeElement;\n    return isSelected && this.treeOutline.element.hasFocus() && !UI.UIUtils.isBeingEdited(this.treeOutline.element);\n  }\n\n  selectOnMouseDown(event: MouseEvent): void {\n    if (event.which !== 1 || !this.shouldRenameOnMouseDown()) {\n      super.selectOnMouseDown(event);\n      return;\n    }\n    window.setTimeout(rename.bind(this), 300);\n\n    function rename(this: NavigatorSourceTreeElement): void {\n      if (this.shouldRenameOnMouseDown()) {\n        this.navigatorView.rename(this.node, false);\n      }\n    }\n  }\n\n  private ondragstart(event: DragEvent): void {\n    if (!event.dataTransfer) {\n      return;\n    }\n    event.dataTransfer.setData('text/plain', this.uiSourceCodeInternal.url());\n    event.dataTransfer.effectAllowed = 'copy';\n  }\n\n  onspace(): boolean {\n    this.navigatorView.sourceSelected(this.uiSourceCode, true);\n    return true;\n  }\n\n  private onclick(_event: Event): void {\n    this.navigatorView.sourceSelected(this.uiSourceCode, false);\n  }\n\n  ondblclick(event: Event): boolean {\n    const middleClick = (event as MouseEvent).button === 1;\n    this.navigatorView.sourceSelected(this.uiSourceCode, !middleClick);\n    return false;\n  }\n\n  onenter(): boolean {\n    this.navigatorView.sourceSelected(this.uiSourceCode, true);\n    return true;\n  }\n\n  ondelete(): boolean {\n    return true;\n  }\n\n  private handleContextMenuEvent(event: Event): void {\n    this.select();\n    this.navigatorView.handleFileContextMenu(event, this.node);\n  }\n}\n\nexport class NavigatorTreeNode {\n  id: string;\n  protected navigatorView: NavigatorView;\n  type: string;\n  childrenInternal: Map<string, NavigatorTreeNode>;\n  private populated: boolean;\n  isMerged: boolean;\n  parent!: NavigatorTreeNode|null;\n  title!: string;\n  tooltip?: string;\n\n  constructor(navigatorView: NavigatorView, id: string, type: string, tooltip?: string) {\n    this.id = id;\n    this.navigatorView = navigatorView;\n    this.type = type;\n    this.childrenInternal = new Map();\n    this.tooltip = tooltip;\n\n    this.populated = false;\n    this.isMerged = false;\n  }\n\n  treeNode(): UI.TreeOutline.TreeElement {\n    throw 'Not implemented';\n  }\n\n  dispose(): void {\n  }\n\n  updateTitle(): void {\n  }\n\n  isRoot(): boolean {\n    return false;\n  }\n\n  hasChildren(): boolean {\n    return true;\n  }\n\n  onattach(): void {\n  }\n\n  setTitle(_title: string): void {\n    throw 'Not implemented';\n  }\n\n  populate(): void {\n    if (this.isPopulated()) {\n      return;\n    }\n    if (this.parent) {\n      this.parent.populate();\n    }\n    this.populated = true;\n    this.wasPopulated();\n  }\n\n  wasPopulated(): void {\n    const children = this.children();\n    for (let i = 0; i < children.length; ++i) {\n      this.navigatorView.appendChild(this.treeNode(), (children[i].treeNode() as UI.TreeOutline.TreeElement));\n    }\n  }\n\n  didAddChild(node: NavigatorTreeNode): void {\n    if (this.isPopulated()) {\n      this.navigatorView.appendChild(this.treeNode(), (node.treeNode() as UI.TreeOutline.TreeElement));\n    }\n  }\n\n  willRemoveChild(node: NavigatorTreeNode): void {\n    if (this.isPopulated()) {\n      this.navigatorView.removeChild(this.treeNode(), (node.treeNode() as UI.TreeOutline.TreeElement));\n    }\n  }\n\n  isPopulated(): boolean {\n    return this.populated;\n  }\n\n  isEmpty(): boolean {\n    return !this.childrenInternal.size;\n  }\n\n  children(): NavigatorTreeNode[] {\n    return [...this.childrenInternal.values()];\n  }\n\n  child(id: string): NavigatorTreeNode|null {\n    return this.childrenInternal.get(id) || null;\n  }\n\n  appendChild(node: NavigatorTreeNode): void {\n    this.childrenInternal.set(node.id, node);\n    node.parent = this;\n    this.didAddChild(node);\n  }\n\n  removeChild(node: NavigatorTreeNode): void {\n    this.willRemoveChild(node);\n    this.childrenInternal.delete(node.id);\n    node.parent = null;\n    node.dispose();\n  }\n\n  reset(): void {\n    this.childrenInternal.clear();\n  }\n}\n\nexport class NavigatorRootTreeNode extends NavigatorTreeNode {\n  constructor(navigatorView: NavigatorView) {\n    super(navigatorView, '', Types.Root);\n  }\n\n  isRoot(): boolean {\n    return true;\n  }\n\n  treeNode(): UI.TreeOutline.TreeElement {\n    return this.navigatorView.scriptsTree.rootElement();\n  }\n}\n\nexport class NavigatorUISourceCodeTreeNode extends NavigatorTreeNode {\n  uiSourceCodeInternal: Workspace.UISourceCode.UISourceCode;\n  treeElement: NavigatorSourceTreeElement|null;\n  private eventListeners: Common.EventTarget.EventDescriptor[];\n  private readonly frameInternal: SDK.ResourceTreeModel.ResourceTreeFrame|null;\n  constructor(\n      navigatorView: NavigatorView, uiSourceCode: Workspace.UISourceCode.UISourceCode,\n      frame: SDK.ResourceTreeModel.ResourceTreeFrame|null) {\n    super(navigatorView, 'UISourceCode:' + uiSourceCode.canononicalScriptId(), Types.File);\n    this.uiSourceCodeInternal = uiSourceCode;\n    this.treeElement = null;\n    this.eventListeners = [];\n    this.frameInternal = frame;\n  }\n\n  frame(): SDK.ResourceTreeModel.ResourceTreeFrame|null {\n    return this.frameInternal;\n  }\n\n  uiSourceCode(): Workspace.UISourceCode.UISourceCode {\n    return this.uiSourceCodeInternal;\n  }\n\n  treeNode(): UI.TreeOutline.TreeElement {\n    if (this.treeElement) {\n      return this.treeElement;\n    }\n\n    this.treeElement = new NavigatorSourceTreeElement(this.navigatorView, this.uiSourceCodeInternal, '', this);\n    this.updateTitle();\n\n    const updateTitleBound = this.updateTitle.bind(this, undefined);\n    this.eventListeners = [\n      this.uiSourceCodeInternal.addEventListener(Workspace.UISourceCode.Events.TitleChanged, updateTitleBound),\n      this.uiSourceCodeInternal.addEventListener(Workspace.UISourceCode.Events.WorkingCopyChanged, updateTitleBound),\n      this.uiSourceCodeInternal.addEventListener(Workspace.UISourceCode.Events.WorkingCopyCommitted, updateTitleBound),\n    ];\n    return this.treeElement;\n  }\n\n  updateTitle(ignoreIsDirty?: boolean): void {\n    if (!this.treeElement) {\n      return;\n    }\n\n    let titleText = this.uiSourceCodeInternal.displayName();\n    if (!ignoreIsDirty && this.uiSourceCodeInternal.isDirty()) {\n      titleText = '*' + titleText;\n    }\n\n    this.treeElement.title = titleText;\n    this.treeElement.updateIcon();\n\n    let tooltip: string = this.uiSourceCodeInternal.url();\n    if (this.uiSourceCodeInternal.contentType().isFromSourceMap()) {\n      tooltip = i18nString(UIStrings.sFromSourceMap, {PH1: this.uiSourceCodeInternal.displayName()});\n    }\n    this.treeElement.tooltip = tooltip;\n  }\n\n  hasChildren(): boolean {\n    return false;\n  }\n\n  dispose(): void {\n    Common.EventTarget.removeEventListeners(this.eventListeners);\n  }\n\n  reveal(select?: boolean): void {\n    if (this.parent) {\n      this.parent.populate();\n      this.parent.treeNode().expand();\n    }\n    if (this.treeElement) {\n      this.treeElement.reveal(true);\n      if (select) {\n        this.treeElement.select(true);\n      }\n    }\n  }\n\n  rename(callback?: ((arg0: boolean) => void)): void {\n    if (!this.treeElement) {\n      return;\n    }\n\n    this.treeElement.listItemElement.focus();\n\n    if (!this.treeElement.treeOutline) {\n      return;\n    }\n\n    // Tree outline should be marked as edited as well as the tree element to prevent search from starting.\n    const treeOutlineElement = this.treeElement.treeOutline.element;\n    UI.UIUtils.markBeingEdited(treeOutlineElement, true);\n\n    function commitHandler(\n        this: NavigatorUISourceCodeTreeNode, element: Element, newTitle: string, oldTitle: string): void {\n      if (newTitle !== oldTitle) {\n        if (this.treeElement) {\n          this.treeElement.title = newTitle;\n        }\n        // necessary cast to RawPathString as alternative would be altering type of Config<T>\n        void this.uiSourceCodeInternal.rename(newTitle as Platform.DevToolsPath.RawPathString)\n            .then(renameCallback.bind(this));\n        return;\n      }\n      afterEditing.call(this, true);\n    }\n\n    function renameCallback(this: NavigatorUISourceCodeTreeNode, success: boolean): void {\n      if (!success) {\n        UI.UIUtils.markBeingEdited(treeOutlineElement, false);\n        this.updateTitle();\n        this.rename(callback);\n        return;\n      }\n      if (this.treeElement) {\n        const {parent} = this.treeElement;\n        if (parent) {\n          parent.removeChild(this.treeElement);\n          parent.appendChild(this.treeElement);\n          this.treeElement.select();\n        }\n      }\n      afterEditing.call(this, true);\n    }\n\n    function afterEditing(this: NavigatorUISourceCodeTreeNode, committed: boolean): void {\n      UI.UIUtils.markBeingEdited(treeOutlineElement, false);\n      this.updateTitle();\n      if (callback) {\n        callback(committed);\n      }\n    }\n\n    this.updateTitle(true);\n    this.treeElement.startEditingTitle(\n        new UI.InplaceEditor.Config(commitHandler.bind(this), afterEditing.bind(this, false)));\n  }\n}\n\nexport class NavigatorFolderTreeNode extends NavigatorTreeNode {\n  project: Workspace.Workspace.Project|null;\n  readonly folderPath: Platform.DevToolsPath.EncodedPathString;\n  title: string;\n  treeElement!: NavigatorFolderTreeElement|null;\n  constructor(\n      navigatorView: NavigatorView, project: Workspace.Workspace.Project|null, id: string, type: string,\n      folderPath: Platform.DevToolsPath.EncodedPathString, title: string) {\n    super(navigatorView, id, type);\n    this.project = project;\n    this.folderPath = folderPath;\n    this.title = title;\n  }\n\n  treeNode(): UI.TreeOutline.TreeElement {\n    if (this.treeElement) {\n      return this.treeElement;\n    }\n    this.treeElement = this.createTreeElement(this.title, this);\n    this.updateTitle();\n    return this.treeElement;\n  }\n\n  updateTitle(): void {\n    if (!this.treeElement || !this.project || this.project.type() !== Workspace.Workspace.projectTypes.FileSystem) {\n      return;\n    }\n    const absoluteFileSystemPath = Common.ParsedURL.ParsedURL.concatenate(\n        Persistence.FileSystemWorkspaceBinding.FileSystemWorkspaceBinding.fileSystemPath(\n            this.project.id() as Platform.DevToolsPath.UrlString),\n        '/', this.folderPath);\n    const hasMappedFiles =\n        Persistence.Persistence.PersistenceImpl.instance().filePathHasBindings(absoluteFileSystemPath);\n    this.treeElement.listItemElement.classList.toggle('has-mapped-files', hasMappedFiles);\n  }\n\n  private createTreeElement(title: string, node: NavigatorTreeNode): NavigatorFolderTreeElement {\n    if (this.project && this.project.type() !== Workspace.Workspace.projectTypes.FileSystem) {\n      try {\n        title = decodeURI(title);\n      } catch (e) {\n      }\n    }\n    const treeElement = new NavigatorFolderTreeElement(this.navigatorView, this.type, title);\n    treeElement.setNode(node);\n    return treeElement;\n  }\n\n  wasPopulated(): void {\n    // @ts-ignore These types are invalid, but removing this check causes wrong behavior\n    if (!this.treeElement || this.treeElement.node !== this) {\n      return;\n    }\n    this.addChildrenRecursive();\n  }\n\n  private addChildrenRecursive(): void {\n    const children = this.children();\n    for (let i = 0; i < children.length; ++i) {\n      const child = children[i];\n      this.didAddChild(child);\n      if (child instanceof NavigatorFolderTreeNode) {\n        child.addChildrenRecursive();\n      }\n    }\n  }\n\n  private shouldMerge(node: NavigatorTreeNode): boolean {\n    return this.type !== Types.Domain && node instanceof NavigatorFolderTreeNode;\n  }\n\n  didAddChild(node: NavigatorTreeNode): void {\n    if (!this.treeElement) {\n      return;\n    }\n\n    let children = this.children();\n\n    if (children.length === 1 && this.shouldMerge(node)) {\n      node.isMerged = true;\n      this.treeElement.title = this.treeElement.title + '/' + node.title;\n      (node as NavigatorFolderTreeNode).treeElement = this.treeElement;\n      this.treeElement.setNode(node);\n      return;\n    }\n\n    let oldNode;\n    if (children.length === 2) {\n      oldNode = children[0] !== node ? children[0] : children[1];\n    }\n    if (oldNode && oldNode.isMerged) {\n      oldNode.isMerged = false;\n      const mergedToNodes = [];\n      mergedToNodes.push(this);\n      let treeNode: (NavigatorTreeNode|null)|NavigatorTreeNode|this = this;\n      while (treeNode && treeNode.isMerged) {\n        treeNode = treeNode.parent;\n        if (treeNode) {\n          mergedToNodes.push(treeNode);\n        }\n      }\n      mergedToNodes.reverse();\n      const titleText = mergedToNodes.map(node => node.title).join('/');\n\n      const nodes = [];\n      treeNode = oldNode;\n      do {\n        nodes.push(treeNode);\n        children = treeNode.children();\n        treeNode = children.length === 1 ? children[0] : null;\n      } while (treeNode && treeNode.isMerged);\n\n      if (!this.isPopulated()) {\n        this.treeElement.title = titleText;\n        this.treeElement.setNode(this);\n        for (let i = 0; i < nodes.length; ++i) {\n          (nodes[i] as NavigatorFolderTreeNode).treeElement = null;\n          nodes[i].isMerged = false;\n        }\n        return;\n      }\n      const oldTreeElement = this.treeElement;\n      const treeElement = this.createTreeElement(titleText, this);\n      for (let i = 0; i < mergedToNodes.length; ++i) {\n        (mergedToNodes[i] as NavigatorFolderTreeNode).treeElement = treeElement;\n      }\n      if (oldTreeElement.parent) {\n        this.navigatorView.appendChild(oldTreeElement.parent, treeElement);\n      }\n\n      oldTreeElement.setNode(nodes[nodes.length - 1]);\n      oldTreeElement.title = nodes.map(node => node.title).join('/');\n      if (oldTreeElement.parent) {\n        this.navigatorView.removeChild(oldTreeElement.parent, oldTreeElement);\n      }\n      this.navigatorView.appendChild(this.treeElement, oldTreeElement);\n      if (oldTreeElement.expanded) {\n        treeElement.expand();\n      }\n    }\n    if (this.isPopulated()) {\n      this.navigatorView.appendChild(this.treeElement, node.treeNode());\n    }\n  }\n\n  willRemoveChild(node: NavigatorTreeNode): void {\n    const actualNode = (node as NavigatorFolderTreeNode);\n    if (actualNode.isMerged || !this.isPopulated() || !this.treeElement || !actualNode.treeElement) {\n      return;\n    }\n    this.navigatorView.removeChild(this.treeElement, actualNode.treeElement);\n  }\n}\n\nexport class NavigatorGroupTreeNode extends NavigatorTreeNode {\n  private readonly project: Workspace.Workspace.Project|null;\n  title: string;\n  private hoverCallback?: ((arg0: boolean) => void);\n  private treeElement?: NavigatorFolderTreeElement;\n  constructor(\n      navigatorView: NavigatorView, project: Workspace.Workspace.Project|null, id: string, type: string, title: string,\n      tooltip?: string) {\n    super(navigatorView, id, type, tooltip);\n    this.project = project;\n    this.title = title;\n    this.populate();\n  }\n\n  setHoverCallback(hoverCallback: (arg0: boolean) => void): void {\n    this.hoverCallback = hoverCallback;\n  }\n\n  treeNode(): UI.TreeOutline.TreeElement {\n    if (this.treeElement) {\n      return this.treeElement;\n    }\n    this.treeElement = new NavigatorFolderTreeElement(this.navigatorView, this.type, this.title, this.hoverCallback);\n    this.treeElement.setNode(this);\n    return this.treeElement;\n  }\n\n  onattach(): void {\n    this.updateTitle();\n  }\n\n  updateTitle(): void {\n    if (!this.treeElement || !this.project || this.project.type() !== Workspace.Workspace.projectTypes.FileSystem) {\n      return;\n    }\n    const fileSystemPath = Persistence.FileSystemWorkspaceBinding.FileSystemWorkspaceBinding.fileSystemPath(\n        this.project.id() as Platform.DevToolsPath.UrlString);\n    const wasActive = this.treeElement.listItemElement.classList.contains('has-mapped-files');\n    const isActive = Persistence.Persistence.PersistenceImpl.instance().filePathHasBindings(fileSystemPath);\n    if (wasActive === isActive) {\n      return;\n    }\n    this.treeElement.listItemElement.classList.toggle('has-mapped-files', isActive);\n    if (this.treeElement.childrenListElement.hasFocus()) {\n      return;\n    }\n    if (isActive) {\n      this.treeElement.expand();\n    } else {\n      this.treeElement.collapse();\n    }\n  }\n\n  setTitle(title: string): void {\n    this.title = title;\n    if (this.treeElement) {\n      this.treeElement.title = this.title;\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
