{
  "version": 3,
  "sources": ["../../../../../../../front_end/panels/sources/components/HeadersView.ts"],
  "sourcesContent": ["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Persistence from '../../../models/persistence/persistence.js';\nimport * as Workspace from '../../../models/workspace/workspace.js';\nimport * as Buttons from '../../../ui/components/buttons/buttons.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as UI from '../../../ui/legacy/legacy.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\n\nimport HeadersViewStyles from './HeadersView.css.js';\n\nconst UIStrings = {\n  /**\n  *@description The title of a button that adds a field to input a header in the editor form.\n  */\n  addHeader: 'Add a header',\n  /**\n  *@description The title of a button that removes a field to input a header in the editor form.\n  */\n  removeHeader: 'Remove this header',\n  /**\n  *@description The title of a button that removes a section for defining header overrides in the editor form.\n  */\n  removeBlock: 'Remove this \\'`ApplyTo`\\'-section',\n  /**\n  *@description Error message for files which cannot not be parsed.\n  *@example {.headers} PH1\n  */\n  errorWhenParsing: 'Error when parsing \\'\\'{PH1}\\'\\'.',\n  /**\n  *@description Explainer for files which cannot be parsed.\n  *@example {.headers} PH1\n  */\n  parsingErrorExplainer:\n      'This is most likely due to a syntax error in \\'\\'{PH1}\\'\\'. Try opening this file in an external editor to fix the error or delete the file and re-create the override.',\n  /**\n  *@description Button text for a button which adds an additional header override.\n  */\n  addHeaderOverride: 'Add header override',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/sources/components/HeadersView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst plusIconUrl = new URL('../../../Images/plus_icon.svg', import.meta.url).toString();\nconst minusIconUrl = new URL('../../../Images/minus_icon.svg', import.meta.url).toString();\n\nexport class HeadersView extends UI.View.SimpleView {\n  readonly #headersViewComponent = new HeadersViewComponent();\n  #uiSourceCode: Workspace.UISourceCode.UISourceCode;\n\n  constructor(uiSourceCode: Workspace.UISourceCode.UISourceCode) {\n    super(i18n.i18n.lockedString('HeadersView'));\n    this.#uiSourceCode = uiSourceCode;\n    this.#uiSourceCode.addEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyChanged, this.#onWorkingCopyChanged, this);\n    this.#uiSourceCode.addEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyCommitted, this.#onWorkingCopyCommitted, this);\n    this.element.appendChild(this.#headersViewComponent);\n    void this.#setInitialData();\n  }\n\n  async #setInitialData(): Promise<void> {\n    const content = await this.#uiSourceCode.requestContent();\n    this.#setComponentData(content.content || '');\n  }\n\n  #setComponentData(content: string): void {\n    let parsingError = false;\n    let headerOverrides: Persistence.NetworkPersistenceManager.HeaderOverride[] = [];\n    content = content || '[]';\n    try {\n      headerOverrides = JSON.parse(content) as Persistence.NetworkPersistenceManager.HeaderOverride[];\n      if (!headerOverrides.every(Persistence.NetworkPersistenceManager.isHeaderOverride)) {\n        throw 'Type mismatch after parsing';\n      }\n    } catch (e) {\n      console.error('Failed to parse', this.#uiSourceCode.url(), 'for locally overriding headers.');\n      parsingError = true;\n    }\n\n    // Header overrides are stored as the key-value pairs of a JSON object on\n    // disk. For the editor we want them as an array instead, so that we can\n    // access/add/remove entries by their index.\n    const arrayOfHeaderOverrideArrays: HeaderOverride[] = headerOverrides.map(headerOverride => {\n      return {\n        applyTo: headerOverride.applyTo,\n        headers: Object.entries(headerOverride.headers).map(([headerName, headerValue]) => {\n          return {\n            name: headerName,\n            value: headerValue,\n          };\n        }),\n      };\n    });\n\n    this.#headersViewComponent.data = {\n      headerOverrides: arrayOfHeaderOverrideArrays,\n      uiSourceCode: this.#uiSourceCode,\n      parsingError,\n    };\n  }\n\n  commitEditing(): void {\n    this.#uiSourceCode.commitWorkingCopy();\n    Persistence.NetworkPersistenceManager.NetworkPersistenceManager.instance().updateInterceptionPatterns();\n  }\n\n  #onWorkingCopyChanged(): void {\n    this.#setComponentData(this.#uiSourceCode.workingCopy());\n  }\n\n  #onWorkingCopyCommitted(): void {\n    this.#setComponentData(this.#uiSourceCode.workingCopy());\n  }\n\n  getComponent(): HeadersViewComponent {\n    return this.#headersViewComponent;\n  }\n\n  dispose(): void {\n    this.#uiSourceCode.removeEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyChanged, this.#onWorkingCopyChanged, this);\n    this.#uiSourceCode.removeEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyCommitted, this.#onWorkingCopyCommitted, this);\n  }\n}\n\ntype Header = {\n  name: string,\n  value: string,\n};\n\ntype HeaderOverride = {\n  applyTo: string,\n  headers: Header[],\n};\n\nexport interface HeadersViewComponentData {\n  headerOverrides: HeaderOverride[];\n  uiSourceCode: Workspace.UISourceCode.UISourceCode;\n  parsingError: boolean;\n}\n\nexport class HeadersViewComponent extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-sources-headers-view`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  readonly #boundRender = this.#render.bind(this);\n  #headerOverrides: HeaderOverride[] = [];\n  #uiSourceCode: Workspace.UISourceCode.UISourceCode|null = null;\n  #parsingError = false;\n  #focusElement: {blockIndex: number, headerIndex?: number}|null = null;\n\n  constructor() {\n    super();\n    this.#shadow.addEventListener('focusin', this.#onFocusIn.bind(this));\n    this.#shadow.addEventListener('focusout', this.#onFocusOut.bind(this));\n    this.#shadow.addEventListener('click', this.#onClick.bind(this));\n    this.#shadow.addEventListener('input', this.#onInput.bind(this));\n    this.#shadow.addEventListener('keydown', this.#onKeyDown.bind(this));\n  }\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [HeadersViewStyles];\n  }\n\n  set data(data: HeadersViewComponentData) {\n    this.#headerOverrides = data.headerOverrides;\n    this.#uiSourceCode = data.uiSourceCode;\n    this.#parsingError = data.parsingError;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  // 'Enter' key should not create a new line in the contenteditable. Focus\n  // on the next contenteditable instead.\n  #onKeyDown(event: Event): void {\n    const keyboardEvent = event as KeyboardEvent;\n    const target = event.target as HTMLElement;\n    if (target.matches('.editable') && keyboardEvent.key === 'Enter') {\n      event.preventDefault();\n      this.#focusNext(target);\n    }\n  }\n\n  #focusNext(target: HTMLElement): void {\n    const elements = Array.from(this.#shadow.querySelectorAll('.editable')) as HTMLElement[];\n    const idx = elements.indexOf(target);\n    if (idx !== -1 && idx + 1 < elements.length) {\n      elements[idx + 1].focus();\n    }\n  }\n\n  #selectAllText(target: HTMLElement): void {\n    const selection = window.getSelection();\n    const range = document.createRange();\n    range.selectNodeContents(target);\n    selection?.removeAllRanges();\n    selection?.addRange(range);\n  }\n\n  #onFocusIn(e: Event): void {\n    const target = e.target as HTMLElement;\n    if (target.matches('.editable')) {\n      this.#selectAllText(target);\n    }\n  }\n\n  #onFocusOut(): void {\n    // clear selection\n    const selection = window.getSelection();\n    selection?.removeAllRanges();\n  }\n\n  #generateNextHeaderName(headers: Header[]): string {\n    const takenNames = new Set<string>(headers.map(header => header.name));\n    let idx = 1;\n    while (takenNames.has('headerName' + idx)) {\n      idx++;\n    }\n    return 'headerName' + idx;\n  }\n\n  #onClick(e: Event): void {\n    const target = e.target as HTMLButtonElement;\n    const rowElement = target.closest('.row') as HTMLElement | null;\n    const blockIndex = Number(rowElement?.dataset.blockIndex || 0);\n    const headerIndex = Number(rowElement?.dataset.headerIndex || 0);\n    if (target.matches('.add-header')) {\n      this.#headerOverrides[blockIndex].headers.splice(\n          headerIndex + 1, 0,\n          {name: this.#generateNextHeaderName(this.#headerOverrides[blockIndex].headers), value: 'headerValue'});\n      this.#focusElement = {blockIndex, headerIndex: headerIndex + 1};\n      this.#onHeadersChanged();\n    } else if (target.matches('.remove-header')) {\n      this.#headerOverrides[blockIndex].headers.splice(headerIndex, 1);\n      if (this.#headerOverrides[blockIndex].headers.length === 0) {\n        this.#headerOverrides[blockIndex].headers.push(\n            {name: this.#generateNextHeaderName(this.#headerOverrides[blockIndex].headers), value: 'headerValue'});\n      }\n      this.#onHeadersChanged();\n    } else if (target.matches('.add-block')) {\n      this.#headerOverrides.push({applyTo: '*', headers: [{name: 'headerName', value: 'headerValue'}]});\n      this.#focusElement = {blockIndex: this.#headerOverrides.length - 1};\n      this.#onHeadersChanged();\n    } else if (target.matches('.remove-block')) {\n      this.#headerOverrides.splice(blockIndex, 1);\n      this.#onHeadersChanged();\n    }\n  }\n\n  #onInput(e: Event): void {\n    const target = e.target as HTMLButtonElement;\n    const rowElement = target.closest('.row') as HTMLElement;\n    const blockIndex = Number(rowElement.dataset.blockIndex);\n    const headerIndex = Number(rowElement.dataset.headerIndex);\n    if (target.matches('.header-name')) {\n      this.#headerOverrides[blockIndex].headers[headerIndex].name = target.innerText;\n      this.#onHeadersChanged();\n    }\n    if (target.matches('.header-value')) {\n      this.#headerOverrides[blockIndex].headers[headerIndex].value = target.innerText;\n      this.#onHeadersChanged();\n    }\n    if (target.matches('.apply-to')) {\n      this.#headerOverrides[blockIndex].applyTo = target.innerText;\n      this.#onHeadersChanged();\n    }\n  }\n\n  #onHeadersChanged(): void {\n    // In the editor header overrides are represented by items in an array, so\n    // that we can access/add/remove entries by their index. On disk, they are\n    // stored as key-value pairs of a JSON object instead.\n    const arrayOfHeaderOverrideObjects: Persistence.NetworkPersistenceManager.HeaderOverride[] =\n        this.#headerOverrides.map(headerOverride => {\n          return {\n            applyTo: headerOverride.applyTo,\n            headers: headerOverride.headers.reduce((a, v) => ({...a, [v.name]: v.value}), {}),\n          };\n        });\n    this.#uiSourceCode?.setWorkingCopy(JSON.stringify(arrayOfHeaderOverrideObjects, null, 2));\n  }\n\n  #render(): void {\n    if (!ComponentHelpers.ScheduledRender.isScheduledRender(this)) {\n      throw new Error('HeadersView render was not scheduled');\n    }\n\n    if (this.#parsingError) {\n      const fileName = this.#uiSourceCode?.name() || '.headers';\n      // clang-format off\n      LitHtml.render(LitHtml.html`\n        <div class=\"center-wrapper\">\n          <div class=\"centered\">\n            <div class=\"error-header\">${i18nString(UIStrings.errorWhenParsing, {PH1: fileName})}</div>\n            <div class=\"error-body\">${i18nString(UIStrings.parsingErrorExplainer, {PH1: fileName})}</div>\n          </div>\n        </div>\n      `, this.#shadow, {host: this});\n      // clang-format on\n      return;\n    }\n\n    // clang-format off\n    LitHtml.render(LitHtml.html`\n      ${this.#headerOverrides.map((headerOverride, blockIndex) =>\n        LitHtml.html`\n          ${this.#renderApplyToRow(headerOverride.applyTo, blockIndex)}\n          ${headerOverride.headers.map((header, headerIndex) =>\n            LitHtml.html`\n              ${this.#renderHeaderRow(header, blockIndex, headerIndex)}\n            `,\n          )}\n        `,\n      )}\n      <${Buttons.Button.Button.litTagName} .variant=${Buttons.Button.Variant.SECONDARY} class=\"add-block\">\n        ${i18nString(UIStrings.addHeaderOverride)}\n      </${Buttons.Button.Button.litTagName}>\n    `, this.#shadow, {host: this});\n    // clang-format on\n\n    if (this.#focusElement) {\n      let focusElement: Element|null = null;\n      if (this.#focusElement.headerIndex) {\n        focusElement = this.#shadow.querySelector(`[data-block-index=\"${\n            this.#focusElement.blockIndex}\"][data-header-index=\"${this.#focusElement.headerIndex}\"] .header-name`);\n      } else {\n        focusElement = this.#shadow.querySelector(`[data-block-index=\"${this.#focusElement.blockIndex}\"] .apply-to`);\n      }\n      if (focusElement) {\n        (focusElement as HTMLElement).focus();\n      }\n      this.#focusElement = null;\n    }\n  }\n\n  #renderApplyToRow(pattern: string, blockIndex: number): LitHtml.TemplateResult {\n    // clang-format off\n    return LitHtml.html`\n      <div class=\"row\" data-block-index=${blockIndex}>\n        <div>${i18n.i18n.lockedString('Apply to')}</div>\n        <div class=\"separator\">:</div>\n        ${this.#renderEditable(pattern, 'apply-to')}\n        <${Buttons.Button.Button.litTagName}\n        title=${i18nString(UIStrings.removeBlock)}\n        .size=${Buttons.Button.Size.SMALL}\n        .iconUrl=${minusIconUrl}\n        .variant=${Buttons.Button.Variant.ROUND}\n        class=\"remove-block inline-button\"\n      ></${Buttons.Button.Button.litTagName}>\n      </div>\n    `;\n    // clang-format on\n  }\n\n  #renderHeaderRow(header: Header, blockIndex: number, headerIndex: number): LitHtml.TemplateResult {\n    // clang-format off\n    return LitHtml.html`\n      <div class=\"row padded\" data-block-index=${blockIndex} data-header-index=${headerIndex}>\n        ${this.#renderEditable(header.name, 'header-name red')}\n        <div class=\"separator\">:</div>\n        ${this.#renderEditable(header.value, 'header-value')}\n        <${Buttons.Button.Button.litTagName}\n          title=${i18nString(UIStrings.addHeader)}\n          .size=${Buttons.Button.Size.SMALL}\n          .iconUrl=${plusIconUrl}\n          .variant=${Buttons.Button.Variant.ROUND}\n          class=\"add-header inline-button\"\n        ></${Buttons.Button.Button.litTagName}>\n        <${Buttons.Button.Button.litTagName}\n          title=${i18nString(UIStrings.removeHeader)}\n          .size=${Buttons.Button.Size.SMALL}\n          .iconUrl=${minusIconUrl}\n          .variant=${Buttons.Button.Variant.ROUND}\n          class=\"remove-header inline-button\"\n        ></${Buttons.Button.Button.litTagName}>\n      </div>\n    `;\n    // clang-format on\n  }\n\n  #renderEditable(value: string, className?: string): LitHtml.TemplateResult {\n    // This uses LitHtml's `live`-directive, so that when checking whether to\n    // update during re-render, `value` is compared against the actual live DOM\n    // value of the contenteditable element and not the potentially outdated\n    // value from the previous render.\n    // clang-format off\n    return LitHtml.html`<span contenteditable=\"true\" class=\"editable ${className}\" tabindex=\"0\" .innerText=${LitHtml.Directives.live(value)}></span>`;\n    // clang-format on\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-sources-headers-view', HeadersViewComponent);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-sources-headers-view': HeadersViewComponent;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
