{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/sources/AddSourceMapURLDialog.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport dialogStyles from './dialog.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Add Source Map URLDialog of the Sources panel\n  */\n  sourceMapUrl: 'Source map URL: ',\n  /**\n  *@description Text to add something\n  */\n  add: 'Add',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/sources/AddSourceMapURLDialog.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class AddSourceMapURLDialog extends UI.Widget.HBox {\n  private readonly input: HTMLInputElement;\n  private readonly dialog: UI.Dialog.Dialog;\n  private readonly callback: (arg0: Platform.DevToolsPath.UrlString) => void;\n  constructor(callback: (arg0: Platform.DevToolsPath.UrlString) => void) {\n    super(/* isWebComponent */ true);\n\n    this.contentElement.createChild('label').textContent = i18nString(UIStrings.sourceMapUrl);\n\n    this.input = UI.UIUtils.createInput('add-source-map', 'text');\n    this.input.addEventListener('keydown', this.onKeyDown.bind(this), false);\n    this.contentElement.appendChild(this.input);\n\n    const addButton = UI.UIUtils.createTextButton(i18nString(UIStrings.add), this.apply.bind(this));\n    this.contentElement.appendChild(addButton);\n\n    this.dialog = new UI.Dialog.Dialog();\n    this.dialog.setSizeBehavior(UI.GlassPane.SizeBehavior.MeasureContent);\n    this.dialog.setDefaultFocusedElement(this.input);\n\n    this.callback = callback;\n  }\n\n  show(): void {\n    super.show(this.dialog.contentElement);\n    // UI.Dialog extends GlassPane and overrides the `show` method with a wider\n    // accepted type. However, TypeScript uses the supertype declaration to\n    // determine the full type, which requires a `!Document`.\n    // @ts-ignore\n    this.dialog.show();\n  }\n\n  private done(value: Platform.DevToolsPath.UrlString): void {\n    this.dialog.hide();\n    this.callback(value);\n  }\n\n  private apply(): void {\n    this.done(this.input.value as Platform.DevToolsPath.UrlString);\n  }\n\n  private onKeyDown(event: KeyboardEvent): void {\n    if (event.key === 'Enter') {\n      event.consume(true);\n      this.apply();\n    }\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([dialogStyles]);\n  }\n}\n"],
  "mappings": "AAIA;AAEA;AAEA;AAEA,MAAM,YAAY;AAAA,EAIhB,cAAc;AAAA,EAId,KAAK;AAAA;AAEP,MAAM,OAAO,KAAK,KAAK,kBAAkB,2CAA2C;AACpF,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AACzD,2CAAoC,GAAG,OAAO,KAAK;AAAA,EACvC;AAAA,EACA;AAAA,EACA;AAAA,EACjB,YAAY,UAA2D;AACrE,UAA2B;AAE3B,SAAK,eAAe,YAAY,SAAS,cAAc,WAAW,UAAU;AAE5E,SAAK,QAAQ,GAAG,QAAQ,YAAY,kBAAkB;AACtD,SAAK,MAAM,iBAAiB,WAAW,KAAK,UAAU,KAAK,OAAO;AAClE,SAAK,eAAe,YAAY,KAAK;AAErC,UAAM,YAAY,GAAG,QAAQ,iBAAiB,WAAW,UAAU,MAAM,KAAK,MAAM,KAAK;AACzF,SAAK,eAAe,YAAY;AAEhC,SAAK,SAAS,IAAI,GAAG,OAAO;AAC5B,SAAK,OAAO,gBAAgB,GAAG,UAAU,aAAa;AACtD,SAAK,OAAO,yBAAyB,KAAK;AAE1C,SAAK,WAAW;AAAA;AAAA,EAGlB,OAAa;AACX,UAAM,KAAK,KAAK,OAAO;AAKvB,SAAK,OAAO;AAAA;AAAA,EAGN,KAAK,OAA8C;AACzD,SAAK,OAAO;AACZ,SAAK,SAAS;AAAA;AAAA,EAGR,QAAc;AACpB,SAAK,KAAK,KAAK,MAAM;AAAA;AAAA,EAGf,UAAU,OAA4B;AAC5C,QAAI,MAAM,QAAQ,SAAS;AACzB,YAAM,QAAQ;AACd,WAAK;AAAA;AAAA;AAAA,EAGT,WAAiB;AACf,UAAM;AACN,SAAK,iBAAiB,CAAC;AAAA;AAAA;",
  "names": []
}
