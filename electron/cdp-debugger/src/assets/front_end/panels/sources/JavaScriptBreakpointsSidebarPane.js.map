{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/sources/JavaScriptBreakpointsSidebarPane.ts"],
  "sourcesContent": ["// Copyright (c) 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport {LogpointPrefix} from './BreakpointEditDialog.js';\n\nimport javaScriptBreakpointsSidebarPaneStyles from './javaScriptBreakpointsSidebarPane.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Text to indicate there are no breakpoints\n  */\n  noBreakpoints: 'No breakpoints',\n  /**\n  *@description Text exposed to screen readers on checked items.\n  */\n  checked: 'checked',\n  /**\n  *@description Accessible text exposed to screen readers when the screen reader encounters an unchecked checkbox.\n  */\n  unchecked: 'unchecked',\n  /**\n  *@description Accessible text for a breakpoint collection with a combination of checked states.\n  */\n  mixed: 'mixed',\n  /**\n  *@description Accessibility label for hit breakpoints in the Sources panel.\n  *@example {checked} PH1\n  */\n  sBreakpointHit: '{PH1} breakpoint hit',\n  /**\n  *@description Text in Debugger Plugin of the Sources panel\n  */\n  removeAllBreakpointsInLine: 'Remove all breakpoints in line',\n  /**\n  *@description Text to remove a breakpoint\n  */\n  removeBreakpoint: 'Remove breakpoint',\n  /**\n  *@description Context menu item that reveals the source code location of a breakpoint in the Sources panel.\n  */\n  revealLocation: 'Reveal location',\n  /**\n  *@description Text in Java Script Breakpoints Sidebar Pane of the Sources panel\n  */\n  deactivateBreakpoints: 'Deactivate breakpoints',\n  /**\n  *@description Text in Java Script Breakpoints Sidebar Pane of the Sources panel\n  */\n  activateBreakpoints: 'Activate breakpoints',\n  /**\n  *@description Text in Java Script Breakpoints Sidebar Pane of the Sources panel\n  */\n  enableAllBreakpoints: 'Enable all breakpoints',\n  /**\n  *@description Text in Java Script Breakpoints Sidebar Pane of the Sources panel\n  */\n  enableBreakpointsInFile: 'Enable breakpoints in file',\n  /**\n  *@description Text in Java Script Breakpoints Sidebar Pane of the Sources panel\n  */\n  disableAllBreakpoints: 'Disable all breakpoints',\n  /**\n  *@description Text in Java Script Breakpoints Sidebar Pane of the Sources panel\n  */\n  disableBreakpointsInFile: 'Disable breakpoints in file',\n  /**\n  *@description Text to remove all breakpoints\n  */\n  removeAllBreakpoints: 'Remove all breakpoints',\n  /**\n  *@description Text in Java Script Breakpoints Sidebar Pane of the Sources panel\n  */\n  removeOtherBreakpoints: 'Remove other breakpoints',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/sources/JavaScriptBreakpointsSidebarPane.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet javaScriptBreakpointsSidebarPaneInstance: JavaScriptBreakpointsSidebarPane;\n\nexport class JavaScriptBreakpointsSidebarPane extends UI.ThrottledWidget.ThrottledWidget implements\n    UI.ContextFlavorListener.ContextFlavorListener, UI.ListControl.ListDelegate<BreakpointItem> {\n  private readonly breakpointManager: Bindings.BreakpointManager.BreakpointManager;\n  private breakpoints: UI.ListModel.ListModel<BreakpointItem>;\n  private list: UI.ListControl.ListControl<BreakpointItem>;\n  private readonly emptyElement: HTMLElement;\n\n  private constructor() {\n    super(true);\n\n    this.breakpointManager = Bindings.BreakpointManager.BreakpointManager.instance();\n    this.breakpointManager.addEventListener(Bindings.BreakpointManager.Events.BreakpointAdded, this.update, this);\n    this.breakpointManager.addEventListener(Bindings.BreakpointManager.Events.BreakpointRemoved, this.update, this);\n    Common.Settings.Settings.instance().moduleSetting('breakpointsActive').addChangeListener(this.update, this);\n\n    this.breakpoints = new UI.ListModel.ListModel();\n    this.list = new UI.ListControl.ListControl(this.breakpoints, this, UI.ListControl.ListMode.NonViewport);\n    UI.ARIAUtils.markAsList(this.list.element);\n    this.contentElement.appendChild(this.list.element);\n\n    this.emptyElement = this.contentElement.createChild('div', 'gray-info-message');\n    this.emptyElement.textContent = i18nString(UIStrings.noBreakpoints);\n    this.emptyElement.tabIndex = -1;\n\n    this.update();\n  }\n\n  static instance(): JavaScriptBreakpointsSidebarPane {\n    if (!javaScriptBreakpointsSidebarPaneInstance) {\n      javaScriptBreakpointsSidebarPaneInstance = new JavaScriptBreakpointsSidebarPane();\n    }\n    return javaScriptBreakpointsSidebarPaneInstance;\n  }\n\n  private getBreakpointLocations(): BreakpointLocation[] {\n    const locations = this.breakpointManager.allBreakpointLocations().filter(\n        breakpointLocation =>\n            breakpointLocation.uiLocation.uiSourceCode.project().type() !== Workspace.Workspace.projectTypes.Debugger);\n\n    locations.sort((item1, item2) => item1.uiLocation.compareTo(item2.uiLocation));\n\n    const result = [];\n    let lastBreakpoint: Bindings.BreakpointManager.Breakpoint|null = null;\n    let lastLocation: Workspace.UISourceCode.UILocation|null = null;\n    for (const location of locations) {\n      if (location.breakpoint !== lastBreakpoint || (lastLocation && location.uiLocation.compareTo(lastLocation))) {\n        result.push(location);\n        lastBreakpoint = location.breakpoint;\n        lastLocation = location.uiLocation;\n      }\n    }\n    return result;\n  }\n\n  private hideList(): void {\n    this.list.element.classList.add('hidden');\n    this.emptyElement.classList.remove('hidden');\n  }\n\n  private ensureListShown(): void {\n    this.list.element.classList.remove('hidden');\n    this.emptyElement.classList.add('hidden');\n  }\n\n  private groupBreakpointLocationsById(breakpointLocations: BreakpointLocation[]): BreakpointLocation[][] {\n    const map = new Platform.MapUtilities.Multimap<string, BreakpointLocation>();\n    for (const breakpointLocation of breakpointLocations) {\n      const uiLocation = breakpointLocation.uiLocation;\n      map.set(uiLocation.id(), breakpointLocation);\n    }\n    const arr: BreakpointLocation[][] = [];\n    for (const id of map.keysArray()) {\n      const locations = Array.from(map.get(id));\n      if (locations.length) {\n        arr.push(locations);\n      }\n    }\n    return arr;\n  }\n\n  private getLocationIdsByLineId(breakpointLocations: BreakpointLocation[]):\n      Platform.MapUtilities.Multimap<string, string> {\n    const result = new Platform.MapUtilities.Multimap<string, string>();\n\n    for (const breakpointLocation of breakpointLocations) {\n      const uiLocation = breakpointLocation.uiLocation;\n      result.set(uiLocation.lineId(), uiLocation.id());\n    }\n\n    return result;\n  }\n\n  private async getSelectedUILocation(): Promise<Workspace.UISourceCode.UILocation|null> {\n    const details = UI.Context.Context.instance().flavor(SDK.DebuggerModel.DebuggerPausedDetails);\n    if (details && details.callFrames.length) {\n      return await Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance().rawLocationToUILocation(\n          details.callFrames[0].location());\n    }\n    return null;\n  }\n\n  private getContent(locations: BreakpointLocation[][]): Promise<TextUtils.Text.Text[]> {\n    // Use a cache to share the Text objects between all breakpoints. This way\n    // we share the cached line ending information that Text calculates. This\n    // was very slow to calculate with a lot of breakpoints in the same very\n    // large source file.\n    const contentToTextMap = new Map<string, TextUtils.Text.Text>();\n\n    return Promise.all(locations.map(async ([{uiLocation: {uiSourceCode}}]) => {\n      if (uiSourceCode.mimeType() === 'application/wasm') {\n        // We could mirror the logic from `SourceFrame._ensureContentLoaded()` here\n        // (and if so, ideally share that code somewhere), but that's quite heavy\n        // logic just to display a single Wasm instruction. Also not really clear\n        // how much value this would add. So let's keep it simple for now and don't\n        // display anything additional for Wasm breakpoints, and if there's demand\n        // to display some text preview, we could look into selectively disassemb-\n        // ling the part of the text that we need here.\n        // Relevant crbug: https://crbug.com/1090256\n        return new TextUtils.Text.Text('');\n      }\n      const {content} = await uiSourceCode.requestContent();\n      const contentText = content || '';\n      if (contentToTextMap.has(contentText)) {\n        return contentToTextMap.get(contentText) as TextUtils.Text.Text;\n      }\n      const text = new TextUtils.Text.Text(contentText);\n      contentToTextMap.set(contentText, text);\n      return text;\n    }));\n  }\n\n  async doUpdate(): Promise<void> {\n    const hadFocus = this.hasFocus();\n    const breakpointLocations = this.getBreakpointLocations();\n    if (!breakpointLocations.length) {\n      this.hideList();\n      this.setBreakpointItems([]);\n      return this.didUpdateForTest();\n    }\n    this.ensureListShown();\n\n    const locationsGroupedById = this.groupBreakpointLocationsById(breakpointLocations);\n    const locationIdsByLineId = this.getLocationIdsByLineId(breakpointLocations);\n    const content = await this.getContent(locationsGroupedById);\n    const selectedUILocation = await this.getSelectedUILocation();\n    const breakpoints = [];\n    for (let idx = 0; idx < locationsGroupedById.length; idx++) {\n      const locations = locationsGroupedById[idx];\n      const breakpointLocation = locations[0];\n      const uiLocation = breakpointLocation.uiLocation;\n      const isSelected = selectedUILocation !== null &&\n          locations.some(location => location.uiLocation.id() === selectedUILocation.id());\n      // Wasm disassembly bytecode offsets are stored as column numbers,\n      // so this showColumn setting doesn't make sense for WebAssembly.\n      const showColumn = uiLocation.uiSourceCode.mimeType() !== 'application/wasm' &&\n          locationIdsByLineId.get(uiLocation.lineId()).size > 1;\n      const text = (content[idx] as TextUtils.Text.Text);\n      breakpoints.push(new BreakpointItem(locations, text, isSelected, showColumn));\n    }\n\n    if (breakpoints.some(breakpoint => breakpoint.isSelected)) {\n      void UI.ViewManager.ViewManager.instance().showView('sources.jsBreakpoints');\n    }\n\n    this.list.element.classList.toggle(\n        'breakpoints-list-deactivated', !Common.Settings.Settings.instance().moduleSetting('breakpointsActive').get());\n\n    this.setBreakpointItems(breakpoints);\n\n    if (hadFocus) {\n      this.focus();\n    }\n\n    return this.didUpdateForTest();\n  }\n\n  /**\n   * If the number of breakpoint items is the same,\n   * we expect only minor changes and it implies that only\n   * few items should be updated\n   */\n  private setBreakpointItems(breakpointItems: BreakpointItem[]): void {\n    if (this.breakpoints.length === breakpointItems.length) {\n      for (let i = 0; i < this.breakpoints.length; i++) {\n        if (!this.breakpoints.at(i).isSimilar(breakpointItems[i])) {\n          this.breakpoints.replace(i, breakpointItems[i], /** keepSelectedIndex= */ true);\n        }\n      }\n    } else {\n      this.breakpoints.replaceAll(breakpointItems);\n    }\n    if (!this.list.selectedItem() && this.breakpoints.at(0)) {\n      this.list.selectItem(this.breakpoints.at(0));\n    }\n  }\n\n  createElementForItem(item: BreakpointItem): Element {\n    const element = document.createElement('div');\n    element.classList.add('breakpoint-entry');\n    UI.ARIAUtils.markAsListitem(element);\n    element.tabIndex = this.list.selectedItem() === item ? 0 : -1;\n    element.addEventListener('contextmenu', this.breakpointContextMenu.bind(this), true);\n    element.addEventListener('click', this.revealLocation.bind(this, element), false);\n\n    const hasLogpoint = item.locations.some(location => location.breakpoint.condition().includes(LogpointPrefix));\n    const hasConditional = item.locations.some(location => Boolean(location.breakpoint.condition()));\n    const lineElement = element.createChild('div', 'decoration-and-content');\n    if (hasLogpoint) {\n      lineElement.classList.add('logpoint');\n    } else if (hasConditional) {\n      lineElement.classList.add('breakpoint-conditional');\n    }\n\n    const checkboxLabel = UI.UIUtils.CheckboxLabel.create('');\n    const uiLocation = item.locations[0].uiLocation;\n    const hasEnabled = item.locations.some(location => location.breakpoint.enabled());\n    const hasDisabled = item.locations.some(location => !location.breakpoint.enabled());\n    checkboxLabel.textElement.textContent = uiLocation.linkText() +\n        (item.showColumn && typeof uiLocation.columnNumber === 'number' ? ':' + (uiLocation.columnNumber + 1) : '');\n    checkboxLabel.checkboxElement.checked = hasEnabled;\n    checkboxLabel.checkboxElement.indeterminate = hasEnabled && hasDisabled;\n    checkboxLabel.checkboxElement.tabIndex = -1;\n    checkboxLabel.addEventListener('click', this.breakpointCheckboxClicked.bind(this), false);\n    lineElement.appendChild(checkboxLabel);\n    let checkedDescription: Common.UIString.LocalizedString =\n        hasEnabled ? i18nString(UIStrings.checked) : i18nString(UIStrings.unchecked);\n    if (hasEnabled && hasDisabled) {\n      checkedDescription = i18nString(UIStrings.mixed);\n    }\n    if (item.isSelected) {\n      UI.ARIAUtils.setDescription(lineElement, i18nString(UIStrings.sBreakpointHit, {PH1: checkedDescription}));\n      element.classList.add('breakpoint-hit');\n      this.setDefaultFocusedElement(element);\n    } else {\n      UI.ARIAUtils.setDescription(lineElement, checkedDescription);\n    }\n\n    element.addEventListener('keydown', event => {\n      if (event.key === ' ') {\n        checkboxLabel.checkboxElement.click();\n        event.consume(true);\n      }\n    });\n\n    const snippetElement = lineElement.createChild('div', 'source-text monospace');\n    const lineNumber = uiLocation.lineNumber;\n\n    if (item.text && lineNumber < item.text.lineCount()) {\n      const lineText = item.text.lineAt(lineNumber);\n      const maxSnippetLength = 200;\n      snippetElement.textContent = Platform.StringUtilities.trimEndWithMaxLength(\n          lineText.substring(item.showColumn ? (uiLocation.columnNumber || 0) : 0), maxSnippetLength);\n    }\n\n    elementToBreakpointMap.set(element, item.locations);\n    elementToUILocationMap.set(element, uiLocation);\n    return element;\n  }\n\n  heightForItem(_item: BreakpointItem): number {\n    return 0;\n  }\n\n  isItemSelectable(_item: BreakpointItem): boolean {\n    return true;\n  }\n\n  selectedItemChanged(\n      _from: BreakpointItem|null, _to: BreakpointItem|null, fromElement: HTMLElement|null,\n      toElement: HTMLElement|null): void {\n    if (fromElement) {\n      fromElement.tabIndex = -1;\n    }\n    if (toElement) {\n      toElement.tabIndex = 0;\n      this.setDefaultFocusedElement(toElement);\n      if (this.hasFocus()) {\n        toElement.focus();\n      }\n    }\n  }\n\n  updateSelectedItemARIA(_fromElement: Element|null, _toElement: Element|null): boolean {\n    return true;\n  }\n\n  private breakpointLocations(event: Event): Bindings.BreakpointManager.BreakpointLocation[] {\n    if (event.target instanceof Element) {\n      return this.breakpointLocationsForElement(event.target);\n    }\n    return [];\n  }\n\n  private breakpointLocationsForElement(element: Element): Bindings.BreakpointManager.BreakpointLocation[] {\n    const node = element.enclosingNodeOrSelfWithClass('breakpoint-entry');\n    if (!node) {\n      return [];\n    }\n    return elementToBreakpointMap.get(node) || [];\n  }\n\n  private breakpointCheckboxClicked(event: Event): void {\n    const hadFocus = this.hasFocus();\n    const breakpoints = this.breakpointLocations(event).map(breakpointLocation => breakpointLocation.breakpoint);\n    const newState = (event.target as UI.UIUtils.CheckboxLabel).checkboxElement.checked;\n    for (const breakpoint of breakpoints) {\n      breakpoint.setEnabled(newState);\n      const item =\n          this.breakpoints.find(breakpointItem => breakpointItem.locations.some(loc => loc.breakpoint === breakpoint));\n      if (item) {\n        this.list.selectItem(item);\n        this.list.refreshItem(item);\n      }\n    }\n    if (hadFocus) {\n      this.focus();\n    }\n    event.consume();\n  }\n\n  private revealLocation(element: Element): void {\n    const uiLocations =\n        this.breakpointLocationsForElement(element).map(breakpointLocation => breakpointLocation.uiLocation);\n    let uiLocation: Workspace.UISourceCode.UILocation|null = null;\n    for (const uiLocationCandidate of uiLocations) {\n      if (!uiLocation || uiLocationCandidate.compareTo(uiLocation) < 0) {\n        uiLocation = uiLocationCandidate;\n      }\n    }\n    if (uiLocation) {\n      void Common.Revealer.reveal(uiLocation);\n    }\n  }\n\n  private breakpointContextMenu(event: Event): void {\n    const breakpoints = this.breakpointLocations(event).map(breakpointLocation => breakpointLocation.breakpoint);\n\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    const removeEntryTitle = breakpoints.length > 1 ? i18nString(UIStrings.removeAllBreakpointsInLine) :\n                                                      i18nString(UIStrings.removeBreakpoint);\n    contextMenu.defaultSection().appendItem(\n        removeEntryTitle, () => breakpoints.map(breakpoint => void breakpoint.remove(false /* keepInStorage */)));\n    if (event.target instanceof Element) {\n      contextMenu.defaultSection().appendItem(\n          i18nString(UIStrings.revealLocation), this.revealLocation.bind(this, event.target));\n    }\n\n    const breakpointActive = Common.Settings.Settings.instance().moduleSetting('breakpointsActive').get();\n    const breakpointActiveTitle =\n        breakpointActive ? i18nString(UIStrings.deactivateBreakpoints) : i18nString(UIStrings.activateBreakpoints);\n    contextMenu.defaultSection().appendItem(\n        breakpointActiveTitle,\n        () => Common.Settings.Settings.instance().moduleSetting('breakpointsActive').set(!breakpointActive));\n\n    if (breakpoints.some(breakpoint => !breakpoint.enabled())) {\n      const enableTitle = i18nString(UIStrings.enableAllBreakpoints);\n      contextMenu.defaultSection().appendItem(enableTitle, this.toggleAllBreakpoints.bind(this, true));\n      if (event.target instanceof Element) {\n        const enableInFileTitle = i18nString(UIStrings.enableBreakpointsInFile);\n        contextMenu.defaultSection().appendItem(\n            enableInFileTitle, this.toggleAllBreakpointsInFile.bind(this, event.target, true));\n      }\n    }\n    if (breakpoints.some(breakpoint => breakpoint.enabled())) {\n      const disableTitle = i18nString(UIStrings.disableAllBreakpoints);\n      contextMenu.defaultSection().appendItem(disableTitle, this.toggleAllBreakpoints.bind(this, false));\n      if (event.target instanceof Element) {\n        const disableInFileTitle = i18nString(UIStrings.disableBreakpointsInFile);\n        contextMenu.defaultSection().appendItem(\n            disableInFileTitle, this.toggleAllBreakpointsInFile.bind(this, event.target, false));\n      }\n    }\n\n    const removeAllTitle = i18nString(UIStrings.removeAllBreakpoints);\n    contextMenu.defaultSection().appendItem(removeAllTitle, this.removeAllBreakpoints.bind(this));\n    const removeOtherTitle = i18nString(UIStrings.removeOtherBreakpoints);\n    contextMenu.defaultSection().appendItem(\n        removeOtherTitle, this.removeOtherBreakpoints.bind(this, new Set(breakpoints)));\n    void contextMenu.show();\n  }\n\n  private toggleAllBreakpointsInFile(element: Element, toggleState: boolean): void {\n    const breakpointLocations = this.getBreakpointLocations();\n    const selectedBreakpointLocations = this.breakpointLocationsForElement(element);\n    breakpointLocations.forEach(breakpointLocation => {\n      const matchesLocation = selectedBreakpointLocations.some(\n          selectedBreakpointLocation =>\n              selectedBreakpointLocation.breakpoint.url() === breakpointLocation.breakpoint.url());\n      if (matchesLocation) {\n        breakpointLocation.breakpoint.setEnabled(toggleState);\n      }\n    });\n  }\n\n  private toggleAllBreakpoints(toggleState: boolean): void {\n    for (const breakpointLocation of this.breakpointManager.allBreakpointLocations()) {\n      breakpointLocation.breakpoint.setEnabled(toggleState);\n    }\n  }\n\n  private removeAllBreakpoints(): void {\n    for (const breakpointLocation of this.breakpointManager.allBreakpointLocations()) {\n      void breakpointLocation.breakpoint.remove(false /* keepInStorage */);\n    }\n  }\n\n  private removeOtherBreakpoints(selectedBreakpoints: Set<Bindings.BreakpointManager.Breakpoint>): void {\n    for (const breakpointLocation of this.breakpointManager.allBreakpointLocations()) {\n      if (!selectedBreakpoints.has(breakpointLocation.breakpoint)) {\n        void breakpointLocation.breakpoint.remove(false /* keepInStorage */);\n      }\n    }\n  }\n\n  flavorChanged(_object: Object|null): void {\n    this.update();\n  }\n\n  private didUpdateForTest(): void {\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([javaScriptBreakpointsSidebarPaneStyles]);\n  }\n}\n\nclass BreakpointItem {\n  locations: BreakpointLocation[];\n  text: TextUtils.Text.Text|null;\n  isSelected: boolean;\n  showColumn: boolean;\n\n  constructor(\n      locations: BreakpointLocation[], text: TextUtils.Text.Text|null, isSelected: boolean, showColumn: boolean) {\n    this.locations = locations;\n    this.text = text;\n    this.isSelected = isSelected;\n    this.showColumn = showColumn;\n  }\n\n  /**\n   * Checks if this item has not changed compared with the other\n   * Used to cache model items between re-renders\n   */\n  isSimilar(other: BreakpointItem): boolean|null {\n    return this.locations.length === other.locations.length &&\n        this.locations.every((l, idx) => l.uiLocation === other.locations[idx].uiLocation) &&\n        this.locations.every((l, idx) => l.breakpoint === other.locations[idx].breakpoint) &&\n        ((this.text === other.text) || (this.text && other.text && this.text.value() === other.text.value())) &&\n        this.isSelected === other.isSelected && this.showColumn === other.showColumn;\n  }\n}\n\nconst elementToUILocationMap = new WeakMap<Element, Workspace.UISourceCode.UILocation>();\n\nexport function retrieveLocationForElement(element: Element): Workspace.UISourceCode.UILocation|undefined {\n  return elementToUILocationMap.get(element);\n}\n\nconst elementToBreakpointMap = new WeakMap<Element, BreakpointLocation[]>();\n\nexport interface BreakpointLocation {\n  breakpoint: Bindings.BreakpointManager.Breakpoint;\n  uiLocation: Workspace.UISourceCode.UILocation;\n}\n"],
  "mappings": "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",
  "names": []
}
