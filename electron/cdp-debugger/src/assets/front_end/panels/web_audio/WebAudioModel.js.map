{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/web_audio/WebAudioModel.ts"],
  "sourcesContent": ["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nexport class WebAudioModel extends SDK.SDKModel.SDKModel<EventTypes> implements ProtocolProxyApi.WebAudioDispatcher {\n  private enabled: boolean;\n  private readonly agent: ProtocolProxyApi.WebAudioApi;\n  constructor(target: SDK.Target.Target) {\n    super(target);\n\n    this.enabled = false;\n\n    this.agent = target.webAudioAgent();\n    target.registerWebAudioDispatcher(this);\n\n    // TODO(crbug.com/963510): Some OfflineAudioContexts are not uninitialized\n    // properly because LifeCycleObserver::ContextDestroyed() is not fired for\n    // unknown reasons. This creates inconsistency in AudioGraphTracer\n    // and AudioContextSelector in DevTools.\n    //\n    // To resolve this inconsistency, we flush the leftover from the previous\n    // frame when the current page is loaded. This call can be omitted when the\n    // bug is fixed.\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.FrameNavigated, this.flushContexts, this);\n  }\n\n  private flushContexts(): void {\n    this.dispatchEventToListeners(Events.ModelReset);\n  }\n\n  async suspendModel(): Promise<void> {\n    this.dispatchEventToListeners(Events.ModelSuspend);\n    await this.agent.invoke_disable();\n  }\n\n  async resumeModel(): Promise<void> {\n    if (!this.enabled) {\n      return Promise.resolve();\n    }\n    await this.agent.invoke_enable();\n  }\n\n  ensureEnabled(): void {\n    if (this.enabled) {\n      return;\n    }\n    void this.agent.invoke_enable();\n    this.enabled = true;\n  }\n\n  contextCreated({context}: Protocol.WebAudio.ContextCreatedEvent): void {\n    this.dispatchEventToListeners(Events.ContextCreated, context);\n  }\n\n  contextWillBeDestroyed({contextId}: Protocol.WebAudio.ContextWillBeDestroyedEvent): void {\n    this.dispatchEventToListeners(Events.ContextDestroyed, contextId);\n  }\n\n  contextChanged({context}: Protocol.WebAudio.ContextChangedEvent): void {\n    this.dispatchEventToListeners(Events.ContextChanged, context);\n  }\n\n  audioListenerCreated({listener}: Protocol.WebAudio.AudioListenerCreatedEvent): void {\n    this.dispatchEventToListeners(Events.AudioListenerCreated, listener);\n  }\n\n  audioListenerWillBeDestroyed({listenerId, contextId}: Protocol.WebAudio.AudioListenerWillBeDestroyedEvent): void {\n    this.dispatchEventToListeners(Events.AudioListenerWillBeDestroyed, {listenerId, contextId});\n  }\n\n  audioNodeCreated({node}: Protocol.WebAudio.AudioNodeCreatedEvent): void {\n    this.dispatchEventToListeners(Events.AudioNodeCreated, node);\n  }\n\n  audioNodeWillBeDestroyed({contextId, nodeId}: Protocol.WebAudio.AudioNodeWillBeDestroyedEvent): void {\n    this.dispatchEventToListeners(Events.AudioNodeWillBeDestroyed, {contextId, nodeId});\n  }\n\n  audioParamCreated({param}: Protocol.WebAudio.AudioParamCreatedEvent): void {\n    this.dispatchEventToListeners(Events.AudioParamCreated, param);\n  }\n\n  audioParamWillBeDestroyed({contextId, nodeId, paramId}: Protocol.WebAudio.AudioParamWillBeDestroyedEvent): void {\n    this.dispatchEventToListeners(Events.AudioParamWillBeDestroyed, {contextId, nodeId, paramId});\n  }\n\n  nodesConnected({contextId, sourceId, destinationId, sourceOutputIndex, destinationInputIndex}:\n                     Protocol.WebAudio.NodesConnectedEvent): void {\n    this.dispatchEventToListeners(\n        Events.NodesConnected, {contextId, sourceId, destinationId, sourceOutputIndex, destinationInputIndex});\n  }\n\n  nodesDisconnected({contextId, sourceId, destinationId, sourceOutputIndex, destinationInputIndex}:\n                        Protocol.WebAudio.NodesDisconnectedEvent): void {\n    this.dispatchEventToListeners(\n        Events.NodesDisconnected, {contextId, sourceId, destinationId, sourceOutputIndex, destinationInputIndex});\n  }\n\n  nodeParamConnected({contextId, sourceId, destinationId, sourceOutputIndex}:\n                         Protocol.WebAudio.NodeParamConnectedEvent): void {\n    this.dispatchEventToListeners(Events.NodeParamConnected, {contextId, sourceId, destinationId, sourceOutputIndex});\n  }\n\n  nodeParamDisconnected({contextId, sourceId, destinationId, sourceOutputIndex}:\n                            Protocol.WebAudio.NodeParamDisconnectedEvent): void {\n    this.dispatchEventToListeners(\n        Events.NodeParamDisconnected, {contextId, sourceId, destinationId, sourceOutputIndex});\n  }\n\n  async requestRealtimeData(contextId: Protocol.WebAudio.GraphObjectId):\n      Promise<Protocol.WebAudio.ContextRealtimeData|null> {\n    const realtimeResponse = await this.agent.invoke_getRealtimeData({contextId});\n    return realtimeResponse.realtimeData;\n  }\n}\n\nSDK.SDKModel.SDKModel.register(WebAudioModel, {capabilities: SDK.Target.Capability.DOM, autostart: false});\n\nexport const enum Events {\n  ContextCreated = 'ContextCreated',\n  ContextDestroyed = 'ContextDestroyed',\n  ContextChanged = 'ContextChanged',\n  ModelReset = 'ModelReset',\n  ModelSuspend = 'ModelSuspend',\n  AudioListenerCreated = 'AudioListenerCreated',\n  AudioListenerWillBeDestroyed = 'AudioListenerWillBeDestroyed',\n  AudioNodeCreated = 'AudioNodeCreated',\n  AudioNodeWillBeDestroyed = 'AudioNodeWillBeDestroyed',\n  AudioParamCreated = 'AudioParamCreated',\n  AudioParamWillBeDestroyed = 'AudioParamWillBeDestroyed',\n  NodesConnected = 'NodesConnected',\n  NodesDisconnected = 'NodesDisconnected',\n  NodeParamConnected = 'NodeParamConnected',\n  NodeParamDisconnected = 'NodeParamDisconnected',\n}\n\nexport type EventTypes = {\n  [Events.ContextCreated]: Protocol.WebAudio.BaseAudioContext,\n  [Events.ContextDestroyed]: Protocol.WebAudio.GraphObjectId,\n  [Events.ContextChanged]: Protocol.WebAudio.BaseAudioContext,\n  [Events.ModelReset]: void,\n  [Events.ModelSuspend]: void,\n  [Events.AudioListenerCreated]: Protocol.WebAudio.AudioListener,\n  [Events.AudioListenerWillBeDestroyed]: Protocol.WebAudio.AudioListenerWillBeDestroyedEvent,\n  [Events.AudioNodeCreated]: Protocol.WebAudio.AudioNode,\n  [Events.AudioNodeWillBeDestroyed]: Protocol.WebAudio.AudioNodeWillBeDestroyedEvent,\n  [Events.AudioParamCreated]: Protocol.WebAudio.AudioParam,\n  [Events.AudioParamWillBeDestroyed]: Protocol.WebAudio.AudioParamWillBeDestroyedEvent,\n  [Events.NodesConnected]: Protocol.WebAudio.NodesConnectedEvent,\n  [Events.NodesDisconnected]: Protocol.WebAudio.NodesDisconnectedEvent,\n  [Events.NodeParamConnected]: Protocol.WebAudio.NodeParamConnectedEvent,\n  [Events.NodeParamDisconnected]: Protocol.WebAudio.NodeParamDisconnectedEvent,\n};\n"],
  "mappings": "AAIA;AAIO,mCAA4B,IAAI,SAAS,SAAoE;AAAA,EAC1G;AAAA,EACS;AAAA,EACjB,YAAY,QAA2B;AACrC,UAAM;AAEN,SAAK,UAAU;AAEf,SAAK,QAAQ,OAAO;AACpB,WAAO,2BAA2B;AAUlC,QAAI,cAAc,cAAc,WAAW,iBACvC,IAAI,kBAAkB,mBAAmB,IAAI,kBAAkB,OAAO,gBAAgB,KAAK,eAAe;AAAA;AAAA,EAGxG,gBAAsB;AAC5B,SAAK,yBAAyB,OAAO;AAAA;AAAA,QAGjC,eAA8B;AAClC,SAAK,yBAAyB,OAAO;AACrC,UAAM,KAAK,MAAM;AAAA;AAAA,QAGb,cAA6B;AACjC,QAAI,CAAC,KAAK,SAAS;AACjB,aAAO,QAAQ;AAAA;AAEjB,UAAM,KAAK,MAAM;AAAA;AAAA,EAGnB,gBAAsB;AACpB,QAAI,KAAK,SAAS;AAChB;AAAA;AAEF,SAAK,KAAK,MAAM;AAChB,SAAK,UAAU;AAAA;AAAA,EAGjB,eAAe,EAAC,WAAuD;AACrE,SAAK,yBAAyB,OAAO,gBAAgB;AAAA;AAAA,EAGvD,uBAAuB,EAAC,aAAiE;AACvF,SAAK,yBAAyB,OAAO,kBAAkB;AAAA;AAAA,EAGzD,eAAe,EAAC,WAAuD;AACrE,SAAK,yBAAyB,OAAO,gBAAgB;AAAA;AAAA,EAGvD,qBAAqB,EAAC,YAA8D;AAClF,SAAK,yBAAyB,OAAO,sBAAsB;AAAA;AAAA,EAG7D,6BAA6B,EAAC,YAAY,aAAuE;AAC/G,SAAK,yBAAyB,OAAO,8BAA8B,EAAC,YAAY;AAAA;AAAA,EAGlF,iBAAiB,EAAC,QAAsD;AACtE,SAAK,yBAAyB,OAAO,kBAAkB;AAAA;AAAA,EAGzD,yBAAyB,EAAC,WAAW,UAAgE;AACnG,SAAK,yBAAyB,OAAO,0BAA0B,EAAC,WAAW;AAAA;AAAA,EAG7E,kBAAkB,EAAC,SAAwD;AACzE,SAAK,yBAAyB,OAAO,mBAAmB;AAAA;AAAA,EAG1D,0BAA0B,EAAC,WAAW,QAAQ,WAAkE;AAC9G,SAAK,yBAAyB,OAAO,2BAA2B,EAAC,WAAW,QAAQ;AAAA;AAAA,EAGtF,eAAe,EAAC,WAAW,UAAU,eAAe,mBAAmB,yBACP;AAC9D,SAAK,yBACD,OAAO,gBAAgB,EAAC,WAAW,UAAU,eAAe,mBAAmB;AAAA;AAAA,EAGrF,kBAAkB,EAAC,WAAW,UAAU,eAAe,mBAAmB,yBACJ;AACpE,SAAK,yBACD,OAAO,mBAAmB,EAAC,WAAW,UAAU,eAAe,mBAAmB;AAAA;AAAA,EAGxF,mBAAmB,EAAC,WAAW,UAAU,eAAe,qBACgB;AACtE,SAAK,yBAAyB,OAAO,oBAAoB,EAAC,WAAW,UAAU,eAAe;AAAA;AAAA,EAGhG,sBAAsB,EAAC,WAAW,UAAU,eAAe,qBACmB;AAC5E,SAAK,yBACD,OAAO,uBAAuB,EAAC,WAAW,UAAU,eAAe;AAAA;AAAA,QAGnE,oBAAoB,WAC8B;AACtD,UAAM,mBAAmB,MAAM,KAAK,MAAM,uBAAuB,EAAC;AAClE,WAAO,iBAAiB;AAAA;AAAA;AAI5B,IAAI,SAAS,SAAS,SAAS,eAAe,EAAC,cAAc,IAAI,OAAO,WAAW,KAAK,WAAW;AAE5F,WAAW,SAAX,kBAAW,YAAX;AACL,8BAAiB;AACjB,gCAAmB;AACnB,8BAAiB;AACjB,0BAAa;AACb,4BAAe;AACf,oCAAuB;AACvB,4CAA+B;AAC/B,gCAAmB;AACnB,wCAA2B;AAC3B,iCAAoB;AACpB,yCAA4B;AAC5B,8BAAiB;AACjB,iCAAoB;AACpB,kCAAqB;AACrB,qCAAwB;AAfR;AAAA;",
  "names": []
}
