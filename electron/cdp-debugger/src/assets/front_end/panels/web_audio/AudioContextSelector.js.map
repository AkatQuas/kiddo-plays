{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/web_audio/AudioContextSelector.ts"],
  "sourcesContent": ["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport audioContextSelectorStyles from './audioContextSelector.css.js';\n\nimport type * as Protocol from '../../generated/protocol.js';\n\nconst UIStrings = {\n  /**\n  *@description Text that shows there is no recording\n  */\n  noRecordings: '(no recordings)',\n  /**\n  *@description Label prefix for an audio context selection\n  *@example {realtime (1e03ec)} PH1\n  */\n  audioContextS: 'Audio context: {PH1}',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/web_audio/AudioContextSelector.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class AudioContextSelector extends Common.ObjectWrapper.ObjectWrapper<EventTypes> implements\n    UI.SoftDropDown.Delegate<Protocol.WebAudio.BaseAudioContext> {\n  private readonly placeholderText: Platform.UIString.LocalizedString;\n  private readonly items: UI.ListModel.ListModel<Protocol.WebAudio.BaseAudioContext>;\n  private readonly dropDown: UI.SoftDropDown.SoftDropDown<Protocol.WebAudio.BaseAudioContext>;\n  private readonly toolbarItemInternal: UI.Toolbar.ToolbarItem;\n  private selectedContextInternal: Protocol.WebAudio.BaseAudioContext|null;\n  constructor() {\n    super();\n\n    this.placeholderText = i18nString(UIStrings.noRecordings);\n\n    this.items = new UI.ListModel.ListModel();\n\n    this.dropDown = new UI.SoftDropDown.SoftDropDown(this.items, this);\n    this.dropDown.setPlaceholderText(this.placeholderText);\n\n    this.toolbarItemInternal = new UI.Toolbar.ToolbarItem(this.dropDown.element);\n    this.toolbarItemInternal.setEnabled(false);\n    this.toolbarItemInternal.setTitle(i18nString(UIStrings.audioContextS, {PH1: this.placeholderText}));\n    this.items.addEventListener(UI.ListModel.Events.ItemsReplaced, this.onListItemReplaced, this);\n    this.toolbarItemInternal.element.classList.add('toolbar-has-dropdown');\n\n    this.selectedContextInternal = null;\n  }\n\n  private onListItemReplaced(): void {\n    const hasItems = Boolean(this.items.length);\n    this.toolbarItemInternal.setEnabled(hasItems);\n    if (!hasItems) {\n      this.toolbarItemInternal.setTitle(i18nString(UIStrings.audioContextS, {PH1: this.placeholderText}));\n    }\n  }\n\n  contextCreated({data: context}: Common.EventTarget.EventTargetEvent<Protocol.WebAudio.BaseAudioContext>): void {\n    this.items.insert(this.items.length, context);\n\n    // Select if this is the first item.\n    if (this.items.length === 1) {\n      this.dropDown.selectItem(context);\n    }\n  }\n\n  contextDestroyed({data: contextId}: Common.EventTarget.EventTargetEvent<string>): void {\n    const contextIndex =\n        this.items.findIndex((context: Protocol.WebAudio.BaseAudioContext): boolean => context.contextId === contextId);\n    if (contextIndex > -1) {\n      this.items.remove(contextIndex);\n    }\n  }\n\n  contextChanged({data: changedContext}: Common.EventTarget.EventTargetEvent<Protocol.WebAudio.BaseAudioContext>):\n      void {\n    const contextIndex = this.items.findIndex(\n        (context: Protocol.WebAudio.BaseAudioContext): boolean => context.contextId === changedContext.contextId);\n    if (contextIndex > -1) {\n      this.items.replace(contextIndex, changedContext);\n\n      // If the changed context is currently selected by user. Re-select it\n      // because the actual element is replaced with a new one.\n      if (this.selectedContextInternal && this.selectedContextInternal.contextId === changedContext.contextId) {\n        this.dropDown.selectItem(changedContext);\n      }\n    }\n  }\n\n  createElementForItem(item: Protocol.WebAudio.BaseAudioContext): Element {\n    const element = document.createElement('div');\n    const shadowRoot = UI.Utils.createShadowRootWithCoreStyles(\n        element, {cssFile: [audioContextSelectorStyles], delegatesFocus: undefined});\n    const title = shadowRoot.createChild('div', 'title');\n    UI.UIUtils.createTextChild(title, Platform.StringUtilities.trimEndWithMaxLength(this.titleFor(item), 100));\n    return element;\n  }\n\n  selectedContext(): Protocol.WebAudio.BaseAudioContext|null {\n    if (!this.selectedContextInternal) {\n      return null;\n    }\n\n    return this.selectedContextInternal;\n  }\n\n  highlightedItemChanged(\n      from: Protocol.WebAudio.BaseAudioContext|null, to: Protocol.WebAudio.BaseAudioContext|null,\n      fromElement: Element|null, toElement: Element|null): void {\n    if (fromElement) {\n      fromElement.classList.remove('highlighted');\n    }\n    if (toElement) {\n      toElement.classList.add('highlighted');\n    }\n  }\n\n  isItemSelectable(_item: Protocol.WebAudio.BaseAudioContext): boolean {\n    return true;\n  }\n\n  itemSelected(item: Protocol.WebAudio.BaseAudioContext|null): void {\n    if (!item) {\n      return;\n    }\n\n    // It's possible that no context is selected yet.\n    if (!this.selectedContextInternal || this.selectedContextInternal.contextId !== item.contextId) {\n      this.selectedContextInternal = item;\n      this.toolbarItemInternal.setTitle(i18nString(UIStrings.audioContextS, {PH1: this.titleFor(item)}));\n    }\n\n    this.dispatchEventToListeners(Events.ContextSelected, item);\n  }\n\n  reset(): void {\n    this.items.replaceAll([]);\n  }\n\n  titleFor(context: Protocol.WebAudio.BaseAudioContext): string {\n    return `${context.contextType} (${context.contextId.substr(-6)})`;\n  }\n\n  toolbarItem(): UI.Toolbar.ToolbarItem {\n    return this.toolbarItemInternal;\n  }\n}\n\nexport const enum Events {\n  ContextSelected = 'ContextSelected',\n}\n\nexport type EventTypes = {\n  [Events.ContextSelected]: Protocol.WebAudio.BaseAudioContext|null,\n};\n"],
  "mappings": "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",
  "names": []
}
