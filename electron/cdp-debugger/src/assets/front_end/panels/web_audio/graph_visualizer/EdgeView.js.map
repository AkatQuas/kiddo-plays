{
  "version": 3,
  "sources": ["../../../../../../../front_end/panels/web_audio/graph_visualizer/EdgeView.ts"],
  "sourcesContent": ["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type {NodeParamConnectionData, NodesConnectionData} from './GraphStyle.js';\nimport {generateInputPortId, generateOutputPortId, generateParamPortId} from './NodeView.js';\n\n// A class that represents an edge of a graph, including node-to-node connection,\n// and node-to-param connection.\nexport class EdgeView {\n  id: string;\n  type: EdgeTypes;\n  sourceId: string;\n  destinationId: string;\n  sourcePortId: string;\n  destinationPortId: string;\n\n  constructor(data: NodesConnectionData|NodeParamConnectionData, type: EdgeTypes) {\n    const edgePortsIds = generateEdgePortIdsByData(data, type);\n    if (!edgePortsIds) {\n      throw new Error('Unable to generate edge port IDs');\n    }\n\n    const {edgeId, sourcePortId, destinationPortId} = edgePortsIds;\n\n    this.id = edgeId;\n    this.type = type;\n    this.sourceId = data.sourceId;\n    this.destinationId = data.destinationId;\n    this.sourcePortId = sourcePortId;\n    this.destinationPortId = destinationPortId;\n  }\n}\n\n/**\n * Generates the edge id and source/destination portId using edge data and type.\n */\nexport const generateEdgePortIdsByData = (data: NodesConnectionData|NodeParamConnectionData, type: EdgeTypes): {\n  edgeId: string,\n  sourcePortId: string,\n  destinationPortId: string,\n}|null => {\n  if (!data.sourceId || !data.destinationId) {\n    console.error(`Undefined node message: ${JSON.stringify(data)}`);\n    return null;\n  }\n\n  const sourcePortId = generateOutputPortId(data.sourceId, data.sourceOutputIndex);\n  const destinationPortId = getDestinationPortId(data, type);\n\n  return {\n    edgeId: `${sourcePortId}->${destinationPortId}`,\n    sourcePortId: sourcePortId,\n    destinationPortId: destinationPortId,\n  };\n\n  /**\n   * Get the destination portId based on connection type.\n   */\n  function getDestinationPortId(data: NodesConnectionData|NodeParamConnectionData, type: EdgeTypes): string {\n    if (type === EdgeTypes.NodeToNode) {\n      const portData = (data as NodesConnectionData);\n      return generateInputPortId(data.destinationId, portData.destinationInputIndex);\n    }\n    if (type === EdgeTypes.NodeToParam) {\n      const portData = (data as NodeParamConnectionData);\n      return generateParamPortId(data.destinationId, portData.destinationParamId);\n    }\n    console.error(`Unknown edge type: ${type}`);\n    return '';\n  }\n};\n\n/**\n * Supported edge types.\n */\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum EdgeTypes {\n  NodeToNode = 'NodeToNode',\n  NodeToParam = 'NodeToParam',\n}\n"],
  "mappings": "AAKA;AAIO,sBAAe;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEA,YAAY,MAAmD,MAAiB;AAC9E,UAAM,eAAe,0BAA0B,MAAM;AACrD,QAAI,CAAC,cAAc;AACjB,YAAM,IAAI,MAAM;AAAA;AAGlB,UAAM,EAAC,QAAQ,cAAc,sBAAqB;AAElD,SAAK,KAAK;AACV,SAAK,OAAO;AACZ,SAAK,WAAW,KAAK;AACrB,SAAK,gBAAgB,KAAK;AAC1B,SAAK,eAAe;AACpB,SAAK,oBAAoB;AAAA;AAAA;AAOtB,aAAM,4BAA4B,CAAC,MAAmD,SAInF;AACR,MAAI,CAAC,KAAK,YAAY,CAAC,KAAK,eAAe;AACzC,YAAQ,MAAM,2BAA2B,KAAK,UAAU;AACxD,WAAO;AAAA;AAGT,QAAM,eAAe,qBAAqB,KAAK,UAAU,KAAK;AAC9D,QAAM,oBAAoB,qBAAqB,MAAM;AAErD,SAAO;AAAA,IACL,QAAQ,GAAG,iBAAiB;AAAA,IAC5B;AAAA,IACA;AAAA;AAMF,gCAA8B,OAAmD,OAAyB;AACxG,QAAI,UAAS,UAAU,YAAY;AACjC,YAAM,WAAY;AAClB,aAAO,oBAAoB,MAAK,eAAe,SAAS;AAAA;AAE1D,QAAI,UAAS,UAAU,aAAa;AAClC,YAAM,WAAY;AAClB,aAAO,oBAAoB,MAAK,eAAe,SAAS;AAAA;AAE1D,YAAQ,MAAM,sBAAsB;AACpC,WAAO;AAAA;AAAA;AASJ,WAAK,YAAL,kBAAK,eAAL;AACL,6BAAa;AACb,8BAAc;AAFJ;AAAA;",
  "names": []
}
