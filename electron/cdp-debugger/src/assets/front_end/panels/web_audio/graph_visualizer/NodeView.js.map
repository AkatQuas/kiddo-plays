{
  "version": 3,
  "sources": ["../../../../../../../front_end/panels/web_audio/graph_visualizer/NodeView.ts"],
  "sourcesContent": ["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as UI from '../../../ui/legacy/legacy.js';\n\nimport type {NodeCreationData, NodeLayout, Port} from './GraphStyle.js';\nimport {\n  BottomPaddingWithoutParam,\n  BottomPaddingWithParam,\n  LeftMarginOfText,\n  LeftSideTopPadding,\n  NodeLabelFontStyle,\n  ParamLabelFontStyle,\n  PortTypes,\n  RightMarginOfText,\n  TotalInputPortHeight,\n  TotalOutputPortHeight,\n  TotalParamPortHeight,\n} from './GraphStyle.js';\nimport {calculateInputPortXY, calculateOutputPortXY, calculateParamPortXY} from './NodeRendererUtility.js';\n\n// A class that represents a node of a graph, consisting of the information needed to layout the\n// node and display the node. Each node has zero or more ports, including input, output, and param ports.\nexport class NodeView {\n  id: string;\n  type: string;\n  numberOfInputs: number;\n  numberOfOutputs: number;\n  label: string;\n  size: {\n    width: number,\n    height: number,\n  };\n  position: Object|null;\n  private layout: NodeLayout;\n  ports: Map<string, Port>;\n  constructor(data: NodeCreationData, label: string) {\n    this.id = data.nodeId;\n    this.type = data.nodeType;\n    this.numberOfInputs = data.numberOfInputs;\n    this.numberOfOutputs = data.numberOfOutputs;\n    this.label = label;\n\n    this.size = {width: 0, height: 0};\n    // Position of the center. If null, it means the graph layout has not been computed\n    // and this node should not be rendered. It will be set after layouting.\n    this.position = null;\n\n    this.layout = {\n      inputPortSectionHeight: 0,\n      outputPortSectionHeight: 0,\n      maxTextLength: 0,\n      totalHeight: 0,\n    };\n    this.ports = new Map();\n\n    this.initialize(data);\n  }\n\n  private initialize(data: NodeCreationData): void {\n    this.updateNodeLayoutAfterAddingNode(data);\n    this.setupInputPorts();\n    this.setupOutputPorts();\n  }\n\n  /**\n   * Add an AudioParam to this node.\n   * Note for @method removeParamPort: removeParamPort is not necessary because it will only happen\n   * when the parent NodeView is destroyed. So there is no need to remove port individually\n   * when the whole NodeView will be gone.\n   */\n  addParamPort(paramId: string, paramType: string): void {\n    const paramPorts = this.getPortsByType(PortTypes.Param);\n    const numberOfParams = paramPorts.length;\n\n    const {x, y} = calculateParamPortXY(numberOfParams, this.layout.inputPortSectionHeight);\n    this.addPort({\n      id: generateParamPortId(this.id, paramId),\n      type: PortTypes.Param,\n      label: paramType,\n      x,\n      y,\n    });\n\n    this.updateNodeLayoutAfterAddingParam(numberOfParams + 1, paramType);\n\n    // The position of output ports may be changed if adding a param increases the total height.\n    this.setupOutputPorts();\n  }\n\n  getPortsByType(type: PortTypes): Port[] {\n    const result: Port[] = [];\n    this.ports.forEach(port => {\n      if (port.type === type) {\n        result.push(port);\n      }\n    });\n    return result;\n  }\n\n  /**\n   * Use number of inputs and outputs to compute the layout\n   * for text and ports.\n   * Credit: This function is mostly borrowed from Audion/\n   *      `audion.entryPoints.handleNodeCreated_()`.\n   *      https://github.com/google/audion/blob/master/js/entry-points/panel.js\n   */\n  private updateNodeLayoutAfterAddingNode(data: NodeCreationData): void {\n    // Even if there are no input ports, leave room for the node label.\n    const inputPortSectionHeight = TotalInputPortHeight * Math.max(1, data.numberOfInputs) + LeftSideTopPadding;\n    this.layout.inputPortSectionHeight = inputPortSectionHeight;\n    this.layout.outputPortSectionHeight = TotalOutputPortHeight * data.numberOfOutputs;\n\n    // Use the max of the left and right side heights as the total height.\n    // Include a little padding on the left.\n    this.layout.totalHeight =\n        Math.max(inputPortSectionHeight + BottomPaddingWithoutParam, this.layout.outputPortSectionHeight);\n\n    // Update max length with node label.\n    const nodeLabelLength = measureTextWidth(this.label, NodeLabelFontStyle);\n    this.layout.maxTextLength = Math.max(this.layout.maxTextLength, nodeLabelLength);\n\n    this.updateNodeSize();\n  }\n\n  /**\n   * After adding a param port, update the node layout based on the y value\n   * and label length.\n   */\n  private updateNodeLayoutAfterAddingParam(numberOfParams: number, paramType: string): void {\n    // The height after adding param ports and input ports.\n    // Include a little padding on the left.\n    const leftSideMaxHeight =\n        this.layout.inputPortSectionHeight + numberOfParams * TotalParamPortHeight + BottomPaddingWithParam;\n\n    // Use the max of the left and right side heights as the total height.\n    this.layout.totalHeight = Math.max(leftSideMaxHeight, this.layout.outputPortSectionHeight);\n\n    // Update max length with param label.\n    const paramLabelLength = measureTextWidth(paramType, ParamLabelFontStyle);\n    this.layout.maxTextLength = Math.max(this.layout.maxTextLength, paramLabelLength);\n\n    this.updateNodeSize();\n  }\n\n  private updateNodeSize(): void {\n    this.size = {\n      width: Math.ceil(LeftMarginOfText + this.layout.maxTextLength + RightMarginOfText),\n      height: this.layout.totalHeight,\n    };\n  }\n\n  // Setup the properties of each input port.\n  private setupInputPorts(): void {\n    for (let i = 0; i < this.numberOfInputs; i++) {\n      const {x, y} = calculateInputPortXY(i);\n      this.addPort({id: generateInputPortId(this.id, i), type: PortTypes.In, x, y, label: undefined});\n    }\n  }\n\n  // Setup the properties of each output port.\n  private setupOutputPorts(): void {\n    for (let i = 0; i < this.numberOfOutputs; i++) {\n      const portId = generateOutputPortId(this.id, i);\n      const {x, y} = calculateOutputPortXY(i, this.size, this.numberOfOutputs);\n      if (this.ports.has(portId)) {\n        // Update y value of an existing output port.\n        const port = this.ports.get(portId);\n        if (!port) {\n          throw new Error(`Unable to find port with id ${portId}`);\n        }\n\n        port.x = x;\n        port.y = y;\n      } else {\n        this.addPort({id: portId, type: PortTypes.Out, x, y, label: undefined});\n      }\n    }\n  }\n\n  private addPort(port: Port): void {\n    this.ports.set(port.id, port);\n  }\n}\n\n/**\n * Generates the port id for the input of node.\n */\nexport const generateInputPortId = (nodeId: string, inputIndex: number|undefined): string => {\n  return `${nodeId}-input-${inputIndex || 0}`;\n};\n\n/**\n * Generates the port id for the output of node.\n */\nexport const generateOutputPortId = (nodeId: string, outputIndex: number|undefined): string => {\n  return `${nodeId}-output-${outputIndex || 0}`;\n};\n\n/**\n * Generates the port id for the param of node.\n */\nexport const generateParamPortId = (nodeId: string, paramId: string): string => {\n  return `${nodeId}-param-${paramId}`;\n};\n\n// A label generator to convert UUID of node to shorter label to display.\n// Each graph should have its own generator since the node count starts from 0.\nexport class NodeLabelGenerator {\n  private totalNumberOfNodes: number;\n  constructor() {\n    this.totalNumberOfNodes = 0;\n  }\n\n  /**\n   * Generates the label for a node of a graph.\n   */\n  generateLabel(nodeType: string): string {\n    // To make the label concise, remove the suffix \"Node\" from the nodeType.\n    if (nodeType.endsWith('Node')) {\n      nodeType = nodeType.slice(0, nodeType.length - 4);\n    }\n\n    // Also, use an integer to replace the long UUID.\n    this.totalNumberOfNodes += 1;\n    const label = `${nodeType} ${this.totalNumberOfNodes}`;\n    return label;\n  }\n}\n\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet _contextForFontTextMeasuring: CanvasRenderingContext2D;\n\n/**\n * Get the text width using given font style.\n */\nexport const measureTextWidth = (text: string, fontStyle: string|null): number => {\n  if (!_contextForFontTextMeasuring) {\n    const context = document.createElement('canvas').getContext('2d');\n    if (!context) {\n      throw new Error('Unable to create canvas context.');\n    }\n\n    _contextForFontTextMeasuring = context;\n  }\n\n  const context = _contextForFontTextMeasuring;\n  context.save();\n  if (fontStyle) {\n    context.font = fontStyle;\n  }\n\n  const width = UI.UIUtils.measureTextWidth(context, text);\n  context.restore();\n  return width;\n};\n"],
  "mappings": "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",
  "names": []
}
