{
  "version": 3,
  "sources": ["../../../../../../../front_end/panels/web_audio/graph_visualizer/GraphView.ts"],
  "sourcesContent": ["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as Platform from '../../../core/platform/platform.js';\n\nimport {EdgeTypes, EdgeView, generateEdgePortIdsByData} from './EdgeView.js';\nimport type {\n  NodeCreationData, NodeParamConnectionData, NodeParamDisconnectionData, NodesConnectionData, NodesDisconnectionData,\n  NodesDisconnectionDataWithDestination, ParamCreationData} from './GraphStyle.js';\nimport {NodeLabelGenerator, NodeView} from './NodeView.js';\n\n// A class that tracks all the nodes and edges of an audio graph.\nexport class GraphView extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  contextId: string;\n  private readonly nodes: Map<string, NodeView>;\n  private readonly edges: Map<string, EdgeView>;\n  private readonly outboundEdgeMap: Platform.MapUtilities.Multimap<string, string>;\n  private readonly inboundEdgeMap: Platform.MapUtilities.Multimap<string, string>;\n  private readonly nodeLabelGenerator: NodeLabelGenerator;\n  private readonly paramIdToNodeIdMap: Map<string, string>;\n  constructor(contextId: string) {\n    super();\n\n    this.contextId = contextId;\n\n    this.nodes = new Map();\n    this.edges = new Map();\n\n    /**\n     * For each node ID, keep a set of all out-bound edge IDs.\n     */\n    this.outboundEdgeMap = new Platform.MapUtilities.Multimap();\n\n    /**\n     * For each node ID, keep a set of all in-bound edge IDs.\n     */\n    this.inboundEdgeMap = new Platform.MapUtilities.Multimap();\n\n    // Use concise node label to replace the long UUID.\n    // Each graph has its own label generator so that the label starts from 0.\n    this.nodeLabelGenerator = new NodeLabelGenerator();\n\n    /**\n     * For each param ID, save its corresponding node Id.\n      */\n    this.paramIdToNodeIdMap = new Map();\n  }\n\n  /**\n   * Add a node to the graph.\n   */\n  addNode(data: NodeCreationData): void {\n    const label = this.nodeLabelGenerator.generateLabel(data.nodeType);\n    const node = new NodeView(data, label);\n    this.nodes.set(data.nodeId, node);\n    this.notifyShouldRedraw();\n  }\n\n  /**\n   * Remove a node by id and all related edges.\n   */\n  removeNode(nodeId: string): void {\n    this.outboundEdgeMap.get(nodeId).forEach(edgeId => this.removeEdge(edgeId));\n    this.inboundEdgeMap.get(nodeId).forEach(edgeId => this.removeEdge(edgeId));\n    this.nodes.delete(nodeId);\n    this.notifyShouldRedraw();\n  }\n\n  /**\n   * Add a param to the node.\n   */\n  addParam(data: ParamCreationData): void {\n    const node = this.getNodeById(data.nodeId);\n    if (!node) {\n      console.error('AudioNode should be added before AudioParam');\n      return;\n    }\n    node.addParamPort(data.paramId, data.paramType);\n    this.paramIdToNodeIdMap.set(data.paramId, data.nodeId);\n    this.notifyShouldRedraw();\n  }\n\n  /**\n   * Remove a param.\n   */\n  removeParam(paramId: string): void {\n    // Only need to delete the entry from the param id to node id map.\n    this.paramIdToNodeIdMap.delete(paramId);\n    // No need to remove the param port from the node because removeParam will always happen with\n    // removeNode(). Since the whole Node will be gone, there is no need to remove port individually.\n  }\n\n  /**\n   * Add a Node-to-Node connection to the graph.\n   */\n  addNodeToNodeConnection(edgeData: NodesConnectionData): void {\n    const edge = new EdgeView(edgeData, EdgeTypes.NodeToNode);\n    this.addEdge(edge);\n  }\n\n  /**\n   * Remove a Node-to-Node connection from the graph.\n   */\n  removeNodeToNodeConnection(edgeData: NodesDisconnectionData): void {\n    if (edgeData.destinationId) {\n      // Remove a single edge if destinationId is specified.\n      const edgePortIds =\n          generateEdgePortIdsByData((edgeData as NodesDisconnectionDataWithDestination), EdgeTypes.NodeToNode);\n\n      if (!edgePortIds) {\n        throw new Error('Unable to generate edge port IDs');\n      }\n      const {edgeId} = edgePortIds;\n\n      this.removeEdge(edgeId);\n    } else {\n      // Otherwise, remove all outgoing edges from source node.\n      this.outboundEdgeMap.get(edgeData.sourceId).forEach(edgeId => this.removeEdge(edgeId));\n    }\n  }\n\n  /**\n   * Add a Node-to-Param connection to the graph.\n   */\n  addNodeToParamConnection(edgeData: NodeParamConnectionData): void {\n    const edge = new EdgeView(edgeData, EdgeTypes.NodeToParam);\n    this.addEdge(edge);\n  }\n\n  /**\n   * Remove a Node-to-Param connection from the graph.\n   */\n  removeNodeToParamConnection(edgeData: NodeParamDisconnectionData): void {\n    const edgePortIds = generateEdgePortIdsByData(edgeData, EdgeTypes.NodeToParam);\n    if (!edgePortIds) {\n      throw new Error('Unable to generate edge port IDs');\n    }\n\n    const {edgeId} = edgePortIds;\n    this.removeEdge(edgeId);\n  }\n\n  getNodeById(nodeId: string): NodeView|null {\n    return this.nodes.get(nodeId) || null;\n  }\n\n  getNodes(): Map<string, NodeView> {\n    return this.nodes;\n  }\n\n  getEdges(): Map<string, EdgeView> {\n    return this.edges;\n  }\n\n  getNodeIdByParamId(paramId: string): string|null {\n    return this.paramIdToNodeIdMap.get(paramId) || null;\n  }\n\n  /**\n   * Add an edge to the graph.\n   */\n  private addEdge(edge: EdgeView): void {\n    const sourceId = edge.sourceId;\n    // Do nothing if the edge already exists.\n    if (this.outboundEdgeMap.hasValue(sourceId, edge.id)) {\n      return;\n    }\n\n    this.edges.set(edge.id, edge);\n    this.outboundEdgeMap.set(sourceId, edge.id);\n    this.inboundEdgeMap.set(edge.destinationId, edge.id);\n\n    this.notifyShouldRedraw();\n  }\n\n  /**\n   * Given an edge id, remove the edge from the graph.\n   * Also remove the edge from inbound and outbound edge maps.\n   */\n  private removeEdge(edgeId: string): void {\n    const edge = this.edges.get(edgeId);\n    if (!edge) {\n      return;\n    }\n\n    this.outboundEdgeMap.delete(edge.sourceId, edgeId);\n    this.inboundEdgeMap.delete(edge.destinationId, edgeId);\n\n    this.edges.delete(edgeId);\n    this.notifyShouldRedraw();\n  }\n\n  private notifyShouldRedraw(): void {\n    this.dispatchEventToListeners(Events.ShouldRedraw, this);\n  }\n}\n\nexport const enum Events {\n  ShouldRedraw = 'ShouldRedraw',\n}\n\nexport type EventTypes = {\n  [Events.ShouldRedraw]: GraphView,\n};\n"],
  "mappings": "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",
  "names": []
}
