{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/web_audio/WebAudioView.ts"],
  "sourcesContent": ["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport webAudioStyles from './webAudio.css.js';\nimport type * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as GraphVisualizer from './graph_visualizer/graph_visualizer.js';\n\nimport {ContextDetailBuilder, ContextSummaryBuilder} from './AudioContextContentBuilder.js';\nimport {AudioContextSelector, Events as SelectorEvents} from './AudioContextSelector.js';\nimport {Events as ModelEvents, WebAudioModel} from './WebAudioModel.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Web Audio View\n  */\n  openAPageThatUsesWebAudioApiTo: 'Open a page that uses Web Audio API to start monitoring.',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/web_audio/WebAudioView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet webAudioViewInstance: WebAudioView;\nexport class WebAudioView extends UI.ThrottledWidget.ThrottledWidget implements\n    SDK.TargetManager.SDKModelObserver<WebAudioModel> {\n  private readonly contextSelector: AudioContextSelector;\n  private readonly contentContainer: HTMLElement;\n  private readonly detailViewContainer: HTMLElement;\n  private graphManager: GraphVisualizer.GraphManager.GraphManager;\n  private readonly landingPage: UI.Widget.VBox;\n  private readonly summaryBarContainer: HTMLElement;\n  constructor() {\n    super(true, 1000);\n    this.element.classList.add('web-audio-drawer');\n\n    // Creates the toolbar.\n    const toolbarContainer = this.contentElement.createChild('div', 'web-audio-toolbar-container vbox');\n    this.contextSelector = new AudioContextSelector();\n    const toolbar = new UI.Toolbar.Toolbar('web-audio-toolbar', toolbarContainer);\n    toolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButtonForId('components.collect-garbage'));\n    toolbar.appendSeparator();\n    toolbar.appendToolbarItem(this.contextSelector.toolbarItem());\n\n    // Create content container\n    this.contentContainer = this.contentElement.createChild('div', 'web-audio-content-container vbox flex-auto');\n\n    // Creates the detail view.\n    this.detailViewContainer = this.contentContainer.createChild('div', 'web-audio-details-container vbox flex-auto');\n\n    this.graphManager = new GraphVisualizer.GraphManager.GraphManager();\n\n    // Creates the landing page.\n    this.landingPage = new UI.Widget.VBox();\n    this.landingPage.contentElement.classList.add('web-audio-landing-page', 'fill');\n    this.landingPage.contentElement.appendChild(UI.Fragment.html`\n  <div>\n  <p>${i18nString(UIStrings.openAPageThatUsesWebAudioApiTo)}</p>\n  </div>\n  `);\n    this.landingPage.show(this.detailViewContainer);\n\n    // Creates the summary bar.\n    this.summaryBarContainer = this.contentContainer.createChild('div', 'web-audio-summary-container');\n\n    this.contextSelector.addEventListener(\n        SelectorEvents.ContextSelected,\n        (event: Common.EventTarget.EventTargetEvent<Protocol.WebAudio.BaseAudioContext|null>): void => {\n          const context = event.data;\n          if (context) {\n            this.updateDetailView(context);\n          }\n          void this.doUpdate();\n        });\n\n    SDK.TargetManager.TargetManager.instance().observeModels(WebAudioModel, this);\n  }\n\n  static instance(opts = {forceNew: null}): WebAudioView {\n    const {forceNew} = opts;\n    if (!webAudioViewInstance || forceNew) {\n      webAudioViewInstance = new WebAudioView();\n    }\n\n    return webAudioViewInstance;\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([webAudioStyles]);\n    for (const model of SDK.TargetManager.TargetManager.instance().models(WebAudioModel)) {\n      this.addEventListeners(model);\n    }\n  }\n\n  willHide(): void {\n    for (const model of SDK.TargetManager.TargetManager.instance().models(WebAudioModel)) {\n      this.removeEventListeners(model);\n    }\n  }\n\n  modelAdded(webAudioModel: WebAudioModel): void {\n    if (this.isShowing()) {\n      this.addEventListeners(webAudioModel);\n    }\n  }\n\n  modelRemoved(webAudioModel: WebAudioModel): void {\n    this.removeEventListeners(webAudioModel);\n  }\n\n  async doUpdate(): Promise<void> {\n    await this.pollRealtimeData();\n    this.update();\n  }\n\n  private addEventListeners(webAudioModel: WebAudioModel): void {\n    webAudioModel.ensureEnabled();\n    webAudioModel.addEventListener(ModelEvents.ContextCreated, this.contextCreated, this);\n    webAudioModel.addEventListener(ModelEvents.ContextDestroyed, this.contextDestroyed, this);\n    webAudioModel.addEventListener(ModelEvents.ContextChanged, this.contextChanged, this);\n    webAudioModel.addEventListener(ModelEvents.ModelReset, this.reset, this);\n    webAudioModel.addEventListener(ModelEvents.ModelSuspend, this.suspendModel, this);\n    webAudioModel.addEventListener(ModelEvents.AudioListenerCreated, this.audioListenerCreated, this);\n    webAudioModel.addEventListener(ModelEvents.AudioListenerWillBeDestroyed, this.audioListenerWillBeDestroyed, this);\n    webAudioModel.addEventListener(ModelEvents.AudioNodeCreated, this.audioNodeCreated, this);\n    webAudioModel.addEventListener(ModelEvents.AudioNodeWillBeDestroyed, this.audioNodeWillBeDestroyed, this);\n    webAudioModel.addEventListener(ModelEvents.AudioParamCreated, this.audioParamCreated, this);\n    webAudioModel.addEventListener(ModelEvents.AudioParamWillBeDestroyed, this.audioParamWillBeDestroyed, this);\n    webAudioModel.addEventListener(ModelEvents.NodesConnected, this.nodesConnected, this);\n    webAudioModel.addEventListener(ModelEvents.NodesDisconnected, this.nodesDisconnected, this);\n    webAudioModel.addEventListener(ModelEvents.NodeParamConnected, this.nodeParamConnected, this);\n    webAudioModel.addEventListener(ModelEvents.NodeParamDisconnected, this.nodeParamDisconnected, this);\n  }\n\n  private removeEventListeners(webAudioModel: WebAudioModel): void {\n    webAudioModel.removeEventListener(ModelEvents.ContextCreated, this.contextCreated, this);\n    webAudioModel.removeEventListener(ModelEvents.ContextDestroyed, this.contextDestroyed, this);\n    webAudioModel.removeEventListener(ModelEvents.ContextChanged, this.contextChanged, this);\n    webAudioModel.removeEventListener(ModelEvents.ModelReset, this.reset, this);\n    webAudioModel.removeEventListener(ModelEvents.ModelSuspend, this.suspendModel, this);\n    webAudioModel.removeEventListener(ModelEvents.AudioListenerCreated, this.audioListenerCreated, this);\n    webAudioModel.removeEventListener(\n        ModelEvents.AudioListenerWillBeDestroyed, this.audioListenerWillBeDestroyed, this);\n    webAudioModel.removeEventListener(ModelEvents.AudioNodeCreated, this.audioNodeCreated, this);\n    webAudioModel.removeEventListener(ModelEvents.AudioNodeWillBeDestroyed, this.audioNodeWillBeDestroyed, this);\n    webAudioModel.removeEventListener(ModelEvents.AudioParamCreated, this.audioParamCreated, this);\n    webAudioModel.removeEventListener(ModelEvents.AudioParamWillBeDestroyed, this.audioParamWillBeDestroyed, this);\n    webAudioModel.removeEventListener(ModelEvents.NodesConnected, this.nodesConnected, this);\n    webAudioModel.removeEventListener(ModelEvents.NodesDisconnected, this.nodesDisconnected, this);\n    webAudioModel.removeEventListener(ModelEvents.NodeParamConnected, this.nodeParamConnected, this);\n    webAudioModel.removeEventListener(ModelEvents.NodeParamDisconnected, this.nodeParamDisconnected, this);\n  }\n\n  private contextCreated(event: Common.EventTarget.EventTargetEvent<Protocol.WebAudio.BaseAudioContext>): void {\n    const context = event.data;\n    this.graphManager.createContext(context.contextId);\n    this.contextSelector.contextCreated(event);\n  }\n\n  private contextDestroyed(event: Common.EventTarget.EventTargetEvent<Protocol.WebAudio.GraphObjectId>): void {\n    const contextId = event.data;\n    this.graphManager.destroyContext(contextId);\n    this.contextSelector.contextDestroyed(event);\n  }\n\n  private contextChanged(event: Common.EventTarget.EventTargetEvent<Protocol.WebAudio.BaseAudioContext>): void {\n    const context = event.data;\n    if (!this.graphManager.hasContext(context.contextId)) {\n      return;\n    }\n\n    this.contextSelector.contextChanged(event);\n  }\n\n  private reset(): void {\n    if (this.landingPage.isShowing()) {\n      this.landingPage.detach();\n    }\n    this.contextSelector.reset();\n    this.detailViewContainer.removeChildren();\n    this.landingPage.show(this.detailViewContainer);\n    this.graphManager.clearGraphs();\n  }\n\n  private suspendModel(): void {\n    this.graphManager.clearGraphs();\n  }\n\n  private audioListenerCreated(event: Common.EventTarget.EventTargetEvent<Protocol.WebAudio.AudioListener>): void {\n    const listener = event.data;\n    const graph = this.graphManager.getGraph(listener.contextId);\n    if (!graph) {\n      return;\n    }\n    graph.addNode({\n      nodeId: listener.listenerId,\n      nodeType: 'Listener',\n      numberOfInputs: 0,\n      numberOfOutputs: 0,\n    });\n  }\n\n  private audioListenerWillBeDestroyed(\n      event: Common.EventTarget.EventTargetEvent<Protocol.WebAudio.AudioListenerWillBeDestroyedEvent>): void {\n    const {contextId, listenerId} = event.data;\n    const graph = this.graphManager.getGraph(contextId);\n    if (!graph) {\n      return;\n    }\n    graph.removeNode(listenerId);\n  }\n\n  private audioNodeCreated(event: Common.EventTarget.EventTargetEvent<Protocol.WebAudio.AudioNode>): void {\n    const node = event.data;\n    const graph = this.graphManager.getGraph(node.contextId);\n    if (!graph) {\n      return;\n    }\n    graph.addNode({\n      nodeId: node.nodeId,\n      nodeType: node.nodeType,\n      numberOfInputs: node.numberOfInputs,\n      numberOfOutputs: node.numberOfOutputs,\n    });\n  }\n\n  private audioNodeWillBeDestroyed(\n      event: Common.EventTarget.EventTargetEvent<Protocol.WebAudio.AudioNodeWillBeDestroyedEvent>): void {\n    const {contextId, nodeId} = event.data;\n    const graph = this.graphManager.getGraph(contextId);\n    if (!graph) {\n      return;\n    }\n    graph.removeNode(nodeId);\n  }\n\n  private audioParamCreated(event: Common.EventTarget.EventTargetEvent<Protocol.WebAudio.AudioParam>): void {\n    const param = event.data;\n    const graph = this.graphManager.getGraph(param.contextId);\n    if (!graph) {\n      return;\n    }\n    graph.addParam({\n      paramId: param.paramId,\n      paramType: param.paramType,\n      nodeId: param.nodeId,\n    });\n  }\n\n  private audioParamWillBeDestroyed(\n      event: Common.EventTarget.EventTargetEvent<Protocol.WebAudio.AudioParamWillBeDestroyedEvent>): void {\n    const {contextId, paramId} = event.data;\n    const graph = this.graphManager.getGraph(contextId);\n    if (!graph) {\n      return;\n    }\n    graph.removeParam(paramId);\n  }\n\n  private nodesConnected(event: Common.EventTarget.EventTargetEvent<Protocol.WebAudio.NodesConnectedEvent>): void {\n    const {contextId, sourceId, destinationId, sourceOutputIndex, destinationInputIndex} = event.data;\n    const graph = this.graphManager.getGraph(contextId);\n    if (!graph) {\n      return;\n    }\n    graph.addNodeToNodeConnection({\n      sourceId,\n      destinationId,\n      sourceOutputIndex,\n      destinationInputIndex,\n    });\n  }\n\n  private nodesDisconnected(event: Common.EventTarget.EventTargetEvent<Protocol.WebAudio.NodesDisconnectedEvent>):\n      void {\n    const {contextId, sourceId, destinationId, sourceOutputIndex, destinationInputIndex} = event.data;\n    const graph = this.graphManager.getGraph(contextId);\n    if (!graph) {\n      return;\n    }\n    graph.removeNodeToNodeConnection({\n      sourceId,\n      destinationId,\n      sourceOutputIndex,\n      destinationInputIndex,\n    });\n  }\n\n  private nodeParamConnected(event: Common.EventTarget.EventTargetEvent<Protocol.WebAudio.NodeParamConnectedEvent>):\n      void {\n    const {contextId, sourceId, destinationId, sourceOutputIndex} = event.data;\n    const graph = this.graphManager.getGraph(contextId);\n    if (!graph) {\n      return;\n    }\n    // Since the destinationId is AudioParamId, we need to find the nodeId as the\n    // real destinationId.\n    const nodeId = graph.getNodeIdByParamId(destinationId);\n    if (!nodeId) {\n      return;\n    }\n    graph.addNodeToParamConnection({\n      sourceId,\n      destinationId: nodeId,\n      sourceOutputIndex,\n      destinationParamId: destinationId,\n    });\n  }\n\n  private nodeParamDisconnected(\n      event: Common.EventTarget.EventTargetEvent<Protocol.WebAudio.NodeParamDisconnectedEvent>): void {\n    const {contextId, sourceId, destinationId, sourceOutputIndex} = event.data;\n    const graph = this.graphManager.getGraph(contextId);\n    if (!graph) {\n      return;\n    }\n    // Since the destinationId is AudioParamId, we need to find the nodeId as the\n    // real destinationId.\n    const nodeId = graph.getNodeIdByParamId(destinationId);\n    if (!nodeId) {\n      return;\n    }\n    graph.removeNodeToParamConnection({\n      sourceId,\n      destinationId: nodeId,\n      sourceOutputIndex,\n      destinationParamId: destinationId,\n    });\n  }\n\n  private updateDetailView(context: Protocol.WebAudio.BaseAudioContext): void {\n    if (this.landingPage.isShowing()) {\n      this.landingPage.detach();\n    }\n    const detailBuilder = new ContextDetailBuilder(context);\n    this.detailViewContainer.removeChildren();\n    this.detailViewContainer.appendChild(detailBuilder.getFragment());\n  }\n\n  private updateSummaryBar(contextId: string, contextRealtimeData: Protocol.WebAudio.ContextRealtimeData): void {\n    const summaryBuilder = new ContextSummaryBuilder(contextId, contextRealtimeData);\n    this.summaryBarContainer.removeChildren();\n    this.summaryBarContainer.appendChild(summaryBuilder.getFragment());\n  }\n\n  private clearSummaryBar(): void {\n    this.summaryBarContainer.removeChildren();\n  }\n\n  private async pollRealtimeData(): Promise<void> {\n    const context = this.contextSelector.selectedContext();\n    if (!context) {\n      this.clearSummaryBar();\n      return;\n    }\n\n    for (const model of SDK.TargetManager.TargetManager.instance().models(WebAudioModel)) {\n      // Display summary only for real-time context.\n      if (context.contextType === 'realtime') {\n        if (!this.graphManager.hasContext(context.contextId)) {\n          continue;\n        }\n        const realtimeData = await model.requestRealtimeData(context.contextId);\n        if (realtimeData) {\n          this.updateSummaryBar(context.contextId, realtimeData);\n        }\n      } else {\n        this.clearSummaryBar();\n      }\n    }\n  }\n}\n"],
  "mappings": "AAIA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA,MAAM,YAAY;AAAA,EAIhB,gCAAgC;AAAA;AAElC,MAAM,OAAO,KAAK,KAAK,kBAAkB,oCAAoC;AAC7E,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAEhE,IAAI;AACG,kCAA2B,GAAG,gBAAgB,gBACC;AAAA,EACnC;AAAA,EACA;AAAA,EACA;AAAA,EACT;AAAA,EACS;AAAA,EACA;AAAA,EACjB,cAAc;AACZ,UAAM,MAAM;AACZ,SAAK,QAAQ,UAAU,IAAI;AAG3B,UAAM,mBAAmB,KAAK,eAAe,YAAY,OAAO;AAChE,SAAK,kBAAkB,IAAI;AAC3B,UAAM,UAAU,IAAI,GAAG,QAAQ,QAAQ,qBAAqB;AAC5D,YAAQ,kBAAkB,GAAG,QAAQ,QAAQ,wBAAwB;AACrE,YAAQ;AACR,YAAQ,kBAAkB,KAAK,gBAAgB;AAG/C,SAAK,mBAAmB,KAAK,eAAe,YAAY,OAAO;AAG/D,SAAK,sBAAsB,KAAK,iBAAiB,YAAY,OAAO;AAEpE,SAAK,eAAe,IAAI,gBAAgB,aAAa;AAGrD,SAAK,cAAc,IAAI,GAAG,OAAO;AACjC,SAAK,YAAY,eAAe,UAAU,IAAI,0BAA0B;AACxE,SAAK,YAAY,eAAe,YAAY,GAAG,SAAS;AAAA;AAAA,OAErD,WAAW,UAAU;AAAA;AAAA;AAGxB,SAAK,YAAY,KAAK,KAAK;AAG3B,SAAK,sBAAsB,KAAK,iBAAiB,YAAY,OAAO;AAEpE,SAAK,gBAAgB,iBACjB,eAAe,iBACf,CAAC,UAA8F;AAC7F,YAAM,UAAU,MAAM;AACtB,UAAI,SAAS;AACX,aAAK,iBAAiB;AAAA;AAExB,WAAK,KAAK;AAAA;AAGhB,QAAI,cAAc,cAAc,WAAW,cAAc,eAAe;AAAA;AAAA,SAGnE,SAAS,OAAO,EAAC,UAAU,QAAqB;AACrD,UAAM,EAAC,aAAY;AACnB,QAAI,CAAC,wBAAwB,UAAU;AACrC,6BAAuB,IAAI;AAAA;AAG7B,WAAO;AAAA;AAAA,EAGT,WAAiB;AACf,UAAM;AACN,SAAK,iBAAiB,CAAC;AACvB,eAAW,SAAS,IAAI,cAAc,cAAc,WAAW,OAAO,gBAAgB;AACpF,WAAK,kBAAkB;AAAA;AAAA;AAAA,EAI3B,WAAiB;AACf,eAAW,SAAS,IAAI,cAAc,cAAc,WAAW,OAAO,gBAAgB;AACpF,WAAK,qBAAqB;AAAA;AAAA;AAAA,EAI9B,WAAW,eAAoC;AAC7C,QAAI,KAAK,aAAa;AACpB,WAAK,kBAAkB;AAAA;AAAA;AAAA,EAI3B,aAAa,eAAoC;AAC/C,SAAK,qBAAqB;AAAA;AAAA,QAGtB,WAA0B;AAC9B,UAAM,KAAK;AACX,SAAK;AAAA;AAAA,EAGC,kBAAkB,eAAoC;AAC5D,kBAAc;AACd,kBAAc,iBAAiB,YAAY,gBAAgB,KAAK,gBAAgB;AAChF,kBAAc,iBAAiB,YAAY,kBAAkB,KAAK,kBAAkB;AACpF,kBAAc,iBAAiB,YAAY,gBAAgB,KAAK,gBAAgB;AAChF,kBAAc,iBAAiB,YAAY,YAAY,KAAK,OAAO;AACnE,kBAAc,iBAAiB,YAAY,cAAc,KAAK,cAAc;AAC5E,kBAAc,iBAAiB,YAAY,sBAAsB,KAAK,sBAAsB;AAC5F,kBAAc,iBAAiB,YAAY,8BAA8B,KAAK,8BAA8B;AAC5G,kBAAc,iBAAiB,YAAY,kBAAkB,KAAK,kBAAkB;AACpF,kBAAc,iBAAiB,YAAY,0BAA0B,KAAK,0BAA0B;AACpG,kBAAc,iBAAiB,YAAY,mBAAmB,KAAK,mBAAmB;AACtF,kBAAc,iBAAiB,YAAY,2BAA2B,KAAK,2BAA2B;AACtG,kBAAc,iBAAiB,YAAY,gBAAgB,KAAK,gBAAgB;AAChF,kBAAc,iBAAiB,YAAY,mBAAmB,KAAK,mBAAmB;AACtF,kBAAc,iBAAiB,YAAY,oBAAoB,KAAK,oBAAoB;AACxF,kBAAc,iBAAiB,YAAY,uBAAuB,KAAK,uBAAuB;AAAA;AAAA,EAGxF,qBAAqB,eAAoC;AAC/D,kBAAc,oBAAoB,YAAY,gBAAgB,KAAK,gBAAgB;AACnF,kBAAc,oBAAoB,YAAY,kBAAkB,KAAK,kBAAkB;AACvF,kBAAc,oBAAoB,YAAY,gBAAgB,KAAK,gBAAgB;AACnF,kBAAc,oBAAoB,YAAY,YAAY,KAAK,OAAO;AACtE,kBAAc,oBAAoB,YAAY,cAAc,KAAK,cAAc;AAC/E,kBAAc,oBAAoB,YAAY,sBAAsB,KAAK,sBAAsB;AAC/F,kBAAc,oBACV,YAAY,8BAA8B,KAAK,8BAA8B;AACjF,kBAAc,oBAAoB,YAAY,kBAAkB,KAAK,kBAAkB;AACvF,kBAAc,oBAAoB,YAAY,0BAA0B,KAAK,0BAA0B;AACvG,kBAAc,oBAAoB,YAAY,mBAAmB,KAAK,mBAAmB;AACzF,kBAAc,oBAAoB,YAAY,2BAA2B,KAAK,2BAA2B;AACzG,kBAAc,oBAAoB,YAAY,gBAAgB,KAAK,gBAAgB;AACnF,kBAAc,oBAAoB,YAAY,mBAAmB,KAAK,mBAAmB;AACzF,kBAAc,oBAAoB,YAAY,oBAAoB,KAAK,oBAAoB;AAC3F,kBAAc,oBAAoB,YAAY,uBAAuB,KAAK,uBAAuB;AAAA;AAAA,EAG3F,eAAe,OAAsF;AAC3G,UAAM,UAAU,MAAM;AACtB,SAAK,aAAa,cAAc,QAAQ;AACxC,SAAK,gBAAgB,eAAe;AAAA;AAAA,EAG9B,iBAAiB,OAAmF;AAC1G,UAAM,YAAY,MAAM;AACxB,SAAK,aAAa,eAAe;AACjC,SAAK,gBAAgB,iBAAiB;AAAA;AAAA,EAGhC,eAAe,OAAsF;AAC3G,UAAM,UAAU,MAAM;AACtB,QAAI,CAAC,KAAK,aAAa,WAAW,QAAQ,YAAY;AACpD;AAAA;AAGF,SAAK,gBAAgB,eAAe;AAAA;AAAA,EAG9B,QAAc;AACpB,QAAI,KAAK,YAAY,aAAa;AAChC,WAAK,YAAY;AAAA;AAEnB,SAAK,gBAAgB;AACrB,SAAK,oBAAoB;AACzB,SAAK,YAAY,KAAK,KAAK;AAC3B,SAAK,aAAa;AAAA;AAAA,EAGZ,eAAqB;AAC3B,SAAK,aAAa;AAAA;AAAA,EAGZ,qBAAqB,OAAmF;AAC9G,UAAM,WAAW,MAAM;AACvB,UAAM,QAAQ,KAAK,aAAa,SAAS,SAAS;AAClD,QAAI,CAAC,OAAO;AACV;AAAA;AAEF,UAAM,QAAQ;AAAA,MACZ,QAAQ,SAAS;AAAA,MACjB,UAAU;AAAA,MACV,gBAAgB;AAAA,MAChB,iBAAiB;AAAA;AAAA;AAAA,EAIb,6BACJ,OAAuG;AACzG,UAAM,EAAC,WAAW,eAAc,MAAM;AACtC,UAAM,QAAQ,KAAK,aAAa,SAAS;AACzC,QAAI,CAAC,OAAO;AACV;AAAA;AAEF,UAAM,WAAW;AAAA;AAAA,EAGX,iBAAiB,OAA+E;AACtG,UAAM,OAAO,MAAM;AACnB,UAAM,QAAQ,KAAK,aAAa,SAAS,KAAK;AAC9C,QAAI,CAAC,OAAO;AACV;AAAA;AAEF,UAAM,QAAQ;AAAA,MACZ,QAAQ,KAAK;AAAA,MACb,UAAU,KAAK;AAAA,MACf,gBAAgB,KAAK;AAAA,MACrB,iBAAiB,KAAK;AAAA;AAAA;AAAA,EAIlB,yBACJ,OAAmG;AACrG,UAAM,EAAC,WAAW,WAAU,MAAM;AAClC,UAAM,QAAQ,KAAK,aAAa,SAAS;AACzC,QAAI,CAAC,OAAO;AACV;AAAA;AAEF,UAAM,WAAW;AAAA;AAAA,EAGX,kBAAkB,OAAgF;AACxG,UAAM,QAAQ,MAAM;AACpB,UAAM,QAAQ,KAAK,aAAa,SAAS,MAAM;AAC/C,QAAI,CAAC,OAAO;AACV;AAAA;AAEF,UAAM,SAAS;AAAA,MACb,SAAS,MAAM;AAAA,MACf,WAAW,MAAM;AAAA,MACjB,QAAQ,MAAM;AAAA;AAAA;AAAA,EAIV,0BACJ,OAAoG;AACtG,UAAM,EAAC,WAAW,YAAW,MAAM;AACnC,UAAM,QAAQ,KAAK,aAAa,SAAS;AACzC,QAAI,CAAC,OAAO;AACV;AAAA;AAEF,UAAM,YAAY;AAAA;AAAA,EAGZ,eAAe,OAAyF;AAC9G,UAAM,EAAC,WAAW,UAAU,eAAe,mBAAmB,0BAAyB,MAAM;AAC7F,UAAM,QAAQ,KAAK,aAAa,SAAS;AACzC,QAAI,CAAC,OAAO;AACV;AAAA;AAEF,UAAM,wBAAwB;AAAA,MAC5B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;AAAA;AAAA,EAII,kBAAkB,OACjB;AACP,UAAM,EAAC,WAAW,UAAU,eAAe,mBAAmB,0BAAyB,MAAM;AAC7F,UAAM,QAAQ,KAAK,aAAa,SAAS;AACzC,QAAI,CAAC,OAAO;AACV;AAAA;AAEF,UAAM,2BAA2B;AAAA,MAC/B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;AAAA;AAAA,EAII,mBAAmB,OAClB;AACP,UAAM,EAAC,WAAW,UAAU,eAAe,sBAAqB,MAAM;AACtE,UAAM,QAAQ,KAAK,aAAa,SAAS;AACzC,QAAI,CAAC,OAAO;AACV;AAAA;AAIF,UAAM,SAAS,MAAM,mBAAmB;AACxC,QAAI,CAAC,QAAQ;AACX;AAAA;AAEF,UAAM,yBAAyB;AAAA,MAC7B;AAAA,MACA,eAAe;AAAA,MACf;AAAA,MACA,oBAAoB;AAAA;AAAA;AAAA,EAIhB,sBACJ,OAAgG;AAClG,UAAM,EAAC,WAAW,UAAU,eAAe,sBAAqB,MAAM;AACtE,UAAM,QAAQ,KAAK,aAAa,SAAS;AACzC,QAAI,CAAC,OAAO;AACV;AAAA;AAIF,UAAM,SAAS,MAAM,mBAAmB;AACxC,QAAI,CAAC,QAAQ;AACX;AAAA;AAEF,UAAM,4BAA4B;AAAA,MAChC;AAAA,MACA,eAAe;AAAA,MACf;AAAA,MACA,oBAAoB;AAAA;AAAA;AAAA,EAIhB,iBAAiB,SAAmD;AAC1E,QAAI,KAAK,YAAY,aAAa;AAChC,WAAK,YAAY;AAAA;AAEnB,UAAM,gBAAgB,IAAI,qBAAqB;AAC/C,SAAK,oBAAoB;AACzB,SAAK,oBAAoB,YAAY,cAAc;AAAA;AAAA,EAG7C,iBAAiB,WAAmB,qBAAkE;AAC5G,UAAM,iBAAiB,IAAI,sBAAsB,WAAW;AAC5D,SAAK,oBAAoB;AACzB,SAAK,oBAAoB,YAAY,eAAe;AAAA;AAAA,EAG9C,kBAAwB;AAC9B,SAAK,oBAAoB;AAAA;AAAA,QAGb,mBAAkC;AAC9C,UAAM,UAAU,KAAK,gBAAgB;AACrC,QAAI,CAAC,SAAS;AACZ,WAAK;AACL;AAAA;AAGF,eAAW,SAAS,IAAI,cAAc,cAAc,WAAW,OAAO,gBAAgB;AAEpF,UAAI,QAAQ,gBAAgB,YAAY;AACtC,YAAI,CAAC,KAAK,aAAa,WAAW,QAAQ,YAAY;AACpD;AAAA;AAEF,cAAM,eAAe,MAAM,MAAM,oBAAoB,QAAQ;AAC7D,YAAI,cAAc;AAChB,eAAK,iBAAiB,QAAQ,WAAW;AAAA;AAAA,aAEtC;AACL,aAAK;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
