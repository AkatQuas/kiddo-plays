{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/search/SearchConfig.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport type * as Workspace from '../../models/workspace/workspace.js';\n\nexport class SearchConfig implements Workspace.Workspace.ProjectSearchConfig {\n  private readonly queryInternal: string;\n  private readonly ignoreCaseInternal: boolean;\n  private readonly isRegexInternal: boolean;\n  private fileQueries?: QueryTerm[];\n  private queriesInternal?: string[];\n  private fileRegexQueries?: RegexQuery[];\n  constructor(query: string, ignoreCase: boolean, isRegex: boolean) {\n    this.queryInternal = query;\n    this.ignoreCaseInternal = ignoreCase;\n    this.isRegexInternal = isRegex;\n    this.parse();\n  }\n\n  static fromPlainObject(object: {\n    query: string,\n    ignoreCase: boolean,\n    isRegex: boolean,\n  }): SearchConfig {\n    return new SearchConfig(object.query, object.ignoreCase, object.isRegex);\n  }\n\n  query(): string {\n    return this.queryInternal;\n  }\n\n  ignoreCase(): boolean {\n    return this.ignoreCaseInternal;\n  }\n\n  isRegex(): boolean {\n    return this.isRegexInternal;\n  }\n\n  toPlainObject(): {\n    query: string,\n    ignoreCase: boolean,\n    isRegex: boolean,\n  } {\n    return {query: this.query(), ignoreCase: this.ignoreCase(), isRegex: this.isRegex()};\n  }\n\n  private parse(): void {\n    // Inside double quotes: any symbol except double quote and backslash or any symbol escaped with a backslash.\n    const quotedPattern = /\"([^\\\\\"]|\\\\.)+\"/;\n    // A word is a sequence of any symbols except space and backslash or any symbols escaped with a backslash, that does not start with file:.\n    const unquotedWordPattern = /(\\s*(?!-?f(ile)?:)[^\\\\ ]|\\\\.)+/;\n    const unquotedPattern = unquotedWordPattern.source + '(\\\\s+' + unquotedWordPattern.source + ')*';\n\n    const pattern = [\n      '(\\\\s*' + FilePatternRegex.source + '\\\\s*)',\n      '(' + quotedPattern.source + ')',\n      '(' + unquotedPattern + ')',\n    ].join('|');\n    const regexp = new RegExp(pattern, 'g');\n    const queryParts = this.queryInternal.match(regexp) || [];\n    this.fileQueries = [];\n\n    this.queriesInternal = [];\n\n    for (let i = 0; i < queryParts.length; ++i) {\n      const queryPart = queryParts[i];\n      if (!queryPart) {\n        continue;\n      }\n      const fileQuery = this.parseFileQuery(queryPart);\n      if (fileQuery) {\n        this.fileQueries.push(fileQuery);\n        this.fileRegexQueries = this.fileRegexQueries || [];\n        this.fileRegexQueries.push(\n            {regex: new RegExp(fileQuery.text, this.ignoreCase() ? 'i' : ''), isNegative: fileQuery.isNegative});\n        continue;\n      }\n      if (this.isRegexInternal) {\n        this.queriesInternal.push(queryPart);\n        continue;\n      }\n      if (queryPart.startsWith('\"')) {\n        if (!queryPart.endsWith('\"')) {\n          continue;\n        }\n        this.queriesInternal.push(this.parseQuotedQuery(queryPart));\n        continue;\n      }\n      this.queriesInternal.push(this.parseUnquotedQuery(queryPart));\n    }\n  }\n\n  filePathMatchesFileQuery(filePath: Platform.DevToolsPath.RawPathString|\n                           Platform.DevToolsPath.EncodedPathString|Platform.DevToolsPath.UrlString): boolean {\n    if (!this.fileRegexQueries) {\n      return true;\n    }\n    for (let i = 0; i < this.fileRegexQueries.length; ++i) {\n      if (Boolean(filePath.match(this.fileRegexQueries[i].regex)) === this.fileRegexQueries[i].isNegative) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  queries(): string[] {\n    return this.queriesInternal || [];\n  }\n\n  private parseUnquotedQuery(query: string): string {\n    return query.replace(/\\\\(.)/g, '$1');\n  }\n\n  private parseQuotedQuery(query: string): string {\n    return query.substring(1, query.length - 1).replace(/\\\\(.)/g, '$1');\n  }\n\n  private parseFileQuery(query: string): QueryTerm|null {\n    const match = query.match(FilePatternRegex);\n    if (!match) {\n      return null;\n    }\n    const isNegative = Boolean(match[1]);\n    query = match[3];\n    let result = '';\n    for (let i = 0; i < query.length; ++i) {\n      const char = query[i];\n      if (char === '*') {\n        result += '.*';\n      } else if (char === '\\\\') {\n        ++i;\n        const nextChar = query[i];\n        if (nextChar === ' ') {\n          result += ' ';\n        }\n      } else {\n        if (Platform.StringUtilities.regexSpecialCharacters().indexOf(query.charAt(i)) !== -1) {\n          result += '\\\\';\n        }\n        result += query.charAt(i);\n      }\n    }\n    return new QueryTerm(result, isNegative);\n  }\n}\n\n// After file: prefix: any symbol except space and backslash or any symbol escaped with a backslash.\nexport const FilePatternRegex = /(-)?f(ile)?:((?:[^\\\\ ]|\\\\.)+)/;\n\nexport class QueryTerm {\n  text: string;\n  isNegative: boolean;\n  constructor(text: string, isNegative: boolean) {\n    this.text = text;\n    this.isNegative = isNegative;\n  }\n}\n\nexport interface SearchResult {\n  label(): string;\n\n  description(): string;\n\n  matchesCount(): number;\n\n  matchLabel(index: number): string;\n\n  matchLineContent(index: number): string;\n\n  matchRevealable(index: number): Object;\n}\n\nexport interface SearchScope {\n  performSearch(\n      searchConfig: SearchConfig, progress: Common.Progress.Progress,\n      searchResultCallback: (arg0: SearchResult) => void,\n      searchFinishedCallback: (arg0: boolean) => void): void|Promise<void>;\n\n  performIndexing(progress: Common.Progress.Progress): void;\n\n  stopSearch(): void;\n}\nexport interface RegexQuery {\n  regex: RegExp;\n  isNegative: boolean;\n}\n"],
  "mappings": "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",
  "names": []
}
