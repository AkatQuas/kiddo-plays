{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/search/SearchResultsPane.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport searchResultsPaneStyles from './searchResultsPane.css.js';\n\nimport type {SearchConfig, SearchResult} from './SearchConfig.js';\n\nconst UIStrings = {\n  /**\n  *@description Accessibility label for number of matches in each file in search results pane\n  *@example {2} PH1\n  */\n  matchesCountS: 'Matches Count {PH1}',\n  /**\n  *@description Search result label for results in the Search tool\n  *@example {2} PH1\n  */\n  lineS: 'Line {PH1}',\n  /**\n  *@description Text in Search Results Pane of the Search tab\n  *@example {2} PH1\n  */\n  showDMore: 'Show {PH1} more',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/search/SearchResultsPane.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class SearchResultsPane extends UI.Widget.VBox {\n  private readonly searchConfig: SearchConfig;\n  private readonly searchResults: SearchResult[];\n  private readonly treeElements: SearchResultsTreeElement[];\n  private treeOutline: UI.TreeOutline.TreeOutlineInShadow;\n  private matchesExpandedCount: number;\n\n  constructor(searchConfig: SearchConfig) {\n    super(true);\n    this.searchConfig = searchConfig;\n\n    this.searchResults = [];\n    this.treeElements = [];\n    this.treeOutline = new UI.TreeOutline.TreeOutlineInShadow();\n    this.treeOutline.hideOverflow();\n\n    this.contentElement.appendChild(this.treeOutline.element);\n\n    this.matchesExpandedCount = 0;\n  }\n\n  addSearchResult(searchResult: SearchResult): void {\n    this.searchResults.push(searchResult);\n    this.addTreeElement(searchResult);\n  }\n\n  showAllMatches(): void {\n    this.treeElements.forEach(treeElement => {\n      treeElement.expand();\n      treeElement.showAllMatches();\n    });\n  }\n\n  collapseAllResults(): void {\n    this.treeElements.forEach(treeElement => {\n      treeElement.collapse();\n    });\n  }\n\n  private addTreeElement(searchResult: SearchResult): void {\n    const treeElement = new SearchResultsTreeElement(this.searchConfig, searchResult);\n    this.treeOutline.appendChild(treeElement);\n    if (!this.treeOutline.selectedTreeElement) {\n      treeElement.select(/* omitFocus */ true, /* selectedByUser */ true);\n    }\n    // Expand until at least a certain number of matches is expanded.\n    if (this.matchesExpandedCount < matchesExpandedByDefault) {\n      treeElement.expand();\n    }\n    this.matchesExpandedCount += searchResult.matchesCount();\n    this.treeElements.push(treeElement);\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.treeOutline.registerCSSFiles([searchResultsPaneStyles]);\n  }\n}\n\nexport const matchesExpandedByDefault = 200;\nexport const matchesShownAtOnce = 20;\n\nexport class SearchResultsTreeElement extends UI.TreeOutline.TreeElement {\n  private searchConfig: SearchConfig;\n  private searchResult: SearchResult;\n  private initialized: boolean;\n  toggleOnClick: boolean;\n\n  constructor(searchConfig: SearchConfig, searchResult: SearchResult) {\n    super('', true);\n    this.searchConfig = searchConfig;\n    this.searchResult = searchResult;\n    this.initialized = false;\n    this.toggleOnClick = true;\n  }\n\n  onexpand(): void {\n    if (this.initialized) {\n      return;\n    }\n\n    this.updateMatchesUI();\n    this.initialized = true;\n  }\n\n  showAllMatches(): void {\n    this.removeChildren();\n    this.appendSearchMatches(0, this.searchResult.matchesCount());\n  }\n\n  private updateMatchesUI(): void {\n    this.removeChildren();\n    const toIndex = Math.min(this.searchResult.matchesCount(), matchesShownAtOnce);\n    if (toIndex < this.searchResult.matchesCount()) {\n      this.appendSearchMatches(0, toIndex - 1);\n      this.appendShowMoreMatchesElement(toIndex - 1);\n    } else {\n      this.appendSearchMatches(0, toIndex);\n    }\n  }\n\n  onattach(): void {\n    this.updateSearchMatches();\n  }\n\n  private updateSearchMatches(): void {\n    this.listItemElement.classList.add('search-result');\n\n    const fileNameSpan = span(this.searchResult.label(), 'search-result-file-name');\n    fileNameSpan.appendChild(span('\\u2014', 'search-result-dash'));\n    fileNameSpan.appendChild(span(this.searchResult.description(), 'search-result-qualifier'));\n\n    this.tooltip = this.searchResult.description();\n    this.listItemElement.appendChild(fileNameSpan);\n    const matchesCountSpan = document.createElement('span');\n    matchesCountSpan.className = 'search-result-matches-count';\n\n    matchesCountSpan.textContent = `${this.searchResult.matchesCount()}`;\n    UI.ARIAUtils.setAccessibleName(\n        matchesCountSpan, i18nString(UIStrings.matchesCountS, {PH1: this.searchResult.matchesCount()}));\n\n    this.listItemElement.appendChild(matchesCountSpan);\n    if (this.expanded) {\n      this.updateMatchesUI();\n    }\n\n    function span(text: string, className: string): Element {\n      const span = document.createElement('span');\n      span.className = className;\n      span.textContent = text;\n      return span;\n    }\n  }\n\n  private appendSearchMatches(fromIndex: number, toIndex: number): void {\n    const searchResult = this.searchResult;\n\n    const queries = this.searchConfig.queries();\n    const regexes = [];\n    for (let i = 0; i < queries.length; ++i) {\n      regexes.push(Platform.StringUtilities.createSearchRegex(\n          queries[i], !this.searchConfig.ignoreCase(), this.searchConfig.isRegex()));\n    }\n\n    for (let i = fromIndex; i < toIndex; ++i) {\n      const lineContent = searchResult.matchLineContent(i).trim();\n      let matchRanges: TextUtils.TextRange.SourceRange[] = [];\n      for (let j = 0; j < regexes.length; ++j) {\n        matchRanges = matchRanges.concat(this.regexMatchRanges(lineContent, regexes[j]));\n      }\n\n      const anchor = Components.Linkifier.Linkifier.linkifyRevealable(searchResult.matchRevealable(i), '');\n      anchor.classList.add('search-match-link');\n      const labelSpan = document.createElement('span');\n      labelSpan.classList.add('search-match-line-number');\n      const resultLabel = searchResult.matchLabel(i);\n      labelSpan.textContent = resultLabel;\n      if (typeof resultLabel === 'number' && !isNaN(resultLabel)) {\n        UI.ARIAUtils.setAccessibleName(labelSpan, i18nString(UIStrings.lineS, {PH1: resultLabel}));\n      } else {\n        UI.ARIAUtils.setAccessibleName(labelSpan, resultLabel);\n      }\n      anchor.appendChild(labelSpan);\n\n      const contentSpan = this.createContentSpan(lineContent, matchRanges);\n      anchor.appendChild(contentSpan);\n\n      const searchMatchElement = new UI.TreeOutline.TreeElement();\n      this.appendChild(searchMatchElement);\n      searchMatchElement.listItemElement.className = 'search-match';\n      searchMatchElement.listItemElement.appendChild(anchor);\n      searchMatchElement.listItemElement.addEventListener('keydown', event => {\n        if (event.key === 'Enter') {\n          event.consume(true);\n          void Common.Revealer.reveal(searchResult.matchRevealable(i));\n        }\n      });\n      searchMatchElement.tooltip = lineContent;\n    }\n  }\n\n  private appendShowMoreMatchesElement(startMatchIndex: number): void {\n    const matchesLeftCount = this.searchResult.matchesCount() - startMatchIndex;\n    const showMoreMatchesText = i18nString(UIStrings.showDMore, {PH1: matchesLeftCount});\n    const showMoreMatchesTreeElement = new UI.TreeOutline.TreeElement(showMoreMatchesText);\n    this.appendChild(showMoreMatchesTreeElement);\n    showMoreMatchesTreeElement.listItemElement.classList.add('show-more-matches');\n    showMoreMatchesTreeElement.onselect =\n        this.showMoreMatchesElementSelected.bind(this, showMoreMatchesTreeElement, startMatchIndex);\n  }\n\n  private createContentSpan(lineContent: string, matchRanges: TextUtils.TextRange.SourceRange[]): Element {\n    let trimBy = 0;\n    if (matchRanges.length > 0 && matchRanges[0].offset > 20) {\n      trimBy = 15;\n    }\n    lineContent = lineContent.substring(trimBy, 1000 + trimBy);\n    if (trimBy) {\n      matchRanges =\n          matchRanges.map(range => new TextUtils.TextRange.SourceRange(range.offset - trimBy + 1, range.length));\n      lineContent = '\u2026' + lineContent;\n    }\n    const contentSpan = document.createElement('span');\n    contentSpan.className = 'search-match-content';\n    contentSpan.textContent = lineContent;\n    UI.ARIAUtils.setAccessibleName(contentSpan, `${lineContent} line`);\n    UI.UIUtils.highlightRangesWithStyleClass(contentSpan, matchRanges, 'highlighted-search-result');\n    return contentSpan;\n  }\n\n  private regexMatchRanges(lineContent: string, regex: RegExp): TextUtils.TextRange.SourceRange[] {\n    regex.lastIndex = 0;\n    let match;\n    const matchRanges = [];\n    while ((regex.lastIndex < lineContent.length) && (match = regex.exec(lineContent))) {\n      matchRanges.push(new TextUtils.TextRange.SourceRange(match.index, match[0].length));\n    }\n\n    return matchRanges;\n  }\n\n  private showMoreMatchesElementSelected(\n      showMoreMatchesTreeElement: UI.TreeOutline.TreeElement, startMatchIndex: number): boolean {\n    this.removeChild(showMoreMatchesTreeElement);\n    this.appendSearchMatches(startMatchIndex, this.searchResult.matchesCount());\n    return false;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
