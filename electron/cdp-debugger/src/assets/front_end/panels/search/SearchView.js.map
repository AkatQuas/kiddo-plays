{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/search/SearchView.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport searchViewStyles from './searchView.css.js';\n\nimport type {SearchResult, SearchScope} from './SearchConfig.js';\nimport {SearchConfig} from './SearchConfig.js';\nimport {SearchResultsPane} from './SearchResultsPane.js';\n\nconst UIStrings = {\n  /**\n  *@description Title of a search bar or tool\n  */\n  search: 'Search',\n  /**\n  *@description Accessibility label for search query text box\n  */\n  searchQuery: 'Search Query',\n  /**\n  *@description Text to search by matching case of the input\n  */\n  matchCase: 'Match Case',\n  /**\n  *@description Text for searching with regular expressinn\n  */\n  useRegularExpression: 'Use Regular Expression',\n  /**\n  *@description Text to refresh the page\n  */\n  refresh: 'Refresh',\n  /**\n  *@description Text to clear content\n  */\n  clear: 'Clear',\n  /**\n  *@description Search message element text content in Search View of the Search tab\n  */\n  indexing: 'Indexing\u2026',\n  /**\n  *@description Text to indicate the searching is in progress\n  */\n  searching: 'Searching\u2026',\n  /**\n  *@description Text in Search View of the Search tab\n  */\n  indexingInterrupted: 'Indexing interrupted.',\n  /**\n  *@description Search results message element text content in Search View of the Search tab\n  */\n  foundMatchingLineInFile: 'Found 1 matching line in 1 file.',\n  /**\n  *@description Search results message element text content in Search View of the Search tab\n  *@example {2} PH1\n  */\n  foundDMatchingLinesInFile: 'Found {PH1} matching lines in 1 file.',\n  /**\n  *@description Search results message element text content in Search View of the Search tab\n  *@example {2} PH1\n  *@example {2} PH2\n  */\n  foundDMatchingLinesInDFiles: 'Found {PH1} matching lines in {PH2} files.',\n  /**\n  *@description Search results message element text content in Search View of the Search tab\n  */\n  noMatchesFound: 'No matches found.',\n  /**\n  *@description Text in Search View of the Search tab\n  */\n  searchFinished: 'Search finished.',\n  /**\n  *@description Text in Search View of the Search tab\n  */\n  searchInterrupted: 'Search interrupted.',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/search/SearchView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class SearchView extends UI.Widget.VBox {\n  private focusOnShow: boolean;\n  private isIndexing: boolean;\n  private searchId: number;\n  private searchMatchesCount: number;\n  private searchResultsCount: number;\n  private nonEmptySearchResultsCount: number;\n  private searchingView: UI.Widget.Widget|null;\n  private notFoundView: UI.Widget.Widget|null;\n  private searchConfig: SearchConfig|null;\n  private pendingSearchConfig: SearchConfig|null;\n  private searchResultsPane: SearchResultsPane|null;\n  private progressIndicator: UI.ProgressIndicator.ProgressIndicator|null;\n  private visiblePane: UI.Widget.Widget|null;\n  private readonly searchPanelElement: HTMLElement;\n  private readonly searchResultsElement: HTMLElement;\n  private search: UI.HistoryInput.HistoryInput;\n  private matchCaseButton: UI.Toolbar.ToolbarToggle;\n  private readonly regexButton: UI.Toolbar.ToolbarToggle;\n  private searchMessageElement: HTMLElement;\n  private readonly searchProgressPlaceholderElement: HTMLElement;\n  private searchResultsMessageElement: HTMLElement;\n  private readonly advancedSearchConfig: Common.Settings.Setting<{\n    query: string,\n    ignoreCase: boolean,\n    isRegex: boolean,\n  }>;\n  private searchScope: SearchScope|null;\n  constructor(settingKey: string) {\n    super(true);\n    this.setMinimumSize(0, 40);\n\n    this.focusOnShow = false;\n    this.isIndexing = false;\n    this.searchId = 1;\n    this.searchMatchesCount = 0;\n    this.searchResultsCount = 0;\n    this.nonEmptySearchResultsCount = 0;\n    this.searchingView = null;\n    this.notFoundView = null;\n    this.searchConfig = null;\n    this.pendingSearchConfig = null;\n    this.searchResultsPane = null;\n    this.progressIndicator = null;\n    this.visiblePane = null;\n\n    this.contentElement.classList.add('search-view');\n    this.contentElement.addEventListener('keydown', event => {\n      this.onKeyDownOnPanel((event as KeyboardEvent));\n    });\n\n    this.searchPanelElement = this.contentElement.createChild('div', 'search-drawer-header');\n    this.searchResultsElement = this.contentElement.createChild('div');\n    this.searchResultsElement.className = 'search-results';\n\n    const searchContainer = document.createElement('div');\n    searchContainer.style.flex = 'auto';\n    searchContainer.style.justifyContent = 'start';\n    searchContainer.style.maxWidth = '300px';\n    this.search = UI.HistoryInput.HistoryInput.create();\n    this.search.addEventListener('keydown', event => {\n      this.onKeyDown((event as KeyboardEvent));\n    });\n    searchContainer.appendChild(this.search);\n    this.search.placeholder = i18nString(UIStrings.search);\n    this.search.setAttribute('type', 'text');\n    this.search.setAttribute('results', '0');\n    this.search.setAttribute('size', '42');\n    UI.ARIAUtils.setAccessibleName(this.search, i18nString(UIStrings.searchQuery));\n    const searchItem = new UI.Toolbar.ToolbarItem(searchContainer);\n\n    const toolbar = new UI.Toolbar.Toolbar('search-toolbar', this.searchPanelElement);\n    this.matchCaseButton = SearchView.appendToolbarToggle(toolbar, 'Aa', i18nString(UIStrings.matchCase));\n    this.regexButton = SearchView.appendToolbarToggle(toolbar, '.*', i18nString(UIStrings.useRegularExpression));\n    toolbar.appendToolbarItem(searchItem);\n    const refreshButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.refresh), 'largeicon-refresh');\n    const clearButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.clear), 'largeicon-clear');\n    toolbar.appendToolbarItem(refreshButton);\n    toolbar.appendToolbarItem(clearButton);\n    refreshButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, () => this.onAction());\n    clearButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, () => {\n      this.resetSearch();\n      this.onSearchInputClear();\n    });\n\n    const searchStatusBarElement = this.contentElement.createChild('div', 'search-toolbar-summary');\n    this.searchMessageElement = searchStatusBarElement.createChild('div', 'search-message');\n    this.searchProgressPlaceholderElement = searchStatusBarElement.createChild('div', 'flex-centered');\n    this.searchResultsMessageElement = searchStatusBarElement.createChild('div', 'search-message');\n\n    this.advancedSearchConfig = Common.Settings.Settings.instance().createLocalSetting(\n        settingKey + 'SearchConfig', new SearchConfig('', true, false).toPlainObject());\n\n    this.load();\n    this.searchScope = null;\n  }\n\n  private static appendToolbarToggle(toolbar: UI.Toolbar.Toolbar, text: string, tooltip: string):\n      UI.Toolbar.ToolbarToggle {\n    const toggle = new UI.Toolbar.ToolbarToggle(tooltip);\n    toggle.setText(text);\n    toggle.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, () => toggle.setToggled(!toggle.toggled()));\n    toolbar.appendToolbarItem(toggle);\n    return toggle;\n  }\n\n  private buildSearchConfig(): SearchConfig {\n    return new SearchConfig(this.search.value, !this.matchCaseButton.toggled(), this.regexButton.toggled());\n  }\n\n  async toggle(queryCandidate: string, searchImmediately?: boolean): Promise<void> {\n    if (queryCandidate) {\n      this.search.value = queryCandidate;\n    }\n    if (this.isShowing()) {\n      this.focus();\n    } else {\n      this.focusOnShow = true;\n    }\n\n    this.initScope();\n    if (searchImmediately) {\n      this.onAction();\n    } else {\n      this.startIndexing();\n    }\n  }\n\n  createScope(): SearchScope {\n    throw new Error('Not implemented');\n  }\n\n  private initScope(): void {\n    this.searchScope = this.createScope();\n  }\n\n  wasShown(): void {\n    if (this.focusOnShow) {\n      this.focus();\n      this.focusOnShow = false;\n    }\n    this.registerCSSFiles([searchViewStyles]);\n  }\n\n  private onIndexingFinished(): void {\n    if (!this.progressIndicator) {\n      return;\n    }\n\n    const finished = !this.progressIndicator.isCanceled();\n    this.progressIndicator.done();\n    this.progressIndicator = null;\n    this.isIndexing = false;\n    this.indexingFinished(finished);\n    if (!finished) {\n      this.pendingSearchConfig = null;\n    }\n    if (!this.pendingSearchConfig) {\n      return;\n    }\n    const searchConfig = this.pendingSearchConfig;\n    this.pendingSearchConfig = null;\n    this.innerStartSearch(searchConfig);\n  }\n\n  private startIndexing(): void {\n    this.isIndexing = true;\n    if (this.progressIndicator) {\n      this.progressIndicator.done();\n    }\n    this.progressIndicator = new UI.ProgressIndicator.ProgressIndicator();\n    this.searchMessageElement.textContent = i18nString(UIStrings.indexing);\n    this.progressIndicator.show(this.searchProgressPlaceholderElement);\n    if (this.searchScope) {\n      this.searchScope.performIndexing(\n          new Common.Progress.ProgressProxy(this.progressIndicator, this.onIndexingFinished.bind(this)));\n    }\n  }\n\n  private onSearchInputClear(): void {\n    this.search.value = '';\n    this.save();\n    this.focus();\n  }\n\n  private onSearchResult(searchId: number, searchResult: SearchResult): void {\n    if (searchId !== this.searchId || !this.progressIndicator) {\n      return;\n    }\n    if (this.progressIndicator && this.progressIndicator.isCanceled()) {\n      this.onIndexingFinished();\n      return;\n    }\n    this.addSearchResult(searchResult);\n    if (!searchResult.matchesCount()) {\n      return;\n    }\n    if (!this.searchResultsPane) {\n      this.searchResultsPane = new SearchResultsPane((this.searchConfig as SearchConfig));\n      this.showPane(this.searchResultsPane);\n    }\n    this.searchResultsPane.addSearchResult(searchResult);\n  }\n\n  private onSearchFinished(searchId: number, finished: boolean): void {\n    if (searchId !== this.searchId || !this.progressIndicator) {\n      return;\n    }\n    if (!this.searchResultsPane) {\n      this.nothingFound();\n    }\n    this.searchFinished(finished);\n    this.searchConfig = null;\n    UI.ARIAUtils.alert(this.searchMessageElement.textContent + ' ' + this.searchResultsMessageElement.textContent);\n  }\n\n  private async startSearch(searchConfig: SearchConfig): Promise<void> {\n    this.resetSearch();\n    ++this.searchId;\n    this.initScope();\n    if (!this.isIndexing) {\n      this.startIndexing();\n    }\n    this.pendingSearchConfig = searchConfig;\n  }\n\n  private innerStartSearch(searchConfig: SearchConfig): void {\n    this.searchConfig = searchConfig;\n    if (this.progressIndicator) {\n      this.progressIndicator.done();\n    }\n    this.progressIndicator = new UI.ProgressIndicator.ProgressIndicator();\n    this.searchStarted(this.progressIndicator);\n    if (this.searchScope) {\n      void this.searchScope.performSearch(\n          searchConfig, this.progressIndicator, this.onSearchResult.bind(this, this.searchId),\n          this.onSearchFinished.bind(this, this.searchId));\n    }\n  }\n\n  private resetSearch(): void {\n    this.stopSearch();\n    this.showPane(null);\n    this.searchResultsPane = null;\n    this.clearSearchMessage();\n  }\n\n  private clearSearchMessage(): void {\n    this.searchMessageElement.textContent = '';\n    this.searchResultsMessageElement.textContent = '';\n  }\n\n  private stopSearch(): void {\n    if (this.progressIndicator && !this.isIndexing) {\n      this.progressIndicator.cancel();\n    }\n    if (this.searchScope) {\n      this.searchScope.stopSearch();\n    }\n    this.searchConfig = null;\n  }\n\n  private searchStarted(progressIndicator: UI.ProgressIndicator.ProgressIndicator): void {\n    this.resetCounters();\n    if (!this.searchingView) {\n      this.searchingView = new UI.EmptyWidget.EmptyWidget(i18nString(UIStrings.searching));\n    }\n    this.showPane(this.searchingView);\n    this.searchMessageElement.textContent = i18nString(UIStrings.searching);\n    progressIndicator.show(this.searchProgressPlaceholderElement);\n    this.updateSearchResultsMessage();\n  }\n\n  private indexingFinished(finished: boolean): void {\n    this.searchMessageElement.textContent = finished ? '' : i18nString(UIStrings.indexingInterrupted);\n  }\n\n  private updateSearchResultsMessage(): void {\n    if (this.searchMatchesCount && this.searchResultsCount) {\n      if (this.searchMatchesCount === 1 && this.nonEmptySearchResultsCount === 1) {\n        this.searchResultsMessageElement.textContent = i18nString(UIStrings.foundMatchingLineInFile);\n      } else if (this.searchMatchesCount > 1 && this.nonEmptySearchResultsCount === 1) {\n        this.searchResultsMessageElement.textContent =\n            i18nString(UIStrings.foundDMatchingLinesInFile, {PH1: this.searchMatchesCount});\n      } else {\n        this.searchResultsMessageElement.textContent = i18nString(\n            UIStrings.foundDMatchingLinesInDFiles,\n            {PH1: this.searchMatchesCount, PH2: this.nonEmptySearchResultsCount});\n      }\n    } else {\n      this.searchResultsMessageElement.textContent = '';\n    }\n  }\n\n  private showPane(panel: UI.Widget.Widget|null): void {\n    if (this.visiblePane) {\n      this.visiblePane.detach();\n    }\n    if (panel) {\n      panel.show(this.searchResultsElement);\n    }\n    this.visiblePane = panel;\n  }\n\n  private resetCounters(): void {\n    this.searchMatchesCount = 0;\n    this.searchResultsCount = 0;\n    this.nonEmptySearchResultsCount = 0;\n  }\n\n  private nothingFound(): void {\n    if (!this.notFoundView) {\n      this.notFoundView = new UI.EmptyWidget.EmptyWidget(i18nString(UIStrings.noMatchesFound));\n    }\n    this.showPane(this.notFoundView);\n    this.searchResultsMessageElement.textContent = i18nString(UIStrings.noMatchesFound);\n  }\n\n  private addSearchResult(searchResult: SearchResult): void {\n    const matchesCount = searchResult.matchesCount();\n    this.searchMatchesCount += matchesCount;\n    this.searchResultsCount++;\n    if (matchesCount) {\n      this.nonEmptySearchResultsCount++;\n    }\n    this.updateSearchResultsMessage();\n  }\n\n  private searchFinished(finished: boolean): void {\n    this.searchMessageElement.textContent =\n        finished ? i18nString(UIStrings.searchFinished) : i18nString(UIStrings.searchInterrupted);\n  }\n\n  focus(): void {\n    this.search.focus();\n    this.search.select();\n  }\n\n  willHide(): void {\n    this.stopSearch();\n  }\n\n  private onKeyDown(event: KeyboardEvent): void {\n    this.save();\n    switch (event.keyCode) {\n      case UI.KeyboardShortcut.Keys.Enter.code:\n        this.onAction();\n        break;\n    }\n  }\n\n  /**\n   * Handles keydown event on panel itself for handling expand/collapse all shortcut\n   *\n   * We use `event.code` instead of `event.key` here to check whether the shortcut is triggered.\n   * The reason is, `event.key` is dependent on the modification keys, locale and keyboard layout.\n   * Usually it is useful when we care about the character that needs to be printed.\n   *\n   * However, our aim in here is to assign a shortcut to the physical key combination on the keyboard\n   * not on the character that the key combination prints.\n   *\n   * For example, `Cmd + [` shortcut in global shortcuts map to focusing on previous panel.\n   * In Turkish - Q keyboard layout, the key combination that triggers the shortcut prints `\u011F`\n   * character. Whereas in Turkish - Q Legacy keyboard layout, the shortcut that triggers focusing\n   * on previous panel prints `[` character. So, if we use `event.key` and check\n   * whether it is `[`, we break the shortcut in Turkish - Q keyboard layout.\n   *\n   * @param event KeyboardEvent\n   */\n  private onKeyDownOnPanel(event: KeyboardEvent): void {\n    const isMac = Host.Platform.isMac();\n    // \"Command + Alt + ]\" for Mac\n    const shouldShowAllForMac =\n        isMac && event.metaKey && !event.ctrlKey && event.altKey && event.code === 'BracketRight';\n    // \"Ctrl + Shift + }\" for other platforms\n    const shouldShowAllForOtherPlatforms =\n        !isMac && event.ctrlKey && !event.metaKey && event.shiftKey && event.code === 'BracketRight';\n    // \"Command + Alt + [\" for Mac\n    const shouldCollapseAllForMac =\n        isMac && event.metaKey && !event.ctrlKey && event.altKey && event.code === 'BracketLeft';\n    // \"Command + Alt + {\" for other platforms\n    const shouldCollapseAllForOtherPlatforms =\n        !isMac && event.ctrlKey && !event.metaKey && event.shiftKey && event.code === 'BracketLeft';\n\n    if (shouldShowAllForMac || shouldShowAllForOtherPlatforms) {\n      this.searchResultsPane?.showAllMatches();\n    } else if (shouldCollapseAllForMac || shouldCollapseAllForOtherPlatforms) {\n      this.searchResultsPane?.collapseAllResults();\n    }\n  }\n\n  private save(): void {\n    this.advancedSearchConfig.set(this.buildSearchConfig().toPlainObject());\n  }\n\n  private load(): void {\n    const searchConfig = SearchConfig.fromPlainObject(this.advancedSearchConfig.get());\n    this.search.value = searchConfig.query();\n    this.matchCaseButton.setToggled(!searchConfig.ignoreCase());\n    this.regexButton.setToggled(searchConfig.isRegex());\n  }\n\n  private onAction(): void {\n    const searchConfig = this.buildSearchConfig();\n    if (!searchConfig.query() || !searchConfig.query().length) {\n      return;\n    }\n    void this.startSearch(searchConfig);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
