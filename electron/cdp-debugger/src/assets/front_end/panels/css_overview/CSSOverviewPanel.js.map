{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/css_overview/CSSOverviewPanel.ts"],
  "sourcesContent": ["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as CSSOverviewComponents from './components/components.js';\nimport cssOverviewStyles from './cssOverview.css.js';\nimport type * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport type {ContrastIssue} from './CSSOverviewCompletedView.js';\nimport {CSSOverviewCompletedView} from './CSSOverviewCompletedView.js';\nimport {Events, OverviewController} from './CSSOverviewController.js';\nimport type {GlobalStyleStats} from './CSSOverviewModel.js';\nimport {CSSOverviewModel} from './CSSOverviewModel.js';\nimport {CSSOverviewProcessingView} from './CSSOverviewProcessingView.js';\nimport type {UnusedDeclaration} from './CSSOverviewUnusedDeclarations.js';\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet CSSOverviewPanelInstance: CSSOverviewPanel;\n\nexport class CSSOverviewPanel extends UI.Panel.Panel implements SDK.TargetManager.Observer {\n  readonly #controller: OverviewController;\n  readonly #startView: CSSOverviewComponents.CSSOverviewStartView.CSSOverviewStartView;\n  readonly #processingView: CSSOverviewProcessingView;\n  readonly #completedView: CSSOverviewCompletedView;\n  #model?: CSSOverviewModel;\n  #target?: SDK.Target.Target;\n  #backgroundColors!: Map<string, Set<Protocol.DOM.BackendNodeId>>;\n  #textColors!: Map<string, Set<Protocol.DOM.BackendNodeId>>;\n  #fillColors!: Map<string, Set<Protocol.DOM.BackendNodeId>>;\n  #borderColors!: Map<string, Set<Protocol.DOM.BackendNodeId>>;\n  #fontInfo!: Map<string, Map<string, Map<string, Protocol.DOM.BackendNodeId[]>>>;\n  #mediaQueries!: Map<string, Protocol.CSS.CSSMedia[]>;\n  #unusedDeclarations!: Map<string, UnusedDeclaration[]>;\n  #elementCount!: number;\n  #globalStyleStats!: GlobalStyleStats;\n  #textColorContrastIssues!: Map<string, ContrastIssue[]>;\n\n  private constructor() {\n    super('css_overview');\n\n    this.element.classList.add('css-overview-panel');\n\n    this.#controller = new OverviewController();\n    this.#startView = new CSSOverviewComponents.CSSOverviewStartView.CSSOverviewStartView();\n    this.#startView.addEventListener(\n        'overviewstartrequested', () => this.#controller.dispatchEventToListeners(Events.RequestOverviewStart));\n    this.#processingView = new CSSOverviewProcessingView(this.#controller);\n    this.#completedView = new CSSOverviewCompletedView(this.#controller);\n\n    SDK.TargetManager.TargetManager.instance().observeTargets(this);\n\n    this.#controller.addEventListener(Events.RequestOverviewStart, _event => {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.CaptureCssOverviewClicked);\n      void this.#startOverview();\n    }, this);\n    this.#controller.addEventListener(Events.OverviewCompleted, this.#overviewCompleted, this);\n    this.#controller.addEventListener(Events.Reset, this.#reset, this);\n    this.#controller.addEventListener(Events.RequestNodeHighlight, this.#requestNodeHighlight, this);\n\n    this.#reset();\n  }\n\n  static instance(): CSSOverviewPanel {\n    if (!CSSOverviewPanelInstance) {\n      CSSOverviewPanelInstance = new CSSOverviewPanel();\n    }\n    return CSSOverviewPanelInstance;\n  }\n\n  targetAdded(target: SDK.Target.Target): void {\n    if (this.#target) {\n      return;\n    }\n    this.#target = target;\n    this.#completedView.initializeModels(target);\n    const [model] = SDK.TargetManager.TargetManager.instance().models(CSSOverviewModel);\n    this.#model = (model as CSSOverviewModel);\n  }\n\n  targetRemoved(): void {\n  }\n\n  #getModel(): CSSOverviewModel {\n    if (!this.#model) {\n      throw new Error('Did not retrieve model information yet.');\n    }\n    return this.#model;\n  }\n\n  #reset(): void {\n    this.#backgroundColors = new Map();\n    this.#textColors = new Map();\n    this.#fillColors = new Map();\n    this.#borderColors = new Map();\n    this.#fontInfo = new Map();\n    this.#mediaQueries = new Map();\n    this.#unusedDeclarations = new Map();\n    this.#elementCount = 0;\n    this.#globalStyleStats = {\n      styleRules: 0,\n      inlineStyles: 0,\n      externalSheets: 0,\n      stats: {\n        // Simple.\n        type: 0,\n        class: 0,\n        id: 0,\n        universal: 0,\n        attribute: 0,\n\n        // Non-simple.\n        nonSimple: 0,\n      },\n    };\n    this.#textColorContrastIssues = new Map();\n    this.#renderInitialView();\n  }\n\n  #requestNodeHighlight(evt: Common.EventTarget.EventTargetEvent<number>): void {\n    this.#getModel().highlightNode((evt.data as Protocol.DOM.BackendNodeId));\n  }\n\n  #renderInitialView(): void {\n    this.#processingView.hideWidget();\n    this.#completedView.hideWidget();\n\n    this.contentElement.append(this.#startView);\n    this.#startView.show();\n  }\n\n  #renderOverviewStartedView(): void {\n    this.#startView.hide();\n    this.#completedView.hideWidget();\n\n    this.#processingView.show(this.contentElement);\n  }\n\n  #renderOverviewCompletedView(): void {\n    this.#startView.hide();\n    this.#processingView.hideWidget();\n\n    this.#completedView.show(this.contentElement);\n    this.#completedView.setOverviewData({\n      backgroundColors: this.#backgroundColors,\n      textColors: this.#textColors,\n      textColorContrastIssues: this.#textColorContrastIssues,\n      fillColors: this.#fillColors,\n      borderColors: this.#borderColors,\n      globalStyleStats: this.#globalStyleStats,\n      fontInfo: this.#fontInfo,\n      elementCount: this.#elementCount,\n      mediaQueries: this.#mediaQueries,\n      unusedDeclarations: this.#unusedDeclarations,\n    });\n  }\n\n  async #startOverview(): Promise<void> {\n    this.#renderOverviewStartedView();\n\n    const model = this.#getModel();\n    const [globalStyleStats, { elementCount, backgroundColors, textColors, textColorContrastIssues, fillColors, borderColors, fontInfo, unusedDeclarations }, mediaQueries] = await Promise.all([\n      model.getGlobalStylesheetStats(),\n      model.getNodeStyleStats(),\n      model.getMediaQueries(),\n    ]);\n\n    if (elementCount) {\n      this.#elementCount = elementCount;\n    }\n\n    if (globalStyleStats) {\n      this.#globalStyleStats = globalStyleStats;\n    }\n\n    if (mediaQueries) {\n      this.#mediaQueries = mediaQueries;\n    }\n\n    if (backgroundColors) {\n      this.#backgroundColors = backgroundColors;\n    }\n\n    if (textColors) {\n      this.#textColors = textColors;\n    }\n\n    if (textColorContrastIssues) {\n      this.#textColorContrastIssues = textColorContrastIssues;\n    }\n\n    if (fillColors) {\n      this.#fillColors = fillColors;\n    }\n\n    if (borderColors) {\n      this.#borderColors = borderColors;\n    }\n\n    if (fontInfo) {\n      this.#fontInfo = fontInfo;\n    }\n\n    if (unusedDeclarations) {\n      this.#unusedDeclarations = unusedDeclarations;\n    }\n\n    this.#controller.dispatchEventToListeners(Events.OverviewCompleted);\n  }\n\n  #overviewCompleted(): void {\n    this.#renderOverviewCompletedView();\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([cssOverviewStyles]);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
