{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/css_overview/CSSOverviewCompletedView.ts"],
  "sourcesContent": ["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport cssOverviewCompletedViewStyles from './cssOverviewCompletedView.css.js';\nimport type {\n  OverviewController, PopulateNodesEvent, PopulateNodesEventNodes, PopulateNodesEventNodeTypes} from\n  './CSSOverviewController.js';\nimport {Events as CSSOverViewControllerEvents} from './CSSOverviewController.js';\nimport {CSSOverviewSidebarPanel, SidebarEvents} from './CSSOverviewSidebarPanel.js';\nimport type {UnusedDeclaration} from './CSSOverviewUnusedDeclarations.js';\n\nconst UIStrings = {\n  /**\n  *@description Label for the summary in the CSS Overview report\n  */\n  overviewSummary: 'Overview summary',\n  /**\n  *@description Title of colors subsection in the CSS Overview Panel\n  */\n  colors: 'Colors',\n  /**\n  *@description Title of font info subsection in the CSS Overview Panel\n  */\n  fontInfo: 'Font info',\n  /**\n  *@description Label to denote unused declarations in the target page\n  */\n  unusedDeclarations: 'Unused declarations',\n  /**\n  *@description Label for the number of media queries in the CSS Overview report\n  */\n  mediaQueries: 'Media queries',\n  /**\n  *@description Title of the Elements Panel\n  */\n  elements: 'Elements',\n  /**\n  *@description Label for the number of External stylesheets in the CSS Overview report\n  */\n  externalStylesheets: 'External stylesheets',\n  /**\n  *@description Label for the number of inline style elements in the CSS Overview report\n  */\n  inlineStyleElements: 'Inline style elements',\n  /**\n  *@description Label for the number of style rules in CSS Overview report\n  */\n  styleRules: 'Style rules',\n  /**\n  *@description Label for the number of type selectors in the CSS Overview report\n  */\n  typeSelectors: 'Type selectors',\n  /**\n  *@description Label for the number of ID selectors in the CSS Overview report\n  */\n  idSelectors: 'ID selectors',\n  /**\n  *@description Label for the number of class selectors in the CSS Overview report\n  */\n  classSelectors: 'Class selectors',\n  /**\n  *@description Label for the number of universal selectors in the CSS Overview report\n  */\n  universalSelectors: 'Universal selectors',\n  /**\n  *@description Label for the number of Attribute selectors in the CSS Overview report\n  */\n  attributeSelectors: 'Attribute selectors',\n  /**\n  *@description Label for the number of non-simple selectors in the CSS Overview report\n  */\n  nonsimpleSelectors: 'Non-simple selectors',\n  /**\n  *@description Label for unique background colors in the CSS Overview Panel\n  *@example {32} PH1\n  */\n  backgroundColorsS: 'Background colors: {PH1}',\n  /**\n  *@description Label for unique text colors in the CSS Overview Panel\n  *@example {32} PH1\n  */\n  textColorsS: 'Text colors: {PH1}',\n  /**\n  *@description Label for unique fill colors in the CSS Overview Panel\n  *@example {32} PH1\n  */\n  fillColorsS: 'Fill colors: {PH1}',\n  /**\n  *@description Label for unique border colors in the CSS Overview Panel\n  *@example {32} PH1\n  */\n  borderColorsS: 'Border colors: {PH1}',\n  /**\n  *@description Label to indicate that there are no fonts in use\n  */\n  thereAreNoFonts: 'There are no fonts.',\n  /**\n  *@description Message to show when no unused declarations in the target page\n  */\n  thereAreNoUnusedDeclarations: 'There are no unused declarations.',\n  /**\n  *@description Message to show when no media queries are found in the target page\n  */\n  thereAreNoMediaQueries: 'There are no media queries.',\n  /**\n  *@description Title of the Drawer for contrast issues in the CSS Overview Panel\n  */\n  contrastIssues: 'Contrast issues',\n  /**\n  * @description Text to indicate how many times this CSS rule showed up.\n  */\n  nOccurrences: '{n, plural, =1 {# occurrence} other {# occurrences}}',\n  /**\n  *@description Section header for contrast issues in the CSS Overview Panel\n  *@example {1} PH1\n  */\n  contrastIssuesS: 'Contrast issues: {PH1}',\n  /**\n  *@description Title of the button for a contrast issue in the CSS Overview Panel\n  *@example {#333333} PH1\n  *@example {#333333} PH2\n  *@example {2} PH3\n  */\n  textColorSOverSBackgroundResults: 'Text color {PH1} over {PH2} background results in low contrast for {PH3} elements',\n  /**\n  *@description Label aa text content in Contrast Details of the Color Picker\n  */\n  aa: 'AA',\n  /**\n  *@description Label aaa text content in Contrast Details of the Color Picker\n  */\n  aaa: 'AAA',\n  /**\n  *@description Label for the APCA contrast in Color Picker\n  */\n  apca: 'APCA',\n  /**\n  *@description Label for the column in the element list in the CSS Overview report\n  */\n  element: 'Element',\n  /**\n  *@description Column header title denoting which declaration is unused\n  */\n  declaration: 'Declaration',\n  /**\n  *@description Text for the source of something\n  */\n  source: 'Source',\n  /**\n  *@description Text of a DOM element in Contrast Details of the Color Picker\n  */\n  contrastRatio: 'Contrast ratio',\n  /**\n  *@description Accessible title of a table in the CSS Overview Elements.\n  */\n  cssOverviewElements: 'CSS Overview Elements',\n  /**\n  *@description Title of the button to show the element in the CSS Overview panel\n  */\n  showElement: 'Show element',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/css_overview/CSSOverviewCompletedView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport type NodeStyleStats = Map<string, Set<number>>;\n\nexport interface ContrastIssue {\n  nodeId: Protocol.DOM.BackendNodeId;\n  contrastRatio: number;\n  textColor: Common.Color.Color;\n  backgroundColor: Common.Color.Color;\n  thresholdsViolated: {\n    aa: boolean,\n    aaa: boolean,\n    apca: boolean,\n  };\n}\nexport interface OverviewData {\n  backgroundColors: Map<string, Set<Protocol.DOM.BackendNodeId>>;\n  textColors: Map<string, Set<Protocol.DOM.BackendNodeId>>;\n  textColorContrastIssues: Map<string, ContrastIssue[]>;\n  fillColors: Map<string, Set<Protocol.DOM.BackendNodeId>>;\n  borderColors: Map<string, Set<Protocol.DOM.BackendNodeId>>;\n  globalStyleStats: {\n    styleRules: number,\n    inlineStyles: number,\n    externalSheets: number,\n    stats: {type: number, class: number, id: number, universal: number, attribute: number, nonSimple: number},\n  };\n  fontInfo: Map<string, Map<string, Map<string, Protocol.DOM.BackendNodeId[]>>>;\n  elementCount: number;\n  mediaQueries: Map<string, Protocol.CSS.CSSMedia[]>;\n  unusedDeclarations: Map<string, UnusedDeclaration[]>;\n}\n\nexport type FontInfo = Map<string, Map<string, Map<string, number[]>>>;\n\nfunction getBorderString(color: Common.Color.Color): string {\n  let [h, s, l] = color.hsla();\n  h = Math.round(h * 360);\n  s = Math.round(s * 100);\n  l = Math.round(l * 100);\n\n  // Reduce the lightness of the border to make sure that there's always a visible outline.\n  l = Math.max(0, l - 15);\n\n  return `1px solid hsl(${h}deg ${s}% ${l}%)`;\n}\n\nexport class CSSOverviewCompletedView extends UI.Panel.PanelWithSidebar {\n  #controller: OverviewController;\n  #formatter: Intl.NumberFormat;\n  readonly #mainContainer: UI.SplitWidget.SplitWidget;\n  readonly #resultsContainer: UI.Widget.VBox;\n  readonly #elementContainer: DetailsView;\n  readonly #sideBar: CSSOverviewSidebarPanel;\n  #cssModel?: SDK.CSSModel.CSSModel;\n  #domModel?: SDK.DOMModel.DOMModel;\n  #linkifier: Components.Linkifier.Linkifier;\n  #viewMap: Map<string, ElementDetailsView>;\n  #data: OverviewData|null;\n  #fragment?: UI.Fragment.Fragment;\n\n  constructor(controller: OverviewController) {\n    super('css_overview_completed_view');\n\n    this.#controller = controller;\n    this.#formatter = new Intl.NumberFormat('en-US');\n\n    this.#mainContainer = new UI.SplitWidget.SplitWidget(true, true);\n    this.#resultsContainer = new UI.Widget.VBox();\n    this.#elementContainer = new DetailsView();\n\n    // If closing the last tab, collapse the sidebar.\n    this.#elementContainer.addEventListener(Events.TabClosed, evt => {\n      if (evt.data === 0) {\n        this.#mainContainer.setSidebarMinimized(true);\n      }\n    });\n\n    // Dupe the styles into the main container because of the shadow root will prevent outer styles.\n\n    this.#mainContainer.setMainWidget(this.#resultsContainer);\n    this.#mainContainer.setSidebarWidget(this.#elementContainer);\n    this.#mainContainer.setVertical(false);\n    this.#mainContainer.setSecondIsSidebar(true);\n    this.#mainContainer.setSidebarMinimized(true);\n\n    this.#sideBar = new CSSOverviewSidebarPanel();\n    this.#sideBar.setMinimumSize(100, 25);\n    this.splitWidget().setSidebarWidget(this.#sideBar);\n    this.splitWidget().setMainWidget(this.#mainContainer);\n\n    this.#linkifier = new Components.Linkifier.Linkifier(/* maxLinkLength */ 20, /* useLinkDecorator */ true);\n\n    this.#viewMap = new Map();\n\n    this.#sideBar.addItem(i18nString(UIStrings.overviewSummary), 'summary');\n    this.#sideBar.addItem(i18nString(UIStrings.colors), 'colors');\n    this.#sideBar.addItem(i18nString(UIStrings.fontInfo), 'font-info');\n    this.#sideBar.addItem(i18nString(UIStrings.unusedDeclarations), 'unused-declarations');\n    this.#sideBar.addItem(i18nString(UIStrings.mediaQueries), 'media-queries');\n    this.#sideBar.select('summary');\n\n    this.#sideBar.addEventListener(SidebarEvents.ItemSelected, this.#sideBarItemSelected, this);\n    this.#sideBar.addEventListener(SidebarEvents.Reset, this.#sideBarReset, this);\n    this.#controller.addEventListener(CSSOverViewControllerEvents.Reset, this.#reset, this);\n    this.#controller.addEventListener(CSSOverViewControllerEvents.PopulateNodes, this.#createElementsView, this);\n    this.#resultsContainer.element.addEventListener('click', this.#onClick.bind(this));\n\n    this.#data = null;\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    this.#mainContainer.registerCSSFiles([cssOverviewCompletedViewStyles]);\n    this.registerCSSFiles([cssOverviewCompletedViewStyles]);\n\n    // TODO(paullewis): update the links in the panels in case source has been .\n  }\n\n  initializeModels(target: SDK.Target.Target): void {\n    const cssModel = target.model(SDK.CSSModel.CSSModel);\n    const domModel = target.model(SDK.DOMModel.DOMModel);\n    if (!cssModel || !domModel) {\n      throw new Error('Target must provide CSS and DOM models');\n    }\n    this.#cssModel = cssModel;\n    this.#domModel = domModel;\n  }\n\n  #sideBarItemSelected(event: Common.EventTarget.EventTargetEvent<string>): void {\n    const {data} = event;\n    const section = (this.#fragment as UI.Fragment.Fragment).$(data);\n    if (!section) {\n      return;\n    }\n\n    section.scrollIntoView();\n  }\n\n  #sideBarReset(): void {\n    this.#controller.dispatchEventToListeners(CSSOverViewControllerEvents.Reset);\n  }\n\n  #reset(): void {\n    this.#resultsContainer.element.removeChildren();\n    this.#mainContainer.setSidebarMinimized(true);\n    this.#elementContainer.closeTabs();\n    this.#viewMap = new Map();\n    CSSOverviewCompletedView.pushedNodes.clear();\n    this.#sideBar.select('summary');\n  }\n\n  #onClick(evt: Event): void {\n    if (!evt.target) {\n      return;\n    }\n    const target = (evt.target as HTMLElement);\n    const dataset = target.dataset;\n\n    const type = dataset.type;\n    if (!type || !this.#data) {\n      return;\n    }\n\n    let payload: PopulateNodesEvent;\n    switch (type) {\n      case 'contrast': {\n        const section = dataset.section;\n        const key = dataset.key;\n\n        if (!key) {\n          return;\n        }\n\n        // Remap the Set to an object that is the same shape as the unused declarations.\n        const nodes = this.#data.textColorContrastIssues.get(key) || [];\n        payload = {type, key, nodes, section};\n        break;\n      }\n      case 'color': {\n        const color = dataset.color;\n        const section = dataset.section;\n        if (!color) {\n          return;\n        }\n\n        let nodes;\n        switch (section) {\n          case 'text':\n            nodes = this.#data.textColors.get(color);\n            break;\n\n          case 'background':\n            nodes = this.#data.backgroundColors.get(color);\n            break;\n\n          case 'fill':\n            nodes = this.#data.fillColors.get(color);\n            break;\n\n          case 'border':\n            nodes = this.#data.borderColors.get(color);\n            break;\n        }\n\n        if (!nodes) {\n          return;\n        }\n\n        // Remap the Set to an object that is the same shape as the unused declarations.\n        nodes = Array.from(nodes).map(nodeId => ({nodeId}));\n        payload = {type, color, nodes, section};\n        break;\n      }\n\n      case 'unused-declarations': {\n        const declaration = dataset.declaration;\n        if (!declaration) {\n          return;\n        }\n        const nodes = this.#data.unusedDeclarations.get(declaration);\n        if (!nodes) {\n          return;\n        }\n\n        payload = {type, declaration, nodes};\n        break;\n      }\n\n      case 'media-queries': {\n        const text = dataset.text;\n        if (!text) {\n          return;\n        }\n        const nodes = this.#data.mediaQueries.get(text);\n        if (!nodes) {\n          return;\n        }\n\n        payload = {type, text, nodes};\n        break;\n      }\n\n      case 'font-info': {\n        const value = dataset.value;\n        if (!dataset.path) {\n          return;\n        }\n\n        const [fontFamily, fontMetric] = dataset.path.split('/');\n        if (!value) {\n          return;\n        }\n\n        const fontFamilyInfo = this.#data.fontInfo.get(fontFamily);\n        if (!fontFamilyInfo) {\n          return;\n        }\n\n        const fontMetricInfo = fontFamilyInfo.get(fontMetric);\n        if (!fontMetricInfo) {\n          return;\n        }\n\n        const nodesIds = fontMetricInfo.get(value);\n        if (!nodesIds) {\n          return;\n        }\n\n        const nodes = nodesIds.map(nodeId => ({nodeId}));\n        const name = `${value} (${fontFamily}, ${fontMetric})`;\n        payload = {type, name, nodes};\n        break;\n      }\n\n      default:\n        return;\n    }\n\n    evt.consume();\n    this.#controller.dispatchEventToListeners(CSSOverViewControllerEvents.PopulateNodes, {payload});\n    this.#mainContainer.setSidebarMinimized(false);\n  }\n\n  async #render(data: OverviewData): Promise<void> {\n    if (!data || !('backgroundColors' in data) || !('textColors' in data)) {\n      return;\n    }\n\n    this.#data = data;\n    const {\n      elementCount,\n      backgroundColors,\n      textColors,\n      textColorContrastIssues,\n      fillColors,\n      borderColors,\n      globalStyleStats,\n      mediaQueries,\n      unusedDeclarations,\n      fontInfo,\n    } = this.#data;\n\n    // Convert rgb values from the computed styles to either undefined or HEX(A) strings.\n    const sortedBackgroundColors = this.#sortColorsByLuminance(backgroundColors);\n    const sortedTextColors = this.#sortColorsByLuminance(textColors);\n    const sortedFillColors = this.#sortColorsByLuminance(fillColors);\n    const sortedBorderColors = this.#sortColorsByLuminance(borderColors);\n\n    this.#fragment = UI.Fragment.Fragment.build`\n    <div class=\"vbox overview-completed-view\">\n      <div $=\"summary\" class=\"results-section horizontally-padded summary\">\n        <h1>${i18nString(UIStrings.overviewSummary)}</h1>\n\n        <ul>\n          <li>\n            <div class=\"label\">${i18nString(UIStrings.elements)}</div>\n            <div class=\"value\">${this.#formatter.format(elementCount)}</div>\n          </li>\n          <li>\n            <div class=\"label\">${i18nString(UIStrings.externalStylesheets)}</div>\n            <div class=\"value\">${this.#formatter.format(globalStyleStats.externalSheets)}</div>\n          </li>\n          <li>\n            <div class=\"label\">${i18nString(UIStrings.inlineStyleElements)}</div>\n            <div class=\"value\">${this.#formatter.format(globalStyleStats.inlineStyles)}</div>\n          </li>\n          <li>\n            <div class=\"label\">${i18nString(UIStrings.styleRules)}</div>\n            <div class=\"value\">${this.#formatter.format(globalStyleStats.styleRules)}</div>\n          </li>\n          <li>\n            <div class=\"label\">${i18nString(UIStrings.mediaQueries)}</div>\n            <div class=\"value\">${this.#formatter.format(mediaQueries.size)}</div>\n          </li>\n          <li>\n            <div class=\"label\">${i18nString(UIStrings.typeSelectors)}</div>\n            <div class=\"value\">${this.#formatter.format(globalStyleStats.stats.type)}</div>\n          </li>\n          <li>\n            <div class=\"label\">${i18nString(UIStrings.idSelectors)}</div>\n            <div class=\"value\">${this.#formatter.format(globalStyleStats.stats.id)}</div>\n          </li>\n          <li>\n            <div class=\"label\">${i18nString(UIStrings.classSelectors)}</div>\n            <div class=\"value\">${this.#formatter.format(globalStyleStats.stats.class)}</div>\n          </li>\n          <li>\n            <div class=\"label\">${i18nString(UIStrings.universalSelectors)}</div>\n            <div class=\"value\">${this.#formatter.format(globalStyleStats.stats.universal)}</div>\n          </li>\n          <li>\n            <div class=\"label\">${i18nString(UIStrings.attributeSelectors)}</div>\n            <div class=\"value\">${this.#formatter.format(globalStyleStats.stats.attribute)}</div>\n          </li>\n          <li>\n            <div class=\"label\">${i18nString(UIStrings.nonsimpleSelectors)}</div>\n            <div class=\"value\">${this.#formatter.format(globalStyleStats.stats.nonSimple)}</div>\n          </li>\n        </ul>\n      </div>\n\n      <div $=\"colors\" class=\"results-section horizontally-padded colors\">\n        <h1>${i18nString(UIStrings.colors)}</h1>\n        <h2>${i18nString(UIStrings.backgroundColorsS, {\n      PH1: sortedBackgroundColors.length,\n    })}</h2>\n        <ul>\n          ${sortedBackgroundColors.map(this.#colorsToFragment.bind(this, 'background'))}\n        </ul>\n\n        <h2>${i18nString(UIStrings.textColorsS, {\n      PH1: sortedTextColors.length,\n    })}</h2>\n        <ul>\n          ${sortedTextColors.map(this.#colorsToFragment.bind(this, 'text'))}\n        </ul>\n\n        ${textColorContrastIssues.size > 0 ? this.#contrastIssuesToFragment(textColorContrastIssues) : ''}\n\n        <h2>${i18nString(UIStrings.fillColorsS, {\n      PH1: sortedFillColors.length,\n    })}</h2>\n        <ul>\n          ${sortedFillColors.map(this.#colorsToFragment.bind(this, 'fill'))}\n        </ul>\n\n        <h2>${i18nString(UIStrings.borderColorsS, {\n      PH1: sortedBorderColors.length,\n    })}</h2>\n        <ul>\n          ${sortedBorderColors.map(this.#colorsToFragment.bind(this, 'border'))}\n        </ul>\n      </div>\n\n      <div $=\"font-info\" class=\"results-section font-info\">\n        <h1>${i18nString(UIStrings.fontInfo)}</h1>\n        ${\n        fontInfo.size > 0 ? this.#fontInfoToFragment(fontInfo) :\n                            UI.Fragment.Fragment.build`<div>${i18nString(UIStrings.thereAreNoFonts)}</div>`}\n      </div>\n\n      <div $=\"unused-declarations\" class=\"results-section unused-declarations\">\n        <h1>${i18nString(UIStrings.unusedDeclarations)}</h1>\n        ${\n        unusedDeclarations.size > 0 ? this.#groupToFragment(unusedDeclarations, 'unused-declarations', 'declaration') :\n                                      UI.Fragment.Fragment.build`<div class=\"horizontally-padded\">${\n                                          i18nString(UIStrings.thereAreNoUnusedDeclarations)}</div>`}\n      </div>\n\n      <div $=\"media-queries\" class=\"results-section media-queries\">\n        <h1>${i18nString(UIStrings.mediaQueries)}</h1>\n        ${\n        mediaQueries.size > 0 ? this.#groupToFragment(mediaQueries, 'media-queries', 'text') :\n                                UI.Fragment.Fragment.build`<div class=\"horizontally-padded\">${\n                                    i18nString(UIStrings.thereAreNoMediaQueries)}</div>`}\n      </div>\n    </div>`;\n\n    this.#resultsContainer.element.appendChild(this.#fragment.element());\n  }\n\n  #createElementsView(evt: Common.EventTarget.EventTargetEvent<{payload: PopulateNodesEvent}>): void {\n    const {payload} = evt.data;\n\n    let id = '';\n    let tabTitle = '';\n\n    switch (payload.type) {\n      case 'contrast': {\n        const {section, key} = payload;\n        id = `${section}-${key}`;\n        tabTitle = i18nString(UIStrings.contrastIssues);\n        break;\n      }\n\n      case 'color': {\n        const {section, color} = payload;\n        id = `${section}-${color}`;\n        tabTitle = `${color.toUpperCase()} (${section})`;\n        break;\n      }\n\n      case 'unused-declarations': {\n        const {declaration} = payload;\n        id = `${declaration}`;\n        tabTitle = `${declaration}`;\n        break;\n      }\n\n      case 'media-queries': {\n        const {text} = payload;\n        id = `${text}`;\n        tabTitle = `${text}`;\n        break;\n      }\n\n      case 'font-info': {\n        const {name} = payload;\n        id = `${name}`;\n        tabTitle = `${name}`;\n        break;\n      }\n    }\n\n    let view = this.#viewMap.get(id);\n    if (!view) {\n      if (!this.#domModel || !this.#cssModel) {\n        throw new Error('Unable to initialize CSS Overview, missing models');\n      }\n      view = new ElementDetailsView(this.#controller, this.#domModel, this.#cssModel, this.#linkifier);\n      void view.populateNodes(payload.nodes);\n      this.#viewMap.set(id, view);\n    }\n\n    this.#elementContainer.appendTab(id, tabTitle, view, true);\n  }\n\n  #fontInfoToFragment(fontInfo: Map<string, Map<string, Map<string, number[]>>>): UI.Fragment.Fragment {\n    const fonts = Array.from(fontInfo.entries());\n    return UI.Fragment.Fragment.build`\n  ${fonts.map(([font, fontMetrics]) => {\n      return UI.Fragment.Fragment.build`<section class=\"font-family\"><h2>${font}</h2> ${\n          this.#fontMetricsToFragment(font, fontMetrics)}</section>`;\n    })}\n  `;\n  }\n\n  #fontMetricsToFragment(font: string, fontMetrics: Map<string, Map<string, number[]>>): UI.Fragment.Fragment {\n    const fontMetricInfo = Array.from(fontMetrics.entries());\n\n    return UI.Fragment.Fragment.build`\n  <div class=\"font-metric\">\n  ${fontMetricInfo.map(([label, values]) => {\n      const sanitizedPath = `${font}/${label}`;\n      return UI.Fragment.Fragment.build`\n  <div>\n  <h3>${label}</h3>\n  ${this.#groupToFragment(values, 'font-info', 'value', sanitizedPath)}\n  </div>`;\n    })}\n  </div>`;\n  }\n\n  #groupToFragment(\n      items: Map<string, (number | UnusedDeclaration | Protocol.CSS.CSSMedia)[]>, type: string, dataLabel: string,\n      path: string = ''): UI.Fragment.Fragment {\n    // Sort by number of items descending.\n    const values = Array.from(items.entries()).sort((d1, d2) => {\n      const v1Nodes = d1[1];\n      const v2Nodes = d2[1];\n      return v2Nodes.length - v1Nodes.length;\n    });\n\n    const total = values.reduce((prev, curr) => prev + curr[1].length, 0);\n\n    return UI.Fragment.Fragment.build`<ul>\n    ${values.map(([title, nodes]) => {\n      const width = 100 * nodes.length / total;\n      const itemLabel = i18nString(UIStrings.nOccurrences, {n: nodes.length});\n\n      return UI.Fragment.Fragment.build`<li>\n        <div class=\"title\">${title}</div>\n        <button data-type=\"${type}\" data-path=\"${path}\" data-${dataLabel}=\"${title}\">\n          <div class=\"details\">${itemLabel}</div>\n          <div class=\"bar-container\">\n            <div class=\"bar\" style=\"width: ${width}%;\"></div>\n          </div>\n        </button>\n      </li>`;\n    })}\n    </ul>`;\n  }\n\n  #contrastIssuesToFragment(issues: Map<string, ContrastIssue[]>): UI.Fragment.Fragment {\n    return UI.Fragment.Fragment.build`\n  <h2>${i18nString(UIStrings.contrastIssuesS, {\n      PH1: issues.size,\n    })}</h2>\n  <ul>\n  ${[...issues.entries()].map(([key, value]) => this.#contrastIssueToFragment(key, value))}\n  </ul>\n  `;\n  }\n\n  #contrastIssueToFragment(key: string, issues: ContrastIssue[]): UI.Fragment.Fragment {\n    console.assert(issues.length > 0);\n\n    let minContrastIssue: ContrastIssue = issues[0];\n    for (const issue of issues) {\n      // APCA contrast can be a negative value that is to be displayed. But the\n      // absolute value is used to compare against the threshold. Therefore, the min\n      // absolute value is the worst contrast.\n      if (Math.abs(issue.contrastRatio) < Math.abs(minContrastIssue.contrastRatio)) {\n        minContrastIssue = issue;\n      }\n    }\n\n    const color = (minContrastIssue.textColor.asString(Common.Color.Format.HEXA) as string);\n    const backgroundColor = (minContrastIssue.backgroundColor.asString(Common.Color.Format.HEXA) as string);\n\n    const showAPCA = Root.Runtime.experiments.isEnabled('APCA');\n\n    const blockFragment = UI.Fragment.Fragment.build`<li>\n      <button\n        title=\"${i18nString(UIStrings.textColorSOverSBackgroundResults, {\n      PH1: color,\n      PH2: backgroundColor,\n      PH3: issues.length,\n    })}\"\n        data-type=\"contrast\" data-key=\"${key}\" data-section=\"contrast\" class=\"block\" $=\"color\">\n        Text\n      </button>\n      <div class=\"block-title\">\n        <div class=\"contrast-warning hidden\" $=\"aa\"><span class=\"threshold-label\">${\n        i18nString(UIStrings.aa)}</span></div>\n        <div class=\"contrast-warning hidden\" $=\"aaa\"><span class=\"threshold-label\">${\n        i18nString(UIStrings.aaa)}</span></div>\n        <div class=\"contrast-warning hidden\" $=\"apca\"><span class=\"threshold-label\">${\n        i18nString(UIStrings.apca)}</span></div>\n      </div>\n    </li>`;\n\n    if (showAPCA) {\n      const apca = (blockFragment.$('apca') as HTMLElement);\n      if (minContrastIssue.thresholdsViolated.apca) {\n        apca.appendChild(UI.Icon.Icon.create('smallicon-no'));\n      } else {\n        apca.appendChild(UI.Icon.Icon.create('smallicon-checkmark-square'));\n      }\n      apca.classList.remove('hidden');\n    } else {\n      const aa = (blockFragment.$('aa') as HTMLElement);\n      if (minContrastIssue.thresholdsViolated.aa) {\n        aa.appendChild(UI.Icon.Icon.create('smallicon-no'));\n      } else {\n        aa.appendChild(UI.Icon.Icon.create('smallicon-checkmark-square'));\n      }\n      const aaa = (blockFragment.$('aaa') as HTMLElement);\n      if (minContrastIssue.thresholdsViolated.aaa) {\n        aaa.appendChild(UI.Icon.Icon.create('smallicon-no'));\n      } else {\n        aaa.appendChild(UI.Icon.Icon.create('smallicon-checkmark-square'));\n      }\n      aa.classList.remove('hidden');\n      aaa.classList.remove('hidden');\n    }\n\n    const block = (blockFragment.$('color') as HTMLElement);\n    block.style.backgroundColor = backgroundColor;\n    block.style.color = color;\n    block.style.border = getBorderString(minContrastIssue.backgroundColor);\n\n    return blockFragment;\n  }\n\n  #colorsToFragment(section: string, color: string): UI.Fragment.Fragment|undefined {\n    const blockFragment = UI.Fragment.Fragment.build`<li>\n      <button data-type=\"color\" data-color=\"${color}\" data-section=\"${section}\" class=\"block\" $=\"color\"></button>\n      <div class=\"block-title color-text\">${color}</div>\n    </li>`;\n\n    const block = (blockFragment.$('color') as HTMLElement);\n    block.style.backgroundColor = color;\n\n    const borderColor = Common.Color.Color.parse(color);\n    if (!borderColor) {\n      return;\n    }\n    block.style.border = getBorderString(borderColor);\n\n    return blockFragment;\n  }\n\n  #sortColorsByLuminance(srcColors: Map<string, Set<number>>): string[] {\n    return Array.from(srcColors.keys()).sort((colA, colB) => {\n      const colorA = Common.Color.Color.parse(colA);\n      const colorB = Common.Color.Color.parse(colB);\n      if (!colorA || !colorB) {\n        return 0;\n      }\n      return Common.ColorUtils.luminance(colorB.rgba()) - Common.ColorUtils.luminance(colorA.rgba());\n    });\n  }\n\n  setOverviewData(data: OverviewData): void {\n    void this.#render(data);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static readonly pushedNodes = new Set<Protocol.DOM.BackendNodeId>();\n}\nexport class DetailsView extends Common.ObjectWrapper.eventMixin<EventTypes, typeof UI.Widget.VBox>(UI.Widget.VBox) {\n  #tabbedPane: UI.TabbedPane.TabbedPane;\n  constructor() {\n    super();\n\n    this.#tabbedPane = new UI.TabbedPane.TabbedPane();\n    this.#tabbedPane.show(this.element);\n    this.#tabbedPane.addEventListener(UI.TabbedPane.Events.TabClosed, () => {\n      this.dispatchEventToListeners(Events.TabClosed, this.#tabbedPane.tabIds().length);\n    });\n  }\n\n  appendTab(id: string, tabTitle: string, view: UI.Widget.Widget, isCloseable?: boolean): void {\n    if (!this.#tabbedPane.hasTab(id)) {\n      this.#tabbedPane.appendTab(id, tabTitle, view, undefined, undefined, isCloseable);\n    }\n\n    this.#tabbedPane.selectTab(id);\n  }\n\n  closeTabs(): void {\n    this.#tabbedPane.closeTabs(this.#tabbedPane.tabIds());\n  }\n}\n\nexport const enum Events {\n  TabClosed = 'TabClosed',\n}\n\nexport type EventTypes = {\n  [Events.TabClosed]: number,\n};\n\nexport class ElementDetailsView extends UI.Widget.Widget {\n  readonly #controller: OverviewController;\n  #domModel: SDK.DOMModel.DOMModel;\n  readonly #cssModel: SDK.CSSModel.CSSModel;\n  readonly #linkifier: Components.Linkifier.Linkifier;\n  readonly #elementGridColumns: DataGrid.DataGrid.ColumnDescriptor[];\n  #elementGrid: DataGrid.SortableDataGrid.SortableDataGrid<unknown>;\n\n  constructor(\n      controller: OverviewController, domModel: SDK.DOMModel.DOMModel, cssModel: SDK.CSSModel.CSSModel,\n      linkifier: Components.Linkifier.Linkifier) {\n    super();\n\n    this.#controller = controller;\n    this.#domModel = domModel;\n    this.#cssModel = cssModel;\n    this.#linkifier = linkifier;\n\n    this.#elementGridColumns = [\n      {\n        id: 'nodeId',\n        title: i18nString(UIStrings.element),\n        sortable: true,\n        weight: 50,\n        titleDOMFragment: undefined,\n        sort: undefined,\n        align: undefined,\n        width: undefined,\n        fixedWidth: undefined,\n        editable: undefined,\n        nonSelectable: undefined,\n        longText: undefined,\n        disclosure: undefined,\n        allowInSortByEvenWhenHidden: undefined,\n        dataType: undefined,\n        defaultWeight: undefined,\n      },\n      {\n        id: 'declaration',\n        title: i18nString(UIStrings.declaration),\n        sortable: true,\n        weight: 50,\n        titleDOMFragment: undefined,\n        sort: undefined,\n        align: undefined,\n        width: undefined,\n        fixedWidth: undefined,\n        editable: undefined,\n        nonSelectable: undefined,\n        longText: undefined,\n        disclosure: undefined,\n        allowInSortByEvenWhenHidden: undefined,\n        dataType: undefined,\n        defaultWeight: undefined,\n      },\n      {\n        id: 'sourceURL',\n        title: i18nString(UIStrings.source),\n        sortable: false,\n        weight: 100,\n        titleDOMFragment: undefined,\n        sort: undefined,\n        align: undefined,\n        width: undefined,\n        fixedWidth: undefined,\n        editable: undefined,\n        nonSelectable: undefined,\n        longText: undefined,\n        disclosure: undefined,\n        allowInSortByEvenWhenHidden: undefined,\n        dataType: undefined,\n        defaultWeight: undefined,\n      },\n      {\n        id: 'contrastRatio',\n        title: i18nString(UIStrings.contrastRatio),\n        sortable: true,\n        weight: 25,\n        titleDOMFragment: undefined,\n        sort: undefined,\n        align: undefined,\n        width: '150px',\n        fixedWidth: true,\n        editable: undefined,\n        nonSelectable: undefined,\n        longText: undefined,\n        disclosure: undefined,\n        allowInSortByEvenWhenHidden: undefined,\n        dataType: undefined,\n        defaultWeight: undefined,\n      },\n    ];\n\n    this.#elementGrid = new DataGrid.SortableDataGrid.SortableDataGrid({\n      displayName: i18nString(UIStrings.cssOverviewElements),\n      columns: this.#elementGridColumns,\n      editCallback: undefined,\n      deleteCallback: undefined,\n      refreshCallback: undefined,\n    });\n    this.#elementGrid.element.classList.add('element-grid');\n    this.#elementGrid.element.addEventListener('mouseover', this.#onMouseOver.bind(this));\n    this.#elementGrid.setStriped(true);\n    this.#elementGrid.addEventListener(\n        DataGrid.DataGrid.Events.SortingChanged, this.#sortMediaQueryDataGrid.bind(this));\n\n    this.#elementGrid.asWidget().show(this.element);\n  }\n\n  #sortMediaQueryDataGrid(): void {\n    const sortColumnId = this.#elementGrid.sortColumnId();\n    if (!sortColumnId) {\n      return;\n    }\n\n    const comparator = DataGrid.SortableDataGrid.SortableDataGrid.StringComparator.bind(null, sortColumnId);\n    this.#elementGrid.sortNodes(comparator, !this.#elementGrid.isSortOrderAscending());\n  }\n\n  #onMouseOver(evt: Event): void {\n    // Traverse the event path on the grid to find the nearest element with a backend node ID attached. Use\n    // that for the highlighting.\n    const node = (evt.composedPath() as HTMLElement[]).find(el => el.dataset && el.dataset.backendNodeId);\n    if (!node) {\n      return;\n    }\n\n    const backendNodeId = Number(node.dataset.backendNodeId);\n    this.#controller.dispatchEventToListeners(CSSOverViewControllerEvents.RequestNodeHighlight, backendNodeId);\n  }\n\n  async populateNodes(data: PopulateNodesEventNodes): Promise<void> {\n    this.#elementGrid.rootNode().removeChildren();\n\n    if (!data.length) {\n      return;\n    }\n\n    const [firstItem] = data;\n    const visibility = new Set<string>();\n    'nodeId' in firstItem && firstItem.nodeId && visibility.add('nodeId');\n    'declaration' in firstItem && firstItem.declaration && visibility.add('declaration');\n    'sourceURL' in firstItem && firstItem.sourceURL && visibility.add('sourceURL');\n    'contrastRatio' in firstItem && firstItem.contrastRatio && visibility.add('contrastRatio');\n\n    let relatedNodesMap: Map<Protocol.DOM.BackendNodeId, SDK.DOMModel.DOMNode|null>|null|undefined;\n    if ('nodeId' in firstItem && visibility.has('nodeId')) {\n      // Grab the nodes from the frontend, but only those that have not been\n      // retrieved already.\n      const nodeIds = (data as {nodeId: Protocol.DOM.BackendNodeId}[]).reduce((prev, curr) => {\n        const nodeId = curr.nodeId;\n        if (CSSOverviewCompletedView.pushedNodes.has(nodeId)) {\n          return prev;\n        }\n        CSSOverviewCompletedView.pushedNodes.add(nodeId);\n        return prev.add(nodeId);\n      }, new Set<Protocol.DOM.BackendNodeId>());\n      relatedNodesMap = await this.#domModel.pushNodesByBackendIdsToFrontend(nodeIds);\n    }\n\n    for (const item of data) {\n      let frontendNode;\n      if ('nodeId' in item && visibility.has('nodeId')) {\n        if (!relatedNodesMap) {\n          continue;\n        }\n        frontendNode = relatedNodesMap.get(item.nodeId);\n        if (!frontendNode) {\n          continue;\n        }\n      }\n\n      const node = new ElementNode(item, frontendNode, this.#linkifier, this.#cssModel);\n      node.selectable = false;\n      this.#elementGrid.insertChild(node);\n    }\n\n    this.#elementGrid.setColumnsVisiblity(visibility);\n    this.#elementGrid.renderInline();\n    this.#elementGrid.wasShown();\n  }\n}\n\nexport class ElementNode extends DataGrid.SortableDataGrid.SortableDataGridNode<ElementNode> {\n  readonly #linkifier: Components.Linkifier.Linkifier;\n  readonly #cssModel: SDK.CSSModel.CSSModel;\n  readonly #frontendNode: SDK.DOMModel.DOMNode|null|undefined;\n\n  constructor(\n      data: PopulateNodesEventNodeTypes, frontendNode: SDK.DOMModel.DOMNode|null|undefined,\n      linkifier: Components.Linkifier.Linkifier, cssModel: SDK.CSSModel.CSSModel) {\n    super(data);\n\n    this.#frontendNode = frontendNode;\n    this.#linkifier = linkifier;\n    this.#cssModel = cssModel;\n  }\n\n  createCell(columnId: string): HTMLElement {\n    // Nodes.\n    const frontendNode = this.#frontendNode;\n    if (columnId === 'nodeId') {\n      const cell = this.createTD(columnId);\n      cell.textContent = '...';\n\n      if (!frontendNode) {\n        throw new Error('Node entry is missing a related frontend node.');\n      }\n\n      void Common.Linkifier.Linkifier.linkify(frontendNode).then(link => {\n        cell.textContent = '';\n        (link as HTMLElement).dataset.backendNodeId = frontendNode.backendNodeId().toString();\n        cell.appendChild(link);\n        const button = document.createElement('button');\n        button.classList.add('show-element');\n        UI.Tooltip.Tooltip.install(button, i18nString(UIStrings.showElement));\n        button.tabIndex = 0;\n        button.onclick = (): Promise<void> => frontendNode.scrollIntoView();\n        cell.appendChild(button);\n      });\n      return cell;\n    }\n\n    // Links to CSS.\n    if (columnId === 'sourceURL') {\n      const cell = this.createTD(columnId);\n\n      if (this.data.range) {\n        const link = this.#linkifyRuleLocation(\n            this.#cssModel, this.#linkifier, this.data.styleSheetId,\n            TextUtils.TextRange.TextRange.fromObject(this.data.range));\n\n        if (!link || link.textContent === '') {\n          cell.textContent = '(unable to link)';\n        } else {\n          cell.appendChild(link);\n        }\n      } else {\n        cell.textContent = '(unable to link to inlined styles)';\n      }\n      return cell;\n    }\n\n    if (columnId === 'contrastRatio') {\n      const cell = this.createTD(columnId);\n      const showAPCA = Root.Runtime.experiments.isEnabled('APCA');\n      const contrastRatio = Platform.NumberUtilities.floor(this.data.contrastRatio, 2);\n      const contrastRatioString = showAPCA ? contrastRatio + '%' : contrastRatio;\n      const border = getBorderString(this.data.backgroundColor);\n      const color = this.data.textColor.asString();\n      const backgroundColor = this.data.backgroundColor.asString();\n      const contrastFragment = UI.Fragment.Fragment.build`\n        <div class=\"contrast-container-in-grid\" $=\"container\">\n          <span class=\"contrast-preview\" style=\"border: ${border};\n          color: ${color};\n          background-color: ${backgroundColor};\">Aa</span>\n          <span>${contrastRatioString}</span>\n        </div>\n      `;\n      const container = contrastFragment.$('container');\n      if (showAPCA) {\n        container.append(UI.Fragment.Fragment.build`<span>${i18nString(UIStrings.apca)}</span>`.element());\n        if (this.data.thresholdsViolated.apca) {\n          container.appendChild(UI.Icon.Icon.create('smallicon-no'));\n        } else {\n          container.appendChild(UI.Icon.Icon.create('smallicon-checkmark-square'));\n        }\n      } else {\n        container.append(UI.Fragment.Fragment.build`<span>${i18nString(UIStrings.aa)}</span>`.element());\n        if (this.data.thresholdsViolated.aa) {\n          container.appendChild(UI.Icon.Icon.create('smallicon-no'));\n        } else {\n          container.appendChild(UI.Icon.Icon.create('smallicon-checkmark-square'));\n        }\n        container.append(UI.Fragment.Fragment.build`<span>${i18nString(UIStrings.aaa)}</span>`.element());\n        if (this.data.thresholdsViolated.aaa) {\n          container.appendChild(UI.Icon.Icon.create('smallicon-no'));\n        } else {\n          container.appendChild(UI.Icon.Icon.create('smallicon-checkmark-square'));\n        }\n      }\n      cell.appendChild(contrastFragment.element());\n      return cell;\n    }\n\n    return super.createCell(columnId);\n  }\n\n  #linkifyRuleLocation(\n      cssModel: SDK.CSSModel.CSSModel, linkifier: Components.Linkifier.Linkifier,\n      styleSheetId: Protocol.CSS.StyleSheetId, ruleLocation: TextUtils.TextRange.TextRange): Element|undefined {\n    const styleSheetHeader = cssModel.styleSheetHeaderForId(styleSheetId);\n    if (!styleSheetHeader) {\n      return;\n    }\n    const lineNumber = styleSheetHeader.lineNumberInSource(ruleLocation.startLine);\n    const columnNumber = styleSheetHeader.columnNumberInSource(ruleLocation.startLine, ruleLocation.startColumn);\n    const matchingSelectorLocation = new SDK.CSSModel.CSSLocation(styleSheetHeader, lineNumber, columnNumber);\n    return linkifier.linkifyCSSLocation(matchingSelectorLocation);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
