{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/utils/utils.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as Formatter from '../../models/formatter/formatter.js';\nimport type * as Diff from '../../third_party/diff/diff.js';\nimport * as DiffView from '../../ui/components/diff_view/diff_view.js';\n\nexport function imageNameForResourceType(resourceType: Common.ResourceType.ResourceType): string {\n  if (resourceType.isDocument()) {\n    return 'ic_file_document';\n  }\n  if (resourceType.isImage()) {\n    return 'ic_file_image';\n  }\n  if (resourceType.isFont()) {\n    return 'ic_file_font';\n  }\n  if (resourceType.isScript()) {\n    return 'ic_file_script';\n  }\n  if (resourceType.isStyleSheet()) {\n    return 'ic_file_stylesheet';\n  }\n  if (resourceType.isWebbundle()) {\n    return 'ic_file_webbundle';\n  }\n  return 'ic_file_default';\n}\n\nexport async function formatCSSChangesFromDiff(diff: Diff.Diff.DiffArray): Promise<string> {\n  const indent = '  ';\n  const {originalLines, currentLines, rows} = DiffView.DiffView.buildDiffRows(diff);\n  const originalRuleMaps = await buildStyleRuleMaps(originalLines.join('\\n'));\n  const currentRuleMaps = await buildStyleRuleMaps(currentLines.join('\\n'));\n\n  let changes = '';\n  let recordedOriginalSelector, recordedCurrentSelector;\n  let hasOpenDeclarationBlock = false;\n  for (const {currentLineNumber, originalLineNumber, type} of rows) {\n    if (type !== DiffView.DiffView.RowType.Deletion && type !== DiffView.DiffView.RowType.Addition) {\n      continue;\n    }\n\n    const isDeletion = type === DiffView.DiffView.RowType.Deletion;\n    const lines = isDeletion ? originalLines : currentLines;\n    // Diff line arrays starts at 0, but line numbers start at 1.\n    const lineIndex = isDeletion ? originalLineNumber - 1 : currentLineNumber - 1;\n    const line = lines[lineIndex].trim();\n    const {declarationIDToStyleRule, styleRuleIDToStyleRule} = isDeletion ? originalRuleMaps : currentRuleMaps;\n    let styleRule;\n    let prefix = '';\n    if (declarationIDToStyleRule.has(lineIndex)) {\n      styleRule = declarationIDToStyleRule.get(lineIndex) as FormattableStyleRule;\n      const selector = styleRule.selector;\n      // Use the equality of selector strings as a best-effort check for the equality of style rules.\n      if (selector !== recordedOriginalSelector && selector !== recordedCurrentSelector) {\n        prefix += `${selector} {\\n`;\n      }\n      prefix += indent;\n      hasOpenDeclarationBlock = true;\n    } else {\n      if (hasOpenDeclarationBlock) {\n        prefix = '}\\n\\n';\n        hasOpenDeclarationBlock = false;\n      }\n      if (styleRuleIDToStyleRule.has(lineIndex)) {\n        styleRule = styleRuleIDToStyleRule.get(lineIndex);\n      }\n    }\n\n    const processedLine = isDeletion ? `/* ${line} */` : line;\n    changes += prefix + processedLine + '\\n';\n    if (isDeletion) {\n      recordedOriginalSelector = styleRule?.selector;\n    } else {\n      recordedCurrentSelector = styleRule?.selector;\n    }\n  }\n\n  if (changes.length > 0) {\n    changes += '}';\n  }\n  return changes;\n}\n\ninterface FormattableStyleRule {\n  rule: Formatter.FormatterWorkerPool.CSSRule;\n  selector: string;\n}\n\nasync function buildStyleRuleMaps(content: string): Promise<{\n  declarationIDToStyleRule: Map<number, FormattableStyleRule>,\n  styleRuleIDToStyleRule: Map<number, FormattableStyleRule>,\n}> {\n  const rules = await new Promise<Formatter.FormatterWorkerPool.CSSRule[]>(res => {\n    const rules: Formatter.FormatterWorkerPool.CSSRule[] = [];\n    Formatter.FormatterWorkerPool.formatterWorkerPool().parseCSS(content, (isLastChunk, currentRules) => {\n      rules.push(...currentRules);\n      if (isLastChunk) {\n        res(rules);\n      }\n    });\n  });\n\n  // We use line numbers as unique IDs for rules and declarations\n  const declarationIDToStyleRule = new Map<number, FormattableStyleRule>();\n  const styleRuleIDToStyleRule = new Map<number, FormattableStyleRule>();\n  for (const rule of rules) {\n    if ('styleRange' in rule) {\n      const selector = rule.selectorText.split('\\n').pop()?.trim();\n      if (!selector) {\n        continue;\n      }\n      const styleRule = {rule, selector};\n      styleRuleIDToStyleRule.set(rule.styleRange.startLine, styleRule);\n      for (const property of rule.properties) {\n        declarationIDToStyleRule.set(property.range.startLine, styleRule);\n      }\n    }\n  }\n  return {declarationIDToStyleRule, styleRuleIDToStyleRule};\n}\n"],
  "mappings": "AAKA;AAEA;AAEO,yCAAkC,cAAwD;AAC/F,MAAI,aAAa,cAAc;AAC7B,WAAO;AAAA;AAET,MAAI,aAAa,WAAW;AAC1B,WAAO;AAAA;AAET,MAAI,aAAa,UAAU;AACzB,WAAO;AAAA;AAET,MAAI,aAAa,YAAY;AAC3B,WAAO;AAAA;AAET,MAAI,aAAa,gBAAgB;AAC/B,WAAO;AAAA;AAET,MAAI,aAAa,eAAe;AAC9B,WAAO;AAAA;AAET,SAAO;AAAA;AAGT,+CAA+C,MAA4C;AACzF,QAAM,SAAS;AACf,QAAM,EAAC,eAAe,cAAc,SAAQ,SAAS,SAAS,cAAc;AAC5E,QAAM,mBAAmB,MAAM,mBAAmB,cAAc,KAAK;AACrE,QAAM,kBAAkB,MAAM,mBAAmB,aAAa,KAAK;AAEnE,MAAI,UAAU;AACd,MAAI,0BAA0B;AAC9B,MAAI,0BAA0B;AAC9B,aAAW,EAAC,mBAAmB,oBAAoB,UAAS,MAAM;AAChE,QAAI,SAAS,SAAS,SAAS,QAAQ,YAAY,SAAS,SAAS,SAAS,QAAQ,UAAU;AAC9F;AAAA;AAGF,UAAM,aAAa,SAAS,SAAS,SAAS,QAAQ;AACtD,UAAM,QAAQ,aAAa,gBAAgB;AAE3C,UAAM,YAAY,aAAa,qBAAqB,IAAI,oBAAoB;AAC5E,UAAM,OAAO,MAAM,WAAW;AAC9B,UAAM,EAAC,0BAA0B,2BAA0B,aAAa,mBAAmB;AAC3F,QAAI;AACJ,QAAI,SAAS;AACb,QAAI,yBAAyB,IAAI,YAAY;AAC3C,kBAAY,yBAAyB,IAAI;AACzC,YAAM,WAAW,UAAU;AAE3B,UAAI,aAAa,4BAA4B,aAAa,yBAAyB;AACjF,kBAAU,GAAG;AAAA;AAAA;AAEf,gBAAU;AACV,gCAA0B;AAAA,WACrB;AACL,UAAI,yBAAyB;AAC3B,iBAAS;AACT,kCAA0B;AAAA;AAE5B,UAAI,uBAAuB,IAAI,YAAY;AACzC,oBAAY,uBAAuB,IAAI;AAAA;AAAA;AAI3C,UAAM,gBAAgB,aAAa,MAAM,YAAY;AACrD,eAAW,SAAS,gBAAgB;AACpC,QAAI,YAAY;AACd,iCAA2B,WAAW;AAAA,WACjC;AACL,gCAA0B,WAAW;AAAA;AAAA;AAIzC,MAAI,QAAQ,SAAS,GAAG;AACtB,eAAW;AAAA;AAEb,SAAO;AAAA;AAQT,kCAAkC,SAG/B;AACD,QAAM,QAAQ,MAAM,IAAI,QAAiD,SAAO;AAC9E,UAAM,SAAiD;AACvD,cAAU,oBAAoB,sBAAsB,SAAS,SAAS,CAAC,aAAa,iBAAiB;AACnG,aAAM,KAAK,GAAG;AACd,UAAI,aAAa;AACf,YAAI;AAAA;AAAA;AAAA;AAMV,QAAM,2BAA2B,oBAAI;AACrC,QAAM,yBAAyB,oBAAI;AACnC,aAAW,QAAQ,OAAO;AACxB,QAAI,gBAAgB,MAAM;AACxB,YAAM,WAAW,KAAK,aAAa,MAAM,MAAM,OAAO;AACtD,UAAI,CAAC,UAAU;AACb;AAAA;AAEF,YAAM,YAAY,EAAC,MAAM;AACzB,6BAAuB,IAAI,KAAK,WAAW,WAAW;AACtD,iBAAW,YAAY,KAAK,YAAY;AACtC,iCAAyB,IAAI,SAAS,MAAM,WAAW;AAAA;AAAA;AAAA;AAI7D,SAAO,EAAC,0BAA0B;AAAA;",
  "names": []
}
