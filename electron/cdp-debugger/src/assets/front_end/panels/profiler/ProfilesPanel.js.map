{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/profiler/ProfilesPanel.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2008 Apple Inc. All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\n// eslint-disable-next-line rulesdir/es_modules_import\nimport objectValueStyles from '../../ui/legacy/components/object_ui/objectValue.css.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport heapProfilerStyles from './heapProfiler.css.js';\nimport profilesPanelStyles from './profilesPanel.css.js';\nimport profilesSidebarTreeStyles from './profilesSidebarTree.css.js';\n\nimport type {DataDisplayDelegate, ProfileHeader, ProfileType} from './ProfileHeader.js';\nimport {ProfileEvents as ProfileTypeEvents} from './ProfileHeader.js';\nimport {Events as ProfileLauncherEvents, ProfileLauncherView} from './ProfileLauncherView.js';\nimport {ProfileSidebarTreeElement, setSharedFileSelectorElement} from './ProfileSidebarTreeElement.js';\nimport {instance} from './ProfileTypeRegistry.js';\n\nconst UIStrings = {\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon clear button in the Profiles Panel of a profiler tool\n  */\n  clearAllProfiles: 'Clear all profiles',\n  /**\n  *@description Text in Profiles Panel of a profiler tool\n  *@example {'.js', '.json'} PH1\n  */\n  cantLoadFileSupportedFile: 'Can\u2019t load file. Supported file extensions: \\'\\'{PH1}\\'\\'.',\n  /**\n  *@description Text in Profiles Panel of a profiler tool\n  */\n  cantLoadProfileWhileAnother: 'Can\u2019t load profile while another profile is being recorded.',\n  /**\n  *@description Text in Profiles Panel of a profiler tool\n  *@example {cannot open file} PH1\n  */\n  profileLoadingFailedS: 'Profile loading failed: {PH1}.',\n  /**\n  *@description A context menu item in the Profiles Panel of a profiler tool\n  */\n  load: 'Load\u2026',\n  /**\n  *@description Text in Profiles Panel of a profiler tool\n  *@example {2} PH1\n  */\n  runD: 'Run {PH1}',\n  /**\n  *@description Text in Profiles Panel of a profiler tool\n  */\n  profiles: 'Profiles',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/ProfilesPanel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class ProfilesPanel extends UI.Panel.PanelWithSidebar implements DataDisplayDelegate {\n  readonly profileTypes: ProfileType[];\n  profilesItemTreeElement: ProfilesSidebarTreeElement;\n  sidebarTree: UI.TreeOutline.TreeOutlineInShadow;\n  profileViews: HTMLDivElement;\n  readonly toolbarElement: HTMLDivElement;\n  toggleRecordAction: UI.ActionRegistration.Action;\n  readonly toggleRecordButton: UI.Toolbar.ToolbarButton;\n  clearResultsButton: UI.Toolbar.ToolbarButton;\n  readonly profileViewToolbar: UI.Toolbar.Toolbar;\n  profileGroups: {};\n  launcherView: ProfileLauncherView;\n  visibleView!: UI.Widget.Widget|undefined;\n  readonly profileToView: {\n    profile: ProfileHeader,\n    view: UI.Widget.Widget,\n  }[];\n  typeIdToSidebarSection: {\n    [x: string]: ProfileTypeSidebarSection,\n  };\n  fileSelectorElement!: HTMLInputElement;\n  selectedProfileType?: ProfileType;\n  constructor(name: string, profileTypes: ProfileType[], recordingActionId: string) {\n    super(name);\n    this.profileTypes = profileTypes;\n\n    const mainContainer = new UI.Widget.VBox();\n    this.splitWidget().setMainWidget(mainContainer);\n\n    this.profilesItemTreeElement = new ProfilesSidebarTreeElement(this);\n\n    this.sidebarTree = new UI.TreeOutline.TreeOutlineInShadow();\n\n    this.sidebarTree.element.classList.add('profiles-sidebar-tree-box');\n    this.panelSidebarElement().appendChild(this.sidebarTree.element);\n\n    this.sidebarTree.appendChild(this.profilesItemTreeElement);\n\n    this.sidebarTree.element.addEventListener('keydown', this.onKeyDown.bind(this), false);\n\n    this.profileViews = document.createElement('div');\n    this.profileViews.id = 'profile-views';\n    this.profileViews.classList.add('vbox');\n    mainContainer.element.appendChild(this.profileViews);\n\n    this.toolbarElement = document.createElement('div');\n    this.toolbarElement.classList.add('profiles-toolbar');\n    mainContainer.element.insertBefore(this.toolbarElement, mainContainer.element.firstChild);\n\n    this.panelSidebarElement().classList.add('profiles-tree-sidebar');\n    const toolbarContainerLeft = document.createElement('div');\n    toolbarContainerLeft.classList.add('profiles-toolbar');\n    this.panelSidebarElement().insertBefore(toolbarContainerLeft, this.panelSidebarElement().firstChild);\n    const toolbar = new UI.Toolbar.Toolbar('', toolbarContainerLeft);\n    this.toggleRecordAction =\n        (UI.ActionRegistry.ActionRegistry.instance().action(recordingActionId) as UI.ActionRegistration.Action);\n    this.toggleRecordButton = UI.Toolbar.Toolbar.createActionButton(this.toggleRecordAction);\n    toolbar.appendToolbarItem(this.toggleRecordButton);\n\n    this.clearResultsButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.clearAllProfiles), 'largeicon-clear');\n    this.clearResultsButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.reset, this);\n    toolbar.appendToolbarItem(this.clearResultsButton);\n    toolbar.appendSeparator();\n    toolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButtonForId('components.collect-garbage'));\n\n    this.profileViewToolbar = new UI.Toolbar.Toolbar('', this.toolbarElement);\n    this.profileViewToolbar.makeWrappable(true);\n\n    this.profileGroups = {};\n    this.launcherView = new ProfileLauncherView(this);\n    this.launcherView.addEventListener(ProfileLauncherEvents.ProfileTypeSelected, this.onProfileTypeSelected, this);\n\n    this.profileToView = [];\n\n    this.typeIdToSidebarSection = {};\n\n    const types = this.profileTypes;\n    for (let i = 0; i < types.length; i++) {\n      this.registerProfileType(types[i]);\n    }\n    this.launcherView.restoreSelectedProfileType();\n    this.profilesItemTreeElement.select();\n    this.showLauncherView();\n    this.createFileSelectorElement();\n\n    this.element.addEventListener('contextmenu', this.handleContextMenuEvent.bind(this), false);\n\n    SDK.TargetManager.TargetManager.instance().addEventListener(\n        SDK.TargetManager.Events.SuspendStateChanged, this.onSuspendStateChanged, this);\n    UI.Context.Context.instance().addFlavorChangeListener(\n        SDK.CPUProfilerModel.CPUProfilerModel, this.updateProfileTypeSpecificUI, this);\n    UI.Context.Context.instance().addFlavorChangeListener(\n        SDK.HeapProfilerModel.HeapProfilerModel, this.updateProfileTypeSpecificUI, this);\n  }\n\n  onKeyDown(ev: Event): void {\n    const event = (ev as KeyboardEvent);\n    let handled = false;\n    if (event.key === 'ArrowDown' && !event.altKey) {\n      handled = this.sidebarTree.selectNext();\n    } else if (event.key === 'ArrowUp' && !event.altKey) {\n      handled = this.sidebarTree.selectPrevious();\n    }\n    if (handled) {\n      event.consume(true);\n    }\n  }\n\n  searchableView(): UI.SearchableView.SearchableView|null {\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const visibleView = (this.visibleView as any);\n    return visibleView && visibleView.searchableView ? visibleView.searchableView() : null;\n  }\n\n  createFileSelectorElement(): void {\n    if (this.fileSelectorElement) {\n      this.element.removeChild(this.fileSelectorElement);\n    }\n    this.fileSelectorElement = UI.UIUtils.createFileSelectorElement(this.loadFromFile.bind(this));\n    setSharedFileSelectorElement(this.fileSelectorElement);\n    this.element.appendChild(this.fileSelectorElement);\n  }\n\n  findProfileTypeByExtension(fileName: string): ProfileType|null {\n    return this.profileTypes.find(\n               type => Boolean(type.fileExtension()) && fileName.endsWith(type.fileExtension() || '')) ||\n        null;\n  }\n\n  async loadFromFile(file: File): Promise<void> {\n    this.createFileSelectorElement();\n\n    const profileType = this.findProfileTypeByExtension(file.name);\n    if (!profileType) {\n      const extensions = new Set(this.profileTypes.map(type => type.fileExtension()).filter(ext => ext));\n      Common.Console.Console.instance().error(\n          i18nString(UIStrings.cantLoadFileSupportedFile, {PH1: Array.from(extensions).join('\\', \\'')}));\n      return;\n    }\n\n    if (Boolean(profileType.profileBeingRecorded())) {\n      Common.Console.Console.instance().error(i18nString(UIStrings.cantLoadProfileWhileAnother));\n      return;\n    }\n\n    const error = await profileType.loadFromFile(file);\n    if (error && 'message' in error) {\n      void UI.UIUtils.MessageDialog.show(i18nString(UIStrings.profileLoadingFailedS, {PH1: error.message}));\n    }\n  }\n\n  toggleRecord(): boolean {\n    if (!this.toggleRecordAction.enabled()) {\n      return true;\n    }\n    const toggleButton = Platform.DOMUtilities.deepActiveElement(this.element.ownerDocument);\n    const type = this.selectedProfileType;\n    if (!type) {\n      return true;\n    }\n    const isProfiling = type.buttonClicked();\n    this.updateToggleRecordAction(isProfiling);\n    if (isProfiling) {\n      this.launcherView.profileStarted();\n      if (type.hasTemporaryView()) {\n        this.showProfile(type.profileBeingRecorded());\n      }\n    } else {\n      this.launcherView.profileFinished();\n    }\n    if (toggleButton) {\n      (toggleButton as HTMLElement).focus();\n    }\n    return true;\n  }\n\n  onSuspendStateChanged(): void {\n    this.updateToggleRecordAction(this.toggleRecordAction.toggled());\n  }\n\n  updateToggleRecordAction(toggled: boolean): void {\n    const hasSelectedTarget = Boolean(\n        UI.Context.Context.instance().flavor(SDK.CPUProfilerModel.CPUProfilerModel) ||\n        UI.Context.Context.instance().flavor(SDK.HeapProfilerModel.HeapProfilerModel));\n    const enable = toggled || (!SDK.TargetManager.TargetManager.instance().allTargetsSuspended() && hasSelectedTarget);\n    this.toggleRecordAction.setEnabled(enable);\n    this.toggleRecordAction.setToggled(toggled);\n    if (enable) {\n      this.toggleRecordButton.setTitle(this.selectedProfileType ? this.selectedProfileType.buttonTooltip : '');\n    } else {\n      this.toggleRecordButton.setTitle(UI.UIUtils.anotherProfilerActiveLabel());\n    }\n    if (this.selectedProfileType) {\n      this.launcherView.updateProfileType(this.selectedProfileType, enable);\n    }\n  }\n\n  profileBeingRecordedRemoved(): void {\n    this.updateToggleRecordAction(false);\n    this.launcherView.profileFinished();\n  }\n\n  onProfileTypeSelected(event: Common.EventTarget.EventTargetEvent<ProfileType>): void {\n    this.selectedProfileType = event.data;\n    this.updateProfileTypeSpecificUI();\n  }\n\n  updateProfileTypeSpecificUI(): void {\n    this.updateToggleRecordAction(this.toggleRecordAction.toggled());\n  }\n\n  reset(): void {\n    this.profileTypes.forEach(type => type.reset());\n\n    delete this.visibleView;\n\n    this.profileGroups = {};\n    this.updateToggleRecordAction(false);\n    this.launcherView.profileFinished();\n\n    this.sidebarTree.element.classList.remove('some-expandable');\n\n    this.launcherView.detach();\n    this.profileViews.removeChildren();\n    this.profileViewToolbar.removeToolbarItems();\n\n    this.clearResultsButton.element.classList.remove('hidden');\n    this.profilesItemTreeElement.select();\n    this.showLauncherView();\n  }\n\n  showLauncherView(): void {\n    this.closeVisibleView();\n    this.profileViewToolbar.removeToolbarItems();\n    this.launcherView.show(this.profileViews);\n    this.visibleView = this.launcherView;\n    this.toolbarElement.classList.add('hidden');\n  }\n\n  registerProfileType(profileType: ProfileType): void {\n    this.launcherView.addProfileType(profileType);\n    const profileTypeSection = new ProfileTypeSidebarSection(this, profileType);\n    this.typeIdToSidebarSection[profileType.id] = profileTypeSection;\n    this.sidebarTree.appendChild(profileTypeSection);\n    profileTypeSection.childrenListElement.addEventListener(\n        'contextmenu', this.handleContextMenuEvent.bind(this), false);\n\n    function onAddProfileHeader(this: ProfilesPanel, event: Common.EventTarget.EventTargetEvent<ProfileHeader>): void {\n      this.addProfileHeader(event.data);\n    }\n\n    function onRemoveProfileHeader(\n        this: ProfilesPanel, event: Common.EventTarget.EventTargetEvent<ProfileHeader>): void {\n      this.removeProfileHeader(event.data);\n    }\n\n    function profileComplete(this: ProfilesPanel, event: Common.EventTarget.EventTargetEvent<ProfileHeader>): void {\n      this.showProfile(event.data);\n    }\n\n    profileType.addEventListener(ProfileTypeEvents.ViewUpdated, this.updateProfileTypeSpecificUI, this);\n    profileType.addEventListener(ProfileTypeEvents.AddProfileHeader, onAddProfileHeader, this);\n    profileType.addEventListener(ProfileTypeEvents.RemoveProfileHeader, onRemoveProfileHeader, this);\n    profileType.addEventListener(ProfileTypeEvents.ProfileComplete, profileComplete, this);\n\n    const profiles = profileType.getProfiles();\n    for (let i = 0; i < profiles.length; i++) {\n      this.addProfileHeader(profiles[i]);\n    }\n  }\n\n  handleContextMenuEvent(event: Event): void {\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    if (this.panelSidebarElement().isSelfOrAncestor((event.target as Node | null))) {\n      contextMenu.defaultSection().appendItem(\n          i18nString(UIStrings.load), this.fileSelectorElement.click.bind(this.fileSelectorElement));\n    }\n    void contextMenu.show();\n  }\n\n  showLoadFromFileDialog(): void {\n    this.fileSelectorElement.click();\n  }\n\n  addProfileHeader(profile: ProfileHeader): void {\n    const profileType = profile.profileType();\n    const typeId = profileType.id;\n    this.typeIdToSidebarSection[typeId].addProfileHeader(profile);\n    if (!this.visibleView || this.visibleView === this.launcherView) {\n      this.showProfile(profile);\n    }\n  }\n\n  removeProfileHeader(profile: ProfileHeader): void {\n    if (profile.profileType().profileBeingRecorded() === profile) {\n      this.profileBeingRecordedRemoved();\n    }\n\n    const i = this.indexOfViewForProfile(profile);\n    if (i !== -1) {\n      this.profileToView.splice(i, 1);\n    }\n\n    const typeId = profile.profileType().id;\n    const sectionIsEmpty = this.typeIdToSidebarSection[typeId].removeProfileHeader(profile);\n\n    // No other item will be selected if there aren't any other profiles, so\n    // make sure that view gets cleared when the last profile is removed.\n    if (sectionIsEmpty) {\n      this.profilesItemTreeElement.select();\n      this.showLauncherView();\n    }\n  }\n\n  showProfile(profile: ProfileHeader|null): UI.Widget.Widget|null {\n    if (!profile ||\n        (profile.profileType().profileBeingRecorded() === profile) && !profile.profileType().hasTemporaryView()) {\n      return null;\n    }\n\n    const view = this.viewForProfile(profile);\n    if (view === this.visibleView) {\n      return view;\n    }\n\n    this.closeVisibleView();\n\n    view.show(this.profileViews);\n    this.toolbarElement.classList.remove('hidden');\n    this.visibleView = view;\n\n    const profileTypeSection = this.typeIdToSidebarSection[profile.profileType().id];\n    const sidebarElement = profileTypeSection.sidebarElementForProfile(profile);\n    if (sidebarElement) {\n      sidebarElement.revealAndSelect();\n    }\n\n    this.profileViewToolbar.removeToolbarItems();\n\n    void (view as unknown as UI.View.View).toolbarItems().then(items => {\n      items.map(item => this.profileViewToolbar.appendToolbarItem(item));\n    });\n\n    return view;\n  }\n\n  showObject(_snapshotObjectId: string, _perspectiveName: string): void {\n  }\n\n  async linkifyObject(_nodeIndex: number): Promise<Element|null> {\n    return null;\n  }\n\n  viewForProfile(profile: ProfileHeader): UI.Widget.Widget {\n    const index = this.indexOfViewForProfile(profile);\n    if (index !== -1) {\n      return this.profileToView[index].view;\n    }\n    const view = profile.createView(this);\n    view.element.classList.add('profile-view');\n    this.profileToView.push({profile: profile, view: view});\n    return view;\n  }\n\n  indexOfViewForProfile(profile: ProfileHeader): number {\n    return this.profileToView.findIndex(item => item.profile === profile);\n  }\n\n  closeVisibleView(): void {\n    if (this.visibleView) {\n      this.visibleView.detach();\n    }\n    delete this.visibleView;\n  }\n\n  focus(): void {\n    this.sidebarTree.focus();\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([objectValueStyles, profilesPanelStyles, heapProfilerStyles]);\n    this.sidebarTree.registerCSSFiles([profilesSidebarTreeStyles]);\n  }\n}\n\nexport class ProfileTypeSidebarSection extends UI.TreeOutline.TreeElement {\n  dataDisplayDelegate: DataDisplayDelegate;\n  readonly profileTreeElements: ProfileSidebarTreeElement[];\n  profileGroups: {\n    [x: string]: ProfileGroup,\n  };\n\n  constructor(dataDisplayDelegate: DataDisplayDelegate, profileType: ProfileType) {\n    super(profileType.treeItemTitle, true);\n    this.selectable = false;\n    this.dataDisplayDelegate = dataDisplayDelegate;\n    this.profileTreeElements = [];\n    this.profileGroups = {};\n    this.expand();\n    this.hidden = true;\n    this.setCollapsible(false);\n  }\n\n  addProfileHeader(profile: ProfileHeader): void {\n    this.hidden = false;\n    const profileType = profile.profileType();\n    let sidebarParent: (ProfileGroupSidebarTreeElement|null)|this = this;\n    const profileTreeElement =\n        (profile.createSidebarTreeElement(this.dataDisplayDelegate) as ProfileSidebarTreeElement);\n    this.profileTreeElements.push(profileTreeElement);\n\n    if (!profile.fromFile() && profileType.profileBeingRecorded() !== profile) {\n      const profileTitle = profile.title;\n      let group: ProfileGroup = this.profileGroups[profileTitle];\n      if (!group) {\n        group = new ProfileGroup();\n        this.profileGroups[profileTitle] = group;\n      }\n      group.profileSidebarTreeElements.push(profileTreeElement);\n\n      const groupSize = group.profileSidebarTreeElements.length;\n      if (groupSize === 2) {\n        // Make a group UI.TreeOutline.TreeElement now that there are 2 profiles.\n        group.sidebarTreeElement = new ProfileGroupSidebarTreeElement(this.dataDisplayDelegate, profile.title);\n\n        const firstProfileTreeElement = group.profileSidebarTreeElements[0];\n        // Insert at the same index for the first profile of the group.\n        const index = this.children().indexOf(firstProfileTreeElement);\n        this.insertChild(group.sidebarTreeElement, index);\n\n        // Move the first profile to the group.\n        const selected = firstProfileTreeElement.selected;\n        this.removeChild(firstProfileTreeElement);\n        group.sidebarTreeElement.appendChild(firstProfileTreeElement);\n        if (selected) {\n          firstProfileTreeElement.revealAndSelect();\n        }\n\n        firstProfileTreeElement.setSmall(true);\n        firstProfileTreeElement.setMainTitle(i18nString(UIStrings.runD, {PH1: 1}));\n\n        if (this.treeOutline) {\n          this.treeOutline.element.classList.add('some-expandable');\n        }\n      }\n\n      if (groupSize >= 2) {\n        sidebarParent = group.sidebarTreeElement;\n        profileTreeElement.setSmall(true);\n        profileTreeElement.setMainTitle(i18nString(UIStrings.runD, {PH1: groupSize}));\n      }\n    }\n\n    if (sidebarParent) {\n      sidebarParent.appendChild(profileTreeElement);\n    }\n  }\n\n  removeProfileHeader(profile: ProfileHeader): boolean {\n    const index = this.sidebarElementIndex(profile);\n    if (index === -1) {\n      return false;\n    }\n    const profileTreeElement = this.profileTreeElements[index];\n    this.profileTreeElements.splice(index, 1);\n\n    let sidebarParent: (ProfileGroupSidebarTreeElement|null)|this = this;\n    const group = this.profileGroups[profile.title];\n    if (group) {\n      const groupElements = group.profileSidebarTreeElements;\n      groupElements.splice(groupElements.indexOf(profileTreeElement), 1);\n      if (groupElements.length === 1) {\n        // Move the last profile out of its group and remove the group.\n        const pos = sidebarParent.children().indexOf((group.sidebarTreeElement as ProfileGroupSidebarTreeElement));\n        if (group.sidebarTreeElement) {\n          group.sidebarTreeElement.removeChild(groupElements[0]);\n        }\n        this.insertChild(groupElements[0], pos);\n        groupElements[0].setSmall(false);\n        groupElements[0].setMainTitle(profile.title);\n        if (group.sidebarTreeElement) {\n          this.removeChild(group.sidebarTreeElement);\n        }\n      }\n      if (groupElements.length !== 0) {\n        sidebarParent = group.sidebarTreeElement;\n      }\n    }\n    if (sidebarParent) {\n      sidebarParent.removeChild(profileTreeElement);\n    }\n    profileTreeElement.dispose();\n\n    if (this.childCount()) {\n      return false;\n    }\n    this.hidden = true;\n    return true;\n  }\n\n  sidebarElementForProfile(profile: ProfileHeader): ProfileSidebarTreeElement|null {\n    const index = this.sidebarElementIndex(profile);\n    return index === -1 ? null : this.profileTreeElements[index];\n  }\n\n  sidebarElementIndex(profile: ProfileHeader): number {\n    const elements = this.profileTreeElements;\n    for (let i = 0; i < elements.length; i++) {\n      if (elements[i].profile === profile) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  onattach(): void {\n    this.listItemElement.classList.add('profiles-tree-section');\n  }\n}\n\nexport class ProfileGroup {\n  profileSidebarTreeElements: ProfileSidebarTreeElement[];\n  sidebarTreeElement: ProfileGroupSidebarTreeElement|null;\n  constructor() {\n    this.profileSidebarTreeElements = [];\n    this.sidebarTreeElement = null;\n  }\n}\n\nexport class ProfileGroupSidebarTreeElement extends UI.TreeOutline.TreeElement {\n  readonly dataDisplayDelegate: DataDisplayDelegate;\n  profileTitle: string;\n  toggleOnClick: boolean;\n\n  constructor(dataDisplayDelegate: DataDisplayDelegate, title: string) {\n    super('', true);\n    this.selectable = false;\n    this.dataDisplayDelegate = dataDisplayDelegate;\n    this.profileTitle = title;\n    this.expand();\n    this.toggleOnClick = true;\n  }\n\n  onselect(): boolean {\n    const hasChildren = this.childCount() > 0;\n    if (hasChildren) {\n      const lastChild = this.lastChild();\n      if (lastChild instanceof ProfileSidebarTreeElement) {\n        this.dataDisplayDelegate.showProfile(lastChild.profile);\n      }\n    }\n    return hasChildren;\n  }\n\n  onattach(): void {\n    this.listItemElement.classList.add('profile-group-sidebar-tree-item');\n    this.listItemElement.createChild('div', 'icon');\n    this.listItemElement.createChild('div', 'titles no-subtitle')\n        .createChild('span', 'title-container')\n        .createChild('span', 'title')\n        .textContent = this.profileTitle;\n  }\n}\n\nexport class ProfilesSidebarTreeElement extends UI.TreeOutline.TreeElement {\n  readonly panel: ProfilesPanel;\n\n  constructor(panel: ProfilesPanel) {\n    super('', false);\n    this.selectable = true;\n    this.panel = panel;\n  }\n\n  onselect(): boolean {\n    this.panel.showLauncherView();\n    return true;\n  }\n\n  onattach(): void {\n    this.listItemElement.classList.add('profile-launcher-view-tree-item');\n    this.listItemElement.createChild('div', 'icon');\n    this.listItemElement.createChild('div', 'titles no-subtitle')\n        .createChild('span', 'title-container')\n        .createChild('span', 'title')\n        .textContent = i18nString(UIStrings.profiles);\n  }\n}\n\nlet jsProfilerPanelInstance: JSProfilerPanel;\n\nexport class JSProfilerPanel extends ProfilesPanel implements UI.ActionRegistration.ActionDelegate {\n  constructor() {\n    const registry = instance;\n    super('js_profiler', [registry.cpuProfileType], 'profiler.js-toggle-recording');\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): JSProfilerPanel {\n    const {forceNew} = opts;\n    if (!jsProfilerPanelInstance || forceNew) {\n      jsProfilerPanelInstance = new JSProfilerPanel();\n    }\n    return jsProfilerPanelInstance;\n  }\n  wasShown(): void {\n    super.wasShown();\n    UI.Context.Context.instance().setFlavor(JSProfilerPanel, this);\n  }\n\n  willHide(): void {\n    UI.Context.Context.instance().setFlavor(JSProfilerPanel, null);\n  }\n\n  handleAction(_context: UI.Context.Context, _actionId: string): boolean {\n    const panel = UI.Context.Context.instance().flavor(JSProfilerPanel);\n    if (panel instanceof JSProfilerPanel) {\n      panel.toggleRecord();\n    } else {\n      throw new Error('non-null JSProfilerPanel expected!');\n    }\n    return true;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
