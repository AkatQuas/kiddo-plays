{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/profiler/HeapTimelineOverview.ts"],
  "sourcesContent": ["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nexport class HeapTimelineOverview extends Common.ObjectWrapper.eventMixin<EventTypes, typeof UI.Widget.VBox>(\n    UI.Widget.VBox) {\n  readonly overviewCalculator: OverviewCalculator;\n  overviewContainer: HTMLElement;\n  overviewGrid: PerfUI.OverviewGrid.OverviewGrid;\n  overviewCanvas: HTMLCanvasElement;\n  windowLeft: number;\n  windowRight: number;\n  readonly yScale: SmoothScale;\n  readonly xScale: SmoothScale;\n  profileSamples: Samples;\n  running?: boolean;\n  updateOverviewCanvas?: boolean;\n  updateGridTimerId?: number;\n  updateTimerId?: number|null;\n  windowWidth?: number;\n  constructor() {\n    super();\n    this.element.id = 'heap-recording-view';\n    this.element.classList.add('heap-tracking-overview');\n\n    this.overviewCalculator = new OverviewCalculator();\n    this.overviewContainer = this.element.createChild('div', 'heap-overview-container');\n    this.overviewGrid = new PerfUI.OverviewGrid.OverviewGrid('heap-recording', this.overviewCalculator);\n    this.overviewGrid.element.classList.add('fill');\n    this.overviewCanvas =\n        (this.overviewContainer.createChild('canvas', 'heap-recording-overview-canvas') as HTMLCanvasElement);\n    this.overviewContainer.appendChild(this.overviewGrid.element);\n    this.overviewGrid.addEventListener(PerfUI.OverviewGrid.Events.WindowChanged, this.onWindowChanged, this);\n\n    this.windowLeft = 0.0;\n    this.windowRight = 1.0;\n    this.overviewGrid.setWindow(this.windowLeft, this.windowRight);\n    this.yScale = new SmoothScale();\n    this.xScale = new SmoothScale();\n\n    this.profileSamples = new Samples();\n  }\n\n  start(): void {\n    this.running = true;\n    const drawFrame = (): void => {\n      this.update();\n      if (this.running) {\n        this.element.window().requestAnimationFrame(drawFrame);\n      }\n    };\n    drawFrame();\n  }\n\n  stop(): void {\n    this.running = false;\n  }\n\n  setSamples(samples: Samples): void {\n    this.profileSamples = samples;\n    if (!this.running) {\n      this.update();\n    }\n  }\n\n  drawOverviewCanvas(width: number, height: number): void {\n    if (!this.profileSamples) {\n      return;\n    }\n    const profileSamples = this.profileSamples;\n    const sizes = profileSamples.sizes;\n    const topSizes = profileSamples.max;\n    const timestamps = profileSamples.timestamps;\n    const startTime = timestamps[0];\n\n    const scaleFactor = this.xScale.nextScale(width / profileSamples.totalTime);\n    let maxSize = 0;\n    function aggregateAndCall(sizes: number[], callback: (arg0: number, arg1: number) => void): void {\n      let size = 0;\n      let currentX = 0;\n      for (let i = 1; i < timestamps.length; ++i) {\n        const x = Math.floor((timestamps[i] - startTime) * scaleFactor);\n        if (x !== currentX) {\n          if (size) {\n            callback(currentX, size);\n          }\n          size = 0;\n          currentX = x;\n        }\n        size += sizes[i];\n      }\n      callback(currentX, size);\n    }\n\n    function maxSizeCallback(x: number, size: number): void {\n      maxSize = Math.max(maxSize, size);\n    }\n\n    aggregateAndCall(sizes, maxSizeCallback);\n\n    const yScaleFactor = this.yScale.nextScale(maxSize ? height / (maxSize * 1.1) : 0.0);\n\n    this.overviewCanvas.width = width * window.devicePixelRatio;\n    this.overviewCanvas.height = height * window.devicePixelRatio;\n    this.overviewCanvas.style.width = width + 'px';\n    this.overviewCanvas.style.height = height + 'px';\n\n    const maybeContext = this.overviewCanvas.getContext('2d');\n    if (!maybeContext) {\n      throw new Error('Failed to get canvas context');\n    }\n    const context = maybeContext;\n    context.scale(window.devicePixelRatio, window.devicePixelRatio);\n\n    if (this.running) {\n      context.beginPath();\n      context.lineWidth = 2;\n      context.strokeStyle = 'rgba(192, 192, 192, 0.6)';\n      const currentX = (Date.now() - startTime) * scaleFactor;\n      context.moveTo(currentX, height - 1);\n      context.lineTo(currentX, 0);\n      context.stroke();\n      context.closePath();\n    }\n\n    let gridY = 0;\n    let gridValue;\n    const gridLabelHeight = 14;\n    if (yScaleFactor) {\n      const maxGridValue = (height - gridLabelHeight) / yScaleFactor;\n      // The round value calculation is a bit tricky, because\n      // it has a form k*10^n*1024^m, where k=[1,5], n=[0..3], m is an integer,\n      // e.g. a round value 10KB is 10240 bytes.\n      gridValue = Math.pow(1024, Math.floor(Math.log(maxGridValue) / Math.log(1024)));\n      gridValue *= Math.pow(10, Math.floor(Math.log(maxGridValue / gridValue) / Math.LN10));\n      if (gridValue * 5 <= maxGridValue) {\n        gridValue *= 5;\n      }\n      gridY = Math.round(height - gridValue * yScaleFactor - 0.5) + 0.5;\n      context.beginPath();\n      context.lineWidth = 1;\n      context.strokeStyle = 'rgba(0, 0, 0, 0.2)';\n      context.moveTo(0, gridY);\n      context.lineTo(width, gridY);\n      context.stroke();\n      context.closePath();\n    }\n\n    function drawBarCallback(x: number, size: number): void {\n      context.moveTo(x, height - 1);\n      context.lineTo(x, Math.round(height - size * yScaleFactor - 1));\n    }\n\n    context.beginPath();\n    context.lineWidth = 2;\n    context.strokeStyle = 'rgba(192, 192, 192, 0.6)';\n    aggregateAndCall(topSizes, drawBarCallback);\n    context.stroke();\n    context.closePath();\n\n    context.beginPath();\n    context.lineWidth = 2;\n    context.strokeStyle = 'rgba(0, 0, 192, 0.8)';\n    aggregateAndCall(sizes, drawBarCallback);\n    context.stroke();\n    context.closePath();\n\n    if (gridValue) {\n      const label = Platform.NumberUtilities.bytesToString(gridValue);\n      const labelPadding = 4;\n      const labelX = 0;\n      const labelY = gridY - 0.5;\n      const labelWidth = 2 * labelPadding + context.measureText(label).width;\n      context.beginPath();\n      context.textBaseline = 'bottom';\n      context.font = '10px ' + window.getComputedStyle(this.element, null).getPropertyValue('font-family');\n      context.fillStyle = 'rgba(255, 255, 255, 0.75)';\n      context.fillRect(labelX, labelY - gridLabelHeight, labelWidth, gridLabelHeight);\n      context.fillStyle = 'rgb(64, 64, 64)';\n      context.fillText(label, labelX + labelPadding, labelY);\n      context.fill();\n      context.closePath();\n    }\n  }\n\n  onResize(): void {\n    this.updateOverviewCanvas = true;\n    this.scheduleUpdate();\n  }\n\n  onWindowChanged(): void {\n    if (!this.updateGridTimerId) {\n      this.updateGridTimerId = window.setTimeout(this.updateGrid.bind(this), 10);\n    }\n  }\n\n  scheduleUpdate(): void {\n    if (this.updateTimerId) {\n      return;\n    }\n    this.updateTimerId = window.setTimeout(this.update.bind(this), 10);\n  }\n\n  updateBoundaries(): void {\n    this.windowLeft = this.overviewGrid.windowLeft();\n    this.windowRight = this.overviewGrid.windowRight();\n    this.windowWidth = this.windowRight - this.windowLeft;\n  }\n\n  update(): void {\n    this.updateTimerId = null;\n    if (!this.isShowing()) {\n      return;\n    }\n    this.updateBoundaries();\n    this.overviewCalculator.updateBoundaries(this);\n    this.overviewGrid.updateDividers(this.overviewCalculator);\n    this.drawOverviewCanvas(this.overviewContainer.clientWidth, this.overviewContainer.clientHeight - 20);\n  }\n\n  updateGrid(): void {\n    this.updateGridTimerId = 0;\n    this.updateBoundaries();\n    const ids = this.profileSamples.ids;\n    if (!ids.length) {\n      return;\n    }\n    const timestamps = this.profileSamples.timestamps;\n    const sizes = this.profileSamples.sizes;\n    const startTime = timestamps[0];\n    const totalTime = this.profileSamples.totalTime;\n    const timeLeft = startTime + totalTime * this.windowLeft;\n    const timeRight = startTime + totalTime * this.windowRight;\n    const minIndex =\n        Platform.ArrayUtilities.lowerBound(timestamps, timeLeft, Platform.ArrayUtilities.DEFAULT_COMPARATOR);\n    const maxIndex =\n        Platform.ArrayUtilities.upperBound(timestamps, timeRight, Platform.ArrayUtilities.DEFAULT_COMPARATOR);\n    let size = 0;\n    for (let i = minIndex; i < maxIndex; ++i) {\n      size += sizes[i];\n    }\n    const minId = minIndex > 0 ? ids[minIndex - 1] : 0;\n    const maxId = maxIndex < ids.length ? ids[maxIndex] : Infinity;\n\n    this.dispatchEventToListeners(Events.IdsRangeChanged, {minId, maxId, size});\n  }\n}\n\nexport const enum Events {\n  IdsRangeChanged = 'IdsRangeChanged',\n}\n\nexport interface IdsRangeChangedEvent {\n  minId: number;\n  maxId: number;\n  size: number;\n}\n\nexport type EventTypes = {\n  [Events.IdsRangeChanged]: IdsRangeChangedEvent,\n};\n\nexport class SmoothScale {\n  lastUpdate: number;\n  currentScale: number;\n  constructor() {\n    this.lastUpdate = 0;\n    this.currentScale = 0.0;\n  }\n\n  nextScale(target: number): number {\n    target = target || this.currentScale;\n    if (this.currentScale) {\n      const now = Date.now();\n      const timeDeltaMs = now - this.lastUpdate;\n      this.lastUpdate = now;\n      const maxChangePerSec = 20;\n      const maxChangePerDelta = Math.pow(maxChangePerSec, timeDeltaMs / 1000);\n      const scaleChange = target / this.currentScale;\n      this.currentScale *= Platform.NumberUtilities.clamp(scaleChange, 1 / maxChangePerDelta, maxChangePerDelta);\n    } else {\n      this.currentScale = target;\n    }\n    return this.currentScale;\n  }\n}\n\nexport class Samples {\n  sizes: number[];\n  ids: number[];\n  timestamps: number[];\n  max: number[];\n  totalTime: number;\n  constructor() {\n    this.sizes = [];\n    this.ids = [];\n    this.timestamps = [];\n    this.max = [];\n    this.totalTime = 30000;\n  }\n}\n\nexport class OverviewCalculator implements PerfUI.TimelineGrid.Calculator {\n  maximumBoundaries: number;\n  minimumBoundaries: number;\n  xScaleFactor: number;\n  constructor() {\n    this.maximumBoundaries = 0;\n    this.minimumBoundaries = 0;\n    this.xScaleFactor = 0;\n  }\n\n  updateBoundaries(chart: HeapTimelineOverview): void {\n    this.minimumBoundaries = 0;\n    this.maximumBoundaries = chart.profileSamples.totalTime;\n    this.xScaleFactor = chart.overviewContainer.clientWidth / this.maximumBoundaries;\n  }\n\n  computePosition(time: number): number {\n    return (time - this.minimumBoundaries) * this.xScaleFactor;\n  }\n\n  formatValue(value: number, precision?: number): string {\n    return i18n.TimeUtilities.secondsToString(value / 1000, Boolean(precision));\n  }\n\n  maximumBoundary(): number {\n    return this.maximumBoundaries;\n  }\n\n  minimumBoundary(): number {\n    return this.minimumBoundaries;\n  }\n\n  zeroTime(): number {\n    return this.minimumBoundaries;\n  }\n\n  boundarySpan(): number {\n    return this.maximumBoundaries - this.minimumBoundaries;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
