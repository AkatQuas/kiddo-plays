{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/profiler/HeapSnapshotView.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as HeapSnapshotModel from '../../models/heap_snapshot_model/heap_snapshot_model.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as ObjectUI from '../../ui/legacy/components/object_ui/object_ui.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type {HeapSnapshotSortableDataGrid} from './HeapSnapshotDataGrids.js';\nimport {\n  AllocationDataGrid,\n  HeapSnapshotSortableDataGridEvents,\n  HeapSnapshotConstructorsDataGrid,\n  HeapSnapshotDiffDataGrid,\n  HeapSnapshotRetainmentDataGrid,\n  HeapSnapshotContainmentDataGrid,\n} from './HeapSnapshotDataGrids.js';\nimport type {AllocationGridNode, HeapSnapshotGridNode} from './HeapSnapshotGridNodes.js';\nimport {HeapSnapshotGenericObjectNode} from './HeapSnapshotGridNodes.js';\nimport type {HeapSnapshotProxy} from './HeapSnapshotProxy.js';\nimport {HeapSnapshotWorkerProxy} from './HeapSnapshotProxy.js';\nimport type {IdsRangeChangedEvent} from './HeapTimelineOverview.js';\nimport {HeapTimelineOverview, Events, Samples} from './HeapTimelineOverview.js';\nimport * as ModuleUIStrings from './ModuleUIStrings.js';\nimport type {DataDisplayDelegate} from './ProfileHeader.js';\nimport {\n  Events as ProfileHeaderEvents,\n  ProfileEvents as ProfileTypeEvents,\n  ProfileHeader,\n  ProfileType,\n} from './ProfileHeader.js';\nimport {ProfileSidebarTreeElement} from './ProfileSidebarTreeElement.js';\nimport {instance} from './ProfileTypeRegistry.js';\n\nconst UIStrings = {\n  /**\n  *@description Text to find an item\n  */\n  find: 'Find',\n  /**\n  *@description Text in Heap Snapshot View of a profiler tool\n  */\n  containment: 'Containment',\n  /**\n  *@description Retaining paths title text content in Heap Snapshot View of a profiler tool\n  */\n  retainers: 'Retainers',\n  /**\n  *@description Text in Heap Snapshot View of a profiler tool\n  */\n  allocationStack: 'Allocation stack',\n  /**\n  *@description Screen reader label for a select box that chooses the perspective in the Memory panel when vieweing a Heap Snapshot\n  */\n  perspective: 'Perspective',\n  /**\n  *@description Screen reader label for a select box that chooses the snapshot to use as a base in the Memory panel when vieweing a Heap Snapshot\n  */\n  baseSnapshot: 'Base snapshot',\n  /**\n  *@description Text to filter result items\n  */\n  filter: 'Filter',\n  /**\n  * @description Filter label text in the Memory tool to filter by JavaScript class names for a heap\n  * snapshot.\n  */\n  classFilter: 'Class filter',\n  /**\n  *@description Text in Heap Snapshot View of a profiler tool\n  */\n  code: 'Code',\n  /**\n  *@description Text in Heap Snapshot View of a profiler tool\n  */\n  strings: 'Strings',\n  /**\n  *@description Label on a pie chart in the statistics view for the Heap Snapshot tool\n  */\n  jsArrays: 'JS arrays',\n  /**\n  *@description Label on a pie chart in the statistics view for the Heap Snapshot tool\n  */\n  typedArrays: 'Typed arrays',\n  /**\n  *@description Label on a pie chart in the statistics view for the Heap Snapshot tool\n  */\n  systemObjects: 'System objects',\n  /**\n  *@description The reported total size used in the selected time frame of the allocation sampling profile\n  *@example {3 MB} PH1\n  */\n  selectedSizeS: 'Selected size: {PH1}',\n  /**\n  *@description Text in Heap Snapshot View of a profiler tool\n  */\n  allObjects: 'All objects',\n  /**\n  *@description Title in Heap Snapshot View of a profiler tool\n  *@example {Profile 2} PH1\n  */\n  objectsAllocatedBeforeS: 'Objects allocated before {PH1}',\n  /**\n  *@description Title in Heap Snapshot View of a profiler tool\n  *@example {Profile 1} PH1\n  *@example {Profile 2} PH2\n  */\n  objectsAllocatedBetweenSAndS: 'Objects allocated between {PH1} and {PH2}',\n  /**\n  *@description Text for the summary view\n  */\n  summary: 'Summary',\n  /**\n  *@description Text in Heap Snapshot View of a profiler tool\n  */\n  comparison: 'Comparison',\n  /**\n  *@description Text in Heap Snapshot View of a profiler tool\n  */\n  allocation: 'Allocation',\n  /**\n  *@description Title text content in Heap Snapshot View of a profiler tool\n  */\n  liveObjects: 'Live objects',\n  /**\n  *@description Text in Heap Snapshot View of a profiler tool\n  */\n  statistics: 'Statistics',\n  /**\n  *@description Text in Heap Snapshot View of a profiler tool\n  */\n  heapSnapshot: 'Heap snapshot',\n  /**\n  *@description Text in Heap Snapshot View of a profiler tool\n  */\n  takeHeapSnapshot: 'Take heap snapshot',\n  /**\n  *@description Text in Heap Snapshot View of a profiler tool\n  */\n  heapSnapshots: 'HEAP SNAPSHOTS',\n  /**\n  *@description Text in Heap Snapshot View of a profiler tool\n  */\n  heapSnapshotProfilesShowMemory:\n      'Heap snapshot profiles show memory distribution among your page\\'s JavaScript objects and related DOM nodes.',\n  /**\n  *@description Label for a checkbox in the heap snapshot view of the profiler tool. The \"heap snapshot\" contains the\n  * current state of JavaScript memory. With this checkbox enabled, the snapshot also includes internal data that is\n  * specific to Chrome (hence implementation-specific).\n  */\n  exposeInternals: 'Expose internals (includes additional implementation-specific details)',\n  /**\n  *@description Text in Heap Snapshot View of a profiler tool\n  * This option turns on inclusion of numerical values in the heap snapshot.\n  */\n  captureNumericValue: 'Include numerical values in capture',\n  /**\n  *@description Progress update that the profiler is capturing a snapshot of the heap\n  */\n  snapshotting: 'Snapshotting\u2026',\n  /**\n  *@description Profile title in Heap Snapshot View of a profiler tool\n  *@example {1} PH1\n  */\n  snapshotD: 'Snapshot {PH1}',\n  /**\n  *@description Text for a percentage value\n  *@example {13.0} PH1\n  */\n  percentagePlaceholder: '{PH1}%',\n  /**\n  *@description Text in Heap Snapshot View of a profiler tool\n  */\n  allocationInstrumentationOn: 'Allocation instrumentation on timeline',\n  /**\n  *@description Text in Heap Snapshot View of a profiler tool\n  */\n  stopRecordingHeapProfile: 'Stop recording heap profile',\n  /**\n  *@description Text in Heap Snapshot View of a profiler tool\n  */\n  startRecordingHeapProfile: 'Start recording heap profile',\n  /**\n  *@description Text in Heap Snapshot View of a profiler tool.\n  * A stack trace is a list of functions that were called.\n  * This option turns on recording of a stack trace at each allocation.\n  * The recording itself is a somewhat expensive operation, so turning this option on, the website's performance may be affected negatively (e.g. everything becomes slower).\n  */\n  recordAllocationStacksExtra: 'Record stack traces of allocations (extra performance overhead)',\n  /**\n  *@description Text in CPUProfile View of a profiler tool\n  */\n  recording: 'Recording\u2026',\n  /**\n  *@description Text in Heap Snapshot View of a profiler tool\n  */\n  allocationTimelines: 'ALLOCATION TIMELINES',\n  /**\n  *@description Description for the 'Allocation timeline' tool in the Memory panel.\n  */\n  AllocationTimelinesShowInstrumented:\n      'Allocation timelines show instrumented JavaScript memory allocations over time. Once profile is recorded you can select a time interval to see objects that were allocated within it and still alive by the end of recording. Use this profile type to isolate memory leaks.',\n  /**\n  *@description Text when something is loading\n  */\n  loading: 'Loading\u2026',\n  /**\n  *@description Text in Heap Snapshot View of a profiler tool\n  *@example {30} PH1\n  */\n  savingD: 'Saving\u2026 {PH1}%',\n  /**\n  *@description Text in Heap Snapshot View of a profiler tool\n  *@example {1,021} PH1\n  */\n  sKb: '{PH1} kB',\n  /**\n  *@description Text in Heap Snapshot View of a profiler tool\n  */\n  heapMemoryUsage: 'Heap memory usage',\n  /**\n  *@description Text of a DOM element in Heap Snapshot View of a profiler tool\n  */\n  stackWasNotRecordedForThisObject:\n      'Stack was not recorded for this object because it had been allocated before this profile recording started.',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/HeapSnapshotView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n// The way this is handled is to workaround the strings inside the heap_snapshot_worker\n// If strings are removed from inside the worker strings can be declared in this module\n// as any other.\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst moduleUIstr_ = i18n.i18n.registerUIStrings('panels/profiler/ModuleUIStrings.ts', ModuleUIStrings.UIStrings);\nconst moduleI18nString = i18n.i18n.getLocalizedString.bind(undefined, moduleUIstr_);\nexport class HeapSnapshotView extends UI.View.SimpleView implements DataDisplayDelegate, UI.SearchableView.Searchable {\n  searchResults: number[];\n  profile: HeapProfileHeader;\n  readonly linkifier: Components.Linkifier.Linkifier;\n  readonly parentDataDisplayDelegate: DataDisplayDelegate;\n  readonly searchableViewInternal: UI.SearchableView.SearchableView;\n  readonly splitWidget: UI.SplitWidget.SplitWidget;\n  readonly containmentDataGrid: HeapSnapshotContainmentDataGrid;\n  readonly containmentWidget: DataGrid.DataGrid.DataGridWidget<HeapSnapshotGridNode>;\n  readonly statisticsView: HeapSnapshotStatisticsView;\n  readonly constructorsDataGrid: HeapSnapshotConstructorsDataGrid;\n  readonly constructorsWidget: DataGrid.DataGrid.DataGridWidget<HeapSnapshotGridNode>;\n  readonly diffDataGrid: HeapSnapshotDiffDataGrid;\n  readonly diffWidget: DataGrid.DataGrid.DataGridWidget<HeapSnapshotGridNode>;\n  readonly allocationDataGrid: AllocationDataGrid|null;\n  readonly allocationWidget: DataGrid.DataGrid.DataGridWidget<HeapSnapshotGridNode>|undefined;\n  readonly allocationStackView: HeapAllocationStackView|undefined;\n  readonly tabbedPane: UI.TabbedPane.TabbedPane|undefined;\n  readonly retainmentDataGrid: HeapSnapshotRetainmentDataGrid;\n  readonly retainmentWidget: DataGrid.DataGrid.DataGridWidget<HeapSnapshotGridNode>;\n  readonly objectDetailsView: UI.Widget.VBox;\n  readonly perspectives: (SummaryPerspective|ComparisonPerspective|ContainmentPerspective|AllocationPerspective|\n                          StatisticsPerspective)[];\n  readonly comparisonPerspective: ComparisonPerspective;\n  readonly perspectiveSelect: UI.Toolbar.ToolbarComboBox;\n  baseSelect: UI.Toolbar.ToolbarComboBox;\n  readonly filterSelect: UI.Toolbar.ToolbarComboBox;\n  readonly classNameFilter: UI.Toolbar.ToolbarInput;\n  readonly selectedSizeText: UI.Toolbar.ToolbarText;\n  readonly popoverHelper: UI.PopoverHelper.PopoverHelper;\n  currentPerspectiveIndex: number;\n  currentPerspective: SummaryPerspective|ComparisonPerspective|ContainmentPerspective|AllocationPerspective|\n      StatisticsPerspective;\n  dataGrid: HeapSnapshotSortableDataGrid|null;\n  readonly searchThrottler: Common.Throttler.Throttler;\n  baseProfile!: HeapProfileHeader|null;\n  trackingOverviewGrid?: HeapTimelineOverview;\n  currentSearchResultIndex: number = -1;\n  currentQuery?: HeapSnapshotModel.HeapSnapshotModel.SearchConfig;\n  constructor(dataDisplayDelegate: DataDisplayDelegate, profile: HeapProfileHeader) {\n    super(i18nString(UIStrings.heapSnapshot));\n\n    this.searchResults = [];\n\n    this.element.classList.add('heap-snapshot-view');\n    this.profile = profile;\n    this.linkifier = new Components.Linkifier.Linkifier();\n    const profileType = profile.profileType();\n\n    profileType.addEventListener(HeapSnapshotProfileTypeEvents.SnapshotReceived, this.onReceiveSnapshot, this);\n    profileType.addEventListener(ProfileTypeEvents.RemoveProfileHeader, this.onProfileHeaderRemoved, this);\n\n    const isHeapTimeline = profileType.id === TrackingHeapSnapshotProfileType.TypeId;\n    if (isHeapTimeline) {\n      this.createOverview();\n    }\n    const hasAllocationStacks = instance.trackingHeapSnapshotProfileType.recordAllocationStacksSetting().get();\n\n    this.parentDataDisplayDelegate = dataDisplayDelegate;\n\n    this.searchableViewInternal = new UI.SearchableView.SearchableView(this, null);\n    this.searchableViewInternal.setPlaceholder(i18nString(UIStrings.find), i18nString(UIStrings.find));\n    this.searchableViewInternal.show(this.element);\n\n    this.splitWidget = new UI.SplitWidget.SplitWidget(false, true, 'heapSnapshotSplitViewState', 200, 200);\n    this.splitWidget.show(this.searchableViewInternal.element);\n\n    const heapProfilerModel = profile.heapProfilerModel();\n    this.containmentDataGrid = new HeapSnapshotContainmentDataGrid(\n        heapProfilerModel, this, /* displayName */ i18nString(UIStrings.containment));\n    this.containmentDataGrid.addEventListener(DataGrid.DataGrid.Events.SelectedNode, this.selectionChanged, this);\n    this.containmentWidget = this.containmentDataGrid.asWidget();\n    this.containmentWidget.setMinimumSize(50, 25);\n\n    this.statisticsView = new HeapSnapshotStatisticsView();\n\n    this.constructorsDataGrid = new HeapSnapshotConstructorsDataGrid(heapProfilerModel, this);\n    this.constructorsDataGrid.addEventListener(DataGrid.DataGrid.Events.SelectedNode, this.selectionChanged, this);\n    this.constructorsWidget = this.constructorsDataGrid.asWidget();\n    this.constructorsWidget.setMinimumSize(50, 25);\n\n    this.diffDataGrid = new HeapSnapshotDiffDataGrid(heapProfilerModel, this);\n    this.diffDataGrid.addEventListener(DataGrid.DataGrid.Events.SelectedNode, this.selectionChanged, this);\n    this.diffWidget = this.diffDataGrid.asWidget();\n    this.diffWidget.setMinimumSize(50, 25);\n\n    this.allocationDataGrid = null;\n\n    if (isHeapTimeline && hasAllocationStacks) {\n      this.allocationDataGrid = new AllocationDataGrid(heapProfilerModel, this);\n      this.allocationDataGrid.addEventListener(\n          DataGrid.DataGrid.Events.SelectedNode, this.onSelectAllocationNode, this);\n      this.allocationWidget = this.allocationDataGrid.asWidget();\n      this.allocationWidget.setMinimumSize(50, 25);\n\n      this.allocationStackView = new HeapAllocationStackView(heapProfilerModel);\n      this.allocationStackView.setMinimumSize(50, 25);\n\n      this.tabbedPane = new UI.TabbedPane.TabbedPane();\n    }\n\n    this.retainmentDataGrid = new HeapSnapshotRetainmentDataGrid(heapProfilerModel, this);\n    this.retainmentWidget = this.retainmentDataGrid.asWidget();\n    this.retainmentWidget.setMinimumSize(50, 21);\n    this.retainmentWidget.element.classList.add('retaining-paths-view');\n\n    let splitWidgetResizer;\n    if (this.allocationStackView) {\n      this.tabbedPane = new UI.TabbedPane.TabbedPane();\n\n      this.tabbedPane.appendTab('retainers', i18nString(UIStrings.retainers), this.retainmentWidget);\n      this.tabbedPane.appendTab('allocation-stack', i18nString(UIStrings.allocationStack), this.allocationStackView);\n\n      splitWidgetResizer = this.tabbedPane.headerElement();\n      this.objectDetailsView = this.tabbedPane;\n    } else {\n      const retainmentViewHeader = document.createElement('div');\n      retainmentViewHeader.classList.add('heap-snapshot-view-resizer');\n      const retainingPathsTitleDiv = retainmentViewHeader.createChild('div', 'title');\n      retainmentViewHeader.createChild('div', 'verticalResizerIcon');\n      const retainingPathsTitle = retainingPathsTitleDiv.createChild('span');\n      retainingPathsTitle.textContent = i18nString(UIStrings.retainers);\n\n      splitWidgetResizer = retainmentViewHeader;\n      this.objectDetailsView = new UI.Widget.VBox();\n      this.objectDetailsView.element.appendChild(retainmentViewHeader);\n      this.retainmentWidget.show(this.objectDetailsView.element);\n    }\n    this.splitWidget.hideDefaultResizer();\n    this.splitWidget.installResizer(splitWidgetResizer);\n\n    this.retainmentDataGrid.addEventListener(DataGrid.DataGrid.Events.SelectedNode, this.inspectedObjectChanged, this);\n    this.retainmentDataGrid.reset();\n\n    this.perspectives = [];\n    this.comparisonPerspective = new ComparisonPerspective();\n    this.perspectives.push(new SummaryPerspective());\n    if (profile.profileType() !== instance.trackingHeapSnapshotProfileType) {\n      this.perspectives.push(this.comparisonPerspective);\n    }\n    this.perspectives.push(new ContainmentPerspective());\n    if (this.allocationWidget) {\n      this.perspectives.push(new AllocationPerspective());\n    }\n    this.perspectives.push(new StatisticsPerspective());\n\n    this.perspectiveSelect =\n        new UI.Toolbar.ToolbarComboBox(this.onSelectedPerspectiveChanged.bind(this), i18nString(UIStrings.perspective));\n    this.updatePerspectiveOptions();\n\n    this.baseSelect = new UI.Toolbar.ToolbarComboBox(this.changeBase.bind(this), i18nString(UIStrings.baseSnapshot));\n    this.baseSelect.setVisible(false);\n    this.updateBaseOptions();\n\n    this.filterSelect = new UI.Toolbar.ToolbarComboBox(this.changeFilter.bind(this), i18nString(UIStrings.filter));\n    this.filterSelect.setVisible(false);\n    this.updateFilterOptions();\n\n    this.classNameFilter = new UI.Toolbar.ToolbarInput(i18nString(UIStrings.classFilter));\n    this.classNameFilter.setVisible(false);\n    this.constructorsDataGrid.setNameFilter(this.classNameFilter);\n    this.diffDataGrid.setNameFilter(this.classNameFilter);\n\n    this.selectedSizeText = new UI.Toolbar.ToolbarText();\n\n    this.popoverHelper = new UI.PopoverHelper.PopoverHelper(this.element, this.getPopoverRequest.bind(this));\n    this.popoverHelper.setDisableOnClick(true);\n    this.popoverHelper.setHasPadding(true);\n    this.element.addEventListener('scroll', this.popoverHelper.hidePopover.bind(this.popoverHelper), true);\n\n    this.currentPerspectiveIndex = 0;\n    this.currentPerspective = this.perspectives[0];\n    this.currentPerspective.activate(this);\n    this.dataGrid = this.currentPerspective.masterGrid(this);\n\n    void this.populate();\n    this.searchThrottler = new Common.Throttler.Throttler(0);\n\n    for (const existingProfile of this.profiles()) {\n      existingProfile.addEventListener(ProfileHeaderEvents.ProfileTitleChanged, this.updateControls, this);\n    }\n  }\n\n  createOverview(): void {\n    const profileType = this.profile.profileType();\n    this.trackingOverviewGrid = new HeapTimelineOverview();\n    this.trackingOverviewGrid.addEventListener(Events.IdsRangeChanged, this.onIdsRangeChanged.bind(this));\n    if (!this.profile.fromFile() && profileType.profileBeingRecorded() === this.profile) {\n      (profileType as TrackingHeapSnapshotProfileType)\n          .addEventListener(TrackingHeapSnapshotProfileTypeEvents.HeapStatsUpdate, this.onHeapStatsUpdate, this);\n      (profileType as TrackingHeapSnapshotProfileType)\n          .addEventListener(TrackingHeapSnapshotProfileTypeEvents.TrackingStopped, this.onStopTracking, this);\n      this.trackingOverviewGrid.start();\n    }\n  }\n\n  onStopTracking(): void {\n    const profileType = this.profile.profileType() as TrackingHeapSnapshotProfileType;\n    profileType.removeEventListener(\n        TrackingHeapSnapshotProfileTypeEvents.HeapStatsUpdate, this.onHeapStatsUpdate, this);\n    profileType.removeEventListener(TrackingHeapSnapshotProfileTypeEvents.TrackingStopped, this.onStopTracking, this);\n    if (this.trackingOverviewGrid) {\n      this.trackingOverviewGrid.stop();\n    }\n  }\n\n  onHeapStatsUpdate({data: samples}: Common.EventTarget.EventTargetEvent<Samples>): void {\n    if (this.trackingOverviewGrid) {\n      this.trackingOverviewGrid.setSamples(samples);\n    }\n  }\n\n  searchableView(): UI.SearchableView.SearchableView {\n    return this.searchableViewInternal;\n  }\n\n  showProfile(profile: ProfileHeader|null): UI.Widget.Widget|null {\n    return this.parentDataDisplayDelegate.showProfile(profile);\n  }\n\n  showObject(snapshotObjectId: string, perspectiveName: string): void {\n    if (Number(snapshotObjectId) <= this.profile.maxJSObjectId) {\n      void this.selectLiveObject(perspectiveName, snapshotObjectId);\n    } else {\n      this.parentDataDisplayDelegate.showObject(snapshotObjectId, perspectiveName);\n    }\n  }\n\n  async linkifyObject(nodeIndex: number): Promise<Element|null> {\n    const heapProfilerModel = this.profile.heapProfilerModel();\n    // heapProfilerModel is null if snapshot was loaded from file\n    if (!heapProfilerModel) {\n      return null;\n    }\n    const location = await this.profile.getLocation(nodeIndex);\n    if (!location) {\n      return null;\n    }\n    const debuggerModel = heapProfilerModel.runtimeModel().debuggerModel();\n    const rawLocation = debuggerModel.createRawLocationByScriptId(\n        String(location.scriptId) as Protocol.Runtime.ScriptId, location.lineNumber, location.columnNumber);\n    if (!rawLocation) {\n      return null;\n    }\n    const script = rawLocation.script();\n    const sourceURL = script && script.sourceURL;\n    return sourceURL && this.linkifier ? this.linkifier.linkifyRawLocation(rawLocation, sourceURL) : null;\n  }\n\n  async populate(): Promise<void> {\n    const heapSnapshotProxy = await this.profile.loadPromise;\n\n    void this.retrieveStatistics(heapSnapshotProxy);\n    if (this.dataGrid) {\n      void this.dataGrid.setDataSource(heapSnapshotProxy, 0);\n    }\n\n    if (this.profile.profileType().id === TrackingHeapSnapshotProfileType.TypeId && this.profile.fromFile()) {\n      const samples = await heapSnapshotProxy.getSamples();\n      if (samples) {\n        console.assert(Boolean(samples.timestamps.length));\n        const profileSamples = new Samples();\n        profileSamples.sizes = samples.sizes;\n        profileSamples.ids = samples.lastAssignedIds;\n        profileSamples.timestamps = samples.timestamps;\n        profileSamples.max = samples.sizes;\n        profileSamples.totalTime = Math.max(samples.timestamps[samples.timestamps.length - 1] || 0, 10000);\n        if (this.trackingOverviewGrid) {\n          this.trackingOverviewGrid.setSamples(profileSamples);\n        }\n      }\n    }\n\n    const list = this.profiles();\n    const profileIndex = list.indexOf(this.profile);\n    this.baseSelect.setSelectedIndex(Math.max(0, profileIndex - 1));\n    if (this.trackingOverviewGrid) {\n      this.trackingOverviewGrid.updateGrid();\n    }\n  }\n\n  async retrieveStatistics(heapSnapshotProxy: HeapSnapshotProxy):\n      Promise<HeapSnapshotModel.HeapSnapshotModel.Statistics> {\n    const statistics = await heapSnapshotProxy.getStatistics();\n\n    const records = [\n      {value: statistics.code, color: '#f77', title: i18nString(UIStrings.code)},\n      {value: statistics.strings, color: '#5e5', title: i18nString(UIStrings.strings)},\n      {value: statistics.jsArrays, color: '#7af', title: i18nString(UIStrings.jsArrays)},\n      {value: statistics.native, color: '#fc5', title: i18nString(UIStrings.typedArrays)},\n      {value: statistics.system, color: '#98f', title: i18nString(UIStrings.systemObjects)},\n    ];\n    this.statisticsView.setTotalAndRecords(statistics.total, records);\n    return statistics;\n  }\n\n  onIdsRangeChanged(event: Common.EventTarget.EventTargetEvent<IdsRangeChangedEvent>): void {\n    const {minId, maxId} = event.data;\n    this.selectedSizeText.setText(\n        i18nString(UIStrings.selectedSizeS, {PH1: Platform.NumberUtilities.bytesToString(event.data.size)}));\n    if (this.constructorsDataGrid.snapshot) {\n      this.constructorsDataGrid.setSelectionRange(minId, maxId);\n    }\n  }\n\n  async toolbarItems(): Promise<UI.Toolbar.ToolbarItem[]> {\n    const result: UI.Toolbar.ToolbarItem[] = [this.perspectiveSelect, this.classNameFilter];\n    if (this.profile.profileType() !== instance.trackingHeapSnapshotProfileType) {\n      result.push(this.baseSelect, this.filterSelect);\n    }\n    result.push(this.selectedSizeText);\n    return result;\n  }\n\n  willHide(): void {\n    this.currentSearchResultIndex = -1;\n    this.popoverHelper.hidePopover();\n  }\n\n  supportsCaseSensitiveSearch(): boolean {\n    return true;\n  }\n\n  supportsRegexSearch(): boolean {\n    return false;\n  }\n\n  searchCanceled(): void {\n    this.currentSearchResultIndex = -1;\n    this.searchResults = [];\n  }\n\n  selectRevealedNode(node: HeapSnapshotGridNode|null): void {\n    if (node) {\n      node.select();\n    }\n  }\n\n  performSearch(searchConfig: UI.SearchableView.SearchConfig, shouldJump: boolean, jumpBackwards?: boolean): void {\n    const nextQuery = new HeapSnapshotModel.HeapSnapshotModel.SearchConfig(\n        searchConfig.query.trim(), searchConfig.caseSensitive, searchConfig.isRegex, shouldJump,\n        jumpBackwards || false);\n\n    void this.searchThrottler.schedule(this.performSearchInternal.bind(this, nextQuery));\n  }\n\n  async performSearchInternal(nextQuery: HeapSnapshotModel.HeapSnapshotModel.SearchConfig): Promise<void> {\n    // Call searchCanceled since it will reset everything we need before doing a new search.\n    this.searchCanceled();\n\n    if (!this.currentPerspective.supportsSearch()) {\n      return;\n    }\n\n    this.currentQuery = nextQuery;\n    const query = nextQuery.query.trim();\n\n    if (!query) {\n      return;\n    }\n\n    if (query.charAt(0) === '@') {\n      const snapshotNodeId = parseInt(query.substring(1), 10);\n      if (isNaN(snapshotNodeId)) {\n        return;\n      }\n      if (!this.dataGrid) {\n        return;\n      }\n      const node = await this.dataGrid.revealObjectByHeapSnapshotId(String(snapshotNodeId));\n      this.selectRevealedNode(node);\n      return;\n    }\n\n    if (!this.profile.snapshotProxy || !this.dataGrid) {\n      return;\n    }\n\n    const filter = this.dataGrid.nodeFilter();\n    this.searchResults = filter ? await this.profile.snapshotProxy.search(this.currentQuery, filter) : [];\n\n    this.searchableViewInternal.updateSearchMatchesCount(this.searchResults.length);\n    if (this.searchResults.length) {\n      this.currentSearchResultIndex = nextQuery.jumpBackward ? this.searchResults.length - 1 : 0;\n    }\n    await this.jumpToSearchResult(this.currentSearchResultIndex);\n  }\n\n  jumpToNextSearchResult(): void {\n    if (!this.searchResults.length) {\n      return;\n    }\n    this.currentSearchResultIndex = (this.currentSearchResultIndex + 1) % this.searchResults.length;\n    void this.searchThrottler.schedule(this.jumpToSearchResult.bind(this, this.currentSearchResultIndex));\n  }\n\n  jumpToPreviousSearchResult(): void {\n    if (!this.searchResults.length) {\n      return;\n    }\n    this.currentSearchResultIndex =\n        (this.currentSearchResultIndex + this.searchResults.length - 1) % this.searchResults.length;\n    void this.searchThrottler.schedule(this.jumpToSearchResult.bind(this, this.currentSearchResultIndex));\n  }\n\n  async jumpToSearchResult(searchResultIndex: number): Promise<void> {\n    this.searchableViewInternal.updateCurrentMatchIndex(searchResultIndex);\n    if (searchResultIndex === -1) {\n      return;\n    }\n    if (!this.dataGrid) {\n      return;\n    }\n    const node = await this.dataGrid.revealObjectByHeapSnapshotId(String(this.searchResults[searchResultIndex]));\n    this.selectRevealedNode(node);\n  }\n\n  refreshVisibleData(): void {\n    if (!this.dataGrid) {\n      return;\n    }\n    let child: (HeapSnapshotGridNode|null) = (this.dataGrid.rootNode().children[0] as HeapSnapshotGridNode | null);\n    while (child) {\n      child.refresh();\n      child = (child.traverseNextNode(false, null, true) as HeapSnapshotGridNode | null);\n    }\n  }\n\n  changeBase(): void {\n    if (this.baseProfile === this.profiles()[this.baseSelect.selectedIndex()]) {\n      return;\n    }\n    this.baseProfile = (this.profiles()[this.baseSelect.selectedIndex()] as HeapProfileHeader);\n    const dataGrid = (this.dataGrid as HeapSnapshotDiffDataGrid);\n    // Change set base data source only if main data source is already set.\n    if (dataGrid.snapshot) {\n      void this.baseProfile.loadPromise.then(dataGrid.setBaseDataSource.bind(dataGrid));\n    }\n\n    if (!this.currentQuery || !this.searchResults) {\n      return;\n    }\n\n    // The current search needs to be performed again. First negate out previous match\n    // count by calling the search finished callback with a negative number of matches.\n    // Then perform the search again with the same query and callback.\n    this.performSearch(this.currentQuery, false);\n  }\n\n  changeFilter(): void {\n    const profileIndex = this.filterSelect.selectedIndex() - 1;\n    if (!this.dataGrid) {\n      return;\n    }\n    (this.dataGrid as HeapSnapshotConstructorsDataGrid)\n        .filterSelectIndexChanged((this.profiles() as HeapProfileHeader[]), profileIndex);\n\n    if (!this.currentQuery || !this.searchResults) {\n      return;\n    }\n\n    // The current search needs to be performed again. First negate out previous match\n    // count by calling the search finished callback with a negative number of matches.\n    // Then perform the search again with the same query and callback.\n    this.performSearch(this.currentQuery, false);\n  }\n\n  profiles(): ProfileHeader[] {\n    return this.profile.profileType().getProfiles();\n  }\n\n  selectionChanged(event: Common.EventTarget.EventTargetEvent<DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode>>):\n      void {\n    const selectedNode = (event.data as HeapSnapshotGridNode);\n    this.setSelectedNodeForDetailsView(selectedNode);\n    this.inspectedObjectChanged(event);\n  }\n\n  onSelectAllocationNode(\n      event: Common.EventTarget.EventTargetEvent<DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode>>): void {\n    const selectedNode = (event.data as AllocationGridNode);\n    this.constructorsDataGrid.setAllocationNodeId(selectedNode.allocationNodeId());\n    this.setSelectedNodeForDetailsView(null);\n  }\n\n  inspectedObjectChanged(\n      event: Common.EventTarget.EventTargetEvent<DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode>>): void {\n    const selectedNode = (event.data as HeapSnapshotGridNode);\n    const heapProfilerModel = this.profile.heapProfilerModel();\n    if (heapProfilerModel && selectedNode instanceof HeapSnapshotGenericObjectNode) {\n      void heapProfilerModel.addInspectedHeapObject(\n          String(selectedNode.snapshotNodeId) as Protocol.HeapProfiler.HeapSnapshotObjectId);\n    }\n  }\n\n  setSelectedNodeForDetailsView(nodeItem: HeapSnapshotGridNode|null): void {\n    const dataSource = nodeItem && nodeItem.retainersDataSource();\n    if (dataSource) {\n      void this.retainmentDataGrid.setDataSource(dataSource.snapshot, dataSource.snapshotNodeIndex);\n      if (this.allocationStackView) {\n        void this.allocationStackView.setAllocatedObject(dataSource.snapshot, dataSource.snapshotNodeIndex);\n      }\n    } else {\n      if (this.allocationStackView) {\n        this.allocationStackView.clear();\n      }\n      this.retainmentDataGrid.reset();\n    }\n  }\n\n  async changePerspectiveAndWait(perspectiveTitle: string): Promise<void> {\n    const perspectiveIndex = this.perspectives.findIndex(perspective => perspective.title() === perspectiveTitle);\n    if (perspectiveIndex === -1 || this.currentPerspectiveIndex === perspectiveIndex) {\n      return;\n    }\n    const dataGrid = this.perspectives[perspectiveIndex].masterGrid(this);\n\n    if (!dataGrid) {\n      return;\n    }\n\n    const promise = dataGrid.once(HeapSnapshotSortableDataGridEvents.ContentShown);\n\n    const option = this.perspectiveSelect.options().find(option => option.value === String(perspectiveIndex));\n    this.perspectiveSelect.select((option as Element));\n    this.changePerspective(perspectiveIndex);\n    await promise;\n  }\n\n  async updateDataSourceAndView(): Promise<void> {\n    const dataGrid = this.dataGrid;\n    if (!dataGrid || dataGrid.snapshot) {\n      return;\n    }\n\n    const snapshotProxy = await this.profile.loadPromise;\n\n    if (this.dataGrid !== dataGrid) {\n      return;\n    }\n    if (dataGrid.snapshot !== snapshotProxy) {\n      void dataGrid.setDataSource(snapshotProxy, 0);\n    }\n    if (dataGrid !== this.diffDataGrid) {\n      return;\n    }\n    if (!this.baseProfile) {\n      this.baseProfile = (this.profiles()[this.baseSelect.selectedIndex()] as HeapProfileHeader);\n    }\n\n    const baseSnapshotProxy = await this.baseProfile.loadPromise;\n\n    if (this.diffDataGrid.baseSnapshot !== baseSnapshotProxy) {\n      this.diffDataGrid.setBaseDataSource(baseSnapshotProxy);\n    }\n  }\n\n  onSelectedPerspectiveChanged(event: Event): void {\n    this.changePerspective(Number((event.target as HTMLSelectElement).selectedOptions[0].value));\n  }\n\n  changePerspective(selectedIndex: number): void {\n    if (selectedIndex === this.currentPerspectiveIndex) {\n      return;\n    }\n\n    this.currentPerspectiveIndex = selectedIndex;\n\n    this.currentPerspective.deactivate(this);\n    const perspective = this.perspectives[selectedIndex];\n    this.currentPerspective = perspective;\n    this.dataGrid = (perspective.masterGrid(this) as HeapSnapshotSortableDataGrid);\n    perspective.activate(this);\n\n    this.refreshVisibleData();\n    if (this.dataGrid) {\n      this.dataGrid.updateWidths();\n    }\n\n    void this.updateDataSourceAndView();\n\n    if (!this.currentQuery || !this.searchResults) {\n      return;\n    }\n\n    // The current search needs to be performed again. First negate out previous match\n    // count by calling the search finished callback with a negative number of matches.\n    // Then perform the search again the with same query and callback.\n    this.performSearch(this.currentQuery, false);\n  }\n\n  async selectLiveObject(perspectiveName: string, snapshotObjectId: string): Promise<void> {\n    await this.changePerspectiveAndWait(perspectiveName);\n    if (!this.dataGrid) {\n      return;\n    }\n    const node = await this.dataGrid.revealObjectByHeapSnapshotId(snapshotObjectId);\n    if (node) {\n      node.select();\n    } else {\n      Common.Console.Console.instance().error('Cannot find corresponding heap snapshot node');\n    }\n  }\n\n  getPopoverRequest(event: Event): UI.PopoverHelper.PopoverRequest|null {\n    const span = UI.UIUtils.enclosingNodeOrSelfWithNodeName((event.target as Node), 'span');\n    const row = UI.UIUtils.enclosingNodeOrSelfWithNodeName((event.target as Node), 'tr');\n    if (!row) {\n      return null;\n    }\n    if (!this.dataGrid) {\n      return null;\n    }\n    const node = this.dataGrid.dataGridNodeFromNode(row) || this.containmentDataGrid.dataGridNodeFromNode(row) ||\n        this.constructorsDataGrid.dataGridNodeFromNode(row) || this.diffDataGrid.dataGridNodeFromNode(row) ||\n        (this.allocationDataGrid && this.allocationDataGrid.dataGridNodeFromNode(row)) ||\n        this.retainmentDataGrid.dataGridNodeFromNode(row);\n    const heapProfilerModel = this.profile.heapProfilerModel();\n    if (!node || !span || !heapProfilerModel) {\n      return null;\n    }\n    let objectPopoverHelper: ObjectUI.ObjectPopoverHelper.ObjectPopoverHelper|null;\n    return {\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n      // @ts-expect-error\n      box: span.boxInWindow(),\n      show: async(popover: UI.GlassPane.GlassPane): Promise<boolean> => {\n        if (!heapProfilerModel) {\n          return false;\n        }\n        const remoteObject = await (node as HeapSnapshotGridNode).queryObjectContent(heapProfilerModel, 'popover');\n        if (!remoteObject) {\n          return false;\n        }\n        objectPopoverHelper =\n            await ObjectUI.ObjectPopoverHelper.ObjectPopoverHelper.buildObjectPopover(remoteObject, popover);\n        if (!objectPopoverHelper) {\n          heapProfilerModel.runtimeModel().releaseObjectGroup('popover');\n          return false;\n        }\n        return true;\n      },\n      hide: (): void => {\n        heapProfilerModel.runtimeModel().releaseObjectGroup('popover');\n        if (objectPopoverHelper) {\n          objectPopoverHelper.dispose();\n        }\n      },\n    };\n  }\n\n  updatePerspectiveOptions(): void {\n    const multipleSnapshots = this.profiles().length > 1;\n    this.perspectiveSelect.removeOptions();\n    this.perspectives.forEach((perspective, index) => {\n      if (multipleSnapshots || perspective !== this.comparisonPerspective) {\n        this.perspectiveSelect.createOption(perspective.title(), String(index));\n      }\n    });\n  }\n\n  updateBaseOptions(): void {\n    const list = this.profiles();\n    const selectedIndex = this.baseSelect.selectedIndex();\n\n    this.baseSelect.removeOptions();\n    for (const item of list) {\n      this.baseSelect.createOption(item.title);\n    }\n\n    if (selectedIndex > -1) {\n      this.baseSelect.setSelectedIndex(selectedIndex);\n    }\n  }\n\n  updateFilterOptions(): void {\n    const list = this.profiles();\n    const selectedIndex = this.filterSelect.selectedIndex();\n\n    this.filterSelect.removeOptions();\n    this.filterSelect.createOption(i18nString(UIStrings.allObjects));\n    for (let i = 0; i < list.length; ++i) {\n      let title;\n      if (!i) {\n        title = i18nString(UIStrings.objectsAllocatedBeforeS, {PH1: list[i].title});\n      } else {\n        title = i18nString(UIStrings.objectsAllocatedBetweenSAndS, {PH1: list[i - 1].title, PH2: list[i].title});\n      }\n      this.filterSelect.createOption(title);\n    }\n\n    if (selectedIndex > -1) {\n      this.filterSelect.setSelectedIndex(selectedIndex);\n    }\n  }\n\n  updateControls(): void {\n    this.updatePerspectiveOptions();\n    this.updateBaseOptions();\n    this.updateFilterOptions();\n  }\n\n  onReceiveSnapshot(event: Common.EventTarget.EventTargetEvent<ProfileHeader>): void {\n    this.updateControls();\n    const profile = event.data;\n    profile.addEventListener(ProfileHeaderEvents.ProfileTitleChanged, this.updateControls, this);\n  }\n\n  onProfileHeaderRemoved(event: Common.EventTarget.EventTargetEvent<ProfileHeader>): void {\n    const profile = event.data;\n    profile.removeEventListener(ProfileHeaderEvents.ProfileTitleChanged, this.updateControls, this);\n\n    if (this.profile === profile) {\n      this.detach();\n      this.profile.profileType().removeEventListener(\n          HeapSnapshotProfileTypeEvents.SnapshotReceived, this.onReceiveSnapshot, this);\n      this.profile.profileType().removeEventListener(\n          ProfileTypeEvents.RemoveProfileHeader, this.onProfileHeaderRemoved, this);\n      this.dispose();\n    } else {\n      this.updateControls();\n    }\n  }\n\n  dispose(): void {\n    this.linkifier.dispose();\n    this.popoverHelper.dispose();\n    if (this.allocationStackView) {\n      this.allocationStackView.clear();\n      if (this.allocationDataGrid) {\n        this.allocationDataGrid.dispose();\n      }\n    }\n    this.onStopTracking();\n    if (this.trackingOverviewGrid) {\n      this.trackingOverviewGrid.removeEventListener(Events.IdsRangeChanged, this.onIdsRangeChanged.bind(this));\n    }\n  }\n}\n\nexport class Perspective {\n  readonly titleInternal: string;\n  constructor(title: string) {\n    this.titleInternal = title;\n  }\n\n  activate(_heapSnapshotView: HeapSnapshotView): void {\n  }\n\n  deactivate(heapSnapshotView: HeapSnapshotView): void {\n    heapSnapshotView.baseSelect.setVisible(false);\n    heapSnapshotView.filterSelect.setVisible(false);\n    heapSnapshotView.classNameFilter.setVisible(false);\n    if (heapSnapshotView.trackingOverviewGrid) {\n      heapSnapshotView.trackingOverviewGrid.detach();\n    }\n    if (heapSnapshotView.allocationWidget) {\n      heapSnapshotView.allocationWidget.detach();\n    }\n    if (heapSnapshotView.statisticsView) {\n      heapSnapshotView.statisticsView.detach();\n    }\n\n    heapSnapshotView.splitWidget.detach();\n    heapSnapshotView.splitWidget.detachChildWidgets();\n  }\n\n  masterGrid(_heapSnapshotView: HeapSnapshotView): HeapSnapshotSortableDataGrid|null {\n    return null;\n  }\n\n  title(): string {\n    return this.titleInternal;\n  }\n\n  supportsSearch(): boolean {\n    return false;\n  }\n}\n\nexport class SummaryPerspective extends Perspective {\n  constructor() {\n    super(i18nString(UIStrings.summary));\n  }\n\n  activate(heapSnapshotView: HeapSnapshotView): void {\n    heapSnapshotView.splitWidget.setMainWidget(heapSnapshotView.constructorsWidget);\n    heapSnapshotView.splitWidget.setSidebarWidget(heapSnapshotView.objectDetailsView);\n    heapSnapshotView.splitWidget.show(heapSnapshotView.searchableViewInternal.element);\n    heapSnapshotView.filterSelect.setVisible(true);\n    heapSnapshotView.classNameFilter.setVisible(true);\n    if (!heapSnapshotView.trackingOverviewGrid) {\n      return;\n    }\n    heapSnapshotView.trackingOverviewGrid.show(\n        heapSnapshotView.searchableViewInternal.element, heapSnapshotView.splitWidget.element);\n    heapSnapshotView.trackingOverviewGrid.update();\n    heapSnapshotView.trackingOverviewGrid.updateGrid();\n  }\n\n  masterGrid(heapSnapshotView: HeapSnapshotView): HeapSnapshotSortableDataGrid {\n    return heapSnapshotView.constructorsDataGrid;\n  }\n\n  supportsSearch(): boolean {\n    return true;\n  }\n}\n\nexport class ComparisonPerspective extends Perspective {\n  constructor() {\n    super(i18nString(UIStrings.comparison));\n  }\n\n  activate(heapSnapshotView: HeapSnapshotView): void {\n    heapSnapshotView.splitWidget.setMainWidget(heapSnapshotView.diffWidget);\n    heapSnapshotView.splitWidget.setSidebarWidget(heapSnapshotView.objectDetailsView);\n    heapSnapshotView.splitWidget.show(heapSnapshotView.searchableViewInternal.element);\n    heapSnapshotView.baseSelect.setVisible(true);\n    heapSnapshotView.classNameFilter.setVisible(true);\n  }\n\n  masterGrid(heapSnapshotView: HeapSnapshotView): HeapSnapshotSortableDataGrid {\n    return heapSnapshotView.diffDataGrid;\n  }\n\n  supportsSearch(): boolean {\n    return true;\n  }\n}\n\nexport class ContainmentPerspective extends Perspective {\n  constructor() {\n    super(i18nString(UIStrings.containment));\n  }\n\n  activate(heapSnapshotView: HeapSnapshotView): void {\n    heapSnapshotView.splitWidget.setMainWidget(heapSnapshotView.containmentWidget);\n    heapSnapshotView.splitWidget.setSidebarWidget(heapSnapshotView.objectDetailsView);\n    heapSnapshotView.splitWidget.show(heapSnapshotView.searchableViewInternal.element);\n  }\n\n  masterGrid(heapSnapshotView: HeapSnapshotView): HeapSnapshotSortableDataGrid {\n    return heapSnapshotView.containmentDataGrid;\n  }\n}\n\nexport class AllocationPerspective extends Perspective {\n  readonly allocationSplitWidget: UI.SplitWidget.SplitWidget;\n  constructor() {\n    super(i18nString(UIStrings.allocation));\n    this.allocationSplitWidget =\n        new UI.SplitWidget.SplitWidget(false, true, 'heapSnapshotAllocationSplitViewState', 200, 200);\n    this.allocationSplitWidget.setSidebarWidget(new UI.Widget.VBox());\n  }\n\n  activate(heapSnapshotView: HeapSnapshotView): void {\n    if (heapSnapshotView.allocationWidget) {\n      this.allocationSplitWidget.setMainWidget(heapSnapshotView.allocationWidget);\n    }\n    heapSnapshotView.splitWidget.setMainWidget(heapSnapshotView.constructorsWidget);\n    heapSnapshotView.splitWidget.setSidebarWidget(heapSnapshotView.objectDetailsView);\n\n    const allocatedObjectsView = new UI.Widget.VBox();\n    const resizer = document.createElement('div');\n    resizer.classList.add('heap-snapshot-view-resizer');\n    const title = resizer.createChild('div', 'title').createChild('span');\n    resizer.createChild('div', 'verticalResizerIcon');\n    title.textContent = i18nString(UIStrings.liveObjects);\n    this.allocationSplitWidget.hideDefaultResizer();\n    this.allocationSplitWidget.installResizer(resizer);\n    allocatedObjectsView.element.appendChild(resizer);\n    heapSnapshotView.splitWidget.show(allocatedObjectsView.element);\n    this.allocationSplitWidget.setSidebarWidget(allocatedObjectsView);\n\n    this.allocationSplitWidget.show(heapSnapshotView.searchableViewInternal.element);\n\n    heapSnapshotView.constructorsDataGrid.clear();\n    if (heapSnapshotView.allocationDataGrid) {\n      const selectedNode = (heapSnapshotView.allocationDataGrid.selectedNode as AllocationGridNode);\n      if (selectedNode) {\n        heapSnapshotView.constructorsDataGrid.setAllocationNodeId(selectedNode.allocationNodeId());\n      }\n    }\n  }\n\n  deactivate(heapSnapshotView: HeapSnapshotView): void {\n    this.allocationSplitWidget.detach();\n    super.deactivate(heapSnapshotView);\n  }\n\n  masterGrid(heapSnapshotView: HeapSnapshotView): HeapSnapshotSortableDataGrid|null {\n    return heapSnapshotView.allocationDataGrid;\n  }\n}\n\nexport class StatisticsPerspective extends Perspective {\n  constructor() {\n    super(i18nString(UIStrings.statistics));\n  }\n\n  activate(heapSnapshotView: HeapSnapshotView): void {\n    heapSnapshotView.statisticsView.show(heapSnapshotView.searchableViewInternal.element);\n  }\n\n  masterGrid(_heapSnapshotView: HeapSnapshotView): HeapSnapshotSortableDataGrid|null {\n    return null;\n  }\n}\n\nexport class HeapSnapshotProfileType extends\n    Common.ObjectWrapper.eventMixin<HeapSnapshotProfileTypeEventTypes, typeof ProfileType>(ProfileType)\n        implements SDK.TargetManager.SDKModelObserver<SDK.HeapProfilerModel.HeapProfilerModel> {\n  readonly exposeInternals: Common.Settings.Setting<boolean>;\n  readonly captureNumericValue: Common.Settings.Setting<boolean>;\n  customContentInternal: HTMLElement|null;\n  constructor(id?: string, title?: string) {\n    super(id || HeapSnapshotProfileType.TypeId, title || i18nString(UIStrings.heapSnapshot));\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.HeapProfilerModel.HeapProfilerModel, this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.HeapProfilerModel.HeapProfilerModel, SDK.HeapProfilerModel.Events.ResetProfiles, this.resetProfiles, this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.HeapProfilerModel.HeapProfilerModel, SDK.HeapProfilerModel.Events.AddHeapSnapshotChunk,\n        this.addHeapSnapshotChunk, this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.HeapProfilerModel.HeapProfilerModel, SDK.HeapProfilerModel.Events.ReportHeapSnapshotProgress,\n        this.reportHeapSnapshotProgress, this);\n    this.exposeInternals = Common.Settings.Settings.instance().createSetting('exposeInternals', false);\n    this.captureNumericValue = Common.Settings.Settings.instance().createSetting('captureNumericValue', false);\n    this.customContentInternal = null;\n  }\n\n  modelAdded(heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel): void {\n    void heapProfilerModel.enable();\n  }\n\n  modelRemoved(_heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel): void {\n  }\n\n  getProfiles(): HeapProfileHeader[] {\n    return super.getProfiles() as HeapProfileHeader[];\n  }\n\n  fileExtension(): string {\n    return '.heapsnapshot';\n  }\n\n  get buttonTooltip(): Common.UIString.LocalizedString {\n    return i18nString(UIStrings.takeHeapSnapshot);\n  }\n\n  isInstantProfile(): boolean {\n    return true;\n  }\n\n  buttonClicked(): boolean {\n    void this.takeHeapSnapshot();\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.ProfilesHeapProfileTaken);\n    return false;\n  }\n\n  get treeItemTitle(): Common.UIString.LocalizedString {\n    return i18nString(UIStrings.heapSnapshots);\n  }\n\n  get description(): Common.UIString.LocalizedString {\n    return i18nString(UIStrings.heapSnapshotProfilesShowMemory);\n  }\n\n  customContent(): Element|null {\n    const optionsContainer = document.createElement('div');\n    const showOptionToExposeInternalsInHeapSnapshot =\n        Root.Runtime.experiments.isEnabled('showOptionToExposeInternalsInHeapSnapshot');\n    const omitParagraphElement = !showOptionToExposeInternalsInHeapSnapshot;\n    if (showOptionToExposeInternalsInHeapSnapshot) {\n      const exposeInternalsInHeapSnapshotCheckbox = UI.SettingsUI.createSettingCheckbox(\n          i18nString(UIStrings.exposeInternals), this.exposeInternals, omitParagraphElement);\n      optionsContainer.appendChild(exposeInternalsInHeapSnapshotCheckbox);\n    }\n    const captureNumericValueCheckbox = UI.SettingsUI.createSettingCheckbox(\n        UIStrings.captureNumericValue, this.captureNumericValue, omitParagraphElement);\n    optionsContainer.appendChild(captureNumericValueCheckbox);\n    this.customContentInternal = optionsContainer;\n    return optionsContainer;\n  }\n\n  setCustomContentEnabled(enable: boolean): void {\n    if (this.customContentInternal) {\n      this.customContentInternal.querySelectorAll('[is=dt-checkbox]').forEach(label => {\n        (label as UI.UIUtils.CheckboxLabel).checkboxElement.disabled = !enable;\n      });\n    }\n  }\n\n  createProfileLoadedFromFile(title: string): ProfileHeader {\n    return new HeapProfileHeader(null, this, title);\n  }\n\n  async takeHeapSnapshot(): Promise<void> {\n    if (this.profileBeingRecorded()) {\n      return;\n    }\n    const heapProfilerModel = UI.Context.Context.instance().flavor(SDK.HeapProfilerModel.HeapProfilerModel);\n    if (!heapProfilerModel) {\n      return;\n    }\n\n    let profile: HeapProfileHeader = new HeapProfileHeader(heapProfilerModel, this);\n    this.setProfileBeingRecorded(profile);\n    this.addProfile(profile);\n    profile.updateStatus(i18nString(UIStrings.snapshotting));\n\n    await heapProfilerModel.takeHeapSnapshot({\n      reportProgress: true,\n      captureNumericValue: this.captureNumericValue.get(),\n      exposeInternals: this.exposeInternals.get(),\n    });\n    profile = this.profileBeingRecorded() as HeapProfileHeader;\n    if (!profile) {\n      return;\n    }\n    profile.title = i18nString(UIStrings.snapshotD, {PH1: profile.uid});\n    profile.finishLoad();\n    this.setProfileBeingRecorded(null);\n    this.dispatchEventToListeners(ProfileTypeEvents.ProfileComplete, profile);\n  }\n\n  addHeapSnapshotChunk(event: Common.EventTarget.EventTargetEvent<string>): void {\n    const profile = (this.profileBeingRecorded() as HeapProfileHeader | null);\n    if (!profile) {\n      return;\n    }\n    profile.transferChunk(event.data);\n  }\n\n  reportHeapSnapshotProgress(event: Common.EventTarget.EventTargetEvent<SDK.HeapProfilerModel.HeapSnapshotProgress>):\n      void {\n    const profile = (this.profileBeingRecorded() as HeapProfileHeader | null);\n    if (!profile) {\n      return;\n    }\n    const {done, total, finished} = event.data;\n    profile.updateStatus(i18nString(UIStrings.percentagePlaceholder, {PH1: ((done / total) * 100).toFixed(0)}), true);\n    if (finished) {\n      profile.prepareToLoad();\n    }\n  }\n\n  resetProfiles(event: Common.EventTarget.EventTargetEvent<SDK.HeapProfilerModel.HeapProfilerModel>): void {\n    const heapProfilerModel = event.data;\n    for (const profile of this.getProfiles()) {\n      if (profile.heapProfilerModel() === heapProfilerModel) {\n        this.removeProfile(profile);\n      }\n    }\n  }\n\n  snapshotReceived(profile: ProfileHeader): void {\n    if (this.profileBeingRecorded() === profile) {\n      this.setProfileBeingRecorded(null);\n    }\n    this.dispatchEventToListeners(HeapSnapshotProfileTypeEvents.SnapshotReceived, profile);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static readonly TypeId: string = 'HEAP';\n  // TODO(crbug.com/1228674): Remove event string once its no longer used in web tests.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static readonly SnapshotReceived = 'SnapshotReceived';\n}\n\nexport const enum HeapSnapshotProfileTypeEvents {\n  SnapshotReceived = 'SnapshotReceived',\n}\n\nexport type HeapSnapshotProfileTypeEventTypes = {\n  [HeapSnapshotProfileTypeEvents.SnapshotReceived]: ProfileHeader,\n};\n\nexport class TrackingHeapSnapshotProfileType extends\n    Common.ObjectWrapper.eventMixin<TrackingHeapSnapshotProfileTypeEventTypes, typeof HeapSnapshotProfileType>(\n        HeapSnapshotProfileType) {\n  readonly recordAllocationStacksSettingInternal: Common.Settings.Setting<boolean>;\n  customContentInternal: UI.UIUtils.CheckboxLabel|null;\n  recording: boolean;\n  profileSamples?: Samples|null;\n\n  constructor() {\n    super(TrackingHeapSnapshotProfileType.TypeId, i18nString(UIStrings.allocationInstrumentationOn));\n    this.recordAllocationStacksSettingInternal =\n        Common.Settings.Settings.instance().createSetting('recordAllocationStacks', false);\n    this.customContentInternal = null;\n    this.recording = false;\n  }\n\n  modelAdded(heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel): void {\n    super.modelAdded(heapProfilerModel);\n    heapProfilerModel.addEventListener(SDK.HeapProfilerModel.Events.HeapStatsUpdate, this.heapStatsUpdate, this);\n    heapProfilerModel.addEventListener(SDK.HeapProfilerModel.Events.LastSeenObjectId, this.lastSeenObjectId, this);\n  }\n\n  modelRemoved(heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel): void {\n    super.modelRemoved(heapProfilerModel);\n    heapProfilerModel.removeEventListener(SDK.HeapProfilerModel.Events.HeapStatsUpdate, this.heapStatsUpdate, this);\n    heapProfilerModel.removeEventListener(SDK.HeapProfilerModel.Events.LastSeenObjectId, this.lastSeenObjectId, this);\n  }\n\n  heapStatsUpdate(event: Common.EventTarget.EventTargetEvent<SDK.HeapProfilerModel.HeapStatsUpdateSamples>): void {\n    if (!this.profileSamples) {\n      return;\n    }\n    const samples = event.data;\n    let index;\n    for (let i = 0; i < samples.length; i += 3) {\n      index = samples[i];\n      const size = samples[i + 2];\n      this.profileSamples.sizes[index] = size;\n      if (!this.profileSamples.max[index]) {\n        this.profileSamples.max[index] = size;\n      }\n    }\n  }\n\n  lastSeenObjectId(event: Common.EventTarget.EventTargetEvent<SDK.HeapProfilerModel.LastSeenObjectId>): void {\n    const profileSamples = this.profileSamples;\n    if (!profileSamples) {\n      return;\n    }\n    const {lastSeenObjectId, timestamp} = event.data;\n    const currentIndex = Math.max(profileSamples.ids.length, profileSamples.max.length - 1);\n    profileSamples.ids[currentIndex] = lastSeenObjectId;\n    if (!profileSamples.max[currentIndex]) {\n      profileSamples.max[currentIndex] = 0;\n      profileSamples.sizes[currentIndex] = 0;\n    }\n    profileSamples.timestamps[currentIndex] = timestamp;\n    if (profileSamples.totalTime < timestamp - profileSamples.timestamps[0]) {\n      profileSamples.totalTime *= 2;\n    }\n    if (this.profileSamples) {\n      this.dispatchEventToListeners(TrackingHeapSnapshotProfileTypeEvents.HeapStatsUpdate, this.profileSamples);\n    }\n    const profile = this.profileBeingRecorded();\n    if (profile) {\n      profile.updateStatus(null, true);\n    }\n  }\n\n  hasTemporaryView(): boolean {\n    return true;\n  }\n\n  get buttonTooltip(): Common.UIString.LocalizedString {\n    return this.recording ? i18nString(UIStrings.stopRecordingHeapProfile) :\n                            i18nString(UIStrings.startRecordingHeapProfile);\n  }\n\n  isInstantProfile(): boolean {\n    return false;\n  }\n\n  buttonClicked(): boolean {\n    return this.toggleRecording();\n  }\n\n  startRecordingProfile(): void {\n    if (this.profileBeingRecorded()) {\n      return;\n    }\n    const heapProfilerModel = this.addNewProfile();\n    if (!heapProfilerModel) {\n      return;\n    }\n    void heapProfilerModel.startTrackingHeapObjects(this.recordAllocationStacksSettingInternal.get());\n  }\n\n  customContent(): Element|null {\n    const checkboxSetting = UI.SettingsUI.createSettingCheckbox(\n        i18nString(UIStrings.recordAllocationStacksExtra), this.recordAllocationStacksSettingInternal, true);\n    this.customContentInternal = (checkboxSetting as UI.UIUtils.CheckboxLabel);\n    return checkboxSetting;\n  }\n\n  setCustomContentEnabled(enable: boolean): void {\n    if (this.customContentInternal) {\n      this.customContentInternal.checkboxElement.disabled = !enable;\n    }\n  }\n\n  recordAllocationStacksSetting(): Common.Settings.Setting<boolean> {\n    return this.recordAllocationStacksSettingInternal;\n  }\n\n  addNewProfile(): SDK.HeapProfilerModel.HeapProfilerModel|null {\n    const heapProfilerModel = UI.Context.Context.instance().flavor(SDK.HeapProfilerModel.HeapProfilerModel);\n    if (!heapProfilerModel) {\n      return null;\n    }\n    this.setProfileBeingRecorded(new HeapProfileHeader(heapProfilerModel, this, undefined));\n    this.profileSamples = new Samples();\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.profileBeingRecorded() as any)._profileSamples = this.profileSamples;\n    this.recording = true;\n    this.addProfile((this.profileBeingRecorded() as ProfileHeader));\n    (this.profileBeingRecorded() as HeapProfileHeader).updateStatus(i18nString(UIStrings.recording));\n    this.dispatchEventToListeners(TrackingHeapSnapshotProfileTypeEvents.TrackingStarted);\n    return heapProfilerModel;\n  }\n\n  async stopRecordingProfile(): Promise<void> {\n    let profile: HeapProfileHeader = (this.profileBeingRecorded() as HeapProfileHeader);\n    profile.updateStatus(i18nString(UIStrings.snapshotting));\n    const stopPromise =\n        (profile.heapProfilerModel() as SDK.HeapProfilerModel.HeapProfilerModel).stopTrackingHeapObjects(true);\n    this.recording = false;\n    this.dispatchEventToListeners(TrackingHeapSnapshotProfileTypeEvents.TrackingStopped);\n    await stopPromise;\n    profile = (this.profileBeingRecorded() as HeapProfileHeader);\n    if (!profile) {\n      return;\n    }\n    profile.finishLoad();\n    this.profileSamples = null;\n    this.setProfileBeingRecorded(null);\n    this.dispatchEventToListeners(ProfileTypeEvents.ProfileComplete, profile);\n  }\n\n  toggleRecording(): boolean {\n    if (this.recording) {\n      void this.stopRecordingProfile();\n    } else {\n      this.startRecordingProfile();\n    }\n    return this.recording;\n  }\n\n  fileExtension(): string {\n    return '.heaptimeline';\n  }\n\n  get treeItemTitle(): Common.UIString.LocalizedString {\n    return i18nString(UIStrings.allocationTimelines);\n  }\n\n  get description(): Common.UIString.LocalizedString {\n    return i18nString(UIStrings.AllocationTimelinesShowInstrumented);\n  }\n\n  resetProfiles(event: Common.EventTarget.EventTargetEvent<SDK.HeapProfilerModel.HeapProfilerModel>): void {\n    const wasRecording = this.recording;\n    // Clear current profile to avoid stopping backend.\n    this.setProfileBeingRecorded(null);\n    super.resetProfiles(event);\n    this.profileSamples = null;\n    if (wasRecording) {\n      this.addNewProfile();\n    }\n  }\n\n  profileBeingRecordedRemoved(): void {\n    void this.stopRecordingProfile();\n    this.profileSamples = null;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static readonly TypeId = 'HEAP-RECORD';\n  // TODO(crbug.com/1228674): Remove event strings once they are no longer used in web tests.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static readonly HeapStatsUpdate = 'HeapStatsUpdate';\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static readonly TrackingStarted = 'TrackingStarted';\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static readonly TrackingStopped = 'TrackingStopped';\n}\n\nexport const enum TrackingHeapSnapshotProfileTypeEvents {\n  HeapStatsUpdate = 'HeapStatsUpdate',\n  TrackingStarted = 'TrackingStarted',\n  TrackingStopped = 'TrackingStopped',\n}\n\nexport type TrackingHeapSnapshotProfileTypeEventTypes = {\n  [TrackingHeapSnapshotProfileTypeEvents.HeapStatsUpdate]: Samples,\n  [TrackingHeapSnapshotProfileTypeEvents.TrackingStarted]: void,\n  [TrackingHeapSnapshotProfileTypeEvents.TrackingStopped]: void,\n};\n\nexport class HeapProfileHeader extends ProfileHeader {\n  readonly heapProfilerModelInternal: SDK.HeapProfilerModel.HeapProfilerModel|null;\n  maxJSObjectId: number;\n  workerProxy: HeapSnapshotWorkerProxy|null;\n  receiver: Common.StringOutputStream.OutputStream|null;\n  snapshotProxy: HeapSnapshotProxy|null;\n  readonly loadPromise: Promise<HeapSnapshotProxy>;\n  fulfillLoad?: (value: HeapSnapshotProxy|PromiseLike<HeapSnapshotProxy>) => void;\n  totalNumberOfChunks: number;\n  bufferedWriter: Bindings.TempFile.TempFile|null;\n  onTempFileReady: (() => void)|null;\n  failedToCreateTempFile?: boolean;\n  wasDisposed?: boolean;\n  fileName?: Platform.DevToolsPath.RawPathString;\n\n  constructor(\n      heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null, type: HeapSnapshotProfileType, title?: string) {\n    super(type, title || i18nString(UIStrings.snapshotD, {PH1: type.nextProfileUid()}));\n    this.heapProfilerModelInternal = heapProfilerModel;\n    this.maxJSObjectId = -1;\n    this.workerProxy = null;\n    this.receiver = null;\n    this.snapshotProxy = null;\n    this.loadPromise = new Promise(resolve => {\n      this.fulfillLoad = resolve;\n    });\n    this.totalNumberOfChunks = 0;\n    this.bufferedWriter = null;\n    this.onTempFileReady = null;\n  }\n\n  heapProfilerModel(): SDK.HeapProfilerModel.HeapProfilerModel|null {\n    return this.heapProfilerModelInternal;\n  }\n\n  async getLocation(nodeIndex: number): Promise<HeapSnapshotModel.HeapSnapshotModel.Location|null> {\n    if (!this.snapshotProxy) {\n      return null;\n    }\n    return this.snapshotProxy.getLocation(nodeIndex);\n  }\n\n  createSidebarTreeElement(dataDisplayDelegate: DataDisplayDelegate): ProfileSidebarTreeElement {\n    return new ProfileSidebarTreeElement(dataDisplayDelegate, this, 'heap-snapshot-sidebar-tree-item');\n  }\n\n  createView(dataDisplayDelegate: DataDisplayDelegate): HeapSnapshotView {\n    return new HeapSnapshotView(dataDisplayDelegate, this);\n  }\n\n  prepareToLoad(): void {\n    console.assert(!this.receiver, 'Already loading');\n    this.setupWorker();\n    this.updateStatus(i18nString(UIStrings.loading), true);\n  }\n\n  finishLoad(): void {\n    if (!this.wasDisposed && this.receiver) {\n      void this.receiver.close();\n    }\n    if (!this.bufferedWriter) {\n      return;\n    }\n    this.didWriteToTempFile(this.bufferedWriter);\n  }\n\n  didWriteToTempFile(tempFile: Bindings.TempFile.TempFile): void {\n    if (this.wasDisposed) {\n      if (tempFile) {\n        tempFile.remove();\n      }\n      return;\n    }\n    this.tempFile = tempFile;\n    if (!tempFile) {\n      this.failedToCreateTempFile = true;\n    }\n    if (this.onTempFileReady) {\n      this.onTempFileReady();\n      this.onTempFileReady = null;\n    }\n  }\n\n  setupWorker(): void {\n    console.assert(!this.workerProxy, 'HeapSnapshotWorkerProxy already exists');\n    this.workerProxy = new HeapSnapshotWorkerProxy(this.handleWorkerEvent.bind(this));\n    this.workerProxy.addEventListener(HeapSnapshotWorkerProxy.Events.Wait, event => {\n      this.updateStatus(null, event.data);\n    }, this);\n    this.receiver = this.workerProxy.createLoader(this.uid, this.snapshotReceived.bind(this));\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  handleWorkerEvent(eventName: string, data: any): void {\n    if (HeapSnapshotModel.HeapSnapshotModel.HeapSnapshotProgressEvent.BrokenSnapshot === eventName) {\n      const error = (data as string);\n      Common.Console.Console.instance().error(error);\n      return;\n    }\n\n    if (HeapSnapshotModel.HeapSnapshotModel.HeapSnapshotProgressEvent.Update !== eventName) {\n      return;\n    }\n    const serializedMessage = (data as string);\n    const messageObject = i18n.i18n.deserializeUIString(serializedMessage);\n    // We know all strings from the worker are declared inside a single file so we can\n    // use a custom function.\n    this.updateStatus(moduleI18nString(messageObject.string, messageObject.values));\n  }\n\n  dispose(): void {\n    if (this.workerProxy) {\n      this.workerProxy.dispose();\n    }\n    this.removeTempFile();\n    this.wasDisposed = true;\n  }\n\n  didCompleteSnapshotTransfer(): void {\n    if (!this.snapshotProxy) {\n      return;\n    }\n    this.updateStatus(Platform.NumberUtilities.bytesToString(this.snapshotProxy.totalSize), false);\n  }\n\n  transferChunk(chunk: string): void {\n    if (!this.bufferedWriter) {\n      this.bufferedWriter = new Bindings.TempFile.TempFile();\n    }\n    this.bufferedWriter.write([chunk]);\n\n    ++this.totalNumberOfChunks;\n    if (this.receiver) {\n      void this.receiver.write(chunk);\n    }\n  }\n\n  snapshotReceived(snapshotProxy: HeapSnapshotProxy): void {\n    if (this.wasDisposed) {\n      return;\n    }\n    this.receiver = null;\n    this.snapshotProxy = snapshotProxy;\n    this.maxJSObjectId = snapshotProxy.maxJSObjectId();\n    this.didCompleteSnapshotTransfer();\n    if (this.workerProxy) {\n      this.workerProxy.startCheckingForLongRunningCalls();\n    }\n    this.notifySnapshotReceived();\n  }\n\n  notifySnapshotReceived(): void {\n    if (this.snapshotProxy && this.fulfillLoad) {\n      this.fulfillLoad(this.snapshotProxy);\n    }\n    (this.profileType() as HeapSnapshotProfileType).snapshotReceived(this);\n    if (this.canSaveToFile()) {\n      this.dispatchEventToListeners(ProfileHeaderEvents.ProfileReceived);\n    }\n  }\n\n  canSaveToFile(): boolean {\n    return !this.fromFile() && Boolean(this.snapshotProxy);\n  }\n\n  saveToFile(): void {\n    const fileOutputStream = new Bindings.FileUtils.FileOutputStream();\n    this.fileName = this.fileName ||\n        'Heap-' + Platform.DateUtilities.toISO8601Compact(new Date()) + this.profileType().fileExtension() as\n            Platform.DevToolsPath.RawPathString;\n    const onOpen = async(accepted: boolean): Promise<void> => {\n      if (!accepted) {\n        return;\n      }\n      if (this.failedToCreateTempFile) {\n        Common.Console.Console.instance().error('Failed to open temp file with heap snapshot');\n        void fileOutputStream.close();\n        return;\n      }\n      if (this.tempFile) {\n        const error = (await this.tempFile.copyToOutputStream(fileOutputStream, this.onChunkTransferred.bind(this)) as {\n          message: string,\n        } | null);\n        if (error) {\n          Common.Console.Console.instance().error('Failed to read heap snapshot from temp file: ' + error.message);\n        }\n        this.didCompleteSnapshotTransfer();\n        return;\n      }\n      this.onTempFileReady = (): void => {\n        void onOpen(accepted);\n      };\n      this.updateSaveProgress(0, 1);\n    };\n\n    void fileOutputStream.open(this.fileName).then(onOpen.bind(this));\n  }\n\n  onChunkTransferred(reader: Bindings.FileUtils.ChunkedReader): void {\n    this.updateSaveProgress(reader.loadedSize(), reader.fileSize());\n  }\n\n  updateSaveProgress(value: number, total: number): void {\n    const percentValue = ((total && value / total) * 100).toFixed(0);\n    this.updateStatus(i18nString(UIStrings.savingD, {PH1: percentValue}));\n  }\n\n  async loadFromFile(file: File): Promise<DOMError|null> {\n    this.updateStatus(i18nString(UIStrings.loading), true);\n    this.setupWorker();\n    const reader = new Bindings.FileUtils.ChunkedFileReader(file, 10000000);\n    const success = await reader.read((this.receiver as Common.StringOutputStream.OutputStream));\n    if (!success) {\n      const error = (reader.error() as {\n        message: string,\n      } | null);\n      if (error) {\n        this.updateStatus(error.message);\n      }\n    }\n    return success ? null : reader.error();\n  }\n\n  override profileType(): HeapSnapshotProfileType {\n    return super.profileType() as HeapSnapshotProfileType;\n  }\n}\n\nexport class HeapSnapshotStatisticsView extends UI.Widget.VBox {\n  pieChart: PerfUI.PieChart.PieChart;\n  constructor() {\n    super();\n    this.element.classList.add('heap-snapshot-statistics-view');\n    this.pieChart = new PerfUI.PieChart.PieChart();\n    this.setTotalAndRecords(0, []);\n    this.pieChart.classList.add('heap-snapshot-stats-pie-chart');\n    this.element.appendChild(this.pieChart);\n  }\n\n  static valueFormatter(value: number): string {\n    return i18nString(UIStrings.sKb, {PH1: Platform.NumberUtilities.withThousandsSeparator(Math.round(value / 1000))});\n  }\n\n  setTotalAndRecords(total: number, records: PerfUI.PieChart.Slice[]): void {\n    this.pieChart.data = {\n      chartName: i18nString(UIStrings.heapMemoryUsage),\n      size: 150,\n      formatter: HeapSnapshotStatisticsView.valueFormatter,\n      showLegend: true,\n      total,\n      slices: records,\n    };\n  }\n}\n\nexport class HeapAllocationStackView extends UI.Widget.Widget {\n  readonly heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null;\n  readonly linkifier: Components.Linkifier.Linkifier;\n  frameElements: HTMLElement[];\n  constructor(heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null) {\n    super();\n    this.heapProfilerModel = heapProfilerModel;\n    this.linkifier = new Components.Linkifier.Linkifier();\n    this.frameElements = [];\n  }\n\n  onContextMenu(link: Element, event: Event): void {\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    if (!contextMenu.containsTarget(link)) {\n      contextMenu.appendApplicableItems(link);\n    }\n    void contextMenu.show();\n    event.consume(true);\n  }\n\n  onStackViewKeydown(event: KeyboardEvent): void {\n    const target = (event.target as HTMLElement | null);\n    if (!target) {\n      return;\n    }\n    if (event.key === 'Enter') {\n      const link = stackFrameToURLElement.get(target);\n      if (!link) {\n        return;\n      }\n      const linkInfo = Components.Linkifier.Linkifier.linkInfo(link);\n      if (!linkInfo) {\n        return;\n      }\n      if (Components.Linkifier.Linkifier.invokeFirstAction(linkInfo)) {\n        event.consume(true);\n      }\n      return;\n    }\n\n    let navDown;\n    const keyboardEvent = (event as KeyboardEvent);\n    if (keyboardEvent.key === 'ArrowUp') {\n      navDown = false;\n    } else if (keyboardEvent.key === 'ArrowDown') {\n      navDown = true;\n    } else {\n      return;\n    }\n\n    const index = this.frameElements.indexOf(target);\n    if (index === -1) {\n      return;\n    }\n    const nextIndex = navDown ? index + 1 : index - 1;\n    if (nextIndex < 0 || nextIndex >= this.frameElements.length) {\n      return;\n    }\n\n    const nextFrame = this.frameElements[nextIndex];\n    nextFrame.tabIndex = 0;\n    target.tabIndex = -1;\n    nextFrame.focus();\n    event.consume(true);\n  }\n\n  async setAllocatedObject(snapshot: HeapSnapshotProxy, snapshotNodeIndex: number): Promise<void> {\n    this.clear();\n    const frames = await snapshot.allocationStack(snapshotNodeIndex);\n\n    if (!frames) {\n      const stackDiv = this.element.createChild('div', 'no-heap-allocation-stack');\n      UI.UIUtils.createTextChild(stackDiv, i18nString(UIStrings.stackWasNotRecordedForThisObject));\n      return;\n    }\n\n    const stackDiv = this.element.createChild('div', 'heap-allocation-stack');\n    stackDiv.addEventListener('keydown', this.onStackViewKeydown.bind(this), false);\n    for (const frame of frames) {\n      const frameDiv = (stackDiv.createChild('div', 'stack-frame') as HTMLElement);\n      this.frameElements.push(frameDiv);\n      frameDiv.tabIndex = -1;\n      const name = frameDiv.createChild('div');\n      name.textContent = UI.UIUtils.beautifyFunctionName(frame.functionName);\n      if (!frame.scriptId) {\n        continue;\n      }\n      const target = this.heapProfilerModel ? this.heapProfilerModel.target() : null;\n      const options = {columnNumber: frame.column - 1, inlineFrameIndex: 0};\n      const urlElement = this.linkifier.linkifyScriptLocation(\n          target, String(frame.scriptId) as Protocol.Runtime.ScriptId,\n          frame.scriptName as Platform.DevToolsPath.UrlString, frame.line - 1, options);\n      frameDiv.appendChild(urlElement);\n      stackFrameToURLElement.set(frameDiv, urlElement);\n      frameDiv.addEventListener('contextmenu', this.onContextMenu.bind(this, urlElement));\n    }\n    this.frameElements[0].tabIndex = 0;\n  }\n\n  clear(): void {\n    this.element.removeChildren();\n    this.frameElements = [];\n    this.linkifier.reset();\n  }\n}\n\nconst stackFrameToURLElement = new WeakMap<HTMLElement, HTMLElement>();\n"],
  "mappings": "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",
  "names": []
}
