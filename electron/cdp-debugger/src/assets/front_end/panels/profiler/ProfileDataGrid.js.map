{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/profiler/ProfileDataGrid.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2009 280 North Inc. All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nconst UIStrings = {\n  /**\n  * @description This message is presented as a tooltip when developers investigate the performance\n  * of a page. The tooltip alerts developers that some parts of code in execution were not optimized\n  * (made to run faster) and that associated timing information must be considered with this in\n  * mind. The placeholder text is the reason the code was not optimized.\n  * @example {Optimized too many times} PH1\n  */\n  notOptimizedS: 'Not optimized: {PH1}',\n  /**\n  *@description Generic text with two placeholders separated by a comma\n  *@example {1 613 680} PH1\n  *@example {44 %} PH2\n  */\n  genericTextTwoPlaceholders: '{PH1}, {PH2}',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/ProfileDataGrid.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class ProfileDataGridNode extends DataGrid.DataGrid.DataGridNode<unknown> {\n  searchMatchedSelfColumn: boolean;\n  searchMatchedTotalColumn: boolean;\n  searchMatchedFunctionColumn: boolean;\n  profileNode: SDK.ProfileTreeModel.ProfileNode;\n  tree: ProfileDataGridTree;\n  childrenByCallUID: Map<string, ProfileDataGridNode>;\n  lastComparator: unknown;\n  callUID: string;\n  self: number;\n  total: number;\n  functionName: string;\n  readonly deoptReason: string;\n  url: Platform.DevToolsPath.UrlString;\n  linkElement: Element|null;\n  populated: boolean;\n  savedSelf?: number;\n  savedTotal?: number;\n  savedChildren?: DataGrid.DataGrid.DataGridNode<unknown>[];\n\n  constructor(profileNode: SDK.ProfileTreeModel.ProfileNode, owningTree: ProfileDataGridTree, hasChildren: boolean) {\n    super(null, hasChildren);\n\n    this.searchMatchedSelfColumn = false;\n    this.searchMatchedTotalColumn = false;\n    this.searchMatchedFunctionColumn = false;\n\n    this.profileNode = profileNode;\n    this.tree = owningTree;\n    this.childrenByCallUID = new Map();\n    this.lastComparator = null;\n\n    this.callUID = profileNode.callUID;\n    this.self = profileNode.self;\n    this.total = profileNode.total;\n    this.functionName = UI.UIUtils.beautifyFunctionName(profileNode.functionName);\n    this.deoptReason = profileNode.deoptReason || '';\n    this.url = profileNode.url;\n    this.linkElement = null;\n\n    this.populated = false;\n  }\n\n  static sort<T>(gridNodeGroups: ProfileDataGridNode[][], comparator: (arg0: T, arg1: T) => number, force: boolean):\n      void {\n    for (let gridNodeGroupIndex = 0; gridNodeGroupIndex < gridNodeGroups.length; ++gridNodeGroupIndex) {\n      const gridNodes = gridNodeGroups[gridNodeGroupIndex];\n      const count = gridNodes.length;\n\n      for (let index = 0; index < count; ++index) {\n        const gridNode = gridNodes[index];\n\n        // If the grid node is collapsed, then don't sort children (save operation for later).\n        // If the grid node has the same sorting as previously, then there is no point in sorting it again.\n        if (!force && (!gridNode.expanded || gridNode.lastComparator === comparator)) {\n          if (gridNode.children.length) {\n            gridNode.shouldRefreshChildren = true;\n          }\n          continue;\n        }\n\n        gridNode.lastComparator = comparator;\n\n        const children = gridNode.children;\n        const childCount = children.length;\n\n        if (childCount) {\n          // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n          // @ts-expect-error\n          children.sort(comparator);\n\n          for (let childIndex = 0; childIndex < childCount; ++childIndex) {\n            children[childIndex].recalculateSiblings(childIndex);\n          }\n          gridNodeGroups.push((children as ProfileDataGridNode[]));\n        }\n      }\n    }\n  }\n\n  static merge(container: ProfileDataGridTree|ProfileDataGridNode, child: ProfileDataGridNode, shouldAbsorb: boolean):\n      void {\n    container.self += child.self;\n\n    if (!shouldAbsorb) {\n      container.total += child.total;\n    }\n\n    let children = container.children.slice();\n\n    container.removeChildren();\n\n    let count: number = children.length;\n\n    for (let index = 0; index < count; ++index) {\n      if (!shouldAbsorb || children[index] !== child) {\n        container.appendChild((children[index] as ProfileDataGridNode));\n      }\n    }\n\n    children = child.children.slice();\n    count = children.length;\n\n    for (let index = 0; index < count; ++index) {\n      const orphanedChild = (children[index] as ProfileDataGridNode);\n      const existingChild = container.childrenByCallUID.get(orphanedChild.callUID);\n\n      if (existingChild) {\n        existingChild.merge((orphanedChild as ProfileDataGridNode), false);\n      } else {\n        container.appendChild(orphanedChild);\n      }\n    }\n  }\n\n  static populate(container: ProfileDataGridTree|ProfileDataGridNode): void {\n    if (container.populated) {\n      return;\n    }\n    container.populated = true;\n\n    container.populateChildren();\n\n    const currentComparator = container.tree.lastComparator;\n\n    if (currentComparator) {\n      container.sort(currentComparator, true);\n    }\n  }\n\n  createCell(columnId: string): HTMLElement {\n    switch (columnId) {\n      case 'self': {\n        const cell = this.createValueCell(this.self, this.selfPercent, columnId);\n        cell.classList.toggle('highlight', this.searchMatchedSelfColumn);\n        return cell;\n      }\n\n      case 'total': {\n        const cell = this.createValueCell(this.total, this.totalPercent, columnId);\n        cell.classList.toggle('highlight', this.searchMatchedTotalColumn);\n        return cell;\n      }\n\n      case 'function': {\n        const cell = this.createTD(columnId);\n        cell.classList.toggle('highlight', this.searchMatchedFunctionColumn);\n        if (this.deoptReason) {\n          cell.classList.add('not-optimized');\n          const warningIcon = UI.Icon.Icon.create('smallicon-warning', 'profile-warn-marker');\n          UI.Tooltip.Tooltip.install(warningIcon, i18nString(UIStrings.notOptimizedS, {PH1: this.deoptReason}));\n          cell.appendChild(warningIcon);\n        }\n        UI.UIUtils.createTextChild(cell, this.functionName);\n        if (this.profileNode.scriptId === '0') {\n          return cell;\n        }\n        const urlElement = this.tree.formatter.linkifyNode(this);\n        if (!urlElement) {\n          return cell;\n        }\n        (urlElement as HTMLElement).style.maxWidth = '75%';\n        cell.appendChild(urlElement);\n        this.linkElement = urlElement;\n        return cell;\n      }\n    }\n    return super.createCell(columnId);\n  }\n\n  createValueCell(value: number, percent: number, columnId: string): HTMLElement {\n    const cell = document.createElement('td');\n    cell.classList.add('numeric-column');\n    const div = cell.createChild('div', 'profile-multiple-values');\n    const valueSpan = div.createChild('span');\n    const valueText = this.tree.formatter.formatValue(value, this);\n    valueSpan.textContent = valueText;\n    const percentSpan = div.createChild('span', 'percent-column');\n    const percentText = this.tree.formatter.formatPercent(percent, this);\n    percentSpan.textContent = percentText;\n    const valueAccessibleText = this.tree.formatter.formatValueAccessibleText(value, this);\n    this.setCellAccessibleName(\n        i18nString(UIStrings.genericTextTwoPlaceholders, {PH1: valueAccessibleText, PH2: percentText}), cell, columnId);\n    return cell;\n  }\n\n  sort(comparator: (arg0: ProfileDataGridNode, arg1: ProfileDataGridNode) => number, force: boolean): void {\n    const sortComparator =\n        (comparator as (arg0: DataGrid.DataGrid.DataGridNode<unknown>, arg1: DataGrid.DataGrid.DataGridNode<unknown>) =>\n             number);\n    return ProfileDataGridNode.sort([[this]], sortComparator, force);\n  }\n\n  insertChild(child: DataGrid.DataGrid.DataGridNode<unknown>, index: number): void {\n    const profileDataGridNode = (child as ProfileDataGridNode);\n    super.insertChild(profileDataGridNode, index);\n    this.childrenByCallUID.set(profileDataGridNode.callUID, (profileDataGridNode as ProfileDataGridNode));\n  }\n\n  removeChild(profileDataGridNode: DataGrid.DataGrid.DataGridNode<unknown>): void {\n    super.removeChild(profileDataGridNode);\n    this.childrenByCallUID.delete((profileDataGridNode as ProfileDataGridNode).callUID);\n  }\n\n  removeChildren(): void {\n    super.removeChildren();\n\n    this.childrenByCallUID.clear();\n  }\n\n  findChild(node: SDK.ProfileTreeModel.ProfileNode): ProfileDataGridNode|null {\n    if (!node) {\n      return null;\n    }\n    return this.childrenByCallUID.get(node.callUID) || null;\n  }\n\n  get selfPercent(): number {\n    return this.self / this.tree.total * 100.0;\n  }\n\n  get totalPercent(): number {\n    return this.total / this.tree.total * 100.0;\n  }\n\n  populate(): void {\n    ProfileDataGridNode.populate(this);\n  }\n\n  populateChildren(): void {\n    // Not implemented.\n  }\n\n  // When focusing and collapsing we modify lots of nodes in the tree.\n  // This allows us to restore them all to their original state when we revert.\n\n  save(): void {\n    if (this.savedChildren) {\n      return;\n    }\n\n    this.savedSelf = this.self;\n    this.savedTotal = this.total;\n\n    this.savedChildren = this.children.slice();\n  }\n\n  /**\n   * When focusing and collapsing we modify lots of nodes in the tree.\n   * This allows us to restore them all to their original state when we revert.\n   */\n  restore(): void {\n    if (!this.savedChildren) {\n      return;\n    }\n\n    if (this.savedSelf && this.savedTotal) {\n      this.self = this.savedSelf;\n      this.total = this.savedTotal;\n    }\n\n    this.removeChildren();\n\n    const children = this.savedChildren;\n    const count = children.length;\n\n    for (let index = 0; index < count; ++index) {\n      (children[index] as ProfileDataGridNode).restore();\n      this.appendChild(children[index]);\n    }\n  }\n\n  merge(child: ProfileDataGridNode, shouldAbsorb: boolean): void {\n    ProfileDataGridNode.merge(this, child, shouldAbsorb);\n  }\n}\n\nexport class ProfileDataGridTree implements UI.SearchableView.Searchable {\n  tree: this;\n  self: number;\n  children: ProfileDataGridNode[];\n  readonly formatter: Formatter;\n  readonly searchableView: UI.SearchableView.SearchableView;\n  total: number;\n  lastComparator: ((arg0: ProfileDataGridNode, arg1: ProfileDataGridNode) => number)|null;\n  childrenByCallUID: Map<string, ProfileDataGridNode>;\n  deepSearch: boolean;\n  populated: boolean;\n  searchResults!: {\n    profileNode: ProfileDataGridNode,\n  }[];\n  savedTotal?: number;\n  savedChildren?: ProfileDataGridNode[]|null;\n  searchResultIndex: number = -1;\n\n  constructor(formatter: Formatter, searchableView: UI.SearchableView.SearchableView, total: number) {\n    this.tree = this;\n    this.self = 0;\n    this.children = [];\n    this.formatter = formatter;\n    this.searchableView = searchableView;\n    this.total = total;\n\n    this.lastComparator = null;\n    this.childrenByCallUID = new Map();\n    this.deepSearch = true;\n    this.populated = false;\n  }\n\n  static propertyComparator(property: string, isAscending: boolean):\n      (arg0: {\n        [x: string]: unknown,\n      },\n       arg1: {\n         [x: string]: unknown,\n       }) => number {\n    let comparator = ProfileDataGridTree.propertyComparators[(isAscending ? 1 : 0)][property];\n\n    if (!comparator) {\n      if (isAscending) {\n        comparator = function(\n            lhs: {\n              // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              [x: string]: any,\n            },\n            rhs: {\n              // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              [x: string]: any,\n            }): number {\n          if (lhs[property] < rhs[property]) {\n            return -1;\n          }\n\n          if (lhs[property] > rhs[property]) {\n            return 1;\n          }\n\n          return 0;\n        };\n      } else {\n        comparator = function(\n            lhs: {\n              // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              [x: string]: any,\n            },\n            rhs: {\n              // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              [x: string]: any,\n            }): number {\n          if (lhs[property] > rhs[property]) {\n            return -1;\n          }\n\n          if (lhs[property] < rhs[property]) {\n            return 1;\n          }\n\n          return 0;\n        };\n      }\n\n      ProfileDataGridTree.propertyComparators[(isAscending ? 1 : 0)][property] = comparator;\n    }\n\n    return comparator as (\n               arg0: {\n                 [x: string]: unknown,\n               },\n               arg1: {\n                 [x: string]: unknown,\n               }) => number;\n  }\n\n  get expanded(): boolean {\n    return true;\n  }\n\n  appendChild(child: ProfileDataGridNode): void {\n    this.insertChild(child, this.children.length);\n  }\n\n  focus(_profileDataGridNode: ProfileDataGridNode): void {\n  }\n\n  exclude(_profileDataGridNode: ProfileDataGridNode): void {\n  }\n\n  insertChild(child: ProfileDataGridNode, index: number): void {\n    const childToInsert = (child as ProfileDataGridNode);\n    this.children.splice(index, 0, childToInsert);\n    this.childrenByCallUID.set(childToInsert.callUID, child);\n  }\n\n  removeChildren(): void {\n    this.children = [];\n    this.childrenByCallUID.clear();\n  }\n\n  populateChildren(): void {\n    // Not implemented.\n  }\n\n  findChild(node: SDK.ProfileTreeModel.ProfileNode): ProfileDataGridNode|null {\n    if (!node) {\n      return null;\n    }\n    return this.childrenByCallUID.get(node.callUID) || null;\n  }\n\n  sort<T>(comparator: (arg0: T, arg1: T) => number, force: boolean): void {\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // @ts-expect-error\n    return ProfileDataGridNode.sort([[this]], comparator, force);\n  }\n\n  save(): void {\n    if (this.savedChildren) {\n      return;\n    }\n\n    this.savedTotal = this.total;\n    this.savedChildren = this.children.slice();\n  }\n\n  restore(): void {\n    if (!this.savedChildren) {\n      return;\n    }\n\n    this.children = this.savedChildren;\n    if (this.savedTotal) {\n      this.total = this.savedTotal;\n    }\n\n    const children = this.children;\n    const count = children.length;\n\n    for (let index = 0; index < count; ++index) {\n      (children[index] as ProfileDataGridNode).restore();\n    }\n\n    this.savedChildren = null;\n  }\n\n  matchFunction(searchConfig: UI.SearchableView.SearchConfig): ((arg0: ProfileDataGridNode) => boolean)|null {\n    const query = searchConfig.query.trim();\n    if (!query.length) {\n      return null;\n    }\n\n    const greaterThan = (query.startsWith('>'));\n    const lessThan = (query.startsWith('<'));\n    let equalTo: true|boolean = (query.startsWith('=') || ((greaterThan || lessThan) && query.indexOf('=') === 1));\n    const percentUnits = (query.endsWith('%'));\n    const millisecondsUnits = (query.length > 2 && query.endsWith('ms'));\n    const secondsUnits = (!millisecondsUnits && query.endsWith('s'));\n\n    let queryNumber = parseFloat(query);\n    if (greaterThan || lessThan || equalTo) {\n      if (equalTo && (greaterThan || lessThan)) {\n        queryNumber = parseFloat(query.substring(2));\n      } else {\n        queryNumber = parseFloat(query.substring(1));\n      }\n    }\n\n    const queryNumberMilliseconds = (secondsUnits ? (queryNumber * 1000) : queryNumber);\n\n    // Make equalTo implicitly true if it wasn't specified there is no other operator.\n    if (!isNaN(queryNumber) && !(greaterThan || lessThan)) {\n      equalTo = true;\n    }\n\n    const matcher = Platform.StringUtilities.createPlainTextSearchRegex(query, 'i');\n\n    function matchesQuery(profileDataGridNode: ProfileDataGridNode): boolean {\n      profileDataGridNode.searchMatchedSelfColumn = false;\n      profileDataGridNode.searchMatchedTotalColumn = false;\n      profileDataGridNode.searchMatchedFunctionColumn = false;\n\n      if (percentUnits) {\n        if (lessThan) {\n          if (profileDataGridNode.selfPercent < queryNumber) {\n            profileDataGridNode.searchMatchedSelfColumn = true;\n          }\n          if (profileDataGridNode.totalPercent < queryNumber) {\n            profileDataGridNode.searchMatchedTotalColumn = true;\n          }\n        } else if (greaterThan) {\n          if (profileDataGridNode.selfPercent > queryNumber) {\n            profileDataGridNode.searchMatchedSelfColumn = true;\n          }\n          if (profileDataGridNode.totalPercent > queryNumber) {\n            profileDataGridNode.searchMatchedTotalColumn = true;\n          }\n        }\n\n        if (equalTo) {\n          if (profileDataGridNode.selfPercent === queryNumber) {\n            profileDataGridNode.searchMatchedSelfColumn = true;\n          }\n          if (profileDataGridNode.totalPercent === queryNumber) {\n            profileDataGridNode.searchMatchedTotalColumn = true;\n          }\n        }\n      } else if (millisecondsUnits || secondsUnits) {\n        if (lessThan) {\n          if (profileDataGridNode.self < queryNumberMilliseconds) {\n            profileDataGridNode.searchMatchedSelfColumn = true;\n          }\n          if (profileDataGridNode.total < queryNumberMilliseconds) {\n            profileDataGridNode.searchMatchedTotalColumn = true;\n          }\n        } else if (greaterThan) {\n          if (profileDataGridNode.self > queryNumberMilliseconds) {\n            profileDataGridNode.searchMatchedSelfColumn = true;\n          }\n          if (profileDataGridNode.total > queryNumberMilliseconds) {\n            profileDataGridNode.searchMatchedTotalColumn = true;\n          }\n        }\n\n        if (equalTo) {\n          if (profileDataGridNode.self === queryNumberMilliseconds) {\n            profileDataGridNode.searchMatchedSelfColumn = true;\n          }\n          if (profileDataGridNode.total === queryNumberMilliseconds) {\n            profileDataGridNode.searchMatchedTotalColumn = true;\n          }\n        }\n      }\n\n      if (profileDataGridNode.functionName.match(matcher) ||\n          (profileDataGridNode.url && profileDataGridNode.url.match(matcher))) {\n        profileDataGridNode.searchMatchedFunctionColumn = true;\n      }\n\n      if (profileDataGridNode.searchMatchedSelfColumn || profileDataGridNode.searchMatchedTotalColumn ||\n          profileDataGridNode.searchMatchedFunctionColumn) {\n        profileDataGridNode.refresh();\n        return true;\n      }\n\n      return false;\n    }\n    return matchesQuery;\n  }\n\n  performSearch(searchConfig: UI.SearchableView.SearchConfig, shouldJump: boolean, jumpBackwards?: boolean): void {\n    this.searchCanceled();\n    const matchesQuery = this.matchFunction(searchConfig);\n    if (!matchesQuery) {\n      return;\n    }\n\n    this.searchResults = [];\n    const deepSearch = this.deepSearch;\n    let current: DataGrid.DataGrid.DataGridNode<unknown>|null;\n    for (current = this.children[0]; current; current = current.traverseNextNode(!deepSearch, null, !deepSearch)) {\n      const item = (current as ProfileDataGridNode | null);\n      if (!item) {\n        break;\n      }\n\n      if (matchesQuery(item)) {\n        this.searchResults.push({profileNode: item});\n      }\n    }\n    this.searchResultIndex = jumpBackwards ? 0 : this.searchResults.length - 1;\n    this.searchableView.updateSearchMatchesCount(this.searchResults.length);\n    this.searchableView.updateCurrentMatchIndex(this.searchResultIndex);\n  }\n\n  searchCanceled(): void {\n    if (this.searchResults) {\n      for (let i = 0; i < this.searchResults.length; ++i) {\n        const profileNode = this.searchResults[i].profileNode;\n        profileNode.searchMatchedSelfColumn = false;\n        profileNode.searchMatchedTotalColumn = false;\n        profileNode.searchMatchedFunctionColumn = false;\n        profileNode.refresh();\n      }\n    }\n\n    this.searchResults = [];\n    this.searchResultIndex = -1;\n  }\n\n  jumpToNextSearchResult(): void {\n    if (!this.searchResults || !this.searchResults.length) {\n      return;\n    }\n    this.searchResultIndex = (this.searchResultIndex + 1) % this.searchResults.length;\n    this.jumpToSearchResult(this.searchResultIndex);\n  }\n\n  jumpToPreviousSearchResult(): void {\n    if (!this.searchResults || !this.searchResults.length) {\n      return;\n    }\n    this.searchResultIndex = (this.searchResultIndex - 1 + this.searchResults.length) % this.searchResults.length;\n    this.jumpToSearchResult(this.searchResultIndex);\n  }\n\n  supportsCaseSensitiveSearch(): boolean {\n    return true;\n  }\n\n  supportsRegexSearch(): boolean {\n    return false;\n  }\n\n  jumpToSearchResult(index: number): void {\n    const searchResult = this.searchResults[index];\n    if (!searchResult) {\n      return;\n    }\n    const profileNode = searchResult.profileNode;\n    profileNode.revealAndSelect();\n    this.searchableView.updateCurrentMatchIndex(index);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static readonly propertyComparators: {[key: string]: unknown}[] = [{}, {}];\n}\n\nexport interface Formatter {\n  formatValue(value: number, node: ProfileDataGridNode): string;\n  formatValueAccessibleText(value: number, node: ProfileDataGridNode): string;\n  formatPercent(value: number, node: ProfileDataGridNode): string;\n  linkifyNode(node: ProfileDataGridNode): Element|null;\n}\n"],
  "mappings": "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",
  "names": []
}
