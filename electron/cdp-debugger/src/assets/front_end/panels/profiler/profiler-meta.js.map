{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/profiler/profiler-meta.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type * as Profiler from './profiler.js';\n\nlet loadedProfilerModule: (typeof Profiler|undefined);\n\nconst UIStrings = {\n  /**\n  *@description Title for the profiler tab\n  */\n  memory: 'Memory',\n  /**\n  *@description Title of the 'Live Heap Profile' tool in the bottom drawer\n  */\n  liveHeapProfile: 'Live Heap Profile',\n  /**\n  *@description Title of an action under the Performance category that can be invoked through the Command Menu\n  */\n  startRecordingHeapAllocations: 'Start recording heap allocations',\n  /**\n  *@description Title of an action under the Performance category that can be invoked through the Command Menu\n  */\n  stopRecordingHeapAllocations: 'Stop recording heap allocations',\n  /**\n  *@description Title of an action in the live heap profile tool to start with reload\n  */\n  startRecordingHeapAllocationsAndReload: 'Start recording heap allocations and reload the page',\n  /**\n  *@description Text in the Shortcuts page to explain a keyboard shortcut (start/stop recording performance)\n  */\n  startStopRecording: 'Start/stop recording',\n  /**\n  *@description Title of a setting under the Performance category in Settings\n  */\n  showNativeFunctions: 'Show native functions in JS Profile',\n  /**\n  *@description Command for shwoing the profiler tab\n  */\n  showMemory: 'Show Memory',\n  /**\n  *@description Command for showing the 'Live Heap Profile' tool in the bottom drawer\n  */\n  showLiveHeapProfile: 'Show Live Heap Profile',\n\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/profiler-meta.ts', UIStrings);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nasync function loadProfilerModule(): Promise<typeof Profiler> {\n  if (!loadedProfilerModule) {\n    loadedProfilerModule = await import('./profiler.js');\n  }\n  return loadedProfilerModule;\n}\n\nfunction maybeRetrieveContextTypes<T = unknown>(getClassCallBack: (profilerModule: typeof Profiler) => T[]): T[] {\n  if (loadedProfilerModule === undefined) {\n    return [];\n  }\n  return getClassCallBack(loadedProfilerModule);\n}\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.PANEL,\n  id: 'heap_profiler',\n  commandPrompt: i18nLazyString(UIStrings.showMemory),\n  title: i18nLazyString(UIStrings.memory),\n  order: 60,\n  async loadView() {\n    const Profiler = await loadProfilerModule();\n    return Profiler.HeapProfilerPanel.HeapProfilerPanel.instance();\n  },\n});\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.DRAWER_VIEW,\n  id: 'live_heap_profile',\n  commandPrompt: i18nLazyString(UIStrings.showLiveHeapProfile),\n  title: i18nLazyString(UIStrings.liveHeapProfile),\n  persistence: UI.ViewManager.ViewPersistence.CLOSEABLE,\n  order: 100,\n  async loadView() {\n    const Profiler = await loadProfilerModule();\n    return Profiler.LiveHeapProfileView.LiveHeapProfileView.instance();\n  },\n  experiment: Root.Runtime.ExperimentName.LIVE_HEAP_PROFILE,\n});\n\nUI.ActionRegistration.registerActionExtension({\n  actionId: 'live-heap-profile.toggle-recording',\n  iconClass: UI.ActionRegistration.IconClass.LARGEICON_START_RECORDING,\n  toggleable: true,\n  toggledIconClass: UI.ActionRegistration.IconClass.LARGEICON_STOP_RECORDING,\n  toggleWithRedColor: true,\n  async loadActionDelegate() {\n    const Profiler = await loadProfilerModule();\n    return Profiler.LiveHeapProfileView.ActionDelegate.instance();\n  },\n  category: UI.ActionRegistration.ActionCategory.MEMORY,\n  experiment: Root.Runtime.ExperimentName.LIVE_HEAP_PROFILE,\n  options: [\n    {\n      value: true,\n      title: i18nLazyString(UIStrings.startRecordingHeapAllocations),\n    },\n    {\n      value: false,\n      title: i18nLazyString(UIStrings.stopRecordingHeapAllocations),\n    },\n  ],\n});\n\nUI.ActionRegistration.registerActionExtension({\n  actionId: 'live-heap-profile.start-with-reload',\n  iconClass: UI.ActionRegistration.IconClass.LARGEICON_REFRESH,\n  async loadActionDelegate() {\n    const Profiler = await loadProfilerModule();\n    return Profiler.LiveHeapProfileView.ActionDelegate.instance();\n  },\n  category: UI.ActionRegistration.ActionCategory.MEMORY,\n  experiment: Root.Runtime.ExperimentName.LIVE_HEAP_PROFILE,\n  title: i18nLazyString(UIStrings.startRecordingHeapAllocationsAndReload),\n});\n\nUI.ActionRegistration.registerActionExtension({\n  actionId: 'profiler.heap-toggle-recording',\n  category: UI.ActionRegistration.ActionCategory.MEMORY,\n  iconClass: UI.ActionRegistration.IconClass.LARGEICON_START_RECORDING,\n  title: i18nLazyString(UIStrings.startStopRecording),\n  toggleable: true,\n  toggledIconClass: UI.ActionRegistration.IconClass.LARGEICON_STOP_RECORDING,\n  toggleWithRedColor: true,\n  contextTypes() {\n    return maybeRetrieveContextTypes(Profiler => [Profiler.HeapProfilerPanel.HeapProfilerPanel]);\n  },\n  async loadActionDelegate() {\n    const Profiler = await loadProfilerModule();\n    return Profiler.HeapProfilerPanel.HeapProfilerPanel.instance();\n  },\n  bindings: [\n    {\n      platform: UI.ActionRegistration.Platforms.WindowsLinux,\n      shortcut: 'Ctrl+E',\n    },\n    {\n      platform: UI.ActionRegistration.Platforms.Mac,\n      shortcut: 'Meta+E',\n    },\n  ],\n});\n\nCommon.Settings.registerSettingExtension({\n  category: Common.Settings.SettingCategory.PERFORMANCE,\n  storageType: Common.Settings.SettingStorageType.Synced,\n  title: i18nLazyString(UIStrings.showNativeFunctions),\n  settingName: 'showNativeFunctionsInJSProfile',\n  settingType: Common.Settings.SettingType.BOOLEAN,\n  defaultValue: true,\n});\n\nUI.ContextMenu.registerProvider({\n  contextTypes() {\n    return [\n      SDK.RemoteObject.RemoteObject,\n    ];\n  },\n  async loadProvider() {\n    const Profiler = await loadProfilerModule();\n    return Profiler.HeapProfilerPanel.HeapProfilerPanel.instance();\n  },\n  experiment: undefined,\n});\n"],
  "mappings": "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",
  "names": []
}
