{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/profiler/CPUProfileFlameChart.ts"],
  "sourcesContent": ["/**\n * Copyright (C) 2014 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as i18n from '../../core/i18n/i18n.js';\n\nlet colorGeneratorInstance: Common.Color.Generator|null = null;\n\nexport class ProfileFlameChartDataProvider implements PerfUI.FlameChart.FlameChartDataProvider {\n  readonly colorGeneratorInternal: Common.Color.Generator;\n  maxStackDepthInternal: number;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  timelineData_: PerfUI.FlameChart.TimelineData|null;\n  entryNodes: SDK.ProfileTreeModel.ProfileNode[];\n  font?: string;\n  boldFont?: string;\n\n  constructor() {\n    this.colorGeneratorInternal = ProfileFlameChartDataProvider.colorGenerator();\n    this.maxStackDepthInternal = 0;\n    this.timelineData_ = null;\n    this.entryNodes = [];\n  }\n\n  static colorGenerator(): Common.Color.Generator {\n    if (!colorGeneratorInstance) {\n      colorGeneratorInstance = new Common.Color.Generator(\n          {min: 30, max: 330, count: undefined}, {min: 50, max: 80, count: 5}, {min: 80, max: 90, count: 3});\n\n      colorGeneratorInstance.setColorForID('(idle)', 'hsl(0, 0%, 94%)');\n      colorGeneratorInstance.setColorForID('(program)', 'hsl(0, 0%, 80%)');\n      colorGeneratorInstance.setColorForID('(garbage collector)', 'hsl(0, 0%, 80%)');\n    }\n    return colorGeneratorInstance;\n  }\n\n  minimumBoundary(): number {\n    throw 'Not implemented.';\n  }\n\n  totalTime(): number {\n    throw 'Not implemented.';\n  }\n\n  formatValue(value: number, precision?: number): string {\n    return i18n.TimeUtilities.preciseMillisToString(value, precision);\n  }\n\n  maxStackDepth(): number {\n    return this.maxStackDepthInternal;\n  }\n\n  timelineData(): PerfUI.FlameChart.TimelineData|null {\n    return this.timelineData_ || this.calculateTimelineData();\n  }\n\n  calculateTimelineData(): PerfUI.FlameChart.TimelineData {\n    throw 'Not implemented.';\n  }\n\n  prepareHighlightedEntryInfo(_entryIndex: number): Element|null {\n    throw 'Not implemented.';\n  }\n\n  canJumpToEntry(entryIndex: number): boolean {\n    return this.entryNodes[entryIndex].scriptId !== '0';\n  }\n\n  entryTitle(entryIndex: number): string {\n    const node = this.entryNodes[entryIndex];\n    return UI.UIUtils.beautifyFunctionName(node.functionName);\n  }\n\n  entryFont(entryIndex: number): string|null {\n    if (!this.font) {\n      this.font = '11px ' + Host.Platform.fontFamily();\n      this.boldFont = 'bold ' + this.font;\n    }\n    return this.entryHasDeoptReason(entryIndex) ? this.boldFont as string : this.font;\n  }\n\n  entryHasDeoptReason(_entryIndex: number): boolean {\n    throw 'Not implemented.';\n  }\n\n  entryColor(entryIndex: number): string {\n    const node = this.entryNodes[entryIndex];\n    // For idle and program, we want different 'shades of gray', so we fallback to functionName as scriptId = 0\n    // For rest of nodes e.g eval scripts, if url is empty then scriptId will be guaranteed to be non-zero\n    return this.colorGeneratorInternal.colorForID(\n        node.url || (node.scriptId !== '0' ? node.scriptId : node.functionName));\n  }\n\n  decorateEntry(\n      _entryIndex: number, _context: CanvasRenderingContext2D, _text: string|null, _barX: number, _barY: number,\n      _barWidth: number, _barHeight: number): boolean {\n    return false;\n  }\n\n  forceDecoration(_entryIndex: number): boolean {\n    return false;\n  }\n\n  textColor(_entryIndex: number): string {\n    return '#333';\n  }\n\n  navStartTimes(): Map<string, SDK.TracingModel.Event> {\n    return new Map();\n  }\n\n  entryNodesLength(): number {\n    return this.entryNodes.length;\n  }\n}\n\nexport class CPUProfileFlameChart extends\n    Common.ObjectWrapper.eventMixin<PerfUI.FlameChart.EventTypes, typeof UI.Widget.VBox>(UI.Widget.VBox)\n        implements UI.SearchableView.Searchable {\n  readonly searchableView: UI.SearchableView.SearchableView;\n  readonly overviewPane: OverviewPane;\n  readonly mainPane: PerfUI.FlameChart.FlameChart;\n  entrySelected: boolean;\n  readonly dataProvider: ProfileFlameChartDataProvider;\n  searchResults: number[];\n  searchResultIndex: number = -1;\n\n  constructor(searchableView: UI.SearchableView.SearchableView, dataProvider: ProfileFlameChartDataProvider) {\n    super();\n    this.element.id = 'cpu-flame-chart';\n\n    this.searchableView = searchableView;\n    this.overviewPane = new OverviewPane(dataProvider);\n    this.overviewPane.show(this.element);\n\n    this.mainPane = new PerfUI.FlameChart.FlameChart(dataProvider, this.overviewPane);\n    this.mainPane.setBarHeight(15);\n    this.mainPane.setTextBaseline(4);\n    this.mainPane.setTextPadding(2);\n    this.mainPane.show(this.element);\n    this.mainPane.addEventListener(PerfUI.FlameChart.Events.EntrySelected, this.onEntrySelected, this);\n    this.mainPane.addEventListener(PerfUI.FlameChart.Events.EntryInvoked, this.onEntryInvoked, this);\n    this.entrySelected = false;\n    this.mainPane.addEventListener(PerfUI.FlameChart.Events.CanvasFocused, this.onEntrySelected, this);\n    this.overviewPane.addEventListener(OverviewPaneEvents.WindowChanged, this.onWindowChanged, this);\n    this.dataProvider = dataProvider;\n    this.searchResults = [];\n  }\n\n  focus(): void {\n    this.mainPane.focus();\n  }\n\n  onWindowChanged(event: Common.EventTarget.EventTargetEvent<OverviewPaneWindowChangedEvent>): void {\n    const {windowTimeLeft: windowLeft, windowTimeRight: windowRight} = event.data;\n    this.mainPane.setWindowTimes(windowLeft, windowRight, /* animate */ true);\n  }\n\n  selectRange(timeLeft: number, timeRight: number): void {\n    this.overviewPane.selectRange(timeLeft, timeRight);\n  }\n\n  onEntrySelected(event: Common.EventTarget.EventTargetEvent<void|number>): void {\n    if (event.data) {\n      const eventIndex = event.data;\n      this.mainPane.setSelectedEntry(eventIndex);\n      if (eventIndex === -1) {\n        this.entrySelected = false;\n      } else {\n        this.entrySelected = true;\n      }\n    } else if (!this.entrySelected) {\n      this.mainPane.setSelectedEntry(0);\n      this.entrySelected = true;\n    }\n  }\n\n  onEntryInvoked(event: Common.EventTarget.EventTargetEvent<number>): void {\n    this.onEntrySelected(event);\n    this.dispatchEventToListeners(PerfUI.FlameChart.Events.EntryInvoked, event.data);\n  }\n\n  update(): void {\n    this.overviewPane.update();\n    this.mainPane.update();\n  }\n\n  performSearch(searchConfig: UI.SearchableView.SearchConfig, _shouldJump: boolean, jumpBackwards?: boolean): void {\n    const matcher =\n        Platform.StringUtilities.createPlainTextSearchRegex(searchConfig.query, searchConfig.caseSensitive ? '' : 'i');\n\n    const selectedEntryIndex: number = this.searchResultIndex !== -1 ? this.searchResults[this.searchResultIndex] : -1;\n    this.searchResults = [];\n    const entriesCount = this.dataProvider.entryNodesLength();\n    for (let index = 0; index < entriesCount; ++index) {\n      if (this.dataProvider.entryTitle(index).match(matcher)) {\n        this.searchResults.push(index);\n      }\n    }\n\n    if (this.searchResults.length) {\n      this.searchResultIndex = this.searchResults.indexOf(selectedEntryIndex);\n      if (this.searchResultIndex === -1) {\n        this.searchResultIndex = jumpBackwards ? this.searchResults.length - 1 : 0;\n      }\n      this.mainPane.setSelectedEntry(this.searchResults[this.searchResultIndex]);\n    } else {\n      this.searchCanceled();\n    }\n    this.searchableView.updateSearchMatchesCount(this.searchResults.length);\n    this.searchableView.updateCurrentMatchIndex(this.searchResultIndex);\n  }\n\n  searchCanceled(): void {\n    this.mainPane.setSelectedEntry(-1);\n    this.searchResults = [];\n    this.searchResultIndex = -1;\n  }\n\n  jumpToNextSearchResult(): void {\n    this.searchResultIndex = (this.searchResultIndex + 1) % this.searchResults.length;\n    this.mainPane.setSelectedEntry(this.searchResults[this.searchResultIndex]);\n    this.searchableView.updateCurrentMatchIndex(this.searchResultIndex);\n  }\n\n  jumpToPreviousSearchResult(): void {\n    this.searchResultIndex = (this.searchResultIndex - 1 + this.searchResults.length) % this.searchResults.length;\n    this.mainPane.setSelectedEntry(this.searchResults[this.searchResultIndex]);\n    this.searchableView.updateCurrentMatchIndex(this.searchResultIndex);\n  }\n\n  supportsCaseSensitiveSearch(): boolean {\n    return true;\n  }\n\n  supportsRegexSearch(): boolean {\n    return false;\n  }\n}\n\nexport class OverviewCalculator implements PerfUI.TimelineGrid.Calculator {\n  readonly formatter: (arg0: number, arg1?: number|undefined) => string;\n  minimumBoundaries!: number;\n  maximumBoundaries!: number;\n  xScaleFactor!: number;\n  constructor(formatter: (arg0: number, arg1?: number|undefined) => string) {\n    this.formatter = formatter;\n  }\n\n  updateBoundaries(overviewPane: OverviewPane): void {\n    this.minimumBoundaries = overviewPane.dataProvider.minimumBoundary();\n    const totalTime = overviewPane.dataProvider.totalTime();\n    this.maximumBoundaries = this.minimumBoundaries + totalTime;\n    this.xScaleFactor = overviewPane.overviewContainer.clientWidth / totalTime;\n  }\n\n  computePosition(time: number): number {\n    return (time - this.minimumBoundaries) * this.xScaleFactor;\n  }\n\n  formatValue(value: number, precision?: number): string {\n    return this.formatter(value - this.minimumBoundaries, precision);\n  }\n\n  maximumBoundary(): number {\n    return this.maximumBoundaries;\n  }\n\n  minimumBoundary(): number {\n    return this.minimumBoundaries;\n  }\n\n  zeroTime(): number {\n    return this.minimumBoundaries;\n  }\n\n  boundarySpan(): number {\n    return this.maximumBoundaries - this.minimumBoundaries;\n  }\n}\n\nexport class OverviewPane extends Common.ObjectWrapper.eventMixin<OverviewPaneEventTypes, typeof UI.Widget.VBox>(\n    UI.Widget.VBox) implements PerfUI.FlameChart.FlameChartDelegate {\n  overviewContainer: HTMLElement;\n  readonly overviewCalculator: OverviewCalculator;\n  readonly overviewGrid: PerfUI.OverviewGrid.OverviewGrid;\n  overviewCanvas: HTMLCanvasElement;\n  dataProvider: PerfUI.FlameChart.FlameChartDataProvider;\n  windowTimeLeft?: number;\n  windowTimeRight?: number;\n  updateTimerId?: number;\n\n  constructor(dataProvider: PerfUI.FlameChart.FlameChartDataProvider) {\n    super();\n    this.element.classList.add('cpu-profile-flame-chart-overview-pane');\n    this.overviewContainer = this.element.createChild('div', 'cpu-profile-flame-chart-overview-container');\n    this.overviewCalculator = new OverviewCalculator(dataProvider.formatValue);\n    this.overviewGrid = new PerfUI.OverviewGrid.OverviewGrid('cpu-profile-flame-chart', this.overviewCalculator);\n    this.overviewGrid.element.classList.add('fill');\n    this.overviewCanvas =\n        (this.overviewContainer.createChild('canvas', 'cpu-profile-flame-chart-overview-canvas') as HTMLCanvasElement);\n    this.overviewContainer.appendChild(this.overviewGrid.element);\n    this.dataProvider = dataProvider;\n    this.overviewGrid.addEventListener(\n        PerfUI.OverviewGrid.Events.WindowChangedWithPosition, this.onWindowChanged, this);\n  }\n\n  windowChanged(windowStartTime: number, windowEndTime: number): void {\n    this.selectRange(windowStartTime, windowEndTime);\n  }\n\n  updateRangeSelection(_startTime: number, _endTime: number): void {\n  }\n\n  updateSelectedGroup(_flameChart: PerfUI.FlameChart.FlameChart, _group: PerfUI.FlameChart.Group|null): void {\n  }\n\n  selectRange(timeLeft: number, timeRight: number): void {\n    const startTime = this.dataProvider.minimumBoundary();\n    const totalTime = this.dataProvider.totalTime();\n    this.overviewGrid.setWindow((timeLeft - startTime) / totalTime, (timeRight - startTime) / totalTime);\n  }\n\n  onWindowChanged(event: Common.EventTarget.EventTargetEvent<PerfUI.OverviewGrid.WindowChangedWithPositionEvent>):\n      void {\n    const windowPosition = {windowTimeLeft: event.data.rawStartValue, windowTimeRight: event.data.rawEndValue};\n    this.windowTimeLeft = windowPosition.windowTimeLeft;\n    this.windowTimeRight = windowPosition.windowTimeRight;\n\n    this.dispatchEventToListeners(OverviewPaneEvents.WindowChanged, windowPosition);\n  }\n\n  timelineData(): PerfUI.FlameChart.TimelineData|null {\n    return this.dataProvider.timelineData();\n  }\n\n  onResize(): void {\n    this.scheduleUpdate();\n  }\n\n  scheduleUpdate(): void {\n    if (this.updateTimerId) {\n      return;\n    }\n    this.updateTimerId = this.element.window().requestAnimationFrame(this.update.bind(this));\n  }\n\n  update(): void {\n    this.updateTimerId = 0;\n    const timelineData = this.timelineData();\n    if (!timelineData) {\n      return;\n    }\n    this.resetCanvas(\n        this.overviewContainer.clientWidth, this.overviewContainer.clientHeight - PerfUI.FlameChart.HeaderHeight);\n    this.overviewCalculator.updateBoundaries(this);\n    this.overviewGrid.updateDividers(this.overviewCalculator);\n    this.drawOverviewCanvas();\n  }\n\n  drawOverviewCanvas(): void {\n    const canvasWidth = this.overviewCanvas.width;\n    const canvasHeight = this.overviewCanvas.height;\n    const drawData = this.calculateDrawData(canvasWidth);\n    const context = this.overviewCanvas.getContext('2d');\n    if (!context) {\n      throw new Error('Failed to get canvas context');\n    }\n    const ratio = window.devicePixelRatio;\n    const offsetFromBottom = ratio;\n    const lineWidth = 1;\n    const yScaleFactor = canvasHeight / (this.dataProvider.maxStackDepth() * 1.1);\n    context.lineWidth = lineWidth;\n    context.translate(0.5, 0.5);\n    context.strokeStyle = 'rgba(20,0,0,0.4)';\n    context.fillStyle = 'rgba(214,225,254,0.8)';\n    context.moveTo(-lineWidth, canvasHeight + lineWidth);\n    context.lineTo(-lineWidth, Math.round(canvasHeight - drawData[0] * yScaleFactor - offsetFromBottom));\n    let value = 0;\n    for (let x = 0; x < canvasWidth; ++x) {\n      value = Math.round(canvasHeight - drawData[x] * yScaleFactor - offsetFromBottom);\n      context.lineTo(x, value);\n    }\n    context.lineTo(canvasWidth + lineWidth, value);\n    context.lineTo(canvasWidth + lineWidth, canvasHeight + lineWidth);\n    context.fill();\n    context.stroke();\n    context.closePath();\n  }\n\n  calculateDrawData(width: number): Uint8Array {\n    const dataProvider = this.dataProvider;\n    const timelineData = (this.timelineData() as PerfUI.FlameChart.TimelineData);\n    const entryStartTimes = timelineData.entryStartTimes;\n    const entryTotalTimes = timelineData.entryTotalTimes;\n    const entryLevels = timelineData.entryLevels;\n    const length = entryStartTimes.length;\n    const minimumBoundary = this.dataProvider.minimumBoundary();\n\n    const drawData = new Uint8Array(width);\n    const scaleFactor = width / dataProvider.totalTime();\n\n    for (let entryIndex = 0; entryIndex < length; ++entryIndex) {\n      const start = Math.floor((entryStartTimes[entryIndex] - minimumBoundary) * scaleFactor);\n      const finish =\n          Math.floor((entryStartTimes[entryIndex] - minimumBoundary + entryTotalTimes[entryIndex]) * scaleFactor);\n      for (let x = start; x <= finish; ++x) {\n        drawData[x] = Math.max(drawData[x], entryLevels[entryIndex] + 1);\n      }\n    }\n    return drawData;\n  }\n\n  resetCanvas(width: number, height: number): void {\n    const ratio = window.devicePixelRatio;\n    this.overviewCanvas.width = width * ratio;\n    this.overviewCanvas.height = height * ratio;\n    this.overviewCanvas.style.width = width + 'px';\n    this.overviewCanvas.style.height = height + 'px';\n  }\n}\n\nexport const enum OverviewPaneEvents {\n  WindowChanged = 'WindowChanged',\n}\n\nexport interface OverviewPaneWindowChangedEvent {\n  windowTimeLeft: number;\n  windowTimeRight: number;\n}\n\nexport type OverviewPaneEventTypes = {\n  [OverviewPaneEvents.WindowChanged]: OverviewPaneWindowChangedEvent,\n};\n"],
  "mappings": "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",
  "names": []
}
