{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/profiler/ProfileLauncherView.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {IsolateSelector} from './IsolateSelector.js';\nimport profileLauncherViewStyles from './profileLauncherView.css.js';\n\nimport type {ProfileType} from './ProfileHeader.js';\nimport type {ProfilesPanel} from './ProfilesPanel.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Profile Launcher View of a profiler tool\n  */\n  selectJavascriptVmInstance: 'Select JavaScript VM instance',\n  /**\n  *@description Text to load something\n  */\n  load: 'Load',\n  /**\n  *@description Control button text content in Profile Launcher View of a profiler tool\n  */\n  takeSnapshot: 'Take snapshot',\n  /**\n  *@description Text of an item that stops the running task\n  */\n  stop: 'Stop',\n  /**\n  *@description Control button text content in Profile Launcher View of a profiler tool\n  */\n  start: 'Start',\n  /**\n  *@description Profile type header element text content in Profile Launcher View of a profiler tool\n  */\n  selectProfilingType: 'Select profiling type',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/ProfileLauncherView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class ProfileLauncherView extends Common.ObjectWrapper.eventMixin<EventTypes, typeof UI.Widget.VBox>(\n    UI.Widget.VBox) {\n  readonly panel: ProfilesPanel;\n  private contentElementInternal: HTMLElement;\n  readonly selectedProfileTypeSetting: Common.Settings.Setting<string>;\n  profileTypeHeaderElement: HTMLElement;\n  readonly profileTypeSelectorForm: HTMLElement;\n  controlButton: HTMLButtonElement;\n  readonly loadButton: HTMLButtonElement;\n  recordButtonEnabled: boolean;\n  typeIdToOptionElementAndProfileType: Map<string, {\n    optionElement: HTMLInputElement,\n    profileType: ProfileType,\n  }>;\n  isProfiling?: boolean;\n  isInstantProfile?: boolean;\n  isEnabled?: boolean;\n\n  constructor(profilesPanel: ProfilesPanel) {\n    super();\n\n    this.panel = profilesPanel;\n    this.element.classList.add('profile-launcher-view');\n    this.contentElementInternal =\n        this.element.createChild('div', 'profile-launcher-view-content vbox') as HTMLDivElement;\n\n    const profileTypeSelectorElement = this.contentElementInternal.createChild('div', 'vbox');\n    this.selectedProfileTypeSetting = Common.Settings.Settings.instance().createSetting('selectedProfileType', 'CPU');\n    this.profileTypeHeaderElement = profileTypeSelectorElement.createChild('h1');\n    this.profileTypeSelectorForm = profileTypeSelectorElement.createChild('form');\n    UI.ARIAUtils.markAsRadioGroup(this.profileTypeSelectorForm);\n\n    const isolateSelectorElement =\n        this.contentElementInternal.createChild('div', 'vbox profile-isolate-selector-block');\n    isolateSelectorElement.createChild('h1').textContent = i18nString(UIStrings.selectJavascriptVmInstance);\n    const isolateSelector = new IsolateSelector();\n    const isolateSelectorElementChild = isolateSelectorElement.createChild('div', 'vbox profile-launcher-target-list');\n    isolateSelectorElementChild.classList.add('profile-launcher-target-list-container');\n    isolateSelector.show(isolateSelectorElementChild);\n    isolateSelectorElement.appendChild(isolateSelector.totalMemoryElement());\n\n    const buttonsDiv = this.contentElementInternal.createChild('div', 'hbox profile-launcher-buttons');\n    this.controlButton = UI.UIUtils.createTextButton('', this.controlButtonClicked.bind(this), '', /* primary */ true);\n    this.loadButton = UI.UIUtils.createTextButton(i18nString(UIStrings.load), this.loadButtonClicked.bind(this), '');\n    buttonsDiv.appendChild(this.controlButton);\n    buttonsDiv.appendChild(this.loadButton);\n    this.recordButtonEnabled = true;\n\n    this.typeIdToOptionElementAndProfileType = new Map();\n  }\n\n  loadButtonClicked(): void {\n    this.panel.showLoadFromFileDialog();\n  }\n\n  updateControls(): void {\n    if (this.isEnabled && this.recordButtonEnabled) {\n      this.controlButton.removeAttribute('disabled');\n    } else {\n      this.controlButton.setAttribute('disabled', '');\n    }\n    UI.Tooltip.Tooltip.install(\n        this.controlButton, this.recordButtonEnabled ? '' : UI.UIUtils.anotherProfilerActiveLabel());\n    if (this.isInstantProfile) {\n      this.controlButton.classList.remove('running');\n      this.controlButton.classList.add('primary-button');\n      this.controlButton.textContent = i18nString(UIStrings.takeSnapshot);\n    } else if (this.isProfiling) {\n      this.controlButton.classList.add('running');\n      this.controlButton.classList.remove('primary-button');\n      this.controlButton.textContent = i18nString(UIStrings.stop);\n    } else {\n      this.controlButton.classList.remove('running');\n      this.controlButton.classList.add('primary-button');\n      this.controlButton.textContent = i18nString(UIStrings.start);\n    }\n    for (const {optionElement} of this.typeIdToOptionElementAndProfileType.values()) {\n      optionElement.disabled = Boolean(this.isProfiling);\n    }\n  }\n\n  profileStarted(): void {\n    this.isProfiling = true;\n    this.updateControls();\n  }\n\n  profileFinished(): void {\n    this.isProfiling = false;\n    this.updateControls();\n  }\n\n  updateProfileType(profileType: ProfileType, recordButtonEnabled: boolean): void {\n    this.isInstantProfile = profileType.isInstantProfile();\n    this.recordButtonEnabled = recordButtonEnabled;\n    this.isEnabled = profileType.isEnabled();\n    this.updateControls();\n  }\n\n  addProfileType(profileType: ProfileType): void {\n    const labelElement = UI.UIUtils.createRadioLabel('profile-type', profileType.name);\n    this.profileTypeSelectorForm.appendChild(labelElement);\n    const optionElement = labelElement.radioElement;\n    this.typeIdToOptionElementAndProfileType.set(profileType.id, {optionElement, profileType});\n    optionElement.addEventListener('change', this.profileTypeChanged.bind(this, profileType), false);\n    const descriptionElement = this.profileTypeSelectorForm.createChild('p');\n    descriptionElement.textContent = profileType.description;\n    UI.ARIAUtils.setDescription(optionElement, profileType.description);\n    const customContent = profileType.customContent();\n    if (customContent) {\n      this.profileTypeSelectorForm.createChild('p').appendChild(customContent);\n      profileType.setCustomContentEnabled(false);\n    }\n    const headerText = this.typeIdToOptionElementAndProfileType.size > 1 ? i18nString(UIStrings.selectProfilingType) :\n                                                                           profileType.name;\n    this.profileTypeHeaderElement.textContent = headerText;\n    UI.ARIAUtils.setAccessibleName(this.profileTypeSelectorForm, headerText);\n  }\n\n  restoreSelectedProfileType(): void {\n    let typeId = this.selectedProfileTypeSetting.get();\n    if (!this.typeIdToOptionElementAndProfileType.has(typeId)) {\n      typeId = this.typeIdToOptionElementAndProfileType.keys().next().value;\n      this.selectedProfileTypeSetting.set(typeId);\n    }\n\n    const optionElementAndProfileType = (this.typeIdToOptionElementAndProfileType.get(typeId) as {\n      optionElement: HTMLInputElement,\n      profileType: ProfileType,\n    });\n    optionElementAndProfileType.optionElement.checked = true;\n    const type = optionElementAndProfileType.profileType;\n    for (const [id, {profileType}] of this.typeIdToOptionElementAndProfileType) {\n      const enabled = (id === typeId);\n      profileType.setCustomContentEnabled(enabled);\n    }\n    this.dispatchEventToListeners(Events.ProfileTypeSelected, type);\n  }\n\n  controlButtonClicked(): void {\n    this.panel.toggleRecord();\n  }\n\n  profileTypeChanged(profileType: ProfileType): void {\n    const typeId = this.selectedProfileTypeSetting.get();\n    const type = (this.typeIdToOptionElementAndProfileType.get(typeId) as {\n                   optionElement: HTMLInputElement,\n                   profileType: ProfileType,\n                 }).profileType;\n    type.setCustomContentEnabled(false);\n    profileType.setCustomContentEnabled(true);\n    this.dispatchEventToListeners(Events.ProfileTypeSelected, profileType);\n    this.isInstantProfile = profileType.isInstantProfile();\n    this.isEnabled = profileType.isEnabled();\n    this.updateControls();\n    this.selectedProfileTypeSetting.set(profileType.id);\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([profileLauncherViewStyles]);\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  ProfileTypeSelected = 'ProfileTypeSelected',\n}\n\nexport type EventTypes = {\n  [Events.ProfileTypeSelected]: ProfileType,\n};\n"],
  "mappings": "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",
  "names": []
}
