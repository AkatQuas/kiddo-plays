{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/profiler/TopDownProfileDataGrid.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2009 280 North Inc. All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport type * as UI from '../../ui/legacy/legacy.js';\n\nimport type {Formatter} from './ProfileDataGrid.js';\nimport {ProfileDataGridNode, ProfileDataGridTree} from './ProfileDataGrid.js';\n\nexport class TopDownProfileDataGridNode extends ProfileDataGridNode {\n  remainingChildren: SDK.ProfileTreeModel.ProfileNode[];\n  constructor(profileNode: SDK.ProfileTreeModel.ProfileNode, owningTree: TopDownProfileDataGridTree) {\n    const hasChildren = Boolean(profileNode.children && profileNode.children.length);\n\n    super(profileNode, owningTree, hasChildren);\n\n    this.remainingChildren = profileNode.children;\n  }\n\n  static sharedPopulate(container: TopDownProfileDataGridTree|TopDownProfileDataGridNode): void {\n    const children = container.remainingChildren;\n    const childrenLength = children.length;\n\n    for (let i = 0; i < childrenLength; ++i) {\n      container.appendChild(\n          new TopDownProfileDataGridNode(children[i], (container.tree as TopDownProfileDataGridTree)));\n    }\n\n    container.remainingChildren = [];\n  }\n\n  static excludeRecursively(container: TopDownProfileDataGridTree|TopDownProfileDataGridNode, aCallUID: string): void {\n    if (container.remainingChildren.length > 0) {\n      (container as TopDownProfileDataGridNode).populate();\n    }\n\n    container.save();\n\n    const children = container.children;\n    let index = container.children.length;\n\n    while (index--) {\n      TopDownProfileDataGridNode.excludeRecursively((children[index] as TopDownProfileDataGridNode), aCallUID);\n    }\n\n    const child = container.childrenByCallUID.get(aCallUID);\n\n    if (child) {\n      ProfileDataGridNode.merge(container, child, true);\n    }\n  }\n\n  populateChildren(): void {\n    TopDownProfileDataGridNode.sharedPopulate(this);\n  }\n}\n\nexport class TopDownProfileDataGridTree extends ProfileDataGridTree {\n  remainingChildren: SDK.ProfileTreeModel.ProfileNode[];\n\n  constructor(\n      formatter: Formatter, searchableView: UI.SearchableView.SearchableView,\n      rootProfileNode: SDK.ProfileTreeModel.ProfileNode, total: number) {\n    super(formatter, searchableView, total);\n    this.remainingChildren = rootProfileNode.children;\n    ProfileDataGridNode.populate(this);\n  }\n\n  focus(profileDataGridNode: ProfileDataGridNode): void {\n    if (!profileDataGridNode) {\n      return;\n    }\n\n    this.save();\n    profileDataGridNode.savePosition();\n\n    this.children = [profileDataGridNode];\n    this.total = profileDataGridNode.total;\n  }\n\n  exclude(profileDataGridNode: ProfileDataGridNode): void {\n    if (!profileDataGridNode) {\n      return;\n    }\n\n    this.save();\n\n    TopDownProfileDataGridNode.excludeRecursively(this, profileDataGridNode.callUID);\n\n    if (this.lastComparator) {\n      this.sort(this.lastComparator, true);\n    }\n  }\n\n  restore(): void {\n    if (!this.savedChildren) {\n      return;\n    }\n\n    this.children[0].restorePosition();\n\n    super.restore();\n  }\n\n  populateChildren(): void {\n    TopDownProfileDataGridNode.sharedPopulate(this);\n  }\n}\n"],
  "mappings": "AAiCA;AAEO,gDAAyC,oBAAoB;AAAA,EAClE;AAAA,EACA,YAAY,aAA+C,YAAwC;AACjG,UAAM,cAAc,QAAQ,YAAY,YAAY,YAAY,SAAS;AAEzE,UAAM,aAAa,YAAY;AAE/B,SAAK,oBAAoB,YAAY;AAAA;AAAA,SAGhC,eAAe,WAAwE;AAC5F,UAAM,WAAW,UAAU;AAC3B,UAAM,iBAAiB,SAAS;AAEhC,aAAS,IAAI,GAAG,IAAI,gBAAgB,EAAE,GAAG;AACvC,gBAAU,YACN,IAAI,2BAA2B,SAAS,IAAK,UAAU;AAAA;AAG7D,cAAU,oBAAoB;AAAA;AAAA,SAGzB,mBAAmB,WAAkE,UAAwB;AAClH,QAAI,UAAU,kBAAkB,SAAS,GAAG;AAC1C,MAAC,UAAyC;AAAA;AAG5C,cAAU;AAEV,UAAM,WAAW,UAAU;AAC3B,QAAI,QAAQ,UAAU,SAAS;AAE/B,WAAO,SAAS;AACd,iCAA2B,mBAAoB,SAAS,QAAuC;AAAA;AAGjG,UAAM,QAAQ,UAAU,kBAAkB,IAAI;AAE9C,QAAI,OAAO;AACT,0BAAoB,MAAM,WAAW,OAAO;AAAA;AAAA;AAAA,EAIhD,mBAAyB;AACvB,+BAA2B,eAAe;AAAA;AAAA;AAIvC,gDAAyC,oBAAoB;AAAA,EAClE;AAAA,EAEA,YACI,WAAsB,gBACtB,iBAAmD,OAAe;AACpE,UAAM,WAAW,gBAAgB;AACjC,SAAK,oBAAoB,gBAAgB;AACzC,wBAAoB,SAAS;AAAA;AAAA,EAG/B,MAAM,qBAAgD;AACpD,QAAI,CAAC,qBAAqB;AACxB;AAAA;AAGF,SAAK;AACL,wBAAoB;AAEpB,SAAK,WAAW,CAAC;AACjB,SAAK,QAAQ,oBAAoB;AAAA;AAAA,EAGnC,QAAQ,qBAAgD;AACtD,QAAI,CAAC,qBAAqB;AACxB;AAAA;AAGF,SAAK;AAEL,+BAA2B,mBAAmB,MAAM,oBAAoB;AAExE,QAAI,KAAK,gBAAgB;AACvB,WAAK,KAAK,KAAK,gBAAgB;AAAA;AAAA;AAAA,EAInC,UAAgB;AACd,QAAI,CAAC,KAAK,eAAe;AACvB;AAAA;AAGF,SAAK,SAAS,GAAG;AAEjB,UAAM;AAAA;AAAA,EAGR,mBAAyB;AACvB,+BAA2B,eAAe;AAAA;AAAA;",
  "names": []
}
