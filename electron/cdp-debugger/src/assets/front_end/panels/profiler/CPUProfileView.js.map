{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/profiler/CPUProfileView.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2008 Apple Inc. All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport {ProfileFlameChartDataProvider} from './CPUProfileFlameChart.js';\n\nimport type {Formatter, ProfileDataGridNode} from './ProfileDataGrid.js';\nimport type {ProfileHeader} from './ProfileHeader.js';\nimport {ProfileEvents, ProfileType} from './ProfileHeader.js';\nimport {ProfileView, WritableProfileHeader} from './ProfileView.js';\n\nconst UIStrings = {\n  /**\n  *@description Time of a single activity, as opposed to the total time\n  */\n  selfTime: 'Self Time',\n  /**\n  *@description Text for the total time of something\n  */\n  totalTime: 'Total Time',\n  /**\n  *@description Text in CPUProfile View of a profiler tool\n  */\n  recordJavascriptCpuProfile: 'Record JavaScript CPU Profile',\n  /**\n  *@description Text in CPUProfile View of a profiler tool\n  */\n  stopCpuProfiling: 'Stop CPU profiling',\n  /**\n  *@description Text in CPUProfile View of a profiler tool\n  */\n  startCpuProfiling: 'Start CPU profiling',\n  /**\n  *@description Text in CPUProfile View of a profiler tool\n  */\n  cpuProfiles: 'CPU PROFILES',\n  /**\n  *@description Text in CPUProfile View of a profiler tool, that show how much time a script spend executing a function.\n  */\n  cpuProfilesShow: 'CPU profiles show where the execution time is spent in your page\\'s JavaScript functions.',\n  /**\n  *@description Text in CPUProfile View of a profiler tool\n  */\n  recording: 'Recording\u2026',\n  /**\n  *@description Time in miliseconds\n  *@example {30.1} PH1\n  */\n  fms: '{PH1}\u00A0ms',\n  /**\n  *@description Text in CPUProfile View of a profiler tool\n  *@example {21.33} PH1\n  */\n  formatPercent: '{PH1}\u00A0%',\n  /**\n  *@description Text for the name of something\n  */\n  name: 'Name',\n  /**\n  *@description Text for web URLs\n  */\n  url: 'URL',\n  /**\n  *@description Text in CPUProfile View of a profiler tool\n  */\n  aggregatedSelfTime: 'Aggregated self time',\n  /**\n  *@description Text in CPUProfile View of a profiler tool\n  */\n  aggregatedTotalTime: 'Aggregated total time',\n  /**\n  *@description Text that indicates a JavaScript function in a CPU profile is not optimized.\n  */\n  notOptimized: 'Not optimized',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/CPUProfileView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class CPUProfileView extends ProfileView implements UI.SearchableView.Searchable {\n  profileHeader: CPUProfileHeader;\n  adjustedTotal: number;\n  constructor(profileHeader: CPUProfileHeader) {\n    super();\n    this.profileHeader = profileHeader;\n    this.initialize(new NodeFormatter(this));\n    const profile = profileHeader.profileModel();\n    this.adjustedTotal = profile.profileHead.total;\n    this.adjustedTotal -= profile.idleNode ? profile.idleNode.total : 0;\n    this.setProfile(profile);\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    PerfUI.LineLevelProfile.Performance.instance().reset();\n    PerfUI.LineLevelProfile.Performance.instance().appendCPUProfile(this.profileHeader.profileModel());\n  }\n\n  columnHeader(columnId: string): Common.UIString.LocalizedString {\n    switch (columnId) {\n      case 'self':\n        return i18nString(UIStrings.selfTime);\n      case 'total':\n        return i18nString(UIStrings.totalTime);\n    }\n    return Common.UIString.LocalizedEmptyString;\n  }\n\n  createFlameChartDataProvider(): ProfileFlameChartDataProvider {\n    return new CPUFlameChartDataProvider(this.profileHeader.profileModel(), this.profileHeader.cpuProfilerModel);\n  }\n}\n\nexport class CPUProfileType extends ProfileType {\n  recording: boolean;\n  constructor() {\n    super(CPUProfileType.TypeId, i18nString(UIStrings.recordJavascriptCpuProfile));\n    this.recording = false;\n\n    const targetManager = SDK.TargetManager.TargetManager.instance();\n    const profilerModels = targetManager.models(SDK.CPUProfilerModel.CPUProfilerModel);\n    for (const model of profilerModels) {\n      for (const message of model.registeredConsoleProfileMessages) {\n        this.consoleProfileFinished(message);\n      }\n    }\n\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.CPUProfilerModel.CPUProfilerModel, SDK.CPUProfilerModel.Events.ConsoleProfileFinished,\n        event => this.consoleProfileFinished(event.data), this);\n  }\n\n  profileBeingRecorded(): ProfileHeader|null {\n    return super.profileBeingRecorded() as ProfileHeader | null;\n  }\n\n  typeName(): string {\n    return 'CPU';\n  }\n\n  fileExtension(): string {\n    return '.cpuprofile';\n  }\n\n  get buttonTooltip(): Common.UIString.LocalizedString {\n    return this.recording ? i18nString(UIStrings.stopCpuProfiling) : i18nString(UIStrings.startCpuProfiling);\n  }\n\n  buttonClicked(): boolean {\n    if (this.recording) {\n      void this.stopRecordingProfile();\n      return false;\n    }\n    this.startRecordingProfile();\n    return true;\n  }\n\n  get treeItemTitle(): Common.UIString.LocalizedString {\n    return i18nString(UIStrings.cpuProfiles);\n  }\n\n  get description(): Common.UIString.LocalizedString {\n    return i18nString(UIStrings.cpuProfilesShow);\n  }\n\n  consoleProfileFinished(data: SDK.CPUProfilerModel.ProfileFinishedData): void {\n    const profile = new CPUProfileHeader(data.cpuProfilerModel, this, data.title);\n    profile.setProtocolProfile(data.cpuProfile);\n    this.addProfile(profile);\n  }\n\n  startRecordingProfile(): void {\n    const cpuProfilerModel = UI.Context.Context.instance().flavor(SDK.CPUProfilerModel.CPUProfilerModel);\n    if (this.profileBeingRecorded() || !cpuProfilerModel) {\n      return;\n    }\n    const profile = new CPUProfileHeader(cpuProfilerModel, this);\n    this.setProfileBeingRecorded(profile as ProfileHeader);\n    void SDK.TargetManager.TargetManager.instance().suspendAllTargets();\n    this.addProfile(profile as ProfileHeader);\n    profile.updateStatus(i18nString(UIStrings.recording));\n    this.recording = true;\n    void cpuProfilerModel.startRecording();\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.ProfilesCPUProfileTaken);\n  }\n\n  async stopRecordingProfile(): Promise<void> {\n    this.recording = false;\n    const profileBeingRecorded = this.profileBeingRecorded() as CPUProfileHeader;\n    if (!profileBeingRecorded || !profileBeingRecorded.cpuProfilerModel) {\n      return;\n    }\n\n    const profile = await profileBeingRecorded.cpuProfilerModel.stopRecording();\n    const recordedProfile = this.profileBeingRecorded() as CPUProfileHeader;\n    if (recordedProfile) {\n      if (!profile) {\n        throw new Error('Expected profile to be non-null');\n      }\n      recordedProfile.setProtocolProfile(profile);\n      recordedProfile.updateStatus('');\n      this.setProfileBeingRecorded(null);\n    }\n\n    await SDK.TargetManager.TargetManager.instance().resumeAllTargets();\n    this.dispatchEventToListeners(ProfileEvents.ProfileComplete, recordedProfile);\n  }\n\n  createProfileLoadedFromFile(title: string): ProfileHeader {\n    return new CPUProfileHeader(null, this, title);\n  }\n\n  profileBeingRecordedRemoved(): void {\n    void this.stopRecordingProfile();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static readonly TypeId = 'CPU';\n}\n\nexport class CPUProfileHeader extends WritableProfileHeader {\n  cpuProfilerModel: SDK.CPUProfilerModel.CPUProfilerModel|null;\n  profileModelInternal?: SDK.CPUProfileDataModel.CPUProfileDataModel;\n\n  constructor(cpuProfilerModel: SDK.CPUProfilerModel.CPUProfilerModel|null, type: CPUProfileType, title?: string) {\n    super(cpuProfilerModel && cpuProfilerModel.debuggerModel(), type, title);\n    this.cpuProfilerModel = cpuProfilerModel;\n  }\n\n  createView(): ProfileView {\n    return new CPUProfileView(this);\n  }\n\n  protocolProfile(): Protocol.Profiler.Profile {\n    if (!this.protocolProfile()) {\n      throw new Error('Expected _protocolProfile to be available');\n    }\n    return this.protocolProfile();\n  }\n\n  profileModel(): SDK.CPUProfileDataModel.CPUProfileDataModel {\n    if (!this.profileModelInternal) {\n      throw new Error('Expected _profileModel to be available');\n    }\n    return this.profileModelInternal;\n  }\n\n  setProfile(profile: Protocol.Profiler.Profile): void {\n    const target = this.cpuProfilerModel && this.cpuProfilerModel.target() || null;\n    this.profileModelInternal = new SDK.CPUProfileDataModel.CPUProfileDataModel(profile, target);\n  }\n}\n\nexport class NodeFormatter implements Formatter {\n  readonly profileView: CPUProfileView;\n  constructor(profileView: CPUProfileView) {\n    this.profileView = profileView;\n  }\n\n  formatValue(value: number): string {\n    return i18nString(UIStrings.fms, {PH1: value.toFixed(1)});\n  }\n\n  formatValueAccessibleText(value: number): string {\n    return this.formatValue(value);\n  }\n\n  formatPercent(value: number, node: ProfileDataGridNode): string {\n    if (this.profileView) {\n      const profile = this.profileView.profile();\n      if (profile && node.profileNode !== (profile as SDK.CPUProfileDataModel.CPUProfileDataModel).idleNode) {\n        return i18nString(UIStrings.formatPercent, {PH1: value.toFixed(2)});\n      }\n    }\n    return '';\n  }\n\n  linkifyNode(node: ProfileDataGridNode): Element|null {\n    const cpuProfilerModel = this.profileView.profileHeader.cpuProfilerModel;\n    const target = cpuProfilerModel ? cpuProfilerModel.target() : null;\n    const options = {className: 'profile-node-file', inlineFrameIndex: 0};\n    return this.profileView.linkifier().maybeLinkifyConsoleCallFrame(target, node.profileNode.callFrame, options);\n  }\n}\n\nexport class CPUFlameChartDataProvider extends ProfileFlameChartDataProvider {\n  readonly cpuProfile: SDK.CPUProfileDataModel.CPUProfileDataModel;\n  readonly cpuProfilerModel: SDK.CPUProfilerModel.CPUProfilerModel|null;\n  entrySelfTimes?: Float32Array;\n\n  constructor(\n      cpuProfile: SDK.CPUProfileDataModel.CPUProfileDataModel,\n      cpuProfilerModel: SDK.CPUProfilerModel.CPUProfilerModel|null) {\n    super();\n    this.cpuProfile = cpuProfile;\n    this.cpuProfilerModel = cpuProfilerModel;\n  }\n\n  minimumBoundary(): number {\n    return this.cpuProfile.profileStartTime;\n  }\n\n  totalTime(): number {\n    return this.cpuProfile.profileHead.total;\n  }\n\n  entryHasDeoptReason(entryIndex: number): boolean {\n    const node = (this.entryNodes[entryIndex] as SDK.CPUProfileDataModel.CPUProfileNode);\n    return Boolean(node.deoptReason);\n  }\n\n  calculateTimelineData(): PerfUI.FlameChart.TimelineData {\n    const entries: (CPUFlameChartDataProvider.ChartEntry|null)[] = [];\n    const stack: number[] = [];\n    let maxDepth = 5;\n\n    function onOpenFrame(): void {\n      stack.push(entries.length);\n      // Reserve space for the entry, as they have to be ordered by startTime.\n      // The entry itself will be put there in onCloseFrame.\n      entries.push(null);\n    }\n    function onCloseFrame(\n        depth: number, node: SDK.CPUProfileDataModel.CPUProfileNode, startTime: number, totalTime: number,\n        selfTime: number): void {\n      const index = (stack.pop() as number);\n      entries[index] = new CPUFlameChartDataProvider.ChartEntry(depth, totalTime, startTime, selfTime, node);\n      maxDepth = Math.max(maxDepth, depth);\n    }\n    this.cpuProfile.forEachFrame(onOpenFrame, onCloseFrame);\n\n    const entryNodes: SDK.CPUProfileDataModel.CPUProfileNode[] = new Array(entries.length);\n    const entryLevels = new Uint16Array(entries.length);\n    const entryTotalTimes = new Float32Array(entries.length);\n    const entrySelfTimes = new Float32Array(entries.length);\n    const entryStartTimes = new Float64Array(entries.length);\n\n    for (let i = 0; i < entries.length; ++i) {\n      const entry = entries[i];\n      if (!entry) {\n        continue;\n      }\n      entryNodes[i] = entry.node;\n      entryLevels[i] = entry.depth;\n      entryTotalTimes[i] = entry.duration;\n      entryStartTimes[i] = entry.startTime;\n      entrySelfTimes[i] = entry.selfTime;\n    }\n\n    this.maxStackDepthInternal = maxDepth + 1;\n    this.entryNodes = entryNodes;\n    this.timelineData_ = new PerfUI.FlameChart.TimelineData(entryLevels, entryTotalTimes, entryStartTimes, null);\n\n    this.entrySelfTimes = entrySelfTimes;\n\n    return this.timelineData_;\n  }\n\n  prepareHighlightedEntryInfo(entryIndex: number): Element|null {\n    const timelineData = this.timelineData_;\n    const node = this.entryNodes[entryIndex];\n    if (!node) {\n      return null;\n    }\n\n    const entryInfo: {\n      title: string,\n      value: string,\n    }[] = [];\n    function pushEntryInfoRow(title: string, value: string): void {\n      entryInfo.push({title: title, value: value});\n    }\n    function millisecondsToString(ms: number): string {\n      if (ms === 0) {\n        return '0';\n      }\n      if (ms < 1000) {\n        return i18nString(UIStrings.fms, {PH1: ms.toFixed(1)});\n      }\n      return i18n.TimeUtilities.secondsToString(ms / 1000, true);\n    }\n    const name = UI.UIUtils.beautifyFunctionName(node.functionName);\n    pushEntryInfoRow(i18nString(UIStrings.name), name);\n    const selfTime = millisecondsToString((this.entrySelfTimes as Float32Array)[entryIndex]);\n    const totalTime =\n        millisecondsToString((timelineData as PerfUI.FlameChart.TimelineData).entryTotalTimes[entryIndex]);\n    pushEntryInfoRow(i18nString(UIStrings.selfTime), selfTime);\n    pushEntryInfoRow(i18nString(UIStrings.totalTime), totalTime);\n    const linkifier = new Components.Linkifier.Linkifier();\n    const link =\n        linkifier.maybeLinkifyConsoleCallFrame(this.cpuProfilerModel && this.cpuProfilerModel.target(), node.callFrame);\n    if (link) {\n      pushEntryInfoRow(i18nString(UIStrings.url), link.textContent || '');\n    }\n    linkifier.dispose();\n    pushEntryInfoRow(\n        i18nString(UIStrings.aggregatedSelfTime), i18n.TimeUtilities.secondsToString(node.self / 1000, true));\n    pushEntryInfoRow(\n        i18nString(UIStrings.aggregatedTotalTime), i18n.TimeUtilities.secondsToString(node.total / 1000, true));\n    const deoptReason = (node as SDK.CPUProfileDataModel.CPUProfileNode).deoptReason;\n    if (deoptReason) {\n      pushEntryInfoRow(i18nString(UIStrings.notOptimized), deoptReason);\n    }\n\n    return ProfileView.buildPopoverTable(entryInfo);\n  }\n}\n\nexport namespace CPUFlameChartDataProvider {\n  export class ChartEntry {\n    depth: number;\n    duration: number;\n    startTime: number;\n    selfTime: number;\n    node: SDK.CPUProfileDataModel.CPUProfileNode;\n\n    constructor(\n        depth: number, duration: number, startTime: number, selfTime: number,\n        node: SDK.CPUProfileDataModel.CPUProfileNode) {\n      this.depth = depth;\n      this.duration = duration;\n      this.startTime = startTime;\n      this.selfTime = selfTime;\n      this.node = node;\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
