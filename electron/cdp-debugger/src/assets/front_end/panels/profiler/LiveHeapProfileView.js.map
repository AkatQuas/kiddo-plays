{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/profiler/LiveHeapProfileView.ts"],
  "sourcesContent": ["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport liveHeapProfileStyles from './liveHeapProfile.css.js';\n\nimport type * as Protocol from '../../generated/protocol.js';\n\nconst UIStrings = {\n  /**\n  *@description Text for a heap profile type\n  */\n  jsHeap: 'JS Heap',\n  /**\n  *@description Text in Live Heap Profile View of a profiler tool\n  */\n  allocatedJsHeapSizeCurrentlyIn: 'Allocated JS heap size currently in use',\n  /**\n  *@description Text in Live Heap Profile View of a profiler tool\n  */\n  vms: 'VMs',\n  /**\n  *@description Text in Live Heap Profile View of a profiler tool\n  */\n  numberOfVmsSharingTheSameScript: 'Number of VMs sharing the same script source',\n  /**\n  *@description Text in Live Heap Profile View of a profiler tool\n  */\n  scriptUrl: 'Script URL',\n  /**\n  *@description Text in Live Heap Profile View of a profiler tool\n  */\n  urlOfTheScriptSource: 'URL of the script source',\n  /**\n  *@description Data grid name for Heap Profile data grids\n  */\n  heapProfile: 'Heap Profile',\n  /**\n  *@description Text in Live Heap Profile View of a profiler tool\n  *@example {1} PH1\n  */\n  anonymousScriptS: '(Anonymous Script {PH1})',\n  /**\n  *@description A unit\n  */\n  kb: 'kB',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/LiveHeapProfileView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet liveHeapProfileViewInstance: LiveHeapProfileView;\nexport class LiveHeapProfileView extends UI.Widget.VBox {\n  readonly gridNodeByUrl: Map<string, GridNode>;\n  setting: Common.Settings.Setting<boolean>;\n  readonly toggleRecordAction: UI.ActionRegistration.Action;\n  readonly toggleRecordButton: UI.Toolbar.ToolbarToggle;\n  readonly startWithReloadButton: UI.Toolbar.ToolbarButton|undefined;\n  readonly dataGrid: DataGrid.SortableDataGrid.SortableDataGrid<GridNode>;\n  currentPollId: number;\n\n  private constructor() {\n    super(true);\n    this.gridNodeByUrl = new Map();\n\n    this.setting = Common.Settings.Settings.instance().moduleSetting('memoryLiveHeapProfile');\n    const toolbar = new UI.Toolbar.Toolbar('live-heap-profile-toolbar', this.contentElement);\n    this.toggleRecordAction =\n        (UI.ActionRegistry.ActionRegistry.instance().action('live-heap-profile.toggle-recording') as\n         UI.ActionRegistration.Action);\n    this.toggleRecordButton =\n        (UI.Toolbar.Toolbar.createActionButton(this.toggleRecordAction) as UI.Toolbar.ToolbarToggle);\n    this.toggleRecordButton.setToggled(this.setting.get());\n    toolbar.appendToolbarItem(this.toggleRecordButton);\n\n    const mainTarget = SDK.TargetManager.TargetManager.instance().mainTarget();\n    if (mainTarget && mainTarget.model(SDK.ResourceTreeModel.ResourceTreeModel)) {\n      const startWithReloadAction =\n          (UI.ActionRegistry.ActionRegistry.instance().action('live-heap-profile.start-with-reload') as\n           UI.ActionRegistration.Action);\n      this.startWithReloadButton = UI.Toolbar.Toolbar.createActionButton(startWithReloadAction);\n      toolbar.appendToolbarItem(this.startWithReloadButton);\n    }\n\n    this.dataGrid = this.createDataGrid();\n    this.dataGrid.asWidget().show(this.contentElement);\n\n    this.currentPollId = 0;\n  }\n\n  static instance(): LiveHeapProfileView {\n    if (!liveHeapProfileViewInstance) {\n      liveHeapProfileViewInstance = new LiveHeapProfileView();\n    }\n    return liveHeapProfileViewInstance;\n  }\n\n  createDataGrid(): DataGrid.SortableDataGrid.SortableDataGrid<GridNode> {\n    const defaultColumnConfig: DataGrid.DataGrid.ColumnDescriptor = {\n      id: '',\n      title: Common.UIString.LocalizedEmptyString,\n      width: undefined,\n      fixedWidth: true,\n      sortable: true,\n      align: DataGrid.DataGrid.Align.Right,\n      sort: DataGrid.DataGrid.Order.Descending,\n      titleDOMFragment: undefined,\n      editable: undefined,\n      nonSelectable: undefined,\n      longText: undefined,\n      disclosure: undefined,\n      weight: undefined,\n      allowInSortByEvenWhenHidden: undefined,\n      dataType: undefined,\n      defaultWeight: undefined,\n    };\n    const columns = [\n      {\n        ...defaultColumnConfig,\n        id: 'size',\n        title: i18nString(UIStrings.jsHeap),\n        width: '72px',\n        fixedWidth: true,\n        sortable: true,\n        align: DataGrid.DataGrid.Align.Right,\n        sort: DataGrid.DataGrid.Order.Descending,\n        tooltip: i18nString(UIStrings.allocatedJsHeapSizeCurrentlyIn),\n      },\n      {\n        ...defaultColumnConfig,\n        id: 'isolates',\n        title: i18nString(UIStrings.vms),\n        width: '40px',\n        fixedWidth: true,\n        align: DataGrid.DataGrid.Align.Right,\n        tooltip: i18nString(UIStrings.numberOfVmsSharingTheSameScript),\n      },\n      {\n        ...defaultColumnConfig,\n        id: 'url',\n        title: i18nString(UIStrings.scriptUrl),\n        fixedWidth: false,\n        sortable: true,\n        tooltip: i18nString(UIStrings.urlOfTheScriptSource),\n      },\n    ];\n    const dataGrid = new DataGrid.SortableDataGrid.SortableDataGrid({\n      displayName: i18nString(UIStrings.heapProfile),\n      columns,\n      editCallback: undefined,\n      deleteCallback: undefined,\n      refreshCallback: undefined,\n    });\n    dataGrid.setResizeMethod(DataGrid.DataGrid.ResizeMethod.Last);\n    dataGrid.element.classList.add('flex-auto');\n    dataGrid.element.addEventListener('keydown', this.onKeyDown.bind(this), false);\n    dataGrid.addEventListener(DataGrid.DataGrid.Events.OpenedNode, this.revealSourceForSelectedNode, this);\n    dataGrid.addEventListener(DataGrid.DataGrid.Events.SortingChanged, this.sortingChanged, this);\n    for (const info of columns) {\n      const headerCell = dataGrid.headerTableHeader(info.id);\n      if (headerCell) {\n        headerCell.setAttribute('title', info.tooltip);\n      }\n    }\n    return dataGrid;\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    void this.poll();\n    this.registerCSSFiles([liveHeapProfileStyles]);\n    this.setting.addChangeListener(this.settingChanged, this);\n  }\n\n  willHide(): void {\n    ++this.currentPollId;\n    this.setting.removeChangeListener(this.settingChanged, this);\n  }\n\n  settingChanged(value: Common.EventTarget.EventTargetEvent<boolean>): void {\n    this.toggleRecordButton.setToggled(value.data);\n  }\n\n  async poll(): Promise<void> {\n    const pollId = this.currentPollId;\n    do {\n      const isolates = Array.from(SDK.IsolateManager.IsolateManager.instance().isolates());\n      const profiles = await Promise.all(isolates.map(isolate => {\n        const heapProfilerModel = isolate.heapProfilerModel();\n        if (!heapProfilerModel) {\n          return null;\n        }\n\n        return heapProfilerModel.getSamplingProfile();\n      }));\n      if (this.currentPollId !== pollId) {\n        return;\n      }\n      this.update(isolates, profiles);\n      await new Promise(r => window.setTimeout(r, 3000));\n    } while (this.currentPollId === pollId);\n  }\n\n  update(isolates: SDK.IsolateManager.Isolate[], profiles: (Protocol.HeapProfiler.SamplingHeapProfile|null)[]): void {\n    const dataByUrl = new Map<string, {\n      size: number,\n      isolates: Set<SDK.IsolateManager.Isolate>,\n    }>();\n    profiles.forEach((profile, index) => {\n      if (profile) {\n        processNodeTree(isolates[index], '', profile.head);\n      }\n    });\n\n    const rootNode = this.dataGrid.rootNode();\n    const exisitingNodes = new Set<GridNode>();\n    for (const pair of dataByUrl) {\n      const url = (pair[0] as string);\n      const size = (pair[1].size as number);\n      const isolateCount = (pair[1].isolates.size as number);\n      if (!url) {\n        console.info(`Node with empty URL: ${size} bytes`);  // eslint-disable-line no-console\n        continue;\n      }\n      let node = this.gridNodeByUrl.get(url);\n      if (node) {\n        node.updateNode(size, isolateCount);\n      } else {\n        node = new GridNode(url, size, isolateCount);\n        this.gridNodeByUrl.set(url, node);\n        rootNode.appendChild(node);\n      }\n      exisitingNodes.add(node);\n    }\n\n    for (const node of rootNode.children.slice()) {\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n      // @ts-expect-error\n      if (!exisitingNodes.has(node)) {\n        node.remove();\n      }\n      const gridNode = (node as GridNode);\n      this.gridNodeByUrl.delete(gridNode.url);\n    }\n\n    this.sortingChanged();\n\n    function processNodeTree(\n        isolate: SDK.IsolateManager.Isolate, parentUrl: string,\n        node: Protocol.HeapProfiler.SamplingHeapProfileNode): void {\n      const url = node.callFrame.url || parentUrl || systemNodeName(node) || anonymousScriptName(node);\n      node.children.forEach(processNodeTree.bind(null, isolate, url));\n      if (!node.selfSize) {\n        return;\n      }\n      let data = dataByUrl.get(url);\n      if (!data) {\n        data = {size: 0, isolates: new Set()};\n        dataByUrl.set(url, data);\n      }\n      data.size += node.selfSize;\n      data.isolates.add(isolate);\n    }\n\n    function systemNodeName(node: Protocol.HeapProfiler.SamplingHeapProfileNode): string {\n      const name = node.callFrame.functionName;\n      return name.startsWith('(') && name !== '(root)' ? name : '';\n    }\n\n    function anonymousScriptName(node: Protocol.HeapProfiler.SamplingHeapProfileNode): string {\n      return Number(node.callFrame.scriptId) ? i18nString(UIStrings.anonymousScriptS, {PH1: node.callFrame.scriptId}) :\n                                               '';\n    }\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    if (!(event.key === 'Enter')) {\n      return;\n    }\n    event.consume(true);\n    this.revealSourceForSelectedNode();\n  }\n\n  revealSourceForSelectedNode(): void {\n    const node = (this.dataGrid.selectedNode as GridNode);\n    if (!node || !node.url) {\n      return;\n    }\n    const sourceCode =\n        Workspace.Workspace.WorkspaceImpl.instance().uiSourceCodeForURL(node.url as Platform.DevToolsPath.UrlString);\n    if (sourceCode) {\n      void Common.Revealer.reveal(sourceCode);\n    }\n  }\n\n  sortingChanged(): void {\n    const columnId = this.dataGrid.sortColumnId();\n    if (!columnId) {\n      return;\n    }\n\n    function sortByUrl(\n        a: DataGrid.SortableDataGrid.SortableDataGridNode<GridNode>,\n        b: DataGrid.SortableDataGrid.SortableDataGridNode<GridNode>): number {\n      return (b as GridNode).url.localeCompare((a as GridNode).url);\n    }\n\n    function sortBySize(\n        a: DataGrid.SortableDataGrid.SortableDataGridNode<GridNode>,\n        b: DataGrid.SortableDataGrid.SortableDataGridNode<GridNode>): number {\n      return (b as GridNode).size - (a as GridNode).size;\n    }\n\n    const sortFunction = columnId === 'url' ? sortByUrl : sortBySize;\n    this.dataGrid.sortNodes(sortFunction, this.dataGrid.isSortOrderAscending());\n  }\n\n  toggleRecording(): void {\n    const enable = !this.setting.get();\n    if (enable) {\n      this.startRecording(false);\n    } else {\n      void this.stopRecording();\n    }\n  }\n\n  startRecording(reload?: boolean): void {\n    this.setting.set(true);\n    if (!reload) {\n      return;\n    }\n    const mainTarget = SDK.TargetManager.TargetManager.instance().mainTarget();\n    if (!mainTarget) {\n      return;\n    }\n    const resourceTreeModel =\n        (mainTarget.model(SDK.ResourceTreeModel.ResourceTreeModel) as SDK.ResourceTreeModel.ResourceTreeModel | null);\n    if (resourceTreeModel) {\n      resourceTreeModel.reloadPage();\n    }\n  }\n\n  async stopRecording(): Promise<void> {\n    this.setting.set(false);\n  }\n}\n\nexport class GridNode extends DataGrid.SortableDataGrid.SortableDataGridNode<unknown> {\n  url: string;\n  size: number;\n  isolateCount: number;\n\n  constructor(url: string, size: number, isolateCount: number) {\n    super();\n    this.url = url;\n    this.size = size;\n    this.isolateCount = isolateCount;\n  }\n\n  updateNode(size: number, isolateCount: number): void {\n    if (this.size === size && this.isolateCount === isolateCount) {\n      return;\n    }\n    this.size = size;\n    this.isolateCount = isolateCount;\n    this.refresh();\n  }\n\n  createCell(columnId: string): HTMLElement {\n    const cell = this.createTD(columnId);\n    switch (columnId) {\n      case 'url':\n        cell.textContent = this.url;\n        break;\n      case 'size':\n        cell.textContent = Platform.NumberUtilities.withThousandsSeparator(Math.round(this.size / 1e3));\n        cell.createChild('span', 'size-units').textContent = i18nString(UIStrings.kb);\n        break;\n      case 'isolates':\n        cell.textContent = `${this.isolateCount}`;\n        break;\n    }\n    return cell;\n  }\n}\n\nlet profilerActionDelegateInstance: ActionDelegate;\n\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ActionDelegate {\n    const {forceNew} = opts;\n    if (!profilerActionDelegateInstance || forceNew) {\n      profilerActionDelegateInstance = new ActionDelegate();\n    }\n    return profilerActionDelegateInstance;\n  }\n\n  handleAction(_context: UI.Context.Context, actionId: string): boolean {\n    void (async(): Promise<void> => {\n      const profileViewId = 'live_heap_profile';\n      await UI.ViewManager.ViewManager.instance().showView(profileViewId);\n      const view = UI.ViewManager.ViewManager.instance().view(profileViewId);\n      if (view) {\n        const widget = await view.widget();\n        this.innerHandleAction((widget as LiveHeapProfileView), actionId);\n      }\n    })();\n    return true;\n  }\n\n  innerHandleAction(profilerView: LiveHeapProfileView, actionId: string): void {\n    switch (actionId) {\n      case 'live-heap-profile.toggle-recording':\n        profilerView.toggleRecording();\n        break;\n      case 'live-heap-profile.start-with-reload':\n        profilerView.startRecording(true);\n        break;\n      default:\n        console.assert(false, `Unknown action: ${actionId}`);\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
