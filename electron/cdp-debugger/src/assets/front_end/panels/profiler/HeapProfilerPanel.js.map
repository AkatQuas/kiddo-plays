{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/profiler/HeapProfilerPanel.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type {HeapSnapshotView} from './HeapSnapshotView.js';\nimport type {ProfileType} from './ProfileHeader.js';\nimport {ProfilesPanel} from './ProfilesPanel.js';\nimport {instance} from './ProfileTypeRegistry.js';\n\nconst UIStrings = {\n  /**\n  *@description A context menu item in the Heap Profiler Panel of a profiler tool\n  */\n  revealInSummaryView: 'Reveal in Summary view',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/HeapProfilerPanel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet heapProfilerPanelInstance: HeapProfilerPanel;\nexport class HeapProfilerPanel extends ProfilesPanel implements UI.ContextMenu.Provider,\n                                                                UI.ActionRegistration.ActionDelegate {\n  constructor() {\n    const registry = instance;\n    const profileTypes =\n        [registry.heapSnapshotProfileType, registry.trackingHeapSnapshotProfileType, registry.samplingHeapProfileType];\n    super('heap_profiler', profileTypes as ProfileType[], 'profiler.heap-toggle-recording');\n  }\n\n  static instance(): HeapProfilerPanel {\n    if (!heapProfilerPanelInstance) {\n      heapProfilerPanelInstance = new HeapProfilerPanel();\n    }\n    return heapProfilerPanelInstance;\n  }\n\n  appendApplicableItems(event: Event, contextMenu: UI.ContextMenu.ContextMenu, target: Object): void {\n    if (!(target instanceof SDK.RemoteObject.RemoteObject)) {\n      return;\n    }\n\n    if (!this.isShowing()) {\n      return;\n    }\n\n    const object = (target as SDK.RemoteObject.RemoteObject);\n    if (!object.objectId) {\n      return;\n    }\n    const objectId = object.objectId;\n\n    const heapProfiles = instance.heapSnapshotProfileType.getProfiles();\n    if (!heapProfiles.length) {\n      return;\n    }\n\n    const heapProfilerModel = object.runtimeModel().heapProfilerModel();\n    if (!heapProfilerModel) {\n      return;\n    }\n\n    function revealInView(this: ProfilesPanel, viewName: string): void {\n      void heapProfilerModel.snapshotObjectIdForObjectId(objectId).then(result => {\n        if (this.isShowing() && result) {\n          this.showObject(result, viewName);\n        }\n      });\n    }\n\n    contextMenu.revealSection().appendItem(\n        i18nString(UIStrings.revealInSummaryView), revealInView.bind(this, 'Summary'));\n  }\n\n  handleAction(_context: UI.Context.Context, _actionId: string): boolean {\n    const panel = UI.Context.Context.instance().flavor(HeapProfilerPanel);\n    console.assert(Boolean(panel) && panel instanceof HeapProfilerPanel);\n    if (panel) {\n      panel.toggleRecord();\n    }\n    return true;\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    UI.Context.Context.instance().setFlavor(HeapProfilerPanel, this);\n    // Record the memory tool load time.\n    Host.userMetrics.panelLoaded('heap_profiler', 'DevTools.Launch.HeapProfiler');\n  }\n\n  willHide(): void {\n    UI.Context.Context.instance().setFlavor(HeapProfilerPanel, null);\n  }\n\n  showObject(snapshotObjectId: string, perspectiveName: string): void {\n    const registry = instance;\n    const heapProfiles = registry.heapSnapshotProfileType.getProfiles();\n    for (let i = 0; i < heapProfiles.length; i++) {\n      const profile = heapProfiles[i];\n      // FIXME: allow to choose snapshot if there are several options.\n      if (profile.maxJSObjectId >= parseInt(snapshotObjectId, 10)) {\n        this.showProfile(profile);\n        const view = (this.viewForProfile(profile) as HeapSnapshotView);\n        void view.selectLiveObject(perspectiveName, snapshotObjectId);\n        break;\n      }\n    }\n  }\n}\n"],
  "mappings": "AAIA;AACA;AACA;AACA;AAIA;AACA;AAEA,MAAM,YAAY;AAAA,EAIhB,qBAAqB;AAAA;AAEvB,MAAM,OAAO,KAAK,KAAK,kBAAkB,wCAAwC;AACjF,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAChE,IAAI;AACG,uCAAgC,cAC8D;AAAA,EACnG,cAAc;AACZ,UAAM,WAAW;AACjB,UAAM,eACF,CAAC,SAAS,yBAAyB,SAAS,iCAAiC,SAAS;AAC1F,UAAM,iBAAiB,cAA+B;AAAA;AAAA,SAGjD,WAA8B;AACnC,QAAI,CAAC,2BAA2B;AAC9B,kCAA4B,IAAI;AAAA;AAElC,WAAO;AAAA;AAAA,EAGT,sBAAsB,OAAc,aAAyC,QAAsB;AACjG,QAAI,CAAE,mBAAkB,IAAI,aAAa,eAAe;AACtD;AAAA;AAGF,QAAI,CAAC,KAAK,aAAa;AACrB;AAAA;AAGF,UAAM,SAAU;AAChB,QAAI,CAAC,OAAO,UAAU;AACpB;AAAA;AAEF,UAAM,WAAW,OAAO;AAExB,UAAM,eAAe,SAAS,wBAAwB;AACtD,QAAI,CAAC,aAAa,QAAQ;AACxB;AAAA;AAGF,UAAM,oBAAoB,OAAO,eAAe;AAChD,QAAI,CAAC,mBAAmB;AACtB;AAAA;AAGF,0BAA2C,UAAwB;AACjE,WAAK,kBAAkB,4BAA4B,UAAU,KAAK,YAAU;AAC1E,YAAI,KAAK,eAAe,QAAQ;AAC9B,eAAK,WAAW,QAAQ;AAAA;AAAA;AAAA;AAK9B,gBAAY,gBAAgB,WACxB,WAAW,UAAU,sBAAsB,aAAa,KAAK,MAAM;AAAA;AAAA,EAGzE,aAAa,UAA8B,WAA4B;AACrE,UAAM,QAAQ,GAAG,QAAQ,QAAQ,WAAW,OAAO;AACnD,YAAQ,OAAO,QAAQ,UAAU,iBAAiB;AAClD,QAAI,OAAO;AACT,YAAM;AAAA;AAER,WAAO;AAAA;AAAA,EAGT,WAAiB;AACf,UAAM;AACN,OAAG,QAAQ,QAAQ,WAAW,UAAU,mBAAmB;AAE3D,SAAK,YAAY,YAAY,iBAAiB;AAAA;AAAA,EAGhD,WAAiB;AACf,OAAG,QAAQ,QAAQ,WAAW,UAAU,mBAAmB;AAAA;AAAA,EAG7D,WAAW,kBAA0B,iBAA+B;AAClE,UAAM,WAAW;AACjB,UAAM,eAAe,SAAS,wBAAwB;AACtD,aAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC5C,YAAM,UAAU,aAAa;AAE7B,UAAI,QAAQ,iBAAiB,SAAS,kBAAkB,KAAK;AAC3D,aAAK,YAAY;AACjB,cAAM,OAAQ,KAAK,eAAe;AAClC,aAAK,KAAK,iBAAiB,iBAAiB;AAC5C;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
