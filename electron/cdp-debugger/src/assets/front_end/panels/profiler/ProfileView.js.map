{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/profiler/ProfileView.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {BottomUpProfileDataGridTree} from './BottomUpProfileDataGrid.js';\nimport type {ProfileFlameChartDataProvider} from './CPUProfileFlameChart.js';\nimport {CPUProfileFlameChart} from './CPUProfileFlameChart.js';\nimport type {Formatter, ProfileDataGridNode} from './ProfileDataGrid.js';\nimport {ProfileDataGridTree} from './ProfileDataGrid.js';\nimport type {DataDisplayDelegate, ProfileType} from './ProfileHeader.js';\nimport {Events, ProfileHeader} from './ProfileHeader.js';\nimport {ProfileSidebarTreeElement} from './ProfileSidebarTreeElement.js';\nimport {TopDownProfileDataGridTree} from './TopDownProfileDataGrid.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Profile View of a profiler tool\n  */\n  profile: 'Profile',\n  /**\n  *@description Placeholder text in the search box of the JavaScript profiler tool. Users can search\n  *the results by the cost in milliseconds, the name of the function, or the file name.\n  */\n  findByCostMsNameOrFile: 'Find by cost (>50ms), name or file',\n  /**\n  *@description Text for a programming function\n  */\n  function: 'Function',\n  /**\n  *@description Title of the Profiler tool\n  */\n  profiler: 'Profiler',\n  /**\n  *@description Aria-label for profiles view combobox in memory tool\n  */\n  profileViewMode: 'Profile view mode',\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon visibility button in the Profile View of a profiler tool\n  */\n  focusSelectedFunction: 'Focus selected function',\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon delete button in the Profile View of a profiler tool\n  */\n  excludeSelectedFunction: 'Exclude selected function',\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon refresh button in the Profile View of a profiler tool\n  */\n  restoreAllFunctions: 'Restore all functions',\n  /**\n  *@description Text in Profile View of a profiler tool\n  */\n  chart: 'Chart',\n  /**\n  *@description Text in Profile View of a profiler tool\n  */\n  heavyBottomUp: 'Heavy (Bottom Up)',\n  /**\n  *@description Text for selecting different profile views in the JS profiler tool. This option is a tree view.\n  */\n  treeTopDown: 'Tree (Top Down)',\n  /**\n  * @description Name of a profile\n  * @example {2} PH1\n  */\n  profileD: 'Profile {PH1}',\n  /**\n   *@description Text in Profile View of a profiler tool\n  *@example {4 MB} PH1\n  */\n  loadingD: 'Loading\u2026 {PH1}%',\n  /**\n  *@description Text in Profile View of a profiler tool\n  *@example {example.file} PH1\n  *@example {cannot open file} PH2\n  */\n  fileSReadErrorS: 'File \\'\\'{PH1}\\'\\' read error: {PH2}',\n  /**\n  *@description Text when something is loading\n  */\n  loading: 'Loading\u2026',\n  /**\n  *@description Text in Profile View of a profiler tool\n  */\n  failedToReadFile: 'Failed to read file',\n  /**\n  *@description Text in Profile View of a profiler tool\n  */\n  parsing: 'Parsing\u2026',\n  /**\n  * @description Status indicator in the JS Profiler to show that a file has been successfully loaded\n  * from file, as opposed to a profile that has been captured locally.\n  */\n  loaded: 'Loaded',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/ProfileView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class ProfileView extends UI.View.SimpleView implements UI.SearchableView.Searchable {\n  profileInternal: SDK.ProfileTreeModel.ProfileTreeModel|null;\n  searchableViewInternal: UI.SearchableView.SearchableView;\n  dataGrid: DataGrid.DataGrid.DataGridImpl<unknown>;\n  viewSelectComboBox: UI.Toolbar.ToolbarComboBox;\n  focusButton: UI.Toolbar.ToolbarButton;\n  excludeButton: UI.Toolbar.ToolbarButton;\n  resetButton: UI.Toolbar.ToolbarButton;\n  readonly linkifierInternal: Components.Linkifier.Linkifier;\n  nodeFormatter!: Formatter;\n  viewType!: Common.Settings.Setting<ViewTypes>;\n  adjustedTotal!: number;\n  profileHeader!: WritableProfileHeader;\n  bottomUpProfileDataGridTree?: BottomUpProfileDataGridTree|null;\n  topDownProfileDataGridTree?: TopDownProfileDataGridTree|null;\n  currentSearchResultIndex?: number;\n  dataProvider?: ProfileFlameChartDataProvider;\n  flameChart?: CPUProfileFlameChart;\n  visibleView?: CPUProfileFlameChart|DataGrid.DataGrid.DataGridWidget<unknown>;\n  searchableElement?: ProfileDataGridTree|CPUProfileFlameChart;\n  profileDataGridTree?: ProfileDataGridTree;\n  constructor() {\n    super(i18nString(UIStrings.profile));\n\n    this.profileInternal = null;\n\n    this.searchableViewInternal = new UI.SearchableView.SearchableView(this, null);\n    this.searchableViewInternal.setPlaceholder(i18nString(UIStrings.findByCostMsNameOrFile));\n    this.searchableViewInternal.show(this.element);\n\n    const columns = ([] as DataGrid.DataGrid.ColumnDescriptor[]);\n    columns.push({\n      id: 'self',\n      title: this.columnHeader('self'),\n      width: '120px',\n      fixedWidth: true,\n      sortable: true,\n      sort: DataGrid.DataGrid.Order.Descending,\n      titleDOMFragment: undefined,\n      align: undefined,\n      editable: undefined,\n      nonSelectable: undefined,\n      longText: undefined,\n      disclosure: undefined,\n      weight: undefined,\n      allowInSortByEvenWhenHidden: undefined,\n      dataType: undefined,\n      defaultWeight: undefined,\n    });\n    columns.push({\n      id: 'total',\n      title: this.columnHeader('total'),\n      width: '120px',\n      fixedWidth: true,\n      sortable: true,\n      sort: undefined,\n      titleDOMFragment: undefined,\n      align: undefined,\n      editable: undefined,\n      nonSelectable: undefined,\n      longText: undefined,\n      disclosure: undefined,\n      weight: undefined,\n      allowInSortByEvenWhenHidden: undefined,\n      dataType: undefined,\n      defaultWeight: undefined,\n    });\n    columns.push({\n      id: 'function',\n      title: i18nString(UIStrings.function),\n      disclosure: true,\n      sortable: true,\n      sort: undefined,\n      titleDOMFragment: undefined,\n      align: undefined,\n      editable: undefined,\n      nonSelectable: undefined,\n      longText: undefined,\n      weight: undefined,\n      allowInSortByEvenWhenHidden: undefined,\n      dataType: undefined,\n      defaultWeight: undefined,\n      width: undefined,\n      fixedWidth: undefined,\n    });\n\n    this.dataGrid = new DataGrid.DataGrid.DataGridImpl({\n      displayName: i18nString(UIStrings.profiler),\n      columns,\n      editCallback: undefined,\n      deleteCallback: undefined,\n      refreshCallback: undefined,\n    });\n    this.dataGrid.addEventListener(DataGrid.DataGrid.Events.SortingChanged, this.sortProfile, this);\n    this.dataGrid.addEventListener(DataGrid.DataGrid.Events.SelectedNode, this.nodeSelected.bind(this, true));\n    this.dataGrid.addEventListener(DataGrid.DataGrid.Events.DeselectedNode, this.nodeSelected.bind(this, false));\n    this.dataGrid.setRowContextMenuCallback(this.populateContextMenu.bind(this));\n\n    this.viewSelectComboBox =\n        new UI.Toolbar.ToolbarComboBox(this.changeView.bind(this), i18nString(UIStrings.profileViewMode));\n\n    this.focusButton =\n        new UI.Toolbar.ToolbarButton(i18nString(UIStrings.focusSelectedFunction), 'largeicon-visibility');\n    this.focusButton.setEnabled(false);\n    this.focusButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.focusClicked, this);\n\n    this.excludeButton =\n        new UI.Toolbar.ToolbarButton(i18nString(UIStrings.excludeSelectedFunction), 'largeicon-delete');\n    this.excludeButton.setEnabled(false);\n    this.excludeButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.excludeClicked, this);\n\n    this.resetButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.restoreAllFunctions), 'largeicon-refresh');\n    this.resetButton.setEnabled(false);\n    this.resetButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.resetClicked, this);\n\n    this.linkifierInternal = new Components.Linkifier.Linkifier(maxLinkLength);\n  }\n\n  static buildPopoverTable(entryInfo: {\n    title: string,\n    value: string,\n  }[]): Element {\n    const table = document.createElement('table');\n    for (const entry of entryInfo) {\n      const row = table.createChild('tr');\n      row.createChild('td').textContent = entry.title;\n      row.createChild('td').textContent = entry.value;\n    }\n    return table;\n  }\n\n  setProfile(profile: SDK.ProfileTreeModel.ProfileTreeModel): void {\n    this.profileInternal = profile;\n    this.bottomUpProfileDataGridTree = null;\n    this.topDownProfileDataGridTree = null;\n    this.changeView();\n    this.refresh();\n  }\n\n  profile(): SDK.ProfileTreeModel.ProfileTreeModel|null {\n    return this.profileInternal;\n  }\n\n  initialize(nodeFormatter: Formatter): void {\n    this.nodeFormatter = nodeFormatter;\n\n    this.viewType = Common.Settings.Settings.instance().createSetting('profileView', ViewTypes.Heavy);\n    const viewTypes = [ViewTypes.Flame, ViewTypes.Heavy, ViewTypes.Tree];\n\n    const optionNames = new Map([\n      [ViewTypes.Flame, i18nString(UIStrings.chart)],\n      [ViewTypes.Heavy, i18nString(UIStrings.heavyBottomUp)],\n      [ViewTypes.Tree, i18nString(UIStrings.treeTopDown)],\n    ]);\n\n    const options = new Map(\n        viewTypes.map(type => [type, this.viewSelectComboBox.createOption((optionNames.get(type) as string), type)]));\n    const optionName = this.viewType.get() || viewTypes[0];\n    const option = options.get(optionName) || options.get(viewTypes[0]);\n    this.viewSelectComboBox.select((option as Element));\n\n    this.changeView();\n    if (this.flameChart) {\n      this.flameChart.update();\n    }\n  }\n\n  focus(): void {\n    if (this.flameChart) {\n      this.flameChart.focus();\n    } else {\n      super.focus();\n    }\n  }\n\n  columnHeader(_columnId: string): Common.UIString.LocalizedString {\n    throw 'Not implemented';\n  }\n\n  selectRange(timeLeft: number, timeRight: number): void {\n    if (!this.flameChart) {\n      return;\n    }\n    this.flameChart.selectRange(timeLeft, timeRight);\n  }\n\n  async toolbarItems(): Promise<UI.Toolbar.ToolbarItem[]> {\n    return [this.viewSelectComboBox, this.focusButton, this.excludeButton, this.resetButton];\n  }\n\n  getBottomUpProfileDataGridTree(): ProfileDataGridTree {\n    if (!this.bottomUpProfileDataGridTree) {\n      this.bottomUpProfileDataGridTree = new BottomUpProfileDataGridTree(\n          this.nodeFormatter, this.searchableViewInternal,\n          (this.profileInternal as SDK.ProfileTreeModel.ProfileTreeModel).root, this.adjustedTotal);\n    }\n    return this.bottomUpProfileDataGridTree;\n  }\n\n  getTopDownProfileDataGridTree(): ProfileDataGridTree {\n    if (!this.topDownProfileDataGridTree) {\n      this.topDownProfileDataGridTree = new TopDownProfileDataGridTree(\n          this.nodeFormatter, this.searchableViewInternal,\n          (this.profileInternal as SDK.ProfileTreeModel.ProfileTreeModel).root, this.adjustedTotal);\n    }\n    return this.topDownProfileDataGridTree;\n  }\n\n  populateContextMenu(contextMenu: UI.ContextMenu.ContextMenu, gridNode: DataGrid.DataGrid.DataGridNode<unknown>):\n      void {\n    const node = (gridNode as ProfileDataGridNode);\n    if (node.linkElement && !contextMenu.containsTarget(node.linkElement)) {\n      contextMenu.appendApplicableItems(node.linkElement);\n    }\n  }\n\n  willHide(): void {\n    this.currentSearchResultIndex = -1;\n  }\n\n  refresh(): void {\n    if (!this.profileDataGridTree) {\n      return;\n    }\n    const selectedProfileNode =\n        this.dataGrid.selectedNode ? (this.dataGrid.selectedNode as ProfileDataGridNode).profileNode : null;\n\n    this.dataGrid.rootNode().removeChildren();\n\n    const children = this.profileDataGridTree.children;\n    const count = children.length;\n\n    for (let index = 0; index < count; ++index) {\n      this.dataGrid.rootNode().appendChild(children[index]);\n    }\n\n    if (selectedProfileNode) {\n      // TODO(crbug.com/1011811): Cleanup the added `selected` property to this SDK class.\n      // @ts-ignore\n      selectedProfileNode.selected = true;\n    }\n  }\n\n  refreshVisibleData(): void {\n    let child: (DataGrid.DataGrid.DataGridNode<unknown>|null) = this.dataGrid.rootNode().children[0];\n    while (child) {\n      child.refresh();\n      child = child.traverseNextNode(false, null, true);\n    }\n  }\n\n  searchableView(): UI.SearchableView.SearchableView {\n    return this.searchableViewInternal;\n  }\n\n  supportsCaseSensitiveSearch(): boolean {\n    return true;\n  }\n\n  supportsRegexSearch(): boolean {\n    return false;\n  }\n\n  searchCanceled(): void {\n    if (this.searchableElement) {\n      this.searchableElement.searchCanceled();\n    }\n  }\n\n  performSearch(searchConfig: UI.SearchableView.SearchConfig, shouldJump: boolean, jumpBackwards?: boolean): void {\n    if (this.searchableElement) {\n      this.searchableElement.performSearch(searchConfig, shouldJump, jumpBackwards);\n    }\n  }\n\n  jumpToNextSearchResult(): void {\n    if (this.searchableElement) {\n      this.searchableElement.jumpToNextSearchResult();\n    }\n  }\n\n  jumpToPreviousSearchResult(): void {\n    if (this.searchableElement) {\n      this.searchableElement.jumpToPreviousSearchResult();\n    }\n  }\n\n  linkifier(): Components.Linkifier.Linkifier {\n    return this.linkifierInternal;\n  }\n\n  createFlameChartDataProvider(): ProfileFlameChartDataProvider {\n    throw 'Not implemented';\n  }\n\n  ensureFlameChartCreated(): void {\n    if (this.flameChart) {\n      return;\n    }\n    this.dataProvider = this.createFlameChartDataProvider();\n    this.flameChart = new CPUProfileFlameChart(this.searchableViewInternal, this.dataProvider);\n    this.flameChart.addEventListener(PerfUI.FlameChart.Events.EntryInvoked, event => {\n      void this.onEntryInvoked(event);\n    });\n  }\n\n  async onEntryInvoked(event: Common.EventTarget.EventTargetEvent<number>): Promise<void> {\n    if (!this.dataProvider) {\n      return;\n    }\n    const entryIndex = event.data;\n    const node = this.dataProvider.entryNodes[entryIndex];\n    const debuggerModel = this.profileHeader.debuggerModel;\n    if (!node || !node.scriptId || !debuggerModel) {\n      return;\n    }\n    const script = debuggerModel.scriptForId(node.scriptId);\n    if (!script) {\n      return;\n    }\n    const location =\n        (debuggerModel.createRawLocation(script, node.lineNumber, node.columnNumber) as SDK.DebuggerModel.Location);\n    const uiLocation =\n        await Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance().rawLocationToUILocation(location);\n    void Common.Revealer.reveal(uiLocation);\n  }\n\n  changeView(): void {\n    if (!this.profileInternal) {\n      return;\n    }\n\n    this.searchableViewInternal.closeSearch();\n\n    if (this.visibleView) {\n      this.visibleView.detach();\n    }\n    this.viewType.set((this.viewSelectComboBox.selectedOption() as HTMLOptionElement).value as ViewTypes);\n    switch (this.viewType.get()) {\n      case ViewTypes.Flame:\n        this.ensureFlameChartCreated();\n        this.visibleView = this.flameChart;\n        this.searchableElement = this.flameChart;\n        break;\n      case ViewTypes.Tree:\n        this.profileDataGridTree = this.getTopDownProfileDataGridTree();\n        this.sortProfile();\n        this.visibleView = this.dataGrid.asWidget();\n        this.searchableElement = this.profileDataGridTree;\n        break;\n      case ViewTypes.Heavy:\n        this.profileDataGridTree = this.getBottomUpProfileDataGridTree();\n        this.sortProfile();\n        this.visibleView = this.dataGrid.asWidget();\n        this.searchableElement = this.profileDataGridTree;\n        break;\n    }\n\n    const isFlame = this.viewType.get() === ViewTypes.Flame;\n    this.focusButton.setVisible(!isFlame);\n    this.excludeButton.setVisible(!isFlame);\n    this.resetButton.setVisible(!isFlame);\n\n    if (this.visibleView) {\n      this.visibleView.show(this.searchableViewInternal.element);\n    }\n  }\n\n  nodeSelected(selected: boolean): void {\n    this.focusButton.setEnabled(selected);\n    this.excludeButton.setEnabled(selected);\n  }\n\n  focusClicked(): void {\n    if (!this.dataGrid.selectedNode) {\n      return;\n    }\n\n    this.resetButton.setEnabled(true);\n    (this.resetButton.element as HTMLElement).focus();\n    if (this.profileDataGridTree) {\n      this.profileDataGridTree.focus((this.dataGrid.selectedNode as ProfileDataGridNode));\n    }\n    this.refresh();\n    this.refreshVisibleData();\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.CpuProfileNodeFocused);\n  }\n\n  excludeClicked(): void {\n    const selectedNode = this.dataGrid.selectedNode;\n\n    if (!selectedNode) {\n      return;\n    }\n\n    this.resetButton.setEnabled(true);\n    (this.resetButton.element as HTMLElement).focus();\n\n    selectedNode.deselect();\n\n    if (this.profileDataGridTree) {\n      this.profileDataGridTree.exclude((selectedNode as ProfileDataGridNode));\n    }\n    this.refresh();\n    this.refreshVisibleData();\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.CpuProfileNodeExcluded);\n  }\n\n  resetClicked(): void {\n    this.viewSelectComboBox.selectElement().focus();\n    this.resetButton.setEnabled(false);\n    if (this.profileDataGridTree) {\n      this.profileDataGridTree.restore();\n    }\n    this.linkifierInternal.reset();\n    this.refresh();\n    this.refreshVisibleData();\n  }\n\n  sortProfile(): void {\n    if (!this.profileDataGridTree) {\n      return;\n    }\n    const sortAscending = this.dataGrid.isSortOrderAscending();\n    const sortColumnId = this.dataGrid.sortColumnId();\n    const sortProperty = sortColumnId === 'function' ? 'functionName' : sortColumnId || '';\n    this.profileDataGridTree.sort(ProfileDataGridTree.propertyComparator(sortProperty, sortAscending), false);\n\n    this.refresh();\n  }\n}\n\nexport const maxLinkLength = 30;\n\nexport const enum ViewTypes {\n  Flame = 'Flame',\n  Tree = 'Tree',\n  Heavy = 'Heavy',\n}\n\nexport class WritableProfileHeader extends ProfileHeader implements Common.StringOutputStream.OutputStream {\n  readonly debuggerModel: SDK.DebuggerModel.DebuggerModel|null;\n  fileName?: Platform.DevToolsPath.RawPathString;\n  jsonifiedProfile?: string|null;\n  profile?: Protocol.Profiler.Profile;\n  protocolProfileInternal?: Protocol.Profiler.Profile;\n\n  constructor(debuggerModel: SDK.DebuggerModel.DebuggerModel|null, type: ProfileType, title?: string) {\n    super(type, title || i18nString(UIStrings.profileD, {PH1: type.nextProfileUid()}));\n    this.debuggerModel = debuggerModel;\n  }\n\n  onChunkTransferred(_reader: Bindings.FileUtils.ChunkedReader): void {\n    if (this.jsonifiedProfile) {\n      // TODO(l10n): Is the '%' at the end of this string correct? 4MB% looks wrong\n      this.updateStatus(\n          i18nString(UIStrings.loadingD, {PH1: Platform.NumberUtilities.bytesToString(this.jsonifiedProfile.length)}));\n    }\n  }\n\n  onError(reader: Bindings.FileUtils.ChunkedReader): void {\n    const error = (reader.error() as Error);\n    if (error) {\n      this.updateStatus(i18nString(UIStrings.fileSReadErrorS, {PH1: reader.fileName(), PH2: error.message}));\n    }\n  }\n\n  async write(text: string): Promise<void> {\n    this.jsonifiedProfile += text;\n  }\n\n  async close(): Promise<void> {\n  }\n\n  dispose(): void {\n    this.removeTempFile();\n  }\n\n  createSidebarTreeElement(panel: DataDisplayDelegate): ProfileSidebarTreeElement {\n    return new ProfileSidebarTreeElement(panel, this, 'profile-sidebar-tree-item');\n  }\n\n  canSaveToFile(): boolean {\n    return !this.fromFile() && Boolean(this.protocolProfileInternal);\n  }\n\n  async saveToFile(): Promise<void> {\n    const fileOutputStream = new Bindings.FileUtils.FileOutputStream();\n    if (!this.fileName) {\n      const now = Platform.DateUtilities.toISO8601Compact(new Date());\n      const fileExtension = this.profileType().fileExtension();\n\n      this.fileName = `${this.profileType().typeName()}-${now}${fileExtension}` as Platform.DevToolsPath.RawPathString;\n    }\n\n    const accepted = await fileOutputStream.open(this.fileName);\n    if (!accepted || !this.tempFile) {\n      return;\n    }\n    const data = await this.tempFile.read();\n    if (data) {\n      await fileOutputStream.write(data);\n    }\n    void fileOutputStream.close();\n  }\n\n  async loadFromFile(file: File): Promise<Error|null> {\n    this.updateStatus(i18nString(UIStrings.loading), true);\n    const fileReader = new Bindings.FileUtils.ChunkedFileReader(file, 10000000, this.onChunkTransferred.bind(this));\n    this.jsonifiedProfile = '';\n\n    const success = await fileReader.read(this);\n    if (!success) {\n      this.onError(fileReader);\n      return new Error(i18nString(UIStrings.failedToReadFile));\n    }\n\n    this.updateStatus(i18nString(UIStrings.parsing), true);\n    let error: null = null;\n    try {\n      this.profile = (JSON.parse(this.jsonifiedProfile) as Protocol.Profiler.Profile);\n      this.setProfile((this.profile as Protocol.Profiler.Profile));\n      this.updateStatus(i18nString(UIStrings.loaded), false);\n    } catch (e) {\n      error = e;\n      this.profileType().removeProfile(this);\n    }\n    this.jsonifiedProfile = null;\n\n    if (this.profileType().profileBeingRecorded() === this) {\n      this.profileType().setProfileBeingRecorded(null);\n    }\n    return error;\n  }\n\n  setProtocolProfile(profile: Protocol.Profiler.Profile): void {\n    this.setProfile(profile);\n    this.protocolProfileInternal = profile;\n    this.tempFile = new Bindings.TempFile.TempFile();\n    this.tempFile.write([JSON.stringify(profile)]);\n    if (this.canSaveToFile()) {\n      this.dispatchEventToListeners(Events.ProfileReceived);\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
