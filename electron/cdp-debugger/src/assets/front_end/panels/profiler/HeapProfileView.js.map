{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/profiler/HeapProfileView.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport {ProfileFlameChartDataProvider} from './CPUProfileFlameChart.js';\n\nimport type {Samples, IdsRangeChangedEvent} from './HeapTimelineOverview.js';\nimport {Events, HeapTimelineOverview} from './HeapTimelineOverview.js';\nimport type {Formatter, ProfileDataGridNode} from './ProfileDataGrid.js';\nimport type {ProfileHeader} from './ProfileHeader.js';\nimport {ProfileType, ProfileEvents} from './ProfileHeader.js';\nimport {ProfileView, WritableProfileHeader} from './ProfileView.js';\n\nconst UIStrings = {\n  /**\n  *@description The reported total size used in the selected time frame of the allocation sampling profile\n  *@example {3 MB} PH1\n  */\n  selectedSizeS: 'Selected size: {PH1}',\n  /**\n  *@description Name of column header that reports the size (in terms of bytes) used for a particular part of the heap, excluding the size of the children nodes of this part of the heap\n  */\n  selfSizeBytes: 'Self Size (bytes)',\n  /**\n  *@description Name of column header that reports the total size (in terms of bytes) used for a particular part of the heap\n  */\n  totalSizeBytes: 'Total Size (bytes)',\n  /**\n  *@description Button text to stop profiling the heap\n  */\n  stopHeapProfiling: 'Stop heap profiling',\n  /**\n  *@description Button text to start profiling the heap\n  */\n  startHeapProfiling: 'Start heap profiling',\n  /**\n  *@description Progress update that the profiler is recording the contents of the heap\n  */\n  recording: 'Recording\u2026',\n  /**\n  *@description Icon title in Heap Profile View of a profiler tool\n  */\n  heapProfilerIsRecording: 'Heap profiler is recording',\n  /**\n  *@description Progress update that the profiler is in the process of stopping its recording of the heap\n  */\n  stopping: 'Stopping\u2026',\n  /**\n  *@description Sampling category to only profile allocations happening on the heap\n  */\n  allocationSampling: 'Allocation sampling',\n  /**\n  *@description The title for the collection of profiles that are gathered from various snapshots of the heap, using a sampling (e.g. every 1/100) technique.\n  */\n  samplingProfiles: 'SAMPLING PROFILES',\n  /**\n  *@description Description (part 1) in Heap Profile View of a profiler tool\n  */\n  recordMemoryAllocations: 'Record memory allocations using sampling method.',\n  /**\n  *@description Description (part 2) in Heap Profile View of a profiler tool\n  */\n  thisProfileTypeHasMinimal:\n      'This profile type has minimal performance overhead and can be used for long running operations.',\n  /**\n  *@description Description (part 3) in Heap Profile View of a profiler tool\n  */\n  itProvidesGoodApproximation:\n      'It provides good approximation of allocations broken down by `JavaScript` execution stack.',\n  /**\n  *@description Name of a profile\n  *@example {2} PH1\n  */\n  profileD: 'Profile {PH1}',\n  /**\n  *@description Accessible text for the value in bytes in memory allocation or coverage view.\n  *@example {12345} PH1\n  */\n  sBytes: '{PH1} bytes',\n  /**\n  *@description Text in CPUProfile View of a profiler tool\n  *@example {21.33} PH1\n  */\n  formatPercent: '{PH1}\u00A0%',\n  /**\n  *@description The formatted size in kilobytes, abbreviated to kB\n  *@example {1,021} PH1\n  */\n  skb: '{PH1}\u00A0kB',\n  /**\n  *@description Text for the name of something\n  */\n  name: 'Name',\n  /**\n  *@description Tooltip of a cell that reports the size used for a particular part of the heap, excluding the size of the children nodes of this part of the heap\n  */\n  selfSize: 'Self size',\n  /**\n  *@description Tooltip of a cell that reports the total size used for a particular part of the heap\n  */\n  totalSize: 'Total size',\n  /**\n  *@description Text for web URLs\n  */\n  url: 'URL',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/HeapProfileView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nfunction convertToSamplingHeapProfile(profileHeader: SamplingHeapProfileHeader):\n    Protocol.HeapProfiler.SamplingHeapProfile {\n  return (profileHeader.profile || profileHeader.protocolProfile()) as Protocol.HeapProfiler.SamplingHeapProfile;\n}\n\nexport class HeapProfileView extends ProfileView implements UI.SearchableView.Searchable {\n  profileHeader: SamplingHeapProfileHeader;\n  readonly profileType: SamplingHeapProfileTypeBase;\n  adjustedTotal: number;\n  readonly selectedSizeText: UI.Toolbar.ToolbarText;\n  timestamps: number[];\n  sizes: number[];\n  max: number[];\n  ordinals: number[];\n  totalTime: number;\n  lastOrdinal: number;\n  readonly timelineOverview: HeapTimelineOverview;\n  constructor(profileHeader: SamplingHeapProfileHeader) {\n    super();\n\n    this.profileHeader = profileHeader;\n    this.profileType = profileHeader.profileType();\n    this.initialize(new NodeFormatter(this));\n    const profile = new SamplingHeapProfileModel(convertToSamplingHeapProfile(profileHeader));\n    this.adjustedTotal = profile.total;\n    this.setProfile(profile);\n\n    this.selectedSizeText = new UI.Toolbar.ToolbarText();\n\n    this.timestamps = [];\n    this.sizes = [];\n    this.max = [];\n    this.ordinals = [];\n    this.totalTime = 0;\n    this.lastOrdinal = 0;\n\n    this.timelineOverview = new HeapTimelineOverview();\n\n    if (Root.Runtime.experiments.isEnabled('samplingHeapProfilerTimeline')) {\n      this.timelineOverview.addEventListener(Events.IdsRangeChanged, this.onIdsRangeChanged.bind(this));\n      this.timelineOverview.show(this.element, this.element.firstChild);\n      this.timelineOverview.start();\n\n      this.profileType.addEventListener(SamplingHeapProfileType.Events.StatsUpdate, this.onStatsUpdate, this);\n      void this.profileType.once(ProfileEvents.ProfileComplete).then(() => {\n        this.profileType.removeEventListener(SamplingHeapProfileType.Events.StatsUpdate, this.onStatsUpdate, this);\n        this.timelineOverview.stop();\n        this.timelineOverview.updateGrid();\n      });\n    }\n  }\n\n  async toolbarItems(): Promise<UI.Toolbar.ToolbarItem[]> {\n    return [...await super.toolbarItems(), this.selectedSizeText];\n  }\n\n  onIdsRangeChanged(event: Common.EventTarget.EventTargetEvent<IdsRangeChangedEvent>): void {\n    const {minId, maxId} = event.data;\n    this.selectedSizeText.setText(\n        i18nString(UIStrings.selectedSizeS, {PH1: Platform.NumberUtilities.bytesToString(event.data.size)}));\n    this.setSelectionRange(minId, maxId);\n  }\n\n  setSelectionRange(minId: number, maxId: number): void {\n    const profileData = convertToSamplingHeapProfile((this.profileHeader as SamplingHeapProfileHeader));\n    const profile = new SamplingHeapProfileModel(profileData, minId, maxId);\n    this.adjustedTotal = profile.total;\n    this.setProfile(profile);\n  }\n\n  onStatsUpdate(event: Common.EventTarget.EventTargetEvent<Protocol.HeapProfiler.SamplingHeapProfile|null>): void {\n    const profile = event.data;\n\n    if (!this.totalTime) {\n      this.timestamps = [];\n      this.sizes = [];\n      this.max = [];\n      this.ordinals = [];\n      this.totalTime = 30000;\n      this.lastOrdinal = 0;\n    }\n\n    this.sizes.fill(0);\n    this.sizes.push(0);\n    this.timestamps.push(Date.now());\n    this.ordinals.push(this.lastOrdinal + 1);\n    for (const sample of profile?.samples ?? []) {\n      this.lastOrdinal = Math.max(this.lastOrdinal, sample.ordinal);\n      const bucket = Platform.ArrayUtilities.upperBound(\n                         this.ordinals, sample.ordinal, Platform.ArrayUtilities.DEFAULT_COMPARATOR) -\n          1;\n      this.sizes[bucket] += sample.size;\n    }\n    this.max.push(this.sizes[this.sizes.length - 1]);\n\n    const lastTimestamp = this.timestamps[this.timestamps.length - 1];\n    if (lastTimestamp - this.timestamps[0] > this.totalTime) {\n      this.totalTime *= 2;\n    }\n\n    const samples = ({\n      sizes: this.sizes,\n      max: this.max,\n      ids: this.ordinals,\n      timestamps: this.timestamps,\n      totalTime: this.totalTime,\n    } as Samples);\n\n    this.timelineOverview.setSamples(samples);\n  }\n\n  columnHeader(columnId: string): Common.UIString.LocalizedString {\n    switch (columnId) {\n      case 'self':\n        return i18nString(UIStrings.selfSizeBytes);\n      case 'total':\n        return i18nString(UIStrings.totalSizeBytes);\n    }\n    return Common.UIString.LocalizedEmptyString;\n  }\n\n  createFlameChartDataProvider(): ProfileFlameChartDataProvider {\n    return new HeapFlameChartDataProvider(\n        (this.profile() as SamplingHeapProfileModel), this.profileHeader.heapProfilerModel());\n  }\n}\n\nexport class SamplingHeapProfileTypeBase extends\n    Common.ObjectWrapper.eventMixin<SamplingHeapProfileType.EventTypes, typeof ProfileType>(ProfileType) {\n  recording: boolean;\n  clearedDuringRecording: boolean;\n\n  constructor(typeId: string, description: string) {\n    super(typeId, description);\n    this.recording = false;\n    this.clearedDuringRecording = false;\n  }\n\n  profileBeingRecorded(): SamplingHeapProfileHeader|null {\n    return super.profileBeingRecorded() as SamplingHeapProfileHeader | null;\n  }\n\n  typeName(): string {\n    return 'Heap';\n  }\n\n  fileExtension(): string {\n    return '.heapprofile';\n  }\n\n  get buttonTooltip(): Common.UIString.LocalizedString {\n    return this.recording ? i18nString(UIStrings.stopHeapProfiling) : i18nString(UIStrings.startHeapProfiling);\n  }\n\n  buttonClicked(): boolean {\n    if (this.recording) {\n      void this.stopRecordingProfile();\n    } else {\n      this.startRecordingProfile();\n    }\n    return this.recording;\n  }\n\n  startRecordingProfile(): void {\n    const heapProfilerModel = UI.Context.Context.instance().flavor(SDK.HeapProfilerModel.HeapProfilerModel);\n    if (this.profileBeingRecorded() || !heapProfilerModel) {\n      return;\n    }\n    const profileHeader = new SamplingHeapProfileHeader(heapProfilerModel, this);\n    this.setProfileBeingRecorded(profileHeader);\n    this.addProfile(profileHeader);\n    profileHeader.updateStatus(i18nString(UIStrings.recording));\n\n    const icon = UI.Icon.Icon.create('smallicon-warning');\n    UI.Tooltip.Tooltip.install(icon, i18nString(UIStrings.heapProfilerIsRecording));\n    UI.InspectorView.InspectorView.instance().setPanelIcon('heap_profiler', icon);\n\n    this.recording = true;\n    this.startSampling();\n  }\n\n  async stopRecordingProfile(): Promise<void> {\n    this.recording = false;\n    const recordedProfile = this.profileBeingRecorded();\n    if (!recordedProfile || !recordedProfile.heapProfilerModel()) {\n      return;\n    }\n\n    recordedProfile.updateStatus(i18nString(UIStrings.stopping));\n    const profile = await this.stopSampling();\n    if (recordedProfile) {\n      console.assert(profile !== undefined);\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      recordedProfile.setProtocolProfile((profile as any));\n      recordedProfile.updateStatus('');\n      this.setProfileBeingRecorded(null);\n    }\n    UI.InspectorView.InspectorView.instance().setPanelIcon('heap_profiler', null);\n\n    // If the data was cleared during the middle of the recording we no\n    // longer treat the profile as being completed. This means we avoid\n    // a change of view to the profile list.\n    const wasClearedDuringRecording = this.clearedDuringRecording;\n    this.clearedDuringRecording = false;\n    if (wasClearedDuringRecording) {\n      return;\n    }\n    this.dispatchEventToListeners(ProfileEvents.ProfileComplete, recordedProfile);\n  }\n\n  createProfileLoadedFromFile(title: string): ProfileHeader {\n    return new SamplingHeapProfileHeader(null, this, title);\n  }\n\n  profileBeingRecordedRemoved(): void {\n    this.clearedDuringRecording = true;\n    void this.stopRecordingProfile();\n  }\n\n  startSampling(): void {\n    throw 'Not implemented';\n  }\n\n  stopSampling(): Promise<Protocol.HeapProfiler.SamplingHeapProfile> {\n    throw 'Not implemented';\n  }\n}\n\nlet samplingHeapProfileTypeInstance: SamplingHeapProfileType;\n\nexport class SamplingHeapProfileType extends SamplingHeapProfileTypeBase {\n  updateTimer: number;\n  updateIntervalMs: number;\n  constructor() {\n    super(SamplingHeapProfileType.TypeId, i18nString(UIStrings.allocationSampling));\n    if (!samplingHeapProfileTypeInstance) {\n      samplingHeapProfileTypeInstance = this;\n    }\n\n    this.updateTimer = 0;\n    this.updateIntervalMs = 200;\n  }\n\n  static get instance(): SamplingHeapProfileType {\n    return samplingHeapProfileTypeInstance;\n  }\n\n  get treeItemTitle(): Common.UIString.LocalizedString {\n    return i18nString(UIStrings.samplingProfiles);\n  }\n\n  get description(): string {\n    // TODO(l10n): Do not concatenate localized strings.\n    const formattedDescription = [\n      i18nString(UIStrings.recordMemoryAllocations),\n      i18nString(UIStrings.thisProfileTypeHasMinimal),\n      i18nString(UIStrings.itProvidesGoodApproximation),\n    ];\n    return formattedDescription.join('\\n');\n  }\n\n  hasTemporaryView(): boolean {\n    return Root.Runtime.experiments.isEnabled('samplingHeapProfilerTimeline');\n  }\n\n  startSampling(): void {\n    const heapProfilerModel = this.obtainRecordingProfile();\n    if (!heapProfilerModel) {\n      return;\n    }\n\n    void heapProfilerModel.startSampling();\n    if (Root.Runtime.experiments.isEnabled('samplingHeapProfilerTimeline')) {\n      this.updateTimer = window.setTimeout(() => {\n        void this.updateStats();\n      }, this.updateIntervalMs);\n    }\n  }\n\n  obtainRecordingProfile(): SDK.HeapProfilerModel.HeapProfilerModel|null {\n    const recordingProfile = this.profileBeingRecorded();\n    if (recordingProfile) {\n      const heapProfilerModel = recordingProfile.heapProfilerModel();\n      return heapProfilerModel;\n    }\n    return null;\n  }\n\n  async stopSampling(): Promise<Protocol.HeapProfiler.SamplingHeapProfile> {\n    window.clearTimeout(this.updateTimer);\n    this.updateTimer = 0;\n    this.dispatchEventToListeners(SamplingHeapProfileType.Events.RecordingStopped);\n    const heapProfilerModel = this.obtainRecordingProfile();\n    if (!heapProfilerModel) {\n      throw new Error('No heap profiler model');\n    }\n\n    const samplingProfile = await heapProfilerModel.stopSampling();\n    if (!samplingProfile) {\n      throw new Error('No sampling profile found');\n    }\n    return samplingProfile;\n  }\n\n  async updateStats(): Promise<void> {\n    const heapProfilerModel = this.obtainRecordingProfile();\n    if (!heapProfilerModel) {\n      return;\n    }\n\n    const profile = await heapProfilerModel.getSamplingProfile();\n    if (!this.updateTimer) {\n      return;\n    }\n    this.dispatchEventToListeners(SamplingHeapProfileType.Events.StatsUpdate, profile);\n    this.updateTimer = window.setTimeout(() => {\n      void this.updateStats();\n    }, this.updateIntervalMs);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static readonly TypeId = 'SamplingHeap';\n}\n\nexport namespace SamplingHeapProfileType {\n  export const enum Events {\n    RecordingStopped = 'RecordingStopped',\n    StatsUpdate = 'StatsUpdate',\n  }\n\n  export type EventTypes = {\n    [Events.RecordingStopped]: void,\n    [Events.StatsUpdate]: Protocol.HeapProfiler.SamplingHeapProfile|null,\n  };\n}\n\nexport class SamplingHeapProfileHeader extends WritableProfileHeader {\n  readonly heapProfilerModelInternal: SDK.HeapProfilerModel.HeapProfilerModel|null;\n  protocolProfileInternal: {\n    head: {\n      callFrame: {\n        functionName: string,\n        scriptId: Protocol.Runtime.ScriptId,\n        url: string,\n        lineNumber: number,\n        columnNumber: number,\n      },\n      children: never[],\n      selfSize: number,\n      id: number,\n    },\n    samples: never[],\n    startTime: number,\n    endTime: number,\n    nodes: never[],\n  };\n  constructor(\n      heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null, type: SamplingHeapProfileTypeBase,\n      title?: string) {\n    super(\n        heapProfilerModel && heapProfilerModel.debuggerModel(), type,\n        title || i18nString(UIStrings.profileD, {PH1: type.nextProfileUid()}));\n    this.heapProfilerModelInternal = heapProfilerModel;\n    this.protocolProfileInternal = {\n      head: {\n        callFrame: {\n          functionName: '',\n          scriptId: '' as Protocol.Runtime.ScriptId,\n          url: '',\n          lineNumber: 0,\n          columnNumber: 0,\n        },\n        children: [],\n        selfSize: 0,\n        id: 0,\n      },\n      samples: [],\n      startTime: 0,\n      endTime: 0,\n      nodes: [],\n    };\n  }\n\n  createView(): HeapProfileView {\n    return new HeapProfileView(this);\n  }\n\n  protocolProfile(): Protocol.HeapProfiler.SamplingHeapProfile {\n    return this.protocolProfileInternal;\n  }\n\n  heapProfilerModel(): SDK.HeapProfilerModel.HeapProfilerModel|null {\n    return this.heapProfilerModelInternal;\n  }\n\n  override profileType(): SamplingHeapProfileTypeBase {\n    return super.profileType() as SamplingHeapProfileTypeBase;\n  }\n}\n\nexport class SamplingHeapProfileNode extends SDK.ProfileTreeModel.ProfileNode {\n  self: number;\n  constructor(node: Protocol.HeapProfiler.SamplingHeapProfileNode) {\n    const callFrame = node.callFrame || ({\n                        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n                        // @ts-expect-error\n                        functionName: node['functionName'],\n                        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n                        // @ts-expect-error\n                        scriptId: node['scriptId'],\n                        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n                        // @ts-expect-error\n                        url: node['url'],\n                        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n                        // @ts-expect-error\n                        lineNumber: node['lineNumber'] - 1,\n                        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n                        // @ts-expect-error\n                        columnNumber: node['columnNumber'] - 1,\n                      } as Protocol.Runtime.CallFrame);\n    super(callFrame);\n    this.self = node.selfSize;\n  }\n}\n\nexport class SamplingHeapProfileModel extends SDK.ProfileTreeModel.ProfileTreeModel {\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  modules: any;\n\n  constructor(profile: Protocol.HeapProfiler.SamplingHeapProfile, minOrdinal?: number, maxOrdinal?: number) {\n    super();\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.modules = (profile as any).modules || [];\n\n    let nodeIdToSizeMap: Map<number, number>|null = null;\n    if (minOrdinal || maxOrdinal) {\n      nodeIdToSizeMap = new Map<number, number>();\n      minOrdinal = minOrdinal || 0;\n      maxOrdinal = maxOrdinal || Infinity;\n      for (const sample of profile.samples) {\n        if (sample.ordinal < minOrdinal || sample.ordinal > maxOrdinal) {\n          continue;\n        }\n        const size = nodeIdToSizeMap.get(sample.nodeId) || 0;\n        nodeIdToSizeMap.set(sample.nodeId, size + sample.size);\n      }\n    }\n\n    this.initialize(translateProfileTree(profile.head));\n\n    function translateProfileTree(root: Protocol.HeapProfiler.SamplingHeapProfileNode): SamplingHeapProfileNode {\n      const resultRoot = new SamplingHeapProfileNode(root);\n      const sourceNodeStack = [root];\n      const targetNodeStack = [resultRoot];\n      while (sourceNodeStack.length) {\n        const sourceNode = (sourceNodeStack.pop() as Protocol.HeapProfiler.SamplingHeapProfileNode);\n        const targetNode = (targetNodeStack.pop() as SamplingHeapProfileNode);\n        targetNode.children = sourceNode.children.map(child => {\n          const targetChild = new SamplingHeapProfileNode(child);\n          if (nodeIdToSizeMap) {\n            targetChild.self = nodeIdToSizeMap.get(child.id) || 0;\n          }\n          return targetChild;\n        });\n        sourceNodeStack.push(...sourceNode.children);\n        targetNodeStack.push(...targetNode.children);\n      }\n      pruneEmptyBranches(resultRoot);\n      return resultRoot;\n    }\n\n    function pruneEmptyBranches(node: SDK.ProfileTreeModel.ProfileNode): boolean {\n      node.children = node.children.filter(pruneEmptyBranches);\n      return Boolean(node.children.length || node.self);\n    }\n  }\n}\n\nexport class NodeFormatter implements Formatter {\n  readonly profileView: HeapProfileView;\n  constructor(profileView: HeapProfileView) {\n    this.profileView = profileView;\n  }\n\n  formatValue(value: number): string {\n    return Platform.NumberUtilities.withThousandsSeparator(value);\n  }\n\n  formatValueAccessibleText(value: number): string {\n    return i18nString(UIStrings.sBytes, {PH1: value});\n  }\n\n  formatPercent(value: number, _node: ProfileDataGridNode): string {\n    return i18nString(UIStrings.formatPercent, {PH1: value.toFixed(2)});\n  }\n\n  linkifyNode(node: ProfileDataGridNode): Element|null {\n    const heapProfilerModel = this.profileView.profileHeader.heapProfilerModel();\n    const target = heapProfilerModel ? heapProfilerModel.target() : null;\n    const options = {\n      className: 'profile-node-file',\n      inlineFrameIndex: 0,\n    };\n    return this.profileView.linkifier().maybeLinkifyConsoleCallFrame(target, node.profileNode.callFrame, options);\n  }\n}\n\nexport class HeapFlameChartDataProvider extends ProfileFlameChartDataProvider {\n  readonly profile: SDK.ProfileTreeModel.ProfileTreeModel;\n  readonly heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null;\n  timelineDataInternal?: PerfUI.FlameChart.TimelineData;\n\n  constructor(\n      profile: SDK.ProfileTreeModel.ProfileTreeModel, heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null) {\n    super();\n    this.profile = profile;\n    this.heapProfilerModel = heapProfilerModel;\n  }\n\n  minimumBoundary(): number {\n    return 0;\n  }\n\n  totalTime(): number {\n    return this.profile.root.total;\n  }\n\n  entryHasDeoptReason(_entryIndex: number): boolean {\n    return false;\n  }\n\n  formatValue(value: number, _precision?: number): string {\n    return i18nString(UIStrings.skb, {PH1: Platform.NumberUtilities.withThousandsSeparator(value / 1e3)});\n  }\n\n  calculateTimelineData(): PerfUI.FlameChart.TimelineData {\n    function nodesCount(node: SDK.ProfileTreeModel.ProfileNode): number {\n      return node.children.reduce((count, node) => count + nodesCount(node), 1);\n    }\n    const count = nodesCount(this.profile.root);\n    const entryNodes: SDK.ProfileTreeModel.ProfileNode[] = new Array(count);\n    const entryLevels = new Uint16Array(count);\n    const entryTotalTimes = new Float32Array(count);\n    const entryStartTimes = new Float64Array(count);\n    let depth = 0;\n    let maxDepth = 0;\n    let position = 0;\n    let index = 0;\n\n    function addNode(node: SDK.ProfileTreeModel.ProfileNode): void {\n      const start = position;\n      entryNodes[index] = node;\n      entryLevels[index] = depth;\n      entryTotalTimes[index] = node.total;\n      entryStartTimes[index] = position;\n      ++index;\n      ++depth;\n      node.children.forEach(addNode);\n      --depth;\n      maxDepth = Math.max(maxDepth, depth);\n      position = start + node.total;\n    }\n    addNode(this.profile.root);\n\n    this.maxStackDepthInternal = maxDepth + 1;\n    this.entryNodes = entryNodes;\n    this.timelineDataInternal = new PerfUI.FlameChart.TimelineData(entryLevels, entryTotalTimes, entryStartTimes, null);\n\n    return this.timelineDataInternal;\n  }\n\n  prepareHighlightedEntryInfo(entryIndex: number): Element|null {\n    const node = this.entryNodes[entryIndex];\n    if (!node) {\n      return null;\n    }\n    const entryInfo: {\n      title: string,\n      value: string,\n    }[] = [];\n    function pushEntryInfoRow(title: string, value: string): void {\n      entryInfo.push({title: title, value: value});\n    }\n    pushEntryInfoRow(i18nString(UIStrings.name), UI.UIUtils.beautifyFunctionName(node.functionName));\n    pushEntryInfoRow(i18nString(UIStrings.selfSize), Platform.NumberUtilities.bytesToString(node.self));\n    pushEntryInfoRow(i18nString(UIStrings.totalSize), Platform.NumberUtilities.bytesToString(node.total));\n    const linkifier = new Components.Linkifier.Linkifier();\n    const link = linkifier.maybeLinkifyConsoleCallFrame(\n        this.heapProfilerModel ? this.heapProfilerModel.target() : null, node.callFrame);\n    if (link) {\n      pushEntryInfoRow(i18nString(UIStrings.url), (link.textContent as string));\n    }\n    linkifier.dispose();\n    return ProfileView.buildPopoverTable(entryInfo);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
