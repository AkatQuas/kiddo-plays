{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/profiler/HeapSnapshotProxy.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport type * as HeapSnapshotModel from '../../models/heap_snapshot_model/heap_snapshot_model.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type {ChildrenProvider} from './ChildrenProvider.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Heap Snapshot Proxy of a profiler tool\n  *@example {functionName} PH1\n  */\n  anErrorOccurredWhenACallToMethod: 'An error occurred when a call to method \\'\\'{PH1}\\'\\' was requested',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/HeapSnapshotProxy.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class HeapSnapshotWorkerProxy extends Common.ObjectWrapper.ObjectWrapper<HeapSnapshotWorkerProxy.EventTypes> {\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  readonly eventHandler: (arg0: string, arg1: any) => void;\n  nextObjectId: number;\n  nextCallId: number;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callbacks: Map<number, (arg0: any) => void>;\n  readonly previousCallbacks: Set<number>;\n  readonly worker: Common.Worker.WorkerWrapper;\n  interval?: number;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(eventHandler: (arg0: string, arg1: any) => void) {\n    super();\n    this.eventHandler = eventHandler;\n    this.nextObjectId = 1;\n    this.nextCallId = 1;\n    this.callbacks = new Map();\n    this.previousCallbacks = new Set();\n    // We use the legacy file here, as below we postMessage and expect certain objects to be\n    // defined on the global scope. Ideally we use some sort of import-export mechanism across\n    // worker boundaries, but that requires a partial rewrite of the heap_snapshot_worker.\n    this.worker = Common.Worker.WorkerWrapper.fromURL(\n        new URL('../../entrypoints/heap_snapshot_worker/heap_snapshot_worker-legacy.js', import.meta.url));\n    this.worker.onmessage = this.messageReceived.bind(this);\n  }\n\n  createLoader(profileUid: number, snapshotReceivedCallback: (arg0: HeapSnapshotProxy) => void):\n      HeapSnapshotLoaderProxy {\n    const objectId = this.nextObjectId++;\n    const proxy = new HeapSnapshotLoaderProxy(this, objectId, profileUid, snapshotReceivedCallback);\n    this.postMessage({\n      callId: this.nextCallId++,\n      disposition: 'create',\n      objectId: objectId,\n      methodName: 'HeapSnapshotWorker.HeapSnapshotLoader',\n    });\n    return proxy;\n  }\n\n  dispose(): void {\n    this.worker.terminate();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n\n  disposeObject(objectId: number): void {\n    this.postMessage({callId: this.nextCallId++, disposition: 'dispose', objectId: objectId});\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  evaluateForTest(script: string, callback: (arg0: any) => void): void {\n    const callId = this.nextCallId++;\n    this.callbacks.set(callId, callback);\n    this.postMessage({callId: callId, disposition: 'evaluateForTest', source: script});\n  }\n\n  callFactoryMethod<T>(\n      callback: ((...arg0: unknown[]) => void)|null, objectId: string, methodName: string,\n      proxyConstructor: new(...arg1: unknown[]) => T): Object|null {\n    const callId = this.nextCallId++;\n    const methodArguments = Array.prototype.slice.call(arguments, 4);\n    const newObjectId = this.nextObjectId++;\n\n    if (callback) {\n      this.callbacks.set(callId, remoteResult => {\n        callback(remoteResult ? new proxyConstructor(this, newObjectId) : null);\n      });\n      this.postMessage({\n        callId: callId,\n        disposition: 'factory',\n        objectId: objectId,\n        methodName: methodName,\n        methodArguments: methodArguments,\n        newObjectId: newObjectId,\n      });\n      return null;\n    }\n    this.postMessage({\n      callId: callId,\n      disposition: 'factory',\n      objectId: objectId,\n      methodName: methodName,\n      methodArguments: methodArguments,\n      newObjectId: newObjectId,\n    });\n    return new proxyConstructor(this, newObjectId);\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callMethod(callback: (arg0: any) => void, objectId: string, methodName: string): void {\n    const callId = this.nextCallId++;\n    const methodArguments = Array.prototype.slice.call(arguments, 3);\n    if (callback) {\n      this.callbacks.set(callId, callback);\n    }\n    this.postMessage({\n      callId: callId,\n      disposition: 'method',\n      objectId: objectId,\n      methodName: methodName,\n      methodArguments: methodArguments,\n    });\n  }\n\n  startCheckingForLongRunningCalls(): void {\n    if (this.interval) {\n      return;\n    }\n    this.checkLongRunningCalls();\n    this.interval = window.setInterval(this.checkLongRunningCalls.bind(this), 300);\n  }\n\n  checkLongRunningCalls(): void {\n    for (const callId of this.previousCallbacks) {\n      if (!this.callbacks.has(callId)) {\n        this.previousCallbacks.delete(callId);\n      }\n    }\n    const hasLongRunningCalls = Boolean(this.previousCallbacks.size);\n    this.dispatchEventToListeners(HeapSnapshotWorkerProxy.Events.Wait, hasLongRunningCalls);\n    for (const callId of this.callbacks.keys()) {\n      this.previousCallbacks.add(callId);\n    }\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  messageReceived(event: MessageEvent<any>): void {\n    const data = event.data;\n    if (data.eventName) {\n      if (this.eventHandler) {\n        this.eventHandler(data.eventName, data.data);\n      }\n      return;\n    }\n    if (data.error) {\n      if (data.errorMethodName) {\n        Common.Console.Console.instance().error(\n            i18nString(UIStrings.anErrorOccurredWhenACallToMethod, {PH1: data.errorMethodName}));\n      }\n      Common.Console.Console.instance().error(data['errorCallStack']);\n      this.callbacks.delete(data.callId);\n      return;\n    }\n    const callback = this.callbacks.get(data.callId);\n    if (!callback) {\n      return;\n    }\n    this.callbacks.delete(data.callId);\n    callback(data.result);\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  postMessage(message: any): void {\n    this.worker.postMessage(message);\n  }\n}\n\nexport namespace HeapSnapshotWorkerProxy {\n\n  export const enum Events {\n    Wait = 'Wait',\n  }\n\n  export type EventTypes = {\n    [Events.Wait]: boolean,\n  };\n}\n\nexport class HeapSnapshotProxyObject {\n  readonly worker: HeapSnapshotWorkerProxy;\n  readonly objectId: number;\n  constructor(worker: HeapSnapshotWorkerProxy, objectId: number) {\n    this.worker = worker;\n    this.objectId = objectId;\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callWorker(workerMethodName: string, args: any[]): any {\n    args.splice(1, 0, this.objectId);\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const worker = (this.worker as any)[workerMethodName];\n    if (!worker) {\n      throw new Error(`Could not find worker with name ${workerMethodName}.`);\n    }\n    return worker.apply(this.worker, args);\n  }\n\n  dispose(): void {\n    this.worker.disposeObject(this.objectId);\n  }\n\n  disposeWorker(): void {\n    this.worker.dispose();\n  }\n\n  callFactoryMethod<T>(\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      _callback: ((...arg0: any[]) => void)|null, _methodName: string, _proxyConstructor: new(...arg1: any[]) => T,\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/naming-convention\n      ..._var_args: any[]): T {\n    return this.callWorker('callFactoryMethod', Array.prototype.slice.call(arguments, 0));\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/naming-convention\n  callMethodPromise<T>(_methodName: string, ..._var_args: any[]): Promise<T> {\n    const args = Array.prototype.slice.call(arguments);\n    return new Promise(resolve => this.callWorker('callMethod', [resolve, ...args]));\n  }\n}\n\nexport class HeapSnapshotLoaderProxy extends HeapSnapshotProxyObject implements Common.StringOutputStream.OutputStream {\n  readonly profileUid: number;\n  readonly snapshotReceivedCallback: (arg0: HeapSnapshotProxy) => void;\n  constructor(\n      worker: HeapSnapshotWorkerProxy, objectId: number, profileUid: number,\n      snapshotReceivedCallback: (arg0: HeapSnapshotProxy) => void) {\n    super(worker, objectId);\n    this.profileUid = profileUid;\n    this.snapshotReceivedCallback = snapshotReceivedCallback;\n  }\n\n  async write(chunk: string): Promise<void> {\n    await this.callMethodPromise('write', chunk);\n  }\n\n  async close(): Promise<void> {\n    await this.callMethodPromise('close');\n    const snapshotProxy = await new Promise<HeapSnapshotProxy>(\n        resolve => this.callFactoryMethod(resolve, 'buildSnapshot', HeapSnapshotProxy));\n    this.dispose();\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // @ts-expect-error\n    snapshotProxy.setProfileUid(this.profileUid);\n    await snapshotProxy.updateStaticData();\n    this.snapshotReceivedCallback(snapshotProxy);\n  }\n}\n\nexport class HeapSnapshotProxy extends HeapSnapshotProxyObject {\n  staticData: HeapSnapshotModel.HeapSnapshotModel.StaticData|null;\n  profileUid?: string;\n\n  constructor(worker: HeapSnapshotWorkerProxy, objectId: number) {\n    super(worker, objectId);\n    this.staticData = null;\n  }\n\n  search(\n      searchConfig: HeapSnapshotModel.HeapSnapshotModel.SearchConfig,\n      filter: HeapSnapshotModel.HeapSnapshotModel.NodeFilter): Promise<number[]> {\n    return this.callMethodPromise('search', searchConfig, filter);\n  }\n\n  aggregatesWithFilter(filter: HeapSnapshotModel.HeapSnapshotModel.NodeFilter): Promise<{\n    [x: string]: HeapSnapshotModel.HeapSnapshotModel.Aggregate,\n  }> {\n    return this.callMethodPromise('aggregatesWithFilter', filter);\n  }\n\n  aggregatesForDiff(): Promise<{\n    [x: string]: HeapSnapshotModel.HeapSnapshotModel.AggregateForDiff,\n  }> {\n    return this.callMethodPromise('aggregatesForDiff');\n  }\n\n  calculateSnapshotDiff(baseSnapshotId: string, baseSnapshotAggregates: {\n    [x: string]: HeapSnapshotModel.HeapSnapshotModel.AggregateForDiff,\n  }): Promise<{\n    [x: string]: HeapSnapshotModel.HeapSnapshotModel.Diff,\n  }> {\n    return this.callMethodPromise('calculateSnapshotDiff', baseSnapshotId, baseSnapshotAggregates);\n  }\n\n  nodeClassName(snapshotObjectId: number): Promise<string|null> {\n    return this.callMethodPromise('nodeClassName', snapshotObjectId);\n  }\n\n  createEdgesProvider(nodeIndex: number): HeapSnapshotProviderProxy {\n    return this.callFactoryMethod(null, 'createEdgesProvider', HeapSnapshotProviderProxy, nodeIndex);\n  }\n\n  createRetainingEdgesProvider(nodeIndex: number): HeapSnapshotProviderProxy {\n    return this.callFactoryMethod(null, 'createRetainingEdgesProvider', HeapSnapshotProviderProxy, nodeIndex);\n  }\n\n  createAddedNodesProvider(baseSnapshotId: string, className: string): HeapSnapshotProviderProxy|null {\n    return this.callFactoryMethod(\n        null, 'createAddedNodesProvider', HeapSnapshotProviderProxy, baseSnapshotId, className);\n  }\n\n  createDeletedNodesProvider(nodeIndexes: number[]): HeapSnapshotProviderProxy|null {\n    return this.callFactoryMethod(null, 'createDeletedNodesProvider', HeapSnapshotProviderProxy, nodeIndexes);\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  createNodesProvider(filter: (arg0: any) => boolean): HeapSnapshotProviderProxy|null {\n    return this.callFactoryMethod(null, 'createNodesProvider', HeapSnapshotProviderProxy, filter);\n  }\n\n  createNodesProviderForClass(className: string, nodeFilter: HeapSnapshotModel.HeapSnapshotModel.NodeFilter):\n      HeapSnapshotProviderProxy|null {\n    return this.callFactoryMethod(\n        null, 'createNodesProviderForClass', HeapSnapshotProviderProxy, className, nodeFilter);\n  }\n\n  allocationTracesTops(): Promise<HeapSnapshotModel.HeapSnapshotModel.SerializedAllocationNode[]> {\n    return this.callMethodPromise('allocationTracesTops');\n  }\n\n  allocationNodeCallers(nodeId: number): Promise<HeapSnapshotModel.HeapSnapshotModel.AllocationNodeCallers> {\n    return this.callMethodPromise('allocationNodeCallers', nodeId);\n  }\n\n  allocationStack(nodeIndex: number): Promise<HeapSnapshotModel.HeapSnapshotModel.AllocationStackFrame[]|null> {\n    return this.callMethodPromise('allocationStack', nodeIndex);\n  }\n\n  dispose(): void {\n    throw new Error('Should never be called');\n  }\n\n  get nodeCount(): number {\n    if (!this.staticData) {\n      return 0;\n    }\n    return this.staticData.nodeCount;\n  }\n\n  get rootNodeIndex(): number {\n    if (!this.staticData) {\n      return 0;\n    }\n    return this.staticData.rootNodeIndex;\n  }\n\n  async updateStaticData(): Promise<void> {\n    this.staticData = await this.callMethodPromise('updateStaticData');\n  }\n\n  getStatistics(): Promise<HeapSnapshotModel.HeapSnapshotModel.Statistics> {\n    return this.callMethodPromise('getStatistics');\n  }\n\n  getLocation(nodeIndex: number): Promise<HeapSnapshotModel.HeapSnapshotModel.Location|null> {\n    return this.callMethodPromise('getLocation', nodeIndex);\n  }\n\n  getSamples(): Promise<HeapSnapshotModel.HeapSnapshotModel.Samples|null> {\n    return this.callMethodPromise('getSamples');\n  }\n\n  get totalSize(): number {\n    if (!this.staticData) {\n      return 0;\n    }\n    return this.staticData.totalSize;\n  }\n\n  get uid(): string|undefined {\n    return this.profileUid;\n  }\n\n  setProfileUid(profileUid: string): void {\n    this.profileUid = profileUid;\n  }\n\n  maxJSObjectId(): number {\n    if (!this.staticData) {\n      return 0;\n    }\n    return this.staticData.maxJSObjectId;\n  }\n}\n\nexport class HeapSnapshotProviderProxy extends HeapSnapshotProxyObject implements ChildrenProvider {\n  constructor(worker: HeapSnapshotWorkerProxy, objectId: number) {\n    super(worker, objectId);\n  }\n\n  nodePosition(snapshotObjectId: number): Promise<number> {\n    return this.callMethodPromise('nodePosition', snapshotObjectId);\n  }\n\n  isEmpty(): Promise<boolean> {\n    return this.callMethodPromise('isEmpty');\n  }\n\n  serializeItemsRange(startPosition: number, endPosition: number):\n      Promise<HeapSnapshotModel.HeapSnapshotModel.ItemsRange> {\n    return this.callMethodPromise('serializeItemsRange', startPosition, endPosition);\n  }\n\n  async sortAndRewind(comparator: HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig): Promise<void> {\n    await this.callMethodPromise('sortAndRewind', comparator);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
