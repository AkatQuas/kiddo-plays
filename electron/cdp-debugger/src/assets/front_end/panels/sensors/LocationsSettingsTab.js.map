{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/sensors/LocationsSettingsTab.ts"],
  "sourcesContent": ["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport locationsSettingsTabStyles from './locationsSettingsTab.css.js';\n\nlet locationsSettingsTabInstance: LocationsSettingsTab;\n\nconst UIStrings = {\n  /**\n  *@description Title in the Locations Settings Tab, where custom geographic locations that the user\n  *has entered are stored.\n  */\n  customLocations: 'Custom locations',\n  /**\n  *@description Label for the name of a geographic location that the user has entered.\n  */\n  locationName: 'Location name',\n  /**\n  *@description Abbreviation of latitude in Locations Settings Tab of the Device Toolbar\n  */\n  lat: 'Lat',\n  /**\n  *@description Abbreviation of longitude in Locations Settings Tab of the Device Toolbar\n  */\n  long: 'Long',\n  /**\n  *@description Text in Sensors View of the Device Toolbar\n  */\n  timezoneId: 'Timezone ID',\n  /**\n  *@description Label for text input for the locale of a particular location.\n  */\n  locale: 'Locale',\n  /**\n  *@description Label for text input for the latitude of a GPS position.\n  */\n  latitude: 'Latitude',\n  /**\n  *@description Label for text input for the longitude of a GPS position.\n  */\n  longitude: 'Longitude',\n  /**\n  *@description Error message in the Locations settings pane that declares the location name input must not be empty\n  */\n  locationNameCannotBeEmpty: 'Location name cannot be empty',\n  /**\n  *@description Error message in the Locations settings pane that declares the maximum length of the location name\n  *@example {50} PH1\n  */\n  locationNameMustBeLessThanS: 'Location name must be less than {PH1} characters',\n  /**\n  *@description Error message in the Locations settings pane that declares that the value for the latitude input must be a number\n  */\n  latitudeMustBeANumber: 'Latitude must be a number',\n  /**\n  *@description Error message in the Locations settings pane that declares the minimum value for the latitude input\n  *@example {-90} PH1\n  */\n  latitudeMustBeGreaterThanOrEqual: 'Latitude must be greater than or equal to {PH1}',\n  /**\n  *@description Error message in the Locations settings pane that declares the maximum value for the latitude input\n  *@example {90} PH1\n  */\n  latitudeMustBeLessThanOrEqualToS: 'Latitude must be less than or equal to {PH1}',\n  /**\n  *@description Error message in the Locations settings pane that declares that the value for the longitude input must be a number\n  */\n  longitudeMustBeANumber: 'Longitude must be a number',\n  /**\n  *@description Error message in the Locations settings pane that declares the minimum value for the longitude input\n  *@example {-180} PH1\n  */\n  longitudeMustBeGreaterThanOr: 'Longitude must be greater than or equal to {PH1}',\n  /**\n  *@description Error message in the Locations settings pane that declares the maximum value for the longitude input\n  *@example {180} PH1\n  */\n  longitudeMustBeLessThanOrEqualTo: 'Longitude must be less than or equal to {PH1}',\n  /**\n  *@description Error message in the Locations settings pane that declares timezone ID input invalid\n  */\n  timezoneIdMustContainAlphabetic: 'Timezone ID must contain alphabetic characters',\n  /**\n  *@description Error message in the Locations settings pane that declares locale input invalid\n  */\n  localeMustContainAlphabetic: 'Locale must contain alphabetic characters',\n  /**\n  *@description Text of add locations button in Locations Settings Tab of the Device Toolbar\n  */\n  addLocation: 'Add location...',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/sensors/LocationsSettingsTab.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class LocationsSettingsTab extends UI.Widget.VBox implements UI.ListWidget.Delegate<LocationDescription> {\n  private readonly list: UI.ListWidget.ListWidget<LocationDescription>;\n  private readonly customSetting: Common.Settings.Setting<LocationDescription[]>;\n  private editor?: UI.ListWidget.Editor<LocationDescription>;\n\n  private constructor() {\n    super(true);\n\n    this.contentElement.createChild('div', 'header').textContent = i18nString(UIStrings.customLocations);\n\n    const addButton = UI.UIUtils.createTextButton(\n        i18nString(UIStrings.addLocation), this.addButtonClicked.bind(this), 'add-locations-button');\n    this.contentElement.appendChild(addButton);\n\n    this.list = new UI.ListWidget.ListWidget(this);\n    this.list.element.classList.add('locations-list');\n    this.list.show(this.contentElement);\n    this.customSetting =\n        Common.Settings.Settings.instance().moduleSetting<LocationDescription[]>('emulation.locations');\n    const list =\n        this.customSetting.get().map(location => replaceLocationTitles(location, this.customSetting.defaultValue));\n\n    function replaceLocationTitles(\n        location: LocationDescription, defaultValues: LocationDescription[]): LocationDescription {\n      // This check is done for locations that might had been cached wrongly due to crbug.com/1171670.\n      // Each of the default values would have been stored without a title if the user had added a new location\n      // while the bug was present in the application. This means that getting the setting's default value with the `get`\n      // method would return the default locations without a title. To cope with this, the setting values are\n      // preemptively checked and corrected so that any default value mistakenly stored without a title is replaced\n      // with the corresponding declared value in the pre-registered setting.\n      if (!location.title) {\n        const replacement = defaultValues.find(\n            defaultLocation => defaultLocation.lat === location.lat && defaultLocation.long === location.long &&\n                defaultLocation.timezoneId === location.timezoneId && defaultLocation.locale === location.locale);\n        if (!replacement) {\n          console.error('Could not determine a location setting title');\n        } else {\n          return replacement;\n        }\n      }\n      return location;\n    }\n\n    this.customSetting.set(list);\n    this.customSetting.addChangeListener(this.locationsUpdated, this);\n\n    this.setDefaultFocusedElement(addButton);\n  }\n\n  static instance(): LocationsSettingsTab {\n    if (!locationsSettingsTabInstance) {\n      locationsSettingsTabInstance = new LocationsSettingsTab();\n    }\n\n    return locationsSettingsTabInstance;\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([locationsSettingsTabStyles]);\n    this.list.registerCSSFiles([locationsSettingsTabStyles]);\n    this.locationsUpdated();\n  }\n\n  private locationsUpdated(): void {\n    this.list.clear();\n\n    const conditions = this.customSetting.get();\n    for (const condition of conditions) {\n      this.list.appendItem(condition, true);\n    }\n\n    this.list.appendSeparator();\n  }\n\n  private addButtonClicked(): void {\n    this.list.addNewItem(this.customSetting.get().length, {title: '', lat: 0, long: 0, timezoneId: '', locale: ''});\n  }\n\n  renderItem(location: LocationDescription, _editable: boolean): Element {\n    const element = document.createElement('div');\n    element.classList.add('locations-list-item');\n    const title = element.createChild('div', 'locations-list-text locations-list-title');\n    const titleText = title.createChild('div', 'locations-list-title-text');\n    titleText.textContent = location.title;\n    UI.Tooltip.Tooltip.install(titleText, location.title);\n    element.createChild('div', 'locations-list-separator');\n    element.createChild('div', 'locations-list-text').textContent = String(location.lat);\n    element.createChild('div', 'locations-list-separator');\n    element.createChild('div', 'locations-list-text').textContent = String(location.long);\n    element.createChild('div', 'locations-list-separator');\n    element.createChild('div', 'locations-list-text').textContent = location.timezoneId;\n    element.createChild('div', 'locations-list-separator');\n    element.createChild('div', 'locations-list-text').textContent = location.locale;\n    return element;\n  }\n\n  removeItemRequested(item: LocationDescription, index: number): void {\n    const list = this.customSetting.get();\n    list.splice(index, 1);\n    this.customSetting.set(list);\n  }\n\n  commitEdit(location: LocationDescription, editor: UI.ListWidget.Editor<LocationDescription>, isNew: boolean): void {\n    location.title = editor.control('title').value.trim();\n    const lat = editor.control('lat').value.trim();\n    location.lat = lat ? parseFloat(lat) : 0;\n    const long = editor.control('long').value.trim();\n    location.long = long ? parseFloat(long) : 0;\n    const timezoneId = editor.control('timezoneId').value.trim();\n    location.timezoneId = timezoneId;\n    const locale = editor.control('locale').value.trim();\n    location.locale = locale;\n\n    const list = this.customSetting.get();\n    if (isNew) {\n      list.push(location);\n    }\n    this.customSetting.set(list);\n  }\n\n  beginEdit(location: LocationDescription): UI.ListWidget.Editor<LocationDescription> {\n    const editor = this.createEditor();\n    editor.control('title').value = location.title;\n    editor.control('lat').value = String(location.lat);\n    editor.control('long').value = String(location.long);\n    editor.control('timezoneId').value = location.timezoneId;\n    editor.control('locale').value = location.locale;\n    return editor;\n  }\n\n  private createEditor(): UI.ListWidget.Editor<LocationDescription> {\n    if (this.editor) {\n      return this.editor;\n    }\n\n    const editor = new UI.ListWidget.Editor<LocationDescription>();\n    this.editor = editor;\n    const content = editor.contentElement();\n\n    const titles = content.createChild('div', 'locations-edit-row');\n    titles.createChild('div', 'locations-list-text locations-list-title').textContent =\n        i18nString(UIStrings.locationName);\n    titles.createChild('div', 'locations-list-separator locations-list-separator-invisible');\n    titles.createChild('div', 'locations-list-text').textContent = i18nString(UIStrings.lat);\n    titles.createChild('div', 'locations-list-separator locations-list-separator-invisible');\n    titles.createChild('div', 'locations-list-text').textContent = i18nString(UIStrings.long);\n    titles.createChild('div', 'locations-list-separator locations-list-separator-invisible');\n    titles.createChild('div', 'locations-list-text').textContent = i18nString(UIStrings.timezoneId);\n    titles.createChild('div', 'locations-list-separator locations-list-separator-invisible');\n    titles.createChild('div', 'locations-list-text').textContent = i18nString(UIStrings.locale);\n\n    const fields = content.createChild('div', 'locations-edit-row');\n    fields.createChild('div', 'locations-list-text locations-list-title locations-input-container')\n        .appendChild(editor.createInput('title', 'text', i18nString(UIStrings.locationName), titleValidator));\n    fields.createChild('div', 'locations-list-separator locations-list-separator-invisible');\n\n    let cell = fields.createChild('div', 'locations-list-text locations-input-container');\n    cell.appendChild(editor.createInput('lat', 'text', i18nString(UIStrings.latitude), latValidator));\n    fields.createChild('div', 'locations-list-separator locations-list-separator-invisible');\n\n    cell = fields.createChild('div', 'locations-list-text locations-list-text-longitude locations-input-container');\n    cell.appendChild(editor.createInput('long', 'text', i18nString(UIStrings.longitude), longValidator));\n    fields.createChild('div', 'locations-list-separator locations-list-separator-invisible');\n\n    cell = fields.createChild('div', 'locations-list-text locations-input-container');\n    cell.appendChild(editor.createInput('timezoneId', 'text', i18nString(UIStrings.timezoneId), timezoneIdValidator));\n    fields.createChild('div', 'locations-list-separator locations-list-separator-invisible');\n\n    cell = fields.createChild('div', 'locations-list-text locations-input-container');\n    cell.appendChild(editor.createInput('locale', 'text', i18nString(UIStrings.locale), localeValidator));\n\n    return editor;\n\n    function titleValidator(\n        item: LocationDescription, index: number, input: UI.ListWidget.EditorControl): UI.ListWidget.ValidatorResult {\n      const maxLength = 50;\n      const value = input.value.trim();\n\n      let errorMessage;\n      if (!value.length) {\n        errorMessage = i18nString(UIStrings.locationNameCannotBeEmpty);\n      } else if (value.length > maxLength) {\n        errorMessage = i18nString(UIStrings.locationNameMustBeLessThanS, {PH1: maxLength});\n      }\n\n      if (errorMessage) {\n        return {valid: false, errorMessage};\n      }\n      return {valid: true, errorMessage: undefined};\n    }\n\n    function latValidator(\n        item: LocationDescription, index: number, input: UI.ListWidget.EditorControl): UI.ListWidget.ValidatorResult {\n      const minLat = -90;\n      const maxLat = 90;\n      const value = input.value.trim();\n      const parsedValue = Number(value);\n\n      if (!value) {\n        return {valid: true, errorMessage: undefined};\n      }\n\n      let errorMessage;\n      if (Number.isNaN(parsedValue)) {\n        errorMessage = i18nString(UIStrings.latitudeMustBeANumber);\n      } else if (parseFloat(value) < minLat) {\n        errorMessage = i18nString(UIStrings.latitudeMustBeGreaterThanOrEqual, {PH1: minLat});\n      } else if (parseFloat(value) > maxLat) {\n        errorMessage = i18nString(UIStrings.latitudeMustBeLessThanOrEqualToS, {PH1: maxLat});\n      }\n\n      if (errorMessage) {\n        return {valid: false, errorMessage};\n      }\n      return {valid: true, errorMessage: undefined};\n    }\n\n    function longValidator(\n        item: LocationDescription, index: number, input: UI.ListWidget.EditorControl): UI.ListWidget.ValidatorResult {\n      const minLong = -180;\n      const maxLong = 180;\n      const value = input.value.trim();\n      const parsedValue = Number(value);\n\n      if (!value) {\n        return {valid: true, errorMessage: undefined};\n      }\n\n      let errorMessage;\n      if (Number.isNaN(parsedValue)) {\n        errorMessage = i18nString(UIStrings.longitudeMustBeANumber);\n      } else if (parseFloat(value) < minLong) {\n        errorMessage = i18nString(UIStrings.longitudeMustBeGreaterThanOr, {PH1: minLong});\n      } else if (parseFloat(value) > maxLong) {\n        errorMessage = i18nString(UIStrings.longitudeMustBeLessThanOrEqualTo, {PH1: maxLong});\n      }\n\n      if (errorMessage) {\n        return {valid: false, errorMessage};\n      }\n      return {valid: true, errorMessage: undefined};\n    }\n\n    function timezoneIdValidator(\n        item: LocationDescription, index: number, input: UI.ListWidget.EditorControl): UI.ListWidget.ValidatorResult {\n      const value = input.value.trim();\n      // Chromium uses ICU's timezone implementation, which is very\n      // liberal in what it accepts. ICU does not simply use an allowlist\n      // but instead tries to make sense of the input, even for\n      // weird-looking timezone IDs. There's not much point in validating\n      // the input other than checking if it contains at least one\n      // alphabetic character. The empty string resets the override,\n      // and is accepted as well.\n      if (value === '' || /[a-zA-Z]/.test(value)) {\n        return {valid: true, errorMessage: undefined};\n      }\n      const errorMessage = i18nString(UIStrings.timezoneIdMustContainAlphabetic);\n      return {valid: false, errorMessage};\n    }\n\n    function localeValidator(\n        item: LocationDescription, index: number, input: UI.ListWidget.EditorControl): UI.ListWidget.ValidatorResult {\n      const value = input.value.trim();\n      // Similarly to timezone IDs, there's not much point in validating\n      // input locales other than checking if it contains at least two\n      // alphabetic characters.\n      // https://unicode.org/reports/tr35/#Unicode_language_identifier\n      // The empty string resets the override, and is accepted as\n      // well.\n      if (value === '' || /[a-zA-Z]{2}/.test(value)) {\n        return {valid: true, errorMessage: undefined};\n      }\n      const errorMessage = i18nString(UIStrings.localeMustContainAlphabetic);\n      return {valid: false, errorMessage};\n    }\n  }\n}\nexport interface LocationDescription {\n  title: string;\n  lat: number;\n  long: number;\n  timezoneId: string;\n  locale: string;\n}\n"],
  "mappings": "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",
  "names": []
}
