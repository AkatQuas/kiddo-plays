{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/sensors/sensors-meta.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type * as Sensors from './sensors.js';\n\nimport * as i18n from '../../core/i18n/i18n.js';\nconst UIStrings = {\n  /**\n  * @description Title of the Sensors tool. The sensors tool contains GPS, orientation sensors, touch\n  * settings, etc.\n  */\n  sensors: 'Sensors',\n  /**\n  *@description A tag of Sensors tool that can be searched in the command menu\n  */\n  geolocation: 'geolocation',\n  /**\n  *@description A tag of Sensors tool that can be searched in the command menu\n  */\n  timezones: 'timezones',\n  /**\n  *@description Text in Sensors View of the Device Toolbar\n  */\n  locale: 'locale',\n  /**\n  *@description A tag of Sensors tool that can be searched in the command menu\n  */\n  locales: 'locales',\n  /**\n  *@description A tag of Sensors tool that can be searched in the command menu\n  */\n  accelerometer: 'accelerometer',\n  /**\n  * @description A tag of Sensors tool that can be searched in the command menu. Refers to the\n  * orientation of a device (e.g. phone) in 3D space, e.g. tilted right/left.\n  */\n  deviceOrientation: 'device orientation',\n  /**\n  *@description Title of Locations settings. Refers to geographic locations for GPS.\n  */\n  locations: 'Locations',\n  /**\n  * @description Text for the touch type to simulate on a device. Refers to touch input as opposed to\n  * mouse input.\n  */\n  touch: 'Touch',\n  /**\n  *@description Text in Sensors View of the Device Toolbar. Refers to device-based touch input,\n  *which means the input type will be 'touch' only if the device normally has touch input e.g. a\n  *phone or tablet.\n  */\n  devicebased: 'Device-based',\n  /**\n  *@description Text in Sensors View of the Device Toolbar. Means that touch input will be forced\n  *on, even if the device type e.g. desktop computer does not normally have touch input.\n  */\n  forceEnabled: 'Force enabled',\n  /**\n  *@description Title of a section option in Sensors tab for idle emulation. This is a command, to\n  *emulate the state of the 'Idle Detector'.\n  */\n  emulateIdleDetectorState: 'Emulate Idle Detector state',\n  /**\n  *@description Title of an option in Sensors tab idle emulation drop-down. Turns off emulation of idle state.\n  */\n  noIdleEmulation: 'No idle emulation',\n  /**\n  *@description Title of an option in Sensors tab idle emulation drop-down.\n  */\n  userActiveScreenUnlocked: 'User active, screen unlocked',\n  /**\n  *@description Title of an option in Sensors tab idle emulation drop-down.\n  */\n  userActiveScreenLocked: 'User active, screen locked',\n  /**\n  *@description Title of an option in Sensors tab idle emulation drop-down.\n  */\n  userIdleScreenUnlocked: 'User idle, screen unlocked',\n  /**\n  *@description Title of an option in Sensors tab idle emulation drop-down.\n  */\n  userIdleScreenLocked: 'User idle, screen locked',\n  /**\n  * @description Command that opens the Sensors view/tool. The sensors tool contains GPS,\n  * orientation sensors, touch settings, etc.\n  */\n  showSensors: 'Show Sensors',\n  /**\n  *@description Command that shows geographic locations.\n  */\n  showLocations: 'Show Locations',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/sensors/sensors-meta.ts', UIStrings);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nlet loadedSensorsModule: (typeof Sensors|undefined);\n\nasync function loadEmulationModule(): Promise<typeof Sensors> {\n  if (!loadedSensorsModule) {\n    loadedSensorsModule = await import('./sensors.js');\n  }\n  return loadedSensorsModule;\n}\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.DRAWER_VIEW,\n  commandPrompt: i18nLazyString(UIStrings.showSensors),\n  title: i18nLazyString(UIStrings.sensors),\n  id: 'sensors',\n  persistence: UI.ViewManager.ViewPersistence.CLOSEABLE,\n  order: 100,\n  async loadView() {\n    const Sensors = await loadEmulationModule();\n    return Sensors.SensorsView.SensorsView.instance();\n  },\n  tags: [\n    i18nLazyString(UIStrings.geolocation),\n    i18nLazyString(UIStrings.timezones),\n    i18nLazyString(UIStrings.locale),\n    i18nLazyString(UIStrings.locales),\n    i18nLazyString(UIStrings.accelerometer),\n    i18nLazyString(UIStrings.deviceOrientation),\n  ],\n});\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.SETTINGS_VIEW,\n  id: 'emulation-locations',\n  commandPrompt: i18nLazyString(UIStrings.showLocations),\n  title: i18nLazyString(UIStrings.locations),\n  order: 40,\n  async loadView() {\n    const Sensors = await loadEmulationModule();\n    return Sensors.LocationsSettingsTab.LocationsSettingsTab.instance();\n  },\n  settings: [\n    'emulation.locations',\n  ],\n});\n\nUI.ActionRegistration.registerActionExtension({\n  actionId: 'emulation.show-sensors',\n  category: UI.ActionRegistration.ActionCategory.SENSORS,\n  async loadActionDelegate() {\n    const Sensors = await loadEmulationModule();\n    return Sensors.SensorsView.ShowActionDelegate.instance();\n  },\n  title: i18nLazyString(UIStrings.sensors),\n});\n\nCommon.Settings.registerSettingExtension({\n  storageType: Common.Settings.SettingStorageType.Synced,\n  settingName: 'emulation.locations',\n  settingType: Common.Settings.SettingType.ARRAY,\n  // TODO(crbug.com/1136655): http://crrev.com/c/2666426 regressed localization of city titles.\n  // These titles should be localized since they are displayed to users.\n  defaultValue: [\n    {\n      title: 'Berlin',\n      lat: 52.520007,\n      long: 13.404954,\n      timezoneId: 'Europe/Berlin',\n      locale: 'de-DE',\n    },\n    {\n      title: 'London',\n      lat: 51.507351,\n      long: -0.127758,\n      timezoneId: 'Europe/London',\n      locale: 'en-GB',\n    },\n    {\n      title: 'Moscow',\n      lat: 55.755826,\n      long: 37.6173,\n      timezoneId: 'Europe/Moscow',\n      locale: 'ru-RU',\n    },\n    {\n      title: 'Mountain View',\n      lat: 37.386052,\n      long: -122.083851,\n      timezoneId: 'America/Los_Angeles',\n      locale: 'en-US',\n    },\n    {\n      title: 'Mumbai',\n      lat: 19.075984,\n      long: 72.877656,\n      timezoneId: 'Asia/Kolkata',\n      locale: 'mr-IN',\n    },\n    {\n      title: 'San Francisco',\n      lat: 37.774929,\n      long: -122.419416,\n      timezoneId: 'America/Los_Angeles',\n      locale: 'en-US',\n    },\n    {\n      title: 'Shanghai',\n      lat: 31.230416,\n      long: 121.473701,\n      timezoneId: 'Asia/Shanghai',\n      locale: 'zh-Hans-CN',\n    },\n    {\n      title: 'S\u00E3o Paulo',\n      lat: -23.55052,\n      long: -46.633309,\n      timezoneId: 'America/Sao_Paulo',\n      locale: 'pt-BR',\n    },\n    {\n      title: 'Tokyo',\n      lat: 35.689487,\n      long: 139.691706,\n      timezoneId: 'Asia/Tokyo',\n      locale: 'ja-JP',\n    },\n  ],\n});\n\nCommon.Settings.registerSettingExtension({\n  title: i18nLazyString(UIStrings.touch),\n  reloadRequired: true,\n  settingName: 'emulation.touch',\n  settingType: Common.Settings.SettingType.ENUM,\n  defaultValue: 'none',\n  options: [\n    {\n      value: 'none',\n      title: i18nLazyString(UIStrings.devicebased),\n      text: i18nLazyString(UIStrings.devicebased),\n    },\n    {\n      value: 'force',\n      title: i18nLazyString(UIStrings.forceEnabled),\n      text: i18nLazyString(UIStrings.forceEnabled),\n    },\n  ],\n});\n\nCommon.Settings.registerSettingExtension({\n  title: i18nLazyString(UIStrings.emulateIdleDetectorState),\n  settingName: 'emulation.idleDetection',\n  settingType: Common.Settings.SettingType.ENUM,\n  defaultValue: 'none',\n  options: [\n    {\n      value: 'none',\n      title: i18nLazyString(UIStrings.noIdleEmulation),\n      text: i18nLazyString(UIStrings.noIdleEmulation),\n    },\n    {\n      value: '{\\\"isUserActive\\\":true,\\\"isScreenUnlocked\\\":true}',\n      title: i18nLazyString(UIStrings.userActiveScreenUnlocked),\n      text: i18nLazyString(UIStrings.userActiveScreenUnlocked),\n    },\n    {\n      value: '{\\\"isUserActive\\\":true,\\\"isScreenUnlocked\\\":false}',\n      title: i18nLazyString(UIStrings.userActiveScreenLocked),\n      text: i18nLazyString(UIStrings.userActiveScreenLocked),\n    },\n    {\n      value: '{\\\"isUserActive\\\":false,\\\"isScreenUnlocked\\\":true}',\n      title: i18nLazyString(UIStrings.userIdleScreenUnlocked),\n      text: i18nLazyString(UIStrings.userIdleScreenUnlocked),\n    },\n    {\n      value: '{\\\"isUserActive\\\":false,\\\"isScreenUnlocked\\\":false}',\n      title: i18nLazyString(UIStrings.userIdleScreenLocked),\n      text: i18nLazyString(UIStrings.userIdleScreenLocked),\n    },\n  ],\n});\n"],
  "mappings": "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",
  "names": []
}
