{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/media/MainView.ts"],
  "sourcesContent": ["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport type {PlayerEvent} from './MediaModel.js';\nimport {MediaModel, Events} from './MediaModel.js';\nimport {PlayerDetailView} from './PlayerDetailView.js';\nimport {PlayerListView} from './PlayerListView.js';\n\nexport interface TriggerHandler {\n  onProperty(property: Protocol.Media.PlayerProperty): void;\n  onError(error: Protocol.Media.PlayerError): void;\n  onMessage(message: Protocol.Media.PlayerMessage): void;\n  onEvent(event: PlayerEvent): void;\n}\n\nexport interface TriggerDispatcher {\n  onProperty(playerID: string, property: Protocol.Media.PlayerProperty): void;\n  onError(playerID: string, error: Protocol.Media.PlayerError): void;\n  onMessage(playerID: string, message: Protocol.Media.PlayerMessage): void;\n  onEvent(playerID: string, event: PlayerEvent): void;\n}\n\nclass PlayerDataCollection implements TriggerHandler {\n  private readonly properties: Map<string, string>;\n  private readonly messages: Protocol.Media.PlayerMessage[];\n  private readonly events: PlayerEvent[];\n  private readonly errors: Protocol.Media.PlayerError[];\n\n  constructor() {\n    this.properties = new Map();\n    this.messages = [];\n    this.events = [];\n    this.errors = [];\n  }\n\n  onProperty(property: Protocol.Media.PlayerProperty): void {\n    this.properties.set(property.name, property.value);\n  }\n\n  onError(error: Protocol.Media.PlayerError): void {\n    this.errors.push(error);\n  }\n\n  onMessage(message: Protocol.Media.PlayerMessage): void {\n    this.messages.push(message);\n  }\n\n  onEvent(event: PlayerEvent): void {\n    this.events.push(event);\n  }\n\n  export(): {\n    properties: Map<string, string>,\n    messages: Protocol.Media.PlayerMessage[],\n    events: PlayerEvent[],\n    errors: Protocol.Media.PlayerError[],\n  } {\n    return {'properties': this.properties, 'messages': this.messages, 'events': this.events, 'errors': this.errors};\n  }\n}\n\nclass PlayerDataDownloadManager implements TriggerDispatcher {\n  private readonly playerDataCollection: Map<string, PlayerDataCollection>;\n  constructor() {\n    this.playerDataCollection = new Map();\n  }\n\n  addPlayer(playerID: string): void {\n    this.playerDataCollection.set(playerID, new PlayerDataCollection());\n  }\n\n  onProperty(playerID: string, property: Protocol.Media.PlayerProperty): void {\n    const playerProperty = this.playerDataCollection.get(playerID);\n    if (!playerProperty) {\n      return;\n    }\n\n    playerProperty.onProperty(property);\n  }\n\n  onError(playerID: string, error: Protocol.Media.PlayerError): void {\n    const playerProperty = this.playerDataCollection.get(playerID);\n    if (!playerProperty) {\n      return;\n    }\n\n    playerProperty.onError(error);\n  }\n\n  onMessage(playerID: string, message: Protocol.Media.PlayerMessage): void {\n    const playerProperty = this.playerDataCollection.get(playerID);\n    if (!playerProperty) {\n      return;\n    }\n\n    playerProperty.onMessage(message);\n  }\n\n  onEvent(playerID: string, event: PlayerEvent): void {\n    const playerProperty = this.playerDataCollection.get(playerID);\n    if (!playerProperty) {\n      return;\n    }\n\n    playerProperty.onEvent(event);\n  }\n\n  exportPlayerData(playerID: string): {\n    properties: Map<string, string>,\n    messages: Protocol.Media.PlayerMessage[],\n    events: PlayerEvent[],\n    errors: Protocol.Media.PlayerError[],\n  } {\n    const playerProperty = this.playerDataCollection.get(playerID);\n    if (!playerProperty) {\n      throw new Error('Unable to find player');\n    }\n\n    return playerProperty.export();\n  }\n\n  deletePlayer(playerID: string): void {\n    this.playerDataCollection.delete(playerID);\n  }\n}\n\nlet mainViewInstance: MainView;\nexport class MainView extends UI.Panel.PanelWithSidebar implements SDK.TargetManager.SDKModelObserver<MediaModel> {\n  private detailPanels: Map<string, PlayerDetailView>;\n  private deletedPlayers: Set<string>;\n  private readonly downloadStore: PlayerDataDownloadManager;\n  private readonly sidebar: PlayerListView;\n\n  constructor() {\n    super('Media');\n    this.detailPanels = new Map();\n\n    this.deletedPlayers = new Set();\n\n    this.downloadStore = new PlayerDataDownloadManager();\n\n    this.sidebar = new PlayerListView(this);\n    this.sidebar.show(this.panelSidebarElement());\n\n    SDK.TargetManager.TargetManager.instance().observeModels(MediaModel, this);\n  }\n\n  static instance(opts = {forceNew: null}): MainView {\n    const {forceNew} = opts;\n    if (!mainViewInstance || forceNew) {\n      mainViewInstance = new MainView();\n    }\n\n    return mainViewInstance;\n  }\n\n  renderMainPanel(playerID: string): void {\n    if (!this.detailPanels.has(playerID)) {\n      return;\n    }\n    const mainWidget = this.splitWidget().mainWidget();\n    if (mainWidget) {\n      mainWidget.detachChildWidgets();\n    }\n    this.detailPanels.get(playerID)?.show(this.mainElement());\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    for (const model of SDK.TargetManager.TargetManager.instance().models(MediaModel)) {\n      this.addEventListeners(model);\n    }\n  }\n\n  willHide(): void {\n    for (const model of SDK.TargetManager.TargetManager.instance().models(MediaModel)) {\n      this.removeEventListeners(model);\n    }\n  }\n\n  modelAdded(model: MediaModel): void {\n    if (this.isShowing()) {\n      this.addEventListeners(model);\n    }\n  }\n\n  modelRemoved(model: MediaModel): void {\n    this.removeEventListeners(model);\n  }\n\n  private addEventListeners(mediaModel: MediaModel): void {\n    mediaModel.ensureEnabled();\n    mediaModel.addEventListener(Events.PlayerPropertiesChanged, this.propertiesChanged, this);\n    mediaModel.addEventListener(Events.PlayerEventsAdded, this.eventsAdded, this);\n    mediaModel.addEventListener(Events.PlayerMessagesLogged, this.messagesLogged, this);\n    mediaModel.addEventListener(Events.PlayerErrorsRaised, this.errorsRaised, this);\n    mediaModel.addEventListener(Events.PlayersCreated, this.playersCreated, this);\n  }\n\n  private removeEventListeners(mediaModel: MediaModel): void {\n    mediaModel.removeEventListener(Events.PlayerPropertiesChanged, this.propertiesChanged, this);\n    mediaModel.removeEventListener(Events.PlayerEventsAdded, this.eventsAdded, this);\n    mediaModel.removeEventListener(Events.PlayerMessagesLogged, this.messagesLogged, this);\n    mediaModel.removeEventListener(Events.PlayerErrorsRaised, this.errorsRaised, this);\n    mediaModel.removeEventListener(Events.PlayersCreated, this.playersCreated, this);\n  }\n\n  private onPlayerCreated(playerID: string): void {\n    this.sidebar.addMediaElementItem(playerID);\n    this.detailPanels.set(playerID, new PlayerDetailView());\n    this.downloadStore.addPlayer(playerID);\n  }\n\n  private propertiesChanged(event: Common.EventTarget.EventTargetEvent<Protocol.Media.PlayerPropertiesChangedEvent>):\n      void {\n    for (const property of event.data.properties) {\n      this.onProperty(event.data.playerId, property);\n    }\n  }\n\n  private eventsAdded(event: Common.EventTarget.EventTargetEvent<Protocol.Media.PlayerEventsAddedEvent>): void {\n    for (const ev of event.data.events) {\n      // TODO(crbug.com/1228674): The conversion from Protocol.Media.PlayerEvent to PlayerEvent happens implicitly\n      // by augmenting the protocol type with some additional property in various places. This needs to be cleaned up\n      // in a conversion function that takes the protocol type and produces the PlayerEvent type.\n      this.onEvent(event.data.playerId, ev as PlayerEvent);\n    }\n  }\n\n  private messagesLogged(event: Common.EventTarget.EventTargetEvent<Protocol.Media.PlayerMessagesLoggedEvent>): void {\n    for (const message of event.data.messages) {\n      this.onMessage(event.data.playerId, message);\n    }\n  }\n\n  private errorsRaised(event: Common.EventTarget.EventTargetEvent<Protocol.Media.PlayerErrorsRaisedEvent>): void {\n    for (const error of event.data.errors) {\n      this.onError(event.data.playerId, error);\n    }\n  }\n\n  private shouldPropagate(playerID: string): boolean {\n    return !this.deletedPlayers.has(playerID) && this.detailPanels.has(playerID);\n  }\n\n  onProperty(playerID: string, property: Protocol.Media.PlayerProperty): void {\n    if (!this.shouldPropagate(playerID)) {\n      return;\n    }\n    this.sidebar.onProperty(playerID, property);\n    this.downloadStore.onProperty(playerID, property);\n    this.detailPanels.get(playerID)?.onProperty(property);\n  }\n\n  onError(playerID: string, error: Protocol.Media.PlayerError): void {\n    if (!this.shouldPropagate(playerID)) {\n      return;\n    }\n    this.sidebar.onError(playerID, error);\n    this.downloadStore.onError(playerID, error);\n    this.detailPanels.get(playerID)?.onError(error);\n  }\n\n  onMessage(playerID: string, message: Protocol.Media.PlayerMessage): void {\n    if (!this.shouldPropagate(playerID)) {\n      return;\n    }\n    this.sidebar.onMessage(playerID, message);\n    this.downloadStore.onMessage(playerID, message);\n    this.detailPanels.get(playerID)?.onMessage(message);\n  }\n\n  onEvent(playerID: string, event: PlayerEvent): void {\n    if (!this.shouldPropagate(playerID)) {\n      return;\n    }\n    this.sidebar.onEvent(playerID, event);\n    this.downloadStore.onEvent(playerID, event);\n    this.detailPanels.get(playerID)?.onEvent(event);\n  }\n\n  private playersCreated(event: Common.EventTarget.EventTargetEvent<Protocol.Media.PlayerId[]>): void {\n    for (const playerID of event.data) {\n      this.onPlayerCreated(playerID);\n    }\n  }\n\n  markPlayerForDeletion(playerID: string): void {\n    // TODO(tmathmeyer): send this to chromium to save the storage space there too.\n    this.deletedPlayers.add(playerID);\n    this.detailPanels.delete(playerID);\n    this.sidebar.deletePlayer(playerID);\n    this.downloadStore.deletePlayer(playerID);\n  }\n\n  markOtherPlayersForDeletion(playerID: string): void {\n    for (const keyID of this.detailPanels.keys()) {\n      if (keyID !== playerID) {\n        this.markPlayerForDeletion(keyID);\n      }\n    }\n  }\n\n  exportPlayerData(playerID: string): void {\n    const dump = this.downloadStore.exportPlayerData(playerID);\n    const uriContent = 'data:application/octet-stream,' + encodeURIComponent(JSON.stringify(dump, null, 2));\n    const anchor = document.createElement('a');\n    anchor.href = uriContent;\n    anchor.download = playerID + '.json';\n    anchor.click();\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
