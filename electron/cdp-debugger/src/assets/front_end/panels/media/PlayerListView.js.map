{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/media/PlayerListView.ts"],
  "sourcesContent": ["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport playerListViewStyles from './playerListView.css.js';\n\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport type {MainView, TriggerDispatcher} from './MainView.js';\nimport type {PlayerEvent} from './MediaModel.js';\nimport {PlayerPropertyKeys} from './PlayerPropertiesView.js';\n\nconst UIStrings = {\n  /**\n  *@description A right-click context menu entry which when clicked causes the menu entry for that player to be removed.\n  */\n  hidePlayer: 'Hide player',\n  /**\n  *@description A right-click context menu entry which should keep the element selected, while hiding all other entries.\n  */\n  hideAllOthers: 'Hide all others',\n  /**\n  *@description Context menu entry which downloads the json dump when clicked\n  */\n  savePlayerInfo: 'Save player info',\n  /**\n  *@description Side-panel entry title text for the players section.\n  */\n  players: 'Players',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/media/PlayerListView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport interface PlayerStatus {\n  playerTitle: string;\n  playerID: string;\n  exists: boolean;\n  playing: boolean;\n  titleEdited: boolean;\n}\nexport interface PlayerStatusMapElement {\n  playerStatus: PlayerStatus;\n  playerTitleElement: HTMLElement|null;\n}\n\nexport class PlayerListView extends UI.Widget.VBox implements TriggerDispatcher {\n  private readonly playerEntryFragments: Map<string, UI.Fragment.Fragment>;\n  private readonly playerEntriesWithHostnameFrameTitle: Set<string>;\n  private readonly mainContainer: MainView;\n  private currentlySelectedEntry: Element|null;\n\n  constructor(mainContainer: MainView) {\n    super(true);\n\n    this.playerEntryFragments = new Map();\n    this.playerEntriesWithHostnameFrameTitle = new Set();\n\n    // Container where new panels can be added based on clicks.\n    this.mainContainer = mainContainer;\n\n    this.currentlySelectedEntry = null;\n    this.contentElement.createChild('div', 'player-entry-header').textContent = i18nString(UIStrings.players);\n  }\n\n  private createPlayerListEntry(playerID: string): UI.Fragment.Fragment {\n    const entry = UI.Fragment.Fragment.build`\n    <div class=\"player-entry-row hbox\">\n    <div class=\"player-entry-status-icon vbox\">\n    <div $=\"icon\" class=\"player-entry-status-icon-centering\"></div>\n    </div>\n    <div $=\"frame-title\" class=\"player-entry-frame-title\">FrameTitle</div>\n    <div $=\"player-title\" class=\"player-entry-player-title\">PlayerTitle</div>\n    </div>\n    `;\n    const element = entry.element();\n\n    element.addEventListener('click', this.selectPlayer.bind(this, playerID, element));\n    element.addEventListener('contextmenu', this.rightClickPlayer.bind(this, playerID));\n\n    entry.$('icon').appendChild(UI.Icon.Icon.create('largeicon-pause-animation', 'media-player'));\n    return entry;\n  }\n\n  private selectPlayer(playerID: string, element: Element): void {\n    this.mainContainer.renderMainPanel(playerID);\n    if (this.currentlySelectedEntry !== null) {\n      this.currentlySelectedEntry.classList.remove('selected');\n      this.currentlySelectedEntry.classList.remove('force-white-icons');\n    }\n    element.classList.add('selected');\n    element.classList.add('force-white-icons');\n    this.currentlySelectedEntry = element;\n  }\n\n  private rightClickPlayer(playerID: string, event: Event): boolean {\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    contextMenu.headerSection().appendItem(\n        i18nString(UIStrings.hidePlayer), this.mainContainer.markPlayerForDeletion.bind(this.mainContainer, playerID));\n    contextMenu.headerSection().appendItem(\n        i18nString(UIStrings.hideAllOthers),\n        this.mainContainer.markOtherPlayersForDeletion.bind(this.mainContainer, playerID));\n    contextMenu.headerSection().appendItem(\n        i18nString(UIStrings.savePlayerInfo), this.mainContainer.exportPlayerData.bind(this.mainContainer, playerID));\n    void contextMenu.show();\n    return true;\n  }\n\n  private setMediaElementFrameTitle(playerID: string, frameTitle: string, isHostname: boolean): void {\n    // Only remove the title from the set if we arent setting a hostname title.\n    // Otherwise, if it has a non-hostname title, and the requested new title is\n    // a hostname, just drop it.\n    if (this.playerEntriesWithHostnameFrameTitle.has(playerID)) {\n      if (!isHostname) {\n        this.playerEntriesWithHostnameFrameTitle.delete(playerID);\n      }\n    } else if (isHostname) {\n      return;\n    }\n\n    if (!this.playerEntryFragments.has(playerID)) {\n      return;\n    }\n    const fragment = this.playerEntryFragments.get(playerID);\n    if (fragment === undefined || fragment.element() === undefined) {\n      return;\n    }\n    fragment.$('frame-title').textContent = frameTitle;\n  }\n\n  private setMediaElementPlayerTitle(playerID: string, playerTitle: string): void {\n    if (!this.playerEntryFragments.has(playerID)) {\n      return;\n    }\n    const fragment = this.playerEntryFragments.get(playerID);\n    if (fragment === undefined) {\n      return;\n    }\n    fragment.$('player-title').textContent = playerTitle;\n  }\n\n  private setMediaElementPlayerIcon(playerID: string, iconName: string): void {\n    if (!this.playerEntryFragments.has(playerID)) {\n      return;\n    }\n    const fragment = this.playerEntryFragments.get(playerID);\n    if (fragment === undefined) {\n      return;\n    }\n    const icon = fragment.$('icon');\n    if (icon === undefined) {\n      return;\n    }\n    icon.textContent = '';\n    icon.appendChild(UI.Icon.Icon.create(iconName, 'media-player'));\n  }\n\n  private formatAndEvaluate(playerID: string, func: Function, candidate: string, min: number, max: number): void {\n    if (candidate.length <= min) {\n      return;\n    }\n    if (candidate.length >= max) {\n      candidate = candidate.substring(0, max - 3) + '...';\n    }\n    func.bind(this)(playerID, candidate);\n  }\n\n  addMediaElementItem(playerID: string): void {\n    const sidebarEntry = this.createPlayerListEntry(playerID);\n    this.contentElement.appendChild(sidebarEntry.element());\n    this.playerEntryFragments.set(playerID, sidebarEntry);\n    this.playerEntriesWithHostnameFrameTitle.add(playerID);\n  }\n\n  deletePlayer(playerID: string): void {\n    if (!this.playerEntryFragments.has(playerID)) {\n      return;\n    }\n    const fragment = this.playerEntryFragments.get(playerID);\n    if (fragment === undefined || fragment.element() === undefined) {\n      return;\n    }\n    this.contentElement.removeChild(fragment.element());\n    this.playerEntryFragments.delete(playerID);\n  }\n\n  onEvent(playerID: string, event: PlayerEvent): void {\n    const parsed = JSON.parse(event.value);\n    const eventType = parsed.event;\n\n    // Load events provide the actual underlying URL for the video, which makes\n    // a great way to identify a specific video within a page that potentially\n    // may have many videos. MSE videos have a special blob:http(s) protocol\n    // that we'd like to keep mind of, so we do prepend blob:\n    if (eventType === 'kLoad') {\n      const url = parsed.url as string;\n      const videoName = url.substring(url.lastIndexOf('/') + 1);\n      this.formatAndEvaluate(playerID, this.setMediaElementPlayerTitle, videoName, 1, 20);\n      return;\n    }\n\n    if (eventType === 'kPlay') {\n      this.setMediaElementPlayerIcon(playerID, 'largeicon-play-animation');\n      return;\n    }\n\n    if (eventType === 'kPause' || eventType === 'kEnded') {\n      this.setMediaElementPlayerIcon(playerID, 'largeicon-pause-animation');\n      return;\n    }\n\n    if (eventType === 'kWebMediaPlayerDestroyed') {\n      this.setMediaElementPlayerIcon(playerID, 'smallicon-videoplayer-destroyed');\n      return;\n    }\n  }\n\n  onProperty(playerID: string, property: Protocol.Media.PlayerProperty): void {\n    // FrameUrl is always present, and we can generate a basic frame title from\n    // it by grabbing the hostname. It's not possible to generate a \"good\" player\n    // title from the FrameUrl though, since the page location itself might not\n    // have any relevance to the video being played, and would be shared by all\n    // videos on the page.\n    if (property.name === PlayerPropertyKeys.FrameUrl) {\n      const frameTitle = new URL(property.value).hostname;\n      this.formatAndEvaluate(playerID, this.setMediaElementFrameTitle, frameTitle, 1, 20);\n      return;\n    }\n\n    // On the other hand, the page may set a title, which usually makes for a\n    // better frame title than a hostname. Unfortunately, its only \"usually\",\n    // since the site is free to set the title to _anything_, it might just be\n    // junk, or it might be super long. If it's empty, or 1 character, It's\n    // preferable to just drop it. Titles longer than 20 will have the first\n    // 17 characters kept and an elipsis appended.\n    if (property.name === PlayerPropertyKeys.FrameTitle && property.value) {\n      this.formatAndEvaluate(playerID, this.setMediaElementFrameTitle, property.value, 1, 20);\n      return;\n    }\n  }\n\n  onError(_playerID: string, _error: Protocol.Media.PlayerError): void {\n    // TODO(tmathmeyer) show an error icon next to the player name\n  }\n\n  onMessage(_playerID: string, _message: Protocol.Media.PlayerMessage): void {\n    // TODO(tmathmeyer) show a message count number next to the player name.\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([playerListViewStyles]);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
