{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/media/EventDisplayTable.ts"],
  "sourcesContent": ["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as SourceFrame from '../../ui/legacy/components/source_frame/source_frame.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport eventDisplayTableStyles from './eventDisplayTable.css.js';\n\nimport type {PlayerEvent} from './MediaModel.js';\n\nconst UIStrings = {\n  /**\n  *@description Text for timestamps of items\n  */\n  timestamp: 'Timestamp',\n  /**\n  *@description The column header for event names.\n  */\n  eventName: 'Event name',\n  /**\n  *@description Text for the value of something\n  */\n  value: 'Value',\n  /**\n  *@description The accessible name of a table that displays information about events that occurred\n  * while a video/media player was present on the page.\n  */\n  eventDisplay: 'Event display',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/media/EventDisplayTable.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport interface EventDisplayColumnConfig {\n  id: string;\n  title: string;\n  sortable: boolean;\n  weight?: number;\n}\n\nexport const enum MediaEventColumnKeys {\n  Timestamp = 'displayTimestamp',\n  Event = 'event',\n  Value = 'value',\n}\n\nexport class EventNode extends DataGrid.DataGrid.DataGridNode<EventNode> {\n  private expandableElement: SourceFrame.JSONView.JSONView|null;\n\n  constructor(event: PlayerEvent) {\n    super(event, false);\n    this.expandableElement = null;\n  }\n\n  createCell(columnId: string): HTMLElement {\n    const cell = this.createTD(columnId);\n    const cellData = this.data[columnId] as string;\n    if (columnId === MediaEventColumnKeys.Value) {\n      const enclosed = cell.createChild('div', 'event-display-table-contents-json-wrapper');\n      this.expandableElement =\n          new SourceFrame.JSONView.JSONView(new SourceFrame.JSONView.ParsedJSON(cellData, '', ''), true);\n      this.expandableElement.markAsRoot();\n      this.expandableElement.show(enclosed);\n    } else {\n      cell.classList.add('event-display-table-basic-text-table-entry');\n      UI.UIUtils.createTextChild(cell, cellData);\n    }\n    return cell;\n  }\n}\n\nexport class PlayerEventsView extends UI.Widget.VBox {\n  private readonly dataGrid: DataGrid.DataGrid.DataGridImpl<EventNode>;\n  private firstEventTime: number;\n\n  constructor() {\n    super();\n\n    // Set up element styles.\n\n    this.contentElement.classList.add('event-display-table-contents-table-container');\n\n    this.dataGrid = this.createDataGrid([\n      {\n        id: MediaEventColumnKeys.Timestamp,\n        title: i18nString(UIStrings.timestamp),\n        weight: 1,\n        sortable: false,\n      },\n      {id: MediaEventColumnKeys.Event, title: i18nString(UIStrings.eventName), weight: 2, sortable: false},\n      {\n        id: MediaEventColumnKeys.Value,\n        title: i18nString(UIStrings.value),\n        weight: 7,\n        sortable: false,\n      },\n    ]);\n\n    this.firstEventTime = 0;\n    this.dataGrid.setStriped(true);\n    this.dataGrid.asWidget().show(this.contentElement);\n  }\n\n  private createDataGrid(headers: EventDisplayColumnConfig[]): DataGrid.DataGrid.DataGridImpl<EventNode> {\n    const gridColumnDescs = [];\n    for (const headerDesc of headers) {\n      gridColumnDescs.push(PlayerEventsView.convertToGridDescriptor(headerDesc));\n    }\n\n    // TODO(tmathmeyer) SortableDataGrid doesn't play nice with nested JSON\n    // renderers, since they can change size, and this breaks the visible\n    // element computation in ViewportDataGrid.\n    const datagrid = new DataGrid.DataGrid.DataGridImpl({\n      displayName: i18nString(UIStrings.eventDisplay),\n      columns: gridColumnDescs,\n      deleteCallback: undefined,\n      editCallback: undefined,\n      refreshCallback: undefined,\n    });\n    datagrid.asWidget().contentElement.classList.add('no-border-top-datagrid');\n    return datagrid;\n  }\n\n  onEvent(event: PlayerEvent): void {\n    if (this.firstEventTime === 0 && typeof event.timestamp === 'number') {\n      this.firstEventTime = event.timestamp;\n    }\n\n    event = this.subtractFirstEventTime(event);\n    const stringified = event.value as string;\n    try {\n      const json = JSON.parse(stringified);\n      event.event = json.event;\n      delete json['event'];\n      event.value = json;\n      const node = new EventNode(event);\n      const scroll = this.dataGrid.scrollContainer as HTMLElement;\n      const isAtBottom = scroll.scrollTop === (scroll.scrollHeight - scroll.offsetHeight);\n      this.dataGrid.rootNode().appendChild(node as DataGrid.DataGrid.DataGridNode<EventNode>);\n      if (isAtBottom) {\n        scroll.scrollTop = scroll.scrollHeight;\n      }\n    } catch (e) {\n      // If this is a legacy message event, ignore it for now until they\n      // are handled.\n    }\n  }\n\n  private subtractFirstEventTime(event: PlayerEvent): PlayerEvent {\n    if (typeof event.timestamp === 'number') {\n      event.displayTimestamp = (event.timestamp - this.firstEventTime).toFixed(3);\n    }\n    return event;\n  }\n\n  private static convertToGridDescriptor(columnConfig: EventDisplayColumnConfig): DataGrid.DataGrid.ColumnDescriptor {\n    return {\n      id: columnConfig.id,\n      title: columnConfig.title,\n      sortable: columnConfig.sortable,\n      weight: columnConfig.weight || 0,\n      sort: DataGrid.DataGrid.Order.Ascending,\n    } as DataGrid.DataGrid.ColumnDescriptor;\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([eventDisplayTableStyles]);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
