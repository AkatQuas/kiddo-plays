{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/media/TickingFlameChartHelpers.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nexport function formatMillisecondsToSeconds(ms: number, decimalPlaces: number): string {\n  const roundPower = Math.pow(10, 3 - decimalPlaces);\n  const denominatorPower = Math.pow(10, Math.max(0, decimalPlaces));\n  return `${Math.round(ms / roundPower) / denominatorPower} s`;\n}\n\n/**\n * Manage the bounding box properties for the ticking flame chart.\n * kept in a separate file for unit testing.\n */\nexport class Bounds {\n  private minInternal: number;\n  private maxInternal: number;\n  private lowInternal: number;\n  private highInternal: number;\n  private readonly maxRange: number;\n  private readonly minRange: number;\n  constructor(initialLow: number, initialHigh: number, maxRange: number, minRange: number) {\n    this.minInternal = initialLow;\n    this.maxInternal = initialHigh;\n    this.lowInternal = this.minInternal;\n    this.highInternal = this.maxInternal;\n    this.maxRange = maxRange;\n    this.minRange = minRange;\n  }\n\n  get low(): number {\n    return this.lowInternal;\n  }\n\n  get high(): number {\n    return this.highInternal;\n  }\n\n  get min(): number {\n    return this.minInternal;\n  }\n\n  get max(): number {\n    return this.maxInternal;\n  }\n\n  get range(): number {\n    return this.highInternal - this.lowInternal;\n  }\n\n  private reassertBounds(): void {\n    let needsAdjustment = true;\n    while (needsAdjustment) {\n      needsAdjustment = false;\n      if (this.range < this.minRange) {\n        needsAdjustment = true;\n        const delta = (this.minRange - this.range) / 2;\n        this.highInternal += delta;\n        this.lowInternal -= delta;\n      }\n\n      if (this.lowInternal < this.minInternal) {\n        needsAdjustment = true;\n        this.lowInternal = this.minInternal;\n      }\n\n      if (this.highInternal > this.maxInternal) {\n        needsAdjustment = true;\n        this.highInternal = this.maxInternal;\n      }\n    }\n  }\n\n  /**\n   * zoom out |amount| ticks at position [0, 1] along the current range of the timeline.\n   */\n  zoomOut(amount: number, position: number): void {\n    const range = this.highInternal - this.lowInternal;\n    const growSize = range * Math.pow(1.1, amount) - range;\n    const lowEnd = growSize * position;\n    const highEnd = growSize - lowEnd;\n    this.lowInternal -= lowEnd;\n    this.highInternal += highEnd;\n    this.reassertBounds();\n  }\n\n  /**\n   * zoom in |amount| ticks at position [0, 1] along the current range of the timeline.\n   */\n  zoomIn(amount: number, position: number): void {\n    const range = this.highInternal - this.lowInternal;\n    if (this.range <= this.minRange) {\n      return;\n    }\n\n    const shrinkSize = range - range / Math.pow(1.1, amount);\n    const lowEnd = shrinkSize * position;\n    const highEnd = shrinkSize - lowEnd;\n    this.lowInternal += lowEnd;\n    this.highInternal -= highEnd;\n    this.reassertBounds();\n  }\n\n  /**\n   * Add Xms to the max value, and scroll the timeline forward if the end is in sight.\n   */\n  addMax(amount: number): void {\n    const range = this.highInternal - this.lowInternal;\n    const isAtHighEnd = this.highInternal === this.maxInternal;\n    const isZoomedOut = this.lowInternal === this.minInternal || range >= this.maxRange;\n\n    this.maxInternal += amount;\n    if (isAtHighEnd && isZoomedOut) {\n      this.highInternal = this.maxInternal;\n    }\n    this.reassertBounds();\n  }\n\n  /**\n   * Attempt to push the maximum time up to |time| ms.\n   */\n  pushMaxAtLeastTo(time: number): boolean {\n    if (this.maxInternal < time) {\n      this.addMax(time - this.maxInternal);\n      return true;\n    }\n    return false;\n  }\n}\n"],
  "mappings": "AAIO,4CAAqC,IAAY,eAA+B;AACrF,QAAM,aAAa,KAAK,IAAI,IAAI,IAAI;AACpC,QAAM,mBAAmB,KAAK,IAAI,IAAI,KAAK,IAAI,GAAG;AAClD,SAAO,GAAG,KAAK,MAAM,KAAK,cAAc;AAAA;AAOnC,oBAAa;AAAA,EACV;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACS;AAAA,EACA;AAAA,EACjB,YAAY,YAAoB,aAAqB,UAAkB,UAAkB;AACvF,SAAK,cAAc;AACnB,SAAK,cAAc;AACnB,SAAK,cAAc,KAAK;AACxB,SAAK,eAAe,KAAK;AACzB,SAAK,WAAW;AAChB,SAAK,WAAW;AAAA;AAAA,MAGd,MAAc;AAChB,WAAO,KAAK;AAAA;AAAA,MAGV,OAAe;AACjB,WAAO,KAAK;AAAA;AAAA,MAGV,MAAc;AAChB,WAAO,KAAK;AAAA;AAAA,MAGV,MAAc;AAChB,WAAO,KAAK;AAAA;AAAA,MAGV,QAAgB;AAClB,WAAO,KAAK,eAAe,KAAK;AAAA;AAAA,EAG1B,iBAAuB;AAC7B,QAAI,kBAAkB;AACtB,WAAO,iBAAiB;AACtB,wBAAkB;AAClB,UAAI,KAAK,QAAQ,KAAK,UAAU;AAC9B,0BAAkB;AAClB,cAAM,QAAS,MAAK,WAAW,KAAK,SAAS;AAC7C,aAAK,gBAAgB;AACrB,aAAK,eAAe;AAAA;AAGtB,UAAI,KAAK,cAAc,KAAK,aAAa;AACvC,0BAAkB;AAClB,aAAK,cAAc,KAAK;AAAA;AAG1B,UAAI,KAAK,eAAe,KAAK,aAAa;AACxC,0BAAkB;AAClB,aAAK,eAAe,KAAK;AAAA;AAAA;AAAA;AAAA,EAQ/B,QAAQ,QAAgB,UAAwB;AAC9C,UAAM,QAAQ,KAAK,eAAe,KAAK;AACvC,UAAM,WAAW,QAAQ,KAAK,IAAI,KAAK,UAAU;AACjD,UAAM,SAAS,WAAW;AAC1B,UAAM,UAAU,WAAW;AAC3B,SAAK,eAAe;AACpB,SAAK,gBAAgB;AACrB,SAAK;AAAA;AAAA,EAMP,OAAO,QAAgB,UAAwB;AAC7C,UAAM,QAAQ,KAAK,eAAe,KAAK;AACvC,QAAI,KAAK,SAAS,KAAK,UAAU;AAC/B;AAAA;AAGF,UAAM,aAAa,QAAQ,QAAQ,KAAK,IAAI,KAAK;AACjD,UAAM,SAAS,aAAa;AAC5B,UAAM,UAAU,aAAa;AAC7B,SAAK,eAAe;AACpB,SAAK,gBAAgB;AACrB,SAAK;AAAA;AAAA,EAMP,OAAO,QAAsB;AAC3B,UAAM,QAAQ,KAAK,eAAe,KAAK;AACvC,UAAM,cAAc,KAAK,iBAAiB,KAAK;AAC/C,UAAM,cAAc,KAAK,gBAAgB,KAAK,eAAe,SAAS,KAAK;AAE3E,SAAK,eAAe;AACpB,QAAI,eAAe,aAAa;AAC9B,WAAK,eAAe,KAAK;AAAA;AAE3B,SAAK;AAAA;AAAA,EAMP,iBAAiB,MAAuB;AACtC,QAAI,KAAK,cAAc,MAAM;AAC3B,WAAK,OAAO,OAAO,KAAK;AACxB,aAAO;AAAA;AAET,WAAO;AAAA;AAAA;",
  "names": []
}
