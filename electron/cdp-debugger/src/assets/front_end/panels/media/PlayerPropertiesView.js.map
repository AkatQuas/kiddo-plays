{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/media/PlayerPropertiesView.ts"],
  "sourcesContent": ["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport playerPropertiesViewStyles from './playerPropertiesView.css.js';\n\nimport type * as Protocol from '../../generated/protocol.js';\n\nconst UIStrings = {\n  /**\n  *@description The type of media, for example - video, audio, or text. Capitalized.\n  */\n  video: 'Video',\n  /**\n  *@description The type of media, for example - video, audio, or text. Capitalized.\n  */\n  audio: 'Audio',\n  /**\n  *@description A video or audio stream - but capitalized.\n  */\n  track: 'Track',\n  /**\n  *@description A device that converts media files into playable streams of audio or video.\n  */\n  decoder: 'Decoder',\n  /**\n  *@description Title of the 'Properties' tool in the sidebar of the elements tool\n  */\n  properties: 'Properties',\n  /**\n  *@description Menu label for text tracks, it is followed by a number, like 'Text Track #1'\n  */\n  textTrack: 'Text track',\n  /**\n  * @description Placeholder text stating that there are no text tracks on this player. A text track\n  * is all of the text that accompanies a particular video.\n  */\n  noTextTracks: 'No text tracks',\n  /**\n  *@description Media property giving the width x height of the video\n  */\n  resolution: 'Resolution',\n  /**\n  *@description Media property giving the file size of the media\n  */\n  fileSize: 'File size',\n  /**\n  *@description Media property giving the media file bitrate\n  */\n  bitrate: 'Bitrate',\n  /**\n  *@description Text for the duration of something\n  */\n  duration: 'Duration',\n  /**\n  *@description The label for a timestamp when a video was started.\n  */\n  startTime: 'Start time',\n  /**\n  *@description Media property signaling whether the media is streaming\n  */\n  streaming: 'Streaming',\n  /**\n  *@description Media property describing where the media is playing from.\n  */\n  playbackFrameUrl: 'Playback frame URL',\n  /**\n  *@description Media property giving the title of the frame where the media is embedded\n  */\n  playbackFrameTitle: 'Playback frame title',\n  /**\n  *@description Media property describing whether the file is single or cross origin in nature\n  */\n  singleoriginPlayback: 'Single-origin playback',\n  /**\n  *@description Media property describing support for range http headers\n  */\n  rangeHeaderSupport: '`Range` header support',\n  /**\n  *@description Media property giving the media file frame rate\n  */\n  frameRate: 'Frame rate',\n  /**\n  * @description Media property giving the distance of the playback quality from the ideal playback.\n  * Roughness is the opposite to smoothness, i.e. whether each frame of the video was played at the\n  * right time so that the video looks smooth when it plays.\n  */\n  videoPlaybackRoughness: 'Video playback roughness',\n  /**\n  *@description A score describing how choppy the video playback is.\n  */\n  videoFreezingScore: 'Video freezing score',\n  /**\n  *@description Media property giving the name of the renderer being used\n  */\n  rendererName: 'Renderer name',\n\n  /**\n  *@description Media property giving the name of the decoder being used\n  */\n  decoderName: 'Decoder name',\n  /**\n  *@description There is no decoder\n  */\n  noDecoder: 'No decoder',\n  /**\n  *@description Media property signaling whether a hardware decoder is being used\n  */\n  hardwareDecoder: 'Hardware decoder',\n  /**\n  *@description Media property signaling whether the content is encrypted. This is a noun phrase for\n  *a demultiplexer that does decryption.\n  */\n  decryptingDemuxer: 'Decrypting demuxer',\n\n  /**\n  *@description Media property giving the name of the video encoder being used.\n  */\n  encoderName: 'Encoder name',\n  /**\n  *@description There is no encoder.\n  */\n  noEncoder: 'No encoder',\n  /**\n  *@description Media property signaling whether the encoder is hardware accelerated.\n  */\n  hardwareEncoder: 'Hardware encoder',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/media/PlayerPropertiesView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\ntype TabData = {\n  [x: string]: string,\n};\n\n// Keep this enum in sync with panels/media/base/media_log_properties.h\nexport const enum PlayerPropertyKeys {\n  Resolution = 'kResolution',\n  TotalBytes = 'kTotalBytes',\n  Bitrate = 'kBitrate',\n  MaxDuration = 'kMaxDuration',\n  StartTime = 'kStartTime',\n  IsVideoEncrypted = 'kIsVideoEncrypted',\n  IsStreaming = 'kIsStreaming',\n  FrameUrl = 'kFrameUrl',\n  FrameTitle = 'kFrameTitle',\n  IsSingleOrigin = 'kIsSingleOrigin',\n  IsRangeHeaderSupported = 'kIsRangeHeaderSupported',\n  RendererName = 'kRendererName',\n  VideoDecoderName = 'kVideoDecoderName',\n  AudioDecoderName = 'kAudioDecoderName',\n  IsPlatformVideoDecoder = 'kIsPlatformVideoDecoder',\n  IsPlatformAudioDecoder = 'kIsPlatformAudioDecoder',\n  VideoEncoderName = 'kVideoEncoderName',\n  IsPlatformVideoEncoder = 'kIsPlatformVideoEncoder',\n  IsVideoDecryptingDemuxerStream = 'kIsVideoDecryptingDemuxerStream',\n  IsAudioDecryptingDemuxerStream = 'kIsAudioDecryptingDemuxerStream',\n  AudioTracks = 'kAudioTracks',\n  TextTracks = 'kTextTracks',\n  VideoTracks = 'kVideoTracks',\n  Framerate = 'kFramerate',\n  VideoPlaybackRoughness = 'kVideoPlaybackRoughness',\n  VideoPlaybackFreezing = 'kVideoPlaybackFreezing',\n}\n\nexport class PropertyRenderer extends UI.Widget.VBox {\n  private readonly title: Platform.UIString.LocalizedString;\n  private readonly contents: HTMLElement;\n  private value: string|null;\n  private pseudoColorProtectionElement: HTMLDivElement|null;\n\n  constructor(title: Platform.UIString.LocalizedString) {\n    super();\n    this.contentElement.classList.add('media-property-renderer');\n    const titleElement = this.contentElement.createChild('span', 'media-property-renderer-title');\n    this.contents = this.contentElement.createChild('span', 'media-property-renderer-contents');\n    UI.UIUtils.createTextChild(titleElement, title);\n    this.title = title;\n    this.value = null;\n    this.pseudoColorProtectionElement = null;\n    this.contentElement.classList.add('media-property-renderer-hidden');\n  }\n\n  updateData(propname: string, propvalue: string): void {\n    // convert all empty possibilities into nulls for easier handling.\n    if (propvalue === '' || propvalue === null) {\n      return this.updateDataInternal(propname, null);\n    }\n    try {\n      propvalue = JSON.parse(propvalue) as string;\n    } catch (err) {\n      // TODO(tmathmeyer) typecheck the type of propvalue against\n      // something defined or sourced from the c++ definitions.\n      // Do nothing, some strings just stay strings!\n    }\n    return this.updateDataInternal(propname, propvalue);\n  }\n\n  protected updateDataInternal(propname: string, propvalue: string|null): void {\n    if (propvalue === null) {\n      this.changeContents(null);\n    } else if (this.value === propvalue) {\n      return;  // Don't rebuild element!\n    } else {\n      this.value = propvalue;\n      this.changeContents(propvalue);\n    }\n  }\n\n  changeContents(value: string|null): void {\n    if (value === null) {\n      this.contentElement.classList.add('media-property-renderer-hidden');\n      if (this.pseudoColorProtectionElement === null) {\n        this.pseudoColorProtectionElement = document.createElement('div');\n        this.pseudoColorProtectionElement.classList.add('media-property-renderer');\n        this.pseudoColorProtectionElement.classList.add('media-property-renderer-hidden');\n        (this.contentElement.parentNode as HTMLElement)\n            .insertBefore(this.pseudoColorProtectionElement, this.contentElement);\n      }\n    } else {\n      if (this.pseudoColorProtectionElement !== null) {\n        this.pseudoColorProtectionElement.remove();\n        this.pseudoColorProtectionElement = null;\n      }\n      this.contentElement.classList.remove('media-property-renderer-hidden');\n      this.contents.removeChildren();\n      const spanElement = document.createElement('span');\n      spanElement.textContent = value;\n      this.contents.appendChild(spanElement);\n    }\n  }\n}\n\nexport class FormattedPropertyRenderer extends PropertyRenderer {\n  private readonly formatfunction: (arg0: string) => string;\n  constructor(title: Platform.UIString.LocalizedString, formatfunction: (arg0: string) => string) {\n    super(title);\n    this.formatfunction = formatfunction;\n  }\n\n  updateDataInternal(propname: string, propvalue: string|null): void {\n    if (propvalue === null) {\n      this.changeContents(null);\n    } else {\n      this.changeContents(this.formatfunction(propvalue));\n    }\n  }\n}\n\nexport class DefaultPropertyRenderer extends PropertyRenderer {\n  constructor(title: Platform.UIString.LocalizedString, defaultText: string) {\n    super(title);\n    this.changeContents(defaultText);\n  }\n}\n\nexport class DimensionPropertyRenderer extends PropertyRenderer {\n  private width: number;\n  private height: number;\n\n  constructor(title: Platform.UIString.LocalizedString) {\n    super(title);\n    this.width = 0;\n    this.height = 0;\n  }\n\n  updateDataInternal(propname: string, propvalue: string|null): void {\n    let needsUpdate = false;\n    if (propname === 'width' && Number(propvalue) !== this.width) {\n      this.width = Number(propvalue);\n      needsUpdate = true;\n    }\n    if (propname === 'height' && Number(propvalue) !== this.height) {\n      this.height = Number(propvalue);\n      needsUpdate = true;\n    }\n    // If both properties arent set, don't bother updating, since\n    // temporarily showing ie: 1920x0 is meaningless.\n    if (this.width === 0 || this.height === 0) {\n      this.changeContents(null);\n    } else if (needsUpdate) {\n      this.changeContents(`${this.width}\u00D7${this.height}`);\n    }\n  }\n}\n\nexport class AttributesView extends UI.Widget.VBox {\n  private readonly contentHash: number;\n\n  constructor(elements: UI.Widget.Widget[]) {\n    super();\n    this.contentHash = 0;\n    this.contentElement.classList.add('media-attributes-view');\n    for (const element of elements) {\n      element.show(this.contentElement);\n      // We just need a really simple way to compare the topical equality\n      // of the attributes views in order to avoid deleting and recreating\n      // a node containing exactly the same data.\n      const content = this.contentElement.textContent;\n      if (content !== null) {\n        this.contentHash += Platform.StringUtilities.hashCode(content);\n      }\n    }\n  }\n\n  getContentHash(): number {\n    return this.contentHash;\n  }\n}\n\nexport class TrackManager {\n  private readonly type: string;\n  private readonly view: PlayerPropertiesView;\n\n  constructor(propertiesView: PlayerPropertiesView, type: string) {\n    this.type = type;\n    this.view = propertiesView;\n  }\n\n  updateData(_name: string, value: string): void {\n    const tabs = this.view.getTabs(this.type);\n\n    const newTabs = JSON.parse(value) as TabData[];\n    let enumerate = 1;\n    for (const tabData of newTabs) {\n      this.addNewTab(tabs, tabData, enumerate);\n      enumerate++;\n    }\n  }\n\n  addNewTab(tabs: GenericTrackMenu|NoTracksPlaceholderMenu, tabData: TabData, tabNumber: number): void {\n    const tabElements = [];\n    for (const [name, data] of Object.entries(tabData)) {\n      tabElements.push(new DefaultPropertyRenderer(i18n.i18n.lockedString(name), data));\n    }\n    const newTab = new AttributesView(tabElements);\n\n    tabs.addNewTab(tabNumber, newTab);\n  }\n}\n\nexport class VideoTrackManager extends TrackManager {\n  constructor(propertiesView: PlayerPropertiesView) {\n    super(propertiesView, 'video');\n  }\n}\n\nexport class TextTrackManager extends TrackManager {\n  constructor(propertiesView: PlayerPropertiesView) {\n    super(propertiesView, 'text');\n  }\n}\n\nexport class AudioTrackManager extends TrackManager {\n  constructor(propertiesView: PlayerPropertiesView) {\n    super(propertiesView, 'audio');\n  }\n}\n\nconst TrackTypeLocalized = {\n  Video: i18nLazyString(UIStrings.video),\n  Audio: i18nLazyString(UIStrings.audio),\n};\n\nclass GenericTrackMenu extends UI.TabbedPane.TabbedPane {\n  private readonly decoderName: string;\n  private readonly trackName: string;\n\n  constructor(decoderName: string, trackName: string = i18nString(UIStrings.track)) {\n    super();\n    this.decoderName = decoderName;\n    this.trackName = trackName;\n  }\n\n  addNewTab(trackNumber: number, element: AttributesView): void {\n    const localizedTrackLower = i18nString(UIStrings.track);\n    const tabId = `Track${trackNumber}`;\n    if (this.hasTab(tabId)) {\n      const tabElement = this.tabView(tabId);\n      if (tabElement === null) {\n        return;\n      }\n      if ((tabElement as AttributesView).getContentHash() === element.getContentHash()) {\n        return;\n      }\n      this.closeTab(tabId, /* userGesture=*/ false);\n    }\n    this.appendTab(\n        tabId,  // No need for localizing, internal ID.\n        `${this.trackName} #${trackNumber}`, element, `${this.decoderName} ${localizedTrackLower} #${trackNumber}`);\n  }\n}\n\nclass DecoderTrackMenu extends GenericTrackMenu {\n  constructor(decoderName: string, informationalElement: UI.Widget.Widget) {\n    super(decoderName);\n\n    const decoderLocalized = i18nString(UIStrings.decoder);\n    const title = `${decoderName} ${decoderLocalized}`;\n    const propertiesLocalized = i18nString(UIStrings.properties);\n    const hoverText = `${title} ${propertiesLocalized}`;\n    this.appendTab('DecoderProperties', title, informationalElement, hoverText);\n  }\n}\n\nclass NoTracksPlaceholderMenu extends UI.Widget.VBox {\n  private isPlaceholder: boolean;\n  private readonly wrapping: GenericTrackMenu;\n\n  constructor(wrapping: GenericTrackMenu, placeholderText: string) {\n    super();\n    this.isPlaceholder = true;\n    this.wrapping = wrapping;\n    this.wrapping.appendTab('_placeholder', placeholderText, new UI.Widget.VBox(), placeholderText);\n    this.wrapping.show(this.contentElement);\n  }\n\n  addNewTab(trackNumber: number, element: AttributesView): void {\n    if (this.isPlaceholder) {\n      this.wrapping.closeTab('_placeholder');\n      this.isPlaceholder = false;\n    }\n    this.wrapping.addNewTab(trackNumber, element);\n  }\n}\n\nexport class PlayerPropertiesView extends UI.Widget.VBox {\n  private readonly mediaElements: PropertyRenderer[];\n  private readonly videoDecoderElements: PropertyRenderer[];\n  private readonly audioDecoderElements: PropertyRenderer[];\n  private readonly textTrackElements: PropertyRenderer[];\n  private readonly attributeMap: Map<string, PropertyRenderer|TrackManager>;\n  private readonly videoProperties: AttributesView;\n  private readonly videoDecoderProperties: AttributesView;\n  private readonly audioDecoderProperties: AttributesView;\n  private readonly videoDecoderTabs: DecoderTrackMenu;\n  private readonly audioDecoderTabs: DecoderTrackMenu;\n  private textTracksTabs: GenericTrackMenu|NoTracksPlaceholderMenu|null;\n\n  constructor() {\n    super();\n    this.contentElement.classList.add('media-properties-frame');\n\n    this.mediaElements = [];\n    this.videoDecoderElements = [];\n    this.audioDecoderElements = [];\n    this.textTrackElements = [];\n    this.attributeMap = new Map();\n\n    this.populateAttributesAndElements();\n    this.videoProperties = new AttributesView(this.mediaElements);\n    this.videoDecoderProperties = new AttributesView(this.videoDecoderElements);\n    this.audioDecoderProperties = new AttributesView(this.audioDecoderElements);\n\n    this.videoProperties.show(this.contentElement);\n    this.videoDecoderTabs = new DecoderTrackMenu(TrackTypeLocalized.Video(), this.videoDecoderProperties);\n    this.videoDecoderTabs.show(this.contentElement);\n    this.audioDecoderTabs = new DecoderTrackMenu(TrackTypeLocalized.Audio(), this.audioDecoderProperties);\n    this.audioDecoderTabs.show(this.contentElement);\n\n    this.textTracksTabs = null;\n  }\n\n  private lazyCreateTrackTabs(): GenericTrackMenu|NoTracksPlaceholderMenu {\n    let textTracksTabs = this.textTracksTabs;\n    if (textTracksTabs === null) {\n      const textTracks = new GenericTrackMenu(i18nString(UIStrings.textTrack));\n      textTracksTabs = new NoTracksPlaceholderMenu(textTracks, i18nString(UIStrings.noTextTracks));\n      textTracksTabs.show(this.contentElement);\n      this.textTracksTabs = textTracksTabs;\n    }\n    return textTracksTabs;\n  }\n\n  getTabs(type: string): GenericTrackMenu|NoTracksPlaceholderMenu {\n    if (type === 'audio') {\n      return this.audioDecoderTabs;\n    }\n    if (type === 'video') {\n      return this.videoDecoderTabs;\n    }\n    if (type === 'text') {\n      return this.lazyCreateTrackTabs();\n    }\n    // There should be no other type allowed.\n    throw new Error('Unreachable');\n  }\n\n  onProperty(property: Protocol.Media.PlayerProperty): void {\n    const renderer = this.attributeMap.get(property.name);\n    if (!renderer) {\n      throw new Error(`Player property \"${property.name}\" not supported.`);\n    }\n    renderer.updateData(property.name, property.value);\n  }\n\n  formatKbps(bitsPerSecond: string|number): string {\n    if (bitsPerSecond === '') {\n      return '0 kbps';\n    }\n    const kbps = Math.floor(Number(bitsPerSecond) / 1000);\n    return `${kbps} kbps`;\n  }\n\n  formatTime(seconds: string|number): string {\n    if (seconds === '') {\n      return '0:00';\n    }\n    const date = new Date();\n    date.setSeconds(Number(seconds));\n    return date.toISOString().substr(11, 8);\n  }\n\n  formatFileSize(bytes: string): string {\n    if (bytes === '') {\n      return '0 bytes';\n    }\n    const actualBytes = Number(bytes);\n    if (actualBytes < 1000) {\n      return `${bytes} bytes`;\n    }\n    const power = Math.floor(Math.log10(actualBytes) / 3);\n    const suffix = ['bytes', 'kB', 'MB', 'GB', 'TB'][power];\n    const bytesDecimal = (actualBytes / Math.pow(1000, power)).toFixed(2);\n    return `${bytesDecimal} ${suffix}`;\n  }\n\n  populateAttributesAndElements(): void {\n    /* Media properties */\n    const resolution = new PropertyRenderer(i18nString(UIStrings.resolution));\n    this.mediaElements.push(resolution);\n    this.attributeMap.set(PlayerPropertyKeys.Resolution, resolution);\n\n    const fileSize = new FormattedPropertyRenderer(i18nString(UIStrings.fileSize), this.formatFileSize);\n    this.mediaElements.push(fileSize);\n    this.attributeMap.set(PlayerPropertyKeys.TotalBytes, fileSize);\n\n    const bitrate = new FormattedPropertyRenderer(i18nString(UIStrings.bitrate), this.formatKbps);\n    this.mediaElements.push(bitrate);\n    this.attributeMap.set(PlayerPropertyKeys.Bitrate, bitrate);\n\n    const duration = new FormattedPropertyRenderer(i18nString(UIStrings.duration), this.formatTime);\n    this.mediaElements.push(duration);\n    this.attributeMap.set(PlayerPropertyKeys.MaxDuration, duration);\n\n    const startTime = new PropertyRenderer(i18nString(UIStrings.startTime));\n    this.mediaElements.push(startTime);\n    this.attributeMap.set(PlayerPropertyKeys.StartTime, startTime);\n\n    const streaming = new PropertyRenderer(i18nString(UIStrings.streaming));\n    this.mediaElements.push(streaming);\n    this.attributeMap.set(PlayerPropertyKeys.IsStreaming, streaming);\n\n    const frameUrl = new PropertyRenderer(i18nString(UIStrings.playbackFrameUrl));\n    this.mediaElements.push(frameUrl);\n    this.attributeMap.set(PlayerPropertyKeys.FrameUrl, frameUrl);\n\n    const frameTitle = new PropertyRenderer(i18nString(UIStrings.playbackFrameTitle));\n    this.mediaElements.push(frameTitle);\n    this.attributeMap.set(PlayerPropertyKeys.FrameTitle, frameTitle);\n\n    const singleOrigin = new PropertyRenderer(i18nString(UIStrings.singleoriginPlayback));\n    this.mediaElements.push(singleOrigin);\n    this.attributeMap.set(PlayerPropertyKeys.IsSingleOrigin, singleOrigin);\n\n    const rangeHeaders = new PropertyRenderer(i18nString(UIStrings.rangeHeaderSupport));\n    this.mediaElements.push(rangeHeaders);\n    this.attributeMap.set(PlayerPropertyKeys.IsRangeHeaderSupported, rangeHeaders);\n\n    const frameRate = new PropertyRenderer(i18nString(UIStrings.frameRate));\n    this.mediaElements.push(frameRate);\n    this.attributeMap.set(PlayerPropertyKeys.Framerate, frameRate);\n\n    const roughness = new PropertyRenderer(i18nString(UIStrings.videoPlaybackRoughness));\n    this.mediaElements.push(roughness);\n    this.attributeMap.set(PlayerPropertyKeys.VideoPlaybackRoughness, roughness);\n\n    const freezingScore = new PropertyRenderer(i18nString(UIStrings.videoFreezingScore));\n    this.mediaElements.push(freezingScore);\n    this.attributeMap.set(PlayerPropertyKeys.VideoPlaybackFreezing, freezingScore);\n\n    const rendererName = new PropertyRenderer(i18nString(UIStrings.rendererName));\n    this.mediaElements.push(rendererName);\n    this.attributeMap.set(PlayerPropertyKeys.RendererName, rendererName);\n\n    /* Video Decoder Properties */\n    const decoderName = new DefaultPropertyRenderer(i18nString(UIStrings.decoderName), i18nString(UIStrings.noDecoder));\n    this.videoDecoderElements.push(decoderName);\n    this.attributeMap.set(PlayerPropertyKeys.VideoDecoderName, decoderName);\n\n    const videoPlatformDecoder = new PropertyRenderer(i18nString(UIStrings.hardwareDecoder));\n    this.videoDecoderElements.push(videoPlatformDecoder);\n    this.attributeMap.set(PlayerPropertyKeys.IsPlatformVideoDecoder, videoPlatformDecoder);\n\n    const encoderName = new DefaultPropertyRenderer(i18nString(UIStrings.encoderName), i18nString(UIStrings.noEncoder));\n    this.videoDecoderElements.push(encoderName);\n    this.attributeMap.set(PlayerPropertyKeys.VideoEncoderName, encoderName);\n\n    const videoPlatformEncoder = new PropertyRenderer(i18nString(UIStrings.hardwareEncoder));\n    this.videoDecoderElements.push(videoPlatformEncoder);\n    this.attributeMap.set(PlayerPropertyKeys.IsPlatformVideoEncoder, videoPlatformEncoder);\n\n    const videoDDS = new PropertyRenderer(i18nString(UIStrings.decryptingDemuxer));\n    this.videoDecoderElements.push(videoDDS);\n    this.attributeMap.set(PlayerPropertyKeys.IsVideoDecryptingDemuxerStream, videoDDS);\n\n    const videoTrackManager = new VideoTrackManager(this);\n    this.attributeMap.set(PlayerPropertyKeys.VideoTracks, videoTrackManager);\n\n    /* Audio Decoder Properties */\n    const audioDecoder =\n        new DefaultPropertyRenderer(i18nString(UIStrings.decoderName), i18nString(UIStrings.noDecoder));\n    this.audioDecoderElements.push(audioDecoder);\n    this.attributeMap.set(PlayerPropertyKeys.AudioDecoderName, audioDecoder);\n\n    const audioPlatformDecoder = new PropertyRenderer(i18nString(UIStrings.hardwareDecoder));\n    this.audioDecoderElements.push(audioPlatformDecoder);\n    this.attributeMap.set(PlayerPropertyKeys.IsPlatformAudioDecoder, audioPlatformDecoder);\n\n    const audioDDS = new PropertyRenderer(i18nString(UIStrings.decryptingDemuxer));\n    this.audioDecoderElements.push(audioDDS);\n    this.attributeMap.set(PlayerPropertyKeys.IsAudioDecryptingDemuxerStream, audioDDS);\n\n    const audioTrackManager = new AudioTrackManager(this);\n    this.attributeMap.set(PlayerPropertyKeys.AudioTracks, audioTrackManager);\n\n    const textTrackManager = new TextTrackManager(this);\n    this.attributeMap.set(PlayerPropertyKeys.TextTracks, textTrackManager);\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([playerPropertiesViewStyles]);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
