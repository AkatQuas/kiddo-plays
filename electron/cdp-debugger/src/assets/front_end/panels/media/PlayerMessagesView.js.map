{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/media/PlayerMessagesView.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport playerMessagesViewStyles from './playerMessagesView.css.js';\n\nimport type * as Protocol from '../../generated/protocol.js';\n\nconst UIStrings = {\n  /**\n  *@description A context menu item in the Console View of the Console panel\n  */\n  default: 'Default',\n  /**\n  *@description Text in Network Throttling Selector of the Network panel\n  */\n  custom: 'Custom',\n  /**\n  *@description Text for everything\n  */\n  all: 'All',\n  /**\n  *@description Text for errors\n  */\n  error: 'Error',\n  /**\n  *@description Text to indicate an item is a warning\n  */\n  warning: 'Warning',\n  /**\n  *@description Sdk console message message level info of level Labels in Console View of the Console panel\n  */\n  info: 'Info',\n  /**\n  *@description Debug log level\n  */\n  debug: 'Debug',\n  /**\n  *@description Label for selecting between the set of log levels to show.\n  */\n  logLevel: 'Log level:',\n  /**\n  *@description Default text for user-text-entry for searching log messages.\n  */\n  filterLogMessages: 'Filter log messages',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/media/PlayerMessagesView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst enum MessageLevelBitfield {\n  Error = 0b0001,\n  Warning = 0b0010,\n  Info = 0b0100,\n  Debug = 0b1000,\n\n  Default = 0b0111,  // Error, Warning, Info\n  All = 0b1111,      // Error, Warning, Info, Debug\n  Custom = 0,\n}\n\ninterface SelectableLevel {\n  title: string;\n  value: MessageLevelBitfield;\n  stringValue: string;\n  selectable?: boolean;\n  overwrite?: boolean;\n}\n\nclass MessageLevelSelector implements UI.SoftDropDown.Delegate<SelectableLevel> {\n  private readonly items: UI.ListModel.ListModel<SelectableLevel>;\n  private readonly view: PlayerMessagesView;\n  private readonly itemMap: Map<number, SelectableLevel>;\n  private hiddenLevels: string[];\n  private bitFieldValue: MessageLevelBitfield;\n  private readonly savedBitFieldValue: MessageLevelBitfield;\n  private readonly defaultTitleInternal: Common.UIString.LocalizedString;\n  private readonly customTitle: Common.UIString.LocalizedString;\n  private readonly allTitle: Common.UIString.LocalizedString;\n  elementsForItems: WeakMap<SelectableLevel, HTMLElement>;\n\n  constructor(items: UI.ListModel.ListModel<SelectableLevel>, view: PlayerMessagesView) {\n    this.items = items;\n    this.view = view;\n    this.itemMap = new Map();\n\n    this.hiddenLevels = [];\n\n    this.bitFieldValue = MessageLevelBitfield.Default;\n    this.savedBitFieldValue = MessageLevelBitfield.Default;\n\n    this.defaultTitleInternal = i18nString(UIStrings.default);\n    this.customTitle = i18nString(UIStrings.custom);\n    this.allTitle = i18nString(UIStrings.all);\n\n    this.elementsForItems = new WeakMap();\n  }\n\n  defaultTitle(): Common.UIString.LocalizedString {\n    return this.defaultTitleInternal;\n  }\n\n  setDefault(dropdown: UI.SoftDropDown.SoftDropDown<SelectableLevel>): void {\n    dropdown.selectItem(this.items.at(0));\n  }\n\n  populate(): void {\n    this.items.insert(this.items.length, {\n      title: this.defaultTitleInternal,\n      overwrite: true,\n      stringValue: '',\n      value: MessageLevelBitfield.Default,\n      selectable: undefined,\n    });\n\n    this.items.insert(this.items.length, {\n      title: this.allTitle,\n      overwrite: true,\n      stringValue: '',\n      value: MessageLevelBitfield.All,\n      selectable: undefined,\n    });\n\n    this.items.insert(this.items.length, {\n      title: i18nString(UIStrings.error),\n      overwrite: false,\n      stringValue: 'error',\n      value: MessageLevelBitfield.Error,\n      selectable: undefined,\n    });\n\n    this.items.insert(this.items.length, {\n      title: i18nString(UIStrings.warning),\n      overwrite: false,\n      stringValue: 'warning',\n      value: MessageLevelBitfield.Warning,\n      selectable: undefined,\n    });\n\n    this.items.insert(this.items.length, {\n      title: i18nString(UIStrings.info),\n      overwrite: false,\n      stringValue: 'info',\n      value: MessageLevelBitfield.Info,\n      selectable: undefined,\n    });\n\n    this.items.insert(this.items.length, {\n      title: i18nString(UIStrings.debug),\n      overwrite: false,\n      stringValue: 'debug',\n      value: MessageLevelBitfield.Debug,\n      selectable: undefined,\n    });\n  }\n\n  private updateCheckMarks(): void {\n    this.hiddenLevels = [];\n    for (const [key, item] of this.itemMap) {\n      if (!item.overwrite) {\n        const elementForItem = this.elementsForItems.get(item as SelectableLevel);\n        if (elementForItem && elementForItem.firstChild) {\n          elementForItem.firstChild.remove();\n        }\n        if (elementForItem && key & this.bitFieldValue) {\n          UI.UIUtils.createTextChild(elementForItem.createChild('div'), '\u2713');\n        } else {\n          this.hiddenLevels.push(item.stringValue);\n        }\n      }\n    }\n  }\n\n  titleFor(item: SelectableLevel): string {\n    // This would make a lot more sense to have in |itemSelected|, but this\n    // method gets called first.\n    if (item.overwrite) {\n      this.bitFieldValue = item.value;\n    } else {\n      this.bitFieldValue ^= item.value;\n    }\n\n    if (this.bitFieldValue === MessageLevelBitfield.Default) {\n      return this.defaultTitleInternal;\n    }\n\n    if (this.bitFieldValue === MessageLevelBitfield.All) {\n      return this.allTitle;\n    }\n\n    const potentialMatch = this.itemMap.get(this.bitFieldValue);\n    if (potentialMatch) {\n      return potentialMatch.title;\n    }\n\n    return this.customTitle;\n  }\n\n  createElementForItem(item: SelectableLevel): Element {\n    const element = document.createElement('div');\n    const shadowRoot = UI.Utils.createShadowRootWithCoreStyles(\n        element, {cssFile: [playerMessagesViewStyles], delegatesFocus: undefined});\n    const container = shadowRoot.createChild('div', 'media-messages-level-dropdown-element');\n    const checkBox = container.createChild('div', 'media-messages-level-dropdown-checkbox') as HTMLElement;\n    const text = container.createChild('span', 'media-messages-level-dropdown-text');\n    UI.UIUtils.createTextChild(text, item.title);\n    this.elementsForItems.set(item, checkBox);\n    this.itemMap.set(item.value, item);\n    this.updateCheckMarks();\n    this.view.regenerateMessageDisplayCss(this.hiddenLevels);\n    return element;\n  }\n\n  isItemSelectable(_item: SelectableLevel): boolean {\n    return true;\n  }\n\n  itemSelected(_item: SelectableLevel|null): void {\n    this.updateCheckMarks();\n    this.view.regenerateMessageDisplayCss(this.hiddenLevels);\n  }\n\n  highlightedItemChanged(\n      _from: SelectableLevel|null, _to: SelectableLevel|null, _fromElement: Element|null,\n      _toElement: Element|null): void {\n  }\n}\n\nexport class PlayerMessagesView extends UI.Widget.VBox {\n  private readonly headerPanel: HTMLElement;\n  private readonly bodyPanel: HTMLElement;\n  private messageLevelSelector?: MessageLevelSelector;\n\n  constructor() {\n    super();\n\n    this.headerPanel = this.contentElement.createChild('div', 'media-messages-header');\n    this.bodyPanel = this.contentElement.createChild('div', 'media-messages-body');\n\n    this.buildToolbar();\n  }\n\n  private buildToolbar(): void {\n    const toolbar = new UI.Toolbar.Toolbar('media-messages-toolbar', this.headerPanel);\n    toolbar.appendText(i18nString(UIStrings.logLevel));\n    toolbar.appendToolbarItem(this.createDropdown());\n    toolbar.appendSeparator();\n    toolbar.appendToolbarItem(this.createFilterInput());\n  }\n\n  private createDropdown(): UI.Toolbar.ToolbarItem {\n    const items = new UI.ListModel.ListModel<SelectableLevel>();\n    this.messageLevelSelector = new MessageLevelSelector(items, this);\n    const dropDown = new UI.SoftDropDown.SoftDropDown<SelectableLevel>(items, this.messageLevelSelector);\n    dropDown.setRowHeight(18);\n\n    this.messageLevelSelector.populate();\n    this.messageLevelSelector.setDefault(dropDown);\n\n    const dropDownItem = new UI.Toolbar.ToolbarItem(dropDown.element);\n    dropDownItem.element.classList.add('toolbar-has-dropdown');\n    dropDownItem.setEnabled(true);\n    dropDownItem.setTitle(this.messageLevelSelector.defaultTitle());\n    return dropDownItem;\n  }\n\n  private createFilterInput(): UI.Toolbar.ToolbarInput {\n    const filterInput = new UI.Toolbar.ToolbarInput(i18nString(UIStrings.filterLogMessages));\n    filterInput.addEventListener(UI.Toolbar.ToolbarInput.Event.TextChanged, (data: {data: string}) => {\n      this.filterByString(data as {\n        data: string,\n      });\n    }, this);\n    return filterInput;\n  }\n\n  regenerateMessageDisplayCss(hiddenLevels: string[]): void {\n    const messages = this.bodyPanel.getElementsByClassName('media-messages-message-container');\n    for (const message of messages) {\n      if (this.matchesHiddenLevels(message, hiddenLevels)) {\n        message.classList.add('media-messages-message-unselected');\n      } else {\n        message.classList.remove('media-messages-message-unselected');\n      }\n    }\n  }\n\n  private matchesHiddenLevels(element: Element, hiddenLevels: string[]): boolean {\n    for (const level of hiddenLevels) {\n      if (element.classList.contains('media-message-' + level)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private filterByString(userStringData: {data: string}): void {\n    const userString = userStringData.data;\n    const messages = this.bodyPanel.getElementsByClassName('media-messages-message-container');\n\n    for (const message of messages) {\n      if (userString === '') {\n        message.classList.remove('media-messages-message-filtered');\n      } else if (message.textContent && message.textContent.includes(userString)) {\n        message.classList.remove('media-messages-message-filtered');\n      } else {\n        message.classList.add('media-messages-message-filtered');\n      }\n    }\n  }\n\n  addMessage(message: Protocol.Media.PlayerMessage): void {\n    const container =\n        this.bodyPanel.createChild('div', 'media-messages-message-container media-message-' + message.level);\n    UI.UIUtils.createTextChild(container, message.message);\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([playerMessagesViewStyles]);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
