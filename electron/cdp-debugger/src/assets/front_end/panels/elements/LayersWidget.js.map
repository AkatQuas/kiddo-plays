{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/elements/LayersWidget.ts"],
  "sourcesContent": ["// Copyright (c) 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as TreeOutline from '../../ui/components/tree_outline/tree_outline.js';\n\nimport {ElementsPanel} from './ElementsPanel.js';\nimport layersWidgetStyles from './layersWidget.css.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\n\nconst UIStrings = {\n  /**\n  * @description Title of a section in the Element State Pane Widget of the Elements panel.\n  * The widget shows the layers present in the context of the currently selected node.\n  * */\n  cssLayersTitle: 'CSS layers',\n  /**\n  * @description Tooltip text in Element State Pane Widget of the Elements panel.\n  * For a button that opens a tool that shows the layers present in the current document.\n  */\n  toggleCSSLayers: 'Toggle CSS Layers view',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/elements/LayersWidget.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet layersWidgetInstance: LayersWidget;\n\nexport class LayersWidget extends UI.Widget.Widget {\n  private cssModel?: SDK.CSSModel.CSSModel|null;\n  private layerTreeComponent = new TreeOutline.TreeOutline.TreeOutline<string>();\n\n  constructor() {\n    super(true);\n\n    this.contentElement.className = 'styles-layers-pane';\n    UI.UIUtils.createTextChild(this.contentElement.createChild('div'), i18nString(UIStrings.cssLayersTitle));\n\n    this.contentElement.appendChild(this.layerTreeComponent);\n\n    UI.Context.Context.instance().addFlavorChangeListener(SDK.DOMModel.DOMNode, this.update, this);\n  }\n\n  private updateModel(cssModel: SDK.CSSModel.CSSModel|null): void {\n    if (this.cssModel === cssModel) {\n      return;\n    }\n    if (this.cssModel) {\n      this.cssModel.removeEventListener(SDK.CSSModel.Events.StyleSheetChanged, this.update, this);\n    }\n    this.cssModel = cssModel;\n    if (this.cssModel) {\n      this.cssModel.addEventListener(SDK.CSSModel.Events.StyleSheetChanged, this.update, this);\n    }\n  }\n\n  async wasShown(): Promise<void> {\n    super.wasShown();\n    this.registerCSSFiles([layersWidgetStyles]);\n    return this.update();\n  }\n\n  private async update(): Promise<void> {\n    if (!this.isShowing()) {\n      return;\n    }\n\n    let node = UI.Context.Context.instance().flavor(SDK.DOMModel.DOMNode);\n    if (node) {\n      node = node.enclosingElementOrSelf();\n    }\n    if (!node) {\n      // do something meaningful?\n      return;\n    }\n\n    this.updateModel(node.domModel().cssModel());\n    if (!this.cssModel) {\n      return;\n    }\n    const makeTreeNode = (parentId: string) =>\n        (layer: Protocol.CSS.CSSLayerData): TreeOutline.TreeOutlineUtils.TreeNode<string> => {\n          const subLayers = layer.subLayers;\n          const name = SDK.CSSModel.CSSModel.readableLayerName(layer.name);\n          const treeNodeData = layer.order + ': ' + name;\n          const id = parentId ? parentId + '.' + name : name;\n          if (!subLayers) {\n            return {treeNodeData, id};\n          }\n          return {\n            treeNodeData,\n            id,\n            children: (): Promise<TreeOutline.TreeOutlineUtils.TreeNode<string>[]> =>\n                Promise.resolve(subLayers.sort((layer1, layer2) => layer1.order - layer2.order).map(makeTreeNode(id))),\n          };\n        };\n    const rootLayer = await this.cssModel.getRootLayer(node.id);\n    this.layerTreeComponent.data = {\n      defaultRenderer: TreeOutline.TreeOutline.defaultRenderer,\n      tree: [makeTreeNode('')(rootLayer)],\n    };\n\n    // We only expand the first 5 user-defined layers to not make the\n    // view too overwhelming.\n    await this.layerTreeComponent.expandRecursively(5);\n  }\n\n  async revealLayer(layerName: string): Promise<void> {\n    if (!this.isShowing()) {\n      ElementsPanel.instance().showToolbarPane(this, ButtonProvider.instance().item());\n    }\n    await this.update();\n    return this.layerTreeComponent.expandToAndSelectTreeNodeId('implicit outer layer.' + layerName);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  }|undefined = {forceNew: null}): LayersWidget {\n    const {forceNew} = opts;\n    if (!layersWidgetInstance || forceNew) {\n      layersWidgetInstance = new LayersWidget();\n    }\n\n    return layersWidgetInstance;\n  }\n}\n\nlet buttonProviderInstance: ButtonProvider;\n\nexport class ButtonProvider implements UI.Toolbar.Provider {\n  private readonly button: UI.Toolbar.ToolbarToggle;\n  private constructor() {\n    const layersIcon = new IconButton.Icon.Icon();\n    layersIcon.data = {\n      iconName: 'ic_layers_16x16',\n      color: 'var(--color-text-secondary)',\n      width: '13px',\n      height: '13px',\n    };\n    this.button = new UI.Toolbar.ToolbarToggle(i18nString(UIStrings.toggleCSSLayers), layersIcon);\n    this.button.setVisible(false);\n    this.button.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.clicked, this);\n    this.button.element.classList.add('monospace');\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ButtonProvider {\n    const {forceNew} = opts;\n    if (!buttonProviderInstance || forceNew) {\n      buttonProviderInstance = new ButtonProvider();\n    }\n\n    return buttonProviderInstance;\n  }\n\n  private clicked(): void {\n    const view = LayersWidget.instance();\n    ElementsPanel.instance().showToolbarPane(!view.isShowing() ? view : null, this.button);\n  }\n\n  item(): UI.Toolbar.ToolbarToggle {\n    return this.button;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
