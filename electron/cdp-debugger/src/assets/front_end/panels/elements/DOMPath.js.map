{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/elements/DOMPath.ts"],
  "sourcesContent": ["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\n\nexport const fullQualifiedSelector = function(node: SDK.DOMModel.DOMNode, justSelector?: boolean): string {\n  if (node.nodeType() !== Node.ELEMENT_NODE) {\n    return node.localName() || node.nodeName().toLowerCase();\n  }\n  return cssPath(node, justSelector);\n};\n\nexport const cssPath = function(node: SDK.DOMModel.DOMNode, optimized?: boolean): string {\n  if (node.nodeType() !== Node.ELEMENT_NODE) {\n    return '';\n  }\n\n  const steps = [];\n  let contextNode: (SDK.DOMModel.DOMNode|null) = (node as SDK.DOMModel.DOMNode | null);\n  while (contextNode) {\n    const step = cssPathStep(contextNode, Boolean(optimized), contextNode === node);\n    if (!step) {\n      break;\n    }  // Error - bail out early.\n    steps.push(step);\n    if (step.optimized) {\n      break;\n    }\n    contextNode = contextNode.parentNode;\n  }\n\n  steps.reverse();\n  return steps.join(' > ');\n};\n\nexport const canGetJSPath = function(node: SDK.DOMModel.DOMNode): boolean {\n  let wp: (SDK.DOMModel.DOMNode|null)|SDK.DOMModel.DOMNode = node;\n  while (wp) {\n    const shadowRoot = wp.ancestorShadowRoot();\n    if (shadowRoot && shadowRoot.shadowRootType() !== SDK.DOMModel.DOMNode.ShadowRootTypes.Open) {\n      return false;\n    }\n    wp = wp.ancestorShadowHost();\n  }\n  return true;\n};\n\nexport const jsPath = function(node: SDK.DOMModel.DOMNode, optimized?: boolean): string {\n  if (node.nodeType() !== Node.ELEMENT_NODE) {\n    return '';\n  }\n\n  const path = [];\n  let wp: (SDK.DOMModel.DOMNode|null)|SDK.DOMModel.DOMNode = node;\n  while (wp) {\n    path.push(cssPath(wp, optimized));\n    wp = wp.ancestorShadowHost();\n  }\n  path.reverse();\n  let result = '';\n  for (let i = 0; i < path.length; ++i) {\n    const string = JSON.stringify(path[i]);\n    if (i) {\n      result += `.shadowRoot.querySelector(${string})`;\n    } else {\n      result += `document.querySelector(${string})`;\n    }\n  }\n  return result;\n};\n\nconst cssPathStep = function(node: SDK.DOMModel.DOMNode, optimized: boolean, isTargetNode: boolean): Step|null {\n  if (node.nodeType() !== Node.ELEMENT_NODE) {\n    return null;\n  }\n\n  const id = node.getAttribute('id');\n  if (optimized) {\n    if (id) {\n      return new Step(idSelector(id), true);\n    }\n    const nodeNameLower = node.nodeName().toLowerCase();\n    if (nodeNameLower === 'body' || nodeNameLower === 'head' || nodeNameLower === 'html') {\n      return new Step(node.nodeNameInCorrectCase(), true);\n    }\n  }\n  const nodeName = node.nodeNameInCorrectCase();\n\n  if (id) {\n    return new Step(nodeName + idSelector(id), true);\n  }\n  const parent = node.parentNode;\n  if (!parent || parent.nodeType() === Node.DOCUMENT_NODE) {\n    return new Step(nodeName, true);\n  }\n\n  function prefixedElementClassNames(node: SDK.DOMModel.DOMNode): string[] {\n    const classAttribute = node.getAttribute('class');\n    if (!classAttribute) {\n      return [];\n    }\n\n    return classAttribute.split(/\\s+/g).filter(Boolean).map(function(name) {\n      // The prefix is required to store \"__proto__\" in a object-based map.\n      return '$' + name;\n    });\n  }\n\n  function idSelector(id: string): string {\n    return '#' + CSS.escape(id);\n  }\n\n  const prefixedOwnClassNamesArray = prefixedElementClassNames(node);\n  let needsClassNames = false;\n  let needsNthChild = false;\n  let ownIndex = -1;\n  let elementIndex = -1;\n  const siblings = parent.children();\n  for (let i = 0; siblings && (ownIndex === -1 || !needsNthChild) && i < siblings.length; ++i) {\n    const sibling = siblings[i];\n    if (sibling.nodeType() !== Node.ELEMENT_NODE) {\n      continue;\n    }\n    elementIndex += 1;\n    if (sibling === node) {\n      ownIndex = elementIndex;\n      continue;\n    }\n    if (needsNthChild) {\n      continue;\n    }\n    if (sibling.nodeNameInCorrectCase() !== nodeName) {\n      continue;\n    }\n\n    needsClassNames = true;\n    const ownClassNames = new Set<string>(prefixedOwnClassNamesArray);\n    if (!ownClassNames.size) {\n      needsNthChild = true;\n      continue;\n    }\n    const siblingClassNamesArray = prefixedElementClassNames(sibling);\n    for (let j = 0; j < siblingClassNamesArray.length; ++j) {\n      const siblingClass = siblingClassNamesArray[j];\n      if (!ownClassNames.has(siblingClass)) {\n        continue;\n      }\n      ownClassNames.delete(siblingClass);\n      if (!ownClassNames.size) {\n        needsNthChild = true;\n        break;\n      }\n    }\n  }\n\n  let result = nodeName;\n  if (isTargetNode && nodeName.toLowerCase() === 'input' && node.getAttribute('type') && !node.getAttribute('id') &&\n      !node.getAttribute('class')) {\n    result += '[type=' + CSS.escape((node.getAttribute('type')) || '') + ']';\n  }\n  if (needsNthChild) {\n    result += ':nth-child(' + (ownIndex + 1) + ')';\n  } else if (needsClassNames) {\n    for (const prefixedName of prefixedOwnClassNamesArray) {\n      result += '.' + CSS.escape(prefixedName.slice(1));\n    }\n  }\n\n  return new Step(result, false);\n};\n\nexport const xPath = function(node: SDK.DOMModel.DOMNode, optimized?: boolean): string {\n  if (node.nodeType() === Node.DOCUMENT_NODE) {\n    return '/';\n  }\n\n  const steps = [];\n  let contextNode: (SDK.DOMModel.DOMNode|null) = (node as SDK.DOMModel.DOMNode | null);\n  while (contextNode) {\n    const step = xPathValue(contextNode, optimized);\n    if (!step) {\n      break;\n    }  // Error - bail out early.\n    steps.push(step);\n    if (step.optimized) {\n      break;\n    }\n    contextNode = contextNode.parentNode;\n  }\n\n  steps.reverse();\n  return (steps.length && steps[0].optimized ? '' : '/') + steps.join('/');\n};\n\nconst xPathValue = function(node: SDK.DOMModel.DOMNode, optimized?: boolean): Step|null {\n  let ownValue;\n  const ownIndex = xPathIndex(node);\n  if (ownIndex === -1) {\n    return null;\n  }  // Error.\n\n  switch (node.nodeType()) {\n    case Node.ELEMENT_NODE:\n      if (optimized && node.getAttribute('id')) {\n        return new Step('//*[@id=\"' + node.getAttribute('id') + '\"]', true);\n      }\n      ownValue = node.localName();\n      break;\n    case Node.ATTRIBUTE_NODE:\n      ownValue = '@' + node.nodeName();\n      break;\n    case Node.TEXT_NODE:\n    case Node.CDATA_SECTION_NODE:\n      ownValue = 'text()';\n      break;\n    case Node.PROCESSING_INSTRUCTION_NODE:\n      ownValue = 'processing-instruction()';\n      break;\n    case Node.COMMENT_NODE:\n      ownValue = 'comment()';\n      break;\n    case Node.DOCUMENT_NODE:\n      ownValue = '';\n      break;\n    default:\n      ownValue = '';\n      break;\n  }\n\n  if (ownIndex > 0) {\n    ownValue += '[' + ownIndex + ']';\n  }\n\n  return new Step(ownValue, node.nodeType() === Node.DOCUMENT_NODE);\n};\n\nconst xPathIndex = function(node: SDK.DOMModel.DOMNode): number {\n  /**\n   * Returns -1 in case of error, 0 if no siblings matching the same expression,\n   * <XPath index among the same expression-matching sibling nodes> otherwise.\n   */\n  function areNodesSimilar(left: SDK.DOMModel.DOMNode, right: SDK.DOMModel.DOMNode): boolean {\n    if (left === right) {\n      return true;\n    }\n\n    if (left.nodeType() === Node.ELEMENT_NODE && right.nodeType() === Node.ELEMENT_NODE) {\n      return left.localName() === right.localName();\n    }\n\n    if (left.nodeType() === right.nodeType()) {\n      return true;\n    }\n\n    // XPath treats CDATA as text nodes.\n    const leftType = left.nodeType() === Node.CDATA_SECTION_NODE ? Node.TEXT_NODE : left.nodeType();\n    const rightType = right.nodeType() === Node.CDATA_SECTION_NODE ? Node.TEXT_NODE : right.nodeType();\n    return leftType === rightType;\n  }\n\n  const siblings = node.parentNode ? node.parentNode.children() : null;\n  if (!siblings) {\n    return 0;\n  }  // Root node - no siblings.\n  let hasSameNamedElements;\n  for (let i = 0; i < siblings.length; ++i) {\n    if (areNodesSimilar(node, siblings[i]) && siblings[i] !== node) {\n      hasSameNamedElements = true;\n      break;\n    }\n  }\n  if (!hasSameNamedElements) {\n    return 0;\n  }\n  let ownIndex = 1;  // XPath indices start with 1.\n  for (let i = 0; i < siblings.length; ++i) {\n    if (areNodesSimilar(node, siblings[i])) {\n      if (siblings[i] === node) {\n        return ownIndex;\n      }\n      ++ownIndex;\n    }\n  }\n  return -1;  // An error occurred: |node| not found in parent's children.\n};\n\nexport class Step {\n  value: string;\n  optimized: boolean;\n  constructor(value: string, optimized: boolean) {\n    this.value = value;\n    this.optimized = optimized || false;\n  }\n\n  toString(): string {\n    return this.value;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
