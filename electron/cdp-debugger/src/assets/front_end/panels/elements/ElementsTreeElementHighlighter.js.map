{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/elements/ElementsTreeElementHighlighter.ts"],
  "sourcesContent": ["// Copyright (c) 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {ElementsTreeElement} from './ElementsTreeElement.js';\nimport {ElementsTreeOutline} from './ElementsTreeOutline.js';\n\nexport class ElementsTreeElementHighlighter {\n  private readonly throttler: Common.Throttler.Throttler;\n  private treeOutline: ElementsTreeOutline;\n  private currentHighlightedElement: ElementsTreeElement|null;\n  private alreadyExpandedParentElement: UI.TreeOutline.TreeElement|ElementsTreeElement|null|undefined;\n  private pendingHighlightNode: SDK.DOMModel.DOMNode|null;\n  private isModifyingTreeOutline: boolean;\n  constructor(treeOutline: ElementsTreeOutline) {\n    this.throttler = new Common.Throttler.Throttler(100);\n    this.treeOutline = treeOutline;\n    this.treeOutline.addEventListener(UI.TreeOutline.Events.ElementExpanded, this.clearState, this);\n    this.treeOutline.addEventListener(UI.TreeOutline.Events.ElementCollapsed, this.clearState, this);\n    this.treeOutline.addEventListener(ElementsTreeOutline.Events.SelectedNodeChanged, this.clearState, this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.OverlayModel.OverlayModel, SDK.OverlayModel.Events.HighlightNodeRequested, this.highlightNode, this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.OverlayModel.OverlayModel, SDK.OverlayModel.Events.InspectModeWillBeToggled, this.clearState, this);\n\n    this.currentHighlightedElement = null;\n    this.alreadyExpandedParentElement = null;\n    this.pendingHighlightNode = null;\n    this.isModifyingTreeOutline = false;\n  }\n\n  private highlightNode(event: Common.EventTarget.EventTargetEvent<SDK.DOMModel.DOMNode>): void {\n    if (!Common.Settings.Settings.instance().moduleSetting('highlightNodeOnHoverInOverlay').get()) {\n      return;\n    }\n\n    const domNode = event.data;\n\n    void this.throttler.schedule(async () => {\n      this.highlightNodeInternal(this.pendingHighlightNode);\n      this.pendingHighlightNode = null;\n    });\n    this.pendingHighlightNode =\n        this.treeOutline === ElementsTreeOutline.forDOMModel(domNode.domModel()) ? domNode : null;\n  }\n\n  private highlightNodeInternal(node: SDK.DOMModel.DOMNode|null): void {\n    this.isModifyingTreeOutline = true;\n    let treeElement: (ElementsTreeElement|null)|null = null;\n\n    if (this.currentHighlightedElement) {\n      let currentTreeElement: ((UI.TreeOutline.TreeElement & ElementsTreeElement)|null)|ElementsTreeElement =\n          this.currentHighlightedElement;\n      while (currentTreeElement && currentTreeElement !== this.alreadyExpandedParentElement) {\n        if (currentTreeElement.expanded) {\n          currentTreeElement.collapse();\n        }\n\n        const parent: UI.TreeOutline.TreeElement|null = currentTreeElement.parent;\n        currentTreeElement = parent instanceof ElementsTreeElement ? parent : null;\n      }\n    }\n\n    this.currentHighlightedElement = null;\n    this.alreadyExpandedParentElement = null;\n    if (node) {\n      let deepestExpandedParent: (SDK.DOMModel.DOMNode|null) = (node as SDK.DOMModel.DOMNode | null);\n      const treeElementByNode = this.treeOutline.treeElementByNode;\n\n      const treeIsNotExpanded = (deepestExpandedParent: SDK.DOMModel.DOMNode): boolean => {\n        const element = treeElementByNode.get(deepestExpandedParent);\n        return element ? !element.expanded : true;\n      };\n      while (deepestExpandedParent && treeIsNotExpanded(deepestExpandedParent)) {\n        deepestExpandedParent = deepestExpandedParent.parentNode;\n      }\n\n      this.alreadyExpandedParentElement =\n          deepestExpandedParent ? treeElementByNode.get(deepestExpandedParent) : this.treeOutline.rootElement();\n      treeElement = this.treeOutline.createTreeElementFor(node);\n    }\n\n    this.currentHighlightedElement = treeElement;\n    this.treeOutline.setHoverEffect(treeElement);\n    if (treeElement) {\n      treeElement.reveal(true);\n    }\n\n    this.isModifyingTreeOutline = false;\n  }\n\n  private clearState(): void {\n    if (this.isModifyingTreeOutline) {\n      return;\n    }\n\n    this.currentHighlightedElement = null;\n    this.alreadyExpandedParentElement = null;\n    this.pendingHighlightNode = null;\n  }\n}\n"],
  "mappings": "AAIA;AACA;AACA;AAEA;AACA;AAEO,4CAAqC;AAAA,EACzB;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACR,YAAY,aAAkC;AAC5C,SAAK,YAAY,IAAI,OAAO,UAAU,UAAU;AAChD,SAAK,cAAc;AACnB,SAAK,YAAY,iBAAiB,GAAG,YAAY,OAAO,iBAAiB,KAAK,YAAY;AAC1F,SAAK,YAAY,iBAAiB,GAAG,YAAY,OAAO,kBAAkB,KAAK,YAAY;AAC3F,SAAK,YAAY,iBAAiB,oBAAoB,OAAO,qBAAqB,KAAK,YAAY;AACnG,QAAI,cAAc,cAAc,WAAW,iBACvC,IAAI,aAAa,cAAc,IAAI,aAAa,OAAO,wBAAwB,KAAK,eAAe;AACvG,QAAI,cAAc,cAAc,WAAW,iBACvC,IAAI,aAAa,cAAc,IAAI,aAAa,OAAO,0BAA0B,KAAK,YAAY;AAEtG,SAAK,4BAA4B;AACjC,SAAK,+BAA+B;AACpC,SAAK,uBAAuB;AAC5B,SAAK,yBAAyB;AAAA;AAAA,EAGxB,cAAc,OAAwE;AAC5F,QAAI,CAAC,OAAO,SAAS,SAAS,WAAW,cAAc,iCAAiC,OAAO;AAC7F;AAAA;AAGF,UAAM,UAAU,MAAM;AAEtB,SAAK,KAAK,UAAU,SAAS,YAAY;AACvC,WAAK,sBAAsB,KAAK;AAChC,WAAK,uBAAuB;AAAA;AAE9B,SAAK,uBACD,KAAK,gBAAgB,oBAAoB,YAAY,QAAQ,cAAc,UAAU;AAAA;AAAA,EAGnF,sBAAsB,MAAuC;AACnE,SAAK,yBAAyB;AAC9B,QAAI,cAA+C;AAEnD,QAAI,KAAK,2BAA2B;AAClC,UAAI,qBACA,KAAK;AACT,aAAO,sBAAsB,uBAAuB,KAAK,8BAA8B;AACrF,YAAI,mBAAmB,UAAU;AAC/B,6BAAmB;AAAA;AAGrB,cAAM,SAA0C,mBAAmB;AACnE,6BAAqB,kBAAkB,sBAAsB,SAAS;AAAA;AAAA;AAI1E,SAAK,4BAA4B;AACjC,SAAK,+BAA+B;AACpC,QAAI,MAAM;AACR,UAAI,wBAAsD;AAC1D,YAAM,oBAAoB,KAAK,YAAY;AAE3C,YAAM,oBAAoB,CAAC,2BAAyD;AAClF,cAAM,UAAU,kBAAkB,IAAI;AACtC,eAAO,UAAU,CAAC,QAAQ,WAAW;AAAA;AAEvC,aAAO,yBAAyB,kBAAkB,wBAAwB;AACxE,gCAAwB,sBAAsB;AAAA;AAGhD,WAAK,+BACD,wBAAwB,kBAAkB,IAAI,yBAAyB,KAAK,YAAY;AAC5F,oBAAc,KAAK,YAAY,qBAAqB;AAAA;AAGtD,SAAK,4BAA4B;AACjC,SAAK,YAAY,eAAe;AAChC,QAAI,aAAa;AACf,kBAAY,OAAO;AAAA;AAGrB,SAAK,yBAAyB;AAAA;AAAA,EAGxB,aAAmB;AACzB,QAAI,KAAK,wBAAwB;AAC/B;AAAA;AAGF,SAAK,4BAA4B;AACjC,SAAK,+BAA+B;AACpC,SAAK,uBAAuB;AAAA;AAAA;",
  "names": []
}
