{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/elements/StylePropertyTreeElement.ts"],
  "sourcesContent": ["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as ColorPicker from '../../ui/legacy/components/color_picker/color_picker.js';\nimport * as InlineEditor from '../../ui/legacy/components/inline_editor/inline_editor.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {BezierPopoverIcon, ColorSwatchPopoverIcon, ShadowSwatchPopoverHelper} from './ColorSwatchPopoverIcon.js';\nimport * as ElementsComponents from './components/components.js';\nimport {ElementsPanel} from './ElementsPanel.js';\nimport {StyleEditorWidget} from './StyleEditorWidget.js';\nimport type {StylePropertiesSection} from './StylePropertiesSection.js';\nimport {CSSPropertyPrompt, StylesSidebarPane, StylesSidebarPropertyRenderer} from './StylesSidebarPane.js';\nimport {getCssDeclarationAsJavascriptProperty} from './StylePropertyUtils.js';\n\nconst FlexboxEditor = ElementsComponents.StylePropertyEditor.FlexboxEditor;\nconst GridEditor = ElementsComponents.StylePropertyEditor.GridEditor;\n\nconst UIStrings = {\n  /**\n  *@description Text in Color Swatch Popover Icon of the Elements panel\n  */\n  shiftClickToChangeColorFormat: 'Shift + Click to change color format.',\n  /**\n  *@description Swatch icon element title in Color Swatch Popover Icon of the Elements panel\n  *@example {Shift + Click to change color format.} PH1\n  */\n  openColorPickerS: 'Open color picker. {PH1}',\n  /**\n  *@description The warning text shown in Elements panel when font-variation-settings don't match allowed values\n  *@example {wdth} PH1\n  *@example {100} PH2\n  *@example {10} PH3\n  *@example {20} PH4\n  *@example {Arial} PH5\n  */\n  valueForSettingSSIsOutsideThe:\n      'Value for setting \u201C{PH1}\u201D {PH2} is outside the supported range [{PH3}, {PH4}] for font-family \u201C{PH5}\u201D.',\n  /**\n  *@description Context menu item for style property in edit mode\n  */\n  togglePropertyAndContinueEditing: 'Toggle property and continue editing',\n  /**\n  *@description Context menu item for style property in edit mode\n  */\n  revealInSourcesPanel: 'Reveal in Sources panel',\n  /**\n  *@description A context menu item in Styles panel to copy CSS declaration\n  */\n  copyDeclaration: 'Copy declaration',\n  /**\n  *@description A context menu item in Styles panel to copy CSS property\n  */\n  copyProperty: 'Copy property',\n  /**\n  *@description A context menu item in the Watch Expressions Sidebar Pane of the Sources panel and Network pane request.\n  */\n  copyValue: 'Copy value',\n  /**\n  *@description A context menu item in Styles panel to copy CSS rule\n  */\n  copyRule: 'Copy rule',\n  /**\n  *@description A context menu item in Styles panel to copy all CSS declarations\n  */\n  copyAllDeclarations: 'Copy all declarations',\n  /**\n  *@description  A context menu item in Styles panel to copy all the CSS changes\n  */\n  copyAllCSSChanges: 'Copy all CSS changes',\n  /**\n  *@description A context menu item in Styles panel to view the computed CSS property value.\n  */\n  viewComputedValue: 'View computed value',\n  /**\n  * @description Title of the button that opens the flexbox editor in the Styles panel.\n  */\n  flexboxEditorButton: 'Open `flexbox` editor',\n  /**\n  * @description Title of the button that opens the CSS Grid editor in the Styles panel.\n  */\n  gridEditorButton: 'Open `grid` editor',\n  /**\n  *@description A context menu item in Styles panel to copy CSS declaration as JavaScript property.\n  */\n  copyCssDeclarationAsJs: 'Copy declaration as JS',\n  /**\n  *@description A context menu item in Styles panel to copy all declarations of CSS rule as JavaScript properties.\n  */\n  copyAllCssDeclarationsAsJs: 'Copy all declarations as JS',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/elements/StylePropertyTreeElement.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst parentMap = new WeakMap<StylesSidebarPane, StylePropertyTreeElement>();\n\nexport class StylePropertyTreeElement extends UI.TreeOutline.TreeElement {\n  private readonly style: SDK.CSSStyleDeclaration.CSSStyleDeclaration;\n  private matchedStylesInternal: SDK.CSSMatchedStyles.CSSMatchedStyles;\n  property: SDK.CSSProperty.CSSProperty;\n  private readonly inheritedInternal: boolean;\n  private overloadedInternal: boolean;\n  private parentPaneInternal: StylesSidebarPane;\n  isShorthand: boolean;\n  private readonly applyStyleThrottler: Common.Throttler.Throttler;\n  private newProperty: boolean;\n  private expandedDueToFilter: boolean;\n  valueElement: HTMLElement|null;\n  nameElement: HTMLElement|null;\n  private expandElement: UI.Icon.Icon|null;\n  private originalPropertyText: string;\n  private hasBeenEditedIncrementally: boolean;\n  private prompt: CSSPropertyPrompt|null;\n  private lastComputedValue: string|null;\n  private contextForTest!: Context|undefined;\n  #propertyTextFromSource: string;\n\n  constructor(\n      stylesPane: StylesSidebarPane, matchedStyles: SDK.CSSMatchedStyles.CSSMatchedStyles,\n      property: SDK.CSSProperty.CSSProperty, isShorthand: boolean, inherited: boolean, overloaded: boolean,\n      newProperty: boolean) {\n    // Pass an empty title, the title gets made later in onattach.\n    super('', isShorthand);\n    this.style = property.ownerStyle;\n    this.matchedStylesInternal = matchedStyles;\n    this.property = property;\n    this.inheritedInternal = inherited;\n    this.overloadedInternal = overloaded;\n    this.selectable = false;\n    this.parentPaneInternal = stylesPane;\n    this.isShorthand = isShorthand;\n    this.applyStyleThrottler = new Common.Throttler.Throttler(0);\n    this.newProperty = newProperty;\n    if (this.newProperty) {\n      this.listItemElement.textContent = '';\n    }\n    this.expandedDueToFilter = false;\n    this.valueElement = null;\n    this.nameElement = null;\n    this.expandElement = null;\n    this.originalPropertyText = '';\n    this.hasBeenEditedIncrementally = false;\n    this.prompt = null;\n\n    this.lastComputedValue = null;\n\n    this.#propertyTextFromSource = property.propertyText || '';\n  }\n\n  matchedStyles(): SDK.CSSMatchedStyles.CSSMatchedStyles {\n    return this.matchedStylesInternal;\n  }\n\n  private editable(): boolean {\n    return Boolean(this.style.styleSheetId && this.style.range);\n  }\n\n  inherited(): boolean {\n    return this.inheritedInternal;\n  }\n\n  overloaded(): boolean {\n    return this.overloadedInternal;\n  }\n\n  setOverloaded(x: boolean): void {\n    if (x === this.overloadedInternal) {\n      return;\n    }\n    this.overloadedInternal = x;\n    this.updateState();\n  }\n\n  get name(): string {\n    return this.property.name;\n  }\n\n  get value(): string {\n    return this.property.value;\n  }\n\n  updateFilter(): boolean {\n    const regex = this.parentPaneInternal.filterRegex();\n    const matches = regex !== null && (regex.test(this.property.name) || regex.test(this.property.value));\n    this.listItemElement.classList.toggle('filter-match', matches);\n\n    void this.onpopulate();\n    let hasMatchingChildren = false;\n\n    for (let i = 0; i < this.childCount(); ++i) {\n      const child = (this.childAt(i) as StylePropertyTreeElement | null);\n      if (!child || (child && !child.updateFilter())) {\n        continue;\n      }\n      hasMatchingChildren = true;\n    }\n\n    if (!regex) {\n      if (this.expandedDueToFilter) {\n        this.collapse();\n      }\n      this.expandedDueToFilter = false;\n    } else if (hasMatchingChildren && !this.expanded) {\n      this.expand();\n      this.expandedDueToFilter = true;\n    } else if (!hasMatchingChildren && this.expanded && this.expandedDueToFilter) {\n      this.collapse();\n      this.expandedDueToFilter = false;\n    }\n    return matches;\n  }\n\n  private processColor(text: string, valueChild?: Node|null): Node {\n    const useUserSettingFormat = this.editable();\n    const shiftClickMessage = i18nString(UIStrings.shiftClickToChangeColorFormat);\n    const tooltip =\n        this.editable() ? i18nString(UIStrings.openColorPickerS, {PH1: shiftClickMessage}) : shiftClickMessage;\n\n    const swatch = new InlineEditor.ColorSwatch.ColorSwatch();\n    swatch.renderColor(text, useUserSettingFormat, tooltip);\n\n    if (!valueChild) {\n      valueChild = swatch.createChild('span');\n      const color = swatch.getColor();\n      valueChild.textContent = color ? color.asString(swatch.getFormat()) : text;\n    }\n    swatch.appendChild(valueChild);\n\n    const onFormatchanged = (event: InlineEditor.ColorSwatch.FormatChangedEvent): void => {\n      const {data} = event;\n      swatch.firstElementChild && swatch.firstElementChild.remove();\n      swatch.createChild('span').textContent = data.text;\n    };\n\n    swatch.addEventListener(InlineEditor.ColorSwatch.FormatChangedEvent.eventName, onFormatchanged);\n\n    if (this.editable()) {\n      void this.addColorContrastInfo(swatch);\n    }\n\n    return swatch;\n  }\n\n  private processVar(text: string): Node {\n    const computedSingleValue = this.matchedStylesInternal.computeSingleVariableValue(this.style, text);\n    if (!computedSingleValue) {\n      return document.createTextNode(text);\n    }\n\n    const {computedValue, fromFallback} = computedSingleValue;\n\n    const varSwatch = new InlineEditor.CSSVarSwatch.CSSVarSwatch();\n    UI.UIUtils.createTextChild(varSwatch, text);\n    varSwatch.data = {text, computedValue, fromFallback, onLinkActivate: this.handleVarDefinitionActivate.bind(this)};\n\n    if (!computedValue || !Common.Color.Color.parse(computedValue)) {\n      return varSwatch;\n    }\n\n    return this.processColor(computedValue, varSwatch);\n  }\n\n  private handleVarDefinitionActivate(variableName: string): void {\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.CustomPropertyLinkClicked);\n    this.parentPaneInternal.jumpToProperty(variableName);\n  }\n\n  private async addColorContrastInfo(swatch: InlineEditor.ColorSwatch.ColorSwatch): Promise<void> {\n    const swatchPopoverHelper = this.parentPaneInternal.swatchPopoverHelper();\n    const swatchIcon = new ColorSwatchPopoverIcon(this, swatchPopoverHelper, swatch);\n    if (this.property.name !== 'color' || !this.parentPaneInternal.cssModel() || !this.node()) {\n      return;\n    }\n    const cssModel = this.parentPaneInternal.cssModel();\n    const node = this.node();\n    if (cssModel && node && typeof node.id !== 'undefined') {\n      const contrastInfo = new ColorPicker.ContrastInfo.ContrastInfo(await cssModel.getBackgroundColors(node.id));\n      swatchIcon.setContrastInfo(contrastInfo);\n    }\n  }\n\n  renderedPropertyText(): string {\n    if (!this.nameElement || !this.valueElement) {\n      return '';\n    }\n    return this.nameElement.textContent + ': ' + this.valueElement.textContent;\n  }\n\n  private processBezier(text: string): Node {\n    if (!this.editable() || !UI.Geometry.CubicBezier.parse(text)) {\n      return document.createTextNode(text);\n    }\n    const swatchPopoverHelper = this.parentPaneInternal.swatchPopoverHelper();\n    const swatch = InlineEditor.Swatches.BezierSwatch.create();\n    swatch.setBezierText(text);\n    new BezierPopoverIcon(this, swatchPopoverHelper, swatch);\n    return swatch;\n  }\n\n  private processFont(text: string): Node {\n    const section = this.section();\n    if (section) {\n      section.registerFontProperty(this);\n    }\n    return document.createTextNode(text);\n  }\n\n  private processShadow(propertyValue: string, propertyName: string): Node {\n    if (!this.editable()) {\n      return document.createTextNode(propertyValue);\n    }\n    let shadows;\n    if (propertyName === 'text-shadow') {\n      shadows = InlineEditor.CSSShadowModel.CSSShadowModel.parseTextShadow(propertyValue);\n    } else {\n      shadows = InlineEditor.CSSShadowModel.CSSShadowModel.parseBoxShadow(propertyValue);\n    }\n    if (!shadows.length) {\n      return document.createTextNode(propertyValue);\n    }\n    const container = document.createDocumentFragment();\n    const swatchPopoverHelper = this.parentPaneInternal.swatchPopoverHelper();\n    for (let i = 0; i < shadows.length; i++) {\n      if (i !== 0) {\n        container.appendChild(document.createTextNode(', '));\n      }  // Add back commas and spaces between each shadow.\n      // TODO(flandy): editing the property value should use the original value with all spaces.\n      const cssShadowSwatch = InlineEditor.Swatches.CSSShadowSwatch.create();\n      cssShadowSwatch.setCSSShadow(shadows[i]);\n      new ShadowSwatchPopoverHelper(this, swatchPopoverHelper, cssShadowSwatch);\n      const colorSwatch = cssShadowSwatch.colorSwatch();\n      if (colorSwatch) {\n        new ColorSwatchPopoverIcon(this, swatchPopoverHelper, colorSwatch);\n      }\n      container.appendChild(cssShadowSwatch);\n    }\n    return container;\n  }\n\n  private processGrid(propertyValue: string, _propertyName: string): Node {\n    const splitResult =\n        TextUtils.TextUtils.Utils.splitStringByRegexes(propertyValue, [SDK.CSSMetadata.GridAreaRowRegex]);\n    if (splitResult.length <= 1) {\n      return document.createTextNode(propertyValue);\n    }\n\n    const indent = Common.Settings.Settings.instance().moduleSetting('textEditorIndent').get();\n    const container = document.createDocumentFragment();\n    for (const result of splitResult) {\n      const value = result.value.trim();\n      const content = UI.Fragment.html`<br /><span class='styles-clipboard-only'>${indent.repeat(2)}</span>${value}`;\n      container.appendChild(content);\n    }\n    return container;\n  }\n\n  private processAngle(angleText: string): Text|InlineEditor.CSSAngle.CSSAngle {\n    if (!this.editable()) {\n      return document.createTextNode(angleText);\n    }\n    const cssAngle = new InlineEditor.CSSAngle.CSSAngle();\n    const valueElement = document.createElement('span');\n    valueElement.textContent = angleText;\n    const computedPropertyValue =\n        this.matchedStylesInternal.computeValue(this.property.ownerStyle, this.property.value) || '';\n    cssAngle.data = {\n      propertyName: this.property.name,\n      propertyValue: computedPropertyValue,\n      angleText,\n      containingPane:\n          (this.parentPaneInternal.element.enclosingNodeOrSelfWithClass('style-panes-wrapper') as HTMLElement),\n    };\n    cssAngle.append(valueElement);\n\n    const popoverToggled = (event: Event): void => {\n      const section = this.section();\n      if (!section) {\n        return;\n      }\n\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const {data} = (event as any);\n      if (data.open) {\n        this.parentPaneInternal.hideAllPopovers();\n        this.parentPaneInternal.activeCSSAngle = cssAngle;\n      }\n\n      section.element.classList.toggle('has-open-popover', data.open);\n      this.parentPaneInternal.setEditingStyle(data.open);\n    };\n\n    const valueChanged = async(event: Event): Promise<void> => {\n      const {data} = (event as InlineEditor.InlineEditorUtils.ValueChangedEvent);\n\n      valueElement.textContent = data.value;\n      await this.applyStyleText(this.renderedPropertyText(), false);\n      const computedPropertyValue =\n          this.matchedStylesInternal.computeValue(this.property.ownerStyle, this.property.value) || '';\n      cssAngle.updateProperty(this.property.name, computedPropertyValue);\n    };\n\n    const unitChanged = async(event: Event): Promise<void> => {\n      const {data} = (event as InlineEditor.CSSAngle.UnitChangedEvent);\n      valueElement.textContent = data.value;\n    };\n\n    cssAngle.addEventListener('popovertoggled', popoverToggled);\n    cssAngle.addEventListener('valuechanged', valueChanged);\n    cssAngle.addEventListener('unitchanged', unitChanged);\n\n    return cssAngle;\n  }\n\n  private processLength(lengthText: string): Text|InlineEditor.CSSLength.CSSLength {\n    if (!this.editable()) {\n      return document.createTextNode(lengthText);\n    }\n    const cssLength = new InlineEditor.CSSLength.CSSLength();\n    const valueElement = document.createElement('span');\n    valueElement.textContent = lengthText;\n    cssLength.data = {\n      lengthText,\n    };\n    cssLength.append(valueElement);\n\n    const onValueChanged = (event: Event): void => {\n      const {data} = (event as InlineEditor.InlineEditorUtils.ValueChangedEvent);\n\n      valueElement.textContent = data.value;\n      this.parentPaneInternal.setEditingStyle(true);\n      void this.applyStyleText(this.renderedPropertyText(), false);\n    };\n\n    const onDraggingFinished = (): void => {\n      this.parentPaneInternal.setEditingStyle(false);\n    };\n\n    cssLength.addEventListener('valuechanged', onValueChanged);\n    cssLength.addEventListener('draggingfinished', onDraggingFinished);\n\n    return cssLength;\n  }\n\n  private updateState(): void {\n    if (!this.listItemElement) {\n      return;\n    }\n\n    if (this.style.isPropertyImplicit(this.name)) {\n      this.listItemElement.classList.add('implicit');\n    } else {\n      this.listItemElement.classList.remove('implicit');\n    }\n\n    const hasIgnorableError = !this.property.parsedOk && StylesSidebarPane.ignoreErrorsForProperty(this.property);\n    if (hasIgnorableError) {\n      this.listItemElement.classList.add('has-ignorable-error');\n    } else {\n      this.listItemElement.classList.remove('has-ignorable-error');\n    }\n\n    if (this.inherited()) {\n      this.listItemElement.classList.add('inherited');\n    } else {\n      this.listItemElement.classList.remove('inherited');\n    }\n\n    if (this.overloaded()) {\n      this.listItemElement.classList.add('overloaded');\n    } else {\n      this.listItemElement.classList.remove('overloaded');\n    }\n\n    if (this.property.disabled) {\n      this.listItemElement.classList.add('disabled');\n    } else {\n      this.listItemElement.classList.remove('disabled');\n    }\n\n    this.listItemElement.classList.toggle('changed', this.isPropertyChanged(this.property));\n  }\n\n  node(): SDK.DOMModel.DOMNode|null {\n    return this.parentPaneInternal.node();\n  }\n\n  parentPane(): StylesSidebarPane {\n    return this.parentPaneInternal;\n  }\n\n  section(): StylePropertiesSection|null {\n    if (!this.treeOutline) {\n      return null;\n    }\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (this.treeOutline as any).section;\n  }\n\n  private updatePane(): void {\n    const section = this.section();\n    if (section) {\n      section.refreshUpdate(this);\n    }\n  }\n\n  private async toggleDisabled(disabled: boolean): Promise<void> {\n    const oldStyleRange = this.style.range;\n    if (!oldStyleRange) {\n      return;\n    }\n\n    this.parentPaneInternal.setUserOperation(true);\n    const success = await this.property.setDisabled(disabled);\n    this.parentPaneInternal.setUserOperation(false);\n\n    if (!success) {\n      return;\n    }\n    this.matchedStylesInternal.resetActiveProperties();\n    this.updatePane();\n    this.styleTextAppliedForTest();\n  }\n\n  private isPropertyChanged(property: SDK.CSSProperty.CSSProperty): boolean {\n    if (!Root.Runtime.experiments.isEnabled(Root.Runtime.ExperimentName.STYLES_PANE_CSS_CHANGES)) {\n      return false;\n    }\n    // Check local cache first, then check against diffs from the workspace.\n    return this.#propertyTextFromSource !== property.propertyText || this.parentPane().isPropertyChanged(property);\n  }\n\n  async onpopulate(): Promise<void> {\n    // Only populate once and if this property is a shorthand.\n    if (this.childCount() || !this.isShorthand) {\n      return;\n    }\n\n    const longhandProperties = this.style.longhandProperties(this.name);\n    const leadingProperties = this.style.leadingProperties();\n\n    for (let i = 0; i < longhandProperties.length; ++i) {\n      const name = longhandProperties[i].name;\n      let inherited = false;\n      let overloaded = false;\n\n      const section = this.section();\n      if (section) {\n        inherited = section.isPropertyInherited(name);\n        overloaded = this.matchedStylesInternal.propertyState(longhandProperties[i]) ===\n            SDK.CSSMatchedStyles.PropertyState.Overloaded;\n      }\n\n      const leadingProperty = leadingProperties.find(property => property.name === name && property.activeInStyle());\n      if (leadingProperty) {\n        overloaded = true;\n      }\n\n      const item = new StylePropertyTreeElement(\n          this.parentPaneInternal, this.matchedStylesInternal, longhandProperties[i], false, inherited, overloaded,\n          false);\n      this.appendChild(item);\n    }\n  }\n\n  onattach(): void {\n    this.updateTitle();\n\n    this.listItemElement.addEventListener('mousedown', event => {\n      if (event.button === 0) {\n        parentMap.set(this.parentPaneInternal, this);\n      }\n    }, false);\n    this.listItemElement.addEventListener('mouseup', this.mouseUp.bind(this));\n    this.listItemElement.addEventListener('click', event => {\n      if (!event.target) {\n        return;\n      }\n\n      const node = (event.target as HTMLElement);\n      if (!node.hasSelection() && event.target !== this.listItemElement) {\n        event.consume(true);\n      }\n    });\n\n    // Copy context menu.\n    this.listItemElement.addEventListener('contextmenu', this.handleCopyContextMenuEvent.bind(this));\n  }\n\n  onexpand(): void {\n    this.updateExpandElement();\n  }\n\n  oncollapse(): void {\n    this.updateExpandElement();\n  }\n\n  private updateExpandElement(): void {\n    if (!this.expandElement) {\n      return;\n    }\n    if (this.expanded) {\n      this.expandElement.setIconType('smallicon-triangle-down');\n    } else {\n      this.expandElement.setIconType('smallicon-triangle-right');\n    }\n  }\n\n  updateTitleIfComputedValueChanged(): void {\n    const computedValue = this.matchedStylesInternal.computeValue(this.property.ownerStyle, this.property.value);\n    if (computedValue === this.lastComputedValue) {\n      return;\n    }\n    this.lastComputedValue = computedValue;\n    this.innerUpdateTitle();\n  }\n\n  updateTitle(): void {\n    this.lastComputedValue = this.matchedStylesInternal.computeValue(this.property.ownerStyle, this.property.value);\n    this.innerUpdateTitle();\n  }\n\n  private innerUpdateTitle(): void {\n    this.updateState();\n    if (this.isExpandable()) {\n      this.expandElement = UI.Icon.Icon.create('smallicon-triangle-right', 'expand-icon');\n    } else {\n      this.expandElement = null;\n    }\n\n    const propertyRenderer =\n        new StylesSidebarPropertyRenderer(this.style.parentRule, this.node(), this.name, this.value);\n    if (this.property.parsedOk) {\n      propertyRenderer.setVarHandler(this.processVar.bind(this));\n      propertyRenderer.setColorHandler(this.processColor.bind(this));\n      propertyRenderer.setBezierHandler(this.processBezier.bind(this));\n      propertyRenderer.setFontHandler(this.processFont.bind(this));\n      propertyRenderer.setShadowHandler(this.processShadow.bind(this));\n      propertyRenderer.setGridHandler(this.processGrid.bind(this));\n      propertyRenderer.setAngleHandler(this.processAngle.bind(this));\n      propertyRenderer.setLengthHandler(this.processLength.bind(this));\n    }\n\n    this.listItemElement.removeChildren();\n    this.nameElement = (propertyRenderer.renderName() as HTMLElement);\n    if (this.property.name.startsWith('--') && this.nameElement) {\n      UI.Tooltip.Tooltip.install(\n          this.nameElement, this.matchedStylesInternal.computeCSSVariable(this.style, this.property.name) || '');\n    }\n    this.valueElement = (propertyRenderer.renderValue() as HTMLElement);\n    if (!this.treeOutline) {\n      return;\n    }\n\n    const indent = Common.Settings.Settings.instance().moduleSetting('textEditorIndent').get();\n    UI.UIUtils.createTextChild(\n        this.listItemElement.createChild('span', 'styles-clipboard-only'),\n        indent + (this.property.disabled ? '/* ' : ''));\n    if (this.nameElement) {\n      this.listItemElement.appendChild(this.nameElement);\n    }\n    if (this.valueElement) {\n      const lineBreakValue =\n          this.valueElement.firstElementChild && this.valueElement.firstElementChild.tagName === 'BR';\n      const separator = lineBreakValue ? ':' : ': ';\n      this.listItemElement.createChild('span', 'styles-name-value-separator').textContent = separator;\n      if (this.expandElement) {\n        this.listItemElement.appendChild(this.expandElement);\n      }\n      this.listItemElement.appendChild(this.valueElement);\n      UI.UIUtils.createTextChild(this.listItemElement, ';');\n      if (this.property.disabled) {\n        UI.UIUtils.createTextChild(this.listItemElement.createChild('span', 'styles-clipboard-only'), ' */');\n      }\n    }\n\n    const section = this.section();\n    if (this.valueElement && section && section.editable && this.property.name === 'display') {\n      const propertyValue = this.property.trimmedValueWithoutImportant();\n      const isFlex = propertyValue === 'flex' || propertyValue === 'inline-flex';\n      const isGrid = propertyValue === 'grid' || propertyValue === 'inline-grid';\n      if (isFlex || isGrid) {\n        const key = `${section.getSectionIdx()}_${section.nextEditorTriggerButtonIdx}`;\n        const button = StyleEditorWidget.createTriggerButton(\n            this.parentPaneInternal, section, isFlex ? FlexboxEditor : GridEditor,\n            isFlex ? i18nString(UIStrings.flexboxEditorButton) : i18nString(UIStrings.gridEditorButton), key);\n        section.nextEditorTriggerButtonIdx++;\n        this.listItemElement.appendChild(button);\n        const helper = this.parentPaneInternal.swatchPopoverHelper();\n        if (helper.isShowing(StyleEditorWidget.instance()) && StyleEditorWidget.instance().getTriggerKey() === key) {\n          helper.setAnchorElement(button);\n        }\n      }\n    }\n\n    if (!this.property.parsedOk) {\n      // Avoid having longhands under an invalid shorthand.\n      this.listItemElement.classList.add('not-parsed-ok');\n\n      // Add a separate exclamation mark IMG element with a tooltip.\n      this.listItemElement.insertBefore(\n          StylesSidebarPane.createExclamationMark(this.property, null), this.listItemElement.firstChild);\n    } else {\n      void this.updateFontVariationSettingsWarning();\n    }\n\n    if (!this.property.activeInStyle()) {\n      this.listItemElement.classList.add('inactive');\n    }\n    this.updateFilter();\n\n    if (this.property.parsedOk && this.section() && this.parent && this.parent.root) {\n      const enabledCheckboxElement = document.createElement('input');\n      enabledCheckboxElement.className = 'enabled-button';\n      enabledCheckboxElement.type = 'checkbox';\n      enabledCheckboxElement.checked = !this.property.disabled;\n      enabledCheckboxElement.addEventListener('mousedown', event => event.consume(), false);\n      enabledCheckboxElement.addEventListener('click', event => {\n        void this.toggleDisabled(!this.property.disabled);\n        event.consume();\n      }, false);\n      if (this.nameElement && this.valueElement) {\n        UI.ARIAUtils.setAccessibleName(\n            enabledCheckboxElement, `${this.nameElement.textContent} ${this.valueElement.textContent}`);\n      }\n\n      const copyIcon = UI.Icon.Icon.create('largeicon-copy', 'copy');\n      UI.Tooltip.Tooltip.install(copyIcon, i18nString(UIStrings.copyDeclaration));\n      copyIcon.addEventListener('click', () => {\n        const propertyText = `${this.property.name}: ${this.property.value};`;\n        Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(propertyText);\n        Host.userMetrics.styleTextCopied(Host.UserMetrics.StyleTextCopied.DeclarationViaChangedLine);\n      });\n      this.listItemElement.append(copyIcon);\n      this.listItemElement.insertBefore(enabledCheckboxElement, this.listItemElement.firstChild);\n    }\n  }\n\n  private async updateFontVariationSettingsWarning(): Promise<void> {\n    if (this.property.name !== 'font-variation-settings') {\n      return;\n    }\n    const value = this.property.value;\n    const cssModel = this.parentPaneInternal.cssModel();\n    if (!cssModel) {\n      return;\n    }\n    const computedStyleModel = this.parentPaneInternal.computedStyleModel();\n    const styles = await computedStyleModel.fetchComputedStyle();\n    if (!styles) {\n      return;\n    }\n    const fontFamily = styles.computedStyle.get('font-family');\n    if (!fontFamily) {\n      return;\n    }\n    const fontFamilies = new Set<string>(SDK.CSSPropertyParser.parseFontFamily(fontFamily));\n    const matchingFontFaces = cssModel.fontFaces().filter(f => fontFamilies.has(f.getFontFamily()));\n    const variationSettings = SDK.CSSPropertyParser.parseFontVariationSettings(value);\n    const warnings = [];\n    for (const elementSetting of variationSettings) {\n      for (const font of matchingFontFaces) {\n        const fontSetting = font.getVariationAxisByTag(elementSetting.tag);\n        if (!fontSetting) {\n          continue;\n        }\n        if (elementSetting.value < fontSetting.minValue || elementSetting.value > fontSetting.maxValue) {\n          warnings.push(i18nString(UIStrings.valueForSettingSSIsOutsideThe, {\n            PH1: elementSetting.tag,\n            PH2: elementSetting.value,\n            PH3: fontSetting.minValue,\n            PH4: fontSetting.maxValue,\n            PH5: font.getFontFamily(),\n          }));\n        }\n      }\n    }\n\n    if (!warnings.length) {\n      return;\n    }\n    this.listItemElement.classList.add('has-warning');\n    this.listItemElement.insertBefore(\n        StylesSidebarPane.createExclamationMark(this.property, warnings.join(' ')), this.listItemElement.firstChild);\n  }\n\n  private mouseUp(event: MouseEvent): void {\n    const activeTreeElement = parentMap.get(this.parentPaneInternal);\n    parentMap.delete(this.parentPaneInternal);\n    if (!activeTreeElement) {\n      return;\n    }\n    if (this.listItemElement.hasSelection()) {\n      return;\n    }\n    if (UI.UIUtils.isBeingEdited((event.target as Node))) {\n      return;\n    }\n\n    event.consume(true);\n\n    if (event.target === this.listItemElement) {\n      return;\n    }\n\n    const section = this.section();\n    if (UI.KeyboardShortcut.KeyboardShortcut.eventHasCtrlEquivalentKey(event) && section && section.navigable) {\n      this.navigateToSource((event.target as Element));\n      return;\n    }\n    this.startEditing((event.target as Element));\n  }\n\n  private handleContextMenuEvent(context: Context, event: Event): void {\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    if (this.property.parsedOk && this.section() && this.parent && this.parent.root) {\n      const sectionIndex = this.parentPaneInternal.focusedSectionIndex();\n      contextMenu.defaultSection().appendCheckboxItem(\n          i18nString(UIStrings.togglePropertyAndContinueEditing), async () => {\n            if (this.treeOutline) {\n              const propertyIndex = this.treeOutline.rootElement().indexOfChild(this);\n              // order matters here: this.editingCancelled may invalidate this.treeOutline.\n              this.editingCancelled(null, context);\n              await this.toggleDisabled(!this.property.disabled);\n              event.consume();\n              this.parentPaneInternal.continueEditingElement(sectionIndex, propertyIndex);\n            }\n          }, !this.property.disabled);\n    }\n    const revealCallback = this.navigateToSource.bind(this) as () => void;\n    contextMenu.defaultSection().appendItem(i18nString(UIStrings.revealInSourcesPanel), revealCallback);\n    void contextMenu.show();\n  }\n\n  private handleCopyContextMenuEvent(event: Event): void {\n    const target = (event.target as Element | null);\n\n    if (!target) {\n      return;\n    }\n\n    const contextMenu = this.createCopyContextMenu(event);\n    void contextMenu.show();\n  }\n\n  createCopyContextMenu(event: Event): UI.ContextMenu.ContextMenu {\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    contextMenu.headerSection().appendItem(i18nString(UIStrings.copyDeclaration), () => {\n      const propertyText = `${this.property.name}: ${this.property.value};`;\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(propertyText);\n      Host.userMetrics.styleTextCopied(Host.UserMetrics.StyleTextCopied.DeclarationViaContextMenu);\n    });\n\n    contextMenu.headerSection().appendItem(i18nString(UIStrings.copyProperty), () => {\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(this.property.name);\n      Host.userMetrics.styleTextCopied(Host.UserMetrics.StyleTextCopied.PropertyViaContextMenu);\n    });\n\n    contextMenu.headerSection().appendItem(i18nString(UIStrings.copyValue), () => {\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(this.property.value);\n      Host.userMetrics.styleTextCopied(Host.UserMetrics.StyleTextCopied.ValueViaContextMenu);\n    });\n\n    contextMenu.headerSection().appendItem(i18nString(UIStrings.copyRule), () => {\n      const section = (this.section() as StylePropertiesSection);\n      const ruleText = StylesSidebarPane.formatLeadingProperties(section).ruleText;\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(ruleText);\n      Host.userMetrics.styleTextCopied(Host.UserMetrics.StyleTextCopied.RuleViaContextMenu);\n    });\n\n    contextMenu.headerSection().appendItem(\n        i18nString(UIStrings.copyCssDeclarationAsJs), this.copyCssDeclarationAsJs.bind(this));\n\n    contextMenu.clipboardSection().appendItem(i18nString(UIStrings.copyAllDeclarations), () => {\n      const section = (this.section() as StylePropertiesSection);\n      const allDeclarationText = StylesSidebarPane.formatLeadingProperties(section).allDeclarationText;\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(allDeclarationText);\n      Host.userMetrics.styleTextCopied(Host.UserMetrics.StyleTextCopied.AllDeclarationsViaContextMenu);\n    });\n\n    contextMenu.clipboardSection().appendItem(\n        i18nString(UIStrings.copyAllCssDeclarationsAsJs), this.copyAllCssDeclarationAsJs.bind(this));\n\n    // TODO(changhaohan): conditionally add this item only when there are changes to copy\n    contextMenu.defaultSection().appendItem(i18nString(UIStrings.copyAllCSSChanges), async () => {\n      const allChanges = await this.parentPane().getFormattedChanges();\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(allChanges);\n      Host.userMetrics.styleTextCopied(Host.UserMetrics.StyleTextCopied.AllChangesViaStylesPane);\n    });\n\n    contextMenu.footerSection().appendItem(i18nString(UIStrings.viewComputedValue), () => {\n      void this.viewComputedValue();\n    });\n\n    return contextMenu;\n  }\n\n  private async viewComputedValue(): Promise<void> {\n    const computedStyleWidget = ElementsPanel.instance().getComputedStyleWidget();\n\n    if (!computedStyleWidget.isShowing()) {\n      await UI.ViewManager.ViewManager.instance().showView('Computed');\n    }\n\n    let propertyNamePattern = '';\n    if (this.isShorthand) {\n      propertyNamePattern = '^' + this.property.name + '-';\n    } else {\n      propertyNamePattern = '^' + this.property.name + '$';\n    }\n    const regex = new RegExp(propertyNamePattern, 'i');\n    await computedStyleWidget.filterComputedStyles(regex);\n\n    const filterInput = (computedStyleWidget.input as HTMLInputElement);\n    filterInput.value = this.property.name;\n    filterInput.focus();\n  }\n\n  private copyCssDeclarationAsJs(): void {\n    const cssDeclarationValue = getCssDeclarationAsJavascriptProperty(this.property);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(cssDeclarationValue);\n    Host.userMetrics.styleTextCopied(Host.UserMetrics.StyleTextCopied.DeclarationAsJSViaContextMenu);\n  }\n\n  private copyAllCssDeclarationAsJs(): void {\n    const section = this.section() as StylePropertiesSection;\n    const leadingProperties = (section.style()).leadingProperties();\n    const cssDeclarationsAsJsProperties =\n        leadingProperties.filter(property => !property.disabled).map(getCssDeclarationAsJavascriptProperty);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(cssDeclarationsAsJsProperties.join(',\\n'));\n    Host.userMetrics.styleTextCopied(Host.UserMetrics.StyleTextCopied.AllDeclarationsAsJSViaContextMenu);\n  }\n\n  private navigateToSource(element: Element, omitFocus?: boolean): void {\n    const section = this.section();\n    if (!section || !section.navigable) {\n      return;\n    }\n    const propertyNameClicked = element === this.nameElement;\n    const uiLocation = Bindings.CSSWorkspaceBinding.CSSWorkspaceBinding.instance().propertyUILocation(\n        this.property, propertyNameClicked);\n    if (uiLocation) {\n      void Common.Revealer.reveal(uiLocation, omitFocus);\n    }\n  }\n\n  startEditing(selectElement?: Element|null): void {\n    // FIXME: we don't allow editing of longhand properties under a shorthand right now.\n    if (this.parent instanceof StylePropertyTreeElement && this.parent.isShorthand) {\n      return;\n    }\n\n    if (this.expandElement && selectElement === this.expandElement) {\n      return;\n    }\n\n    const section = this.section();\n    if (section && !section.editable) {\n      return;\n    }\n\n    if (selectElement) {\n      selectElement = selectElement.enclosingNodeOrSelfWithClass('webkit-css-property') ||\n          selectElement.enclosingNodeOrSelfWithClass('value');\n    }\n    if (!selectElement) {\n      selectElement = this.nameElement;\n    }\n\n    if (UI.UIUtils.isBeingEdited(selectElement)) {\n      return;\n    }\n\n    const isEditingName = selectElement === this.nameElement;\n    if (!isEditingName && this.valueElement) {\n      if (SDK.CSSMetadata.cssMetadata().isGridAreaDefiningProperty(this.name)) {\n        this.valueElement.textContent = restoreGridIndents(this.value);\n      }\n      this.valueElement.textContent = restoreURLs(this.valueElement.textContent || '', this.value);\n    }\n\n    function restoreGridIndents(value: string): string {\n      const splitResult = TextUtils.TextUtils.Utils.splitStringByRegexes(value, [SDK.CSSMetadata.GridAreaRowRegex]);\n      return splitResult.map(result => result.value.trim()).join('\\n');\n    }\n\n    function restoreURLs(fieldValue: string, modelValue: string): string {\n      const splitFieldValue = fieldValue.split(SDK.CSSMetadata.URLRegex);\n      if (splitFieldValue.length === 1) {\n        return fieldValue;\n      }\n      const modelUrlRegex = new RegExp(SDK.CSSMetadata.URLRegex);\n      for (let i = 1; i < splitFieldValue.length; i += 2) {\n        const match = modelUrlRegex.exec(modelValue);\n        if (match) {\n          splitFieldValue[i] = match[0];\n        }\n      }\n      return splitFieldValue.join('');\n    }\n\n    const previousContent = selectElement ? (selectElement.textContent || '') : '';\n\n    const context: Context = {\n      expanded: this.expanded,\n      hasChildren: this.isExpandable(),\n      isEditingName: isEditingName,\n      originalProperty: this.property,\n      previousContent: previousContent,\n      originalName: undefined,\n      originalValue: undefined,\n    };\n    this.contextForTest = context;\n\n    // Lie about our children to prevent expanding on double click and to collapse shorthands.\n    this.setExpandable(false);\n\n    if (selectElement) {\n      if (selectElement.parentElement) {\n        selectElement.parentElement.classList.add('child-editing');\n      }\n      selectElement.textContent = selectElement.textContent;  // remove color swatch and the like\n    }\n\n    function pasteHandler(this: StylePropertyTreeElement, context: Context, event: Event): void {\n      const clipboardEvent = (event as ClipboardEvent);\n      const clipboardData = clipboardEvent.clipboardData;\n      if (!clipboardData) {\n        return;\n      }\n\n      const data = clipboardData.getData('Text');\n      if (!data) {\n        return;\n      }\n      const colonIdx = data.indexOf(':');\n      if (colonIdx < 0) {\n        return;\n      }\n      const name = data.substring(0, colonIdx).trim();\n      const value = data.substring(colonIdx + 1).trim();\n\n      event.preventDefault();\n\n      if (typeof context.originalName === 'undefined') {\n        if (this.nameElement) {\n          context.originalName = this.nameElement.textContent || '';\n        }\n\n        if (this.valueElement) {\n          context.originalValue = this.valueElement.textContent || '';\n        }\n      }\n      this.property.name = name;\n      this.property.value = value;\n      if (this.nameElement) {\n        this.nameElement.textContent = name;\n        this.nameElement.normalize();\n      }\n\n      if (this.valueElement) {\n        this.valueElement.textContent = value;\n        this.valueElement.normalize();\n      }\n\n      const target = (event.target as HTMLElement);\n      void this.editingCommitted(target.textContent || '', context, 'forward');\n    }\n\n    function blurListener(this: StylePropertyTreeElement, context: Context, event: Event): void {\n      const target = (event.target as HTMLElement);\n      let text: (string|null) = target.textContent;\n      if (!context.isEditingName) {\n        text = this.value || text;\n      }\n      void this.editingCommitted(text || '', context, '');\n    }\n\n    this.originalPropertyText = this.property.propertyText || '';\n\n    this.parentPaneInternal.setEditingStyle(true, this);\n    if (selectElement && selectElement.parentElement) {\n      selectElement.parentElement.scrollIntoViewIfNeeded(false);\n    }\n\n    this.prompt = new CSSPropertyPrompt(this, isEditingName);\n    this.prompt.setAutocompletionTimeout(0);\n\n    this.prompt.addEventListener(UI.TextPrompt.Events.TextChanged, _event => {\n      void this.applyFreeFlowStyleTextEdit(context);\n    });\n\n    const invalidString = this.property.getInvalidStringForInvalidProperty();\n    if (invalidString && selectElement) {\n      UI.ARIAUtils.alert(invalidString);\n    }\n\n    if (selectElement) {\n      const proxyElement = this.prompt.attachAndStartEditing(selectElement, blurListener.bind(this, context));\n      this.navigateToSource(selectElement, true);\n\n      proxyElement.addEventListener('keydown', this.editingNameValueKeyDown.bind(this, context), false);\n      proxyElement.addEventListener('keypress', this.editingNameValueKeyPress.bind(this, context), false);\n      if (isEditingName) {\n        proxyElement.addEventListener('paste', pasteHandler.bind(this, context), false);\n        proxyElement.addEventListener('contextmenu', this.handleContextMenuEvent.bind(this, context), false);\n      }\n\n      const componentSelection = selectElement.getComponentSelection();\n      if (componentSelection) {\n        componentSelection.selectAllChildren(selectElement);\n      }\n    }\n  }\n\n  private editingNameValueKeyDown(context: Context, event: Event): void {\n    if (event.handled) {\n      return;\n    }\n\n    const keyboardEvent = (event as KeyboardEvent);\n    const target = (keyboardEvent.target as HTMLElement);\n    let result;\n    if (keyboardEvent.key === 'Enter' && !keyboardEvent.shiftKey) {\n      result = 'forward';\n    } else if (\n        keyboardEvent.keyCode === UI.KeyboardShortcut.Keys.Esc.code ||\n        keyboardEvent.key === Platform.KeyboardUtilities.ESCAPE_KEY) {\n      result = 'cancel';\n    } else if (\n        !context.isEditingName && this.newProperty &&\n        keyboardEvent.keyCode === UI.KeyboardShortcut.Keys.Backspace.code) {\n      // For a new property, when Backspace is pressed at the beginning of new property value, move back to the property name.\n      const selection = target.getComponentSelection();\n      if (selection && selection.isCollapsed && !selection.focusOffset) {\n        event.preventDefault();\n        result = 'backward';\n      }\n    } else if (keyboardEvent.key === 'Tab') {\n      result = keyboardEvent.shiftKey ? 'backward' : 'forward';\n      event.preventDefault();\n    }\n\n    if (result) {\n      switch (result) {\n        case 'cancel':\n          this.editingCancelled(null, context);\n          break;\n        case 'forward':\n        case 'backward':\n          void this.editingCommitted(target.textContent || '', context, result);\n          break;\n      }\n\n      event.consume();\n      return;\n    }\n  }\n\n  private editingNameValueKeyPress(context: Context, event: Event): void {\n    function shouldCommitValueSemicolon(text: string, cursorPosition: number): boolean {\n      // FIXME: should this account for semicolons inside comments?\n      let openQuote = '';\n      for (let i = 0; i < cursorPosition; ++i) {\n        const ch = text[i];\n        if (ch === '\\\\' && openQuote !== '') {\n          ++i;\n        }  // skip next character inside string\n        else if (!openQuote && (ch === '\"' || ch === '\\'')) {\n          openQuote = ch;\n        } else if (openQuote === ch) {\n          openQuote = '';\n        }\n      }\n      return !openQuote;\n    }\n\n    const keyboardEvent = (event as KeyboardEvent);\n    const target = (keyboardEvent.target as HTMLElement);\n    const keyChar = String.fromCharCode(keyboardEvent.charCode);\n    const selectionLeftOffset = target.selectionLeftOffset();\n    const isFieldInputTerminated =\n        (context.isEditingName ? keyChar === ':' :\n                                 keyChar === ';' && selectionLeftOffset !== null &&\n                 shouldCommitValueSemicolon(target.textContent || '', selectionLeftOffset));\n    if (isFieldInputTerminated) {\n      // Enter or colon (for name)/semicolon outside of string (for value).\n      event.consume(true);\n      void this.editingCommitted(target.textContent || '', context, 'forward');\n      return;\n    }\n  }\n\n  private async applyFreeFlowStyleTextEdit(context: Context): Promise<void> {\n    if (!this.prompt || !this.parentPaneInternal.node()) {\n      return;\n    }\n\n    const enteredText = this.prompt.text();\n    if (context.isEditingName && enteredText.includes(':')) {\n      void this.editingCommitted(enteredText, context, 'forward');\n      return;\n    }\n\n    const valueText = this.prompt.textWithCurrentSuggestion();\n    if (valueText.includes(';')) {\n      return;\n    }\n    // Prevent destructive side-effects during live-edit. crbug.com/433889\n    const parentNode = this.parentPaneInternal.node();\n    if (parentNode) {\n      const isPseudo = Boolean(parentNode.pseudoType());\n      if (isPseudo) {\n        if (this.name.toLowerCase() === 'content') {\n          return;\n        }\n        const lowerValueText = valueText.trim().toLowerCase();\n        if (lowerValueText.startsWith('content:') || lowerValueText === 'display: none') {\n          return;\n        }\n      }\n    }\n\n    if (context.isEditingName) {\n      if (valueText.includes(':')) {\n        await this.applyStyleText(valueText, false);\n      } else if (this.hasBeenEditedIncrementally) {\n        await this.applyOriginalStyle(context);\n      }\n    } else {\n      if (this.nameElement) {\n        await this.applyStyleText(`${this.nameElement.textContent}: ${valueText}`, false);\n      }\n    }\n  }\n\n  kickFreeFlowStyleEditForTest(): Promise<void> {\n    const context = this.contextForTest;\n    return this.applyFreeFlowStyleTextEdit((context as Context));\n  }\n\n  editingEnded(context: Context): void {\n    this.setExpandable(context.hasChildren);\n    if (context.expanded) {\n      this.expand();\n    }\n    const editedElement = context.isEditingName ? this.nameElement : this.valueElement;\n    // The proxyElement has been deleted, no need to remove listener.\n    if (editedElement && editedElement.parentElement) {\n      editedElement.parentElement.classList.remove('child-editing');\n    }\n\n    this.parentPaneInternal.setEditingStyle(false);\n  }\n\n  editingCancelled(element: Element|null, context: Context): void {\n    this.removePrompt();\n\n    if (this.hasBeenEditedIncrementally) {\n      void this.applyOriginalStyle(context);\n    } else if (this.newProperty && this.treeOutline) {\n      this.treeOutline.removeChild(this);\n    }\n    this.updateTitle();\n\n    // This should happen last, as it clears the info necessary to restore the property value after [Page]Up/Down changes.\n    this.editingEnded(context);\n  }\n\n  private async applyOriginalStyle(context: Context): Promise<void> {\n    await this.applyStyleText(this.originalPropertyText, false, context.originalProperty);\n  }\n\n  private findSibling(moveDirection: string): StylePropertyTreeElement|null {\n    let target: (StylePropertyTreeElement|null)|this = this;\n    do {\n      const sibling: UI.TreeOutline.TreeElement|null =\n          moveDirection === 'forward' ? target.nextSibling : target.previousSibling;\n      target = sibling instanceof StylePropertyTreeElement ? sibling : null;\n    } while (target && target.inherited());\n\n    return target;\n  }\n\n  private async editingCommitted(userInput: string, context: Context, moveDirection: string): Promise<void> {\n    this.removePrompt();\n    this.editingEnded(context);\n    const isEditingName = context.isEditingName;\n    // If the underlying property has been ripped out, always assume that the value having been entered was\n    // a name-value pair and attempt to process it via the SDK.\n    if (!this.nameElement || !this.valueElement) {\n      return;\n    }\n\n    const nameElementValue = this.nameElement.textContent || '';\n    const nameValueEntered = (isEditingName && nameElementValue.includes(':')) || !this.property;\n\n    // Determine where to move to before making changes\n    let createNewProperty = false;\n    let moveToSelector = false;\n    const isDataPasted = typeof context.originalName !== 'undefined';\n    const isDirtyViaPaste = isDataPasted &&\n        (this.nameElement.textContent !== context.originalName ||\n         this.valueElement.textContent !== context.originalValue);\n    const isPropertySplitPaste =\n        isDataPasted && isEditingName && this.valueElement.textContent !== context.originalValue;\n    let moveTo: (StylePropertyTreeElement|null)|this = this;\n    const moveToOther = (isEditingName !== (moveDirection === 'forward'));\n    const abandonNewProperty = this.newProperty && !userInput && (moveToOther || isEditingName);\n    if (moveDirection === 'forward' && (!isEditingName || isPropertySplitPaste) ||\n        moveDirection === 'backward' && isEditingName) {\n      moveTo = moveTo.findSibling(moveDirection);\n      if (!moveTo) {\n        if (moveDirection === 'forward' && (!this.newProperty || userInput)) {\n          createNewProperty = true;\n        } else if (moveDirection === 'backward') {\n          moveToSelector = true;\n        }\n      }\n    }\n\n    // Make the Changes and trigger the moveToNextCallback after updating.\n    let moveToIndex = -1;\n    if (moveTo !== null && this.treeOutline) {\n      moveToIndex = this.treeOutline.rootElement().indexOfChild((moveTo as UI.TreeOutline.TreeElement));\n    }\n    const blankInput = Platform.StringUtilities.isWhitespace(userInput);\n    const shouldCommitNewProperty = this.newProperty &&\n        (isPropertySplitPaste || moveToOther || (!moveDirection && !isEditingName) || (isEditingName && blankInput) ||\n         nameValueEntered);\n    const section = (this.section() as StylePropertiesSection);\n    if (((userInput !== context.previousContent || isDirtyViaPaste) && !this.newProperty) || shouldCommitNewProperty) {\n      let propertyText;\n      if (nameValueEntered) {\n        propertyText = this.nameElement.textContent;\n      } else if (\n          blankInput ||\n          (this.newProperty && Platform.StringUtilities.isWhitespace(this.valueElement.textContent || ''))) {\n        propertyText = '';\n      } else {\n        if (isEditingName) {\n          propertyText = userInput + ': ' + this.property.value;\n        } else {\n          propertyText = this.property.name + ': ' + userInput;\n        }\n      }\n      await this.applyStyleText(propertyText || '', true);\n      moveToNextCallback.call(this, this.newProperty, !blankInput, section);\n    } else {\n      if (isEditingName) {\n        this.property.name = userInput;\n      } else {\n        this.property.value = userInput;\n      }\n      if (!isDataPasted && !this.newProperty) {\n        this.updateTitle();\n      }\n      moveToNextCallback.call(this, this.newProperty, false, section);\n    }\n\n    /**\n     * The Callback to start editing the next/previous property/selector.\n     */\n    function moveToNextCallback(\n        this: StylePropertyTreeElement, alreadyNew: boolean, valueChanged: boolean,\n        section: StylePropertiesSection): void {\n      if (!moveDirection) {\n        this.parentPaneInternal.resetFocus();\n        return;\n      }\n\n      // User just tabbed through without changes.\n      if (moveTo && moveTo.parent) {\n        moveTo.startEditing(!isEditingName ? moveTo.nameElement : moveTo.valueElement);\n        return;\n      }\n\n      // User has made a change then tabbed, wiping all the original treeElements.\n      // Recalculate the new treeElement for the same property we were going to edit next.\n      if (moveTo && !moveTo.parent) {\n        const rootElement = section.propertiesTreeOutline.rootElement();\n        if (moveDirection === 'forward' && blankInput && !isEditingName) {\n          --moveToIndex;\n        }\n        if (moveToIndex >= rootElement.childCount() && !this.newProperty) {\n          createNewProperty = true;\n        } else {\n          const treeElement =\n              (moveToIndex >= 0 ? rootElement.childAt(moveToIndex) : null) as StylePropertyTreeElement | null;\n          if (treeElement) {\n            let elementToEdit =\n                !isEditingName || isPropertySplitPaste ? treeElement.nameElement : treeElement.valueElement;\n            if (alreadyNew && blankInput) {\n              elementToEdit = moveDirection === 'forward' ? treeElement.nameElement : treeElement.valueElement;\n            }\n            treeElement.startEditing(elementToEdit);\n            return;\n          }\n          if (!alreadyNew) {\n            moveToSelector = true;\n          }\n        }\n      }\n\n      // Create a new attribute in this section (or move to next editable selector if possible).\n      if (createNewProperty) {\n        if (alreadyNew && !valueChanged && (isEditingName !== (moveDirection === 'backward'))) {\n          return;\n        }\n\n        section.addNewBlankProperty().startEditing();\n        return;\n      }\n\n      if (abandonNewProperty) {\n        moveTo = this.findSibling(moveDirection);\n        const sectionToEdit = (moveTo || moveDirection === 'backward') ? section : section.nextEditableSibling();\n        if (sectionToEdit) {\n          if (sectionToEdit.style().parentRule) {\n            sectionToEdit.startEditingSelector();\n          } else {\n            sectionToEdit.moveEditorFromSelector(moveDirection);\n          }\n        }\n        return;\n      }\n\n      if (moveToSelector) {\n        if (section.style().parentRule) {\n          section.startEditingSelector();\n        } else {\n          section.moveEditorFromSelector(moveDirection);\n        }\n      }\n    }\n  }\n\n  private removePrompt(): void {\n    // BUG 53242. This cannot go into editingEnded(), as it should always happen first for any editing outcome.\n    if (this.prompt) {\n      this.prompt.detach();\n      this.prompt = null;\n    }\n  }\n\n  styleTextAppliedForTest(): void {\n  }\n\n  applyStyleText(styleText: string, majorChange: boolean, property?: SDK.CSSProperty.CSSProperty|null): Promise<void> {\n    return this.applyStyleThrottler.schedule(this.innerApplyStyleText.bind(this, styleText, majorChange, property));\n  }\n\n  private async innerApplyStyleText(\n      styleText: string, majorChange: boolean, property?: SDK.CSSProperty.CSSProperty|null): Promise<void> {\n    // this.property might have been nulled at the end of the last innerApplyStyleText\n    if (!this.treeOutline || !this.property) {\n      return;\n    }\n\n    const oldStyleRange = this.style.range;\n    if (!oldStyleRange) {\n      return;\n    }\n\n    const hasBeenEditedIncrementally = this.hasBeenEditedIncrementally;\n    styleText = styleText.replace(/[\\xA0\\t]/g, ' ').trim();  // Replace &nbsp; with whitespace.\n    if (!styleText.length && majorChange && this.newProperty && !hasBeenEditedIncrementally) {\n      // The user deleted everything and never applied a new property value via Up/Down scrolling/live editing, so remove the tree element and update.\n      this.parent && this.parent.removeChild(this);\n      return;\n    }\n\n    const currentNode = this.parentPaneInternal.node();\n    this.parentPaneInternal.setUserOperation(true);\n\n    styleText += Platform.StringUtilities.findUnclosedCssQuote(styleText);\n\n    // Append a \";\" if the new text does not end in \";\".\n    // FIXME: this does not handle trailing comments.\n    if (styleText.length && !/;\\s*$/.test(styleText)) {\n      styleText += ';';\n    }\n\n    const overwriteProperty = !this.newProperty || hasBeenEditedIncrementally;\n    let success: boolean = await this.property.setText(styleText, majorChange, overwriteProperty);\n    // Revert to the original text if applying the new text failed\n    if (hasBeenEditedIncrementally && majorChange && !success) {\n      majorChange = false;\n      success = await this.property.setText(this.originalPropertyText, majorChange, overwriteProperty);\n    }\n    this.parentPaneInternal.setUserOperation(false);\n\n    // TODO: using this.property.index to access its containing StyleDeclaration's property will result in\n    // off-by-1 errors when the containing StyleDeclaration's respective property has already been deleted.\n    // These referencing logic needs to be updated to be more robust.\n    const updatedProperty = property || this.style.propertyAt(this.property.index);\n    const isPropertyWithinBounds = this.property.index < this.style.allProperties().length;\n    if (!success || (!updatedProperty && isPropertyWithinBounds)) {\n      if (majorChange) {\n        // It did not apply, cancel editing.\n        if (this.newProperty) {\n          this.treeOutline.removeChild(this);\n        } else {\n          this.updateTitle();\n        }\n      }\n      this.styleTextAppliedForTest();\n      return;\n    }\n    if (updatedProperty) {\n      this.listItemElement.classList.toggle('changed', this.isPropertyChanged(updatedProperty));\n      this.parentPane().updateChangeStatus();\n    }\n\n    this.matchedStylesInternal.resetActiveProperties();\n    this.hasBeenEditedIncrementally = true;\n\n    // null check for updatedProperty before setting this.property as the code never expects this.property to be undefined or null.\n    // This occurs when deleting the last index of a StylePropertiesSection as this.style._allProperties array gets updated\n    // before we index it when setting the value for updatedProperty\n    const deleteProperty = majorChange && !styleText.length;\n    const section = this.section();\n    if (deleteProperty && section) {\n      section.resetToolbars();\n    } else if (!deleteProperty && updatedProperty) {\n      this.property = updatedProperty;\n    }\n\n    if (currentNode === this.node()) {\n      this.updatePane();\n    }\n\n    this.styleTextAppliedForTest();\n  }\n\n  ondblclick(): boolean {\n    return true;  // handled\n  }\n\n  isEventWithinDisclosureTriangle(event: Event): boolean {\n    return event.target === this.expandElement;\n  }\n}\nexport interface Context {\n  expanded: boolean;\n  hasChildren: boolean;\n  isEditingName: boolean;\n  originalProperty?: SDK.CSSProperty.CSSProperty;\n  originalName?: string;\n  originalValue?: string;\n  previousContent: string;\n}\n"],
  "mappings": "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",
  "names": []
}
