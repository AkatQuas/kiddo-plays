{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/elements/ImagePreviewPopover.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../core/platform/platform.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\n/**\n * ImagePreviewPopover sets listeners on the container element to display\n * an image preview if needed. The image URL comes from the event (mouseover) target\n * in a propery identified by HrefSymbol. To enable preview for any child element\n * set the property HrefSymbol.\n */\nexport class ImagePreviewPopover {\n  private readonly getLinkElement: (arg0: Event) => Element | null;\n  private readonly getDOMNode: (arg0: Element) => SDK.DOMModel.DOMNode | null;\n  private readonly popover: UI.PopoverHelper.PopoverHelper;\n  constructor(\n      container: Element, getLinkElement: (arg0: Event) => Element | null,\n      getDOMNode: (arg0: Element) => SDK.DOMModel.DOMNode | null) {\n    this.getLinkElement = getLinkElement;\n    this.getDOMNode = getDOMNode;\n    this.popover = new UI.PopoverHelper.PopoverHelper(container, this.handleRequest.bind(this));\n    this.popover.setHasPadding(true);\n    this.popover.setTimeout(0, 100);\n  }\n\n  private handleRequest(event: Event): UI.PopoverHelper.PopoverRequest|null {\n    const link = this.getLinkElement(event);\n    if (!link) {\n      return null;\n    }\n    const href = elementToURLMap.get(link);\n    if (!href) {\n      return null;\n    }\n    return {\n      box: link.boxInWindow(),\n      hide: undefined,\n      show: async(popover: UI.GlassPane.GlassPane): Promise<boolean> => {\n        const node = this.getDOMNode((link as Element));\n        if (!node) {\n          return false;\n        }\n        const precomputedFeatures = await Components.ImagePreview.ImagePreview.loadDimensionsForNode(node);\n        const preview = await Components.ImagePreview.ImagePreview.build(\n            node.domModel().target(), href as Platform.DevToolsPath.UrlString, true,\n            {imageAltText: undefined, precomputedFeatures});\n        if (preview) {\n          popover.contentElement.appendChild(preview);\n        }\n        return Boolean(preview);\n      },\n    };\n  }\n\n  hide(): void {\n    this.popover.hidePopover();\n  }\n\n  static setImageUrl(element: Element, url: Platform.DevToolsPath.UrlString): Element {\n    elementToURLMap.set(element, url);\n    return element;\n  }\n\n  static getImageURL(element: Element): Platform.DevToolsPath.UrlString|undefined {\n    return elementToURLMap.get(element);\n  }\n}\n\nconst elementToURLMap = new WeakMap<Element, Platform.DevToolsPath.UrlString>();\n"],
  "mappings": "AAMA;AACA;AAQO,iCAA0B;AAAA,EACd;AAAA,EACA;AAAA,EACA;AAAA,EACjB,YACI,WAAoB,gBACpB,YAA4D;AAC9D,SAAK,iBAAiB;AACtB,SAAK,aAAa;AAClB,SAAK,UAAU,IAAI,GAAG,cAAc,cAAc,WAAW,KAAK,cAAc,KAAK;AACrF,SAAK,QAAQ,cAAc;AAC3B,SAAK,QAAQ,WAAW,GAAG;AAAA;AAAA,EAGrB,cAAc,OAAoD;AACxE,UAAM,OAAO,KAAK,eAAe;AACjC,QAAI,CAAC,MAAM;AACT,aAAO;AAAA;AAET,UAAM,OAAO,gBAAgB,IAAI;AACjC,QAAI,CAAC,MAAM;AACT,aAAO;AAAA;AAET,WAAO;AAAA,MACL,KAAK,KAAK;AAAA,MACV,MAAM;AAAA,MACN,MAAM,OAAM,YAAsD;AAChE,cAAM,OAAO,KAAK,WAAY;AAC9B,YAAI,CAAC,MAAM;AACT,iBAAO;AAAA;AAET,cAAM,sBAAsB,MAAM,WAAW,aAAa,aAAa,sBAAsB;AAC7F,cAAM,UAAU,MAAM,WAAW,aAAa,aAAa,MACvD,KAAK,WAAW,UAAU,MAAyC,MACnE,EAAC,cAAc,QAAW;AAC9B,YAAI,SAAS;AACX,kBAAQ,eAAe,YAAY;AAAA;AAErC,eAAO,QAAQ;AAAA;AAAA;AAAA;AAAA,EAKrB,OAAa;AACX,SAAK,QAAQ;AAAA;AAAA,SAGR,YAAY,SAAkB,KAA+C;AAClF,oBAAgB,IAAI,SAAS;AAC7B,WAAO;AAAA;AAAA,SAGF,YAAY,SAA6D;AAC9E,WAAO,gBAAgB,IAAI;AAAA;AAAA;AAI/B,MAAM,kBAAkB,oBAAI;",
  "names": []
}
