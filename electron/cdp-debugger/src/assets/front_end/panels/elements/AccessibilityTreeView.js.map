{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/elements/AccessibilityTreeView.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as TreeOutline from '../../ui/components/tree_outline/tree_outline.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as AccessibilityTreeUtils from './AccessibilityTreeUtils.js';\nimport {ElementsPanel} from './ElementsPanel.js';\n\nexport class AccessibilityTreeView extends UI.Widget.VBox implements\n    SDK.TargetManager.SDKModelObserver<SDK.AccessibilityModel.AccessibilityModel> {\n  private accessibilityTreeComponent = new TreeOutline.TreeOutline.TreeOutline<AccessibilityTreeUtils.AXTreeNodeData>();\n  private readonly toggleButton: HTMLElement;\n  private inspectedDOMNode: SDK.DOMModel.DOMNode|null = null;\n  private root: SDK.AccessibilityModel.AccessibilityNode|null = null;\n\n  constructor(toggleButton: HTMLElement) {\n    super();\n    // toggleButton is bound to a click handler on ElementsPanel to switch between the DOM tree\n    // and accessibility tree views.\n    this.toggleButton = toggleButton;\n    this.contentElement.appendChild(this.toggleButton);\n    this.contentElement.appendChild(this.accessibilityTreeComponent);\n\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.AccessibilityModel.AccessibilityModel, this);\n\n    // The DOM tree and accessibility are kept in sync as much as possible, so\n    // on node selection, update the currently inspected node and reveal in the\n    // DOM tree.\n    this.accessibilityTreeComponent.addEventListener('itemselected', (event: Event) => {\n      const evt = event as TreeOutline.TreeOutline.ItemSelectedEvent<AccessibilityTreeUtils.AXTreeNodeData>;\n      const axNode = evt.data.node.treeNodeData;\n      if (!axNode.isDOMNode()) {\n        return;\n      }\n      const deferredNode = axNode.deferredDOMNode();\n      if (deferredNode) {\n        deferredNode.resolve(domNode => {\n          if (domNode) {\n            this.inspectedDOMNode = domNode;\n            void ElementsPanel.instance().revealAndSelectNode(domNode, true, false);\n          }\n        });\n      }\n    });\n\n    this.accessibilityTreeComponent.addEventListener('itemmouseover', (event: Event) => {\n      const evt = event as TreeOutline.TreeOutline.ItemMouseOverEvent<AccessibilityTreeUtils.AXTreeNodeData>;\n      evt.data.node.treeNodeData.highlightDOMNode();\n    });\n\n    this.accessibilityTreeComponent.addEventListener('itemmouseout', () => {\n      SDK.OverlayModel.OverlayModel.hideDOMNodeHighlight();\n    });\n  }\n\n  async wasShown(): Promise<void> {\n    await this.refreshAccessibilityTree();\n    if (this.inspectedDOMNode) {\n      await this.loadSubTreeIntoAccessibilityModel(this.inspectedDOMNode);\n    }\n  }\n\n  async refreshAccessibilityTree(): Promise<void> {\n    if (!this.root) {\n      const frameId = SDK.FrameManager.FrameManager.instance().getTopFrame()?.id;\n      if (!frameId) {\n        throw Error('No top frame');\n      }\n      this.root = await AccessibilityTreeUtils.getRootNode(frameId);\n      if (!this.root) {\n        throw Error('No root');\n      }\n    }\n    await this.renderTree();\n    await this.accessibilityTreeComponent.expandRecursively(1);\n  }\n\n  async renderTree(): Promise<void> {\n    if (!this.root) {\n      return;\n    }\n    const treeData = await AccessibilityTreeUtils.sdkNodeToAXTreeNodes(this.root);\n    this.accessibilityTreeComponent.data = {\n      defaultRenderer: AccessibilityTreeUtils.accessibilityNodeRenderer,\n      tree: treeData,\n      filter: (node): TreeOutline.TreeOutline.FilterOption => {\n        return node.ignored() || (node.role()?.value === 'generic' && !node.name()?.value) ?\n            TreeOutline.TreeOutline.FilterOption.FLATTEN :\n            TreeOutline.TreeOutline.FilterOption.SHOW;\n      },\n    };\n  }\n\n  // Given a selected DOM node, asks the model to load the missing subtree from the root to the\n  // selected node and then re-renders the tree.\n  async loadSubTreeIntoAccessibilityModel(selectedNode: SDK.DOMModel.DOMNode): Promise<void> {\n    const ancestors = await AccessibilityTreeUtils.getNodeAndAncestorsFromDOMNode(selectedNode);\n    const inspectedAXNode = ancestors.find(node => node.backendDOMNodeId() === selectedNode.backendNodeId());\n    if (!inspectedAXNode) {\n      return;\n    }\n    await this.accessibilityTreeComponent.expandNodeIds(ancestors.map(node => node.getFrameId() + '#' + node.id()));\n    await this.accessibilityTreeComponent.focusNodeId(AccessibilityTreeUtils.getNodeId(inspectedAXNode));\n  }\n\n  // A node was revealed through the elements picker.\n  async revealAndSelectNode(inspectedNode: SDK.DOMModel.DOMNode): Promise<void> {\n    if (inspectedNode === this.inspectedDOMNode) {\n      return;\n    }\n    this.inspectedDOMNode = inspectedNode;\n    // We only want to load nodes into the model when the AccessibilityTree is visible.\n    if (this.isShowing()) {\n      await this.loadSubTreeIntoAccessibilityModel(inspectedNode);\n    }\n  }\n\n  // Selected node in the DOM tree has changed.\n  async selectedNodeChanged(inspectedNode: SDK.DOMModel.DOMNode): Promise<void> {\n    if (this.isShowing() || (inspectedNode === this.inspectedDOMNode)) {\n      return;\n    }\n    if (inspectedNode.ownerDocument && (inspectedNode.nodeName() === 'HTML' || inspectedNode.nodeName() === 'BODY')) {\n      this.inspectedDOMNode = inspectedNode.ownerDocument;\n    } else {\n      this.inspectedDOMNode = inspectedNode;\n    }\n  }\n\n  treeUpdated({data}: Common.EventTarget\n                  .EventTargetEvent<SDK.AccessibilityModel.EventTypes[SDK.AccessibilityModel.Events.TreeUpdated]>):\n      void {\n    if (!data.root) {\n      void this.renderTree();\n      return;\n    }\n    const topFrameId = SDK.FrameManager.FrameManager.instance().getTopFrame()?.id;\n    if (data.root?.getFrameId() !== topFrameId) {\n      void this.renderTree();\n      return;\n    }\n    this.root = data.root;\n    void this.accessibilityTreeComponent.collapseAllNodes();\n\n    void this.refreshAccessibilityTree();\n  }\n\n  modelAdded(model: SDK.AccessibilityModel.AccessibilityModel): void {\n    model.addEventListener(SDK.AccessibilityModel.Events.TreeUpdated, this.treeUpdated, this);\n  }\n\n  modelRemoved(model: SDK.AccessibilityModel.AccessibilityModel): void {\n    model.removeEventListener(SDK.AccessibilityModel.Events.TreeUpdated, this.treeUpdated, this);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
