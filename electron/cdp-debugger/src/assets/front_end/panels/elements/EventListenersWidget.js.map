{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/elements/EventListenersWidget.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2007 Apple Inc.  All rights reserved.\n * Copyright (C) 2009 Joseph Pecoraro\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as EventListeners from '../event_listeners/event_listeners.js';\n\nconst UIStrings = {\n  /**\n  *@description Title of show framework listeners setting in event listeners widget of the elements panel\n  */\n  frameworkListeners: '`Framework` listeners',\n  /**\n  *@description Text to refresh the page\n  */\n  refresh: 'Refresh',\n  /**\n  *@description Tooltip text that appears on the setting when hovering over it in Event Listeners Widget of the Elements panel\n  */\n  showListenersOnTheAncestors: 'Show listeners on the ancestors',\n  /**\n  *@description Alternative title text of a setting in Event Listeners Widget of the Elements panel\n  */\n  ancestors: 'Ancestors',\n  /**\n  *@description Title of dispatch filter in event listeners widget of the elements panel\n  */\n  eventListenersCategory: 'Event listeners category',\n  /**\n  *@description Text for everything\n  */\n  all: 'All',\n  /**\n  *@description Text in Event Listeners Widget of the Elements panel\n  */\n  passive: 'Passive',\n  /**\n  *@description Text in Event Listeners Widget of the Elements panel\n  */\n  blocking: 'Blocking',\n  /**\n  *@description Tooltip text that appears on the setting when hovering over it in Event Listeners Widget of the Elements panel\n  */\n  resolveEventListenersBoundWith: 'Resolve event listeners bound with framework',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/elements/EventListenersWidget.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet eventListenersWidgetInstance: EventListenersWidget;\n\nexport class EventListenersWidget extends UI.ThrottledWidget.ThrottledWidget implements UI.Toolbar.ItemsProvider {\n  private readonly toolbarItemsInternal: (UI.Toolbar.ToolbarButton|UI.Toolbar.ToolbarSettingCheckbox|\n                                          UI.Toolbar.ToolbarComboBox)[];\n  private showForAncestorsSetting: Common.Settings.Setting<boolean>;\n  private readonly dispatchFilterBySetting: Common.Settings.Setting<string>;\n  private readonly showFrameworkListenersSetting: Common.Settings.Setting<boolean>;\n  private readonly eventListenersView: EventListeners.EventListenersView.EventListenersView;\n  private lastRequestedNode?: SDK.DOMModel.DOMNode;\n\n  constructor() {\n    super();\n    this.toolbarItemsInternal = [];\n\n    this.showForAncestorsSetting = Common.Settings.Settings.instance().moduleSetting('showEventListenersForAncestors');\n    this.showForAncestorsSetting.addChangeListener(this.update.bind(this));\n\n    this.dispatchFilterBySetting =\n        Common.Settings.Settings.instance().createSetting('eventListenerDispatchFilterType', DispatchFilterBy.All);\n    this.dispatchFilterBySetting.addChangeListener(this.update.bind(this));\n\n    this.showFrameworkListenersSetting =\n        Common.Settings.Settings.instance().createSetting('showFrameowkrListeners', true);\n    this.showFrameworkListenersSetting.setTitle(i18nString(UIStrings.frameworkListeners));\n    this.showFrameworkListenersSetting.addChangeListener(this.showFrameworkListenersChanged.bind(this));\n    this.eventListenersView = new EventListeners.EventListenersView.EventListenersView(this.update.bind(this));\n    this.eventListenersView.show(this.element);\n\n    const refreshButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.refresh), 'largeicon-refresh');\n    refreshButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.update.bind(this));\n    this.toolbarItemsInternal.push(refreshButton);\n    this.toolbarItemsInternal.push(new UI.Toolbar.ToolbarSettingCheckbox(\n        this.showForAncestorsSetting, i18nString(UIStrings.showListenersOnTheAncestors),\n        i18nString(UIStrings.ancestors)));\n    const dispatchFilter = new UI.Toolbar.ToolbarComboBox(\n        this.onDispatchFilterTypeChanged.bind(this), i18nString(UIStrings.eventListenersCategory));\n\n    function addDispatchFilterOption(this: EventListenersWidget, name: string, value: string): void {\n      const option = dispatchFilter.createOption(name, value);\n      if (value === this.dispatchFilterBySetting.get()) {\n        dispatchFilter.select(option);\n      }\n    }\n    addDispatchFilterOption.call(this, i18nString(UIStrings.all), DispatchFilterBy.All);\n    addDispatchFilterOption.call(this, i18nString(UIStrings.passive), DispatchFilterBy.Passive);\n    addDispatchFilterOption.call(this, i18nString(UIStrings.blocking), DispatchFilterBy.Blocking);\n    dispatchFilter.setMaxWidth(200);\n    this.toolbarItemsInternal.push(dispatchFilter);\n    this.toolbarItemsInternal.push(new UI.Toolbar.ToolbarSettingCheckbox(\n        this.showFrameworkListenersSetting, i18nString(UIStrings.resolveEventListenersBoundWith)));\n\n    UI.Context.Context.instance().addFlavorChangeListener(SDK.DOMModel.DOMNode, this.update, this);\n    this.update();\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  }|undefined = {forceNew: null}): EventListenersWidget {\n    const {forceNew} = opts;\n    if (!eventListenersWidgetInstance || forceNew) {\n      eventListenersWidgetInstance = new EventListenersWidget();\n    }\n\n    return eventListenersWidgetInstance;\n  }\n\n  doUpdate(): Promise<void> {\n    if (this.lastRequestedNode) {\n      this.lastRequestedNode.domModel().runtimeModel().releaseObjectGroup(objectGroupName);\n      delete this.lastRequestedNode;\n    }\n    const node = UI.Context.Context.instance().flavor(SDK.DOMModel.DOMNode);\n    if (!node) {\n      this.eventListenersView.reset();\n      this.eventListenersView.addEmptyHolderIfNeeded();\n      return Promise.resolve();\n    }\n    this.lastRequestedNode = node;\n    const selectedNodeOnly = !this.showForAncestorsSetting.get();\n    const promises = [];\n    promises.push(node.resolveToObject(objectGroupName));\n    if (!selectedNodeOnly) {\n      let currentNode: (SDK.DOMModel.DOMNode|null) = node.parentNode;\n      while (currentNode) {\n        promises.push(currentNode.resolveToObject(objectGroupName));\n        currentNode = currentNode.parentNode;\n      }\n      promises.push(this.windowObjectInNodeContext(node));\n    }\n    return Promise.all(promises)\n        .then(this.eventListenersView.addObjects.bind(this.eventListenersView))\n        .then(this.showFrameworkListenersChanged.bind(this));\n  }\n\n  toolbarItems(): UI.Toolbar.ToolbarItem[] {\n    return this.toolbarItemsInternal;\n  }\n\n  private onDispatchFilterTypeChanged(event: Event): void {\n    const filter = (event.target as HTMLInputElement);\n    this.dispatchFilterBySetting.set(filter.value);\n  }\n\n  private showFrameworkListenersChanged(): void {\n    const dispatchFilter = this.dispatchFilterBySetting.get();\n    const showPassive = dispatchFilter === DispatchFilterBy.All || dispatchFilter === DispatchFilterBy.Passive;\n    const showBlocking = dispatchFilter === DispatchFilterBy.All || dispatchFilter === DispatchFilterBy.Blocking;\n    this.eventListenersView.showFrameworkListeners(this.showFrameworkListenersSetting.get(), showPassive, showBlocking);\n  }\n\n  private windowObjectInNodeContext(node: SDK.DOMModel.DOMNode): Promise<SDK.RemoteObject.RemoteObject|null> {\n    const executionContexts = node.domModel().runtimeModel().executionContexts();\n    let context: SDK.RuntimeModel.ExecutionContext = executionContexts[0];\n    if (node.frameId()) {\n      for (let i = 0; i < executionContexts.length; ++i) {\n        const executionContext = executionContexts[i];\n        if (executionContext.frameId === node.frameId() && executionContext.isDefault) {\n          context = executionContext;\n        }\n      }\n    }\n\n    return context\n        .evaluate(\n            {\n              expression: 'self',\n              objectGroup: objectGroupName,\n              includeCommandLineAPI: false,\n              silent: true,\n              returnByValue: false,\n              generatePreview: false,\n              throwOnSideEffect: undefined,\n              timeout: undefined,\n              disableBreaks: undefined,\n              replMode: undefined,\n              allowUnsafeEvalBlockedByCSP: undefined,\n            },\n            /* userGesture */ false,\n            /* awaitPromise */ false)\n        .then(result => {\n          if ('object' in result) {\n            return result.object;\n          }\n          return null;\n        });\n  }\n\n  eventListenersArrivedForTest(): void {\n  }\n}\n\nexport const DispatchFilterBy = {\n  All: 'All',\n  Blocking: 'Blocking',\n  Passive: 'Passive',\n};\n\nconst objectGroupName = 'event-listeners-panel';\n"],
  "mappings": "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",
  "names": []
}
