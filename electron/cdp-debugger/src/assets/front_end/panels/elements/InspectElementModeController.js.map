{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/elements/InspectElementModeController.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {ElementsPanel} from './ElementsPanel.js';\n\nlet inspectElementModeController: InspectElementModeController;\n\nexport class InspectElementModeController implements SDK.TargetManager.SDKModelObserver<SDK.OverlayModel.OverlayModel> {\n  private readonly toggleSearchAction: UI.ActionRegistration.Action|null;\n  private mode: Protocol.Overlay.InspectMode;\n  private readonly showDetailedInspectTooltipSetting: Common.Settings.Setting<boolean>;\n\n  constructor() {\n    this.toggleSearchAction = UI.ActionRegistry.ActionRegistry.instance().action('elements.toggle-element-search');\n    this.mode = Protocol.Overlay.InspectMode.None;\n    SDK.TargetManager.TargetManager.instance().addEventListener(\n        SDK.TargetManager.Events.SuspendStateChanged, this.suspendStateChanged, this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.OverlayModel.OverlayModel, SDK.OverlayModel.Events.ExitedInspectMode,\n        () => this.setMode(Protocol.Overlay.InspectMode.None));\n    SDK.OverlayModel.OverlayModel.setInspectNodeHandler(this.inspectNode.bind(this));\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.OverlayModel.OverlayModel, this);\n\n    this.showDetailedInspectTooltipSetting =\n        Common.Settings.Settings.instance().moduleSetting('showDetailedInspectTooltip');\n    this.showDetailedInspectTooltipSetting.addChangeListener(this.showDetailedInspectTooltipChanged.bind(this));\n\n    document.addEventListener('keydown', event => {\n      if (event.keyCode !== UI.KeyboardShortcut.Keys.Esc.code) {\n        return;\n      }\n      if (!this.isInInspectElementMode()) {\n        return;\n      }\n      this.setMode(Protocol.Overlay.InspectMode.None);\n      event.consume(true);\n    }, true);\n  }\n\n  static instance({forceNew}: {\n    forceNew: boolean,\n  } = {forceNew: false}): InspectElementModeController {\n    if (!inspectElementModeController || forceNew) {\n      inspectElementModeController = new InspectElementModeController();\n    }\n\n    return inspectElementModeController;\n  }\n\n  modelAdded(overlayModel: SDK.OverlayModel.OverlayModel): void {\n    // When DevTools are opening in the inspect element mode, the first target comes in\n    // much later than the InspectorFrontendAPI.enterInspectElementMode event.\n    if (this.mode === Protocol.Overlay.InspectMode.None) {\n      return;\n    }\n    void overlayModel.setInspectMode(this.mode, this.showDetailedInspectTooltipSetting.get());\n  }\n\n  modelRemoved(_overlayModel: SDK.OverlayModel.OverlayModel): void {\n  }\n\n  private isInInspectElementMode(): boolean {\n    return this.mode !== Protocol.Overlay.InspectMode.None;\n  }\n\n  toggleInspectMode(): void {\n    let mode;\n    if (this.isInInspectElementMode()) {\n      mode = Protocol.Overlay.InspectMode.None;\n    } else {\n      mode = Common.Settings.Settings.instance().moduleSetting('showUAShadowDOM').get() ?\n          Protocol.Overlay.InspectMode.SearchForUAShadowDOM :\n          Protocol.Overlay.InspectMode.SearchForNode;\n    }\n    this.setMode(mode);\n  }\n\n  captureScreenshotMode(): void {\n    this.setMode(Protocol.Overlay.InspectMode.CaptureAreaScreenshot);\n  }\n\n  private setMode(mode: Protocol.Overlay.InspectMode): void {\n    if (SDK.TargetManager.TargetManager.instance().allTargetsSuspended()) {\n      return;\n    }\n    this.mode = mode;\n    for (const overlayModel of SDK.TargetManager.TargetManager.instance().models(SDK.OverlayModel.OverlayModel)) {\n      void overlayModel.setInspectMode(mode, this.showDetailedInspectTooltipSetting.get());\n    }\n    if (this.toggleSearchAction) {\n      this.toggleSearchAction.setToggled(this.isInInspectElementMode());\n    }\n  }\n\n  private suspendStateChanged(): void {\n    if (!SDK.TargetManager.TargetManager.instance().allTargetsSuspended()) {\n      return;\n    }\n\n    this.mode = Protocol.Overlay.InspectMode.None;\n    if (this.toggleSearchAction) {\n      this.toggleSearchAction.setToggled(false);\n    }\n  }\n\n  private inspectNode(node: SDK.DOMModel.DOMNode): void {\n    void ElementsPanel.instance().revealAndSelectNode(node, true, true);\n  }\n\n  private showDetailedInspectTooltipChanged(): void {\n    this.setMode(this.mode);\n  }\n}\n\nlet toggleSearchActionDelegateInstance: ToggleSearchActionDelegate;\n\nexport class ToggleSearchActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  handleAction(context: UI.Context.Context, actionId: string): boolean {\n    if (Root.Runtime.Runtime.queryParam('isSharedWorker')) {\n      return false;\n    }\n\n    inspectElementModeController = InspectElementModeController.instance();\n    if (!inspectElementModeController) {\n      return false;\n    }\n    if (actionId === 'elements.toggle-element-search') {\n      inspectElementModeController.toggleInspectMode();\n    } else if (actionId === 'elements.capture-area-screenshot') {\n      inspectElementModeController.captureScreenshotMode();\n    }\n    return true;\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  }|undefined = {forceNew: null}): ToggleSearchActionDelegate {\n    const {forceNew} = opts;\n    if (!toggleSearchActionDelegateInstance || forceNew) {\n      toggleSearchActionDelegateInstance = new ToggleSearchActionDelegate();\n    }\n\n    return toggleSearchActionDelegateInstance;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
