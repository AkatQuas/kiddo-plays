{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/elements/StylePropertyHighlighter.ts"],
  "sourcesContent": ["// Copyright (c) 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as SDK from '../../core/sdk/sdk.js';\n\nimport type {StylePropertiesSection} from './StylePropertiesSection.js';\nimport {StylePropertyTreeElement} from './StylePropertyTreeElement.js';\nimport type {StylesSidebarPane} from './StylesSidebarPane.js';\n\nexport class StylePropertyHighlighter {\n  private readonly styleSidebarPane: StylesSidebarPane;\n  constructor(ssp: StylesSidebarPane) {\n    this.styleSidebarPane = ssp;\n  }\n\n  /**\n   * Expand all shorthands, find the given property, scroll to it and highlight it.\n   */\n  highlightProperty(cssProperty: SDK.CSSProperty.CSSProperty): void {\n    // Expand all shorthands.\n    for (const section of this.styleSidebarPane.allSections()) {\n      for (let treeElement = section.propertiesTreeOutline.firstChild(); treeElement;\n           treeElement = treeElement.nextSibling) {\n        void treeElement.onpopulate();\n      }\n    }\n\n    const {treeElement, section} = this.findTreeElementAndSection(treeElement => treeElement.property === cssProperty);\n    if (treeElement) {\n      treeElement.parent && treeElement.parent.expand();\n      this.scrollAndHighlightTreeElement(treeElement);\n      if (section) {\n        section.element.focus();\n      }\n    }\n  }\n\n  /**\n   * Find the first non-overridden property that matches the provided name, scroll to it and highlight it.\n   */\n  findAndHighlightPropertyName(propertyName: string): void {\n    for (const section of this.styleSidebarPane.allSections()) {\n      if (!section.style().hasActiveProperty(propertyName)) {\n        continue;\n      }\n      section.showAllItems();\n      const treeElement = this.findTreeElementFromSection(\n          treeElement => treeElement.property.name === propertyName && !treeElement.overloaded(), section);\n      if (treeElement) {\n        this.scrollAndHighlightTreeElement(treeElement);\n        if (section) {\n          section.element.focus();\n        }\n        return;\n      }\n    }\n  }\n\n  /**\n   * Traverse the styles pane tree, execute the provided callback for every tree element found, and\n   * return the first tree element and corresponding section for which the callback returns a truthy value.\n   */\n  private findTreeElementAndSection(compareCb: (arg0: StylePropertyTreeElement) => boolean): {\n    treeElement: StylePropertyTreeElement|null,\n    section: StylePropertiesSection|null,\n  } {\n    for (const section of this.styleSidebarPane.allSections()) {\n      const treeElement = this.findTreeElementFromSection(compareCb, section);\n      if (treeElement) {\n        return {treeElement, section};\n      }\n    }\n    return {treeElement: null, section: null};\n  }\n\n  private findTreeElementFromSection(\n      compareCb: (arg0: StylePropertyTreeElement) => boolean, section: StylePropertiesSection): StylePropertyTreeElement\n      |null {\n    let treeElement = section.propertiesTreeOutline.firstChild();\n    while (treeElement && (treeElement instanceof StylePropertyTreeElement)) {\n      if (compareCb(treeElement)) {\n        return treeElement;\n      }\n      treeElement = treeElement.traverseNextTreeElement(false, null, true);\n    }\n    return null;\n  }\n\n  private scrollAndHighlightTreeElement(treeElement: StylePropertyTreeElement): void {\n    treeElement.listItemElement.scrollIntoViewIfNeeded();\n    treeElement.listItemElement.animate(\n        [\n          {offset: 0, backgroundColor: 'rgba(255, 255, 0, 0.2)'},\n          {offset: 0.1, backgroundColor: 'rgba(255, 255, 0, 0.7)'},\n          {offset: 1, backgroundColor: 'transparent'},\n        ],\n        {duration: 2000, easing: 'cubic-bezier(0, 0, 0.2, 1)'});\n  }\n}\n"],
  "mappings": "AAOA;AAGO,sCAA+B;AAAA,EACnB;AAAA,EACjB,YAAY,KAAwB;AAClC,SAAK,mBAAmB;AAAA;AAAA,EAM1B,kBAAkB,aAAgD;AAEhE,eAAW,YAAW,KAAK,iBAAiB,eAAe;AACzD,eAAS,eAAc,SAAQ,sBAAsB,cAAc,cAC9D,eAAc,aAAY,aAAa;AAC1C,aAAK,aAAY;AAAA;AAAA;AAIrB,UAAM,EAAC,aAAa,YAAW,KAAK,0BAA0B,kBAAe,aAAY,aAAa;AACtG,QAAI,aAAa;AACf,kBAAY,UAAU,YAAY,OAAO;AACzC,WAAK,8BAA8B;AACnC,UAAI,SAAS;AACX,gBAAQ,QAAQ;AAAA;AAAA;AAAA;AAAA,EAQtB,6BAA6B,cAA4B;AACvD,eAAW,WAAW,KAAK,iBAAiB,eAAe;AACzD,UAAI,CAAC,QAAQ,QAAQ,kBAAkB,eAAe;AACpD;AAAA;AAEF,cAAQ;AACR,YAAM,cAAc,KAAK,2BACrB,kBAAe,aAAY,SAAS,SAAS,gBAAgB,CAAC,aAAY,cAAc;AAC5F,UAAI,aAAa;AACf,aAAK,8BAA8B;AACnC,YAAI,SAAS;AACX,kBAAQ,QAAQ;AAAA;AAElB;AAAA;AAAA;AAAA;AAAA,EASE,0BAA0B,WAGhC;AACA,eAAW,WAAW,KAAK,iBAAiB,eAAe;AACzD,YAAM,cAAc,KAAK,2BAA2B,WAAW;AAC/D,UAAI,aAAa;AACf,eAAO,EAAC,aAAa;AAAA;AAAA;AAGzB,WAAO,EAAC,aAAa,MAAM,SAAS;AAAA;AAAA,EAG9B,2BACJ,WAAwD,SAClD;AACR,QAAI,cAAc,QAAQ,sBAAsB;AAChD,WAAO,eAAgB,uBAAuB,0BAA2B;AACvE,UAAI,UAAU,cAAc;AAC1B,eAAO;AAAA;AAET,oBAAc,YAAY,wBAAwB,OAAO,MAAM;AAAA;AAEjE,WAAO;AAAA;AAAA,EAGD,8BAA8B,aAA6C;AACjF,gBAAY,gBAAgB;AAC5B,gBAAY,gBAAgB,QACxB;AAAA,MACE,EAAC,QAAQ,GAAG,iBAAiB;AAAA,MAC7B,EAAC,QAAQ,KAAK,iBAAiB;AAAA,MAC/B,EAAC,QAAQ,GAAG,iBAAiB;AAAA,OAE/B,EAAC,UAAU,KAAM,QAAQ;AAAA;AAAA;",
  "names": []
}
