{
  "version": 3,
  "sources": ["../../../../../../../front_end/panels/elements/components/AdornerSettingsPane.ts"],
  "sourcesContent": ["// Copyright (c) 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as Input from '../../../ui/components/input/input.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\nimport adornerSettingsPaneStyles from './adornerSettingsPane.css.js';\n\nimport type {AdornerSettingsMap} from './AdornerManager.js';\n\nconst UIStrings = {\n  /**\n    * @description Title of a list of settings to toggle badges.\n    */\n  settingsTitle: 'Show badges',\n  /**\n   * @description ARIA label of the button to close the badge settings pane\n   */\n  closeButton: 'Close',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/elements/components/AdornerSettingsPane.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst {render, html} = LitHtml;\n\nexport class AdornerSettingUpdatedEvent extends Event {\n  static readonly eventName = 'adornersettingupdated';\n  data: {\n    adornerName: string,\n    isEnabledNow: boolean,\n    newSettings: AdornerSettingsMap,\n  };\n\n  constructor(adornerName: string, isEnabledNow: boolean, newSettings: AdornerSettingsMap) {\n    super(AdornerSettingUpdatedEvent.eventName, {});\n    this.data = {adornerName, isEnabledNow, newSettings};\n  }\n}\n\nexport interface AdornerSettingsPaneData {\n  settings: Readonly<AdornerSettingsMap>;\n}\n\nexport class AdornerSettingsPane extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-adorner-settings-pane`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #settings: AdornerSettingsMap = new Map();\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [Input.checkboxStyles, adornerSettingsPaneStyles];\n  }\n\n  set data(data: AdornerSettingsPaneData) {\n    this.#settings = new Map(data.settings.entries());\n    this.#render();\n  }\n\n  show(): void {\n    this.classList.remove('hidden');\n    const settingsPane = this.#shadow.querySelector<HTMLElement>('.adorner-settings-pane');\n    if (settingsPane) {\n      settingsPane.focus();\n    }\n  }\n\n  hide(): void {\n    this.classList.add('hidden');\n  }\n\n  #onChange(ev: Event): void {\n    const inputEl = ev.target as HTMLInputElement;\n    const adorner = inputEl.dataset.adorner;\n    if (adorner === undefined) {\n      return;\n    }\n    const isEnabledNow = inputEl.checked;\n    this.#settings.set(adorner, isEnabledNow);\n    this.dispatchEvent(new AdornerSettingUpdatedEvent(adorner, isEnabledNow, this.#settings));\n    this.#render();\n  }\n\n  #render(): void {\n    const settingTemplates = [];\n    for (const [adorner, isEnabled] of this.#settings) {\n      // Disabled until https://crbug.com/1079231 is fixed.\n      // clang-format off\n      settingTemplates.push(html`\n        <label class=\"setting\" title=${adorner}>\n          <input\n            class=\"adorner-status\"\n            type=\"checkbox\" name=${adorner}\n            .checked=${isEnabled}\n            data-adorner=${adorner}>\n          <span class=\"adorner-name\">${adorner}</span>\n        </label>\n      `);\n      // clang-format on\n    }\n\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`\n      <div class=\"adorner-settings-pane\" tabindex=\"-1\">\n        <div class=\"settings-title\">${i18nString(UIStrings.settingsTitle)}</div>\n        <div class=\"setting-list\" @change=${this.#onChange}>\n          ${settingTemplates}\n        </div>\n        <button class=\"close\" @click=${this.hide} aria-label=${i18nString(UIStrings.closeButton)}></button>\n      </div>\n    `, this.#shadow, {\n      host: this,\n    });\n    // clang-format on\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-adorner-settings-pane', AdornerSettingsPane);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-adorner-settings-pane': AdornerSettingsPane;\n  }\n}\n"],
  "mappings": "AAIA;AACA;AACA;AACA;AACA;AAIA,MAAM,YAAY;AAAA,EAIhB,eAAe;AAAA,EAIf,aAAa;AAAA;AAEf,MAAM,OAAO,KAAK,KAAK,kBAAkB,qDAAqD;AAC9F,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAEhE,MAAM,EAAC,QAAQ,SAAQ;AAEhB,gDAAyC,MAAM;AAAA,SACpC,YAAY;AAAA,EAC5B;AAAA,EAMA,YAAY,aAAqB,cAAuB,aAAiC;AACvF,UAAM,2BAA2B,WAAW;AAC5C,SAAK,OAAO,EAAC,aAAa,cAAc;AAAA;AAAA;AAQrC,yCAAkC,YAAY;AAAA,SACnC,aAAa,QAAQ;AAAA,YAClB,KAAK,aAAa,EAAC,MAAM;AAAA,cACZ,oBAAI;AAAA,EAEpC,oBAA0B;AACxB,iBAAa,qBAAqB,CAAC,MAAM,gBAAgB;AAAA;AAAA,MAGvD,KAAK,MAA+B;AACtC,qBAAiB,IAAI,IAAI,KAAK,SAAS;AACvC;AAAA;AAAA,EAGF,OAAa;AACX,SAAK,UAAU,OAAO;AACtB,UAAM,eAAe,aAAa,cAA2B;AAC7D,QAAI,cAAc;AAChB,mBAAa;AAAA;AAAA;AAAA,EAIjB,OAAa;AACX,SAAK,UAAU,IAAI;AAAA;AAAA,YAGX,IAAiB;AACzB,UAAM,UAAU,GAAG;AACnB,UAAM,UAAU,QAAQ,QAAQ;AAChC,QAAI,YAAY,QAAW;AACzB;AAAA;AAEF,UAAM,eAAe,QAAQ;AAC7B,mBAAe,IAAI,SAAS;AAC5B,SAAK,cAAc,IAAI,2BAA2B,SAAS,cAAc;AACzE;AAAA;AAAA,YAGc;AACd,UAAM,mBAAmB;AACzB,eAAW,CAAC,SAAS,cAAc,gBAAgB;AAGjD,uBAAiB,KAAK;AAAA,uCACW;AAAA;AAAA;AAAA,mCAGJ;AAAA,uBACZ;AAAA,2BACI;AAAA,uCACY;AAAA;AAAA;AAAA;AAQnC,WAAO;AAAA;AAAA,sCAE2B,WAAW,UAAU;AAAA,4CACf;AAAA,YAChC;AAAA;AAAA,uCAE2B,KAAK,mBAAmB,WAAW,UAAU;AAAA;AAAA,OAE7E,cAAc;AAAA,MACf,MAAM;AAAA;AAAA;AAAA;AAMZ,iBAAiB,eAAe,gBAAgB,kCAAkC;",
  "names": []
}
