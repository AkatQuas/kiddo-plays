{
  "version": 3,
  "sources": ["../../../../../../../front_end/panels/elements/components/LayoutPane.ts"],
  "sourcesContent": ["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as UI from '../../../ui/legacy/legacy.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\n\nimport type {BooleanSetting, EnumSetting, Setting} from './LayoutPaneUtils.js';\nimport type {LayoutElement} from './LayoutPaneUtils.js';\n\nimport layoutPaneStyles from '../layoutPane.css.js';\nimport * as Input from '../../../ui/components/input/input.js';\nimport * as NodeText from '../../../ui/components/node_text/node_text.js';\n// eslint-disable-next-line rulesdir/es_modules_import\nimport inspectorCommonStyles from '../../../ui/legacy/inspectorCommon.css.js';\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nconst UIStrings = {\n  /**\n  *@description Title of the input to select the overlay color for an element using the color picker\n  */\n  chooseElementOverlayColor: 'Choose the overlay color for this element',\n  /**\n  *@description Title of the show element button in the Layout pane of the Elements panel\n  */\n  showElementInTheElementsPanel: 'Show element in the Elements panel',\n  /**\n  *@description Title of a section on CSS Grid tooling\n  */\n  grid: 'Grid',\n  /**\n  *@description Title of a section in the Layout Sidebar pane of the Elements panel\n  */\n  overlayDisplaySettings: 'Overlay display settings',\n  /**\n  *@description Title of a section in Layout sidebar pane\n  */\n  gridOverlays: 'Grid overlays',\n  /**\n  *@description Message in the Layout panel informing users that no CSS Grid layouts were found on the page\n  */\n  noGridLayoutsFoundOnThisPage: 'No grid layouts found on this page',\n  /**\n  *@description Title of the Flexbox section in the Layout panel\n  */\n  flexbox: 'Flexbox',\n  /**\n  *@description Title of a section in the Layout panel\n  */\n  flexboxOverlays: 'Flexbox overlays',\n  /**\n  *@description Text in the Layout panel, when no flexbox elements are found\n  */\n  noFlexboxLayoutsFoundOnThisPage: 'No flexbox layouts found on this page',\n  /**\n  *@description Screen reader announcement when opening color picker tool.\n  */\n  colorPickerOpened: 'Color picker opened.',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/elements/components/LayoutPane.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport {LayoutElement};\n\nconst {render, html} = LitHtml;\n\nexport class SettingChangedEvent extends Event {\n  static readonly eventName = 'settingchanged';\n  data: {setting: string, value: string|boolean};\n\n  constructor(setting: string, value: string|boolean) {\n    super(SettingChangedEvent.eventName, {});\n    this.data = {setting, value};\n  }\n}\n\ninterface HTMLInputElementEvent extends Event {\n  target: HTMLInputElement;\n}\n\nfunction isEnumSetting(setting: Setting): setting is EnumSetting {\n  return setting.type === Common.Settings.SettingType.ENUM;\n}\n\nfunction isBooleanSetting(setting: Setting): setting is BooleanSetting {\n  return setting.type === Common.Settings.SettingType.BOOLEAN;\n}\n\nexport interface LayoutPaneData {\n  settings: Setting[];\n  gridElements: LayoutElement[];\n  flexContainerElements?: LayoutElement[];\n}\n\nexport class LayoutPane extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-layout-pane`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #settings: Readonly<Setting[]> = [];\n  #gridElements: Readonly<LayoutElement[]> = [];\n  #flexContainerElements?: Readonly<LayoutElement[]> = [];\n\n  constructor() {\n    super();\n    this.#shadow.adoptedStyleSheets = [\n      Input.checkboxStyles,\n      layoutPaneStyles,\n      inspectorCommonStyles,\n    ];\n  }\n\n  set data(data: LayoutPaneData) {\n    this.#settings = data.settings;\n    this.#gridElements = data.gridElements;\n    this.#flexContainerElements = data.flexContainerElements;\n    this.#render();\n  }\n\n  #onSummaryKeyDown(event: KeyboardEvent): void {\n    if (!event.target) {\n      return;\n    }\n    const summaryElement = event.target as HTMLElement;\n    const detailsElement = summaryElement.parentElement as HTMLDetailsElement;\n    if (!detailsElement) {\n      throw new Error('<details> element is not found for a <summary> element');\n    }\n    switch (event.key) {\n      case 'ArrowLeft':\n        detailsElement.open = false;\n        break;\n      case 'ArrowRight':\n        detailsElement.open = true;\n        break;\n    }\n  }\n\n  #render(): void {\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`\n      <details open>\n        <summary class=\"header\" @keydown=${this.#onSummaryKeyDown}>\n          ${i18nString(UIStrings.grid)}\n        </summary>\n        <div class=\"content-section\">\n          <h3 class=\"content-section-title\">${i18nString(UIStrings.overlayDisplaySettings)}</h3>\n          <div class=\"select-settings\">\n            ${this.#getEnumSettings().map(setting => this.#renderEnumSetting(setting))}\n          </div>\n          <div class=\"checkbox-settings\">\n            ${this.#getBooleanSettings().map(setting => this.#renderBooleanSetting(setting))}\n          </div>\n        </div>\n        ${this.#gridElements ?\n          html`<div class=\"content-section\">\n            <h3 class=\"content-section-title\">\n              ${this.#gridElements.length ? i18nString(UIStrings.gridOverlays) : i18nString(UIStrings.noGridLayoutsFoundOnThisPage)}\n            </h3>\n            ${this.#gridElements.length ?\n              html`<div class=\"elements\">\n                ${this.#gridElements.map(element => this.#renderElement(element))}\n              </div>` : ''}\n          </div>` : ''}\n      </details>\n      ${this.#flexContainerElements !== undefined ?\n        html`\n        <details open>\n          <summary class=\"header\" @keydown=${this.#onSummaryKeyDown}>\n            ${i18nString(UIStrings.flexbox)}\n          </summary>\n          ${this.#flexContainerElements ?\n            html`<div class=\"content-section\">\n              <h3 class=\"content-section-title\">\n                ${this.#flexContainerElements.length ? i18nString(UIStrings.flexboxOverlays) : i18nString(UIStrings.noFlexboxLayoutsFoundOnThisPage)}\n              </h3>\n              ${this.#flexContainerElements.length ?\n                html`<div class=\"elements\">\n                  ${this.#flexContainerElements.map(element => this.#renderElement(element))}\n                </div>` : ''}\n            </div>` : ''}\n        </details>\n        `\n      : ''}\n    `, this.#shadow, {\n      host: this,\n    });\n    // clang-format on\n  }\n\n  #getEnumSettings(): EnumSetting[] {\n    return this.#settings.filter(isEnumSetting);\n  }\n\n  #getBooleanSettings(): BooleanSetting[] {\n    return this.#settings.filter(isBooleanSetting);\n  }\n\n  #onBooleanSettingChange(setting: BooleanSetting, event: HTMLInputElementEvent): void {\n    event.preventDefault();\n    this.dispatchEvent(new SettingChangedEvent(setting.name, event.target.checked));\n  }\n\n  #onEnumSettingChange(setting: EnumSetting, event: HTMLInputElementEvent): void {\n    event.preventDefault();\n    this.dispatchEvent(new SettingChangedEvent(setting.name, event.target.value));\n  }\n\n  #onElementToggle(element: LayoutElement, event: HTMLInputElementEvent): void {\n    event.preventDefault();\n    element.toggle(event.target.checked);\n  }\n\n  #onElementClick(element: LayoutElement, event: HTMLInputElementEvent): void {\n    event.preventDefault();\n    element.reveal();\n  }\n\n  #onColorChange(element: LayoutElement, event: HTMLInputElementEvent): void {\n    event.preventDefault();\n    element.setColor(event.target.value);\n    this.#render();\n  }\n\n  #onElementMouseEnter(element: LayoutElement, event: HTMLInputElementEvent): void {\n    event.preventDefault();\n    element.highlight();\n  }\n\n  #onElementMouseLeave(element: LayoutElement, event: HTMLInputElementEvent): void {\n    event.preventDefault();\n    element.hideHighlight();\n  }\n\n  #renderElement(element: LayoutElement): LitHtml.TemplateResult {\n    const onElementToggle = this.#onElementToggle.bind(this, element);\n    const onElementClick = this.#onElementClick.bind(this, element);\n    const onColorChange = this.#onColorChange.bind(this, element);\n    const onMouseEnter = this.#onElementMouseEnter.bind(this, element);\n    const onMouseLeave = this.#onElementMouseLeave.bind(this, element);\n    const onColorLabelKeyUp = (event: KeyboardEvent): void => {\n      // Handle Enter and Space events to make the color picker accessible.\n      if (event.key !== 'Enter' && event.key !== ' ') {\n        return;\n      }\n      const target = event.target as HTMLLabelElement;\n      const input = target.querySelector('input') as HTMLInputElement;\n      input.click();\n      UI.ARIAUtils.alert(i18nString(UIStrings.colorPickerOpened));\n      event.preventDefault();\n    };\n    const onColorLabelKeyDown = (event: KeyboardEvent): void => {\n      // Prevent default scrolling when the Space key is pressed.\n      if (event.key === ' ') {\n        event.preventDefault();\n      }\n    };\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    return html`<div class=\"element\">\n      <label data-element=\"true\" class=\"checkbox-label\">\n        <input data-input=\"true\" type=\"checkbox\" .checked=${element.enabled} @change=${onElementToggle} />\n        <span class=\"node-text-container\" data-label=\"true\" @mouseenter=${onMouseEnter} @mouseleave=${onMouseLeave}>\n          <${NodeText.NodeText.NodeText.litTagName} .data=${{\n            nodeId: element.domId,\n            nodeTitle: element.name,\n            nodeClasses: element.domClasses,\n          } as NodeText.NodeText.NodeTextData}></${NodeText.NodeText.NodeText.litTagName}>\n        </span>\n      </label>\n      <label @keyup=${onColorLabelKeyUp} @keydown=${onColorLabelKeyDown} tabindex=\"0\" title=${i18nString(UIStrings.chooseElementOverlayColor)} class=\"color-picker-label\" style=\"background: ${element.color};\">\n        <input @change=${onColorChange} @input=${onColorChange} tabindex=\"-1\" class=\"color-picker\" type=\"color\" value=${element.color} />\n      </label>\n      <button tabindex=\"0\" @click=${onElementClick} title=${i18nString(UIStrings.showElementInTheElementsPanel)} class=\"show-element\"></button>\n    </div>`;\n    // clang-format on\n  }\n\n  #renderBooleanSetting(setting: BooleanSetting): LitHtml.TemplateResult {\n    const onBooleanSettingChange = this.#onBooleanSettingChange.bind(this, setting);\n    return html`<label data-boolean-setting=\"true\" class=\"checkbox-label\" title=${setting.title}>\n      <input data-input=\"true\" type=\"checkbox\" .checked=${setting.value} @change=${onBooleanSettingChange} />\n      <span data-label=\"true\">${setting.title}</span>\n    </label>`;\n  }\n\n  #renderEnumSetting(setting: EnumSetting): LitHtml.TemplateResult {\n    const onEnumSettingChange = this.#onEnumSettingChange.bind(this, setting);\n    return html`<label data-enum-setting=\"true\" class=\"select-label\" title=${setting.title}>\n      <select class=\"chrome-select\" data-input=\"true\" @change=${onEnumSettingChange}>\n        ${\n        setting.options.map(\n            opt => html`<option value=${opt.value} .selected=${setting.value === opt.value}>${opt.title}</option>`)}\n      </select>\n    </label>`;\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-layout-pane', LayoutPane);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-layout-pane': LayoutPane;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
