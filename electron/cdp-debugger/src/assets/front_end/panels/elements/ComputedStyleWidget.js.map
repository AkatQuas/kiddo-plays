{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/elements/ComputedStyleWidget.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2007 Apple Inc.  All rights reserved.\n * Copyright (C) 2009 Joseph Pecoraro\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as InlineEditor from '../../ui/legacy/components/inline_editor/inline_editor.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as ElementsComponents from './components/components.js';\nimport computedStyleSidebarPaneStyles from './computedStyleSidebarPane.css.js';\n\nimport type {ComputedStyle} from './ComputedStyleModel.js';\nimport {ComputedStyleModel, Events} from './ComputedStyleModel.js';\nimport {ImagePreviewPopover} from './ImagePreviewPopover.js';\nimport {PlatformFontsWidget} from './PlatformFontsWidget.js';\nimport type {Category} from './PropertyNameCategories.js';\nimport {categorizePropertyName, DefaultCategoryOrder} from './PropertyNameCategories.js';\nimport {StylePropertiesSection} from './StylePropertiesSection.js';\nimport {StylesSidebarPane, StylesSidebarPropertyRenderer} from './StylesSidebarPane.js';\nimport * as TreeOutline from '../../ui/components/tree_outline/tree_outline.js';\nimport * as LitHtml from '../../ui/lit-html/lit-html.js';\n\nconst UIStrings = {\n  /**\n  * @description Placeholder text for a text input used to filter which CSS properties show up in\n  * the list of computed properties. In the Computed Style Widget of the Elements panel.\n  */\n  filter: 'Filter',\n  /**\n  * @description ARIA accessible name for the text input used to filter which CSS properties show up\n  * in the list of computed properties. In the Computed Style Widget of the Elements panel.\n  */\n  filterComputedStyles: 'Filter Computed Styles',\n  /**\n  * @description Text for a checkbox setting that controls whether the user-supplied filter text\n  * excludes all CSS propreties which are filtered out, or just greys them out. In Computed Style\n  * Widget of the Elements panel\n  */\n  showAll: 'Show all',\n  /**\n  * @description Text for a checkbox setting that controls whether similar CSS properties should be\n  * grouped together or not. In Computed Style Widget of the Elements panel.\n  */\n  group: 'Group',\n  /** [\n  * @description Text shown to the user when a filter is applied to the computed CSS properties, but\n  * no properties matched the filter and thus no results were returned.\n  */\n  noMatchingProperty: 'No matching property',\n  /**\n  * @description Context menu item in Elements panel to navigate to the source code location of the\n  * CSS selector that was clicked on.\n  */\n  navigateToSelectorSource: 'Navigate to selector source',\n  /**\n  * @description Context menu item in Elements panel to navigate to the corresponding CSS style rule\n  * for this computed property.\n  */\n  navigateToStyle: 'Navigate to style',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/elements/ComputedStyleWidget.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst createPropertyElement =\n    (node: SDK.DOMModel.DOMNode, propertyName: string, propertyValue: string, traceable: boolean, inherited: boolean,\n     onNavigateToSource: ((event?: Event) => void)): ElementsComponents.ComputedStyleProperty.ComputedStyleProperty => {\n      const propertyElement = new ElementsComponents.ComputedStyleProperty.ComputedStyleProperty();\n\n      const renderer = new StylesSidebarPropertyRenderer(null, node, propertyName, propertyValue);\n      renderer.setColorHandler(processColor);\n\n      propertyElement.data = {\n        propertyNameRenderer: renderer.renderName.bind(renderer),\n        propertyValueRenderer: renderer.renderValue.bind(renderer),\n        traceable,\n        inherited,\n        onNavigateToSource,\n      };\n\n      return propertyElement;\n    };\n\nconst createTraceElement =\n    (node: SDK.DOMModel.DOMNode, property: SDK.CSSProperty.CSSProperty, isPropertyOverloaded: boolean,\n     matchedStyles: SDK.CSSMatchedStyles.CSSMatchedStyles,\n     linkifier: Components.Linkifier.Linkifier): ElementsComponents.ComputedStyleTrace.ComputedStyleTrace => {\n      const trace = new ElementsComponents.ComputedStyleTrace.ComputedStyleTrace();\n\n      const renderer = new StylesSidebarPropertyRenderer(null, node, property.name, (property.value as string));\n      renderer.setColorHandler(processColor);\n      const valueElement = renderer.renderValue();\n      valueElement.slot = 'trace-value';\n      trace.appendChild(valueElement);\n\n      const rule = (property.ownerStyle.parentRule as SDK.CSSRule.CSSStyleRule | null);\n      let ruleOriginNode;\n      if (rule) {\n        ruleOriginNode = StylePropertiesSection.createRuleOriginNode(matchedStyles, linkifier, rule);\n      }\n      trace.data = {\n        selector: rule ? rule.selectorText() : 'element.style',\n        active: !isPropertyOverloaded,\n        onNavigateToSource: navigateToSource.bind(null, property),\n        ruleOriginNode,\n      };\n\n      return trace;\n    };\n\nconst processColor = (text: string): Node => {\n  const swatch = new InlineEditor.ColorSwatch.ColorSwatch();\n  swatch.renderColor(text, true);\n  const valueElement = document.createElement('span');\n  valueElement.textContent = swatch.getText();\n  swatch.append(valueElement);\n\n  swatch.addEventListener(\n      InlineEditor.ColorSwatch.FormatChangedEvent.eventName, (event: InlineEditor.ColorSwatch.FormatChangedEvent) => {\n        const {data} = event;\n        valueElement.textContent = data.text;\n      });\n\n  return swatch;\n};\n\nconst navigateToSource = (cssProperty: SDK.CSSProperty.CSSProperty, event?: Event): void => {\n  if (!event) {\n    return;\n  }\n  void Common.Revealer.reveal(cssProperty);\n  event.consume(true);\n};\n\nconst propertySorter = (propA: string, propB: string): number => {\n  if (propA.startsWith('--') !== propB.startsWith('--')) {\n    return propA.startsWith('--') ? 1 : -1;\n  }\n  if (propA.startsWith('-webkit') !== propB.startsWith('-webkit')) {\n    return propA.startsWith('-webkit') ? 1 : -1;\n  }\n  const canonicalA = SDK.CSSMetadata.cssMetadata().canonicalPropertyName(propA);\n  const canonicalB = SDK.CSSMetadata.cssMetadata().canonicalPropertyName(propB);\n  return Platform.StringUtilities.compare(canonicalA, canonicalB);\n};\n\ntype ComputedStyleData = {\n  tag: 'property',\n  propertyName: string,\n  propertyValue: string,\n  inherited: boolean,\n}|{\n  tag: 'traceElement',\n  property: SDK.CSSProperty.CSSProperty,\n  rule: SDK.CSSRule.CSSRule | null,\n}|{\n  tag: 'category',\n  name: string,\n};\n\nexport class ComputedStyleWidget extends UI.ThrottledWidget.ThrottledWidget {\n  private computedStyleModel: ComputedStyleModel;\n  private readonly showInheritedComputedStylePropertiesSetting: Common.Settings.Setting<boolean>;\n  private readonly groupComputedStylesSetting: Common.Settings.Setting<boolean>;\n  input: Element;\n  private filterRegex: RegExp|null;\n  private readonly noMatchesElement: HTMLElement;\n  private readonly linkifier: Components.Linkifier.Linkifier;\n  private readonly imagePreviewPopover: ImagePreviewPopover;\n\n  #computedStylesTree = new TreeOutline.TreeOutline.TreeOutline<ComputedStyleData>();\n  #treeData?: TreeOutline.TreeOutline.TreeOutlineData<ComputedStyleData>;\n\n  constructor() {\n    super(true);\n\n    this.computedStyleModel = new ComputedStyleModel();\n    this.computedStyleModel.addEventListener(Events.ComputedStyleChanged, this.update, this);\n\n    this.showInheritedComputedStylePropertiesSetting =\n        Common.Settings.Settings.instance().createSetting('showInheritedComputedStyleProperties', false);\n    this.showInheritedComputedStylePropertiesSetting.addChangeListener(this.update.bind(this));\n\n    this.groupComputedStylesSetting = Common.Settings.Settings.instance().createSetting('groupComputedStyles', false);\n    this.groupComputedStylesSetting.addChangeListener(() => {\n      this.update();\n    });\n\n    const hbox = this.contentElement.createChild('div', 'hbox styles-sidebar-pane-toolbar');\n    const filterContainerElement = hbox.createChild('div', 'styles-sidebar-pane-filter-box');\n    const filterInput = StylesSidebarPane.createPropertyFilterElement(\n        i18nString(UIStrings.filter), hbox, this.filterComputedStyles.bind(this));\n    UI.ARIAUtils.setAccessibleName(filterInput, i18nString(UIStrings.filterComputedStyles));\n    filterContainerElement.appendChild(filterInput);\n    this.input = filterInput;\n    this.filterRegex = null;\n\n    const toolbar = new UI.Toolbar.Toolbar('styles-pane-toolbar', hbox);\n    toolbar.appendToolbarItem(new UI.Toolbar.ToolbarSettingCheckbox(\n        this.showInheritedComputedStylePropertiesSetting, undefined, i18nString(UIStrings.showAll)));\n    toolbar.appendToolbarItem(\n        new UI.Toolbar.ToolbarSettingCheckbox(this.groupComputedStylesSetting, undefined, i18nString(UIStrings.group)));\n\n    this.noMatchesElement = this.contentElement.createChild('div', 'gray-info-message');\n    this.noMatchesElement.textContent = i18nString(UIStrings.noMatchingProperty);\n\n    this.contentElement.appendChild(this.#computedStylesTree);\n\n    this.linkifier = new Components.Linkifier.Linkifier(_maxLinkLength);\n\n    this.imagePreviewPopover = new ImagePreviewPopover(this.contentElement, event => {\n      const link = event.composedPath()[0];\n      if (link instanceof Element) {\n        return link;\n      }\n      return null;\n    }, () => this.computedStyleModel.node());\n\n    const fontsWidget = new PlatformFontsWidget(this.computedStyleModel);\n    fontsWidget.show(this.contentElement);\n\n    Common.Settings.Settings.instance().moduleSetting('colorFormat').addChangeListener(this.update.bind(this));\n  }\n\n  onResize(): void {\n    const isNarrow = this.contentElement.offsetWidth < 260;\n    this.#computedStylesTree.classList.toggle('computed-narrow', isNarrow);\n  }\n\n  private showInheritedComputedStyleChanged(): void {\n    this.update();\n  }\n\n  update(): void {\n    super.update();\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([computedStyleSidebarPaneStyles]);\n  }\n\n  async doUpdate(): Promise<void> {\n    const [nodeStyles, matchedStyles] =\n        await Promise.all([this.computedStyleModel.fetchComputedStyle(), this.fetchMatchedCascade()]);\n    if (!nodeStyles || !matchedStyles) {\n      this.noMatchesElement.classList.remove('hidden');\n      return;\n    }\n    const shouldGroupComputedStyles = this.groupComputedStylesSetting.get();\n    if (shouldGroupComputedStyles) {\n      await this.rebuildGroupedList(nodeStyles, matchedStyles);\n    } else {\n      await this.rebuildAlphabeticalList(nodeStyles, matchedStyles);\n    }\n  }\n\n  private async fetchMatchedCascade(): Promise<SDK.CSSMatchedStyles.CSSMatchedStyles|null> {\n    const node = this.computedStyleModel.node();\n    if (!node || !this.computedStyleModel.cssModel()) {\n      return null;\n    }\n\n    const cssModel = this.computedStyleModel.cssModel();\n    if (!cssModel) {\n      return null;\n    }\n\n    return cssModel.cachedMatchedCascadeForNode(node).then(validateStyles.bind(this));\n\n    function validateStyles(this: ComputedStyleWidget, matchedStyles: SDK.CSSMatchedStyles.CSSMatchedStyles|null):\n        SDK.CSSMatchedStyles.CSSMatchedStyles|null {\n      return matchedStyles && matchedStyles.node() === this.computedStyleModel.node() ? matchedStyles : null;\n    }\n  }\n\n  private async rebuildAlphabeticalList(nodeStyle: ComputedStyle, matchedStyles: SDK.CSSMatchedStyles.CSSMatchedStyles):\n      Promise<void> {\n    this.imagePreviewPopover.hide();\n    this.linkifier.reset();\n    const cssModel = this.computedStyleModel.cssModel();\n    if (!cssModel) {\n      return;\n    }\n\n    const uniqueProperties = [...nodeStyle.computedStyle.keys()];\n    uniqueProperties.sort(propertySorter);\n\n    const node = nodeStyle.node;\n    const propertyTraces = this.computePropertyTraces(matchedStyles);\n    const nonInheritedProperties = this.computeNonInheritedProperties(matchedStyles);\n    const showInherited = this.showInheritedComputedStylePropertiesSetting.get();\n    const tree: TreeOutline.TreeOutlineUtils.TreeNode<ComputedStyleData>[] = [];\n    for (const propertyName of uniqueProperties) {\n      const propertyValue = nodeStyle.computedStyle.get(propertyName) || '';\n      const canonicalName = SDK.CSSMetadata.cssMetadata().canonicalPropertyName(propertyName);\n      const isInherited = !nonInheritedProperties.has(canonicalName);\n      if (!showInherited && isInherited && !_alwaysShownComputedProperties.has(propertyName)) {\n        continue;\n      }\n      if (!showInherited && propertyName.startsWith('--')) {\n        continue;\n      }\n      if (propertyName !== canonicalName && propertyValue === nodeStyle.computedStyle.get(canonicalName)) {\n        continue;\n      }\n      tree.push(this.buildTreeNode(propertyTraces, propertyName, propertyValue, isInherited));\n    }\n\n    const defaultRenderer = this.createTreeNodeRenderer(propertyTraces, node, matchedStyles);\n    this.#treeData = {\n      tree,\n      compact: true,\n      defaultRenderer,\n    };\n    this.filterAlphabeticalList();\n  }\n\n  private async rebuildGroupedList(\n      nodeStyle: ComputedStyle|null, matchedStyles: SDK.CSSMatchedStyles.CSSMatchedStyles|null): Promise<void> {\n    this.imagePreviewPopover.hide();\n    this.linkifier.reset();\n    const cssModel = this.computedStyleModel.cssModel();\n    if (!nodeStyle || !matchedStyles || !cssModel) {\n      this.noMatchesElement.classList.remove('hidden');\n      return;\n    }\n\n    const node = nodeStyle.node;\n    const propertyTraces = this.computePropertyTraces(matchedStyles);\n    const nonInheritedProperties = this.computeNonInheritedProperties(matchedStyles);\n    const showInherited = this.showInheritedComputedStylePropertiesSetting.get();\n\n    const propertiesByCategory = new Map<Category, string[]>();\n\n    const tree: TreeOutline.TreeOutlineUtils.TreeNode<ComputedStyleData>[] = [];\n    for (const [propertyName, propertyValue] of nodeStyle.computedStyle) {\n      const canonicalName = SDK.CSSMetadata.cssMetadata().canonicalPropertyName(propertyName);\n      const isInherited = !nonInheritedProperties.has(canonicalName);\n      if (!showInherited && isInherited && !_alwaysShownComputedProperties.has(propertyName)) {\n        continue;\n      }\n      if (!showInherited && propertyName.startsWith('--')) {\n        continue;\n      }\n      if (propertyName !== canonicalName && propertyValue === nodeStyle.computedStyle.get(canonicalName)) {\n        continue;\n      }\n\n      const categories = categorizePropertyName(propertyName);\n      for (const category of categories) {\n        if (!propertiesByCategory.has(category)) {\n          propertiesByCategory.set(category, []);\n        }\n        propertiesByCategory.get(category)?.push(propertyName);\n      }\n    }\n\n    this.#computedStylesTree.removeChildren();\n    for (const category of DefaultCategoryOrder) {\n      const properties = propertiesByCategory.get(category);\n      if (properties && properties.length > 0) {\n        const propertyNodes: TreeOutline.TreeOutlineUtils.TreeNode<ComputedStyleData>[] = [];\n        for (const propertyName of properties) {\n          const propertyValue = nodeStyle.computedStyle.get(propertyName) || '';\n          const canonicalName = SDK.CSSMetadata.cssMetadata().canonicalPropertyName(propertyName);\n          const isInherited = !nonInheritedProperties.has(canonicalName);\n          propertyNodes.push(this.buildTreeNode(propertyTraces, propertyName, propertyValue, isInherited));\n        }\n        tree.push({id: category, treeNodeData: {tag: 'category', name: category}, children: async () => propertyNodes});\n      }\n    }\n    const defaultRenderer = this.createTreeNodeRenderer(propertyTraces, node, matchedStyles);\n    this.#treeData = {\n      tree,\n      compact: true,\n      defaultRenderer,\n    };\n    return this.filterGroupLists();\n  }\n\n  private buildTraceNode(property: SDK.CSSProperty.CSSProperty):\n      TreeOutline.TreeOutlineUtils.TreeNode<ComputedStyleData> {\n    const rule = property.ownerStyle.parentRule as SDK.CSSRule.CSSStyleRule;\n    return {\n      treeNodeData: {\n        tag: 'traceElement',\n        property,\n        rule,\n      },\n      id: rule.origin + ': ' + rule.styleSheetId + property.range,\n    };\n  }\n\n  private createTreeNodeRenderer(\n      propertyTraces: Map<string, SDK.CSSProperty.CSSProperty[]>,\n      domNode: SDK.DOMModel.DOMNode,\n      matchedStyles: SDK.CSSMatchedStyles.CSSMatchedStyles,\n      ):\n      (node: TreeOutline.TreeOutlineUtils.TreeNode<ComputedStyleData>,\n       state: {isExpanded: boolean}) => LitHtml.TemplateResult {\n    return node => {\n      const data = node.treeNodeData;\n      let navigate: (arg0?: Event) => void = () => {};\n      if (data.tag === 'property') {\n        const trace = propertyTraces.get(data.propertyName);\n        const activeProperty = trace?.find(\n            property => matchedStyles.propertyState(property) === SDK.CSSMatchedStyles.PropertyState.Active);\n        if (activeProperty) {\n          navigate = navigateToSource.bind(this, activeProperty);\n        }\n        const propertyElement = createPropertyElement(\n            domNode, data.propertyName, data.propertyValue, propertyTraces.has(data.propertyName), data.inherited,\n            navigate);\n        if (activeProperty) {\n          propertyElement.addEventListener(\n              'contextmenu', this.handleContextMenuEvent.bind(this, matchedStyles, activeProperty));\n        }\n        return LitHtml.html`${propertyElement}`;\n      }\n      if (data.tag === 'traceElement') {\n        const isPropertyOverloaded =\n            matchedStyles.propertyState(data.property) === SDK.CSSMatchedStyles.PropertyState.Overloaded;\n        const traceElement =\n            createTraceElement(domNode, data.property, isPropertyOverloaded, matchedStyles, this.linkifier);\n        traceElement.addEventListener(\n            'contextmenu', this.handleContextMenuEvent.bind(this, matchedStyles, data.property));\n        return LitHtml.html`${traceElement}`;\n      }\n      return LitHtml.html`<span style=\"cursor: text; color: var(--color-text-secondary);\">${data.name}</span>`;\n    };\n  }\n\n  private buildTreeNode(\n      propertyTraces: Map<string, SDK.CSSProperty.CSSProperty[]>, propertyName: string, propertyValue: string,\n      isInherited: boolean): TreeOutline.TreeOutlineUtils.TreeNode<ComputedStyleData> {\n    const treeNodeData: ComputedStyleData = {\n      tag: 'property',\n      propertyName,\n      propertyValue,\n      inherited: isInherited,\n    };\n    const trace = propertyTraces.get(propertyName);\n    if (!trace) {\n      return {\n        treeNodeData,\n        id: propertyName,\n      };\n    }\n    return {\n      treeNodeData,\n      id: propertyName,\n      children: async () => trace.map(this.buildTraceNode),\n    };\n  }\n\n  private handleContextMenuEvent(\n      matchedStyles: SDK.CSSMatchedStyles.CSSMatchedStyles, property: SDK.CSSProperty.CSSProperty, event: Event): void {\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    const rule = property.ownerStyle.parentRule;\n\n    if (rule) {\n      const header = rule.styleSheetId ? matchedStyles.cssModel().styleSheetHeaderForId(rule.styleSheetId) : null;\n      if (header && !header.isAnonymousInlineStyleSheet()) {\n        contextMenu.defaultSection().appendItem(i18nString(UIStrings.navigateToSelectorSource), () => {\n          StylePropertiesSection.tryNavigateToRuleLocation(matchedStyles, rule);\n        });\n      }\n    }\n\n    contextMenu.defaultSection().appendItem(\n        i18nString(UIStrings.navigateToStyle), () => Common.Revealer.reveal(property));\n    void contextMenu.show();\n  }\n\n  private computePropertyTraces(matchedStyles: SDK.CSSMatchedStyles.CSSMatchedStyles):\n      Map<string, SDK.CSSProperty.CSSProperty[]> {\n    const result = new Map<string, SDK.CSSProperty.CSSProperty[]>();\n    for (const style of matchedStyles.nodeStyles()) {\n      const allProperties = style.allProperties();\n      for (const property of allProperties) {\n        if (!property.activeInStyle() || !matchedStyles.propertyState(property)) {\n          continue;\n        }\n        if (!result.has(property.name)) {\n          result.set(property.name, []);\n        }\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n        // @ts-expect-error\n        result.get(property.name).push(property);\n      }\n    }\n    return result;\n  }\n\n  private computeNonInheritedProperties(matchedStyles: SDK.CSSMatchedStyles.CSSMatchedStyles): Set<string> {\n    const result = new Set<string>();\n    for (const style of matchedStyles.nodeStyles()) {\n      for (const property of style.allProperties()) {\n        if (!matchedStyles.propertyState(property)) {\n          continue;\n        }\n        result.add(SDK.CSSMetadata.cssMetadata().canonicalPropertyName(property.name));\n      }\n    }\n    return result;\n  }\n\n  async filterComputedStyles(this: ComputedStyleWidget, regex: RegExp|null): Promise<void> {\n    this.filterRegex = regex;\n    if (this.groupComputedStylesSetting.get()) {\n      return this.filterGroupLists();\n    }\n    return this.filterAlphabeticalList();\n  }\n\n  private nodeFilter(node: TreeOutline.TreeOutlineUtils.TreeNode<ComputedStyleData>): boolean {\n    const regex = this.filterRegex;\n    const data = node.treeNodeData;\n    if (data.tag === 'property') {\n      const matched = !regex || regex.test(data.propertyName) || regex.test(data.propertyValue);\n      return matched;\n    }\n    return true;\n  }\n\n  private filterAlphabeticalList(): void {\n    if (!this.#treeData) {\n      return;\n    }\n    const tree = this.#treeData.tree.filter(this.nodeFilter.bind(this));\n    this.#computedStylesTree.data = {\n      tree,\n      defaultRenderer: this.#treeData.defaultRenderer,\n      compact: this.#treeData.compact,\n    };\n    this.noMatchesElement.classList.toggle('hidden', Boolean(tree.length));\n  }\n\n  private async filterGroupLists(): Promise<void> {\n    if (!this.#treeData) {\n      return;\n    }\n    const tree: TreeOutline.TreeOutlineUtils.TreeNode<ComputedStyleData>[] = [];\n    for (const group of this.#treeData.tree) {\n      const data = group.treeNodeData;\n      if (data.tag !== 'category' || !group.children) {\n        continue;\n      }\n      const properties = await group.children();\n      const filteredChildren = properties.filter(this.nodeFilter.bind(this));\n      if (filteredChildren.length) {\n        tree.push(\n            {id: data.name, treeNodeData: {tag: 'category', name: data.name}, children: async () => filteredChildren});\n      }\n    }\n\n    this.#computedStylesTree.data = {\n      tree,\n      defaultRenderer: this.#treeData.defaultRenderer,\n      compact: this.#treeData.compact,\n    };\n    await this.#computedStylesTree.expandRecursively(0);\n    this.noMatchesElement.classList.toggle('hidden', Boolean(tree.length));\n  }\n}\n\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst _maxLinkLength = 30;\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst _alwaysShownComputedProperties = new Set<string>(['display', 'height', 'width']);\n"],
  "mappings": "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",
  "names": []
}
