{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/elements/LayoutSidebarPane.ts"],
  "sourcesContent": ["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as ElementsComponents from './components/components.js';\n\nimport {ElementsPanel} from './ElementsPanel.js';\n\nconst nodeToLayoutElement = (node: SDK.DOMModel.DOMNode): ElementsComponents.LayoutPane.LayoutElement => {\n  const className = node.getAttribute('class');\n  const nodeId = node.id;\n  return {\n    id: nodeId,\n    color: '#000',\n    name: node.localName(),\n    domId: node.getAttribute('id'),\n    domClasses: className ? className.split(/\\s+/).filter(s => Boolean(s)) : undefined,\n    enabled: false,\n    reveal: (): void => {\n      void ElementsPanel.instance().revealAndSelectNode(node, true, true);\n      void node.scrollIntoView();\n    },\n    highlight: (): void => {\n      node.highlight();\n    },\n    hideHighlight: (): void => {\n      SDK.OverlayModel.OverlayModel.hideDOMNodeHighlight();\n    },\n    toggle: (_value: boolean): never => {\n      throw new Error('Not implemented');\n    },\n    setColor(_value: string): never {\n      throw new Error('Not implemented');\n    },\n  };\n};\n\nconst gridNodesToElements = (nodes: SDK.DOMModel.DOMNode[]): ElementsComponents.LayoutPane.LayoutElement[] => {\n  return nodes.map(node => {\n    const layoutElement = nodeToLayoutElement(node);\n    const nodeId = node.id;\n    return {\n      ...layoutElement,\n      color: node.domModel().overlayModel().colorOfGridInPersistentOverlay(nodeId) || '#000',\n      enabled: node.domModel().overlayModel().isHighlightedGridInPersistentOverlay(nodeId),\n      toggle: (value: boolean): void => {\n        if (value) {\n          node.domModel().overlayModel().highlightGridInPersistentOverlay(nodeId);\n        } else {\n          node.domModel().overlayModel().hideGridInPersistentOverlay(nodeId);\n        }\n      },\n      setColor(value: string): void {\n        this.color = value;\n        node.domModel().overlayModel().setColorOfGridInPersistentOverlay(nodeId, value);\n      },\n    };\n  });\n};\n\nlet layoutSidebarPaneInstance: LayoutSidebarPane;\n\nconst flexContainerNodesToElements = (nodes: SDK.DOMModel.DOMNode[]): ElementsComponents.LayoutPane.LayoutElement[] => {\n  return nodes.map(node => {\n    const layoutElement = nodeToLayoutElement(node);\n    const nodeId = node.id;\n    return {\n      ...layoutElement,\n      color: node.domModel().overlayModel().colorOfFlexInPersistentOverlay(nodeId) || '#000',\n      enabled: node.domModel().overlayModel().isHighlightedFlexContainerInPersistentOverlay(nodeId),\n      toggle: (value: boolean): void => {\n        if (value) {\n          node.domModel().overlayModel().highlightFlexContainerInPersistentOverlay(nodeId);\n        } else {\n          node.domModel().overlayModel().hideFlexContainerInPersistentOverlay(nodeId);\n        }\n      },\n      setColor(value: string): void {\n        this.color = value;\n        node.domModel().overlayModel().setColorOfFlexInPersistentOverlay(nodeId, value);\n      },\n    };\n  });\n};\n\nexport class LayoutSidebarPane extends UI.ThrottledWidget.ThrottledWidget {\n  private layoutPane: ElementsComponents.LayoutPane.LayoutPane;\n  private readonly settings: string[];\n  private readonly uaShadowDOMSetting: Common.Settings.Setting<boolean>;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private readonly boundOnSettingChanged: (event: any) => void;\n  private domModels: SDK.DOMModel.DOMModel[];\n\n  constructor() {\n    super(true /* isWebComponent */);\n    this.layoutPane = new ElementsComponents.LayoutPane.LayoutPane();\n    this.contentElement.appendChild(this.layoutPane);\n    this.settings = ['showGridLineLabels', 'showGridTrackSizes', 'showGridAreas', 'extendGridLines'];\n    this.uaShadowDOMSetting = Common.Settings.Settings.instance().moduleSetting('showUAShadowDOM');\n    this.boundOnSettingChanged = this.onSettingChanged.bind(this);\n    this.domModels = [];\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  }|undefined = {forceNew: null}): LayoutSidebarPane {\n    const {forceNew} = opts;\n    if (!layoutSidebarPaneInstance || forceNew) {\n      layoutSidebarPaneInstance = new LayoutSidebarPane();\n    }\n\n    return layoutSidebarPaneInstance;\n  }\n\n  modelAdded(domModel: SDK.DOMModel.DOMModel): void {\n    const overlayModel = domModel.overlayModel();\n    overlayModel.addEventListener(SDK.OverlayModel.Events.PersistentGridOverlayStateChanged, this.update, this);\n    overlayModel.addEventListener(\n        SDK.OverlayModel.Events.PersistentFlexContainerOverlayStateChanged, this.update, this);\n    this.domModels.push(domModel);\n  }\n\n  modelRemoved(domModel: SDK.DOMModel.DOMModel): void {\n    const overlayModel = domModel.overlayModel();\n    overlayModel.removeEventListener(SDK.OverlayModel.Events.PersistentGridOverlayStateChanged, this.update, this);\n    overlayModel.removeEventListener(\n        SDK.OverlayModel.Events.PersistentFlexContainerOverlayStateChanged, this.update, this);\n    this.domModels = this.domModels.filter(model => model !== domModel);\n  }\n\n  private async fetchNodesByStyle(style: {\n    name: string,\n    value: string,\n  }[]): Promise<SDK.DOMModel.DOMNode[]> {\n    const showUAShadowDOM = this.uaShadowDOMSetting.get();\n\n    const nodes = [];\n    for (const domModel of this.domModels) {\n      try {\n        const nodeIds = await domModel.getNodesByStyle(style, true /* pierce */);\n        for (const nodeId of nodeIds) {\n          const node = domModel.nodeForId(nodeId);\n          if (node !== null && (showUAShadowDOM || !node.ancestorUserAgentShadowRoot())) {\n            nodes.push(node);\n          }\n        }\n      } catch (error) {\n        // TODO(crbug.com/1167706): Sometimes in E2E tests the layout panel is updated after a DOM node\n        // has been removed. This causes an error that a node has not been found.\n        // We can skip nodes that resulted in an error.\n        console.warn(error);\n      }\n    }\n\n    return nodes;\n  }\n\n  private async fetchGridNodes(): Promise<SDK.DOMModel.DOMNode[]> {\n    return await this.fetchNodesByStyle([{name: 'display', value: 'grid'}, {name: 'display', value: 'inline-grid'}]);\n  }\n\n  private async fetchFlexContainerNodes(): Promise<SDK.DOMModel.DOMNode[]> {\n    return await this.fetchNodesByStyle([{name: 'display', value: 'flex'}, {name: 'display', value: 'inline-flex'}]);\n  }\n\n  private mapSettings(): ElementsComponents.LayoutPaneUtils.Setting[] {\n    const settings = [];\n    for (const settingName of this.settings) {\n      const setting = Common.Settings.Settings.instance().moduleSetting(settingName);\n      const settingValue = setting.get();\n      const settingType = setting.type();\n      if (!settingType) {\n        throw new Error('A setting provided to LayoutSidebarPane does not have a setting type');\n      }\n      if (settingType !== Common.Settings.SettingType.BOOLEAN && settingType !== Common.Settings.SettingType.ENUM) {\n        throw new Error('A setting provided to LayoutSidebarPane does not have a supported setting type');\n      }\n      const mappedSetting = {\n        type: settingType,\n        name: setting.name,\n        title: setting.title(),\n      };\n      if (typeof settingValue === 'boolean') {\n        settings.push({\n          ...mappedSetting,\n          value: settingValue,\n          options: setting.options().map(opt => ({\n                                           ...opt,\n                                           value: (opt.value as boolean),\n                                         })),\n        });\n      } else if (typeof settingValue === 'string') {\n        settings.push({\n          ...mappedSetting,\n          value: settingValue,\n          options: setting.options().map(opt => ({\n                                           ...opt,\n                                           value: (opt.value as string),\n                                         })),\n        });\n      }\n    }\n    return settings;\n  }\n\n  async doUpdate(): Promise<void> {\n    this.layoutPane.data = {\n      gridElements: gridNodesToElements(await this.fetchGridNodes()),\n      flexContainerElements: flexContainerNodesToElements(await this.fetchFlexContainerNodes()),\n      settings: this.mapSettings(),\n    };\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  onSettingChanged(event: any): void {\n    Common.Settings.Settings.instance().moduleSetting(event.data.setting).set(event.data.value);\n  }\n\n  wasShown(): void {\n    for (const setting of this.settings) {\n      Common.Settings.Settings.instance().moduleSetting(setting).addChangeListener(this.update, this);\n    }\n    this.layoutPane.addEventListener('settingchanged', this.boundOnSettingChanged);\n    for (const domModel of this.domModels) {\n      this.modelRemoved(domModel);\n    }\n    this.domModels = [];\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.DOMModel.DOMModel, this);\n    UI.Context.Context.instance().addFlavorChangeListener(SDK.DOMModel.DOMNode, this.update, this);\n    this.uaShadowDOMSetting.addChangeListener(this.update, this);\n    this.update();\n  }\n\n  willHide(): void {\n    for (const setting of this.settings) {\n      Common.Settings.Settings.instance().moduleSetting(setting).removeChangeListener(this.update, this);\n    }\n    this.layoutPane.removeEventListener('settingchanged', this.boundOnSettingChanged);\n    SDK.TargetManager.TargetManager.instance().unobserveModels(SDK.DOMModel.DOMModel, this);\n    UI.Context.Context.instance().removeFlavorChangeListener(SDK.DOMModel.DOMNode, this.update, this);\n    this.uaShadowDOMSetting.removeChangeListener(this.update, this);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
