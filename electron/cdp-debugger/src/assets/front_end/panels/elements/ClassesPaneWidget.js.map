{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/elements/ClassesPaneWidget.ts"],
  "sourcesContent": ["// Copyright (c) 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport classesPaneWidgetStyles from './classesPaneWidget.css.js';\nimport {ElementsPanel} from './ElementsPanel.js';\n\nconst UIStrings = {\n  /**\n  * @description Prompt text for a text field in the Classes Pane Widget of the Elements panel.\n  * Class refers to a CSS class.\n  */\n  addNewClass: 'Add new class',\n  /**\n  * @description Screen reader announcement string when adding a CSS class via the Classes Pane Widget.\n  * @example {vbox flex-auto} PH1\n  */\n  classesSAdded: 'Classes {PH1} added',\n  /**\n  * @description Screen reader announcement string when adding a class via the Classes Pane Widget.\n  * @example {title-container} PH1\n  */\n  classSAdded: 'Class {PH1} added',\n  /**\n  * @description Accessible title read by screen readers for the Classes Pane Widget of the Elements\n  * panel. Element is a HTML DOM Element and classes refers to CSS classes.\n  */\n  elementClasses: 'Element Classes',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/elements/ClassesPaneWidget.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class ClassesPaneWidget extends UI.Widget.Widget {\n  private input: HTMLElement;\n  private readonly classesContainer: HTMLElement;\n  private readonly prompt: ClassNamePrompt;\n  private readonly mutatingNodes: Set<SDK.DOMModel.DOMNode>;\n  private readonly pendingNodeClasses: Map<SDK.DOMModel.DOMNode, string>;\n  private readonly updateNodeThrottler: Common.Throttler.Throttler;\n  private previousTarget: SDK.DOMModel.DOMNode|null;\n\n  constructor() {\n    super(true);\n    this.contentElement.className = 'styles-element-classes-pane';\n    const container = this.contentElement.createChild('div', 'title-container');\n    this.input = container.createChild('div', 'new-class-input monospace');\n    this.setDefaultFocusedElement(this.input);\n    this.classesContainer = this.contentElement.createChild('div', 'source-code');\n    this.classesContainer.classList.add('styles-element-classes-container');\n    this.prompt = new ClassNamePrompt(this.nodeClasses.bind(this));\n    this.prompt.setAutocompletionTimeout(0);\n    this.prompt.renderAsBlock();\n\n    const proxyElement = (this.prompt.attach(this.input) as HTMLElement);\n    this.prompt.setPlaceholder(i18nString(UIStrings.addNewClass));\n    this.prompt.addEventListener(UI.TextPrompt.Events.TextChanged, this.onTextChanged, this);\n    proxyElement.addEventListener('keydown', this.onKeyDown.bind(this), false);\n\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.DOMModel.DOMModel, SDK.DOMModel.Events.DOMMutated, this.onDOMMutated, this);\n    this.mutatingNodes = new Set();\n    this.pendingNodeClasses = new Map();\n    this.updateNodeThrottler = new Common.Throttler.Throttler(0);\n    this.previousTarget = null;\n    UI.Context.Context.instance().addFlavorChangeListener(SDK.DOMModel.DOMNode, this.onSelectedNodeChanged, this);\n  }\n\n  private splitTextIntoClasses(text: string): string[] {\n    return text.split(/[,\\s]/).map(className => className.trim()).filter(className => className.length);\n  }\n\n  private onKeyDown(event: KeyboardEvent): void {\n    if (!(event.key === 'Enter') && !isEscKey(event)) {\n      return;\n    }\n\n    if (event.key === 'Enter') {\n      event.consume();\n      if (this.prompt.acceptAutoComplete()) {\n        return;\n      }\n    }\n\n    const eventTarget = (event.target as HTMLElement);\n    let text: ''|string = (eventTarget.textContent as string);\n    if (isEscKey(event)) {\n      if (!Platform.StringUtilities.isWhitespace(text)) {\n        event.consume(true);\n      }\n      text = '';\n    }\n\n    this.prompt.clearAutocomplete();\n    eventTarget.textContent = '';\n\n    const node = UI.Context.Context.instance().flavor(SDK.DOMModel.DOMNode);\n    if (!node) {\n      return;\n    }\n\n    const classNames = this.splitTextIntoClasses(text);\n    if (!classNames.length) {\n      this.installNodeClasses(node);\n      return;\n    }\n\n    for (const className of classNames) {\n      this.toggleClass(node, className, true);\n    }\n\n    // annoucementString is used for screen reader to announce that the class(es) has been added successfully.\n    const joinClassString = classNames.join(' ');\n    const announcementString = classNames.length > 1 ? i18nString(UIStrings.classesSAdded, {PH1: joinClassString}) :\n                                                       i18nString(UIStrings.classSAdded, {PH1: joinClassString});\n    UI.ARIAUtils.alert(announcementString);\n\n    this.installNodeClasses(node);\n    this.update();\n  }\n\n  private onTextChanged(): void {\n    const node = UI.Context.Context.instance().flavor(SDK.DOMModel.DOMNode);\n    if (!node) {\n      return;\n    }\n    this.installNodeClasses(node);\n  }\n\n  private onDOMMutated(event: Common.EventTarget.EventTargetEvent<SDK.DOMModel.DOMNode>): void {\n    const node = event.data;\n    if (this.mutatingNodes.has(node)) {\n      return;\n    }\n    cachedClassesMap.delete(node);\n    this.update();\n  }\n\n  private onSelectedNodeChanged(event: Common.EventTarget.EventTargetEvent<SDK.DOMModel.DOMNode|null>): void {\n    if (this.previousTarget && this.prompt.text()) {\n      this.input.textContent = '';\n      this.installNodeClasses(this.previousTarget);\n    }\n    this.previousTarget = event.data;\n    this.update();\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    this.update();\n    this.registerCSSFiles([classesPaneWidgetStyles]);\n  }\n\n  private update(): void {\n    if (!this.isShowing()) {\n      return;\n    }\n\n    let node = UI.Context.Context.instance().flavor(SDK.DOMModel.DOMNode);\n    if (node) {\n      node = node.enclosingElementOrSelf();\n    }\n\n    this.classesContainer.removeChildren();\n    // @ts-ignore this.input is a div, not an input element. So this line makes no sense at all\n    this.input.disabled = !node;\n\n    if (!node) {\n      return;\n    }\n\n    const classes = this.nodeClasses(node);\n    const keys = [...classes.keys()];\n    keys.sort(Platform.StringUtilities.caseInsensetiveComparator);\n    for (const className of keys) {\n      const label = UI.UIUtils.CheckboxLabel.create(className, classes.get(className));\n      label.classList.add('monospace');\n      label.checkboxElement.addEventListener('click', this.onClick.bind(this, className), false);\n      this.classesContainer.appendChild(label);\n    }\n  }\n\n  private onClick(className: string, event: Event): void {\n    const node = UI.Context.Context.instance().flavor(SDK.DOMModel.DOMNode);\n    if (!node) {\n      return;\n    }\n    const enabled = (event.target as HTMLInputElement).checked;\n    this.toggleClass(node, className, enabled);\n    this.installNodeClasses(node);\n  }\n\n  private nodeClasses(node: SDK.DOMModel.DOMNode): Map<string, boolean> {\n    let result = cachedClassesMap.get(node);\n    if (!result) {\n      const classAttribute = node.getAttribute('class') || '';\n      const classes = classAttribute.split(/\\s/);\n      result = new Map();\n      for (let i = 0; i < classes.length; ++i) {\n        const className = classes[i].trim();\n        if (!className.length) {\n          continue;\n        }\n        result.set(className, true);\n      }\n      cachedClassesMap.set(node, result);\n    }\n    return result;\n  }\n\n  private toggleClass(node: SDK.DOMModel.DOMNode, className: string, enabled: boolean): void {\n    const classes = this.nodeClasses(node);\n    classes.set(className, enabled);\n  }\n\n  private installNodeClasses(node: SDK.DOMModel.DOMNode): void {\n    const classes = this.nodeClasses(node);\n    const activeClasses = new Set<string>();\n    for (const className of classes.keys()) {\n      if (classes.get(className)) {\n        activeClasses.add(className);\n      }\n    }\n\n    const additionalClasses = this.splitTextIntoClasses(this.prompt.textWithCurrentSuggestion());\n    for (const className of additionalClasses) {\n      activeClasses.add(className);\n    }\n\n    const newClasses = [...activeClasses.values()].sort();\n\n    this.pendingNodeClasses.set(node, newClasses.join(' '));\n    void this.updateNodeThrottler.schedule(this.flushPendingClasses.bind(this));\n  }\n\n  private async flushPendingClasses(): Promise<void> {\n    const promises = [];\n    for (const node of this.pendingNodeClasses.keys()) {\n      this.mutatingNodes.add(node);\n      const promise = node.setAttributeValuePromise('class', (this.pendingNodeClasses.get(node) as string))\n                          .then(onClassValueUpdated.bind(this, node));\n      promises.push(promise);\n    }\n    this.pendingNodeClasses.clear();\n    await Promise.all(promises);\n\n    function onClassValueUpdated(this: ClassesPaneWidget, node: SDK.DOMModel.DOMNode): void {\n      this.mutatingNodes.delete(node);\n    }\n  }\n}\n\nconst cachedClassesMap = new WeakMap<SDK.DOMModel.DOMNode, Map<string, boolean>>();\n\nlet buttonProviderInstance: ButtonProvider;\n\nexport class ButtonProvider implements UI.Toolbar.Provider {\n  private readonly button: UI.Toolbar.ToolbarToggle;\n  private view: ClassesPaneWidget;\n  private constructor() {\n    this.button = new UI.Toolbar.ToolbarToggle(i18nString(UIStrings.elementClasses), '');\n    this.button.setText('.cls');\n    this.button.element.classList.add('monospace');\n    this.button.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.clicked, this);\n    this.view = new ClassesPaneWidget();\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ButtonProvider {\n    const {forceNew} = opts;\n    if (!buttonProviderInstance || forceNew) {\n      buttonProviderInstance = new ButtonProvider();\n    }\n\n    return buttonProviderInstance;\n  }\n\n  private clicked(): void {\n    ElementsPanel.instance().showToolbarPane(!this.view.isShowing() ? this.view : null, this.button);\n  }\n\n  item(): UI.Toolbar.ToolbarItem {\n    return this.button;\n  }\n}\n\nexport class ClassNamePrompt extends UI.TextPrompt.TextPrompt {\n  private readonly nodeClasses: (arg0: SDK.DOMModel.DOMNode) => Map<string, boolean>;\n  private selectedFrameId: string|null;\n  private classNamesPromise: Promise<string[]>|null;\n  constructor(nodeClasses: (arg0: SDK.DOMModel.DOMNode) => Map<string, boolean>) {\n    super();\n    this.nodeClasses = nodeClasses;\n    this.initialize(this.buildClassNameCompletions.bind(this), ' ');\n    this.disableDefaultSuggestionForEmptyInput();\n    this.selectedFrameId = '';\n    this.classNamesPromise = null;\n  }\n\n  private async getClassNames(selectedNode: SDK.DOMModel.DOMNode): Promise<string[]> {\n    const promises = [];\n    const completions = new Set<string>();\n    this.selectedFrameId = selectedNode.frameId();\n\n    const cssModel = selectedNode.domModel().cssModel();\n    const allStyleSheets = cssModel.allStyleSheets();\n    for (const stylesheet of allStyleSheets) {\n      if (stylesheet.frameId !== this.selectedFrameId) {\n        continue;\n      }\n      const cssPromise = cssModel.getClassNames(stylesheet.id).then(classes => {\n        for (const className of classes) {\n          completions.add(className);\n        }\n      });\n      promises.push(cssPromise);\n    }\n\n    const ownerDocumentId = ((selectedNode.ownerDocument as SDK.DOMModel.DOMDocument).id);\n\n    const domPromise = selectedNode.domModel().classNamesPromise(ownerDocumentId).then(classes => {\n      for (const className of classes) {\n        completions.add(className);\n      }\n    });\n    promises.push(domPromise);\n    await Promise.all(promises);\n    return [...completions];\n  }\n\n  private async buildClassNameCompletions(expression: string, prefix: string, force?: boolean):\n      Promise<UI.SuggestBox.Suggestions> {\n    if (!prefix || force) {\n      this.classNamesPromise = null;\n    }\n\n    const selectedNode = UI.Context.Context.instance().flavor(SDK.DOMModel.DOMNode);\n    if (!selectedNode || (!prefix && !force && !expression.trim())) {\n      return [];\n    }\n\n    if (!this.classNamesPromise || this.selectedFrameId !== selectedNode.frameId()) {\n      this.classNamesPromise = this.getClassNames(selectedNode);\n    }\n\n    let completions: string[] = await this.classNamesPromise;\n    const classesMap = this.nodeClasses((selectedNode as SDK.DOMModel.DOMNode));\n    completions = completions.filter(value => !classesMap.get(value));\n\n    if (prefix[0] === '.') {\n      completions = completions.map(value => '.' + value);\n    }\n    return completions.filter(value => value.startsWith(prefix)).sort().map(completion => {\n      return {\n        text: completion,\n        title: undefined,\n        subtitle: undefined,\n        iconType: undefined,\n        priority: undefined,\n        isSecondary: undefined,\n        subtitleRenderer: undefined,\n        selectionRange: undefined,\n        hideGhostText: undefined,\n        iconElement: undefined,\n      };\n    });\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
