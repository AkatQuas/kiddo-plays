{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/elements/ColorSwatchPopoverIcon.ts"],
  "sourcesContent": ["// Copyright (c) 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as ColorPicker from '../../ui/legacy/components/color_picker/color_picker.js';\nimport * as InlineEditor from '../../ui/legacy/components/inline_editor/inline_editor.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type {StylePropertiesSection} from './StylePropertiesSection.js';\nimport type {StylePropertyTreeElement} from './StylePropertyTreeElement.js';\nimport type {StylesSidebarPane} from './StylesSidebarPane.js';\n\nconst UIStrings = {\n  /**\n  * @description Tooltip text for an icon that opens the cubic bezier editor, which is a tool that\n  * allows the user to edit cubic-bezier CSS properties directly.\n  */\n  openCubicBezierEditor: 'Open cubic bezier editor',\n  /**\n  * @description Tooltip text for an icon that opens shadow editor. The shadow editor is a tool\n  * which allows the user to edit CSS shadow properties.\n  */\n  openShadowEditor: 'Open shadow editor',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/elements/ColorSwatchPopoverIcon.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class BezierPopoverIcon {\n  private treeElement: StylePropertyTreeElement;\n  private readonly swatchPopoverHelper: InlineEditor.SwatchPopoverHelper.SwatchPopoverHelper;\n  private swatch: InlineEditor.Swatches.BezierSwatch;\n  private readonly boundBezierChanged: (event: Common.EventTarget.EventTargetEvent<string>) => void;\n  private readonly boundOnScroll: (event: Event) => void;\n  private bezierEditor?: InlineEditor.BezierEditor.BezierEditor;\n  private scrollerElement?: Element;\n  private originalPropertyText?: string|null;\n\n  constructor(\n      treeElement: StylePropertyTreeElement, swatchPopoverHelper: InlineEditor.SwatchPopoverHelper.SwatchPopoverHelper,\n      swatch: InlineEditor.Swatches.BezierSwatch) {\n    this.treeElement = treeElement;\n    this.swatchPopoverHelper = swatchPopoverHelper;\n    this.swatch = swatch;\n\n    UI.Tooltip.Tooltip.install(this.swatch.iconElement(), i18nString(UIStrings.openCubicBezierEditor));\n    this.swatch.iconElement().addEventListener('click', this.iconClick.bind(this), false);\n    this.swatch.iconElement().addEventListener('mousedown', (event: Event) => event.consume(), false);\n\n    this.boundBezierChanged = this.bezierChanged.bind(this);\n    this.boundOnScroll = this.onScroll.bind(this);\n  }\n\n  private iconClick(event: Event): void {\n    event.consume(true);\n    if (this.swatchPopoverHelper.isShowing()) {\n      this.swatchPopoverHelper.hide(true);\n      return;\n    }\n\n    const cubicBezier = UI.Geometry.CubicBezier.parse(this.swatch.bezierText()) ||\n        (UI.Geometry.CubicBezier.parse('linear') as UI.Geometry.CubicBezier);\n    this.bezierEditor = new InlineEditor.BezierEditor.BezierEditor(cubicBezier);\n    this.bezierEditor.setBezier(cubicBezier);\n    this.bezierEditor.addEventListener(InlineEditor.BezierEditor.Events.BezierChanged, this.boundBezierChanged);\n    this.swatchPopoverHelper.show(this.bezierEditor, this.swatch.iconElement(), this.onPopoverHidden.bind(this));\n    this.scrollerElement = this.swatch.enclosingNodeOrSelfWithClass('style-panes-wrapper');\n    if (this.scrollerElement) {\n      this.scrollerElement.addEventListener('scroll', this.boundOnScroll, false);\n    }\n\n    this.originalPropertyText = this.treeElement.property.propertyText;\n    this.treeElement.parentPane().setEditingStyle(true);\n    const uiLocation = Bindings.CSSWorkspaceBinding.CSSWorkspaceBinding.instance().propertyUILocation(\n        this.treeElement.property, false /* forName */);\n    if (uiLocation) {\n      void Common.Revealer.reveal(uiLocation, true /* omitFocus */);\n    }\n  }\n\n  private bezierChanged(event: Common.EventTarget.EventTargetEvent<string>): void {\n    this.swatch.setBezierText(event.data);\n    void this.treeElement.applyStyleText(this.treeElement.renderedPropertyText(), false);\n  }\n\n  private onScroll(_event: Event): void {\n    this.swatchPopoverHelper.hide(true);\n  }\n\n  private onPopoverHidden(commitEdit: boolean): void {\n    if (this.scrollerElement) {\n      this.scrollerElement.removeEventListener('scroll', this.boundOnScroll, false);\n    }\n\n    if (this.bezierEditor) {\n      this.bezierEditor.removeEventListener(InlineEditor.BezierEditor.Events.BezierChanged, this.boundBezierChanged);\n    }\n    this.bezierEditor = undefined;\n\n    const propertyText = commitEdit ? this.treeElement.renderedPropertyText() : this.originalPropertyText || '';\n    void this.treeElement.applyStyleText(propertyText, true);\n    this.treeElement.parentPane().setEditingStyle(false);\n    delete this.originalPropertyText;\n  }\n}\n\nexport class ColorSwatchPopoverIcon {\n  private treeElement: StylePropertyTreeElement;\n  private readonly swatchPopoverHelper: InlineEditor.SwatchPopoverHelper.SwatchPopoverHelper;\n  private swatch: InlineEditor.ColorSwatch.ColorSwatch;\n  private contrastInfo: ColorPicker.ContrastInfo.ContrastInfo|null;\n  private readonly boundSpectrumChanged: (event: Common.EventTarget.EventTargetEvent<string>) => void;\n  private readonly boundOnScroll: (event: Event) => void;\n  private spectrum?: ColorPicker.Spectrum.Spectrum;\n  private scrollerElement?: Element;\n  private originalPropertyText?: string|null;\n\n  constructor(\n      treeElement: StylePropertyTreeElement, swatchPopoverHelper: InlineEditor.SwatchPopoverHelper.SwatchPopoverHelper,\n      swatch: InlineEditor.ColorSwatch.ColorSwatch) {\n    this.treeElement = treeElement;\n    this.swatchPopoverHelper = swatchPopoverHelper;\n    this.swatch = swatch;\n    this.swatch.addEventListener(InlineEditor.ColorSwatch.ClickEvent.eventName, this.iconClick.bind(this));\n    this.contrastInfo = null;\n\n    this.boundSpectrumChanged = this.spectrumChanged.bind(this);\n    this.boundOnScroll = this.onScroll.bind(this);\n  }\n\n  private generateCSSVariablesPalette(): ColorPicker.Spectrum.Palette {\n    const matchedStyles = this.treeElement.matchedStyles();\n    const style = this.treeElement.property.ownerStyle;\n    const cssVariables = matchedStyles.availableCSSVariables(style);\n    const colors = [];\n    const colorNames = [];\n    for (const cssVariable of cssVariables) {\n      if (cssVariable === this.treeElement.property.name) {\n        continue;\n      }\n      const value = matchedStyles.computeCSSVariable(style, cssVariable);\n      if (!value) {\n        continue;\n      }\n      const color = Common.Color.Color.parse(value);\n      if (!color) {\n        continue;\n      }\n      colors.push(value);\n      colorNames.push(cssVariable);\n    }\n    return {title: 'CSS Variables', mutable: false, matchUserFormat: true, colors: colors, colorNames: colorNames};\n  }\n\n  setContrastInfo(contrastInfo: ColorPicker.ContrastInfo.ContrastInfo): void {\n    this.contrastInfo = contrastInfo;\n  }\n\n  private iconClick(event: Event): void {\n    event.consume(true);\n    this.showPopover();\n  }\n\n  showPopover(): void {\n    if (this.swatchPopoverHelper.isShowing()) {\n      this.swatchPopoverHelper.hide(true);\n      return;\n    }\n\n    const color = this.swatch.getColor();\n    let format = this.swatch.getFormat();\n    if (!color || !format) {\n      return;\n    }\n\n    if (format === Common.Color.Format.Original) {\n      format = color.format();\n    }\n    this.spectrum = new ColorPicker.Spectrum.Spectrum(this.contrastInfo);\n    this.spectrum.setColor(color, format);\n    this.spectrum.addPalette(this.generateCSSVariablesPalette());\n\n    this.spectrum.addEventListener(ColorPicker.Spectrum.Events.SizeChanged, this.spectrumResized, this);\n    this.spectrum.addEventListener(ColorPicker.Spectrum.Events.ColorChanged, this.boundSpectrumChanged);\n    this.swatchPopoverHelper.show(this.spectrum, this.swatch, this.onPopoverHidden.bind(this));\n    this.scrollerElement = this.swatch.enclosingNodeOrSelfWithClass('style-panes-wrapper');\n    if (this.scrollerElement) {\n      this.scrollerElement.addEventListener('scroll', this.boundOnScroll, false);\n    }\n\n    this.originalPropertyText = this.treeElement.property.propertyText;\n    this.treeElement.parentPane().setEditingStyle(true);\n    const uiLocation = Bindings.CSSWorkspaceBinding.CSSWorkspaceBinding.instance().propertyUILocation(\n        this.treeElement.property, false /* forName */);\n    if (uiLocation) {\n      void Common.Revealer.reveal(uiLocation, true /* omitFocus */);\n    }\n  }\n\n  private spectrumResized(): void {\n    this.swatchPopoverHelper.reposition();\n  }\n\n  private spectrumChanged(event: Common.EventTarget.EventTargetEvent<string>): void {\n    const color = Common.Color.Color.parse(event.data);\n    if (!color) {\n      return;\n    }\n\n    const colorName = this.spectrum ? this.spectrum.colorName() : undefined;\n    const text = colorName && colorName.startsWith('--') ? `var(${colorName})` : color.asString();\n\n    this.swatch.renderColor(color);\n    const value = this.swatch.firstElementChild;\n    if (value) {\n      value.remove();\n      this.swatch.createChild('span').textContent = text;\n    }\n\n    void this.treeElement.applyStyleText(this.treeElement.renderedPropertyText(), false);\n  }\n\n  private onScroll(_event: Event): void {\n    this.swatchPopoverHelper.hide(true);\n  }\n\n  private onPopoverHidden(commitEdit: boolean): void {\n    if (this.scrollerElement) {\n      this.scrollerElement.removeEventListener('scroll', this.boundOnScroll, false);\n    }\n\n    if (this.spectrum) {\n      this.spectrum.removeEventListener(ColorPicker.Spectrum.Events.ColorChanged, this.boundSpectrumChanged);\n    }\n    this.spectrum = undefined;\n\n    const propertyText = commitEdit ? this.treeElement.renderedPropertyText() : this.originalPropertyText || '';\n    void this.treeElement.applyStyleText(propertyText, true);\n    this.treeElement.parentPane().setEditingStyle(false);\n    delete this.originalPropertyText;\n  }\n}\n\nexport class ShadowSwatchPopoverHelper {\n  private treeElement: StylePropertyTreeElement;\n  private readonly swatchPopoverHelper: InlineEditor.SwatchPopoverHelper.SwatchPopoverHelper;\n  private readonly shadowSwatch: InlineEditor.Swatches.CSSShadowSwatch;\n  private iconElement: HTMLSpanElement;\n  private readonly boundShadowChanged:\n      (event: Common.EventTarget.EventTargetEvent<InlineEditor.CSSShadowModel.CSSShadowModel>) => void;\n  private readonly boundOnScroll: (event: Event) => void;\n  private cssShadowEditor?: InlineEditor.CSSShadowEditor.CSSShadowEditor;\n  private scrollerElement?: Element;\n  private originalPropertyText?: string|null;\n  constructor(\n      treeElement: StylePropertyTreeElement, swatchPopoverHelper: InlineEditor.SwatchPopoverHelper.SwatchPopoverHelper,\n      shadowSwatch: InlineEditor.Swatches.CSSShadowSwatch) {\n    this.treeElement = treeElement;\n    this.swatchPopoverHelper = swatchPopoverHelper;\n    this.shadowSwatch = shadowSwatch;\n    this.iconElement = shadowSwatch.iconElement();\n\n    UI.Tooltip.Tooltip.install(this.iconElement, i18nString(UIStrings.openShadowEditor));\n    this.iconElement.addEventListener('click', this.iconClick.bind(this), false);\n    this.iconElement.addEventListener('mousedown', event => event.consume(), false);\n\n    this.boundShadowChanged = this.shadowChanged.bind(this);\n    this.boundOnScroll = this.onScroll.bind(this);\n  }\n\n  private iconClick(event: Event): void {\n    event.consume(true);\n    this.showPopover();\n  }\n\n  showPopover(): void {\n    if (this.swatchPopoverHelper.isShowing()) {\n      this.swatchPopoverHelper.hide(true);\n      return;\n    }\n\n    this.cssShadowEditor = new InlineEditor.CSSShadowEditor.CSSShadowEditor();\n    this.cssShadowEditor.setModel(this.shadowSwatch.model());\n    this.cssShadowEditor.addEventListener(InlineEditor.CSSShadowEditor.Events.ShadowChanged, this.boundShadowChanged);\n    this.swatchPopoverHelper.show(this.cssShadowEditor, this.iconElement, this.onPopoverHidden.bind(this));\n    this.scrollerElement = this.iconElement.enclosingNodeOrSelfWithClass('style-panes-wrapper');\n    if (this.scrollerElement) {\n      this.scrollerElement.addEventListener('scroll', this.boundOnScroll, false);\n    }\n\n    this.originalPropertyText = this.treeElement.property.propertyText;\n    this.treeElement.parentPane().setEditingStyle(true);\n    const uiLocation = Bindings.CSSWorkspaceBinding.CSSWorkspaceBinding.instance().propertyUILocation(\n        this.treeElement.property, false /* forName */);\n    if (uiLocation) {\n      void Common.Revealer.reveal(uiLocation, true /* omitFocus */);\n    }\n  }\n\n  private shadowChanged(event: Common.EventTarget.EventTargetEvent<InlineEditor.CSSShadowModel.CSSShadowModel>): void {\n    this.shadowSwatch.setCSSShadow(event.data);\n    void this.treeElement.applyStyleText(this.treeElement.renderedPropertyText(), false);\n  }\n\n  private onScroll(_event: Event): void {\n    this.swatchPopoverHelper.hide(true);\n  }\n\n  private onPopoverHidden(commitEdit: boolean): void {\n    if (this.scrollerElement) {\n      this.scrollerElement.removeEventListener('scroll', this.boundOnScroll, false);\n    }\n\n    if (this.cssShadowEditor) {\n      this.cssShadowEditor.removeEventListener(\n          InlineEditor.CSSShadowEditor.Events.ShadowChanged, this.boundShadowChanged);\n    }\n    this.cssShadowEditor = undefined;\n\n    const propertyText = commitEdit ? this.treeElement.renderedPropertyText() : this.originalPropertyText || '';\n    void this.treeElement.applyStyleText(propertyText, true);\n    this.treeElement.parentPane().setEditingStyle(false);\n    delete this.originalPropertyText;\n  }\n}\n\nexport class FontEditorSectionManager {\n  private readonly treeElementMap: Map<string, StylePropertyTreeElement>;\n  private readonly swatchPopoverHelper: InlineEditor.SwatchPopoverHelper.SwatchPopoverHelper;\n  private readonly section: StylePropertiesSection;\n  private parentPane: StylesSidebarPane|null;\n  private fontEditor: InlineEditor.FontEditor.FontEditor|null;\n  private scrollerElement: Element|null;\n  private readonly boundFontChanged:\n      (event: Common.EventTarget.EventTargetEvent<InlineEditor.FontEditor.FontChangedEvent>) => void;\n  private readonly boundOnScroll: () => void;\n  private readonly boundResized: () => void;\n  constructor(\n      swatchPopoverHelper: InlineEditor.SwatchPopoverHelper.SwatchPopoverHelper, section: StylePropertiesSection) {\n    this.treeElementMap = new Map();\n\n    this.swatchPopoverHelper = swatchPopoverHelper;\n\n    this.section = section;\n\n    this.parentPane = null;\n\n    this.fontEditor = null;\n\n    this.scrollerElement = null;\n\n    this.boundFontChanged = this.fontChanged.bind(this);\n    this.boundOnScroll = this.onScroll.bind(this);\n    this.boundResized = this.fontEditorResized.bind(this);\n  }\n\n  private fontChanged(event: Common.EventTarget.EventTargetEvent<InlineEditor.FontEditor.FontChangedEvent>): void {\n    const {propertyName, value} = event.data;\n    const treeElement = this.treeElementMap.get(propertyName);\n    void this.updateFontProperty(propertyName, value, treeElement);\n  }\n\n  private async updateFontProperty(propertyName: string, value: string, treeElement?: StylePropertyTreeElement):\n      Promise<void> {\n    if (treeElement && treeElement.treeOutline && treeElement.valueElement && treeElement.property.parsedOk &&\n        treeElement.property.range) {\n      let elementRemoved = false;\n      treeElement.valueElement.textContent = value;\n      treeElement.property.value = value;\n      let styleText;\n      const propertyName = treeElement.property.name;\n      if (value.length) {\n        styleText = treeElement.renderedPropertyText();\n      } else {\n        styleText = '';\n        elementRemoved = true;\n        this.fixIndex(treeElement.property.index);\n      }\n      this.treeElementMap.set(propertyName, treeElement);\n      await treeElement.applyStyleText(styleText, true);\n      if (elementRemoved) {\n        this.treeElementMap.delete(propertyName);\n      }\n    } else if (value.length) {\n      const newProperty = this.section.addNewBlankProperty();\n      if (newProperty) {\n        newProperty.property.name = propertyName;\n        newProperty.property.value = value;\n        newProperty.updateTitle();\n        await newProperty.applyStyleText(newProperty.renderedPropertyText(), true);\n        this.treeElementMap.set(newProperty.property.name, newProperty);\n      }\n    }\n    this.section.onpopulate();\n    this.swatchPopoverHelper.reposition();\n    return;\n  }\n\n  private fontEditorResized(): void {\n    this.swatchPopoverHelper.reposition();\n  }\n\n  private fixIndex(removedIndex: number): void {\n    for (const treeElement of this.treeElementMap.values()) {\n      if (treeElement.property.index > removedIndex) {\n        treeElement.property.index -= 1;\n      }\n    }\n  }\n\n  private createPropertyValueMap(): Map<string, string> {\n    const propertyMap = new Map<string, string>();\n    for (const fontProperty of this.treeElementMap) {\n      const propertyName = (fontProperty[0] as string);\n      const treeElement = fontProperty[1];\n      if (treeElement.property.value.length) {\n        propertyMap.set(propertyName, treeElement.property.value);\n      } else {\n        this.treeElementMap.delete(propertyName);\n      }\n    }\n    return propertyMap;\n  }\n\n  registerFontProperty(treeElement: StylePropertyTreeElement): void {\n    const propertyName = treeElement.property.name;\n    if (this.treeElementMap.has(propertyName)) {\n      const treeElementFromMap = this.treeElementMap.get(propertyName);\n      if (!treeElement.overloaded() || (treeElementFromMap && treeElementFromMap.overloaded())) {\n        this.treeElementMap.set(propertyName, treeElement);\n      }\n    } else {\n      this.treeElementMap.set(propertyName, treeElement);\n    }\n  }\n\n  async showPopover(iconElement: Element, parentPane: StylesSidebarPane): Promise<void> {\n    if (this.swatchPopoverHelper.isShowing()) {\n      this.swatchPopoverHelper.hide(true);\n      return;\n    }\n    this.parentPane = parentPane;\n    const propertyValueMap = this.createPropertyValueMap();\n    this.fontEditor = new InlineEditor.FontEditor.FontEditor(propertyValueMap);\n    this.fontEditor.addEventListener(InlineEditor.FontEditor.Events.FontChanged, this.boundFontChanged);\n    this.fontEditor.addEventListener(InlineEditor.FontEditor.Events.FontEditorResized, this.boundResized);\n    this.swatchPopoverHelper.show(this.fontEditor, iconElement, this.onPopoverHidden.bind(this));\n    this.scrollerElement = iconElement.enclosingNodeOrSelfWithClass('style-panes-wrapper');\n    if (this.scrollerElement) {\n      this.scrollerElement.addEventListener('scroll', this.boundOnScroll, false);\n    }\n\n    this.parentPane.setEditingStyle(true);\n  }\n\n  private onScroll(): void {\n    this.swatchPopoverHelper.hide(true);\n  }\n\n  private onPopoverHidden(): void {\n    if (this.scrollerElement) {\n      this.scrollerElement.removeEventListener('scroll', this.boundOnScroll, false);\n    }\n    this.section.onpopulate();\n    if (this.fontEditor) {\n      this.fontEditor.removeEventListener(InlineEditor.FontEditor.Events.FontChanged, this.boundFontChanged);\n    }\n    this.fontEditor = null;\n    if (this.parentPane) {\n      this.parentPane.setEditingStyle(false);\n    }\n    this.section.resetToolbars();\n    this.section.onpopulate();\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  private static readonly treeElementSymbol = Symbol('FontEditorSectionManager._treeElementSymbol');\n}\n"],
  "mappings": "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",
  "names": []
}
