{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/elements/ElementsPanel.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2007, 2008 Apple Inc.  All rights reserved.\n * Copyright (C) 2008 Matt Lilek <webkit@mattlilek.com>\n * Copyright (C) 2009 Joseph Pecoraro\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Extensions from '../../models/extensions/extensions.js';\n\nimport elementsPanelStyles from './elementsPanel.css.js';\n\nimport type * as Adorners from '../../ui/components/adorners/adorners.js';\nimport * as Buttons from '../../ui/components/buttons/buttons.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {AccessibilityTreeView} from './AccessibilityTreeView.js';\nimport * as ElementsComponents from './components/components.js';\nimport {ComputedStyleWidget} from './ComputedStyleWidget.js';\n\nimport type {ElementsTreeElement} from './ElementsTreeElement.js';\nimport {ElementsTreeElementHighlighter} from './ElementsTreeElementHighlighter.js';\nimport {ElementsTreeOutline} from './ElementsTreeOutline.js';\nimport type {MarkerDecorator} from './MarkerDecorator.js';\nimport {MetricsSidebarPane} from './MetricsSidebarPane.js';\nimport {Events as StylesSidebarPaneEvents, StylesSidebarPane} from './StylesSidebarPane.js';\nimport type {StylesUpdateCompletedEvent} from './StylesSidebarPane.js';\n\nconst UIStrings = {\n  /**\n  * @description Placeholder text for the search box the Elements Panel. Selector refers to CSS\n  * selectors.\n  */\n  findByStringSelectorOrXpath: 'Find by string, selector, or `XPath`',\n  /**\n  * @description Button text for a button that takes the user to the Accessibility Tree View from the\n  * DOM tree view, in the Elements panel.\n  */\n  switchToAccessibilityTreeView: 'Switch to Accessibility Tree view',\n  /**\n  * @description Button text for a button that takes the user to the DOM tree view from the\n  * Accessibility Tree View, in the Elements panel.\n  */\n  switchToDomTreeView: 'Switch to DOM Tree view',\n  /**\n  * @description Label for a link to a rendering frame.\n  */\n  frame: 'Frame',\n  /**\n  * @description Tooltip for the the Computed Styles sidebar toggle in the Styles pane. Command to\n  * open/show the sidebar.\n  */\n  showComputedStylesSidebar: 'Show Computed Styles sidebar',\n  /**\n  * @description Tooltip for the the Computed Styles sidebar toggle in the Styles pane. Command to\n  * close/hide the sidebar.\n  */\n  hideComputedStylesSidebar: 'Hide Computed Styles sidebar',\n  /**\n   * @description Screen reader announcement when the computed styles sidebar is shown in the Elements panel.\n   */\n  computedStylesShown: 'Computed Styles sidebar shown',\n  /**\n   * @description Screen reader announcement when the computed styles sidebar is hidden in the Elements panel.\n   */\n  computedStylesHidden: 'Computed Styles sidebar hidden',\n  /**\n  * @description Title of a pane in the Elements panel that shows computed styles for the selected\n  * HTML element. Computed styles are the final, actual styles of the element, including all\n  * implicit and specified styles.\n  */\n  computed: 'Computed',\n  /**\n  * @description Title of a pane in the Elements panel that shows the CSS styles for the selected\n  * HTML element.\n  */\n  styles: 'Styles',\n  /**\n  * @description A context menu item to reveal a node in the DOM tree of the Elements Panel\n  */\n  revealInElementsPanel: 'Reveal in Elements panel',\n  /**\n  * @description Warning/error text displayed when a node cannot be found in the current page.\n  */\n  nodeCannotBeFoundInTheCurrent: 'Node cannot be found in the current page.',\n  /**\n  * @description Console warning when a user tries to reveal a non-node type Remote Object. A remote\n  * object is a JavaScript object that is not stored in DevTools, that DevTools has a connection to.\n  * It should correspond to a local node.\n  */\n  theRemoteObjectCouldNotBe: 'The remote object could not be resolved to a valid node.',\n  /**\n  * @description Console warning when the user tries to reveal a deferred DOM Node that resolves as\n  * null. A deferred DOM node is a node we know about but have not yet fetched from the backend (we\n  * defer the work until later).\n  */\n  theDeferredDomNodeCouldNotBe: 'The deferred `DOM` Node could not be resolved to a valid node.',\n  /**\n  * @description Text in Elements Panel of the Elements panel. Shows the current CSS Pseudo-classes\n  * applicable to the selected HTML element.\n  * @example {::after, ::before} PH1\n  */\n  elementStateS: 'Element state: {PH1}',\n  /**\n  * @description Accessible name for side panel toolbar.\n  */\n  sidePanelToolbar: 'Side panel toolbar',\n  /**\n  * @description Accessible name for side panel contents.\n  */\n  sidePanelContent: 'Side panel content',\n  /**\n  * @description Accessible name for the DOM tree explorer view.\n  */\n  domTreeExplorer: 'DOM tree explorer',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/elements/ElementsPanel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n/**\n * These strings need to match the `SidebarPaneCodes` in UserMetrics.ts. DevTools\n * collects usage metrics for the different sidebar tabs.\n */\nexport const enum SidebarPaneTabId {\n  Computed = 'Computed',\n  Styles = 'Styles',\n}\n\nconst createAccessibilityTreeToggleButton = (isActive: boolean): HTMLElement => {\n  const button = new Buttons.Button.Button();\n  const title =\n      isActive ? i18nString(UIStrings.switchToDomTreeView) : i18nString(UIStrings.switchToAccessibilityTreeView);\n  button.data = {\n    active: isActive,\n    variant: Buttons.Button.Variant.TOOLBAR,\n    iconUrl: new URL('../../Images/accessibility-icon.svg', import.meta.url).toString(),\n    title,\n  };\n  button.tabIndex = 0;\n  button.classList.add('axtree-button');\n  if (isActive) {\n    button.classList.add('active');\n  }\n  return button;\n};\n\nlet elementsPanelInstance: ElementsPanel;\n\nexport class ElementsPanel extends UI.Panel.Panel implements UI.SearchableView.Searchable,\n                                                             SDK.TargetManager.SDKModelObserver<SDK.DOMModel.DOMModel>,\n                                                             UI.View.ViewLocationResolver {\n  private splitWidget: UI.SplitWidget.SplitWidget;\n  private readonly searchableViewInternal: UI.SearchableView.SearchableView;\n  private mainContainer: HTMLDivElement;\n  private domTreeContainer: HTMLDivElement;\n  private splitMode: _splitMode|null;\n  private readonly accessibilityTreeView: AccessibilityTreeView|undefined;\n  private breadcrumbs: ElementsComponents.ElementsBreadcrumbs.ElementsBreadcrumbs;\n  stylesWidget: StylesSidebarPane;\n  private readonly computedStyleWidget: ComputedStyleWidget;\n  private readonly metricsWidget: MetricsSidebarPane;\n  private treeOutlines: Set<ElementsTreeOutline> = new Set();\n  private readonly treeOutlineHeaders: Map<ElementsTreeOutline, Element> = new Map();\n  private searchResults!: {\n    domModel: SDK.DOMModel.DOMModel,\n    index: number,\n    node: ((SDK.DOMModel.DOMNode | undefined)|null),\n  }[]|undefined;\n  private currentSearchResultIndex: number;\n  pendingNodeReveal: boolean;\n  private readonly adornerManager: ElementsComponents.AdornerManager.AdornerManager;\n  private adornerSettingsPane: ElementsComponents.AdornerSettingsPane.AdornerSettingsPane|null;\n  private readonly adornersByName: Map<string, Set<Adorners.Adorner.Adorner>>;\n  accessibilityTreeButton?: HTMLElement;\n  domTreeButton?: HTMLElement;\n  private selectedNodeOnReset?: SDK.DOMModel.DOMNode;\n  private hasNonDefaultSelectedNode?: boolean;\n  private searchConfig?: UI.SearchableView.SearchConfig;\n  private omitDefaultSelection?: boolean;\n  private notFirstInspectElement?: boolean;\n  sidebarPaneView?: UI.View.TabbedViewLocation;\n  private stylesViewToReveal?: UI.View.SimpleView;\n\n  private cssStyleTrackerByCSSModel: Map<SDK.CSSModel.CSSModel, SDK.CSSModel.CSSPropertyTracker>;\n\n  constructor() {\n    super('elements');\n\n    this.splitWidget = new UI.SplitWidget.SplitWidget(true, true, 'elementsPanelSplitViewState', 325, 325);\n    this.splitWidget.addEventListener(\n        UI.SplitWidget.Events.SidebarSizeChanged, this.updateTreeOutlineVisibleWidth.bind(this));\n    this.splitWidget.show(this.element);\n\n    this.searchableViewInternal = new UI.SearchableView.SearchableView(this, null);\n    this.searchableViewInternal.setMinimumSize(25, 28);\n    this.searchableViewInternal.setPlaceholder(i18nString(UIStrings.findByStringSelectorOrXpath));\n    const stackElement = this.searchableViewInternal.element;\n\n    this.mainContainer = document.createElement('div');\n    this.domTreeContainer = document.createElement('div');\n    const crumbsContainer = document.createElement('div');\n    if (Root.Runtime.experiments.isEnabled('fullAccessibilityTree')) {\n      this.initializeFullAccessibilityTreeView();\n    }\n    this.mainContainer.appendChild(this.domTreeContainer);\n    stackElement.appendChild(this.mainContainer);\n    stackElement.appendChild(crumbsContainer);\n\n    UI.ARIAUtils.markAsMain(this.domTreeContainer);\n    UI.ARIAUtils.setAccessibleName(this.domTreeContainer, i18nString(UIStrings.domTreeExplorer));\n\n    this.splitWidget.setMainWidget(this.searchableViewInternal);\n    this.splitMode = null;\n\n    this.mainContainer.id = 'main-content';\n    this.domTreeContainer.id = 'elements-content';\n    // FIXME: crbug.com/425984\n    if (Common.Settings.Settings.instance().moduleSetting('domWordWrap').get()) {\n      this.domTreeContainer.classList.add('elements-wrap');\n    }\n    Common.Settings.Settings.instance()\n        .moduleSetting('domWordWrap')\n        .addChangeListener(this.domWordWrapSettingChanged.bind(this));\n\n    crumbsContainer.id = 'elements-crumbs';\n    if (this.domTreeButton) {\n      this.accessibilityTreeView = new AccessibilityTreeView(this.domTreeButton);\n    }\n    this.breadcrumbs = new ElementsComponents.ElementsBreadcrumbs.ElementsBreadcrumbs();\n    this.breadcrumbs.addEventListener('breadcrumbsnodeselected', event => {\n      this.crumbNodeSelected(event);\n    });\n\n    crumbsContainer.appendChild(this.breadcrumbs);\n\n    this.stylesWidget = StylesSidebarPane.instance();\n    this.computedStyleWidget = new ComputedStyleWidget();\n    this.metricsWidget = new MetricsSidebarPane();\n\n    Common.Settings.Settings.instance()\n        .moduleSetting('sidebarPosition')\n        .addChangeListener(this.updateSidebarPosition.bind(this));\n    this.updateSidebarPosition();\n\n    this.cssStyleTrackerByCSSModel = new Map();\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.DOMModel.DOMModel, this);\n    SDK.TargetManager.TargetManager.instance().addEventListener(\n        SDK.TargetManager.Events.NameChanged, event => this.targetNameChanged(event.data));\n    Common.Settings.Settings.instance()\n        .moduleSetting('showUAShadowDOM')\n        .addChangeListener(this.showUAShadowDOMChanged.bind(this));\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.DOMModel.DOMModel, SDK.DOMModel.Events.DocumentUpdated, this.documentUpdatedEvent, this);\n    Extensions.ExtensionServer.ExtensionServer.instance().addEventListener(\n        Extensions.ExtensionServer.Events.SidebarPaneAdded, this.extensionSidebarPaneAdded, this);\n    this.currentSearchResultIndex = -1;  // -1 represents the initial invalid state\n\n    this.pendingNodeReveal = false;\n\n    this.adornerManager = new ElementsComponents.AdornerManager.AdornerManager(\n        Common.Settings.Settings.instance().moduleSetting('adornerSettings'));\n    this.adornerSettingsPane = null;\n    this.adornersByName = new Map();\n  }\n\n  private initializeFullAccessibilityTreeView(): void {\n    this.accessibilityTreeButton = createAccessibilityTreeToggleButton(false);\n    this.accessibilityTreeButton.addEventListener('click', this.showAccessibilityTree.bind(this));\n\n    this.domTreeButton = createAccessibilityTreeToggleButton(true);\n    this.domTreeButton.addEventListener('click', this.showDOMTree.bind(this));\n\n    this.mainContainer.appendChild(this.accessibilityTreeButton);\n  }\n\n  private showAccessibilityTree(): void {\n    if (this.accessibilityTreeView) {\n      this.splitWidget.setMainWidget(this.accessibilityTreeView);\n    }\n  }\n\n  private showDOMTree(): void {\n    this.splitWidget.setMainWidget(this.searchableViewInternal);\n    const selectedNode = this.selectedDOMNode();\n    if (!selectedNode) {\n      return;\n    }\n    const treeElement = this.treeElementForNode(selectedNode);\n    if (!treeElement) {\n      return;\n    }\n    treeElement.select();\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  }|undefined = {forceNew: null}): ElementsPanel {\n    const {forceNew} = opts;\n    if (!elementsPanelInstance || forceNew) {\n      elementsPanelInstance = new ElementsPanel();\n    }\n\n    return elementsPanelInstance;\n  }\n\n  revealProperty(cssProperty: SDK.CSSProperty.CSSProperty): Promise<void> {\n    if (!this.sidebarPaneView || !this.stylesViewToReveal) {\n      return Promise.resolve();\n    }\n\n    return this.sidebarPaneView.showView(this.stylesViewToReveal).then(() => {\n      this.stylesWidget.revealProperty((cssProperty as SDK.CSSProperty.CSSProperty));\n    });\n  }\n\n  resolveLocation(_locationName: string): UI.View.ViewLocation|null {\n    return this.sidebarPaneView || null;\n  }\n\n  showToolbarPane(widget: UI.Widget.Widget|null, toggle: UI.Toolbar.ToolbarToggle|null): void {\n    // TODO(luoe): remove this function once its providers have an alternative way to reveal their views.\n    this.stylesWidget.showToolbarPane(widget, toggle);\n  }\n\n  modelAdded(domModel: SDK.DOMModel.DOMModel): void {\n    const parentModel = domModel.parentModel();\n\n    let treeOutline: ElementsTreeOutline|null = parentModel ? ElementsTreeOutline.forDOMModel(parentModel) : null;\n    if (!treeOutline) {\n      treeOutline = new ElementsTreeOutline(true, true);\n      treeOutline.setWordWrap(Common.Settings.Settings.instance().moduleSetting('domWordWrap').get());\n      treeOutline.addEventListener(ElementsTreeOutline.Events.SelectedNodeChanged, this.selectedNodeChanged, this);\n      treeOutline.addEventListener(ElementsTreeOutline.Events.ElementsTreeUpdated, this.updateBreadcrumbIfNeeded, this);\n      new ElementsTreeElementHighlighter(treeOutline);\n      this.treeOutlines.add(treeOutline);\n      if (domModel.target().parentTarget()) {\n        const element = document.createElement('div');\n        element.classList.add('elements-tree-header');\n        this.treeOutlineHeaders.set(treeOutline, element);\n        this.targetNameChanged(domModel.target());\n      }\n    }\n    treeOutline.wireToDOMModel(domModel);\n\n    this.setupStyleTracking(domModel.cssModel());\n\n    // Perform attach if necessary.\n    if (this.isShowing()) {\n      this.wasShown();\n    }\n  }\n\n  modelRemoved(domModel: SDK.DOMModel.DOMModel): void {\n    const treeOutline = ElementsTreeOutline.forDOMModel(domModel);\n    if (!treeOutline) {\n      return;\n    }\n\n    treeOutline.unwireFromDOMModel(domModel);\n    if (domModel.parentModel()) {\n      return;\n    }\n    this.treeOutlines.delete(treeOutline);\n    const header = this.treeOutlineHeaders.get(treeOutline);\n    if (header) {\n      header.remove();\n    }\n    this.treeOutlineHeaders.delete(treeOutline);\n    treeOutline.element.remove();\n\n    this.removeStyleTracking(domModel.cssModel());\n  }\n\n  private targetNameChanged(target: SDK.Target.Target): void {\n    const domModel = target.model(SDK.DOMModel.DOMModel);\n    if (!domModel) {\n      return;\n    }\n    const treeOutline = ElementsTreeOutline.forDOMModel(domModel);\n    if (!treeOutline) {\n      return;\n    }\n    const header = this.treeOutlineHeaders.get(treeOutline);\n    if (!header) {\n      return;\n    }\n    header.removeChildren();\n    header.createChild('div', 'elements-tree-header-frame').textContent = i18nString(UIStrings.frame);\n    header.appendChild(Components.Linkifier.Linkifier.linkifyURL(\n        target.inspectedURL(), ({text: target.name()} as Components.Linkifier.LinkifyURLOptions)));\n  }\n\n  private updateTreeOutlineVisibleWidth(): void {\n    if (!this.treeOutlines.size) {\n      return;\n    }\n\n    let width = this.splitWidget.element.offsetWidth;\n    if (this.splitWidget.isVertical()) {\n      width -= this.splitWidget.sidebarSize();\n    }\n    for (const treeOutline of this.treeOutlines) {\n      treeOutline.setVisibleWidth(width);\n    }\n  }\n\n  focus(): void {\n    if (this.treeOutlines.size) {\n      this.treeOutlines.values().next().value.focus();\n    }\n  }\n\n  searchableView(): UI.SearchableView.SearchableView {\n    return this.searchableViewInternal;\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    UI.Context.Context.instance().setFlavor(ElementsPanel, this);\n    this.registerCSSFiles([elementsPanelStyles]);\n\n    for (const treeOutline of this.treeOutlines) {\n      // Attach heavy component lazily\n      if (treeOutline.element.parentElement !== this.domTreeContainer) {\n        const header = this.treeOutlineHeaders.get(treeOutline);\n        if (header) {\n          this.domTreeContainer.appendChild(header);\n        }\n        this.domTreeContainer.appendChild(treeOutline.element);\n      }\n    }\n\n    const domModels = SDK.TargetManager.TargetManager.instance().models(SDK.DOMModel.DOMModel);\n    for (const domModel of domModels) {\n      if (domModel.parentModel()) {\n        continue;\n      }\n      const treeOutline = ElementsTreeOutline.forDOMModel(domModel);\n      if (!treeOutline) {\n        continue;\n      }\n      treeOutline.setVisible(true);\n\n      if (!treeOutline.rootDOMNode) {\n        if (domModel.existingDocument()) {\n          treeOutline.rootDOMNode = domModel.existingDocument();\n          this.documentUpdated(domModel);\n        } else {\n          void domModel.requestDocument();\n        }\n      }\n    }\n  }\n\n  willHide(): void {\n    SDK.OverlayModel.OverlayModel.hideDOMNodeHighlight();\n    for (const treeOutline of this.treeOutlines) {\n      treeOutline.setVisible(false);\n      // Detach heavy component on hide\n      this.domTreeContainer.removeChild(treeOutline.element);\n      const header = this.treeOutlineHeaders.get(treeOutline);\n      if (header) {\n        this.domTreeContainer.removeChild(header);\n      }\n    }\n    super.willHide();\n    UI.Context.Context.instance().setFlavor(ElementsPanel, null);\n  }\n\n  onResize(): void {\n    this.element.window().requestAnimationFrame(this.updateSidebarPosition.bind(this));  // Do not force layout.\n    this.updateTreeOutlineVisibleWidth();\n  }\n\n  private selectedNodeChanged(\n      event: Common.EventTarget.EventTargetEvent<{node: SDK.DOMModel.DOMNode | null, focus: boolean}>): void {\n    let selectedNode = event.data.node;\n\n    // If the selectedNode is a pseudoNode, we want to ensure that it has a valid parentNode\n    if (selectedNode && (selectedNode.pseudoType() && !selectedNode.parentNode)) {\n      selectedNode = null;\n    }\n    const {focus} = event.data;\n    for (const treeOutline of this.treeOutlines) {\n      if (!selectedNode || ElementsTreeOutline.forDOMModel(selectedNode.domModel()) !== treeOutline) {\n        treeOutline.selectDOMNode(null);\n      }\n    }\n\n    if (selectedNode) {\n      const activeNode = ElementsComponents.Helper.legacyNodeToElementsComponentsNode(selectedNode);\n      const crumbs = [activeNode];\n\n      for (let current: (SDK.DOMModel.DOMNode|null) = selectedNode.parentNode; current; current = current.parentNode) {\n        crumbs.push(ElementsComponents.Helper.legacyNodeToElementsComponentsNode(current));\n      }\n\n      this.breadcrumbs.data = {\n        crumbs,\n        selectedNode: ElementsComponents.Helper.legacyNodeToElementsComponentsNode(selectedNode),\n      };\n\n      if (this.accessibilityTreeView) {\n        void this.accessibilityTreeView.selectedNodeChanged(selectedNode);\n      }\n    } else {\n      this.breadcrumbs.data = {crumbs: [], selectedNode: null};\n    }\n\n    UI.Context.Context.instance().setFlavor(SDK.DOMModel.DOMNode, selectedNode);\n\n    if (!selectedNode) {\n      return;\n    }\n    void selectedNode.setAsInspectedNode();\n    if (focus) {\n      this.selectedNodeOnReset = selectedNode;\n      this.hasNonDefaultSelectedNode = true;\n    }\n\n    const executionContexts = selectedNode.domModel().runtimeModel().executionContexts();\n    const nodeFrameId = selectedNode.frameId();\n    for (const context of executionContexts) {\n      if (context.frameId === nodeFrameId) {\n        UI.Context.Context.instance().setFlavor(SDK.RuntimeModel.ExecutionContext, context);\n        break;\n      }\n    }\n  }\n\n  private documentUpdatedEvent(event: Common.EventTarget.EventTargetEvent<SDK.DOMModel.DOMModel>): void {\n    const domModel = event.data;\n    this.documentUpdated(domModel);\n    this.removeStyleTracking(domModel.cssModel());\n    this.setupStyleTracking(domModel.cssModel());\n  }\n\n  private documentUpdated(domModel: SDK.DOMModel.DOMModel): void {\n    this.searchableViewInternal.resetSearch();\n\n    if (!domModel.existingDocument()) {\n      if (this.isShowing()) {\n        void domModel.requestDocument();\n      }\n      return;\n    }\n\n    this.hasNonDefaultSelectedNode = false;\n\n    if (this.omitDefaultSelection) {\n      return;\n    }\n\n    const savedSelectedNodeOnReset = this.selectedNodeOnReset;\n    void restoreNode.call(this, domModel, this.selectedNodeOnReset || null);\n\n    async function restoreNode(\n        this: ElementsPanel, domModel: SDK.DOMModel.DOMModel, staleNode: SDK.DOMModel.DOMNode|null): Promise<void> {\n      const nodePath = staleNode ? staleNode.path() : null;\n      const restoredNodeId = nodePath ? await domModel.pushNodeByPathToFrontend(nodePath) : null;\n\n      if (savedSelectedNodeOnReset !== this.selectedNodeOnReset) {\n        return;\n      }\n      let node: (SDK.DOMModel.DOMNode|null) = restoredNodeId ? domModel.nodeForId(restoredNodeId) : null;\n      if (!node) {\n        const inspectedDocument = domModel.existingDocument();\n        node = inspectedDocument ? inspectedDocument.body || inspectedDocument.documentElement : null;\n      }\n      // If `node` is null here, the document hasn't been transmitted from the backend yet\n      // and isn't in a valid state to have a default-selected node. Another document update\n      // should be forthcoming. In the meantime, don't set the default-selected node or notify\n      // the test that it's ready, because it isn't.\n      if (node) {\n        this.setDefaultSelectedNode(node);\n        this.lastSelectedNodeSelectedForTest();\n      }\n    }\n  }\n\n  private lastSelectedNodeSelectedForTest(): void {\n  }\n\n  private setDefaultSelectedNode(node: SDK.DOMModel.DOMNode|null): void {\n    if (!node || this.hasNonDefaultSelectedNode || this.pendingNodeReveal) {\n      return;\n    }\n    const treeOutline = ElementsTreeOutline.forDOMModel(node.domModel());\n    if (!treeOutline) {\n      return;\n    }\n    this.selectDOMNode(node);\n    if (treeOutline.selectedTreeElement) {\n      treeOutline.selectedTreeElement.expand();\n    }\n  }\n\n  searchCanceled(): void {\n    this.searchConfig = undefined;\n    this.hideSearchHighlights();\n\n    this.searchableViewInternal.updateSearchMatchesCount(0);\n\n    this.currentSearchResultIndex = -1;\n    delete this.searchResults;\n\n    SDK.DOMModel.DOMModel.cancelSearch();\n  }\n\n  performSearch(searchConfig: UI.SearchableView.SearchConfig, shouldJump: boolean, jumpBackwards?: boolean): void {\n    const query = searchConfig.query;\n\n    const whitespaceTrimmedQuery = query.trim();\n    if (!whitespaceTrimmedQuery.length) {\n      return;\n    }\n\n    if (!this.searchConfig || this.searchConfig.query !== query) {\n      this.searchCanceled();\n    } else {\n      this.hideSearchHighlights();\n    }\n\n    this.searchConfig = searchConfig;\n\n    const showUAShadowDOM = Common.Settings.Settings.instance().moduleSetting('showUAShadowDOM').get();\n    const domModels = SDK.TargetManager.TargetManager.instance().models(SDK.DOMModel.DOMModel);\n    const promises = domModels.map(domModel => domModel.performSearch(whitespaceTrimmedQuery, showUAShadowDOM));\n    void Promise.all(promises).then(resultCounts => {\n      this.searchResults = [];\n      for (let i = 0; i < resultCounts.length; ++i) {\n        const resultCount = resultCounts[i];\n        for (let j = 0; j < resultCount; ++j) {\n          this.searchResults.push({domModel: domModels[i], index: j, node: undefined});\n        }\n      }\n      this.searchableViewInternal.updateSearchMatchesCount(this.searchResults.length);\n      if (!this.searchResults.length) {\n        return;\n      }\n      if (this.currentSearchResultIndex >= this.searchResults.length) {\n        this.currentSearchResultIndex = -1;\n      }\n\n      let index: (0|- 1)|number = this.currentSearchResultIndex;\n\n      if (shouldJump) {\n        if (this.currentSearchResultIndex === -1) {\n          index = jumpBackwards ? -1 : 0;\n        } else {\n          index = jumpBackwards ? index - 1 : index + 1;\n        }\n        this.jumpToSearchResult(index);\n      }\n    });\n  }\n\n  private domWordWrapSettingChanged(event: Common.EventTarget.EventTargetEvent<boolean>): void {\n    this.domTreeContainer.classList.toggle('elements-wrap', event.data);\n    for (const treeOutline of this.treeOutlines) {\n      treeOutline.setWordWrap(event.data);\n    }\n  }\n\n  switchToAndFocus(node: SDK.DOMModel.DOMNode): void {\n    // Reset search restore.\n    this.searchableViewInternal.cancelSearch();\n    void UI.ViewManager.ViewManager.instance().showView('elements').then(() => this.selectDOMNode(node, true));\n  }\n\n  private jumpToSearchResult(index: number): void {\n    if (!this.searchResults) {\n      return;\n    }\n\n    this.currentSearchResultIndex = (index + this.searchResults.length) % this.searchResults.length;\n    this.highlightCurrentSearchResult();\n  }\n\n  jumpToNextSearchResult(): void {\n    if (!this.searchResults || !this.searchConfig) {\n      return;\n    }\n    this.performSearch(this.searchConfig, true);\n  }\n\n  jumpToPreviousSearchResult(): void {\n    if (!this.searchResults || !this.searchConfig) {\n      return;\n    }\n    this.performSearch(this.searchConfig, true, true);\n  }\n\n  supportsCaseSensitiveSearch(): boolean {\n    return false;\n  }\n\n  supportsRegexSearch(): boolean {\n    return false;\n  }\n\n  private highlightCurrentSearchResult(): void {\n    const index = this.currentSearchResultIndex;\n    const searchResults = this.searchResults;\n    if (!searchResults) {\n      return;\n    }\n    const searchResult = searchResults[index];\n\n    this.searchableViewInternal.updateCurrentMatchIndex(index);\n    if (searchResult.node === null) {\n      return;\n    }\n\n    if (typeof searchResult.node === 'undefined') {\n      // No data for slot, request it.\n      void searchResult.domModel.searchResult(searchResult.index).then(node => {\n        searchResult.node = node;\n\n        // If any of these properties are undefined or reset to an invalid value,\n        // this means the search/highlight request is outdated.\n        const highlightRequestValid = this.searchConfig && this.searchResults && (this.currentSearchResultIndex !== -1);\n        if (highlightRequestValid) {\n          this.highlightCurrentSearchResult();\n        }\n      });\n      return;\n    }\n\n    const treeElement = this.treeElementForNode(searchResult.node);\n    void searchResult.node.scrollIntoView();\n    if (treeElement) {\n      this.searchConfig && treeElement.highlightSearchResults(this.searchConfig.query);\n      treeElement.reveal();\n      const matches = treeElement.listItemElement.getElementsByClassName(UI.UIUtils.highlightedSearchResultClassName);\n      if (matches.length) {\n        matches[0].scrollIntoViewIfNeeded(false);\n      }\n    }\n  }\n\n  private hideSearchHighlights(): void {\n    if (!this.searchResults || !this.searchResults.length || this.currentSearchResultIndex === -1) {\n      return;\n    }\n    const searchResult = this.searchResults[this.currentSearchResultIndex];\n    if (!searchResult.node) {\n      return;\n    }\n    const treeElement = this.treeElementForNode(searchResult.node);\n    if (treeElement) {\n      treeElement.hideSearchHighlights();\n    }\n  }\n\n  selectedDOMNode(): SDK.DOMModel.DOMNode|null {\n    for (const treeOutline of this.treeOutlines) {\n      if (treeOutline.selectedDOMNode()) {\n        return treeOutline.selectedDOMNode();\n      }\n    }\n    return null;\n  }\n\n  selectDOMNode(node: SDK.DOMModel.DOMNode, focus?: boolean): void {\n    for (const treeOutline of this.treeOutlines) {\n      const outline = ElementsTreeOutline.forDOMModel(node.domModel());\n      if (outline === treeOutline) {\n        treeOutline.selectDOMNode(node, focus);\n      } else {\n        treeOutline.selectDOMNode(null);\n      }\n    }\n  }\n\n  private updateBreadcrumbIfNeeded(event: Common.EventTarget.EventTargetEvent<SDK.DOMModel.DOMNode[]>): void {\n    const nodes = event.data;\n    /* If we don't have a selected node then we can tell the breadcrumbs that & bail. */\n    const selectedNode = this.selectedDOMNode();\n    if (!selectedNode) {\n      this.breadcrumbs.data = {\n        crumbs: [],\n        selectedNode: null,\n      };\n      return;\n    }\n\n    /* This function gets called whenever the tree outline is updated\n     * and contains any nodes that have changed.\n     * What we need to do is construct the new set of breadcrumb nodes, combining the Nodes\n     * that we had before with the new nodes, and pass them into the breadcrumbs component.\n     */\n\n    // Get the current set of active crumbs\n    const activeNode = ElementsComponents.Helper.legacyNodeToElementsComponentsNode(selectedNode);\n    const existingCrumbs = [activeNode];\n    for (let current: (SDK.DOMModel.DOMNode|null) = selectedNode.parentNode; current; current = current.parentNode) {\n      existingCrumbs.push(ElementsComponents.Helper.legacyNodeToElementsComponentsNode(current));\n    }\n\n    /* Get the change nodes from the event & convert them to breadcrumb nodes */\n    const newNodes = nodes.map(ElementsComponents.Helper.legacyNodeToElementsComponentsNode);\n    const nodesThatHaveChangedMap = new Map<number, ElementsComponents.Helper.DOMNode>();\n    newNodes.forEach(crumb => nodesThatHaveChangedMap.set(crumb.id, crumb));\n\n    /* Loop over our existing crumbs, and if any have an ID that matches an ID from the new nodes\n     * that we have, use the new node, rather than the one we had, because it's changed.\n     */\n    const newSetOfCrumbs = existingCrumbs.map(crumb => {\n      const replacement = nodesThatHaveChangedMap.get(crumb.id);\n      return replacement || crumb;\n    });\n\n    this.breadcrumbs.data = {\n      crumbs: newSetOfCrumbs,\n      selectedNode: activeNode,\n    };\n  }\n\n  private crumbNodeSelected(event: ElementsComponents.ElementsBreadcrumbs.NodeSelectedEvent): void {\n    this.selectDOMNode(event.legacyDomNode, true);\n  }\n\n  private treeOutlineForNode(node: SDK.DOMModel.DOMNode|null): ElementsTreeOutline|null {\n    if (!node) {\n      return null;\n    }\n    return ElementsTreeOutline.forDOMModel(node.domModel());\n  }\n\n  private treeElementForNode(node: SDK.DOMModel.DOMNode): ElementsTreeElement|null {\n    const treeOutline = this.treeOutlineForNode(node);\n    if (!treeOutline) {\n      return null;\n    }\n    return treeOutline.findTreeElement(node);\n  }\n\n  private leaveUserAgentShadowDOM(node: SDK.DOMModel.DOMNode): SDK.DOMModel.DOMNode {\n    let userAgentShadowRoot;\n    while ((userAgentShadowRoot = node.ancestorUserAgentShadowRoot()) && userAgentShadowRoot.parentNode) {\n      node = userAgentShadowRoot.parentNode;\n    }\n    return node;\n  }\n\n  async revealAndSelectNode(nodeToReveal: SDK.DOMModel.DOMNode, focus: boolean, omitHighlight?: boolean):\n      Promise<void> {\n    this.omitDefaultSelection = true;\n\n    const node = Common.Settings.Settings.instance().moduleSetting('showUAShadowDOM').get() ?\n        nodeToReveal :\n        this.leaveUserAgentShadowDOM(nodeToReveal);\n    if (!omitHighlight) {\n      node.highlightForTwoSeconds();\n    }\n\n    if (this.accessibilityTreeView) {\n      void this.accessibilityTreeView.revealAndSelectNode(nodeToReveal);\n    }\n\n    await UI.ViewManager.ViewManager.instance().showView('elements', false, !focus);\n    this.selectDOMNode(node, focus);\n    delete this.omitDefaultSelection;\n    if (!this.notFirstInspectElement) {\n      ElementsPanel.firstInspectElementNodeNameForTest = node.nodeName();\n      ElementsPanel.firstInspectElementCompletedForTest();\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.inspectElementCompleted();\n    }\n    this.notFirstInspectElement = true;\n  }\n\n  private showUAShadowDOMChanged(): void {\n    for (const treeOutline of this.treeOutlines) {\n      treeOutline.update();\n    }\n  }\n\n  private setupTextSelectionHack(stylePaneWrapperElement: HTMLElement): void {\n    // We \"extend\" the sidebar area when dragging, in order to keep smooth text\n    // selection. It should be replaced by 'user-select: contain' in the future.\n    const uninstallHackBound = uninstallHack.bind(this);\n\n    // Fallback to cover unforeseen cases where text selection has ended.\n    const uninstallHackOnMousemove = (event: Event): void => {\n      if ((event as MouseEvent).buttons === 0) {\n        uninstallHack.call(this);\n      }\n    };\n\n    stylePaneWrapperElement.addEventListener('mousedown', (event: Event) => {\n      if ((event as MouseEvent).button !== 0) {\n        return;\n      }\n      this.splitWidget.element.classList.add('disable-resizer-for-elements-hack');\n      stylePaneWrapperElement.style.setProperty('height', `${stylePaneWrapperElement.offsetHeight}px`);\n      const largeLength = 1000000;\n      stylePaneWrapperElement.style.setProperty('left', `${- 1 * largeLength}px`);\n      stylePaneWrapperElement.style.setProperty('padding-left', `${largeLength}px`);\n      stylePaneWrapperElement.style.setProperty('width', `calc(100% + ${largeLength}px)`);\n      stylePaneWrapperElement.style.setProperty('position', 'absolute');\n\n      stylePaneWrapperElement.window().addEventListener('blur', uninstallHackBound);\n      stylePaneWrapperElement.window().addEventListener('contextmenu', uninstallHackBound, true);\n      stylePaneWrapperElement.window().addEventListener('dragstart', uninstallHackBound, true);\n      stylePaneWrapperElement.window().addEventListener('mousemove', uninstallHackOnMousemove, true);\n      stylePaneWrapperElement.window().addEventListener('mouseup', uninstallHackBound, true);\n      stylePaneWrapperElement.window().addEventListener('visibilitychange', uninstallHackBound);\n    }, true);\n\n    function uninstallHack(this: ElementsPanel): void {\n      this.splitWidget.element.classList.remove('disable-resizer-for-elements-hack');\n      stylePaneWrapperElement.style.removeProperty('left');\n      stylePaneWrapperElement.style.removeProperty('padding-left');\n      stylePaneWrapperElement.style.removeProperty('width');\n      stylePaneWrapperElement.style.removeProperty('position');\n\n      stylePaneWrapperElement.window().removeEventListener('blur', uninstallHackBound);\n      stylePaneWrapperElement.window().removeEventListener('contextmenu', uninstallHackBound, true);\n      stylePaneWrapperElement.window().removeEventListener('dragstart', uninstallHackBound, true);\n      stylePaneWrapperElement.window().removeEventListener('mousemove', uninstallHackOnMousemove, true);\n      stylePaneWrapperElement.window().removeEventListener('mouseup', uninstallHackBound, true);\n      stylePaneWrapperElement.window().removeEventListener('visibilitychange', uninstallHackBound);\n    }\n  }\n\n  private initializeSidebarPanes(splitMode: _splitMode): void {\n    this.splitWidget.setVertical(splitMode === _splitMode.Vertical);\n    this.showToolbarPane(null /* widget */, null /* toggle */);\n\n    const matchedStylePanesWrapper = new UI.Widget.VBox();\n    matchedStylePanesWrapper.element.classList.add('style-panes-wrapper');\n    this.stylesWidget.show(matchedStylePanesWrapper.element);\n    this.setupTextSelectionHack(matchedStylePanesWrapper.element);\n\n    const computedStylePanesWrapper = new UI.Widget.VBox();\n    computedStylePanesWrapper.element.classList.add('style-panes-wrapper');\n    this.computedStyleWidget.show(computedStylePanesWrapper.element);\n\n    const stylesSplitWidget = new UI.SplitWidget.SplitWidget(\n        true /* isVertical */, true /* secondIsSidebar */, 'elements.styles.sidebar.width', 100);\n    stylesSplitWidget.setMainWidget(matchedStylePanesWrapper);\n    stylesSplitWidget.hideSidebar();\n    stylesSplitWidget.enableShowModeSaving();\n    stylesSplitWidget.addEventListener(UI.SplitWidget.Events.ShowModeChanged, () => {\n      showMetricsWidgetInStylesPane();\n    });\n    this.stylesWidget.addEventListener(StylesSidebarPaneEvents.InitialUpdateCompleted, () => {\n      this.stylesWidget.appendToolbarItem(stylesSplitWidget.createShowHideSidebarButton(\n          i18nString(UIStrings.showComputedStylesSidebar), i18nString(UIStrings.hideComputedStylesSidebar),\n          i18nString(UIStrings.computedStylesShown), i18nString(UIStrings.computedStylesHidden)));\n    });\n\n    const showMetricsWidgetInComputedPane = (): void => {\n      this.metricsWidget.show(computedStylePanesWrapper.element, this.computedStyleWidget.element);\n      this.metricsWidget.toggleVisibility(true /* visible */);\n      this.stylesWidget.removeEventListener(StylesSidebarPaneEvents.StylesUpdateCompleted, toggleMetricsWidget);\n    };\n\n    const showMetricsWidgetInStylesPane = (): void => {\n      const showMergedComputedPane = stylesSplitWidget.showMode() === UI.SplitWidget.ShowMode.Both;\n      if (showMergedComputedPane) {\n        showMetricsWidgetInComputedPane();\n      } else {\n        this.metricsWidget.show(matchedStylePanesWrapper.element);\n        if (!this.stylesWidget.hasMatchedStyles) {\n          this.metricsWidget.toggleVisibility(false /* invisible */);\n        }\n        this.stylesWidget.addEventListener(StylesSidebarPaneEvents.StylesUpdateCompleted, toggleMetricsWidget);\n      }\n    };\n\n    let skippedInitialTabSelectedEvent = false;\n\n    const toggleMetricsWidget = (event: Common.EventTarget.EventTargetEvent<StylesUpdateCompletedEvent>): void => {\n      this.metricsWidget.toggleVisibility(event.data.hasMatchedStyles);\n    };\n\n    const tabSelected = (event: Common.EventTarget.EventTargetEvent<UI.TabbedPane.EventData>): void => {\n      const {tabId} = event.data;\n      if (tabId === SidebarPaneTabId.Computed) {\n        computedStylePanesWrapper.show(computedView.element);\n        showMetricsWidgetInComputedPane();\n      } else if (tabId === SidebarPaneTabId.Styles) {\n        stylesSplitWidget.setSidebarWidget(computedStylePanesWrapper);\n        showMetricsWidgetInStylesPane();\n      }\n\n      if (skippedInitialTabSelectedEvent) {\n        // We don't log the initially selected sidebar pane to UMA because\n        // it will skew the histogram heavily toward the Styles pane\n        Host.userMetrics.sidebarPaneShown(tabId);\n      } else {\n        skippedInitialTabSelectedEvent = true;\n      }\n    };\n\n    this.sidebarPaneView = UI.ViewManager.ViewManager.instance().createTabbedLocation(\n        () => UI.ViewManager.ViewManager.instance().showView('elements'), 'Styles-pane-sidebar', false, true);\n    const tabbedPane = this.sidebarPaneView.tabbedPane();\n    if (this.splitMode !== _splitMode.Vertical) {\n      this.splitWidget.installResizer(tabbedPane.headerElement());\n    }\n\n    const headerElement = tabbedPane.headerElement();\n    UI.ARIAUtils.markAsNavigation(headerElement);\n    UI.ARIAUtils.setAccessibleName(headerElement, i18nString(UIStrings.sidePanelToolbar));\n\n    const contentElement = tabbedPane.tabbedPaneContentElement();\n    UI.ARIAUtils.markAsComplementary(contentElement);\n    UI.ARIAUtils.setAccessibleName(contentElement, i18nString(UIStrings.sidePanelContent));\n\n    const stylesView =\n        new UI.View.SimpleView(i18nString(UIStrings.styles), /* isWebComponent */ undefined, SidebarPaneTabId.Styles);\n    this.sidebarPaneView.appendView(stylesView);\n    stylesView.element.classList.add('flex-auto');\n    stylesSplitWidget.show(stylesView.element);\n\n    const computedView = new UI.View.SimpleView(\n        i18nString(UIStrings.computed), /* isWebComponent */ undefined, SidebarPaneTabId.Computed);\n    computedView.element.classList.add('composite', 'fill');\n\n    tabbedPane.addEventListener(UI.TabbedPane.Events.TabSelected, tabSelected, this);\n    this.sidebarPaneView.appendView(computedView);\n    this.stylesViewToReveal = stylesView;\n\n    this.sidebarPaneView.appendApplicableItems('elements-sidebar');\n    const extensionSidebarPanes = Extensions.ExtensionServer.ExtensionServer.instance().sidebarPanes();\n    for (let i = 0; i < extensionSidebarPanes.length; ++i) {\n      this.addExtensionSidebarPane(extensionSidebarPanes[i]);\n    }\n\n    this.splitWidget.setSidebarWidget(this.sidebarPaneView.tabbedPane());\n  }\n\n  private updateSidebarPosition(): void {\n    if (this.sidebarPaneView && this.sidebarPaneView.tabbedPane().shouldHideOnDetach()) {\n      return;\n    }  // We can't reparent extension iframes.\n\n    const position = Common.Settings.Settings.instance().moduleSetting('sidebarPosition').get();\n    let splitMode = _splitMode.Horizontal;\n    if (position === 'right' ||\n        (position === 'auto' && UI.InspectorView.InspectorView.instance().element.offsetWidth > 680)) {\n      splitMode = _splitMode.Vertical;\n    }\n    if (!this.sidebarPaneView) {\n      this.initializeSidebarPanes(splitMode);\n      return;\n    }\n    if (splitMode === this.splitMode) {\n      return;\n    }\n    this.splitMode = splitMode;\n\n    const tabbedPane = this.sidebarPaneView.tabbedPane();\n    this.splitWidget.uninstallResizer(tabbedPane.headerElement());\n\n    this.splitWidget.setVertical(this.splitMode === _splitMode.Vertical);\n    this.showToolbarPane(null /* widget */, null /* toggle */);\n\n    if (this.splitMode !== _splitMode.Vertical) {\n      this.splitWidget.installResizer(tabbedPane.headerElement());\n    }\n  }\n\n  private extensionSidebarPaneAdded(\n      event: Common.EventTarget.EventTargetEvent<Extensions.ExtensionPanel.ExtensionSidebarPane>): void {\n    this.addExtensionSidebarPane(event.data);\n  }\n\n  private addExtensionSidebarPane(pane: Extensions.ExtensionPanel.ExtensionSidebarPane): void {\n    if (this.sidebarPaneView && pane.panelName() === this.name) {\n      this.sidebarPaneView.appendView(pane);\n    }\n  }\n\n  getComputedStyleWidget(): ComputedStyleWidget {\n    return this.computedStyleWidget;\n  }\n\n  private setupStyleTracking(cssModel: SDK.CSSModel.CSSModel): void {\n    const cssPropertyTracker = cssModel.createCSSPropertyTracker(TrackedCSSProperties);\n    cssPropertyTracker.start();\n    this.cssStyleTrackerByCSSModel.set(cssModel, cssPropertyTracker);\n    cssPropertyTracker.addEventListener(\n        SDK.CSSModel.CSSPropertyTrackerEvents.TrackedCSSPropertiesUpdated, this.trackedCSSPropertiesUpdated, this);\n  }\n\n  private removeStyleTracking(cssModel: SDK.CSSModel.CSSModel): void {\n    const cssPropertyTracker = this.cssStyleTrackerByCSSModel.get(cssModel);\n    if (!cssPropertyTracker) {\n      return;\n    }\n\n    cssPropertyTracker.stop();\n    this.cssStyleTrackerByCSSModel.delete(cssModel);\n    cssPropertyTracker.removeEventListener(\n        SDK.CSSModel.CSSPropertyTrackerEvents.TrackedCSSPropertiesUpdated, this.trackedCSSPropertiesUpdated, this);\n  }\n\n  private trackedCSSPropertiesUpdated({data: domNodes}:\n                                          Common.EventTarget.EventTargetEvent<(SDK.DOMModel.DOMNode | null)[]>): void {\n    for (const domNode of domNodes) {\n      if (!domNode) {\n        continue;\n      }\n      const treeElement = this.treeElementForNode(domNode);\n      if (treeElement) {\n        void treeElement.updateStyleAdorners();\n      }\n    }\n  }\n\n  showAdornerSettingsPane(): void {\n    // Delay the initialization of the pane to the first showing\n    // since usually this pane won't be used.\n    if (!this.adornerSettingsPane) {\n      this.adornerSettingsPane = new ElementsComponents.AdornerSettingsPane.AdornerSettingsPane();\n      this.adornerSettingsPane.addEventListener('adornersettingupdated', (event: Event) => {\n        const {adornerName, isEnabledNow, newSettings} =\n            (event as ElementsComponents.AdornerSettingsPane.AdornerSettingUpdatedEvent).data;\n        const adornersToUpdate = this.adornersByName.get(adornerName);\n        if (adornersToUpdate) {\n          for (const adorner of adornersToUpdate) {\n            isEnabledNow ? adorner.show() : adorner.hide();\n          }\n        }\n        this.adornerManager.updateSettings(newSettings);\n      });\n      this.searchableViewInternal.element.prepend(this.adornerSettingsPane);\n    }\n\n    const adornerSettings = this.adornerManager.getSettings();\n    this.adornerSettingsPane.data = {\n      settings: adornerSettings,\n    };\n    this.adornerSettingsPane.show();\n  }\n\n  isAdornerEnabled(adornerText: string): boolean {\n    return this.adornerManager.isAdornerEnabled(adornerText);\n  }\n\n  registerAdorner(adorner: Adorners.Adorner.Adorner): void {\n    let adornerSet = this.adornersByName.get(adorner.name);\n    if (!adornerSet) {\n      adornerSet = new Set();\n      this.adornersByName.set(adorner.name, adornerSet);\n    }\n    adornerSet.add(adorner);\n    if (!this.isAdornerEnabled(adorner.name)) {\n      adorner.hide();\n    }\n  }\n\n  deregisterAdorner(adorner: Adorners.Adorner.Adorner): void {\n    const adornerSet = this.adornersByName.get(adorner.name);\n    if (!adornerSet) {\n      return;\n    }\n    adornerSet.delete(adorner);\n  }\n\n  private static firstInspectElementCompletedForTest = function(): void {};\n  private static firstInspectElementNodeNameForTest = '';\n}\n\n// @ts-ignore exported for Tests.js\nglobalThis.Elements = globalThis.Elements || {};\n// @ts-ignore exported for Tests.js\nglobalThis.Elements.ElementsPanel = ElementsPanel;\n\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const enum _splitMode {\n  Vertical = 'Vertical',\n  Horizontal = 'Horizontal',\n}\n\nconst TrackedCSSProperties = [\n  {\n    name: 'display',\n    value: 'grid',\n  },\n  {\n    name: 'display',\n    value: 'inline-grid',\n  },\n  {\n    name: 'display',\n    value: 'flex',\n  },\n  {\n    name: 'display',\n    value: 'inline-flex',\n  },\n  {\n    name: 'container-type',\n    value: 'inline-size',\n  },\n  {\n    name: 'container-type',\n    value: 'block-size',\n  },\n  {\n    name: 'container-type',\n    value: 'size',\n  },\n];\n\nlet contextMenuProviderInstance: ContextMenuProvider;\n\nexport class ContextMenuProvider implements UI.ContextMenu.Provider {\n  appendApplicableItems(event: Event, contextMenu: UI.ContextMenu.ContextMenu, object: Object): void {\n    if (!(object instanceof SDK.RemoteObject.RemoteObject && (object as SDK.RemoteObject.RemoteObject).isNode()) &&\n        !(object instanceof SDK.DOMModel.DOMNode) && !(object instanceof SDK.DOMModel.DeferredDOMNode)) {\n      return;\n    }\n    if (ElementsPanel.instance().element.isAncestor((event.target as Node))) {\n      return;\n    }\n    const commandCallback: () => void = Common.Revealer.reveal.bind(Common.Revealer.Revealer, object);\n    contextMenu.revealSection().appendItem(i18nString(UIStrings.revealInElementsPanel), commandCallback);\n  }\n\n  static instance(): ContextMenuProvider {\n    if (!contextMenuProviderInstance) {\n      contextMenuProviderInstance = new ContextMenuProvider();\n    }\n    return contextMenuProviderInstance;\n  }\n}\nlet dOMNodeRevealerInstance: DOMNodeRevealer;\nexport class DOMNodeRevealer implements Common.Revealer.Revealer {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): DOMNodeRevealer {\n    const {forceNew} = opts;\n    if (!dOMNodeRevealerInstance || forceNew) {\n      dOMNodeRevealerInstance = new DOMNodeRevealer();\n    }\n\n    return dOMNodeRevealerInstance;\n  }\n\n  reveal(node: Object, omitFocus?: boolean): Promise<void> {\n    const panel = ElementsPanel.instance();\n    panel.pendingNodeReveal = true;\n\n    return (new Promise<void>(revealPromise)).catch((reason: Error) => {\n      let message: string;\n      if (Platform.UserVisibleError.isUserVisibleError(reason)) {\n        message = reason.message;\n      } else {\n        message = i18nString(UIStrings.nodeCannotBeFoundInTheCurrent);\n      }\n\n      Common.Console.Console.instance().warn(message);\n      // Blink tests expect an exception to be raised and unhandled here to detect that the node\n      // was actually not successfully viewed.\n      throw reason;\n    });\n\n    function revealPromise(\n        resolve: () => void, reject: (arg0: Platform.UserVisibleError.UserVisibleError) => void): void {\n      if (node instanceof SDK.DOMModel.DOMNode) {\n        onNodeResolved((node as SDK.DOMModel.DOMNode));\n      } else if (node instanceof SDK.DOMModel.DeferredDOMNode) {\n        (node as SDK.DOMModel.DeferredDOMNode).resolve(checkDeferredDOMNodeThenReveal);\n      } else if (node instanceof SDK.RemoteObject.RemoteObject) {\n        const domModel = node.runtimeModel().target().model(SDK.DOMModel.DOMModel);\n        if (domModel) {\n          void domModel.pushObjectAsNodeToFrontend(node).then(checkRemoteObjectThenReveal);\n        } else {\n          const msg = i18nString(UIStrings.nodeCannotBeFoundInTheCurrent);\n          reject(new Platform.UserVisibleError.UserVisibleError(msg));\n        }\n      } else {\n        const msg = i18nString(UIStrings.theRemoteObjectCouldNotBe);\n        reject(new Platform.UserVisibleError.UserVisibleError(msg));\n        panel.pendingNodeReveal = false;\n      }\n\n      function onNodeResolved(resolvedNode: SDK.DOMModel.DOMNode): void {\n        panel.pendingNodeReveal = false;\n\n        // A detached node could still have a parent and ownerDocument\n        // properties, which means stepping up through the hierarchy to ensure\n        // that the root node is the document itself. Any break implies\n        // detachment.\n        let currentNode: SDK.DOMModel.DOMNode = resolvedNode;\n        while (currentNode.parentNode) {\n          currentNode = currentNode.parentNode;\n        }\n        const isDetached = !(currentNode instanceof SDK.DOMModel.DOMDocument);\n\n        const isDocument = node instanceof SDK.DOMModel.DOMDocument;\n        if (!isDocument && isDetached) {\n          const msg = i18nString(UIStrings.nodeCannotBeFoundInTheCurrent);\n          reject(new Platform.UserVisibleError.UserVisibleError(msg));\n          return;\n        }\n\n        if (resolvedNode) {\n          void panel.revealAndSelectNode(resolvedNode, !omitFocus).then(resolve);\n          return;\n        }\n        const msg = i18nString(UIStrings.nodeCannotBeFoundInTheCurrent);\n        reject(new Platform.UserVisibleError.UserVisibleError(msg));\n      }\n\n      function checkRemoteObjectThenReveal(resolvedNode: SDK.DOMModel.DOMNode|null): void {\n        if (!resolvedNode) {\n          const msg = i18nString(UIStrings.theRemoteObjectCouldNotBe);\n          reject(new Platform.UserVisibleError.UserVisibleError(msg));\n          return;\n        }\n        onNodeResolved(resolvedNode);\n      }\n\n      function checkDeferredDOMNodeThenReveal(resolvedNode: SDK.DOMModel.DOMNode|null): void {\n        if (!resolvedNode) {\n          const msg = i18nString(UIStrings.theDeferredDomNodeCouldNotBe);\n          reject(new Platform.UserVisibleError.UserVisibleError(msg));\n          return;\n        }\n        onNodeResolved(resolvedNode);\n      }\n    }\n  }\n}\n\nlet cSSPropertyRevealerInstance: CSSPropertyRevealer;\n\nexport class CSSPropertyRevealer implements Common.Revealer.Revealer {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): CSSPropertyRevealer {\n    const {forceNew} = opts;\n    if (!cSSPropertyRevealerInstance || forceNew) {\n      cSSPropertyRevealerInstance = new CSSPropertyRevealer();\n    }\n\n    return cSSPropertyRevealerInstance;\n  }\n\n  reveal(property: Object): Promise<void> {\n    const panel = ElementsPanel.instance();\n    return panel.revealProperty((property as SDK.CSSProperty.CSSProperty));\n  }\n}\n\nlet elementsActionDelegateInstance: ElementsActionDelegate;\n\nexport class ElementsActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  handleAction(context: UI.Context.Context, actionId: string): boolean {\n    const node = UI.Context.Context.instance().flavor(SDK.DOMModel.DOMNode);\n    if (!node) {\n      return true;\n    }\n    const treeOutline = ElementsTreeOutline.forDOMModel(node.domModel());\n    if (!treeOutline) {\n      return true;\n    }\n\n    switch (actionId) {\n      case 'elements.hide-element':\n        void treeOutline.toggleHideElement(node);\n        return true;\n      case 'elements.edit-as-html':\n        treeOutline.toggleEditAsHTML(node);\n        return true;\n      case 'elements.duplicate-element':\n        treeOutline.duplicateNode(node);\n        return true;\n      case 'elements.copy-styles':\n        void treeOutline.findTreeElement(node)?.copyStyles();\n        return true;\n      case 'elements.undo':\n        void SDK.DOMModel.DOMModelUndoStack.instance().undo();\n        ElementsPanel.instance().stylesWidget.forceUpdate();\n        return true;\n      case 'elements.redo':\n        void SDK.DOMModel.DOMModelUndoStack.instance().redo();\n        ElementsPanel.instance().stylesWidget.forceUpdate();\n        return true;\n    }\n    return false;\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  }|undefined = {forceNew: null}): ElementsActionDelegate {\n    const {forceNew} = opts;\n    if (!elementsActionDelegateInstance || forceNew) {\n      elementsActionDelegateInstance = new ElementsActionDelegate();\n    }\n\n    return elementsActionDelegateInstance;\n  }\n}\n\nlet pseudoStateMarkerDecoratorInstance: PseudoStateMarkerDecorator;\nexport class PseudoStateMarkerDecorator implements MarkerDecorator {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): PseudoStateMarkerDecorator {\n    const {forceNew} = opts;\n    if (!pseudoStateMarkerDecoratorInstance || forceNew) {\n      pseudoStateMarkerDecoratorInstance = new PseudoStateMarkerDecorator();\n    }\n\n    return pseudoStateMarkerDecoratorInstance;\n  }\n\n  decorate(node: SDK.DOMModel.DOMNode): {\n    title: string,\n    color: string,\n  }|null {\n    const pseudoState = node.domModel().cssModel().pseudoState(node);\n    if (!pseudoState) {\n      return null;\n    }\n\n    return {color: 'orange', title: i18nString(UIStrings.elementStateS, {PH1: ':' + pseudoState.join(', :')})};\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
