{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/console_counters/WarningErrorCounter.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as IssuesManager from '../../models/issues_manager/issues_manager.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\nimport * as IssueCounter from '../../ui/components/issue_counter/issue_counter.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nconst UIStrings = {\n  /**\n  *@description The console error count in the Warning Error Counter shown in the main toolbar (top-left in DevTools). The error count refers to the number of errors currently present in the JavaScript console.\n  */\n  sErrors: '{n, plural, =1 {# error} other {# errors}}',\n  /**\n  *@description The console warning count in the Warning Error Counter shown in the main toolbar (top-left in DevTools). The warning count refers to the number of warnings currently present in the JavaScript console.\n  */\n  sWarnings: '{n, plural, =1 {# warning} other {# warnings}}',\n  /**\n  *@description Tooltip shown for a main toolbar button that opens the Console panel\n  *@example {2 errors, 1 warning} PH1\n  */\n  openConsoleToViewS: 'Open Console to view {PH1}',\n  /**\n  *@description Title for the issues count in the Issues Error Counter shown in the main toolbar (top-left in DevTools). The issues count refers to the number of issues in the issues tab.\n  */\n  openIssuesToView: '{n, plural, =1 {Open Issues to view # issue:} other {Open Issues to view # issues:}}',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/console_counters/WarningErrorCounter.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet warningErrorCounterInstance: WarningErrorCounter;\nexport class WarningErrorCounter implements UI.Toolbar.Provider {\n  private readonly toolbarItem: UI.Toolbar.ToolbarItemWithCompactLayout;\n  private consoleCounter: IconButton.IconButton.IconButton;\n  private issueCounter: IssueCounter.IssueCounter.IssueCounter;\n  private readonly throttler: Common.Throttler.Throttler;\n  updatingForTest?: boolean;\n\n  private constructor() {\n    WarningErrorCounter.instanceForTest = this;\n\n    const countersWrapper = document.createElement('div');\n    this.toolbarItem = new UI.Toolbar.ToolbarItemWithCompactLayout(countersWrapper);\n    this.toolbarItem.setVisible(false);\n    this.toolbarItem.addEventListener(\n        UI.Toolbar.ToolbarItemWithCompactLayoutEvents.CompactLayoutUpdated, this.onSetCompactLayout, this);\n\n    this.consoleCounter = new IconButton.IconButton.IconButton();\n    countersWrapper.appendChild(this.consoleCounter);\n    this.consoleCounter.data = {\n      clickHandler: Common.Console.Console.instance().show.bind(Common.Console.Console.instance()),\n      groups: [{iconName: 'error_icon'}, {iconName: 'warning_icon'}],\n    };\n\n    const issuesManager = IssuesManager.IssuesManager.IssuesManager.instance();\n    this.issueCounter = new IssueCounter.IssueCounter.IssueCounter();\n    countersWrapper.appendChild(this.issueCounter);\n    this.issueCounter.data = {\n      clickHandler: (): void => {\n        Host.userMetrics.issuesPanelOpenedFrom(Host.UserMetrics.IssueOpener.StatusBarIssuesCounter);\n        void UI.ViewManager.ViewManager.instance().showView('issues-pane');\n      },\n      issuesManager,\n      displayMode: IssueCounter.IssueCounter.DisplayMode.OnlyMostImportant,\n    };\n\n    this.throttler = new Common.Throttler.Throttler(100);\n\n    SDK.ConsoleModel.ConsoleModel.instance().addEventListener(\n        SDK.ConsoleModel.Events.ConsoleCleared, this.update, this);\n    SDK.ConsoleModel.ConsoleModel.instance().addEventListener(SDK.ConsoleModel.Events.MessageAdded, this.update, this);\n    SDK.ConsoleModel.ConsoleModel.instance().addEventListener(\n        SDK.ConsoleModel.Events.MessageUpdated, this.update, this);\n\n    issuesManager.addEventListener(IssuesManager.IssuesManager.Events.IssuesCountUpdated, this.update, this);\n\n    this.update();\n  }\n\n  onSetCompactLayout(event: Common.EventTarget.EventTargetEvent<boolean>): void {\n    this.setCompactLayout(event.data);\n  }\n\n  setCompactLayout(enable: boolean): void {\n    this.consoleCounter.data = {...this.consoleCounter.data, compact: enable};\n    this.issueCounter.data = {...this.issueCounter.data, compact: enable};\n  }\n\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): WarningErrorCounter {\n    const {forceNew} = opts;\n    if (!warningErrorCounterInstance || forceNew) {\n      warningErrorCounterInstance = new WarningErrorCounter();\n    }\n\n    return warningErrorCounterInstance;\n  }\n\n  private updatedForTest(): void {\n    // Sniffed in tests.\n  }\n\n  private update(): void {\n    this.updatingForTest = true;\n    void this.throttler.schedule(this.updateThrottled.bind(this));\n  }\n\n  get titlesForTesting(): string|null {\n    const button = this.consoleCounter.shadowRoot?.querySelector('button');\n    return button ? button.getAttribute('aria-label') : null;\n  }\n\n  private async updateThrottled(): Promise<void> {\n    const errors = SDK.ConsoleModel.ConsoleModel.instance().errors();\n    const warnings = SDK.ConsoleModel.ConsoleModel.instance().warnings();\n    const issuesManager = IssuesManager.IssuesManager.IssuesManager.instance();\n    const issues = issuesManager.numberOfIssues();\n\n    const countToText = (c: number): string|undefined => c === 0 ? undefined : `${c}`;\n\n    /* Update consoleCounter items. */\n    const errorCountTitle = i18nString(UIStrings.sErrors, {n: errors});\n    const warningCountTitle = i18nString(UIStrings.sWarnings, {n: warnings});\n    const newConsoleTexts = [countToText(errors), countToText(warnings)];\n    let consoleSummary = '';\n    if (errors && warnings) {\n      consoleSummary = `${errorCountTitle}, ${warningCountTitle}`;\n    } else if (errors) {\n      consoleSummary = errorCountTitle;\n    } else if (warnings) {\n      consoleSummary = warningCountTitle;\n    }\n    const consoleTitle = i18nString(UIStrings.openConsoleToViewS, {PH1: consoleSummary});\n    const previousData = this.consoleCounter.data;\n\n    this.consoleCounter.data = {\n      ...previousData,\n      groups: previousData.groups.map((g, i) => ({...g, text: newConsoleTexts[i]})),\n      accessibleName: consoleTitle,\n    };\n    // TODO(chromium:1167711): Let the component handle the title and ARIA label.\n    UI.Tooltip.Tooltip.install(this.consoleCounter, consoleTitle);\n    this.consoleCounter.classList.toggle('hidden', !(errors || warnings));\n\n    /* Update issuesCounter items. */\n    const issueEnumeration = IssueCounter.IssueCounter.getIssueCountsEnumeration(issuesManager);\n    const issuesTitleLead = i18nString(UIStrings.openIssuesToView, {n: issues});\n    const issuesTitle = `${issuesTitleLead} ${issueEnumeration}`;\n    // TODO(chromium:1167711): Let the component handle the title and ARIA label.\n    UI.Tooltip.Tooltip.install(this.issueCounter, issuesTitle);\n    this.issueCounter.data = {\n      ...this.issueCounter.data,\n      accessibleName: issuesTitle,\n    };\n    this.issueCounter.classList.toggle('hidden', !issues);\n\n    this.toolbarItem.setVisible(Boolean(errors || warnings || issues));\n\n    UI.InspectorView.InspectorView.instance().toolbarItemResized();\n    this.updatingForTest = false;\n    this.updatedForTest();\n    return;\n  }\n\n  item(): UI.Toolbar.ToolbarItem|null {\n    return this.toolbarItem;\n  }\n\n  static instanceForTest: WarningErrorCounter|null = null;\n}\n"],
  "mappings": "AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAM,YAAY;AAAA,EAIhB,SAAS;AAAA,EAIT,WAAW;AAAA,EAKX,oBAAoB;AAAA,EAIpB,kBAAkB;AAAA;AAEpB,MAAM,OAAO,KAAK,KAAK,kBAAkB,kDAAkD;AAC3F,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAEhE,IAAI;AACG,iCAAyD;AAAA,EAC7C;AAAA,EACT;AAAA,EACA;AAAA,EACS;AAAA,EACjB;AAAA,EAEQ,cAAc;AACpB,wBAAoB,kBAAkB;AAEtC,UAAM,kBAAkB,SAAS,cAAc;AAC/C,SAAK,cAAc,IAAI,GAAG,QAAQ,6BAA6B;AAC/D,SAAK,YAAY,WAAW;AAC5B,SAAK,YAAY,iBACb,GAAG,QAAQ,mCAAmC,sBAAsB,KAAK,oBAAoB;AAEjG,SAAK,iBAAiB,IAAI,WAAW,WAAW;AAChD,oBAAgB,YAAY,KAAK;AACjC,SAAK,eAAe,OAAO;AAAA,MACzB,cAAc,OAAO,QAAQ,QAAQ,WAAW,KAAK,KAAK,OAAO,QAAQ,QAAQ;AAAA,MACjF,QAAQ,CAAC,EAAC,UAAU,gBAAe,EAAC,UAAU;AAAA;AAGhD,UAAM,gBAAgB,cAAc,cAAc,cAAc;AAChE,SAAK,eAAe,IAAI,aAAa,aAAa;AAClD,oBAAgB,YAAY,KAAK;AACjC,SAAK,aAAa,OAAO;AAAA,MACvB,cAAc,MAAY;AACxB,aAAK,YAAY,sBAAsB,KAAK,YAAY,YAAY;AACpE,aAAK,GAAG,YAAY,YAAY,WAAW,SAAS;AAAA;AAAA,MAEtD;AAAA,MACA,aAAa,aAAa,aAAa,YAAY;AAAA;AAGrD,SAAK,YAAY,IAAI,OAAO,UAAU,UAAU;AAEhD,QAAI,aAAa,aAAa,WAAW,iBACrC,IAAI,aAAa,OAAO,gBAAgB,KAAK,QAAQ;AACzD,QAAI,aAAa,aAAa,WAAW,iBAAiB,IAAI,aAAa,OAAO,cAAc,KAAK,QAAQ;AAC7G,QAAI,aAAa,aAAa,WAAW,iBACrC,IAAI,aAAa,OAAO,gBAAgB,KAAK,QAAQ;AAEzD,kBAAc,iBAAiB,cAAc,cAAc,OAAO,oBAAoB,KAAK,QAAQ;AAEnG,SAAK;AAAA;AAAA,EAGP,mBAAmB,OAA2D;AAC5E,SAAK,iBAAiB,MAAM;AAAA;AAAA,EAG9B,iBAAiB,QAAuB;AACtC,SAAK,eAAe,OAAO,KAAI,KAAK,eAAe,MAAM,SAAS;AAClE,SAAK,aAAa,OAAO,KAAI,KAAK,aAAa,MAAM,SAAS;AAAA;AAAA,SAGzD,SAAS,OAAiC,EAAC,UAAU,QAA4B;AACtF,UAAM,EAAC,aAAY;AACnB,QAAI,CAAC,+BAA+B,UAAU;AAC5C,oCAA8B,IAAI;AAAA;AAGpC,WAAO;AAAA;AAAA,EAGD,iBAAuB;AAAA;AAAA,EAIvB,SAAe;AACrB,SAAK,kBAAkB;AACvB,SAAK,KAAK,UAAU,SAAS,KAAK,gBAAgB,KAAK;AAAA;AAAA,MAGrD,mBAAgC;AAClC,UAAM,SAAS,KAAK,eAAe,YAAY,cAAc;AAC7D,WAAO,SAAS,OAAO,aAAa,gBAAgB;AAAA;AAAA,QAGxC,kBAAiC;AAC7C,UAAM,SAAS,IAAI,aAAa,aAAa,WAAW;AACxD,UAAM,WAAW,IAAI,aAAa,aAAa,WAAW;AAC1D,UAAM,gBAAgB,cAAc,cAAc,cAAc;AAChE,UAAM,SAAS,cAAc;AAE7B,UAAM,cAAc,CAAC,MAAgC,MAAM,IAAI,SAAY,GAAG;AAG9E,UAAM,kBAAkB,WAAW,UAAU,SAAS,EAAC,GAAG;AAC1D,UAAM,oBAAoB,WAAW,UAAU,WAAW,EAAC,GAAG;AAC9D,UAAM,kBAAkB,CAAC,YAAY,SAAS,YAAY;AAC1D,QAAI,iBAAiB;AACrB,QAAI,UAAU,UAAU;AACtB,uBAAiB,GAAG,oBAAoB;AAAA,eAC/B,QAAQ;AACjB,uBAAiB;AAAA,eACR,UAAU;AACnB,uBAAiB;AAAA;AAEnB,UAAM,eAAe,WAAW,UAAU,oBAAoB,EAAC,KAAK;AACpE,UAAM,eAAe,KAAK,eAAe;AAEzC,SAAK,eAAe,OAAO;AAAA,SACtB;AAAA,MACH,QAAQ,aAAa,OAAO,IAAI,CAAC,GAAG,MAAO,MAAI,GAAG,MAAM,gBAAgB;AAAA,MACxE,gBAAgB;AAAA;AAGlB,OAAG,QAAQ,QAAQ,QAAQ,KAAK,gBAAgB;AAChD,SAAK,eAAe,UAAU,OAAO,UAAU,CAAE,WAAU;AAG3D,UAAM,mBAAmB,aAAa,aAAa,0BAA0B;AAC7E,UAAM,kBAAkB,WAAW,UAAU,kBAAkB,EAAC,GAAG;AACnE,UAAM,cAAc,GAAG,mBAAmB;AAE1C,OAAG,QAAQ,QAAQ,QAAQ,KAAK,cAAc;AAC9C,SAAK,aAAa,OAAO;AAAA,SACpB,KAAK,aAAa;AAAA,MACrB,gBAAgB;AAAA;AAElB,SAAK,aAAa,UAAU,OAAO,UAAU,CAAC;AAE9C,SAAK,YAAY,WAAW,QAAQ,UAAU,YAAY;AAE1D,OAAG,cAAc,cAAc,WAAW;AAC1C,SAAK,kBAAkB;AACvB,SAAK;AACL;AAAA;AAAA,EAGF,OAAoC;AAClC,WAAO,KAAK;AAAA;AAAA,SAGP,kBAA4C;AAAA;",
  "names": []
}
