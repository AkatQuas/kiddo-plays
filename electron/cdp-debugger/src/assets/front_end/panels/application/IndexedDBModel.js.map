{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/application/IndexedDBModel.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\n\nexport class IndexedDBModel extends SDK.SDKModel.SDKModel<EventTypes> implements ProtocolProxyApi.StorageDispatcher {\n  private readonly securityOriginManager: SDK.SecurityOriginManager.SecurityOriginManager|null;\n  private readonly indexedDBAgent: ProtocolProxyApi.IndexedDBApi;\n  private readonly storageAgent: ProtocolProxyApi.StorageApi;\n  private readonly databasesInternal: Map<DatabaseId, Database>;\n  private databaseNamesBySecurityOrigin: {\n    [x: string]: string[],\n  };\n  private readonly originsUpdated: Set<string>;\n  private readonly throttler: Common.Throttler.Throttler;\n  private enabled?: boolean;\n\n  constructor(target: SDK.Target.Target) {\n    super(target);\n    target.registerStorageDispatcher(this);\n    this.securityOriginManager = target.model(SDK.SecurityOriginManager.SecurityOriginManager);\n    this.indexedDBAgent = target.indexedDBAgent();\n    this.storageAgent = target.storageAgent();\n\n    this.databasesInternal = new Map();\n    this.databaseNamesBySecurityOrigin = {};\n\n    this.originsUpdated = new Set();\n    this.throttler = new Common.Throttler.Throttler(1000);\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static keyFromIDBKey(idbKey: any): Protocol.IndexedDB.Key|undefined {\n    if (typeof (idbKey) === 'undefined' || idbKey === null) {\n      return undefined;\n    }\n\n    let key: Protocol.IndexedDB.Key;\n    switch (typeof (idbKey)) {\n      case 'number':\n        key = {\n          type: Protocol.IndexedDB.KeyType.Number,\n          number: idbKey,\n        };\n        break;\n      case 'string':\n        key = {\n          type: Protocol.IndexedDB.KeyType.String,\n          string: idbKey,\n        };\n        break;\n      case 'object':\n        if (idbKey instanceof Date) {\n          key = {\n            type: Protocol.IndexedDB.KeyType.Date,\n            date: idbKey.getTime(),\n          };\n        } else if (Array.isArray(idbKey)) {\n          const array = [];\n          for (let i = 0; i < idbKey.length; ++i) {\n            const nestedKey = IndexedDBModel.keyFromIDBKey(idbKey[i]);\n            if (nestedKey) {\n              array.push(nestedKey);\n            }\n          }\n          key = {\n            type: Protocol.IndexedDB.KeyType.Array,\n            array,\n          };\n        } else {\n          return undefined;\n        }\n        break;\n      default:\n        return undefined;\n    }\n    return key;\n  }\n\n  private static keyRangeFromIDBKeyRange(idbKeyRange: IDBKeyRange): Protocol.IndexedDB.KeyRange {\n    return {\n      lower: IndexedDBModel.keyFromIDBKey(idbKeyRange.lower),\n      upper: IndexedDBModel.keyFromIDBKey(idbKeyRange.upper),\n      lowerOpen: Boolean(idbKeyRange.lowerOpen),\n      upperOpen: Boolean(idbKeyRange.upperOpen),\n    };\n  }\n\n  static idbKeyPathFromKeyPath(keyPath: Protocol.IndexedDB.KeyPath): string|string[]|null|undefined {\n    let idbKeyPath;\n    switch (keyPath.type) {\n      case Protocol.IndexedDB.KeyPathType.Null:\n        idbKeyPath = null;\n        break;\n      case Protocol.IndexedDB.KeyPathType.String:\n        idbKeyPath = keyPath.string;\n        break;\n      case Protocol.IndexedDB.KeyPathType.Array:\n        idbKeyPath = keyPath.array;\n        break;\n    }\n    return idbKeyPath;\n  }\n\n  static keyPathStringFromIDBKeyPath(idbKeyPath: string|string[]|null|undefined): string|null {\n    if (typeof idbKeyPath === 'string') {\n      return '\"' + idbKeyPath + '\"';\n    }\n    if (idbKeyPath instanceof Array) {\n      return '[\"' + idbKeyPath.join('\", \"') + '\"]';\n    }\n    return null;\n  }\n\n  enable(): void {\n    if (this.enabled) {\n      return;\n    }\n\n    void this.indexedDBAgent.invoke_enable();\n    if (this.securityOriginManager) {\n      this.securityOriginManager.addEventListener(\n          SDK.SecurityOriginManager.Events.SecurityOriginAdded, this.securityOriginAdded, this);\n      this.securityOriginManager.addEventListener(\n          SDK.SecurityOriginManager.Events.SecurityOriginRemoved, this.securityOriginRemoved, this);\n\n      for (const securityOrigin of this.securityOriginManager.securityOrigins()) {\n        this.addOrigin(securityOrigin);\n      }\n    }\n\n    this.enabled = true;\n  }\n\n  clearForOrigin(origin: string): void {\n    if (!this.enabled || !this.databaseNamesBySecurityOrigin[origin]) {\n      return;\n    }\n\n    this.removeOrigin(origin);\n    this.addOrigin(origin);\n  }\n\n  async deleteDatabase(databaseId: DatabaseId): Promise<void> {\n    if (!this.enabled) {\n      return;\n    }\n    await this.indexedDBAgent.invoke_deleteDatabase(\n        {securityOrigin: databaseId.securityOrigin, databaseName: databaseId.name});\n    void this.loadDatabaseNames(databaseId.securityOrigin);\n  }\n\n  async refreshDatabaseNames(): Promise<void> {\n    for (const securityOrigin in this.databaseNamesBySecurityOrigin) {\n      await this.loadDatabaseNames(securityOrigin);\n    }\n    this.dispatchEventToListeners(Events.DatabaseNamesRefreshed);\n  }\n\n  refreshDatabase(databaseId: DatabaseId): void {\n    void this.loadDatabase(databaseId, true);\n  }\n\n  async clearObjectStore(databaseId: DatabaseId, objectStoreName: string): Promise<void> {\n    await this.indexedDBAgent.invoke_clearObjectStore(\n        {securityOrigin: databaseId.securityOrigin, databaseName: databaseId.name, objectStoreName});\n  }\n\n  async deleteEntries(databaseId: DatabaseId, objectStoreName: string, idbKeyRange: IDBKeyRange): Promise<void> {\n    const keyRange = IndexedDBModel.keyRangeFromIDBKeyRange(idbKeyRange);\n    await this.indexedDBAgent.invoke_deleteObjectStoreEntries(\n        {securityOrigin: databaseId.securityOrigin, databaseName: databaseId.name, objectStoreName, keyRange});\n  }\n\n  private securityOriginAdded(event: Common.EventTarget.EventTargetEvent<string>): void {\n    this.addOrigin(event.data);\n  }\n\n  private securityOriginRemoved(event: Common.EventTarget.EventTargetEvent<string>): void {\n    this.removeOrigin(event.data);\n  }\n\n  private addOrigin(securityOrigin: string): void {\n    console.assert(!this.databaseNamesBySecurityOrigin[securityOrigin]);\n    this.databaseNamesBySecurityOrigin[securityOrigin] = [];\n    void this.loadDatabaseNames(securityOrigin);\n    if (this.isValidSecurityOrigin(securityOrigin)) {\n      void this.storageAgent.invoke_trackIndexedDBForOrigin({origin: securityOrigin});\n    }\n  }\n\n  private removeOrigin(securityOrigin: string): void {\n    console.assert(Boolean(this.databaseNamesBySecurityOrigin[securityOrigin]));\n    for (let i = 0; i < this.databaseNamesBySecurityOrigin[securityOrigin].length; ++i) {\n      this.databaseRemoved(securityOrigin, this.databaseNamesBySecurityOrigin[securityOrigin][i]);\n    }\n    delete this.databaseNamesBySecurityOrigin[securityOrigin];\n    if (this.isValidSecurityOrigin(securityOrigin)) {\n      void this.storageAgent.invoke_untrackIndexedDBForOrigin({origin: securityOrigin});\n    }\n  }\n\n  private isValidSecurityOrigin(securityOrigin: string): boolean {\n    const parsedURL = Common.ParsedURL.ParsedURL.fromString(securityOrigin);\n    return parsedURL !== null && parsedURL.scheme.startsWith('http');\n  }\n\n  private updateOriginDatabaseNames(securityOrigin: string, databaseNames: string[]): void {\n    const newDatabaseNames = new Set<string>(databaseNames);\n    const oldDatabaseNames = new Set<string>(this.databaseNamesBySecurityOrigin[securityOrigin]);\n\n    this.databaseNamesBySecurityOrigin[securityOrigin] = databaseNames;\n\n    for (const databaseName of oldDatabaseNames) {\n      if (!newDatabaseNames.has(databaseName)) {\n        this.databaseRemoved(securityOrigin, databaseName);\n      }\n    }\n    for (const databaseName of newDatabaseNames) {\n      if (!oldDatabaseNames.has(databaseName)) {\n        this.databaseAdded(securityOrigin, databaseName);\n      }\n    }\n  }\n\n  databases(): DatabaseId[] {\n    const result = [];\n    for (const securityOrigin in this.databaseNamesBySecurityOrigin) {\n      const databaseNames = this.databaseNamesBySecurityOrigin[securityOrigin];\n      for (let i = 0; i < databaseNames.length; ++i) {\n        result.push(new DatabaseId(securityOrigin, databaseNames[i]));\n      }\n    }\n    return result;\n  }\n\n  private databaseAdded(securityOrigin: string, databaseName: string): void {\n    const databaseId = new DatabaseId(securityOrigin, databaseName);\n    this.dispatchEventToListeners(Events.DatabaseAdded, {model: this, databaseId: databaseId});\n  }\n\n  private databaseRemoved(securityOrigin: string, databaseName: string): void {\n    const databaseId = new DatabaseId(securityOrigin, databaseName);\n    this.dispatchEventToListeners(Events.DatabaseRemoved, {model: this, databaseId: databaseId});\n  }\n\n  private async loadDatabaseNames(securityOrigin: string): Promise<string[]> {\n    const {databaseNames} = await this.indexedDBAgent.invoke_requestDatabaseNames({securityOrigin});\n    if (!databaseNames) {\n      return [];\n    }\n    if (!this.databaseNamesBySecurityOrigin[securityOrigin]) {\n      return [];\n    }\n    this.updateOriginDatabaseNames(securityOrigin, databaseNames);\n    return databaseNames;\n  }\n\n  private async loadDatabase(databaseId: DatabaseId, entriesUpdated: boolean): Promise<void> {\n    const {databaseWithObjectStores} = await this.indexedDBAgent.invoke_requestDatabase(\n        {securityOrigin: databaseId.securityOrigin, databaseName: databaseId.name});\n\n    if (!databaseWithObjectStores) {\n      return;\n    }\n    if (!this.databaseNamesBySecurityOrigin[databaseId.securityOrigin]) {\n      return;\n    }\n\n    const databaseModel = new Database(databaseId, databaseWithObjectStores.version);\n    this.databasesInternal.set(databaseId, databaseModel);\n    for (const objectStore of databaseWithObjectStores.objectStores) {\n      const objectStoreIDBKeyPath = IndexedDBModel.idbKeyPathFromKeyPath(objectStore.keyPath);\n      const objectStoreModel = new ObjectStore(objectStore.name, objectStoreIDBKeyPath, objectStore.autoIncrement);\n      for (let j = 0; j < objectStore.indexes.length; ++j) {\n        const index = objectStore.indexes[j];\n        const indexIDBKeyPath = IndexedDBModel.idbKeyPathFromKeyPath(index.keyPath);\n        const indexModel = new Index(index.name, indexIDBKeyPath, index.unique, index.multiEntry);\n        objectStoreModel.indexes.set(indexModel.name, indexModel);\n      }\n      databaseModel.objectStores.set(objectStoreModel.name, objectStoreModel);\n    }\n\n    this.dispatchEventToListeners(\n        Events.DatabaseLoaded, {model: this, database: databaseModel, entriesUpdated: entriesUpdated});\n  }\n\n  loadObjectStoreData(\n      databaseId: DatabaseId, objectStoreName: string, idbKeyRange: IDBKeyRange|null, skipCount: number,\n      pageSize: number, callback: (arg0: Array<Entry>, arg1: boolean) => void): void {\n    void this.requestData(databaseId, databaseId.name, objectStoreName, '', idbKeyRange, skipCount, pageSize, callback);\n  }\n\n  loadIndexData(\n      databaseId: DatabaseId, objectStoreName: string, indexName: string, idbKeyRange: IDBKeyRange|null,\n      skipCount: number, pageSize: number, callback: (arg0: Array<Entry>, arg1: boolean) => void): void {\n    void this.requestData(\n        databaseId, databaseId.name, objectStoreName, indexName, idbKeyRange, skipCount, pageSize, callback);\n  }\n\n  private async requestData(\n      databaseId: DatabaseId, databaseName: string, objectStoreName: string, indexName: string,\n      idbKeyRange: IDBKeyRange|null, skipCount: number, pageSize: number,\n      callback: (arg0: Array<Entry>, arg1: boolean) => void): Promise<void> {\n    const keyRange = idbKeyRange ? IndexedDBModel.keyRangeFromIDBKeyRange(idbKeyRange) : undefined;\n\n    const response = await this.indexedDBAgent.invoke_requestData({\n      securityOrigin: databaseId.securityOrigin,\n      databaseName,\n      objectStoreName,\n      indexName,\n      skipCount,\n      pageSize,\n      keyRange,\n    });\n\n    if (response.getError()) {\n      console.error('IndexedDBAgent error: ' + response.getError());\n      return;\n    }\n\n    const runtimeModel = this.target().model(SDK.RuntimeModel.RuntimeModel);\n    if (!runtimeModel || !this.databaseNamesBySecurityOrigin[databaseId.securityOrigin]) {\n      return;\n    }\n    const dataEntries = response.objectStoreDataEntries;\n    const entries = [];\n    for (const dataEntry of dataEntries) {\n      const key = runtimeModel.createRemoteObject(dataEntry.key);\n      const primaryKey = runtimeModel.createRemoteObject(dataEntry.primaryKey);\n      const value = runtimeModel.createRemoteObject(dataEntry.value);\n      entries.push(new Entry(key, primaryKey, value));\n    }\n    callback(entries, response.hasMore);\n  }\n\n  async getMetadata(databaseId: DatabaseId, objectStore: ObjectStore): Promise<ObjectStoreMetadata|null> {\n    const databaseOrigin = databaseId.securityOrigin;\n    const databaseName = databaseId.name;\n    const objectStoreName = objectStore.name;\n    const response =\n        await this.indexedDBAgent.invoke_getMetadata({securityOrigin: databaseOrigin, databaseName, objectStoreName});\n\n    if (response.getError()) {\n      console.error('IndexedDBAgent error: ' + response.getError());\n      return null;\n    }\n    return {entriesCount: response.entriesCount, keyGeneratorValue: response.keyGeneratorValue};\n  }\n\n  private async refreshDatabaseList(securityOrigin: string): Promise<void> {\n    const databaseNames = await this.loadDatabaseNames(securityOrigin);\n    for (const databaseName of databaseNames) {\n      void this.loadDatabase(new DatabaseId(securityOrigin, databaseName), false);\n    }\n  }\n\n  indexedDBListUpdated({origin: securityOrigin}: Protocol.Storage.IndexedDBListUpdatedEvent): void {\n    this.originsUpdated.add(securityOrigin);\n\n    void this.throttler.schedule(() => {\n      const promises = Array.from(this.originsUpdated, securityOrigin => {\n        void this.refreshDatabaseList(securityOrigin);\n      });\n      this.originsUpdated.clear();\n      return Promise.all(promises);\n    });\n  }\n\n  indexedDBContentUpdated({origin: securityOrigin, databaseName, objectStoreName}:\n                              Protocol.Storage.IndexedDBContentUpdatedEvent): void {\n    const databaseId = new DatabaseId(securityOrigin, databaseName);\n    this.dispatchEventToListeners(\n        Events.IndexedDBContentUpdated, {databaseId: databaseId, objectStoreName: objectStoreName, model: this});\n  }\n\n  cacheStorageListUpdated(_event: Protocol.Storage.CacheStorageListUpdatedEvent): void {\n  }\n\n  cacheStorageContentUpdated(_event: Protocol.Storage.CacheStorageContentUpdatedEvent): void {\n  }\n\n  interestGroupAccessed(_event: Protocol.Storage.InterestGroupAccessedEvent): void {\n  }\n}\n\nSDK.SDKModel.SDKModel.register(IndexedDBModel, {capabilities: SDK.Target.Capability.Storage, autostart: false});\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  DatabaseAdded = 'DatabaseAdded',\n  DatabaseRemoved = 'DatabaseRemoved',\n  DatabaseLoaded = 'DatabaseLoaded',\n  DatabaseNamesRefreshed = 'DatabaseNamesRefreshed',\n  IndexedDBContentUpdated = 'IndexedDBContentUpdated',\n}\n\nexport type EventTypes = {\n  [Events.DatabaseAdded]: {model: IndexedDBModel, databaseId: DatabaseId},\n  [Events.DatabaseRemoved]: {model: IndexedDBModel, databaseId: DatabaseId},\n  [Events.DatabaseLoaded]: {model: IndexedDBModel, database: Database, entriesUpdated: boolean},\n  [Events.DatabaseNamesRefreshed]: void,\n  [Events.IndexedDBContentUpdated]: {model: IndexedDBModel, databaseId: DatabaseId, objectStoreName: string},\n};\n\nexport class Entry {\n  key: SDK.RemoteObject.RemoteObject;\n  primaryKey: SDK.RemoteObject.RemoteObject;\n  value: SDK.RemoteObject.RemoteObject;\n\n  constructor(\n      key: SDK.RemoteObject.RemoteObject, primaryKey: SDK.RemoteObject.RemoteObject,\n      value: SDK.RemoteObject.RemoteObject) {\n    this.key = key;\n    this.primaryKey = primaryKey;\n    this.value = value;\n  }\n}\n\nexport class DatabaseId {\n  securityOrigin: string;\n  name: string;\n  constructor(securityOrigin: string, name: string) {\n    this.securityOrigin = securityOrigin;\n    this.name = name;\n  }\n\n  equals(databaseId: DatabaseId): boolean {\n    return this.name === databaseId.name && this.securityOrigin === databaseId.securityOrigin;\n  }\n}\n\nexport class Database {\n  databaseId: DatabaseId;\n  version: number;\n  objectStores: Map<string, ObjectStore>;\n  constructor(databaseId: DatabaseId, version: number) {\n    this.databaseId = databaseId;\n    this.version = version;\n    this.objectStores = new Map();\n  }\n}\n\nexport class ObjectStore {\n  name: string;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  keyPath: any;\n  autoIncrement: boolean;\n  indexes: Map<string, Index>;\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(name: string, keyPath: any, autoIncrement: boolean) {\n    this.name = name;\n    this.keyPath = keyPath;\n    this.autoIncrement = autoIncrement;\n    this.indexes = new Map();\n  }\n\n  get keyPathString(): string {\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // @ts-expect-error\n    return IndexedDBModel.keyPathStringFromIDBKeyPath((this.keyPath as string));\n  }\n}\n\nexport class Index {\n  name: string;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  keyPath: any;\n  unique: boolean;\n  multiEntry: boolean;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(name: string, keyPath: any, unique: boolean, multiEntry: boolean) {\n    this.name = name;\n    this.keyPath = keyPath;\n    this.unique = unique;\n    this.multiEntry = multiEntry;\n  }\n\n  get keyPathString(): string {\n    return IndexedDBModel.keyPathStringFromIDBKeyPath((this.keyPath as string)) as string;\n  }\n}\nexport interface ObjectStoreMetadata {\n  entriesCount: number;\n  keyGeneratorValue: number;\n}\n"],
  "mappings": "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",
  "names": []
}
