{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/application/CookieItemsView.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2009 Apple Inc.  All rights reserved.\n * Copyright (C) 2009 Joseph Pecoraro\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as IssuesManager from '../../models/issues_manager/issues_manager.js';\nimport * as CookieTable from '../../ui/legacy/components/cookie_table/cookie_table.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport cookieItemsViewStyles from './cookieItemsView.css.js';\nimport {StorageItemsView} from './StorageItemsView.js';\n\nconst UIStrings = {\n  /**\n  *@description Label for checkbox to show url decoded cookie values\n  */\n  showUrlDecoded: 'Show URL decoded',\n  /**\n  *@description Text for web cookies\n  */\n  cookies: 'Cookies',\n  /**\n  *@description Text in Cookie Items View of the Application panel\n  */\n  selectACookieToPreviewItsValue: 'Select a cookie to preview its value',\n  /**\n  *@description Text for filter in Cookies View of the Application panel\n  */\n  onlyShowCookiesWithAnIssue: 'Only show cookies with an issue',\n  /**\n  *@description Title for filter in the Cookies View of the Application panel\n  */\n  onlyShowCookiesWhichHaveAn: 'Only show cookies which have an associated issue',\n  /**\n  *@description Label to only delete the cookies that are visible after filtering\n  */\n  clearFilteredCookies: 'Clear filtered cookies',\n  /**\n  *@description Label to delete all cookies\n  */\n  clearAllCookies: 'Clear all cookies',\n  /**\n  *@description Alert message for screen reader to announce # of cookies in the table\n  *@example {5} PH1\n  */\n  numberOfCookiesShownInTableS: 'Number of cookies shown in table: {PH1}',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/CookieItemsView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nclass CookiePreviewWidget extends UI.Widget.VBox {\n  private cookie: SDK.Cookie.Cookie|null;\n  private showDecodedSetting: Common.Settings.Setting<boolean>;\n  private toggle: UI.UIUtils.CheckboxLabel;\n  private value: HTMLDivElement;\n\n  constructor() {\n    super();\n    this.setMinimumSize(230, 45);\n    this.cookie = null;\n    this.showDecodedSetting = Common.Settings.Settings.instance().createSetting('cookieViewShowDecoded', false);\n\n    const header = document.createElement('div');\n    header.classList.add('cookie-preview-widget-header');\n    const span = document.createElement('span');\n    span.classList.add('cookie-preview-widget-header-label');\n    span.textContent = 'Cookie Value';\n    header.appendChild(span);\n    this.contentElement.appendChild(header);\n\n    const toggle = UI.UIUtils.CheckboxLabel.create(i18nString(UIStrings.showUrlDecoded), this.showDecodedSetting.get());\n    toggle.classList.add('cookie-preview-widget-toggle');\n    toggle.checkboxElement.addEventListener('click', () => this.showDecoded(!this.showDecodedSetting.get()));\n    header.appendChild(toggle);\n    this.toggle = toggle;\n\n    const value = document.createElement('div');\n    value.classList.add('cookie-preview-widget-cookie-value');\n    value.textContent = '';\n    value.addEventListener('dblclick', this.handleDblClickOnCookieValue.bind(this));\n    this.value = value;\n\n    this.contentElement.classList.add('cookie-preview-widget');\n    this.contentElement.appendChild(value);\n  }\n\n  showDecoded(decoded: boolean): void {\n    if (!this.cookie) {\n      return;\n    }\n    this.showDecodedSetting.set(decoded);\n    this.toggle.checkboxElement.checked = decoded;\n    this.updatePreview();\n  }\n\n  private updatePreview(): void {\n    if (this.cookie) {\n      this.value.textContent =\n          this.showDecodedSetting.get() ? decodeURIComponent(this.cookie.value()) : this.cookie.value();\n    } else {\n      this.value.textContent = '';\n    }\n  }\n\n  setCookie(cookie: SDK.Cookie.Cookie): void {\n    this.cookie = cookie;\n    this.updatePreview();\n  }\n\n  /**\n   * Select all text even if there a spaces in it\n   */\n  handleDblClickOnCookieValue(event: Event): void {\n    event.preventDefault();\n    const range = document.createRange();\n    range.selectNode(this.value);\n    const selection = window.getSelection();\n    if (!selection) {\n      return;\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n\nexport class CookieItemsView extends StorageItemsView {\n  private model: SDK.CookieModel.CookieModel;\n  private cookieDomain: string;\n  private totalSize: number;\n  private cookiesTable: CookieTable.CookiesTable.CookiesTable;\n  private readonly splitWidget: UI.SplitWidget.SplitWidget;\n  private readonly previewPanel: UI.Widget.VBox;\n  private readonly previewWidget: CookiePreviewWidget;\n  private readonly emptyWidget: UI.EmptyWidget.EmptyWidget;\n  private onlyIssuesFilterUI: UI.Toolbar.ToolbarCheckbox;\n  private readonly refreshThrottler: Common.Throttler.Throttler;\n  private eventDescriptors: Common.EventTarget.EventDescriptor[];\n  private allCookies: SDK.Cookie.Cookie[];\n  private shownCookies: SDK.Cookie.Cookie[];\n  private selectedCookie: SDK.Cookie.Cookie|null;\n  constructor(model: SDK.CookieModel.CookieModel, cookieDomain: string) {\n    super(i18nString(UIStrings.cookies), 'cookiesPanel');\n\n    this.element.classList.add('storage-view');\n\n    this.model = model;\n    this.cookieDomain = cookieDomain;\n\n    this.totalSize = 0;\n    this.cookiesTable = new CookieTable.CookiesTable.CookiesTable(\n        /* renderInline */ false, this.saveCookie.bind(this), this.refreshItems.bind(this),\n        this.handleCookieSelected.bind(this), this.deleteCookie.bind(this));\n\n    this.cookiesTable.setMinimumSize(0, 50);\n\n    this.splitWidget = new UI.SplitWidget.SplitWidget(\n        /* isVertical: */ false, /* secondIsSidebar: */ true, 'cookieItemsSplitViewState');\n    this.splitWidget.show(this.element);\n\n    this.previewPanel = new UI.Widget.VBox();\n    const resizer = this.previewPanel.element.createChild('div', 'preview-panel-resizer');\n\n    this.splitWidget.setMainWidget(this.cookiesTable);\n    this.splitWidget.setSidebarWidget(this.previewPanel);\n    this.splitWidget.installResizer(resizer);\n\n    this.previewWidget = new CookiePreviewWidget();\n    this.emptyWidget = new UI.EmptyWidget.EmptyWidget(i18nString(UIStrings.selectACookieToPreviewItsValue));\n    this.emptyWidget.show(this.previewPanel.contentElement);\n\n    this.onlyIssuesFilterUI = new UI.Toolbar.ToolbarCheckbox(\n        i18nString(UIStrings.onlyShowCookiesWithAnIssue), i18nString(UIStrings.onlyShowCookiesWhichHaveAn), () => {\n          this.updateWithCookies(this.allCookies);\n        });\n    this.appendToolbarItem(this.onlyIssuesFilterUI);\n\n    this.refreshThrottler = new Common.Throttler.Throttler(300);\n    this.eventDescriptors = [];\n\n    this.allCookies = [];\n    this.shownCookies = [];\n    this.selectedCookie = null;\n\n    this.setCookiesDomain(model, cookieDomain);\n  }\n\n  setCookiesDomain(model: SDK.CookieModel.CookieModel, domain: string): void {\n    this.model = model;\n    this.cookieDomain = domain;\n    this.refreshItems();\n    Common.EventTarget.removeEventListeners(this.eventDescriptors);\n    const networkManager = model.target().model(SDK.NetworkManager.NetworkManager);\n    if (networkManager) {\n      this.eventDescriptors = [\n        networkManager.addEventListener(SDK.NetworkManager.Events.ResponseReceived, this.onResponseReceived, this),\n        networkManager.addEventListener(SDK.NetworkManager.Events.LoadingFinished, this.onLoadingFinished, this),\n      ];\n    }\n  }\n\n  private showPreview(cookie: SDK.Cookie.Cookie|null): void {\n    if (cookie === this.selectedCookie) {\n      return;\n    }\n    this.selectedCookie = cookie;\n\n    if (!cookie) {\n      this.previewWidget.detach();\n      this.emptyWidget.show(this.previewPanel.contentElement);\n    } else {\n      this.emptyWidget.detach();\n      this.previewWidget.setCookie(cookie);\n      this.previewWidget.show(this.previewPanel.contentElement);\n    }\n  }\n\n  private handleCookieSelected(): void {\n    const cookie = this.cookiesTable.selectedCookie();\n    this.setCanDeleteSelected(Boolean(cookie));\n\n    this.showPreview(cookie);\n  }\n\n  private async saveCookie(newCookie: SDK.Cookie.Cookie, oldCookie: SDK.Cookie.Cookie|null): Promise<boolean> {\n    if (oldCookie && newCookie.key() !== oldCookie.key()) {\n      await this.model.deleteCookie(oldCookie);\n    }\n    return this.model.saveCookie(newCookie);\n  }\n\n  private deleteCookie(cookie: SDK.Cookie.Cookie, callback: () => void): void {\n    void this.model.deleteCookie(cookie).then(callback);\n  }\n\n  private updateWithCookies(allCookies: SDK.Cookie.Cookie[]): void {\n    this.allCookies = allCookies;\n    this.totalSize = allCookies.reduce((size, cookie) => size + cookie.size(), 0);\n\n    const parsedURL = Common.ParsedURL.ParsedURL.fromString(this.cookieDomain);\n    const host = parsedURL ? parsedURL.host : '';\n    this.cookiesTable.setCookieDomain(host);\n\n    this.shownCookies = this.filter(allCookies, cookie => `${cookie.name()} ${cookie.value()} ${cookie.domain()}`);\n    if (this.hasFilter()) {\n      this.setDeleteAllTitle(i18nString(UIStrings.clearFilteredCookies));\n      this.setDeleteAllGlyph('largeicon-delete-filter');\n    } else {\n      this.setDeleteAllTitle(i18nString(UIStrings.clearAllCookies));\n      this.setDeleteAllGlyph('largeicon-delete-list');\n    }\n    this.cookiesTable.setCookies(this.shownCookies, this.model.getCookieToBlockedReasonsMap());\n    UI.ARIAUtils.alert(i18nString(UIStrings.numberOfCookiesShownInTableS, {PH1: this.shownCookies.length}));\n    this.setCanFilter(true);\n    this.setCanDeleteAll(this.shownCookies.length > 0);\n    this.setCanDeleteSelected(Boolean(this.cookiesTable.selectedCookie()));\n\n    if (!this.cookiesTable.selectedCookie()) {\n      this.showPreview(null);\n    }\n  }\n\n  filter<T>(items: T[], keyFunction: (arg0: T) => string): T[] {\n    const predicate = (object: T|null): boolean => {\n      if (!this.onlyIssuesFilterUI.checked()) {\n        return true;\n      }\n      if (object instanceof SDK.Cookie.Cookie) {\n        return IssuesManager.RelatedIssue.hasIssues(object);\n      }\n      return false;\n    };\n    return super.filter(items, keyFunction).filter(predicate);\n  }\n\n  /**\n   * This will only delete the currently visible cookies.\n   */\n  deleteAllItems(): void {\n    this.showPreview(null);\n    void this.model.deleteCookies(this.shownCookies).then(() => this.refreshItems());\n  }\n\n  deleteSelectedItem(): void {\n    const selectedCookie = this.cookiesTable.selectedCookie();\n    if (selectedCookie) {\n      this.showPreview(null);\n      void this.model.deleteCookie(selectedCookie).then(() => this.refreshItems());\n    }\n  }\n\n  refreshItems(): void {\n    void this.model.getCookiesForDomain(this.cookieDomain).then(this.updateWithCookies.bind(this));\n  }\n\n  refreshItemsThrottled(): void {\n    void this.refreshThrottler.schedule(() => Promise.resolve(this.refreshItems()));\n  }\n\n  private onResponseReceived(): void {\n    this.refreshItemsThrottled();\n  }\n\n  private onLoadingFinished(): void {\n    this.refreshItemsThrottled();\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([cookieItemsViewStyles]);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
