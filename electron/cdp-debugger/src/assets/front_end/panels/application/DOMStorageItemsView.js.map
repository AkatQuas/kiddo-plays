{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/application/DOMStorageItemsView.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2008 Nokia Inc.  All rights reserved.\n * Copyright (C) 2013 Samsung Electronics. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SourceFrame from '../../ui/legacy/components/source_frame/source_frame.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {DOMStorage} from './DOMStorageModel.js';\nimport {StorageItemsView} from './StorageItemsView.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in DOMStorage Items View of the Application panel\n  */\n  domStorage: 'DOM Storage',\n  /**\n  *@description Text in DOMStorage Items View of the Application panel\n  */\n  key: 'Key',\n  /**\n  *@description Text for the value of something\n  */\n  value: 'Value',\n  /**\n  *@description Name for the \"DOM Storage Items\" table that shows the content of the DOM Storage.\n  */\n  domStorageItems: 'DOM Storage Items',\n  /**\n   *@description Text for announcing that the \"DOM Storage Items\" table was cleared, that is, all\n   * entries were deleted.\n   */\n  domStorageItemsCleared: 'DOM Storage Items cleared',\n  /**\n  *@description Text in DOMStorage Items View of the Application panel\n  */\n  selectAValueToPreview: 'Select a value to preview',\n  /**\n   *@description Text for announcing a DOM Storage key/value item has been deleted\n   */\n  domStorageItemDeleted: 'The storage item was deleted.',\n  /**\n   *@description Text for announcing number of entries after filtering\n   *@example {5} PH1\n   */\n  domStorageNumberEntries: 'Number of entries shown in table: {PH1}',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/DOMStorageItemsView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class DOMStorageItemsView extends StorageItemsView {\n  private domStorage: DOMStorage;\n  private dataGrid: DataGrid.DataGrid.DataGridImpl<unknown>;\n  private readonly splitWidget: UI.SplitWidget.SplitWidget;\n  private readonly previewPanel: UI.Widget.VBox;\n  private preview: UI.Widget.Widget|null;\n  private previewValue: string|null;\n  private eventListeners: Common.EventTarget.EventDescriptor[];\n\n  constructor(domStorage: DOMStorage) {\n    super(i18nString(UIStrings.domStorage), 'domStoragePanel');\n\n    this.domStorage = domStorage;\n\n    this.element.classList.add('storage-view', 'table');\n\n    const columns = ([\n      {id: 'key', title: i18nString(UIStrings.key), sortable: false, editable: true, longText: true, weight: 50},\n      {id: 'value', title: i18nString(UIStrings.value), sortable: false, editable: true, longText: true, weight: 50},\n    ] as DataGrid.DataGrid.ColumnDescriptor[]);\n    this.dataGrid = new DataGrid.DataGrid.DataGridImpl({\n      displayName: i18nString(UIStrings.domStorageItems),\n      columns,\n      editCallback: this.editingCallback.bind(this),\n      deleteCallback: this.deleteCallback.bind(this),\n      refreshCallback: this.refreshItems.bind(this),\n    });\n    this.dataGrid.addEventListener(DataGrid.DataGrid.Events.SelectedNode, event => {\n      void this.previewEntry(event.data);\n    });\n    this.dataGrid.addEventListener(DataGrid.DataGrid.Events.DeselectedNode, () => {\n      void this.previewEntry(null);\n    });\n    this.dataGrid.setStriped(true);\n    this.dataGrid.setName('DOMStorageItemsView');\n\n    this.splitWidget = new UI.SplitWidget.SplitWidget(\n        /* isVertical: */ false, /* secondIsSidebar: */ true, 'domStorageSplitViewState');\n    this.splitWidget.show(this.element);\n\n    this.previewPanel = new UI.Widget.VBox();\n    this.previewPanel.setMinimumSize(0, 50);\n    const resizer = this.previewPanel.element.createChild('div', 'preview-panel-resizer');\n    const dataGridWidget = this.dataGrid.asWidget();\n    dataGridWidget.setMinimumSize(0, 50);\n    this.splitWidget.setMainWidget(dataGridWidget);\n    this.splitWidget.setSidebarWidget(this.previewPanel);\n    this.splitWidget.installResizer(resizer);\n\n    this.preview = null;\n    this.previewValue = null;\n\n    this.showPreview(null, null);\n\n    this.eventListeners = [];\n    this.setStorage(domStorage);\n  }\n\n  setStorage(domStorage: DOMStorage): void {\n    Common.EventTarget.removeEventListeners(this.eventListeners);\n    this.domStorage = domStorage;\n    this.eventListeners = [\n      this.domStorage.addEventListener(DOMStorage.Events.DOMStorageItemsCleared, this.domStorageItemsCleared, this),\n      this.domStorage.addEventListener(DOMStorage.Events.DOMStorageItemRemoved, this.domStorageItemRemoved, this),\n      this.domStorage.addEventListener(DOMStorage.Events.DOMStorageItemAdded, this.domStorageItemAdded, this),\n      this.domStorage.addEventListener(DOMStorage.Events.DOMStorageItemUpdated, this.domStorageItemUpdated, this),\n    ];\n    this.refreshItems();\n  }\n\n  private domStorageItemsCleared(): void {\n    if (!this.isShowing() || !this.dataGrid) {\n      return;\n    }\n\n    this.dataGrid.rootNode().removeChildren();\n    this.dataGrid.addCreationNode(false);\n    UI.ARIAUtils.alert(i18nString(UIStrings.domStorageItemsCleared));\n    this.setCanDeleteSelected(false);\n  }\n\n  private domStorageItemRemoved(event: Common.EventTarget.EventTargetEvent<DOMStorage.DOMStorageItemRemovedEvent>):\n      void {\n    if (!this.isShowing() || !this.dataGrid) {\n      return;\n    }\n\n    const storageData = event.data;\n    const rootNode = this.dataGrid.rootNode();\n    const children = rootNode.children;\n\n    for (let i = 0; i < children.length; ++i) {\n      const childNode = children[i];\n      if (childNode.data.key === storageData.key) {\n        rootNode.removeChild(childNode);\n        this.setCanDeleteSelected(children.length > 1);\n        return;\n      }\n    }\n  }\n\n  private domStorageItemAdded(event: Common.EventTarget.EventTargetEvent<DOMStorage.DOMStorageItemAddedEvent>): void {\n    if (!this.isShowing() || !this.dataGrid) {\n      return;\n    }\n\n    const storageData = event.data;\n    const rootNode = this.dataGrid.rootNode();\n    const children = rootNode.children;\n\n    for (let i = 0; i < children.length; ++i) {\n      if (children[i].data.key === storageData.key) {\n        return;\n      }\n    }\n\n    const childNode = new DataGrid.DataGrid.DataGridNode({key: storageData.key, value: storageData.value}, false);\n    rootNode.insertChild(childNode, children.length - 1);\n  }\n\n  private domStorageItemUpdated(event: Common.EventTarget.EventTargetEvent<DOMStorage.DOMStorageItemUpdatedEvent>):\n      void {\n    if (!this.isShowing() || !this.dataGrid) {\n      return;\n    }\n\n    const storageData = event.data;\n    const childNode = this.dataGrid.rootNode().children.find(\n        (child: DataGrid.DataGrid.DataGridNode<unknown>) => child.data.key === storageData.key);\n    if (!childNode || childNode.data.value === storageData.value) {\n      return;\n    }\n\n    childNode.data.value = storageData.value;\n    childNode.refresh();\n    if (!childNode.selected) {\n      return;\n    }\n    void this.previewEntry(childNode);\n    this.setCanDeleteSelected(true);\n  }\n\n  private showDOMStorageItems(items: string[][]): void {\n    const rootNode = this.dataGrid.rootNode();\n    let selectedKey: null = null;\n    for (const node of rootNode.children) {\n      if (!node.selected) {\n        continue;\n      }\n      selectedKey = node.data.key;\n      break;\n    }\n    rootNode.removeChildren();\n    let selectedNode: DataGrid.DataGrid.DataGridNode<unknown>|null = null;\n    const filteredItems = (item: string[]): string => `${item[0]} ${item[1]}`;\n    const filteredList = this.filter(items, filteredItems);\n    for (const item of filteredList) {\n      const key = item[0];\n      const value = item[1];\n      const node = new DataGrid.DataGrid.DataGridNode({key: key, value: value}, false);\n      node.selectable = true;\n      rootNode.appendChild(node);\n      if (!selectedNode || key === selectedKey) {\n        selectedNode = node;\n      }\n    }\n    if (selectedNode) {\n      selectedNode.selected = true;\n    }\n    this.dataGrid.addCreationNode(false);\n    this.setCanDeleteSelected(Boolean(selectedNode));\n    UI.ARIAUtils.alert(i18nString(UIStrings.domStorageNumberEntries, {PH1: filteredList.length}));\n  }\n\n  deleteSelectedItem(): void {\n    if (!this.dataGrid || !this.dataGrid.selectedNode) {\n      return;\n    }\n\n    this.deleteCallback(this.dataGrid.selectedNode);\n  }\n\n  refreshItems(): void {\n    void this.domStorage.getItems().then(items => items && this.showDOMStorageItems(items));\n  }\n\n  deleteAllItems(): void {\n    this.domStorage.clear();\n    // explicitly clear the view because the event won't be fired when it has no items\n    this.domStorageItemsCleared();\n  }\n\n  private editingCallback(\n      editingNode: DataGrid.DataGrid.DataGridNode<unknown>, columnIdentifier: string, oldText: string,\n      newText: string): void {\n    const domStorage = this.domStorage;\n    if (columnIdentifier === 'key') {\n      if (typeof oldText === 'string') {\n        domStorage.removeItem(oldText);\n      }\n      domStorage.setItem(newText, editingNode.data.value || '');\n      this.removeDupes(editingNode);\n    } else {\n      domStorage.setItem(editingNode.data.key || '', newText);\n    }\n  }\n\n  private removeDupes(masterNode: DataGrid.DataGrid.DataGridNode<unknown>): void {\n    const rootNode = this.dataGrid.rootNode();\n    const children = rootNode.children;\n    for (let i = children.length - 1; i >= 0; --i) {\n      const childNode = children[i];\n      if ((childNode.data.key === masterNode.data.key) && (masterNode !== childNode)) {\n        rootNode.removeChild(childNode);\n      }\n    }\n  }\n\n  private deleteCallback(node: DataGrid.DataGrid.DataGridNode<unknown>): void {\n    if (!node || node.isCreationNode) {\n      return;\n    }\n\n    if (this.domStorage) {\n      this.domStorage.removeItem(node.data.key);\n    }\n\n    UI.ARIAUtils.alert(i18nString(UIStrings.domStorageItemDeleted));\n  }\n\n  private showPreview(preview: UI.Widget.Widget|null, value: string|null): void {\n    if (this.preview && this.previewValue === value) {\n      return;\n    }\n    if (this.preview) {\n      this.preview.detach();\n    }\n    if (!preview) {\n      preview = new UI.EmptyWidget.EmptyWidget(i18nString(UIStrings.selectAValueToPreview));\n    }\n    this.previewValue = value;\n    this.preview = preview;\n    preview.show(this.previewPanel.contentElement);\n  }\n\n  private async previewEntry(entry: DataGrid.DataGrid.DataGridNode<unknown>|null): Promise<void> {\n    const value = entry && entry.data && entry.data.value;\n    if (entry && entry.data && entry.data.value) {\n      const protocol = this.domStorage.isLocalStorage ? 'localstorage' : 'sessionstorage';\n      const url = `${protocol}://${entry.key}` as Platform.DevToolsPath.UrlString;\n      const provider = TextUtils.StaticContentProvider.StaticContentProvider.fromString(\n          url, Common.ResourceType.resourceTypes.XHR, (value as string));\n      const preview = await SourceFrame.PreviewFactory.PreviewFactory.createPreview(provider, 'text/plain');\n      // Selection could've changed while the preview was loaded\n      if (entry.selected) {\n        this.showPreview(preview, value);\n      }\n    } else {\n      this.showPreview(null, value);\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
