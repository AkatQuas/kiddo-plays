{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/application/BackgroundServiceView.ts"],
  "sourcesContent": ["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\n// eslint-disable-next-line rulesdir/es_modules_import\nimport emptyWidgetStyles from '../../ui/legacy/emptyWidget.css.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport backgroundServiceViewStyles from './backgroundServiceView.css.js';\n\nimport type {BackgroundServiceModel} from './BackgroundServiceModel.js';\nimport {Events} from './BackgroundServiceModel.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Background Service View of the Application panel\n  */\n  backgroundFetch: 'Background Fetch',\n  /**\n  *@description Text in Background Service View of the Application panel\n  */\n  backgroundSync: 'Background Sync',\n  /**\n  *@description Text in Background Service View of the Application panel\n  */\n  pushMessaging: 'Push Messaging',\n  /**\n  *@description Text in Background Service View of the Application panel\n  */\n  notifications: 'Notifications',\n  /**\n  *@description Text in Background Service View of the Application panel\n  */\n  paymentHandler: 'Payment Handler',\n  /**\n  *@description Text in the Periodic Background Service View of the Application panel\n  */\n  periodicBackgroundSync: 'Periodic Background Sync',\n  /**\n  *@description Text to clear content\n  */\n  clear: 'Clear',\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon download button in the Background Service View of the Application panel\n  */\n  saveEvents: 'Save events',\n  /**\n  *@description Text in Background Service View of the Application panel\n  */\n  showEventsFromOtherDomains: 'Show events from other domains',\n  /**\n  *@description Title of an action under the Background Services category that can be invoked through the Command Menu\n  */\n  stopRecordingEvents: 'Stop recording events',\n  /**\n  *@description Title of an action under the Background Services category that can be invoked through the Command Menu\n  */\n  startRecordingEvents: 'Start recording events',\n  /**\n  *@description Text for timestamps of items\n  */\n  timestamp: 'Timestamp',\n  /**\n  *@description Text that refers to some events\n  */\n  event: 'Event',\n  /**\n  *@description Text for the origin of something\n  */\n  origin: 'Origin',\n  /**\n  *@description Text in Background Service View of the Application panel. The Scope is a URL associated with the Service Worker, which limits which pages/sites the Service Worker operates on.\n  */\n  swScope: 'Service Worker Scope',\n  /**\n  *@description Text in Background Service View of the Application panel\n  */\n  instanceId: 'Instance ID',\n  /**\n  *@description Text in Application Panel Sidebar of the Application panel\n  */\n  backgroundServices: 'Background Services',\n  /**\n  *@description Text that is usually a hyperlink to more documentation\n  */\n  learnMore: 'Learn more',\n  /**\n  *@description Text in Background Service View of the Application panel\n  */\n  selectAnEntryToViewMetadata: 'Select an entry to view metadata',\n  /**\n  *@description Text in Background Service View of the Application panel\n  *@example {Background Fetch} PH1\n  */\n  recordingSActivity: 'Recording {PH1} activity...',\n  /**\n  *@description Inform users that DevTools are recording/waiting for events in the Periodic Background Sync tool of the Application panel\n  *@example {Background Fetch} PH1\n  */\n  devtoolsWillRecordAllSActivity: 'DevTools will record all {PH1} activity for up to 3 days, even when closed.',\n  /**\n  *@description Text in Background Service View of the Application panel\n  *@example {record} PH1\n  *@example {Ctrl + R} PH2\n  */\n  clickTheRecordButtonSOrHitSTo: 'Click the record button {PH1} or hit {PH2} to start recording.',\n  /**\n  *@description Text to show an item is empty\n  */\n  empty: 'empty',\n  /**\n  *@description Text in Background Service View of the Application panel\n  */\n  noMetadataForThisEvent: 'No metadata for this event',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/BackgroundServiceView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class BackgroundServiceView extends UI.Widget.VBox {\n  private readonly serviceName: Protocol.BackgroundService.ServiceName;\n  private readonly model: BackgroundServiceModel;\n  private readonly serviceWorkerManager: SDK.ServiceWorkerManager.ServiceWorkerManager|null;\n  private readonly securityOriginManager: SDK.SecurityOriginManager.SecurityOriginManager;\n  private recordAction: UI.ActionRegistration.Action;\n  private recordButton!: UI.Toolbar.ToolbarToggle;\n  private originCheckbox!: UI.Toolbar.ToolbarCheckbox;\n  private saveButton!: UI.Toolbar.ToolbarButton;\n  private readonly toolbar: UI.Toolbar.Toolbar;\n  private readonly splitWidget: UI.SplitWidget.SplitWidget;\n  private readonly dataGrid: DataGrid.DataGrid.DataGridImpl<EventData>;\n  private readonly previewPanel: UI.Widget.VBox;\n  private selectedEventNode: EventDataNode|null;\n  private preview: UI.Widget.Widget|null;\n\n  static getUIString(serviceName: string): string {\n    switch (serviceName) {\n      case Protocol.BackgroundService.ServiceName.BackgroundFetch:\n        return i18nString(UIStrings.backgroundFetch);\n      case Protocol.BackgroundService.ServiceName.BackgroundSync:\n        return i18nString(UIStrings.backgroundSync);\n      case Protocol.BackgroundService.ServiceName.PushMessaging:\n        return i18nString(UIStrings.pushMessaging);\n      case Protocol.BackgroundService.ServiceName.Notifications:\n        return i18nString(UIStrings.notifications);\n      case Protocol.BackgroundService.ServiceName.PaymentHandler:\n        return i18nString(UIStrings.paymentHandler);\n      case Protocol.BackgroundService.ServiceName.PeriodicBackgroundSync:\n        return i18nString(UIStrings.periodicBackgroundSync);\n      default:\n        return '';\n    }\n  }\n\n  constructor(serviceName: Protocol.BackgroundService.ServiceName, model: BackgroundServiceModel) {\n    super(true);\n\n    this.serviceName = serviceName;\n\n    this.model = model;\n    this.model.addEventListener(Events.RecordingStateChanged, this.onRecordingStateChanged, this);\n    this.model.addEventListener(Events.BackgroundServiceEventReceived, this.onEventReceived, this);\n    this.model.enable(this.serviceName);\n\n    this.serviceWorkerManager = this.model.target().model(SDK.ServiceWorkerManager.ServiceWorkerManager);\n\n    this.securityOriginManager = this.model.target().model(SDK.SecurityOriginManager.SecurityOriginManager) as\n        SDK.SecurityOriginManager.SecurityOriginManager;\n    if (!this.securityOriginManager) {\n      throw new Error('SecurityOriginManager instance is missing');\n    }\n    this.securityOriginManager.addEventListener(\n        SDK.SecurityOriginManager.Events.MainSecurityOriginChanged, () => this.onOriginChanged());\n    this.recordAction =\n        (UI.ActionRegistry.ActionRegistry.instance().action('background-service.toggle-recording') as\n         UI.ActionRegistration.Action);\n\n    this.toolbar = new UI.Toolbar.Toolbar('background-service-toolbar', this.contentElement);\n    void this.setupToolbar();\n\n    /**\n     * This will contain the DataGrid for displaying events, and a panel at the bottom for showing\n     * extra metadata related to the selected event.\n     */\n    this.splitWidget = new UI.SplitWidget.SplitWidget(/* isVertical= */ false, /* secondIsSidebar= */ true);\n    this.splitWidget.show(this.contentElement);\n\n    this.dataGrid = this.createDataGrid();\n\n    this.previewPanel = new UI.Widget.VBox();\n\n    this.selectedEventNode = null;\n\n    this.preview = null;\n\n    this.splitWidget.setMainWidget(this.dataGrid.asWidget());\n    this.splitWidget.setSidebarWidget(this.previewPanel);\n\n    this.showPreview(null);\n  }\n\n  /**\n   * Creates the toolbar UI element.\n   */\n  private async setupToolbar(): Promise<void> {\n    this.recordButton = (UI.Toolbar.Toolbar.createActionButton(this.recordAction) as UI.Toolbar.ToolbarToggle);\n    this.toolbar.appendToolbarItem(this.recordButton);\n\n    const clearButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.clear), 'largeicon-clear');\n    clearButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, () => this.clearEvents());\n    this.toolbar.appendToolbarItem(clearButton);\n\n    this.toolbar.appendSeparator();\n\n    this.saveButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.saveEvents), 'largeicon-download');\n    this.saveButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, _event => {\n      void this.saveToFile();\n    });\n    this.saveButton.setEnabled(false);\n    this.toolbar.appendToolbarItem(this.saveButton);\n\n    this.toolbar.appendSeparator();\n\n    this.originCheckbox = new UI.Toolbar.ToolbarCheckbox(\n        i18nString(UIStrings.showEventsFromOtherDomains), i18nString(UIStrings.showEventsFromOtherDomains),\n        () => this.refreshView());\n    this.toolbar.appendToolbarItem(this.originCheckbox);\n  }\n\n  /**\n   * Displays all available events in the grid.\n   */\n  private refreshView(): void {\n    this.clearView();\n    const events = this.model.getEvents(this.serviceName).filter(event => this.acceptEvent(event));\n    for (const event of events) {\n      this.addEvent(event);\n    }\n  }\n\n  /**\n   * Clears the grid and panel.\n   */\n  private clearView(): void {\n    this.selectedEventNode = null;\n    this.dataGrid.rootNode().removeChildren();\n    this.saveButton.setEnabled(false);\n    this.showPreview(null);\n  }\n\n  /**\n   * Called when the `Toggle Record` button is clicked.\n   */\n  toggleRecording(): void {\n    this.model.setRecording(!this.recordButton.toggled(), this.serviceName);\n  }\n\n  /**\n   * Called when the `Clear` button is clicked.\n   */\n  private clearEvents(): void {\n    this.model.clearEvents(this.serviceName);\n    this.clearView();\n  }\n\n  private onRecordingStateChanged({data: state}: Common.EventTarget.EventTargetEvent<RecordingState>): void {\n    if (state.serviceName !== this.serviceName) {\n      return;\n    }\n\n    if (state.isRecording === this.recordButton.toggled()) {\n      return;\n    }\n\n    this.recordButton.setToggled(state.isRecording);\n    this.updateRecordButtonTooltip();\n    this.showPreview(this.selectedEventNode);\n  }\n\n  private updateRecordButtonTooltip(): void {\n    const buttonTooltip = this.recordButton.toggled() ? i18nString(UIStrings.stopRecordingEvents) :\n                                                        i18nString(UIStrings.startRecordingEvents);\n    this.recordButton.setTitle(buttonTooltip, 'background-service.toggle-recording');\n  }\n\n  private onEventReceived({\n    data: serviceEvent,\n  }: Common.EventTarget.EventTargetEvent<Protocol.BackgroundService.BackgroundServiceEvent>): void {\n    if (!this.acceptEvent(serviceEvent)) {\n      return;\n    }\n    this.addEvent(serviceEvent);\n  }\n\n  private onOriginChanged(): void {\n    // No need to refresh the view if we are already showing all events.\n    if (this.originCheckbox.checked()) {\n      return;\n    }\n    this.refreshView();\n  }\n\n  private addEvent(serviceEvent: Protocol.BackgroundService.BackgroundServiceEvent): void {\n    const data = this.createEventData(serviceEvent);\n    const dataNode = new EventDataNode(data, serviceEvent.eventMetadata);\n    this.dataGrid.rootNode().appendChild(dataNode);\n\n    if (this.dataGrid.rootNode().children.length === 1) {\n      this.saveButton.setEnabled(true);\n      this.showPreview(this.selectedEventNode);\n    }\n  }\n\n  private createDataGrid(): DataGrid.DataGrid.DataGridImpl<EventData> {\n    const columns = ([\n      {id: 'id', title: '#', weight: 1},\n      {id: 'timestamp', title: i18nString(UIStrings.timestamp), weight: 8},\n      {id: 'eventName', title: i18nString(UIStrings.event), weight: 10},\n      {id: 'origin', title: i18nString(UIStrings.origin), weight: 10},\n      {id: 'swScope', title: i18nString(UIStrings.swScope), weight: 5},\n      {id: 'instanceId', title: i18nString(UIStrings.instanceId), weight: 10},\n    ] as DataGrid.DataGrid.ColumnDescriptor[]);\n    const dataGrid = new DataGrid.DataGrid.DataGridImpl({\n      displayName: i18nString(UIStrings.backgroundServices),\n      columns,\n      editCallback: undefined,\n      refreshCallback: undefined,\n      deleteCallback: undefined,\n    });\n    dataGrid.setStriped(true);\n\n    dataGrid.addEventListener(\n        DataGrid.DataGrid.Events.SelectedNode, event => this.showPreview((event.data as EventDataNode)));\n\n    return dataGrid;\n  }\n\n  /**\n   * Creates the data object to pass to the DataGrid Node.\n   */\n  private createEventData(serviceEvent: Protocol.BackgroundService.BackgroundServiceEvent): EventData {\n    let swScope = '';\n\n    // Try to get the scope of the Service Worker registration to be more user-friendly.\n    const registration = this.serviceWorkerManager ?\n        this.serviceWorkerManager.registrations().get(serviceEvent.serviceWorkerRegistrationId) :\n        undefined;\n    if (registration) {\n      swScope = registration.scopeURL.substr(registration.securityOrigin.length);\n    }\n\n    return {\n      id: this.dataGrid.rootNode().children.length + 1,\n      timestamp: UI.UIUtils.formatTimestamp(serviceEvent.timestamp * 1000, /* full= */ true),\n      origin: serviceEvent.origin,\n      swScope,\n      eventName: serviceEvent.eventName,\n      instanceId: serviceEvent.instanceId,\n    };\n  }\n\n  /**\n   * Filtration function to know whether event should be shown or not.\n   */\n  private acceptEvent(event: Protocol.BackgroundService.BackgroundServiceEvent): boolean {\n    if (event.service !== this.serviceName) {\n      return false;\n    }\n\n    if (this.originCheckbox.checked()) {\n      return true;\n    }\n\n    // Trim the trailing '/'.\n    const origin = event.origin.substr(0, event.origin.length - 1);\n\n    return this.securityOriginManager.securityOrigins().includes(origin);\n  }\n\n  private createLearnMoreLink(): Element {\n    let url = 'https://developer.chrome.com/docs/devtools/javascript/background-services/?utm_source=devtools';\n\n    switch (this.serviceName) {\n      case Protocol.BackgroundService.ServiceName.BackgroundFetch:\n        url += '#fetch';\n        break;\n      case Protocol.BackgroundService.ServiceName.BackgroundSync:\n        url += '#sync';\n        break;\n      case Protocol.BackgroundService.ServiceName.PushMessaging:\n        url += '#push';\n        break;\n      case Protocol.BackgroundService.ServiceName.Notifications:\n        url += '#notifications';\n        break;\n      default:\n        break;\n    }\n\n    return UI.XLink.XLink.create(url, i18nString(UIStrings.learnMore));\n  }\n\n  private showPreview(dataNode: EventDataNode|null): void {\n    if (this.selectedEventNode && this.selectedEventNode === dataNode) {\n      return;\n    }\n\n    this.selectedEventNode = dataNode;\n\n    if (this.preview) {\n      this.preview.detach();\n    }\n\n    if (this.selectedEventNode) {\n      this.preview = this.selectedEventNode.createPreview();\n      this.preview.show(this.previewPanel.contentElement);\n      return;\n    }\n\n    this.preview = new UI.Widget.VBox();\n    this.preview.contentElement.classList.add('background-service-preview', 'fill');\n    const centered = this.preview.contentElement.createChild('div');\n\n    if (this.dataGrid.rootNode().children.length) {\n      // Inform users that grid entries are clickable.\n      centered.createChild('p').textContent = i18nString(UIStrings.selectAnEntryToViewMetadata);\n    } else if (this.recordButton.toggled()) {\n      // Inform users that we are recording/waiting for events.\n      const featureName = BackgroundServiceView.getUIString(this.serviceName);\n      centered.createChild('p').textContent = i18nString(UIStrings.recordingSActivity, {PH1: featureName});\n      centered.createChild('p').textContent = i18nString(UIStrings.devtoolsWillRecordAllSActivity, {PH1: featureName});\n    } else {\n      const landingRecordButton = UI.Toolbar.Toolbar.createActionButton(this.recordAction);\n\n      const recordKey = document.createElement('b');\n      recordKey.classList.add('background-service-shortcut');\n      recordKey.textContent = UI.ShortcutRegistry.ShortcutRegistry.instance()\n                                  .shortcutsForAction('background-service.toggle-recording')[0]\n                                  .title();\n\n      const inlineButton = UI.UIUtils.createInlineButton(landingRecordButton);\n      inlineButton.classList.add('background-service-record-inline-button');\n      centered.createChild('p').appendChild(i18n.i18n.getFormatLocalizedString(\n          str_, UIStrings.clickTheRecordButtonSOrHitSTo, {PH1: inlineButton, PH2: recordKey}));\n\n      centered.appendChild(this.createLearnMoreLink());\n    }\n\n    this.preview.show(this.previewPanel.contentElement);\n  }\n\n  /**\n   * Saves all currently displayed events in a file (JSON format).\n   */\n  private async saveToFile(): Promise<void> {\n    const fileName = `${this.serviceName}-${Platform.DateUtilities.toISO8601Compact(new Date())}.json` as\n        Platform.DevToolsPath.RawPathString;\n    const stream = new Bindings.FileUtils.FileOutputStream();\n\n    const accepted = await stream.open(fileName);\n    if (!accepted) {\n      return;\n    }\n\n    const events = this.model.getEvents(this.serviceName).filter(event => this.acceptEvent(event));\n    await stream.write(JSON.stringify(events, undefined, 2));\n    void stream.close();\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([emptyWidgetStyles, backgroundServiceViewStyles]);\n  }\n}\n\nexport class EventDataNode extends DataGrid.DataGrid.DataGridNode<EventData> {\n  private readonly eventMetadata: Protocol.BackgroundService.EventMetadata[];\n\n  constructor(data: EventData, eventMetadata: Protocol.BackgroundService.EventMetadata[]) {\n    super(data);\n\n    this.eventMetadata = eventMetadata.sort((m1, m2) => Platform.StringUtilities.compare(m1.key, m2.key));\n  }\n\n  createPreview(): UI.Widget.VBox {\n    const preview = new UI.Widget.VBox();\n    preview.element.classList.add('background-service-metadata');\n\n    for (const entry of this.eventMetadata) {\n      const div = document.createElement('div');\n      div.classList.add('background-service-metadata-entry');\n      div.createChild('div', 'background-service-metadata-name').textContent = entry.key + ': ';\n      if (entry.value) {\n        div.createChild('div', 'background-service-metadata-value source-code').textContent = entry.value;\n      } else {\n        div.createChild('div', 'background-service-metadata-value background-service-empty-value').textContent =\n            i18nString(UIStrings.empty);\n      }\n      preview.element.appendChild(div);\n    }\n\n    if (!preview.element.children.length) {\n      const div = document.createElement('div');\n      div.classList.add('background-service-metadata-entry');\n      div.createChild('div', 'background-service-metadata-name background-service-empty-value').textContent =\n          i18nString(UIStrings.noMetadataForThisEvent);\n      preview.element.appendChild(div);\n    }\n\n    return preview;\n  }\n}\n\nlet actionDelegateInstance: ActionDelegate;\n\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ActionDelegate {\n    const {forceNew} = opts;\n    if (!actionDelegateInstance || forceNew) {\n      actionDelegateInstance = new ActionDelegate();\n    }\n\n    return actionDelegateInstance;\n  }\n\n  handleAction(context: UI.Context.Context, actionId: string): boolean {\n    const view = context.flavor(BackgroundServiceView);\n    switch (actionId) {\n      case 'background-service.toggle-recording': {\n        if (!view) {\n          throw new Error('BackgroundServiceView instance is missing');\n        }\n        view.toggleRecording();\n        return true;\n      }\n    }\n    return false;\n  }\n}\nexport interface RecordingState {\n  isRecording: boolean;\n  serviceName: Protocol.BackgroundService.ServiceName;\n}\nexport interface EventData {\n  id: number;\n  timestamp: string;\n  origin: string;\n  swScope: string;\n  eventName: string;\n  instanceId: string;\n}\n"],
  "mappings": "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",
  "names": []
}
