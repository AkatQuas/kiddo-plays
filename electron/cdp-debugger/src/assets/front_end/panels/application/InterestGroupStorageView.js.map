{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/application/InterestGroupStorageView.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport type * as DataGrid from '../../ui/components/data_grid/data_grid.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as SourceFrame from '../../ui/legacy/components/source_frame/source_frame.js';\nimport * as ApplicationComponents from './components/components.js';\n\nimport interestGroupStorageViewStyles from './interestGroupStorageView.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Placeholder text instructing the user how to display interest group\n  *details.\n  */\n  clickToDisplayBody: 'Click on any interest group event to display the group\\'s current state',\n  /**\n  *@description Placeholder text telling the user no details are available for\n  *the selected interest group.\n  */\n  noDataAvailable: 'No details available for the selected interest group. The browser may have left the group.',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/InterestGroupStorageView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ninterface InterestGroupDetailsGetter {\n  getInterestGroupDetails: (owner: string, name: string) => Promise<Protocol.Storage.InterestGroupDetails|null>;\n}\n\nfunction eventEquals(\n    a: Protocol.Storage.InterestGroupAccessedEvent, b: Protocol.Storage.InterestGroupAccessedEvent): boolean {\n  return (a.accessTime === b.accessTime && a.type === b.type && a.ownerOrigin === b.ownerOrigin && a.name === b.name);\n}\n\nexport class InterestGroupStorageView extends UI.SplitWidget.SplitWidget {\n  private readonly interestGroupGrid = new ApplicationComponents.InterestGroupAccessGrid.InterestGroupAccessGrid();\n  private events: Protocol.Storage.InterestGroupAccessedEvent[] = [];\n  private detailsGetter: InterestGroupDetailsGetter;\n  private noDataView: UI.Widget.VBox;\n  private noDisplayView: UI.Widget.VBox;\n\n  constructor(detailsGetter: InterestGroupDetailsGetter) {\n    super(/* isVertical */ false, /* secondIsSidebar: */ true);\n    this.detailsGetter = detailsGetter;\n\n    const topPanel = new UI.Widget.VBox();\n    this.noDisplayView = new UI.Widget.VBox();\n    this.noDataView = new UI.Widget.VBox();\n\n    topPanel.setMinimumSize(0, 80);\n    this.setMainWidget(topPanel);\n    this.noDisplayView.setMinimumSize(0, 40);\n    this.setSidebarWidget(this.noDisplayView);\n    this.noDataView.setMinimumSize(0, 40);\n\n    topPanel.contentElement.appendChild(this.interestGroupGrid);\n    this.interestGroupGrid.addEventListener('cellfocused', this.onFocus.bind(this));\n\n    this.noDisplayView.contentElement.classList.add('placeholder');\n    const noDisplayDiv = this.noDisplayView.contentElement.createChild('div');\n    noDisplayDiv.textContent = i18nString(UIStrings.clickToDisplayBody);\n\n    this.noDataView.contentElement.classList.add('placeholder');\n    const noDataDiv = this.noDataView.contentElement.createChild('div');\n    noDataDiv.textContent = i18nString(UIStrings.noDataAvailable);\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    const sbw = this.sidebarWidget();\n    if (sbw) {\n      sbw.registerCSSFiles([interestGroupStorageViewStyles]);\n    }\n  }\n\n  addEvent(event: Protocol.Storage.InterestGroupAccessedEvent): void {\n    // Only add if not already present.\n    const foundEvent = this.events.find(t => eventEquals(t, event));\n    if (!foundEvent) {\n      this.events.push(event);\n      this.interestGroupGrid.data = this.events;\n    }\n  }\n\n  clearEvents(): void {\n    this.events = [];\n    this.interestGroupGrid.data = this.events;\n    this.setSidebarWidget(this.noDisplayView);\n  }\n\n  private async onFocus(event: Event): Promise<void> {\n    const focusedEvent = event as DataGrid.DataGridEvents.BodyCellFocusedEvent;\n    const row = focusedEvent.data.row;\n    if (!row) {\n      return;\n    }\n\n    const ownerOrigin = row.cells.find(cell => cell.columnId === 'event-group-owner')?.value as string;\n    const name = row.cells.find(cell => cell.columnId === 'event-group-name')?.value as string;\n    if (!ownerOrigin || !name) {\n      return;\n    }\n\n    const details = await this.detailsGetter.getInterestGroupDetails(ownerOrigin, name);\n    if (details) {\n      const jsonView = await SourceFrame.JSONView.JSONView.createView(JSON.stringify(details));\n      jsonView?.setMinimumSize(0, 40);\n      if (jsonView) {\n        this.setSidebarWidget(jsonView);\n      }\n    } else {\n      this.setSidebarWidget(this.noDataView);\n    }\n  }\n\n  getEventsForTesting(): Array<Protocol.Storage.InterestGroupAccessedEvent> {\n    return this.events;\n  }\n\n  getInterestGroupGridForTesting(): ApplicationComponents.InterestGroupAccessGrid.InterestGroupAccessGrid {\n    return this.interestGroupGrid;\n  }\n}\n"],
  "mappings": "AAIA;AACA;AAGA;AACA;AAEA;AAEA,MAAM,YAAY;AAAA,EAKhB,oBAAoB;AAAA,EAKpB,iBAAiB;AAAA;AAEnB,MAAM,OAAO,KAAK,KAAK,kBAAkB,kDAAkD;AAC3F,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAMhE,qBACI,GAAgD,GAAyD;AAC3G,SAAQ,EAAE,eAAe,EAAE,cAAc,EAAE,SAAS,EAAE,QAAQ,EAAE,gBAAgB,EAAE,eAAe,EAAE,SAAS,EAAE;AAAA;AAGzG,8CAAuC,GAAG,YAAY,YAAY;AAAA,EACtD,oBAAoB,IAAI,sBAAsB,wBAAwB;AAAA,EAC/E,SAAwD;AAAA,EACxD;AAAA,EACA;AAAA,EACA;AAAA,EAER,YAAY,eAA2C;AACrD,UAAuB,OAA8B;AACrD,SAAK,gBAAgB;AAErB,UAAM,WAAW,IAAI,GAAG,OAAO;AAC/B,SAAK,gBAAgB,IAAI,GAAG,OAAO;AACnC,SAAK,aAAa,IAAI,GAAG,OAAO;AAEhC,aAAS,eAAe,GAAG;AAC3B,SAAK,cAAc;AACnB,SAAK,cAAc,eAAe,GAAG;AACrC,SAAK,iBAAiB,KAAK;AAC3B,SAAK,WAAW,eAAe,GAAG;AAElC,aAAS,eAAe,YAAY,KAAK;AACzC,SAAK,kBAAkB,iBAAiB,eAAe,KAAK,QAAQ,KAAK;AAEzE,SAAK,cAAc,eAAe,UAAU,IAAI;AAChD,UAAM,eAAe,KAAK,cAAc,eAAe,YAAY;AACnE,iBAAa,cAAc,WAAW,UAAU;AAEhD,SAAK,WAAW,eAAe,UAAU,IAAI;AAC7C,UAAM,YAAY,KAAK,WAAW,eAAe,YAAY;AAC7D,cAAU,cAAc,WAAW,UAAU;AAAA;AAAA,EAG/C,WAAiB;AACf,UAAM;AACN,UAAM,MAAM,KAAK;AACjB,QAAI,KAAK;AACP,UAAI,iBAAiB,CAAC;AAAA;AAAA;AAAA,EAI1B,SAAS,OAA0D;AAEjE,UAAM,aAAa,KAAK,OAAO,KAAK,OAAK,YAAY,GAAG;AACxD,QAAI,CAAC,YAAY;AACf,WAAK,OAAO,KAAK;AACjB,WAAK,kBAAkB,OAAO,KAAK;AAAA;AAAA;AAAA,EAIvC,cAAoB;AAClB,SAAK,SAAS;AACd,SAAK,kBAAkB,OAAO,KAAK;AACnC,SAAK,iBAAiB,KAAK;AAAA;AAAA,QAGf,QAAQ,OAA6B;AACjD,UAAM,eAAe;AACrB,UAAM,MAAM,aAAa,KAAK;AAC9B,QAAI,CAAC,KAAK;AACR;AAAA;AAGF,UAAM,cAAc,IAAI,MAAM,KAAK,UAAQ,KAAK,aAAa,sBAAsB;AACnF,UAAM,OAAO,IAAI,MAAM,KAAK,UAAQ,KAAK,aAAa,qBAAqB;AAC3E,QAAI,CAAC,eAAe,CAAC,MAAM;AACzB;AAAA;AAGF,UAAM,UAAU,MAAM,KAAK,cAAc,wBAAwB,aAAa;AAC9E,QAAI,SAAS;AACX,YAAM,WAAW,MAAM,YAAY,SAAS,SAAS,WAAW,KAAK,UAAU;AAC/E,gBAAU,eAAe,GAAG;AAC5B,UAAI,UAAU;AACZ,aAAK,iBAAiB;AAAA;AAAA,WAEnB;AACL,WAAK,iBAAiB,KAAK;AAAA;AAAA;AAAA,EAI/B,sBAA0E;AACxE,WAAO,KAAK;AAAA;AAAA,EAGd,iCAAwG;AACtG,WAAO,KAAK;AAAA;AAAA;",
  "names": []
}
