{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/application/TrustTokensTreeElement.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {ApplicationPanelTreeElement} from './ApplicationPanelTreeElement.js';\nimport * as ApplicationComponents from './components/components.js';\nimport type {ResourcesPanel} from './ResourcesPanel.js';\nimport * as Host from '../../core/host/host.js';\n\nconst UIStrings = {\n  /**\n  *@description Hover text for an info icon in the Trust Token panel\n  */\n  trustTokens: 'Trust Tokens',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/TrustTokensTreeElement.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n/** Fetch the Trust Token data regularly from the backend while the panel is open */\nconst REFRESH_INTERVAL_MS = 1000;\n\nexport class TrustTokensTreeElement extends ApplicationPanelTreeElement {\n  private view?: TrustTokensViewWidgetWrapper;\n\n  constructor(storagePanel: ResourcesPanel) {\n    super(storagePanel, i18nString(UIStrings.trustTokens), false);\n    const icon = UI.Icon.Icon.create('mediumicon-database', 'resource-tree-item');\n    this.setLeadingIcons([icon]);\n  }\n\n  get itemURL(): Platform.DevToolsPath.UrlString {\n    return 'trustTokens://' as Platform.DevToolsPath.UrlString;\n  }\n\n  onselect(selectedByUser?: boolean): boolean {\n    super.onselect(selectedByUser);\n    if (!this.view) {\n      this.view = new TrustTokensViewWidgetWrapper();\n    }\n    this.showView(this.view);\n    Host.userMetrics.panelShown(Host.UserMetrics.PanelCodes[Host.UserMetrics.PanelCodes.trust_tokens]);\n    return false;\n  }\n}\n\nexport class TrustTokensViewWidgetWrapper extends UI.ThrottledWidget.ThrottledWidget {\n  private readonly trustTokensView = new ApplicationComponents.TrustTokensView.TrustTokensView();\n\n  constructor() {\n    super(/* isWebComponent */ false, REFRESH_INTERVAL_MS);\n    this.contentElement.appendChild(this.trustTokensView);\n    this.update();\n  }\n\n  protected async doUpdate(): Promise<void> {\n    const mainTarget = SDK.TargetManager.TargetManager.instance().mainTarget();\n    if (!mainTarget) {\n      return;\n    }\n    const {tokens} = await mainTarget.storageAgent().invoke_getTrustTokens();\n    this.trustTokensView.data = {\n      tokens,\n      deleteClickHandler: (issuer: string): void => {\n        void mainTarget.storageAgent().invoke_clearTrustTokens({issuerOrigin: issuer});\n      },\n    };\n\n    this.update();\n  }\n}\n"],
  "mappings": "AAIA;AAEA;AACA;AAEA;AACA;AAEA;AAEA,MAAM,YAAY;AAAA,EAIhB,aAAa;AAAA;AAEf,MAAM,OAAO,KAAK,KAAK,kBAAkB,gDAAgD;AAClF,aAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAGvE,MAAM,sBAAsB;AAErB,4CAAqC,4BAA4B;AAAA,EAC9D;AAAA,EAER,YAAY,cAA8B;AACxC,UAAM,cAAc,WAAW,UAAU,cAAc;AACvD,UAAM,OAAO,GAAG,KAAK,KAAK,OAAO,uBAAuB;AACxD,SAAK,gBAAgB,CAAC;AAAA;AAAA,MAGpB,UAA2C;AAC7C,WAAO;AAAA;AAAA,EAGT,SAAS,gBAAmC;AAC1C,UAAM,SAAS;AACf,QAAI,CAAC,KAAK,MAAM;AACd,WAAK,OAAO,IAAI;AAAA;AAElB,SAAK,SAAS,KAAK;AACnB,SAAK,YAAY,WAAW,KAAK,YAAY,WAAW,KAAK,YAAY,WAAW;AACpF,WAAO;AAAA;AAAA;AAIJ,kDAA2C,GAAG,gBAAgB,gBAAgB;AAAA,EAClE,kBAAkB,IAAI,sBAAsB,gBAAgB;AAAA,EAE7E,cAAc;AACZ,UAA2B,OAAO;AAClC,SAAK,eAAe,YAAY,KAAK;AACrC,SAAK;AAAA;AAAA,QAGS,WAA0B;AACxC,UAAM,aAAa,IAAI,cAAc,cAAc,WAAW;AAC9D,QAAI,CAAC,YAAY;AACf;AAAA;AAEF,UAAM,EAAC,WAAU,MAAM,WAAW,eAAe;AACjD,SAAK,gBAAgB,OAAO;AAAA,MAC1B;AAAA,MACA,oBAAoB,CAAC,WAAyB;AAC5C,aAAK,WAAW,eAAe,wBAAwB,EAAC,cAAc;AAAA;AAAA;AAI1E,SAAK;AAAA;AAAA;",
  "names": []
}
