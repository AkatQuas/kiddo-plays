{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/application/DOMStorageModel.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2008 Nokia Inc.  All rights reserved.\n * Copyright (C) 2013 Samsung Electronics. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\n\nexport class DOMStorage extends Common.ObjectWrapper.ObjectWrapper<DOMStorage.EventTypes> {\n  private readonly model: DOMStorageModel;\n  private readonly securityOriginInternal: string|null;\n  private readonly storageKeyInternal: string|null;\n  private readonly isLocalStorageInternal: boolean;\n\n  constructor(model: DOMStorageModel, securityOrigin: string, storageKey: string, isLocalStorage: boolean) {\n    super();\n    this.model = model;\n    this.securityOriginInternal = securityOrigin;\n    this.storageKeyInternal = storageKey;\n    this.isLocalStorageInternal = isLocalStorage;\n  }\n\n  static storageId(securityOrigin: string, isLocalStorage: boolean): Protocol.DOMStorage.StorageId {\n    return {securityOrigin: securityOrigin, isLocalStorage: isLocalStorage};\n  }\n\n  static storageIdWithSecurityOrigin(securityOrigin: string, isLocalStorage: boolean): Protocol.DOMStorage.StorageId {\n    return {securityOrigin: securityOrigin, isLocalStorage: isLocalStorage};\n  }\n\n  static storageIdWithStorageKey(storageKey: string, isLocalStorage: boolean): Protocol.DOMStorage.StorageId {\n    return {storageKey: storageKey, isLocalStorage: isLocalStorage};\n  }\n\n  get idWithSecurityOrigin(): Protocol.DOMStorage.StorageId {\n    let securityOrigin = '';\n    if (this.securityOriginInternal) {\n      securityOrigin = this.securityOriginInternal;\n    }\n    return DOMStorage.storageIdWithSecurityOrigin(securityOrigin, this.isLocalStorageInternal);\n  }\n\n  get idWithStorageKey(): Protocol.DOMStorage.StorageId {\n    let storageKey = '';\n    if (this.storageKeyInternal) {\n      storageKey = this.storageKeyInternal;\n    }\n    return DOMStorage.storageIdWithStorageKey(storageKey, this.isLocalStorageInternal);\n  }\n\n  get id(): Protocol.DOMStorage.StorageId {\n    // TODO(crbug.com/1313434) Prioritize storageKey once everything is ready\n    if (this.securityOriginInternal) {\n      return this.idWithSecurityOrigin;\n    }\n    return this.idWithStorageKey;\n  }\n\n  get securityOrigin(): string|null {\n    return this.securityOriginInternal;\n  }\n\n  get storageKey(): string|null {\n    return this.storageKeyInternal;\n  }\n\n  get isLocalStorage(): boolean {\n    return this.isLocalStorageInternal;\n  }\n\n  getItems(): Promise<Protocol.DOMStorage.Item[]|null> {\n    return this.model.agent.invoke_getDOMStorageItems({storageId: this.id}).then(({entries}) => entries);\n  }\n\n  setItem(key: string, value: string): void {\n    void this.model.agent.invoke_setDOMStorageItem({storageId: this.id, key, value});\n  }\n\n  removeItem(key: string): void {\n    void this.model.agent.invoke_removeDOMStorageItem({storageId: this.id, key});\n  }\n\n  clear(): void {\n    void this.model.agent.invoke_clear({storageId: this.id});\n  }\n}\n\nexport namespace DOMStorage {\n  // TODO(crbug.com/1167717): Make this a const enum again\n  // eslint-disable-next-line rulesdir/const_enum\n  export enum Events {\n    DOMStorageItemsCleared = 'DOMStorageItemsCleared',\n    DOMStorageItemRemoved = 'DOMStorageItemRemoved',\n    DOMStorageItemAdded = 'DOMStorageItemAdded',\n    DOMStorageItemUpdated = 'DOMStorageItemUpdated',\n  }\n\n  export interface DOMStorageItemRemovedEvent {\n    key: string;\n  }\n\n  export interface DOMStorageItemAddedEvent {\n    key: string;\n    value: string;\n  }\n\n  export interface DOMStorageItemUpdatedEvent {\n    key: string;\n    oldValue: string;\n    value: string;\n  }\n\n  export type EventTypes = {\n    [Events.DOMStorageItemsCleared]: void,\n    [Events.DOMStorageItemRemoved]: DOMStorageItemRemovedEvent,\n    [Events.DOMStorageItemAdded]: DOMStorageItemAddedEvent,\n    [Events.DOMStorageItemUpdated]: DOMStorageItemUpdatedEvent,\n  };\n}\n\nexport class DOMStorageModel extends SDK.SDKModel.SDKModel<EventTypes> {\n  private readonly securityOriginManager: SDK.SecurityOriginManager.SecurityOriginManager|null;\n  private readonly storageKeyManagerInternal: SDK.StorageKeyManager.StorageKeyManager|null;\n  private storagesInternal: {\n    [x: string]: DOMStorage,\n  };\n  readonly agent: ProtocolProxyApi.DOMStorageApi;\n  private enabled?: boolean;\n\n  constructor(target: SDK.Target.Target) {\n    super(target);\n\n    this.securityOriginManager = target.model(SDK.SecurityOriginManager.SecurityOriginManager);\n    this.storageKeyManagerInternal = target.model(SDK.StorageKeyManager.StorageKeyManager);\n    this.storagesInternal = {};\n    this.agent = target.domstorageAgent();\n  }\n\n  get storageKeyManagerForTest(): SDK.StorageKeyManager.StorageKeyManager|null {\n    return this.storageKeyManagerInternal;\n  }\n\n  enable(): void {\n    if (this.enabled) {\n      return;\n    }\n\n    this.target().registerDOMStorageDispatcher(new DOMStorageDispatcher(this));\n    if (this.securityOriginManager) {\n      this.securityOriginManager.addEventListener(\n          SDK.SecurityOriginManager.Events.SecurityOriginAdded, this.securityOriginAdded, this);\n      this.securityOriginManager.addEventListener(\n          SDK.SecurityOriginManager.Events.SecurityOriginRemoved, this.securityOriginRemoved, this);\n\n      for (const securityOrigin of this.securityOriginManager.securityOrigins()) {\n        this.addOrigin(securityOrigin);\n      }\n    }\n    if (this.storageKeyManagerInternal) {\n      this.storageKeyManagerInternal.addEventListener(\n          SDK.StorageKeyManager.Events.StorageKeyAdded, this.storageKeyAdded, this);\n      this.storageKeyManagerInternal.addEventListener(\n          SDK.StorageKeyManager.Events.StorageKeyRemoved, this.storageKeyRemoved, this);\n\n      for (const storageKey of this.storageKeyManagerInternal.storageKeys()) {\n        this.addStorageKey(storageKey);\n      }\n    }\n    void this.agent.invoke_enable();\n\n    this.enabled = true;\n  }\n\n  clearForOrigin(origin: string): void {\n    if (!this.enabled) {\n      return;\n    }\n    for (const isLocal of [true, false]) {\n      const key = this.keyForSecurityOrigin(origin, isLocal);\n      const storage = this.storagesInternal[key];\n      if (!storage) {\n        return;\n      }\n      storage.clear();\n    }\n    this.removeOrigin(origin);\n    this.addOrigin(origin);\n  }\n\n  clearForStorageKey(storageKey: string): void {\n    if (!this.enabled) {\n      return;\n    }\n    for (const isLocal of [true, false]) {\n      const key = this.keyForStorageKey(storageKey, isLocal);\n      const storage = this.storagesInternal[key];\n      if (!storage) {\n        return;\n      }\n      storage.clear();\n    }\n    this.removeStorageKey(storageKey);\n    this.addStorageKey(storageKey);\n  }\n\n  private securityOriginAdded(event: Common.EventTarget.EventTargetEvent<string>): void {\n    this.addOrigin(event.data);\n  }\n\n  private storageKeyAdded(event: Common.EventTarget.EventTargetEvent<string>): void {\n    this.addStorageKey(event.data);\n  }\n\n  private addOrigin(securityOrigin: string): void {\n    const parsed = new Common.ParsedURL.ParsedURL(securityOrigin);\n    // These are \"opaque\" origins which are not supposed to support DOM storage.\n    if (!parsed.isValid || parsed.scheme === 'data' || parsed.scheme === 'about' || parsed.scheme === 'javascript') {\n      return;\n    }\n\n    for (const isLocal of [true, false]) {\n      const key = this.keyForSecurityOrigin(securityOrigin, isLocal);\n      console.assert(!this.storagesInternal[key]);\n      if (this.duplicateExists(key)) {\n        continue;\n      }\n      const storage = new DOMStorage(this, securityOrigin, '', isLocal);\n      this.storagesInternal[key] = storage;\n      this.dispatchEventToListeners(Events.DOMStorageAdded, storage);\n    }\n  }\n\n  private addStorageKey(storageKey: string): void {\n    for (const isLocal of [true, false]) {\n      const key = this.keyForStorageKey(storageKey, isLocal);\n      console.assert(!this.storagesInternal[key]);\n      if (this.duplicateExists(key)) {\n        continue;\n      }\n      const storage = new DOMStorage(this, '', storageKey, isLocal);\n      this.storagesInternal[key] = storage;\n      this.dispatchEventToListeners(Events.DOMStorageAdded, storage);\n    }\n  }\n\n  private duplicateExists(key: string): boolean {\n    const parsedKey = JSON.parse(key);\n    for (const storageInternal in this.storagesInternal) {\n      const parsedStorageInternalKey = JSON.parse(storageInternal);\n      if (parsedKey.isLocalStorage === parsedStorageInternalKey.isLocalStorage) {\n        if (parsedKey.storageKey?.slice(0, -1) === parsedStorageInternalKey.securityOrigin ||\n            parsedKey.securityOrigin === parsedStorageInternalKey.storageKey?.slice(0, -1)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  private securityOriginRemoved(event: Common.EventTarget.EventTargetEvent<string>): void {\n    this.removeOrigin(event.data);\n  }\n\n  private storageKeyRemoved(event: Common.EventTarget.EventTargetEvent<string>): void {\n    this.removeStorageKey(event.data);\n  }\n\n  private removeOrigin(securityOrigin: string): void {\n    for (const isLocal of [true, false]) {\n      const key = this.keyForSecurityOrigin(securityOrigin, isLocal);\n      const storage = this.storagesInternal[key];\n      if (!storage) {\n        continue;\n      }\n      delete this.storagesInternal[key];\n      this.dispatchEventToListeners(Events.DOMStorageRemoved, storage);\n    }\n  }\n\n  private removeStorageKey(storageKey: string): void {\n    for (const isLocal of [true, false]) {\n      const key = this.keyForStorageKey(storageKey, isLocal);\n      const storage = this.storagesInternal[key];\n      if (!storage) {\n        continue;\n      }\n      delete this.storagesInternal[key];\n      this.dispatchEventToListeners(Events.DOMStorageRemoved, storage);\n    }\n  }\n\n  private storageKey(securityOrigin: string|undefined, storageKey: string|undefined, isLocalStorage: boolean): string {\n    // TODO(crbug.com/1313434) Prioritize storageKey once everything is ready\n    console.assert(Boolean(securityOrigin) || Boolean(storageKey));\n    if (securityOrigin) {\n      return JSON.stringify(DOMStorage.storageIdWithSecurityOrigin(securityOrigin, isLocalStorage));\n    }\n    if (storageKey) {\n      return JSON.stringify(DOMStorage.storageIdWithStorageKey(storageKey, isLocalStorage));\n    }\n    throw new Error('Either securityOrigin or storageKey is required');\n  }\n\n  private keyForSecurityOrigin(securityOrigin: string, isLocalStorage: boolean): string {\n    return this.storageKey(securityOrigin, '', isLocalStorage);\n  }\n\n  private keyForStorageKey(storageKey: string, isLocalStorage: boolean): string {\n    return this.storageKey('', storageKey, isLocalStorage);\n  }\n\n  domStorageItemsCleared(storageId: Protocol.DOMStorage.StorageId): void {\n    const domStorage = this.storageForId(storageId);\n    if (!domStorage) {\n      return;\n    }\n\n    domStorage.dispatchEventToListeners(DOMStorage.Events.DOMStorageItemsCleared);\n  }\n\n  domStorageItemRemoved(storageId: Protocol.DOMStorage.StorageId, key: string): void {\n    const domStorage = this.storageForId(storageId);\n    if (!domStorage) {\n      return;\n    }\n\n    const eventData = {key: key};\n    domStorage.dispatchEventToListeners(DOMStorage.Events.DOMStorageItemRemoved, eventData);\n  }\n\n  domStorageItemAdded(storageId: Protocol.DOMStorage.StorageId, key: string, value: string): void {\n    const domStorage = this.storageForId(storageId);\n    if (!domStorage) {\n      return;\n    }\n\n    const eventData = {key: key, value: value};\n    domStorage.dispatchEventToListeners(DOMStorage.Events.DOMStorageItemAdded, eventData);\n  }\n\n  domStorageItemUpdated(storageId: Protocol.DOMStorage.StorageId, key: string, oldValue: string, value: string): void {\n    const domStorage = this.storageForId(storageId);\n    if (!domStorage) {\n      return;\n    }\n\n    const eventData = {key: key, oldValue: oldValue, value: value};\n    domStorage.dispatchEventToListeners(DOMStorage.Events.DOMStorageItemUpdated, eventData);\n  }\n\n  storageForId(storageId: Protocol.DOMStorage.StorageId): DOMStorage {\n    return this\n        .storagesInternal[this.storageKey(storageId.securityOrigin, storageId.storageKey, storageId.isLocalStorage)];\n  }\n\n  storages(): DOMStorage[] {\n    const result = [];\n    for (const id in this.storagesInternal) {\n      result.push(this.storagesInternal[id]);\n    }\n    return result;\n  }\n}\n\nSDK.SDKModel.SDKModel.register(DOMStorageModel, {capabilities: SDK.Target.Capability.DOM, autostart: false});\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  DOMStorageAdded = 'DOMStorageAdded',\n  DOMStorageRemoved = 'DOMStorageRemoved',\n}\n\nexport type EventTypes = {\n  [Events.DOMStorageAdded]: DOMStorage,\n  [Events.DOMStorageRemoved]: DOMStorage,\n};\n\nexport class DOMStorageDispatcher implements ProtocolProxyApi.DOMStorageDispatcher {\n  private readonly model: DOMStorageModel;\n  constructor(model: DOMStorageModel) {\n    this.model = model;\n  }\n\n  domStorageItemsCleared({storageId}: Protocol.DOMStorage.DomStorageItemsClearedEvent): void {\n    this.model.domStorageItemsCleared(storageId);\n  }\n\n  domStorageItemRemoved({storageId, key}: Protocol.DOMStorage.DomStorageItemRemovedEvent): void {\n    this.model.domStorageItemRemoved(storageId, key);\n  }\n\n  domStorageItemAdded({storageId, key, newValue}: Protocol.DOMStorage.DomStorageItemAddedEvent): void {\n    this.model.domStorageItemAdded(storageId, key, newValue);\n  }\n\n  domStorageItemUpdated({storageId, key, oldValue, newValue}: Protocol.DOMStorage.DomStorageItemUpdatedEvent): void {\n    this.model.domStorageItemUpdated(storageId, key, oldValue, newValue);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
