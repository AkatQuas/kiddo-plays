{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/application/ServiceWorkersView.ts"],
  "sourcesContent": ["// Copyright (c) 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Logs from '../../models/logs/logs.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport serviceWorkersViewStyles from './serviceWorkersView.css.js';\nimport serviceWorkerUpdateCycleViewStyles from './serviceWorkerUpdateCycleView.css.js';\n\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as MobileThrottling from '../mobile_throttling/mobile_throttling.js';\nimport * as NetworkForward from '../../panels/network/forward/forward.js';\n\nimport {ServiceWorkerUpdateCycleView} from './ServiceWorkerUpdateCycleView.js';\n\nconst UIStrings = {\n  /**\n  *@description Text for linking to other Service Worker registrations\n  */\n  serviceWorkersFromOtherOrigins: 'Service workers from other origins',\n  /**\n  *@description Title of update on reload setting in service workers view of the application panel\n  */\n  updateOnReload: 'Update on reload',\n  /**\n  *@description Tooltip text that appears on the setting when hovering over it in Service Workers View of the Application panel\n  */\n  onPageReloadForceTheService: 'On page reload, force the `service worker` to update, and activate it',\n  /**\n  *@description Title of bypass service worker setting in service workers view of the application panel\n  */\n  bypassForNetwork: 'Bypass for network',\n  /**\n  *@description Tooltip text that appears on the setting when hovering over it in Service Workers View of the Application panel\n  */\n  bypassTheServiceWorkerAndLoad: 'Bypass the `service worker` and load resources from the network',\n  /**\n  *@description Screen reader title for a section of the Service Workers view of the Application panel\n  *@example {https://example.com} PH1\n  */\n  serviceWorkerForS: '`Service worker` for {PH1}',\n  /**\n  *@description Text in Service Workers View of the Application panel\n  */\n  testPushMessageFromDevtools: 'Test push message from DevTools.',\n  /**\n  *@description Button label for service worker network requests\n  */\n  networkRequests: 'Network requests',\n  /**\n   * @description Label for a button in the Service Workers View of the Application panel.\n   * Imperative noun. Clicking the button will refresh the list of service worker registrations.\n   */\n  update: 'Update',\n  /**\n  *@description Text in Service Workers View of the Application panel\n  */\n  unregisterServiceWorker: 'Unregister service worker',\n  /**\n  *@description Text in Service Workers View of the Application panel\n  */\n  unregister: 'Unregister',\n  /**\n  *@description Text for the source of something\n  */\n  source: 'Source',\n  /**\n  *@description Text for the status of something\n  */\n  status: 'Status',\n  /**\n  *@description Text in Service Workers View of the Application panel\n  */\n  clients: 'Clients',\n  /**\n  * @description Text in Service Workers View of the Application panel. Label for a section of the\n  * tool which allows the developer to send a test push message to the service worker.\n  */\n  pushString: 'Push',\n  /**\n  * @description Text in Service Workers View of the Application panel. Placeholder text for where\n  * the user can type in the data they want to push to the service worker i.e. the 'push data'. Noun\n  * phrase.\n  */\n  pushData: 'Push data',\n  /**\n  *@description Text in Service Workers View of the Application panel\n  */\n  syncString: 'Sync',\n  /**\n  *@description Placeholder text for the input box where a user is asked for a test tag to sync. This is used as a compound noun, not as a verb.\n  */\n  syncTag: 'Sync tag',\n  /**\n  *@description Text for button in Service Workers View of the Application panel that dispatches a periodicsync event\n  */\n  periodicSync: 'Periodic Sync',\n  /**\n  *@description Default tag for a periodicsync event in Service Workers View of the Application panel\n  */\n  periodicSyncTag: 'Periodic Sync tag',\n  /**\n  *@description Aria accessible name in Service Workers View of the Application panel\n  *@example {3} PH1\n  */\n  sRegistrationErrors: '{PH1} registration errors',\n  /**\n  * @description Text in Service Workers View of the Application panel. The Date/time that a service\n  * worker version update was received by the webpage.\n  * @example {7/3/2019, 3:38:37 PM} PH1\n  */\n  receivedS: 'Received {PH1}',\n  /**\n  *@description Text in Service Workers View of the Application panel\n  *@example {example.com} PH1\n  */\n  sDeleted: '{PH1} - deleted',\n  /**\n  *@description Text in Service Workers View of the Application panel\n  *@example {1} PH1\n  *@example {stopped} PH2\n  */\n  sActivatedAndIsS: '#{PH1} activated and is {PH2}',\n  /**\n  *@description Text in Service Workers View of the Application panel\n  */\n  stopString: 'stop',\n  /**\n  *@description Text in Service Workers View of the Application panel\n  */\n  inspect: 'inspect',\n  /**\n  *@description Text in Service Workers View of the Application panel\n  */\n  startString: 'start',\n  /**\n  * @description Text in Service Workers View of the Application panel. Service workers have\n  * different versions, which are labelled with numbers e.g. version #2. This text indicates that a\n  * particular version is now redundant (it was replaced by a newer version). # means 'number' here.\n  * @example {2} PH1\n  */\n  sIsRedundant: '#{PH1} is redundant',\n  /**\n  *@description Text in Service Workers View of the Application panel\n  *@example {2} PH1\n  */\n  sWaitingToActivate: '#{PH1} waiting to activate',\n  /**\n  *@description Text in Service Workers View of the Application panel\n  *@example {2} PH1\n  */\n  sTryingToInstall: '#{PH1} trying to install',\n  /**\n  *@description Text in Service Workers Update Timeline. Update is a noun.\n  */\n  updateCycle: 'Update Cycle',\n  /**\n  *@description Text of a DOM element in Service Workers View of the Application panel\n  *@example {example.com} PH1\n  */\n  workerS: 'Worker: {PH1}',\n  /**\n  *@description Link text in Service Workers View of the Application panel. When the link is clicked,\n  * the focus is moved to the service worker's client page.\n  */\n  focus: 'focus',\n  /**\n  *@description Link to view all the Service Workers that have been registered.\n  */\n  seeAllRegistrations: 'See all registrations',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/ServiceWorkersView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet throttleDisabledForDebugging = false;\nexport const setThrottleDisabledForDebugging = (enable: boolean): void => {\n  throttleDisabledForDebugging = enable;\n};\n\nexport class ServiceWorkersView extends UI.Widget.VBox implements\n    SDK.TargetManager.SDKModelObserver<SDK.ServiceWorkerManager.ServiceWorkerManager> {\n  private currentWorkersView: UI.ReportView.ReportView;\n  private readonly toolbar: UI.Toolbar.Toolbar;\n  private readonly sections: Map<SDK.ServiceWorkerManager.ServiceWorkerRegistration, Section>;\n  private manager: SDK.ServiceWorkerManager.ServiceWorkerManager|null;\n  private securityOriginManager: SDK.SecurityOriginManager.SecurityOriginManager|null;\n  private readonly sectionToRegistration:\n      WeakMap<UI.ReportView.Section, SDK.ServiceWorkerManager.ServiceWorkerRegistration>;\n  private readonly eventListeners:\n      Map<SDK.ServiceWorkerManager.ServiceWorkerManager, Common.EventTarget.EventDescriptor[]>;\n\n  constructor() {\n    super(true);\n\n    // TODO(crbug.com/1156978): Replace UI.ReportView.ReportView with ReportView.ts web component.\n    this.currentWorkersView = new UI.ReportView.ReportView(i18n.i18n.lockedString('Service Workers'));\n    this.currentWorkersView.setBodyScrollable(false);\n    this.contentElement.classList.add('service-worker-list');\n    this.currentWorkersView.show(this.contentElement);\n    this.currentWorkersView.element.classList.add('service-workers-this-origin');\n\n    this.toolbar = this.currentWorkersView.createToolbar();\n    this.toolbar.makeWrappable(true /* growVertically */);\n\n    this.sections = new Map();\n\n    this.manager = null;\n    this.securityOriginManager = null;\n\n    this.sectionToRegistration = new WeakMap();\n\n    const othersDiv = this.contentElement.createChild('div', 'service-workers-other-origin');\n    // TODO(crbug.com/1156978): Replace UI.ReportView.ReportView with ReportView.ts web component.\n    const othersView = new UI.ReportView.ReportView();\n    othersView.setHeaderVisible(false);\n    othersView.show(othersDiv);\n    const othersSection = othersView.appendSection(i18nString(UIStrings.serviceWorkersFromOtherOrigins));\n    const othersSectionRow = othersSection.appendRow();\n    const seeOthers =\n        UI.Fragment\n            .html`<a class=\"devtools-link\" role=\"link\" tabindex=\"0\" href=\"chrome://serviceworker-internals\" target=\"_blank\" style=\"display: inline; cursor: pointer;\">${\n                i18nString(UIStrings.seeAllRegistrations)}</a>`;\n    self.onInvokeElement(seeOthers, event => {\n      const mainTarget = SDK.TargetManager.TargetManager.instance().mainTarget();\n      mainTarget && mainTarget.targetAgent().invoke_createTarget({url: 'chrome://serviceworker-internals?devtools'});\n      event.consume(true);\n    });\n    othersSectionRow.appendChild(seeOthers);\n\n    this.toolbar.appendToolbarItem(\n        MobileThrottling.ThrottlingManager.throttlingManager().createOfflineToolbarCheckbox());\n    const updateOnReloadSetting =\n        Common.Settings.Settings.instance().createSetting('serviceWorkerUpdateOnReload', false);\n    updateOnReloadSetting.setTitle(i18nString(UIStrings.updateOnReload));\n    const forceUpdate =\n        new UI.Toolbar.ToolbarSettingCheckbox(updateOnReloadSetting, i18nString(UIStrings.onPageReloadForceTheService));\n    this.toolbar.appendToolbarItem(forceUpdate);\n    const bypassServiceWorkerSetting = Common.Settings.Settings.instance().createSetting('bypassServiceWorker', false);\n    bypassServiceWorkerSetting.setTitle(i18nString(UIStrings.bypassForNetwork));\n    const fallbackToNetwork = new UI.Toolbar.ToolbarSettingCheckbox(\n        bypassServiceWorkerSetting, i18nString(UIStrings.bypassTheServiceWorkerAndLoad));\n    this.toolbar.appendToolbarItem(fallbackToNetwork);\n\n    this.eventListeners = new Map();\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.ServiceWorkerManager.ServiceWorkerManager, this);\n    this.updateListVisibility();\n\n    const drawerChangeHandler = (event: Event): void => {\n      // @ts-ignore: No support for custom event listener\n      const isDrawerOpen = event.detail && event.detail.isDrawerOpen;\n      if (this.manager && !isDrawerOpen) {\n        const {serviceWorkerNetworkRequestsPanelStatus: {isOpen, openedAt}} = this.manager;\n        if (isOpen) {\n          const networkLocation = UI.ViewManager.ViewManager.instance().locationNameForViewId('network');\n          UI.ViewManager.ViewManager.instance().showViewInLocation('network', networkLocation, false);\n          void Common.Revealer.reveal(NetworkForward.UIFilter.UIRequestFilter.filters([]));\n\n          const currentTime = Date.now();\n          const timeDifference = currentTime - openedAt;\n          if (timeDifference < 2000) {\n            Host.userMetrics.actionTaken(Host.UserMetrics.Action.ServiceWorkerNetworkRequestClosedQuickly);\n          }\n\n          this.manager.serviceWorkerNetworkRequestsPanelStatus = {\n            isOpen: false,\n            openedAt: 0,\n          };\n        }\n      }\n    };\n    document.body.addEventListener(UI.InspectorView.Events.DrawerChange, drawerChangeHandler);\n  }\n\n  modelAdded(serviceWorkerManager: SDK.ServiceWorkerManager.ServiceWorkerManager): void {\n    if (this.manager) {\n      return;\n    }\n    this.manager = serviceWorkerManager;\n    this.securityOriginManager =\n        (serviceWorkerManager.target().model(SDK.SecurityOriginManager.SecurityOriginManager) as\n         SDK.SecurityOriginManager.SecurityOriginManager);\n\n    for (const registration of this.manager.registrations().values()) {\n      this.updateRegistration(registration);\n    }\n\n    this.eventListeners.set(serviceWorkerManager, [\n      this.manager.addEventListener(\n          SDK.ServiceWorkerManager.Events.RegistrationUpdated, this.registrationUpdated, this),\n      this.manager.addEventListener(\n          SDK.ServiceWorkerManager.Events.RegistrationDeleted, this.registrationDeleted, this),\n      this.securityOriginManager.addEventListener(\n          SDK.SecurityOriginManager.Events.SecurityOriginAdded, this.updateSectionVisibility, this),\n      this.securityOriginManager.addEventListener(\n          SDK.SecurityOriginManager.Events.SecurityOriginRemoved, this.updateSectionVisibility, this),\n    ]);\n  }\n\n  modelRemoved(serviceWorkerManager: SDK.ServiceWorkerManager.ServiceWorkerManager): void {\n    if (!this.manager || this.manager !== serviceWorkerManager) {\n      return;\n    }\n\n    Common.EventTarget.removeEventListeners(this.eventListeners.get(serviceWorkerManager) || []);\n    this.eventListeners.delete(serviceWorkerManager);\n    this.manager = null;\n    this.securityOriginManager = null;\n  }\n\n  private getTimeStamp(registration: SDK.ServiceWorkerManager.ServiceWorkerRegistration): number {\n    const versions = registration.versionsByMode();\n\n    let timestamp: number|undefined = 0;\n\n    const active = versions.get(SDK.ServiceWorkerManager.ServiceWorkerVersion.Modes.Active);\n    const installing = versions.get(SDK.ServiceWorkerManager.ServiceWorkerVersion.Modes.Installing);\n    const waiting = versions.get(SDK.ServiceWorkerManager.ServiceWorkerVersion.Modes.Waiting);\n    const redundant = versions.get(SDK.ServiceWorkerManager.ServiceWorkerVersion.Modes.Redundant);\n\n    if (active) {\n      timestamp = active.scriptResponseTime;\n    } else if (waiting) {\n      timestamp = waiting.scriptResponseTime;\n    } else if (installing) {\n      timestamp = installing.scriptResponseTime;\n    } else if (redundant) {\n      timestamp = redundant.scriptResponseTime;\n    }\n\n    return timestamp || 0;\n  }\n\n  private updateSectionVisibility(): void {\n    let hasThis = false;\n    const movedSections = [];\n    for (const section of this.sections.values()) {\n      const expectedView = this.getReportViewForOrigin(section.registration.securityOrigin);\n      hasThis = hasThis || expectedView === this.currentWorkersView;\n      if (section.section.parentWidget() !== expectedView) {\n        movedSections.push(section);\n      }\n    }\n\n    for (const section of movedSections) {\n      const registration = section.registration;\n      this.removeRegistrationFromList(registration);\n      this.updateRegistration(registration, true);\n    }\n\n    this.currentWorkersView.sortSections((aSection, bSection) => {\n      const aRegistration = this.sectionToRegistration.get(aSection);\n      const bRegistration = this.sectionToRegistration.get(bSection);\n      const aTimestamp = aRegistration ? this.getTimeStamp(aRegistration) : 0;\n      const bTimestamp = bRegistration ? this.getTimeStamp(bRegistration) : 0;\n      // the newest (largest timestamp value) should be the first\n      return bTimestamp - aTimestamp;\n    });\n\n    for (const section of this.sections.values()) {\n      if (section.section.parentWidget() === this.currentWorkersView ||\n          this.isRegistrationVisible(section.registration)) {\n        section.section.showWidget();\n      } else {\n        section.section.hideWidget();\n      }\n    }\n    this.contentElement.classList.toggle('service-worker-has-current', Boolean(hasThis));\n    this.updateListVisibility();\n  }\n\n  private registrationUpdated(\n      event: Common.EventTarget.EventTargetEvent<SDK.ServiceWorkerManager.ServiceWorkerRegistration>): void {\n    this.updateRegistration(event.data);\n    this.gcRegistrations();\n  }\n\n  private gcRegistrations(): void {\n    if (!this.manager || !this.securityOriginManager) {\n      return;\n    }\n    let hasNonDeletedRegistrations = false;\n    const securityOrigins = new Set<string>(this.securityOriginManager.securityOrigins());\n    for (const registration of this.manager.registrations().values()) {\n      if (!securityOrigins.has(registration.securityOrigin) && !this.isRegistrationVisible(registration)) {\n        continue;\n      }\n      if (!registration.canBeRemoved()) {\n        hasNonDeletedRegistrations = true;\n        break;\n      }\n    }\n\n    if (!hasNonDeletedRegistrations) {\n      return;\n    }\n\n    for (const registration of this.manager.registrations().values()) {\n      const visible = securityOrigins.has(registration.securityOrigin) || this.isRegistrationVisible(registration);\n      if (!visible && registration.canBeRemoved()) {\n        this.removeRegistrationFromList(registration);\n      }\n    }\n  }\n\n  private getReportViewForOrigin(origin: string): UI.ReportView.ReportView|null {\n    if (this.securityOriginManager &&\n        (this.securityOriginManager.securityOrigins().includes(origin) ||\n         this.securityOriginManager.unreachableMainSecurityOrigin() === origin)) {\n      return this.currentWorkersView;\n    }\n    return null;\n  }\n\n  private updateRegistration(registration: SDK.ServiceWorkerManager.ServiceWorkerRegistration, skipUpdate?: boolean):\n      void {\n    let section = this.sections.get(registration);\n    if (!section) {\n      const title = registration.scopeURL;\n      const reportView = this.getReportViewForOrigin(registration.securityOrigin);\n      if (!reportView) {\n        return;\n      }\n      const uiSection = reportView.appendSection(title);\n      uiSection.setUiGroupTitle(i18nString(UIStrings.serviceWorkerForS, {PH1: title}));\n      this.sectionToRegistration.set(uiSection, registration);\n      section = new Section((this.manager as SDK.ServiceWorkerManager.ServiceWorkerManager), uiSection, registration);\n      this.sections.set(registration, section);\n    }\n    if (skipUpdate) {\n      return;\n    }\n    this.updateSectionVisibility();\n    section.scheduleUpdate();\n  }\n\n  private registrationDeleted(\n      event: Common.EventTarget.EventTargetEvent<SDK.ServiceWorkerManager.ServiceWorkerRegistration>): void {\n    this.removeRegistrationFromList(event.data);\n  }\n\n  private removeRegistrationFromList(registration: SDK.ServiceWorkerManager.ServiceWorkerRegistration): void {\n    const section = this.sections.get(registration);\n    if (section) {\n      section.section.detach();\n    }\n    this.sections.delete(registration);\n    this.updateSectionVisibility();\n  }\n\n  private isRegistrationVisible(registration: SDK.ServiceWorkerManager.ServiceWorkerRegistration): boolean {\n    if (!registration.scopeURL) {\n      return true;\n    }\n    return false;\n  }\n\n  private updateListVisibility(): void {\n    this.contentElement.classList.toggle('service-worker-list-empty', this.sections.size === 0);\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([\n      serviceWorkersViewStyles,\n    ]);\n  }\n}\n\nexport class Section {\n  private manager: SDK.ServiceWorkerManager.ServiceWorkerManager;\n  section: UI.ReportView.Section;\n  registration: SDK.ServiceWorkerManager.ServiceWorkerRegistration;\n  private fingerprint: symbol|null;\n  private readonly pushNotificationDataSetting: Common.Settings.Setting<string>;\n  private readonly syncTagNameSetting: Common.Settings.Setting<string>;\n  private readonly periodicSyncTagNameSetting: Common.Settings.Setting<string>;\n  private readonly toolbar: UI.Toolbar.Toolbar;\n  private readonly updateCycleView: ServiceWorkerUpdateCycleView;\n  private readonly networkRequests: UI.Toolbar.ToolbarButton;\n  private readonly updateButton: UI.Toolbar.ToolbarButton;\n  private readonly deleteButton: UI.Toolbar.ToolbarButton;\n  private sourceField: Element;\n  private readonly statusField: Element;\n  private readonly clientsField: Element;\n  private readonly linkifier: Components.Linkifier.Linkifier;\n  private readonly clientInfoCache: Map<string, Protocol.Target.TargetInfo>;\n  private readonly throttler: Common.Throttler.Throttler;\n  private updateCycleField?: Element;\n\n  constructor(\n      manager: SDK.ServiceWorkerManager.ServiceWorkerManager, section: UI.ReportView.Section,\n      registration: SDK.ServiceWorkerManager.ServiceWorkerRegistration) {\n    this.manager = manager;\n    this.section = section;\n    this.registration = registration;\n    this.fingerprint = null;\n    this.pushNotificationDataSetting = Common.Settings.Settings.instance().createLocalSetting(\n        'pushData', i18nString(UIStrings.testPushMessageFromDevtools));\n    this.syncTagNameSetting =\n        Common.Settings.Settings.instance().createLocalSetting('syncTagName', 'test-tag-from-devtools');\n    this.periodicSyncTagNameSetting =\n        Common.Settings.Settings.instance().createLocalSetting('periodicSyncTagName', 'test-tag-from-devtools');\n\n    this.toolbar = section.createToolbar();\n    this.toolbar.renderAsLinks();\n\n    this.updateCycleView = new ServiceWorkerUpdateCycleView(registration);\n    this.networkRequests = new UI.Toolbar.ToolbarButton(\n        i18nString(UIStrings.networkRequests), undefined, i18nString(UIStrings.networkRequests));\n    this.networkRequests.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.networkRequestsClicked, this);\n    this.toolbar.appendToolbarItem(this.networkRequests);\n    this.updateButton =\n        new UI.Toolbar.ToolbarButton(i18nString(UIStrings.update), undefined, i18nString(UIStrings.update));\n    this.updateButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.updateButtonClicked, this);\n    this.toolbar.appendToolbarItem(this.updateButton);\n    this.deleteButton = new UI.Toolbar.ToolbarButton(\n        i18nString(UIStrings.unregisterServiceWorker), undefined, i18nString(UIStrings.unregister));\n    this.deleteButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.unregisterButtonClicked, this);\n    this.toolbar.appendToolbarItem(this.deleteButton);\n\n    // Preserve the order.\n    this.sourceField = this.wrapWidget(this.section.appendField(i18nString(UIStrings.source)));\n    this.statusField = this.wrapWidget(this.section.appendField(i18nString(UIStrings.status)));\n    this.clientsField = this.wrapWidget(this.section.appendField(i18nString(UIStrings.clients)));\n    this.createSyncNotificationField(\n        i18nString(UIStrings.pushString), this.pushNotificationDataSetting.get(), i18nString(UIStrings.pushData),\n        this.push.bind(this));\n    this.createSyncNotificationField(\n        i18nString(UIStrings.syncString), this.syncTagNameSetting.get(), i18nString(UIStrings.syncTag),\n        this.sync.bind(this));\n    this.createSyncNotificationField(\n        i18nString(UIStrings.periodicSync), this.periodicSyncTagNameSetting.get(),\n        i18nString(UIStrings.periodicSyncTag), tag => this.periodicSync(tag));\n    this.createUpdateCycleField();\n\n    this.linkifier = new Components.Linkifier.Linkifier();\n    this.clientInfoCache = new Map();\n    this.throttler = new Common.Throttler.Throttler(500);\n  }\n\n  private createSyncNotificationField(\n      label: string, initialValue: string, placeholder: string, callback: (arg0: string) => void): void {\n    const form =\n        this.wrapWidget(this.section.appendField(label)).createChild('form', 'service-worker-editor-with-button');\n    const editor = UI.UIUtils.createInput('source-code service-worker-notification-editor');\n    form.appendChild(editor);\n    const button = UI.UIUtils.createTextButton(label);\n    button.type = 'submit';\n    form.appendChild(button);\n\n    editor.value = initialValue;\n    editor.placeholder = placeholder;\n    UI.ARIAUtils.setAccessibleName(editor, label);\n\n    form.addEventListener('submit', (e: Event) => {\n      callback(editor.value || '');\n      e.consume(true);\n    });\n  }\n\n  scheduleUpdate(): void {\n    if (throttleDisabledForDebugging) {\n      void this.update();\n      return;\n    }\n    void this.throttler.schedule(this.update.bind(this));\n  }\n\n  private targetForVersionId(versionId: string): SDK.Target.Target|null {\n    const version = this.manager.findVersion(versionId);\n    if (!version || !version.targetId) {\n      return null;\n    }\n    return SDK.TargetManager.TargetManager.instance().targetById(version.targetId);\n  }\n\n  private addVersion(versionsStack: Element, icon: string, label: string): Element {\n    const installingEntry = versionsStack.createChild('div', 'service-worker-version');\n    installingEntry.createChild('div', icon);\n    const statusString = installingEntry.createChild('span', 'service-worker-version-string');\n    statusString.textContent = label;\n    UI.ARIAUtils.markAsAlert(statusString);\n    return installingEntry;\n  }\n\n  private updateClientsField(version: SDK.ServiceWorkerManager.ServiceWorkerVersion): void {\n    this.clientsField.removeChildren();\n    this.section.setFieldVisible(i18nString(UIStrings.clients), Boolean(version.controlledClients.length));\n    for (const client of version.controlledClients) {\n      const clientLabelText = this.clientsField.createChild('div', 'service-worker-client');\n      const info = this.clientInfoCache.get(client);\n      if (info) {\n        this.updateClientInfo(clientLabelText, info);\n      }\n      void this.manager.target()\n          .targetAgent()\n          .invoke_getTargetInfo({targetId: client})\n          .then(this.onClientInfo.bind(this, clientLabelText));\n    }\n  }\n\n  private updateSourceField(version: SDK.ServiceWorkerManager.ServiceWorkerVersion): void {\n    this.sourceField.removeChildren();\n    const fileName = Common.ParsedURL.ParsedURL.extractName(version.scriptURL);\n    const name = this.sourceField.createChild('div', 'report-field-value-filename');\n    const link = Components.Linkifier.Linkifier.linkifyURL(\n        version.scriptURL, ({text: fileName} as Components.Linkifier.LinkifyURLOptions));\n    link.tabIndex = 0;\n    name.appendChild(link);\n    if (this.registration.errors.length) {\n      const errorsLabel = UI.UIUtils.createIconLabel(String(this.registration.errors.length), 'smallicon-error');\n      errorsLabel.classList.add('devtools-link', 'link');\n      errorsLabel.tabIndex = 0;\n      UI.ARIAUtils.setAccessibleName(\n          errorsLabel, i18nString(UIStrings.sRegistrationErrors, {PH1: this.registration.errors.length}));\n      self.onInvokeElement(errorsLabel, () => Common.Console.Console.instance().show());\n      name.appendChild(errorsLabel);\n    }\n    if (version.scriptResponseTime !== undefined) {\n      this.sourceField.createChild('div', 'report-field-value-subtitle').textContent =\n          i18nString(UIStrings.receivedS, {PH1: new Date(version.scriptResponseTime * 1000).toLocaleString()});\n    }\n  }\n\n  private update(): Promise<void> {\n    const fingerprint = this.registration.fingerprint();\n    if (fingerprint === this.fingerprint) {\n      return Promise.resolve();\n    }\n    this.fingerprint = fingerprint;\n\n    this.toolbar.setEnabled(!this.registration.isDeleted);\n\n    const versions = this.registration.versionsByMode();\n    const scopeURL = this.registration.scopeURL;\n    const title = this.registration.isDeleted ? i18nString(UIStrings.sDeleted, {PH1: scopeURL}) : scopeURL;\n    this.section.setTitle(title);\n\n    const active = versions.get(SDK.ServiceWorkerManager.ServiceWorkerVersion.Modes.Active);\n    const waiting = versions.get(SDK.ServiceWorkerManager.ServiceWorkerVersion.Modes.Waiting);\n    const installing = versions.get(SDK.ServiceWorkerManager.ServiceWorkerVersion.Modes.Installing);\n    const redundant = versions.get(SDK.ServiceWorkerManager.ServiceWorkerVersion.Modes.Redundant);\n\n    this.statusField.removeChildren();\n    const versionsStack = this.statusField.createChild('div', 'service-worker-version-stack');\n    versionsStack.createChild('div', 'service-worker-version-stack-bar');\n\n    if (active) {\n      this.updateSourceField(active);\n      const localizedRunningStatus =\n          SDK.ServiceWorkerManager.ServiceWorkerVersion.RunningStatus[active.currentState.runningStatus]();\n      // TODO(l10n): Don't concatenate strings here.\n      const activeEntry = this.addVersion(\n          versionsStack, 'service-worker-active-circle',\n          i18nString(UIStrings.sActivatedAndIsS, {PH1: active.id, PH2: localizedRunningStatus}));\n\n      if (active.isRunning() || active.isStarting()) {\n        this.createLink(activeEntry, i18nString(UIStrings.stopString), this.stopButtonClicked.bind(this, active.id));\n        if (!this.targetForVersionId(active.id)) {\n          this.createLink(activeEntry, i18nString(UIStrings.inspect), this.inspectButtonClicked.bind(this, active.id));\n        }\n      } else if (active.isStartable()) {\n        this.createLink(activeEntry, i18nString(UIStrings.startString), this.startButtonClicked.bind(this));\n      }\n      this.updateClientsField(active);\n    } else if (redundant) {\n      this.updateSourceField(redundant);\n      this.addVersion(\n          versionsStack, 'service-worker-redundant-circle', i18nString(UIStrings.sIsRedundant, {PH1: redundant.id}));\n      this.updateClientsField(redundant);\n    }\n\n    if (waiting) {\n      const waitingEntry = this.addVersion(\n          versionsStack, 'service-worker-waiting-circle', i18nString(UIStrings.sWaitingToActivate, {PH1: waiting.id}));\n      this.createLink(waitingEntry, i18n.i18n.lockedString('skipWaiting'), this.skipButtonClicked.bind(this));\n      if (waiting.scriptResponseTime !== undefined) {\n        waitingEntry.createChild('div', 'service-worker-subtitle').textContent =\n            i18nString(UIStrings.receivedS, {PH1: new Date(waiting.scriptResponseTime * 1000).toLocaleString()});\n      }\n      if (!this.targetForVersionId(waiting.id) && (waiting.isRunning() || waiting.isStarting())) {\n        this.createLink(waitingEntry, i18nString(UIStrings.inspect), this.inspectButtonClicked.bind(this, waiting.id));\n      }\n    }\n    if (installing) {\n      const installingEntry = this.addVersion(\n          versionsStack, 'service-worker-installing-circle',\n          i18nString(UIStrings.sTryingToInstall, {PH1: installing.id}));\n      if (installing.scriptResponseTime !== undefined) {\n        installingEntry.createChild('div', 'service-worker-subtitle').textContent = i18nString(UIStrings.receivedS, {\n          PH1: new Date(installing.scriptResponseTime * 1000).toLocaleString(),\n        });\n      }\n      if (!this.targetForVersionId(installing.id) && (installing.isRunning() || installing.isStarting())) {\n        this.createLink(\n            installingEntry, i18nString(UIStrings.inspect), this.inspectButtonClicked.bind(this, installing.id));\n      }\n    }\n\n    this.updateCycleView.refresh();\n\n    return Promise.resolve();\n  }\n\n  private createLink(parent: Element, title: string, listener: () => void, className?: string, useCapture?: boolean):\n      Element {\n    const button = document.createElement('button');\n    if (className) {\n      button.className = className;\n    }\n    button.classList.add('link', 'devtools-link');\n    button.textContent = title;\n    button.tabIndex = 0;\n    button.addEventListener('click', listener, useCapture);\n    parent.appendChild(button);\n    return button;\n  }\n\n  private unregisterButtonClicked(): void {\n    this.manager.deleteRegistration(this.registration.id);\n  }\n\n  private createUpdateCycleField(): void {\n    this.updateCycleField = this.wrapWidget(this.section.appendField(i18nString(UIStrings.updateCycle)));\n    this.updateCycleField.appendChild(this.updateCycleView.tableElement);\n  }\n\n  private updateButtonClicked(): void {\n    void this.manager.updateRegistration(this.registration.id);\n  }\n\n  private networkRequestsClicked(): void {\n    const applicationTabLocation = UI.ViewManager.ViewManager.instance().locationNameForViewId('resources');\n    const networkTabLocation = applicationTabLocation === 'drawer-view' ? 'panel' : 'drawer-view';\n    UI.ViewManager.ViewManager.instance().showViewInLocation('network', networkTabLocation);\n\n    void Common.Revealer.reveal(NetworkForward.UIFilter.UIRequestFilter.filters([\n      {\n        filterType: NetworkForward.UIFilter.FilterType.Is,\n        filterValue: NetworkForward.UIFilter.IsFilterType.ServiceWorkerIntercepted,\n      },\n    ]));\n\n    const requests = Logs.NetworkLog.NetworkLog.instance().requests();\n    let lastRequest: SDK.NetworkRequest.NetworkRequest|null = null;\n    if (Array.isArray(requests)) {\n      for (const request of requests) {\n        if (!lastRequest && request.fetchedViaServiceWorker) {\n          lastRequest = request;\n        }\n        if (request.fetchedViaServiceWorker && lastRequest &&\n            lastRequest.responseReceivedTime < request.responseReceivedTime) {\n          lastRequest = request;\n        }\n      }\n    }\n    if (lastRequest) {\n      const requestLocation = NetworkForward.UIRequestLocation.UIRequestLocation.tab(\n          lastRequest, NetworkForward.UIRequestLocation.UIRequestTabs.Timing, {clearFilter: false});\n      void Common.Revealer.reveal(requestLocation);\n    }\n\n    this.manager.serviceWorkerNetworkRequestsPanelStatus = {\n      isOpen: true,\n      openedAt: Date.now(),\n    };\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.ServiceWorkerNetworkRequestClicked);\n  }\n\n  private push(data: string): void {\n    this.pushNotificationDataSetting.set(data);\n    void this.manager.deliverPushMessage(this.registration.id, data);\n  }\n\n  private sync(tag: string): void {\n    this.syncTagNameSetting.set(tag);\n    void this.manager.dispatchSyncEvent(this.registration.id, tag, true);\n  }\n\n  private periodicSync(tag: string): void {\n    this.periodicSyncTagNameSetting.set(tag);\n    void this.manager.dispatchPeriodicSyncEvent(this.registration.id, tag);\n  }\n\n  private onClientInfo(element: Element, targetInfoResponse: Protocol.Target.GetTargetInfoResponse): void {\n    const targetInfo = targetInfoResponse.targetInfo;\n    if (!targetInfo) {\n      return;\n    }\n    this.clientInfoCache.set(targetInfo.targetId, targetInfo);\n    this.updateClientInfo(element, targetInfo);\n  }\n\n  private updateClientInfo(element: Element, targetInfo: Protocol.Target.TargetInfo): void {\n    if (targetInfo.type !== 'page' && targetInfo.type === 'iframe') {\n      const clientString = element.createChild('span', 'service-worker-client-string');\n      UI.UIUtils.createTextChild(clientString, i18nString(UIStrings.workerS, {PH1: targetInfo.url}));\n      return;\n    }\n    element.removeChildren();\n    const clientString = element.createChild('span', 'service-worker-client-string');\n    UI.UIUtils.createTextChild(clientString, targetInfo.url);\n    this.createLink(\n        element, i18nString(UIStrings.focus), this.activateTarget.bind(this, targetInfo.targetId),\n        'service-worker-client-focus-link');\n  }\n\n  private activateTarget(targetId: Protocol.Target.TargetID): void {\n    void this.manager.target().targetAgent().invoke_activateTarget({targetId});\n  }\n\n  private startButtonClicked(): void {\n    void this.manager.startWorker(this.registration.scopeURL);\n  }\n\n  private skipButtonClicked(): void {\n    void this.manager.skipWaiting(this.registration.scopeURL);\n  }\n\n  private stopButtonClicked(versionId: string): void {\n    void this.manager.stopWorker(versionId);\n  }\n\n  private inspectButtonClicked(versionId: string): void {\n    void this.manager.inspectWorker(versionId);\n  }\n\n  private wrapWidget(container: Element): Element {\n    const shadowRoot = UI.Utils.createShadowRootWithCoreStyles(container, {\n      cssFile: [\n        serviceWorkersViewStyles,\n        /* These styles are for the timing table in serviceWorkerUpdateCycleView but this is the widget that it is rendered\n           * inside so we are registering the files here. */\n        serviceWorkerUpdateCycleViewStyles,\n      ],\n      delegatesFocus: undefined,\n    });\n    const contentElement = document.createElement('div');\n    shadowRoot.appendChild(contentElement);\n    return contentElement;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
