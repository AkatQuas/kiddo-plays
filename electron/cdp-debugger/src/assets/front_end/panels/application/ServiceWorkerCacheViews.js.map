{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/application/ServiceWorkerCacheViews.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport serviceWorkerCacheViewsStyles from './serviceWorkerCacheViews.css.js';\n\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as Network from '../network/network.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Application Panel Sidebar of the Application panel\n  */\n  cache: 'Cache',\n  /**\n  *@description Text to refresh the page\n  */\n  refresh: 'Refresh',\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon delete button in the Service Worker Cache Views of the Application panel\n  */\n  deleteSelected: 'Delete Selected',\n  /**\n  *@description Text in Service Worker Cache Views of the Application panel\n  */\n  filterByPath: 'Filter by Path',\n  /**\n  *@description Text in Service Worker Cache Views of the Application panel\n  */\n  selectACacheEntryAboveToPreview: 'Select a cache entry above to preview',\n  /**\n  *@description Text for the name of something\n  */\n  name: 'Name',\n  /**\n  *@description Text in Service Worker Cache Views of the Application panel\n  */\n  timeCached: 'Time Cached',\n  /**\n  * @description Tooltip text that appears when hovering over the vary header column in the Service Worker Cache Views of the Application panel\n  */\n  varyHeaderWarning: '\u26A0\uFE0F Set ignoreVary to true when matching this entry',\n  /**\n  *@description Text used to show that data was retrieved from ServiceWorker Cache\n  */\n  serviceWorkerCache: '`Service Worker` Cache',\n  /**\n  *@description Span text content in Service Worker Cache Views of the Application panel\n  *@example {2} PH1\n  */\n  matchingEntriesS: 'Matching entries: {PH1}',\n  /**\n  *@description Span text content in Indexed DBViews of the Application panel\n  *@example {2} PH1\n  */\n  totalEntriesS: 'Total entries: {PH1}',\n  /**\n  *@description Text for network request headers\n  */\n  headers: 'Headers',\n  /**\n  *@description Text for previewing items\n  */\n  preview: 'Preview',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/ServiceWorkerCacheViews.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class ServiceWorkerCacheView extends UI.View.SimpleView {\n  private model: SDK.ServiceWorkerCacheModel.ServiceWorkerCacheModel;\n  private entriesForTest: Protocol.CacheStorage.DataEntry[]|null;\n  private readonly splitWidget: UI.SplitWidget.SplitWidget;\n  private readonly previewPanel: UI.Widget.VBox;\n  private preview: UI.Widget.Widget|null;\n  private cache: SDK.ServiceWorkerCacheModel.Cache;\n  private dataGrid: DataGrid.DataGrid.DataGridImpl<DataGridNode>|null;\n  private readonly refreshThrottler: Common.Throttler.Throttler;\n  private readonly refreshButton: UI.Toolbar.ToolbarButton;\n  private readonly deleteSelectedButton: UI.Toolbar.ToolbarButton;\n  private entryPathFilter: string;\n  private returnCount: number|null;\n  private summaryBarElement: Element|null;\n  private loadingPromise: Promise<{\n    entries: Array<Protocol.CacheStorage.DataEntry>,\n    returnCount: number,\n  }>|null;\n  constructor(model: SDK.ServiceWorkerCacheModel.ServiceWorkerCacheModel, cache: SDK.ServiceWorkerCacheModel.Cache) {\n    super(i18nString(UIStrings.cache));\n\n    this.model = model;\n    this.entriesForTest = null;\n\n    this.element.classList.add('service-worker-cache-data-view');\n    this.element.classList.add('storage-view');\n\n    const editorToolbar = new UI.Toolbar.Toolbar('data-view-toolbar', this.element);\n    this.splitWidget = new UI.SplitWidget.SplitWidget(false, false);\n    this.splitWidget.show(this.element);\n\n    this.previewPanel = new UI.Widget.VBox();\n    const resizer = this.previewPanel.element.createChild('div', 'cache-preview-panel-resizer');\n    this.splitWidget.setMainWidget(this.previewPanel);\n    this.splitWidget.installResizer(resizer);\n\n    this.preview = null;\n\n    this.cache = cache;\n    this.dataGrid = null;\n    this.refreshThrottler = new Common.Throttler.Throttler(300);\n    this.refreshButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.refresh), 'largeicon-refresh');\n    this.refreshButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.refreshButtonClicked, this);\n    editorToolbar.appendToolbarItem(this.refreshButton);\n\n    this.deleteSelectedButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.deleteSelected), 'largeicon-delete');\n    this.deleteSelectedButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, _event => {\n      void this.deleteButtonClicked(null);\n    });\n    editorToolbar.appendToolbarItem(this.deleteSelectedButton);\n\n    const entryPathFilterBox = new UI.Toolbar.ToolbarInput(i18nString(UIStrings.filterByPath), '', 1);\n    editorToolbar.appendToolbarItem(entryPathFilterBox);\n    const entryPathFilterThrottler = new Common.Throttler.Throttler(300);\n    this.entryPathFilter = '';\n    entryPathFilterBox.addEventListener(UI.Toolbar.ToolbarInput.Event.TextChanged, () => {\n      void entryPathFilterThrottler.schedule(() => {\n        this.entryPathFilter = entryPathFilterBox.value();\n        return this.updateData(true);\n      });\n    });\n    this.returnCount = (null as number | null);\n    this.summaryBarElement = (null as Element | null);\n    this.loadingPromise = null;\n\n    this.update(cache);\n  }\n\n  private resetDataGrid(): void {\n    if (this.dataGrid) {\n      this.dataGrid.asWidget().detach();\n    }\n    this.dataGrid = this.createDataGrid();\n    const dataGridWidget = this.dataGrid.asWidget();\n    this.splitWidget.setSidebarWidget(dataGridWidget);\n    dataGridWidget.setMinimumSize(0, 250);\n  }\n\n  wasShown(): void {\n    this.model.addEventListener(\n        SDK.ServiceWorkerCacheModel.Events.CacheStorageContentUpdated, this.cacheContentUpdated, this);\n    this.registerCSSFiles([serviceWorkerCacheViewsStyles]);\n    void this.updateData(true);\n  }\n\n  willHide(): void {\n    this.model.removeEventListener(\n        SDK.ServiceWorkerCacheModel.Events.CacheStorageContentUpdated, this.cacheContentUpdated, this);\n  }\n\n  private showPreview(preview: UI.Widget.Widget|null): void {\n    if (preview && this.preview === preview) {\n      return;\n    }\n    if (this.preview) {\n      this.preview.detach();\n    }\n    if (!preview) {\n      preview = new UI.EmptyWidget.EmptyWidget(i18nString(UIStrings.selectACacheEntryAboveToPreview));\n    }\n    this.preview = preview;\n    this.preview.show(this.previewPanel.element);\n  }\n\n  private createDataGrid(): DataGrid.DataGrid.DataGridImpl<DataGridNode> {\n    const columns = ([\n      {id: 'number', title: '#', sortable: false, width: '3px'},\n      {id: 'name', title: i18nString(UIStrings.name), weight: 4, sortable: true},\n      {\n        id: 'responseType',\n        title: i18n.i18n.lockedString('Response-Type'),\n        weight: 1,\n        align: DataGrid.DataGrid.Align.Right,\n        sortable: true,\n      },\n      {id: 'contentType', title: i18n.i18n.lockedString('Content-Type'), weight: 1, sortable: true},\n      {\n        id: 'contentLength',\n        title: i18n.i18n.lockedString('Content-Length'),\n        weight: 1,\n        align: DataGrid.DataGrid.Align.Right,\n        sortable: true,\n      },\n      {\n        id: 'responseTime',\n        title: i18nString(UIStrings.timeCached),\n        width: '12em',\n        weight: 1,\n        align: DataGrid.DataGrid.Align.Right,\n        sortable: true,\n      },\n      {id: 'varyHeader', title: i18n.i18n.lockedString('Vary Header'), weight: 1, sortable: true},\n    ] as DataGrid.DataGrid.ColumnDescriptor[]);\n    const dataGrid = new DataGrid.DataGrid.DataGridImpl({\n      displayName: i18nString(UIStrings.serviceWorkerCache),\n      columns,\n      deleteCallback: this.deleteButtonClicked.bind(this),\n      refreshCallback: this.updateData.bind(this, true),\n      editCallback: undefined,\n    });\n\n    dataGrid.addEventListener(DataGrid.DataGrid.Events.SortingChanged, this.sortingChanged, this);\n\n    dataGrid.addEventListener(DataGrid.DataGrid.Events.SelectedNode, event => {\n      void this.previewCachedResponse(event.data.data as SDK.NetworkRequest.NetworkRequest);\n    }, this);\n    dataGrid.setStriped(true);\n    return dataGrid;\n  }\n\n  private sortingChanged(): void {\n    if (!this.dataGrid) {\n      return;\n    }\n\n    const dataGrid = this.dataGrid;\n\n    const accending = dataGrid.isSortOrderAscending();\n    const columnId = dataGrid.sortColumnId();\n    let comparator: (arg0: DataGridNode, arg1: DataGridNode) => number;\n    if (columnId === 'name') {\n      comparator = (a: DataGridNode, b: DataGridNode): number => a.name.localeCompare(b.name);\n    } else if (columnId === 'contentType') {\n      comparator = (a: DataGridNode, b: DataGridNode): number => a.data.mimeType.localeCompare(b.data.mimeType);\n    } else if (columnId === 'contentLength') {\n      comparator = (a: DataGridNode, b: DataGridNode): number => a.data.resourceSize - b.data.resourceSize;\n    } else if (columnId === 'responseTime') {\n      comparator = (a: DataGridNode, b: DataGridNode): number => a.data.endTime - b.data.endTime;\n    } else if (columnId === 'responseType') {\n      comparator = (a: DataGridNode, b: DataGridNode): number => a.responseType.localeCompare(b.responseType);\n    } else if (columnId === 'varyHeader') {\n      comparator = (a: DataGridNode, b: DataGridNode): number => a.varyHeader.localeCompare(b.varyHeader);\n    }\n\n    const children = dataGrid.rootNode().children.slice();\n    dataGrid.rootNode().removeChildren();\n    children.sort((a, b) => {\n      const result = comparator((a as DataGridNode), (b as DataGridNode));\n      return accending ? result : -result;\n    });\n    children.forEach(child => dataGrid.rootNode().appendChild(child));\n  }\n\n  private async deleteButtonClicked(node: DataGrid.DataGrid.DataGridNode<DataGridNode>|null): Promise<void> {\n    if (!node) {\n      node = this.dataGrid && this.dataGrid.selectedNode;\n      if (!node) {\n        return;\n      }\n    }\n    await this.model.deleteCacheEntry(this.cache, (node.data.url() as string));\n    node.remove();\n  }\n\n  update(cache: SDK.ServiceWorkerCacheModel.Cache): void {\n    this.cache = cache;\n    this.resetDataGrid();\n    void this.updateData(true);\n  }\n\n  private updateSummaryBar(): void {\n    if (!this.summaryBarElement) {\n      this.summaryBarElement = this.element.createChild('div', 'cache-storage-summary-bar');\n    }\n    this.summaryBarElement.removeChildren();\n\n    const span = this.summaryBarElement.createChild('span');\n    if (this.entryPathFilter) {\n      span.textContent = i18nString(UIStrings.matchingEntriesS, {PH1: String(this.returnCount)});\n    } else {\n      span.textContent = i18nString(UIStrings.totalEntriesS, {PH1: String(this.returnCount)});\n    }\n  }\n\n  private updateDataCallback(\n      this: ServiceWorkerCacheView, skipCount: number, entries: Protocol.CacheStorage.DataEntry[],\n      returnCount: number): void {\n    if (!this.dataGrid) {\n      return;\n    }\n    const selected = this.dataGrid.selectedNode && this.dataGrid.selectedNode.data.url();\n    this.refreshButton.setEnabled(true);\n    this.entriesForTest = entries;\n    this.returnCount = returnCount;\n    this.updateSummaryBar();\n\n    const oldEntries = new Map<string, DataGridNode>();\n    const rootNode = this.dataGrid.rootNode();\n    for (const node of rootNode.children) {\n      oldEntries.set(node.data.url, (node as DataGridNode));\n    }\n    rootNode.removeChildren();\n    let selectedNode: DataGridNode|null = null;\n    for (let i = 0; i < entries.length; ++i) {\n      const entry = entries[i];\n      let node = oldEntries.get(entry.requestURL);\n      if (!node || node.data.responseTime !== entry.responseTime) {\n        node = new DataGridNode(i, this.createRequest(entry), entry.responseType);\n        node.selectable = true;\n      } else {\n        node.data.number = i;\n      }\n      rootNode.appendChild(node);\n      if (entry.requestURL === selected) {\n        selectedNode = node;\n      }\n    }\n    if (!selectedNode) {\n      this.showPreview(null);\n    } else {\n      selectedNode.revealAndSelect();\n    }\n    this.updatedForTest();\n  }\n\n  private async updateData(force: boolean): Promise<{\n    entries: Protocol.CacheStorage.DataEntry[],\n    returnCount: number,\n  }|undefined> {\n    if (!force && this.loadingPromise) {\n      return this.loadingPromise;\n    }\n    this.refreshButton.setEnabled(false);\n\n    if (this.loadingPromise) {\n      return this.loadingPromise;\n    }\n\n    this.loadingPromise = new Promise(resolve => {\n      this.model.loadAllCacheData(\n          this.cache, this.entryPathFilter, (entries: Protocol.CacheStorage.DataEntry[], returnCount: number) => {\n            resolve({entries, returnCount});\n          });\n    });\n\n    const {entries, returnCount} = await this.loadingPromise;\n    this.updateDataCallback(0, entries, returnCount);\n    this.loadingPromise = null;\n    return;\n  }\n\n  private refreshButtonClicked(): void {\n    void this.updateData(true);\n  }\n\n  private cacheContentUpdated(\n      event: Common.EventTarget.EventTargetEvent<SDK.ServiceWorkerCacheModel.CacheStorageContentUpdatedEvent>): void {\n    const {cacheName, origin} = event.data;\n    if (this.cache.securityOrigin !== origin || this.cache.cacheName !== cacheName) {\n      return;\n    }\n    void this.refreshThrottler.schedule(() => Promise.resolve(this.updateData(true)), true);\n  }\n\n  private async previewCachedResponse(request: SDK.NetworkRequest.NetworkRequest): Promise<void> {\n    let preview = networkRequestToPreview.get(request);\n    if (!preview) {\n      preview = new RequestView(request);\n      networkRequestToPreview.set(request, preview);\n    }\n\n    // It is possible that table selection changes before the preview opens.\n    if (this.dataGrid && this.dataGrid.selectedNode && request === this.dataGrid.selectedNode.data) {\n      this.showPreview(preview);\n    }\n  }\n\n  private createRequest(entry: Protocol.CacheStorage.DataEntry): SDK.NetworkRequest.NetworkRequest {\n    const request = SDK.NetworkRequest.NetworkRequest.createWithoutBackendRequest(\n        'cache-storage-' + entry.requestURL, entry.requestURL as Platform.DevToolsPath.UrlString,\n        Platform.DevToolsPath.EmptyUrlString, null);\n    request.requestMethod = entry.requestMethod;\n    request.setRequestHeaders(entry.requestHeaders);\n    request.statusCode = entry.responseStatus;\n    request.statusText = entry.responseStatusText;\n    request.protocol = new Common.ParsedURL.ParsedURL(entry.requestURL).scheme;\n    request.responseHeaders = entry.responseHeaders;\n    request.setRequestHeadersText('');\n    request.endTime = entry.responseTime;\n\n    let header = entry.responseHeaders.find(header => header.name.toLowerCase() === 'content-type');\n    const contentType = header ? header.value : SDK.NetworkRequest.MIME_TYPE.PLAIN;\n    request.mimeType = contentType as SDK.NetworkRequest.MIME_TYPE;\n\n    header = entry.responseHeaders.find(header => header.name.toLowerCase() === 'content-length');\n    request.resourceSize = (header && Number(header.value)) || 0;\n\n    let resourceType = Common.ResourceType.ResourceType.fromMimeType(contentType);\n    if (!resourceType) {\n      resourceType =\n          Common.ResourceType.ResourceType.fromURL(entry.requestURL) || Common.ResourceType.resourceTypes.Other;\n    }\n    request.setResourceType(resourceType);\n    request.setContentDataProvider(this.requestContent.bind(this, request));\n    return request;\n  }\n\n  private async requestContent(request: SDK.NetworkRequest.NetworkRequest): Promise<SDK.NetworkRequest.ContentData> {\n    const isText = request.resourceType().isTextType();\n    const contentData: SDK.NetworkRequest.ContentData = {error: null, content: null, encoded: !isText};\n    const response = await this.cache.requestCachedResponse(request.url(), request.requestHeaders());\n    if (response) {\n      contentData.content = isText ? window.atob(response.body) : response.body;\n    }\n    return contentData;\n  }\n\n  private updatedForTest(): void {\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  private static readonly previewSymbol = Symbol('preview');\n}\n\nconst networkRequestToPreview = new WeakMap<SDK.NetworkRequest.NetworkRequest, RequestView>();\n\nexport class DataGridNode extends DataGrid.DataGrid.DataGridNode<DataGridNode> {\n  private number: number;\n  name: string;\n  private request: SDK.NetworkRequest.NetworkRequest;\n  responseType: Protocol.CacheStorage.CachedResponseType;\n  varyHeader: string;\n\n  constructor(\n      number: number, request: SDK.NetworkRequest.NetworkRequest,\n      responseType: Protocol.CacheStorage.CachedResponseType) {\n    super(request);\n    this.number = number;\n    const parsed = new Common.ParsedURL.ParsedURL(request.url());\n    if (parsed.isValid) {\n      this.name = Platform.StringUtilities.trimURL(request.url(), parsed.domain());\n    } else {\n      this.name = request.url();\n    }\n    this.request = request;\n    this.responseType = responseType;\n    this.varyHeader = request.responseHeaders.find(header => header.name.toLowerCase() === 'vary')?.value || '';\n  }\n\n  createCell(columnId: string): HTMLElement {\n    const cell = this.createTD(columnId);\n    let value;\n    let tooltip = this.request.url() as string;\n    if (columnId === 'number') {\n      value = String(this.number);\n    } else if (columnId === 'name') {\n      value = this.name;\n    } else if (columnId === 'responseType') {\n      if (this.responseType === 'opaqueResponse') {\n        value = 'opaque';\n      } else if (this.responseType === 'opaqueRedirect') {\n        value = 'opaqueredirect';\n      } else {\n        value = this.responseType;\n      }\n    } else if (columnId === 'contentType') {\n      value = this.request.mimeType;\n    } else if (columnId === 'contentLength') {\n      value = (this.request.resourceSize | 0).toLocaleString('en-US');\n    } else if (columnId === 'responseTime') {\n      value = new Date(this.request.endTime * 1000).toLocaleString();\n    } else if (columnId === 'varyHeader') {\n      value = this.varyHeader;\n      if (this.varyHeader) {\n        tooltip = i18nString(UIStrings.varyHeaderWarning);\n      }\n    }\n    const parentElement = cell.parentElement;\n    let gridNode;\n    if (parentElement && this.dataGrid) {\n      gridNode = this.dataGrid.elementToDataGridNode.get(parentElement);\n    }\n    DataGrid.DataGrid.DataGridImpl.setElementText(cell, value || '', /* longText= */ true, gridNode);\n    UI.Tooltip.Tooltip.install(cell, tooltip);\n    return cell;\n  }\n}\n\nexport class RequestView extends UI.Widget.VBox {\n  private tabbedPane: UI.TabbedPane.TabbedPane;\n  private resourceViewTabSetting: Common.Settings.Setting<string>;\n\n  constructor(request: SDK.NetworkRequest.NetworkRequest) {\n    super();\n\n    this.tabbedPane = new UI.TabbedPane.TabbedPane();\n    this.tabbedPane.addEventListener(UI.TabbedPane.Events.TabSelected, this.tabSelected, this);\n    this.resourceViewTabSetting = Common.Settings.Settings.instance().createSetting('cacheStorageViewTab', 'preview');\n\n    this.tabbedPane.appendTab(\n        'headers', i18nString(UIStrings.headers), new Network.RequestHeadersView.RequestHeadersView(request));\n    this.tabbedPane.appendTab(\n        'preview', i18nString(UIStrings.preview), new Network.RequestPreviewView.RequestPreviewView(request));\n    this.tabbedPane.show(this.element);\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    this.selectTab();\n  }\n\n  private selectTab(tabId?: string): void {\n    if (!tabId) {\n      tabId = this.resourceViewTabSetting.get();\n    }\n    if (tabId && !this.tabbedPane.selectTab(tabId)) {\n      this.tabbedPane.selectTab('headers');\n    }\n  }\n\n  private tabSelected(event: Common.EventTarget.EventTargetEvent<UI.TabbedPane.EventData>): void {\n    if (!event.data.isUserGesture) {\n      return;\n    }\n    this.resourceViewTabSetting.set(event.data.tabId);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
