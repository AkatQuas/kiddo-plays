{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/application/IndexedDBViews.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as i18n from '../../core/i18n/i18n.js';\n\nimport indexedDBViewsStyles from './indexedDBViews.css.js';\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as ObjectUI from '../../ui/legacy/components/object_ui/object_ui.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type {\n  Database, DatabaseId, Entry, Index, IndexedDBModel, ObjectStore, ObjectStoreMetadata} from './IndexedDBModel.js';\n\nconst UIStrings = {\n  /**\n  *@description Text when something is loading\n  */\n  loading: 'Loading\u2026',\n  /**\n  *@description Text in Indexed DBViews of the Application panel\n  */\n  securityOrigin: 'Security origin',\n  /**\n  *@description Text in Indexed DBViews of the Application panel\n  */\n  version: 'Version',\n  /**\n  *@description Text in Indexed DBViews of the Application panel\n  */\n  objectStores: 'Object stores',\n  /**\n  *@description Text of button in Indexed DBViews of the Application panel\n  */\n  deleteDatabase: 'Delete database',\n  /**\n  *@description Text of button in Indexed DBViews of the Application panel\n  */\n  refreshDatabase: 'Refresh database',\n  /**\n  *@description Text in Indexed DBViews of the Application panel\n  *@example {msb} PH1\n  */\n  pleaseConfirmDeleteOfSDatabase: 'Please confirm delete of \"{PH1}\" database.',\n  /**\n  *@description Text in Indexed DBViews of the Application panel\n  */\n  idb: 'IDB',\n  /**\n  *@description Text to refresh the page\n  */\n  refresh: 'Refresh',\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon delete button in the Indexed DBViews of the Application panel\n  */\n  deleteSelected: 'Delete selected',\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon clear button in the Indexed DBViews of the Application panel\n  */\n  clearObjectStore: 'Clear object store',\n  /**\n  *@description Text in Indexed DBViews of the Application panel\n  */\n  dataMayBeStale: 'Data may be stale',\n  /**\n  *@description Title of needs refresh in indexed dbviews of the application panel\n  */\n  someEntriesMayHaveBeenModified: 'Some entries may have been modified',\n  /**\n  *@description Text in DOMStorage Items View of the Application panel\n  */\n  keyString: 'Key',\n  /**\n  *@description Text in Indexed DBViews of the Application panel\n  */\n  primaryKey: 'Primary key',\n  /**\n  *@description Text for the value of something\n  */\n  valueString: 'Value',\n  /**\n  *@description Data grid name for Indexed DB data grids\n  */\n  indexedDb: 'Indexed DB',\n  /**\n  *@description Text in Indexed DBViews of the Application panel\n  */\n  keyPath: 'Key path: ',\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon play back button in the Indexed DBViews of the Application panel\n  */\n  showPreviousPage: 'Show previous page',\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon play button in the Indexed DBViews of the Application panel\n  */\n  showNextPage: 'Show next page',\n  /**\n  *@description Text in Indexed DBViews of the Application panel\n  */\n  startFromKey: 'Start from key',\n  /**\n  *@description Text in Context menu for expanding objects in IndexedDB tables\n  */\n  expandRecursively: 'Expand Recursively',\n  /**\n  *@description Text in Context menu for collapsing objects in IndexedDB tables\n  */\n  collapse: 'Collapse',\n  /**\n  *@description Span text content in Indexed DBViews of the Application panel\n  *@example {2} PH1\n  */\n  totalEntriesS: 'Total entries: {PH1}',\n  /**\n  *@description Text in Indexed DBViews of the Application panel\n  *@example {2} PH1\n  */\n  keyGeneratorValueS: 'Key generator value: {PH1}',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/IndexedDBViews.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class IDBDatabaseView extends UI.Widget.VBox {\n  private readonly model: IndexedDBModel;\n  private database!: Database;\n  private readonly reportView: UI.ReportView.ReportView;\n  private securityOriginElement: HTMLElement;\n  private versionElement: HTMLElement;\n  private objectStoreCountElement: HTMLElement;\n  private readonly clearButton: HTMLButtonElement;\n  private readonly refreshButton: HTMLButtonElement;\n  constructor(model: IndexedDBModel, database: Database|null) {\n    super();\n\n    this.model = model;\n    const databaseName = database ? database.databaseId.name : i18nString(UIStrings.loading);\n\n    this.contentElement.classList.add('indexed-db-container');\n\n    // TODO(crbug.com/1156978): Replace UI.ReportView.ReportView with ReportView.ts web component.\n    this.reportView = new UI.ReportView.ReportView(databaseName);\n    this.reportView.show(this.contentElement);\n\n    this.reportView.element.classList.add('indexed-db-header');\n\n    const bodySection = this.reportView.appendSection('');\n    this.securityOriginElement = bodySection.appendField(i18nString(UIStrings.securityOrigin));\n    this.versionElement = bodySection.appendField(i18nString(UIStrings.version));\n    this.objectStoreCountElement = bodySection.appendField(i18nString(UIStrings.objectStores));\n\n    const footer = this.reportView.appendSection('').appendRow();\n    this.clearButton = UI.UIUtils.createTextButton(\n        i18nString(UIStrings.deleteDatabase), () => this.deleteDatabase(), i18nString(UIStrings.deleteDatabase));\n    footer.appendChild(this.clearButton);\n\n    this.refreshButton = UI.UIUtils.createTextButton(\n        i18nString(UIStrings.refreshDatabase), () => this.refreshDatabaseButtonClicked(),\n        i18nString(UIStrings.refreshDatabase));\n    footer.appendChild(this.refreshButton);\n\n    if (database) {\n      this.update(database);\n    }\n  }\n\n  private refreshDatabase(): void {\n    this.securityOriginElement.textContent = this.database.databaseId.securityOrigin;\n    if (this.versionElement) {\n      this.versionElement.textContent = this.database.version.toString();\n    }\n\n    this.objectStoreCountElement.textContent = this.database.objectStores.size.toString();\n  }\n\n  private refreshDatabaseButtonClicked(): void {\n    this.model.refreshDatabase(this.database.databaseId);\n  }\n\n  update(database: Database): void {\n    this.database = database;\n    this.reportView.setTitle(this.database.databaseId.name);\n    this.refreshDatabase();\n    this.updatedForTests();\n  }\n\n  private updatedForTests(): void {\n    // Sniffed in tests.\n  }\n\n  private async deleteDatabase(): Promise<void> {\n    const ok = await UI.UIUtils.ConfirmDialog.show(\n        i18nString(UIStrings.pleaseConfirmDeleteOfSDatabase, {PH1: this.database.databaseId.name}), this.element);\n    if (ok) {\n      void this.model.deleteDatabase(this.database.databaseId);\n    }\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.reportView.registerCSSFiles([indexedDBViewsStyles]);\n    this.registerCSSFiles([indexedDBViewsStyles]);\n  }\n}\n\nexport class IDBDataView extends UI.View.SimpleView {\n  private readonly model: IndexedDBModel;\n  private readonly databaseId: DatabaseId;\n  private isIndex: boolean;\n  private readonly refreshObjectStoreCallback: () => void;\n  private readonly refreshButton: UI.Toolbar.ToolbarButton;\n  private readonly deleteSelectedButton: UI.Toolbar.ToolbarButton;\n  private readonly clearButton: UI.Toolbar.ToolbarButton;\n  private readonly needsRefresh: UI.Toolbar.ToolbarItem;\n  private clearingObjectStore: boolean;\n  private pageSize: number;\n  private skipCount: number;\n  private entries: Entry[];\n  private objectStore!: ObjectStore;\n  private index!: Index|null;\n  private keyInput!: UI.Toolbar.ToolbarInput;\n  private dataGrid!: DataGrid.DataGrid.DataGridImpl<unknown>;\n  private lastPageSize!: number;\n  private lastSkipCount!: number;\n  private pageBackButton!: UI.Toolbar.ToolbarButton;\n  private pageForwardButton!: UI.Toolbar.ToolbarButton;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private lastKey?: any;\n  private summaryBarElement?: HTMLElement;\n\n  constructor(\n      model: IndexedDBModel, databaseId: DatabaseId, objectStore: ObjectStore, index: Index|null,\n      refreshObjectStoreCallback: () => void) {\n    super(i18nString(UIStrings.idb));\n\n    this.model = model;\n    this.databaseId = databaseId;\n    this.isIndex = Boolean(index);\n    this.refreshObjectStoreCallback = refreshObjectStoreCallback;\n\n    this.element.classList.add('indexed-db-data-view', 'storage-view');\n\n    this.refreshButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.refresh), 'largeicon-refresh');\n    this.refreshButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.refreshButtonClicked, this);\n\n    this.deleteSelectedButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.deleteSelected), 'largeicon-delete');\n    this.deleteSelectedButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, _event => {\n      void this.deleteButtonClicked(null);\n    });\n\n    this.clearButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.clearObjectStore), 'largeicon-clear');\n    this.clearButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, () => {\n      void this.clearButtonClicked();\n    }, this);\n\n    this.needsRefresh = new UI.Toolbar.ToolbarItem(\n        UI.UIUtils.createIconLabel(i18nString(UIStrings.dataMayBeStale), 'smallicon-warning'));\n    this.needsRefresh.setVisible(false);\n    this.needsRefresh.setTitle(i18nString(UIStrings.someEntriesMayHaveBeenModified));\n    this.clearingObjectStore = false;\n\n    this.createEditorToolbar();\n\n    this.pageSize = 50;\n    this.skipCount = 0;\n\n    this.update(objectStore, index);\n    this.entries = [];\n  }\n\n  private createDataGrid(): DataGrid.DataGrid.DataGridImpl<unknown> {\n    const keyPath = this.isIndex && this.index ? this.index.keyPath : this.objectStore.keyPath;\n\n    const columns = ([] as DataGrid.DataGrid.ColumnDescriptor[]);\n\n    // Create column defaults so that we avoid repetition below.\n    const columnDefaults = {\n      title: undefined,\n      titleDOMFragment: undefined,\n      sortable: false,\n      sort: undefined,\n      align: undefined,\n      width: undefined,\n      fixedWidth: undefined,\n      editable: undefined,\n      nonSelectable: undefined,\n      longText: undefined,\n      disclosure: undefined,\n      weight: undefined,\n      allowInSortByEvenWhenHidden: undefined,\n      dataType: undefined,\n      defaultWeight: undefined,\n    };\n    columns.push(\n        ({...columnDefaults, id: 'number', title: '#', sortable: false, width: '50px'} as\n         DataGrid.DataGrid.ColumnDescriptor));\n    columns.push(({\n      ...columnDefaults,\n      id: 'key',\n      titleDOMFragment: this.keyColumnHeaderFragment(i18nString(UIStrings.keyString), keyPath),\n      sortable: false,\n    } as DataGrid.DataGrid.ColumnDescriptor));\n    if (this.isIndex) {\n      columns.push(({\n        ...columnDefaults,\n        id: 'primaryKey',\n        titleDOMFragment: this.keyColumnHeaderFragment(i18nString(UIStrings.primaryKey), this.objectStore.keyPath),\n        sortable: false,\n      } as DataGrid.DataGrid.ColumnDescriptor));\n    }\n    const title = i18nString(UIStrings.valueString);\n    columns.push(({...columnDefaults, id: 'value', title, sortable: false} as DataGrid.DataGrid.ColumnDescriptor));\n\n    const dataGrid = new DataGrid.DataGrid.DataGridImpl({\n      displayName: i18nString(UIStrings.indexedDb),\n      columns,\n      deleteCallback: this.deleteButtonClicked.bind(this),\n      refreshCallback: this.updateData.bind(this, true),\n      editCallback: undefined,\n    });\n    dataGrid.setStriped(true);\n    dataGrid.addEventListener(DataGrid.DataGrid.Events.SelectedNode, () => this.updateToolbarEnablement(), this);\n    return dataGrid;\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private keyColumnHeaderFragment(prefix: string, keyPath: any): DocumentFragment {\n    const keyColumnHeaderFragment = document.createDocumentFragment();\n    UI.UIUtils.createTextChild(keyColumnHeaderFragment, prefix);\n    if (keyPath === null) {\n      return keyColumnHeaderFragment;\n    }\n\n    UI.UIUtils.createTextChild(keyColumnHeaderFragment, ' (' + i18nString(UIStrings.keyPath));\n    if (Array.isArray(keyPath)) {\n      UI.UIUtils.createTextChild(keyColumnHeaderFragment, '[');\n      for (let i = 0; i < keyPath.length; ++i) {\n        if (i !== 0) {\n          UI.UIUtils.createTextChild(keyColumnHeaderFragment, ', ');\n        }\n        keyColumnHeaderFragment.appendChild(this.keyPathStringFragment(keyPath[i]));\n      }\n      UI.UIUtils.createTextChild(keyColumnHeaderFragment, ']');\n    } else {\n      const keyPathString = (keyPath as string);\n      keyColumnHeaderFragment.appendChild(this.keyPathStringFragment(keyPathString));\n    }\n    UI.UIUtils.createTextChild(keyColumnHeaderFragment, ')');\n    return keyColumnHeaderFragment;\n  }\n\n  private keyPathStringFragment(keyPathString: string): DocumentFragment {\n    const keyPathStringFragment = document.createDocumentFragment();\n    UI.UIUtils.createTextChild(keyPathStringFragment, '\"');\n    const keyPathSpan = keyPathStringFragment.createChild('span', 'source-code indexed-db-key-path');\n    keyPathSpan.textContent = keyPathString;\n    UI.UIUtils.createTextChild(keyPathStringFragment, '\"');\n    return keyPathStringFragment;\n  }\n\n  private createEditorToolbar(): void {\n    const editorToolbar = new UI.Toolbar.Toolbar('data-view-toolbar', this.element);\n\n    editorToolbar.appendToolbarItem(this.refreshButton);\n\n    editorToolbar.appendToolbarItem(new UI.Toolbar.ToolbarSeparator());\n\n    this.pageBackButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.showPreviousPage), 'largeicon-play-back');\n    this.pageBackButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.pageBackButtonClicked, this);\n    editorToolbar.appendToolbarItem(this.pageBackButton);\n\n    this.pageForwardButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.showNextPage), 'largeicon-play');\n    this.pageForwardButton.setEnabled(false);\n    this.pageForwardButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.pageForwardButtonClicked, this);\n    editorToolbar.appendToolbarItem(this.pageForwardButton);\n\n    this.keyInput = new UI.Toolbar.ToolbarInput(i18nString(UIStrings.startFromKey), '', 0.5);\n    this.keyInput.addEventListener(UI.Toolbar.ToolbarInput.Event.TextChanged, this.updateData.bind(this, false));\n    editorToolbar.appendToolbarItem(this.keyInput);\n    editorToolbar.appendToolbarItem(new UI.Toolbar.ToolbarSeparator());\n    editorToolbar.appendToolbarItem(this.clearButton);\n    editorToolbar.appendToolbarItem(this.deleteSelectedButton);\n\n    editorToolbar.appendToolbarItem(this.needsRefresh);\n  }\n\n  private pageBackButtonClicked(): void {\n    this.skipCount = Math.max(0, this.skipCount - this.pageSize);\n    this.updateData(false);\n  }\n\n  private pageForwardButtonClicked(): void {\n    this.skipCount = this.skipCount + this.pageSize;\n    this.updateData(false);\n  }\n\n  private populateContextMenu(\n      contextMenu: UI.ContextMenu.ContextMenu, gridNode: DataGrid.DataGrid.DataGridNode<unknown>): void {\n    const node = (gridNode as IDBDataGridNode);\n    if (node.valueObjectPresentation) {\n      contextMenu.revealSection().appendItem(i18nString(UIStrings.expandRecursively), () => {\n        if (!node.valueObjectPresentation) {\n          return;\n        }\n        void node.valueObjectPresentation.objectTreeElement().expandRecursively();\n      });\n      contextMenu.revealSection().appendItem(i18nString(UIStrings.collapse), () => {\n        if (!node.valueObjectPresentation) {\n          return;\n        }\n        node.valueObjectPresentation.objectTreeElement().collapse();\n      });\n    }\n  }\n\n  refreshData(): void {\n    this.updateData(true);\n  }\n\n  update(objectStore: ObjectStore, index: Index|null): void {\n    this.objectStore = objectStore;\n    this.index = index;\n\n    if (this.dataGrid) {\n      this.dataGrid.asWidget().detach();\n    }\n    this.dataGrid = this.createDataGrid();\n    this.dataGrid.setRowContextMenuCallback(this.populateContextMenu.bind(this));\n    this.dataGrid.asWidget().show(this.element);\n\n    this.skipCount = 0;\n    this.updateData(true);\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private parseKey(keyString: string): any {\n    let result;\n    try {\n      result = JSON.parse(keyString);\n    } catch (e) {\n      result = keyString;\n    }\n    return result;\n  }\n\n  private updateData(force: boolean): void {\n    const key = this.parseKey(this.keyInput.value());\n    const pageSize = this.pageSize;\n    let skipCount: 0|number = this.skipCount;\n    let selected = this.dataGrid.selectedNode ? this.dataGrid.selectedNode.data['number'] : 0;\n    selected = Math.max(selected, this.skipCount);  // Page forward should select top entry\n    this.clearButton.setEnabled(!this.isIndex);\n\n    if (!force && this.lastKey === key && this.lastPageSize === pageSize && this.lastSkipCount === skipCount) {\n      return;\n    }\n\n    if (this.lastKey !== key || this.lastPageSize !== pageSize) {\n      skipCount = 0;\n      this.skipCount = 0;\n    }\n    this.lastKey = key;\n    this.lastPageSize = pageSize;\n    this.lastSkipCount = skipCount;\n\n    function callback(this: IDBDataView, entries: Entry[], hasMore: boolean): void {\n      this.clear();\n      this.entries = entries;\n      let selectedNode: IDBDataGridNode|null = null;\n      for (let i = 0; i < entries.length; ++i) {\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const data: any = {};\n        data['number'] = i + skipCount;\n        data['key'] = entries[i].key;\n        data['primaryKey'] = entries[i].primaryKey;\n        data['value'] = entries[i].value;\n\n        const node = new IDBDataGridNode(data);\n        this.dataGrid.rootNode().appendChild(node);\n        if (data['number'] <= selected) {\n          selectedNode = node;\n        }\n      }\n\n      if (selectedNode) {\n        selectedNode.select();\n      }\n      this.pageBackButton.setEnabled(Boolean(skipCount));\n      this.pageForwardButton.setEnabled(hasMore);\n      this.needsRefresh.setVisible(false);\n      this.updateToolbarEnablement();\n      this.updatedDataForTests();\n    }\n\n    const idbKeyRange = key ? window.IDBKeyRange.lowerBound(key) : null;\n    if (this.isIndex && this.index) {\n      this.model.loadIndexData(\n          this.databaseId, this.objectStore.name, this.index.name, idbKeyRange, skipCount, pageSize,\n          callback.bind(this));\n    } else {\n      this.model.loadObjectStoreData(\n          this.databaseId, this.objectStore.name, idbKeyRange, skipCount, pageSize, callback.bind(this));\n    }\n    void this.model.getMetadata(this.databaseId, this.objectStore).then(this.updateSummaryBar.bind(this));\n  }\n\n  private updateSummaryBar(metadata: ObjectStoreMetadata|null): void {\n    if (!this.summaryBarElement) {\n      this.summaryBarElement = this.element.createChild('div', 'object-store-summary-bar');\n    }\n    this.summaryBarElement.removeChildren();\n    if (!metadata) {\n      return;\n    }\n\n    const separator = '\\u2002\\u2758\\u2002';\n\n    const span = this.summaryBarElement.createChild('span');\n    span.textContent = i18nString(UIStrings.totalEntriesS, {PH1: String(metadata.entriesCount)});\n\n    if (this.objectStore.autoIncrement) {\n      span.textContent += separator;\n      span.textContent += i18nString(UIStrings.keyGeneratorValueS, {PH1: String(metadata.keyGeneratorValue)});\n    }\n  }\n\n  private updatedDataForTests(): void {\n    // Sniffed in tests.\n  }\n\n  private refreshButtonClicked(): void {\n    this.updateData(true);\n  }\n\n  private async clearButtonClicked(): Promise<void> {\n    this.clearButton.setEnabled(false);\n    this.clearingObjectStore = true;\n    await this.model.clearObjectStore(this.databaseId, this.objectStore.name);\n    this.clearingObjectStore = false;\n    this.clearButton.setEnabled(true);\n    this.updateData(true);\n  }\n\n  markNeedsRefresh(): void {\n    // We expect that calling clearObjectStore() will cause the backend to send us an update.\n    if (this.clearingObjectStore) {\n      return;\n    }\n    this.needsRefresh.setVisible(true);\n  }\n\n  private async deleteButtonClicked(node: DataGrid.DataGrid.DataGridNode<unknown>|null): Promise<void> {\n    if (!node) {\n      node = this.dataGrid.selectedNode;\n      if (!node) {\n        return;\n      }\n    }\n    const key = (this.isIndex ? node.data.primaryKey : node.data.key as SDK.RemoteObject.RemoteObject);\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const keyValue = (key.value as string | number | any[] | Date);\n    await this.model.deleteEntries(this.databaseId, this.objectStore.name, window.IDBKeyRange.only(keyValue));\n    this.refreshObjectStoreCallback();\n  }\n\n  clear(): void {\n    this.dataGrid.rootNode().removeChildren();\n    this.entries = [];\n  }\n\n  private updateToolbarEnablement(): void {\n    const empty = !this.dataGrid || this.dataGrid.rootNode().children.length === 0;\n    this.deleteSelectedButton.setEnabled(!empty && this.dataGrid.selectedNode !== null);\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([indexedDBViewsStyles]);\n  }\n}\n\nexport class IDBDataGridNode extends DataGrid.DataGrid.DataGridNode<unknown> {\n  selectable: boolean;\n  valueObjectPresentation: ObjectUI.ObjectPropertiesSection.ObjectPropertiesSection|null;\n  constructor(data: {\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [x: string]: any,\n  }) {\n    super(data, false);\n    this.selectable = true;\n    this.valueObjectPresentation = null;\n  }\n\n  createCell(columnIdentifier: string): HTMLElement {\n    const cell = super.createCell(columnIdentifier);\n    const value = (this.data[columnIdentifier] as SDK.RemoteObject.RemoteObject);\n\n    switch (columnIdentifier) {\n      case 'value': {\n        cell.removeChildren();\n        const objectPropSection =\n            ObjectUI.ObjectPropertiesSection.ObjectPropertiesSection.defaultObjectPropertiesSection(\n                value, undefined /* linkifier */, true /* skipProto */, true /* readOnly */);\n        cell.appendChild(objectPropSection.element);\n        this.valueObjectPresentation = objectPropSection;\n        break;\n      }\n      case 'key':\n      case 'primaryKey': {\n        cell.removeChildren();\n        const objectElement = ObjectUI.ObjectPropertiesSection.ObjectPropertiesSection.defaultObjectPresentation(\n            value, undefined /* linkifier */, true /* skipProto */, true /* readOnly */);\n        cell.appendChild(objectElement);\n        break;\n      }\n      default: {\n      }\n    }\n\n    return cell;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
