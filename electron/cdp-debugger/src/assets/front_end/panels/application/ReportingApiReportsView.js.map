{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/application/ReportingApiReportsView.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport type * as DataGrid from '../../ui/components/data_grid/data_grid.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as SourceFrame from '../../ui/legacy/components/source_frame/source_frame.js';\nimport * as ApplicationComponents from './components/components.js';\n\nimport reportingApiReportsViewStyles from './reportingApiReportsView.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Placeholder text instructing the user how to display a Reporting API\n  *report body (https://developers.google.com/web/updates/2018/09/reportingapi#sending).\n  */\n  clickToDisplayBody: 'Click on any report to display its body',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/ReportingApiReportsView.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class ReportingApiReportsView extends UI.SplitWidget.SplitWidget {\n  private readonly reportsGrid = new ApplicationComponents.ReportsGrid.ReportsGrid();\n  private reports: Protocol.Network.ReportingApiReport[] = [];\n\n  constructor(networkManager: SDK.NetworkManager.NetworkManager) {\n    super(/* isVertical: */ false, /* secondIsSidebar: */ true);\n    const topPanel = new UI.Widget.VBox();\n    const bottomPanel = new UI.Widget.VBox();\n    topPanel.setMinimumSize(0, 80);\n    this.setMainWidget(topPanel);\n    bottomPanel.setMinimumSize(0, 40);\n    this.setSidebarWidget(bottomPanel);\n\n    topPanel.contentElement.appendChild(this.reportsGrid);\n    this.reportsGrid.addEventListener('cellfocused', this.onFocus.bind(this));\n\n    bottomPanel.contentElement.classList.add('placeholder');\n    const centered = bottomPanel.contentElement.createChild('div');\n    centered.textContent = i18nString(UIStrings.clickToDisplayBody);\n\n    networkManager.addEventListener(\n        SDK.NetworkManager.Events.ReportingApiReportAdded, event => this.onReportAdded(event.data), this);\n    networkManager.addEventListener(\n        SDK.NetworkManager.Events.ReportingApiReportUpdated, event => this.onReportUpdated(event.data), this);\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    const sbw = this.sidebarWidget();\n    if (sbw) {\n      sbw.registerCSSFiles([reportingApiReportsViewStyles]);\n    }\n  }\n\n  private onReportAdded(report: Protocol.Network.ReportingApiReport): void {\n    this.reports.push(report);\n    this.reportsGrid.data = {reports: this.reports};\n  }\n\n  private onReportUpdated(report: Protocol.Network.ReportingApiReport): void {\n    const index = this.reports.findIndex(oldReport => oldReport.id === report.id);\n    this.reports[index] = report;\n    this.reportsGrid.data = {reports: this.reports};\n  }\n\n  private async onFocus(event: Event): Promise<void> {\n    const focusedEvent = event as DataGrid.DataGridEvents.BodyCellFocusedEvent;\n    const cell = focusedEvent.data.row.cells.find(cell => cell.columnId === 'id');\n    const report = cell && this.reports.find(report => report.id === cell.value);\n    if (report) {\n      const jsonView = await SourceFrame.JSONView.JSONView.createView(JSON.stringify(report.body));\n      jsonView?.setMinimumSize(0, 40);\n      if (jsonView) {\n        this.setSidebarWidget(jsonView);\n      }\n    }\n  }\n\n  getReports(): Protocol.Network.ReportingApiReport[] {\n    return this.reports;\n  }\n\n  getReportsGrid(): ApplicationComponents.ReportsGrid.ReportsGrid {\n    return this.reportsGrid;\n  }\n}\n"],
  "mappings": "AAIA;AACA;AACA;AAGA;AACA;AAEA;AAEA,MAAM,YAAY;AAAA,EAKhB,oBAAoB;AAAA;AAEtB,MAAM,OAAO,KAAK,KAAK,kBAAkB,iDAAiD;AACnF,aAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAEhE,6CAAsC,GAAG,YAAY,YAAY;AAAA,EACrD,cAAc,IAAI,sBAAsB,YAAY;AAAA,EAC7D,UAAiD;AAAA,EAEzD,YAAY,gBAAmD;AAC7D,UAAwB,OAA8B;AACtD,UAAM,WAAW,IAAI,GAAG,OAAO;AAC/B,UAAM,cAAc,IAAI,GAAG,OAAO;AAClC,aAAS,eAAe,GAAG;AAC3B,SAAK,cAAc;AACnB,gBAAY,eAAe,GAAG;AAC9B,SAAK,iBAAiB;AAEtB,aAAS,eAAe,YAAY,KAAK;AACzC,SAAK,YAAY,iBAAiB,eAAe,KAAK,QAAQ,KAAK;AAEnE,gBAAY,eAAe,UAAU,IAAI;AACzC,UAAM,WAAW,YAAY,eAAe,YAAY;AACxD,aAAS,cAAc,WAAW,UAAU;AAE5C,mBAAe,iBACX,IAAI,eAAe,OAAO,yBAAyB,WAAS,KAAK,cAAc,MAAM,OAAO;AAChG,mBAAe,iBACX,IAAI,eAAe,OAAO,2BAA2B,WAAS,KAAK,gBAAgB,MAAM,OAAO;AAAA;AAAA,EAGtG,WAAiB;AACf,UAAM;AACN,UAAM,MAAM,KAAK;AACjB,QAAI,KAAK;AACP,UAAI,iBAAiB,CAAC;AAAA;AAAA;AAAA,EAIlB,cAAc,QAAmD;AACvE,SAAK,QAAQ,KAAK;AAClB,SAAK,YAAY,OAAO,EAAC,SAAS,KAAK;AAAA;AAAA,EAGjC,gBAAgB,QAAmD;AACzE,UAAM,QAAQ,KAAK,QAAQ,UAAU,eAAa,UAAU,OAAO,OAAO;AAC1E,SAAK,QAAQ,SAAS;AACtB,SAAK,YAAY,OAAO,EAAC,SAAS,KAAK;AAAA;AAAA,QAG3B,QAAQ,OAA6B;AACjD,UAAM,eAAe;AACrB,UAAM,OAAO,aAAa,KAAK,IAAI,MAAM,KAAK,WAAQ,MAAK,aAAa;AACxE,UAAM,SAAS,QAAQ,KAAK,QAAQ,KAAK,aAAU,QAAO,OAAO,KAAK;AACtE,QAAI,QAAQ;AACV,YAAM,WAAW,MAAM,YAAY,SAAS,SAAS,WAAW,KAAK,UAAU,OAAO;AACtF,gBAAU,eAAe,GAAG;AAC5B,UAAI,UAAU;AACZ,aAAK,iBAAiB;AAAA;AAAA;AAAA;AAAA,EAK5B,aAAoD;AAClD,WAAO,KAAK;AAAA;AAAA,EAGd,iBAAgE;AAC9D,WAAO,KAAK;AAAA;AAAA;",
  "names": []
}
