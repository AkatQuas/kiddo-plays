{
  "version": 3,
  "sources": ["../../../../../../../front_end/panels/application/components/ReportsGrid.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as DataGrid from '../../../ui/components/data_grid/data_grid.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as IconButton from '../../../ui/components/icon_button/icon_button.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\n\nimport type * as Protocol from '../../../generated/protocol.js';\nimport * as Root from '../../../core/root/root.js';\n\nimport reportingApiGridStyles from './reportingApiGrid.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Placeholder text when there are no Reporting API reports.\n  *(https://developers.google.com/web/updates/2018/09/reportingapi#sending)\n  */\n  noReportsToDisplay: 'No reports to display',\n  /**\n  *@description Column header for a table displaying Reporting API reports.\n  *Status is one of 'Queued', 'Pending', 'MarkedForRemoval' or 'Success'.\n  */\n  status: 'Status',\n  /**\n  *@description Column header for a table displaying Reporting API reports.\n  *Destination is the name of the endpoint the report is being sent to.\n  */\n  destination: 'Destination',\n  /**\n  *@description Column header for a table displaying Reporting API reports.\n  *The column contains the timestamp of when a report was generated.\n  */\n  generatedAt: 'Generated at',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/components/ReportsGrid.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst {render, html} = LitHtml;\n\nexport class ReportsGridStatusHeader extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-resources-reports-grid-status-header`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [reportingApiGridStyles];\n    this.#render();\n  }\n\n  #render(): void {\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`\n      ${i18nString(UIStrings.status)}\n      <x-link href=\"https://web.dev/reporting-api/#report-status\">\n        <${IconButton.Icon.Icon.litTagName} class=\"inline-icon\" .data=${{\n          iconName: 'help_outline',\n          color: 'var(--color-primary)',\n          width: '16px',\n          height: '16px',\n          } as IconButton.Icon.IconData}></${IconButton.Icon.Icon.litTagName}>\n      </x-link>\n    `, this.#shadow, {host: this});\n    // clang-format on\n  }\n}\n\nexport interface ReportsGridData {\n  reports: Protocol.Network.ReportingApiReport[];\n}\n\nexport class ReportsGrid extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-resources-reports-grid`;\n\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #reports: Protocol.Network.ReportingApiReport[] = [];\n  #protocolMonitorExperimentEnabled = false;\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [reportingApiGridStyles];\n    this.#protocolMonitorExperimentEnabled = Root.Runtime.experiments.isEnabled('protocolMonitor');\n    this.#render();\n  }\n\n  set data(data: ReportsGridData) {\n    this.#reports = data.reports;\n    this.#render();\n  }\n\n  #render(): void {\n    const reportsGridData: DataGrid.DataGridController.DataGridControllerData = {\n      columns: [\n        {\n          id: 'url',\n          title: i18n.i18n.lockedString('URL'),\n          widthWeighting: 30,\n          hideable: false,\n          visible: true,\n        },\n        {\n          id: 'type',\n          title: i18n.i18n.lockedString('Type'),\n          widthWeighting: 20,\n          hideable: false,\n          visible: true,\n        },\n        {\n          id: 'status',\n          title: i18nString(UIStrings.status),\n          widthWeighting: 20,\n          hideable: false,\n          visible: true,\n          titleElement: html`\n          <${ReportsGridStatusHeader.litTagName}></${ReportsGridStatusHeader.litTagName}>\n          `,\n        },\n        {\n          id: 'destination',\n          title: i18nString(UIStrings.destination),\n          widthWeighting: 20,\n          hideable: false,\n          visible: true,\n        },\n        {\n          id: 'timestamp',\n          title: i18nString(UIStrings.generatedAt),\n          widthWeighting: 20,\n          hideable: false,\n          visible: true,\n        },\n        {\n          id: 'body',\n          title: i18n.i18n.lockedString('Body'),\n          widthWeighting: 20,\n          hideable: false,\n          visible: true,\n        },\n      ],\n      rows: this.#buildReportRows(),\n    };\n\n    if (this.#protocolMonitorExperimentEnabled) {\n      reportsGridData.columns.unshift(\n          {id: 'id', title: 'ID', widthWeighting: 30, hideable: false, visible: true},\n      );\n    }\n\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`\n      <div class=\"reporting-container\">\n        <div class=\"reporting-header\">${i18n.i18n.lockedString('Reports')}</div>\n        ${this.#reports.length > 0 ? html`\n          <${DataGrid.DataGridController.DataGridController.litTagName} .data=${\n              reportsGridData as DataGrid.DataGridController.DataGridControllerData}>\n          </${DataGrid.DataGridController.DataGridController.litTagName}>\n        ` : html`\n          <div class=\"reporting-placeholder\">\n            <div>${i18nString(UIStrings.noReportsToDisplay)}</div>\n          </div>\n        `}\n      </div>\n    `, this.#shadow, {host: this});\n    // clang-format on\n  }\n\n  #buildReportRows(): DataGrid.DataGridUtils.Row[] {\n    return this.#reports.map(report => ({\n                               cells: [\n                                 {columnId: 'id', value: report.id},\n                                 {columnId: 'url', value: report.initiatorUrl},\n                                 {columnId: 'type', value: report.type},\n                                 {columnId: 'status', value: report.status},\n                                 {columnId: 'destination', value: report.destination},\n                                 {columnId: 'timestamp', value: new Date(report.timestamp * 1000).toLocaleString()},\n                                 {columnId: 'body', value: JSON.stringify(report.body)},\n                               ],\n                             }));\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent(\n    'devtools-resources-reports-grid-status-header', ReportsGridStatusHeader);\nComponentHelpers.CustomElements.defineComponent('devtools-resources-reports-grid', ReportsGrid);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-resources-reports-grid-status-header': ReportsGridStatusHeader;\n    'devtools-resources-reports-grid': ReportsGrid;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
