{
  "version": 3,
  "sources": ["../../../../../../../front_end/panels/application/components/TrustTokensView.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as DataGrid from '../../../ui/components/data_grid/data_grid.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as IconButton from '../../../ui/components/icon_button/icon_button.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\n\nimport trustTokensViewStyles from './trustTokensView.css.js';\nimport trustTokensViewDeleteButtonStyles from './trustTokensViewDeleteButton.css.js';\n\nimport type * as Protocol from '../../../generated/protocol.js';\n\nconst UIStrings = {\n  /**\n  *@description Text for the issuer of an item\n  */\n  issuer: 'Issuer',\n  /**\n  *@description Column header for Trust Token table\n  */\n  storedTokenCount: 'Stored token count',\n  /**\n  *@description Hover text for an info icon in the Trust Token panel\n  */\n  allStoredTrustTokensAvailableIn: 'All stored Trust Tokens available in this browser instance.',\n  /**\n   * @description Text shown instead of a table when the table would be empty.\n   */\n  noTrustTokensStored: 'No Trust Tokens are currently stored.',\n  /**\n   * @description Each row in the Trust Token table has a delete button. This is the text shown\n   * when hovering over this button. The placeholder is a normal URL, indicating the site which\n   * provided the Trust Tokens that will be deleted when the button is clicked.\n   * @example {https://google.com} PH1\n   */\n  deleteTrustTokens: 'Delete all stored Trust Tokens issued by {PH1}.',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/components/TrustTokensView.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ninterface TrustTokensDeleteButtonData {\n  issuer: DataGrid.DataGridUtils.CellValue;\n  deleteClickHandler: (issuerOrigin: string) => void;\n}\n\nclass TrustTokensDeleteButton extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-trust-tokens-delete-button`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #issuer: DataGrid.DataGridUtils.CellValue|null = null;\n  #deleteClickHandler: (issuerOrigin: string) => void = () => {};\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [trustTokensViewDeleteButtonStyles];\n  }\n\n  set data(data: TrustTokensDeleteButtonData) {\n    this.#issuer = data.issuer;\n    this.#deleteClickHandler = data.deleteClickHandler;\n    this.#render();\n  }\n\n  #render(): void {\n    if (!this.#issuer) {\n      return;\n    }\n    // clang-format off\n    LitHtml.render(LitHtml.html`\n      <!-- Wrap the button in a container, otherwise we can't center it inside the column. -->\n      <span class=\"button-container\">\n        <button class=\"delete-button\"\n          title=${i18nString(UIStrings.deleteTrustTokens, {PH1: this.#issuer as string})}\n          @click=${(): void => this.#deleteClickHandler(this.#issuer as string)}>\n          <${IconButton.Icon.Icon.litTagName} .data=${\n        {iconName: 'trash_bin_icon', color: 'var(--color-text-secondary)', width: '9px', height: '14px'} as\n        IconButton.Icon.IconWithName}>\n          </${IconButton.Icon.Icon.litTagName}>\n        </button>\n      </span>`, this.#shadow, {host: this});\n    // clang-format on\n  }\n}\n\nexport interface TrustTokensViewData {\n  tokens: Protocol.Storage.TrustTokens[];\n  deleteClickHandler: (issuerOrigin: string) => void;\n}\n\nexport class TrustTokensView extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-trust-tokens-storage-view`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #tokens: Protocol.Storage.TrustTokens[] = [];\n  #deleteClickHandler: (issuerOrigin: string) => void = () => {};\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [trustTokensViewStyles];\n    this.#render();\n  }\n\n  set data(data: TrustTokensViewData) {\n    this.#tokens = data.tokens;\n    this.#deleteClickHandler = data.deleteClickHandler;\n    this.#render();\n  }\n\n  #render(): void {\n    // clang-format off\n    LitHtml.render(LitHtml.html`\n      <div>\n        <span class=\"heading\">Trust Tokens</span>\n        <${IconButton.Icon.Icon.litTagName} class=\"info-icon\" title=${\n            i18nString(UIStrings.allStoredTrustTokensAvailableIn)}\n          .data=${\n            {iconName: 'ic_info_black_18dp', color: 'var(--color-link)', width: '14px'} as\n            IconButton.Icon.IconWithName}>\n        </${IconButton.Icon.Icon.litTagName}>\n        ${this.#renderGridOrNoDataMessage()}\n      </div>\n    `, this.#shadow, {host: this});\n    // clang-format on\n  }\n\n  #renderGridOrNoDataMessage(): LitHtml.TemplateResult {\n    if (this.#tokens.length === 0) {\n      return LitHtml.html`<div class=\"no-tt-message\">${i18nString(UIStrings.noTrustTokensStored)}</div>`;\n    }\n\n    const gridData: DataGrid.DataGridController.DataGridControllerData = {\n      columns: [\n        {\n          id: 'issuer',\n          title: i18nString(UIStrings.issuer),\n          widthWeighting: 10,\n          hideable: false,\n          visible: true,\n          sortable: true,\n        },\n        {\n          id: 'count',\n          title: i18nString(UIStrings.storedTokenCount),\n          widthWeighting: 5,\n          hideable: false,\n          visible: true,\n          sortable: true,\n        },\n        {\n          id: 'delete-button',\n          title: '',\n          widthWeighting: 1,\n          hideable: false,\n          visible: true,\n          sortable: false,\n        },\n      ],\n      rows: this.#buildRowsFromTokens(),\n      initialSort: {\n        columnId: 'issuer',\n        direction: DataGrid.DataGridUtils.SortDirection.ASC,\n      },\n    };\n\n    return LitHtml.html`\n      <${DataGrid.DataGridController.DataGridController.litTagName} .data=${\n        gridData as DataGrid.DataGridController.DataGridControllerData}></${\n        DataGrid.DataGridController.DataGridController.litTagName}>\n    `;\n  }\n\n  #buildRowsFromTokens(): DataGrid.DataGridUtils.Row[] {\n    const tokens = this.#tokens.filter(token => token.count > 0);\n    return tokens.map(token => ({\n                        cells: [\n                          {\n                            columnId: 'delete-button',\n                            value: removeTrailingSlash(token.issuerOrigin),\n                            renderer: this.#deleteButtonRendererForDataGridCell.bind(this),\n                          },\n                          {columnId: 'issuer', value: removeTrailingSlash(token.issuerOrigin)},\n                          {columnId: 'count', value: token.count},\n                        ],\n                      }));\n  }\n\n  #deleteButtonRendererForDataGridCell(issuer: DataGrid.DataGridUtils.CellValue): LitHtml.TemplateResult {\n    // clang-format off\n    return LitHtml.html`<${TrustTokensDeleteButton.litTagName}\n     .data=${{issuer, deleteClickHandler: this.#deleteClickHandler} as TrustTokensDeleteButtonData}\n    ></${TrustTokensDeleteButton.litTagName}>`;\n    // clang-format on\n  }\n}\n\nfunction removeTrailingSlash(s: string): string {\n  return s.replace(/\\/$/, '');\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-trust-tokens-delete-button', TrustTokensDeleteButton);\nComponentHelpers.CustomElements.defineComponent('devtools-trust-tokens-storage-view', TrustTokensView);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-trust-tokens-storage-view': TrustTokensView;\n    'devtools-trust-tokens-delete-button': TrustTokensDeleteButton;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
