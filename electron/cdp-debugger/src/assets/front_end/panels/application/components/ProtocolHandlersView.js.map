{
  "version": 3,
  "sources": ["../../../../../../../front_end/panels/application/components/ProtocolHandlersView.ts"],
  "sourcesContent": ["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../../core/host/host.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as Buttons from '../../../ui/components/buttons/buttons.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as IconButton from '../../../ui/components/icon_button/icon_button.js';\nimport * as Input from '../../../ui/components/input/input.js';\n// inspectorCommonStyles is imported for the chrome-select class that is used for the dropdown\n// eslint-disable-next-line rulesdir/es_modules_import\nimport inspectorCommonStyles from '../../../ui/legacy/inspectorCommon.css.js';\nimport * as UI from '../../../ui/legacy/legacy.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\n\nimport protocolHandlersViewStyles from './protocolHandlersView.css.js';\n\nconst PROTOCOL_DOCUMENT_URL = 'https://web.dev/url-protocol-handler/';\nconst UIStrings = {\n  /**\n *@description Status message for when protocol handlers are detected in the manifest\n *@example {protocolhandler/manifest.json} PH1\n */\n  protocolDetected:\n      'Found valid protocol handler registration in the {PH1}. With the app installed, test the registered protocols.',\n  /**\n *@description Status message for when protocol handlers are not detected in the manifest\n *@example {protocolhandler/manifest.json} PH1\n */\n  protocolNotDetected:\n      'Define protocol handlers in the {PH1} to register your app as a handler for custom protocols when your app is installed.',\n  /**\n *@description Text wrapping a link pointing to more information on handling protocol handlers\n *@example {https://example.com/} PH1\n */\n  needHelpReadOur: 'Need help? Read {PH1}.',\n  /**\n *@description Link text for more information on URL protocol handler registrations for PWAs\n */\n  protocolHandlerRegistrations: 'URL protocol handler registration for PWAs',\n  /**\n *@description In text hyperlink to the PWA manifest\n */\n  manifest: 'manifest',\n  /**\n *@description Text for test protocol button\n */\n  testProtocol: 'Test protocol',\n  /**\n  * @description Aria text for screen reader to announce they can select a protocol handler in the dropdown\n  */\n  dropdownLabel: 'Select protocol handler',\n  /**\n  * @description Aria text for screen reader to announce they can enter query parameters or endpoints into the textbox\n  */\n  textboxLabel: 'Query parameter or endpoint for protocol handler',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/application/components/ProtocolHandlersView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ninterface HTMLSelectElementEvent extends Event {\n  target: HTMLSelectElement;\n}\n\ninterface HTMLInputElementEvent extends Event {\n  target: HTMLInputElement;\n}\n\nexport interface ProtocolHandler {\n  protocol: string;\n  url: string;\n}\n\nexport interface ProtocolHandlersData {\n  protocolHandlers: ProtocolHandler[];\n  manifestLink: Platform.DevToolsPath.UrlString;\n}\n\nexport class ProtocolHandlersView extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-protocol-handlers-view`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #protocolHandlers: ProtocolHandler[] = [];\n  #manifestLink: Platform.DevToolsPath.UrlString = Platform.DevToolsPath.EmptyUrlString;\n  #selectedProtocolState: string = '';\n  #queryInputState: string = '';\n\n  set data(data: ProtocolHandlersData) {\n    const isNewManifest = this.#manifestLink !== data.manifestLink;\n    this.#protocolHandlers = data.protocolHandlers;\n    this.#manifestLink = data.manifestLink;\n    if (isNewManifest) {\n      this.#update();\n    }\n  }\n\n  #update(): void {\n    this.#queryInputState = '';\n    this.#selectedProtocolState = this.#protocolHandlers[0]?.protocol ?? '';\n    this.#render();\n  }\n\n  #renderStatusMessage(): LitHtml.TemplateResult {\n    const manifestInTextLink = UI.XLink.XLink.create(this.#manifestLink, i18nString(UIStrings.manifest));\n    const statusString = this.#protocolHandlers.length > 0 ? UIStrings.protocolDetected : UIStrings.protocolNotDetected;\n    const iconData: IconButton.Icon.IconData = {\n      iconName: this.#protocolHandlers.length > 0 ? 'ic_checkmark_16x16' : 'ic_info_black_18dp',\n      color: this.#protocolHandlers.length > 0 ? 'var( --color-ic-file-image)' : 'var(--color-link)',\n      width: '16px',\n    };\n    return LitHtml.html`\n    <div class=\"protocol-handlers-row status\">\n            <${IconButton.Icon.Icon.litTagName} class=\"inline-icon\" .data=${iconData as IconButton.Icon.IconData}>\n            </${IconButton.Icon.Icon.litTagName}>\n            ${i18n.i18n.getFormatLocalizedString(str_, statusString, {\n      PH1: manifestInTextLink,\n    })}\n    </div>\n    `;\n  }\n\n  #renderProtocolTest(): LitHtml.LitTemplate {\n    if (this.#protocolHandlers.length === 0) {\n      return LitHtml.nothing;\n    }\n    const protocolOptions = this.#protocolHandlers.filter(p => p.protocol)\n                                .map(p => LitHtml.html`<option value=${p.protocol}>${p.protocol}://</option>`);\n    return LitHtml.html`\n       <div class=\"protocol-handlers-row\">\n        <select class=\"chrome-select protocol-select\" @change=${this.#handleProtocolSelect} aria-label=${\n        i18nString(UIStrings.dropdownLabel)}>\n           ${protocolOptions}\n        </select>\n        <input .value=${this.#queryInputState} class=\"devtools-text-input\" type=\"text\" @change=${\n        this.#handleQueryInputChange} aria-label=${i18nString(UIStrings.textboxLabel)}/>\n        <${Buttons.Button.Button.litTagName} .variant=${Buttons.Button.Variant.PRIMARY} @click=${\n        this.#handleTestProtocolClick}>\n            ${i18nString(UIStrings.testProtocol)}\n        </${Buttons.Button.Button.litTagName}>\n        </div>\n      `;\n  }\n\n  #handleProtocolSelect = (evt: HTMLSelectElementEvent): void => {\n    this.#selectedProtocolState = evt.target.value;\n  };\n\n  #handleQueryInputChange = (evt: HTMLInputElementEvent): void => {\n    this.#queryInputState = evt.target.value;\n    this.#render();\n  };\n\n  #handleTestProtocolClick = (): void => {\n    const protocolURL = `${this.#selectedProtocolState}://${this.#queryInputState}` as Platform.DevToolsPath.UrlString;\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.openInNewTab(protocolURL);\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.CaptureTestProtocolClicked);\n  };\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [\n      protocolHandlersViewStyles,\n      inspectorCommonStyles,\n      Input.textInputStyles,\n    ];\n  }\n\n  #render(): void {\n    const protocolDocLink =\n        UI.XLink.XLink.create(PROTOCOL_DOCUMENT_URL, i18nString(UIStrings.protocolHandlerRegistrations));\n    // clang-format off\n    LitHtml.render(LitHtml.html`\n      ${this.#renderStatusMessage()}\n      <div class=\"protocol-handlers-row\">\n          ${i18n.i18n.getFormatLocalizedString(str_, UIStrings.needHelpReadOur, {PH1: protocolDocLink})}\n      </div>\n      ${this.#renderProtocolTest()}\n    `, this.#shadow, {host: this});\n    // clang-format on\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-protocol-handlers-view', ProtocolHandlersView);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-protocol-handlers-view': ProtocolHandlersView;\n  }\n}\n"],
  "mappings": "AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA,MAAM,wBAAwB;AAC9B,MAAM,YAAY;AAAA,EAKhB,kBACI;AAAA,EAKJ,qBACI;AAAA,EAKJ,iBAAiB;AAAA,EAIjB,8BAA8B;AAAA,EAI9B,UAAU;AAAA,EAIV,cAAc;AAAA,EAId,eAAe;AAAA,EAIf,cAAc;AAAA;AAGhB,MAAM,OAAO,KAAK,KAAK,kBAAkB,yDAAyD;AAClG,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAoBzD,0CAAmC,YAAY;AAAA,SACpC,aAAa,QAAQ;AAAA,YAClB,KAAK,aAAa,EAAC,MAAM;AAAA,sBACL;AAAA,kBACU,SAAS,aAAa;AAAA,2BACtC;AAAA,qBACN;AAAA,MAEvB,KAAK,MAA4B;AACnC,UAAM,gBAAgB,uBAAuB,KAAK;AAClD,6BAAyB,KAAK;AAC9B,yBAAqB,KAAK;AAC1B,QAAI,eAAe;AACjB;AAAA;AAAA;AAAA,YAIY;AACd,4BAAwB;AACxB,kCAA8B,uBAAuB,IAAI,YAAY;AACrE;AAAA;AAAA,yBAG6C;AAC7C,UAAM,qBAAqB,GAAG,MAAM,MAAM,OAAO,oBAAoB,WAAW,UAAU;AAC1F,UAAM,eAAe,uBAAuB,SAAS,IAAI,UAAU,mBAAmB,UAAU;AAChG,UAAM,WAAqC;AAAA,MACzC,UAAU,uBAAuB,SAAS,IAAI,uBAAuB;AAAA,MACrE,OAAO,uBAAuB,SAAS,IAAI,gCAAgC;AAAA,MAC3E,OAAO;AAAA;AAET,WAAO,QAAQ;AAAA;AAAA,eAEJ,WAAW,KAAK,KAAK,wCAAwC;AAAA,gBAC5D,WAAW,KAAK,KAAK;AAAA,cACvB,KAAK,KAAK,yBAAyB,MAAM,cAAc;AAAA,MAC/D,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA,wBAMkC;AACzC,QAAI,uBAAuB,WAAW,GAAG;AACvC,aAAO,QAAQ;AAAA;AAEjB,UAAM,kBAAkB,uBAAuB,OAAO,OAAK,EAAE,UAChC,IAAI,OAAK,QAAQ,qBAAqB,EAAE,YAAY,EAAE;AACnF,WAAO,QAAQ;AAAA;AAAA,gEAE6C,yCACxD,WAAW,UAAU;AAAA,aAChB;AAAA;AAAA,wBAEW,yEAChB,2CAA2C,WAAW,UAAU;AAAA,WAC7D,QAAQ,OAAO,OAAO,uBAAuB,QAAQ,OAAO,QAAQ,kBACvE;AAAA,cACM,WAAW,UAAU;AAAA,YACvB,QAAQ,OAAO,OAAO;AAAA;AAAA;AAAA;AAAA,0BAKR,CAAC,QAAsC;AAC7D,kCAA8B,IAAI,OAAO;AAAA;AAAA,4BAGjB,CAAC,QAAqC;AAC9D,4BAAwB,IAAI,OAAO;AACnC;AAAA;AAAA,6BAGyB,MAAY;AACrC,UAAM,cAAc,GAAG,iCAAiC;AACxD,SAAK,sBAAsB,8BAA8B,aAAa;AACtE,SAAK,YAAY,YAAY,KAAK,YAAY,OAAO;AAAA;AAAA,EAGvD,oBAA0B;AACxB,iBAAa,qBAAqB;AAAA,MAChC;AAAA,MACA;AAAA,MACA,MAAM;AAAA;AAAA;AAAA,YAIM;AACd,UAAM,kBACF,GAAG,MAAM,MAAM,OAAO,uBAAuB,WAAW,UAAU;AAEtE,YAAQ,OAAO,QAAQ;AAAA,QACnB;AAAA;AAAA,YAEI,KAAK,KAAK,yBAAyB,MAAM,UAAU,iBAAiB,EAAC,KAAK;AAAA;AAAA,QAE9E;AAAA,OACD,cAAc,EAAC,MAAM;AAAA;AAAA;AAK5B,iBAAiB,eAAe,gBAAgB,mCAAmC;",
  "names": []
}
