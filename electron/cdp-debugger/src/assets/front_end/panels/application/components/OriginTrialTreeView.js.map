{
  "version": 3,
  "sources": ["../../../../../../../front_end/panels/application/components/OriginTrialTreeView.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Protocol from '../../../generated/protocol.js';\nimport * as Adorners from '../../../ui/components/adorners/adorners.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as TreeOutline from '../../../ui/components/tree_outline/tree_outline.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\n\nimport badgeStyles from './badge.css.js';\nimport originTrialTokenRowsStyles from './originTrialTokenRows.css.js';\nimport originTrialTreeViewStyles from './originTrialTreeView.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Label for the 'origin' field in a parsed Origin Trial Token.\n  */\n  origin: 'Origin',\n  /**\n   *@description Label for `trialName` field in a parsed Origin Trial Token.\n   * This field is only shown when token has unknown trial name as the token\n   * will be put into 'UNKNOWN' group.\n   */\n  trialName: 'Trial Name',\n  /**\n   *@description Label for `expiryTime` field in a parsed Origin Trial Token.\n   */\n  expiryTime: 'Expiry Time',\n  /**\n   *@description Label for `usageRestriction` field in a parsed Origin Trial Token.\n   */\n  usageRestriction: 'Usage Restriction',\n  /**\n   *@description Label for `isThirdParty` field in a parsed Origin Trial Token.\n   */\n  isThirdParty: 'Third Party',\n  /**\n   *@description Label for a field containing info about an Origin Trial Token's `matchSubDomains` field.\n   *An Origin Trial Token contains an origin URL. The `matchSubDomains` field describes whether the token\n   *only applies to the origin URL or to all subdomains of the origin URL as well.\n   *The field contains either 'true' or 'false'.\n   */\n  matchSubDomains: 'Subdomain Matching',\n  /**\n   *@description Label for the raw(= encoded / not human-readable) Origin Trial Token.\n   */\n  rawTokenText: 'Raw Token',\n  /**\n   *@description Label for `status` field in an Origin Trial Token.\n   */\n  status: 'Token Status',\n  /**\n   *@description Label for tokenWithStatus node.\n   */\n  token: 'Token',\n  /**\n   *@description Label for a badge showing the number of Origin Trial Tokens. This number is always greater than 1.\n   *@example {2} PH1\n   */\n  tokens: '{PH1} tokens',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/components/OriginTrialTreeView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface BadgeData {\n  badgeContent: string;\n  style: 'error'|'success'|'secondary';\n}\n\nexport class Badge extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-resources-origin-trial-tree-view-badge`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #adorner = new Adorners.Adorner.Adorner();\n\n  set data(data: BadgeData) {\n    this.#render(data);\n  }\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [badgeStyles];\n  }\n\n  #render(data: BadgeData): void {\n    const adornerContent = document.createElement('span');\n    adornerContent.textContent = data.badgeContent;\n    this.#adorner.data = {\n      name: 'badge',\n      content: adornerContent,\n    };\n    this.#adorner.classList.add(`badge-${data.style}`);\n\n    LitHtml.render(\n        LitHtml.html`\n      ${this.#adorner}\n    `,\n        this.#shadow, {host: this});\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-resources-origin-trial-tree-view-badge', Badge);\n\ntype TreeNode<DataType> = TreeOutline.TreeOutlineUtils.TreeNode<DataType>;\n\n// The Origin Trial Tree has 4 levels of content:\n// - Origin Trial (has multiple Origin Trial tokens)\n// - Origin Trial Token (has only 1 raw token text)\n// - Fields in Origin Trial Token\n// - Raw Origin Trial Token text (folded because the content is long)\nexport type OriginTrialTreeNodeData = Protocol.Page.OriginTrial|Protocol.Page.OriginTrialTokenWithStatus|string;\n\nfunction constructOriginTrialTree(originTrial: Protocol.Page.OriginTrial): TreeNode<OriginTrialTreeNodeData> {\n  return {\n    treeNodeData: originTrial,\n    id: 'OriginTrialTreeNode#' + originTrial.trialName,\n    children: async(): Promise<TreeNode<OriginTrialTreeNodeData>[]> => originTrial.tokensWithStatus.length > 1 ?\n        originTrial.tokensWithStatus.map(constructTokenNode) :\n        constructTokenDetailsNodes(originTrial.tokensWithStatus[0]),\n    renderer: (node: TreeNode<OriginTrialTreeNodeData>): LitHtml.TemplateResult => {\n      const trial = node.treeNodeData as Protocol.Page.OriginTrial;\n      const tokenCountBadge = LitHtml.html`\n        <${Badge.litTagName} .data=${{\n        badgeContent: i18nString(UIStrings.tokens, {PH1: trial.tokensWithStatus.length}),\n        style: 'secondary',\n      } as BadgeData}></${Badge.litTagName}>\n      `;\n\n      return LitHtml.html`\n        ${trial.trialName}\n        <${Badge.litTagName} .data=${{\n        badgeContent: trial.status,\n        style: trial.status === Protocol.Page.OriginTrialStatus.Enabled ? 'success' : 'error',\n      } as BadgeData}></${Badge.litTagName}>\n        ${trial.tokensWithStatus.length > 1 ? tokenCountBadge : LitHtml.nothing}\n      `;\n    },\n  };\n}\n\nfunction constructTokenNode(token: Protocol.Page.OriginTrialTokenWithStatus): TreeNode<OriginTrialTreeNodeData> {\n  return {\n    treeNodeData: token.status,\n    id: 'TokenNode#' + token.rawTokenText,\n    children: async(): Promise<TreeNode<OriginTrialTreeNodeData>[]> => constructTokenDetailsNodes(token),\n    renderer: (node: TreeNode<OriginTrialTreeNodeData>, state: {isExpanded: boolean}): LitHtml.TemplateResult => {\n      const tokenStatus = node.treeNodeData as string;\n      const statusBadge = LitHtml.html`\n        <${Badge.litTagName} .data=${{\n        badgeContent: tokenStatus,\n        style: tokenStatus === Protocol.Page.OriginTrialTokenStatus.Success ? 'success' : 'error',\n      } as BadgeData}></${Badge.litTagName}>\n      `;\n      // Only display token status for convenience when the node is not expanded.\n      return LitHtml.html`${i18nString(UIStrings.token)} ${state.isExpanded ? LitHtml.nothing : statusBadge}`;\n    },\n  };\n}\n\ninterface TokenField {\n  name: string;\n  value: LitHtml.TemplateResult;\n}\n\nfunction renderTokenDetails(node: TreeNode<OriginTrialTreeNodeData>): LitHtml.TemplateResult {\n  return LitHtml.html`\n    <${OriginTrialTokenRows.litTagName} .data=${{node: node} as OriginTrialTokenRowsData}>\n    </${OriginTrialTokenRows.litTagName}>\n    `;\n}\n\nfunction constructTokenDetailsNodes(token: Protocol.Page.OriginTrialTokenWithStatus):\n    TreeNode<OriginTrialTreeNodeData>[] {\n  return [\n    {\n      treeNodeData: token,\n      id: 'TokenDetailsNode#' + token.rawTokenText,\n      renderer: renderTokenDetails,\n    },\n    constructRawTokenTextNode(token.rawTokenText),\n  ];\n}\n\nfunction constructRawTokenTextNode(tokenText: string): TreeNode<OriginTrialTreeNodeData> {\n  return {\n    treeNodeData: i18nString(UIStrings.rawTokenText),\n    id: 'TokenRawTextContainerNode#' + tokenText,\n    children: async(): Promise<TreeNode<OriginTrialTreeNodeData>[]> => [{\n      treeNodeData: tokenText,\n      id: 'TokenRawTextNode#' + tokenText,\n      renderer: (data: TreeNode<OriginTrialTreeNodeData>): LitHtml.TemplateResult => {\n        const tokenText = data.treeNodeData as string;\n        return LitHtml.html`\n        <div style=\"overflow-wrap: break-word;\">\n          ${tokenText}\n        </div>\n        `;\n      },\n    }],\n  };\n}\n\nfunction defaultRenderer(node: TreeNode<OriginTrialTreeNodeData>): LitHtml.TemplateResult {\n  return LitHtml.html`${String(node.treeNodeData)}`;\n}\n\nexport interface OriginTrialTokenRowsData {\n  node: TreeNode<OriginTrialTreeNodeData>;\n}\n\nexport class OriginTrialTokenRows extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-resources-origin-trial-token-rows`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #tokenWithStatus: Protocol.Page.OriginTrialTokenWithStatus|null = null;\n  #parsedTokenDetails: TokenField[] = [];\n  #dateFormatter: Intl.DateTimeFormat = new Intl.DateTimeFormat(\n      i18n.DevToolsLocale.DevToolsLocale.instance().locale,\n      {dateStyle: 'long', timeStyle: 'long'},\n  );\n\n  set data(data: OriginTrialTokenRowsData) {\n    this.#tokenWithStatus = data.node.treeNodeData as Protocol.Page.OriginTrialTokenWithStatus;\n    this.#setTokenFields();\n  }\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [originTrialTokenRowsStyles];\n    this.#render();\n  }\n\n  #renderTokenField = (fieldValue: string, hasError?: boolean): LitHtml.TemplateResult => LitHtml.html`\n        <div class=${LitHtml.Directives.ifDefined(hasError ? 'error-text' : undefined)}>\n          ${fieldValue}\n        </div>`;\n\n  #setTokenFields(): void {\n    if (!this.#tokenWithStatus?.parsedToken) {\n      return;\n    }\n    this.#parsedTokenDetails = [\n      {\n        name: i18nString(UIStrings.origin),\n        value: this.#renderTokenField(\n            this.#tokenWithStatus.parsedToken.origin,\n            this.#tokenWithStatus.status === Protocol.Page.OriginTrialTokenStatus.WrongOrigin),\n      },\n      {\n        name: i18nString(UIStrings.expiryTime),\n        value: this.#renderTokenField(\n            this.#dateFormatter.format(this.#tokenWithStatus.parsedToken.expiryTime * 1000),\n            this.#tokenWithStatus.status === Protocol.Page.OriginTrialTokenStatus.Expired),\n      },\n      {\n        name: i18nString(UIStrings.usageRestriction),\n        value: this.#renderTokenField(this.#tokenWithStatus.parsedToken.usageRestriction),\n      },\n      {\n        name: i18nString(UIStrings.isThirdParty),\n        value: this.#renderTokenField(this.#tokenWithStatus.parsedToken.isThirdParty.toString()),\n      },\n      {\n        name: i18nString(UIStrings.matchSubDomains),\n        value: this.#renderTokenField(this.#tokenWithStatus.parsedToken.matchSubDomains.toString()),\n      },\n    ];\n\n    if (this.#tokenWithStatus.status === Protocol.Page.OriginTrialTokenStatus.UnknownTrial) {\n      this.#parsedTokenDetails = [\n        {\n          name: i18nString(UIStrings.trialName),\n          value: this.#renderTokenField(this.#tokenWithStatus.parsedToken.trialName),\n        },\n        ...this.#parsedTokenDetails,\n      ];\n    }\n  }\n\n  #render(): void {\n    if (!this.#tokenWithStatus) {\n      return;\n    }\n\n    const tokenDetails: TokenField[] = [\n      {\n        name: i18nString(UIStrings.status),\n        value: LitHtml.html`\n          <${Badge.litTagName} .data=${{\n          badgeContent: this.#tokenWithStatus.status,\n          style: this.#tokenWithStatus.status === Protocol.Page.OriginTrialTokenStatus.Success ? 'success' : 'error',\n        } as BadgeData}></${Badge.litTagName}>`,\n      },\n      ...this.#parsedTokenDetails,\n    ];\n\n    const tokenDetailRows = tokenDetails.map((field: TokenField): LitHtml.TemplateResult => {\n      return LitHtml.html`\n          <div class=\"key\">${field.name}</div>\n          <div class=\"value\">${field.value}</div>\n          `;\n    });\n\n    LitHtml.render(\n        LitHtml.html`\n      <div class=\"content\">\n        ${tokenDetailRows}\n      </div>\n    `,\n        this.#shadow, {host: this});\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-resources-origin-trial-token-rows', OriginTrialTokenRows);\n\nexport interface OriginTrialTreeViewData {\n  trials: Protocol.Page.OriginTrial[];\n}\n\nexport class OriginTrialTreeView extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-resources-origin-trial-tree-view`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n\n  set data(data: OriginTrialTreeViewData) {\n    this.#render(data.trials);\n  }\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [originTrialTreeViewStyles];\n  }\n\n  #render(trials: Protocol.Page.OriginTrial[]): void {\n    if (!trials.length) {\n      return;\n    }\n\n    LitHtml.render(\n        LitHtml.html`\n      <${TreeOutline.TreeOutline.TreeOutline.litTagName} .data=${{\n          tree: trials.map(constructOriginTrialTree),\n          defaultRenderer,\n        } as TreeOutline.TreeOutline.TreeOutlineData<OriginTrialTreeNodeData>}>\n      </${TreeOutline.TreeOutline.TreeOutline.litTagName}>\n    `,\n        this.#shadow, {host: this});\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-resources-origin-trial-tree-view', OriginTrialTreeView);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-resources-origin-trial-tree-view': OriginTrialTreeView;\n    'devtools-resources-origin-trial-token-rows': OriginTrialTokenRows;\n    'devtools-resources-origin-trial-tree-view-badge': Badge;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
