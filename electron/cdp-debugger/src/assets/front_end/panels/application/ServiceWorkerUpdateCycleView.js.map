{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/application/ServiceWorkerUpdateCycleView.ts"],
  "sourcesContent": ["// Copyright (c) 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Indexed DBViews of the Application panel\n  */\n  version: 'Version',\n  /**\n  *@description Table heading for Service Workers update information. Update is a noun.\n  */\n  updateActivity: 'Update Activity',\n  /**\n  *@description Title for the timeline tab.\n  */\n  timeline: 'Timeline',\n  /**\n  *@description Text in Service Workers Update Life Cycle\n  *@example {2} PH1\n  */\n  startTimeS: 'Start time: {PH1}',\n  /**\n  *@description Text for end time of an event\n  *@example {2} PH1\n  */\n  endTimeS: 'End time: {PH1}',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/ServiceWorkerUpdateCycleView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class ServiceWorkerUpdateCycleView {\n  private registration: SDK.ServiceWorkerManager.ServiceWorkerRegistration;\n  private rows: Array<HTMLTableRowElement>;\n  private selectedRowIndex: number;\n  tableElement: HTMLElement;\n  constructor(registration: SDK.ServiceWorkerManager.ServiceWorkerRegistration) {\n    this.registration = registration;\n    this.rows = [];\n    this.selectedRowIndex = -1;\n    this.tableElement = document.createElement('table');\n    this.createTimingTable();\n  }\n\n  calculateServiceWorkerUpdateRanges(): Array<ServiceWorkerUpdateRange> {\n    function addRange(ranges: Array<ServiceWorkerUpdateRange>, range: ServiceWorkerUpdateRange): void {\n      if (range.start < Number.MAX_VALUE && range.start <= range.end) {\n        ranges.push(range);\n      }\n    }\n\n    /**\n     * Add ranges representing Install, Wait or Activate of a sw version represented by id.\n     */\n    function addNormalizedRanges(\n        ranges: Array<ServiceWorkerUpdateRange>, id: string, startInstallTime: number, endInstallTime: number,\n        startActivateTime: number, endActivateTime: number,\n        status: Protocol.ServiceWorker.ServiceWorkerVersionStatus): void {\n      addRange(ranges, {id, phase: ServiceWorkerUpdateNames.Install, start: startInstallTime, end: endInstallTime});\n      if (status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activating ||\n          status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activated ||\n          status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Redundant) {\n        addRange(ranges, {\n          id,\n          phase: ServiceWorkerUpdateNames.Wait,\n          start: endInstallTime,\n          end: startActivateTime,\n        });\n        addRange(\n            ranges, {id, phase: ServiceWorkerUpdateNames.Activate, start: startActivateTime, end: endActivateTime});\n      }\n    }\n\n    function rangesForVersion(version: SDK.ServiceWorkerManager.ServiceWorkerVersion): Array<ServiceWorkerUpdateRange> {\n      let state: SDK.ServiceWorkerManager.ServiceWorkerVersionState|null = version.currentState;\n      let endActivateTime: number = 0;\n      let beginActivateTime: number = 0;\n      let endInstallTime: number = 0;\n      let beginInstallTime: number = 0;\n      const currentStatus = state.status;\n      if (currentStatus === Protocol.ServiceWorker.ServiceWorkerVersionStatus.New) {\n        return [];\n      }\n\n      while (state) {\n        // find the earliest timestamp of different stage on record.\n        if (state.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activated) {\n          endActivateTime = state.last_updated_timestamp;\n        } else if (state.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activating) {\n          if (endActivateTime === 0) {\n            endActivateTime = state.last_updated_timestamp;\n          }\n          beginActivateTime = state.last_updated_timestamp;\n        } else if (state.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installed) {\n          endInstallTime = state.last_updated_timestamp;\n        } else if (state.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installing) {\n          if (endInstallTime === 0) {\n            endInstallTime = state.last_updated_timestamp;\n          }\n          beginInstallTime = state.last_updated_timestamp;\n        }\n        state = state.previousState;\n      }\n      const ranges: Array<ServiceWorkerUpdateRange> = [];\n      addNormalizedRanges(\n          ranges, version.id, beginInstallTime, endInstallTime, beginActivateTime, endActivateTime, currentStatus);\n      return ranges;\n    }\n\n    const versions = this.registration.versionsByMode();\n    const modes = [\n      SDK.ServiceWorkerManager.ServiceWorkerVersion.Modes.Active,\n      SDK.ServiceWorkerManager.ServiceWorkerVersion.Modes.Waiting,\n      SDK.ServiceWorkerManager.ServiceWorkerVersion.Modes.Installing,\n      SDK.ServiceWorkerManager.ServiceWorkerVersion.Modes.Redundant,\n    ];\n\n    for (const mode of modes) {\n      const version = versions.get(mode);\n      if (version) {\n        const ranges = rangesForVersion(version);\n        return ranges;\n      }\n    }\n\n    return [];\n  }\n\n  private createTimingTable(): void {\n    this.tableElement.classList.add('service-worker-update-timing-table');\n    const timeRanges = this.calculateServiceWorkerUpdateRanges();\n    this.updateTimingTable(timeRanges);\n  }\n\n  private createTimingTableHead(): void {\n    const serverHeader = this.tableElement.createChild('tr', 'service-worker-update-timing-table-header');\n    UI.UIUtils.createTextChild(serverHeader.createChild('td'), i18nString(UIStrings.version));\n    UI.UIUtils.createTextChild(serverHeader.createChild('td'), i18nString(UIStrings.updateActivity));\n    UI.UIUtils.createTextChild(serverHeader.createChild('td'), i18nString(UIStrings.timeline));\n  }\n\n  private removeRows(): void {\n    const rows = this.tableElement.getElementsByTagName('tr');\n    while (rows[0]) {\n      if (rows[0].parentNode) {\n        rows[0].parentNode.removeChild(rows[0]);\n      }\n    }\n    this.rows = [];\n  }\n\n  private updateTimingTable(timeRanges: Array<ServiceWorkerUpdateRange>): void {\n    this.selectedRowIndex = -1;\n    this.removeRows();\n    this.createTimingTableHead();\n    const timeRangeArray = timeRanges;\n    if (timeRangeArray.length === 0) {\n      return;\n    }\n\n    const startTimes = timeRangeArray.map(r => r.start);\n    const endTimes = timeRangeArray.map(r => r.end);\n    const startTime = startTimes.reduce((a, b) => Math.min(a, b));\n    const endTime = endTimes.reduce((a, b) => Math.max(a, b));\n    const scale = 100 / (endTime - startTime);\n\n    for (const range of timeRangeArray) {\n      const phaseName = range.phase;\n\n      const left = (scale * (range.start - startTime));\n      const right = (scale * (endTime - range.end));\n\n      const tr = this.tableElement.createChild('tr', 'service-worker-update-timeline');\n      this.rows.push(tr as HTMLTableRowElement);\n      const timingBarVersionElement = tr.createChild('td');\n      UI.UIUtils.createTextChild(timingBarVersionElement, '#' + range.id);\n      timingBarVersionElement.classList.add('service-worker-update-timing-bar-clickable');\n      timingBarVersionElement.setAttribute('tabindex', '0');\n      timingBarVersionElement.setAttribute('role', 'switch');\n      timingBarVersionElement.addEventListener('focus', (event: Event) => {\n        this.onFocus(event);\n      });\n      UI.ARIAUtils.setChecked(timingBarVersionElement, false);\n      const timingBarTitleElement = tr.createChild('td');\n      UI.UIUtils.createTextChild(timingBarTitleElement, phaseName);\n      const barContainer = tr.createChild('td').createChild('div', 'service-worker-update-timing-row');\n\n      const bar = barContainer.createChild('span', 'service-worker-update-timing-bar ' + phaseName.toLowerCase());\n\n      bar.style.left = left + '%';\n      bar.style.right = right + '%';\n      bar.textContent = '\\u200B';  // Important for 0-time items to have 0 width.\n\n      this.constructUpdateDetails(tr, range);\n    }\n  }\n\n  /**\n   * Detailed information about an update phase. Currently starting and ending time.\n   */\n  private constructUpdateDetails(tr: HTMLElement, range: ServiceWorkerUpdateRange): void {\n    const startRow = this.tableElement.createChild('tr', 'service-worker-update-timing-bar-details');\n    startRow.classList.add('service-worker-update-timing-bar-details-collapsed');\n    const startTimeItem = startRow.createChild('td') as HTMLTableCellElement;\n    startTimeItem.colSpan = 3;\n    const startTime = (new Date(range.start)).toISOString();\n    UI.UIUtils.createTextChild(startTimeItem.createChild('span'), i18nString(UIStrings.startTimeS, {PH1: startTime}));\n    startRow.tabIndex = 0;\n\n    const endRow = this.tableElement.createChild('tr', 'service-worker-update-timing-bar-details');\n    endRow.classList.add('service-worker-update-timing-bar-details-collapsed');\n    const endTimeItem = endRow.createChild('td') as HTMLTableCellElement;\n    endTimeItem.colSpan = 3;\n    const endTime = (new Date(range.end)).toISOString();\n    UI.UIUtils.createTextChild(endTimeItem.createChild('span'), i18nString(UIStrings.endTimeS, {PH1: endTime}));\n    endRow.tabIndex = 0;\n\n    tr.addEventListener('keydown', (event: Event) => {\n      this.onKeydown(event, startRow, endRow);\n    });\n\n    tr.addEventListener('click', (event: Event) => {\n      this.onClick(event, startRow, endRow);\n    });\n  }\n\n  private toggle(startRow: Element, endRow: Element, target: Element, expanded: boolean): void {\n    if (target.classList.contains('service-worker-update-timing-bar-clickable')) {\n      startRow.classList.toggle('service-worker-update-timing-bar-details-collapsed');\n      startRow.classList.toggle('service-worker-update-timing-bar-details-expanded');\n      endRow.classList.toggle('service-worker-update-timing-bar-details-collapsed');\n      endRow.classList.toggle('service-worker-update-timing-bar-details-expanded');\n      UI.ARIAUtils.setChecked(target, !expanded);\n    }\n  }\n\n  private onFocus(event: Event): void {\n    const target = event.target as HTMLElement | null;\n    if (!target) {\n      return;\n    }\n    const tr = target.parentElement as HTMLTableRowElement | null;\n    if (!tr) {\n      return;\n    }\n\n    this.selectedRowIndex = this.rows.indexOf(tr);\n  }\n\n  private onKeydown(event: Event, startRow: HTMLElement, endRow: HTMLElement): void {\n    if (!event.target) {\n      return;\n    }\n    const target: HTMLElement = event.target as HTMLElement;\n    const keyboardEvent = event as KeyboardEvent;\n    const expanded = target.getAttribute('aria-checked') === 'true';\n\n    if (keyboardEvent.key === 'Enter' || keyboardEvent.key === ' ') {\n      this.toggle(startRow, endRow, target, expanded);\n      event.preventDefault();\n      return;\n    }\n    if ((!expanded && keyboardEvent.key === 'ArrowRight') || (expanded && keyboardEvent.key === 'ArrowLeft')) {\n      this.toggle(startRow, endRow, target, expanded);\n      event.preventDefault();\n      return;\n    }\n    if (keyboardEvent.key === 'ArrowDown') {\n      if (this.selectedRowIndex >= 0) {\n        this.selectNextRow();\n      } else {\n        this.selectFirstRow();\n      }\n      event.preventDefault();\n    }\n    if (keyboardEvent.key === 'ArrowUp') {\n      if (this.selectedRowIndex >= 0) {\n        this.selectPreviousRow();\n      } else {\n        this.selectLastRow();\n      }\n      event.preventDefault();\n    }\n  }\n\n  private focusRow(row: HTMLTableRowElement): void {\n    row.cells[0].focus();\n  }\n\n  private blurRow(row: HTMLTableRowElement): void {\n    row.cells[0].blur();\n  }\n\n  private selectFirstRow(): void {\n    if (this.rows.length === 0) {\n      return;\n    }\n    this.selectedRowIndex = 0;\n    this.focusRow(this.rows[0]);\n  }\n\n  private selectLastRow(): void {\n    if (this.rows.length === 0) {\n      return;\n    }\n    this.selectedRowIndex = this.rows.length - 1;\n    this.focusRow(this.rows[this.selectedRowIndex]);\n  }\n\n  private selectNextRow(): void {\n    if (this.rows.length === 0) {\n      return;\n    }\n    const previousRowIndex = this.selectedRowIndex;\n    this.selectedRowIndex++;\n    if (this.selectedRowIndex >= this.rows.length) {\n      this.selectedRowIndex = 0;\n    }\n    this.blurRow(this.rows[previousRowIndex]);\n    this.focusRow(this.rows[this.selectedRowIndex]);\n  }\n\n  private selectPreviousRow(): void {\n    if (this.rows.length === 0) {\n      return;\n    }\n    const previousRowIndex = this.selectedRowIndex;\n    this.selectedRowIndex--;\n    if (this.selectedRowIndex < 0) {\n      this.selectedRowIndex = this.rows.length - 1;\n    }\n    this.blurRow(this.rows[previousRowIndex]);\n    this.focusRow(this.rows[this.selectedRowIndex]);\n  }\n\n  private onClick(event: Event, startRow: Element, endRow: Element): void {\n    const tr = event.target as Element;\n    if (!tr) {\n      return;\n    }\n\n    const expanded = tr.getAttribute('aria-checked') === 'true';\n    this.toggle(startRow, endRow, tr, expanded);\n    event.preventDefault();\n  }\n\n  refresh(): void {\n    const timeRanges = this.calculateServiceWorkerUpdateRanges();\n    this.updateTimingTable(timeRanges);\n  }\n}\n\nexport const enum ServiceWorkerUpdateNames {\n  Install = 'Install',\n  Wait = 'Wait',\n  Activate = 'Activate',\n}\n\nexport interface ServiceWorkerUpdateRange {\n  id: string;\n  phase: ServiceWorkerUpdateNames;\n  start: number;\n  end: number;\n}\n"],
  "mappings": "AAIA;AACA;AACA;AACA;AAEA,MAAM,YAAY;AAAA,EAIhB,SAAS;AAAA,EAIT,gBAAgB;AAAA,EAIhB,UAAU;AAAA,EAKV,YAAY;AAAA,EAKZ,UAAU;AAAA;AAEZ,MAAM,OAAO,KAAK,KAAK,kBAAkB,sDAAsD;AAC/F,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AACzD,0CAAmC;AAAA,EAChC;AAAA,EACA;AAAA,EACA;AAAA,EACR;AAAA,EACA,YAAY,cAAkE;AAC5E,SAAK,eAAe;AACpB,SAAK,OAAO;AACZ,SAAK,mBAAmB;AACxB,SAAK,eAAe,SAAS,cAAc;AAC3C,SAAK;AAAA;AAAA,EAGP,qCAAsE;AACpE,sBAAkB,QAAyC,OAAuC;AAChG,UAAI,MAAM,QAAQ,OAAO,aAAa,MAAM,SAAS,MAAM,KAAK;AAC9D,eAAO,KAAK;AAAA;AAAA;AAOhB,iCACI,QAAyC,IAAY,kBAA0B,gBAC/E,mBAA2B,iBAC3B,QAAiE;AACnE,eAAS,QAAQ,EAAC,IAAI,OAAO,yBAAyB,SAAS,OAAO,kBAAkB,KAAK;AAC7F,UAAI,WAAW,SAAS,cAAc,2BAA2B,cAC7D,WAAW,SAAS,cAAc,2BAA2B,aAC7D,WAAW,SAAS,cAAc,2BAA2B,WAAW;AAC1E,iBAAS,QAAQ;AAAA,UACf;AAAA,UACA,OAAO,yBAAyB;AAAA,UAChC,OAAO;AAAA,UACP,KAAK;AAAA;AAEP,iBACI,QAAQ,EAAC,IAAI,OAAO,yBAAyB,UAAU,OAAO,mBAAmB,KAAK;AAAA;AAAA;AAI9F,8BAA0B,SAAyF;AACjH,UAAI,QAAiE,QAAQ;AAC7E,UAAI,kBAA0B;AAC9B,UAAI,oBAA4B;AAChC,UAAI,iBAAyB;AAC7B,UAAI,mBAA2B;AAC/B,YAAM,gBAAgB,MAAM;AAC5B,UAAI,kBAAkB,SAAS,cAAc,2BAA2B,KAAK;AAC3E,eAAO;AAAA;AAGT,aAAO,OAAO;AAEZ,YAAI,MAAM,WAAW,SAAS,cAAc,2BAA2B,WAAW;AAChF,4BAAkB,MAAM;AAAA,mBACf,MAAM,WAAW,SAAS,cAAc,2BAA2B,YAAY;AACxF,cAAI,oBAAoB,GAAG;AACzB,8BAAkB,MAAM;AAAA;AAE1B,8BAAoB,MAAM;AAAA,mBACjB,MAAM,WAAW,SAAS,cAAc,2BAA2B,WAAW;AACvF,2BAAiB,MAAM;AAAA,mBACd,MAAM,WAAW,SAAS,cAAc,2BAA2B,YAAY;AACxF,cAAI,mBAAmB,GAAG;AACxB,6BAAiB,MAAM;AAAA;AAEzB,6BAAmB,MAAM;AAAA;AAE3B,gBAAQ,MAAM;AAAA;AAEhB,YAAM,SAA0C;AAChD,0BACI,QAAQ,QAAQ,IAAI,kBAAkB,gBAAgB,mBAAmB,iBAAiB;AAC9F,aAAO;AAAA;AAGT,UAAM,WAAW,KAAK,aAAa;AACnC,UAAM,QAAQ;AAAA,MACZ,IAAI,qBAAqB,qBAAqB,MAAM;AAAA,MACpD,IAAI,qBAAqB,qBAAqB,MAAM;AAAA,MACpD,IAAI,qBAAqB,qBAAqB,MAAM;AAAA,MACpD,IAAI,qBAAqB,qBAAqB,MAAM;AAAA;AAGtD,eAAW,QAAQ,OAAO;AACxB,YAAM,UAAU,SAAS,IAAI;AAC7B,UAAI,SAAS;AACX,cAAM,SAAS,iBAAiB;AAChC,eAAO;AAAA;AAAA;AAIX,WAAO;AAAA;AAAA,EAGD,oBAA0B;AAChC,SAAK,aAAa,UAAU,IAAI;AAChC,UAAM,aAAa,KAAK;AACxB,SAAK,kBAAkB;AAAA;AAAA,EAGjB,wBAA8B;AACpC,UAAM,eAAe,KAAK,aAAa,YAAY,MAAM;AACzD,OAAG,QAAQ,gBAAgB,aAAa,YAAY,OAAO,WAAW,UAAU;AAChF,OAAG,QAAQ,gBAAgB,aAAa,YAAY,OAAO,WAAW,UAAU;AAChF,OAAG,QAAQ,gBAAgB,aAAa,YAAY,OAAO,WAAW,UAAU;AAAA;AAAA,EAG1E,aAAmB;AACzB,UAAM,OAAO,KAAK,aAAa,qBAAqB;AACpD,WAAO,KAAK,IAAI;AACd,UAAI,KAAK,GAAG,YAAY;AACtB,aAAK,GAAG,WAAW,YAAY,KAAK;AAAA;AAAA;AAGxC,SAAK,OAAO;AAAA;AAAA,EAGN,kBAAkB,YAAmD;AAC3E,SAAK,mBAAmB;AACxB,SAAK;AACL,SAAK;AACL,UAAM,iBAAiB;AACvB,QAAI,eAAe,WAAW,GAAG;AAC/B;AAAA;AAGF,UAAM,aAAa,eAAe,IAAI,OAAK,EAAE;AAC7C,UAAM,WAAW,eAAe,IAAI,OAAK,EAAE;AAC3C,UAAM,YAAY,WAAW,OAAO,CAAC,GAAG,MAAM,KAAK,IAAI,GAAG;AAC1D,UAAM,UAAU,SAAS,OAAO,CAAC,GAAG,MAAM,KAAK,IAAI,GAAG;AACtD,UAAM,QAAQ,MAAO,WAAU;AAE/B,eAAW,SAAS,gBAAgB;AAClC,YAAM,YAAY,MAAM;AAExB,YAAM,OAAQ,QAAS,OAAM,QAAQ;AACrC,YAAM,QAAS,QAAS,WAAU,MAAM;AAExC,YAAM,KAAK,KAAK,aAAa,YAAY,MAAM;AAC/C,WAAK,KAAK,KAAK;AACf,YAAM,0BAA0B,GAAG,YAAY;AAC/C,SAAG,QAAQ,gBAAgB,yBAAyB,MAAM,MAAM;AAChE,8BAAwB,UAAU,IAAI;AACtC,8BAAwB,aAAa,YAAY;AACjD,8BAAwB,aAAa,QAAQ;AAC7C,8BAAwB,iBAAiB,SAAS,CAAC,UAAiB;AAClE,aAAK,QAAQ;AAAA;AAEf,SAAG,UAAU,WAAW,yBAAyB;AACjD,YAAM,wBAAwB,GAAG,YAAY;AAC7C,SAAG,QAAQ,gBAAgB,uBAAuB;AAClD,YAAM,eAAe,GAAG,YAAY,MAAM,YAAY,OAAO;AAE7D,YAAM,MAAM,aAAa,YAAY,QAAQ,sCAAsC,UAAU;AAE7F,UAAI,MAAM,OAAO,OAAO;AACxB,UAAI,MAAM,QAAQ,QAAQ;AAC1B,UAAI,cAAc;AAElB,WAAK,uBAAuB,IAAI;AAAA;AAAA;AAAA,EAO5B,uBAAuB,IAAiB,OAAuC;AACrF,UAAM,WAAW,KAAK,aAAa,YAAY,MAAM;AACrD,aAAS,UAAU,IAAI;AACvB,UAAM,gBAAgB,SAAS,YAAY;AAC3C,kBAAc,UAAU;AACxB,UAAM,YAAa,IAAI,KAAK,MAAM,OAAQ;AAC1C,OAAG,QAAQ,gBAAgB,cAAc,YAAY,SAAS,WAAW,UAAU,YAAY,EAAC,KAAK;AACrG,aAAS,WAAW;AAEpB,UAAM,SAAS,KAAK,aAAa,YAAY,MAAM;AACnD,WAAO,UAAU,IAAI;AACrB,UAAM,cAAc,OAAO,YAAY;AACvC,gBAAY,UAAU;AACtB,UAAM,UAAW,IAAI,KAAK,MAAM,KAAM;AACtC,OAAG,QAAQ,gBAAgB,YAAY,YAAY,SAAS,WAAW,UAAU,UAAU,EAAC,KAAK;AACjG,WAAO,WAAW;AAElB,OAAG,iBAAiB,WAAW,CAAC,UAAiB;AAC/C,WAAK,UAAU,OAAO,UAAU;AAAA;AAGlC,OAAG,iBAAiB,SAAS,CAAC,UAAiB;AAC7C,WAAK,QAAQ,OAAO,UAAU;AAAA;AAAA;AAAA,EAI1B,OAAO,UAAmB,QAAiB,QAAiB,UAAyB;AAC3F,QAAI,OAAO,UAAU,SAAS,+CAA+C;AAC3E,eAAS,UAAU,OAAO;AAC1B,eAAS,UAAU,OAAO;AAC1B,aAAO,UAAU,OAAO;AACxB,aAAO,UAAU,OAAO;AACxB,SAAG,UAAU,WAAW,QAAQ,CAAC;AAAA;AAAA;AAAA,EAI7B,QAAQ,OAAoB;AAClC,UAAM,SAAS,MAAM;AACrB,QAAI,CAAC,QAAQ;AACX;AAAA;AAEF,UAAM,KAAK,OAAO;AAClB,QAAI,CAAC,IAAI;AACP;AAAA;AAGF,SAAK,mBAAmB,KAAK,KAAK,QAAQ;AAAA;AAAA,EAGpC,UAAU,OAAc,UAAuB,QAA2B;AAChF,QAAI,CAAC,MAAM,QAAQ;AACjB;AAAA;AAEF,UAAM,SAAsB,MAAM;AAClC,UAAM,gBAAgB;AACtB,UAAM,WAAW,OAAO,aAAa,oBAAoB;AAEzD,QAAI,cAAc,QAAQ,WAAW,cAAc,QAAQ,KAAK;AAC9D,WAAK,OAAO,UAAU,QAAQ,QAAQ;AACtC,YAAM;AACN;AAAA;AAEF,QAAK,CAAC,YAAY,cAAc,QAAQ,gBAAkB,YAAY,cAAc,QAAQ,aAAc;AACxG,WAAK,OAAO,UAAU,QAAQ,QAAQ;AACtC,YAAM;AACN;AAAA;AAEF,QAAI,cAAc,QAAQ,aAAa;AACrC,UAAI,KAAK,oBAAoB,GAAG;AAC9B,aAAK;AAAA,aACA;AACL,aAAK;AAAA;AAEP,YAAM;AAAA;AAER,QAAI,cAAc,QAAQ,WAAW;AACnC,UAAI,KAAK,oBAAoB,GAAG;AAC9B,aAAK;AAAA,aACA;AACL,aAAK;AAAA;AAEP,YAAM;AAAA;AAAA;AAAA,EAIF,SAAS,KAAgC;AAC/C,QAAI,MAAM,GAAG;AAAA;AAAA,EAGP,QAAQ,KAAgC;AAC9C,QAAI,MAAM,GAAG;AAAA;AAAA,EAGP,iBAAuB;AAC7B,QAAI,KAAK,KAAK,WAAW,GAAG;AAC1B;AAAA;AAEF,SAAK,mBAAmB;AACxB,SAAK,SAAS,KAAK,KAAK;AAAA;AAAA,EAGlB,gBAAsB;AAC5B,QAAI,KAAK,KAAK,WAAW,GAAG;AAC1B;AAAA;AAEF,SAAK,mBAAmB,KAAK,KAAK,SAAS;AAC3C,SAAK,SAAS,KAAK,KAAK,KAAK;AAAA;AAAA,EAGvB,gBAAsB;AAC5B,QAAI,KAAK,KAAK,WAAW,GAAG;AAC1B;AAAA;AAEF,UAAM,mBAAmB,KAAK;AAC9B,SAAK;AACL,QAAI,KAAK,oBAAoB,KAAK,KAAK,QAAQ;AAC7C,WAAK,mBAAmB;AAAA;AAE1B,SAAK,QAAQ,KAAK,KAAK;AACvB,SAAK,SAAS,KAAK,KAAK,KAAK;AAAA;AAAA,EAGvB,oBAA0B;AAChC,QAAI,KAAK,KAAK,WAAW,GAAG;AAC1B;AAAA;AAEF,UAAM,mBAAmB,KAAK;AAC9B,SAAK;AACL,QAAI,KAAK,mBAAmB,GAAG;AAC7B,WAAK,mBAAmB,KAAK,KAAK,SAAS;AAAA;AAE7C,SAAK,QAAQ,KAAK,KAAK;AACvB,SAAK,SAAS,KAAK,KAAK,KAAK;AAAA;AAAA,EAGvB,QAAQ,OAAc,UAAmB,QAAuB;AACtE,UAAM,KAAK,MAAM;AACjB,QAAI,CAAC,IAAI;AACP;AAAA;AAGF,UAAM,WAAW,GAAG,aAAa,oBAAoB;AACrD,SAAK,OAAO,UAAU,QAAQ,IAAI;AAClC,UAAM;AAAA;AAAA,EAGR,UAAgB;AACd,UAAM,aAAa,KAAK;AACxB,SAAK,kBAAkB;AAAA;AAAA;AAIpB,WAAW,2BAAX,kBAAW,8BAAX;AACL,yCAAU;AACV,sCAAO;AACP,0CAAW;AAHK;AAAA;",
  "names": []
}
