{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/application/ApplicationPanelTreeElement.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type {ResourcesPanel} from './ResourcesPanel.js';\n\nexport class ApplicationPanelTreeElement extends UI.TreeOutline.TreeElement {\n  protected readonly resourcesPanel: ResourcesPanel;\n\n  constructor(resourcesPanel: ResourcesPanel, title: string, expandable: boolean) {\n    super(title, expandable);\n    this.resourcesPanel = resourcesPanel;\n    UI.ARIAUtils.setAccessibleName(this.listItemElement, title);\n  }\n\n  get itemURL(): Platform.DevToolsPath.UrlString {\n    throw new Error('Unimplemented Method');\n  }\n\n  onselect(selectedByUser: boolean|undefined): boolean {\n    if (!selectedByUser) {\n      return false;\n    }\n\n    const path: Platform.DevToolsPath.UrlString[] = [];\n    for (let el: UI.TreeOutline.TreeElement|null = this; el; el = el.parent) {\n      const url = el instanceof ApplicationPanelTreeElement && el.itemURL;\n      if (!url) {\n        break;\n      }\n      path.push(url);\n    }\n    this.resourcesPanel.setLastSelectedItemPath(path);\n\n    return false;\n  }\n\n  showView(view: UI.Widget.Widget|null): void {\n    this.resourcesPanel.showView(view);\n  }\n}\n\nexport class ExpandableApplicationPanelTreeElement extends ApplicationPanelTreeElement {\n  protected readonly expandedSetting: Common.Settings.Setting<boolean>;\n  protected readonly categoryName: string;\n  protected categoryLink: Platform.DevToolsPath.UrlString|null;\n\n  constructor(resourcesPanel: ResourcesPanel, categoryName: string, settingsKey: string, settingsDefault = false) {\n    super(resourcesPanel, categoryName, false);\n    this.expandedSetting =\n        Common.Settings.Settings.instance().createSetting('resources' + settingsKey + 'Expanded', settingsDefault);\n    this.categoryName = categoryName;\n    this.categoryLink = null;\n  }\n\n  get itemURL(): Platform.DevToolsPath.UrlString {\n    return 'category://' + this.categoryName as Platform.DevToolsPath.UrlString;\n  }\n\n  setLink(link: Platform.DevToolsPath.UrlString): void {\n    this.categoryLink = link;\n  }\n\n  onselect(selectedByUser: boolean|undefined): boolean {\n    super.onselect(selectedByUser);\n    this.resourcesPanel.showCategoryView(this.categoryName, this.categoryLink);\n    return false;\n  }\n\n  onattach(): void {\n    super.onattach();\n    if (this.expandedSetting.get()) {\n      this.expand();\n    }\n  }\n\n  onexpand(): void {\n    this.expandedSetting.set(true);\n  }\n\n  oncollapse(): void {\n    this.expandedSetting.set(false);\n  }\n}\n"],
  "mappings": "AAIA;AAEA;AAIO,iDAA0C,GAAG,YAAY,YAAY;AAAA,EACvD;AAAA,EAEnB,YAAY,gBAAgC,OAAe,YAAqB;AAC9E,UAAM,OAAO;AACb,SAAK,iBAAiB;AACtB,OAAG,UAAU,kBAAkB,KAAK,iBAAiB;AAAA;AAAA,MAGnD,UAA2C;AAC7C,UAAM,IAAI,MAAM;AAAA;AAAA,EAGlB,SAAS,gBAA4C;AACnD,QAAI,CAAC,gBAAgB;AACnB,aAAO;AAAA;AAGT,UAAM,OAA0C;AAChD,aAAS,KAAsC,MAAM,IAAI,KAAK,GAAG,QAAQ;AACvE,YAAM,MAAM,cAAc,+BAA+B,GAAG;AAC5D,UAAI,CAAC,KAAK;AACR;AAAA;AAEF,WAAK,KAAK;AAAA;AAEZ,SAAK,eAAe,wBAAwB;AAE5C,WAAO;AAAA;AAAA,EAGT,SAAS,MAAmC;AAC1C,SAAK,eAAe,SAAS;AAAA;AAAA;AAI1B,2DAAoD,4BAA4B;AAAA,EAClE;AAAA,EACA;AAAA,EACT;AAAA,EAEV,YAAY,gBAAgC,cAAsB,aAAqB,kBAAkB,OAAO;AAC9G,UAAM,gBAAgB,cAAc;AACpC,SAAK,kBACD,OAAO,SAAS,SAAS,WAAW,cAAc,cAAc,cAAc,YAAY;AAC9F,SAAK,eAAe;AACpB,SAAK,eAAe;AAAA;AAAA,MAGlB,UAA2C;AAC7C,WAAO,gBAAgB,KAAK;AAAA;AAAA,EAG9B,QAAQ,MAA6C;AACnD,SAAK,eAAe;AAAA;AAAA,EAGtB,SAAS,gBAA4C;AACnD,UAAM,SAAS;AACf,SAAK,eAAe,iBAAiB,KAAK,cAAc,KAAK;AAC7D,WAAO;AAAA;AAAA,EAGT,WAAiB;AACf,UAAM;AACN,QAAI,KAAK,gBAAgB,OAAO;AAC9B,WAAK;AAAA;AAAA;AAAA,EAIT,WAAiB;AACf,SAAK,gBAAgB,IAAI;AAAA;AAAA,EAG3B,aAAmB;AACjB,SAAK,gBAAgB,IAAI;AAAA;AAAA;",
  "names": []
}
