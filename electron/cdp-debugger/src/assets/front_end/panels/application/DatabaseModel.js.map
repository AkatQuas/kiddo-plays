{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/application/DatabaseModel.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2007, 2008 Apple Inc.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\n\nconst UIStrings = {\n  /**\n  *@description Message in Database Model of the Application panel\n  */\n  databaseNoLongerHasExpected: 'Database no longer has expected version.',\n  /**\n  *@description Message in Database Model of the Application panel\n  *@example {-197} PH1\n  */\n  anUnexpectedErrorSOccurred: 'An unexpected error {PH1} occurred.',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/DatabaseModel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class Database {\n  private readonly model: DatabaseModel;\n  private readonly idInternal: Protocol.Database.DatabaseId;\n  private domainInternal: string;\n  private nameInternal: string;\n  private versionInternal: string;\n\n  constructor(model: DatabaseModel, id: Protocol.Database.DatabaseId, domain: string, name: string, version: string) {\n    this.model = model;\n    this.idInternal = id;\n    this.domainInternal = domain;\n    this.nameInternal = name;\n    this.versionInternal = version;\n  }\n\n  get id(): string {\n    return this.idInternal;\n  }\n\n  get name(): string {\n    return this.nameInternal;\n  }\n\n  set name(x: string) {\n    this.nameInternal = x;\n  }\n\n  get version(): string {\n    return this.versionInternal;\n  }\n\n  set version(x: string) {\n    this.versionInternal = x;\n  }\n\n  get domain(): string {\n    return this.domainInternal;\n  }\n\n  set domain(x: string) {\n    this.domainInternal = x;\n  }\n\n  async tableNames(): Promise<string[]> {\n    const {tableNames} = await this.model.agent.invoke_getDatabaseTableNames({databaseId: this.idInternal}) || [];\n    return tableNames.sort();\n  }\n\n  async executeSql(\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      query: string, onSuccess: (arg0: Array<string>, arg1: Array<any>) => void,\n      onError: (arg0: string) => void): Promise<void> {\n    const response = await this.model.agent.invoke_executeSQL({'databaseId': this.idInternal, 'query': query});\n    const error = response.getError() || null;\n    if (error) {\n      onError(error);\n      return;\n    }\n    const sqlError = response.sqlError;\n    if (!sqlError) {\n      // We know from the back-end that if there is no error, neither columnNames nor values can be undefined.\n      onSuccess(response.columnNames || [], response.values || []);\n      return;\n    }\n    let message;\n    if (sqlError.message) {\n      message = sqlError.message;\n    } else if (sqlError.code === 2) {\n      message = i18nString(UIStrings.databaseNoLongerHasExpected);\n    } else {\n      message = i18nString(UIStrings.anUnexpectedErrorSOccurred, {PH1: sqlError.code});\n    }\n    onError(message);\n  }\n}\n\nexport class DatabaseModel extends SDK.SDKModel.SDKModel<EventTypes> {\n  private databasesInternal: Database[];\n  readonly agent: ProtocolProxyApi.DatabaseApi;\n  private enabled?: boolean;\n  constructor(target: SDK.Target.Target) {\n    super(target);\n\n    this.databasesInternal = [];\n    this.agent = target.databaseAgent();\n    this.target().registerDatabaseDispatcher(new DatabaseDispatcher(this));\n  }\n\n  enable(): void {\n    if (this.enabled) {\n      return;\n    }\n    void this.agent.invoke_enable();\n    this.enabled = true;\n  }\n\n  disable(): void {\n    if (!this.enabled) {\n      return;\n    }\n    this.enabled = false;\n    this.databasesInternal = [];\n    void this.agent.invoke_disable();\n    this.dispatchEventToListeners(Events.DatabasesRemoved);\n  }\n\n  databases(): Database[] {\n    const result = [];\n    for (const database of this.databasesInternal) {\n      result.push(database);\n    }\n    return result;\n  }\n\n  addDatabase(database: Database): void {\n    this.databasesInternal.push(database);\n    this.dispatchEventToListeners(Events.DatabaseAdded, database);\n  }\n}\n\nSDK.SDKModel.SDKModel.register(DatabaseModel, {capabilities: SDK.Target.Capability.DOM, autostart: false});\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  DatabaseAdded = 'DatabaseAdded',\n  DatabasesRemoved = 'DatabasesRemoved',\n}\n\nexport type EventTypes = {\n  [Events.DatabaseAdded]: Database,\n  [Events.DatabasesRemoved]: void,\n};\n\nexport class DatabaseDispatcher implements ProtocolProxyApi.DatabaseDispatcher {\n  private readonly model: DatabaseModel;\n  constructor(model: DatabaseModel) {\n    this.model = model;\n  }\n\n  addDatabase({database}: Protocol.Database.AddDatabaseEvent): void {\n    this.model.addDatabase(new Database(this.model, database.id, database.domain, database.name, database.version));\n  }\n}\n"],
  "mappings": "AAgCA;AACA;AAIA,MAAM,YAAY;AAAA,EAIhB,6BAA6B;AAAA,EAK7B,4BAA4B;AAAA;AAE9B,MAAM,OAAO,KAAK,KAAK,kBAAkB,uCAAuC;AAChF,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AACzD,sBAAe;AAAA,EACH;AAAA,EACA;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EAER,YAAY,OAAsB,IAAkC,QAAgB,MAAc,SAAiB;AACjH,SAAK,QAAQ;AACb,SAAK,aAAa;AAClB,SAAK,iBAAiB;AACtB,SAAK,eAAe;AACpB,SAAK,kBAAkB;AAAA;AAAA,MAGrB,KAAa;AACf,WAAO,KAAK;AAAA;AAAA,MAGV,OAAe;AACjB,WAAO,KAAK;AAAA;AAAA,MAGV,KAAK,GAAW;AAClB,SAAK,eAAe;AAAA;AAAA,MAGlB,UAAkB;AACpB,WAAO,KAAK;AAAA;AAAA,MAGV,QAAQ,GAAW;AACrB,SAAK,kBAAkB;AAAA;AAAA,MAGrB,SAAiB;AACnB,WAAO,KAAK;AAAA;AAAA,MAGV,OAAO,GAAW;AACpB,SAAK,iBAAiB;AAAA;AAAA,QAGlB,aAAgC;AACpC,UAAM,EAAC,eAAc,MAAM,KAAK,MAAM,MAAM,6BAA6B,EAAC,YAAY,KAAK,iBAAgB;AAC3G,WAAO,WAAW;AAAA;AAAA,QAGd,WAGF,OAAe,WACf,SAAgD;AAClD,UAAM,WAAW,MAAM,KAAK,MAAM,MAAM,kBAAkB,EAAC,cAAc,KAAK,YAAY,SAAS;AACnG,UAAM,QAAQ,SAAS,cAAc;AACrC,QAAI,OAAO;AACT,cAAQ;AACR;AAAA;AAEF,UAAM,WAAW,SAAS;AAC1B,QAAI,CAAC,UAAU;AAEb,gBAAU,SAAS,eAAe,IAAI,SAAS,UAAU;AACzD;AAAA;AAEF,QAAI;AACJ,QAAI,SAAS,SAAS;AACpB,gBAAU,SAAS;AAAA,eACV,SAAS,SAAS,GAAG;AAC9B,gBAAU,WAAW,UAAU;AAAA,WAC1B;AACL,gBAAU,WAAW,UAAU,4BAA4B,EAAC,KAAK,SAAS;AAAA;AAE5E,YAAQ;AAAA;AAAA;AAIL,mCAA4B,IAAI,SAAS,SAAqB;AAAA,EAC3D;AAAA,EACC;AAAA,EACD;AAAA,EACR,YAAY,QAA2B;AACrC,UAAM;AAEN,SAAK,oBAAoB;AACzB,SAAK,QAAQ,OAAO;AACpB,SAAK,SAAS,2BAA2B,IAAI,mBAAmB;AAAA;AAAA,EAGlE,SAAe;AACb,QAAI,KAAK,SAAS;AAChB;AAAA;AAEF,SAAK,KAAK,MAAM;AAChB,SAAK,UAAU;AAAA;AAAA,EAGjB,UAAgB;AACd,QAAI,CAAC,KAAK,SAAS;AACjB;AAAA;AAEF,SAAK,UAAU;AACf,SAAK,oBAAoB;AACzB,SAAK,KAAK,MAAM;AAChB,SAAK,yBAAyB,OAAO;AAAA;AAAA,EAGvC,YAAwB;AACtB,UAAM,SAAS;AACf,eAAW,YAAY,KAAK,mBAAmB;AAC7C,aAAO,KAAK;AAAA;AAEd,WAAO;AAAA;AAAA,EAGT,YAAY,UAA0B;AACpC,SAAK,kBAAkB,KAAK;AAC5B,SAAK,yBAAyB,OAAO,eAAe;AAAA;AAAA;AAIxD,IAAI,SAAS,SAAS,SAAS,eAAe,EAAC,cAAc,IAAI,OAAO,WAAW,KAAK,WAAW;AAI5F,WAAK,SAAL,kBAAK,YAAL;AACL,6BAAgB;AAChB,gCAAmB;AAFT;AAAA;AAUL,gCAAwE;AAAA,EAC5D;AAAA,EACjB,YAAY,OAAsB;AAChC,SAAK,QAAQ;AAAA;AAAA,EAGf,YAAY,EAAC,YAAqD;AAChE,SAAK,MAAM,YAAY,IAAI,SAAS,KAAK,OAAO,SAAS,IAAI,SAAS,QAAQ,SAAS,MAAM,SAAS;AAAA;AAAA;",
  "names": []
}
