{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/application/InterestGroupTreeElement.ts"],
  "sourcesContent": ["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport {ApplicationPanelTreeElement} from './ApplicationPanelTreeElement.js';\nimport type {ResourcesPanel} from './ResourcesPanel.js';\nimport {InterestGroupStorageView} from './InterestGroupStorageView.js';\n\nconst UIStrings = {\n  /**\n  *@description Label for an item in the Application Panel Sidebar of the Application panel\n  * An interest group is an ad targeting group stored on the browser that can\n  * be used to show a certain set of advertisements in the future as the\n  * outcome of a FLEDGE auction. (https://developer.chrome.com/blog/fledge-api/)\n  */\n  interestGroups: 'Interest Groups',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/InterestGroupTreeElement.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class InterestGroupTreeElement extends ApplicationPanelTreeElement {\n  private view: InterestGroupStorageView;\n\n  constructor(storagePanel: ResourcesPanel) {\n    super(storagePanel, i18nString(UIStrings.interestGroups), false);\n    const interestGroupIcon = UI.Icon.Icon.create('mediumicon-database', 'resource-tree-item');\n    this.setLeadingIcons([interestGroupIcon]);\n    this.view = new InterestGroupStorageView(this);\n  }\n\n  get itemURL(): Platform.DevToolsPath.UrlString {\n    return 'interest-groups://' as Platform.DevToolsPath.UrlString;\n  }\n\n  async getInterestGroupDetails(owner: string, name: string): Promise<Protocol.Storage.InterestGroupDetails|null> {\n    const mainTarget = SDK.TargetManager.TargetManager.instance().mainTarget();\n    if (!mainTarget) {\n      return null;\n    }\n    const response =\n        await mainTarget.storageAgent().invoke_getInterestGroupDetails({'ownerOrigin': owner, 'name': name});\n    return response.details;\n  }\n\n  onselect(selectedByUser?: boolean): boolean {\n    super.onselect(selectedByUser);\n    this.showView(this.view);\n    Host.userMetrics.panelShown(Host.UserMetrics.PanelCodes[Host.UserMetrics.PanelCodes.interest_groups]);\n    return false;\n  }\n\n  addEvent(event: Protocol.Storage.InterestGroupAccessedEvent): void {\n    this.view.addEvent(event);\n  }\n\n  clearEvents(): void {\n    this.view.clearEvents();\n  }\n}\n"],
  "mappings": "AAIA;AACA;AAEA;AACA;AAIA;AAEA;AAEA,MAAM,YAAY;AAAA,EAOhB,gBAAgB;AAAA;AAElB,MAAM,OAAO,KAAK,KAAK,kBAAkB,kDAAkD;AACpF,aAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAEhE,8CAAuC,4BAA4B;AAAA,EAChE;AAAA,EAER,YAAY,cAA8B;AACxC,UAAM,cAAc,WAAW,UAAU,iBAAiB;AAC1D,UAAM,oBAAoB,GAAG,KAAK,KAAK,OAAO,uBAAuB;AACrE,SAAK,gBAAgB,CAAC;AACtB,SAAK,OAAO,IAAI,yBAAyB;AAAA;AAAA,MAGvC,UAA2C;AAC7C,WAAO;AAAA;AAAA,QAGH,wBAAwB,OAAe,MAAmE;AAC9G,UAAM,aAAa,IAAI,cAAc,cAAc,WAAW;AAC9D,QAAI,CAAC,YAAY;AACf,aAAO;AAAA;AAET,UAAM,WACF,MAAM,WAAW,eAAe,+BAA+B,EAAC,eAAe,OAAO,QAAQ;AAClG,WAAO,SAAS;AAAA;AAAA,EAGlB,SAAS,gBAAmC;AAC1C,UAAM,SAAS;AACf,SAAK,SAAS,KAAK;AACnB,SAAK,YAAY,WAAW,KAAK,YAAY,WAAW,KAAK,YAAY,WAAW;AACpF,WAAO;AAAA;AAAA,EAGT,SAAS,OAA0D;AACjE,SAAK,KAAK,SAAS;AAAA;AAAA,EAGrB,cAAoB;AAClB,SAAK,KAAK;AAAA;AAAA;",
  "names": []
}
