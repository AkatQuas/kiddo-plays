{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/application/BackgroundServiceModel.ts"],
  "sourcesContent": ["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nexport class BackgroundServiceModel extends SDK.SDKModel.SDKModel<EventTypes> implements\n    ProtocolProxyApi.BackgroundServiceDispatcher {\n  private readonly backgroundServiceAgent: ProtocolProxyApi.BackgroundServiceApi;\n  private readonly events:\n      Map<Protocol.BackgroundService.ServiceName, Protocol.BackgroundService.BackgroundServiceEvent[]>;\n\n  constructor(target: SDK.Target.Target) {\n    super(target);\n    this.backgroundServiceAgent = target.backgroundServiceAgent();\n    target.registerBackgroundServiceDispatcher(this);\n\n    this.events = new Map();\n  }\n\n  enable(service: Protocol.BackgroundService.ServiceName): void {\n    this.events.set(service, []);\n    void this.backgroundServiceAgent.invoke_startObserving({service});\n  }\n\n  setRecording(shouldRecord: boolean, service: Protocol.BackgroundService.ServiceName): void {\n    void this.backgroundServiceAgent.invoke_setRecording({shouldRecord, service});\n  }\n\n  clearEvents(service: Protocol.BackgroundService.ServiceName): void {\n    this.events.set(service, []);\n    void this.backgroundServiceAgent.invoke_clearEvents({service});\n  }\n\n  getEvents(service: Protocol.BackgroundService.ServiceName): Protocol.BackgroundService.BackgroundServiceEvent[] {\n    return this.events.get(service) || [];\n  }\n\n  recordingStateChanged({isRecording, service}: Protocol.BackgroundService.RecordingStateChangedEvent): void {\n    this.dispatchEventToListeners(Events.RecordingStateChanged, {isRecording, serviceName: service});\n  }\n\n  backgroundServiceEventReceived({backgroundServiceEvent}:\n                                     Protocol.BackgroundService.BackgroundServiceEventReceivedEvent): void {\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // @ts-expect-error\n    this.events.get(backgroundServiceEvent.service).push(backgroundServiceEvent);\n    this.dispatchEventToListeners(Events.BackgroundServiceEventReceived, backgroundServiceEvent);\n  }\n}\n\nSDK.SDKModel.SDKModel.register(BackgroundServiceModel, {capabilities: SDK.Target.Capability.Browser, autostart: false});\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  RecordingStateChanged = 'RecordingStateChanged',\n  BackgroundServiceEventReceived = 'BackgroundServiceEventReceived',\n}\n\nexport type EventTypes = {\n  [Events.RecordingStateChanged]: {isRecording: boolean, serviceName: Protocol.BackgroundService.ServiceName},\n  [Events.BackgroundServiceEventReceived]: Protocol.BackgroundService.BackgroundServiceEvent,\n};\n"],
  "mappings": "AAIA;AAIO,4CAAqC,IAAI,SAAS,SACR;AAAA,EAC9B;AAAA,EACA;AAAA,EAGjB,YAAY,QAA2B;AACrC,UAAM;AACN,SAAK,yBAAyB,OAAO;AACrC,WAAO,oCAAoC;AAE3C,SAAK,SAAS,oBAAI;AAAA;AAAA,EAGpB,OAAO,SAAuD;AAC5D,SAAK,OAAO,IAAI,SAAS;AACzB,SAAK,KAAK,uBAAuB,sBAAsB,EAAC;AAAA;AAAA,EAG1D,aAAa,cAAuB,SAAuD;AACzF,SAAK,KAAK,uBAAuB,oBAAoB,EAAC,cAAc;AAAA;AAAA,EAGtE,YAAY,SAAuD;AACjE,SAAK,OAAO,IAAI,SAAS;AACzB,SAAK,KAAK,uBAAuB,mBAAmB,EAAC;AAAA;AAAA,EAGvD,UAAU,SAAsG;AAC9G,WAAO,KAAK,OAAO,IAAI,YAAY;AAAA;AAAA,EAGrC,sBAAsB,EAAC,aAAa,WAAuE;AACzG,SAAK,yBAAyB,OAAO,uBAAuB,EAAC,aAAa,aAAa;AAAA;AAAA,EAGzF,+BAA+B,EAAC,0BACyE;AAGvG,SAAK,OAAO,IAAI,uBAAuB,SAAS,KAAK;AACrD,SAAK,yBAAyB,OAAO,gCAAgC;AAAA;AAAA;AAIzE,IAAI,SAAS,SAAS,SAAS,wBAAwB,EAAC,cAAc,IAAI,OAAO,WAAW,SAAS,WAAW;AAIzG,WAAK,SAAL,kBAAK,YAAL;AACL,qCAAwB;AACxB,8CAAiC;AAFvB;AAAA;",
  "names": []
}
