{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/application/DatabaseTableView.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2008 Apple Inc. All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type {Database} from './DatabaseModel.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Database Table View of the Application panel\n  */\n  database: 'Database',\n  /**\n  *@description Text to refresh the page\n  */\n  refresh: 'Refresh',\n  /**\n  *@description Text in Database Table View of the Application panel\n  */\n  visibleColumns: 'Visible columns',\n  /**\n  *@description Text in Database Table View of the Application panel\n  *@example {database} PH1\n  */\n  theStableIsEmpty: 'The \"{PH1}\" table is empty.',\n  /**\n  *@description Error msg element text content in Database Table View of the Application panel\n  *@example {database} PH1\n  */\n  anErrorOccurredTryingToreadTheS: 'An error occurred trying to read the \"{PH1}\" table.',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/DatabaseTableView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface VisibleColumnsSetting {\n  [tableName: string]: string;\n}\nexport class DatabaseTableView extends UI.View.SimpleView {\n  database: Database;\n  tableName: string;\n  private lastVisibleColumns: string;\n  private readonly columnsMap: Map<string, string>;\n  private readonly visibleColumnsSetting: Common.Settings.Setting<VisibleColumnsSetting>;\n  refreshButton: UI.Toolbar.ToolbarButton;\n  private readonly visibleColumnsInput: UI.Toolbar.ToolbarInput;\n  private dataGrid: DataGrid.SortableDataGrid.SortableDataGrid<DataGrid.SortableDataGrid.SortableDataGridNode<unknown>>|\n      null;\n  private emptyWidget?: UI.EmptyWidget.EmptyWidget;\n\n  constructor(database: Database, tableName: string) {\n    super(i18nString(UIStrings.database));\n\n    this.database = database;\n    this.tableName = tableName;\n    this.lastVisibleColumns = '';\n    this.columnsMap = new Map();\n\n    this.element.classList.add('storage-view', 'table');\n\n    this.visibleColumnsSetting =\n        Common.Settings.Settings.instance().createSetting('databaseTableViewVisibleColumns', {});\n\n    this.refreshButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.refresh), 'largeicon-refresh');\n    this.refreshButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.refreshButtonClicked, this);\n    this.visibleColumnsInput = new UI.Toolbar.ToolbarInput(i18nString(UIStrings.visibleColumns), '', 1);\n    this.visibleColumnsInput.addEventListener(\n        UI.Toolbar.ToolbarInput.Event.TextChanged, this.onVisibleColumnsChanged, this);\n\n    this.dataGrid = null;\n  }\n\n  wasShown(): void {\n    this.update();\n  }\n\n  async toolbarItems(): Promise<UI.Toolbar.ToolbarItem[]> {\n    return [this.refreshButton, this.visibleColumnsInput];\n  }\n\n  private escapeTableName(tableName: string): string {\n    return tableName.replace(/\\\"/g, '\"\"');\n  }\n\n  update(): void {\n    void this.database.executeSql(\n        'SELECT rowid, * FROM \"' + this.escapeTableName(this.tableName) + '\"', this.queryFinished.bind(this),\n        this.queryError.bind(this));\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private queryFinished(columnNames: string[], values: any[]): void {\n    this.detachChildWidgets();\n    this.element.removeChildren();\n\n    this.dataGrid =\n        DataGrid.SortableDataGrid.SortableDataGrid.create(columnNames, values, i18nString(UIStrings.database));\n    this.visibleColumnsInput.setVisible(Boolean(this.dataGrid));\n    if (!this.dataGrid) {\n      this.emptyWidget = new UI.EmptyWidget.EmptyWidget(i18nString(UIStrings.theStableIsEmpty, {PH1: this.tableName}));\n      this.emptyWidget.show(this.element);\n      return;\n    }\n    this.dataGrid.setStriped(true);\n    this.dataGrid.asWidget().show(this.element);\n    this.dataGrid.autoSizeColumns(5);\n\n    this.columnsMap.clear();\n    for (let i = 1; i < columnNames.length; ++i) {\n      this.columnsMap.set(columnNames[i], String(i));\n    }\n    this.lastVisibleColumns = '';\n    const visibleColumnsText = this.visibleColumnsSetting.get()[this.tableName] || '';\n    this.visibleColumnsInput.setValue(visibleColumnsText);\n    this.onVisibleColumnsChanged();\n  }\n\n  private onVisibleColumnsChanged(): void {\n    if (!this.dataGrid) {\n      return;\n    }\n    const text = this.visibleColumnsInput.value();\n    const parts = text.split(/[\\s,]+/);\n    const matches = new Set<string>();\n    const columnsVisibility = new Set<string>();\n    columnsVisibility.add('0');\n    for (const part of parts) {\n      const mappedColumn = this.columnsMap.get(part);\n      if (mappedColumn !== undefined) {\n        matches.add(part);\n        columnsVisibility.add(mappedColumn);\n      }\n    }\n    const newVisibleColumns = [...matches].sort().join(', ');\n    if (newVisibleColumns.length === 0) {\n      for (const v of this.columnsMap.values()) {\n        columnsVisibility.add(v);\n      }\n    }\n    if (newVisibleColumns === this.lastVisibleColumns) {\n      return;\n    }\n    const visibleColumnsRegistry = this.visibleColumnsSetting.get();\n    visibleColumnsRegistry[this.tableName] = text;\n    this.visibleColumnsSetting.set(visibleColumnsRegistry);\n    this.dataGrid.setColumnsVisiblity(columnsVisibility);\n    this.lastVisibleColumns = newVisibleColumns;\n  }\n\n  private queryError(): void {\n    this.detachChildWidgets();\n    this.element.removeChildren();\n\n    const errorMsgElement = document.createElement('div');\n    errorMsgElement.className = 'storage-table-error';\n    errorMsgElement.textContent = i18nString(UIStrings.anErrorOccurredTryingToreadTheS, {PH1: this.tableName});\n    this.element.appendChild(errorMsgElement);\n  }\n\n  private refreshButtonClicked(): void {\n    this.update();\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
