{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/application/ApplicationPanelSidebar.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2007, 2008, 2010 Apple Inc.  All rights reserved.\n * Copyright (C) 2009 Joseph Pecoraro\n * Copyright (C) 2013 Samsung Electronics. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as SourceFrame from '../../ui/legacy/components/source_frame/source_frame.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {BackForwardCacheTreeElement, ServiceWorkerCacheTreeElement} from './ApplicationPanelCacheSection.js';\nimport {ApplicationPanelTreeElement, ExpandableApplicationPanelTreeElement} from './ApplicationPanelTreeElement.js';\nimport {AppManifestView} from './AppManifestView.js';\nimport {BackgroundServiceModel} from './BackgroundServiceModel.js';\nimport {BackgroundServiceView} from './BackgroundServiceView.js';\nimport * as ApplicationComponents from './components/components.js';\nimport resourcesSidebarStyles from './resourcesSidebar.css.js';\n\nimport type {Database as DatabaseModelDatabase} from './DatabaseModel.js';\nimport {DatabaseModel, Events as DatabaseModelEvents} from './DatabaseModel.js';\nimport {DatabaseQueryView, Events as DatabaseQueryViewEvents} from './DatabaseQueryView.js';\nimport {DatabaseTableView} from './DatabaseTableView.js';\nimport type {DOMStorage} from './DOMStorageModel.js';\nimport {DOMStorageModel, Events as DOMStorageModelEvents} from './DOMStorageModel.js';\nimport type {Database as IndexedDBModelDatabase, DatabaseId, Index, ObjectStore} from './IndexedDBModel.js';\nimport {Events as IndexedDBModelEvents, IndexedDBModel} from './IndexedDBModel.js';\nimport {IDBDatabaseView, IDBDataView} from './IndexedDBViews.js';\nimport {InterestGroupStorageModel, Events as InterestGroupModelEvents} from './InterestGroupStorageModel.js';\nimport {InterestGroupTreeElement} from './InterestGroupTreeElement.js';\nimport {OpenedWindowDetailsView, WorkerDetailsView} from './OpenedWindowDetailsView.js';\nimport type {ResourcesPanel} from './ResourcesPanel.js';\nimport {ServiceWorkersView} from './ServiceWorkersView.js';\nimport {StorageView} from './StorageView.js';\nimport {TrustTokensTreeElement} from './TrustTokensTreeElement.js';\nimport {ReportingApiTreeElement} from './ReportingApiTreeElement.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Application Panel Sidebar of the Application panel\n  */\n  application: 'Application',\n  /**\n  *@description Text in Application Panel Sidebar of the Application panel\n  */\n  storage: 'Storage',\n  /**\n  *@description Text in Application Panel Sidebar of the Application panel\n  */\n  localStorage: 'Local Storage',\n  /**\n  *@description Text in Application Panel Sidebar of the Application panel\n  */\n  sessionStorage: 'Session Storage',\n  /**\n  *@description Text in Application Panel Sidebar of the Application panel\n  */\n  webSql: 'Web SQL',\n  /**\n  *@description Text for web cookies\n  */\n  cookies: 'Cookies',\n  /**\n  *@description Text in Application Panel Sidebar of the Application panel\n  */\n  cache: 'Cache',\n  /**\n  *@description Text in Application Panel Sidebar of the Application panel\n  */\n  backgroundServices: 'Background Services',\n  /**\n  *@description Text for rendering frames\n  */\n  frames: 'Frames',\n  /**\n  *@description Text that appears on a button for the manifest resource type filter.\n  */\n  manifest: 'Manifest',\n  /**\n  *@description Text in Application Panel Sidebar of the Application panel\n  */\n  indexeddb: 'IndexedDB',\n  /**\n  *@description A context menu item in the Application Panel Sidebar of the Application panel\n  */\n  refreshIndexeddb: 'Refresh IndexedDB',\n  /**\n  *@description Tooltip in Application Panel Sidebar of the Application panel\n  *@example {1.0} PH1\n  */\n  versionSEmpty: 'Version: {PH1} (empty)',\n  /**\n  *@description Tooltip in Application Panel Sidebar of the Application panel\n  *@example {1.0} PH1\n  */\n  versionS: 'Version: {PH1}',\n  /**\n  *@description Text to clear content\n  */\n  clear: 'Clear',\n  /**\n  *@description Text in Application Panel Sidebar of the Application panel\n  *@example {\"key path\"} PH1\n  */\n  keyPathS: 'Key path: {PH1}',\n  /**\n  *@description Text in Application Panel Sidebar of the Application panel\n  */\n  localFiles: 'Local Files',\n  /**\n  *@description Tooltip in Application Panel Sidebar of the Application panel\n  *@example {https://example.com} PH1\n  */\n  cookiesUsedByFramesFromS: 'Cookies used by frames from {PH1}',\n  /**\n  *@description Text in Frames View of the Application panel\n  */\n  openedWindows: 'Opened Windows',\n  /**\n  *@description Label for plural of worker type: web workers\n  */\n  webWorkers: 'Web Workers',\n  /**\n  *@description Label in frame tree for unavailable document\n  */\n  documentNotAvailable: 'Document not available',\n  /**\n  *@description Description of content of unavailable document in Application panel\n  */\n  theContentOfThisDocumentHasBeen:\n      'The content of this document has been generated dynamically via \\'document.write()\\'.',\n  /**\n  *@description Text in Frames View of the Application panel\n  */\n  windowWithoutTitle: 'Window without title',\n  /**\n  *@description Default name for worker\n  */\n  worker: 'worker',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/ApplicationPanelSidebar.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nfunction assertNotMainTarget(targetId: Protocol.Target.TargetID|'main'): asserts targetId is Protocol.Target.TargetID {\n  if (targetId === 'main') {\n    throw new Error('Unexpected main target id');\n  }\n}\n\nexport class ApplicationPanelSidebar extends UI.Widget.VBox implements SDK.TargetManager.Observer {\n  panel: ResourcesPanel;\n  private readonly sidebarTree: UI.TreeOutline.TreeOutlineInShadow;\n  private readonly applicationTreeElement: UI.TreeOutline.TreeElement;\n  serviceWorkersTreeElement: ServiceWorkersTreeElement;\n  localStorageListTreeElement: ExpandableApplicationPanelTreeElement;\n  sessionStorageListTreeElement: ExpandableApplicationPanelTreeElement;\n  indexedDBListTreeElement: IndexedDBTreeElement;\n  interestGroupTreeElement: InterestGroupTreeElement;\n  databasesListTreeElement: ExpandableApplicationPanelTreeElement;\n  cookieListTreeElement: ExpandableApplicationPanelTreeElement;\n  trustTokensTreeElement: TrustTokensTreeElement;\n  cacheStorageListTreeElement: ServiceWorkerCacheTreeElement;\n  private backForwardCacheListTreeElement?: BackForwardCacheTreeElement;\n  backgroundFetchTreeElement: BackgroundServiceTreeElement|undefined;\n  backgroundSyncTreeElement: BackgroundServiceTreeElement|undefined;\n  notificationsTreeElement: BackgroundServiceTreeElement|undefined;\n  paymentHandlerTreeElement: BackgroundServiceTreeElement|undefined;\n  periodicBackgroundSyncTreeElement: BackgroundServiceTreeElement|undefined;\n  pushMessagingTreeElement: BackgroundServiceTreeElement|undefined;\n  reportingApiTreeElement: ReportingApiTreeElement|undefined;\n  private readonly resourcesSection: ResourcesSection;\n  private readonly databaseTableViews: Map<DatabaseModelDatabase, {\n    [x: string]: DatabaseTableView,\n  }>;\n  private databaseQueryViews: Map<DatabaseModelDatabase, DatabaseQueryView>;\n  private readonly databaseTreeElements: Map<DatabaseModelDatabase, DatabaseTreeElement>;\n  private domStorageTreeElements: Map<DOMStorage, DOMStorageTreeElement>;\n  private domains: {\n    [x: string]: boolean,\n  };\n  private target?: SDK.Target.Target;\n  private databaseModel?: DatabaseModel|null;\n  private previousHoveredElement?: FrameTreeElement;\n\n  constructor(panel: ResourcesPanel) {\n    super();\n\n    this.panel = panel;\n\n    this.sidebarTree = new UI.TreeOutline.TreeOutlineInShadow();\n    this.sidebarTree.element.classList.add('resources-sidebar');\n\n    this.sidebarTree.element.classList.add('filter-all');\n    // Listener needs to have been set up before the elements are added\n    this.sidebarTree.addEventListener(UI.TreeOutline.Events.ElementAttached, this.treeElementAdded, this);\n\n    this.contentElement.appendChild(this.sidebarTree.element);\n\n    const applicationSectionTitle = i18nString(UIStrings.application);\n    this.applicationTreeElement = this.addSidebarSection(applicationSectionTitle);\n    const manifestTreeElement = new AppManifestTreeElement(panel);\n    this.applicationTreeElement.appendChild(manifestTreeElement);\n    this.serviceWorkersTreeElement = new ServiceWorkersTreeElement(panel);\n    this.applicationTreeElement.appendChild(this.serviceWorkersTreeElement);\n    const clearStorageTreeElement = new ClearStorageTreeElement(panel);\n    this.applicationTreeElement.appendChild(clearStorageTreeElement);\n\n    const storageSectionTitle = i18nString(UIStrings.storage);\n    const storageTreeElement = this.addSidebarSection(storageSectionTitle);\n    this.localStorageListTreeElement =\n        new ExpandableApplicationPanelTreeElement(panel, i18nString(UIStrings.localStorage), 'LocalStorage');\n    this.localStorageListTreeElement.setLink(\n        'https://developer.chrome.com/docs/devtools/storage/localstorage/?utm_source=devtools' as\n        Platform.DevToolsPath.UrlString);\n    const localStorageIcon = UI.Icon.Icon.create('mediumicon-table', 'resource-tree-item');\n    this.localStorageListTreeElement.setLeadingIcons([localStorageIcon]);\n\n    storageTreeElement.appendChild(this.localStorageListTreeElement);\n    this.sessionStorageListTreeElement =\n        new ExpandableApplicationPanelTreeElement(panel, i18nString(UIStrings.sessionStorage), 'SessionStorage');\n    this.sessionStorageListTreeElement.setLink(\n        'https://developer.chrome.com/docs/devtools/storage/sessionstorage/?utm_source=devtools' as\n        Platform.DevToolsPath.UrlString);\n    const sessionStorageIcon = UI.Icon.Icon.create('mediumicon-table', 'resource-tree-item');\n    this.sessionStorageListTreeElement.setLeadingIcons([sessionStorageIcon]);\n\n    storageTreeElement.appendChild(this.sessionStorageListTreeElement);\n    this.indexedDBListTreeElement = new IndexedDBTreeElement(panel);\n    this.indexedDBListTreeElement.setLink(\n        'https://developer.chrome.com/docs/devtools/storage/indexeddb/?utm_source=devtools' as\n        Platform.DevToolsPath.UrlString);\n    storageTreeElement.appendChild(this.indexedDBListTreeElement);\n    this.databasesListTreeElement =\n        new ExpandableApplicationPanelTreeElement(panel, i18nString(UIStrings.webSql), 'Databases');\n    this.databasesListTreeElement.setLink(\n        'https://developer.chrome.com/docs/devtools/storage/websql/?utm_source=devtools' as\n        Platform.DevToolsPath.UrlString);\n    const databaseIcon = UI.Icon.Icon.create('mediumicon-database', 'resource-tree-item');\n    this.databasesListTreeElement.setLeadingIcons([databaseIcon]);\n\n    storageTreeElement.appendChild(this.databasesListTreeElement);\n    this.cookieListTreeElement =\n        new ExpandableApplicationPanelTreeElement(panel, i18nString(UIStrings.cookies), 'Cookies');\n    this.cookieListTreeElement.setLink(\n        'https://developer.chrome.com/docs/devtools/storage/cookies/?utm_source=devtools' as\n        Platform.DevToolsPath.UrlString);\n    const cookieIcon = UI.Icon.Icon.create('mediumicon-cookie', 'resource-tree-item');\n    this.cookieListTreeElement.setLeadingIcons([cookieIcon]);\n    storageTreeElement.appendChild(this.cookieListTreeElement);\n\n    this.trustTokensTreeElement = new TrustTokensTreeElement(panel);\n    storageTreeElement.appendChild(this.trustTokensTreeElement);\n\n    this.interestGroupTreeElement = new InterestGroupTreeElement(panel);\n    storageTreeElement.appendChild(this.interestGroupTreeElement);\n\n    const cacheSectionTitle = i18nString(UIStrings.cache);\n    const cacheTreeElement = this.addSidebarSection(cacheSectionTitle);\n    this.cacheStorageListTreeElement = new ServiceWorkerCacheTreeElement(panel);\n    cacheTreeElement.appendChild(this.cacheStorageListTreeElement);\n\n    this.backForwardCacheListTreeElement = new BackForwardCacheTreeElement(panel);\n    cacheTreeElement.appendChild(this.backForwardCacheListTreeElement);\n\n    if (Root.Runtime.experiments.isEnabled('backgroundServices')) {\n      const backgroundServiceSectionTitle = i18nString(UIStrings.backgroundServices);\n      const backgroundServiceTreeElement = this.addSidebarSection(backgroundServiceSectionTitle);\n\n      this.backgroundFetchTreeElement =\n          new BackgroundServiceTreeElement(panel, Protocol.BackgroundService.ServiceName.BackgroundFetch);\n      backgroundServiceTreeElement.appendChild(this.backgroundFetchTreeElement);\n      this.backgroundSyncTreeElement =\n          new BackgroundServiceTreeElement(panel, Protocol.BackgroundService.ServiceName.BackgroundSync);\n      backgroundServiceTreeElement.appendChild(this.backgroundSyncTreeElement);\n\n      if (Root.Runtime.experiments.isEnabled('backgroundServicesNotifications')) {\n        this.notificationsTreeElement =\n            new BackgroundServiceTreeElement(panel, Protocol.BackgroundService.ServiceName.Notifications);\n        backgroundServiceTreeElement.appendChild(this.notificationsTreeElement);\n      }\n      if (Root.Runtime.experiments.isEnabled('backgroundServicesPaymentHandler')) {\n        this.paymentHandlerTreeElement =\n            new BackgroundServiceTreeElement(panel, Protocol.BackgroundService.ServiceName.PaymentHandler);\n        backgroundServiceTreeElement.appendChild(this.paymentHandlerTreeElement);\n      }\n      this.periodicBackgroundSyncTreeElement =\n          new BackgroundServiceTreeElement(panel, Protocol.BackgroundService.ServiceName.PeriodicBackgroundSync);\n      backgroundServiceTreeElement.appendChild(this.periodicBackgroundSyncTreeElement);\n      if (Root.Runtime.experiments.isEnabled('backgroundServicesPushMessaging')) {\n        this.pushMessagingTreeElement =\n            new BackgroundServiceTreeElement(panel, Protocol.BackgroundService.ServiceName.PushMessaging);\n        backgroundServiceTreeElement.appendChild(this.pushMessagingTreeElement);\n      }\n      if (Root.Runtime.experiments.isEnabled('reportingApiDebugging')) {\n        this.reportingApiTreeElement = new ReportingApiTreeElement(panel);\n        backgroundServiceTreeElement.appendChild(this.reportingApiTreeElement);\n      }\n    }\n    const resourcesSectionTitle = i18nString(UIStrings.frames);\n    const resourcesTreeElement = this.addSidebarSection(resourcesSectionTitle);\n    this.resourcesSection = new ResourcesSection(panel, resourcesTreeElement);\n\n    this.databaseTableViews = new Map();\n    this.databaseQueryViews = new Map();\n    this.databaseTreeElements = new Map();\n    this.domStorageTreeElements = new Map();\n    this.domains = {};\n\n    this.sidebarTree.contentElement.addEventListener('mousemove', this.onmousemove.bind(this), false);\n    this.sidebarTree.contentElement.addEventListener('mouseleave', this.onmouseleave.bind(this), false);\n\n    SDK.TargetManager.TargetManager.instance().observeTargets(this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.FrameNavigated, this.frameNavigated,\n        this);\n\n    const selection = this.panel.lastSelectedItemPath();\n    if (!selection.length) {\n      manifestTreeElement.select();\n    }\n\n    SDK.TargetManager.TargetManager.instance().observeModels(DOMStorageModel, {\n      modelAdded: (model: DOMStorageModel): void => this.domStorageModelAdded(model),\n      modelRemoved: (model: DOMStorageModel): void => this.domStorageModelRemoved(model),\n    });\n    SDK.TargetManager.TargetManager.instance().observeModels(IndexedDBModel, {\n      modelAdded: (model: IndexedDBModel): void => model.enable(),\n      modelRemoved: (model: IndexedDBModel): void => this.indexedDBListTreeElement.removeIndexedDBForModel(model),\n    });\n    SDK.TargetManager.TargetManager.instance().observeModels(InterestGroupStorageModel, {\n      modelAdded: (model: InterestGroupStorageModel): void => this.interestGroupModelAdded(model),\n      modelRemoved: (model: InterestGroupStorageModel): void => this.interestGroupModelRemoved(model),\n    });\n    // Work-around for crbug.com/1152713: Something is wrong with custom scrollbars and size containment.\n    // @ts-ignore\n    this.contentElement.style.contain = 'layout style';\n  }\n\n  private addSidebarSection(title: string): UI.TreeOutline.TreeElement {\n    const treeElement = new UI.TreeOutline.TreeElement(title, true);\n    treeElement.listItemElement.classList.add('storage-group-list-item');\n    treeElement.setCollapsible(false);\n    treeElement.selectable = false;\n    this.sidebarTree.appendChild(treeElement);\n    UI.ARIAUtils.setAccessibleName(treeElement.childrenListElement, title);\n    return treeElement;\n  }\n\n  targetAdded(target: SDK.Target.Target): void {\n    if (this.target) {\n      return;\n    }\n    this.target = target;\n    this.databaseModel = target.model(DatabaseModel);\n    if (this.databaseModel) {\n      this.databaseModel.addEventListener(DatabaseModelEvents.DatabaseAdded, this.databaseAdded, this);\n      this.databaseModel.addEventListener(DatabaseModelEvents.DatabasesRemoved, this.resetWebSQL, this);\n    }\n\n    const interestGroupModel = target.model(InterestGroupStorageModel);\n    if (interestGroupModel) {\n      interestGroupModel.addEventListener(InterestGroupModelEvents.InterestGroupAccess, this.interestGroupAccess, this);\n    }\n\n    const resourceTreeModel = target.model(SDK.ResourceTreeModel.ResourceTreeModel);\n    if (!resourceTreeModel) {\n      return;\n    }\n\n    if (resourceTreeModel.cachedResourcesLoaded()) {\n      this.initialize();\n    }\n\n    resourceTreeModel.addEventListener(SDK.ResourceTreeModel.Events.CachedResourcesLoaded, this.initialize, this);\n    resourceTreeModel.addEventListener(\n        SDK.ResourceTreeModel.Events.WillLoadCachedResources, this.resetWithFrames, this);\n  }\n\n  targetRemoved(target: SDK.Target.Target): void {\n    if (target !== this.target) {\n      return;\n    }\n    delete this.target;\n\n    const resourceTreeModel = target.model(SDK.ResourceTreeModel.ResourceTreeModel);\n    if (resourceTreeModel) {\n      resourceTreeModel.removeEventListener(SDK.ResourceTreeModel.Events.CachedResourcesLoaded, this.initialize, this);\n      resourceTreeModel.removeEventListener(\n          SDK.ResourceTreeModel.Events.WillLoadCachedResources, this.resetWithFrames, this);\n    }\n    if (this.databaseModel) {\n      this.databaseModel.removeEventListener(DatabaseModelEvents.DatabaseAdded, this.databaseAdded, this);\n      this.databaseModel.removeEventListener(DatabaseModelEvents.DatabasesRemoved, this.resetWebSQL, this);\n      this.databaseModel = null;\n    }\n\n    const interestGroupModel = target.model(InterestGroupStorageModel);\n    if (interestGroupModel) {\n      interestGroupModel.removeEventListener(\n          InterestGroupModelEvents.InterestGroupAccess, this.interestGroupAccess, this);\n    }\n\n    this.resetWithFrames();\n  }\n\n  focus(): void {\n    this.sidebarTree.focus();\n  }\n\n  private initialize(): void {\n    for (const frame of SDK.ResourceTreeModel.ResourceTreeModel.frames()) {\n      this.addCookieDocument(frame);\n    }\n    if (this.databaseModel) {\n      this.databaseModel.enable();\n    }\n    const interestGroupModel = this.target && this.target.model(InterestGroupStorageModel);\n    if (interestGroupModel) {\n      interestGroupModel.enable();\n    }\n\n    const cacheStorageModel = this.target && this.target.model(SDK.ServiceWorkerCacheModel.ServiceWorkerCacheModel);\n    if (cacheStorageModel) {\n      cacheStorageModel.enable();\n    }\n    const serviceWorkerCacheModel =\n        this.target && this.target.model(SDK.ServiceWorkerCacheModel.ServiceWorkerCacheModel) || null;\n    this.cacheStorageListTreeElement.initialize(serviceWorkerCacheModel);\n    const backgroundServiceModel = this.target && this.target.model(BackgroundServiceModel) || null;\n    if (Root.Runtime.experiments.isEnabled('backgroundServices')) {\n      this.backgroundFetchTreeElement && this.backgroundFetchTreeElement.initialize(backgroundServiceModel);\n      this.backgroundSyncTreeElement && this.backgroundSyncTreeElement.initialize(backgroundServiceModel);\n      if (Root.Runtime.experiments.isEnabled('backgroundServicesNotifications') && this.notificationsTreeElement) {\n        this.notificationsTreeElement.initialize(backgroundServiceModel);\n      }\n      if (Root.Runtime.experiments.isEnabled('backgroundServicesPaymentHandler') && this.paymentHandlerTreeElement) {\n        this.paymentHandlerTreeElement.initialize(backgroundServiceModel);\n      }\n      this.periodicBackgroundSyncTreeElement &&\n          this.periodicBackgroundSyncTreeElement.initialize(backgroundServiceModel);\n      if (Root.Runtime.experiments.isEnabled('backgroundServicesPushMessaging') && this.pushMessagingTreeElement) {\n        this.pushMessagingTreeElement.initialize(backgroundServiceModel);\n      }\n    }\n  }\n\n  private domStorageModelAdded(model: DOMStorageModel): void {\n    model.enable();\n    model.storages().forEach(this.addDOMStorage.bind(this));\n    model.addEventListener(DOMStorageModelEvents.DOMStorageAdded, this.domStorageAdded, this);\n    model.addEventListener(DOMStorageModelEvents.DOMStorageRemoved, this.domStorageRemoved, this);\n  }\n\n  private domStorageModelRemoved(model: DOMStorageModel): void {\n    model.storages().forEach(this.removeDOMStorage.bind(this));\n    model.removeEventListener(DOMStorageModelEvents.DOMStorageAdded, this.domStorageAdded, this);\n    model.removeEventListener(DOMStorageModelEvents.DOMStorageRemoved, this.domStorageRemoved, this);\n  }\n\n  private interestGroupModelAdded(model: InterestGroupStorageModel): void {\n    model.enable();\n    model.addEventListener(InterestGroupModelEvents.InterestGroupAccess, this.interestGroupAccess, this);\n  }\n\n  private interestGroupModelRemoved(model: InterestGroupStorageModel): void {\n    model.disable();\n    model.removeEventListener(InterestGroupModelEvents.InterestGroupAccess, this.interestGroupAccess, this);\n  }\n\n  private resetWithFrames(): void {\n    this.resourcesSection.reset();\n    this.reset();\n  }\n\n  private resetWebSQL(): void {\n    for (const queryView of this.databaseQueryViews.values()) {\n      queryView.removeEventListener(DatabaseQueryViewEvents.SchemaUpdated, event => {\n        void this.updateDatabaseTables(event);\n      }, this);\n    }\n    this.databaseTableViews.clear();\n    this.databaseQueryViews.clear();\n    this.databaseTreeElements.clear();\n    this.databasesListTreeElement.removeChildren();\n    this.databasesListTreeElement.setExpandable(false);\n  }\n\n  private treeElementAdded(event: Common.EventTarget.EventTargetEvent<UI.TreeOutline.TreeElement>): void {\n    // On tree item selection its itemURL and those of its parents are persisted.\n    // On reload/navigation we check for matches starting from the root on the\n    // path to the current element. Matching nodes are expanded until we hit a\n    // mismatch. This way we ensure that the longest matching path starting from\n    // the root is expanded, even if we cannot match the whole path.\n    const selection = this.panel.lastSelectedItemPath();\n    if (!selection.length) {\n      return;\n    }\n    const element = event.data;\n    const elementPath = [element as UI.TreeOutline.TreeElement | ApplicationPanelTreeElement];\n    for (let parent = element.parent as UI.TreeOutline.TreeElement | ApplicationPanelTreeElement | null;\n         parent && 'itemURL' in parent && parent.itemURL; parent = parent.parent) {\n      elementPath.push(parent as ApplicationPanelTreeElement);\n    }\n\n    let i = selection.length - 1;\n    let j = elementPath.length - 1;\n    while (i >= 0 && j >= 0 && selection[i] === (elementPath[j] as ApplicationPanelTreeElement).itemURL) {\n      if (!elementPath[j].expanded) {\n        if (i > 0) {\n          elementPath[j].expand();\n        }\n        if (!elementPath[j].selected) {\n          elementPath[j].select();\n        }\n      }\n      i--;\n      j--;\n    }\n  }\n\n  private reset(): void {\n    this.domains = {};\n    this.resetWebSQL();\n    this.cookieListTreeElement.removeChildren();\n    this.interestGroupTreeElement.clearEvents();\n  }\n\n  private frameNavigated(event: Common.EventTarget.EventTargetEvent<SDK.ResourceTreeModel.ResourceTreeFrame>): void {\n    const frame = event.data;\n\n    if (frame.isTopFrame()) {\n      this.reset();\n    }\n    this.addCookieDocument(frame);\n  }\n\n  private databaseAdded({data: database}: Common.EventTarget.EventTargetEvent<DatabaseModelDatabase>): void {\n    const databaseTreeElement = new DatabaseTreeElement(this, database);\n    this.databaseTreeElements.set(database, databaseTreeElement);\n    this.databasesListTreeElement.appendChild(databaseTreeElement);\n  }\n\n  private interestGroupAccess(event: Common.EventTarget.EventTargetEvent<Protocol.Storage.InterestGroupAccessedEvent>):\n      void {\n    this.interestGroupTreeElement.addEvent(event.data);\n  }\n\n  private addCookieDocument(frame: SDK.ResourceTreeModel.ResourceTreeFrame): void {\n    // In case the current frame was unreachable, show it's cookies\n    // instead of the error interstitials because they might help to\n    // debug why the frame was unreachable.\n    const urlToParse = frame.unreachableUrl() || frame.url;\n    const parsedURL = Common.ParsedURL.ParsedURL.fromString(urlToParse);\n    if (!parsedURL || (parsedURL.scheme !== 'http' && parsedURL.scheme !== 'https' && parsedURL.scheme !== 'file')) {\n      return;\n    }\n\n    const domain = parsedURL.securityOrigin();\n    if (!this.domains[domain]) {\n      this.domains[domain] = true;\n      const cookieDomainTreeElement = new CookieTreeElement(this.panel, frame, domain);\n      this.cookieListTreeElement.appendChild(cookieDomainTreeElement);\n    }\n  }\n\n  private domStorageAdded(event: Common.EventTarget.EventTargetEvent<DOMStorage>): void {\n    const domStorage = (event.data as DOMStorage);\n    this.addDOMStorage(domStorage);\n  }\n\n  private addDOMStorage(domStorage: DOMStorage): void {\n    console.assert(!this.domStorageTreeElements.get(domStorage));\n    console.assert(Boolean(domStorage.storageKey) || Boolean(domStorage.securityOrigin));\n\n    const domStorageTreeElement = new DOMStorageTreeElement(this.panel, domStorage);\n    this.domStorageTreeElements.set(domStorage, domStorageTreeElement);\n    if (domStorage.isLocalStorage) {\n      this.localStorageListTreeElement.appendChild(domStorageTreeElement);\n    } else {\n      this.sessionStorageListTreeElement.appendChild(domStorageTreeElement);\n    }\n  }\n\n  private domStorageRemoved(event: Common.EventTarget.EventTargetEvent<DOMStorage>): void {\n    const domStorage = (event.data as DOMStorage);\n    this.removeDOMStorage(domStorage);\n  }\n\n  private removeDOMStorage(domStorage: DOMStorage): void {\n    const treeElement = this.domStorageTreeElements.get(domStorage);\n    if (!treeElement) {\n      return;\n    }\n    const wasSelected = treeElement.selected;\n    const parentListTreeElement = treeElement.parent;\n    if (parentListTreeElement) {\n      parentListTreeElement.removeChild(treeElement);\n      if (wasSelected) {\n        parentListTreeElement.select();\n      }\n    }\n    this.domStorageTreeElements.delete(domStorage);\n  }\n\n  selectDatabase(database: DatabaseModelDatabase): void {\n    if (database) {\n      this.showDatabase(database);\n      const treeElement = this.databaseTreeElements.get(database);\n      treeElement && treeElement.select();\n    }\n  }\n\n  async showResource(resource: SDK.Resource.Resource, line?: number, column?: number): Promise<void> {\n    await this.resourcesSection.revealResource(resource, line, column);\n  }\n\n  showFrame(frame: SDK.ResourceTreeModel.ResourceTreeFrame): void {\n    this.resourcesSection.revealAndSelectFrame(frame);\n  }\n\n  showDatabase(database: DatabaseModelDatabase, tableName?: string): void {\n    if (!database) {\n      return;\n    }\n\n    let view;\n    if (tableName) {\n      let tableViews = this.databaseTableViews.get(database);\n      if (!tableViews) {\n        tableViews = ({} as {\n          [x: string]: DatabaseTableView,\n        });\n        this.databaseTableViews.set(database, tableViews);\n      }\n      view = tableViews[tableName];\n      if (!view) {\n        view = new DatabaseTableView(database, tableName);\n        tableViews[tableName] = view;\n      }\n    } else {\n      view = this.databaseQueryViews.get(database);\n      if (!view) {\n        view = new DatabaseQueryView(database);\n        this.databaseQueryViews.set(database, view);\n        view.addEventListener(DatabaseQueryViewEvents.SchemaUpdated, event => {\n          void this.updateDatabaseTables(event);\n        }, this);\n      }\n    }\n\n    this.innerShowView(view);\n  }\n\n  showFileSystem(view: UI.Widget.Widget): void {\n    this.innerShowView(view);\n  }\n\n  private innerShowView(view: UI.Widget.Widget): void {\n    this.panel.showView(view);\n  }\n\n  private async updateDatabaseTables(event: Common.EventTarget.EventTargetEvent<DatabaseModelDatabase>): Promise<void> {\n    const database = event.data;\n\n    if (!database) {\n      return;\n    }\n\n    const databasesTreeElement = this.databaseTreeElements.get(database);\n    if (!databasesTreeElement) {\n      return;\n    }\n\n    databasesTreeElement.invalidateChildren();\n    const tableViews = this.databaseTableViews.get(database);\n\n    if (!tableViews) {\n      return;\n    }\n\n    const tableNamesHash = new Set<string>();\n    const panel = this.panel;\n    const tableNames = await database.tableNames();\n\n    for (const tableName of tableNames) {\n      tableNamesHash.add(tableName);\n    }\n\n    for (const tableName in tableViews) {\n      if (!(tableNamesHash.has(tableName))) {\n        if (panel.visibleView === tableViews[tableName]) {\n          panel.showView(null);\n        }\n        delete tableViews[tableName];\n      }\n    }\n\n    await databasesTreeElement.updateChildren();\n  }\n\n  private onmousemove(event: MouseEvent): void {\n    const nodeUnderMouse = (event.target as Node);\n    if (!nodeUnderMouse) {\n      return;\n    }\n\n    const listNode = UI.UIUtils.enclosingNodeOrSelfWithNodeName(nodeUnderMouse, 'li');\n    if (!listNode) {\n      return;\n    }\n\n    const element = UI.TreeOutline.TreeElement.getTreeElementBylistItemNode(listNode);\n    if (this.previousHoveredElement === element) {\n      return;\n    }\n\n    if (this.previousHoveredElement) {\n      this.previousHoveredElement.hovered = false;\n      delete this.previousHoveredElement;\n    }\n\n    if (element instanceof FrameTreeElement) {\n      this.previousHoveredElement = element;\n      element.hovered = true;\n    }\n  }\n\n  private onmouseleave(_event: MouseEvent): void {\n    if (this.previousHoveredElement) {\n      this.previousHoveredElement.hovered = false;\n      delete this.previousHoveredElement;\n    }\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.sidebarTree.registerCSSFiles([resourcesSidebarStyles]);\n  }\n}\n\nexport class BackgroundServiceTreeElement extends ApplicationPanelTreeElement {\n  private serviceName: Protocol.BackgroundService.ServiceName;\n  private view: BackgroundServiceView|null;\n  private model: BackgroundServiceModel|null;\n  private selectedInternal: boolean;\n\n  constructor(storagePanel: ResourcesPanel, serviceName: Protocol.BackgroundService.ServiceName) {\n    super(storagePanel, BackgroundServiceView.getUIString(serviceName), false);\n\n    this.serviceName = serviceName;\n\n    /* Whether the element has been selected. */\n    this.selectedInternal = false;\n\n    this.view = null;\n\n    this.model = null;\n\n    const backgroundServiceIcon = UI.Icon.Icon.create(this.getIconType(), 'resource-tree-item');\n    this.setLeadingIcons([backgroundServiceIcon]);\n  }\n\n  private getIconType(): string {\n    switch (this.serviceName) {\n      case Protocol.BackgroundService.ServiceName.BackgroundFetch:\n        return 'mediumicon-fetch';\n      case Protocol.BackgroundService.ServiceName.BackgroundSync:\n        return 'mediumicon-sync';\n      case Protocol.BackgroundService.ServiceName.PushMessaging:\n        return 'mediumicon-cloud';\n      case Protocol.BackgroundService.ServiceName.Notifications:\n        return 'mediumicon-bell';\n      case Protocol.BackgroundService.ServiceName.PaymentHandler:\n        return 'mediumicon-payment';\n      case Protocol.BackgroundService.ServiceName.PeriodicBackgroundSync:\n        return 'mediumicon-schedule';\n      default:\n        console.error(`Service ${this.serviceName} does not have a dedicated icon`);\n        return 'mediumicon-table';\n    }\n  }\n\n  initialize(model: BackgroundServiceModel|null): void {\n    this.model = model;\n    // Show the view if the model was initialized after selection.\n    if (this.selectedInternal && !this.view) {\n      this.onselect(false);\n    }\n  }\n\n  get itemURL(): Platform.DevToolsPath.UrlString {\n    return `background-service://${this.serviceName}` as Platform.DevToolsPath.UrlString;\n  }\n\n  onselect(selectedByUser?: boolean): boolean {\n    super.onselect(selectedByUser);\n    this.selectedInternal = true;\n\n    if (!this.model) {\n      return false;\n    }\n\n    if (!this.view) {\n      this.view = new BackgroundServiceView(this.serviceName, this.model);\n    }\n    this.showView(this.view);\n    UI.Context.Context.instance().setFlavor(BackgroundServiceView, this.view);\n    Host.userMetrics.panelShown('background_service_' + this.serviceName);\n    return false;\n  }\n}\n\nexport class DatabaseTreeElement extends ApplicationPanelTreeElement {\n  private readonly sidebar: ApplicationPanelSidebar;\n  private readonly database: DatabaseModelDatabase;\n  constructor(sidebar: ApplicationPanelSidebar, database: DatabaseModelDatabase) {\n    super(sidebar.panel, database.name, true);\n    this.sidebar = sidebar;\n    this.database = database;\n\n    const icon = UI.Icon.Icon.create('mediumicon-database', 'resource-tree-item');\n    this.setLeadingIcons([icon]);\n  }\n\n  get itemURL(): Platform.DevToolsPath.UrlString {\n    return 'database://' + encodeURI(this.database.name) as Platform.DevToolsPath.UrlString;\n  }\n\n  onselect(selectedByUser?: boolean): boolean {\n    super.onselect(selectedByUser);\n    this.sidebar.showDatabase(this.database);\n    Host.userMetrics.panelShown(Host.UserMetrics.PanelCodes[Host.UserMetrics.PanelCodes.web_sql]);\n    return false;\n  }\n\n  onexpand(): void {\n    void this.updateChildren();\n  }\n\n  async updateChildren(): Promise<void> {\n    this.removeChildren();\n    const tableNames = await this.database.tableNames();\n    for (const tableName of tableNames) {\n      this.appendChild(new DatabaseTableTreeElement(this.sidebar, this.database, tableName));\n    }\n  }\n}\n\nexport class DatabaseTableTreeElement extends ApplicationPanelTreeElement {\n  private readonly sidebar: ApplicationPanelSidebar;\n  private readonly database: DatabaseModelDatabase;\n  private readonly tableName: string;\n\n  constructor(sidebar: ApplicationPanelSidebar, database: DatabaseModelDatabase, tableName: string) {\n    super(sidebar.panel, tableName, false);\n    this.sidebar = sidebar;\n    this.database = database;\n    this.tableName = tableName;\n    const icon = UI.Icon.Icon.create('mediumicon-table', 'resource-tree-item');\n    this.setLeadingIcons([icon]);\n  }\n\n  get itemURL(): Platform.DevToolsPath.UrlString {\n    return 'database://' + encodeURI(this.database.name) + '/' + encodeURI(this.tableName) as\n        Platform.DevToolsPath.UrlString;\n  }\n\n  onselect(selectedByUser?: boolean): boolean {\n    super.onselect(selectedByUser);\n    this.sidebar.showDatabase(this.database, this.tableName);\n    Host.userMetrics.panelShown(Host.UserMetrics.PanelCodes[Host.UserMetrics.PanelCodes.web_sql]);\n    return false;\n  }\n}\n\nexport class ServiceWorkersTreeElement extends ApplicationPanelTreeElement {\n  private view?: ServiceWorkersView;\n\n  constructor(storagePanel: ResourcesPanel) {\n    super(storagePanel, i18n.i18n.lockedString('Service Workers'), false);\n    const icon = UI.Icon.Icon.create('mediumicon-service-worker', 'resource-tree-item');\n    this.setLeadingIcons([icon]);\n  }\n\n  get itemURL(): Platform.DevToolsPath.UrlString {\n    return 'service-workers://' as Platform.DevToolsPath.UrlString;\n  }\n\n  onselect(selectedByUser?: boolean): boolean {\n    super.onselect(selectedByUser);\n    if (!this.view) {\n      this.view = new ServiceWorkersView();\n    }\n    this.showView(this.view);\n    Host.userMetrics.panelShown(Host.UserMetrics.PanelCodes[Host.UserMetrics.PanelCodes.service_workers]);\n    return false;\n  }\n}\n\nexport class AppManifestTreeElement extends ApplicationPanelTreeElement {\n  private view?: AppManifestView;\n  constructor(storagePanel: ResourcesPanel) {\n    super(storagePanel, i18nString(UIStrings.manifest), false);\n    const icon = UI.Icon.Icon.create('mediumicon-manifest', 'resource-tree-item');\n    this.setLeadingIcons([icon]);\n  }\n\n  get itemURL(): Platform.DevToolsPath.UrlString {\n    return 'manifest://' as Platform.DevToolsPath.UrlString;\n  }\n\n  onselect(selectedByUser?: boolean): boolean {\n    super.onselect(selectedByUser);\n    if (!this.view) {\n      this.view = new AppManifestView();\n    }\n    this.showView(this.view);\n    Host.userMetrics.panelShown(Host.UserMetrics.PanelCodes[Host.UserMetrics.PanelCodes.app_manifest]);\n    return false;\n  }\n}\n\nexport class ClearStorageTreeElement extends ApplicationPanelTreeElement {\n  private view?: StorageView;\n  constructor(storagePanel: ResourcesPanel) {\n    super(storagePanel, i18nString(UIStrings.storage), false);\n    const icon = UI.Icon.Icon.create('mediumicon-database', 'resource-tree-item');\n    this.setLeadingIcons([icon]);\n  }\n\n  get itemURL(): Platform.DevToolsPath.UrlString {\n    return 'clear-storage://' as Platform.DevToolsPath.UrlString;\n  }\n\n  onselect(selectedByUser?: boolean): boolean {\n    super.onselect(selectedByUser);\n    if (!this.view) {\n      this.view = new StorageView();\n    }\n    this.showView(this.view);\n    Host.userMetrics.panelShown(Host.UserMetrics.PanelCodes[Host.UserMetrics.PanelCodes.storage]);\n    return false;\n  }\n}\n\nexport class IndexedDBTreeElement extends ExpandableApplicationPanelTreeElement {\n  private idbDatabaseTreeElements: IDBDatabaseTreeElement[];\n  constructor(storagePanel: ResourcesPanel) {\n    super(storagePanel, i18nString(UIStrings.indexeddb), 'IndexedDB');\n    const icon = UI.Icon.Icon.create('mediumicon-database', 'resource-tree-item');\n    this.setLeadingIcons([icon]);\n    this.idbDatabaseTreeElements = [];\n    this.initialize();\n  }\n\n  private initialize(): void {\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        IndexedDBModel, IndexedDBModelEvents.DatabaseAdded, this.indexedDBAdded, this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        IndexedDBModel, IndexedDBModelEvents.DatabaseRemoved, this.indexedDBRemoved, this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        IndexedDBModel, IndexedDBModelEvents.DatabaseLoaded, this.indexedDBLoaded, this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        IndexedDBModel, IndexedDBModelEvents.IndexedDBContentUpdated, this.indexedDBContentUpdated, this);\n    // TODO(szuend): Replace with a Set once two web tests no longer directly access this private\n    //               variable (indexeddb/live-update-indexeddb-content.js, indexeddb/delete-entry.js).\n    this.idbDatabaseTreeElements = [];\n\n    for (const indexedDBModel of SDK.TargetManager.TargetManager.instance().models(IndexedDBModel)) {\n      const databases = indexedDBModel.databases();\n      for (let j = 0; j < databases.length; ++j) {\n        this.addIndexedDB(indexedDBModel, databases[j]);\n      }\n    }\n  }\n\n  removeIndexedDBForModel(model: IndexedDBModel): void {\n    const idbDatabaseTreeElements = this.idbDatabaseTreeElements.filter(element => element.model === model);\n    for (const idbDatabaseTreeElement of idbDatabaseTreeElements) {\n      this.removeIDBDatabaseTreeElement(idbDatabaseTreeElement);\n    }\n  }\n\n  onattach(): void {\n    super.onattach();\n    this.listItemElement.addEventListener('contextmenu', this.handleContextMenuEvent.bind(this), true);\n  }\n\n  private handleContextMenuEvent(event: MouseEvent): void {\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    contextMenu.defaultSection().appendItem(i18nString(UIStrings.refreshIndexeddb), this.refreshIndexedDB.bind(this));\n    void contextMenu.show();\n  }\n\n  refreshIndexedDB(): void {\n    for (const indexedDBModel of SDK.TargetManager.TargetManager.instance().models(IndexedDBModel)) {\n      void indexedDBModel.refreshDatabaseNames();\n    }\n  }\n\n  private indexedDBAdded({\n    data: {databaseId, model},\n  }: Common.EventTarget.EventTargetEvent<{databaseId: DatabaseId, model: IndexedDBModel}>): void {\n    this.addIndexedDB(model, databaseId);\n  }\n\n  private addIndexedDB(model: IndexedDBModel, databaseId: DatabaseId): void {\n    const idbDatabaseTreeElement = new IDBDatabaseTreeElement(this.resourcesPanel, model, databaseId);\n    this.idbDatabaseTreeElements.push(idbDatabaseTreeElement);\n    this.appendChild(idbDatabaseTreeElement);\n    model.refreshDatabase(databaseId);\n  }\n\n  private indexedDBRemoved({\n    data: {databaseId, model},\n  }: Common.EventTarget.EventTargetEvent<{databaseId: DatabaseId, model: IndexedDBModel}>): void {\n    const idbDatabaseTreeElement = this.idbDatabaseTreeElement(model, databaseId);\n    if (!idbDatabaseTreeElement) {\n      return;\n    }\n    this.removeIDBDatabaseTreeElement(idbDatabaseTreeElement);\n  }\n\n  private removeIDBDatabaseTreeElement(idbDatabaseTreeElement: IDBDatabaseTreeElement): void {\n    idbDatabaseTreeElement.clear();\n    this.removeChild(idbDatabaseTreeElement);\n    Platform.ArrayUtilities.removeElement(this.idbDatabaseTreeElements, idbDatabaseTreeElement);\n    this.setExpandable(this.childCount() > 0);\n  }\n\n  private indexedDBLoaded(\n      {data: {database, model, entriesUpdated}}: Common.EventTarget\n          .EventTargetEvent<{database: IndexedDBModelDatabase, model: IndexedDBModel, entriesUpdated: boolean}>): void {\n    const idbDatabaseTreeElement = this.idbDatabaseTreeElement(model, database.databaseId);\n    if (!idbDatabaseTreeElement) {\n      return;\n    }\n    idbDatabaseTreeElement.update(database, entriesUpdated);\n    this.indexedDBLoadedForTest();\n  }\n\n  private indexedDBLoadedForTest(): void {\n    // For sniffing in tests.\n  }\n\n  private indexedDBContentUpdated({\n    data: {databaseId, objectStoreName, model},\n  }: Common.EventTarget.EventTargetEvent<{databaseId: DatabaseId, objectStoreName: string, model: IndexedDBModel}>):\n      void {\n    const idbDatabaseTreeElement = this.idbDatabaseTreeElement(model, databaseId);\n    if (!idbDatabaseTreeElement) {\n      return;\n    }\n    idbDatabaseTreeElement.indexedDBContentUpdated(objectStoreName);\n  }\n\n  private idbDatabaseTreeElement(model: IndexedDBModel, databaseId: DatabaseId): IDBDatabaseTreeElement|null {\n    return this.idbDatabaseTreeElements.find(x => x.databaseId.equals(databaseId) && x.model === model) || null;\n  }\n}\n\nexport class IDBDatabaseTreeElement extends ApplicationPanelTreeElement {\n  model: IndexedDBModel;\n  databaseId: DatabaseId;\n  private readonly idbObjectStoreTreeElements: Map<string, IDBObjectStoreTreeElement>;\n  private database?: IndexedDBModelDatabase;\n  private view?: IDBDatabaseView;\n\n  constructor(storagePanel: ResourcesPanel, model: IndexedDBModel, databaseId: DatabaseId) {\n    super(storagePanel, databaseId.name + ' - ' + databaseId.securityOrigin, false);\n    this.model = model;\n    this.databaseId = databaseId;\n    this.idbObjectStoreTreeElements = new Map();\n    const icon = UI.Icon.Icon.create('mediumicon-database', 'resource-tree-item');\n    this.setLeadingIcons([icon]);\n    this.model.addEventListener(IndexedDBModelEvents.DatabaseNamesRefreshed, this.refreshIndexedDB, this);\n  }\n\n  get itemURL(): Platform.DevToolsPath.UrlString {\n    return 'indexedDB://' + this.databaseId.securityOrigin + '/' + this.databaseId.name as\n        Platform.DevToolsPath.UrlString;\n  }\n\n  onattach(): void {\n    super.onattach();\n    this.listItemElement.addEventListener('contextmenu', this.handleContextMenuEvent.bind(this), true);\n  }\n\n  private handleContextMenuEvent(event: MouseEvent): void {\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    contextMenu.defaultSection().appendItem(i18nString(UIStrings.refreshIndexeddb), this.refreshIndexedDB.bind(this));\n    void contextMenu.show();\n  }\n\n  private refreshIndexedDB(): void {\n    this.model.refreshDatabase(this.databaseId);\n  }\n\n  indexedDBContentUpdated(objectStoreName: string): void {\n    const treeElement = this.idbObjectStoreTreeElements.get(objectStoreName);\n    if (treeElement) {\n      treeElement.markNeedsRefresh();\n    }\n  }\n\n  update(database: IndexedDBModelDatabase, entriesUpdated: boolean): void {\n    this.database = database;\n    const objectStoreNames = new Set<string>();\n    for (const objectStoreName of [...this.database.objectStores.keys()].sort()) {\n      const objectStore = this.database.objectStores.get(objectStoreName);\n      if (!objectStore) {\n        continue;\n      }\n      objectStoreNames.add(objectStore.name);\n      let treeElement = this.idbObjectStoreTreeElements.get(objectStore.name);\n      if (!treeElement) {\n        treeElement = new IDBObjectStoreTreeElement(this.resourcesPanel, this.model, this.databaseId, objectStore);\n        this.idbObjectStoreTreeElements.set(objectStore.name, treeElement);\n        this.appendChild(treeElement);\n      }\n      treeElement.update(objectStore, entriesUpdated);\n    }\n    for (const objectStoreName of this.idbObjectStoreTreeElements.keys()) {\n      if (!objectStoreNames.has(objectStoreName)) {\n        this.objectStoreRemoved(objectStoreName);\n      }\n    }\n\n    if (this.view) {\n      this.view.update(database);\n    }\n\n    this.updateTooltip();\n  }\n\n  private updateTooltip(): void {\n    const version = this.database ? this.database.version : '-';\n    if (Object.keys(this.idbObjectStoreTreeElements).length === 0) {\n      this.tooltip = i18nString(UIStrings.versionSEmpty, {PH1: version});\n    } else {\n      this.tooltip = i18nString(UIStrings.versionS, {PH1: version});\n    }\n  }\n\n  onselect(selectedByUser?: boolean): boolean {\n    super.onselect(selectedByUser);\n    if (!this.database) {\n      return false;\n    }\n    if (!this.view) {\n      this.view = new IDBDatabaseView(this.model, this.database);\n    }\n\n    this.showView(this.view);\n    Host.userMetrics.panelShown(Host.UserMetrics.PanelCodes[Host.UserMetrics.PanelCodes.indexed_db]);\n    return false;\n  }\n\n  private objectStoreRemoved(objectStoreName: string): void {\n    const objectStoreTreeElement = this.idbObjectStoreTreeElements.get(objectStoreName);\n    if (objectStoreTreeElement) {\n      objectStoreTreeElement.clear();\n      this.removeChild(objectStoreTreeElement);\n    }\n    this.idbObjectStoreTreeElements.delete(objectStoreName);\n    this.updateTooltip();\n  }\n\n  clear(): void {\n    for (const objectStoreName of this.idbObjectStoreTreeElements.keys()) {\n      this.objectStoreRemoved(objectStoreName);\n    }\n  }\n}\n\nexport class IDBObjectStoreTreeElement extends ApplicationPanelTreeElement {\n  private model: IndexedDBModel;\n  private databaseId: DatabaseId;\n  private readonly idbIndexTreeElements: Map<string, IDBIndexTreeElement>;\n  private objectStore: ObjectStore;\n  private view: IDBDataView|null;\n\n  constructor(storagePanel: ResourcesPanel, model: IndexedDBModel, databaseId: DatabaseId, objectStore: ObjectStore) {\n    super(storagePanel, objectStore.name, false);\n    this.model = model;\n    this.databaseId = databaseId;\n    this.idbIndexTreeElements = new Map();\n    this.objectStore = objectStore;\n    this.view = null;\n    const icon = UI.Icon.Icon.create('mediumicon-table', 'resource-tree-item');\n    this.setLeadingIcons([icon]);\n  }\n\n  get itemURL(): Platform.DevToolsPath.UrlString {\n    return 'indexedDB://' + this.databaseId.securityOrigin + '/' + this.databaseId.name + '/' + this.objectStore.name as\n        Platform.DevToolsPath.UrlString;\n  }\n\n  onattach(): void {\n    super.onattach();\n    this.listItemElement.addEventListener('contextmenu', this.handleContextMenuEvent.bind(this), true);\n  }\n\n  markNeedsRefresh(): void {\n    if (this.view) {\n      this.view.markNeedsRefresh();\n    }\n    for (const treeElement of this.idbIndexTreeElements.values()) {\n      treeElement.markNeedsRefresh();\n    }\n  }\n\n  private handleContextMenuEvent(event: MouseEvent): void {\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    contextMenu.defaultSection().appendItem(i18nString(UIStrings.clear), this.clearObjectStore.bind(this));\n    void contextMenu.show();\n  }\n\n  private refreshObjectStore(): void {\n    if (this.view) {\n      this.view.refreshData();\n    }\n    for (const treeElement of this.idbIndexTreeElements.values()) {\n      treeElement.refreshIndex();\n    }\n  }\n\n  private async clearObjectStore(): Promise<void> {\n    await this.model.clearObjectStore(this.databaseId, this.objectStore.name);\n    this.update(this.objectStore, true);\n  }\n\n  update(objectStore: ObjectStore, entriesUpdated: boolean): void {\n    this.objectStore = objectStore;\n\n    const indexNames = new Set<string>();\n    for (const index of this.objectStore.indexes.values()) {\n      indexNames.add(index.name);\n      let treeElement = this.idbIndexTreeElements.get(index.name);\n      if (!treeElement) {\n        treeElement = new IDBIndexTreeElement(\n            this.resourcesPanel, this.model, this.databaseId, this.objectStore, index,\n            this.refreshObjectStore.bind(this));\n        this.idbIndexTreeElements.set(index.name, treeElement);\n        this.appendChild(treeElement);\n      }\n      treeElement.update(this.objectStore, index, entriesUpdated);\n    }\n    for (const indexName of this.idbIndexTreeElements.keys()) {\n      if (!indexNames.has(indexName)) {\n        this.indexRemoved(indexName);\n      }\n    }\n    for (const [indexName, treeElement] of this.idbIndexTreeElements.entries()) {\n      if (!indexNames.has(indexName)) {\n        this.removeChild((treeElement as IDBIndexTreeElement));\n        this.idbIndexTreeElements.delete((indexName as string));\n      }\n    }\n\n    if (this.childCount()) {\n      this.expand();\n    }\n\n    if (this.view && entriesUpdated) {\n      this.view.update(this.objectStore, null);\n    }\n\n    this.updateTooltip();\n  }\n\n  private updateTooltip(): void {\n    const keyPathString = this.objectStore.keyPathString;\n    let tooltipString = keyPathString !== null ? i18nString(UIStrings.keyPathS, {PH1: keyPathString}) : '';\n    if (this.objectStore.autoIncrement) {\n      tooltipString += '\\n' + i18n.i18n.lockedString('autoIncrement');\n    }\n    this.tooltip = tooltipString;\n  }\n\n  onselect(selectedByUser?: boolean): boolean {\n    super.onselect(selectedByUser);\n    if (!this.view) {\n      this.view =\n          new IDBDataView(this.model, this.databaseId, this.objectStore, null, this.refreshObjectStore.bind(this));\n    }\n\n    this.showView(this.view);\n    Host.userMetrics.panelShown(Host.UserMetrics.PanelCodes[Host.UserMetrics.PanelCodes.indexed_db]);\n    return false;\n  }\n\n  private indexRemoved(indexName: string): void {\n    const indexTreeElement = this.idbIndexTreeElements.get(indexName);\n    if (indexTreeElement) {\n      indexTreeElement.clear();\n      this.removeChild(indexTreeElement);\n    }\n    this.idbIndexTreeElements.delete(indexName);\n  }\n\n  clear(): void {\n    for (const indexName of this.idbIndexTreeElements.keys()) {\n      this.indexRemoved(indexName);\n    }\n    if (this.view) {\n      this.view.clear();\n    }\n  }\n}\n\nexport class IDBIndexTreeElement extends ApplicationPanelTreeElement {\n  private model: IndexedDBModel;\n  private databaseId: DatabaseId;\n  private objectStore: ObjectStore;\n  private index: Index;\n  private refreshObjectStore: () => void;\n  private view?: IDBDataView;\n\n  constructor(\n      storagePanel: ResourcesPanel, model: IndexedDBModel, databaseId: DatabaseId, objectStore: ObjectStore,\n      index: Index, refreshObjectStore: () => void) {\n    super(storagePanel, index.name, false);\n    this.model = model;\n    this.databaseId = databaseId;\n    this.objectStore = objectStore;\n    this.index = index;\n    this.refreshObjectStore = refreshObjectStore;\n  }\n\n  get itemURL(): Platform.DevToolsPath.UrlString {\n    return 'indexedDB://' + this.databaseId.securityOrigin + '/' + this.databaseId.name + '/' + this.objectStore.name +\n        '/' + this.index.name as Platform.DevToolsPath.UrlString;\n  }\n\n  markNeedsRefresh(): void {\n    if (this.view) {\n      this.view.markNeedsRefresh();\n    }\n  }\n\n  refreshIndex(): void {\n    if (this.view) {\n      this.view.refreshData();\n    }\n  }\n\n  update(objectStore: ObjectStore, index: Index, entriesUpdated: boolean): void {\n    this.objectStore = objectStore;\n    this.index = index;\n\n    if (this.view && entriesUpdated) {\n      this.view.update(this.objectStore, this.index);\n    }\n\n    this.updateTooltip();\n  }\n\n  private updateTooltip(): void {\n    const tooltipLines = [];\n    const keyPathString = this.index.keyPathString;\n    tooltipLines.push(i18nString(UIStrings.keyPathS, {PH1: keyPathString}));\n    if (this.index.unique) {\n      tooltipLines.push(i18n.i18n.lockedString('unique'));\n    }\n    if (this.index.multiEntry) {\n      tooltipLines.push(i18n.i18n.lockedString('multiEntry'));\n    }\n    this.tooltip = tooltipLines.join('\\n');\n  }\n\n  onselect(selectedByUser?: boolean): boolean {\n    super.onselect(selectedByUser);\n    if (!this.view) {\n      this.view = new IDBDataView(this.model, this.databaseId, this.objectStore, this.index, this.refreshObjectStore);\n    }\n\n    this.showView(this.view);\n    Host.userMetrics.panelShown(Host.UserMetrics.PanelCodes[Host.UserMetrics.PanelCodes.indexed_db]);\n    return false;\n  }\n\n  clear(): void {\n    if (this.view) {\n      this.view.clear();\n    }\n  }\n}\n\nexport class DOMStorageTreeElement extends ApplicationPanelTreeElement {\n  private readonly domStorage: DOMStorage;\n  constructor(storagePanel: ResourcesPanel, domStorage: DOMStorage) {\n    super(\n        storagePanel,\n        domStorage.securityOrigin ? domStorage.securityOrigin :\n                                    (domStorage.storageKey ? domStorage.storageKey : i18nString(UIStrings.localFiles)),\n        false);\n    this.domStorage = domStorage;\n    const icon = UI.Icon.Icon.create('mediumicon-table', 'resource-tree-item');\n    this.setLeadingIcons([icon]);\n  }\n\n  get itemURL(): Platform.DevToolsPath.UrlString {\n    return 'storage://' + this.domStorage.securityOrigin + '/' +\n        (this.domStorage.isLocalStorage ? 'local' : 'session') as Platform.DevToolsPath.UrlString;\n  }\n\n  onselect(selectedByUser?: boolean): boolean {\n    super.onselect(selectedByUser);\n    Host.userMetrics.panelShown(Host.UserMetrics.PanelCodes[Host.UserMetrics.PanelCodes.dom_storage]);\n    this.resourcesPanel.showDOMStorage(this.domStorage);\n    return false;\n  }\n\n  onattach(): void {\n    super.onattach();\n    this.listItemElement.addEventListener('contextmenu', this.handleContextMenuEvent.bind(this), true);\n  }\n\n  private handleContextMenuEvent(event: MouseEvent): void {\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    contextMenu.defaultSection().appendItem(i18nString(UIStrings.clear), () => this.domStorage.clear());\n    void contextMenu.show();\n  }\n}\n\nexport class CookieTreeElement extends ApplicationPanelTreeElement {\n  private readonly target: SDK.Target.Target;\n  private readonly cookieDomainInternal: string;\n\n  constructor(storagePanel: ResourcesPanel, frame: SDK.ResourceTreeModel.ResourceTreeFrame, cookieDomain: string) {\n    super(storagePanel, cookieDomain ? cookieDomain : i18nString(UIStrings.localFiles), false);\n    this.target = frame.resourceTreeModel().target();\n    this.cookieDomainInternal = cookieDomain;\n    this.tooltip = i18nString(UIStrings.cookiesUsedByFramesFromS, {PH1: cookieDomain});\n    const icon = UI.Icon.Icon.create('mediumicon-cookie', 'resource-tree-item');\n    this.setLeadingIcons([icon]);\n  }\n\n  get itemURL(): Platform.DevToolsPath.UrlString {\n    return 'cookies://' + this.cookieDomainInternal as Platform.DevToolsPath.UrlString;\n  }\n\n  cookieDomain(): string {\n    return this.cookieDomainInternal;\n  }\n\n  onattach(): void {\n    super.onattach();\n    this.listItemElement.addEventListener('contextmenu', this.handleContextMenuEvent.bind(this), true);\n  }\n\n  private handleContextMenuEvent(event: Event): void {\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    contextMenu.defaultSection().appendItem(\n        i18nString(UIStrings.clear), () => this.resourcesPanel.clearCookies(this.target, this.cookieDomainInternal));\n    void contextMenu.show();\n  }\n\n  onselect(selectedByUser?: boolean): boolean {\n    super.onselect(selectedByUser);\n    this.resourcesPanel.showCookies(this.target, this.cookieDomainInternal);\n    Host.userMetrics.panelShown(Host.UserMetrics.PanelCodes[Host.UserMetrics.PanelCodes.cookies]);\n    return false;\n  }\n}\n\nexport class StorageCategoryView extends UI.Widget.VBox {\n  private emptyWidget: UI.EmptyWidget.EmptyWidget;\n  private linkElement: HTMLElement|null;\n\n  constructor() {\n    super();\n\n    this.element.classList.add('storage-view');\n    this.emptyWidget = new UI.EmptyWidget.EmptyWidget('');\n    this.linkElement = null;\n    this.emptyWidget.show(this.element);\n  }\n\n  setText(text: string): void {\n    this.emptyWidget.text = text;\n  }\n\n  setLink(link: Platform.DevToolsPath.UrlString|null): void {\n    if (link && !this.linkElement) {\n      this.linkElement = this.emptyWidget.appendLink(link);\n    }\n    if (!link && this.linkElement) {\n      this.linkElement.classList.add('hidden');\n    }\n    if (link && this.linkElement) {\n      this.linkElement.setAttribute('href', link);\n      this.linkElement.classList.remove('hidden');\n    }\n  }\n}\n\nexport class ResourcesSection implements SDK.TargetManager.Observer {\n  panel: ResourcesPanel;\n  private readonly treeElement: UI.TreeOutline.TreeElement;\n  private treeElementForFrameId: Map<string, FrameTreeElement>;\n  private treeElementForTargetId: Map<string, FrameTreeElement>;\n\n  constructor(storagePanel: ResourcesPanel, treeElement: UI.TreeOutline.TreeElement) {\n    this.panel = storagePanel;\n    this.treeElement = treeElement;\n    UI.ARIAUtils.setAccessibleName(this.treeElement.listItemNode, 'Resources Section');\n    this.treeElementForFrameId = new Map();\n    this.treeElementForTargetId = new Map();\n\n    const frameManager = SDK.FrameManager.FrameManager.instance();\n    frameManager.addEventListener(\n        SDK.FrameManager.Events.FrameAddedToTarget, event => this.frameAdded(event.data.frame), this);\n    frameManager.addEventListener(\n        SDK.FrameManager.Events.FrameRemoved, event => this.frameDetached(event.data.frameId), this);\n    frameManager.addEventListener(\n        SDK.FrameManager.Events.FrameNavigated, event => this.frameNavigated(event.data.frame), this);\n    frameManager.addEventListener(\n        SDK.FrameManager.Events.ResourceAdded, event => this.resourceAdded(event.data.resource), this);\n\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.ChildTargetManager.ChildTargetManager, SDK.ChildTargetManager.Events.TargetCreated, this.windowOpened,\n        this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.ChildTargetManager.ChildTargetManager, SDK.ChildTargetManager.Events.TargetInfoChanged, this.windowChanged,\n        this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.ChildTargetManager.ChildTargetManager, SDK.ChildTargetManager.Events.TargetDestroyed, this.windowDestroyed,\n        this);\n\n    SDK.TargetManager.TargetManager.instance().observeTargets(this);\n\n    for (const frame of frameManager.getAllFrames()) {\n      if (!this.treeElementForFrameId.get(frame.id)) {\n        this.addFrameAndParents(frame);\n      }\n      const childTargetManager = frame.resourceTreeModel().target().model(SDK.ChildTargetManager.ChildTargetManager);\n      if (childTargetManager) {\n        for (const targetInfo of childTargetManager.targetInfos()) {\n          this.windowOpened({data: targetInfo});\n        }\n      }\n    }\n  }\n\n  targetAdded(target: SDK.Target.Target): void {\n    if (target.type() === SDK.Target.Type.Worker || target.type() === SDK.Target.Type.ServiceWorker) {\n      void this.workerAdded(target);\n    }\n  }\n\n  private async workerAdded(target: SDK.Target.Target): Promise<void> {\n    const parentTarget = target.parentTarget();\n    if (!parentTarget) {\n      return;\n    }\n    const parentTargetId = parentTarget.id();\n    const frameTreeElement = this.treeElementForTargetId.get(parentTargetId);\n    const targetId = target.id();\n    assertNotMainTarget(targetId);\n    const {targetInfo} = await parentTarget.targetAgent().invoke_getTargetInfo({targetId});\n    if (frameTreeElement && targetInfo) {\n      frameTreeElement.workerCreated(targetInfo);\n    }\n  }\n\n  targetRemoved(_target: SDK.Target.Target): void {\n  }\n\n  private addFrameAndParents(frame: SDK.ResourceTreeModel.ResourceTreeFrame): void {\n    const parentFrame = frame.parentFrame();\n    if (parentFrame && !this.treeElementForFrameId.get(parentFrame.id)) {\n      this.addFrameAndParents(parentFrame);\n    }\n    this.frameAdded(frame);\n  }\n\n  private expandFrame(frame: SDK.ResourceTreeModel.ResourceTreeFrame|null): boolean {\n    if (!frame) {\n      return false;\n    }\n    let treeElement = this.treeElementForFrameId.get(frame.id);\n    if (!treeElement && !this.expandFrame(frame.parentFrame())) {\n      return false;\n    }\n    treeElement = this.treeElementForFrameId.get(frame.id);\n    if (!treeElement) {\n      return false;\n    }\n    treeElement.expand();\n    return true;\n  }\n\n  async revealResource(resource: SDK.Resource.Resource, line?: number, column?: number): Promise<void> {\n    if (!this.expandFrame(resource.frame())) {\n      return;\n    }\n    const resourceTreeElement = FrameResourceTreeElement.forResource(resource);\n    if (resourceTreeElement) {\n      await resourceTreeElement.revealResource(line, column);\n    }\n  }\n\n  revealAndSelectFrame(frame: SDK.ResourceTreeModel.ResourceTreeFrame): void {\n    const frameTreeElement = this.treeElementForFrameId.get(frame.id);\n    frameTreeElement?.reveal();\n    frameTreeElement?.select();\n  }\n\n  private frameAdded(frame: SDK.ResourceTreeModel.ResourceTreeFrame): void {\n    const parentFrame = frame.parentFrame();\n    const parentTreeElement = parentFrame ? this.treeElementForFrameId.get(parentFrame.id) : this.treeElement;\n    if (!parentTreeElement) {\n      return;\n    }\n\n    const existingElement = this.treeElementForFrameId.get(frame.id);\n    if (existingElement) {\n      this.treeElementForFrameId.delete(frame.id);\n      if (existingElement.parent) {\n        existingElement.parent.removeChild(existingElement);\n      }\n    }\n\n    const frameTreeElement = new FrameTreeElement(this, frame);\n    this.treeElementForFrameId.set(frame.id, frameTreeElement);\n    const targetId = frame.resourceTreeModel().target().id();\n    if (!this.treeElementForTargetId.get(targetId)) {\n      this.treeElementForTargetId.set(targetId, frameTreeElement);\n    }\n    parentTreeElement.appendChild(frameTreeElement);\n\n    for (const resource of frame.resources()) {\n      this.resourceAdded(resource);\n    }\n  }\n\n  private frameDetached(frameId: Protocol.Page.FrameId): void {\n    const frameTreeElement = this.treeElementForFrameId.get(frameId);\n    if (!frameTreeElement) {\n      return;\n    }\n\n    this.treeElementForFrameId.delete(frameId);\n    if (frameTreeElement.parent) {\n      frameTreeElement.parent.removeChild(frameTreeElement);\n    }\n  }\n\n  private frameNavigated(frame: SDK.ResourceTreeModel.ResourceTreeFrame): void {\n    const frameTreeElement = this.treeElementForFrameId.get(frame.id);\n    if (frameTreeElement) {\n      void frameTreeElement.frameNavigated(frame);\n    }\n  }\n\n  private resourceAdded(resource: SDK.Resource.Resource): void {\n    if (!resource.frameId) {\n      return;\n    }\n    const frameTreeElement = this.treeElementForFrameId.get(resource.frameId);\n    if (!frameTreeElement) {\n      // This is a frame's main resource, it will be retained\n      // and re-added by the resource manager;\n      return;\n    }\n    frameTreeElement.appendResource(resource);\n  }\n\n  private windowOpened(event: Common.EventTarget.EventTargetEvent<Protocol.Target.TargetInfo>): void {\n    const targetInfo = event.data;\n    // Events for DevTools windows are ignored because they do not have an openerId\n    if (targetInfo.openerId && targetInfo.type === 'page') {\n      const frameTreeElement = this.treeElementForFrameId.get(targetInfo.openerId);\n      if (frameTreeElement) {\n        this.treeElementForTargetId.set(targetInfo.targetId, frameTreeElement);\n        frameTreeElement.windowOpened(targetInfo);\n      }\n    }\n  }\n\n  private windowDestroyed(event: Common.EventTarget.EventTargetEvent<Protocol.Target.TargetID>): void {\n    const targetId = event.data;\n    const frameTreeElement = this.treeElementForTargetId.get(targetId);\n    if (frameTreeElement) {\n      frameTreeElement.windowDestroyed(targetId);\n      this.treeElementForTargetId.delete(targetId);\n    }\n  }\n\n  private windowChanged(event: Common.EventTarget.EventTargetEvent<Protocol.Target.TargetInfo>): void {\n    const targetInfo = event.data;\n    // Events for DevTools windows are ignored because they do not have an openerId\n    if (targetInfo.openerId && targetInfo.type === 'page') {\n      const frameTreeElement = this.treeElementForFrameId.get(targetInfo.openerId);\n      if (frameTreeElement) {\n        frameTreeElement.windowChanged(targetInfo);\n      }\n    }\n  }\n\n  reset(): void {\n    this.treeElement.removeChildren();\n    this.treeElementForFrameId.clear();\n    this.treeElementForTargetId.clear();\n  }\n}\n\nexport class FrameTreeElement extends ApplicationPanelTreeElement {\n  private section: ResourcesSection;\n  private frame: SDK.ResourceTreeModel.ResourceTreeFrame;\n  private frameId: string;\n  private readonly categoryElements: Map<string, ExpandableApplicationPanelTreeElement>;\n  private readonly treeElementForResource: Map<string, FrameResourceTreeElement>;\n  private treeElementForWindow: Map<Protocol.Target.TargetID, FrameWindowTreeElement>;\n  private treeElementForWorker: Map<Protocol.Target.TargetID, WorkerTreeElement>;\n  private view: ApplicationComponents.FrameDetailsView.FrameDetailsView|null;\n\n  constructor(section: ResourcesSection, frame: SDK.ResourceTreeModel.ResourceTreeFrame) {\n    super(section.panel, '', false);\n    this.section = section;\n    this.frame = frame;\n    this.frameId = frame.id;\n    this.categoryElements = new Map();\n    this.treeElementForResource = new Map();\n    this.treeElementForWindow = new Map();\n    this.treeElementForWorker = new Map();\n    void this.frameNavigated(frame);\n    this.view = null;\n  }\n\n  getIconTypeForFrame(frame: SDK.ResourceTreeModel.ResourceTreeFrame): 'mediumicon-frame-blocked'|'mediumicon-frame'|\n      'mediumicon-frame-embedded-blocked'|'mediumicon-frame-embedded' {\n    if (frame.isTopFrame()) {\n      return frame.unreachableUrl() ? 'mediumicon-frame-blocked' : 'mediumicon-frame';\n    }\n    return frame.unreachableUrl() ? 'mediumicon-frame-embedded-blocked' : 'mediumicon-frame-embedded';\n  }\n\n  async frameNavigated(frame: SDK.ResourceTreeModel.ResourceTreeFrame): Promise<void> {\n    const icon = UI.Icon.Icon.create(this.getIconTypeForFrame(frame));\n    if (frame.unreachableUrl()) {\n      icon.classList.add('red-icon');\n    }\n    this.setLeadingIcons([icon]);\n    this.invalidateChildren();\n\n    this.frameId = frame.id;\n    if (this.title !== frame.displayName()) {\n      this.title = frame.displayName();\n      UI.ARIAUtils.setAccessibleName(this.listItemElement, this.title);\n      if (this.parent) {\n        const parent = this.parent;\n        // Insert frame at new position to preserve correct alphabetical order\n        parent.removeChild(this);\n        parent.appendChild(this);\n      }\n    }\n    this.categoryElements.clear();\n    this.treeElementForResource.clear();\n    this.treeElementForWorker.clear();\n\n    if (this.selected) {\n      this.view = new ApplicationComponents.FrameDetailsView.FrameDetailsView(this.frame);\n      this.showView(this.view);\n    } else {\n      this.view = null;\n    }\n\n    // Service Workers' parent is always the top frame. We need to reconstruct\n    // the service worker tree elements after those navigations which allow\n    // the service workers to stay alive.\n    if (frame.isTopFrame()) {\n      const targets = SDK.TargetManager.TargetManager.instance().targets();\n      for (const target of targets) {\n        if (target.type() === SDK.Target.Type.ServiceWorker) {\n          const targetId = target.id();\n          assertNotMainTarget(targetId);\n          const agent = frame.resourceTreeModel().target().targetAgent();\n          const targetInfo = (await agent.invoke_getTargetInfo({targetId})).targetInfo;\n          this.workerCreated(targetInfo);\n        }\n      }\n    }\n  }\n\n  get itemURL(): Platform.DevToolsPath.UrlString {\n    // This is used to persist over reloads/navigation which frame was selected.\n    // A frame's title can change on DevTools refresh, so we resort to using\n    // the URL instead (even though it is not guaranteed to be unique).\n    if (this.frame.isTopFrame()) {\n      return 'frame://' as Platform.DevToolsPath.UrlString;\n    }\n    return 'frame://' + encodeURI(this.frame.url) as Platform.DevToolsPath.UrlString;\n  }\n\n  onselect(selectedByUser?: boolean): boolean {\n    super.onselect(selectedByUser);\n    if (!this.view) {\n      this.view = new ApplicationComponents.FrameDetailsView.FrameDetailsView(this.frame);\n    } else {\n      this.view.update();\n    }\n    Host.userMetrics.panelShown(Host.UserMetrics.PanelCodes[Host.UserMetrics.PanelCodes.frame_details]);\n    this.showView(this.view);\n\n    this.listItemElement.classList.remove('hovered');\n    SDK.OverlayModel.OverlayModel.hideDOMNodeHighlight();\n    return false;\n  }\n\n  set hovered(hovered: boolean) {\n    if (hovered) {\n      this.listItemElement.classList.add('hovered');\n      void this.frame.highlight();\n    } else {\n      this.listItemElement.classList.remove('hovered');\n      SDK.OverlayModel.OverlayModel.hideDOMNodeHighlight();\n    }\n  }\n\n  appendResource(resource: SDK.Resource.Resource): void {\n    const statusCode = resource.statusCode();\n    if (statusCode >= 301 && statusCode <= 303) {\n      return;\n    }\n\n    const resourceType = resource.resourceType();\n    const categoryName = resourceType.name();\n    let categoryElement =\n        resourceType === Common.ResourceType.resourceTypes.Document ? this : this.categoryElements.get(categoryName);\n    if (!categoryElement) {\n      categoryElement = new ExpandableApplicationPanelTreeElement(\n          this.section.panel, resource.resourceType().category().title(), categoryName, categoryName === 'Frames');\n      this.categoryElements.set(resourceType.name(), categoryElement);\n      this.appendChild(categoryElement, FrameTreeElement.presentationOrderCompare);\n    }\n    const resourceTreeElement = new FrameResourceTreeElement(this.section.panel, resource);\n    categoryElement.appendChild(resourceTreeElement, FrameTreeElement.presentationOrderCompare);\n    this.treeElementForResource.set(resource.url, resourceTreeElement);\n  }\n\n  windowOpened(targetInfo: Protocol.Target.TargetInfo): void {\n    const categoryKey = 'OpenedWindows';\n    let categoryElement = this.categoryElements.get(categoryKey);\n    if (!categoryElement) {\n      categoryElement = new ExpandableApplicationPanelTreeElement(\n          this.section.panel, i18nString(UIStrings.openedWindows), categoryKey);\n      this.categoryElements.set(categoryKey, categoryElement);\n      this.appendChild(categoryElement, FrameTreeElement.presentationOrderCompare);\n    }\n    if (!this.treeElementForWindow.get(targetInfo.targetId)) {\n      const windowTreeElement = new FrameWindowTreeElement(this.section.panel, targetInfo);\n      categoryElement.appendChild(windowTreeElement);\n      this.treeElementForWindow.set(targetInfo.targetId, windowTreeElement);\n    }\n  }\n\n  workerCreated(targetInfo: Protocol.Target.TargetInfo): void {\n    const categoryKey = targetInfo.type === 'service_worker' ? 'Service Workers' : 'Web Workers';\n    const categoryName = targetInfo.type === 'service_worker' ? i18n.i18n.lockedString('Service Workers') :\n                                                                i18nString(UIStrings.webWorkers);\n    let categoryElement = this.categoryElements.get(categoryKey);\n    if (!categoryElement) {\n      categoryElement = new ExpandableApplicationPanelTreeElement(this.section.panel, categoryName, categoryKey);\n      this.categoryElements.set(categoryKey, categoryElement);\n      this.appendChild(categoryElement, FrameTreeElement.presentationOrderCompare);\n    }\n    if (!this.treeElementForWorker.get(targetInfo.targetId)) {\n      const workerTreeElement = new WorkerTreeElement(this.section.panel, targetInfo);\n      categoryElement.appendChild(workerTreeElement);\n      this.treeElementForWorker.set(targetInfo.targetId, workerTreeElement);\n    }\n  }\n\n  windowChanged(targetInfo: Protocol.Target.TargetInfo): void {\n    const windowTreeElement = this.treeElementForWindow.get(targetInfo.targetId);\n    if (!windowTreeElement) {\n      return;\n    }\n    if (windowTreeElement.title !== targetInfo.title) {\n      windowTreeElement.title = targetInfo.title;\n    }\n    windowTreeElement.update(targetInfo);\n  }\n\n  windowDestroyed(targetId: Protocol.Target.TargetID): void {\n    const windowTreeElement = this.treeElementForWindow.get(targetId);\n    if (windowTreeElement) {\n      windowTreeElement.windowClosed();\n    }\n  }\n\n  appendChild(\n      treeElement: UI.TreeOutline.TreeElement,\n      comparator: ((arg0: UI.TreeOutline.TreeElement, arg1: UI.TreeOutline.TreeElement) => number)|\n      undefined = FrameTreeElement.presentationOrderCompare): void {\n    super.appendChild(treeElement, comparator);\n  }\n\n  /**\n   * Order elements by type (first frames, then resources, last Document resources)\n   * and then each of these groups in the alphabetical order.\n   */\n  private static presentationOrderCompare(\n      treeElement1: UI.TreeOutline.TreeElement, treeElement2: UI.TreeOutline.TreeElement): number {\n    function typeWeight(treeElement: UI.TreeOutline.TreeElement): number {\n      if (treeElement instanceof ExpandableApplicationPanelTreeElement) {\n        return 2;\n      }\n      if (treeElement instanceof FrameTreeElement) {\n        return 1;\n      }\n      return 3;\n    }\n\n    const typeWeight1 = typeWeight(treeElement1);\n    const typeWeight2 = typeWeight(treeElement2);\n    return typeWeight1 - typeWeight2 || treeElement1.titleAsText().localeCompare(treeElement2.titleAsText());\n  }\n}\n\nconst resourceToFrameResourceTreeElement = new WeakMap<SDK.Resource.Resource, FrameResourceTreeElement>();\n\nexport class FrameResourceTreeElement extends ApplicationPanelTreeElement {\n  private readonly panel: ResourcesPanel;\n  private resource: SDK.Resource.Resource;\n  private previewPromise: Promise<UI.Widget.Widget>|null;\n\n  constructor(storagePanel: ResourcesPanel, resource: SDK.Resource.Resource) {\n    super(\n        storagePanel, resource.isGenerated ? i18nString(UIStrings.documentNotAvailable) : resource.displayName, false);\n    this.panel = storagePanel;\n    this.resource = resource;\n    this.previewPromise = null;\n    this.tooltip = resource.url;\n    resourceToFrameResourceTreeElement.set(this.resource, this);\n\n    const icon = UI.Icon.Icon.create('mediumicon-manifest', 'navigator-file-tree-item');\n    icon.classList.add('navigator-' + resource.resourceType().name() + '-tree-item');\n    this.setLeadingIcons([icon]);\n  }\n\n  static forResource(resource: SDK.Resource.Resource): FrameResourceTreeElement|undefined {\n    return resourceToFrameResourceTreeElement.get(resource);\n  }\n\n  get itemURL(): Platform.DevToolsPath.UrlString {\n    return this.resource.url;\n  }\n\n  private preparePreview(): Promise<UI.Widget.Widget> {\n    if (this.previewPromise) {\n      return this.previewPromise;\n    }\n    const viewPromise = SourceFrame.PreviewFactory.PreviewFactory.createPreview(this.resource, this.resource.mimeType);\n    this.previewPromise = viewPromise.then(view => {\n      if (view) {\n        return view;\n      }\n      return new UI.EmptyWidget.EmptyWidget(this.resource.url);\n    });\n    return this.previewPromise;\n  }\n\n  onselect(selectedByUser?: boolean): boolean {\n    super.onselect(selectedByUser);\n    if (this.resource.isGenerated) {\n      this.panel.showCategoryView(i18nString(UIStrings.theContentOfThisDocumentHasBeen), null);\n    } else {\n      void this.panel.scheduleShowView(this.preparePreview());\n    }\n    Host.userMetrics.panelShown(Host.UserMetrics.PanelCodes[Host.UserMetrics.PanelCodes.frame_resource]);\n    return false;\n  }\n\n  ondblclick(_event: Event): boolean {\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.openInNewTab(this.resource.url);\n    return false;\n  }\n\n  onattach(): void {\n    super.onattach();\n    this.listItemElement.draggable = true;\n    this.listItemElement.addEventListener('dragstart', this.ondragstart.bind(this), false);\n    this.listItemElement.addEventListener('contextmenu', this.handleContextMenuEvent.bind(this), true);\n  }\n\n  private ondragstart(event: DragEvent): boolean {\n    if (!event.dataTransfer) {\n      return false;\n    }\n    event.dataTransfer.setData('text/plain', this.resource.content || '');\n    event.dataTransfer.effectAllowed = 'copy';\n    return true;\n  }\n\n  private handleContextMenuEvent(event: MouseEvent): void {\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    contextMenu.appendApplicableItems(this.resource);\n    void contextMenu.show();\n  }\n\n  async revealResource(lineNumber?: number, columnNumber?: number): Promise<void> {\n    this.revealAndSelect(true);\n    const view = await this.panel.scheduleShowView(this.preparePreview());\n    if (!(view instanceof SourceFrame.ResourceSourceFrame.ResourceSourceFrame) || typeof lineNumber !== 'number') {\n      return;\n    }\n    view.revealPosition({lineNumber, columnNumber}, true);\n  }\n}\n\nclass FrameWindowTreeElement extends ApplicationPanelTreeElement {\n  private targetInfo: Protocol.Target.TargetInfo;\n  private isWindowClosed: boolean;\n  private view: OpenedWindowDetailsView|null;\n\n  constructor(storagePanel: ResourcesPanel, targetInfo: Protocol.Target.TargetInfo) {\n    super(storagePanel, targetInfo.title || i18nString(UIStrings.windowWithoutTitle), false);\n    this.targetInfo = targetInfo;\n    this.isWindowClosed = false;\n    this.view = null;\n    this.updateIcon(targetInfo.canAccessOpener);\n  }\n\n  updateIcon(canAccessOpener: boolean): void {\n    const iconType = canAccessOpener ? 'mediumicon-frame-opened' : 'mediumicon-frame';\n    const icon = UI.Icon.Icon.create(iconType);\n    this.setLeadingIcons([icon]);\n  }\n\n  update(targetInfo: Protocol.Target.TargetInfo): void {\n    if (targetInfo.canAccessOpener !== this.targetInfo.canAccessOpener) {\n      this.updateIcon(targetInfo.canAccessOpener);\n    }\n    this.targetInfo = targetInfo;\n    if (this.view) {\n      this.view.setTargetInfo(targetInfo);\n      this.view.update();\n    }\n  }\n\n  windowClosed(): void {\n    this.listItemElement.classList.add('window-closed');\n    this.isWindowClosed = true;\n    if (this.view) {\n      this.view.setIsWindowClosed(true);\n      this.view.update();\n    }\n  }\n\n  onselect(selectedByUser?: boolean): boolean {\n    super.onselect(selectedByUser);\n    if (!this.view) {\n      this.view = new OpenedWindowDetailsView(this.targetInfo, this.isWindowClosed);\n    } else {\n      this.view.update();\n    }\n    this.showView(this.view);\n    Host.userMetrics.panelShown(Host.UserMetrics.PanelCodes[Host.UserMetrics.PanelCodes.frame_window]);\n    return false;\n  }\n\n  get itemURL(): Platform.DevToolsPath.UrlString {\n    return this.targetInfo.url as Platform.DevToolsPath.UrlString;\n  }\n}\n\nclass WorkerTreeElement extends ApplicationPanelTreeElement {\n  private targetInfo: Protocol.Target.TargetInfo;\n  private view: WorkerDetailsView|null;\n\n  constructor(storagePanel: ResourcesPanel, targetInfo: Protocol.Target.TargetInfo) {\n    super(storagePanel, targetInfo.title || targetInfo.url || i18nString(UIStrings.worker), false);\n    this.targetInfo = targetInfo;\n    this.view = null;\n    const icon = UI.Icon.Icon.create('mediumicon-service-worker', 'navigator-file-tree-item');\n    this.setLeadingIcons([icon]);\n  }\n\n  onselect(selectedByUser?: boolean): boolean {\n    super.onselect(selectedByUser);\n    if (!this.view) {\n      this.view = new WorkerDetailsView(this.targetInfo);\n    } else {\n      this.view.update();\n    }\n    this.showView(this.view);\n    Host.userMetrics.panelShown(Host.UserMetrics.PanelCodes[Host.UserMetrics.PanelCodes.frame_worker]);\n    return false;\n  }\n\n  get itemURL(): Platform.DevToolsPath.UrlString {\n    return this.targetInfo.url as Platform.DevToolsPath.UrlString;\n  }\n}\n"],
  "mappings": "AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,MAAM,YAAY;AAAA,EAIhB,aAAa;AAAA,EAIb,SAAS;AAAA,EAIT,cAAc;AAAA,EAId,gBAAgB;AAAA,EAIhB,QAAQ;AAAA,EAIR,SAAS;AAAA,EAIT,OAAO;AAAA,EAIP,oBAAoB;AAAA,EAIpB,QAAQ;AAAA,EAIR,UAAU;AAAA,EAIV,WAAW;AAAA,EAIX,kBAAkB;AAAA,EAKlB,eAAe;AAAA,EAKf,UAAU;AAAA,EAIV,OAAO;AAAA,EAKP,UAAU;AAAA,EAIV,YAAY;AAAA,EAKZ,0BAA0B;AAAA,EAI1B,eAAe;AAAA,EAIf,YAAY;AAAA,EAIZ,sBAAsB;AAAA,EAItB,iCACI;AAAA,EAIJ,oBAAoB;AAAA,EAIpB,QAAQ;AAAA;AAEV,MAAM,OAAO,KAAK,KAAK,kBAAkB,iDAAiD;AAC1F,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAEhE,6BAA6B,UAAyF;AACpH,MAAI,aAAa,QAAQ;AACvB,UAAM,IAAI,MAAM;AAAA;AAAA;AAIb,6CAAsC,GAAG,OAAO,KAA2C;AAAA,EAChG;AAAA,EACiB;AAAA,EACA;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACQ;AAAA,EACR;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACiB;AAAA,EACA;AAAA,EAGT;AAAA,EACS;AAAA,EACT;AAAA,EACA;AAAA,EAGA;AAAA,EACA;AAAA,EACA;AAAA,EAER,YAAY,OAAuB;AACjC;AAEA,SAAK,QAAQ;AAEb,SAAK,cAAc,IAAI,GAAG,YAAY;AACtC,SAAK,YAAY,QAAQ,UAAU,IAAI;AAEvC,SAAK,YAAY,QAAQ,UAAU,IAAI;AAEvC,SAAK,YAAY,iBAAiB,GAAG,YAAY,OAAO,iBAAiB,KAAK,kBAAkB;AAEhG,SAAK,eAAe,YAAY,KAAK,YAAY;AAEjD,UAAM,0BAA0B,WAAW,UAAU;AACrD,SAAK,yBAAyB,KAAK,kBAAkB;AACrD,UAAM,sBAAsB,IAAI,uBAAuB;AACvD,SAAK,uBAAuB,YAAY;AACxC,SAAK,4BAA4B,IAAI,0BAA0B;AAC/D,SAAK,uBAAuB,YAAY,KAAK;AAC7C,UAAM,0BAA0B,IAAI,wBAAwB;AAC5D,SAAK,uBAAuB,YAAY;AAExC,UAAM,sBAAsB,WAAW,UAAU;AACjD,UAAM,qBAAqB,KAAK,kBAAkB;AAClD,SAAK,8BACD,IAAI,sCAAsC,OAAO,WAAW,UAAU,eAAe;AACzF,SAAK,4BAA4B,QAC7B;AAEJ,UAAM,mBAAmB,GAAG,KAAK,KAAK,OAAO,oBAAoB;AACjE,SAAK,4BAA4B,gBAAgB,CAAC;AAElD,uBAAmB,YAAY,KAAK;AACpC,SAAK,gCACD,IAAI,sCAAsC,OAAO,WAAW,UAAU,iBAAiB;AAC3F,SAAK,8BAA8B,QAC/B;AAEJ,UAAM,qBAAqB,GAAG,KAAK,KAAK,OAAO,oBAAoB;AACnE,SAAK,8BAA8B,gBAAgB,CAAC;AAEpD,uBAAmB,YAAY,KAAK;AACpC,SAAK,2BAA2B,IAAI,qBAAqB;AACzD,SAAK,yBAAyB,QAC1B;AAEJ,uBAAmB,YAAY,KAAK;AACpC,SAAK,2BACD,IAAI,sCAAsC,OAAO,WAAW,UAAU,SAAS;AACnF,SAAK,yBAAyB,QAC1B;AAEJ,UAAM,eAAe,GAAG,KAAK,KAAK,OAAO,uBAAuB;AAChE,SAAK,yBAAyB,gBAAgB,CAAC;AAE/C,uBAAmB,YAAY,KAAK;AACpC,SAAK,wBACD,IAAI,sCAAsC,OAAO,WAAW,UAAU,UAAU;AACpF,SAAK,sBAAsB,QACvB;AAEJ,UAAM,aAAa,GAAG,KAAK,KAAK,OAAO,qBAAqB;AAC5D,SAAK,sBAAsB,gBAAgB,CAAC;AAC5C,uBAAmB,YAAY,KAAK;AAEpC,SAAK,yBAAyB,IAAI,uBAAuB;AACzD,uBAAmB,YAAY,KAAK;AAEpC,SAAK,2BAA2B,IAAI,yBAAyB;AAC7D,uBAAmB,YAAY,KAAK;AAEpC,UAAM,oBAAoB,WAAW,UAAU;AAC/C,UAAM,mBAAmB,KAAK,kBAAkB;AAChD,SAAK,8BAA8B,IAAI,8BAA8B;AACrE,qBAAiB,YAAY,KAAK;AAElC,SAAK,kCAAkC,IAAI,4BAA4B;AACvE,qBAAiB,YAAY,KAAK;AAElC,QAAI,KAAK,QAAQ,YAAY,UAAU,uBAAuB;AAC5D,YAAM,gCAAgC,WAAW,UAAU;AAC3D,YAAM,+BAA+B,KAAK,kBAAkB;AAE5D,WAAK,6BACD,IAAI,6BAA6B,OAAO,SAAS,kBAAkB,YAAY;AACnF,mCAA6B,YAAY,KAAK;AAC9C,WAAK,4BACD,IAAI,6BAA6B,OAAO,SAAS,kBAAkB,YAAY;AACnF,mCAA6B,YAAY,KAAK;AAE9C,UAAI,KAAK,QAAQ,YAAY,UAAU,oCAAoC;AACzE,aAAK,2BACD,IAAI,6BAA6B,OAAO,SAAS,kBAAkB,YAAY;AACnF,qCAA6B,YAAY,KAAK;AAAA;AAEhD,UAAI,KAAK,QAAQ,YAAY,UAAU,qCAAqC;AAC1E,aAAK,4BACD,IAAI,6BAA6B,OAAO,SAAS,kBAAkB,YAAY;AACnF,qCAA6B,YAAY,KAAK;AAAA;AAEhD,WAAK,oCACD,IAAI,6BAA6B,OAAO,SAAS,kBAAkB,YAAY;AACnF,mCAA6B,YAAY,KAAK;AAC9C,UAAI,KAAK,QAAQ,YAAY,UAAU,oCAAoC;AACzE,aAAK,2BACD,IAAI,6BAA6B,OAAO,SAAS,kBAAkB,YAAY;AACnF,qCAA6B,YAAY,KAAK;AAAA;AAEhD,UAAI,KAAK,QAAQ,YAAY,UAAU,0BAA0B;AAC/D,aAAK,0BAA0B,IAAI,wBAAwB;AAC3D,qCAA6B,YAAY,KAAK;AAAA;AAAA;AAGlD,UAAM,wBAAwB,WAAW,UAAU;AACnD,UAAM,uBAAuB,KAAK,kBAAkB;AACpD,SAAK,mBAAmB,IAAI,iBAAiB,OAAO;AAEpD,SAAK,qBAAqB,oBAAI;AAC9B,SAAK,qBAAqB,oBAAI;AAC9B,SAAK,uBAAuB,oBAAI;AAChC,SAAK,yBAAyB,oBAAI;AAClC,SAAK,UAAU;AAEf,SAAK,YAAY,eAAe,iBAAiB,aAAa,KAAK,YAAY,KAAK,OAAO;AAC3F,SAAK,YAAY,eAAe,iBAAiB,cAAc,KAAK,aAAa,KAAK,OAAO;AAE7F,QAAI,cAAc,cAAc,WAAW,eAAe;AAC1D,QAAI,cAAc,cAAc,WAAW,iBACvC,IAAI,kBAAkB,mBAAmB,IAAI,kBAAkB,OAAO,gBAAgB,KAAK,gBAC3F;AAEJ,UAAM,YAAY,KAAK,MAAM;AAC7B,QAAI,CAAC,UAAU,QAAQ;AACrB,0BAAoB;AAAA;AAGtB,QAAI,cAAc,cAAc,WAAW,cAAc,iBAAiB;AAAA,MACxE,YAAY,CAAC,UAAiC,KAAK,qBAAqB;AAAA,MACxE,cAAc,CAAC,UAAiC,KAAK,uBAAuB;AAAA;AAE9E,QAAI,cAAc,cAAc,WAAW,cAAc,gBAAgB;AAAA,MACvE,YAAY,CAAC,UAAgC,MAAM;AAAA,MACnD,cAAc,CAAC,UAAgC,KAAK,yBAAyB,wBAAwB;AAAA;AAEvG,QAAI,cAAc,cAAc,WAAW,cAAc,2BAA2B;AAAA,MAClF,YAAY,CAAC,UAA2C,KAAK,wBAAwB;AAAA,MACrF,cAAc,CAAC,UAA2C,KAAK,0BAA0B;AAAA;AAI3F,SAAK,eAAe,MAAM,UAAU;AAAA;AAAA,EAG9B,kBAAkB,OAA2C;AACnE,UAAM,cAAc,IAAI,GAAG,YAAY,YAAY,OAAO;AAC1D,gBAAY,gBAAgB,UAAU,IAAI;AAC1C,gBAAY,eAAe;AAC3B,gBAAY,aAAa;AACzB,SAAK,YAAY,YAAY;AAC7B,OAAG,UAAU,kBAAkB,YAAY,qBAAqB;AAChE,WAAO;AAAA;AAAA,EAGT,YAAY,QAAiC;AAC3C,QAAI,KAAK,QAAQ;AACf;AAAA;AAEF,SAAK,SAAS;AACd,SAAK,gBAAgB,OAAO,MAAM;AAClC,QAAI,KAAK,eAAe;AACtB,WAAK,cAAc,iBAAiB,oBAAoB,eAAe,KAAK,eAAe;AAC3F,WAAK,cAAc,iBAAiB,oBAAoB,kBAAkB,KAAK,aAAa;AAAA;AAG9F,UAAM,qBAAqB,OAAO,MAAM;AACxC,QAAI,oBAAoB;AACtB,yBAAmB,iBAAiB,yBAAyB,qBAAqB,KAAK,qBAAqB;AAAA;AAG9G,UAAM,oBAAoB,OAAO,MAAM,IAAI,kBAAkB;AAC7D,QAAI,CAAC,mBAAmB;AACtB;AAAA;AAGF,QAAI,kBAAkB,yBAAyB;AAC7C,WAAK;AAAA;AAGP,sBAAkB,iBAAiB,IAAI,kBAAkB,OAAO,uBAAuB,KAAK,YAAY;AACxG,sBAAkB,iBACd,IAAI,kBAAkB,OAAO,yBAAyB,KAAK,iBAAiB;AAAA;AAAA,EAGlF,cAAc,QAAiC;AAC7C,QAAI,WAAW,KAAK,QAAQ;AAC1B;AAAA;AAEF,WAAO,KAAK;AAEZ,UAAM,oBAAoB,OAAO,MAAM,IAAI,kBAAkB;AAC7D,QAAI,mBAAmB;AACrB,wBAAkB,oBAAoB,IAAI,kBAAkB,OAAO,uBAAuB,KAAK,YAAY;AAC3G,wBAAkB,oBACd,IAAI,kBAAkB,OAAO,yBAAyB,KAAK,iBAAiB;AAAA;AAElF,QAAI,KAAK,eAAe;AACtB,WAAK,cAAc,oBAAoB,oBAAoB,eAAe,KAAK,eAAe;AAC9F,WAAK,cAAc,oBAAoB,oBAAoB,kBAAkB,KAAK,aAAa;AAC/F,WAAK,gBAAgB;AAAA;AAGvB,UAAM,qBAAqB,OAAO,MAAM;AACxC,QAAI,oBAAoB;AACtB,yBAAmB,oBACf,yBAAyB,qBAAqB,KAAK,qBAAqB;AAAA;AAG9E,SAAK;AAAA;AAAA,EAGP,QAAc;AACZ,SAAK,YAAY;AAAA;AAAA,EAGX,aAAmB;AACzB,eAAW,SAAS,IAAI,kBAAkB,kBAAkB,UAAU;AACpE,WAAK,kBAAkB;AAAA;AAEzB,QAAI,KAAK,eAAe;AACtB,WAAK,cAAc;AAAA;AAErB,UAAM,qBAAqB,KAAK,UAAU,KAAK,OAAO,MAAM;AAC5D,QAAI,oBAAoB;AACtB,yBAAmB;AAAA;AAGrB,UAAM,oBAAoB,KAAK,UAAU,KAAK,OAAO,MAAM,IAAI,wBAAwB;AACvF,QAAI,mBAAmB;AACrB,wBAAkB;AAAA;AAEpB,UAAM,0BACF,KAAK,UAAU,KAAK,OAAO,MAAM,IAAI,wBAAwB,4BAA4B;AAC7F,SAAK,4BAA4B,WAAW;AAC5C,UAAM,yBAAyB,KAAK,UAAU,KAAK,OAAO,MAAM,2BAA2B;AAC3F,QAAI,KAAK,QAAQ,YAAY,UAAU,uBAAuB;AAC5D,WAAK,8BAA8B,KAAK,2BAA2B,WAAW;AAC9E,WAAK,6BAA6B,KAAK,0BAA0B,WAAW;AAC5E,UAAI,KAAK,QAAQ,YAAY,UAAU,sCAAsC,KAAK,0BAA0B;AAC1G,aAAK,yBAAyB,WAAW;AAAA;AAE3C,UAAI,KAAK,QAAQ,YAAY,UAAU,uCAAuC,KAAK,2BAA2B;AAC5G,aAAK,0BAA0B,WAAW;AAAA;AAE5C,WAAK,qCACD,KAAK,kCAAkC,WAAW;AACtD,UAAI,KAAK,QAAQ,YAAY,UAAU,sCAAsC,KAAK,0BAA0B;AAC1G,aAAK,yBAAyB,WAAW;AAAA;AAAA;AAAA;AAAA,EAKvC,qBAAqB,OAA8B;AACzD,UAAM;AACN,UAAM,WAAW,QAAQ,KAAK,cAAc,KAAK;AACjD,UAAM,iBAAiB,sBAAsB,iBAAiB,KAAK,iBAAiB;AACpF,UAAM,iBAAiB,sBAAsB,mBAAmB,KAAK,mBAAmB;AAAA;AAAA,EAGlF,uBAAuB,OAA8B;AAC3D,UAAM,WAAW,QAAQ,KAAK,iBAAiB,KAAK;AACpD,UAAM,oBAAoB,sBAAsB,iBAAiB,KAAK,iBAAiB;AACvF,UAAM,oBAAoB,sBAAsB,mBAAmB,KAAK,mBAAmB;AAAA;AAAA,EAGrF,wBAAwB,OAAwC;AACtE,UAAM;AACN,UAAM,iBAAiB,yBAAyB,qBAAqB,KAAK,qBAAqB;AAAA;AAAA,EAGzF,0BAA0B,OAAwC;AACxE,UAAM;AACN,UAAM,oBAAoB,yBAAyB,qBAAqB,KAAK,qBAAqB;AAAA;AAAA,EAG5F,kBAAwB;AAC9B,SAAK,iBAAiB;AACtB,SAAK;AAAA;AAAA,EAGC,cAAoB;AAC1B,eAAW,aAAa,KAAK,mBAAmB,UAAU;AACxD,gBAAU,oBAAoB,wBAAwB,eAAe,WAAS;AAC5E,aAAK,KAAK,qBAAqB;AAAA,SAC9B;AAAA;AAEL,SAAK,mBAAmB;AACxB,SAAK,mBAAmB;AACxB,SAAK,qBAAqB;AAC1B,SAAK,yBAAyB;AAC9B,SAAK,yBAAyB,cAAc;AAAA;AAAA,EAGtC,iBAAiB,OAA8E;AAMrG,UAAM,YAAY,KAAK,MAAM;AAC7B,QAAI,CAAC,UAAU,QAAQ;AACrB;AAAA;AAEF,UAAM,UAAU,MAAM;AACtB,UAAM,cAAc,CAAC;AACrB,aAAS,SAAS,QAAQ,QACrB,UAAU,aAAa,UAAU,OAAO,SAAS,SAAS,OAAO,QAAQ;AAC5E,kBAAY,KAAK;AAAA;AAGnB,QAAI,IAAI,UAAU,SAAS;AAC3B,QAAI,IAAI,YAAY,SAAS;AAC7B,WAAO,KAAK,KAAK,KAAK,KAAK,UAAU,OAAQ,YAAY,GAAmC,SAAS;AACnG,UAAI,CAAC,YAAY,GAAG,UAAU;AAC5B,YAAI,IAAI,GAAG;AACT,sBAAY,GAAG;AAAA;AAEjB,YAAI,CAAC,YAAY,GAAG,UAAU;AAC5B,sBAAY,GAAG;AAAA;AAAA;AAGnB;AACA;AAAA;AAAA;AAAA,EAII,QAAc;AACpB,SAAK,UAAU;AACf,SAAK;AACL,SAAK,sBAAsB;AAC3B,SAAK,yBAAyB;AAAA;AAAA,EAGxB,eAAe,OAA2F;AAChH,UAAM,QAAQ,MAAM;AAEpB,QAAI,MAAM,cAAc;AACtB,WAAK;AAAA;AAEP,SAAK,kBAAkB;AAAA;AAAA,EAGjB,cAAc,EAAC,MAAM,YAA6E;AACxG,UAAM,sBAAsB,IAAI,oBAAoB,MAAM;AAC1D,SAAK,qBAAqB,IAAI,UAAU;AACxC,SAAK,yBAAyB,YAAY;AAAA;AAAA,EAGpC,oBAAoB,OACnB;AACP,SAAK,yBAAyB,SAAS,MAAM;AAAA;AAAA,EAGvC,kBAAkB,OAAsD;AAI9E,UAAM,aAAa,MAAM,oBAAoB,MAAM;AACnD,UAAM,YAAY,OAAO,UAAU,UAAU,WAAW;AACxD,QAAI,CAAC,aAAc,UAAU,WAAW,UAAU,UAAU,WAAW,WAAW,UAAU,WAAW,QAAS;AAC9G;AAAA;AAGF,UAAM,SAAS,UAAU;AACzB,QAAI,CAAC,KAAK,QAAQ,SAAS;AACzB,WAAK,QAAQ,UAAU;AACvB,YAAM,0BAA0B,IAAI,kBAAkB,KAAK,OAAO,OAAO;AACzE,WAAK,sBAAsB,YAAY;AAAA;AAAA;AAAA,EAInC,gBAAgB,OAA8D;AACpF,UAAM,aAAc,MAAM;AAC1B,SAAK,cAAc;AAAA;AAAA,EAGb,cAAc,YAA8B;AAClD,YAAQ,OAAO,CAAC,KAAK,uBAAuB,IAAI;AAChD,YAAQ,OAAO,QAAQ,WAAW,eAAe,QAAQ,WAAW;AAEpE,UAAM,wBAAwB,IAAI,sBAAsB,KAAK,OAAO;AACpE,SAAK,uBAAuB,IAAI,YAAY;AAC5C,QAAI,WAAW,gBAAgB;AAC7B,WAAK,4BAA4B,YAAY;AAAA,WACxC;AACL,WAAK,8BAA8B,YAAY;AAAA;AAAA;AAAA,EAI3C,kBAAkB,OAA8D;AACtF,UAAM,aAAc,MAAM;AAC1B,SAAK,iBAAiB;AAAA;AAAA,EAGhB,iBAAiB,YAA8B;AACrD,UAAM,cAAc,KAAK,uBAAuB,IAAI;AACpD,QAAI,CAAC,aAAa;AAChB;AAAA;AAEF,UAAM,cAAc,YAAY;AAChC,UAAM,wBAAwB,YAAY;AAC1C,QAAI,uBAAuB;AACzB,4BAAsB,YAAY;AAClC,UAAI,aAAa;AACf,8BAAsB;AAAA;AAAA;AAG1B,SAAK,uBAAuB,OAAO;AAAA;AAAA,EAGrC,eAAe,UAAuC;AACpD,QAAI,UAAU;AACZ,WAAK,aAAa;AAClB,YAAM,cAAc,KAAK,qBAAqB,IAAI;AAClD,qBAAe,YAAY;AAAA;AAAA;AAAA,QAIzB,aAAa,UAAiC,MAAe,QAAgC;AACjG,UAAM,KAAK,iBAAiB,eAAe,UAAU,MAAM;AAAA;AAAA,EAG7D,UAAU,OAAsD;AAC9D,SAAK,iBAAiB,qBAAqB;AAAA;AAAA,EAG7C,aAAa,UAAiC,WAA0B;AACtE,QAAI,CAAC,UAAU;AACb;AAAA;AAGF,QAAI;AACJ,QAAI,WAAW;AACb,UAAI,aAAa,KAAK,mBAAmB,IAAI;AAC7C,UAAI,CAAC,YAAY;AACf,qBAAc;AAGd,aAAK,mBAAmB,IAAI,UAAU;AAAA;AAExC,aAAO,WAAW;AAClB,UAAI,CAAC,MAAM;AACT,eAAO,IAAI,kBAAkB,UAAU;AACvC,mBAAW,aAAa;AAAA;AAAA,WAErB;AACL,aAAO,KAAK,mBAAmB,IAAI;AACnC,UAAI,CAAC,MAAM;AACT,eAAO,IAAI,kBAAkB;AAC7B,aAAK,mBAAmB,IAAI,UAAU;AACtC,aAAK,iBAAiB,wBAAwB,eAAe,WAAS;AACpE,eAAK,KAAK,qBAAqB;AAAA,WAC9B;AAAA;AAAA;AAIP,SAAK,cAAc;AAAA;AAAA,EAGrB,eAAe,MAA8B;AAC3C,SAAK,cAAc;AAAA;AAAA,EAGb,cAAc,MAA8B;AAClD,SAAK,MAAM,SAAS;AAAA;AAAA,QAGR,qBAAqB,OAAkF;AACnH,UAAM,WAAW,MAAM;AAEvB,QAAI,CAAC,UAAU;AACb;AAAA;AAGF,UAAM,uBAAuB,KAAK,qBAAqB,IAAI;AAC3D,QAAI,CAAC,sBAAsB;AACzB;AAAA;AAGF,yBAAqB;AACrB,UAAM,aAAa,KAAK,mBAAmB,IAAI;AAE/C,QAAI,CAAC,YAAY;AACf;AAAA;AAGF,UAAM,iBAAiB,oBAAI;AAC3B,UAAM,QAAQ,KAAK;AACnB,UAAM,aAAa,MAAM,SAAS;AAElC,eAAW,aAAa,YAAY;AAClC,qBAAe,IAAI;AAAA;AAGrB,eAAW,aAAa,YAAY;AAClC,UAAI,CAAE,eAAe,IAAI,YAAa;AACpC,YAAI,MAAM,gBAAgB,WAAW,YAAY;AAC/C,gBAAM,SAAS;AAAA;AAEjB,eAAO,WAAW;AAAA;AAAA;AAItB,UAAM,qBAAqB;AAAA;AAAA,EAGrB,YAAY,OAAyB;AAC3C,UAAM,iBAAkB,MAAM;AAC9B,QAAI,CAAC,gBAAgB;AACnB;AAAA;AAGF,UAAM,WAAW,GAAG,QAAQ,gCAAgC,gBAAgB;AAC5E,QAAI,CAAC,UAAU;AACb;AAAA;AAGF,UAAM,UAAU,GAAG,YAAY,YAAY,6BAA6B;AACxE,QAAI,KAAK,2BAA2B,SAAS;AAC3C;AAAA;AAGF,QAAI,KAAK,wBAAwB;AAC/B,WAAK,uBAAuB,UAAU;AACtC,aAAO,KAAK;AAAA;AAGd,QAAI,mBAAmB,kBAAkB;AACvC,WAAK,yBAAyB;AAC9B,cAAQ,UAAU;AAAA;AAAA;AAAA,EAId,aAAa,QAA0B;AAC7C,QAAI,KAAK,wBAAwB;AAC/B,WAAK,uBAAuB,UAAU;AACtC,aAAO,KAAK;AAAA;AAAA;AAAA,EAGhB,WAAiB;AACf,UAAM;AACN,SAAK,YAAY,iBAAiB,CAAC;AAAA;AAAA;AAIhC,kDAA2C,4BAA4B;AAAA,EACpE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAER,YAAY,cAA8B,aAAqD;AAC7F,UAAM,cAAc,sBAAsB,YAAY,cAAc;AAEpE,SAAK,cAAc;AAGnB,SAAK,mBAAmB;AAExB,SAAK,OAAO;AAEZ,SAAK,QAAQ;AAEb,UAAM,wBAAwB,GAAG,KAAK,KAAK,OAAO,KAAK,eAAe;AACtE,SAAK,gBAAgB,CAAC;AAAA;AAAA,EAGhB,cAAsB;AAC5B,YAAQ,KAAK;AAAA,WACN,SAAS,kBAAkB,YAAY;AAC1C,eAAO;AAAA,WACJ,SAAS,kBAAkB,YAAY;AAC1C,eAAO;AAAA,WACJ,SAAS,kBAAkB,YAAY;AAC1C,eAAO;AAAA,WACJ,SAAS,kBAAkB,YAAY;AAC1C,eAAO;AAAA,WACJ,SAAS,kBAAkB,YAAY;AAC1C,eAAO;AAAA,WACJ,SAAS,kBAAkB,YAAY;AAC1C,eAAO;AAAA;AAEP,gBAAQ,MAAM,WAAW,KAAK;AAC9B,eAAO;AAAA;AAAA;AAAA,EAIb,WAAW,OAA0C;AACnD,SAAK,QAAQ;AAEb,QAAI,KAAK,oBAAoB,CAAC,KAAK,MAAM;AACvC,WAAK,SAAS;AAAA;AAAA;AAAA,MAId,UAA2C;AAC7C,WAAO,wBAAwB,KAAK;AAAA;AAAA,EAGtC,SAAS,gBAAmC;AAC1C,UAAM,SAAS;AACf,SAAK,mBAAmB;AAExB,QAAI,CAAC,KAAK,OAAO;AACf,aAAO;AAAA;AAGT,QAAI,CAAC,KAAK,MAAM;AACd,WAAK,OAAO,IAAI,sBAAsB,KAAK,aAAa,KAAK;AAAA;AAE/D,SAAK,SAAS,KAAK;AACnB,OAAG,QAAQ,QAAQ,WAAW,UAAU,uBAAuB,KAAK;AACpE,SAAK,YAAY,WAAW,wBAAwB,KAAK;AACzD,WAAO;AAAA;AAAA;AAIJ,yCAAkC,4BAA4B;AAAA,EAClD;AAAA,EACA;AAAA,EACjB,YAAY,SAAkC,UAAiC;AAC7E,UAAM,QAAQ,OAAO,SAAS,MAAM;AACpC,SAAK,UAAU;AACf,SAAK,WAAW;AAEhB,UAAM,OAAO,GAAG,KAAK,KAAK,OAAO,uBAAuB;AACxD,SAAK,gBAAgB,CAAC;AAAA;AAAA,MAGpB,UAA2C;AAC7C,WAAO,gBAAgB,UAAU,KAAK,SAAS;AAAA;AAAA,EAGjD,SAAS,gBAAmC;AAC1C,UAAM,SAAS;AACf,SAAK,QAAQ,aAAa,KAAK;AAC/B,SAAK,YAAY,WAAW,KAAK,YAAY,WAAW,KAAK,YAAY,WAAW;AACpF,WAAO;AAAA;AAAA,EAGT,WAAiB;AACf,SAAK,KAAK;AAAA;AAAA,QAGN,iBAAgC;AACpC,SAAK;AACL,UAAM,aAAa,MAAM,KAAK,SAAS;AACvC,eAAW,aAAa,YAAY;AAClC,WAAK,YAAY,IAAI,yBAAyB,KAAK,SAAS,KAAK,UAAU;AAAA;AAAA;AAAA;AAK1E,8CAAuC,4BAA4B;AAAA,EACvD;AAAA,EACA;AAAA,EACA;AAAA,EAEjB,YAAY,SAAkC,UAAiC,WAAmB;AAChG,UAAM,QAAQ,OAAO,WAAW;AAChC,SAAK,UAAU;AACf,SAAK,WAAW;AAChB,SAAK,YAAY;AACjB,UAAM,OAAO,GAAG,KAAK,KAAK,OAAO,oBAAoB;AACrD,SAAK,gBAAgB,CAAC;AAAA;AAAA,MAGpB,UAA2C;AAC7C,WAAO,gBAAgB,UAAU,KAAK,SAAS,QAAQ,MAAM,UAAU,KAAK;AAAA;AAAA,EAI9E,SAAS,gBAAmC;AAC1C,UAAM,SAAS;AACf,SAAK,QAAQ,aAAa,KAAK,UAAU,KAAK;AAC9C,SAAK,YAAY,WAAW,KAAK,YAAY,WAAW,KAAK,YAAY,WAAW;AACpF,WAAO;AAAA;AAAA;AAIJ,+CAAwC,4BAA4B;AAAA,EACjE;AAAA,EAER,YAAY,cAA8B;AACxC,UAAM,cAAc,KAAK,KAAK,aAAa,oBAAoB;AAC/D,UAAM,OAAO,GAAG,KAAK,KAAK,OAAO,6BAA6B;AAC9D,SAAK,gBAAgB,CAAC;AAAA;AAAA,MAGpB,UAA2C;AAC7C,WAAO;AAAA;AAAA,EAGT,SAAS,gBAAmC;AAC1C,UAAM,SAAS;AACf,QAAI,CAAC,KAAK,MAAM;AACd,WAAK,OAAO,IAAI;AAAA;AAElB,SAAK,SAAS,KAAK;AACnB,SAAK,YAAY,WAAW,KAAK,YAAY,WAAW,KAAK,YAAY,WAAW;AACpF,WAAO;AAAA;AAAA;AAIJ,4CAAqC,4BAA4B;AAAA,EAC9D;AAAA,EACR,YAAY,cAA8B;AACxC,UAAM,cAAc,WAAW,UAAU,WAAW;AACpD,UAAM,OAAO,GAAG,KAAK,KAAK,OAAO,uBAAuB;AACxD,SAAK,gBAAgB,CAAC;AAAA;AAAA,MAGpB,UAA2C;AAC7C,WAAO;AAAA;AAAA,EAGT,SAAS,gBAAmC;AAC1C,UAAM,SAAS;AACf,QAAI,CAAC,KAAK,MAAM;AACd,WAAK,OAAO,IAAI;AAAA;AAElB,SAAK,SAAS,KAAK;AACnB,SAAK,YAAY,WAAW,KAAK,YAAY,WAAW,KAAK,YAAY,WAAW;AACpF,WAAO;AAAA;AAAA;AAIJ,6CAAsC,4BAA4B;AAAA,EAC/D;AAAA,EACR,YAAY,cAA8B;AACxC,UAAM,cAAc,WAAW,UAAU,UAAU;AACnD,UAAM,OAAO,GAAG,KAAK,KAAK,OAAO,uBAAuB;AACxD,SAAK,gBAAgB,CAAC;AAAA;AAAA,MAGpB,UAA2C;AAC7C,WAAO;AAAA;AAAA,EAGT,SAAS,gBAAmC;AAC1C,UAAM,SAAS;AACf,QAAI,CAAC,KAAK,MAAM;AACd,WAAK,OAAO,IAAI;AAAA;AAElB,SAAK,SAAS,KAAK;AACnB,SAAK,YAAY,WAAW,KAAK,YAAY,WAAW,KAAK,YAAY,WAAW;AACpF,WAAO;AAAA;AAAA;AAIJ,0CAAmC,sCAAsC;AAAA,EACtE;AAAA,EACR,YAAY,cAA8B;AACxC,UAAM,cAAc,WAAW,UAAU,YAAY;AACrD,UAAM,OAAO,GAAG,KAAK,KAAK,OAAO,uBAAuB;AACxD,SAAK,gBAAgB,CAAC;AACtB,SAAK,0BAA0B;AAC/B,SAAK;AAAA;AAAA,EAGC,aAAmB;AACzB,QAAI,cAAc,cAAc,WAAW,iBACvC,gBAAgB,qBAAqB,eAAe,KAAK,gBAAgB;AAC7E,QAAI,cAAc,cAAc,WAAW,iBACvC,gBAAgB,qBAAqB,iBAAiB,KAAK,kBAAkB;AACjF,QAAI,cAAc,cAAc,WAAW,iBACvC,gBAAgB,qBAAqB,gBAAgB,KAAK,iBAAiB;AAC/E,QAAI,cAAc,cAAc,WAAW,iBACvC,gBAAgB,qBAAqB,yBAAyB,KAAK,yBAAyB;AAGhG,SAAK,0BAA0B;AAE/B,eAAW,kBAAkB,IAAI,cAAc,cAAc,WAAW,OAAO,iBAAiB;AAC9F,YAAM,YAAY,eAAe;AACjC,eAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,EAAE,GAAG;AACzC,aAAK,aAAa,gBAAgB,UAAU;AAAA;AAAA;AAAA;AAAA,EAKlD,wBAAwB,OAA6B;AACnD,UAAM,0BAA0B,KAAK,wBAAwB,OAAO,aAAW,QAAQ,UAAU;AACjG,eAAW,0BAA0B,yBAAyB;AAC5D,WAAK,6BAA6B;AAAA;AAAA;AAAA,EAItC,WAAiB;AACf,UAAM;AACN,SAAK,gBAAgB,iBAAiB,eAAe,KAAK,uBAAuB,KAAK,OAAO;AAAA;AAAA,EAGvF,uBAAuB,OAAyB;AACtD,UAAM,cAAc,IAAI,GAAG,YAAY,YAAY;AACnD,gBAAY,iBAAiB,WAAW,WAAW,UAAU,mBAAmB,KAAK,iBAAiB,KAAK;AAC3G,SAAK,YAAY;AAAA;AAAA,EAGnB,mBAAyB;AACvB,eAAW,kBAAkB,IAAI,cAAc,cAAc,WAAW,OAAO,iBAAiB;AAC9F,WAAK,eAAe;AAAA;AAAA;AAAA,EAIhB,eAAe;AAAA,IACrB,MAAM,EAAC,YAAY;AAAA,KAC0E;AAC7F,SAAK,aAAa,OAAO;AAAA;AAAA,EAGnB,aAAa,OAAuB,YAA8B;AACxE,UAAM,yBAAyB,IAAI,uBAAuB,KAAK,gBAAgB,OAAO;AACtF,SAAK,wBAAwB,KAAK;AAClC,SAAK,YAAY;AACjB,UAAM,gBAAgB;AAAA;AAAA,EAGhB,iBAAiB;AAAA,IACvB,MAAM,EAAC,YAAY;AAAA,KAC0E;AAC7F,UAAM,yBAAyB,KAAK,uBAAuB,OAAO;AAClE,QAAI,CAAC,wBAAwB;AAC3B;AAAA;AAEF,SAAK,6BAA6B;AAAA;AAAA,EAG5B,6BAA6B,wBAAsD;AACzF,2BAAuB;AACvB,SAAK,YAAY;AACjB,aAAS,eAAe,cAAc,KAAK,yBAAyB;AACpE,SAAK,cAAc,KAAK,eAAe;AAAA;AAAA,EAGjC,gBACJ,EAAC,MAAM,EAAC,UAAU,OAAO,oBACwF;AACnH,UAAM,yBAAyB,KAAK,uBAAuB,OAAO,SAAS;AAC3E,QAAI,CAAC,wBAAwB;AAC3B;AAAA;AAEF,2BAAuB,OAAO,UAAU;AACxC,SAAK;AAAA;AAAA,EAGC,yBAA+B;AAAA;AAAA,EAI/B,wBAAwB;AAAA,IAC9B,MAAM,EAAC,YAAY,iBAAiB;AAAA,KAE7B;AACP,UAAM,yBAAyB,KAAK,uBAAuB,OAAO;AAClE,QAAI,CAAC,wBAAwB;AAC3B;AAAA;AAEF,2BAAuB,wBAAwB;AAAA;AAAA,EAGzC,uBAAuB,OAAuB,YAAqD;AACzG,WAAO,KAAK,wBAAwB,KAAK,OAAK,EAAE,WAAW,OAAO,eAAe,EAAE,UAAU,UAAU;AAAA;AAAA;AAIpG,4CAAqC,4BAA4B;AAAA,EACtE;AAAA,EACA;AAAA,EACiB;AAAA,EACT;AAAA,EACA;AAAA,EAER,YAAY,cAA8B,OAAuB,YAAwB;AACvF,UAAM,cAAc,WAAW,OAAO,QAAQ,WAAW,gBAAgB;AACzE,SAAK,QAAQ;AACb,SAAK,aAAa;AAClB,SAAK,6BAA6B,oBAAI;AACtC,UAAM,OAAO,GAAG,KAAK,KAAK,OAAO,uBAAuB;AACxD,SAAK,gBAAgB,CAAC;AACtB,SAAK,MAAM,iBAAiB,qBAAqB,wBAAwB,KAAK,kBAAkB;AAAA;AAAA,MAG9F,UAA2C;AAC7C,WAAO,iBAAiB,KAAK,WAAW,iBAAiB,MAAM,KAAK,WAAW;AAAA;AAAA,EAIjF,WAAiB;AACf,UAAM;AACN,SAAK,gBAAgB,iBAAiB,eAAe,KAAK,uBAAuB,KAAK,OAAO;AAAA;AAAA,EAGvF,uBAAuB,OAAyB;AACtD,UAAM,cAAc,IAAI,GAAG,YAAY,YAAY;AACnD,gBAAY,iBAAiB,WAAW,WAAW,UAAU,mBAAmB,KAAK,iBAAiB,KAAK;AAC3G,SAAK,YAAY;AAAA;AAAA,EAGX,mBAAyB;AAC/B,SAAK,MAAM,gBAAgB,KAAK;AAAA;AAAA,EAGlC,wBAAwB,iBAA+B;AACrD,UAAM,cAAc,KAAK,2BAA2B,IAAI;AACxD,QAAI,aAAa;AACf,kBAAY;AAAA;AAAA;AAAA,EAIhB,OAAO,UAAkC,gBAA+B;AACtE,SAAK,WAAW;AAChB,UAAM,mBAAmB,oBAAI;AAC7B,eAAW,mBAAmB,CAAC,GAAG,KAAK,SAAS,aAAa,QAAQ,QAAQ;AAC3E,YAAM,cAAc,KAAK,SAAS,aAAa,IAAI;AACnD,UAAI,CAAC,aAAa;AAChB;AAAA;AAEF,uBAAiB,IAAI,YAAY;AACjC,UAAI,cAAc,KAAK,2BAA2B,IAAI,YAAY;AAClE,UAAI,CAAC,aAAa;AAChB,sBAAc,IAAI,0BAA0B,KAAK,gBAAgB,KAAK,OAAO,KAAK,YAAY;AAC9F,aAAK,2BAA2B,IAAI,YAAY,MAAM;AACtD,aAAK,YAAY;AAAA;AAEnB,kBAAY,OAAO,aAAa;AAAA;AAElC,eAAW,mBAAmB,KAAK,2BAA2B,QAAQ;AACpE,UAAI,CAAC,iBAAiB,IAAI,kBAAkB;AAC1C,aAAK,mBAAmB;AAAA;AAAA;AAI5B,QAAI,KAAK,MAAM;AACb,WAAK,KAAK,OAAO;AAAA;AAGnB,SAAK;AAAA;AAAA,EAGC,gBAAsB;AAC5B,UAAM,UAAU,KAAK,WAAW,KAAK,SAAS,UAAU;AACxD,QAAI,OAAO,KAAK,KAAK,4BAA4B,WAAW,GAAG;AAC7D,WAAK,UAAU,WAAW,UAAU,eAAe,EAAC,KAAK;AAAA,WACpD;AACL,WAAK,UAAU,WAAW,UAAU,UAAU,EAAC,KAAK;AAAA;AAAA;AAAA,EAIxD,SAAS,gBAAmC;AAC1C,UAAM,SAAS;AACf,QAAI,CAAC,KAAK,UAAU;AAClB,aAAO;AAAA;AAET,QAAI,CAAC,KAAK,MAAM;AACd,WAAK,OAAO,IAAI,gBAAgB,KAAK,OAAO,KAAK;AAAA;AAGnD,SAAK,SAAS,KAAK;AACnB,SAAK,YAAY,WAAW,KAAK,YAAY,WAAW,KAAK,YAAY,WAAW;AACpF,WAAO;AAAA;AAAA,EAGD,mBAAmB,iBAA+B;AACxD,UAAM,yBAAyB,KAAK,2BAA2B,IAAI;AACnE,QAAI,wBAAwB;AAC1B,6BAAuB;AACvB,WAAK,YAAY;AAAA;AAEnB,SAAK,2BAA2B,OAAO;AACvC,SAAK;AAAA;AAAA,EAGP,QAAc;AACZ,eAAW,mBAAmB,KAAK,2BAA2B,QAAQ;AACpE,WAAK,mBAAmB;AAAA;AAAA;AAAA;AAKvB,+CAAwC,4BAA4B;AAAA,EACjE;AAAA,EACA;AAAA,EACS;AAAA,EACT;AAAA,EACA;AAAA,EAER,YAAY,cAA8B,OAAuB,YAAwB,aAA0B;AACjH,UAAM,cAAc,YAAY,MAAM;AACtC,SAAK,QAAQ;AACb,SAAK,aAAa;AAClB,SAAK,uBAAuB,oBAAI;AAChC,SAAK,cAAc;AACnB,SAAK,OAAO;AACZ,UAAM,OAAO,GAAG,KAAK,KAAK,OAAO,oBAAoB;AACrD,SAAK,gBAAgB,CAAC;AAAA;AAAA,MAGpB,UAA2C;AAC7C,WAAO,iBAAiB,KAAK,WAAW,iBAAiB,MAAM,KAAK,WAAW,OAAO,MAAM,KAAK,YAAY;AAAA;AAAA,EAI/G,WAAiB;AACf,UAAM;AACN,SAAK,gBAAgB,iBAAiB,eAAe,KAAK,uBAAuB,KAAK,OAAO;AAAA;AAAA,EAG/F,mBAAyB;AACvB,QAAI,KAAK,MAAM;AACb,WAAK,KAAK;AAAA;AAEZ,eAAW,eAAe,KAAK,qBAAqB,UAAU;AAC5D,kBAAY;AAAA;AAAA;AAAA,EAIR,uBAAuB,OAAyB;AACtD,UAAM,cAAc,IAAI,GAAG,YAAY,YAAY;AACnD,gBAAY,iBAAiB,WAAW,WAAW,UAAU,QAAQ,KAAK,iBAAiB,KAAK;AAChG,SAAK,YAAY;AAAA;AAAA,EAGX,qBAA2B;AACjC,QAAI,KAAK,MAAM;AACb,WAAK,KAAK;AAAA;AAEZ,eAAW,eAAe,KAAK,qBAAqB,UAAU;AAC5D,kBAAY;AAAA;AAAA;AAAA,QAIF,mBAAkC;AAC9C,UAAM,KAAK,MAAM,iBAAiB,KAAK,YAAY,KAAK,YAAY;AACpE,SAAK,OAAO,KAAK,aAAa;AAAA;AAAA,EAGhC,OAAO,aAA0B,gBAA+B;AAC9D,SAAK,cAAc;AAEnB,UAAM,aAAa,oBAAI;AACvB,eAAW,SAAS,KAAK,YAAY,QAAQ,UAAU;AACrD,iBAAW,IAAI,MAAM;AACrB,UAAI,cAAc,KAAK,qBAAqB,IAAI,MAAM;AACtD,UAAI,CAAC,aAAa;AAChB,sBAAc,IAAI,oBACd,KAAK,gBAAgB,KAAK,OAAO,KAAK,YAAY,KAAK,aAAa,OACpE,KAAK,mBAAmB,KAAK;AACjC,aAAK,qBAAqB,IAAI,MAAM,MAAM;AAC1C,aAAK,YAAY;AAAA;AAEnB,kBAAY,OAAO,KAAK,aAAa,OAAO;AAAA;AAE9C,eAAW,aAAa,KAAK,qBAAqB,QAAQ;AACxD,UAAI,CAAC,WAAW,IAAI,YAAY;AAC9B,aAAK,aAAa;AAAA;AAAA;AAGtB,eAAW,CAAC,WAAW,gBAAgB,KAAK,qBAAqB,WAAW;AAC1E,UAAI,CAAC,WAAW,IAAI,YAAY;AAC9B,aAAK,YAAa;AAClB,aAAK,qBAAqB,OAAQ;AAAA;AAAA;AAItC,QAAI,KAAK,cAAc;AACrB,WAAK;AAAA;AAGP,QAAI,KAAK,QAAQ,gBAAgB;AAC/B,WAAK,KAAK,OAAO,KAAK,aAAa;AAAA;AAGrC,SAAK;AAAA;AAAA,EAGC,gBAAsB;AAC5B,UAAM,gBAAgB,KAAK,YAAY;AACvC,QAAI,gBAAgB,kBAAkB,OAAO,WAAW,UAAU,UAAU,EAAC,KAAK,mBAAkB;AACpG,QAAI,KAAK,YAAY,eAAe;AAClC,uBAAiB,OAAO,KAAK,KAAK,aAAa;AAAA;AAEjD,SAAK,UAAU;AAAA;AAAA,EAGjB,SAAS,gBAAmC;AAC1C,UAAM,SAAS;AACf,QAAI,CAAC,KAAK,MAAM;AACd,WAAK,OACD,IAAI,YAAY,KAAK,OAAO,KAAK,YAAY,KAAK,aAAa,MAAM,KAAK,mBAAmB,KAAK;AAAA;AAGxG,SAAK,SAAS,KAAK;AACnB,SAAK,YAAY,WAAW,KAAK,YAAY,WAAW,KAAK,YAAY,WAAW;AACpF,WAAO;AAAA;AAAA,EAGD,aAAa,WAAyB;AAC5C,UAAM,mBAAmB,KAAK,qBAAqB,IAAI;AACvD,QAAI,kBAAkB;AACpB,uBAAiB;AACjB,WAAK,YAAY;AAAA;AAEnB,SAAK,qBAAqB,OAAO;AAAA;AAAA,EAGnC,QAAc;AACZ,eAAW,aAAa,KAAK,qBAAqB,QAAQ;AACxD,WAAK,aAAa;AAAA;AAEpB,QAAI,KAAK,MAAM;AACb,WAAK,KAAK;AAAA;AAAA;AAAA;AAKT,yCAAkC,4BAA4B;AAAA,EAC3D;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAER,YACI,cAA8B,OAAuB,YAAwB,aAC7E,OAAc,oBAAgC;AAChD,UAAM,cAAc,MAAM,MAAM;AAChC,SAAK,QAAQ;AACb,SAAK,aAAa;AAClB,SAAK,cAAc;AACnB,SAAK,QAAQ;AACb,SAAK,qBAAqB;AAAA;AAAA,MAGxB,UAA2C;AAC7C,WAAO,iBAAiB,KAAK,WAAW,iBAAiB,MAAM,KAAK,WAAW,OAAO,MAAM,KAAK,YAAY,OACzG,MAAM,KAAK,MAAM;AAAA;AAAA,EAGvB,mBAAyB;AACvB,QAAI,KAAK,MAAM;AACb,WAAK,KAAK;AAAA;AAAA;AAAA,EAId,eAAqB;AACnB,QAAI,KAAK,MAAM;AACb,WAAK,KAAK;AAAA;AAAA;AAAA,EAId,OAAO,aAA0B,OAAc,gBAA+B;AAC5E,SAAK,cAAc;AACnB,SAAK,QAAQ;AAEb,QAAI,KAAK,QAAQ,gBAAgB;AAC/B,WAAK,KAAK,OAAO,KAAK,aAAa,KAAK;AAAA;AAG1C,SAAK;AAAA;AAAA,EAGC,gBAAsB;AAC5B,UAAM,eAAe;AACrB,UAAM,gBAAgB,KAAK,MAAM;AACjC,iBAAa,KAAK,WAAW,UAAU,UAAU,EAAC,KAAK;AACvD,QAAI,KAAK,MAAM,QAAQ;AACrB,mBAAa,KAAK,KAAK,KAAK,aAAa;AAAA;AAE3C,QAAI,KAAK,MAAM,YAAY;AACzB,mBAAa,KAAK,KAAK,KAAK,aAAa;AAAA;AAE3C,SAAK,UAAU,aAAa,KAAK;AAAA;AAAA,EAGnC,SAAS,gBAAmC;AAC1C,UAAM,SAAS;AACf,QAAI,CAAC,KAAK,MAAM;AACd,WAAK,OAAO,IAAI,YAAY,KAAK,OAAO,KAAK,YAAY,KAAK,aAAa,KAAK,OAAO,KAAK;AAAA;AAG9F,SAAK,SAAS,KAAK;AACnB,SAAK,YAAY,WAAW,KAAK,YAAY,WAAW,KAAK,YAAY,WAAW;AACpF,WAAO;AAAA;AAAA,EAGT,QAAc;AACZ,QAAI,KAAK,MAAM;AACb,WAAK,KAAK;AAAA;AAAA;AAAA;AAKT,2CAAoC,4BAA4B;AAAA,EACpD;AAAA,EACjB,YAAY,cAA8B,YAAwB;AAChE,UACI,cACA,WAAW,iBAAiB,WAAW,iBACV,WAAW,aAAa,WAAW,aAAa,WAAW,UAAU,aAClG;AACJ,SAAK,aAAa;AAClB,UAAM,OAAO,GAAG,KAAK,KAAK,OAAO,oBAAoB;AACrD,SAAK,gBAAgB,CAAC;AAAA;AAAA,MAGpB,UAA2C;AAC7C,WAAO,eAAe,KAAK,WAAW,iBAAiB,MAClD,MAAK,WAAW,iBAAiB,UAAU;AAAA;AAAA,EAGlD,SAAS,gBAAmC;AAC1C,UAAM,SAAS;AACf,SAAK,YAAY,WAAW,KAAK,YAAY,WAAW,KAAK,YAAY,WAAW;AACpF,SAAK,eAAe,eAAe,KAAK;AACxC,WAAO;AAAA;AAAA,EAGT,WAAiB;AACf,UAAM;AACN,SAAK,gBAAgB,iBAAiB,eAAe,KAAK,uBAAuB,KAAK,OAAO;AAAA;AAAA,EAGvF,uBAAuB,OAAyB;AACtD,UAAM,cAAc,IAAI,GAAG,YAAY,YAAY;AACnD,gBAAY,iBAAiB,WAAW,WAAW,UAAU,QAAQ,MAAM,KAAK,WAAW;AAC3F,SAAK,YAAY;AAAA;AAAA;AAId,uCAAgC,4BAA4B;AAAA,EAChD;AAAA,EACA;AAAA,EAEjB,YAAY,cAA8B,OAAgD,cAAsB;AAC9G,UAAM,cAAc,eAAe,eAAe,WAAW,UAAU,aAAa;AACpF,SAAK,SAAS,MAAM,oBAAoB;AACxC,SAAK,uBAAuB;AAC5B,SAAK,UAAU,WAAW,UAAU,0BAA0B,EAAC,KAAK;AACpE,UAAM,OAAO,GAAG,KAAK,KAAK,OAAO,qBAAqB;AACtD,SAAK,gBAAgB,CAAC;AAAA;AAAA,MAGpB,UAA2C;AAC7C,WAAO,eAAe,KAAK;AAAA;AAAA,EAG7B,eAAuB;AACrB,WAAO,KAAK;AAAA;AAAA,EAGd,WAAiB;AACf,UAAM;AACN,SAAK,gBAAgB,iBAAiB,eAAe,KAAK,uBAAuB,KAAK,OAAO;AAAA;AAAA,EAGvF,uBAAuB,OAAoB;AACjD,UAAM,cAAc,IAAI,GAAG,YAAY,YAAY;AACnD,gBAAY,iBAAiB,WACzB,WAAW,UAAU,QAAQ,MAAM,KAAK,eAAe,aAAa,KAAK,QAAQ,KAAK;AAC1F,SAAK,YAAY;AAAA;AAAA,EAGnB,SAAS,gBAAmC;AAC1C,UAAM,SAAS;AACf,SAAK,eAAe,YAAY,KAAK,QAAQ,KAAK;AAClD,SAAK,YAAY,WAAW,KAAK,YAAY,WAAW,KAAK,YAAY,WAAW;AACpF,WAAO;AAAA;AAAA;AAIJ,yCAAkC,GAAG,OAAO,KAAK;AAAA,EAC9C;AAAA,EACA;AAAA,EAER,cAAc;AACZ;AAEA,SAAK,QAAQ,UAAU,IAAI;AAC3B,SAAK,cAAc,IAAI,GAAG,YAAY,YAAY;AAClD,SAAK,cAAc;AACnB,SAAK,YAAY,KAAK,KAAK;AAAA;AAAA,EAG7B,QAAQ,MAAoB;AAC1B,SAAK,YAAY,OAAO;AAAA;AAAA,EAG1B,QAAQ,MAAkD;AACxD,QAAI,QAAQ,CAAC,KAAK,aAAa;AAC7B,WAAK,cAAc,KAAK,YAAY,WAAW;AAAA;AAEjD,QAAI,CAAC,QAAQ,KAAK,aAAa;AAC7B,WAAK,YAAY,UAAU,IAAI;AAAA;AAEjC,QAAI,QAAQ,KAAK,aAAa;AAC5B,WAAK,YAAY,aAAa,QAAQ;AACtC,WAAK,YAAY,UAAU,OAAO;AAAA;AAAA;AAAA;AAKjC,8BAA6D;AAAA,EAClE;AAAA,EACiB;AAAA,EACT;AAAA,EACA;AAAA,EAER,YAAY,cAA8B,aAAyC;AACjF,SAAK,QAAQ;AACb,SAAK,cAAc;AACnB,OAAG,UAAU,kBAAkB,KAAK,YAAY,cAAc;AAC9D,SAAK,wBAAwB,oBAAI;AACjC,SAAK,yBAAyB,oBAAI;AAElC,UAAM,eAAe,IAAI,aAAa,aAAa;AACnD,iBAAa,iBACT,IAAI,aAAa,OAAO,oBAAoB,WAAS,KAAK,WAAW,MAAM,KAAK,QAAQ;AAC5F,iBAAa,iBACT,IAAI,aAAa,OAAO,cAAc,WAAS,KAAK,cAAc,MAAM,KAAK,UAAU;AAC3F,iBAAa,iBACT,IAAI,aAAa,OAAO,gBAAgB,WAAS,KAAK,eAAe,MAAM,KAAK,QAAQ;AAC5F,iBAAa,iBACT,IAAI,aAAa,OAAO,eAAe,WAAS,KAAK,cAAc,MAAM,KAAK,WAAW;AAE7F,QAAI,cAAc,cAAc,WAAW,iBACvC,IAAI,mBAAmB,oBAAoB,IAAI,mBAAmB,OAAO,eAAe,KAAK,cAC7F;AACJ,QAAI,cAAc,cAAc,WAAW,iBACvC,IAAI,mBAAmB,oBAAoB,IAAI,mBAAmB,OAAO,mBAAmB,KAAK,eACjG;AACJ,QAAI,cAAc,cAAc,WAAW,iBACvC,IAAI,mBAAmB,oBAAoB,IAAI,mBAAmB,OAAO,iBAAiB,KAAK,iBAC/F;AAEJ,QAAI,cAAc,cAAc,WAAW,eAAe;AAE1D,eAAW,SAAS,aAAa,gBAAgB;AAC/C,UAAI,CAAC,KAAK,sBAAsB,IAAI,MAAM,KAAK;AAC7C,aAAK,mBAAmB;AAAA;AAE1B,YAAM,qBAAqB,MAAM,oBAAoB,SAAS,MAAM,IAAI,mBAAmB;AAC3F,UAAI,oBAAoB;AACtB,mBAAW,cAAc,mBAAmB,eAAe;AACzD,eAAK,aAAa,EAAC,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,EAMjC,YAAY,QAAiC;AAC3C,QAAI,OAAO,WAAW,IAAI,OAAO,KAAK,UAAU,OAAO,WAAW,IAAI,OAAO,KAAK,eAAe;AAC/F,WAAK,KAAK,YAAY;AAAA;AAAA;AAAA,QAIZ,YAAY,QAA0C;AAClE,UAAM,eAAe,OAAO;AAC5B,QAAI,CAAC,cAAc;AACjB;AAAA;AAEF,UAAM,iBAAiB,aAAa;AACpC,UAAM,mBAAmB,KAAK,uBAAuB,IAAI;AACzD,UAAM,WAAW,OAAO;AACxB,wBAAoB;AACpB,UAAM,EAAC,eAAc,MAAM,aAAa,cAAc,qBAAqB,EAAC;AAC5E,QAAI,oBAAoB,YAAY;AAClC,uBAAiB,cAAc;AAAA;AAAA;AAAA,EAInC,cAAc,SAAkC;AAAA;AAAA,EAGxC,mBAAmB,OAAsD;AAC/E,UAAM,cAAc,MAAM;AAC1B,QAAI,eAAe,CAAC,KAAK,sBAAsB,IAAI,YAAY,KAAK;AAClE,WAAK,mBAAmB;AAAA;AAE1B,SAAK,WAAW;AAAA;AAAA,EAGV,YAAY,OAA8D;AAChF,QAAI,CAAC,OAAO;AACV,aAAO;AAAA;AAET,QAAI,cAAc,KAAK,sBAAsB,IAAI,MAAM;AACvD,QAAI,CAAC,eAAe,CAAC,KAAK,YAAY,MAAM,gBAAgB;AAC1D,aAAO;AAAA;AAET,kBAAc,KAAK,sBAAsB,IAAI,MAAM;AACnD,QAAI,CAAC,aAAa;AAChB,aAAO;AAAA;AAET,gBAAY;AACZ,WAAO;AAAA;AAAA,QAGH,eAAe,UAAiC,MAAe,QAAgC;AACnG,QAAI,CAAC,KAAK,YAAY,SAAS,UAAU;AACvC;AAAA;AAEF,UAAM,sBAAsB,yBAAyB,YAAY;AACjE,QAAI,qBAAqB;AACvB,YAAM,oBAAoB,eAAe,MAAM;AAAA;AAAA;AAAA,EAInD,qBAAqB,OAAsD;AACzE,UAAM,mBAAmB,KAAK,sBAAsB,IAAI,MAAM;AAC9D,sBAAkB;AAClB,sBAAkB;AAAA;AAAA,EAGZ,WAAW,OAAsD;AACvE,UAAM,cAAc,MAAM;AAC1B,UAAM,oBAAoB,cAAc,KAAK,sBAAsB,IAAI,YAAY,MAAM,KAAK;AAC9F,QAAI,CAAC,mBAAmB;AACtB;AAAA;AAGF,UAAM,kBAAkB,KAAK,sBAAsB,IAAI,MAAM;AAC7D,QAAI,iBAAiB;AACnB,WAAK,sBAAsB,OAAO,MAAM;AACxC,UAAI,gBAAgB,QAAQ;AAC1B,wBAAgB,OAAO,YAAY;AAAA;AAAA;AAIvC,UAAM,mBAAmB,IAAI,iBAAiB,MAAM;AACpD,SAAK,sBAAsB,IAAI,MAAM,IAAI;AACzC,UAAM,WAAW,MAAM,oBAAoB,SAAS;AACpD,QAAI,CAAC,KAAK,uBAAuB,IAAI,WAAW;AAC9C,WAAK,uBAAuB,IAAI,UAAU;AAAA;AAE5C,sBAAkB,YAAY;AAE9B,eAAW,YAAY,MAAM,aAAa;AACxC,WAAK,cAAc;AAAA;AAAA;AAAA,EAIf,cAAc,SAAsC;AAC1D,UAAM,mBAAmB,KAAK,sBAAsB,IAAI;AACxD,QAAI,CAAC,kBAAkB;AACrB;AAAA;AAGF,SAAK,sBAAsB,OAAO;AAClC,QAAI,iBAAiB,QAAQ;AAC3B,uBAAiB,OAAO,YAAY;AAAA;AAAA;AAAA,EAIhC,eAAe,OAAsD;AAC3E,UAAM,mBAAmB,KAAK,sBAAsB,IAAI,MAAM;AAC9D,QAAI,kBAAkB;AACpB,WAAK,iBAAiB,eAAe;AAAA;AAAA;AAAA,EAIjC,cAAc,UAAuC;AAC3D,QAAI,CAAC,SAAS,SAAS;AACrB;AAAA;AAEF,UAAM,mBAAmB,KAAK,sBAAsB,IAAI,SAAS;AACjE,QAAI,CAAC,kBAAkB;AAGrB;AAAA;AAEF,qBAAiB,eAAe;AAAA;AAAA,EAG1B,aAAa,OAA8E;AACjG,UAAM,aAAa,MAAM;AAEzB,QAAI,WAAW,YAAY,WAAW,SAAS,QAAQ;AACrD,YAAM,mBAAmB,KAAK,sBAAsB,IAAI,WAAW;AACnE,UAAI,kBAAkB;AACpB,aAAK,uBAAuB,IAAI,WAAW,UAAU;AACrD,yBAAiB,aAAa;AAAA;AAAA;AAAA;AAAA,EAK5B,gBAAgB,OAA4E;AAClG,UAAM,WAAW,MAAM;AACvB,UAAM,mBAAmB,KAAK,uBAAuB,IAAI;AACzD,QAAI,kBAAkB;AACpB,uBAAiB,gBAAgB;AACjC,WAAK,uBAAuB,OAAO;AAAA;AAAA;AAAA,EAI/B,cAAc,OAA8E;AAClG,UAAM,aAAa,MAAM;AAEzB,QAAI,WAAW,YAAY,WAAW,SAAS,QAAQ;AACrD,YAAM,mBAAmB,KAAK,sBAAsB,IAAI,WAAW;AACnE,UAAI,kBAAkB;AACpB,yBAAiB,cAAc;AAAA;AAAA;AAAA;AAAA,EAKrC,QAAc;AACZ,SAAK,YAAY;AACjB,SAAK,sBAAsB;AAC3B,SAAK,uBAAuB;AAAA;AAAA;AAIzB,sCAA+B,4BAA4B;AAAA,EACxD;AAAA,EACA;AAAA,EACA;AAAA,EACS;AAAA,EACA;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EAER,YAAY,SAA2B,OAAgD;AACrF,UAAM,QAAQ,OAAO,IAAI;AACzB,SAAK,UAAU;AACf,SAAK,QAAQ;AACb,SAAK,UAAU,MAAM;AACrB,SAAK,mBAAmB,oBAAI;AAC5B,SAAK,yBAAyB,oBAAI;AAClC,SAAK,uBAAuB,oBAAI;AAChC,SAAK,uBAAuB,oBAAI;AAChC,SAAK,KAAK,eAAe;AACzB,SAAK,OAAO;AAAA;AAAA,EAGd,oBAAoB,OACgD;AAClE,QAAI,MAAM,cAAc;AACtB,aAAO,MAAM,mBAAmB,6BAA6B;AAAA;AAE/D,WAAO,MAAM,mBAAmB,sCAAsC;AAAA;AAAA,QAGlE,eAAe,OAA+D;AAClF,UAAM,OAAO,GAAG,KAAK,KAAK,OAAO,KAAK,oBAAoB;AAC1D,QAAI,MAAM,kBAAkB;AAC1B,WAAK,UAAU,IAAI;AAAA;AAErB,SAAK,gBAAgB,CAAC;AACtB,SAAK;AAEL,SAAK,UAAU,MAAM;AACrB,QAAI,KAAK,UAAU,MAAM,eAAe;AACtC,WAAK,QAAQ,MAAM;AACnB,SAAG,UAAU,kBAAkB,KAAK,iBAAiB,KAAK;AAC1D,UAAI,KAAK,QAAQ;AACf,cAAM,SAAS,KAAK;AAEpB,eAAO,YAAY;AACnB,eAAO,YAAY;AAAA;AAAA;AAGvB,SAAK,iBAAiB;AACtB,SAAK,uBAAuB;AAC5B,SAAK,qBAAqB;AAE1B,QAAI,KAAK,UAAU;AACjB,WAAK,OAAO,IAAI,sBAAsB,iBAAiB,iBAAiB,KAAK;AAC7E,WAAK,SAAS,KAAK;AAAA,WACd;AACL,WAAK,OAAO;AAAA;AAMd,QAAI,MAAM,cAAc;AACtB,YAAM,UAAU,IAAI,cAAc,cAAc,WAAW;AAC3D,iBAAW,UAAU,SAAS;AAC5B,YAAI,OAAO,WAAW,IAAI,OAAO,KAAK,eAAe;AACnD,gBAAM,WAAW,OAAO;AACxB,8BAAoB;AACpB,gBAAM,QAAQ,MAAM,oBAAoB,SAAS;AACjD,gBAAM,aAAc,OAAM,MAAM,qBAAqB,EAAC,aAAY;AAClE,eAAK,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA,MAMvB,UAA2C;AAI7C,QAAI,KAAK,MAAM,cAAc;AAC3B,aAAO;AAAA;AAET,WAAO,aAAa,UAAU,KAAK,MAAM;AAAA;AAAA,EAG3C,SAAS,gBAAmC;AAC1C,UAAM,SAAS;AACf,QAAI,CAAC,KAAK,MAAM;AACd,WAAK,OAAO,IAAI,sBAAsB,iBAAiB,iBAAiB,KAAK;AAAA,WACxE;AACL,WAAK,KAAK;AAAA;AAEZ,SAAK,YAAY,WAAW,KAAK,YAAY,WAAW,KAAK,YAAY,WAAW;AACpF,SAAK,SAAS,KAAK;AAEnB,SAAK,gBAAgB,UAAU,OAAO;AACtC,QAAI,aAAa,aAAa;AAC9B,WAAO;AAAA;AAAA,MAGL,QAAQ,SAAkB;AAC5B,QAAI,SAAS;AACX,WAAK,gBAAgB,UAAU,IAAI;AACnC,WAAK,KAAK,MAAM;AAAA,WACX;AACL,WAAK,gBAAgB,UAAU,OAAO;AACtC,UAAI,aAAa,aAAa;AAAA;AAAA;AAAA,EAIlC,eAAe,UAAuC;AACpD,UAAM,aAAa,SAAS;AAC5B,QAAI,cAAc,OAAO,cAAc,KAAK;AAC1C;AAAA;AAGF,UAAM,eAAe,SAAS;AAC9B,UAAM,eAAe,aAAa;AAClC,QAAI,kBACA,iBAAiB,OAAO,aAAa,cAAc,WAAW,OAAO,KAAK,iBAAiB,IAAI;AACnG,QAAI,CAAC,iBAAiB;AACpB,wBAAkB,IAAI,sCAClB,KAAK,QAAQ,OAAO,SAAS,eAAe,WAAW,SAAS,cAAc,iBAAiB;AACnG,WAAK,iBAAiB,IAAI,aAAa,QAAQ;AAC/C,WAAK,YAAY,iBAAiB,iBAAiB;AAAA;AAErD,UAAM,sBAAsB,IAAI,yBAAyB,KAAK,QAAQ,OAAO;AAC7E,oBAAgB,YAAY,qBAAqB,iBAAiB;AAClE,SAAK,uBAAuB,IAAI,SAAS,KAAK;AAAA;AAAA,EAGhD,aAAa,YAA8C;AACzD,UAAM,cAAc;AACpB,QAAI,kBAAkB,KAAK,iBAAiB,IAAI;AAChD,QAAI,CAAC,iBAAiB;AACpB,wBAAkB,IAAI,sCAClB,KAAK,QAAQ,OAAO,WAAW,UAAU,gBAAgB;AAC7D,WAAK,iBAAiB,IAAI,aAAa;AACvC,WAAK,YAAY,iBAAiB,iBAAiB;AAAA;AAErD,QAAI,CAAC,KAAK,qBAAqB,IAAI,WAAW,WAAW;AACvD,YAAM,oBAAoB,IAAI,uBAAuB,KAAK,QAAQ,OAAO;AACzE,sBAAgB,YAAY;AAC5B,WAAK,qBAAqB,IAAI,WAAW,UAAU;AAAA;AAAA;AAAA,EAIvD,cAAc,YAA8C;AAC1D,UAAM,cAAc,WAAW,SAAS,mBAAmB,oBAAoB;AAC/E,UAAM,eAAe,WAAW,SAAS,mBAAmB,KAAK,KAAK,aAAa,qBACvB,WAAW,UAAU;AACjF,QAAI,kBAAkB,KAAK,iBAAiB,IAAI;AAChD,QAAI,CAAC,iBAAiB;AACpB,wBAAkB,IAAI,sCAAsC,KAAK,QAAQ,OAAO,cAAc;AAC9F,WAAK,iBAAiB,IAAI,aAAa;AACvC,WAAK,YAAY,iBAAiB,iBAAiB;AAAA;AAErD,QAAI,CAAC,KAAK,qBAAqB,IAAI,WAAW,WAAW;AACvD,YAAM,oBAAoB,IAAI,kBAAkB,KAAK,QAAQ,OAAO;AACpE,sBAAgB,YAAY;AAC5B,WAAK,qBAAqB,IAAI,WAAW,UAAU;AAAA;AAAA;AAAA,EAIvD,cAAc,YAA8C;AAC1D,UAAM,oBAAoB,KAAK,qBAAqB,IAAI,WAAW;AACnE,QAAI,CAAC,mBAAmB;AACtB;AAAA;AAEF,QAAI,kBAAkB,UAAU,WAAW,OAAO;AAChD,wBAAkB,QAAQ,WAAW;AAAA;AAEvC,sBAAkB,OAAO;AAAA;AAAA,EAG3B,gBAAgB,UAA0C;AACxD,UAAM,oBAAoB,KAAK,qBAAqB,IAAI;AACxD,QAAI,mBAAmB;AACrB,wBAAkB;AAAA;AAAA;AAAA,EAItB,YACI,aACA,aACY,iBAAiB,0BAAgC;AAC/D,UAAM,YAAY,aAAa;AAAA;AAAA,SAOlB,yBACX,cAA0C,cAAkD;AAC9F,wBAAoB,aAAiD;AACnE,UAAI,uBAAuB,uCAAuC;AAChE,eAAO;AAAA;AAET,UAAI,uBAAuB,kBAAkB;AAC3C,eAAO;AAAA;AAET,aAAO;AAAA;AAGT,UAAM,cAAc,WAAW;AAC/B,UAAM,cAAc,WAAW;AAC/B,WAAO,cAAc,eAAe,aAAa,cAAc,cAAc,aAAa;AAAA;AAAA;AAI9F,MAAM,qCAAqC,oBAAI;AAExC,8CAAuC,4BAA4B;AAAA,EACvD;AAAA,EACT;AAAA,EACA;AAAA,EAER,YAAY,cAA8B,UAAiC;AACzE,UACI,cAAc,SAAS,cAAc,WAAW,UAAU,wBAAwB,SAAS,aAAa;AAC5G,SAAK,QAAQ;AACb,SAAK,WAAW;AAChB,SAAK,iBAAiB;AACtB,SAAK,UAAU,SAAS;AACxB,uCAAmC,IAAI,KAAK,UAAU;AAEtD,UAAM,OAAO,GAAG,KAAK,KAAK,OAAO,uBAAuB;AACxD,SAAK,UAAU,IAAI,eAAe,SAAS,eAAe,SAAS;AACnE,SAAK,gBAAgB,CAAC;AAAA;AAAA,SAGjB,YAAY,UAAqE;AACtF,WAAO,mCAAmC,IAAI;AAAA;AAAA,MAG5C,UAA2C;AAC7C,WAAO,KAAK,SAAS;AAAA;AAAA,EAGf,iBAA4C;AAClD,QAAI,KAAK,gBAAgB;AACvB,aAAO,KAAK;AAAA;AAEd,UAAM,cAAc,YAAY,eAAe,eAAe,cAAc,KAAK,UAAU,KAAK,SAAS;AACzG,SAAK,iBAAiB,YAAY,KAAK,UAAQ;AAC7C,UAAI,MAAM;AACR,eAAO;AAAA;AAET,aAAO,IAAI,GAAG,YAAY,YAAY,KAAK,SAAS;AAAA;AAEtD,WAAO,KAAK;AAAA;AAAA,EAGd,SAAS,gBAAmC;AAC1C,UAAM,SAAS;AACf,QAAI,KAAK,SAAS,aAAa;AAC7B,WAAK,MAAM,iBAAiB,WAAW,UAAU,kCAAkC;AAAA,WAC9E;AACL,WAAK,KAAK,MAAM,iBAAiB,KAAK;AAAA;AAExC,SAAK,YAAY,WAAW,KAAK,YAAY,WAAW,KAAK,YAAY,WAAW;AACpF,WAAO;AAAA;AAAA,EAGT,WAAW,QAAwB;AACjC,SAAK,sBAAsB,8BAA8B,aAAa,KAAK,SAAS;AACpF,WAAO;AAAA;AAAA,EAGT,WAAiB;AACf,UAAM;AACN,SAAK,gBAAgB,YAAY;AACjC,SAAK,gBAAgB,iBAAiB,aAAa,KAAK,YAAY,KAAK,OAAO;AAChF,SAAK,gBAAgB,iBAAiB,eAAe,KAAK,uBAAuB,KAAK,OAAO;AAAA;AAAA,EAGvF,YAAY,OAA2B;AAC7C,QAAI,CAAC,MAAM,cAAc;AACvB,aAAO;AAAA;AAET,UAAM,aAAa,QAAQ,cAAc,KAAK,SAAS,WAAW;AAClE,UAAM,aAAa,gBAAgB;AACnC,WAAO;AAAA;AAAA,EAGD,uBAAuB,OAAyB;AACtD,UAAM,cAAc,IAAI,GAAG,YAAY,YAAY;AACnD,gBAAY,sBAAsB,KAAK;AACvC,SAAK,YAAY;AAAA;AAAA,QAGb,eAAe,YAAqB,cAAsC;AAC9E,SAAK,gBAAgB;AACrB,UAAM,OAAO,MAAM,KAAK,MAAM,iBAAiB,KAAK;AACpD,QAAI,CAAE,iBAAgB,YAAY,oBAAoB,wBAAwB,OAAO,eAAe,UAAU;AAC5G;AAAA;AAEF,SAAK,eAAe,EAAC,YAAY,gBAAe;AAAA;AAAA;AAIpD,qCAAqC,4BAA4B;AAAA,EACvD;AAAA,EACA;AAAA,EACA;AAAA,EAER,YAAY,cAA8B,YAAwC;AAChF,UAAM,cAAc,WAAW,SAAS,WAAW,UAAU,qBAAqB;AAClF,SAAK,aAAa;AAClB,SAAK,iBAAiB;AACtB,SAAK,OAAO;AACZ,SAAK,WAAW,WAAW;AAAA;AAAA,EAG7B,WAAW,iBAAgC;AACzC,UAAM,WAAW,kBAAkB,4BAA4B;AAC/D,UAAM,OAAO,GAAG,KAAK,KAAK,OAAO;AACjC,SAAK,gBAAgB,CAAC;AAAA;AAAA,EAGxB,OAAO,YAA8C;AACnD,QAAI,WAAW,oBAAoB,KAAK,WAAW,iBAAiB;AAClE,WAAK,WAAW,WAAW;AAAA;AAE7B,SAAK,aAAa;AAClB,QAAI,KAAK,MAAM;AACb,WAAK,KAAK,cAAc;AACxB,WAAK,KAAK;AAAA;AAAA;AAAA,EAId,eAAqB;AACnB,SAAK,gBAAgB,UAAU,IAAI;AACnC,SAAK,iBAAiB;AACtB,QAAI,KAAK,MAAM;AACb,WAAK,KAAK,kBAAkB;AAC5B,WAAK,KAAK;AAAA;AAAA;AAAA,EAId,SAAS,gBAAmC;AAC1C,UAAM,SAAS;AACf,QAAI,CAAC,KAAK,MAAM;AACd,WAAK,OAAO,IAAI,wBAAwB,KAAK,YAAY,KAAK;AAAA,WACzD;AACL,WAAK,KAAK;AAAA;AAEZ,SAAK,SAAS,KAAK;AACnB,SAAK,YAAY,WAAW,KAAK,YAAY,WAAW,KAAK,YAAY,WAAW;AACpF,WAAO;AAAA;AAAA,MAGL,UAA2C;AAC7C,WAAO,KAAK,WAAW;AAAA;AAAA;AAI3B,gCAAgC,4BAA4B;AAAA,EAClD;AAAA,EACA;AAAA,EAER,YAAY,cAA8B,YAAwC;AAChF,UAAM,cAAc,WAAW,SAAS,WAAW,OAAO,WAAW,UAAU,SAAS;AACxF,SAAK,aAAa;AAClB,SAAK,OAAO;AACZ,UAAM,OAAO,GAAG,KAAK,KAAK,OAAO,6BAA6B;AAC9D,SAAK,gBAAgB,CAAC;AAAA;AAAA,EAGxB,SAAS,gBAAmC;AAC1C,UAAM,SAAS;AACf,QAAI,CAAC,KAAK,MAAM;AACd,WAAK,OAAO,IAAI,kBAAkB,KAAK;AAAA,WAClC;AACL,WAAK,KAAK;AAAA;AAEZ,SAAK,SAAS,KAAK;AACnB,SAAK,YAAY,WAAW,KAAK,YAAY,WAAW,KAAK,YAAY,WAAW;AACpF,WAAO;AAAA;AAAA,MAGL,UAA2C;AAC7C,WAAO,KAAK,WAAW;AAAA;AAAA;",
  "names": []
}
