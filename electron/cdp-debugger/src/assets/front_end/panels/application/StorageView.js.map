{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/application/StorageView.ts"],
  "sourcesContent": ["// Copyright (c) 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {DatabaseModel} from './DatabaseModel.js';\nimport {DOMStorageModel} from './DOMStorageModel.js';\nimport {IndexedDBModel} from './IndexedDBModel.js';\nimport storageViewStyles from './storageView.css.js';\n\nconst UIStrings = {\n  /**\n   * @description Text in the Storage View that expresses the amout of used and available storage quota\n   * @example {1.5 MB} PH1\n   * @example {123.1 MB} PH2\n   */\n  storageQuotaUsed: '{PH1} used out of {PH2} storage quota',\n  /**\n   * @description Tooltip in the Storage View that expresses the precise amout of used and available storage quota\n   * @example {200} PH1\n   * @example {400} PH2\n   */\n  storageQuotaUsedWithBytes: '{PH1} bytes used out of {PH2} bytes storage quota',\n  /**\n   * @description Fragment indicating that a certain data size has been custom configured\n   * @example {1.5 MB} PH1\n   */\n  storageWithCustomMarker: '{PH1} (custom)',\n  /**\n   * @description Text in Application Panel Sidebar and title text of the Storage View of the Application panel\n   */\n  storageTitle: 'Storage',\n  /**\n   * @description Title text in Storage View of the Application panel\n   */\n  usage: 'Usage',\n  /**\n   * @description Unit for data size in DevTools\n   */\n  mb: 'MB',\n  /**\n   * @description Link to learn more about Progressive Web Apps\n   */\n  learnMore: 'Learn more',\n  /**\n   * @description Button text for the button in the Storage View of the Application panel for clearing site-specific storage\n   */\n  clearSiteData: 'Clear site data',\n  /**\n   * @description Category description in the Clear Storage section of the Storage View of the Application panel\n   */\n  application: 'Application',\n  /**\n   * @description Checkbox label in the Clear Storage section of the Storage View of the Application panel\n   */\n  unregisterServiceWorker: 'Unregister service workers',\n  /**\n   * @description Checkbox label in the Clear Storage section of the Storage View of the Application panel\n   */\n  localAndSessionStorage: 'Local and session storage',\n  /**\n   * @description Checkbox label in the Clear Storage section of the Storage View of the Application panel\n   */\n  indexDB: 'IndexedDB',\n  /**\n   * @description Checkbox label in the Clear Storage section of the Storage View of the Application panel\n   */\n  webSql: 'Web SQL',\n  /**\n   * @description Checkbox label in the Clear Storage section of the Storage View of the Application panel\n   */\n  cookies: 'Cookies',\n  /**\n   * @description Category description in the Clear Storage section of the Storage View of the Application panel\n   */\n  cache: 'Cache',\n  /**\n   * @description Checkbox label in the Clear Storage section of the Storage View of the Application panel\n   */\n  cacheStorage: 'Cache storage',\n  /**\n   * @description Checkbox label in the Clear Storage section of the Storage View of the Application panel\n   */\n  includingThirdPartyCookies: 'including third-party cookies',\n  /**\n   * @description Text for error message in Application Quota Override\n   * @example {Image} PH1\n   */\n  sFailedToLoad: '{PH1} (failed to load)',\n  /**\n   * @description Text for error message in Application Quota Override\n   */\n  internalError: 'Internal error',\n  /**\n   * @description Text for error message in Application Quota Override\n   */\n  pleaseEnterANumber: 'Please enter a number',\n  /**\n   * @description Text for error message in Application Quota Override\n   */\n  numberMustBeNonNegative: 'Number must be non-negative',\n  /**\n   * @description Button text for the \"Clear site data\" button in the Storage View of the Application panel while the clearing action is pending\n   */\n  clearing: 'Clearing...',\n  /**\n   * @description Quota row title in Clear Storage View of the Application panel\n   */\n  storageQuotaIsLimitedIn: 'Storage quota is limited in Incognito mode',\n  /**\n   * @description Text in Application Panel Sidebar of the Application panel\n   */\n  fileSystem: 'File System',\n  /**\n   * @description Text in Application Panel Sidebar of the Application panel\n   */\n  other: 'Other',\n  /**\n   * @description Text in Application Panel Sidebar of the Application panel\n   */\n  storageUsage: 'Storage usage',\n  /**\n   * @description Text in Application Panel Sidebar of the Application panel\n   */\n  serviceWorkers: 'Service Workers',\n  /**\n   * @description Checkbox label in Application Panel Sidebar of the Application panel.\n   * Storage quota refers to the amount of disk available for the website or app.\n   */\n  simulateCustomStorage: 'Simulate custom storage quota',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/StorageView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n/**\n * @implements {SDK.TargetManager.Observer}\n */\nexport class StorageView extends UI.ThrottledWidget.ThrottledWidget {\n  private pieColors: Map<Protocol.Storage.StorageType, string>;\n  private reportView: UI.ReportView.ReportView;\n  private target: SDK.Target.Target|null;\n  private securityOrigin: string|null;\n  private storageKey: string|null;\n  private settings: Map<Protocol.Storage.StorageType, Common.Settings.Setting<boolean>>;\n  private includeThirdPartyCookiesSetting: Common.Settings.Setting<boolean>;\n  private quotaRow: HTMLElement;\n  private quotaUsage: number|null;\n  private pieChart: PerfUI.PieChart.PieChart;\n  private previousOverrideFieldValue: string;\n  private quotaOverrideCheckbox: UI.UIUtils.CheckboxLabel;\n  private quotaOverrideControlRow: HTMLElement;\n  private quotaOverrideEditor: HTMLInputElement;\n  private quotaOverrideErrorMessage: HTMLElement;\n  private clearButton: HTMLButtonElement;\n\n  constructor() {\n    super(true, 1000);\n\n    this.contentElement.classList.add('clear-storage-container');\n    this.pieColors = new Map([\n      [Protocol.Storage.StorageType.Appcache, 'rgb(110, 161, 226)'],        // blue\n      [Protocol.Storage.StorageType.Cache_storage, 'rgb(229, 113, 113)'],   // red\n      [Protocol.Storage.StorageType.Cookies, 'rgb(239, 196, 87)'],          // yellow\n      [Protocol.Storage.StorageType.Indexeddb, 'rgb(155, 127, 230)'],       // purple\n      [Protocol.Storage.StorageType.Local_storage, 'rgb(116, 178, 102)'],   // green\n      [Protocol.Storage.StorageType.Service_workers, 'rgb(255, 167, 36)'],  // orange\n      [Protocol.Storage.StorageType.Websql, 'rgb(203, 220, 56)'],           // lime\n    ]);\n\n    // TODO(crbug.com/1156978): Replace UI.ReportView.ReportView with ReportView.ts web component.\n    this.reportView = new UI.ReportView.ReportView(i18nString(UIStrings.storageTitle));\n\n    this.reportView.element.classList.add('clear-storage-header');\n    this.reportView.show(this.contentElement);\n    this.target = null;\n    this.securityOrigin = null;\n    this.storageKey = null;\n\n    this.settings = new Map();\n    for (const type of AllStorageTypes) {\n      this.settings.set(type, Common.Settings.Settings.instance().createSetting('clear-storage-' + type, true));\n    }\n\n    this.includeThirdPartyCookiesSetting =\n        Common.Settings.Settings.instance().createSetting('clear-storage-include-third-party-cookies', false);\n\n    const quota = this.reportView.appendSection(i18nString(UIStrings.usage));\n    this.quotaRow = quota.appendSelectableRow();\n    this.quotaRow.classList.add('quota-usage-row');\n    const learnMoreRow = quota.appendRow();\n    const learnMore = UI.XLink.XLink.create(\n        'https://developer.chrome.com/docs/devtools/progressive-web-apps#opaque-responses',\n        i18nString(UIStrings.learnMore));\n    learnMoreRow.appendChild(learnMore);\n    this.quotaUsage = null;\n    this.pieChart = new PerfUI.PieChart.PieChart();\n    this.populatePieChart(0, []);\n    const usageBreakdownRow = quota.appendRow();\n    usageBreakdownRow.classList.add('usage-breakdown-row');\n    usageBreakdownRow.appendChild(this.pieChart);\n\n    this.previousOverrideFieldValue = '';\n    const quotaOverrideCheckboxRow = quota.appendRow();\n    this.quotaOverrideCheckbox =\n        UI.UIUtils.CheckboxLabel.create(i18nString(UIStrings.simulateCustomStorage), false, '');\n    quotaOverrideCheckboxRow.appendChild(this.quotaOverrideCheckbox);\n    this.quotaOverrideCheckbox.checkboxElement.addEventListener('click', this.onClickCheckbox.bind(this), false);\n    this.quotaOverrideControlRow = quota.appendRow();\n    this.quotaOverrideEditor =\n        this.quotaOverrideControlRow.createChild('input', 'quota-override-notification-editor') as HTMLInputElement;\n    this.quotaOverrideControlRow.appendChild(UI.UIUtils.createLabel(i18nString(UIStrings.mb)));\n    this.quotaOverrideControlRow.classList.add('hidden');\n    this.quotaOverrideEditor.addEventListener('keyup', event => {\n      if (event.key === 'Enter') {\n        void this.applyQuotaOverrideFromInputField();\n        event.consume(true);\n      }\n    });\n    this.quotaOverrideEditor.addEventListener('focusout', event => {\n      void this.applyQuotaOverrideFromInputField();\n      event.consume(true);\n    });\n\n    const errorMessageRow = quota.appendRow();\n    this.quotaOverrideErrorMessage = errorMessageRow.createChild('div', 'quota-override-error');\n\n    const clearButtonSection = this.reportView.appendSection('', 'clear-storage-button').appendRow();\n    this.clearButton = UI.UIUtils.createTextButton(i18nString(UIStrings.clearSiteData), this.clear.bind(this));\n    this.clearButton.id = 'storage-view-clear-button';\n    clearButtonSection.appendChild(this.clearButton);\n\n    const includeThirdPartyCookiesCheckbox = UI.SettingsUI.createSettingCheckbox(\n        i18nString(UIStrings.includingThirdPartyCookies), this.includeThirdPartyCookiesSetting, true);\n    includeThirdPartyCookiesCheckbox.classList.add('include-third-party-cookies');\n    clearButtonSection.appendChild(includeThirdPartyCookiesCheckbox);\n\n    const application = this.reportView.appendSection(i18nString(UIStrings.application));\n    this.appendItem(\n        application, i18nString(UIStrings.unregisterServiceWorker), Protocol.Storage.StorageType.Service_workers);\n    application.markFieldListAsGroup();\n\n    const storage = this.reportView.appendSection(i18nString(UIStrings.storageTitle));\n    this.appendItem(storage, i18nString(UIStrings.localAndSessionStorage), Protocol.Storage.StorageType.Local_storage);\n    this.appendItem(storage, i18nString(UIStrings.indexDB), Protocol.Storage.StorageType.Indexeddb);\n    this.appendItem(storage, i18nString(UIStrings.webSql), Protocol.Storage.StorageType.Websql);\n    this.appendItem(storage, i18nString(UIStrings.cookies), Protocol.Storage.StorageType.Cookies);\n    storage.markFieldListAsGroup();\n\n    const caches = this.reportView.appendSection(i18nString(UIStrings.cache));\n    this.appendItem(caches, i18nString(UIStrings.cacheStorage), Protocol.Storage.StorageType.Cache_storage);\n    caches.markFieldListAsGroup();\n\n    SDK.TargetManager.TargetManager.instance().observeTargets(this);\n  }\n\n  private appendItem(section: UI.ReportView.Section, title: string, settingName: Protocol.Storage.StorageType): void {\n    const row = section.appendRow();\n    const setting = this.settings.get(settingName);\n    if (setting) {\n      row.appendChild(UI.SettingsUI.createSettingCheckbox(title, setting, true));\n    }\n  }\n\n  targetAdded(target: SDK.Target.Target): void {\n    if (this.target) {\n      return;\n    }\n    this.target = target;\n    const securityOriginManager = target.model(SDK.SecurityOriginManager.SecurityOriginManager) as\n        SDK.SecurityOriginManager.SecurityOriginManager;\n    this.updateOrigin(\n        securityOriginManager.mainSecurityOrigin(), securityOriginManager.unreachableMainSecurityOrigin());\n    securityOriginManager.addEventListener(\n        SDK.SecurityOriginManager.Events.MainSecurityOriginChanged, this.originChanged, this);\n    const storageKeyManager =\n        target.model(SDK.StorageKeyManager.StorageKeyManager) as SDK.StorageKeyManager.StorageKeyManager;\n    this.updateStorageKey(storageKeyManager.mainStorageKey());\n    storageKeyManager.addEventListener(\n        SDK.StorageKeyManager.Events.MainStorageKeyChanged, this.storageKeyChanged, this);\n  }\n\n  targetRemoved(target: SDK.Target.Target): void {\n    if (this.target !== target) {\n      return;\n    }\n    const securityOriginManager = target.model(SDK.SecurityOriginManager.SecurityOriginManager) as\n        SDK.SecurityOriginManager.SecurityOriginManager;\n    securityOriginManager.removeEventListener(\n        SDK.SecurityOriginManager.Events.MainSecurityOriginChanged, this.originChanged, this);\n    const storageKeyManager =\n        target.model(SDK.StorageKeyManager.StorageKeyManager) as SDK.StorageKeyManager.StorageKeyManager;\n    storageKeyManager.removeEventListener(\n        SDK.StorageKeyManager.Events.MainStorageKeyChanged, this.storageKeyChanged, this);\n  }\n\n  private originChanged(\n      event: Common.EventTarget.EventTargetEvent<SDK.SecurityOriginManager.MainSecurityOriginChangedEvent>): void {\n    const {mainSecurityOrigin, unreachableMainSecurityOrigin} = event.data;\n    this.updateOrigin(mainSecurityOrigin, unreachableMainSecurityOrigin);\n  }\n\n  private storageKeyChanged(\n      event: Common.EventTarget.EventTargetEvent<SDK.StorageKeyManager.MainStorageKeyChangedEvent>): void {\n    const {mainStorageKey} = event.data;\n    this.updateStorageKey(mainStorageKey);\n  }\n\n  private updateOrigin(mainOrigin: string, unreachableMainOrigin: string|null): void {\n    const oldOrigin = this.securityOrigin;\n    if (unreachableMainOrigin) {\n      this.securityOrigin = unreachableMainOrigin;\n      this.reportView.setSubtitle(i18nString(UIStrings.sFailedToLoad, {PH1: unreachableMainOrigin}));\n    } else {\n      this.securityOrigin = mainOrigin;\n      this.reportView.setSubtitle(mainOrigin);\n    }\n\n    if (oldOrigin !== this.securityOrigin) {\n      this.quotaOverrideControlRow.classList.add('hidden');\n      this.quotaOverrideCheckbox.checkboxElement.checked = false;\n      this.quotaOverrideErrorMessage.textContent = '';\n    }\n    void this.doUpdate();\n  }\n\n  private updateStorageKey(mainStorageKey: string): void {\n    const oldStorageKey = this.storageKey;\n\n    this.storageKey = mainStorageKey;\n    this.reportView.setSubtitle(mainStorageKey);\n\n    if (oldStorageKey !== this.storageKey) {\n      this.quotaOverrideControlRow.classList.add('hidden');\n      this.quotaOverrideCheckbox.checkboxElement.checked = false;\n      this.quotaOverrideErrorMessage.textContent = '';\n    }\n    void this.doUpdate();\n  }\n\n  private async applyQuotaOverrideFromInputField(): Promise<void> {\n    if (!this.target || !this.securityOrigin) {\n      this.quotaOverrideErrorMessage.textContent = i18nString(UIStrings.internalError);\n      return;\n    }\n    this.quotaOverrideErrorMessage.textContent = '';\n    const editorString = this.quotaOverrideEditor.value;\n    if (editorString === '') {\n      await this.clearQuotaForOrigin(this.target, this.securityOrigin);\n      this.previousOverrideFieldValue = '';\n      return;\n    }\n    const quota = parseFloat(editorString);\n    if (!Number.isFinite(quota)) {\n      this.quotaOverrideErrorMessage.textContent = i18nString(UIStrings.pleaseEnterANumber);\n      return;\n    }\n    if (quota < 0) {\n      this.quotaOverrideErrorMessage.textContent = i18nString(UIStrings.numberMustBeNonNegative);\n      return;\n    }\n    const bytesPerMB = 1000 * 1000;\n    const quotaInBytes = Math.round(quota * bytesPerMB);\n    const quotaFieldValue = `${quotaInBytes / bytesPerMB}`;\n    this.quotaOverrideEditor.value = quotaFieldValue;\n    this.previousOverrideFieldValue = quotaFieldValue;\n    await this.target.storageAgent().invoke_overrideQuotaForOrigin(\n        {origin: this.securityOrigin, quotaSize: quotaInBytes});\n  }\n\n  private async clearQuotaForOrigin(target: SDK.Target.Target, origin: string): Promise<void> {\n    await target.storageAgent().invoke_overrideQuotaForOrigin({origin});\n  }\n\n  private async onClickCheckbox(): Promise<void> {\n    if (this.quotaOverrideControlRow.classList.contains('hidden')) {\n      this.quotaOverrideControlRow.classList.remove('hidden');\n      this.quotaOverrideCheckbox.checkboxElement.checked = true;\n      this.quotaOverrideEditor.value = this.previousOverrideFieldValue;\n      this.quotaOverrideEditor.focus();\n    } else if (this.target && this.securityOrigin) {\n      this.quotaOverrideControlRow.classList.add('hidden');\n      this.quotaOverrideCheckbox.checkboxElement.checked = false;\n      await this.clearQuotaForOrigin(this.target, this.securityOrigin);\n      this.quotaOverrideErrorMessage.textContent = '';\n    }\n  }\n\n  private clear(): void {\n    if (!this.securityOrigin) {\n      return;\n    }\n    const selectedStorageTypes = [];\n    for (const type of this.settings.keys()) {\n      const setting = this.settings.get(type);\n      if (setting && setting.get()) {\n        selectedStorageTypes.push(type);\n      }\n    }\n\n    if (this.target) {\n      const includeThirdPartyCookies = this.includeThirdPartyCookiesSetting.get();\n      // TODO(crbug.com/1313434) Prioritize storageKey once everything is ready\n      if (this.securityOrigin) {\n        StorageView.clear(this.target, this.securityOrigin, selectedStorageTypes, includeThirdPartyCookies);\n      } else if (this.storageKey) {\n        StorageView.clearByStorageKey(this.target, this.storageKey, selectedStorageTypes);\n      }\n    }\n\n    this.clearButton.disabled = true;\n    const label = this.clearButton.textContent;\n    this.clearButton.textContent = i18nString(UIStrings.clearing);\n    window.setTimeout(() => {\n      this.clearButton.disabled = false;\n      this.clearButton.textContent = label;\n      this.clearButton.focus();\n    }, 500);\n  }\n\n  static clear(\n      target: SDK.Target.Target, securityOrigin: string, selectedStorageTypes: string[],\n      includeThirdPartyCookies: boolean): void {\n    void target.storageAgent().invoke_clearDataForOrigin(\n        {origin: securityOrigin, storageTypes: selectedStorageTypes.join(',')});\n\n    const set = new Set(selectedStorageTypes);\n    const hasAll = set.has(Protocol.Storage.StorageType.All);\n    if (set.has(Protocol.Storage.StorageType.Cookies) || hasAll) {\n      const cookieModel = target.model(SDK.CookieModel.CookieModel);\n      if (cookieModel) {\n        void cookieModel.clear(undefined, includeThirdPartyCookies ? undefined : securityOrigin);\n      }\n    }\n\n    if (set.has(Protocol.Storage.StorageType.Indexeddb) || hasAll) {\n      for (const target of SDK.TargetManager.TargetManager.instance().targets()) {\n        const indexedDBModel = target.model(IndexedDBModel);\n        if (indexedDBModel) {\n          indexedDBModel.clearForOrigin(securityOrigin);\n        }\n      }\n    }\n\n    if (set.has(Protocol.Storage.StorageType.Local_storage) || hasAll) {\n      const storageModel = target.model(DOMStorageModel);\n      if (storageModel) {\n        storageModel.clearForOrigin(securityOrigin);\n      }\n    }\n\n    if (set.has(Protocol.Storage.StorageType.Websql) || hasAll) {\n      const databaseModel = target.model(DatabaseModel);\n      if (databaseModel) {\n        databaseModel.disable();\n        databaseModel.enable();\n      }\n    }\n\n    if (set.has(Protocol.Storage.StorageType.Cache_storage) || hasAll) {\n      const target = SDK.TargetManager.TargetManager.instance().mainTarget();\n      const model = target && target.model(SDK.ServiceWorkerCacheModel.ServiceWorkerCacheModel);\n      if (model) {\n        model.clearForOrigin(securityOrigin);\n      }\n    }\n  }\n\n  static clearByStorageKey(target: SDK.Target.Target, storageKey: string, selectedStorageTypes: string[]): void {\n    // TODO(crbug.com/1313434) Invoke protocol `clear` once it ready for storageKey\n\n    const set = new Set(selectedStorageTypes);\n    const hasAll = set.has(Protocol.Storage.StorageType.All);\n\n    if (set.has(Protocol.Storage.StorageType.Local_storage) || hasAll) {\n      const storageModel = target.model(DOMStorageModel);\n      if (storageModel) {\n        storageModel.clearForStorageKey(storageKey);\n      }\n    }\n  }\n\n  async doUpdate(): Promise<void> {\n    if (!this.securityOrigin || !this.target) {\n      this.quotaRow.textContent = '';\n      this.populatePieChart(0, []);\n      return;\n    }\n\n    const securityOrigin = this.securityOrigin;\n    const response = await this.target.storageAgent().invoke_getUsageAndQuota({origin: securityOrigin});\n    this.quotaRow.textContent = '';\n    if (response.getError()) {\n      this.populatePieChart(0, []);\n      return;\n    }\n    const quotaOverridden = response.overrideActive;\n    const quotaAsString = Platform.NumberUtilities.bytesToString(response.quota);\n    const usageAsString = Platform.NumberUtilities.bytesToString(response.usage);\n    const formattedQuotaAsString = i18nString(UIStrings.storageWithCustomMarker, {PH1: quotaAsString});\n    const quota =\n        quotaOverridden ? UI.Fragment.Fragment.build`<b>${formattedQuotaAsString}</b>`.element() : quotaAsString;\n    const element =\n        i18n.i18n.getFormatLocalizedString(str_, UIStrings.storageQuotaUsed, {PH1: usageAsString, PH2: quota});\n    this.quotaRow.appendChild(element);\n    UI.Tooltip.Tooltip.install(\n        this.quotaRow,\n        i18nString(\n            UIStrings.storageQuotaUsedWithBytes,\n            {PH1: response.usage.toLocaleString(), PH2: response.quota.toLocaleString()}));\n\n    if (!response.overrideActive && response.quota < 125829120) {  // 120 MB\n      UI.Tooltip.Tooltip.install(this.quotaRow, i18nString(UIStrings.storageQuotaIsLimitedIn));\n      this.quotaRow.appendChild(UI.Icon.Icon.create('smallicon-info'));\n    }\n\n    if (this.quotaUsage === null || this.quotaUsage !== response.usage) {\n      this.quotaUsage = response.usage;\n      const slices: PerfUI.PieChart.Slice[] = [];\n      for (const usageForType of response.usageBreakdown.sort((a, b) => b.usage - a.usage)) {\n        const value = usageForType.usage;\n        if (!value) {\n          continue;\n        }\n        const title = this.getStorageTypeName(usageForType.storageType);\n        const color = this.pieColors.get(usageForType.storageType) || '#ccc';\n        slices.push({value, color, title});\n      }\n      this.populatePieChart(response.usage, slices);\n    }\n\n    this.update();\n  }\n\n  private populatePieChart(total: number, slices: PerfUI.PieChart.Slice[]): void {\n    this.pieChart.data = {\n      chartName: i18nString(UIStrings.storageUsage),\n      size: 110,\n      formatter: Platform.NumberUtilities.bytesToString,\n      showLegend: true,\n      total,\n      slices,\n    };\n  }\n\n  private getStorageTypeName(type: Protocol.Storage.StorageType): string {\n    switch (type) {\n      case Protocol.Storage.StorageType.File_systems:\n        return i18nString(UIStrings.fileSystem);\n      case Protocol.Storage.StorageType.Websql:\n        return i18nString(UIStrings.webSql);\n      case Protocol.Storage.StorageType.Appcache:\n        return i18nString(UIStrings.application);\n      case Protocol.Storage.StorageType.Indexeddb:\n        return i18nString(UIStrings.indexDB);\n      case Protocol.Storage.StorageType.Cache_storage:\n        return i18nString(UIStrings.cacheStorage);\n      case Protocol.Storage.StorageType.Service_workers:\n        return i18nString(UIStrings.serviceWorkers);\n      default:\n        return i18nString(UIStrings.other);\n    }\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.reportView.registerCSSFiles([storageViewStyles]);\n    this.registerCSSFiles([storageViewStyles]);\n  }\n}\n\nexport const AllStorageTypes = [\n  Protocol.Storage.StorageType.Appcache,\n  Protocol.Storage.StorageType.Cache_storage,\n  Protocol.Storage.StorageType.Cookies,\n  Protocol.Storage.StorageType.Indexeddb,\n  Protocol.Storage.StorageType.Local_storage,\n  Protocol.Storage.StorageType.Service_workers,\n  Protocol.Storage.StorageType.Websql,\n];\n\nlet actionDelegateInstance: ActionDelegate;\n\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): ActionDelegate {\n    const {forceNew} = opts;\n    if (!actionDelegateInstance || forceNew) {\n      actionDelegateInstance = new ActionDelegate();\n    }\n\n    return actionDelegateInstance;\n  }\n\n  handleAction(context: UI.Context.Context, actionId: string): boolean {\n    switch (actionId) {\n      case 'resources.clear':\n        return this.handleClear(false);\n      case 'resources.clear-incl-third-party-cookies':\n        return this.handleClear(true);\n    }\n    return false;\n  }\n\n  private async clear(target: SDK.Target.Target, resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel):\n      Promise<void> {\n    const storageKey = await resourceTreeModel.getMainStorageKey();\n    if (storageKey) {\n      StorageView.clearByStorageKey(target, storageKey, AllStorageTypes);\n    }\n  }\n\n  private handleClear(includeThirdPartyCookies: boolean): boolean {\n    const target = SDK.TargetManager.TargetManager.instance().mainTarget();\n    if (!target) {\n      return false;\n    }\n    const resourceTreeModel = target.model(SDK.ResourceTreeModel.ResourceTreeModel);\n    if (!resourceTreeModel) {\n      return false;\n    }\n    const securityOrigin = resourceTreeModel.getMainSecurityOrigin();\n    // TODO(crbug.com/1313434) Prioritize storageKey functionality once everything is ready\n    if (securityOrigin) {\n      StorageView.clear(target, securityOrigin, AllStorageTypes, includeThirdPartyCookies);\n      return true;\n    }\n    void this.clear(target, resourceTreeModel);\n    return true;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
