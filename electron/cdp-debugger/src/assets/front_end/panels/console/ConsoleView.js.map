{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/console/ConsoleView.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2007, 2008 Apple Inc.  All rights reserved.\n * Copyright (C) 2009 Joseph Pecoraro\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as IssuesManager from '../../models/issues_manager/issues_manager.js';\nimport * as Logs from '../../models/logs/logs.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as CodeHighlighter from '../../ui/components/code_highlighter/code_highlighter.js';\nimport * as IssueCounter from '../../ui/components/issue_counter/issue_counter.js';\n// eslint-disable-next-line rulesdir/es_modules_import\nimport objectValueStyles from '../../ui/legacy/components/object_ui/objectValue.css.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {ConsoleContextSelector} from './ConsoleContextSelector.js';\nimport consoleViewStyles from './consoleView.css.js';\n\nimport type {LevelsMask} from './ConsoleFilter.js';\nimport {ConsoleFilter, FilterType} from './ConsoleFilter.js';\nimport {ConsolePinPane} from './ConsolePinPane.js';\nimport {ConsolePrompt, Events as ConsolePromptEvents} from './ConsolePrompt.js';\nimport {ConsoleSidebar, Events} from './ConsoleSidebar.js';\nimport {\n  ConsoleCommand,\n  ConsoleCommandResult,\n  ConsoleGroupViewMessage,\n  ConsoleTableMessageView,\n  ConsoleViewMessage,\n  getMessageForElement,\n  MaxLengthForLinks,\n} from './ConsoleViewMessage.js';\n\nimport type {ConsoleViewportElement, ConsoleViewportProvider} from './ConsoleViewport.js';\nimport {ConsoleViewport} from './ConsoleViewport.js';\n\nconst UIStrings = {\n  /**\n  *@description Label for button which links to Issues tab, specifying how many issues there are.\n  */\n  issuesWithColon: '{n, plural, =0 {No Issues} =1 {# Issue:} other {# Issues:}}',\n  /**\n  *@description Text for the tooltip of the issue counter toolbar item\n  */\n  issueToolbarTooltipGeneral: 'Some problems no longer generate console messages, but are surfaced in the issues tab.',\n  /**\n  * @description Text for the tooltip of the issue counter toolbar item. The placeholder indicates how many issues\n  * there are in the Issues tab broken down by kind.\n  * @example {1 page error, 2 breaking changes} issueEnumeration\n  */\n  issueToolbarClickToView: 'Click to view {issueEnumeration}',\n  /**\n  * @description Text for the tooltip of the issue counter toolbar item. The placeholder indicates how many issues\n  * there are in the Issues tab broken down by kind.\n  */\n  issueToolbarClickToGoToTheIssuesTab: 'Click to go to the issues tab',\n  /**\n  *@description Text in Console View of the Console panel\n  */\n  findStringInLogs: 'Find string in logs',\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon settings gear in show settings pane setting in console view of the console panel\n  */\n  consoleSettings: 'Console settings',\n  /**\n  *@description Title of a setting under the Console category that can be invoked through the Command Menu\n  */\n  groupSimilarMessagesInConsole: 'Group similar messages in console',\n  /**\n  *@description Title of a setting under the Console category that can be invoked through the Command Menu\n  */\n  showCorsErrorsInConsole: 'Show `CORS` errors in console',\n  /**\n  * @description Tooltip for the the console sidebar toggle in the Console panel. Command to\n  * open/show the sidebar.\n  */\n  showConsoleSidebar: 'Show console sidebar',\n  /**\n  * @description Tooltip for the the console sidebar toggle in the Console panel. Command to\n  * open/show the sidebar.\n  */\n  hideConsoleSidebar: 'Hide console sidebar',\n  /**\n   * @description Screen reader announcement when the sidebar is shown in the Console panel.\n   */\n  consoleSidebarShown: 'Console sidebar shown',\n  /**\n   * @description Screen reader announcement when the sidebar is hidden in the Console panel.\n   */\n  consoleSidebarHidden: 'Console sidebar hidden',\n  /**\n  *@description Tooltip text that appears on the setting to preserve log when hovering over the item\n  */\n  doNotClearLogOnPageReload: 'Do not clear log on page reload / navigation',\n  /**\n  *@description Text to preserve the log after refreshing\n  */\n  preserveLog: 'Preserve log',\n  /**\n  *@description Text in Console View of the Console panel\n  */\n  hideNetwork: 'Hide network',\n  /**\n  *@description Tooltip text that appears on the setting when hovering over it in Console View of the Console panel\n  */\n  onlyShowMessagesFromTheCurrentContext:\n      'Only show messages from the current context (`top`, `iframe`, `worker`, extension)',\n  /**\n  *@description Alternative title text of a setting in Console View of the Console panel\n  */\n  selectedContextOnly: 'Selected context only',\n  /**\n   *@description Description of a setting that controls whether XMLHttpRequests are logged in the console.\n   */\n  logXMLHttpRequests: 'Log XMLHttpRequests',\n  /**\n  *@description Tooltip text that appears on the setting when hovering over it in Console View of the Console panel\n  */\n  eagerlyEvaluateTextInThePrompt: 'Eagerly evaluate text in the prompt',\n  /**\n   *@description Description of a setting that controls whether text typed in the console should be autocompleted from commands executed in the local console history.\n   */\n  autocompleteFromHistory: 'Autocomplete from history',\n  /**\n   *@description Description of a setting that controls whether user activation is triggered by evaluation'.\n  */\n  treatEvaluationAsUserActivation: 'Treat evaluation as user activation',\n  /**\n  * @description Text in Console View of the Console panel, indicating that a number of console\n  * messages have been hidden.\n  */\n  sHidden: '{n, plural, =1 {# hidden} other {# hidden}}',\n  /**\n  *@description Alert message for screen readers when the console is cleared\n  */\n  consoleCleared: 'Console cleared',\n  /**\n  *@description Text in Console View of the Console panel\n  *@example {index.js} PH1\n  */\n  hideMessagesFromS: 'Hide messages from {PH1}',\n  /**\n  *@description Text to save content as a specific file type\n  */\n  saveAs: 'Save as...',\n  /**\n  *@description A context menu item in the Console View of the Console panel\n  */\n  copyVisibleStyledSelection: 'Copy visible styled selection',\n  /**\n  *@description Text to replay an XHR request\n  */\n  replayXhr: 'Replay XHR',\n  /**\n  *@description Text to indicate DevTools is writing to a file\n  */\n  writingFile: 'Writing file\u2026',\n  /**\n  *@description Text to indicate the searching is in progress\n  */\n  searching: 'Searching\u2026',\n  /**\n  *@description Text to filter result items\n  */\n  filter: 'Filter',\n  /**\n  *@description Text in Console View of the Console panel\n  */\n  egEventdCdnUrlacom: 'e.g. `/event\\d/ -cdn url:a.com`',\n  /**\n  *@description Sdk console message message level verbose of level Labels in Console View of the Console panel\n  */\n  verbose: 'Verbose',\n  /**\n  *@description Sdk console message message level info of level Labels in Console View of the Console panel\n  */\n  info: 'Info',\n  /**\n  *@description Sdk console message message level warning of level Labels in Console View of the Console panel\n  */\n  warnings: 'Warnings',\n  /**\n  *@description Text for errors\n  */\n  errors: 'Errors',\n  /**\n  *@description Text in Console View of the Console panel\n  */\n  logLevels: 'Log levels',\n  /**\n  *@description Title text of a setting in Console View of the Console panel\n  */\n  overriddenByFilterSidebar: 'Overridden by filter sidebar',\n  /**\n  *@description Text in Console View of the Console panel\n  */\n  customLevels: 'Custom levels',\n  /**\n  *@description Text in Console View of the Console panel\n  *@example {Warnings} PH1\n  */\n  sOnly: '{PH1} only',\n  /**\n  *@description Text in Console View of the Console panel\n  */\n  allLevels: 'All levels',\n  /**\n  *@description Text in Console View of the Console panel\n  */\n  defaultLevels: 'Default levels',\n  /**\n  *@description Text in Console View of the Console panel\n  */\n  hideAll: 'Hide all',\n  /**\n  *@description Title of level menu button in console view of the console panel\n  *@example {All levels} PH1\n  */\n  logLevelS: 'Log level: {PH1}',\n  /**\n  *@description A context menu item in the Console View of the Console panel\n  */\n  default: 'Default',\n  /**\n  *@description Text summary to indicate total number of messages in console for accessibility/screen readers.\n  *@example {5} PH1\n  */\n  filteredMessagesInConsole: '{PH1} messages in console',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/console/ConsoleView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet consoleViewInstance: ConsoleView;\n\nexport class ConsoleView extends UI.Widget.VBox implements UI.SearchableView.Searchable, ConsoleViewportProvider {\n  private readonly searchableViewInternal: UI.SearchableView.SearchableView;\n  private readonly sidebar: ConsoleSidebar;\n  private isSidebarOpen: boolean;\n  private filter: ConsoleViewFilter;\n  private readonly consoleToolbarContainer: HTMLElement;\n  private readonly splitWidget: UI.SplitWidget.SplitWidget;\n  private readonly contentsElement: UI.Widget.WidgetElement;\n  private visibleViewMessages: ConsoleViewMessage[];\n  private hiddenByFilterCount: number;\n  private shouldBeHiddenCache: Set<ConsoleViewMessage>;\n  private lastShownHiddenByFilterCount!: number;\n  private currentMatchRangeIndex!: number;\n  private searchRegex!: RegExp|null;\n  private groupableMessages: Map<string, ConsoleViewMessage[]>;\n  private readonly groupableMessageTitle: Map<string, ConsoleViewMessage>;\n  private readonly shortcuts: Map<number, () => void>;\n  private regexMatchRanges: RegexMatchRange[];\n  private readonly consoleContextSelector: ConsoleContextSelector;\n  private readonly filterStatusText: UI.Toolbar.ToolbarText;\n  private readonly showSettingsPaneSetting: Common.Settings.Setting<boolean>;\n  private readonly showSettingsPaneButton: UI.Toolbar.ToolbarSettingToggle;\n  private readonly progressToolbarItem: UI.Toolbar.ToolbarItem;\n  private readonly groupSimilarSetting: Common.Settings.Setting<boolean>;\n  private readonly showCorsErrorsSetting: Common.Settings.Setting<boolean>;\n  private readonly timestampsSetting: Common.Settings.Setting<unknown>;\n  private readonly consoleHistoryAutocompleteSetting: Common.Settings.Setting<boolean>;\n  readonly pinPane: ConsolePinPane;\n  private viewport: ConsoleViewport;\n  private messagesElement: HTMLElement;\n  private messagesCountElement: HTMLElement;\n  private viewportThrottler: Common.Throttler.Throttler;\n  private pendingBatchResize: boolean;\n  private readonly onMessageResizedBound: (e: Common.EventTarget.EventTargetEvent<UI.TreeOutline.TreeElement>) => void;\n  private readonly promptElement: HTMLElement;\n  private readonly linkifier: Components.Linkifier.Linkifier;\n  private consoleMessages: ConsoleViewMessage[];\n  private consoleGroupStarts: ConsoleGroupViewMessage[];\n  private readonly consoleHistorySetting: Common.Settings.Setting<string[]>;\n  private prompt: ConsolePrompt;\n  private immediatelyFilterMessagesForTest?: boolean;\n  private maybeDirtyWhileMuted?: boolean;\n  private scheduledRefreshPromiseForTest?: Promise<void>;\n  private needsFullUpdate?: boolean;\n  private buildHiddenCacheTimeout?: number;\n  private searchShouldJumpBackwards?: boolean;\n  private searchProgressIndicator?: UI.ProgressIndicator.ProgressIndicator;\n  private innerSearchTimeoutId?: number;\n  private muteViewportUpdates?: boolean;\n  private waitForScrollTimeout?: number;\n  private issueCounter: IssueCounter.IssueCounter.IssueCounter;\n  private pendingSidebarMessages: ConsoleViewMessage[] = [];\n  private userHasOpenedSidebarAtLeastOnce = false;\n  private issueToolbarThrottle: Common.Throttler.Throttler;\n  private requestResolver = new Logs.RequestResolver.RequestResolver();\n  private issueResolver = new IssuesManager.IssueResolver.IssueResolver();\n\n  constructor() {\n    super();\n    this.setMinimumSize(0, 35);\n\n    this.searchableViewInternal = new UI.SearchableView.SearchableView(this, null);\n    this.searchableViewInternal.element.classList.add('console-searchable-view');\n    this.searchableViewInternal.setPlaceholder(i18nString(UIStrings.findStringInLogs));\n    this.searchableViewInternal.setMinimalSearchQuerySize(0);\n    this.sidebar = new ConsoleSidebar();\n    this.sidebar.addEventListener(Events.FilterSelected, this.onFilterChanged.bind(this));\n    this.isSidebarOpen = false;\n    this.filter = new ConsoleViewFilter(this.onFilterChanged.bind(this));\n\n    this.consoleToolbarContainer = this.element.createChild('div', 'console-toolbar-container');\n    this.splitWidget = new UI.SplitWidget.SplitWidget(\n        true /* isVertical */, false /* secondIsSidebar */, 'console.sidebar.width', 100);\n    this.splitWidget.setMainWidget(this.searchableViewInternal);\n    this.splitWidget.setSidebarWidget(this.sidebar);\n    this.splitWidget.show(this.element);\n    this.splitWidget.hideSidebar();\n    this.splitWidget.enableShowModeSaving();\n    this.isSidebarOpen = this.splitWidget.showMode() === UI.SplitWidget.ShowMode.Both;\n    this.filter.setLevelMenuOverridden(this.isSidebarOpen);\n    this.splitWidget.addEventListener(UI.SplitWidget.Events.ShowModeChanged, event => {\n      this.isSidebarOpen = event.data === UI.SplitWidget.ShowMode.Both;\n\n      if (this.isSidebarOpen) {\n        if (!this.userHasOpenedSidebarAtLeastOnce) {\n          /**\n           * We only want to know if the user opens the sidebar once, not how\n           * many times in a given session they might open and close it, hence\n           * the userHasOpenedSidebarAtLeastOnce variable to track this.\n           */\n          Host.userMetrics.actionTaken(Host.UserMetrics.Action.ConsoleSidebarOpened);\n          this.userHasOpenedSidebarAtLeastOnce = true;\n        }\n\n        // If the user has now opened the sidebar, we need to update it, so send\n        // through all the pending messages.\n        this.pendingSidebarMessages.forEach(message => {\n          this.sidebar.onMessageAdded(message);\n        });\n        this.pendingSidebarMessages = [];\n      }\n      this.filter.setLevelMenuOverridden(this.isSidebarOpen);\n      this.onFilterChanged();\n    });\n    this.contentsElement = this.searchableViewInternal.element;\n    this.element.classList.add('console-view');\n\n    this.visibleViewMessages = [];\n    this.hiddenByFilterCount = 0;\n    this.shouldBeHiddenCache = new Set();\n\n    this.groupableMessages = new Map();\n    this.groupableMessageTitle = new Map();\n    this.shortcuts = new Map();\n\n    this.regexMatchRanges = [];\n\n    this.consoleContextSelector = new ConsoleContextSelector();\n\n    this.filterStatusText = new UI.Toolbar.ToolbarText();\n    this.filterStatusText.element.classList.add('dimmed');\n    this.showSettingsPaneSetting =\n        Common.Settings.Settings.instance().createSetting('consoleShowSettingsToolbar', false);\n    this.showSettingsPaneButton = new UI.Toolbar.ToolbarSettingToggle(\n        this.showSettingsPaneSetting, 'largeicon-settings-gear', i18nString(UIStrings.consoleSettings));\n    this.progressToolbarItem = new UI.Toolbar.ToolbarItem(document.createElement('div'));\n    this.groupSimilarSetting = Common.Settings.Settings.instance().moduleSetting('consoleGroupSimilar');\n    this.groupSimilarSetting.addChangeListener(() => this.updateMessageList());\n\n    this.showCorsErrorsSetting = Common.Settings.Settings.instance().moduleSetting('consoleShowsCorsErrors');\n    this.showCorsErrorsSetting.addChangeListener(() => {\n      Host.userMetrics.showCorsErrorsSettingChanged(this.showCorsErrorsSetting.get());\n      this.updateMessageList();\n    });\n\n    const toolbar = new UI.Toolbar.Toolbar('console-main-toolbar', this.consoleToolbarContainer);\n    toolbar.makeWrappable(true);\n    const rightToolbar = new UI.Toolbar.Toolbar('', this.consoleToolbarContainer);\n    toolbar.appendToolbarItem(this.splitWidget.createShowHideSidebarButton(\n        i18nString(UIStrings.showConsoleSidebar), i18nString(UIStrings.hideConsoleSidebar),\n        i18nString(UIStrings.consoleSidebarShown), i18nString(UIStrings.consoleSidebarHidden)));\n    toolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButton(\n        (UI.ActionRegistry.ActionRegistry.instance().action('console.clear') as UI.ActionRegistration.Action)));\n    toolbar.appendSeparator();\n    toolbar.appendToolbarItem(this.consoleContextSelector.toolbarItem());\n    toolbar.appendSeparator();\n    const liveExpressionButton = UI.Toolbar.Toolbar.createActionButton(\n        (UI.ActionRegistry.ActionRegistry.instance().action('console.create-pin') as UI.ActionRegistration.Action));\n    toolbar.appendToolbarItem(liveExpressionButton);\n    toolbar.appendSeparator();\n    toolbar.appendToolbarItem(this.filter.textFilterUI);\n    toolbar.appendToolbarItem(this.filter.levelMenuButton);\n    toolbar.appendToolbarItem(this.progressToolbarItem);\n    toolbar.appendSeparator();\n    this.issueCounter = new IssueCounter.IssueCounter.IssueCounter();\n    this.issueCounter.id = 'console-issues-counter';\n    const issuesToolbarItem = new UI.Toolbar.ToolbarItem(this.issueCounter);\n    this.issueCounter.data = {\n      clickHandler: (): void => {\n        Host.userMetrics.issuesPanelOpenedFrom(Host.UserMetrics.IssueOpener.StatusBarIssuesCounter);\n        void UI.ViewManager.ViewManager.instance().showView('issues-pane');\n      },\n      issuesManager: IssuesManager.IssuesManager.IssuesManager.instance(),\n      accessibleName: i18nString(UIStrings.issueToolbarTooltipGeneral),\n      displayMode: IssueCounter.IssueCounter.DisplayMode.OmitEmpty,\n    };\n    toolbar.appendToolbarItem(issuesToolbarItem);\n    rightToolbar.appendSeparator();\n    rightToolbar.appendToolbarItem(this.filterStatusText);\n    rightToolbar.appendToolbarItem(this.showSettingsPaneButton);\n\n    const monitoringXHREnabledSetting = Common.Settings.Settings.instance().moduleSetting('monitoringXHREnabled');\n    this.timestampsSetting = Common.Settings.Settings.instance().moduleSetting('consoleTimestampsEnabled');\n    this.consoleHistoryAutocompleteSetting =\n        Common.Settings.Settings.instance().moduleSetting('consoleHistoryAutocomplete');\n\n    const settingsPane = new UI.Widget.HBox();\n    settingsPane.show(this.contentsElement);\n    settingsPane.element.classList.add('console-settings-pane');\n\n    UI.ARIAUtils.setAccessibleName(settingsPane.element, i18nString(UIStrings.consoleSettings));\n    UI.ARIAUtils.markAsGroup(settingsPane.element);\n\n    const settingsToolbarLeft = new UI.Toolbar.Toolbar('', settingsPane.element);\n    settingsToolbarLeft.makeVertical();\n\n    ConsoleView.appendSettingsCheckboxToToolbar(\n        settingsToolbarLeft, this.filter.hideNetworkMessagesSetting, this.filter.hideNetworkMessagesSetting.title(),\n        i18nString(UIStrings.hideNetwork));\n    ConsoleView.appendSettingsCheckboxToToolbar(\n        settingsToolbarLeft, 'preserveConsoleLog', i18nString(UIStrings.doNotClearLogOnPageReload),\n        i18nString(UIStrings.preserveLog));\n    ConsoleView.appendSettingsCheckboxToToolbar(\n        settingsToolbarLeft, this.filter.filterByExecutionContextSetting,\n        i18nString(UIStrings.onlyShowMessagesFromTheCurrentContext), i18nString(UIStrings.selectedContextOnly));\n    ConsoleView.appendSettingsCheckboxToToolbar(\n        settingsToolbarLeft, this.groupSimilarSetting, i18nString(UIStrings.groupSimilarMessagesInConsole));\n    ConsoleView.appendSettingsCheckboxToToolbar(\n        settingsToolbarLeft, this.showCorsErrorsSetting, i18nString(UIStrings.showCorsErrorsInConsole));\n\n    const settingsToolbarRight = new UI.Toolbar.Toolbar('', settingsPane.element);\n    settingsToolbarRight.makeVertical();\n\n    ConsoleView.appendSettingsCheckboxToToolbar(\n        settingsToolbarRight, monitoringXHREnabledSetting, i18nString(UIStrings.logXMLHttpRequests));\n    ConsoleView.appendSettingsCheckboxToToolbar(\n        settingsToolbarRight, 'consoleEagerEval', i18nString(UIStrings.eagerlyEvaluateTextInThePrompt));\n    ConsoleView.appendSettingsCheckboxToToolbar(\n        settingsToolbarRight, this.consoleHistoryAutocompleteSetting, i18nString(UIStrings.autocompleteFromHistory));\n    ConsoleView.appendSettingsCheckboxToToolbar(\n        settingsToolbarRight, 'consoleUserActivationEval', i18nString(UIStrings.treatEvaluationAsUserActivation));\n\n    if (!this.showSettingsPaneSetting.get()) {\n      settingsPane.element.classList.add('hidden');\n    }\n    this.showSettingsPaneSetting.addChangeListener(\n        () => settingsPane.element.classList.toggle('hidden', !this.showSettingsPaneSetting.get()));\n\n    this.pinPane = new ConsolePinPane(liveExpressionButton, () => this.prompt.focus());\n    this.pinPane.element.classList.add('console-view-pinpane');\n    this.pinPane.show(this.contentsElement);\n\n    this.viewport = new ConsoleViewport(this);\n    this.viewport.setStickToBottom(true);\n    this.viewport.contentElement().classList.add('console-group', 'console-group-messages');\n    this.contentsElement.appendChild(this.viewport.element);\n    this.messagesElement = this.viewport.element;\n    this.messagesElement.id = 'console-messages';\n    this.messagesElement.classList.add('monospace');\n    this.messagesElement.addEventListener('click', this.messagesClicked.bind(this), false);\n    this.messagesElement.addEventListener('paste', this.messagesPasted.bind(this), true);\n    this.messagesElement.addEventListener('clipboard-paste', this.messagesPasted.bind(this), true);\n\n    this.messagesCountElement = this.consoleToolbarContainer.createChild('div', 'message-count');\n    UI.ARIAUtils.markAsPoliteLiveRegion(this.messagesCountElement, false);\n\n    this.viewportThrottler = new Common.Throttler.Throttler(50);\n    this.pendingBatchResize = false;\n    this.onMessageResizedBound = (e: Common.EventTarget.EventTargetEvent<UI.TreeOutline.TreeElement>): void => {\n      void this.onMessageResized(e);\n    };\n\n    this.promptElement = this.messagesElement.createChild('div', 'source-code');\n    this.promptElement.id = 'console-prompt';\n\n    // FIXME: This is a workaround for the selection machinery bug. See crbug.com/410899\n    const selectAllFixer = this.messagesElement.createChild('div', 'console-view-fix-select-all');\n    selectAllFixer.textContent = '.';\n    UI.ARIAUtils.markAsHidden(selectAllFixer);\n\n    this.registerShortcuts();\n\n    this.messagesElement.addEventListener('contextmenu', this.handleContextMenuEvent.bind(this), false);\n\n    // Filters need to be re-applied to a console message when the message's live location changes.\n    // All relevant live locations are created by the same linkifier, so it is enough to subscribe to\n    // the linkifiers live location change event.\n    const throttler = new Common.Throttler.Throttler(100);\n    const refilterMessages = (): Promise<void> => throttler.schedule(async () => this.onFilterChanged());\n    this.linkifier =\n        new Components.Linkifier.Linkifier(MaxLengthForLinks, /* useLinkDecorator */ undefined, refilterMessages);\n\n    this.consoleMessages = [];\n    this.consoleGroupStarts = [];\n\n    this.consoleHistorySetting = Common.Settings.Settings.instance().createLocalSetting('consoleHistory', []);\n\n    this.prompt = new ConsolePrompt();\n    this.prompt.show(this.promptElement);\n    this.prompt.element.addEventListener('keydown', this.promptKeyDown.bind(this), true);\n    this.prompt.addEventListener(ConsolePromptEvents.TextChanged, this.promptTextChanged, this);\n\n    this.messagesElement.addEventListener('keydown', this.messagesKeyDown.bind(this), false);\n    this.prompt.element.addEventListener('focusin', () => {\n      if (this.isScrolledToBottom()) {\n        this.viewport.setStickToBottom(true);\n      }\n    });\n\n    this.consoleHistoryAutocompleteSetting.addChangeListener(this.consoleHistoryAutocompleteChanged, this);\n\n    const historyData = this.consoleHistorySetting.get();\n    this.prompt.history().setHistoryData(historyData);\n    this.consoleHistoryAutocompleteChanged();\n\n    this.updateFilterStatus();\n    this.timestampsSetting.addChangeListener(this.consoleTimestampsSettingChanged, this);\n\n    this.registerWithMessageSink();\n\n    UI.Context.Context.instance().addFlavorChangeListener(\n        SDK.RuntimeModel.ExecutionContext, this.executionContextChanged, this);\n\n    this.messagesElement.addEventListener(\n        'mousedown', (event: Event) => this.updateStickToBottomOnPointerDown((event as MouseEvent).button === 2),\n        false);\n    this.messagesElement.addEventListener('mouseup', this.updateStickToBottomOnPointerUp.bind(this), false);\n    this.messagesElement.addEventListener('mouseleave', this.updateStickToBottomOnPointerUp.bind(this), false);\n    this.messagesElement.addEventListener('wheel', this.updateStickToBottomOnWheel.bind(this), false);\n    this.messagesElement.addEventListener('touchstart', this.updateStickToBottomOnPointerDown.bind(this, false), false);\n    this.messagesElement.addEventListener('touchend', this.updateStickToBottomOnPointerUp.bind(this), false);\n    this.messagesElement.addEventListener('touchcancel', this.updateStickToBottomOnPointerUp.bind(this), false);\n\n    SDK.ConsoleModel.ConsoleModel.instance().addEventListener(\n        SDK.ConsoleModel.Events.ConsoleCleared, this.consoleCleared, this);\n    SDK.ConsoleModel.ConsoleModel.instance().addEventListener(\n        SDK.ConsoleModel.Events.MessageAdded, this.onConsoleMessageAdded, this);\n    SDK.ConsoleModel.ConsoleModel.instance().addEventListener(\n        SDK.ConsoleModel.Events.MessageUpdated, this.onConsoleMessageUpdated, this);\n    SDK.ConsoleModel.ConsoleModel.instance().addEventListener(\n        SDK.ConsoleModel.Events.CommandEvaluated, this.commandEvaluated, this);\n    SDK.ConsoleModel.ConsoleModel.instance().messages().forEach(this.addConsoleMessage, this);\n\n    const issuesManager = IssuesManager.IssuesManager.IssuesManager.instance();\n    this.issueToolbarThrottle = new Common.Throttler.Throttler(100);\n    issuesManager.addEventListener(\n        IssuesManager.IssuesManager.Events.IssuesCountUpdated,\n        () => this.issueToolbarThrottle.schedule(async () => this.updateIssuesToolbarItem()), this);\n  }\n  static appendSettingsCheckboxToToolbar(\n      toolbar: UI.Toolbar.Toolbar, settingOrSetingName: Common.Settings.Setting<boolean>|string, title: string,\n      alternateTitle?: string): UI.Toolbar.ToolbarSettingCheckbox {\n    let setting: Common.Settings.Setting<boolean>;\n    if (typeof settingOrSetingName === 'string') {\n      setting = Common.Settings.Settings.instance().moduleSetting(settingOrSetingName);\n    } else {\n      setting = settingOrSetingName;\n    }\n\n    const checkbox = new UI.Toolbar.ToolbarSettingCheckbox(setting, title, alternateTitle);\n    toolbar.appendToolbarItem(checkbox);\n    return checkbox;\n  }\n\n  static instance(): ConsoleView {\n    if (!consoleViewInstance) {\n      consoleViewInstance = new ConsoleView();\n    }\n    return consoleViewInstance;\n  }\n\n  static clearConsole(): void {\n    SDK.ConsoleModel.ConsoleModel.instance().requestClearMessages();\n  }\n\n  private onFilterChanged(): void {\n    this.filter.currentFilter.levelsMask =\n        this.isSidebarOpen ? ConsoleFilter.allLevelsFilterValue() : this.filter.messageLevelFiltersSetting.get();\n    this.cancelBuildHiddenCache();\n    if (this.immediatelyFilterMessagesForTest) {\n      for (const viewMessage of this.consoleMessages) {\n        this.computeShouldMessageBeVisible(viewMessage);\n      }\n      this.updateMessageList();\n      return;\n    }\n    this.buildHiddenCache(0, this.consoleMessages.slice());\n  }\n\n  private setImmediatelyFilterMessagesForTest(): void {\n    this.immediatelyFilterMessagesForTest = true;\n  }\n\n  searchableView(): UI.SearchableView.SearchableView {\n    return this.searchableViewInternal;\n  }\n\n  clearHistory(): void {\n    this.consoleHistorySetting.set([]);\n    this.prompt.history().setHistoryData([]);\n  }\n\n  private consoleHistoryAutocompleteChanged(): void {\n    this.prompt.setAddCompletionsFromHistory(this.consoleHistoryAutocompleteSetting.get());\n  }\n\n  itemCount(): number {\n    return this.visibleViewMessages.length;\n  }\n\n  itemElement(index: number): ConsoleViewportElement|null {\n    return this.visibleViewMessages[index];\n  }\n\n  fastHeight(index: number): number {\n    return this.visibleViewMessages[index].fastHeight();\n  }\n\n  minimumRowHeight(): number {\n    return 16;\n  }\n\n  private registerWithMessageSink(): void {\n    Common.Console.Console.instance().messages().forEach(this.addSinkMessage, this);\n    Common.Console.Console.instance().addEventListener(Common.Console.Events.MessageAdded, ({data: message}) => {\n      this.addSinkMessage(message);\n    }, this);\n  }\n\n  private addSinkMessage(message: Common.Console.Message): void {\n    let level: Protocol.Log.LogEntryLevel = Protocol.Log.LogEntryLevel.Verbose;\n    switch (message.level) {\n      case Common.Console.MessageLevel.Info:\n        level = Protocol.Log.LogEntryLevel.Info;\n        break;\n      case Common.Console.MessageLevel.Error:\n        level = Protocol.Log.LogEntryLevel.Error;\n        break;\n      case Common.Console.MessageLevel.Warning:\n        level = Protocol.Log.LogEntryLevel.Warning;\n        break;\n    }\n\n    const consoleMessage = new SDK.ConsoleModel.ConsoleMessage(\n        null, Protocol.Log.LogEntrySource.Other, level, message.text,\n        {type: SDK.ConsoleModel.FrontendMessageType.System, timestamp: message.timestamp});\n    this.addConsoleMessage(consoleMessage);\n  }\n\n  private consoleTimestampsSettingChanged(): void {\n    this.updateMessageList();\n    this.consoleMessages.forEach(viewMessage => viewMessage.updateTimestamp());\n    this.groupableMessageTitle.forEach(viewMessage => viewMessage.updateTimestamp());\n  }\n\n  private executionContextChanged(): void {\n    this.prompt.clearAutocomplete();\n  }\n\n  willHide(): void {\n    this.hidePromptSuggestBox();\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    this.updateIssuesToolbarItem();\n    this.viewport.refresh();\n    this.registerCSSFiles([consoleViewStyles, objectValueStyles, CodeHighlighter.Style.default]);\n  }\n\n  focus(): void {\n    if (this.viewport.hasVirtualSelection()) {\n      (this.viewport.contentElement() as HTMLElement).focus();\n    } else {\n      this.focusPrompt();\n    }\n  }\n\n  focusPrompt(): void {\n    if (!this.prompt.hasFocus()) {\n      const oldStickToBottom = this.viewport.stickToBottom();\n      const oldScrollTop = this.viewport.element.scrollTop;\n      this.prompt.focus();\n      this.viewport.setStickToBottom(oldStickToBottom);\n      this.viewport.element.scrollTop = oldScrollTop;\n    }\n  }\n\n  restoreScrollPositions(): void {\n    if (this.viewport.stickToBottom()) {\n      this.immediatelyScrollToBottom();\n    } else {\n      super.restoreScrollPositions();\n    }\n  }\n\n  onResize(): void {\n    this.scheduleViewportRefresh();\n    this.hidePromptSuggestBox();\n    if (this.viewport.stickToBottom()) {\n      this.immediatelyScrollToBottom();\n    }\n    for (let i = 0; i < this.visibleViewMessages.length; ++i) {\n      this.visibleViewMessages[i].onResize();\n    }\n  }\n\n  private hidePromptSuggestBox(): void {\n    this.prompt.clearAutocomplete();\n  }\n\n  private async invalidateViewport(): Promise<void> {\n    this.updateIssuesToolbarItem();\n    if (this.muteViewportUpdates) {\n      this.maybeDirtyWhileMuted = true;\n      return;\n    }\n    if (this.needsFullUpdate) {\n      this.updateMessageList();\n      delete this.needsFullUpdate;\n    } else {\n      this.viewport.invalidate();\n    }\n    return;\n  }\n\n  private updateIssuesToolbarItem(): void {\n    const manager = IssuesManager.IssuesManager.IssuesManager.instance();\n    const issueEnumeration = IssueCounter.IssueCounter.getIssueCountsEnumeration(manager);\n    const issuesTitleGotoIssues = manager.numberOfIssues() === 0 ?\n        i18nString(UIStrings.issueToolbarClickToGoToTheIssuesTab) :\n        i18nString(UIStrings.issueToolbarClickToView, {issueEnumeration});\n    const issuesTitleGeneral = i18nString(UIStrings.issueToolbarTooltipGeneral);\n    const issuesTitle = `${issuesTitleGeneral} ${issuesTitleGotoIssues}`;\n    UI.Tooltip.Tooltip.install(this.issueCounter, issuesTitle);\n    this.issueCounter.data = {\n      ...this.issueCounter.data,\n      leadingText: i18nString(UIStrings.issuesWithColon, {n: manager.numberOfIssues()}),\n      accessibleName: issuesTitle,\n    };\n  }\n\n  private scheduleViewportRefresh(): void {\n    if (this.muteViewportUpdates) {\n      this.maybeDirtyWhileMuted = true;\n      this.scheduleViewportRefreshForTest(true);\n      return;\n    }\n    this.scheduleViewportRefreshForTest(false);\n\n    this.scheduledRefreshPromiseForTest = this.viewportThrottler.schedule(this.invalidateViewport.bind(this));\n  }\n\n  getScheduledRefreshPromiseForTest(): Promise<void>|undefined {\n    return this.scheduledRefreshPromiseForTest;\n  }\n\n  private scheduleViewportRefreshForTest(_muted: boolean): void {\n    // This functions is sniffed in tests.\n  }\n\n  private immediatelyScrollToBottom(): void {\n    // This will scroll viewport and trigger its refresh.\n    this.viewport.setStickToBottom(true);\n    this.promptElement.scrollIntoView(true);\n  }\n\n  private updateFilterStatus(): void {\n    if (this.hiddenByFilterCount === this.lastShownHiddenByFilterCount) {\n      return;\n    }\n    this.filterStatusText.setText(i18nString(UIStrings.sHidden, {n: this.hiddenByFilterCount}));\n    this.filterStatusText.setVisible(Boolean(this.hiddenByFilterCount));\n    this.lastShownHiddenByFilterCount = this.hiddenByFilterCount;\n  }\n\n  private onConsoleMessageAdded(event: Common.EventTarget.EventTargetEvent<SDK.ConsoleModel.ConsoleMessage>): void {\n    const message = event.data;\n    this.addConsoleMessage(message);\n  }\n\n  private addConsoleMessage(message: SDK.ConsoleModel.ConsoleMessage): void {\n    const viewMessage = this.createViewMessage(message);\n    consoleMessageToViewMessage.set(message, viewMessage);\n    if (message.type === SDK.ConsoleModel.FrontendMessageType.Command ||\n        message.type === SDK.ConsoleModel.FrontendMessageType.Result) {\n      const lastMessage = this.consoleMessages[this.consoleMessages.length - 1];\n      const newTimestamp = lastMessage && messagesSortedBySymbol.get(lastMessage) || 0;\n      messagesSortedBySymbol.set(viewMessage, newTimestamp);\n    } else {\n      messagesSortedBySymbol.set(viewMessage, viewMessage.consoleMessage().timestamp);\n    }\n\n    let insertAt;\n    if (!this.consoleMessages.length ||\n        timeComparator(viewMessage, this.consoleMessages[this.consoleMessages.length - 1]) > 0) {\n      insertAt = this.consoleMessages.length;\n    } else {\n      insertAt = Platform.ArrayUtilities.upperBound(this.consoleMessages, viewMessage, timeComparator);\n    }\n    const insertedInMiddle = insertAt < this.consoleMessages.length;\n    this.consoleMessages.splice(insertAt, 0, viewMessage);\n\n    if (message.type !== SDK.ConsoleModel.FrontendMessageType.Command &&\n        message.type !== SDK.ConsoleModel.FrontendMessageType.Result) {\n      // Maintain group tree.\n      // Find parent group.\n      const consoleGroupStartIndex =\n          Platform.ArrayUtilities.upperBound(this.consoleGroupStarts, viewMessage, timeComparator) - 1;\n      if (consoleGroupStartIndex >= 0) {\n        const currentGroup = this.consoleGroupStarts[consoleGroupStartIndex];\n        addToGroup(viewMessage, currentGroup);\n      }\n      // Add new group.\n      if (message.isGroupStartMessage()) {\n        insertAt = Platform.ArrayUtilities.upperBound(this.consoleGroupStarts, viewMessage, timeComparator);\n        this.consoleGroupStarts.splice(insertAt, 0, viewMessage as ConsoleGroupViewMessage);\n      }\n    }\n\n    this.filter.onMessageAdded(message);\n    if (this.isSidebarOpen) {\n      this.sidebar.onMessageAdded(viewMessage);\n    } else {\n      this.pendingSidebarMessages.push(viewMessage);\n    }\n\n    // If we already have similar messages, go slow path.\n    let shouldGoIntoGroup = false;\n    const shouldGroupSimilar = this.groupSimilarSetting.get();\n    if (message.isGroupable()) {\n      const groupKey = viewMessage.groupKey();\n      shouldGoIntoGroup = shouldGroupSimilar && this.groupableMessages.has(groupKey);\n      let list = this.groupableMessages.get(groupKey);\n      if (!list) {\n        list = [];\n        this.groupableMessages.set(groupKey, list);\n      }\n      list.push(viewMessage);\n    }\n\n    this.computeShouldMessageBeVisible(viewMessage);\n    if (!shouldGoIntoGroup && !insertedInMiddle) {\n      this.appendMessageToEnd(\n          viewMessage,\n          !shouldGroupSimilar /* crbug.com/1082963: prevent collapse of same messages when \"Group similar\" is false */);\n      this.updateFilterStatus();\n      this.searchableViewInternal.updateSearchMatchesCount(this.regexMatchRanges.length);\n    } else {\n      this.needsFullUpdate = true;\n    }\n\n    this.scheduleViewportRefresh();\n    this.consoleMessageAddedForTest(viewMessage);\n\n    // Figure out whether the message should belong into this group or the parent group based on group end timestamp.\n    function addToGroup(viewMessage: ConsoleViewMessage, currentGroup: ConsoleGroupViewMessage): void {\n      const currentEnd = currentGroup.groupEnd();\n      if (currentEnd !== null) {\n        // Exceeds this group's end. It should belong into parent group.\n        if (timeComparator(viewMessage, currentEnd) > 0) {\n          const parent = currentGroup.consoleGroup();\n          // No parent group. We reached ungrouped messages. Don't establish group links.\n          if (parent === null) {\n            return;\n          }  // Add to parent group.\n          addToGroup(viewMessage, parent);\n          return;\n        }\n      }\n      // Add message to this group, and set group of the message.\n      if (viewMessage.consoleMessage().type === Protocol.Runtime.ConsoleAPICalledEventType.EndGroup) {\n        currentGroup.setGroupEnd(viewMessage);\n      } else {\n        viewMessage.setConsoleGroup(currentGroup);\n      }\n    }\n\n    function timeComparator(viewMessage1: ConsoleViewMessage, viewMessage2: ConsoleViewMessage): number {\n      return (messagesSortedBySymbol.get(viewMessage1) || 0) - (messagesSortedBySymbol.get(viewMessage2) || 0);\n    }\n  }\n\n  private onConsoleMessageUpdated(event: Common.EventTarget.EventTargetEvent<SDK.ConsoleModel.ConsoleMessage>): void {\n    const message = event.data;\n    const viewMessage = consoleMessageToViewMessage.get(message);\n    if (viewMessage) {\n      viewMessage.updateMessageElement();\n      this.computeShouldMessageBeVisible(viewMessage);\n      this.updateMessageList();\n    }\n  }\n\n  private consoleMessageAddedForTest(_viewMessage: ConsoleViewMessage): void {\n  }\n\n  private shouldMessageBeVisible(viewMessage: ConsoleViewMessage): boolean {\n    return !this.shouldBeHiddenCache.has(viewMessage);\n  }\n\n  private computeShouldMessageBeVisible(viewMessage: ConsoleViewMessage): void {\n    if (this.filter.shouldBeVisible(viewMessage) &&\n        (!this.isSidebarOpen || this.sidebar.shouldBeVisible(viewMessage))) {\n      this.shouldBeHiddenCache.delete(viewMessage);\n    } else {\n      this.shouldBeHiddenCache.add(viewMessage);\n    }\n  }\n\n  private appendMessageToEnd(viewMessage: ConsoleViewMessage, preventCollapse?: boolean): void {\n    if (viewMessage.consoleMessage().category === Protocol.Log.LogEntryCategory.Cors &&\n        !this.showCorsErrorsSetting.get()) {\n      return;\n    }\n\n    const lastMessage = this.visibleViewMessages[this.visibleViewMessages.length - 1];\n    if (viewMessage.consoleMessage().type === Protocol.Runtime.ConsoleAPICalledEventType.EndGroup) {\n      if (lastMessage) {\n        const group = lastMessage.consoleGroup();\n        if (group && !group.messagesHidden()) {\n          lastMessage.incrementCloseGroupDecorationCount();\n        }\n      }\n      return;\n    }\n\n    if (!this.shouldMessageBeVisible(viewMessage)) {\n      this.hiddenByFilterCount++;\n      return;\n    }\n\n    if (!preventCollapse &&\n        this.tryToCollapseMessages(viewMessage, this.visibleViewMessages[this.visibleViewMessages.length - 1])) {\n      return;\n    }\n\n    const currentGroup = viewMessage.consoleGroup();\n\n    if (!currentGroup || !currentGroup.messagesHidden()) {\n      const originatingMessage = viewMessage.consoleMessage().originatingMessage();\n      if (lastMessage && originatingMessage && lastMessage.consoleMessage() === originatingMessage) {\n        viewMessage.toMessageElement().classList.add('console-adjacent-user-command-result');\n      }\n      showGroup(currentGroup, this.visibleViewMessages);\n      this.visibleViewMessages.push(viewMessage);\n      this.searchMessage(this.visibleViewMessages.length - 1);\n    }\n\n    this.messageAppendedForTests();\n\n    // Show the group the message belongs to, and also show parent groups.\n    function showGroup(currentGroup: ConsoleGroupViewMessage|null, visibleViewMessages: ConsoleViewMessage[]): void {\n      if (currentGroup === null) {\n        return;\n      }\n      // Group is already being shown, no need to traverse to\n      // parent groups since they are also already being shown.\n      if (visibleViewMessages.includes(currentGroup)) {\n        return;\n      }\n      const parentGroup = currentGroup.consoleGroup();\n      if (parentGroup) {\n        showGroup(parentGroup, visibleViewMessages);\n      }\n      visibleViewMessages.push(currentGroup);\n    }\n  }\n\n  private messageAppendedForTests(): void {\n    // This method is sniffed in tests.\n  }\n\n  private createViewMessage(message: SDK.ConsoleModel.ConsoleMessage): ConsoleViewMessage {\n    switch (message.type) {\n      case SDK.ConsoleModel.FrontendMessageType.Command:\n        return new ConsoleCommand(\n            message, this.linkifier, this.requestResolver, this.issueResolver, this.onMessageResizedBound);\n      case SDK.ConsoleModel.FrontendMessageType.Result:\n        return new ConsoleCommandResult(\n            message, this.linkifier, this.requestResolver, this.issueResolver, this.onMessageResizedBound);\n      case Protocol.Runtime.ConsoleAPICalledEventType.StartGroupCollapsed:\n      case Protocol.Runtime.ConsoleAPICalledEventType.StartGroup:\n        return new ConsoleGroupViewMessage(\n            message, this.linkifier, this.requestResolver, this.issueResolver, this.updateMessageList.bind(this),\n            this.onMessageResizedBound);\n      case Protocol.Runtime.ConsoleAPICalledEventType.Table:\n        return new ConsoleTableMessageView(\n            message, this.linkifier, this.requestResolver, this.issueResolver, this.onMessageResizedBound);\n      default:\n        return new ConsoleViewMessage(\n            message, this.linkifier, this.requestResolver, this.issueResolver, this.onMessageResizedBound);\n    }\n  }\n\n  private async onMessageResized(event: Common.EventTarget.EventTargetEvent<UI.TreeOutline.TreeElement>):\n      Promise<void> {\n    const treeElement = event.data;\n    if (this.pendingBatchResize || !treeElement.treeOutline) {\n      return;\n    }\n    this.pendingBatchResize = true;\n    await Promise.resolve();\n    const treeOutlineElement = treeElement.treeOutline.element;\n    this.viewport.setStickToBottom(this.isScrolledToBottom());\n    // Scroll, in case mutations moved the element below the visible area.\n    if (treeOutlineElement.offsetHeight <= this.messagesElement.offsetHeight) {\n      treeOutlineElement.scrollIntoViewIfNeeded();\n    }\n\n    this.pendingBatchResize = false;\n  }\n\n  private consoleCleared(): void {\n    const hadFocus = this.viewport.element.hasFocus();\n    this.cancelBuildHiddenCache();\n    this.currentMatchRangeIndex = -1;\n    this.consoleMessages = [];\n    this.groupableMessages.clear();\n    this.groupableMessageTitle.clear();\n    this.sidebar.clear();\n    this.updateMessageList();\n    this.hidePromptSuggestBox();\n    this.viewport.setStickToBottom(true);\n    this.linkifier.reset();\n    this.filter.clear();\n    this.requestResolver.clear();\n    this.consoleGroupStarts = [];\n    if (hadFocus) {\n      this.prompt.focus();\n    }\n    UI.ARIAUtils.alert(i18nString(UIStrings.consoleCleared));\n  }\n\n  private handleContextMenuEvent(event: Event): void {\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    const eventTarget = (event.target as Node);\n    if (eventTarget.isSelfOrDescendant(this.promptElement)) {\n      void contextMenu.show();\n      return;\n    }\n\n    const sourceElement = eventTarget.enclosingNodeOrSelfWithClass('console-message-wrapper');\n    const consoleViewMessage = sourceElement && getMessageForElement(sourceElement);\n    const consoleMessage = consoleViewMessage ? consoleViewMessage.consoleMessage() : null;\n\n    if (consoleMessage && consoleMessage.url) {\n      const menuTitle = i18nString(\n          UIStrings.hideMessagesFromS, {PH1: new Common.ParsedURL.ParsedURL(consoleMessage.url).displayName});\n      contextMenu.headerSection().appendItem(\n          menuTitle, this.filter.addMessageURLFilter.bind(this.filter, consoleMessage.url));\n    }\n\n    contextMenu.defaultSection().appendAction('console.clear');\n    contextMenu.defaultSection().appendAction('console.clear.history');\n    contextMenu.saveSection().appendItem(i18nString(UIStrings.saveAs), this.saveConsole.bind(this));\n    if (this.element.hasSelection()) {\n      contextMenu.clipboardSection().appendItem(\n          i18nString(UIStrings.copyVisibleStyledSelection), this.viewport.copyWithStyles.bind(this.viewport));\n    }\n\n    if (consoleMessage) {\n      const request = Logs.NetworkLog.NetworkLog.requestForConsoleMessage(consoleMessage);\n      if (request && SDK.NetworkManager.NetworkManager.canReplayRequest(request)) {\n        contextMenu.debugSection().appendItem(\n            i18nString(UIStrings.replayXhr), SDK.NetworkManager.NetworkManager.replayRequest.bind(null, request));\n      }\n    }\n\n    void contextMenu.show();\n  }\n\n  private async saveConsole(): Promise<void> {\n    const url = (SDK.TargetManager.TargetManager.instance().mainTarget() as SDK.Target.Target).inspectedURL();\n    const parsedURL = Common.ParsedURL.ParsedURL.fromString(url);\n    const filename =\n        Platform.StringUtilities.sprintf('%s-%d.log', parsedURL ? parsedURL.host : 'console', Date.now()) as\n        Platform.DevToolsPath.RawPathString;\n    const stream = new Bindings.FileUtils.FileOutputStream();\n\n    const progressIndicator = new UI.ProgressIndicator.ProgressIndicator();\n    progressIndicator.setTitle(i18nString(UIStrings.writingFile));\n    progressIndicator.setTotalWork(this.itemCount());\n\n    const chunkSize = 350;\n\n    if (!await stream.open(filename)) {\n      return;\n    }\n    this.progressToolbarItem.element.appendChild(progressIndicator.element);\n\n    let messageIndex = 0;\n    while (messageIndex < this.itemCount() && !progressIndicator.isCanceled()) {\n      const messageContents = [];\n      let i;\n      for (i = 0; i < chunkSize && i + messageIndex < this.itemCount(); ++i) {\n        const message = (this.itemElement(messageIndex + i) as ConsoleViewMessage);\n        messageContents.push(message.toExportString());\n      }\n      messageIndex += i;\n      await stream.write(messageContents.join('\\n') + '\\n');\n      progressIndicator.setWorked(messageIndex);\n    }\n\n    void stream.close();\n    progressIndicator.done();\n  }\n\n  private tryToCollapseMessages(viewMessage: ConsoleViewMessage, lastMessage?: ConsoleViewMessage): boolean {\n    const timestampsShown = this.timestampsSetting.get();\n    if (!timestampsShown && lastMessage && !viewMessage.consoleMessage().isGroupMessage() &&\n        viewMessage.consoleMessage().type !== SDK.ConsoleModel.FrontendMessageType.Command &&\n        viewMessage.consoleMessage().type !== SDK.ConsoleModel.FrontendMessageType.Result &&\n        viewMessage.consoleMessage().isEqual(lastMessage.consoleMessage())) {\n      lastMessage.incrementRepeatCount();\n      if (viewMessage.isLastInSimilarGroup()) {\n        lastMessage.setInSimilarGroup(true, true);\n      }\n      return true;\n    }\n\n    return false;\n  }\n\n  private buildHiddenCache(startIndex: number, viewMessages: ConsoleViewMessage[]): void {\n    const startTime = Date.now();\n    let i;\n    for (i = startIndex; i < viewMessages.length; ++i) {\n      this.computeShouldMessageBeVisible(viewMessages[i]);\n      if (i % 10 === 0 && Date.now() - startTime > 12) {\n        break;\n      }\n    }\n\n    if (i === viewMessages.length) {\n      this.updateMessageList();\n      return;\n    }\n    this.buildHiddenCacheTimeout =\n        this.element.window().requestAnimationFrame(this.buildHiddenCache.bind(this, i + 1, viewMessages));\n  }\n\n  private cancelBuildHiddenCache(): void {\n    this.shouldBeHiddenCache.clear();\n    if (this.buildHiddenCacheTimeout) {\n      this.element.window().cancelAnimationFrame(this.buildHiddenCacheTimeout);\n      delete this.buildHiddenCacheTimeout;\n    }\n  }\n\n  private updateMessageList(): void {\n    this.regexMatchRanges = [];\n    this.hiddenByFilterCount = 0;\n    for (const visibleViewMessage of this.visibleViewMessages) {\n      visibleViewMessage.resetCloseGroupDecorationCount();\n      visibleViewMessage.resetIncrementRepeatCount();\n    }\n    this.visibleViewMessages = [];\n    if (this.groupSimilarSetting.get()) {\n      this.addGroupableMessagesToEnd();\n    } else {\n      for (const consoleMessage of this.consoleMessages) {\n        consoleMessage.setInSimilarGroup(false);\n        if (consoleMessage.consoleMessage().isGroupable()) {\n          // Since grouping similar messages is disabled, we need clear the\n          // reference to the artificial console group start.\n          consoleMessage.clearConsoleGroup();\n        }\n        this.appendMessageToEnd(\n            consoleMessage,\n            true /* crbug.com/1082963: prevent collaps`e of same messages when \"Group similar\" is false */);\n      }\n    }\n    this.updateFilterStatus();\n    this.searchableViewInternal.updateSearchMatchesCount(this.regexMatchRanges.length);\n    this.viewport.invalidate();\n    this.messagesCountElement.setAttribute(\n        'aria-label', i18nString(UIStrings.filteredMessagesInConsole, {PH1: this.visibleViewMessages.length}));\n  }\n\n  private addGroupableMessagesToEnd(): void {\n    const alreadyAdded = new Set<SDK.ConsoleModel.ConsoleMessage>();\n    const processedGroupKeys = new Set<string>();\n    for (const viewMessage of this.consoleMessages) {\n      const message = viewMessage.consoleMessage();\n      if (alreadyAdded.has(message)) {\n        continue;\n      }\n\n      if (!message.isGroupable()) {\n        this.appendMessageToEnd(viewMessage);\n        alreadyAdded.add(message);\n        continue;\n      }\n\n      const key = viewMessage.groupKey();\n      const viewMessagesInGroup = this.groupableMessages.get(key);\n      if (!viewMessagesInGroup || viewMessagesInGroup.length < 5) {\n        viewMessage.setInSimilarGroup(false);\n        this.appendMessageToEnd(viewMessage);\n        alreadyAdded.add(message);\n        continue;\n      }\n\n      if (processedGroupKeys.has(key)) {\n        continue;\n      }\n\n      if (!viewMessagesInGroup.find(x => this.shouldMessageBeVisible(x))) {\n        // Optimize for speed.\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n        // @ts-expect-error\n        Platform.SetUtilities.addAll(alreadyAdded, viewMessagesInGroup);\n        processedGroupKeys.add(key);\n        continue;\n      }\n\n      // Create artificial group start and end messages.\n      let startGroupViewMessage = this.groupableMessageTitle.get(key);\n      if (!startGroupViewMessage) {\n        const startGroupMessage = new SDK.ConsoleModel.ConsoleMessage(\n            null, message.source, message.level, viewMessage.groupTitle(),\n            {type: Protocol.Runtime.ConsoleAPICalledEventType.StartGroupCollapsed});\n        startGroupViewMessage = this.createViewMessage(startGroupMessage);\n        this.groupableMessageTitle.set(key, startGroupViewMessage);\n      }\n      startGroupViewMessage.setRepeatCount(viewMessagesInGroup.length);\n      this.appendMessageToEnd(startGroupViewMessage);\n\n      for (const viewMessageInGroup of viewMessagesInGroup) {\n        viewMessageInGroup.setInSimilarGroup(\n            true, viewMessagesInGroup[viewMessagesInGroup.length - 1] === viewMessageInGroup);\n        viewMessageInGroup.setConsoleGroup(startGroupViewMessage as ConsoleGroupViewMessage);\n        this.appendMessageToEnd(viewMessageInGroup, true);\n        alreadyAdded.add(viewMessageInGroup.consoleMessage());\n      }\n\n      const endGroupMessage = new SDK.ConsoleModel.ConsoleMessage(\n          null, message.source, message.level, message.messageText,\n          {type: Protocol.Runtime.ConsoleAPICalledEventType.EndGroup});\n      this.appendMessageToEnd(this.createViewMessage(endGroupMessage));\n    }\n  }\n\n  private messagesClicked(event: Event): void {\n    const target = (event.target as Node | null);\n    // Do not focus prompt if messages have selection.\n    if (!this.messagesElement.hasSelection()) {\n      const clickedOutsideMessageList =\n          target === this.messagesElement || this.prompt.belowEditorElement().isSelfOrAncestor(target);\n      if (clickedOutsideMessageList) {\n        this.prompt.moveCaretToEndOfPrompt();\n        this.focusPrompt();\n      }\n    }\n  }\n\n  private messagesKeyDown(event: Event): void {\n    const keyEvent = (event as KeyboardEvent);\n    const hasActionModifier = keyEvent.ctrlKey || keyEvent.altKey || keyEvent.metaKey;\n    if (hasActionModifier || keyEvent.key.length !== 1 || UI.UIUtils.isEditing() ||\n        this.messagesElement.hasSelection()) {\n      return;\n    }\n    this.prompt.moveCaretToEndOfPrompt();\n    this.focusPrompt();\n  }\n\n  private messagesPasted(_event: Event): void {\n    if (UI.UIUtils.isEditing()) {\n      return;\n    }\n    this.prompt.focus();\n  }\n\n  private registerShortcuts(): void {\n    this.shortcuts.set(\n        UI.KeyboardShortcut.KeyboardShortcut.makeKey('u', UI.KeyboardShortcut.Modifiers.Ctrl),\n        this.clearPromptBackwards.bind(this));\n  }\n\n  private clearPromptBackwards(): void {\n    this.prompt.clear();\n  }\n\n  private promptKeyDown(event: Event): void {\n    const keyboardEvent = (event as KeyboardEvent);\n    if (keyboardEvent.key === 'PageUp') {\n      this.updateStickToBottomOnWheel();\n      return;\n    }\n\n    const shortcut = UI.KeyboardShortcut.KeyboardShortcut.makeKeyFromEvent(keyboardEvent);\n    const handler = this.shortcuts.get(shortcut);\n    if (handler) {\n      handler();\n      keyboardEvent.preventDefault();\n    }\n  }\n\n  private printResult(\n      result: SDK.RemoteObject.RemoteObject|null, originatingConsoleMessage: SDK.ConsoleModel.ConsoleMessage,\n      exceptionDetails?: Protocol.Runtime.ExceptionDetails): void {\n    if (!result) {\n      return;\n    }\n\n    const level = Boolean(exceptionDetails) ? Protocol.Log.LogEntryLevel.Error : Protocol.Log.LogEntryLevel.Info;\n    let message;\n    if (!exceptionDetails) {\n      message = new SDK.ConsoleModel.ConsoleMessage(\n          result.runtimeModel(), Protocol.Log.LogEntrySource.Javascript, level, '',\n          {type: SDK.ConsoleModel.FrontendMessageType.Result, parameters: [result]});\n    } else {\n      message = SDK.ConsoleModel.ConsoleMessage.fromException(\n          result.runtimeModel(), exceptionDetails, SDK.ConsoleModel.FrontendMessageType.Result, undefined, undefined);\n    }\n    message.setOriginatingMessage(originatingConsoleMessage);\n    SDK.ConsoleModel.ConsoleModel.instance().addMessage(message);\n  }\n\n  private commandEvaluated(event: Common.EventTarget.EventTargetEvent<SDK.ConsoleModel.CommandEvaluatedEvent>): void {\n    const {data} = event;\n    this.prompt.history().pushHistoryItem(data.commandMessage.messageText);\n    this.consoleHistorySetting.set(this.prompt.history().historyData().slice(-persistedHistorySize));\n    this.printResult(data.result, data.commandMessage, data.exceptionDetails);\n  }\n\n  elementsToRestoreScrollPositionsFor(): Element[] {\n    return [this.messagesElement];\n  }\n\n  searchCanceled(): void {\n    this.cleanupAfterSearch();\n    for (const message of this.visibleViewMessages) {\n      message.setSearchRegex(null);\n    }\n    this.currentMatchRangeIndex = -1;\n    this.regexMatchRanges = [];\n    this.searchRegex = null;\n    this.viewport.refresh();\n  }\n\n  performSearch(searchConfig: UI.SearchableView.SearchConfig, shouldJump: boolean, jumpBackwards?: boolean): void {\n    this.searchCanceled();\n    this.searchableViewInternal.updateSearchMatchesCount(0);\n\n    this.searchRegex = searchConfig.toSearchRegex(true).regex;\n\n    this.regexMatchRanges = [];\n    this.currentMatchRangeIndex = -1;\n\n    if (shouldJump) {\n      this.searchShouldJumpBackwards = Boolean(jumpBackwards);\n    }\n\n    this.searchProgressIndicator = new UI.ProgressIndicator.ProgressIndicator();\n    this.searchProgressIndicator.setTitle(i18nString(UIStrings.searching));\n    this.searchProgressIndicator.setTotalWork(this.visibleViewMessages.length);\n    this.progressToolbarItem.element.appendChild(this.searchProgressIndicator.element);\n\n    this.innerSearch(0);\n  }\n\n  private cleanupAfterSearch(): void {\n    delete this.searchShouldJumpBackwards;\n    if (this.innerSearchTimeoutId) {\n      clearTimeout(this.innerSearchTimeoutId);\n      delete this.innerSearchTimeoutId;\n    }\n    if (this.searchProgressIndicator) {\n      this.searchProgressIndicator.done();\n      delete this.searchProgressIndicator;\n    }\n  }\n\n  private searchFinishedForTests(): void {\n    // This method is sniffed in tests.\n  }\n\n  private innerSearch(index: number): void {\n    delete this.innerSearchTimeoutId;\n    if (this.searchProgressIndicator && this.searchProgressIndicator.isCanceled()) {\n      this.cleanupAfterSearch();\n      return;\n    }\n\n    const startTime = Date.now();\n    for (; index < this.visibleViewMessages.length && Date.now() - startTime < 100; ++index) {\n      this.searchMessage(index);\n    }\n\n    this.searchableViewInternal.updateSearchMatchesCount(this.regexMatchRanges.length);\n    if (typeof this.searchShouldJumpBackwards !== 'undefined' && this.regexMatchRanges.length) {\n      this.jumpToMatch(this.searchShouldJumpBackwards ? -1 : 0);\n      delete this.searchShouldJumpBackwards;\n    }\n\n    if (index === this.visibleViewMessages.length) {\n      this.cleanupAfterSearch();\n      window.setTimeout(this.searchFinishedForTests.bind(this), 0);\n      return;\n    }\n\n    this.innerSearchTimeoutId = window.setTimeout(this.innerSearch.bind(this, index), 100);\n    if (this.searchProgressIndicator) {\n      this.searchProgressIndicator.setWorked(index);\n    }\n  }\n\n  private searchMessage(index: number): void {\n    const message = this.visibleViewMessages[index];\n    message.setSearchRegex(this.searchRegex);\n    for (let i = 0; i < message.searchCount(); ++i) {\n      this.regexMatchRanges.push({messageIndex: index, matchIndex: i});\n    }\n  }\n\n  jumpToNextSearchResult(): void {\n    this.jumpToMatch(this.currentMatchRangeIndex + 1);\n  }\n\n  jumpToPreviousSearchResult(): void {\n    this.jumpToMatch(this.currentMatchRangeIndex - 1);\n  }\n\n  supportsCaseSensitiveSearch(): boolean {\n    return true;\n  }\n\n  supportsRegexSearch(): boolean {\n    return true;\n  }\n\n  private jumpToMatch(index: number): void {\n    if (!this.regexMatchRanges.length) {\n      return;\n    }\n\n    let matchRange;\n    if (this.currentMatchRangeIndex >= 0) {\n      matchRange = this.regexMatchRanges[this.currentMatchRangeIndex];\n      const message = this.visibleViewMessages[matchRange.messageIndex];\n      message.searchHighlightNode(matchRange.matchIndex)\n          .classList.remove(UI.UIUtils.highlightedCurrentSearchResultClassName);\n    }\n\n    index = Platform.NumberUtilities.mod(index, this.regexMatchRanges.length);\n    this.currentMatchRangeIndex = index;\n    this.searchableViewInternal.updateCurrentMatchIndex(index);\n    matchRange = this.regexMatchRanges[index];\n    const message = this.visibleViewMessages[matchRange.messageIndex];\n    const highlightNode = message.searchHighlightNode(matchRange.matchIndex);\n    highlightNode.classList.add(UI.UIUtils.highlightedCurrentSearchResultClassName);\n    this.viewport.scrollItemIntoView(matchRange.messageIndex);\n    highlightNode.scrollIntoViewIfNeeded();\n  }\n\n  private updateStickToBottomOnPointerDown(isRightClick?: boolean): void {\n    this.muteViewportUpdates = !isRightClick;\n    this.viewport.setStickToBottom(false);\n    if (this.waitForScrollTimeout) {\n      clearTimeout(this.waitForScrollTimeout);\n      delete this.waitForScrollTimeout;\n    }\n  }\n\n  private updateStickToBottomOnPointerUp(): void {\n    if (!this.muteViewportUpdates) {\n      return;\n    }\n\n    // Delay querying isScrolledToBottom to give time for smooth scroll\n    // events to arrive. The value for the longest timeout duration is\n    // retrieved from crbug.com/575409.\n    this.waitForScrollTimeout = window.setTimeout(updateViewportState.bind(this), 200);\n\n    function updateViewportState(this: ConsoleView): void {\n      this.muteViewportUpdates = false;\n      if (this.isShowing()) {\n        this.viewport.setStickToBottom(this.isScrolledToBottom());\n      }\n      if (this.maybeDirtyWhileMuted) {\n        this.scheduleViewportRefresh();\n        delete this.maybeDirtyWhileMuted;\n      }\n      delete this.waitForScrollTimeout;\n      this.updateViewportStickinessForTest();\n    }\n  }\n\n  private updateViewportStickinessForTest(): void {\n    // This method is sniffed in tests.\n  }\n\n  private updateStickToBottomOnWheel(): void {\n    this.updateStickToBottomOnPointerDown();\n    this.updateStickToBottomOnPointerUp();\n  }\n\n  private promptTextChanged(): void {\n    const oldStickToBottom = this.viewport.stickToBottom();\n    const willStickToBottom = this.isScrolledToBottom();\n    this.viewport.setStickToBottom(willStickToBottom);\n    if (willStickToBottom && !oldStickToBottom) {\n      this.scheduleViewportRefresh();\n    }\n    this.promptTextChangedForTest();\n  }\n\n  private promptTextChangedForTest(): void {\n    // This method is sniffed in tests.\n  }\n\n  private isScrolledToBottom(): boolean {\n    const distanceToPromptEditorBottom = this.messagesElement.scrollHeight - this.messagesElement.scrollTop -\n        this.messagesElement.clientHeight - (this.prompt.belowEditorElement() as HTMLElement).offsetHeight;\n    return distanceToPromptEditorBottom <= 2;\n  }\n}\n\n// @ts-ignore exported for Tests.js\nglobalThis.Console = globalThis.Console || {};\n// @ts-ignore exported for Tests.js\nglobalThis.Console.ConsoleView = ConsoleView;\n\nconst persistedHistorySize = 300;\n\nexport class ConsoleViewFilter {\n  private readonly filterChanged: () => void;\n  messageLevelFiltersSetting: Common.Settings.Setting<LevelsMask>;\n  hideNetworkMessagesSetting: Common.Settings.Setting<boolean>;\n  filterByExecutionContextSetting: Common.Settings.Setting<boolean>;\n  private readonly suggestionBuilder: UI.FilterSuggestionBuilder.FilterSuggestionBuilder;\n  readonly textFilterUI: UI.Toolbar.ToolbarInput;\n  private readonly textFilterSetting: Common.Settings.Setting<string>;\n  private readonly filterParser: TextUtils.TextUtils.FilterParser;\n  currentFilter: ConsoleFilter;\n  private levelLabels: Map<Protocol.Log.LogEntryLevel, string>;\n  readonly levelMenuButton: UI.Toolbar.ToolbarButton;\n\n  constructor(filterChangedCallback: () => void) {\n    this.filterChanged = filterChangedCallback;\n\n    this.messageLevelFiltersSetting = ConsoleViewFilter.levelFilterSetting();\n    this.hideNetworkMessagesSetting = Common.Settings.Settings.instance().moduleSetting('hideNetworkMessages');\n    this.filterByExecutionContextSetting =\n        Common.Settings.Settings.instance().moduleSetting('selectedContextFilterEnabled');\n\n    this.messageLevelFiltersSetting.addChangeListener(this.onFilterChanged.bind(this));\n    this.hideNetworkMessagesSetting.addChangeListener(this.onFilterChanged.bind(this));\n    this.filterByExecutionContextSetting.addChangeListener(this.onFilterChanged.bind(this));\n    UI.Context.Context.instance().addFlavorChangeListener(\n        SDK.RuntimeModel.ExecutionContext, this.onFilterChanged, this);\n\n    const filterKeys = Object.values(FilterType);\n    this.suggestionBuilder = new UI.FilterSuggestionBuilder.FilterSuggestionBuilder(filterKeys);\n    this.textFilterUI = new UI.Toolbar.ToolbarInput(\n        i18nString(UIStrings.filter), '', 1, 1, i18nString(UIStrings.egEventdCdnUrlacom),\n        this.suggestionBuilder.completions.bind(this.suggestionBuilder), true);\n    this.textFilterSetting = Common.Settings.Settings.instance().createSetting('console.textFilter', '');\n    if (this.textFilterSetting.get()) {\n      this.textFilterUI.setValue(this.textFilterSetting.get());\n    }\n    this.textFilterUI.addEventListener(UI.Toolbar.ToolbarInput.Event.TextChanged, () => {\n      this.textFilterSetting.set(this.textFilterUI.value());\n      this.onFilterChanged();\n    });\n    this.filterParser = new TextUtils.TextUtils.FilterParser(filterKeys);\n    this.currentFilter = new ConsoleFilter('', [], null, this.messageLevelFiltersSetting.get());\n    this.updateCurrentFilter();\n    this.levelLabels = new Map(([\n      [Protocol.Log.LogEntryLevel.Verbose, i18nString(UIStrings.verbose)],\n      [Protocol.Log.LogEntryLevel.Info, i18nString(UIStrings.info)],\n      [Protocol.Log.LogEntryLevel.Warning, i18nString(UIStrings.warnings)],\n      [Protocol.Log.LogEntryLevel.Error, i18nString(UIStrings.errors)],\n    ]));\n\n    this.levelMenuButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.logLevels));\n    this.levelMenuButton.turnIntoSelect();\n    this.levelMenuButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.showLevelContextMenu.bind(this));\n    UI.ARIAUtils.markAsMenuButton(this.levelMenuButton.element);\n\n    this.updateLevelMenuButtonText();\n    this.messageLevelFiltersSetting.addChangeListener(this.updateLevelMenuButtonText.bind(this));\n  }\n\n  onMessageAdded(message: SDK.ConsoleModel.ConsoleMessage): void {\n    if (message.type === SDK.ConsoleModel.FrontendMessageType.Command ||\n        message.type === SDK.ConsoleModel.FrontendMessageType.Result || message.isGroupMessage()) {\n      return;\n    }\n    if (message.context) {\n      this.suggestionBuilder.addItem(FilterType.Context, message.context);\n    }\n    if (message.source) {\n      this.suggestionBuilder.addItem(FilterType.Source, message.source);\n    }\n    if (message.url) {\n      this.suggestionBuilder.addItem(FilterType.Url, message.url);\n    }\n  }\n\n  setLevelMenuOverridden(overridden: boolean): void {\n    this.levelMenuButton.setEnabled(!overridden);\n    if (overridden) {\n      this.levelMenuButton.setTitle(i18nString(UIStrings.overriddenByFilterSidebar));\n    } else {\n      this.updateLevelMenuButtonText();\n    }\n  }\n\n  static levelFilterSetting(): Common.Settings.Setting<LevelsMask> {\n    return Common.Settings.Settings.instance().createSetting(\n        'messageLevelFilters', ConsoleFilter.defaultLevelsFilterValue());\n  }\n\n  private updateCurrentFilter(): void {\n    const parsedFilters = this.filterParser.parse(this.textFilterUI.value());\n    if (this.hideNetworkMessagesSetting.get()) {\n      parsedFilters.push(\n          {key: FilterType.Source, text: Protocol.Log.LogEntrySource.Network, negative: true, regex: undefined});\n    }\n\n    this.currentFilter.executionContext = this.filterByExecutionContextSetting.get() ?\n        UI.Context.Context.instance().flavor(SDK.RuntimeModel.ExecutionContext) :\n        null;\n    this.currentFilter.parsedFilters = parsedFilters;\n    this.currentFilter.levelsMask = this.messageLevelFiltersSetting.get();\n  }\n\n  private onFilterChanged(): void {\n    this.updateCurrentFilter();\n    this.filterChanged();\n  }\n\n  private updateLevelMenuButtonText(): void {\n    let isAll = true;\n    let isDefault = true;\n    const allValue = ConsoleFilter.allLevelsFilterValue();\n    const defaultValue = ConsoleFilter.defaultLevelsFilterValue();\n\n    let text: Common.UIString.LocalizedString|null = null;\n    const levels = this.messageLevelFiltersSetting.get();\n    const allLevels: Protocol.EnumerableEnum<typeof Protocol.Log.LogEntryLevel> = {\n      Verbose: Protocol.Log.LogEntryLevel.Verbose,\n      Info: Protocol.Log.LogEntryLevel.Info,\n      Warning: Protocol.Log.LogEntryLevel.Warning,\n      Error: Protocol.Log.LogEntryLevel.Error,\n    };\n    for (const name of Object.values(allLevels)) {\n      isAll = isAll && levels[name] === allValue[name];\n      isDefault = isDefault && levels[name] === defaultValue[name];\n      if (levels[name]) {\n        text = text ? i18nString(UIStrings.customLevels) :\n                      i18nString(UIStrings.sOnly, {PH1: String(this.levelLabels.get(name))});\n      }\n    }\n    if (isAll) {\n      text = i18nString(UIStrings.allLevels);\n    } else if (isDefault) {\n      text = i18nString(UIStrings.defaultLevels);\n    } else {\n      text = text || i18nString(UIStrings.hideAll);\n    }\n    this.levelMenuButton.element.classList.toggle('warning', !isAll && !isDefault);\n    this.levelMenuButton.setText(text);\n    this.levelMenuButton.setTitle(i18nString(UIStrings.logLevelS, {PH1: text}));\n  }\n\n  private showLevelContextMenu(event: Common.EventTarget.EventTargetEvent<Event>): void {\n    const mouseEvent = event.data;\n    const setting = this.messageLevelFiltersSetting;\n    const levels = setting.get();\n\n    const contextMenu = new UI.ContextMenu.ContextMenu(mouseEvent, {\n      useSoftMenu: true,\n      x: this.levelMenuButton.element.totalOffsetLeft(),\n      y: this.levelMenuButton.element.totalOffsetTop() + (this.levelMenuButton.element as HTMLElement).offsetHeight,\n    });\n    contextMenu.headerSection().appendItem(\n        i18nString(UIStrings.default), () => setting.set(ConsoleFilter.defaultLevelsFilterValue()));\n    for (const [level, levelText] of this.levelLabels.entries()) {\n      contextMenu.defaultSection().appendCheckboxItem(levelText, toggleShowLevel.bind(null, level), levels[level]);\n    }\n    void contextMenu.show();\n\n    function toggleShowLevel(level: string): void {\n      levels[level] = !levels[level];\n      setting.set(levels);\n    }\n  }\n\n  addMessageURLFilter(url: Platform.DevToolsPath.UrlString): void {\n    if (!url) {\n      return;\n    }\n    const suffix = this.textFilterUI.value() ? ` ${this.textFilterUI.value()}` : '';\n    this.textFilterUI.setValue(`-url:${url}${suffix}`);\n    this.textFilterSetting.set(this.textFilterUI.value());\n    this.onFilterChanged();\n  }\n\n  shouldBeVisible(viewMessage: ConsoleViewMessage): boolean {\n    return this.currentFilter.shouldBeVisible(viewMessage);\n  }\n\n  clear(): void {\n    this.suggestionBuilder.clear();\n  }\n\n  reset(): void {\n    this.messageLevelFiltersSetting.set(ConsoleFilter.defaultLevelsFilterValue());\n    this.filterByExecutionContextSetting.set(false);\n    this.hideNetworkMessagesSetting.set(false);\n    this.textFilterUI.setValue('');\n    this.onFilterChanged();\n  }\n}\n\nlet actionDelegateInstance: ActionDelegate;\n\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  handleAction(_context: UI.Context.Context, actionId: string): boolean {\n    switch (actionId) {\n      case 'console.show':\n        Host.InspectorFrontendHost.InspectorFrontendHostInstance.bringToFront();\n        Common.Console.Console.instance().show();\n        ConsoleView.instance().focusPrompt();\n        return true;\n      case 'console.clear':\n        ConsoleView.clearConsole();\n        return true;\n      case 'console.clear.history':\n        ConsoleView.instance().clearHistory();\n        return true;\n      case 'console.create-pin':\n        ConsoleView.instance().pinPane.addPin('', true /* userGesture */);\n        return true;\n    }\n    return false;\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ActionDelegate {\n    const {forceNew} = opts;\n    if (!actionDelegateInstance || forceNew) {\n      actionDelegateInstance = new ActionDelegate();\n    }\n\n    return actionDelegateInstance;\n  }\n}\n\nconst messagesSortedBySymbol = new WeakMap<ConsoleViewMessage, number>();\nconst consoleMessageToViewMessage = new WeakMap<SDK.ConsoleModel.ConsoleMessage, ConsoleViewMessage>();\nexport interface RegexMatchRange {\n  messageIndex: number;\n  matchIndex: number;\n}\n"],
  "mappings": "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",
  "names": []
}
