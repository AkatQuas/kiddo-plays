{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/console/ConsoleFilter.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\n\nimport type {ConsoleGroupViewMessage, ConsoleViewMessage} from './ConsoleViewMessage.js';\n\nexport type LevelsMask = {\n  [x: string]: boolean,\n};\n\nexport class ConsoleFilter {\n  name: string;\n  parsedFilters: TextUtils.TextUtils.ParsedFilter[];\n  executionContext: SDK.RuntimeModel.ExecutionContext|null;\n  levelsMask: LevelsMask;\n\n  constructor(\n      name: string, parsedFilters: TextUtils.TextUtils.ParsedFilter[],\n      executionContext: SDK.RuntimeModel.ExecutionContext|null, levelsMask?: LevelsMask) {\n    this.name = name;\n    this.parsedFilters = parsedFilters;\n    this.executionContext = executionContext;\n    this.levelsMask = levelsMask || ConsoleFilter.defaultLevelsFilterValue();\n  }\n\n  static allLevelsFilterValue(): LevelsMask {\n    const result: LevelsMask = {};\n    const logLevels: Protocol.EnumerableEnum<typeof Protocol.Log.LogEntryLevel> = {\n      Verbose: Protocol.Log.LogEntryLevel.Verbose,\n      Info: Protocol.Log.LogEntryLevel.Info,\n      Warning: Protocol.Log.LogEntryLevel.Warning,\n      Error: Protocol.Log.LogEntryLevel.Error,\n    };\n    for (const name of Object.values(logLevels)) {\n      result[name] = true;\n    }\n    return result;\n  }\n\n  static defaultLevelsFilterValue(): LevelsMask {\n    const result = ConsoleFilter.allLevelsFilterValue();\n    result[Protocol.Log.LogEntryLevel.Verbose] = false;\n    return result;\n  }\n\n  static singleLevelMask(level: string): LevelsMask {\n    const result: LevelsMask = {};\n    result[level] = true;\n    return result;\n  }\n\n  clone(): ConsoleFilter {\n    const parsedFilters = this.parsedFilters.map(TextUtils.TextUtils.FilterParser.cloneFilter);\n    const levelsMask = Object.assign({}, this.levelsMask);\n    return new ConsoleFilter(this.name, parsedFilters, this.executionContext, levelsMask);\n  }\n\n  shouldBeVisible(viewMessage: ConsoleViewMessage): boolean {\n    const message = viewMessage.consoleMessage();\n    if (this.executionContext &&\n        (this.executionContext.runtimeModel !== message.runtimeModel() ||\n         this.executionContext.id !== message.getExecutionContextId())) {\n      return false;\n    }\n\n    if (message.type === SDK.ConsoleModel.FrontendMessageType.Command ||\n        message.type === SDK.ConsoleModel.FrontendMessageType.Result ||\n        message.type === Protocol.Runtime.ConsoleAPICalledEventType.EndGroup) {\n      return true;\n    }\n\n    if (message.level && !this.levelsMask[message.level as string]) {\n      return false;\n    }\n\n    return this.applyFilter(viewMessage) || this.parentGroupHasMatch(viewMessage.consoleGroup());\n  }\n\n  // A message is visible if there is a match in any of the parent groups' titles.\n  parentGroupHasMatch(viewMessage: ConsoleGroupViewMessage|null): boolean {\n    if (viewMessage === null) {\n      return false;\n    }\n    return this.applyFilter(viewMessage) || this.parentGroupHasMatch(viewMessage.consoleGroup());\n  }\n\n  applyFilter(viewMessage: ConsoleViewMessage): boolean {\n    const message = viewMessage.consoleMessage();\n    for (const filter of this.parsedFilters) {\n      if (!filter.key) {\n        if (filter.regex && viewMessage.matchesFilterRegex(filter.regex) === filter.negative) {\n          return false;\n        }\n        if (filter.text && viewMessage.matchesFilterText(filter.text) === filter.negative) {\n          return false;\n        }\n      } else {\n        switch (filter.key) {\n          case FilterType.Context: {\n            if (!passesFilter(filter, message.context, false /* exactMatch */)) {\n              return false;\n            }\n            break;\n          }\n          case FilterType.Source: {\n            const sourceNameForMessage = message.source ?\n                SDK.ConsoleModel.MessageSourceDisplayName.get((message.source as SDK.ConsoleModel.MessageSource)) :\n                message.source;\n            if (!passesFilter(filter, sourceNameForMessage, true /* exactMatch */)) {\n              return false;\n            }\n            break;\n          }\n          case FilterType.Url: {\n            if (!passesFilter(filter, message.url, false /* exactMatch */)) {\n              return false;\n            }\n            break;\n          }\n        }\n      }\n    }\n    return true;\n\n    function passesFilter(\n        filter: TextUtils.TextUtils.ParsedFilter, value: string|null|undefined, exactMatch: boolean): boolean {\n      if (!filter.text) {\n        return Boolean(value) === filter.negative;\n      }\n      if (!value) {\n        return !filter.text === !filter.negative;\n      }\n      const filterText = (filter.text as string).toLowerCase();\n      const lowerCaseValue = value.toLowerCase();\n      if (exactMatch && (lowerCaseValue === filterText) === filter.negative) {\n        return false;\n      }\n      if (!exactMatch && lowerCaseValue.includes(filterText) === filter.negative) {\n        return false;\n      }\n      return true;\n    }\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum FilterType {\n  Context = 'context',\n  Source = 'source',\n  Url = 'url',\n}\n"],
  "mappings": "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",
  "names": []
}
