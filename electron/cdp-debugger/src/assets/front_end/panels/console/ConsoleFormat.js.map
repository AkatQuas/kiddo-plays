{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/console/ConsoleFormat.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as SDK from '../../core/sdk/sdk.js';\n\n// VGA color palette\nconst ANSI_COLORS = ['black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'gray'];\nconst ANSI_BRIGHT_COLORS =\n    ['darkgray', 'lightred', 'lightgreen', 'lightyellow', 'lightblue', 'lightmagenta', 'lightcyan', 'white'];\n\nexport type FormatToken = {\n  type: 'generic'|'optimal',\n  value: SDK.RemoteObject.RemoteObject,\n}|{\n  type: 'string' | 'style',\n  value: string,\n};\n\n/**\n * This is the front-end part of the Formatter function specified in the\n * Console Standard (https://console.spec.whatwg.org/#formatter). Here we\n * assume that all type conversions have already happened in V8 before and\n * are only concerned with performing the actual substitutions and dealing\n * with generic and optimal object formatting as well as styling.\n *\n * @param fmt the format string.\n * @param args the substitution arguments for `fmt`.\n * @returns a list of `FormatToken`s as well as the unused arguments.\n */\nexport const format = (fmt: string, args: SDK.RemoteObject.RemoteObject[]): {\n  tokens: FormatToken[],\n  args: SDK.RemoteObject.RemoteObject[],\n} => {\n  const tokens: FormatToken[] = [];\n\n  // Current maintained style for ANSI color codes.\n  const currentStyle = new Map<string, string>();\n  function addTextDecoration(value: string): void {\n    const textDecoration = currentStyle.get('text-decoration') ?? '';\n    if (!textDecoration.includes(value)) {\n      currentStyle.set('text-decoration', `${textDecoration} ${value}`);\n    }\n  }\n  function removeTextDecoration(value: string): void {\n    const textDecoration = currentStyle.get('text-decoration')?.replace(` ${value}`, '');\n    if (textDecoration) {\n      currentStyle.set('text-decoration', textDecoration);\n    } else {\n      currentStyle.delete('text-decoration');\n    }\n  }\n\n  function addStringToken(value: string): void {\n    if (!value) {\n      return;\n    }\n    if (tokens.length && tokens[tokens.length - 1].type === 'string') {\n      tokens[tokens.length - 1].value += value;\n      return;\n    }\n    tokens.push({type: 'string', value});\n  }\n\n  let argIndex = 0;\n  const re = /%([%_Oocsdfi])|\\x1B\\[([\\d;]*)m/;\n  for (let match = re.exec(fmt); match !== null; match = re.exec(fmt)) {\n    addStringToken(match.input.substring(0, match.index));\n    let substitution: number|string|undefined = undefined;\n    const specifier = match[1];\n    switch (specifier) {\n      case '%':\n        addStringToken('%');\n        substitution = '';\n        break;\n      case 's':\n        if (argIndex < args.length) {\n          const {description} = args[argIndex++];\n          substitution = description ?? '';\n        }\n        break;\n      case 'c':\n        if (argIndex < args.length) {\n          const type = 'style';\n          const value = args[argIndex++].description ?? '';\n          tokens.push({type, value});\n          substitution = '';\n        }\n        break;\n      case 'o':\n      case 'O':\n        if (argIndex < args.length) {\n          const type = specifier === 'O' ? 'generic' : 'optimal';\n          const value = args[argIndex++];\n          tokens.push({type, value});\n          substitution = '';\n        }\n        break;\n      case '_':\n        if (argIndex < args.length) {\n          argIndex++;\n          substitution = '';\n        }\n        break;\n      case 'd':\n      case 'f':\n      case 'i':\n        if (argIndex < args.length) {\n          const {value} = args[argIndex++];\n          substitution = typeof value !== 'number' ? NaN : value;\n          if (specifier !== 'f') {\n            substitution = Math.floor(substitution);\n          }\n        }\n        break;\n      case undefined: {\n        const codes = (match[2] || '0').split(';').map(code => code ? parseInt(code, 10) : 0);\n        while (codes.length) {\n          const code = codes.shift() as number;\n          switch (code) {\n            case 0:\n              currentStyle.clear();\n              break;\n            case 1:\n              currentStyle.set('font-weight', 'bold');\n              break;\n            case 2:\n              currentStyle.set('font-weight', 'lighter');\n              break;\n            case 3:\n              currentStyle.set('font-style', 'italic');\n              break;\n            case 4:\n              addTextDecoration('underline');\n              break;\n            case 9:\n              addTextDecoration('line-through');\n              break;\n            case 22:\n              currentStyle.delete('font-weight');\n              break;\n            case 23:\n              currentStyle.delete('font-style');\n              break;\n            case 24:\n              removeTextDecoration('underline');\n              break;\n            case 29:\n              removeTextDecoration('line-through');\n              break;\n            case 38:\n            case 48:\n              if (codes.shift() === 2) {\n                const r = codes.shift() ?? 0, g = codes.shift() ?? 0, b = codes.shift() ?? 0;\n                currentStyle.set(code === 38 ? 'color' : 'background', `rgb(${r},${g},${b})`);\n              }\n              break;\n            case 39:\n            case 49:\n              currentStyle.delete(code === 39 ? 'color' : 'background');\n              break;\n            case 53:\n              addTextDecoration('overline');\n              break;\n            case 55:\n              removeTextDecoration('overline');\n              break;\n            default: {\n              const color = ANSI_COLORS[code - 30] ?? ANSI_BRIGHT_COLORS[code - 90];\n              if (color !== undefined) {\n                currentStyle.set('color', `var(--console-color-${color})`);\n              } else {\n                const background = ANSI_COLORS[code - 40] ?? ANSI_BRIGHT_COLORS[code - 100];\n                if (background !== undefined) {\n                  currentStyle.set('background-color', `var(--console-color-${background})`);\n                }\n              }\n              break;\n            }\n          }\n        }\n        const value = [...currentStyle.entries()].map(([key, val]) => `${key}:${val.trimStart()}`).join(';');\n        const type = 'style';\n        tokens.push({type, value});\n        substitution = '';\n        break;\n      }\n    }\n    if (substitution === undefined) {\n      // If there's no substitution, emit the original specifier / sequence verbatim.\n      addStringToken(match[0]);\n      substitution = '';\n    }\n    fmt = substitution + match.input.substring(match.index + match[0].length);\n  }\n  addStringToken(fmt);\n  return {tokens, args: args.slice(argIndex)};\n};\n\nexport const updateStyle = (currentStyle: Map<string, {value: string, priority: string}>, styleToAdd: string): void => {\n  const ALLOWED_PROPERTY_PREFIXES = ['background', 'border', 'color', 'font', 'line', 'margin', 'padding', 'text'];\n  const BLOCKED_URL_SCHEMES = ['chrome', 'resource', 'about', 'app', 'http', 'https', 'ftp', 'file'];\n\n  currentStyle.clear();\n  const buffer = document.createElement('span');\n  buffer.setAttribute('style', styleToAdd);\n  for (const property of buffer.style) {\n    if (!ALLOWED_PROPERTY_PREFIXES.some(\n            prefix => property.startsWith(prefix) || property.startsWith(`-webkit-${prefix}`))) {\n      continue;\n    }\n    const value = buffer.style.getPropertyValue(property);\n    if (BLOCKED_URL_SCHEMES.some(scheme => value.includes(scheme + ':'))) {\n      continue;\n    }\n    currentStyle.set(property, {\n      value,\n      priority: buffer.style.getPropertyPriority(property),\n    });\n  }\n};\n"],
  "mappings": "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",
  "names": []
}
