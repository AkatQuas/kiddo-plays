{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/console/ConsolePinPane.ts"],
  "sourcesContent": ["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as CodeMirror from '../../third_party/codemirror.next/codemirror.next.js';\nimport * as TextEditor from '../../ui/components/text_editor/text_editor.js';\nimport * as ObjectUI from '../../ui/legacy/components/object_ui/object_ui.js';\n// eslint-disable-next-line rulesdir/es_modules_import\nimport objectValueStyles from '../../ui/legacy/components/object_ui/objectValue.css.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport consolePinPaneStyles from './consolePinPane.css.js';\n\nconst UIStrings = {\n  /**\n  *@description A context menu item in the Console Pin Pane of the Console panel\n  */\n  removeExpression: 'Remove expression',\n  /**\n  *@description A context menu item in the Console Pin Pane of the Console panel\n  */\n  removeAllExpressions: 'Remove all expressions',\n  /**\n  *@description Screen reader label for delete button on a non-blank live expression\n  *@example {document} PH1\n  */\n  removeExpressionS: 'Remove expression: {PH1}',\n  /**\n  *@description Screen reader label for delete button on a blank live expression\n  */\n  removeBlankExpression: 'Remove blank expression',\n  /**\n  *@description Text in Console Pin Pane of the Console panel\n  */\n  liveExpressionEditor: 'Live expression editor',\n  /**\n  *@description Text in Console Pin Pane of the Console panel\n  */\n  expression: 'Expression',\n  /**\n  *@description Side effect label title in Console Pin Pane of the Console panel\n  */\n  evaluateAllowingSideEffects: 'Evaluate, allowing side effects',\n  /**\n  *@description Text of a DOM element in Console Pin Pane of the Console panel\n  */\n  notAvailable: 'not available',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/console/ConsolePinPane.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst elementToConsolePin = new WeakMap<Element, ConsolePin>();\n\nexport class ConsolePinPane extends UI.ThrottledWidget.ThrottledWidget {\n  private pins: Set<ConsolePin>;\n  private readonly pinsSetting: Common.Settings.Setting<string[]>;\n  constructor(private readonly liveExpressionButton: UI.Toolbar.ToolbarButton, private readonly focusOut: () => void) {\n    super(true, 250);\n    this.contentElement.classList.add('console-pins', 'monospace');\n    this.contentElement.addEventListener('contextmenu', this.contextMenuEventFired.bind(this), false);\n\n    this.pins = new Set();\n    this.pinsSetting = Common.Settings.Settings.instance().createLocalSetting('consolePins', []);\n    for (const expression of this.pinsSetting.get()) {\n      this.addPin(expression);\n    }\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([consolePinPaneStyles, objectValueStyles]);\n  }\n\n  willHide(): void {\n    for (const pin of this.pins) {\n      pin.setHovered(false);\n    }\n  }\n\n  savePins(): void {\n    const toSave = Array.from(this.pins).map(pin => pin.expression());\n    this.pinsSetting.set(toSave);\n  }\n\n  private contextMenuEventFired(event: Event): void {\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    const target = UI.UIUtils.deepElementFromEvent(event);\n    if (target) {\n      const targetPinElement = target.enclosingNodeOrSelfWithClass('console-pin');\n      if (targetPinElement) {\n        const targetPin = elementToConsolePin.get(targetPinElement);\n        if (targetPin) {\n          contextMenu.editSection().appendItem(\n              i18nString(UIStrings.removeExpression), this.removePin.bind(this, targetPin));\n          targetPin.appendToContextMenu(contextMenu);\n        }\n      }\n    }\n    contextMenu.editSection().appendItem(i18nString(UIStrings.removeAllExpressions), this.removeAllPins.bind(this));\n    void contextMenu.show();\n  }\n\n  private removeAllPins(): void {\n    for (const pin of this.pins) {\n      this.removePin(pin);\n    }\n  }\n\n  removePin(pin: ConsolePin): void {\n    pin.element().remove();\n    const newFocusedPin = this.focusedPinAfterDeletion(pin);\n    this.pins.delete(pin);\n    this.savePins();\n    if (newFocusedPin) {\n      void newFocusedPin.focus();\n    } else {\n      this.liveExpressionButton.focus();\n    }\n  }\n\n  addPin(expression: string, userGesture?: boolean): void {\n    const pin = new ConsolePin(expression, this, this.focusOut);\n    this.contentElement.appendChild(pin.element());\n    this.pins.add(pin);\n    this.savePins();\n    if (userGesture) {\n      void pin.focus();\n    }\n    this.update();\n  }\n\n  private focusedPinAfterDeletion(deletedPin: ConsolePin): ConsolePin|null {\n    const pinArray = Array.from(this.pins);\n    for (let i = 0; i < pinArray.length; i++) {\n      if (pinArray[i] === deletedPin) {\n        if (pinArray.length === 1) {\n          return null;\n        }\n        if (i === pinArray.length - 1) {\n          return pinArray[i - 1];\n        }\n        return pinArray[i + 1];\n      }\n    }\n    return null;\n  }\n\n  async doUpdate(): Promise<void> {\n    if (!this.pins.size || !this.isShowing()) {\n      return;\n    }\n    if (this.isShowing()) {\n      this.update();\n    }\n    const updatePromises = Array.from(this.pins, pin => pin.updatePreview());\n    await Promise.all(updatePromises);\n    this.updatedForTest();\n  }\n\n  private updatedForTest(): void {\n  }\n}\n\nexport class ConsolePin {\n  private readonly pinElement: Element;\n  private readonly pinPreview: HTMLElement;\n  private lastResult: SDK.RuntimeModel.EvaluationResult|null;\n  private lastExecutionContext: SDK.RuntimeModel.ExecutionContext|null;\n  private editor: TextEditor.TextEditor.TextEditor;\n  private committedExpression: string;\n  private hovered: boolean;\n  private lastNode: SDK.RemoteObject.RemoteObject|null;\n  private deletePinIcon: UI.UIUtils.DevToolsCloseButton;\n\n  constructor(expression: string, private readonly pinPane: ConsolePinPane, private readonly focusOut: () => void) {\n    this.deletePinIcon = document.createElement('div', {is: 'dt-close-button'}) as UI.UIUtils.DevToolsCloseButton;\n    this.deletePinIcon.gray = true;\n    this.deletePinIcon.classList.add('close-button');\n    this.deletePinIcon.setTabbable(true);\n    if (expression.length) {\n      this.deletePinIcon.setAccessibleName(i18nString(UIStrings.removeExpressionS, {PH1: expression}));\n    } else {\n      this.deletePinIcon.setAccessibleName(i18nString(UIStrings.removeBlankExpression));\n    }\n    self.onInvokeElement(this.deletePinIcon, event => {\n      pinPane.removePin(this);\n      event.consume(true);\n    });\n\n    const fragment = UI.Fragment.Fragment.build`\n  <div class='console-pin'>\n  ${this.deletePinIcon}\n  <div class='console-pin-name' $='name'></div>\n  <div class='console-pin-preview' $='preview'></div>\n  </div>`;\n    this.pinElement = fragment.element();\n    this.pinPreview = (fragment.$('preview') as HTMLElement);\n    const nameElement = (fragment.$('name') as HTMLElement);\n    UI.Tooltip.Tooltip.install(nameElement, expression);\n    elementToConsolePin.set(this.pinElement, this);\n\n    this.lastResult = null;\n    this.lastExecutionContext = null;\n    this.committedExpression = expression;\n    this.hovered = false;\n    this.lastNode = null;\n    this.editor = this.createEditor(expression, nameElement);\n\n    this.pinPreview.addEventListener('mouseenter', this.setHovered.bind(this, true), false);\n    this.pinPreview.addEventListener('mouseleave', this.setHovered.bind(this, false), false);\n    this.pinPreview.addEventListener('click', (event: Event) => {\n      if (this.lastNode) {\n        void Common.Revealer.reveal(this.lastNode);\n        event.consume();\n      }\n    }, false);\n\n    // Prevent Esc from toggling the drawer\n    nameElement.addEventListener('keydown', event => {\n      if (event.key === 'Escape') {\n        event.consume();\n      }\n    });\n  }\n\n  createEditor(expression: string, parent: HTMLElement): TextEditor.TextEditor.TextEditor {\n    const editor = new TextEditor.TextEditor.TextEditor(CodeMirror.EditorState.create({\n      doc: expression,\n      extensions: [\n        CodeMirror.EditorView.contentAttributes.of({'aria-label': i18nString(UIStrings.liveExpressionEditor)}),\n        CodeMirror.EditorView.lineWrapping,\n        CodeMirror.javascript.javascriptLanguage,\n        TextEditor.JavaScript.completion(),\n        TextEditor.Config.showCompletionHint,\n        CodeMirror.placeholder(i18nString(UIStrings.expression)),\n        CodeMirror.keymap.of([\n          {\n            key: 'Escape',\n            run: (view: CodeMirror.EditorView): boolean => {\n              view.dispatch({changes: {from: 0, to: view.state.doc.length, insert: this.committedExpression}});\n              this.focusOut();\n              return true;\n            },\n          },\n          {\n            key: 'Enter',\n            run: (): boolean => {\n              this.focusOut();\n              return true;\n            },\n          },\n          {\n            key: 'Mod-Enter',\n            run: (): boolean => {\n              this.focusOut();\n              return true;\n            },\n          },\n        ]),\n        CodeMirror.EditorView.domEventHandlers({blur: (_e, view) => this.onBlur(view)}),\n        TextEditor.Config.baseConfiguration(expression),\n        TextEditor.Config.closeBrackets,\n        TextEditor.Config.autocompletion,\n      ],\n    }));\n    parent.appendChild(editor);\n    return editor;\n  }\n\n  onBlur(editor: CodeMirror.EditorView): void {\n    const text = editor.state.doc.toString();\n    const trimmedText = text.trim();\n    this.committedExpression = trimmedText;\n    this.pinPane.savePins();\n    if (this.committedExpression.length) {\n      this.deletePinIcon.setAccessibleName(i18nString(UIStrings.removeExpressionS, {PH1: this.committedExpression}));\n    } else {\n      this.deletePinIcon.setAccessibleName(i18nString(UIStrings.removeBlankExpression));\n    }\n    editor.dispatch({\n      selection: {anchor: trimmedText.length},\n      changes: trimmedText !== text ? {from: 0, to: text.length, insert: trimmedText} : undefined,\n    });\n  }\n\n  setHovered(hovered: boolean): void {\n    if (this.hovered === hovered) {\n      return;\n    }\n    this.hovered = hovered;\n    if (!hovered && this.lastNode) {\n      SDK.OverlayModel.OverlayModel.hideDOMNodeHighlight();\n    }\n  }\n\n  expression(): string {\n    return this.committedExpression;\n  }\n\n  element(): Element {\n    return this.pinElement;\n  }\n\n  async focus(): Promise<void> {\n    const editor = this.editor;\n    editor.editor.focus();\n    editor.dispatch({selection: {anchor: editor.state.doc.length}});\n  }\n\n  appendToContextMenu(contextMenu: UI.ContextMenu.ContextMenu): void {\n    if (this.lastResult && !('error' in this.lastResult) && this.lastResult.object) {\n      contextMenu.appendApplicableItems(this.lastResult.object);\n      // Prevent result from being released manually. It will release along with 'console' group.\n      this.lastResult = null;\n    }\n  }\n\n  async updatePreview(): Promise<void> {\n    if (!this.editor) {\n      return;\n    }\n    const text = TextEditor.Config.contentIncludingHint(this.editor.editor);\n    const isEditing = this.pinElement.hasFocus();\n    const throwOnSideEffect = isEditing && text !== this.committedExpression;\n    const timeout = throwOnSideEffect ? 250 : undefined;\n    const executionContext = UI.Context.Context.instance().flavor(SDK.RuntimeModel.ExecutionContext);\n    const preprocessedExpression = ObjectUI.JavaScriptREPL.JavaScriptREPL.preprocessExpression(text);\n    const {preview, result} = await ObjectUI.JavaScriptREPL.JavaScriptREPL.evaluateAndBuildPreview(\n        preprocessedExpression, throwOnSideEffect, false /* replMode */, timeout, !isEditing /* allowErrors */,\n        'console', true /* awaitPromise */);\n    if (this.lastResult && this.lastExecutionContext) {\n      this.lastExecutionContext.runtimeModel.releaseEvaluationResult(this.lastResult);\n    }\n    this.lastResult = result || null;\n    this.lastExecutionContext = executionContext || null;\n\n    const previewText = preview.deepTextContent();\n    if (!previewText || previewText !== this.pinPreview.deepTextContent()) {\n      this.pinPreview.removeChildren();\n      if (result && SDK.RuntimeModel.RuntimeModel.isSideEffectFailure(result)) {\n        const sideEffectLabel =\n            (this.pinPreview.createChild('span', 'object-value-calculate-value-button') as HTMLElement);\n        sideEffectLabel.textContent = '(\u2026)';\n        UI.Tooltip.Tooltip.install(sideEffectLabel, i18nString(UIStrings.evaluateAllowingSideEffects));\n      } else if (previewText) {\n        this.pinPreview.appendChild(preview);\n      } else if (!isEditing) {\n        UI.UIUtils.createTextChild(this.pinPreview, i18nString(UIStrings.notAvailable));\n      }\n      UI.Tooltip.Tooltip.install(this.pinPreview, previewText);\n    }\n\n    let node: SDK.RemoteObject.RemoteObject|null = null;\n    if (result && !('error' in result) && result.object.type === 'object' && result.object.subtype === 'node') {\n      node = result.object;\n    }\n    if (this.hovered) {\n      if (node) {\n        SDK.OverlayModel.OverlayModel.highlightObjectAsDOMNode(node);\n      } else if (this.lastNode) {\n        SDK.OverlayModel.OverlayModel.hideDOMNodeHighlight();\n      }\n    }\n    this.lastNode = node || null;\n\n    const isError = result && !('error' in result) && result.exceptionDetails &&\n        !SDK.RuntimeModel.RuntimeModel.isSideEffectFailure(result);\n    this.pinElement.classList.toggle('error-level', Boolean(isError));\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
