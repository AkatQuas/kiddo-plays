{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/console/ConsoleSidebar.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport type * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type {LevelsMask} from './ConsoleFilter.js';\nimport {ConsoleFilter, FilterType} from './ConsoleFilter.js';\nimport type {ConsoleViewMessage} from './ConsoleViewMessage.js';\nimport consoleSidebarStyles from './consoleSidebar.css.js';\n\nconst UIStrings = {\n  /**\n  * @description Filter name in Console Sidebar of the Console panel. This is shown when we fail to\n  * parse a URL when trying to display console messages from each URL separately. This might be\n  * because the console message does not come from any particular URL. This should be translated as\n  * a term that indicates 'not one of the other URLs listed here'.\n  */\n  other: '<other>',\n  /**\n  *@description Text in Console Sidebar of the Console panel to show how many user messages exist.\n  */\n  dUserMessages: '{n, plural, =0 {No user messages} =1 {# user message} other {# user messages}}',\n  /**\n  *@description Text in Console Sidebar of the Console panel to show how many messages exist.\n  */\n  dMessages: '{n, plural, =0 {No messages} =1 {# message} other {# messages}}',\n  /**\n  *@description Text in Console Sidebar of the Console panel to show how many errors exist.\n  */\n  dErrors: '{n, plural, =0 {No errors} =1 {# error} other {# errors}}',\n  /**\n  *@description Text in Console Sidebar of the Console panel to show how many warnings exist.\n  */\n  dWarnings: '{n, plural, =0 {No warnings} =1 {# warning} other {# warnings}}',\n  /**\n  *@description Text in Console Sidebar of the Console panel to show how many info messages exist.\n  */\n  dInfo: '{n, plural, =0 {No info} =1 {# info} other {# info}}',\n  /**\n  *@description Text in Console Sidebar of the Console panel to show how many verbose messages exist.\n  */\n  dVerbose: '{n, plural, =0 {No verbose} =1 {# verbose} other {# verbose}}',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/console/ConsoleSidebar.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class ConsoleSidebar extends Common.ObjectWrapper.eventMixin<EventTypes, typeof UI.Widget.VBox>(UI.Widget.VBox) {\n  private readonly tree: UI.TreeOutline.TreeOutlineInShadow;\n  private selectedTreeElement: UI.TreeOutline.TreeElement|null;\n  private readonly treeElements: FilterTreeElement[];\n\n  constructor() {\n    super(true);\n    this.setMinimumSize(125, 0);\n\n    this.tree = new UI.TreeOutline.TreeOutlineInShadow();\n    this.tree.addEventListener(UI.TreeOutline.Events.ElementSelected, this.selectionChanged.bind(this));\n\n    this.contentElement.appendChild(this.tree.element);\n    this.selectedTreeElement = null;\n    this.treeElements = [];\n    const selectedFilterSetting =\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n        // @ts-expect-error\n        Common.Settings.Settings.instance().createSetting<string>('console.sidebarSelectedFilter', null);\n\n    const consoleAPIParsedFilters = [{\n      key: FilterType.Source,\n      text: SDK.ConsoleModel.FrontendMessageSource.ConsoleAPI,\n      negative: false,\n      regex: undefined,\n    }];\n    this.appendGroup(\n        GroupName.All, [], ConsoleFilter.allLevelsFilterValue(), UI.Icon.Icon.create('mediumicon-list'),\n        selectedFilterSetting);\n    this.appendGroup(\n        GroupName.ConsoleAPI, consoleAPIParsedFilters, ConsoleFilter.allLevelsFilterValue(),\n        UI.Icon.Icon.create('mediumicon-account-circle'), selectedFilterSetting);\n    this.appendGroup(\n        GroupName.Error, [], ConsoleFilter.singleLevelMask(Protocol.Log.LogEntryLevel.Error),\n        UI.Icon.Icon.create('mediumicon-error-circle'), selectedFilterSetting);\n    this.appendGroup(\n        GroupName.Warning, [], ConsoleFilter.singleLevelMask(Protocol.Log.LogEntryLevel.Warning),\n        UI.Icon.Icon.create('mediumicon-warning-triangle'), selectedFilterSetting);\n    this.appendGroup(\n        GroupName.Info, [], ConsoleFilter.singleLevelMask(Protocol.Log.LogEntryLevel.Info),\n        UI.Icon.Icon.create('mediumicon-info-circle'), selectedFilterSetting);\n    this.appendGroup(\n        GroupName.Verbose, [], ConsoleFilter.singleLevelMask(Protocol.Log.LogEntryLevel.Verbose),\n        UI.Icon.Icon.create('mediumicon-bug'), selectedFilterSetting);\n    const selectedTreeElementName = selectedFilterSetting.get();\n    const defaultTreeElement =\n        this.treeElements.find(x => x.name() === selectedTreeElementName) || this.treeElements[0];\n    defaultTreeElement.select();\n  }\n\n  private appendGroup(\n      name: string, parsedFilters: TextUtils.TextUtils.ParsedFilter[], levelsMask: LevelsMask, icon: UI.Icon.Icon,\n      selectedFilterSetting: Common.Settings.Setting<string>): void {\n    const filter = new ConsoleFilter(name, parsedFilters, null, levelsMask);\n    const treeElement = new FilterTreeElement(filter, icon, selectedFilterSetting);\n    this.tree.appendChild(treeElement);\n    this.treeElements.push(treeElement);\n  }\n\n  clear(): void {\n    for (const treeElement of this.treeElements) {\n      treeElement.clear();\n    }\n  }\n\n  onMessageAdded(viewMessage: ConsoleViewMessage): void {\n    for (const treeElement of this.treeElements) {\n      treeElement.onMessageAdded(viewMessage);\n    }\n  }\n\n  shouldBeVisible(viewMessage: ConsoleViewMessage): boolean {\n    if (this.selectedTreeElement instanceof ConsoleSidebarTreeElement) {\n      return this.selectedTreeElement.filter().shouldBeVisible(viewMessage);\n    }\n    return true;\n  }\n\n  private selectionChanged(event: Common.EventTarget.EventTargetEvent<UI.TreeOutline.TreeElement>): void {\n    this.selectedTreeElement = event.data;\n    this.dispatchEventToListeners(Events.FilterSelected);\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    this.tree.registerCSSFiles([consoleSidebarStyles]);\n  }\n}\n\nexport const enum Events {\n  FilterSelected = 'FilterSelected',\n}\n\nexport type EventTypes = {\n  [Events.FilterSelected]: void,\n};\n\nclass ConsoleSidebarTreeElement extends UI.TreeOutline.TreeElement {\n  protected filterInternal: ConsoleFilter;\n\n  constructor(title: string|Node, filter: ConsoleFilter) {\n    super(title);\n    this.filterInternal = filter;\n  }\n\n  filter(): ConsoleFilter {\n    return this.filterInternal;\n  }\n}\n\nexport class URLGroupTreeElement extends ConsoleSidebarTreeElement {\n  private countElement: HTMLElement;\n  private messageCount: number;\n\n  constructor(filter: ConsoleFilter) {\n    super(filter.name, filter);\n    this.countElement = this.listItemElement.createChild('span', 'count');\n    const leadingIcons = [UI.Icon.Icon.create('largeicon-navigator-file')];\n    this.setLeadingIcons(leadingIcons);\n    this.messageCount = 0;\n  }\n\n  incrementAndUpdateCounter(): void {\n    this.messageCount++;\n    this.countElement.textContent = `${this.messageCount}`;\n  }\n}\n\nconst enum GroupName {\n  ConsoleAPI = 'user message',\n  All = 'message',\n  Error = 'error',\n  Warning = 'warning',\n  Info = 'info',\n  Verbose = 'verbose',\n}\n\n/**\n * Maps the GroupName for a filter to the UIString used to render messages.\n * Stored here so we only construct it once at runtime, rather than everytime we\n * construct a filter or get a new message.\n */\nconst stringForFilterSidebarItemMap = new Map<GroupName, string>([\n  [GroupName.ConsoleAPI, UIStrings.dUserMessages],\n  [GroupName.All, UIStrings.dMessages],\n  [GroupName.Error, UIStrings.dErrors],\n  [GroupName.Warning, UIStrings.dWarnings],\n  [GroupName.Info, UIStrings.dInfo],\n  [GroupName.Verbose, UIStrings.dVerbose],\n]);\n\nexport class FilterTreeElement extends ConsoleSidebarTreeElement {\n  private readonly selectedFilterSetting: Common.Settings.Setting<string>;\n  private readonly urlTreeElements: Map<string|null, URLGroupTreeElement>;\n  private messageCount: number;\n  private uiStringForFilterCount: string;\n\n  constructor(filter: ConsoleFilter, icon: UI.Icon.Icon, selectedFilterSetting: Common.Settings.Setting<string>) {\n    super(filter.name, filter);\n    this.uiStringForFilterCount = stringForFilterSidebarItemMap.get(filter.name as GroupName) || '';\n    this.selectedFilterSetting = selectedFilterSetting;\n    this.urlTreeElements = new Map();\n    this.setLeadingIcons([icon]);\n    this.messageCount = 0;\n    this.updateCounter();\n  }\n\n  clear(): void {\n    this.urlTreeElements.clear();\n    this.removeChildren();\n    this.messageCount = 0;\n    this.updateCounter();\n  }\n\n  name(): string {\n    return this.filterInternal.name;\n  }\n\n  onselect(selectedByUser?: boolean): boolean {\n    this.selectedFilterSetting.set(this.filterInternal.name);\n    return super.onselect(selectedByUser);\n  }\n\n  private updateCounter(): void {\n    this.title = this.updateGroupTitle(this.messageCount);\n    this.setExpandable(Boolean(this.childCount()));\n  }\n\n  private updateGroupTitle(messageCount: number): string {\n    if (this.uiStringForFilterCount) {\n      // eslint-disable-next-line rulesdir/l10n_i18nString_call_only_with_uistrings\n      return i18nString(this.uiStringForFilterCount, {n: messageCount});\n    }\n    return '';\n  }\n\n  onMessageAdded(viewMessage: ConsoleViewMessage): void {\n    const message = viewMessage.consoleMessage();\n    const shouldIncrementCounter = message.type !== SDK.ConsoleModel.FrontendMessageType.Command &&\n        message.type !== SDK.ConsoleModel.FrontendMessageType.Result && !message.isGroupMessage();\n    if (!this.filterInternal.shouldBeVisible(viewMessage) || !shouldIncrementCounter) {\n      return;\n    }\n    const child = this.childElement(message.url);\n    child.incrementAndUpdateCounter();\n    this.messageCount++;\n    this.updateCounter();\n  }\n\n  private childElement(url?: Platform.DevToolsPath.UrlString): URLGroupTreeElement {\n    const urlValue = url || null;\n    let child = this.urlTreeElements.get(urlValue);\n    if (child) {\n      return child;\n    }\n\n    const filter = this.filterInternal.clone();\n    const parsedURL = urlValue ? Common.ParsedURL.ParsedURL.fromString(urlValue) : null;\n    if (urlValue) {\n      filter.name = parsedURL ? parsedURL.displayName : urlValue;\n    } else {\n      filter.name = i18nString(UIStrings.other);\n    }\n    filter.parsedFilters.push({key: FilterType.Url, text: urlValue, negative: false, regex: undefined});\n    child = new URLGroupTreeElement(filter);\n    if (urlValue) {\n      child.tooltip = urlValue;\n    }\n    this.urlTreeElements.set(urlValue, child);\n    this.appendChild(child);\n    return child;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
