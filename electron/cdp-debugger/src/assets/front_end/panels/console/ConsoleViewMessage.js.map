{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/console/ConsoleViewMessage.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2011 Google Inc.  All rights reserved.\n * Copyright (C) 2007, 2008 Apple Inc.  All rights reserved.\n * Copyright (C) 2009 Joseph Pecoraro\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport type * as IssuesManager from '../../models/issues_manager/issues_manager.js';\nimport * as Logs from '../../models/logs/logs.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport * as CodeHighlighter from '../../ui/components/code_highlighter/code_highlighter.js';\nimport * as IssueCounter from '../../ui/components/issue_counter/issue_counter.js';\nimport * as RequestLinkIcon from '../../ui/components/request_link_icon/request_link_icon.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as ObjectUI from '../../ui/legacy/components/object_ui/object_ui.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n// eslint-disable-next-line rulesdir/es_modules_import\nimport objectValueStyles from '../../ui/legacy/components/object_ui/objectValue.css.js';\nimport type {Chrome} from '../../../extension-api/ExtensionAPI.js'; // eslint-disable-line rulesdir/es_modules_import\n\nimport {format, updateStyle} from './ConsoleFormat.js';\nimport type {ConsoleViewportElement} from './ConsoleViewport.js';\nimport consoleViewStyles from './consoleView.css.js';\nimport {augmentErrorStackWithScriptIds, parseSourcePositionsFromErrorStack} from './ErrorStackParser.js';\n\nconst UIStrings = {\n  /**\n  * @description Message element text content in Console View Message of the Console panel. Shown\n  * when the user tried to run console.clear() but the 'Preserve log' option is enabled, which stops\n  * the log from being cleared.\n  */\n  consoleclearWasPreventedDueTo: '`console.clear()` was prevented due to \\'Preserve log\\'',\n  /**\n  * @description Text shown in the Console panel after the user has cleared the console, which\n  * removes all messages from the console so that it is empty.\n  */\n  consoleWasCleared: 'Console was cleared',\n  /**\n  *@description Message element title in Console View Message of the Console panel\n  *@example {Ctrl+L} PH1\n  */\n  clearAllMessagesWithS: 'Clear all messages with {PH1}',\n  /**\n  *@description Message prefix in Console View Message of the Console panel\n  */\n  assertionFailed: 'Assertion failed: ',\n  /**\n  *@description Message text in Console View Message of the Console panel\n  *@example {console.log(1)} PH1\n  */\n  violationS: '`[Violation]` {PH1}',\n  /**\n  *@description Message text in Console View Message of the Console panel\n  *@example {console.log(1)} PH1\n  */\n  interventionS: '`[Intervention]` {PH1}',\n  /**\n  *@description Message text in Console View Message of the Console panel\n  *@example {console.log(1)} PH1\n  */\n  deprecationS: '`[Deprecation]` {PH1}',\n  /**\n  *@description Note title in Console View Message of the Console panel\n  */\n  thisValueWillNotBeCollectedUntil: 'This value will not be collected until console is cleared.',\n  /**\n  *@description Note title in Console View Message of the Console panel\n  */\n  thisValueWasEvaluatedUponFirst: 'This value was evaluated upon first expanding. It may have changed since then.',\n  /**\n  *@description Note title in Console View Message of the Console panel\n  */\n  functionWasResolvedFromBound: 'Function was resolved from bound function.',\n  /**\n  * @description Shown in the Console panel when an exception is thrown when trying to access a\n  * property on an object. Should be translated.\n  */\n  exception: '<exception>',\n  /**\n  *@description Text to indicate an item is a warning\n  */\n  warning: 'Warning',\n  /**\n  *@description Text for errors\n  */\n  error: 'Error',\n  /**\n  * @description Announced by the screen reader to indicate how many times a particular message in\n  * the console was repeated.\n  */\n  repeatS: '{n, plural, =1 {Repeated # time} other {Repeated # times}}',\n  /**\n  * @description Announced by the screen reader to indicate how many times a particular warning\n  * message in the console was repeated.\n  */\n  warningS: '{n, plural, =1 {Warning, Repeated # time} other {Warning, Repeated # times}}',\n  /**\n  * @description Announced by the screen reader to indicate how many times a particular error\n  * message in the console was repeated.\n  */\n  errorS: '{n, plural, =1 {Error, Repeated # time} other {Error, Repeated # times}}',\n  /**\n  *@description Text appended to grouped console messages that are related to URL requests\n  */\n  url: '<URL>',\n  /**\n  *@description Text appended to grouped console messages about tasks that took longer than N ms\n  */\n  tookNms: 'took <N>ms',\n  /**\n  *@description Text appended to grouped console messages about tasks that are related to some DOM event\n  */\n  someEvent: '<some> event',\n  /**\n  *@description Text appended to grouped console messages about tasks that are related to a particular milestone\n  */\n  Mxx: ' M<XX>',\n  /**\n  *@description Text appended to grouped console messages about tasks that are related to autofill completions\n  */\n  attribute: '<attribute>',\n  /**\n  *@description Text for the index of something\n  */\n  index: '(index)',\n  /**\n  *@description Text for the value of something\n  */\n  value: 'Value',\n  /**\n  *@description Title of the Console tool\n  */\n  console: 'Console',\n  /**\n  *@description Message to indicate a console message with a stack table is expanded\n  */\n  stackMessageExpanded: 'Stack table expanded',\n  /**\n  *@description Message to indicate a console message with a stack table is collapsed\n  */\n  stackMessageCollapsed: 'Stack table collapsed',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/console/ConsoleViewMessage.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst elementToMessage = new WeakMap<Element, ConsoleViewMessage>();\n\nexport const getMessageForElement = (element: Element): ConsoleViewMessage|undefined => {\n  return elementToMessage.get(element);\n};\n\n// This value reflects the 18px min-height of .console-message, plus the\n// 1px border of .console-message-wrapper. Keep in sync with consoleView.css.\nconst defaultConsoleRowHeight = 19;\n\nconst parameterToRemoteObject = (runtimeModel: SDK.RuntimeModel.RuntimeModel|null): (\n    parameter?: SDK.RemoteObject.RemoteObject|Protocol.Runtime.RemoteObject|string) => SDK.RemoteObject.RemoteObject =>\n    (parameter?: string|SDK.RemoteObject.RemoteObject|Protocol.Runtime.RemoteObject): SDK.RemoteObject.RemoteObject => {\n      if (parameter instanceof SDK.RemoteObject.RemoteObject) {\n        return parameter;\n      }\n      if (!runtimeModel) {\n        return SDK.RemoteObject.RemoteObject.fromLocalObject(parameter);\n      }\n      if (typeof parameter === 'object') {\n        return runtimeModel.createRemoteObject(parameter);\n      }\n      return runtimeModel.createRemoteObjectFromPrimitiveValue(parameter);\n    };\n\nexport class ConsoleViewMessage implements ConsoleViewportElement {\n  protected message: SDK.ConsoleModel.ConsoleMessage;\n  private readonly linkifier: Components.Linkifier.Linkifier;\n  private repeatCountInternal: number;\n  private closeGroupDecorationCount: number;\n  private consoleGroupInternal: ConsoleGroupViewMessage|null;\n  private selectableChildren: {\n    element: HTMLElement,\n    forceSelect: () => void,\n  }[];\n  private readonly messageResized: (arg0: Common.EventTarget.EventTargetEvent<UI.TreeOutline.TreeElement>) => void;\n  protected elementInternal: HTMLElement|null;\n  private readonly previewFormatter: ObjectUI.RemoteObjectPreviewFormatter.RemoteObjectPreviewFormatter;\n  private searchRegexInternal: RegExp|null;\n  protected messageLevelIcon: UI.Icon.Icon|null;\n  private traceExpanded: boolean;\n  private expandTrace: ((arg0: boolean) => void)|null;\n  protected anchorElement: HTMLElement|null;\n  protected contentElementInternal: HTMLElement|null;\n  private nestingLevelMarkers: HTMLElement[]|null;\n  private searchHighlightNodes: Element[];\n  private searchHighlightNodeChanges: UI.UIUtils.HighlightChange[];\n  private isVisibleInternal: boolean;\n  private cachedHeight: number;\n  private messagePrefix: string;\n  private timestampElement: HTMLElement|null;\n  private inSimilarGroup: boolean;\n  private similarGroupMarker: HTMLElement|null;\n  private lastInSimilarGroup: boolean;\n  private groupKeyInternal: string;\n  protected repeatCountElement: UI.UIUtils.DevToolsSmallBubble|null;\n  private requestResolver: Logs.RequestResolver.RequestResolver;\n  private issueResolver: IssuesManager.IssueResolver.IssueResolver;\n\n  /** Formatting Error#stack is asynchronous. Allow tests to wait for the result */\n  #formatErrorStackPromiseForTest = Promise.resolve();\n\n  constructor(\n      consoleMessage: SDK.ConsoleModel.ConsoleMessage, linkifier: Components.Linkifier.Linkifier,\n      requestResolver: Logs.RequestResolver.RequestResolver, issueResolver: IssuesManager.IssueResolver.IssueResolver,\n      onResize: (arg0: Common.EventTarget.EventTargetEvent<UI.TreeOutline.TreeElement>) => void) {\n    this.message = consoleMessage;\n    this.linkifier = linkifier;\n    this.requestResolver = requestResolver;\n    this.issueResolver = issueResolver;\n    this.repeatCountInternal = 1;\n    this.closeGroupDecorationCount = 0;\n    this.selectableChildren = [];\n    this.messageResized = onResize;\n    this.elementInternal = null;\n\n    this.previewFormatter = new ObjectUI.RemoteObjectPreviewFormatter.RemoteObjectPreviewFormatter();\n    this.searchRegexInternal = null;\n    this.messageLevelIcon = null;\n    this.traceExpanded = false;\n    this.expandTrace = null;\n    this.anchorElement = null;\n    this.contentElementInternal = null;\n    this.nestingLevelMarkers = null;\n    this.searchHighlightNodes = [];\n    this.searchHighlightNodeChanges = [];\n    this.isVisibleInternal = false;\n    this.cachedHeight = 0;\n    this.messagePrefix = '';\n    this.timestampElement = null;\n    this.inSimilarGroup = false;\n    this.similarGroupMarker = null;\n    this.lastInSimilarGroup = false;\n    this.groupKeyInternal = '';\n    this.repeatCountElement = null;\n    this.consoleGroupInternal = null;\n  }\n\n  element(): HTMLElement {\n    return this.toMessageElement();\n  }\n\n  wasShown(): void {\n    this.isVisibleInternal = true;\n  }\n\n  onResize(): void {\n  }\n\n  willHide(): void {\n    this.isVisibleInternal = false;\n    this.cachedHeight = this.element().offsetHeight;\n  }\n\n  isVisible(): boolean {\n    return this.isVisibleInternal;\n  }\n\n  fastHeight(): number {\n    if (this.cachedHeight) {\n      return this.cachedHeight;\n    }\n    return this.approximateFastHeight();\n  }\n\n  approximateFastHeight(): number {\n    return defaultConsoleRowHeight;\n  }\n\n  consoleMessage(): SDK.ConsoleModel.ConsoleMessage {\n    return this.message;\n  }\n\n  formatErrorStackPromiseForTest(): Promise<void> {\n    return this.#formatErrorStackPromiseForTest;\n  }\n\n  protected buildMessage(): HTMLElement {\n    let messageElement;\n    let messageText: Common.UIString.LocalizedString|string = this.message.messageText;\n    if (this.message.source === SDK.ConsoleModel.FrontendMessageSource.ConsoleAPI) {\n      switch (this.message.type) {\n        case Protocol.Runtime.ConsoleAPICalledEventType.Trace:\n          messageElement = this.format(this.message.parameters || ['console.trace']);\n          break;\n        case Protocol.Runtime.ConsoleAPICalledEventType.Clear:\n          messageElement = document.createElement('span');\n          messageElement.classList.add('console-info');\n          if (Common.Settings.Settings.instance().moduleSetting('preserveConsoleLog').get()) {\n            messageElement.textContent = i18nString(UIStrings.consoleclearWasPreventedDueTo);\n          } else {\n            messageElement.textContent = i18nString(UIStrings.consoleWasCleared);\n          }\n          UI.Tooltip.Tooltip.install(\n              messageElement, i18nString(UIStrings.clearAllMessagesWithS, {\n                PH1: String(UI.ShortcutRegistry.ShortcutRegistry.instance().shortcutTitleForAction('console.clear')),\n              }));\n          break;\n        case Protocol.Runtime.ConsoleAPICalledEventType.Dir: {\n          const obj = this.message.parameters ? this.message.parameters[0] : undefined;\n          const args = ['%O', obj];\n          messageElement = this.format(args);\n          break;\n        }\n        case Protocol.Runtime.ConsoleAPICalledEventType.Profile:\n        case Protocol.Runtime.ConsoleAPICalledEventType.ProfileEnd:\n          messageElement = this.format([messageText]);\n          break;\n        default: {\n          if (this.message.type === Protocol.Runtime.ConsoleAPICalledEventType.Assert) {\n            this.messagePrefix = i18nString(UIStrings.assertionFailed);\n          }\n          if (this.message.parameters && this.message.parameters.length === 1) {\n            const parameter = this.message.parameters[0];\n            if (typeof parameter !== 'string' && parameter.type === 'string') {\n              messageElement = this.tryFormatAsError((parameter.value as string));\n            }\n          }\n          const args = this.message.parameters || [messageText];\n          messageElement = messageElement || this.format(args);\n        }\n      }\n    } else {\n      if (this.message.source === Protocol.Log.LogEntrySource.Network) {\n        messageElement = this.formatAsNetworkRequest() || this.format([messageText]);\n      } else {\n        const messageInParameters = this.message.parameters && messageText === (this.message.parameters[0] as string);\n        // These terms are locked because the console message will not be translated anyway.\n        if (this.message.source === Protocol.Log.LogEntrySource.Violation) {\n          messageText = i18nString(UIStrings.violationS, {PH1: messageText});\n        } else if (this.message.source === Protocol.Log.LogEntrySource.Intervention) {\n          messageText = i18nString(UIStrings.interventionS, {PH1: messageText});\n        } else if (this.message.source === Protocol.Log.LogEntrySource.Deprecation) {\n          messageText = i18nString(UIStrings.deprecationS, {PH1: messageText});\n        }\n        const args = this.message.parameters || [messageText];\n        if (messageInParameters) {\n          args[0] = messageText;\n        }\n        messageElement = this.format(args);\n      }\n    }\n    messageElement.classList.add('console-message-text');\n\n    const formattedMessage = document.createElement('span');\n    formattedMessage.classList.add('source-code');\n    this.anchorElement = this.buildMessageAnchor();\n    if (this.anchorElement) {\n      formattedMessage.appendChild(this.anchorElement);\n    }\n    formattedMessage.appendChild(messageElement);\n    return formattedMessage;\n  }\n\n  private formatAsNetworkRequest(): HTMLElement|null {\n    const request = Logs.NetworkLog.NetworkLog.requestForConsoleMessage(this.message);\n    if (!request) {\n      return null;\n    }\n    const messageElement = document.createElement('span');\n    if (this.message.level === Protocol.Log.LogEntryLevel.Error) {\n      UI.UIUtils.createTextChild(messageElement, request.requestMethod + ' ');\n      const linkElement = Components.Linkifier.Linkifier.linkifyRevealable(request, request.url(), request.url());\n      // Focus is handled by the viewport.\n      linkElement.tabIndex = -1;\n      this.selectableChildren.push({element: linkElement, forceSelect: (): void => linkElement.focus()});\n      messageElement.appendChild(linkElement);\n      if (request.failed) {\n        UI.UIUtils.createTextChildren(messageElement, ' ', request.localizedFailDescription || '');\n      }\n      if (request.statusCode !== 0) {\n        UI.UIUtils.createTextChildren(messageElement, ' ', String(request.statusCode));\n      }\n      if (request.statusText) {\n        UI.UIUtils.createTextChildren(messageElement, ' (', request.statusText, ')');\n      }\n    } else {\n      const messageText = this.message.messageText;\n      const fragment = this.linkifyWithCustomLinkifier(messageText, (text, url, lineNumber, columnNumber) => {\n        const linkElement = url === request.url() ?\n            Components.Linkifier.Linkifier.linkifyRevealable(\n                (request as SDK.NetworkRequest.NetworkRequest), url, request.url()) :\n            Components.Linkifier.Linkifier.linkifyURL(\n                url, ({text, lineNumber, columnNumber} as Components.Linkifier.LinkifyURLOptions));\n        linkElement.tabIndex = -1;\n        this.selectableChildren.push({element: linkElement, forceSelect: (): void => linkElement.focus()});\n        return linkElement;\n      });\n      messageElement.appendChild(fragment);\n    }\n    return messageElement;\n  }\n\n  private createAffectedResourceLinks(): HTMLElement[] {\n    const elements = [];\n    const requestId = this.message.getAffectedResources()?.requestId;\n    if (requestId) {\n      const icon = new RequestLinkIcon.RequestLinkIcon.RequestLinkIcon();\n      icon.classList.add('resource-links');\n      icon.data = {\n        affectedRequest: {requestId},\n        requestResolver: this.requestResolver,\n        displayURL: false,\n      };\n      elements.push(icon);\n    }\n    const issueId = this.message.getAffectedResources()?.issueId;\n    if (issueId) {\n      const icon = new IssueCounter.IssueLinkIcon.IssueLinkIcon();\n      icon.classList.add('resource-links');\n      icon.data = {issueId, issueResolver: this.issueResolver};\n      elements.push(icon);\n    }\n    return elements;\n  }\n\n  protected buildMessageAnchor(): HTMLElement|null {\n    const linkify = (message: SDK.ConsoleModel.ConsoleMessage): HTMLElement|null => {\n      if (message.scriptId) {\n        return this.linkifyScriptId(\n            message.scriptId, message.url || Platform.DevToolsPath.EmptyUrlString, message.line, message.column);\n      }\n      if (message.stackTrace && message.stackTrace.callFrames.length) {\n        return this.linkifyStackTraceTopFrame(message.stackTrace);\n      }\n      if (message.url && message.url !== 'undefined') {\n        return this.linkifyLocation(message.url, message.line, message.column);\n      }\n      return null;\n    };\n    const anchorElement = linkify(this.message);\n    // Append a space to prevent the anchor text from being glued to the console message when the user selects and copies the console messages.\n    if (anchorElement) {\n      anchorElement.tabIndex = -1;\n      this.selectableChildren.push({\n        element: anchorElement,\n        forceSelect: (): void => anchorElement.focus(),\n      });\n      const anchorWrapperElement = document.createElement('span');\n      anchorWrapperElement.classList.add('console-message-anchor');\n      anchorWrapperElement.appendChild(anchorElement);\n\n      for (const element of this.createAffectedResourceLinks()) {\n        UI.UIUtils.createTextChild(anchorWrapperElement, ' ');\n        anchorWrapperElement.append(element);\n      }\n\n      UI.UIUtils.createTextChild(anchorWrapperElement, ' ');\n      return anchorWrapperElement;\n    }\n    return null;\n  }\n\n  private buildMessageWithStackTrace(runtimeModel: SDK.RuntimeModel.RuntimeModel): HTMLElement {\n    const toggleElement = document.createElement('div');\n    toggleElement.classList.add('console-message-stack-trace-toggle');\n    const contentElement = toggleElement.createChild('div', 'console-message-stack-trace-wrapper');\n\n    const messageElement = this.buildMessage();\n    const icon = UI.Icon.Icon.create('smallicon-triangle-right', 'console-message-expand-icon');\n    const clickableElement = contentElement.createChild('div');\n    UI.ARIAUtils.setExpanded(clickableElement, false);\n    clickableElement.appendChild(icon);\n    // Intercept focus to avoid highlight on click.\n    clickableElement.tabIndex = -1;\n    clickableElement.appendChild(messageElement);\n    const stackTraceElement = contentElement.createChild('div');\n    const stackTracePreview = Components.JSPresentationUtils.buildStackTracePreviewContents(\n        runtimeModel.target(), this.linkifier, {stackTrace: this.message.stackTrace, tabStops: undefined});\n    stackTraceElement.appendChild(stackTracePreview.element);\n    for (const linkElement of stackTracePreview.links) {\n      this.selectableChildren.push({element: linkElement, forceSelect: (): void => linkElement.focus()});\n    }\n    stackTraceElement.classList.add('hidden');\n    UI.ARIAUtils.setAccessibleName(\n        contentElement, `${messageElement.textContent} ${i18nString(UIStrings.stackMessageCollapsed)}`);\n    UI.ARIAUtils.markAsGroup(stackTraceElement);\n    this.expandTrace = (expand: boolean): void => {\n      icon.setIconType(expand ? 'smallicon-triangle-down' : 'smallicon-triangle-right');\n      stackTraceElement.classList.toggle('hidden', !expand);\n      const stackTableState =\n          expand ? i18nString(UIStrings.stackMessageExpanded) : i18nString(UIStrings.stackMessageCollapsed);\n      UI.ARIAUtils.setAccessibleName(contentElement, `${messageElement.textContent} ${stackTableState}`);\n      UI.ARIAUtils.alert(stackTableState);\n      UI.ARIAUtils.setExpanded(clickableElement, expand);\n      this.traceExpanded = expand;\n    };\n\n    const toggleStackTrace = (event: Event): void => {\n      if (UI.UIUtils.isEditing() || contentElement.hasSelection()) {\n        return;\n      }\n      this.expandTrace && this.expandTrace(stackTraceElement.classList.contains('hidden'));\n      event.consume();\n    };\n\n    clickableElement.addEventListener('click', toggleStackTrace, false);\n    if (this.message.type === Protocol.Runtime.ConsoleAPICalledEventType.Trace) {\n      this.expandTrace(true);\n    }\n\n    // @ts-ignore\n    toggleElement._expandStackTraceForTest = this.expandTrace.bind(this, true);\n    return toggleElement;\n  }\n\n  private linkifyLocation(url: Platform.DevToolsPath.UrlString, lineNumber: number, columnNumber: number): HTMLElement\n      |null {\n    const runtimeModel = this.message.runtimeModel();\n    if (!runtimeModel) {\n      return null;\n    }\n    return this.linkifier.linkifyScriptLocation(\n        runtimeModel.target(), /* scriptId */ null, url, lineNumber, {columnNumber, inlineFrameIndex: 0});\n  }\n\n  private linkifyStackTraceTopFrame(stackTrace: Protocol.Runtime.StackTrace): HTMLElement|null {\n    const runtimeModel = this.message.runtimeModel();\n    if (!runtimeModel) {\n      return null;\n    }\n    return this.linkifier.linkifyStackTraceTopFrame(runtimeModel.target(), stackTrace);\n  }\n\n  private linkifyScriptId(\n      scriptId: Protocol.Runtime.ScriptId, url: Platform.DevToolsPath.UrlString, lineNumber: number,\n      columnNumber: number): HTMLElement|null {\n    const runtimeModel = this.message.runtimeModel();\n    if (!runtimeModel) {\n      return null;\n    }\n    return this.linkifier.linkifyScriptLocation(\n        runtimeModel.target(), scriptId, url, lineNumber, {columnNumber, inlineFrameIndex: 0});\n  }\n\n  private format(rawParameters: (string|SDK.RemoteObject.RemoteObject|Protocol.Runtime.RemoteObject|undefined)[]):\n      HTMLElement {\n    // This node is used like a Builder. Values are continually appended onto it.\n    const formattedResult = document.createElement('span');\n    if (this.messagePrefix) {\n      formattedResult.createChild('span').textContent = this.messagePrefix;\n    }\n    if (!rawParameters.length) {\n      return formattedResult;\n    }\n\n    // Formatting code below assumes that parameters are all wrappers whereas frontend console\n    // API allows passing arbitrary values as messages (strings, numbers, etc.). Wrap them here.\n    // FIXME: Only pass runtime wrappers here.\n    let parameters = rawParameters.map(parameterToRemoteObject(this.message.runtimeModel()));\n\n    // There can be string log and string eval result. We distinguish between them based on message type.\n    const shouldFormatMessage =\n        SDK.RemoteObject.RemoteObject.type((parameters as SDK.RemoteObject.RemoteObject[])[0]) === 'string' &&\n        (this.message.type !== SDK.ConsoleModel.FrontendMessageType.Result ||\n         this.message.level === Protocol.Log.LogEntryLevel.Error);\n\n    // Multiple parameters with the first being a format string. Save unused substitutions.\n    if (shouldFormatMessage) {\n      parameters = this.formatWithSubstitutionString(\n          (parameters[0].description as string), parameters.slice(1), formattedResult);\n      if (parameters.length) {\n        UI.UIUtils.createTextChild(formattedResult, ' ');\n      }\n    }\n\n    // Single parameter, or unused substitutions from above.\n    for (let i = 0; i < parameters.length; ++i) {\n      // Inline strings when formatting.\n      if (shouldFormatMessage && parameters[i].type === 'string') {\n        formattedResult.appendChild(this.linkifyStringAsFragment(parameters[i].description || ''));\n      } else {\n        formattedResult.appendChild(this.formatParameter(parameters[i], false, true));\n      }\n      if (i < parameters.length - 1) {\n        UI.UIUtils.createTextChild(formattedResult, ' ');\n      }\n    }\n    return formattedResult;\n  }\n\n  protected formatParameter(\n      output: SDK.RemoteObject.RemoteObject, forceObjectFormat?: boolean, includePreview?: boolean): HTMLElement {\n    if (output.customPreview()) {\n      return new ObjectUI.CustomPreviewComponent.CustomPreviewComponent(output).element as HTMLElement;\n    }\n\n    const outputType = forceObjectFormat ? 'object' : (output.subtype || output.type);\n    let element;\n    switch (outputType) {\n      case 'error':\n        element = this.formatParameterAsError(output);\n        break;\n      case 'function':\n        element = this.formatParameterAsFunction(output, includePreview);\n        break;\n      case 'array':\n      case 'arraybuffer':\n      case 'blob':\n      case 'dataview':\n      case 'generator':\n      case 'iterator':\n      case 'map':\n      case 'object':\n      case 'promise':\n      case 'proxy':\n      case 'set':\n      case 'typedarray':\n      case 'wasmvalue':\n      case 'weakmap':\n      case 'weakset':\n      case 'webassemblymemory':\n        element = this.formatParameterAsObject(output, includePreview);\n        break;\n      case 'node':\n        element = output.isNode() ? this.formatParameterAsNode(output) : this.formatParameterAsObject(output, false);\n        break;\n      case 'trustedtype':\n        element = this.formatParameterAsObject(output, false);\n        break;\n      case 'string':\n        element = this.formatParameterAsString(output);\n        break;\n      case 'boolean':\n      case 'date':\n      case 'null':\n      case 'number':\n      case 'regexp':\n      case 'symbol':\n      case 'undefined':\n      case 'bigint':\n        element = this.formatParameterAsValue(output);\n        break;\n      default:\n        element = this.formatParameterAsValue(output);\n        console.error(`Tried to format remote object of unknown type ${outputType}.`);\n    }\n    element.classList.add(`object-value-${outputType}`);\n    element.classList.add('source-code');\n    return element;\n  }\n\n  private formatParameterAsValue(obj: SDK.RemoteObject.RemoteObject): HTMLElement {\n    const result = document.createElement('span');\n    const description = obj.description || '';\n    if (description.length > getMaxTokenizableStringLength()) {\n      const propertyValue = new ObjectUI.ObjectPropertiesSection.ExpandableTextPropertyValue(\n          document.createElement('span'), description, getLongStringVisibleLength());\n      result.appendChild(propertyValue.element);\n    } else {\n      UI.UIUtils.createTextChild(result, description);\n    }\n    result.addEventListener('contextmenu', this.contextMenuEventFired.bind(this, obj), false);\n    return result;\n  }\n\n  private formatParameterAsTrustedType(obj: SDK.RemoteObject.RemoteObject): HTMLElement {\n    const result = document.createElement('span');\n    const trustedContentSpan = document.createElement('span');\n    trustedContentSpan.appendChild(this.formatParameterAsString(obj));\n    trustedContentSpan.classList.add('object-value-string');\n    UI.UIUtils.createTextChild(result, `${obj.className} `);\n    result.appendChild(trustedContentSpan);\n    return result;\n  }\n\n  private formatParameterAsObject(obj: SDK.RemoteObject.RemoteObject, includePreview?: boolean): HTMLElement {\n    const titleElement = document.createElement('span');\n    titleElement.classList.add('console-object');\n    if (includePreview && obj.preview) {\n      titleElement.classList.add('console-object-preview');\n      this.previewFormatter.appendObjectPreview(titleElement, obj.preview, false /* isEntry */);\n    } else if (obj.type === 'function') {\n      const functionElement = titleElement.createChild('span');\n      void ObjectUI.ObjectPropertiesSection.ObjectPropertiesSection.formatObjectAsFunction(obj, functionElement, false);\n      titleElement.classList.add('object-value-function');\n    } else if (obj.subtype === 'trustedtype') {\n      titleElement.appendChild(this.formatParameterAsTrustedType(obj));\n    } else {\n      UI.UIUtils.createTextChild(titleElement, obj.description || '');\n    }\n\n    if (!obj.hasChildren || obj.customPreview()) {\n      return titleElement;\n    }\n\n    const note = titleElement.createChild('span', 'object-state-note info-note');\n    if (this.message.type === SDK.ConsoleModel.FrontendMessageType.QueryObjectResult) {\n      UI.Tooltip.Tooltip.install(note, i18nString(UIStrings.thisValueWillNotBeCollectedUntil));\n    } else {\n      UI.Tooltip.Tooltip.install(note, i18nString(UIStrings.thisValueWasEvaluatedUponFirst));\n    }\n\n    const section = new ObjectUI.ObjectPropertiesSection.ObjectPropertiesSection(obj, titleElement, this.linkifier);\n    section.element.classList.add('console-view-object-properties-section');\n    section.enableContextMenu();\n    section.setShowSelectionOnKeyboardFocus(true, true);\n    this.selectableChildren.push(section);\n    section.addEventListener(UI.TreeOutline.Events.ElementAttached, this.messageResized);\n    section.addEventListener(UI.TreeOutline.Events.ElementExpanded, this.messageResized);\n    section.addEventListener(UI.TreeOutline.Events.ElementCollapsed, this.messageResized);\n    return section.element;\n  }\n\n  private formatParameterAsFunction(func: SDK.RemoteObject.RemoteObject, includePreview?: boolean): HTMLElement {\n    const result = document.createElement('span');\n    void SDK.RemoteObject.RemoteFunction.objectAsFunction(func).targetFunction().then(formatTargetFunction.bind(this));\n    return result;\n\n    function formatTargetFunction(this: ConsoleViewMessage, targetFunction: SDK.RemoteObject.RemoteObject): void {\n      const functionElement = document.createElement('span');\n      const promise = ObjectUI.ObjectPropertiesSection.ObjectPropertiesSection.formatObjectAsFunction(\n          targetFunction, functionElement, true, includePreview);\n      result.appendChild(functionElement);\n      if (targetFunction !== func) {\n        const note = result.createChild('span', 'object-state-note info-note');\n        UI.Tooltip.Tooltip.install(note, i18nString(UIStrings.functionWasResolvedFromBound));\n      }\n      result.addEventListener('contextmenu', this.contextMenuEventFired.bind(this, targetFunction), false);\n      void promise.then(() => this.formattedParameterAsFunctionForTest());\n    }\n  }\n\n  private formattedParameterAsFunctionForTest(): void {\n  }\n\n  private contextMenuEventFired(obj: SDK.RemoteObject.RemoteObject, event: Event): void {\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    contextMenu.appendApplicableItems(obj);\n    void contextMenu.show();\n  }\n\n  protected renderPropertyPreviewOrAccessor(\n      object: SDK.RemoteObject.RemoteObject|null, property: Protocol.Runtime.PropertyPreview, propertyPath: {\n        name: (string|symbol),\n      }[]): HTMLElement {\n    if (property.type === 'accessor') {\n      return this.formatAsAccessorProperty(object, propertyPath.map(property => property.name.toString()), false);\n    }\n    return this.previewFormatter.renderPropertyPreview(\n        property.type, 'subtype' in property ? property.subtype : undefined, null, property.value);\n  }\n\n  private formatParameterAsNode(remoteObject: SDK.RemoteObject.RemoteObject): HTMLElement {\n    const result = document.createElement('span');\n\n    const domModel = remoteObject.runtimeModel().target().model(SDK.DOMModel.DOMModel);\n    if (!domModel) {\n      return result;\n    }\n    void domModel.pushObjectAsNodeToFrontend(remoteObject).then(async (node: SDK.DOMModel.DOMNode|null) => {\n      if (!node) {\n        result.appendChild(this.formatParameterAsObject(remoteObject, false));\n        return;\n      }\n      const renderResult = await UI.UIUtils.Renderer.render((node as Object));\n      if (renderResult) {\n        if (renderResult.tree) {\n          this.selectableChildren.push(renderResult.tree);\n          renderResult.tree.addEventListener(UI.TreeOutline.Events.ElementAttached, this.messageResized);\n          renderResult.tree.addEventListener(UI.TreeOutline.Events.ElementExpanded, this.messageResized);\n          renderResult.tree.addEventListener(UI.TreeOutline.Events.ElementCollapsed, this.messageResized);\n        }\n        result.appendChild(renderResult.node);\n      } else {\n        result.appendChild(this.formatParameterAsObject(remoteObject, false));\n      }\n      this.formattedParameterAsNodeForTest();\n    });\n\n    return result;\n  }\n\n  private formattedParameterAsNodeForTest(): void {\n  }\n\n  private formatParameterAsString(output: SDK.RemoteObject.RemoteObject): HTMLElement {\n    const description = output.description ?? '';\n    const text = Platform.StringUtilities.formatAsJSLiteral(description);\n    const result = document.createElement('span');\n    result.addEventListener('contextmenu', this.contextMenuEventFired.bind(this, output), false);\n    result.appendChild(this.linkifyStringAsFragment(text));\n    return result;\n  }\n\n  private formatParameterAsError(output: SDK.RemoteObject.RemoteObject): HTMLElement {\n    const result = document.createElement('span');\n    const errorStack = output.description || '';\n\n    // Combine the ExceptionDetails for this error object with the parsed Error#stack.\n    // The Exceptiondetails include script IDs for stack frames, which allows more accurate\n    // linking.\n    this.#formatErrorStackPromiseForTest = this.retrieveExceptionDetails(output).then(exceptionDetails => {\n      const errorSpan = this.tryFormatAsError(errorStack, exceptionDetails);\n      result.appendChild(errorSpan ?? this.linkifyStringAsFragment(errorStack));\n    });\n\n    return result;\n  }\n\n  private async retrieveExceptionDetails(errorObject: SDK.RemoteObject.RemoteObject):\n      Promise<Protocol.Runtime.ExceptionDetails|undefined> {\n    const runtimeModel = this.message.runtimeModel();\n    if (runtimeModel && errorObject.objectId) {\n      return runtimeModel.getExceptionDetails(errorObject.objectId);\n    }\n    return undefined;\n  }\n\n  private formatAsArrayEntry(output: SDK.RemoteObject.RemoteObject): HTMLElement {\n    return this.previewFormatter.renderPropertyPreview(\n        output.type, output.subtype, output.className, output.description);\n  }\n\n  private formatAsAccessorProperty(\n      object: SDK.RemoteObject.RemoteObject|null, propertyPath: string[], isArrayEntry: boolean): HTMLElement {\n    const rootElement =\n        ObjectUI.ObjectPropertiesSection.ObjectPropertyTreeElement.createRemoteObjectAccessorPropertySpan(\n            object, propertyPath, onInvokeGetterClick.bind(this));\n\n    function onInvokeGetterClick(this: ConsoleViewMessage, result: SDK.RemoteObject.CallFunctionResult): void {\n      const wasThrown = result.wasThrown;\n      const object = result.object;\n      if (!object) {\n        return;\n      }\n      rootElement.removeChildren();\n      if (wasThrown) {\n        const element = rootElement.createChild('span');\n        element.textContent = i18nString(UIStrings.exception);\n        UI.Tooltip.Tooltip.install(element, (object.description as string));\n      } else if (isArrayEntry) {\n        rootElement.appendChild(this.formatAsArrayEntry(object));\n      } else {\n        // Make a PropertyPreview from the RemoteObject similar to the backend logic.\n        const maxLength = 100;\n        const type = object.type;\n        const subtype = object.subtype;\n        let description = '';\n        if (type !== 'function' && object.description) {\n          if (type === 'string' || subtype === 'regexp' || subtype === 'trustedtype') {\n            description = Platform.StringUtilities.trimMiddle(object.description, maxLength);\n          } else {\n            description = Platform.StringUtilities.trimEndWithMaxLength(object.description, maxLength);\n          }\n        }\n        rootElement.appendChild(\n            this.previewFormatter.renderPropertyPreview(type, subtype, object.className, description));\n      }\n    }\n\n    return rootElement;\n  }\n\n  private formatWithSubstitutionString(\n      formatString: string, parameters: SDK.RemoteObject.RemoteObject[],\n      formattedResult: HTMLElement): SDK.RemoteObject.RemoteObject[] {\n    const currentStyle = new Map();\n    const {tokens, args} = format(formatString, parameters);\n    for (const token of tokens) {\n      switch (token.type) {\n        case 'generic': {\n          formattedResult.append(this.formatParameter(token.value, true /* force */, false /* includePreview */));\n          break;\n        }\n        case 'optimal': {\n          formattedResult.append(this.formatParameter(token.value, false /* force */, true /* includePreview */));\n          break;\n        }\n        case 'string': {\n          if (currentStyle.size === 0) {\n            formattedResult.append(this.linkifyStringAsFragment(token.value));\n          } else {\n            const lines = token.value.split('\\n');\n            for (let i = 0; i < lines.length; i++) {\n              if (i > 0) {\n                formattedResult.append(document.createElement('br'));\n              }\n              const wrapper = document.createElement('span');\n              wrapper.style.setProperty('contain', 'paint');\n              wrapper.style.setProperty('display', 'inline-block');\n              wrapper.style.setProperty('max-width', '100%');\n              wrapper.appendChild(this.linkifyStringAsFragment(lines[i]));\n              for (const [property, {value, priority}] of currentStyle) {\n                wrapper.style.setProperty(property, value, priority);\n              }\n              formattedResult.append(wrapper);\n            }\n          }\n          break;\n        }\n        case 'style':\n          // Make sure that allowed properties do not interfere with link visibility.\n          updateStyle(currentStyle, token.value);\n          break;\n      }\n    }\n    return args;\n  }\n\n  matchesFilterRegex(regexObject: RegExp): boolean {\n    regexObject.lastIndex = 0;\n    const contentElement = this.contentElement();\n    const anchorText = this.anchorElement ? this.anchorElement.deepTextContent() : '';\n    return (Boolean(anchorText) && regexObject.test(anchorText.trim())) ||\n        regexObject.test(contentElement.deepTextContent().slice(anchorText.length));\n  }\n\n  matchesFilterText(filter: string): boolean {\n    const text = this.contentElement().deepTextContent();\n    return text.toLowerCase().includes(filter.toLowerCase());\n  }\n\n  updateTimestamp(): void {\n    if (!this.contentElementInternal) {\n      return;\n    }\n\n    if (Common.Settings.Settings.instance().moduleSetting('consoleTimestampsEnabled').get()) {\n      if (!this.timestampElement) {\n        this.timestampElement = document.createElement('span');\n        this.timestampElement.classList.add('console-timestamp');\n      }\n      this.timestampElement.textContent = UI.UIUtils.formatTimestamp(this.message.timestamp, false) + ' ';\n      UI.Tooltip.Tooltip.install(this.timestampElement, UI.UIUtils.formatTimestamp(this.message.timestamp, true));\n      this.contentElementInternal.insertBefore(this.timestampElement, this.contentElementInternal.firstChild);\n    } else if (this.timestampElement) {\n      this.timestampElement.remove();\n      this.timestampElement = null;\n    }\n  }\n\n  nestingLevel(): number {\n    let nestingLevel = 0;\n    for (let group = this.consoleGroup(); group !== null; group = group.consoleGroup()) {\n      nestingLevel++;\n    }\n    return nestingLevel;\n  }\n\n  setConsoleGroup(group: ConsoleGroupViewMessage): void {\n    console.assert(this.consoleGroupInternal === null);\n    this.consoleGroupInternal = group;\n  }\n\n  clearConsoleGroup(): void {\n    this.consoleGroupInternal = null;\n  }\n\n  consoleGroup(): ConsoleGroupViewMessage|null {\n    return this.consoleGroupInternal;\n  }\n\n  setInSimilarGroup(inSimilarGroup: boolean, isLast?: boolean): void {\n    this.inSimilarGroup = inSimilarGroup;\n    this.lastInSimilarGroup = inSimilarGroup && Boolean(isLast);\n    if (this.similarGroupMarker && !inSimilarGroup) {\n      this.similarGroupMarker.remove();\n      this.similarGroupMarker = null;\n    } else if (this.elementInternal && !this.similarGroupMarker && inSimilarGroup) {\n      this.similarGroupMarker = document.createElement('div');\n      this.similarGroupMarker.classList.add('nesting-level-marker');\n      this.elementInternal.insertBefore(this.similarGroupMarker, this.elementInternal.firstChild);\n      this.similarGroupMarker.classList.toggle('group-closed', this.lastInSimilarGroup);\n    }\n  }\n\n  isLastInSimilarGroup(): boolean {\n    return Boolean(this.inSimilarGroup) && Boolean(this.lastInSimilarGroup);\n  }\n\n  resetCloseGroupDecorationCount(): void {\n    if (!this.closeGroupDecorationCount) {\n      return;\n    }\n    this.closeGroupDecorationCount = 0;\n    this.updateCloseGroupDecorations();\n  }\n\n  incrementCloseGroupDecorationCount(): void {\n    ++this.closeGroupDecorationCount;\n    this.updateCloseGroupDecorations();\n  }\n\n  private updateCloseGroupDecorations(): void {\n    if (!this.nestingLevelMarkers) {\n      return;\n    }\n    for (let i = 0, n = this.nestingLevelMarkers.length; i < n; ++i) {\n      const marker = this.nestingLevelMarkers[i];\n      marker.classList.toggle('group-closed', n - i <= this.closeGroupDecorationCount);\n    }\n  }\n\n  protected focusedChildIndex(): number {\n    if (!this.selectableChildren.length) {\n      return -1;\n    }\n    return this.selectableChildren.findIndex(child => child.element.hasFocus());\n  }\n\n  private onKeyDown(event: KeyboardEvent): void {\n    if (UI.UIUtils.isEditing() || !this.elementInternal || !this.elementInternal.hasFocus() ||\n        this.elementInternal.hasSelection()) {\n      return;\n    }\n    if (this.maybeHandleOnKeyDown(event)) {\n      event.consume(true);\n    }\n  }\n\n  maybeHandleOnKeyDown(event: KeyboardEvent): boolean {\n    // Handle trace expansion.\n    const focusedChildIndex = this.focusedChildIndex();\n    const isWrapperFocused = focusedChildIndex === -1;\n    if (this.expandTrace && isWrapperFocused) {\n      if ((event.key === 'ArrowLeft' && this.traceExpanded) || (event.key === 'ArrowRight' && !this.traceExpanded)) {\n        this.expandTrace(!this.traceExpanded);\n        return true;\n      }\n    }\n    if (!this.selectableChildren.length) {\n      return false;\n    }\n\n    if (event.key === 'ArrowLeft') {\n      this.elementInternal && this.elementInternal.focus();\n      return true;\n    }\n    if (event.key === 'ArrowRight') {\n      if (isWrapperFocused && this.selectNearestVisibleChild(0)) {\n        return true;\n      }\n    }\n    if (event.key === 'ArrowUp') {\n      const firstVisibleChild = this.nearestVisibleChild(0);\n      if (this.selectableChildren[focusedChildIndex] === firstVisibleChild && firstVisibleChild) {\n        this.elementInternal && this.elementInternal.focus();\n        return true;\n      }\n      if (this.selectNearestVisibleChild(focusedChildIndex - 1, true /* backwards */)) {\n        return true;\n      }\n    }\n    if (event.key === 'ArrowDown') {\n      if (isWrapperFocused && this.selectNearestVisibleChild(0)) {\n        return true;\n      }\n      if (!isWrapperFocused && this.selectNearestVisibleChild(focusedChildIndex + 1)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private selectNearestVisibleChild(fromIndex: number, backwards?: boolean): boolean {\n    const nearestChild = this.nearestVisibleChild(fromIndex, backwards);\n    if (nearestChild) {\n      nearestChild.forceSelect();\n      return true;\n    }\n    return false;\n  }\n\n  private nearestVisibleChild(fromIndex: number, backwards?: boolean): {\n    element: Element,\n    forceSelect: () => void,\n  }|null {\n    const childCount = this.selectableChildren.length;\n    if (fromIndex < 0 || fromIndex >= childCount) {\n      return null;\n    }\n    const direction = backwards ? -1 : 1;\n    let index = fromIndex;\n\n    while (!this.selectableChildren[index].element.offsetParent) {\n      index += direction;\n      if (index < 0 || index >= childCount) {\n        return null;\n      }\n    }\n    return this.selectableChildren[index];\n  }\n\n  focusLastChildOrSelf(): void {\n    if (this.elementInternal &&\n        !this.selectNearestVisibleChild(this.selectableChildren.length - 1, true /* backwards */)) {\n      this.elementInternal.focus();\n    }\n  }\n\n  setContentElement(element: HTMLElement): void {\n    console.assert(!this.contentElementInternal, 'Cannot set content element twice');\n    this.contentElementInternal = element;\n  }\n\n  getContentElement(): HTMLElement|null {\n    return this.contentElementInternal;\n  }\n\n  contentElement(): HTMLElement {\n    if (this.contentElementInternal) {\n      return this.contentElementInternal;\n    }\n\n    const contentElement = document.createElement('div');\n    contentElement.classList.add('console-message');\n    if (this.messageLevelIcon) {\n      contentElement.appendChild(this.messageLevelIcon);\n    }\n    this.contentElementInternal = contentElement;\n\n    const runtimeModel = this.message.runtimeModel();\n    let formattedMessage;\n    const shouldIncludeTrace = Boolean(this.message.stackTrace) &&\n        (this.message.source === Protocol.Log.LogEntrySource.Network ||\n         this.message.source === Protocol.Log.LogEntrySource.Violation ||\n         this.message.level === Protocol.Log.LogEntryLevel.Error ||\n         this.message.level === Protocol.Log.LogEntryLevel.Warning ||\n         this.message.type === Protocol.Runtime.ConsoleAPICalledEventType.Trace);\n    if (runtimeModel && shouldIncludeTrace) {\n      formattedMessage = this.buildMessageWithStackTrace(runtimeModel);\n    } else {\n      formattedMessage = this.buildMessage();\n    }\n    contentElement.appendChild(formattedMessage);\n\n    this.updateTimestamp();\n    return this.contentElementInternal;\n  }\n\n  toMessageElement(): HTMLElement {\n    if (this.elementInternal) {\n      return this.elementInternal;\n    }\n    this.elementInternal = document.createElement('div');\n    this.elementInternal.tabIndex = -1;\n    this.elementInternal.addEventListener('keydown', (this.onKeyDown.bind(this) as EventListener));\n    this.updateMessageElement();\n    return this.elementInternal;\n  }\n\n  updateMessageElement(): void {\n    if (!this.elementInternal) {\n      return;\n    }\n\n    this.elementInternal.className = 'console-message-wrapper';\n    this.elementInternal.removeChildren();\n    if (this.message.isGroupStartMessage()) {\n      this.elementInternal.classList.add('console-group-title');\n    }\n    if (this.message.source === SDK.ConsoleModel.FrontendMessageSource.ConsoleAPI) {\n      this.elementInternal.classList.add('console-from-api');\n    }\n    if (this.inSimilarGroup) {\n      this.similarGroupMarker = (this.elementInternal.createChild('div', 'nesting-level-marker') as HTMLElement);\n      this.similarGroupMarker.classList.toggle('group-closed', this.lastInSimilarGroup);\n    }\n\n    this.nestingLevelMarkers = [];\n    for (let i = 0; i < this.nestingLevel(); ++i) {\n      this.nestingLevelMarkers.push(this.elementInternal.createChild('div', 'nesting-level-marker'));\n    }\n    this.updateCloseGroupDecorations();\n    elementToMessage.set(this.elementInternal, this);\n\n    switch (this.message.level) {\n      case Protocol.Log.LogEntryLevel.Verbose:\n        this.elementInternal.classList.add('console-verbose-level');\n        break;\n      case Protocol.Log.LogEntryLevel.Info:\n        this.elementInternal.classList.add('console-info-level');\n        if (this.message.type === SDK.ConsoleModel.FrontendMessageType.System) {\n          this.elementInternal.classList.add('console-system-type');\n        }\n        break;\n      case Protocol.Log.LogEntryLevel.Warning:\n        this.elementInternal.classList.add('console-warning-level');\n        break;\n      case Protocol.Log.LogEntryLevel.Error:\n        this.elementInternal.classList.add('console-error-level');\n        break;\n    }\n    this.updateMessageLevelIcon();\n    if (this.shouldRenderAsWarning()) {\n      this.elementInternal.classList.add('console-warning-level');\n    }\n\n    this.elementInternal.appendChild(this.contentElement());\n    if (this.repeatCountInternal > 1) {\n      this.showRepeatCountElement();\n    }\n  }\n\n  private shouldRenderAsWarning(): boolean {\n    return (this.message.level === Protocol.Log.LogEntryLevel.Verbose ||\n            this.message.level === Protocol.Log.LogEntryLevel.Info) &&\n        (this.message.source === Protocol.Log.LogEntrySource.Violation ||\n         this.message.source === Protocol.Log.LogEntrySource.Deprecation ||\n         this.message.source === Protocol.Log.LogEntrySource.Intervention ||\n         this.message.source === Protocol.Log.LogEntrySource.Recommendation);\n  }\n\n  private updateMessageLevelIcon(): void {\n    let iconType = '';\n    let accessibleName = '';\n    if (this.message.level === Protocol.Log.LogEntryLevel.Warning) {\n      iconType = 'smallicon-warning';\n      accessibleName = i18nString(UIStrings.warning);\n    } else if (this.message.level === Protocol.Log.LogEntryLevel.Error) {\n      iconType = 'smallicon-error';\n      accessibleName = i18nString(UIStrings.error);\n    }\n    if (!this.messageLevelIcon) {\n      if (!iconType) {\n        return;\n      }\n      this.messageLevelIcon = UI.Icon.Icon.create('', 'message-level-icon');\n      if (this.contentElementInternal) {\n        this.contentElementInternal.insertBefore(this.messageLevelIcon, this.contentElementInternal.firstChild);\n      }\n    }\n    this.messageLevelIcon.setIconType(iconType);\n    UI.ARIAUtils.setAccessibleName(this.messageLevelIcon, accessibleName);\n  }\n\n  repeatCount(): number {\n    return this.repeatCountInternal || 1;\n  }\n\n  resetIncrementRepeatCount(): void {\n    this.repeatCountInternal = 1;\n    if (!this.repeatCountElement) {\n      return;\n    }\n\n    this.repeatCountElement.remove();\n    if (this.contentElementInternal) {\n      this.contentElementInternal.classList.remove('repeated-message');\n    }\n    this.repeatCountElement = null;\n  }\n\n  incrementRepeatCount(): void {\n    this.repeatCountInternal++;\n    this.showRepeatCountElement();\n  }\n\n  setRepeatCount(repeatCount: number): void {\n    this.repeatCountInternal = repeatCount;\n    this.showRepeatCountElement();\n  }\n\n  showRepeatCountElement(): void {\n    if (!this.elementInternal) {\n      return;\n    }\n\n    if (!this.repeatCountElement) {\n      this.repeatCountElement =\n          (document.createElement('span', {is: 'dt-small-bubble'}) as UI.UIUtils.DevToolsSmallBubble);\n      this.repeatCountElement.classList.add('console-message-repeat-count');\n      switch (this.message.level) {\n        case Protocol.Log.LogEntryLevel.Warning:\n          this.repeatCountElement.type = 'warning';\n          break;\n        case Protocol.Log.LogEntryLevel.Error:\n          this.repeatCountElement.type = 'error';\n          break;\n        case Protocol.Log.LogEntryLevel.Verbose:\n          this.repeatCountElement.type = 'verbose';\n          break;\n        default:\n          this.repeatCountElement.type = 'info';\n      }\n      if (this.shouldRenderAsWarning()) {\n        this.repeatCountElement.type = 'warning';\n      }\n\n      this.elementInternal.insertBefore(this.repeatCountElement, this.contentElementInternal);\n      this.contentElement().classList.add('repeated-message');\n    }\n    this.repeatCountElement.textContent = `${this.repeatCountInternal}`;\n\n    let accessibleName;\n    if (this.message.level === Protocol.Log.LogEntryLevel.Warning) {\n      accessibleName = i18nString(UIStrings.warningS, {n: this.repeatCountInternal});\n    } else if (this.message.level === Protocol.Log.LogEntryLevel.Error) {\n      accessibleName = i18nString(UIStrings.errorS, {n: this.repeatCountInternal});\n    } else {\n      accessibleName = i18nString(UIStrings.repeatS, {n: this.repeatCountInternal});\n    }\n    UI.ARIAUtils.setAccessibleName(this.repeatCountElement, accessibleName);\n  }\n\n  get text(): string {\n    return this.message.messageText;\n  }\n\n  toExportString(): string {\n    const lines = [];\n    const nodes = this.contentElement().childTextNodes();\n    const messageContent = nodes.map(Components.Linkifier.Linkifier.untruncatedNodeText).join('');\n    for (let i = 0; i < this.repeatCount(); ++i) {\n      lines.push(messageContent);\n    }\n    return lines.join('\\n');\n  }\n\n  setSearchRegex(regex: RegExp|null): void {\n    if (this.searchHighlightNodeChanges && this.searchHighlightNodeChanges.length) {\n      UI.UIUtils.revertDomChanges(this.searchHighlightNodeChanges);\n    }\n    this.searchRegexInternal = regex;\n    this.searchHighlightNodes = [];\n    this.searchHighlightNodeChanges = [];\n    if (!this.searchRegexInternal) {\n      return;\n    }\n\n    const text = this.contentElement().deepTextContent();\n    let match;\n    this.searchRegexInternal.lastIndex = 0;\n    const sourceRanges = [];\n    while ((match = this.searchRegexInternal.exec(text)) && match[0]) {\n      sourceRanges.push(new TextUtils.TextRange.SourceRange(match.index, match[0].length));\n    }\n\n    if (sourceRanges.length) {\n      this.searchHighlightNodes =\n          UI.UIUtils.highlightSearchResults(this.contentElement(), sourceRanges, this.searchHighlightNodeChanges);\n    }\n  }\n\n  searchRegex(): RegExp|null {\n    return this.searchRegexInternal;\n  }\n\n  searchCount(): number {\n    return this.searchHighlightNodes.length;\n  }\n\n  searchHighlightNode(index: number): Element {\n    return this.searchHighlightNodes[index];\n  }\n\n  private async getInlineFrames(\n      debuggerModel: SDK.DebuggerModel.DebuggerModel, url: Platform.DevToolsPath.UrlString,\n      lineNumber: number|undefined, columnNumber: number|undefined): Promise<{frames: Chrome.DevTools.FunctionInfo[]}> {\n    const debuggerWorkspaceBinding = Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance();\n    if (debuggerWorkspaceBinding.pluginManager) {\n      const projects = Workspace.Workspace.WorkspaceImpl.instance().projects();\n      const uiSourceCodes = projects.map(project => project.uiSourceCodeForURL(url)).flat().filter(f => Boolean(f)) as\n          Workspace.UISourceCode.UISourceCode[];\n      const scripts =\n          uiSourceCodes.map(uiSourceCode => debuggerWorkspaceBinding.scriptsForUISourceCode(uiSourceCode)).flat();\n      if (scripts.length) {\n        const location =\n            new SDK.DebuggerModel.Location(debuggerModel, scripts[0].scriptId, lineNumber || 0, columnNumber);\n        const functionInfo = await debuggerWorkspaceBinding.pluginManager.getFunctionInfo(scripts[0], location);\n        return functionInfo && 'frames' in functionInfo ? functionInfo : {frames: []};\n      }\n    }\n\n    return {frames: []};\n  }\n\n  // Expand inline stack frames in the formatted error in the stackTrace element, inserting new elements before the\n  // insertBefore anchor.\n  private async expandInlineStackFrames(\n      debuggerModel: SDK.DebuggerModel.DebuggerModel, prefix: string, suffix: string,\n      url: Platform.DevToolsPath.UrlString, lineNumber: number|undefined, columnNumber: number|undefined,\n      stackTrace: HTMLElement, insertBefore: HTMLElement): Promise<boolean> {\n    const {frames} = await this.getInlineFrames(debuggerModel, url, lineNumber, columnNumber);\n    if (!frames.length) {\n      return false;\n    }\n\n    for (let f = 0; f < frames.length; ++f) {\n      const {name} = frames[f];\n      const formattedLine = document.createElement('span');\n      formattedLine.appendChild(this.linkifyStringAsFragment(`${prefix} ${name} (`));\n      const scriptLocationLink = this.linkifier.linkifyScriptLocation(\n          debuggerModel.target(), null, url, lineNumber, {columnNumber, inlineFrameIndex: f});\n      scriptLocationLink.tabIndex = -1;\n      this.selectableChildren.push({element: scriptLocationLink, forceSelect: (): void => scriptLocationLink.focus()});\n      formattedLine.appendChild(scriptLocationLink);\n      formattedLine.appendChild(this.linkifyStringAsFragment(suffix));\n      stackTrace.insertBefore(formattedLine, insertBefore);\n    }\n    return true;\n  }\n\n  private createScriptLocationLinkForSyntaxError(\n      debuggerModel: SDK.DebuggerModel.DebuggerModel, exceptionDetails: Protocol.Runtime.ExceptionDetails): HTMLElement\n      |undefined {\n    const {scriptId, lineNumber, columnNumber} = exceptionDetails;\n    if (!scriptId) {\n      return;\n    }\n\n    // SyntaxErrors might not populate the URL field. Try to resolve it via scriptId.\n    const url =\n        exceptionDetails.url as Platform.DevToolsPath.UrlString || debuggerModel.scriptForId(scriptId)?.sourceURL;\n    if (!url) {\n      return;\n    }\n\n    const scriptLocationLink = this.linkifier.linkifyScriptLocation(\n        debuggerModel.target(), exceptionDetails.scriptId || null, url, lineNumber, {\n          columnNumber,\n          inlineFrameIndex: 0,\n          showColumnNumber: true,\n        });\n    scriptLocationLink.tabIndex = -1;\n    return scriptLocationLink;\n  }\n\n  private tryFormatAsError(string: string, exceptionDetails?: Protocol.Runtime.ExceptionDetails): HTMLElement|null {\n    const runtimeModel = this.message.runtimeModel();\n    if (!runtimeModel) {\n      return null;\n    }\n\n    const linkInfos = parseSourcePositionsFromErrorStack(runtimeModel, string);\n    if (!linkInfos?.length) {\n      return null;\n    }\n    if (exceptionDetails?.stackTrace) {\n      augmentErrorStackWithScriptIds(linkInfos, exceptionDetails.stackTrace);\n    }\n\n    const debuggerModel = runtimeModel.debuggerModel();\n    const formattedResult = document.createElement('span');\n    for (let i = 0; i < linkInfos.length; ++i) {\n      const newline = i < linkInfos.length - 1 ? '\\n' : '';\n      const {line, link} = linkInfos[i];\n      // Syntax errors don't have a stack frame that points to the source position\n      // where the error occurred. We use the source location from the\n      // exceptionDetails and append it to the end of the message instead.\n      if (!link && exceptionDetails && line.startsWith('SyntaxError')) {\n        formattedResult.appendChild(this.linkifyStringAsFragment(line));\n        const maybeScriptLocation = this.createScriptLocationLinkForSyntaxError(debuggerModel, exceptionDetails);\n        if (maybeScriptLocation) {\n          formattedResult.append(' (at ');\n          formattedResult.appendChild(maybeScriptLocation);\n          formattedResult.append(')');\n        }\n        formattedResult.append(newline);\n        continue;\n      }\n      if (!link) {\n        formattedResult.appendChild(this.linkifyStringAsFragment(`${line}${newline}`));\n        continue;\n      }\n      const formattedLine = document.createElement('span');\n      const suffix = `${link.suffix}${newline}`;\n      formattedLine.appendChild(this.linkifyStringAsFragment(link.prefix));\n      const scriptLocationLink = this.linkifier.linkifyScriptLocation(\n          debuggerModel.target(), link.scriptId || null, link.url, link.lineNumber, {\n            columnNumber: link.columnNumber,\n            inlineFrameIndex: 0,\n            showColumnNumber: true,\n          });\n      scriptLocationLink.tabIndex = -1;\n      this.selectableChildren.push({element: scriptLocationLink, forceSelect: (): void => scriptLocationLink.focus()});\n      formattedLine.appendChild(scriptLocationLink);\n      formattedLine.appendChild(this.linkifyStringAsFragment(suffix));\n      formattedResult.appendChild(formattedLine);\n\n      if (!link.enclosedInBraces) {\n        continue;\n      }\n\n      const prefixWithoutFunction = link.prefix.substring(0, link.prefix.lastIndexOf(' ', link.prefix.length - 3));\n\n      // If we were able to parse the function name from the stack trace line, try to replace it with an expansion of\n      // any inline frames.\n      const selectableChildIndex = this.selectableChildren.length - 1;\n      void this\n          .expandInlineStackFrames(\n              debuggerModel, prefixWithoutFunction, suffix, link.url, link.lineNumber, link.columnNumber,\n              formattedResult, formattedLine)\n          .then(modified => {\n            if (modified) {\n              formattedResult.removeChild(formattedLine);\n              this.selectableChildren.splice(selectableChildIndex, 1);\n            }\n          });\n    }\n\n    return formattedResult;\n  }\n\n  private linkifyWithCustomLinkifier(\n      string: string,\n      linkifier: (arg0: string, arg1: Platform.DevToolsPath.UrlString, arg2?: number, arg3?: number) => Node):\n      DocumentFragment {\n    if (string.length > getMaxTokenizableStringLength()) {\n      const propertyValue = new ObjectUI.ObjectPropertiesSection.ExpandableTextPropertyValue(\n          document.createElement('span'), string, getLongStringVisibleLength());\n      const fragment = document.createDocumentFragment();\n      fragment.appendChild(propertyValue.element);\n      return fragment;\n    }\n    const container = document.createDocumentFragment();\n    const tokens = ConsoleViewMessage.tokenizeMessageText(string);\n    let isBlob = false;\n    for (const token of tokens) {\n      if (!token.text) {\n        continue;\n      }\n      if (isBlob) {\n        token.text = `blob:${token.text}`;\n        isBlob = !isBlob;\n      }\n      if (token.text === '\\'blob:' && token === tokens[0]) {\n        isBlob = true;\n        token.text = '\\'';\n      }\n      switch (token.type) {\n        case 'url': {\n          const realURL = (token.text.startsWith('www.') ? 'http://' + token.text : token.text);\n          const splitResult = Common.ParsedURL.ParsedURL.splitLineAndColumn(realURL);\n          const sourceURL = Common.ParsedURL.ParsedURL.removeWasmFunctionInfoFromURL(splitResult.url);\n          let linkNode;\n          if (splitResult) {\n            linkNode = linkifier(token.text, sourceURL, splitResult.lineNumber, splitResult.columnNumber);\n          } else {\n            linkNode = linkifier(token.text, Platform.DevToolsPath.EmptyUrlString);\n          }\n          container.appendChild(linkNode);\n          break;\n        }\n        default:\n          container.appendChild(document.createTextNode(token.text));\n          break;\n      }\n    }\n    return container;\n  }\n\n  private linkifyStringAsFragment(string: string): DocumentFragment {\n    return this.linkifyWithCustomLinkifier(string, (text, url, lineNumber, columnNumber) => {\n      const options = {text, lineNumber, columnNumber};\n      const linkElement =\n          Components.Linkifier.Linkifier.linkifyURL(url, (options as Components.Linkifier.LinkifyURLOptions));\n      linkElement.tabIndex = -1;\n      this.selectableChildren.push({element: linkElement, forceSelect: (): void => linkElement.focus()});\n      return linkElement;\n    });\n  }\n\n  private static tokenizeMessageText(string: string): {\n    type?: string, text: string,\n  }[] {\n    const {tokenizerRegexes, tokenizerTypes} = getOrCreateTokenizers();\n    if (string.length > getMaxTokenizableStringLength()) {\n      return [{text: string, type: undefined}];\n    }\n    const results = TextUtils.TextUtils.Utils.splitStringByRegexes(string, tokenizerRegexes);\n    return results.map(result => ({text: result.value, type: tokenizerTypes[result.regexIndex]}));\n  }\n\n  groupKey(): string {\n    if (!this.groupKeyInternal) {\n      this.groupKeyInternal = this.message.groupCategoryKey() + ':' + this.groupTitle();\n    }\n    return this.groupKeyInternal;\n  }\n\n  groupTitle(): string {\n    const tokens = ConsoleViewMessage.tokenizeMessageText(this.message.messageText);\n    const result = tokens.reduce((acc, token) => {\n      let text: Common.UIString.LocalizedString|string = token.text;\n      if (token.type === 'url') {\n        text = i18nString(UIStrings.url);\n      } else if (token.type === 'time') {\n        text = i18nString(UIStrings.tookNms);\n      } else if (token.type === 'event') {\n        text = i18nString(UIStrings.someEvent);\n      } else if (token.type === 'milestone') {\n        text = i18nString(UIStrings.Mxx);\n      } else if (token.type === 'autofill') {\n        text = i18nString(UIStrings.attribute);\n      }\n      return acc + text;\n    }, '');\n    return result.replace(/[%]o/g, '');\n  }\n}\n\nlet tokenizerRegexes: RegExp[]|null = null;\nlet tokenizerTypes: string[]|null = null;\n\nfunction getOrCreateTokenizers(): {\n  tokenizerRegexes: Array<RegExp>,\n  tokenizerTypes: Array<string>,\n} {\n  if (!tokenizerRegexes || !tokenizerTypes) {\n    const controlCodes = '\\\\u0000-\\\\u0020\\\\u007f-\\\\u009f';\n    const linkStringRegex = new RegExp(\n        '(?:[a-zA-Z][a-zA-Z0-9+.-]{2,}:\\\\/\\\\/|data:|www\\\\.)[^\\\\s' + controlCodes + '\"]{2,}[^\\\\s' + controlCodes +\n            '\"\\')}\\\\],:;.!?]',\n        'u');\n    const pathLineRegex = /(?:\\/[\\w\\.-]*)+\\:[\\d]+/;\n    const timeRegex = /took [\\d]+ms/;\n    const eventRegex = /'\\w+' event/;\n    const milestoneRegex = /\\sM[6-7]\\d/;\n    const autofillRegex = /\\(suggested: \\\"[\\w-]+\\\"\\)/;\n    const handlers = new Map<RegExp, string>();\n    handlers.set(linkStringRegex, 'url');\n    handlers.set(pathLineRegex, 'url');\n    handlers.set(timeRegex, 'time');\n    handlers.set(eventRegex, 'event');\n    handlers.set(milestoneRegex, 'milestone');\n    handlers.set(autofillRegex, 'autofill');\n    tokenizerRegexes = Array.from(handlers.keys());\n    tokenizerTypes = Array.from(handlers.values());\n    return {tokenizerRegexes, tokenizerTypes};\n  }\n  return {tokenizerRegexes, tokenizerTypes};\n}\n\nexport class ConsoleGroupViewMessage extends ConsoleViewMessage {\n  private collapsedInternal: boolean;\n  private expandGroupIcon: UI.Icon.Icon|null;\n  private readonly onToggle: () => void;\n  private groupEndMessageInternal: ConsoleViewMessage|null;\n\n  constructor(\n      consoleMessage: SDK.ConsoleModel.ConsoleMessage, linkifier: Components.Linkifier.Linkifier,\n      requestResolver: Logs.RequestResolver.RequestResolver, issueResolver: IssuesManager.IssueResolver.IssueResolver,\n      onToggle: () => void, onResize: (arg0: Common.EventTarget.EventTargetEvent<UI.TreeOutline.TreeElement>) => void) {\n    console.assert(consoleMessage.isGroupStartMessage());\n    super(consoleMessage, linkifier, requestResolver, issueResolver, onResize);\n    this.collapsedInternal = consoleMessage.type === Protocol.Runtime.ConsoleAPICalledEventType.StartGroupCollapsed;\n    this.expandGroupIcon = null;\n    this.onToggle = onToggle;\n    this.groupEndMessageInternal = null;\n  }\n\n  private setCollapsed(collapsed: boolean): void {\n    this.collapsedInternal = collapsed;\n    if (this.expandGroupIcon) {\n      this.expandGroupIcon.setIconType(this.collapsedInternal ? 'smallicon-triangle-right' : 'smallicon-triangle-down');\n    }\n    this.onToggle.call(null);\n  }\n\n  collapsed(): boolean {\n    return this.collapsedInternal;\n  }\n\n  maybeHandleOnKeyDown(event: KeyboardEvent): boolean {\n    const focusedChildIndex = this.focusedChildIndex();\n    if (focusedChildIndex === -1) {\n      if ((event.key === 'ArrowLeft' && !this.collapsedInternal) ||\n          (event.key === 'ArrowRight' && this.collapsedInternal)) {\n        this.setCollapsed(!this.collapsedInternal);\n        return true;\n      }\n    }\n    return super.maybeHandleOnKeyDown(event);\n  }\n\n  toMessageElement(): HTMLElement {\n    let element: HTMLElement|null = this.elementInternal || null;\n    if (!element) {\n      element = super.toMessageElement();\n      const iconType = this.collapsedInternal ? 'smallicon-triangle-right' : 'smallicon-triangle-down';\n      this.expandGroupIcon = UI.Icon.Icon.create(iconType, 'expand-group-icon');\n      // Intercept focus to avoid highlight on click.\n      this.contentElement().tabIndex = -1;\n      if (this.repeatCountElement) {\n        this.repeatCountElement.insertBefore(this.expandGroupIcon, this.repeatCountElement.firstChild);\n      } else {\n        element.insertBefore(this.expandGroupIcon, this.contentElementInternal);\n      }\n      element.addEventListener('click', () => this.setCollapsed(!this.collapsedInternal));\n    }\n    return element;\n  }\n\n  showRepeatCountElement(): void {\n    super.showRepeatCountElement();\n    if (this.repeatCountElement && this.expandGroupIcon) {\n      this.repeatCountElement.insertBefore(this.expandGroupIcon, this.repeatCountElement.firstChild);\n    }\n  }\n\n  messagesHidden(): boolean {\n    if (this.collapsed()) {\n      return true;\n    }\n    const parent = this.consoleGroup();\n    return Boolean(parent && parent.messagesHidden());\n  }\n\n  setGroupEnd(viewMessage: ConsoleViewMessage): void {\n    if (viewMessage.consoleMessage().type !== Protocol.Runtime.ConsoleAPICalledEventType.EndGroup) {\n      throw new Error('Invalid console message as group end');\n    }\n    if (this.groupEndMessageInternal !== null) {\n      throw new Error('Console group already has an end');\n    }\n    this.groupEndMessageInternal = viewMessage;\n  }\n\n  groupEnd(): ConsoleViewMessage|null {\n    return this.groupEndMessageInternal;\n  }\n}\n\nexport class ConsoleCommand extends ConsoleViewMessage {\n  private formattedCommand: HTMLElement|null;\n\n  constructor(\n      consoleMessage: SDK.ConsoleModel.ConsoleMessage, linkifier: Components.Linkifier.Linkifier,\n      requestResolver: Logs.RequestResolver.RequestResolver, issueResolver: IssuesManager.IssueResolver.IssueResolver,\n      onResize: (arg0: Common.EventTarget.EventTargetEvent<UI.TreeOutline.TreeElement>) => void) {\n    super(consoleMessage, linkifier, requestResolver, issueResolver, onResize);\n    this.formattedCommand = null;\n  }\n\n  contentElement(): HTMLElement {\n    const contentElement = this.getContentElement();\n    if (contentElement) {\n      return contentElement;\n    }\n    const newContentElement = document.createElement('div');\n    this.setContentElement(newContentElement);\n    newContentElement.classList.add('console-user-command');\n    const icon = UI.Icon.Icon.create('smallicon-user-command', 'command-result-icon');\n    newContentElement.appendChild(icon);\n\n    elementToMessage.set(newContentElement, this);\n    this.formattedCommand = document.createElement('span');\n    this.formattedCommand.classList.add('source-code');\n    this.formattedCommand.textContent = Platform.StringUtilities.replaceControlCharacters(this.text);\n    newContentElement.appendChild(this.formattedCommand);\n\n    if (this.formattedCommand.textContent.length < MaxLengthToIgnoreHighlighter) {\n      void CodeHighlighter.CodeHighlighter.highlightNode(this.formattedCommand, 'text/javascript')\n          .then(this.updateSearch.bind(this));\n    } else {\n      this.updateSearch();\n    }\n\n    this.updateTimestamp();\n    return newContentElement;\n  }\n\n  private updateSearch(): void {\n    this.setSearchRegex(this.searchRegex());\n  }\n}\n\nexport class ConsoleCommandResult extends ConsoleViewMessage {\n  contentElement(): HTMLElement {\n    const element = super.contentElement();\n    if (!element.classList.contains('console-user-command-result')) {\n      element.classList.add('console-user-command-result');\n      if (this.consoleMessage().level === Protocol.Log.LogEntryLevel.Info) {\n        const icon = UI.Icon.Icon.create('smallicon-command-result', 'command-result-icon');\n        element.insertBefore(icon, element.firstChild);\n      }\n    }\n    return element;\n  }\n}\n\nexport class ConsoleTableMessageView extends ConsoleViewMessage {\n  private dataGrid: DataGrid.SortableDataGrid.SortableDataGrid<unknown>|null;\n\n  constructor(\n      consoleMessage: SDK.ConsoleModel.ConsoleMessage, linkifier: Components.Linkifier.Linkifier,\n      requestResolver: Logs.RequestResolver.RequestResolver, issueResolver: IssuesManager.IssueResolver.IssueResolver,\n      onResize: (arg0: Common.EventTarget.EventTargetEvent<UI.TreeOutline.TreeElement>) => void) {\n    super(consoleMessage, linkifier, requestResolver, issueResolver, onResize);\n    console.assert(consoleMessage.type === Protocol.Runtime.ConsoleAPICalledEventType.Table);\n    this.dataGrid = null;\n  }\n\n  wasShown(): void {\n    if (this.dataGrid) {\n      this.dataGrid.updateWidths();\n    }\n    super.wasShown();\n  }\n\n  onResize(): void {\n    if (!this.isVisible()) {\n      return;\n    }\n    if (this.dataGrid) {\n      this.dataGrid.onResize();\n    }\n  }\n\n  contentElement(): HTMLElement {\n    const contentElement = this.getContentElement();\n    if (contentElement) {\n      return contentElement;\n    }\n\n    const newContentElement = document.createElement('div');\n    newContentElement.classList.add('console-message');\n    if (this.messageLevelIcon) {\n      newContentElement.appendChild(this.messageLevelIcon);\n    }\n    this.setContentElement(newContentElement);\n\n    newContentElement.appendChild(this.buildTableMessage());\n    this.updateTimestamp();\n    return newContentElement;\n  }\n\n  private buildTableMessage(): HTMLElement {\n    const formattedMessage = document.createElement('span');\n    formattedMessage.classList.add('source-code');\n    this.anchorElement = this.buildMessageAnchor();\n    if (this.anchorElement) {\n      formattedMessage.appendChild(this.anchorElement);\n    }\n\n    const table = this.message.parameters && this.message.parameters.length ? this.message.parameters[0] : null;\n    if (!table) {\n      return this.buildMessage();\n    }\n    const actualTable = parameterToRemoteObject(this.message.runtimeModel())(table);\n    if (!actualTable || !actualTable.preview) {\n      return this.buildMessage();\n    }\n\n    const rawValueColumnSymbol = Symbol('rawValueColumn');\n    const columnNames: (string|symbol)[] = [];\n    const preview = actualTable.preview;\n    const rows = [];\n    for (let i = 0; i < preview.properties.length; ++i) {\n      const rowProperty = preview.properties[i];\n      let rowSubProperties: Protocol.Runtime.PropertyPreview[];\n      if (rowProperty.valuePreview && rowProperty.valuePreview.properties.length) {\n        rowSubProperties = rowProperty.valuePreview.properties;\n      } else if (rowProperty.value) {\n        rowSubProperties =\n            [{name: rawValueColumnSymbol as unknown as string, type: rowProperty.type, value: rowProperty.value}];\n      } else {\n        continue;\n      }\n\n      const rowValue = new Map<string|symbol, HTMLElement>();\n      const maxColumnsToRender = 20;\n      for (let j = 0; j < rowSubProperties.length; ++j) {\n        const cellProperty = rowSubProperties[j];\n        let columnRendered: true|boolean = columnNames.indexOf(cellProperty.name) !== -1;\n        if (!columnRendered) {\n          if (columnNames.length === maxColumnsToRender) {\n            continue;\n          }\n          columnRendered = true;\n          columnNames.push(cellProperty.name);\n        }\n\n        if (columnRendered) {\n          const cellElement =\n              this.renderPropertyPreviewOrAccessor(actualTable, cellProperty, [rowProperty, cellProperty]);\n          cellElement.classList.add('console-message-nowrap-below');\n          rowValue.set(cellProperty.name, cellElement);\n        }\n      }\n      rows.push({rowName: rowProperty.name, rowValue});\n    }\n\n    const flatValues = [];\n    for (const {rowName, rowValue} of rows) {\n      flatValues.push(rowName);\n      for (let j = 0; j < columnNames.length; ++j) {\n        flatValues.push(rowValue.get(columnNames[j]));\n      }\n    }\n    columnNames.unshift(i18nString(UIStrings.index));\n    const columnDisplayNames =\n        columnNames.map(name => name === rawValueColumnSymbol ? i18nString(UIStrings.value) : name.toString());\n\n    if (flatValues.length) {\n      this.dataGrid = DataGrid.SortableDataGrid.SortableDataGrid.create(\n          columnDisplayNames, flatValues, i18nString(UIStrings.console));\n      if (this.dataGrid) {\n        this.dataGrid.setStriped(true);\n        this.dataGrid.setFocusable(false);\n\n        const formattedResult = document.createElement('span');\n        formattedResult.classList.add('console-message-text');\n        const tableElement = formattedResult.createChild('div', 'console-message-formatted-table');\n        const dataGridContainer = tableElement.createChild('span');\n        tableElement.appendChild(this.formatParameter(actualTable, true, false));\n        const shadowRoot = dataGridContainer.attachShadow({mode: 'open'});\n        const dataGridWidget = this.dataGrid.asWidget();\n        dataGridWidget.markAsRoot();\n        dataGridWidget.show(shadowRoot as unknown as Element);\n        dataGridWidget.registerCSSFiles([consoleViewStyles, objectValueStyles]);\n        formattedMessage.appendChild(formattedResult);\n        this.dataGrid.renderInline();\n      }\n    }\n    return formattedMessage;\n  }\n\n  approximateFastHeight(): number {\n    const table = this.message.parameters && this.message.parameters[0];\n    if (table && typeof table !== 'string' && table.preview) {\n      return defaultConsoleRowHeight * table.preview.properties.length;\n    }\n    return defaultConsoleRowHeight;\n  }\n}\n\n/**\n * The maximum length before strings are considered too long for syntax highlighting.\n * @const\n */\nconst MaxLengthToIgnoreHighlighter: number = 10000;\n\n/**\n * @const\n */\nexport const MaxLengthForLinks: number = 40;\n\nlet maxTokenizableStringLength = 10000;\nlet longStringVisibleLength = 5000;\n\nexport const getMaxTokenizableStringLength = (): number => {\n  return maxTokenizableStringLength;\n};\n\nexport const setMaxTokenizableStringLength = (length: number): void => {\n  maxTokenizableStringLength = length;\n};\n\nexport const getLongStringVisibleLength = (): number => {\n  return longStringVisibleLength;\n};\n\nexport const setLongStringVisibleLength = (length: number): void => {\n  longStringVisibleLength = length;\n};\n"],
  "mappings": "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",
  "names": []
}
