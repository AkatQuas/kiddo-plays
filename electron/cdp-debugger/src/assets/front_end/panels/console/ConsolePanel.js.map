{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/console/ConsolePanel.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2009 Joseph Pecoraro\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport type * as Common from '../../core/common/common.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {ConsoleView} from './ConsoleView.js';\n\nlet consolePanelInstance: ConsolePanel;\n\nexport class ConsolePanel extends UI.Panel.Panel {\n  private readonly view: ConsoleView;\n  constructor() {\n    super('console');\n    this.view = ConsoleView.instance();\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ConsolePanel {\n    const {forceNew} = opts;\n    if (!consolePanelInstance || forceNew) {\n      consolePanelInstance = new ConsolePanel();\n    }\n\n    return consolePanelInstance;\n  }\n\n  static updateContextFlavor(): void {\n    const consoleView = ConsolePanel.instance().view;\n    UI.Context.Context.instance().setFlavor(ConsoleView, consoleView.isShowing() ? consoleView : null);\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    const wrapper = wrapperViewInstance;\n    if (wrapper && wrapper.isShowing()) {\n      UI.InspectorView.InspectorView.instance().setDrawerMinimized(true);\n    }\n    this.view.show(this.element);\n    ConsolePanel.updateContextFlavor();\n  }\n\n  willHide(): void {\n    super.willHide();\n    // The minimized drawer has 0 height, and showing Console inside may set\n    // Console's scrollTop to 0. Unminimize before calling show to avoid this.\n    UI.InspectorView.InspectorView.instance().setDrawerMinimized(false);\n    if (wrapperViewInstance) {\n      wrapperViewInstance.showViewInWrapper();\n    }\n    ConsolePanel.updateContextFlavor();\n  }\n\n  searchableView(): UI.SearchableView.SearchableView|null {\n    return ConsoleView.instance().searchableView();\n  }\n}\n\nlet wrapperViewInstance: WrapperView|null = null;\n\nexport class WrapperView extends UI.Widget.VBox {\n  private readonly view: ConsoleView;\n\n  private constructor() {\n    super();\n    this.view = ConsoleView.instance();\n  }\n\n  static instance(): WrapperView {\n    if (!wrapperViewInstance) {\n      wrapperViewInstance = new WrapperView();\n    }\n    return wrapperViewInstance;\n  }\n\n  wasShown(): void {\n    if (!ConsolePanel.instance().isShowing()) {\n      this.showViewInWrapper();\n    } else {\n      UI.InspectorView.InspectorView.instance().setDrawerMinimized(true);\n    }\n    ConsolePanel.updateContextFlavor();\n  }\n\n  willHide(): void {\n    UI.InspectorView.InspectorView.instance().setDrawerMinimized(false);\n    ConsolePanel.updateContextFlavor();\n  }\n\n  showViewInWrapper(): void {\n    this.view.show(this.element);\n  }\n}\n\nlet consoleRevealerInstance: ConsoleRevealer;\n\nexport class ConsoleRevealer implements Common.Revealer.Revealer {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ConsoleRevealer {\n    const {forceNew} = opts;\n    if (!consoleRevealerInstance || forceNew) {\n      consoleRevealerInstance = new ConsoleRevealer();\n    }\n\n    return consoleRevealerInstance;\n  }\n\n  async reveal(_object: Object): Promise<void> {\n    const consoleView = ConsoleView.instance();\n    if (consoleView.isShowing()) {\n      consoleView.focus();\n      return;\n    }\n    await UI.ViewManager.ViewManager.instance().showView('console-view');\n  }\n}\n"],
  "mappings": "AAiCA;AAEA;AAEA,IAAI;AAEG,kCAA2B,GAAG,MAAM,MAAM;AAAA,EAC9B;AAAA,EACjB,cAAc;AACZ,UAAM;AACN,SAAK,OAAO,YAAY;AAAA;AAAA,SAGnB,SAAS,OAEZ,EAAC,UAAU,QAAqB;AAClC,UAAM,EAAC,aAAY;AACnB,QAAI,CAAC,wBAAwB,UAAU;AACrC,6BAAuB,IAAI;AAAA;AAG7B,WAAO;AAAA;AAAA,SAGF,sBAA4B;AACjC,UAAM,cAAc,aAAa,WAAW;AAC5C,OAAG,QAAQ,QAAQ,WAAW,UAAU,aAAa,YAAY,cAAc,cAAc;AAAA;AAAA,EAG/F,WAAiB;AACf,UAAM;AACN,UAAM,UAAU;AAChB,QAAI,WAAW,QAAQ,aAAa;AAClC,SAAG,cAAc,cAAc,WAAW,mBAAmB;AAAA;AAE/D,SAAK,KAAK,KAAK,KAAK;AACpB,iBAAa;AAAA;AAAA,EAGf,WAAiB;AACf,UAAM;AAGN,OAAG,cAAc,cAAc,WAAW,mBAAmB;AAC7D,QAAI,qBAAqB;AACvB,0BAAoB;AAAA;AAEtB,iBAAa;AAAA;AAAA,EAGf,iBAAwD;AACtD,WAAO,YAAY,WAAW;AAAA;AAAA;AAIlC,IAAI,sBAAwC;AAErC,iCAA0B,GAAG,OAAO,KAAK;AAAA,EAC7B;AAAA,EAET,cAAc;AACpB;AACA,SAAK,OAAO,YAAY;AAAA;AAAA,SAGnB,WAAwB;AAC7B,QAAI,CAAC,qBAAqB;AACxB,4BAAsB,IAAI;AAAA;AAE5B,WAAO;AAAA;AAAA,EAGT,WAAiB;AACf,QAAI,CAAC,aAAa,WAAW,aAAa;AACxC,WAAK;AAAA,WACA;AACL,SAAG,cAAc,cAAc,WAAW,mBAAmB;AAAA;AAE/D,iBAAa;AAAA;AAAA,EAGf,WAAiB;AACf,OAAG,cAAc,cAAc,WAAW,mBAAmB;AAC7D,iBAAa;AAAA;AAAA,EAGf,oBAA0B;AACxB,SAAK,KAAK,KAAK,KAAK;AAAA;AAAA;AAIxB,IAAI;AAEG,6BAA0D;AAAA,SACxD,SAAS,OAEZ,EAAC,UAAU,QAAwB;AACrC,UAAM,EAAC,aAAY;AACnB,QAAI,CAAC,2BAA2B,UAAU;AACxC,gCAA0B,IAAI;AAAA;AAGhC,WAAO;AAAA;AAAA,QAGH,OAAO,SAAgC;AAC3C,UAAM,cAAc,YAAY;AAChC,QAAI,YAAY,aAAa;AAC3B,kBAAY;AACZ;AAAA;AAEF,UAAM,GAAG,YAAY,YAAY,WAAW,SAAS;AAAA;AAAA;",
  "names": []
}
