{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/console/ConsoleContextSelector.ts"],
  "sourcesContent": ["// Copyright 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport consoleContextSelectorStyles from './consoleContextSelector.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Title of toolbar item in console context selector of the console panel\n  */\n  javascriptContextNotSelected: 'JavaScript context: Not selected',\n  /**\n  *@description Text in Console Context Selector of the Console panel\n  */\n  extension: 'Extension',\n  /**\n  *@description Text in Console Context Selector of the Console panel\n  *@example {top} PH1\n  */\n  javascriptContextS: 'JavaScript context: {PH1}',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/console/ConsoleContextSelector.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class ConsoleContextSelector implements SDK.TargetManager.SDKModelObserver<SDK.RuntimeModel.RuntimeModel>,\n                                               UI.SoftDropDown.Delegate<SDK.RuntimeModel.ExecutionContext> {\n  private readonly items: UI.ListModel.ListModel<SDK.RuntimeModel.ExecutionContext>;\n  private readonly dropDown: UI.SoftDropDown.SoftDropDown<SDK.RuntimeModel.ExecutionContext>;\n  private readonly toolbarItemInternal: UI.Toolbar.ToolbarItem;\n\n  constructor() {\n    this.items = new UI.ListModel.ListModel();\n    this.dropDown = new UI.SoftDropDown.SoftDropDown(this.items, this);\n    this.dropDown.setRowHeight(36);\n    this.toolbarItemInternal = new UI.Toolbar.ToolbarItem(this.dropDown.element);\n    this.toolbarItemInternal.setEnabled(false);\n    this.toolbarItemInternal.setTitle(i18nString(UIStrings.javascriptContextNotSelected));\n    this.items.addEventListener(\n        UI.ListModel.Events.ItemsReplaced, () => this.toolbarItemInternal.setEnabled(Boolean(this.items.length)));\n\n    this.toolbarItemInternal.element.classList.add('toolbar-has-dropdown');\n\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.RuntimeModel.RuntimeModel, SDK.RuntimeModel.Events.ExecutionContextCreated, this.onExecutionContextCreated,\n        this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.RuntimeModel.RuntimeModel, SDK.RuntimeModel.Events.ExecutionContextChanged, this.onExecutionContextChanged,\n        this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.RuntimeModel.RuntimeModel, SDK.RuntimeModel.Events.ExecutionContextDestroyed,\n        this.onExecutionContextDestroyed, this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.FrameNavigated, this.frameNavigated,\n        this);\n\n    UI.Context.Context.instance().addFlavorChangeListener(\n        SDK.RuntimeModel.ExecutionContext, this.executionContextChangedExternally, this);\n    UI.Context.Context.instance().addFlavorChangeListener(\n        SDK.DebuggerModel.CallFrame, this.callFrameSelectedInUI, this);\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.RuntimeModel.RuntimeModel, this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.DebuggerModel.DebuggerModel, SDK.DebuggerModel.Events.CallFrameSelected, this.callFrameSelectedInModel,\n        this);\n  }\n\n  toolbarItem(): UI.Toolbar.ToolbarItem {\n    return this.toolbarItemInternal;\n  }\n\n  highlightedItemChanged(\n      from: SDK.RuntimeModel.ExecutionContext|null, to: SDK.RuntimeModel.ExecutionContext|null,\n      fromElement: Element|null, toElement: Element|null): void {\n    SDK.OverlayModel.OverlayModel.hideDOMNodeHighlight();\n    if (to && to.frameId) {\n      const frame = SDK.FrameManager.FrameManager.instance().getFrame(to.frameId);\n      if (frame && !frame.isTopFrame()) {\n        void frame.highlight();\n      }\n    }\n    if (fromElement) {\n      fromElement.classList.remove('highlighted');\n    }\n    if (toElement) {\n      toElement.classList.add('highlighted');\n    }\n  }\n\n  titleFor(executionContext: SDK.RuntimeModel.ExecutionContext): string {\n    const target = executionContext.target();\n    const maybeLabel = executionContext.label();\n    let label: string = maybeLabel ? target.decorateLabel(maybeLabel) : '';\n    if (executionContext.frameId) {\n      const resourceTreeModel = target.model(SDK.ResourceTreeModel.ResourceTreeModel);\n      const frame = resourceTreeModel && resourceTreeModel.frameForId(executionContext.frameId);\n      if (frame) {\n        label = label || frame.displayName();\n      }\n    }\n    label = label || executionContext.origin;\n\n    return label;\n  }\n\n  private depthFor(executionContext: SDK.RuntimeModel.ExecutionContext): number {\n    let target = executionContext.target();\n    let depth = 0;\n    if (!executionContext.isDefault) {\n      depth++;\n    }\n    if (executionContext.frameId) {\n      let frame = SDK.FrameManager.FrameManager.instance().getFrame(executionContext.frameId);\n      while (frame) {\n        frame = frame.parentFrame();\n        if (frame) {\n          depth++;\n          target = frame.resourceTreeModel().target();\n        }\n      }\n    }\n    let targetDepth = 0;\n    let parentTarget = target.parentTarget();\n    // Special casing service workers to be top-level.\n    while (parentTarget && target.type() !== SDK.Target.Type.ServiceWorker) {\n      targetDepth++;\n      target = parentTarget;\n      parentTarget = target.parentTarget();\n    }\n    depth += targetDepth;\n    return depth;\n  }\n\n  private executionContextCreated(executionContext: SDK.RuntimeModel.ExecutionContext): void {\n    this.items.insertWithComparator(executionContext, executionContext.runtimeModel.executionContextComparator());\n\n    if (executionContext === UI.Context.Context.instance().flavor(SDK.RuntimeModel.ExecutionContext)) {\n      this.dropDown.selectItem(executionContext);\n    }\n  }\n\n  private onExecutionContextCreated(event: Common.EventTarget.EventTargetEvent<SDK.RuntimeModel.ExecutionContext>):\n      void {\n    const executionContext = event.data;\n    this.executionContextCreated(executionContext);\n  }\n\n  private onExecutionContextChanged(event: Common.EventTarget.EventTargetEvent<SDK.RuntimeModel.ExecutionContext>):\n      void {\n    const executionContext = event.data;\n    if (this.items.indexOf(executionContext) === -1) {\n      return;\n    }\n    this.executionContextDestroyed(executionContext);\n    this.executionContextCreated(executionContext);\n  }\n\n  private executionContextDestroyed(executionContext: SDK.RuntimeModel.ExecutionContext): void {\n    const index = this.items.indexOf(executionContext);\n    if (index === -1) {\n      return;\n    }\n    this.items.remove(index);\n  }\n\n  private onExecutionContextDestroyed(event: Common.EventTarget.EventTargetEvent<SDK.RuntimeModel.ExecutionContext>):\n      void {\n    const executionContext = event.data;\n    this.executionContextDestroyed(executionContext);\n  }\n\n  private executionContextChangedExternally({\n    data: executionContext,\n  }: Common.EventTarget.EventTargetEvent<SDK.RuntimeModel.ExecutionContext|null>): void {\n    this.dropDown.selectItem(executionContext);\n  }\n\n  private isTopContext(executionContext: SDK.RuntimeModel.ExecutionContext|null): boolean {\n    if (!executionContext || !executionContext.isDefault) {\n      return false;\n    }\n    const resourceTreeModel = executionContext.target().model(SDK.ResourceTreeModel.ResourceTreeModel);\n    const frame =\n        executionContext.frameId && resourceTreeModel && resourceTreeModel.frameForId(executionContext.frameId);\n    if (!frame) {\n      return false;\n    }\n    return frame.isTopFrame();\n  }\n\n  private hasTopContext(): boolean {\n    return this.items.some(executionContext => this.isTopContext(executionContext));\n  }\n\n  modelAdded(runtimeModel: SDK.RuntimeModel.RuntimeModel): void {\n    runtimeModel.executionContexts().forEach(this.executionContextCreated, this);\n  }\n\n  modelRemoved(runtimeModel: SDK.RuntimeModel.RuntimeModel): void {\n    for (let i = this.items.length - 1; i >= 0; i--) {\n      if (this.items.at(i).runtimeModel === runtimeModel) {\n        this.executionContextDestroyed(this.items.at(i));\n      }\n    }\n  }\n\n  createElementForItem(item: SDK.RuntimeModel.ExecutionContext): Element {\n    const element = document.createElement('div');\n    const shadowRoot = UI.Utils.createShadowRootWithCoreStyles(\n        element, {cssFile: [consoleContextSelectorStyles], delegatesFocus: undefined});\n    const title = shadowRoot.createChild('div', 'title');\n    UI.UIUtils.createTextChild(title, Platform.StringUtilities.trimEndWithMaxLength(this.titleFor(item), 100));\n    const subTitle = shadowRoot.createChild('div', 'subtitle');\n    UI.UIUtils.createTextChild(subTitle, this.subtitleFor(item));\n    element.style.paddingLeft = (8 + this.depthFor(item) * 15) + 'px';\n    return element;\n  }\n\n  private subtitleFor(executionContext: SDK.RuntimeModel.ExecutionContext): string {\n    const target = executionContext.target();\n    let frame: SDK.ResourceTreeModel.ResourceTreeFrame|null = null;\n    if (executionContext.frameId) {\n      const resourceTreeModel = target.model(SDK.ResourceTreeModel.ResourceTreeModel);\n      frame = resourceTreeModel && resourceTreeModel.frameForId(executionContext.frameId);\n    }\n    if (executionContext.origin.startsWith('chrome-extension://')) {\n      return i18nString(UIStrings.extension);\n    }\n    const sameTargetParentFrame = frame && frame.sameTargetParentFrame();\n    // TODO(crbug.com/1159332): Understand why condition involves the sameTargetParentFrame.\n    if (!frame || !sameTargetParentFrame || sameTargetParentFrame.securityOrigin !== executionContext.origin) {\n      const url = Common.ParsedURL.ParsedURL.fromString(executionContext.origin);\n      if (url) {\n        return url.domain();\n      }\n    }\n\n    if (frame && frame.securityOrigin) {\n      const domain = new Common.ParsedURL.ParsedURL(frame.securityOrigin).domain();\n      if (domain) {\n        return domain;\n      }\n    }\n    return 'IFrame';\n  }\n\n  isItemSelectable(item: SDK.RuntimeModel.ExecutionContext): boolean {\n    const callFrame = item.debuggerModel.selectedCallFrame();\n    const callFrameContext = callFrame && callFrame.script.executionContext();\n    return !callFrameContext || item === callFrameContext;\n  }\n\n  itemSelected(item: SDK.RuntimeModel.ExecutionContext|null): void {\n    this.toolbarItemInternal.element.classList.toggle('highlight', !this.isTopContext(item) && this.hasTopContext());\n    const title = item ? i18nString(UIStrings.javascriptContextS, {PH1: this.titleFor(item)}) :\n                         i18nString(UIStrings.javascriptContextNotSelected);\n    this.toolbarItemInternal.setTitle(title);\n    UI.Context.Context.instance().setFlavor(SDK.RuntimeModel.ExecutionContext, item);\n  }\n\n  private callFrameSelectedInUI(): void {\n    const callFrame = UI.Context.Context.instance().flavor(SDK.DebuggerModel.CallFrame);\n    const callFrameContext = callFrame && callFrame.script.executionContext();\n    if (callFrameContext) {\n      UI.Context.Context.instance().setFlavor(SDK.RuntimeModel.ExecutionContext, callFrameContext);\n    }\n  }\n\n  private callFrameSelectedInModel(event: Common.EventTarget.EventTargetEvent<SDK.DebuggerModel.DebuggerModel>): void {\n    const debuggerModel = event.data;\n    for (const executionContext of this.items) {\n      if (executionContext.debuggerModel === debuggerModel) {\n        this.dropDown.refreshItem(executionContext);\n      }\n    }\n  }\n\n  private frameNavigated(event: Common.EventTarget.EventTargetEvent<SDK.ResourceTreeModel.ResourceTreeFrame>): void {\n    const frame = event.data;\n    const runtimeModel = frame.resourceTreeModel().target().model(SDK.RuntimeModel.RuntimeModel);\n    if (!runtimeModel) {\n      return;\n    }\n    for (const executionContext of runtimeModel.executionContexts()) {\n      if (frame.id === executionContext.frameId) {\n        this.dropDown.refreshItem(executionContext);\n      }\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
