{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/issues/IssuesPane.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport * as IssuesManager from '../../models/issues_manager/issues_manager.js';\nimport * as IssueCounter from '../../ui/components/issue_counter/issue_counter.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {HiddenIssuesRow} from './HiddenIssuesRow.js';\nimport issuesPaneStyles from './issuesPane.css.js';\nimport issuesTreeStyles from './issuesTree.css.js';\n\nimport type {AggregatedIssue, AggregationKey} from './IssueAggregator.js';\nimport {Events as IssueAggregatorEvents, IssueAggregator} from './IssueAggregator.js';\nimport {IssueView} from './IssueView.js';\nimport {IssueKindView, getGroupIssuesByKindSetting, issueKindViewSortPriority} from './IssueKindView.js';\n\nconst UIStrings = {\n  /**\n   * @description Category title for a group of cross origin embedder policy (COEP) issues\n   */\n  crossOriginEmbedderPolicy: 'Cross Origin Embedder Policy',\n  /**\n   * @description Category title for a group of mixed content issues\n   */\n  mixedContent: 'Mixed Content',\n  /**\n   * @description Category title for a group of SameSite cookie issues\n   */\n  samesiteCookie: 'SameSite Cookie',\n  /**\n   * @description Category title for a group of heavy ads issues\n   */\n  heavyAds: 'Heavy Ads',\n  /**\n   * @description Category title for a group of content security policy (CSP) issues\n   */\n  contentSecurityPolicy: 'Content Security Policy',\n  /**\n   * @description Category title for a group of trusted web activity issues\n   */\n  trustedWebActivity: 'Trusted Web Activity',\n  /**\n   * @description Text for other types of items\n   */\n  other: 'Other',\n  /**\n   * @description Category title for the different 'low text contrast' issues. Low text contrast refers\n   *              to the difference between the color of a text and the background color where that text\n   *              appears.\n   */\n  lowTextContrast: 'Low Text Contrast',\n  /**\n   * @description Category title for the different 'Cross-Origin Resource Sharing' (CORS) issues. CORS\n   *              refers to one origin (e.g 'a.com') loading resources from another origin (e.g. 'b.com').\n   */\n  cors: 'Cross Origin Resource Sharing',\n  /**\n   * @description Title for a checkbox which toggles grouping by category in the issues tab\n   */\n  groupDisplayedIssuesUnder: 'Group displayed issues under associated categories',\n  /**\n   * @description Label for a checkbox which toggles grouping by category in the issues tab\n   */\n  groupByCategory: 'Group by category',\n  /**\n  * @description Title for a checkbox which toggles grouping by kind in the issues tab\n    */\n  groupDisplayedIssuesUnderKind: 'Group displayed issues as Page errors, Breaking changes and Improvements',\n  /**\n  * @description Label for a checkbox which toggles grouping by kind in the issues tab\n    */\n  groupByKind: 'Group by kind',\n  /**\n   * @description Title for a checkbox. Whether the issues tab should include third-party issues or not.\n   */\n  includeCookieIssuesCausedBy: 'Include cookie Issues caused by third-party sites',\n  /**\n   * @description Label for a checkbox. Whether the issues tab should include third-party issues or not.\n   */\n  includeThirdpartyCookieIssues: 'Include third-party cookie issues',\n  /**\n   * @description Label on the issues tab\n   */\n  onlyThirdpartyCookieIssues: 'Only third-party cookie issues detected so far',\n  /**\n   * @description Label in the issues panel\n   */\n  noIssuesDetectedSoFar: 'No issues detected so far',\n  /**\n   * @description Category title for the different 'Attribution Reporting API' issues. The\n   * Attribution Reporting API is a newly proposed web API (see https://github.com/WICG/conversion-measurement-api).\n   */\n  attributionReporting: 'Attribution Reporting `API`',\n  /**\n   * @description Category title for the different 'Quirks Mode' issues. Quirks Mode refers\n   *              to the legacy browser modes that displays web content according to outdated\n   *              browser behaviors.\n   */\n  quirksMode: 'Quirks Mode',\n  /**\n   * @description Category title for the different 'Generic' issues.\n   */\n  generic: 'Generic',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/issues/IssuesPane.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nclass IssueCategoryView extends UI.TreeOutline.TreeElement {\n  #category: IssuesManager.Issue.IssueCategory;\n\n  constructor(category: IssuesManager.Issue.IssueCategory) {\n    super();\n    this.#category = category;\n\n    this.toggleOnClick = true;\n    this.listItemElement.classList.add('issue-category');\n    this.childrenListElement.classList.add('issue-category-body');\n  }\n\n  getCategoryName(): string {\n    switch (this.#category) {\n      case IssuesManager.Issue.IssueCategory.CrossOriginEmbedderPolicy:\n        return i18nString(UIStrings.crossOriginEmbedderPolicy);\n      case IssuesManager.Issue.IssueCategory.MixedContent:\n        return i18nString(UIStrings.mixedContent);\n      case IssuesManager.Issue.IssueCategory.Cookie:\n        return i18nString(UIStrings.samesiteCookie);\n      case IssuesManager.Issue.IssueCategory.HeavyAd:\n        return i18nString(UIStrings.heavyAds);\n      case IssuesManager.Issue.IssueCategory.ContentSecurityPolicy:\n        return i18nString(UIStrings.contentSecurityPolicy);\n      case IssuesManager.Issue.IssueCategory.TrustedWebActivity:\n        return i18nString(UIStrings.trustedWebActivity);\n      case IssuesManager.Issue.IssueCategory.LowTextContrast:\n        return i18nString(UIStrings.lowTextContrast);\n      case IssuesManager.Issue.IssueCategory.Cors:\n        return i18nString(UIStrings.cors);\n      case IssuesManager.Issue.IssueCategory.AttributionReporting:\n        return i18nString(UIStrings.attributionReporting);\n      case IssuesManager.Issue.IssueCategory.QuirksMode:\n        return i18nString(UIStrings.quirksMode);\n      case IssuesManager.Issue.IssueCategory.Generic:\n        return i18nString(UIStrings.generic);\n      case IssuesManager.Issue.IssueCategory.Other:\n        return i18nString(UIStrings.other);\n    }\n  }\n\n  onattach(): void {\n    this.#appendHeader();\n  }\n\n  #appendHeader(): void {\n    const header = document.createElement('div');\n    header.classList.add('header');\n\n    const title = document.createElement('div');\n    title.classList.add('title');\n    title.textContent = this.getCategoryName();\n    header.appendChild(title);\n\n    this.listItemElement.appendChild(header);\n  }\n}\n\nexport function getGroupIssuesByCategorySetting(): Common.Settings.Setting<boolean> {\n  return Common.Settings.Settings.instance().createSetting('groupIssuesByCategory', false);\n}\n\nlet issuesPaneInstance: IssuesPane;\n\nexport class IssuesPane extends UI.Widget.VBox {\n  #categoryViews: Map<IssuesManager.Issue.IssueCategory, IssueCategoryView>;\n  #issueViews: Map<AggregationKey, IssueView>;\n  #kindViews: Map<IssuesManager.Issue.IssueKind, IssueKindView>;\n  #showThirdPartyCheckbox: UI.Toolbar.ToolbarSettingCheckbox|null;\n  #issuesTree: UI.TreeOutline.TreeOutlineInShadow;\n  #hiddenIssuesRow: HiddenIssuesRow;\n  #noIssuesMessageDiv: HTMLDivElement;\n  #issuesManager: IssuesManager.IssuesManager.IssuesManager;\n  #aggregator: IssueAggregator;\n  #issueViewUpdatePromise: Promise<void> = Promise.resolve();\n\n  private constructor() {\n    super(true);\n\n    this.contentElement.classList.add('issues-pane');\n\n    this.#categoryViews = new Map();\n    this.#kindViews = new Map();\n    this.#issueViews = new Map();\n    this.#showThirdPartyCheckbox = null;\n\n    this.#createToolbars();\n\n    this.#issuesTree = new UI.TreeOutline.TreeOutlineInShadow();\n\n    this.#issuesTree.setShowSelectionOnKeyboardFocus(true);\n    this.#issuesTree.contentElement.classList.add('issues');\n    this.contentElement.appendChild(this.#issuesTree.element);\n\n    this.#hiddenIssuesRow = new HiddenIssuesRow();\n    this.#issuesTree.appendChild(this.#hiddenIssuesRow);\n\n    this.#noIssuesMessageDiv = document.createElement('div');\n    this.#noIssuesMessageDiv.classList.add('issues-pane-no-issues');\n    this.contentElement.appendChild(this.#noIssuesMessageDiv);\n\n    this.#issuesManager = IssuesManager.IssuesManager.IssuesManager.instance();\n    this.#aggregator = new IssueAggregator(this.#issuesManager);\n    this.#aggregator.addEventListener(IssueAggregatorEvents.AggregatedIssueUpdated, this.#issueUpdated, this);\n    this.#aggregator.addEventListener(IssueAggregatorEvents.FullUpdateRequired, this.#onFullUpdate, this);\n    this.#hiddenIssuesRow.hidden = this.#issuesManager.numberOfHiddenIssues() === 0;\n    this.#onFullUpdate();\n    this.#issuesManager.addEventListener(\n        IssuesManager.IssuesManager.Events.IssuesCountUpdated, this.#updateCounts, this);\n  }\n\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): IssuesPane {\n    const {forceNew} = opts;\n    if (!issuesPaneInstance || forceNew) {\n      issuesPaneInstance = new IssuesPane();\n    }\n\n    return issuesPaneInstance;\n  }\n\n  elementsToRestoreScrollPositionsFor(): Element[] {\n    return [this.#issuesTree.element];\n  }\n\n  #createToolbars(): {toolbarContainer: Element} {\n    const toolbarContainer = this.contentElement.createChild('div', 'issues-toolbar-container');\n    new UI.Toolbar.Toolbar('issues-toolbar-left', toolbarContainer);\n    const rightToolbar = new UI.Toolbar.Toolbar('issues-toolbar-right', toolbarContainer);\n\n    const groupByCategorySetting = getGroupIssuesByCategorySetting();\n    const groupByCategoryCheckbox = new UI.Toolbar.ToolbarSettingCheckbox(\n        groupByCategorySetting, i18nString(UIStrings.groupDisplayedIssuesUnder), i18nString(UIStrings.groupByCategory));\n    // Hide the option to toggle category grouping for now.\n    groupByCategoryCheckbox.setVisible(false);\n    rightToolbar.appendToolbarItem(groupByCategoryCheckbox);\n    groupByCategorySetting.addChangeListener(() => {\n      this.#fullUpdate(true);\n    });\n\n    const groupByKindSetting = getGroupIssuesByKindSetting();\n    const groupByKindSettingCheckbox = new UI.Toolbar.ToolbarSettingCheckbox(\n        groupByKindSetting, i18nString(UIStrings.groupDisplayedIssuesUnderKind), i18nString(UIStrings.groupByKind));\n    rightToolbar.appendToolbarItem(groupByKindSettingCheckbox);\n    groupByKindSetting.addChangeListener(() => {\n      this.#fullUpdate(true);\n    });\n    groupByKindSettingCheckbox.setVisible(Root.Runtime.experiments.isEnabled('groupAndHideIssuesByKind'));\n\n    const thirdPartySetting = IssuesManager.Issue.getShowThirdPartyIssuesSetting();\n    this.#showThirdPartyCheckbox = new UI.Toolbar.ToolbarSettingCheckbox(\n        thirdPartySetting, i18nString(UIStrings.includeCookieIssuesCausedBy),\n        i18nString(UIStrings.includeThirdpartyCookieIssues));\n    rightToolbar.appendToolbarItem(this.#showThirdPartyCheckbox);\n    this.setDefaultFocusedElement(this.#showThirdPartyCheckbox.inputElement);\n\n    rightToolbar.appendSeparator();\n    const issueCounter = new IssueCounter.IssueCounter.IssueCounter();\n    issueCounter.data = {\n      tooltipCallback: (): void => {\n        const issueEnumeration = IssueCounter.IssueCounter.getIssueCountsEnumeration(\n            IssuesManager.IssuesManager.IssuesManager.instance(), false);\n        issueCounter.title = issueEnumeration;\n      },\n      displayMode: IssueCounter.IssueCounter.DisplayMode.ShowAlways,\n      issuesManager: IssuesManager.IssuesManager.IssuesManager.instance(),\n    };\n    issueCounter.id = 'console-issues-counter';\n    const issuesToolbarItem = new UI.Toolbar.ToolbarItem(issueCounter);\n    rightToolbar.appendToolbarItem(issuesToolbarItem);\n\n    return {toolbarContainer};\n  }\n\n  #issueUpdated(event: Common.EventTarget.EventTargetEvent<AggregatedIssue>): void {\n    this.#scheduleIssueViewUpdate(event.data);\n  }\n\n  #scheduleIssueViewUpdate(issue: AggregatedIssue): void {\n    this.#issueViewUpdatePromise = this.#issueViewUpdatePromise.then(() => this.#updateIssueView(issue));\n  }\n\n  /** Don't call directly. Use `scheduleIssueViewUpdate` instead. */\n  async #updateIssueView(issue: AggregatedIssue): Promise<void> {\n    let issueView = this.#issueViews.get(issue.aggregationKey());\n    if (!issueView) {\n      const description = issue.getDescription();\n      if (!description) {\n        console.warn('Could not find description for issue code:', issue.code());\n        return;\n      }\n      const markdownDescription =\n          await IssuesManager.MarkdownIssueDescription.createIssueDescriptionFromMarkdown(description);\n      issueView = new IssueView(issue, markdownDescription);\n      this.#issueViews.set(issue.aggregationKey(), issueView);\n      const parent = this.#getIssueViewParent(issue);\n      this.appendIssueViewToParent(issueView, parent);\n    } else {\n      issueView.setIssue(issue);\n      const newParent = this.#getIssueViewParent(issue);\n      if (issueView.parent !== newParent &&\n          !(newParent instanceof UI.TreeOutline.TreeOutline && issueView.parent === newParent.rootElement())) {\n        issueView.parent?.removeChild(issueView);\n        this.appendIssueViewToParent(issueView, newParent);\n      }\n    }\n    issueView.update();\n    this.#updateCounts();\n  }\n\n  appendIssueViewToParent(issueView: IssueView, parent: UI.TreeOutline.TreeOutline|UI.TreeOutline.TreeElement): void {\n    parent.appendChild(issueView, (a, b) => {\n      if (a instanceof HiddenIssuesRow) {\n        return 1;\n      }\n      if (b instanceof HiddenIssuesRow) {\n        return -1;\n      }\n      if (a instanceof IssueView && b instanceof IssueView) {\n        return a.getIssueTitle().localeCompare(b.getIssueTitle());\n      }\n      console.error('The issues tree should only contain IssueView objects as direct children');\n      return 0;\n    });\n  }\n\n  #getIssueViewParent(issue: AggregatedIssue): UI.TreeOutline.TreeOutline|UI.TreeOutline.TreeElement {\n    const groupByKind = Root.Runtime.experiments.isEnabled('groupAndHideIssuesByKind');\n    if (issue.isHidden()) {\n      return this.#hiddenIssuesRow;\n    }\n    if (groupByKind && getGroupIssuesByKindSetting().get()) {\n      const kind = issue.getKind();\n      const view = this.#kindViews.get(kind);\n      if (view) {\n        return view;\n      }\n\n      const newView = new IssueKindView(kind);\n      this.#issuesTree.appendChild(newView, (a, b) => {\n        if (a instanceof IssueKindView && b instanceof IssueKindView) {\n          return issueKindViewSortPriority(a, b);\n        }\n        return 0;\n      });\n      this.#kindViews.set(kind, newView);\n      return newView;\n    }\n    if (getGroupIssuesByCategorySetting().get()) {\n      const category = issue.getCategory();\n      const view = this.#categoryViews.get(category);\n      if (view) {\n        return view;\n      }\n\n      const newView = new IssueCategoryView(category);\n      this.#issuesTree.appendChild(newView, (a, b) => {\n        if (a instanceof IssueCategoryView && b instanceof IssueCategoryView) {\n          return a.getCategoryName().localeCompare(b.getCategoryName());\n        }\n        return 0;\n      });\n      this.#categoryViews.set(category, newView);\n      return newView;\n    }\n    return this.#issuesTree;\n  }\n\n  #clearViews<T>(views: Map<T, UI.TreeOutline.TreeElement>, preservedSet?: Set<T>): void {\n    for (const [key, view] of Array.from(views.entries())) {\n      if (preservedSet?.has(key)) {\n        continue;\n      }\n      view.parent && view.parent.removeChild(view);\n      views.delete(key);\n    }\n  }\n\n  #onFullUpdate(): void {\n    this.#fullUpdate(false);\n  }\n\n  #fullUpdate(force: boolean): void {\n    this.#clearViews(this.#categoryViews, force ? undefined : this.#aggregator.aggregatedIssueCategories());\n    this.#clearViews(this.#kindViews, force ? undefined : this.#aggregator.aggregatedIssueKinds());\n    this.#clearViews(this.#issueViews, force ? undefined : this.#aggregator.aggregatedIssueCodes());\n    if (this.#aggregator) {\n      for (const issue of this.#aggregator.aggregatedIssues()) {\n        this.#scheduleIssueViewUpdate(issue);\n      }\n    }\n    this.#updateCounts();\n  }\n\n  #updateIssueKindViewsCount(): void {\n    for (const view of this.#kindViews.values()) {\n      const count = this.#issuesManager.numberOfIssues(view.getKind());\n      view.update(count);\n    }\n  }\n\n  #updateCounts(): void {\n    const groupByKind = Root.Runtime.experiments.isEnabled('groupAndHideIssuesByKind');\n    this.#showIssuesTreeOrNoIssuesDetectedMessage(\n        this.#issuesManager.numberOfIssues(), this.#issuesManager.numberOfHiddenIssues());\n    if (groupByKind && getGroupIssuesByKindSetting().get()) {\n      this.#updateIssueKindViewsCount();\n    }\n  }\n\n  #showIssuesTreeOrNoIssuesDetectedMessage(issuesCount: number, hiddenIssueCount: number): void {\n    if (issuesCount > 0 || hiddenIssueCount > 0) {\n      this.#hiddenIssuesRow.hidden = hiddenIssueCount === 0;\n      this.#hiddenIssuesRow.update(hiddenIssueCount);\n      this.#issuesTree.element.hidden = false;\n      this.#noIssuesMessageDiv.style.display = 'none';\n      const firstChild = this.#issuesTree.firstChild();\n      if (firstChild) {\n        firstChild.select(/* omitFocus= */ true);\n        this.setDefaultFocusedElement(firstChild.listItemElement);\n      }\n    } else {\n      this.#issuesTree.element.hidden = true;\n      if (this.#showThirdPartyCheckbox) {\n        this.setDefaultFocusedElement(this.#showThirdPartyCheckbox.inputElement);\n      }\n      // We alreay know that issesCount is zero here.\n      const hasOnlyThirdPartyIssues = this.#issuesManager.numberOfAllStoredIssues() > 0;\n      this.#noIssuesMessageDiv.textContent = hasOnlyThirdPartyIssues ?\n          i18nString(UIStrings.onlyThirdpartyCookieIssues) :\n          i18nString(UIStrings.noIssuesDetectedSoFar);\n      this.#noIssuesMessageDiv.style.display = 'flex';\n    }\n  }\n\n  async reveal(issue: IssuesManager.Issue.Issue): Promise<void> {\n    await this.#issueViewUpdatePromise;\n    const key = this.#aggregator.keyForIssue(issue);\n    const issueView = this.#issueViews.get(key);\n    const groupByKind = Root.Runtime.experiments.isEnabled('groupAndHideIssuesByKind');\n    if (issueView) {\n      if (issueView.isForHiddenIssue()) {\n        this.#hiddenIssuesRow.expand();\n        this.#hiddenIssuesRow.reveal();\n      }\n      if (groupByKind && getGroupIssuesByKindSetting().get() && !issueView.isForHiddenIssue()) {\n        const kindView = this.#kindViews.get(issueView.getIssueKind());\n        kindView?.expand();\n        kindView?.reveal();\n      }\n      issueView.expand();\n      issueView.reveal();\n      issueView.select(false, true);\n    }\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    this.#issuesTree.registerCSSFiles([issuesTreeStyles]);\n    this.registerCSSFiles([issuesPaneStyles]);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
