{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/issues/AffectedResourcesView.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as IssuesManager from '../../models/issues_manager/issues_manager.js';\nimport * as Logs from '../../models/logs/logs.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport type * as NetworkForward from '../../panels/network/forward/forward.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as RequestLinkIcon from '../../ui/components/request_link_icon/request_link_icon.js';\n\nimport type {IssueView} from './IssueView.js';\nimport type {AggregatedIssue} from './IssueAggregator.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Object Properties Section\n  */\n  unknown: 'unknown',\n  /**\n  *@description Tooltip for button linking to the Elements panel\n  */\n  clickToRevealTheFramesDomNodeIn: 'Click to reveal the frame\\'s DOM node in the Elements panel',\n  /**\n  *@description Replacement text for a link to an HTML element which is not available (anymore).\n  */\n  unavailable: 'unavailable',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/issues/AffectedResourcesView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport const enum AffectedItem {\n  Cookie = 'Cookie',\n  Directive = 'Directive',\n  Element = 'Element',\n  LearnMore = 'LearnMore',\n  Request = 'Request',\n  Source = 'Source',\n}\n\nexport const extractShortPath = (path: Platform.DevToolsPath.UrlString): string => {\n  // 1st regex matches everything after last '/'\n  // if path ends with '/', 2nd regex returns everything between the last two '/'\n  return (/[^/]+$/.exec(path) || /[^/]+\\/$/.exec(path) || [''])[0];\n};\n\nexport interface CreateRequestCellOptions {\n  linkToPreflight?: boolean;\n  highlightHeader?: {section: NetworkForward.UIRequestLocation.UIHeaderSection, name: string};\n  networkTab?: NetworkForward.UIRequestLocation.UIRequestTabs;\n  additionalOnClickAction?: () => void;\n}\n\n/**\n * The base class for all affected resource views. It provides basic scaffolding\n * as well as machinery for resolving request and frame ids to SDK objects.\n */\nexport abstract class AffectedResourcesView extends UI.TreeOutline.TreeElement {\n  readonly #parentView: IssueView;\n  protected issue: AggregatedIssue;\n  protected affectedResourcesCountElement: HTMLElement;\n  protected affectedResources: HTMLElement;\n  #affectedResourcesCount: number;\n  #frameListeners: Common.EventTarget.EventDescriptor[];\n  #unresolvedFrameIds: Set<string>;\n  protected requestResolver: Logs.RequestResolver.RequestResolver;\n\n  constructor(parent: IssueView, issue: AggregatedIssue) {\n    super();\n    this.#parentView = parent;\n    this.issue = issue;\n    this.toggleOnClick = true;\n    this.affectedResourcesCountElement = this.createAffectedResourcesCounter();\n\n    this.affectedResources = this.createAffectedResources();\n    this.#affectedResourcesCount = 0;\n    this.requestResolver = new Logs.RequestResolver.RequestResolver();\n    this.#frameListeners = [];\n    this.#unresolvedFrameIds = new Set();\n  }\n\n  /**\n   * Sets the issue to take the resources from. Does not\n   * trigger an update, the caller needs to do that explicitly.\n   */\n  setIssue(issue: AggregatedIssue): void {\n    this.issue = issue;\n  }\n\n  createAffectedResourcesCounter(): HTMLElement {\n    const counterLabel = document.createElement('div');\n    counterLabel.classList.add('affected-resource-label');\n    this.listItemElement.appendChild(counterLabel);\n    return counterLabel;\n  }\n\n  createAffectedResources(): HTMLElement {\n    const body = new UI.TreeOutline.TreeElement();\n    const affectedResources = document.createElement('table');\n    affectedResources.classList.add('affected-resource-list');\n    body.listItemElement.appendChild(affectedResources);\n    this.appendChild(body);\n\n    return affectedResources;\n  }\n\n  protected abstract getResourceNameWithCount(count: number): string;\n\n  protected updateAffectedResourceCount(count: number): void {\n    this.#affectedResourcesCount = count;\n    this.affectedResourcesCountElement.textContent = this.getResourceNameWithCount(count);\n    this.hidden = this.#affectedResourcesCount === 0;\n    this.#parentView.updateAffectedResourceVisibility();\n  }\n\n  isEmpty(): boolean {\n    return this.#affectedResourcesCount === 0;\n  }\n\n  clear(): void {\n    this.affectedResources.textContent = '';\n    this.requestResolver.clear();\n  }\n\n  expandIfOneResource(): void {\n    if (this.#affectedResourcesCount === 1) {\n      this.expand();\n    }\n  }\n\n  /**\n   * This function resolves a frameId to a ResourceTreeFrame. If the frameId does not resolve, or hasn't navigated yet,\n   * a listener is installed that takes care of updating the view if the frame is added. This is useful if the issue is\n   * added before the frame gets reported.\n   */\n  #resolveFrameId(frameId: Protocol.Page.FrameId): SDK.ResourceTreeModel.ResourceTreeFrame|null {\n    const frame = SDK.FrameManager.FrameManager.instance().getFrame(frameId);\n    if (!frame || !frame.url) {\n      this.#unresolvedFrameIds.add(frameId);\n      if (!this.#frameListeners.length) {\n        const addListener = SDK.FrameManager.FrameManager.instance().addEventListener(\n            SDK.FrameManager.Events.FrameAddedToTarget, this.#onFrameChanged, this);\n        const navigateListener = SDK.FrameManager.FrameManager.instance().addEventListener(\n            SDK.FrameManager.Events.FrameNavigated, this.#onFrameChanged, this);\n        this.#frameListeners = [addListener, navigateListener];\n      }\n    }\n    return frame;\n  }\n\n  #onFrameChanged(event: Common.EventTarget.EventTargetEvent<{frame: SDK.ResourceTreeModel.ResourceTreeFrame}>): void {\n    const frame = event.data.frame;\n    if (!frame.url) {\n      return;\n    }\n    const frameWasUnresolved = this.#unresolvedFrameIds.delete(frame.id);\n    if (this.#unresolvedFrameIds.size === 0 && this.#frameListeners.length) {\n      // Stop listening once all requests are resolved.\n      Common.EventTarget.removeEventListeners(this.#frameListeners);\n      this.#frameListeners = [];\n    }\n    if (frameWasUnresolved) {\n      this.update();\n    }\n  }\n\n  protected createFrameCell(frameId: Protocol.Page.FrameId, issueCategory: IssuesManager.Issue.IssueCategory):\n      HTMLElement {\n    const frame = this.#resolveFrameId(frameId);\n    const url = frame && (frame.unreachableUrl() || frame.url) || i18nString(UIStrings.unknown);\n\n    const frameCell = document.createElement('td');\n    frameCell.classList.add('affected-resource-cell');\n    if (frame) {\n      const icon = new IconButton.Icon.Icon();\n      icon.data = {iconName: 'elements_panel_icon', color: 'var(--color-link)', width: '16px', height: '16px'};\n      icon.classList.add('link', 'elements-panel');\n      icon.onclick = async(): Promise<void> => {\n        Host.userMetrics.issuesPanelResourceOpened(issueCategory, AffectedItem.Element);\n        const frame = SDK.FrameManager.FrameManager.instance().getFrame(frameId);\n        if (frame) {\n          const ownerNode = await frame.getOwnerDOMNodeOrDocument();\n          if (ownerNode) {\n            void Common.Revealer.reveal(ownerNode);\n          }\n        }\n      };\n      icon.title = i18nString(UIStrings.clickToRevealTheFramesDomNodeIn);\n      frameCell.appendChild(icon);\n    }\n    frameCell.appendChild(document.createTextNode(url));\n    frameCell.onmouseenter = (): void => {\n      const frame = SDK.FrameManager.FrameManager.instance().getFrame(frameId);\n      if (frame) {\n        void frame.highlight();\n      }\n    };\n    frameCell.onmouseleave = (): void => SDK.OverlayModel.OverlayModel.hideDOMNodeHighlight();\n    return frameCell;\n  }\n\n  protected createRequestCell(affectedRequest: Protocol.Audits.AffectedRequest, options: CreateRequestCellOptions = {}):\n      HTMLElement {\n    const requestCell = document.createElement('td');\n    requestCell.classList.add('affected-resource-cell');\n    const requestLinkIcon = new RequestLinkIcon.RequestLinkIcon.RequestLinkIcon();\n    requestLinkIcon.data = {...options, affectedRequest, requestResolver: this.requestResolver, displayURL: true};\n    requestCell.appendChild(requestLinkIcon);\n    return requestCell;\n  }\n\n  protected async createElementCell(\n      {backendNodeId, nodeName, target}: IssuesManager.Issue.AffectedElement,\n      issueCategory: IssuesManager.Issue.IssueCategory): Promise<Element> {\n    if (!target) {\n      const cellElement = document.createElement('td');\n      cellElement.textContent = nodeName || i18nString(UIStrings.unavailable);\n      return cellElement;\n    }\n\n    function sendTelemetry(): void {\n      Host.userMetrics.issuesPanelResourceOpened(issueCategory, AffectedItem.Element);\n    }\n\n    const deferredDOMNode = new SDK.DOMModel.DeferredDOMNode(target, backendNodeId);\n    const anchorElement = (await Common.Linkifier.Linkifier.linkify(deferredDOMNode)) as HTMLElement;\n    anchorElement.textContent = nodeName;\n    anchorElement.addEventListener('click', () => sendTelemetry());\n    anchorElement.addEventListener('keydown', (event: Event) => {\n      if ((event as KeyboardEvent).key === 'Enter') {\n        sendTelemetry();\n      }\n    });\n    const cellElement = document.createElement('td');\n    cellElement.classList.add('affected-resource-element', 'devtools-link');\n    cellElement.appendChild(anchorElement);\n    return cellElement;\n  }\n\n  protected appendSourceLocation(\n      element: HTMLElement,\n      sourceLocation: {url: string, scriptId?: Protocol.Runtime.ScriptId, lineNumber: number, columnNumber?: number}|\n      undefined,\n      target: SDK.Target.Target|null|undefined): void {\n    const sourceCodeLocation = document.createElement('td');\n    sourceCodeLocation.classList.add('affected-source-location');\n    if (sourceLocation) {\n      const maxLengthForDisplayedURLs = 40;  // Same as console messages.\n      // TODO(crbug.com/1108503): Add some mechanism to be able to add telemetry to this element.\n      const linkifier = new Components.Linkifier.Linkifier(maxLengthForDisplayedURLs);\n      const sourceAnchor = linkifier.linkifyScriptLocation(\n          target || null, sourceLocation.scriptId || null, sourceLocation.url as Platform.DevToolsPath.UrlString,\n          sourceLocation.lineNumber, {columnNumber: sourceLocation.columnNumber, inlineFrameIndex: 0});\n      sourceCodeLocation.appendChild(sourceAnchor);\n    }\n    element.appendChild(sourceCodeLocation);\n  }\n\n  protected appendColumnTitle(header: HTMLElement, title: string, additionalClass: string|null = null): void {\n    const info = document.createElement('td');\n    info.classList.add('affected-resource-header');\n    if (additionalClass) {\n      info.classList.add(additionalClass);\n    }\n    info.textContent = title;\n    header.appendChild(info);\n  }\n\n  protected createIssueDetailCell(textContent: string, additionalClass: string|null = null): HTMLTableDataCellElement {\n    const cell = document.createElement('td');\n    cell.textContent = textContent;\n    if (additionalClass) {\n      cell.classList.add(additionalClass);\n    }\n    return cell;\n  }\n\n  protected appendIssueDetailCell(element: HTMLElement, textContent: string, additionalClass: string|null = null):\n      HTMLTableDataCellElement {\n    const cell = this.createIssueDetailCell(textContent, additionalClass);\n    element.appendChild(cell);\n    return cell;\n  }\n\n  abstract update(): void;\n}\n"],
  "mappings": "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",
  "names": []
}
