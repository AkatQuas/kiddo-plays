{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/issues/IssueRevealer.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as IssuesManager from '../../models/issues_manager/issues_manager.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport {IssuesPane} from './IssuesPane.js';\n\nlet issueRevealerInstance: IssueRevealer;\n\nexport class IssueRevealer implements Common.Revealer.Revealer {\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): IssueRevealer {\n    const {forceNew} = opts;\n    if (!issueRevealerInstance || forceNew) {\n      issueRevealerInstance = new IssueRevealer();\n    }\n    return issueRevealerInstance;\n  }\n\n  async reveal(issue: Object): Promise<void> {\n    if (!(issue instanceof IssuesManager.Issue.Issue)) {\n      throw new Error('Internal error: not a issue');\n    }\n    await UI.ViewManager.ViewManager.instance().showView('issues-pane');\n    const view = UI.ViewManager.ViewManager.instance().view('issues-pane');\n    if (view) {\n      const issuesPane = await view.widget();\n      if (issuesPane instanceof IssuesPane) {\n        await issuesPane.reveal(issue);\n      } else {\n        throw new Error('Expected issues pane to be an instance of IssuesPane');\n      }\n    }\n  }\n}\n"],
  "mappings": "AAKA;AACA;AACA;AAEA,IAAI;AAEG,2BAAwD;AAAA,SACtD,SAAS,OAAiC,EAAC,UAAU,QAAsB;AAChF,UAAM,EAAC,aAAY;AACnB,QAAI,CAAC,yBAAyB,UAAU;AACtC,8BAAwB,IAAI;AAAA;AAE9B,WAAO;AAAA;AAAA,QAGH,OAAO,OAA8B;AACzC,QAAI,CAAE,kBAAiB,cAAc,MAAM,QAAQ;AACjD,YAAM,IAAI,MAAM;AAAA;AAElB,UAAM,GAAG,YAAY,YAAY,WAAW,SAAS;AACrD,UAAM,OAAO,GAAG,YAAY,YAAY,WAAW,KAAK;AACxD,QAAI,MAAM;AACR,YAAM,aAAa,MAAM,KAAK;AAC9B,UAAI,sBAAsB,YAAY;AACpC,cAAM,WAAW,OAAO;AAAA,aACnB;AACL,cAAM,IAAI,MAAM;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
