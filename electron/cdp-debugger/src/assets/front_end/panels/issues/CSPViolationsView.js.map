{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/issues/CSPViolationsView.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as IssuesManager from '../../models/issues_manager/issues_manager.js';\n\nimport cspViolationsViewStyles from './cspViolationsView.css.js';\n\nimport type * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {ComboBoxOfCheckBoxes} from './ComboBoxOfCheckBoxes.js';\nimport {CSPViolationsListView} from './CSPViolationsListView.js';\n\nconst UIStrings = {\n  /**\n  *@description Text to filter result items\n  */\n  filter: 'Filter',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/issues/CSPViolationsView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet cspViolationsViewInstance: CSPViolationsView;\nexport class CSPViolationsView extends UI.Widget.VBox {\n  #listView = new CSPViolationsListView();\n  #issuesManager = IssuesManager.IssuesManager.IssuesManager.instance();\n\n  /**\n   * @private\n   */\n  constructor() {\n    super(true);\n\n    this.contentElement.classList.add('csp-violations-pane');\n\n    const topToolbar = new UI.Toolbar.Toolbar('csp-violations-toolbar', this.contentElement);\n    const textFilterUI = new UI.Toolbar.ToolbarInput(i18nString(UIStrings.filter), '', 1, .2, '');\n    textFilterUI.addEventListener(UI.Toolbar.ToolbarInput.Event.TextChanged, () => {\n      this.#listView.updateTextFilter(textFilterUI.value());\n    });\n    topToolbar.appendToolbarItem(textFilterUI);\n\n    const levelMenuButton = new ComboBoxOfCheckBoxes('Categories');\n    levelMenuButton.setText('Categories');\n    levelMenuButton.addOption(\n        'Trusted Type Policy', IssuesManager.ContentSecurityPolicyIssue.trustedTypesPolicyViolationCode, true);\n    levelMenuButton.addOption(\n        'Trusted Type Sink', IssuesManager.ContentSecurityPolicyIssue.trustedTypesSinkViolationCode, true);\n    levelMenuButton.addOption('CSP Inline', IssuesManager.ContentSecurityPolicyIssue.inlineViolationCode, true);\n    levelMenuButton.addOption('CSP Eval', IssuesManager.ContentSecurityPolicyIssue.evalViolationCode, true);\n    levelMenuButton.addOption('CSP URL', IssuesManager.ContentSecurityPolicyIssue.urlViolationCode, true);\n    levelMenuButton.addHeader('Reset', () => {\n      levelMenuButton.getOptions().forEach((x, i) => levelMenuButton.setOptionEnabled(i, x.default));\n    });\n    levelMenuButton.setOnOptionClicked(() => {\n      const categories = new Set(levelMenuButton.getOptions().filter(x => x.enabled).map(x => x.value));\n      this.#listView.updateCategoryFilter(categories);\n    });\n    topToolbar.appendToolbarItem(levelMenuButton);\n    this.#listView.show(this.contentElement);\n\n    this.#issuesManager.addEventListener(IssuesManager.IssuesManager.Events.IssueAdded, this.#onIssueAdded, this);\n    this.#issuesManager.addEventListener(\n        IssuesManager.IssuesManager.Events.FullUpdateRequired, this.#onFullUpdateRequired, this);\n\n    this.#addAllIssues();\n  }\n\n  static instance(opts = {forceNew: null}): CSPViolationsView {\n    const {forceNew} = opts;\n    if (!cspViolationsViewInstance || forceNew) {\n      cspViolationsViewInstance = new CSPViolationsView();\n    }\n\n    return cspViolationsViewInstance;\n  }\n\n  #onIssueAdded(event: Common.EventTarget.EventTargetEvent<IssuesManager.IssuesManager.IssueAddedEvent>): void {\n    const {issue} = event.data;\n    if (issue instanceof IssuesManager.ContentSecurityPolicyIssue.ContentSecurityPolicyIssue) {\n      this.#listView.addIssue(issue);\n    }\n  }\n\n  #onFullUpdateRequired(): void {\n    this.#listView.clearIssues();\n    this.#addAllIssues();\n  }\n\n  #addAllIssues(): void {\n    for (const issue of this.#issuesManager.issues()) {\n      if (issue instanceof IssuesManager.ContentSecurityPolicyIssue.ContentSecurityPolicyIssue) {\n        this.#listView.addIssue(issue);\n      }\n    }\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([cspViolationsViewStyles]);\n  }\n}\n"],
  "mappings": "AAIA;AAEA;AAGA;AACA;AAEA;AACA;AAEA,MAAM,YAAY;AAAA,EAIhB,QAAQ;AAAA;AAEV,MAAM,OAAO,KAAK,KAAK,kBAAkB,sCAAsC;AAC/E,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAChE,IAAI;AACG,uCAAgC,GAAG,OAAO,KAAK;AAAA,cACxC,IAAI;AAAA,mBACC,cAAc,cAAc,cAAc;AAAA,EAK3D,cAAc;AACZ,UAAM;AAEN,SAAK,eAAe,UAAU,IAAI;AAElC,UAAM,aAAa,IAAI,GAAG,QAAQ,QAAQ,0BAA0B,KAAK;AACzE,UAAM,eAAe,IAAI,GAAG,QAAQ,aAAa,WAAW,UAAU,SAAS,IAAI,GAAG,KAAI;AAC1F,iBAAa,iBAAiB,GAAG,QAAQ,aAAa,MAAM,aAAa,MAAM;AAC7E,qBAAe,iBAAiB,aAAa;AAAA;AAE/C,eAAW,kBAAkB;AAE7B,UAAM,kBAAkB,IAAI,qBAAqB;AACjD,oBAAgB,QAAQ;AACxB,oBAAgB,UACZ,uBAAuB,cAAc,2BAA2B,iCAAiC;AACrG,oBAAgB,UACZ,qBAAqB,cAAc,2BAA2B,+BAA+B;AACjG,oBAAgB,UAAU,cAAc,cAAc,2BAA2B,qBAAqB;AACtG,oBAAgB,UAAU,YAAY,cAAc,2BAA2B,mBAAmB;AAClG,oBAAgB,UAAU,WAAW,cAAc,2BAA2B,kBAAkB;AAChG,oBAAgB,UAAU,SAAS,MAAM;AACvC,sBAAgB,aAAa,QAAQ,CAAC,GAAG,MAAM,gBAAgB,iBAAiB,GAAG,EAAE;AAAA;AAEvF,oBAAgB,mBAAmB,MAAM;AACvC,YAAM,aAAa,IAAI,IAAI,gBAAgB,aAAa,OAAO,OAAK,EAAE,SAAS,IAAI,OAAK,EAAE;AAC1F,qBAAe,qBAAqB;AAAA;AAEtC,eAAW,kBAAkB;AAC7B,mBAAe,KAAK,KAAK;AAEzB,wBAAoB,iBAAiB,cAAc,cAAc,OAAO,YAAY,oBAAoB;AACxG,wBAAoB,iBAChB,cAAc,cAAc,OAAO,oBAAoB,4BAA4B;AAEvF;AAAA;AAAA,SAGK,SAAS,OAAO,EAAC,UAAU,QAA0B;AAC1D,UAAM,EAAC,aAAY;AACnB,QAAI,CAAC,6BAA6B,UAAU;AAC1C,kCAA4B,IAAI;AAAA;AAGlC,WAAO;AAAA;AAAA,gBAGK,OAA+F;AAC3G,UAAM,EAAC,UAAS,MAAM;AACtB,QAAI,iBAAiB,cAAc,2BAA2B,4BAA4B;AACxF,qBAAe,SAAS;AAAA;AAAA;AAAA,0BAIE;AAC5B,mBAAe;AACf;AAAA;AAAA,kBAGoB;AACpB,eAAW,SAAS,oBAAoB,UAAU;AAChD,UAAI,iBAAiB,cAAc,2BAA2B,4BAA4B;AACxF,uBAAe,SAAS;AAAA;AAAA;AAAA;AAAA,EAI9B,WAAiB;AACf,UAAM;AACN,SAAK,iBAAiB,CAAC;AAAA;AAAA;",
  "names": []
}
