{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/issues/IssueAggregator.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as IssuesManager from '../../models/issues_manager/issues_manager.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\ntype AggregationKeyTag = {\n  aggregationKeyTag: undefined,\n};\n\n/**\n * An opaque type for the key which we use to aggregate issues. The key must be\n * chosen such that if two aggregated issues have the same aggregation key, then\n * they also have the same issue code.\n */\nexport type AggregationKey = {\n  toString(): string,\n}&AggregationKeyTag;\n\n/**\n * An `AggregatedIssue` representes a number of `IssuesManager.Issue.Issue` objects that are displayed together.\n * Currently only grouping by issue code, is supported. The class provides helpers to support displaying\n * of all resources that are affected by the aggregated issues.\n */\nexport class AggregatedIssue extends IssuesManager.Issue.Issue {\n  #affectedCookies = new Map<string, {\n    cookie: Protocol.Audits.AffectedCookie,\n    hasRequest: boolean,\n  }>();\n  #affectedRawCookieLines = new Map<string, {rawCookieLine: string, hasRequest: boolean}>();\n  #affectedRequests = new Map<string, Protocol.Audits.AffectedRequest>();\n  #affectedLocations = new Map<string, Protocol.Audits.SourceCodeLocation>();\n  #heavyAdIssues = new Set<IssuesManager.HeavyAdIssue.HeavyAdIssue>();\n  #blockedByResponseDetails = new Map<string, Protocol.Audits.BlockedByResponseIssueDetails>();\n  #corsIssues = new Set<IssuesManager.CorsIssue.CorsIssue>();\n  #cspIssues = new Set<IssuesManager.ContentSecurityPolicyIssue.ContentSecurityPolicyIssue>();\n  #deprecationIssues = new Set<IssuesManager.DeprecationIssue.DeprecationIssue>();\n  #issueKind = IssuesManager.Issue.IssueKind.Improvement;\n  #lowContrastIssues = new Set<IssuesManager.LowTextContrastIssue.LowTextContrastIssue>();\n  #mixedContentIssues = new Set<IssuesManager.MixedContentIssue.MixedContentIssue>();\n  #sharedArrayBufferIssues = new Set<IssuesManager.SharedArrayBufferIssue.SharedArrayBufferIssue>();\n  #trustedWebActivityIssues = new Set<IssuesManager.TrustedWebActivityIssue.TrustedWebActivityIssue>();\n  #quirksModeIssues = new Set<IssuesManager.QuirksModeIssue.QuirksModeIssue>();\n  #attributionReportingIssues = new Set<IssuesManager.AttributionReportingIssue.AttributionReportingIssue>();\n  #genericIssues = new Set<IssuesManager.GenericIssue.GenericIssue>();\n  #representative?: IssuesManager.Issue.Issue;\n  #aggregatedIssuesCount = 0;\n  #key: AggregationKey;\n\n  constructor(code: string, aggregationKey: AggregationKey) {\n    super(code);\n    this.#key = aggregationKey;\n  }\n\n  override primaryKey(): string {\n    throw new Error('This should never be called');\n  }\n\n  aggregationKey(): AggregationKey {\n    return this.#key;\n  }\n\n  getBlockedByResponseDetails(): Iterable<Protocol.Audits.BlockedByResponseIssueDetails> {\n    return this.#blockedByResponseDetails.values();\n  }\n\n  cookies(): Iterable<Protocol.Audits.AffectedCookie> {\n    return Array.from(this.#affectedCookies.values()).map(x => x.cookie);\n  }\n\n  getRawCookieLines(): Iterable<{rawCookieLine: string, hasRequest: boolean}> {\n    return this.#affectedRawCookieLines.values();\n  }\n\n  sources(): Iterable<Protocol.Audits.SourceCodeLocation> {\n    return this.#affectedLocations.values();\n  }\n\n  cookiesWithRequestIndicator(): Iterable<{\n    cookie: Protocol.Audits.AffectedCookie,\n    hasRequest: boolean,\n  }> {\n    return this.#affectedCookies.values();\n  }\n\n  getHeavyAdIssues(): Iterable<IssuesManager.HeavyAdIssue.HeavyAdIssue> {\n    return this.#heavyAdIssues;\n  }\n\n  getMixedContentIssues(): Iterable<IssuesManager.MixedContentIssue.MixedContentIssue> {\n    return this.#mixedContentIssues;\n  }\n\n  getTrustedWebActivityIssues(): Iterable<IssuesManager.TrustedWebActivityIssue.TrustedWebActivityIssue> {\n    return this.#trustedWebActivityIssues;\n  }\n\n  getCorsIssues(): Set<IssuesManager.CorsIssue.CorsIssue> {\n    return this.#corsIssues;\n  }\n\n  getCspIssues(): Iterable<IssuesManager.ContentSecurityPolicyIssue.ContentSecurityPolicyIssue> {\n    return this.#cspIssues;\n  }\n\n  getDeprecationIssues(): Iterable<IssuesManager.DeprecationIssue.DeprecationIssue> {\n    return this.#deprecationIssues;\n  }\n\n  getLowContrastIssues(): Iterable<IssuesManager.LowTextContrastIssue.LowTextContrastIssue> {\n    return this.#lowContrastIssues;\n  }\n\n  requests(): Iterable<Protocol.Audits.AffectedRequest> {\n    return this.#affectedRequests.values();\n  }\n\n  getSharedArrayBufferIssues(): Iterable<IssuesManager.SharedArrayBufferIssue.SharedArrayBufferIssue> {\n    return this.#sharedArrayBufferIssues;\n  }\n\n  getQuirksModeIssues(): Iterable<IssuesManager.QuirksModeIssue.QuirksModeIssue> {\n    return this.#quirksModeIssues;\n  }\n\n  getAttributionReportingIssues(): ReadonlySet<IssuesManager.AttributionReportingIssue.AttributionReportingIssue> {\n    return this.#attributionReportingIssues;\n  }\n\n  getGenericIssues(): ReadonlySet<IssuesManager.GenericIssue.GenericIssue> {\n    return this.#genericIssues;\n  }\n\n  getDescription(): IssuesManager.MarkdownIssueDescription.MarkdownIssueDescription|null {\n    if (this.#representative) {\n      return this.#representative.getDescription();\n    }\n    return null;\n  }\n\n  getCategory(): IssuesManager.Issue.IssueCategory {\n    if (this.#representative) {\n      return this.#representative.getCategory();\n    }\n    return IssuesManager.Issue.IssueCategory.Other;\n  }\n\n  getAggregatedIssuesCount(): number {\n    return this.#aggregatedIssuesCount;\n  }\n\n  /**\n   * Produces a primary key for a cookie. Use this instead of `JSON.stringify` in\n   * case new fields are added to `AffectedCookie`.\n   */\n  #keyForCookie(cookie: Protocol.Audits.AffectedCookie): string {\n    const {domain, path, name} = cookie;\n    return `${domain};${path};${name}`;\n  }\n\n  addInstance(issue: IssuesManager.Issue.Issue): void {\n    this.#aggregatedIssuesCount++;\n    if (!this.#representative) {\n      this.#representative = issue;\n    }\n    this.#issueKind = IssuesManager.Issue.unionIssueKind(this.#issueKind, issue.getKind());\n    let hasRequest = false;\n    for (const request of issue.requests()) {\n      hasRequest = true;\n      if (!this.#affectedRequests.has(request.requestId)) {\n        this.#affectedRequests.set(request.requestId, request);\n      }\n    }\n    for (const cookie of issue.cookies()) {\n      const key = this.#keyForCookie(cookie);\n      if (!this.#affectedCookies.has(key)) {\n        this.#affectedCookies.set(key, {cookie, hasRequest});\n      }\n    }\n    for (const rawCookieLine of issue.rawCookieLines()) {\n      if (!this.#affectedRawCookieLines.has(rawCookieLine)) {\n        this.#affectedRawCookieLines.set(rawCookieLine, {rawCookieLine, hasRequest});\n      }\n    }\n    for (const location of issue.sources()) {\n      const key = JSON.stringify(location);\n      if (!this.#affectedLocations.has(key)) {\n        this.#affectedLocations.set(key, location);\n      }\n    }\n    if (issue instanceof IssuesManager.MixedContentIssue.MixedContentIssue) {\n      this.#mixedContentIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.HeavyAdIssue.HeavyAdIssue) {\n      this.#heavyAdIssues.add(issue);\n    }\n    for (const details of issue.getBlockedByResponseDetails()) {\n      const key = JSON.stringify(details, ['parentFrame', 'blockedFrame', 'requestId', 'frameId', 'reason', 'request']);\n      this.#blockedByResponseDetails.set(key, details);\n    }\n    if (issue instanceof IssuesManager.TrustedWebActivityIssue.TrustedWebActivityIssue) {\n      this.#trustedWebActivityIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.ContentSecurityPolicyIssue.ContentSecurityPolicyIssue) {\n      this.#cspIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.DeprecationIssue.DeprecationIssue) {\n      this.#deprecationIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.SharedArrayBufferIssue.SharedArrayBufferIssue) {\n      this.#sharedArrayBufferIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.LowTextContrastIssue.LowTextContrastIssue) {\n      this.#lowContrastIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.CorsIssue.CorsIssue) {\n      this.#corsIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.QuirksModeIssue.QuirksModeIssue) {\n      this.#quirksModeIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.AttributionReportingIssue.AttributionReportingIssue) {\n      this.#attributionReportingIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.GenericIssue.GenericIssue) {\n      this.#genericIssues.add(issue);\n    }\n  }\n\n  getKind(): IssuesManager.Issue.IssueKind {\n    return this.#issueKind;\n  }\n\n  isHidden(): boolean {\n    return this.#representative?.isHidden() || false;\n  }\n\n  setHidden(_value: boolean): void {\n    throw new Error('Should not call setHidden on aggregatedIssue');\n  }\n}\n\nexport class IssueAggregator extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  readonly #aggregatedIssuesByKey = new Map<AggregationKey, AggregatedIssue>();\n  readonly #hiddenAggregatedIssuesByKey = new Map<AggregationKey, AggregatedIssue>();\n  constructor(private readonly issuesManager: IssuesManager.IssuesManager.IssuesManager) {\n    super();\n    this.issuesManager.addEventListener(IssuesManager.IssuesManager.Events.IssueAdded, this.#onIssueAdded, this);\n    this.issuesManager.addEventListener(\n        IssuesManager.IssuesManager.Events.FullUpdateRequired, this.#onFullUpdateRequired, this);\n    for (const issue of this.issuesManager.issues()) {\n      this.#aggregateIssue(issue);\n    }\n  }\n\n  #onIssueAdded(event: Common.EventTarget.EventTargetEvent<IssuesManager.IssuesManager.IssueAddedEvent>): void {\n    this.#aggregateIssue(event.data.issue);\n  }\n\n  #onFullUpdateRequired(): void {\n    this.#aggregatedIssuesByKey.clear();\n    this.#hiddenAggregatedIssuesByKey.clear();\n    for (const issue of this.issuesManager.issues()) {\n      this.#aggregateIssue(issue);\n    }\n    this.dispatchEventToListeners(Events.FullUpdateRequired);\n  }\n\n  #aggregateIssue(issue: IssuesManager.Issue.Issue): AggregatedIssue {\n    const map = issue.isHidden() ? this.#hiddenAggregatedIssuesByKey : this.#aggregatedIssuesByKey;\n    const aggregatedIssue = this.#aggregateIssueByStatus(map, issue);\n    this.dispatchEventToListeners(Events.AggregatedIssueUpdated, aggregatedIssue);\n    return aggregatedIssue;\n  }\n\n  #aggregateIssueByStatus(aggregatedIssuesMap: Map<AggregationKey, AggregatedIssue>, issue: IssuesManager.Issue.Issue):\n      AggregatedIssue {\n    const key = issue.code() as unknown as AggregationKey;\n    let aggregatedIssue = aggregatedIssuesMap.get(key);\n    if (!aggregatedIssue) {\n      aggregatedIssue = new AggregatedIssue(issue.code(), key);\n      aggregatedIssuesMap.set(key, aggregatedIssue);\n    }\n    aggregatedIssue.addInstance(issue);\n    return aggregatedIssue;\n  }\n\n  aggregatedIssues(): Iterable<AggregatedIssue> {\n    return [...this.#aggregatedIssuesByKey.values(), ...this.#hiddenAggregatedIssuesByKey.values()];\n  }\n\n  hiddenAggregatedIssues(): Iterable<AggregatedIssue> {\n    return this.#hiddenAggregatedIssuesByKey.values();\n  }\n\n  aggregatedIssueCodes(): Set<AggregationKey> {\n    return new Set([...this.#aggregatedIssuesByKey.keys(), ...this.#hiddenAggregatedIssuesByKey.keys()]);\n  }\n\n  aggregatedIssueCategories(): Set<IssuesManager.Issue.IssueCategory> {\n    const result = new Set<IssuesManager.Issue.IssueCategory>();\n    for (const issue of this.#aggregatedIssuesByKey.values()) {\n      result.add(issue.getCategory());\n    }\n    return result;\n  }\n\n  aggregatedIssueKinds(): Set<IssuesManager.Issue.IssueKind> {\n    const result = new Set<IssuesManager.Issue.IssueKind>();\n    for (const issue of this.#aggregatedIssuesByKey.values()) {\n      result.add(issue.getKind());\n    }\n    return result;\n  }\n\n  numberOfAggregatedIssues(): number {\n    return this.#aggregatedIssuesByKey.size;\n  }\n\n  numberOfHiddenAggregatedIssues(): number {\n    return this.#hiddenAggregatedIssuesByKey.size;\n  }\n\n  keyForIssue(issue: IssuesManager.Issue.Issue<string>): AggregationKey {\n    return issue.code() as unknown as AggregationKey;\n  }\n}\n\nexport const enum Events {\n  AggregatedIssueUpdated = 'AggregatedIssueUpdated',\n  FullUpdateRequired = 'FullUpdateRequired',\n}\n\nexport type EventTypes = {\n  [Events.AggregatedIssueUpdated]: AggregatedIssue,\n  [Events.FullUpdateRequired]: void,\n};\n"],
  "mappings": "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",
  "names": []
}
