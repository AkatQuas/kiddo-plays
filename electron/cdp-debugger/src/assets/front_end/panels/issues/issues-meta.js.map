{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/issues/issues-meta.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Root from '../../core/root/root.js';\nimport * as IssuesManager from '../../models/issues_manager/issues_manager.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type * as Issues from './issues.js';\n\nimport * as i18n from '../../core/i18n/i18n.js';\nconst UIStrings = {\n  /**\n  *@description Label for the issues pane\n  */\n  issues: 'Issues',\n  /**\n  *@description Command for showing the 'Issues' tool\n  */\n  showIssues: 'Show Issues',\n  /**\n  *@description Title for a tab drawer listing CSP Violations\n  */\n  cspViolations: 'CSP Violations',\n  /**\n  *@description Command for showing the 'CSP Violations' tool\n  */\n  showCspViolations: 'Show CSP Violations',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/issues/issues-meta.ts', UIStrings);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\nlet loadedIssuesModule: (typeof Issues|undefined);\n\nasync function loadIssuesModule(): Promise<typeof Issues> {\n  if (!loadedIssuesModule) {\n    loadedIssuesModule = await import('./issues.js');\n  }\n  return loadedIssuesModule;\n}\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.DRAWER_VIEW,\n  id: 'issues-pane',\n  title: i18nLazyString(UIStrings.issues),\n  commandPrompt: i18nLazyString(UIStrings.showIssues),\n  order: 100,\n  persistence: UI.ViewManager.ViewPersistence.CLOSEABLE,\n  async loadView() {\n    const Issues = await loadIssuesModule();\n    return Issues.IssuesPane.IssuesPane.instance();\n  },\n});\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.DRAWER_VIEW,\n  id: 'csp-violations-pane',\n  title: i18nLazyString(UIStrings.cspViolations),\n  commandPrompt: i18nLazyString(UIStrings.showCspViolations),\n  order: 100,\n  persistence: UI.ViewManager.ViewPersistence.CLOSEABLE,\n  async loadView() {\n    const Issues = await loadIssuesModule();\n    return Issues.CSPViolationsView.CSPViolationsView.instance();\n  },\n  experiment: Root.Runtime.ExperimentName.CSP_VIOLATIONS_VIEW,\n});\n\nCommon.Revealer.registerRevealer({\n  contextTypes() {\n    return [\n      IssuesManager.Issue.Issue,\n    ];\n  },\n  destination: Common.Revealer.RevealerDestination.ISSUES_VIEW,\n  async loadRevealer() {\n    const Issues = await loadIssuesModule();\n    return Issues.IssueRevealer.IssueRevealer.instance();\n  },\n});\n"],
  "mappings": "AAIA;AACA;AACA;AACA;AAIA;AACA,MAAM,YAAY;AAAA,EAIhB,QAAQ;AAAA,EAIR,YAAY;AAAA,EAIZ,eAAe;AAAA,EAIf,mBAAmB;AAAA;AAErB,MAAM,OAAO,KAAK,KAAK,kBAAkB,gCAAgC;AACzE,MAAM,iBAAiB,KAAK,KAAK,iCAAiC,KAAK,QAAW;AAClF,IAAI;AAEJ,kCAA0D;AACxD,MAAI,CAAC,oBAAoB;AACvB,yBAAqB,MAAM,OAAO;AAAA;AAEpC,SAAO;AAAA;AAGT,GAAG,YAAY,sBAAsB;AAAA,EACnC,UAAU,GAAG,YAAY,mBAAmB;AAAA,EAC5C,IAAI;AAAA,EACJ,OAAO,eAAe,UAAU;AAAA,EAChC,eAAe,eAAe,UAAU;AAAA,EACxC,OAAO;AAAA,EACP,aAAa,GAAG,YAAY,gBAAgB;AAAA,QACtC,WAAW;AACf,UAAM,SAAS,MAAM;AACrB,WAAO,OAAO,WAAW,WAAW;AAAA;AAAA;AAIxC,GAAG,YAAY,sBAAsB;AAAA,EACnC,UAAU,GAAG,YAAY,mBAAmB;AAAA,EAC5C,IAAI;AAAA,EACJ,OAAO,eAAe,UAAU;AAAA,EAChC,eAAe,eAAe,UAAU;AAAA,EACxC,OAAO;AAAA,EACP,aAAa,GAAG,YAAY,gBAAgB;AAAA,QACtC,WAAW;AACf,UAAM,SAAS,MAAM;AACrB,WAAO,OAAO,kBAAkB,kBAAkB;AAAA;AAAA,EAEpD,YAAY,KAAK,QAAQ,eAAe;AAAA;AAG1C,OAAO,SAAS,iBAAiB;AAAA,EAC/B,eAAe;AACb,WAAO;AAAA,MACL,cAAc,MAAM;AAAA;AAAA;AAAA,EAGxB,aAAa,OAAO,SAAS,oBAAoB;AAAA,QAC3C,eAAe;AACnB,UAAM,SAAS,MAAM;AACrB,WAAO,OAAO,cAAc,cAAc;AAAA;AAAA;",
  "names": []
}
