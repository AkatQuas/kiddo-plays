{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/issues/ComboBoxOfCheckBoxes.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as i18n from '../../core/i18n/i18n.js';\n\nconst UIStrings = {\n  /**\n  *@description Generic menu name accessibility label\n  */\n  genericMenuLabel: 'Menu',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/issues/ComboBoxOfCheckBoxes.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class ComboBoxOfCheckBoxes extends UI.Toolbar.ToolbarButton {\n  #options = new Array<MenuOption>();\n  #headers = new Array<MenuHeader>();\n  #onOptionClicked = (): void => {};\n  constructor(title: string) {\n    super(title);\n    this.turnIntoSelect();\n    this.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.#showLevelContextMenu.bind(this));\n    UI.ARIAUtils.markAsMenuButton(this.element);\n  }\n\n  addOption(option: string, value: string, defaultEnabled: boolean): void {\n    this.#options.push({'title': option, 'value': value, default: defaultEnabled, 'enabled': defaultEnabled});\n  }\n\n  setOptionEnabled(index: number, enabled: boolean): void {\n    const option = this.#options[index];\n    if (!option) {\n      return;\n    }\n    option.enabled = enabled;\n    this.#onOptionClicked();\n  }\n\n  addHeader(headerName: string, callback: (() => void)): void {\n    this.#headers.push({title: headerName, callback: callback});\n  }\n\n  setOnOptionClicked(onOptionClicked: (() => void)): void {\n    this.#onOptionClicked = onOptionClicked;\n  }\n\n  getOptions(): Array<MenuOption> {\n    return this.#options;\n  }\n\n  async #showLevelContextMenu({data: mouseEvent}: Common.EventTarget.EventTargetEvent<Event>): Promise<void> {\n    const contextMenu = new UI.ContextMenu.ContextMenu(mouseEvent, {\n      useSoftMenu: true,\n      x: this.element.totalOffsetLeft(),\n      y: this.element.totalOffsetTop() + this.element.offsetHeight,\n    });\n\n    for (const {title, callback} of this.#headers) {\n      contextMenu.headerSection().appendCheckboxItem(title, () => callback());\n    }\n    for (const [index, {title, enabled}] of this.#options.entries()) {\n      contextMenu.defaultSection().appendCheckboxItem(title, () => {\n        this.setOptionEnabled(index, !enabled);\n      }, enabled);\n    }\n    contextMenu.setContextMenuLabel(this.title ?? i18nString(UIStrings.genericMenuLabel));\n    await contextMenu.show();\n    contextMenu.markAsMenuItemCheckBox();\n  }\n}\n\ninterface MenuOption {\n  title: string;\n  value: string;\n  default: boolean;\n  enabled: boolean;\n}\n\ninterface MenuHeader {\n  title: string;\n  callback: () => void;\n}\n"],
  "mappings": "AAKA;AACA;AAEA,MAAM,YAAY;AAAA,EAIhB,kBAAkB;AAAA;AAEpB,MAAM,OAAO,KAAK,KAAK,kBAAkB,yCAAyC;AAClF,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAEzD,0CAAmC,GAAG,QAAQ,cAAc;AAAA,aACtD,IAAI;AAAA,aACJ,IAAI;AAAA,qBACI,MAAY;AAAA;AAAA,EAC/B,YAAY,OAAe;AACzB,UAAM;AACN,SAAK;AACL,SAAK,iBAAiB,GAAG,QAAQ,cAAc,OAAO,OAAO,2BAA2B,KAAK;AAC7F,OAAG,UAAU,iBAAiB,KAAK;AAAA;AAAA,EAGrC,UAAU,QAAgB,OAAe,gBAA+B;AACtE,kBAAc,KAAK,EAAC,SAAS,QAAQ,SAAS,OAAO,SAAS,gBAAgB,WAAW;AAAA;AAAA,EAG3F,iBAAiB,OAAe,SAAwB;AACtD,UAAM,SAAS,cAAc;AAC7B,QAAI,CAAC,QAAQ;AACX;AAAA;AAEF,WAAO,UAAU;AACjB;AAAA;AAAA,EAGF,UAAU,YAAoB,UAA8B;AAC1D,kBAAc,KAAK,EAAC,OAAO,YAAY;AAAA;AAAA,EAGzC,mBAAmB,iBAAqC;AACtD,4BAAwB;AAAA;AAAA,EAG1B,aAAgC;AAC9B,WAAO;AAAA;AAAA,8BAGmB,EAAC,MAAM,cAAwE;AACzG,UAAM,cAAc,IAAI,GAAG,YAAY,YAAY,YAAY;AAAA,MAC7D,aAAa;AAAA,MACb,GAAG,KAAK,QAAQ;AAAA,MAChB,GAAG,KAAK,QAAQ,mBAAmB,KAAK,QAAQ;AAAA;AAGlD,eAAW,EAAC,OAAO,cAAa,eAAe;AAC7C,kBAAY,gBAAgB,mBAAmB,OAAO,MAAM;AAAA;AAE9D,eAAW,CAAC,OAAO,EAAC,OAAO,cAAa,cAAc,WAAW;AAC/D,kBAAY,iBAAiB,mBAAmB,OAAO,MAAM;AAC3D,aAAK,iBAAiB,OAAO,CAAC;AAAA,SAC7B;AAAA;AAEL,gBAAY,oBAAoB,KAAK,SAAS,WAAW,UAAU;AACnE,UAAM,YAAY;AAClB,gBAAY;AAAA;AAAA;",
  "names": []
}
