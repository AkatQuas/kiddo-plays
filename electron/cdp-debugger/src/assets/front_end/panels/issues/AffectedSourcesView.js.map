{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/issues/AffectedSourcesView.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport {AffectedResourcesView} from './AffectedResourcesView.js';\n\nconst UIStrings = {\n  /**\n  *@description Singular or Plural label for number of affected sources (consisting of (source) file name + line number) in issue view\n  */\n  nSources: '{n, plural, =1 {# source} other {# sources}}',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/issues/AffectedSourcesView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class AffectedSourcesView extends AffectedResourcesView {\n  #appendAffectedSources(affectedSources: Iterable<Protocol.Audits.SourceCodeLocation>): void {\n    let count = 0;\n    for (const source of affectedSources) {\n      this.#appendAffectedSource(source);\n      count++;\n    }\n    this.updateAffectedResourceCount(count);\n  }\n\n  protected getResourceNameWithCount(count: number): Platform.UIString.LocalizedString {\n    return i18nString(UIStrings.nSources, {n: count});\n  }\n\n  #appendAffectedSource({url, lineNumber, columnNumber}: Protocol.Audits.SourceCodeLocation): void {\n    const cellElement = document.createElement('td');\n    // TODO(chromium:1072331): Check feasibility of plumping through scriptId for `linkifyScriptLocation`\n    //                         to support source maps and formatted scripts.\n    const linkifierURLOptions = {columnNumber, lineNumber, tabStop: true, showColumnNumber: false, inlineFrameIndex: 0};\n    // An element created with linkifyURL can subscribe to the events\n    // 'click' neither 'keydown' if that key is the 'Enter' key.\n    // Also, this element has a context menu, so we should be able to\n    // track when the user use the context menu too.\n    // TODO(crbug.com/1108503): Add some mechanism to be able to add telemetry to this element.\n    const anchorElement =\n        Components.Linkifier.Linkifier.linkifyURL(url as Platform.DevToolsPath.UrlString, linkifierURLOptions);\n    cellElement.appendChild(anchorElement);\n    const rowElement = document.createElement('tr');\n    rowElement.classList.add('affected-resource-source');\n    rowElement.appendChild(cellElement);\n    this.affectedResources.appendChild(rowElement);\n  }\n\n  update(): void {\n    this.clear();\n    this.#appendAffectedSources(this.issue.sources());\n  }\n}\n"],
  "mappings": "AAIA;AAGA;AACA;AAEA,MAAM,YAAY;AAAA,EAIhB,UAAU;AAAA;AAGZ,MAAM,OAAO,KAAK,KAAK,kBAAkB,wCAAwC;AACjF,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAEzD,yCAAkC,sBAAsB;AAAA,yBACtC,iBAAqE;AAC1F,QAAI,QAAQ;AACZ,eAAW,UAAU,iBAAiB;AACpC,iCAA2B;AAC3B;AAAA;AAEF,SAAK,4BAA4B;AAAA;AAAA,EAGzB,yBAAyB,OAAkD;AACnF,WAAO,WAAW,UAAU,UAAU,EAAC,GAAG;AAAA;AAAA,wBAGtB,EAAC,KAAK,YAAY,gBAAyD;AAC/F,UAAM,cAAc,SAAS,cAAc;AAG3C,UAAM,sBAAsB,EAAC,cAAc,YAAY,SAAS,MAAM,kBAAkB,OAAO,kBAAkB;AAMjH,UAAM,gBACF,WAAW,UAAU,UAAU,WAAW,KAAwC;AACtF,gBAAY,YAAY;AACxB,UAAM,aAAa,SAAS,cAAc;AAC1C,eAAW,UAAU,IAAI;AACzB,eAAW,YAAY;AACvB,SAAK,kBAAkB,YAAY;AAAA;AAAA,EAGrC,SAAe;AACb,SAAK;AACL,gCAA4B,KAAK,MAAM;AAAA;AAAA;",
  "names": []
}
