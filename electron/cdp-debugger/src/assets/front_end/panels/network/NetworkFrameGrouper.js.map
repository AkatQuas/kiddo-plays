{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/network/NetworkFrameGrouper.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {NetworkGroupNode} from './NetworkDataGridNode.js';\nimport type {GroupLookupInterface, NetworkLogView} from './NetworkLogView.js';\n\nexport class NetworkFrameGrouper implements GroupLookupInterface {\n  private parentView: NetworkLogView;\n  private readonly activeGroups: Map<SDK.ResourceTreeModel.ResourceTreeFrame, FrameGroupNode>;\n\n  constructor(parentView: NetworkLogView) {\n    this.parentView = parentView;\n    this.activeGroups = new Map();\n  }\n\n  groupNodeForRequest(request: SDK.NetworkRequest.NetworkRequest): NetworkGroupNode|null {\n    const frame = SDK.ResourceTreeModel.ResourceTreeModel.frameForRequest(request);\n    if (!frame || frame.isTopFrame()) {\n      return null;\n    }\n    let groupNode = this.activeGroups.get(frame);\n    if (groupNode) {\n      return groupNode;\n    }\n    groupNode = new FrameGroupNode(this.parentView, frame);\n    this.activeGroups.set(frame, groupNode);\n    return groupNode;\n  }\n\n  reset(): void {\n    this.activeGroups.clear();\n  }\n}\n\nexport class FrameGroupNode extends NetworkGroupNode {\n  private readonly frame: SDK.ResourceTreeModel.ResourceTreeFrame;\n\n  constructor(parentView: NetworkLogView, frame: SDK.ResourceTreeModel.ResourceTreeFrame) {\n    super(parentView);\n    this.frame = frame;\n  }\n\n  displayName(): string {\n    return new Common.ParsedURL.ParsedURL(this.frame.url).domain() || this.frame.name || '<iframe>';\n  }\n\n  renderCell(cell: HTMLElement, columnId: string): void {\n    super.renderCell(cell, columnId);\n    const columnIndex = (this.dataGrid as DataGrid.DataGrid.DataGridImpl<unknown>).indexOfVisibleColumn(columnId);\n    if (columnIndex === 0) {\n      const name = this.displayName();\n      cell.appendChild(UI.Icon.Icon.create('largeicon-navigator-frame', 'network-frame-group-icon'));\n      UI.UIUtils.createTextChild(cell, name);\n      UI.Tooltip.Tooltip.install(cell, name);\n      this.setCellAccessibleName(cell.textContent || '', cell, columnId);\n    }\n  }\n}\n"],
  "mappings": "AAIA;AACA;AAEA;AAEA;AAGO,iCAA0D;AAAA,EACvD;AAAA,EACS;AAAA,EAEjB,YAAY,YAA4B;AACtC,SAAK,aAAa;AAClB,SAAK,eAAe,oBAAI;AAAA;AAAA,EAG1B,oBAAoB,SAAmE;AACrF,UAAM,QAAQ,IAAI,kBAAkB,kBAAkB,gBAAgB;AACtE,QAAI,CAAC,SAAS,MAAM,cAAc;AAChC,aAAO;AAAA;AAET,QAAI,YAAY,KAAK,aAAa,IAAI;AACtC,QAAI,WAAW;AACb,aAAO;AAAA;AAET,gBAAY,IAAI,eAAe,KAAK,YAAY;AAChD,SAAK,aAAa,IAAI,OAAO;AAC7B,WAAO;AAAA;AAAA,EAGT,QAAc;AACZ,SAAK,aAAa;AAAA;AAAA;AAIf,oCAA6B,iBAAiB;AAAA,EAClC;AAAA,EAEjB,YAAY,YAA4B,OAAgD;AACtF,UAAM;AACN,SAAK,QAAQ;AAAA;AAAA,EAGf,cAAsB;AACpB,WAAO,IAAI,OAAO,UAAU,UAAU,KAAK,MAAM,KAAK,YAAY,KAAK,MAAM,QAAQ;AAAA;AAAA,EAGvF,WAAW,MAAmB,UAAwB;AACpD,UAAM,WAAW,MAAM;AACvB,UAAM,cAAe,KAAK,SAAqD,qBAAqB;AACpG,QAAI,gBAAgB,GAAG;AACrB,YAAM,OAAO,KAAK;AAClB,WAAK,YAAY,GAAG,KAAK,KAAK,OAAO,6BAA6B;AAClE,SAAG,QAAQ,gBAAgB,MAAM;AACjC,SAAG,QAAQ,QAAQ,QAAQ,MAAM;AACjC,WAAK,sBAAsB,KAAK,eAAe,IAAI,MAAM;AAAA;AAAA;AAAA;",
  "names": []
}
