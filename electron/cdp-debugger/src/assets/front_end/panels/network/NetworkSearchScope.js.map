{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/network/NetworkSearchScope.ts"],
  "sourcesContent": ["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as Logs from '../../models/logs/logs.js';\nimport type * as TextUtils from '../../models/text_utils/text_utils.js';\nimport type * as Search from '../search/search.js';\nimport * as NetworkForward from '../../panels/network/forward/forward.js';\n\nconst UIStrings = {\n  /**\n  *@description Text for web URLs\n  */\n  url: 'URL',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/network/NetworkSearchScope.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class NetworkSearchScope implements Search.SearchConfig.SearchScope {\n  performIndexing(progress: Common.Progress.Progress): void {\n    queueMicrotask(() => {\n      progress.done();\n    });\n  }\n\n  async performSearch(\n      searchConfig: Search.SearchConfig.SearchConfig, progress: Common.Progress.Progress,\n      searchResultCallback: (arg0: Search.SearchConfig.SearchResult) => void,\n      searchFinishedCallback: (arg0: boolean) => void): Promise<void> {\n    const promises = [];\n    const requests = Logs.NetworkLog.NetworkLog.instance().requests().filter(\n        request => searchConfig.filePathMatchesFileQuery(request.url()));\n    progress.setTotalWork(requests.length);\n    for (const request of requests) {\n      const promise = this.searchRequest(searchConfig, request, progress);\n      promises.push(promise);\n    }\n    const resultsWithNull = await Promise.all(promises);\n    const results = (resultsWithNull.filter(result => result !== null) as NetworkSearchResult[]);\n    if (progress.isCanceled()) {\n      searchFinishedCallback(false);\n      return;\n    }\n    for (const result of results.sort((r1, r2) => r1.label().localeCompare(r2.label()))) {\n      if (result.matchesCount() > 0) {\n        searchResultCallback(result);\n      }\n    }\n    progress.done();\n    searchFinishedCallback(true);\n  }\n\n  private async searchRequest(\n      searchConfig: Search.SearchConfig.SearchConfig, request: SDK.NetworkRequest.NetworkRequest,\n      progress: Common.Progress.Progress): Promise<NetworkSearchResult|null> {\n    let bodyMatches: TextUtils.ContentProvider.SearchMatch[] = [];\n    if (request.contentType().isTextType()) {\n      bodyMatches =\n          await request.searchInContent(searchConfig.query(), !searchConfig.ignoreCase(), searchConfig.isRegex());\n    }\n    if (progress.isCanceled()) {\n      return null;\n    }\n    const locations = [];\n    if (stringMatchesQuery(request.url())) {\n      locations.push(NetworkForward.UIRequestLocation.UIRequestLocation.urlMatch(request));\n    }\n    for (const header of request.requestHeaders()) {\n      if (headerMatchesQuery(header)) {\n        locations.push(NetworkForward.UIRequestLocation.UIRequestLocation.requestHeaderMatch(request, header));\n      }\n    }\n    for (const header of request.responseHeaders) {\n      if (headerMatchesQuery(header)) {\n        locations.push(NetworkForward.UIRequestLocation.UIRequestLocation.responseHeaderMatch(request, header));\n      }\n    }\n    for (const match of bodyMatches) {\n      locations.push(NetworkForward.UIRequestLocation.UIRequestLocation.bodyMatch(request, match));\n    }\n    progress.incrementWorked();\n    return new NetworkSearchResult(request, locations);\n\n    function headerMatchesQuery(header: SDK.NetworkRequest.NameValue): boolean {\n      return stringMatchesQuery(`${header.name}: ${header.value}`);\n    }\n\n    function stringMatchesQuery(string: string): boolean {\n      const flags = searchConfig.ignoreCase() ? 'i' : '';\n      const regExps =\n          searchConfig.queries().map(query => new RegExp(Platform.StringUtilities.escapeForRegExp(query), flags));\n      let pos = 0;\n      for (const regExp of regExps) {\n        const match = string.substr(pos).match(regExp);\n        if (!match || match.index === undefined) {\n          return false;\n        }\n        pos += match.index + match[0].length;\n      }\n      return true;\n    }\n  }\n\n  stopSearch(): void {\n  }\n}\n\nexport class NetworkSearchResult implements Search.SearchConfig.SearchResult {\n  private readonly request: SDK.NetworkRequest.NetworkRequest;\n  private readonly locations: NetworkForward.UIRequestLocation.UIRequestLocation[];\n\n  constructor(\n      request: SDK.NetworkRequest.NetworkRequest, locations: NetworkForward.UIRequestLocation.UIRequestLocation[]) {\n    this.request = request;\n    this.locations = locations;\n  }\n\n  matchesCount(): number {\n    return this.locations.length;\n  }\n\n  label(): string {\n    return this.request.displayName;\n  }\n\n  description(): string {\n    const parsedUrl = this.request.parsedURL;\n    if (!parsedUrl) {\n      return this.request.url();\n    }\n    return parsedUrl.urlWithoutScheme();\n  }\n\n  matchLineContent(index: number): string {\n    const location = this.locations[index];\n    if (location.isUrlMatch) {\n      return this.request.url();\n    }\n    const header = location?.header?.header;\n    if (header) {\n      return header.value;\n    }\n    return (location.searchMatch as TextUtils.ContentProvider.SearchMatch).lineContent;\n  }\n\n  matchRevealable(index: number): Object {\n    return this.locations[index];\n  }\n\n  matchLabel(index: number): string {\n    const location = this.locations[index];\n    if (location.isUrlMatch) {\n      return i18nString(UIStrings.url);\n    }\n    const header = location?.header?.header;\n    if (header) {\n      return `${header.name}:`;\n    }\n\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // @ts-expect-error\n    return (location.searchMatch as TextUtils.ContentProvider.SearchMatch).lineNumber + 1;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
