{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/network/RequestResponseView.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as SourceFrame from '../../ui/legacy/components/source_frame/source_frame.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Request Response View of the Network panel\n  */\n  thisRequestHasNoResponseData: 'This request has no response data available.',\n  /**\n  *@description Text in Request Preview View of the Network panel\n  */\n  failedToLoadResponseData: 'Failed to load response data',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/network/RequestResponseView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class RequestResponseView extends UI.Widget.VBox {\n  request: SDK.NetworkRequest.NetworkRequest;\n  private contentViewPromise: Promise<UI.Widget.Widget>|null;\n\n  constructor(request: SDK.NetworkRequest.NetworkRequest) {\n    super();\n    this.element.classList.add('request-view');\n    this.request = request;\n    this.contentViewPromise = null;\n  }\n\n  private static hasTextContent(\n      request: SDK.NetworkRequest.NetworkRequest, contentData: SDK.NetworkRequest.ContentData): boolean {\n    const mimeType = request.mimeType || '';\n    let resourceType = Common.ResourceType.ResourceType.fromMimeType(mimeType);\n    if (resourceType === Common.ResourceType.resourceTypes.Other) {\n      resourceType = request.contentType();\n    }\n    if (resourceType === Common.ResourceType.resourceTypes.Image) {\n      return mimeType.startsWith('image/svg');\n    }\n    if (resourceType.isTextType()) {\n      return true;\n    }\n    if (contentData.error) {\n      return false;\n    }\n    if (resourceType === Common.ResourceType.resourceTypes.Other) {\n      return Boolean(contentData.content) && !contentData.encoded;\n    }\n    return false;\n  }\n\n  static async sourceViewForRequest(request: SDK.NetworkRequest.NetworkRequest): Promise<UI.Widget.Widget|null> {\n    let sourceView = requestToSourceView.get(request);\n    if (sourceView !== undefined) {\n      return sourceView;\n    }\n\n    const contentData = await request.contentData();\n    if (!RequestResponseView.hasTextContent(request, contentData)) {\n      requestToSourceView.delete(request);\n      return null;\n    }\n\n    const highlighterType = request.resourceType().canonicalMimeType() || request.mimeType;\n    sourceView = SourceFrame.ResourceSourceFrame.ResourceSourceFrame.createSearchableView(request, highlighterType);\n    requestToSourceView.set(request, sourceView);\n    return sourceView;\n  }\n\n  wasShown(): void {\n    void this.doShowPreview();\n  }\n\n  private doShowPreview(): Promise<UI.Widget.Widget> {\n    if (!this.contentViewPromise) {\n      this.contentViewPromise = this.showPreview();\n    }\n    return this.contentViewPromise;\n  }\n\n  async showPreview(): Promise<UI.Widget.Widget> {\n    const responseView = await this.createPreview();\n    responseView.show(this.element);\n    return responseView;\n  }\n\n  async createPreview(): Promise<UI.Widget.Widget> {\n    const contentData = await this.request.contentData();\n    const sourceView = await RequestResponseView.sourceViewForRequest(this.request);\n    if ((!contentData.content || !sourceView) && !contentData.error) {\n      return new UI.EmptyWidget.EmptyWidget(i18nString(UIStrings.thisRequestHasNoResponseData));\n    }\n    if (contentData.content && sourceView) {\n      return sourceView;\n    }\n    if (contentData.error) {\n      return new UI.EmptyWidget.EmptyWidget(i18nString(UIStrings.failedToLoadResponseData) + ': ' + contentData.error);\n    }\n    if (this.request.statusCode === 204) {\n      return new UI.EmptyWidget.EmptyWidget(i18nString(UIStrings.thisRequestHasNoResponseData));\n    }\n    return new UI.EmptyWidget.EmptyWidget(i18nString(UIStrings.failedToLoadResponseData));\n  }\n\n  async revealLine(line: number): Promise<void> {\n    const view = await this.doShowPreview();\n    if (view instanceof SourceFrame.ResourceSourceFrame.SearchableContainer) {\n      void view.revealPosition(line);\n    }\n  }\n}\n\nconst requestToSourceView = new WeakMap<SDK.NetworkRequest.NetworkRequest, UI.Widget.Widget>();\n"],
  "mappings": "AA8BA;AACA;AAEA;AACA;AAEA,MAAM,YAAY;AAAA,EAIhB,8BAA8B;AAAA,EAI9B,0BAA0B;AAAA;AAE5B,MAAM,OAAO,KAAK,KAAK,kBAAkB,yCAAyC;AAClF,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AACzD,yCAAkC,GAAG,OAAO,KAAK;AAAA,EACtD;AAAA,EACQ;AAAA,EAER,YAAY,SAA4C;AACtD;AACA,SAAK,QAAQ,UAAU,IAAI;AAC3B,SAAK,UAAU;AACf,SAAK,qBAAqB;AAAA;AAAA,SAGb,eACX,SAA4C,aAAsD;AACpG,UAAM,WAAW,QAAQ,YAAY;AACrC,QAAI,eAAe,OAAO,aAAa,aAAa,aAAa;AACjE,QAAI,iBAAiB,OAAO,aAAa,cAAc,OAAO;AAC5D,qBAAe,QAAQ;AAAA;AAEzB,QAAI,iBAAiB,OAAO,aAAa,cAAc,OAAO;AAC5D,aAAO,SAAS,WAAW;AAAA;AAE7B,QAAI,aAAa,cAAc;AAC7B,aAAO;AAAA;AAET,QAAI,YAAY,OAAO;AACrB,aAAO;AAAA;AAET,QAAI,iBAAiB,OAAO,aAAa,cAAc,OAAO;AAC5D,aAAO,QAAQ,YAAY,YAAY,CAAC,YAAY;AAAA;AAEtD,WAAO;AAAA;AAAA,eAGI,qBAAqB,SAA4E;AAC5G,QAAI,aAAa,oBAAoB,IAAI;AACzC,QAAI,eAAe,QAAW;AAC5B,aAAO;AAAA;AAGT,UAAM,cAAc,MAAM,QAAQ;AAClC,QAAI,CAAC,oBAAoB,eAAe,SAAS,cAAc;AAC7D,0BAAoB,OAAO;AAC3B,aAAO;AAAA;AAGT,UAAM,kBAAkB,QAAQ,eAAe,uBAAuB,QAAQ;AAC9E,iBAAa,YAAY,oBAAoB,oBAAoB,qBAAqB,SAAS;AAC/F,wBAAoB,IAAI,SAAS;AACjC,WAAO;AAAA;AAAA,EAGT,WAAiB;AACf,SAAK,KAAK;AAAA;AAAA,EAGJ,gBAA2C;AACjD,QAAI,CAAC,KAAK,oBAAoB;AAC5B,WAAK,qBAAqB,KAAK;AAAA;AAEjC,WAAO,KAAK;AAAA;AAAA,QAGR,cAAyC;AAC7C,UAAM,eAAe,MAAM,KAAK;AAChC,iBAAa,KAAK,KAAK;AACvB,WAAO;AAAA;AAAA,QAGH,gBAA2C;AAC/C,UAAM,cAAc,MAAM,KAAK,QAAQ;AACvC,UAAM,aAAa,MAAM,oBAAoB,qBAAqB,KAAK;AACvE,QAAK,EAAC,YAAY,WAAW,CAAC,eAAe,CAAC,YAAY,OAAO;AAC/D,aAAO,IAAI,GAAG,YAAY,YAAY,WAAW,UAAU;AAAA;AAE7D,QAAI,YAAY,WAAW,YAAY;AACrC,aAAO;AAAA;AAET,QAAI,YAAY,OAAO;AACrB,aAAO,IAAI,GAAG,YAAY,YAAY,WAAW,UAAU,4BAA4B,OAAO,YAAY;AAAA;AAE5G,QAAI,KAAK,QAAQ,eAAe,KAAK;AACnC,aAAO,IAAI,GAAG,YAAY,YAAY,WAAW,UAAU;AAAA;AAE7D,WAAO,IAAI,GAAG,YAAY,YAAY,WAAW,UAAU;AAAA;AAAA,QAGvD,WAAW,MAA6B;AAC5C,UAAM,OAAO,MAAM,KAAK;AACxB,QAAI,gBAAgB,YAAY,oBAAoB,qBAAqB;AACvE,WAAK,KAAK,eAAe;AAAA;AAAA;AAAA;AAK/B,MAAM,sBAAsB,oBAAI;",
  "names": []
}
