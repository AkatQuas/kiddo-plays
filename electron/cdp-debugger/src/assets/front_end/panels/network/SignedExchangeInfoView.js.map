{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/network/SignedExchangeInfoView.ts"],
  "sourcesContent": ["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\n\nimport signedExchangeInfoTreeStyles from './signedExchangeInfoTree.css.js';\nimport signedExchangeInfoViewStyles from './signedExchangeInfoView.css.js';\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nconst UIStrings = {\n  /**\n  *@description Text for errors\n  */\n  errors: 'Errors',\n  /**\n  *@description Text in Signed Exchange Info View of the Network panel\n  */\n  signedHttpExchange: 'Signed HTTP exchange',\n  /**\n  *@description Text for an option to learn more about something\n  */\n  learnmore: 'Learn\u00A0more',\n  /**\n  *@description Text in Request Headers View of the Network panel\n  */\n  requestUrl: 'Request URL',\n  /**\n  *@description Text in Signed Exchange Info View of the Network panel\n  */\n  responseCode: 'Response code',\n  /**\n  *@description Text in Signed Exchange Info View of the Network panel\n  */\n  headerIntegrityHash: 'Header integrity hash',\n  /**\n  *@description Text in Signed Exchange Info View of the Network panel\n  */\n  responseHeaders: 'Response headers',\n  /**\n  *@description Text in Signed Exchange Info View of the Network panel\n  */\n  signature: 'Signature',\n  /**\n  *@description Text in Signed Exchange Info View of the Network panel\n  */\n  label: 'Label',\n  /**\n  *@description Text in Signed Exchange Info View of the Network panel\n  */\n  certificateUrl: 'Certificate URL',\n  /**\n  *@description Text to view a security certificate\n  */\n  viewCertificate: 'View certificate',\n  /**\n  *@description Text in Signed Exchange Info View of the Network panel\n  */\n  integrity: 'Integrity',\n  /**\n  *@description Text in Signed Exchange Info View of the Network panel\n  */\n  certificateSha: 'Certificate SHA256',\n  /**\n  *@description Text in Signed Exchange Info View of the Network panel\n  */\n  validityUrl: 'Validity URL',\n  /**\n  *@description Text in Signed Exchange Info View of the Network panel\n  */\n  date: 'Date',\n  /**\n  *@description Text in Signed Exchange Info View of the Network panel\n  */\n  expires: 'Expires',\n  /**\n  *@description Text for a security certificate\n  */\n  certificate: 'Certificate',\n  /**\n  *@description Text that refers to the subject of a security certificate\n  */\n  subject: 'Subject',\n  /**\n  *@description Text to show since when an item is valid\n  */\n  validFrom: 'Valid from',\n  /**\n  *@description Text to indicate the expiry date\n  */\n  validUntil: 'Valid until',\n  /**\n  *@description Text for the issuer of an item\n  */\n  issuer: 'Issuer',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/network/SignedExchangeInfoView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class SignedExchangeInfoView extends UI.Widget.VBox {\n  private readonly responseHeadersItem?: UI.TreeOutline.TreeElement;\n\n  constructor(request: SDK.NetworkRequest.NetworkRequest) {\n    super();\n    console.assert(request.signedExchangeInfo() !== null);\n    const signedExchangeInfo = (request.signedExchangeInfo() as Protocol.Network.SignedExchangeInfo);\n\n    this.element.classList.add('signed-exchange-info-view');\n\n    const root = new UI.TreeOutline.TreeOutlineInShadow();\n    root.registerCSSFiles([signedExchangeInfoTreeStyles]);\n    root.element.classList.add('signed-exchange-info-tree');\n    root.setFocusable(false);\n    root.makeDense();\n    root.expandTreeElementsWhenArrowing = true;\n    this.element.appendChild(root.element);\n\n    const errorFieldSetMap = new Map<number|undefined, Set<string>>();\n\n    if (signedExchangeInfo.errors && signedExchangeInfo.errors.length) {\n      const errorMessagesCategory = new Category(root, i18nString(UIStrings.errors));\n      for (const error of signedExchangeInfo.errors) {\n        const fragment = document.createDocumentFragment();\n        fragment.appendChild(UI.Icon.Icon.create('smallicon-error', 'prompt-icon'));\n        fragment.createChild('div', 'error-log').textContent = error.message;\n        errorMessagesCategory.createLeaf(fragment);\n        if (error.errorField) {\n          let errorFieldSet = errorFieldSetMap.get(error.signatureIndex);\n          if (!errorFieldSet) {\n            errorFieldSet = new Set();\n            errorFieldSetMap.set(error.signatureIndex, errorFieldSet);\n          }\n          errorFieldSet.add(error.errorField);\n        }\n      }\n    }\n\n    const titleElement = document.createDocumentFragment();\n    titleElement.createChild('div', 'header-name').textContent = i18nString(UIStrings.signedHttpExchange);\n    const learnMoreNode =\n        UI.XLink.XLink.create('https://github.com/WICG/webpackage', i18nString(UIStrings.learnmore), 'header-toggle');\n    titleElement.appendChild(learnMoreNode);\n    const headerCategory = new Category(root, titleElement);\n    if (signedExchangeInfo.header) {\n      const header = signedExchangeInfo.header;\n      const redirectDestination = request.redirectDestination();\n      const requestURLElement = this.formatHeader(i18nString(UIStrings.requestUrl), header.requestUrl);\n      if (redirectDestination) {\n        const viewRequestLink = Components.Linkifier.Linkifier.linkifyRevealable(redirectDestination, 'View request');\n        viewRequestLink.classList.add('header-toggle');\n        requestURLElement.appendChild(viewRequestLink);\n      }\n      headerCategory.createLeaf(requestURLElement);\n      headerCategory.createLeaf(this.formatHeader(i18nString(UIStrings.responseCode), String(header.responseCode)));\n      headerCategory.createLeaf(this.formatHeader(i18nString(UIStrings.headerIntegrityHash), header.headerIntegrity));\n\n      this.responseHeadersItem =\n          headerCategory.createLeaf(this.formatHeader(i18nString(UIStrings.responseHeaders), ''));\n      const responseHeaders = header.responseHeaders;\n      for (const name in responseHeaders) {\n        const headerTreeElement = new UI.TreeOutline.TreeElement(this.formatHeader(name, responseHeaders[name]));\n        headerTreeElement.selectable = false;\n        this.responseHeadersItem.appendChild(headerTreeElement);\n      }\n      this.responseHeadersItem.expand();\n\n      for (let i = 0; i < header.signatures.length; ++i) {\n        const errorFieldSet = errorFieldSetMap.get(i) || new Set();\n        const signature = header.signatures[i];\n        const signatureCategory = new Category(root, i18nString(UIStrings.signature));\n        signatureCategory.createLeaf(this.formatHeader(i18nString(UIStrings.label), signature.label));\n        signatureCategory.createLeaf(this.formatHeaderForHexData(\n            i18nString(UIStrings.signature), signature.signature,\n            errorFieldSet.has(Protocol.Network.SignedExchangeErrorField.SignatureSig)));\n\n        if (signature.certUrl) {\n          const certURLElement = this.formatHeader(\n              i18nString(UIStrings.certificateUrl), signature.certUrl,\n              errorFieldSet.has(Protocol.Network.SignedExchangeErrorField.SignatureCertUrl));\n          if (signature.certificates) {\n            const viewCertLink = certURLElement.createChild('span', 'devtools-link header-toggle');\n            viewCertLink.textContent = i18nString(UIStrings.viewCertificate);\n            viewCertLink.addEventListener(\n                'click',\n                Host.InspectorFrontendHost.InspectorFrontendHostInstance.showCertificateViewer.bind(\n                    null, signature.certificates),\n                false);\n          }\n          signatureCategory.createLeaf(certURLElement);\n        }\n        signatureCategory.createLeaf(this.formatHeader(\n            i18nString(UIStrings.integrity), signature.integrity,\n            errorFieldSet.has(Protocol.Network.SignedExchangeErrorField.SignatureIntegrity)));\n        if (signature.certSha256) {\n          signatureCategory.createLeaf(this.formatHeaderForHexData(\n              i18nString(UIStrings.certificateSha), signature.certSha256,\n              errorFieldSet.has(Protocol.Network.SignedExchangeErrorField.SignatureCertSha256)));\n        }\n        signatureCategory.createLeaf(this.formatHeader(\n            i18nString(UIStrings.validityUrl), signature.validityUrl,\n            errorFieldSet.has(Protocol.Network.SignedExchangeErrorField.SignatureValidityUrl)));\n        signatureCategory.createLeaf().title = this.formatHeader(\n            i18nString(UIStrings.date), new Date(1000 * signature.date).toUTCString(),\n            errorFieldSet.has(Protocol.Network.SignedExchangeErrorField.SignatureTimestamps));\n        signatureCategory.createLeaf().title = this.formatHeader(\n            i18nString(UIStrings.expires), new Date(1000 * signature.expires).toUTCString(),\n            errorFieldSet.has(Protocol.Network.SignedExchangeErrorField.SignatureTimestamps));\n      }\n    }\n    if (signedExchangeInfo.securityDetails) {\n      const securityDetails = signedExchangeInfo.securityDetails;\n      const securityCategory = new Category(root, i18nString(UIStrings.certificate));\n      securityCategory.createLeaf(this.formatHeader(i18nString(UIStrings.subject), securityDetails.subjectName));\n      securityCategory.createLeaf(\n          this.formatHeader(i18nString(UIStrings.validFrom), new Date(1000 * securityDetails.validFrom).toUTCString()));\n      securityCategory.createLeaf(\n          this.formatHeader(i18nString(UIStrings.validUntil), new Date(1000 * securityDetails.validTo).toUTCString()));\n      securityCategory.createLeaf(this.formatHeader(i18nString(UIStrings.issuer), securityDetails.issuer));\n    }\n  }\n\n  private formatHeader(name: string, value: string, highlighted?: boolean): DocumentFragment {\n    const fragment = document.createDocumentFragment();\n    const nameElement = fragment.createChild('div', 'header-name');\n    nameElement.textContent = name + ': ';\n    fragment.createChild('span', 'header-separator');\n    const valueElement = fragment.createChild('div', 'header-value source-code');\n    valueElement.textContent = value;\n    if (highlighted) {\n      nameElement.classList.add('error-field');\n      valueElement.classList.add('error-field');\n    }\n    return fragment;\n  }\n\n  private formatHeaderForHexData(name: string, value: string, highlighted?: boolean): DocumentFragment {\n    const fragment = document.createDocumentFragment();\n    const nameElement = fragment.createChild('div', 'header-name');\n    nameElement.textContent = name + ': ';\n    fragment.createChild('span', 'header-separator');\n    const valueElement = fragment.createChild('div', 'header-value source-code hex-data');\n    valueElement.textContent = value.replace(/(.{2})/g, '$1 ');\n    if (highlighted) {\n      nameElement.classList.add('error-field');\n      valueElement.classList.add('error-field');\n    }\n    return fragment;\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([signedExchangeInfoViewStyles]);\n  }\n}\n\nexport class Category extends UI.TreeOutline.TreeElement {\n  toggleOnClick: boolean;\n  expanded: boolean;\n\n  constructor(root: UI.TreeOutline.TreeOutline, title?: string|Node) {\n    super(title, true);\n    this.selectable = false;\n    this.toggleOnClick = true;\n    this.expanded = true;\n    root.appendChild(this);\n  }\n\n  createLeaf(title?: string|Node): UI.TreeOutline.TreeElement {\n    const leaf = new UI.TreeOutline.TreeElement(title);\n    leaf.selectable = false;\n    this.appendChild(leaf);\n    return leaf;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
