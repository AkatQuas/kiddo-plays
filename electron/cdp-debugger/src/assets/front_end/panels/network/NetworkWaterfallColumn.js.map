{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/network/NetworkWaterfallColumn.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\n\nimport networkWaterfallColumnStyles from './networkWaterfallColumn.css.js';\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as ThemeSupport from '../../ui/legacy/theme_support/theme_support.js';\n\nimport type {NetworkNode} from './NetworkDataGridNode.js';\nimport {RequestTimeRangeNameToColor} from './NetworkOverview.js';\nimport type {Label, NetworkTimeCalculator} from './NetworkTimeCalculator.js';\nimport type {RequestTimeRange} from './RequestTimingView.js';\nimport {RequestTimeRangeNames, RequestTimingView} from './RequestTimingView.js';\nimport networkingTimingTableStyles from './networkTimingTable.css.js';\n\nconst BAR_SPACING = 1;\n\nexport class NetworkWaterfallColumn extends UI.Widget.VBox {\n  private canvas: HTMLCanvasElement;\n  private canvasPosition: DOMRect;\n  private readonly leftPadding: number;\n  private readonly fontSize: number;\n  private rightPadding: number;\n  private scrollTop: number;\n  private headerHeight: number;\n  private calculator: NetworkTimeCalculator;\n  private rawRowHeight: number;\n  private rowHeight: number;\n  private offsetWidth: number;\n  private offsetHeight: number;\n  private startTime: number;\n  private endTime: number;\n  private readonly popoverHelper: UI.PopoverHelper.PopoverHelper;\n  private nodes: NetworkNode[];\n  private hoveredNode: NetworkNode|null;\n  private eventDividers: Map<string, number[]>;\n  private updateRequestID!: number|undefined;\n  private readonly styleForTimeRangeName: Map<RequestTimeRangeNames, _LayerStyle>;\n  private readonly styleForWaitingResourceType: Map<Common.ResourceType.ResourceType, _LayerStyle>;\n  private readonly styleForDownloadingResourceType: Map<Common.ResourceType.ResourceType, _LayerStyle>;\n  private readonly wiskerStyle: _LayerStyle;\n  private readonly hoverDetailsStyle: _LayerStyle;\n  private readonly pathForStyle: Map<_LayerStyle, Path2D>;\n  private textLayers: _TextLayer[];\n\n  constructor(calculator: NetworkTimeCalculator) {\n    // TODO(allada) Make this a shadowDOM when the NetworkWaterfallColumn gets moved into NetworkLogViewColumns.\n    super(false);\n\n    this.canvas = (this.contentElement.createChild('canvas') as HTMLCanvasElement);\n    this.canvas.tabIndex = -1;\n    this.setDefaultFocusedElement(this.canvas);\n    this.canvasPosition = this.canvas.getBoundingClientRect();\n\n    this.leftPadding = 5;\n    this.fontSize = 10;\n\n    this.rightPadding = 0;\n    this.scrollTop = 0;\n\n    this.headerHeight = 0;\n    this.calculator = calculator;\n\n    // this.rawRowHeight captures model height (41 or 21px),\n    // this.rowHeight is computed height of the row in CSS pixels, can be 20.8 for zoomed-in content.\n    this.rawRowHeight = 0;\n    this.rowHeight = 0;\n\n    this.offsetWidth = 0;\n    this.offsetHeight = 0;\n    this.startTime = this.calculator.minimumBoundary();\n    this.endTime = this.calculator.maximumBoundary();\n\n    this.popoverHelper = new UI.PopoverHelper.PopoverHelper(this.element, this.getPopoverRequest.bind(this));\n    this.popoverHelper.setHasPadding(true);\n    this.popoverHelper.setTimeout(300, 300);\n\n    this.nodes = [];\n\n    this.hoveredNode = null;\n\n    this.eventDividers = new Map();\n\n    this.element.addEventListener('mousemove', this.onMouseMove.bind(this), true);\n    this.element.addEventListener('mouseleave', _event => this.setHoveredNode(null, false), true);\n    this.element.addEventListener('click', this.onClick.bind(this), true);\n\n    this.styleForTimeRangeName = NetworkWaterfallColumn.buildRequestTimeRangeStyle();\n\n    const resourceStyleTuple = NetworkWaterfallColumn.buildResourceTypeStyle();\n    this.styleForWaitingResourceType = resourceStyleTuple[0];\n    this.styleForDownloadingResourceType = resourceStyleTuple[1];\n\n    const baseLineColor = ThemeSupport.ThemeSupport.instance().getComputedValue('--color-text-disabled');\n    this.wiskerStyle = {borderColor: baseLineColor, lineWidth: 1, fillStyle: undefined};\n    this.hoverDetailsStyle = {fillStyle: baseLineColor, lineWidth: 1, borderColor: baseLineColor};\n\n    this.pathForStyle = new Map();\n    this.textLayers = [];\n  }\n\n  private static buildRequestTimeRangeStyle(): Map<RequestTimeRangeNames, _LayerStyle> {\n    const types = RequestTimeRangeNames;\n    const styleMap = new Map<RequestTimeRangeNames, _LayerStyle>();\n    styleMap.set(types.Connecting, {fillStyle: RequestTimeRangeNameToColor[types.Connecting]});\n    styleMap.set(types.SSL, {fillStyle: RequestTimeRangeNameToColor[types.SSL]});\n    styleMap.set(types.DNS, {fillStyle: RequestTimeRangeNameToColor[types.DNS]});\n    styleMap.set(types.Proxy, {fillStyle: RequestTimeRangeNameToColor[types.Proxy]});\n    styleMap.set(types.Blocking, {fillStyle: RequestTimeRangeNameToColor[types.Blocking]});\n    styleMap.set(types.Push, {fillStyle: RequestTimeRangeNameToColor[types.Push]});\n    styleMap.set(\n        types.Queueing,\n        {fillStyle: RequestTimeRangeNameToColor[types.Queueing], lineWidth: 2, borderColor: 'lightgrey'});\n    // This ensures we always show at least 2 px for a request.\n    styleMap.set(types.Receiving, {\n      fillStyle: RequestTimeRangeNameToColor[types.Receiving],\n      lineWidth: 2,\n      borderColor: '#03A9F4',\n    });\n    styleMap.set(types.Waiting, {fillStyle: RequestTimeRangeNameToColor[types.Waiting]});\n    styleMap.set(types.ReceivingPush, {fillStyle: RequestTimeRangeNameToColor[types.ReceivingPush]});\n    styleMap.set(types.ServiceWorker, {fillStyle: RequestTimeRangeNameToColor[types.ServiceWorker]});\n    styleMap.set(\n        types.ServiceWorkerPreparation, {fillStyle: RequestTimeRangeNameToColor[types.ServiceWorkerPreparation]});\n    styleMap.set(types.ServiceWorkerRespondWith, {\n      fillStyle: RequestTimeRangeNameToColor[types.ServiceWorkerRespondWith],\n    });\n    return styleMap;\n  }\n\n  private static buildResourceTypeStyle(): Map<Common.ResourceType.ResourceType, _LayerStyle>[] {\n    const baseResourceTypeColors = new Map([\n      ['document', 'hsl(215, 100%, 80%)'],\n      ['font', 'hsl(8, 100%, 80%)'],\n      ['media', 'hsl(90, 50%, 80%)'],\n      ['image', 'hsl(90, 50%, 80%)'],\n      ['script', 'hsl(31, 100%, 80%)'],\n      ['stylesheet', 'hsl(272, 64%, 80%)'],\n      ['texttrack', 'hsl(8, 100%, 80%)'],\n      ['websocket', 'hsl(0, 0%, 95%)'],\n      ['xhr', 'hsl(53, 100%, 80%)'],\n      ['fetch', 'hsl(53, 100%, 80%)'],\n      ['other', 'hsl(0, 0%, 95%)'],\n    ]);\n    const waitingStyleMap = new Map<Common.ResourceType.ResourceType, _LayerStyle>();\n    const downloadingStyleMap = new Map<Common.ResourceType.ResourceType, _LayerStyle>();\n\n    for (const resourceType of Object.values(Common.ResourceType.resourceTypes)) {\n      let color = baseResourceTypeColors.get(resourceType.name());\n      if (!color) {\n        color = baseResourceTypeColors.get('other');\n      }\n      const borderColor = toBorderColor((color as string));\n\n      waitingStyleMap.set(\n          // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n          // @ts-expect-error\n          resourceType, {fillStyle: toWaitingColor((color as string)), lineWidth: 1, borderColor: borderColor});\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n      // @ts-expect-error\n      downloadingStyleMap.set(resourceType, {fillStyle: color, lineWidth: 1, borderColor: borderColor});\n    }\n    return [waitingStyleMap, downloadingStyleMap];\n\n    function toBorderColor(color: string): string|null {\n      const parsedColor = Common.Color.Color.parse(color);\n      if (!parsedColor) {\n        return '';\n      }\n      const hsla = parsedColor.hsla();\n      hsla[1] /= 2;\n      hsla[2] -= Math.min(hsla[2], 0.2);\n      return parsedColor.asString(null);\n    }\n\n    function toWaitingColor(color: string): string|null {\n      const parsedColor = Common.Color.Color.parse(color);\n      if (!parsedColor) {\n        return '';\n      }\n      const hsla = parsedColor.hsla();\n      hsla[2] *= 1.1;\n      return parsedColor.asString(null);\n    }\n  }\n\n  private resetPaths(): void {\n    this.pathForStyle.clear();\n    this.pathForStyle.set(this.wiskerStyle, new Path2D());\n    this.styleForTimeRangeName.forEach(style => this.pathForStyle.set(style, new Path2D()));\n    this.styleForWaitingResourceType.forEach(style => this.pathForStyle.set(style, new Path2D()));\n    this.styleForDownloadingResourceType.forEach(style => this.pathForStyle.set(style, new Path2D()));\n    this.pathForStyle.set(this.hoverDetailsStyle, new Path2D());\n  }\n\n  willHide(): void {\n    this.popoverHelper.hidePopover();\n  }\n\n  wasShown(): void {\n    this.update();\n    this.registerCSSFiles([networkWaterfallColumnStyles]);\n  }\n\n  private onMouseMove(event: MouseEvent): void {\n    this.setHoveredNode(this.getNodeFromPoint(event.offsetX, event.offsetY), event.shiftKey);\n  }\n\n  private onClick(event: MouseEvent): void {\n    const handled = this.setSelectedNode(this.getNodeFromPoint(event.offsetX, event.offsetY));\n    if (handled) {\n      event.consume(true);\n    }\n  }\n\n  private getPopoverRequest(event: MouseEvent): UI.PopoverHelper.PopoverRequest|null {\n    if (!this.hoveredNode) {\n      return null;\n    }\n    const request = this.hoveredNode.request();\n    if (!request) {\n      return null;\n    }\n    const useTimingBars = !Common.Settings.Settings.instance().moduleSetting('networkColorCodeResourceTypes').get() &&\n        !this.calculator.startAtZero;\n    let range;\n    let start;\n    let end;\n    if (useTimingBars) {\n      range = RequestTimingView.calculateRequestTimeRanges(request, 0)\n                  .find(data => data.name === RequestTimeRangeNames.Total);\n      start = this.timeToPosition((range as RequestTimeRange).start);\n      end = this.timeToPosition((range as RequestTimeRange).end);\n    } else {\n      range = this.getSimplifiedBarRange(request, 0);\n      start = range.start;\n      end = range.end;\n    }\n\n    if (end - start < 50) {\n      const halfWidth = (end - start) / 2;\n      start = start + halfWidth - 25;\n      end = end - halfWidth + 25;\n    }\n\n    if (event.clientX < this.canvasPosition.left + start || event.clientX > this.canvasPosition.left + end) {\n      return null;\n    }\n\n    const rowIndex = this.nodes.findIndex(node => node.hovered());\n    const barHeight = this.getBarHeight((range as RequestTimeRange).name);\n    const y = this.headerHeight + (this.rowHeight * rowIndex - this.scrollTop) + ((this.rowHeight - barHeight) / 2);\n\n    if (event.clientY < this.canvasPosition.top + y || event.clientY > this.canvasPosition.top + y + barHeight) {\n      return null;\n    }\n\n    const anchorBox = this.element.boxInWindow();\n    anchorBox.x += start;\n    anchorBox.y += y;\n    anchorBox.width = end - start;\n    anchorBox.height = barHeight;\n\n    return {\n      box: anchorBox,\n      show: (popover: UI.GlassPane.GlassPane): Promise<true> => {\n        const content =\n            RequestTimingView.createTimingTable((request as SDK.NetworkRequest.NetworkRequest), this.calculator);\n        popover.registerCSSFiles([networkingTimingTableStyles]);\n        popover.contentElement.appendChild(content);\n        return Promise.resolve(true);\n      },\n      hide: undefined,\n    };\n  }\n\n  private setHoveredNode(node: NetworkNode|null, highlightInitiatorChain: boolean): void {\n    if (this.hoveredNode) {\n      this.hoveredNode.setHovered(false, false);\n    }\n    this.hoveredNode = node;\n    if (this.hoveredNode) {\n      this.hoveredNode.setHovered(true, highlightInitiatorChain);\n    }\n  }\n\n  private setSelectedNode(node: NetworkNode|null): boolean {\n    if (node && node.dataGrid) {\n      node.select();\n      node.dataGrid.element.focus();\n      return true;\n    }\n    return false;\n  }\n\n  setRowHeight(height: number): void {\n    this.rawRowHeight = height;\n    this.updateRowHeight();\n  }\n\n  private updateRowHeight(): void {\n    this.rowHeight = Math.round(this.rawRowHeight * window.devicePixelRatio) / window.devicePixelRatio;\n  }\n\n  setHeaderHeight(height: number): void {\n    this.headerHeight = height;\n  }\n\n  setRightPadding(padding: number): void {\n    this.rightPadding = padding;\n    this.calculateCanvasSize();\n  }\n\n  setCalculator(calculator: NetworkTimeCalculator): void {\n    this.calculator = calculator;\n  }\n\n  getNodeFromPoint(x: number, y: number): NetworkNode|null {\n    if (y <= this.headerHeight) {\n      return null;\n    }\n    return this.nodes[Math.floor((this.scrollTop + y - this.headerHeight) / this.rowHeight)];\n  }\n\n  scheduleDraw(): void {\n    if (this.updateRequestID) {\n      return;\n    }\n    this.updateRequestID = this.element.window().requestAnimationFrame(() => this.update());\n  }\n\n  update(scrollTop?: number, eventDividers?: Map<string, number[]>, nodes?: NetworkNode[]): void {\n    if (scrollTop !== undefined && this.scrollTop !== scrollTop) {\n      this.popoverHelper.hidePopover();\n      this.scrollTop = scrollTop;\n    }\n    if (nodes) {\n      this.nodes = nodes;\n      this.calculateCanvasSize();\n    }\n    if (eventDividers !== undefined) {\n      this.eventDividers = eventDividers;\n    }\n    if (this.updateRequestID) {\n      this.element.window().cancelAnimationFrame(this.updateRequestID);\n      delete this.updateRequestID;\n    }\n\n    this.startTime = this.calculator.minimumBoundary();\n    this.endTime = this.calculator.maximumBoundary();\n    this.resetCanvas();\n    this.resetPaths();\n    this.textLayers = [];\n    this.draw();\n  }\n\n  private resetCanvas(): void {\n    const ratio = window.devicePixelRatio;\n    this.canvas.width = this.offsetWidth * ratio;\n    this.canvas.height = this.offsetHeight * ratio;\n    this.canvas.style.width = this.offsetWidth + 'px';\n    this.canvas.style.height = this.offsetHeight + 'px';\n  }\n\n  onResize(): void {\n    super.onResize();\n    this.updateRowHeight();\n    this.calculateCanvasSize();\n    this.scheduleDraw();\n  }\n\n  private calculateCanvasSize(): void {\n    this.offsetWidth = this.contentElement.offsetWidth - this.rightPadding;\n    this.offsetHeight = this.contentElement.offsetHeight;\n    this.calculator.setDisplayWidth(this.offsetWidth);\n    this.canvasPosition = this.canvas.getBoundingClientRect();\n  }\n\n  private timeToPosition(time: number): number {\n    const availableWidth = this.offsetWidth - this.leftPadding;\n    const timeToPixel = availableWidth / (this.endTime - this.startTime);\n    return Math.floor(this.leftPadding + (time - this.startTime) * timeToPixel);\n  }\n\n  private didDrawForTest(): void {\n  }\n\n  private draw(): void {\n    const useTimingBars = !Common.Settings.Settings.instance().moduleSetting('networkColorCodeResourceTypes').get() &&\n        !this.calculator.startAtZero;\n    const nodes = this.nodes;\n    const context = (this.canvas.getContext('2d') as CanvasRenderingContext2D | null);\n    if (!context) {\n      return;\n    }\n    context.save();\n    context.scale(window.devicePixelRatio, window.devicePixelRatio);\n    context.translate(0, this.headerHeight);\n    context.rect(0, 0, this.offsetWidth, this.offsetHeight);\n    context.clip();\n    const firstRequestIndex = Math.floor(this.scrollTop / this.rowHeight);\n    const lastRequestIndex = Math.min(nodes.length, firstRequestIndex + Math.ceil(this.offsetHeight / this.rowHeight));\n    for (let i = firstRequestIndex; i < lastRequestIndex; i++) {\n      const rowOffset = this.rowHeight * i;\n      const node = nodes[i];\n      this.decorateRow(context, node, rowOffset - this.scrollTop);\n      let drawNodes: NetworkNode[] = [];\n      if (node.hasChildren() && !node.expanded) {\n        drawNodes = (node.flatChildren() as NetworkNode[]);\n      }\n      drawNodes.push(node);\n      for (const drawNode of drawNodes) {\n        if (useTimingBars) {\n          this.buildTimingBarLayers(drawNode, rowOffset - this.scrollTop);\n        } else {\n          this.buildSimplifiedBarLayers(context, drawNode, rowOffset - this.scrollTop);\n        }\n      }\n    }\n    this.drawLayers(context, useTimingBars);\n\n    context.save();\n    context.fillStyle = ThemeSupport.ThemeSupport.instance().getComputedValue('--color-text-disabled');\n    for (const textData of this.textLayers) {\n      context.fillText(textData.text, textData.x, textData.y);\n    }\n    context.restore();\n\n    this.drawEventDividers(context);\n    context.restore();\n\n    const freeZoneAtLeft = 75;\n    const freeZoneAtRight = 18;\n    const dividersData = PerfUI.TimelineGrid.TimelineGrid.calculateGridOffsets(this.calculator);\n    PerfUI.TimelineGrid.TimelineGrid.drawCanvasGrid(context, dividersData);\n    PerfUI.TimelineGrid.TimelineGrid.drawCanvasHeaders(\n        context, dividersData, time => this.calculator.formatValue(time, dividersData.precision), this.fontSize,\n        this.headerHeight, freeZoneAtLeft);\n    context.save();\n    context.scale(window.devicePixelRatio, window.devicePixelRatio);\n    context.clearRect(this.offsetWidth - freeZoneAtRight, 0, freeZoneAtRight, this.headerHeight);\n    context.restore();\n    this.didDrawForTest();\n  }\n\n  private drawLayers(context: CanvasRenderingContext2D, useTimingBars: boolean): void {\n    for (const entry of this.pathForStyle) {\n      const style = (entry[0] as _LayerStyle);\n      const path = (entry[1] as Path2D);\n      context.save();\n      context.beginPath();\n      if (style.lineWidth) {\n        context.lineWidth = style.lineWidth;\n        if (style.borderColor) {\n          context.strokeStyle = style.borderColor;\n        }\n        context.stroke(path);\n      }\n      if (style.fillStyle) {\n        context.fillStyle =\n            useTimingBars ? ThemeSupport.ThemeSupport.instance().getComputedValue(style.fillStyle) : style.fillStyle;\n        context.fill(path);\n      }\n      context.restore();\n    }\n  }\n\n  private drawEventDividers(context: CanvasRenderingContext2D): void {\n    context.save();\n    context.lineWidth = 1;\n    for (const color of this.eventDividers.keys()) {\n      context.strokeStyle = color;\n      for (const time of this.eventDividers.get(color) || []) {\n        context.beginPath();\n        const x = this.timeToPosition(time);\n        context.moveTo(x, 0);\n        context.lineTo(x, this.offsetHeight);\n      }\n      context.stroke();\n    }\n    context.restore();\n  }\n\n  private getBarHeight(type?: RequestTimeRangeNames): number {\n    const types = RequestTimeRangeNames;\n    switch (type) {\n      case types.Connecting:\n      case types.SSL:\n      case types.DNS:\n      case types.Proxy:\n      case types.Blocking:\n      case types.Push:\n      case types.Queueing:\n        return 7;\n      default:\n        return 13;\n    }\n  }\n\n  private getSimplifiedBarRange(request: SDK.NetworkRequest.NetworkRequest, borderOffset: number): {\n    start: number,\n    mid: number,\n    end: number,\n  } {\n    const drawWidth = this.offsetWidth - this.leftPadding;\n    const percentages = this.calculator.computeBarGraphPercentages(request);\n    return {\n      start: this.leftPadding + Math.floor((percentages.start / 100) * drawWidth) + borderOffset,\n      mid: this.leftPadding + Math.floor((percentages.middle / 100) * drawWidth) + borderOffset,\n      end: this.leftPadding + Math.floor((percentages.end / 100) * drawWidth) + borderOffset,\n    };\n  }\n\n  private buildSimplifiedBarLayers(context: CanvasRenderingContext2D, node: NetworkNode, y: number): void {\n    const request = node.request();\n    if (!request) {\n      return;\n    }\n    const borderWidth = 1;\n    const borderOffset = borderWidth % 2 === 0 ? 0 : 0.5;\n\n    const ranges = this.getSimplifiedBarRange(request, borderOffset);\n    const height = this.getBarHeight();\n    y += Math.floor(this.rowHeight / 2 - height / 2 + borderWidth) - borderWidth / 2;\n\n    const waitingStyle = (this.styleForWaitingResourceType.get(request.resourceType()) as _LayerStyle);\n    const waitingPath = (this.pathForStyle.get(waitingStyle) as Path2D);\n    waitingPath.rect(ranges.start, y, ranges.mid - ranges.start, height - borderWidth);\n\n    const barWidth = Math.max(2, ranges.end - ranges.mid);\n    const downloadingStyle = (this.styleForDownloadingResourceType.get(request.resourceType()) as _LayerStyle);\n    const downloadingPath = (this.pathForStyle.get(downloadingStyle) as Path2D);\n    downloadingPath.rect(ranges.mid, y, barWidth, height - borderWidth);\n\n    let labels: Label|null = null;\n    if (node.hovered()) {\n      labels = this.calculator.computeBarGraphLabels(request);\n      const barDotLineLength = 10;\n      const leftLabelWidth = context.measureText(labels.left).width;\n      const rightLabelWidth = context.measureText(labels.right).width;\n      const hoverLinePath = (this.pathForStyle.get(this.hoverDetailsStyle) as Path2D);\n\n      if (leftLabelWidth < ranges.mid - ranges.start) {\n        const midBarX = ranges.start + (ranges.mid - ranges.start - leftLabelWidth) / 2;\n        this.textLayers.push({text: labels.left, x: midBarX, y: y + this.fontSize});\n      } else if (barDotLineLength + leftLabelWidth + this.leftPadding < ranges.start) {\n        this.textLayers.push(\n            {text: labels.left, x: ranges.start - leftLabelWidth - barDotLineLength - 1, y: y + this.fontSize});\n        hoverLinePath.moveTo(ranges.start - barDotLineLength, y + Math.floor(height / 2));\n        hoverLinePath.arc(ranges.start, y + Math.floor(height / 2), 2, 0, 2 * Math.PI);\n        hoverLinePath.moveTo(ranges.start - barDotLineLength, y + Math.floor(height / 2));\n        hoverLinePath.lineTo(ranges.start, y + Math.floor(height / 2));\n      }\n\n      const endX = ranges.mid + barWidth + borderOffset;\n      if (rightLabelWidth < endX - ranges.mid) {\n        const midBarX = ranges.mid + (endX - ranges.mid - rightLabelWidth) / 2;\n        this.textLayers.push({text: labels.right, x: midBarX, y: y + this.fontSize});\n      } else if (endX + barDotLineLength + rightLabelWidth < this.offsetWidth - this.leftPadding) {\n        this.textLayers.push({text: labels.right, x: endX + barDotLineLength + 1, y: y + this.fontSize});\n        hoverLinePath.moveTo(endX, y + Math.floor(height / 2));\n        hoverLinePath.arc(endX, y + Math.floor(height / 2), 2, 0, 2 * Math.PI);\n        hoverLinePath.moveTo(endX, y + Math.floor(height / 2));\n        hoverLinePath.lineTo(endX + barDotLineLength, y + Math.floor(height / 2));\n      }\n    }\n\n    if (!this.calculator.startAtZero) {\n      const queueingRange =\n          (RequestTimingView.calculateRequestTimeRanges(request, 0)\n               .find(data => data.name === RequestTimeRangeNames.Total) as RequestTimeRange);\n      const leftLabelWidth = labels ? context.measureText(labels.left).width : 0;\n      const leftTextPlacedInBar = leftLabelWidth < ranges.mid - ranges.start;\n      const wiskerTextPadding = 13;\n      const textOffset = (labels && !leftTextPlacedInBar) ? leftLabelWidth + wiskerTextPadding : 0;\n      const queueingStart = this.timeToPosition(queueingRange.start);\n      if (ranges.start - textOffset > queueingStart) {\n        const wiskerPath = (this.pathForStyle.get(this.wiskerStyle) as Path2D);\n        wiskerPath.moveTo(queueingStart, y + Math.floor(height / 2));\n        wiskerPath.lineTo(ranges.start - textOffset, y + Math.floor(height / 2));\n\n        // TODO(allada) This needs to be floored.\n        const wiskerHeight = height / 2;\n        wiskerPath.moveTo(queueingStart + borderOffset, y + wiskerHeight / 2);\n        wiskerPath.lineTo(queueingStart + borderOffset, y + height - wiskerHeight / 2 - 1);\n      }\n    }\n  }\n\n  private buildTimingBarLayers(node: NetworkNode, y: number): void {\n    const request = node.request();\n    if (!request) {\n      return;\n    }\n    const ranges = RequestTimingView.calculateRequestTimeRanges(request, 0);\n    let index = 0;\n    for (const range of ranges) {\n      if (range.name === RequestTimeRangeNames.Total || range.name === RequestTimeRangeNames.Sending ||\n          range.end - range.start === 0) {\n        continue;\n      }\n\n      const style = (this.styleForTimeRangeName.get(range.name) as _LayerStyle);\n      const path = (this.pathForStyle.get(style) as Path2D);\n      const lineWidth = style.lineWidth || 0;\n      const height = this.getBarHeight(range.name);\n      const middleBarY = y + Math.floor(this.rowHeight / 2 - height / 2) + lineWidth / 2;\n      const start = this.timeToPosition(range.start);\n      const end = this.timeToPosition(range.end);\n      path.rect(start + (index * BAR_SPACING), middleBarY, end - start, height - lineWidth);\n      index++;\n    }\n  }\n\n  private decorateRow(context: CanvasRenderingContext2D, node: NetworkNode, y: number): void {\n    const nodeBgColorId = node.backgroundColor();\n    context.save();\n    context.beginPath();\n    context.fillStyle = ThemeSupport.ThemeSupport.instance().getComputedValue(nodeBgColorId);\n    context.rect(0, y, this.offsetWidth, this.rowHeight);\n    context.fill();\n    context.restore();\n  }\n}\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface _TextLayer {\n  x: number;\n  y: number;\n  text: string;\n}\n\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface _LayerStyle {\n  fillStyle?: string;\n  lineWidth?: number;\n  borderColor?: string;\n}\n"],
  "mappings": "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",
  "names": []
}
