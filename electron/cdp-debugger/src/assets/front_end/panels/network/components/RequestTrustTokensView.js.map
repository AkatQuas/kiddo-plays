{
  "version": 3,
  "sources": ["../../../../../../../front_end/panels/network/components/RequestTrustTokensView.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as SDK from '../../../core/sdk/sdk.js';\nimport * as Protocol from '../../../generated/protocol.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as IconButton from '../../../ui/components/icon_button/icon_button.js';\nimport * as ReportView from '../../../ui/components/report_view/report_view.js';\nimport * as UI from '../../../ui/legacy/legacy.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\nimport requestTrustTokensViewStyles from './RequestTrustTokensView.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Section heading in the Trust Token tab\n  */\n  parameters: 'Parameters',\n  /**\n  *@description Text that refers to some types\n  */\n  type: 'Type',\n  /**\n  *@description Label for a Trust Token parameter\n  */\n  refreshPolicy: 'Refresh policy',\n  /**\n  *@description Label for a list if origins in the Trust Token tab\n  */\n  issuers: 'Issuers',\n  /**\n  *@description Label for a report field in the Network panel\n  */\n  topLevelOrigin: 'Top level origin',\n  /**\n  *@description Text for the issuer of an item\n  */\n  issuer: 'Issuer',\n  /**\n  *@description Heading of a report section in the Network panel\n  */\n  result: 'Result',\n  /**\n  *@description Text for the status of something\n  */\n  status: 'Status',\n  /**\n  *@description Label for a field in the Network panel\n  */\n  numberOfIssuedTokens: 'Number of issued tokens',\n  /**\n  * @description Text for the success status in the Network panel. Refers to the outcome of a network\n  * request which will either be 'Success' or 'Failure'.\n  */\n  success: 'Success',\n  /**\n  *@description Text in the network panel for an error status\n  */\n  failure: 'Failure',\n  /**\n  *@description Detailed text for a success status in the Network panel\n  */\n  theOperationsResultWasServedFrom: 'The operations result was served from cache.',\n  /**\n  *@description Detailed text for a success status in the Network panel\n  */\n  theOperationWasFulfilledLocally: 'The operation was fulfilled locally, no request was sent.',\n  /**\n  *@description Text for an error status in the Network panel\n  */\n  aClientprovidedArgumentWas: 'A client-provided argument was malformed or otherwise invalid.',\n  /**\n  *@description Text for an error status in the Network panel\n  */\n  eitherNoInputsForThisOperation:\n      'Either no inputs for this operation are available or the output exceeds the operations quota.',\n  /**\n  *@description Text for an error status in the Network panel\n  */\n  theServersResponseWasMalformedOr: 'The servers response was malformed or otherwise invalid.',\n  /**\n  *@description Text for an error status in the Network panel\n  */\n  theOperationFailedForAnUnknown: 'The operation failed for an unknown reason.',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/network/components/RequestTrustTokensView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class RequestTrustTokensView extends UI.Widget.VBox {\n  readonly #reportView = new RequestTrustTokensReport();\n  readonly #request: SDK.NetworkRequest.NetworkRequest;\n\n  constructor(request: SDK.NetworkRequest.NetworkRequest) {\n    super();\n    this.#request = request;\n\n    this.contentElement.appendChild(this.#reportView);\n  }\n\n  wasShown(): void {\n    this.#request.addEventListener(SDK.NetworkRequest.Events.TrustTokenResultAdded, this.#refreshReportView, this);\n\n    this.#refreshReportView();\n  }\n\n  willHide(): void {\n    this.#request.removeEventListener(SDK.NetworkRequest.Events.TrustTokenResultAdded, this.#refreshReportView, this);\n  }\n\n  #refreshReportView(): void {\n    this.#reportView.data = {\n      params: this.#request.trustTokenParams(),\n      result: this.#request.trustTokenOperationDoneEvent(),\n    };\n  }\n}\n\nexport interface RequestTrustTokensReportData {\n  params?: Readonly<Protocol.Network.TrustTokenParams>;\n  result?: Readonly<Protocol.Network.TrustTokenOperationDoneEvent>;\n}\n\nexport class RequestTrustTokensReport extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-trust-token-report`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #trustTokenData?: Readonly<RequestTrustTokensReportData>;\n\n  set data(data: RequestTrustTokensReportData) {\n    this.#trustTokenData = data;\n    this.#render();\n  }\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [requestTrustTokensViewStyles];\n  }\n\n  #render(): void {\n    if (!this.#trustTokenData) {\n      throw new Error('Trying to render a Trust Token report without providing data');\n    }\n\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    LitHtml.render(LitHtml.html`<${ReportView.ReportView.Report.litTagName}>\n        ${this.#renderParameterSection()}\n        ${this.#renderResultSection()}\n      </${ReportView.ReportView.Report.litTagName}>\n    `, this.#shadow, {host: this});\n    // clang-format on\n  }\n\n  #renderParameterSection(): LitHtml.LitTemplate {\n    if (!this.#trustTokenData || !this.#trustTokenData.params) {\n      return LitHtml.nothing;\n    }\n\n    return LitHtml.html`\n      <${ReportView.ReportView.ReportSectionHeader.litTagName}>${i18nString(UIStrings.parameters)}</${\n        ReportView.ReportView.ReportSectionHeader.litTagName}>\n      ${renderRowWithCodeValue(i18nString(UIStrings.type), this.#trustTokenData.params.type.toString())}\n      ${this.#renderRefreshPolicy(this.#trustTokenData.params)}\n      ${this.#renderIssuers(this.#trustTokenData.params)}\n      ${this.#renderIssuerAndTopLevelOriginFromResult()}\n      <${ReportView.ReportView.ReportSectionDivider.litTagName}></${\n        ReportView.ReportView.ReportSectionDivider.litTagName}>\n    `;\n  }\n\n  #renderRefreshPolicy(params: Protocol.Network.TrustTokenParams): LitHtml.LitTemplate {\n    if (params.type !== Protocol.Network.TrustTokenOperationType.Redemption) {\n      return LitHtml.nothing;\n    }\n    return renderRowWithCodeValue(i18nString(UIStrings.refreshPolicy), params.refreshPolicy.toString());\n  }\n\n  #renderIssuers(params: Protocol.Network.TrustTokenParams): LitHtml.LitTemplate {\n    if (!params.issuers || params.issuers.length === 0) {\n      return LitHtml.nothing;\n    }\n\n    return LitHtml.html`\n      <${ReportView.ReportView.ReportKey.litTagName}>${i18nString(UIStrings.issuers)}</${\n        ReportView.ReportView.ReportKey.litTagName}>\n      <${ReportView.ReportView.ReportValue.litTagName}>\n        <ul class=\"issuers-list\">\n          ${params.issuers.map(issuer => LitHtml.html`<li>${issuer}</li>`)}\n        </ul>\n      </${ReportView.ReportView.ReportValue.litTagName}>\n    `;\n  }\n\n  // The issuer and top level origin are technically parameters but reported in the\n  // result structure due to the timing when they are calculated in the backend.\n  // Nonetheless, we show them as part of the parameter section.\n  #renderIssuerAndTopLevelOriginFromResult(): LitHtml.LitTemplate {\n    if (!this.#trustTokenData || !this.#trustTokenData.result) {\n      return LitHtml.nothing;\n    }\n\n    return LitHtml.html`\n      ${renderSimpleRowIfValuePresent(i18nString(UIStrings.topLevelOrigin), this.#trustTokenData.result.topLevelOrigin)}\n      ${renderSimpleRowIfValuePresent(i18nString(UIStrings.issuer), this.#trustTokenData.result.issuerOrigin)}`;\n  }\n\n  #renderResultSection(): LitHtml.LitTemplate {\n    if (!this.#trustTokenData || !this.#trustTokenData.result) {\n      return LitHtml.nothing;\n    }\n    return LitHtml.html`\n      <${ReportView.ReportView.ReportSectionHeader.litTagName}>${i18nString(UIStrings.result)}</${\n        ReportView.ReportView.ReportSectionHeader.litTagName}>\n      <${ReportView.ReportView.ReportKey.litTagName}>${i18nString(UIStrings.status)}</${\n        ReportView.ReportView.ReportKey.litTagName}>\n      <${ReportView.ReportView.ReportValue.litTagName}>\n        <span>\n          <${IconButton.Icon.Icon.litTagName} class=\"status-icon\"\n            .data=${getIconForStatusCode(this.#trustTokenData.result.status) as IconButton.Icon.IconData}>\n          </${IconButton.Icon.Icon.litTagName}>\n          <strong>${getSimplifiedStatusTextForStatusCode(this.#trustTokenData.result.status)}</strong>\n          ${getDetailedTextForStatusCode(this.#trustTokenData.result.status)}\n        </span>\n      </${ReportView.ReportView.ReportValue.litTagName}>\n      ${this.#renderIssuedTokenCount(this.#trustTokenData.result)}\n      <${ReportView.ReportView.ReportSectionDivider.litTagName}></${\n        ReportView.ReportView.ReportSectionDivider.litTagName}>\n      `;\n  }\n\n  #renderIssuedTokenCount(result: Protocol.Network.TrustTokenOperationDoneEvent): LitHtml.LitTemplate {\n    if (result.type !== Protocol.Network.TrustTokenOperationType.Issuance) {\n      return LitHtml.nothing;\n    }\n    return renderSimpleRowIfValuePresent(i18nString(UIStrings.numberOfIssuedTokens), result.issuedTokenCount);\n  }\n}\n\nconst SUCCESS_ICON_DATA: IconButton.Icon.IconWithName = {\n  color: 'rgb(12, 164, 12)',\n  iconName: 'ic_checkmark_16x16',\n  width: '12px',\n};\n\nconst FAILURE_ICON_DATA: IconButton.Icon.IconWithName = {\n  color: '',\n  iconName: 'error_icon',\n  width: '12px',\n};\n\nexport function statusConsideredSuccess(status: Protocol.Network.TrustTokenOperationDoneEventStatus): boolean {\n  return status === Protocol.Network.TrustTokenOperationDoneEventStatus.Ok ||\n      status === Protocol.Network.TrustTokenOperationDoneEventStatus.AlreadyExists ||\n      status === Protocol.Network.TrustTokenOperationDoneEventStatus.FulfilledLocally;\n}\n\nfunction getIconForStatusCode(status: Protocol.Network.TrustTokenOperationDoneEventStatus):\n    IconButton.Icon.IconWithName {\n  return statusConsideredSuccess(status) ? SUCCESS_ICON_DATA : FAILURE_ICON_DATA;\n}\n\nfunction getSimplifiedStatusTextForStatusCode(status: Protocol.Network.TrustTokenOperationDoneEventStatus): string {\n  return statusConsideredSuccess(status) ? i18nString(UIStrings.success) : i18nString(UIStrings.failure);\n}\n\nfunction getDetailedTextForStatusCode(status: Protocol.Network.TrustTokenOperationDoneEventStatus): string|null {\n  switch (status) {\n    case Protocol.Network.TrustTokenOperationDoneEventStatus.Ok:\n      return null;\n    case Protocol.Network.TrustTokenOperationDoneEventStatus.AlreadyExists:\n      return i18nString(UIStrings.theOperationsResultWasServedFrom);\n    case Protocol.Network.TrustTokenOperationDoneEventStatus.FulfilledLocally:\n      return i18nString(UIStrings.theOperationWasFulfilledLocally);\n    case Protocol.Network.TrustTokenOperationDoneEventStatus.InvalidArgument:\n      return i18nString(UIStrings.aClientprovidedArgumentWas);\n    case Protocol.Network.TrustTokenOperationDoneEventStatus.ResourceExhausted:\n      return i18nString(UIStrings.eitherNoInputsForThisOperation);\n    case Protocol.Network.TrustTokenOperationDoneEventStatus.BadResponse:\n      return i18nString(UIStrings.theServersResponseWasMalformedOr);\n    case Protocol.Network.TrustTokenOperationDoneEventStatus.FailedPrecondition:\n    case Protocol.Network.TrustTokenOperationDoneEventStatus.Unavailable:\n    case Protocol.Network.TrustTokenOperationDoneEventStatus.InternalError:\n    case Protocol.Network.TrustTokenOperationDoneEventStatus.UnknownError:\n      return i18nString(UIStrings.theOperationFailedForAnUnknown);\n  }\n}\n\nfunction renderSimpleRowIfValuePresent<T>(key: string, value: T|undefined): LitHtml.LitTemplate {\n  if (value === undefined) {\n    return LitHtml.nothing;\n  }\n\n  return LitHtml.html`\n    <${ReportView.ReportView.ReportKey.litTagName}>${key}</${ReportView.ReportView.ReportKey.litTagName}>\n    <${ReportView.ReportView.ReportValue.litTagName}>${value}</${ReportView.ReportView.ReportValue.litTagName}>\n  `;\n}\n\nfunction renderRowWithCodeValue(key: string, value: string): LitHtml.TemplateResult {\n  return LitHtml.html`\n    <${ReportView.ReportView.ReportKey.litTagName}>${key}</${ReportView.ReportView.ReportKey.litTagName}>\n    <${ReportView.ReportView.ReportValue.litTagName} class=\"code\">${value}</${\n      ReportView.ReportView.ReportValue.litTagName}>\n  `;\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-trust-token-report', RequestTrustTokensReport);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-trust-token-report': RequestTrustTokensReport;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
