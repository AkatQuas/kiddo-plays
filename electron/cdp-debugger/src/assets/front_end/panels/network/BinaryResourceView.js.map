{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/network/BinaryResourceView.ts"],
  "sourcesContent": ["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\n\nimport binaryResourceViewStyles from './binaryResourceView.css.js';\n\nimport type * as Platform from '../../core/platform/platform.js';\nimport type * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as SourceFrame from '../../ui/legacy/components/source_frame/source_frame.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nconst UIStrings = {\n  /**\n  * @description Text in Binary Resource View of the Network panel. Shown to the user as a status\n  * message after the current text has been copied to the clipboard. Base64 is a format for encoding\n  * data.\n  */\n  copiedAsBase: 'Copied as `Base64`',\n  /**\n  *@description Text in Binary Resource View of the Network panel\n  */\n  hexViewer: '`Hex` Viewer',\n  /**\n  * @description Text in Binary Resource View of the Network panel. Shown to the user as a status\n  * message after the current text has been copied to the clipboard. Hex is short for hexadecimal,\n  * and is a format for encoding data.\n  */\n  copiedAsHex: 'Copied as `Hex`',\n  /**\n  *@description Text in Binary Resource View of the Network panel. Shown to the user as a status\n  * message after the current text has been copied to the clipboard. UTF-8 is a format for encoding data.\n  */\n  copiedAsUtf: 'Copied as `UTF-8`',\n  /**\n  *@description Screen reader label for a select box that chooses how to display binary data in the Network panel\n  */\n  binaryViewType: 'Binary view type',\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon copy button in the Binary Resource View of the Network panel\n  */\n  copyToClipboard: 'Copy to clipboard',\n  /**\n  * @description A context menu command in the Binary Resource View of the Network panel, for\n  * copying to the clipboard. Base64 is a format for encoding data.\n  */\n  copyAsBase: 'Copy as `Base64`',\n  /**\n  *@description A context menu command in the Binary Resource View of the Network panel, for copying\n  * to the clipboard. Hex is short for hexadecimal, and is a format for encoding data.\n  */\n  copyAsHex: 'Copy as `Hex`',\n  /**\n  *@description A context menu command in the Binary Resource View of the Network panel, for copying\n  *to the clipboard. UTF-8 is a format for encoding data.\n  */\n  copyAsUtf: 'Copy as `UTF-8`',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/network/BinaryResourceView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class BinaryResourceView extends UI.Widget.VBox {\n  private readonly binaryResourceViewFactory: SourceFrame.BinaryResourceViewFactory.BinaryResourceViewFactory;\n  private readonly toolbar: UI.Toolbar.Toolbar;\n  private readonly binaryViewObjects: BinaryViewObject[];\n  private binaryViewTypeSetting: Common.Settings.Setting<string>;\n  private binaryViewTypeCombobox: UI.Toolbar.ToolbarComboBox;\n  private readonly copiedText: UI.Toolbar.ToolbarText;\n  private addFadeoutSettimeoutId: number|null;\n  private lastView: UI.Widget.Widget|null;\n\n  constructor(\n      base64content: string, contentUrl: Platform.DevToolsPath.UrlString,\n      resourceType: Common.ResourceType.ResourceType) {\n    super();\n\n    this.binaryResourceViewFactory =\n        new SourceFrame.BinaryResourceViewFactory.BinaryResourceViewFactory(base64content, contentUrl, resourceType);\n\n    this.toolbar = new UI.Toolbar.Toolbar('binary-view-toolbar', this.element);\n\n    this.binaryViewObjects = [\n      new BinaryViewObject(\n          'base64', i18n.i18n.lockedString('Base64'), i18nString(UIStrings.copiedAsBase),\n          this.binaryResourceViewFactory.createBase64View.bind(this.binaryResourceViewFactory),\n          this.binaryResourceViewFactory.base64.bind(this.binaryResourceViewFactory)),\n      new BinaryViewObject(\n          'hex', i18nString(UIStrings.hexViewer), i18nString(UIStrings.copiedAsHex),\n          this.binaryResourceViewFactory.createHexView.bind(this.binaryResourceViewFactory),\n          this.binaryResourceViewFactory.hex.bind(this.binaryResourceViewFactory)),\n      new BinaryViewObject(\n          'utf8', i18n.i18n.lockedString('UTF-8'), i18nString(UIStrings.copiedAsUtf),\n          this.binaryResourceViewFactory.createUtf8View.bind(this.binaryResourceViewFactory),\n          this.binaryResourceViewFactory.utf8.bind(this.binaryResourceViewFactory)),\n    ];\n    this.binaryViewTypeSetting = Common.Settings.Settings.instance().createSetting('binaryViewType', 'hex');\n    this.binaryViewTypeCombobox =\n        new UI.Toolbar.ToolbarComboBox(this.binaryViewTypeChanged.bind(this), i18nString(UIStrings.binaryViewType));\n    for (const viewObject of this.binaryViewObjects) {\n      this.binaryViewTypeCombobox.addOption(\n          this.binaryViewTypeCombobox.createOption(viewObject.label, viewObject.type));\n    }\n    this.toolbar.appendToolbarItem(this.binaryViewTypeCombobox);\n\n    const copyButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.copyToClipboard), 'largeicon-copy');\n    copyButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, _event => {\n      void this.copySelectedViewToClipboard();\n    }, this);\n    this.toolbar.appendToolbarItem(copyButton);\n\n    this.copiedText = new UI.Toolbar.ToolbarText();\n    this.copiedText.element.classList.add('binary-view-copied-text');\n    this.toolbar.element.appendChild(this.copiedText.element);\n\n    this.addFadeoutSettimeoutId = null;\n\n    this.lastView = null;\n    this.updateView();\n  }\n\n  private getCurrentViewObject(): BinaryViewObject|null {\n    const filter = (obj: BinaryViewObject): boolean => obj.type === this.binaryViewTypeSetting.get();\n    const binaryViewObject = this.binaryViewObjects.find(filter);\n    console.assert(\n        Boolean(binaryViewObject),\n        `No binary view found for binary view type found in setting 'binaryViewType': ${\n            this.binaryViewTypeSetting.get()}`);\n    return binaryViewObject || null;\n  }\n\n  private async copySelectedViewToClipboard(): Promise<void> {\n    const viewObject = this.getCurrentViewObject();\n    if (!viewObject) {\n      return;\n    }\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText((await viewObject.content()).content);\n    this.copiedText.setText(viewObject.copiedMessage);\n    this.copiedText.element.classList.remove('fadeout');\n    function addFadeoutClass(this: BinaryResourceView): void {\n      this.copiedText.element.classList.add('fadeout');\n    }\n    if (this.addFadeoutSettimeoutId) {\n      clearTimeout(this.addFadeoutSettimeoutId);\n      this.addFadeoutSettimeoutId = null;\n    }\n    this.addFadeoutSettimeoutId = window.setTimeout(addFadeoutClass.bind(this), 2000);\n  }\n\n  wasShown(): void {\n    this.updateView();\n    this.registerCSSFiles([binaryResourceViewStyles]);\n  }\n\n  private updateView(): void {\n    const newViewObject = this.getCurrentViewObject();\n    if (!newViewObject) {\n      return;\n    }\n\n    const newView = newViewObject.getView();\n    if (newView === this.lastView) {\n      return;\n    }\n\n    if (this.lastView) {\n      this.lastView.detach();\n    }\n    this.lastView = newView;\n\n    newView.show(this.element, this.toolbar.element);\n    this.binaryViewTypeCombobox.selectElement().value = this.binaryViewTypeSetting.get();\n  }\n\n  private binaryViewTypeChanged(): void {\n    const selectedOption = (this.binaryViewTypeCombobox.selectedOption() as HTMLOptionElement | null);\n    if (!selectedOption) {\n      return;\n    }\n    const newViewType = selectedOption.value;\n    if (this.binaryViewTypeSetting.get() === newViewType) {\n      return;\n    }\n    this.binaryViewTypeSetting.set(newViewType);\n    this.updateView();\n  }\n\n  addCopyToContextMenu(contextMenu: UI.ContextMenu.ContextMenu, submenuItemText: string): void {\n    const copyMenu = contextMenu.clipboardSection().appendSubMenuItem(submenuItemText);\n    const footerSection = copyMenu.footerSection();\n\n    footerSection.appendItem(i18nString(UIStrings.copyAsBase), async () => {\n      const content = await this.binaryResourceViewFactory.base64();\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(content.content);\n    });\n    footerSection.appendItem(i18nString(UIStrings.copyAsHex), async () => {\n      const content = await this.binaryResourceViewFactory.hex();\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(content.content);\n    });\n    footerSection.appendItem(i18nString(UIStrings.copyAsUtf), async () => {\n      const content = await this.binaryResourceViewFactory.utf8();\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(content.content);\n    });\n  }\n}\n\nexport class BinaryViewObject {\n  type: string;\n  label: string;\n  copiedMessage: string;\n  content: () => Promise<TextUtils.ContentProvider.DeferredContent>;\n  private createViewFn: () => UI.Widget.Widget;\n  private view: UI.Widget.Widget|null;\n\n  constructor(\n      type: string, label: string, copiedMessage: string, createViewFn: () => UI.Widget.Widget,\n      deferredContent: () => Promise<TextUtils.ContentProvider.DeferredContent>) {\n    this.type = type;\n    this.label = label;\n    this.copiedMessage = copiedMessage;\n    this.content = deferredContent;\n    this.createViewFn = createViewFn;\n\n    this.view = null;\n  }\n\n  getView(): UI.Widget.Widget {\n    if (!this.view) {\n      this.view = this.createViewFn();\n    }\n    return this.view;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
