{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/network/BlockedURLsPane.ts"],
  "sourcesContent": ["// Copyright (c) 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport blockedURLsPaneStyles from './blockedURLsPane.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Text to enable blocking of network requests\n  */\n  enableNetworkRequestBlocking: 'Enable network request blocking',\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon add button in the Blocked URLs Pane of the Network panel\n  */\n  addPattern: 'Add pattern',\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon clear button in the Blocked URLs Pane of the Network panel\n  */\n  removeAllPatterns: 'Remove all patterns',\n  /**\n  *@description Accessible label for the button to add request blocking patterns in the network request blocking tool\n  */\n  addNetworkRequestBlockingPattern: 'Add network request blocking pattern',\n  /**\n  *@description Button to add a pattern to block netwrok requests in the Network request blocking tool\n  *@example {Add pattern} PH1\n  */\n  networkRequestsAreNotBlockedS: 'Network requests are not blocked. {PH1}',\n  /**\n  *@description Text in Blocked URLs Pane of the Network panel\n  *@example {4} PH1\n  */\n  dBlocked: '{PH1} blocked',\n  /**\n  *@description Text in Blocked URLs Pane of the Network panel\n  */\n  textPatternToBlockMatching: 'Text pattern to block matching requests; use * for wildcard',\n  /**\n  *@description Error text for empty list widget input in Request Blocking tool\n  */\n  patternInputCannotBeEmpty: 'Pattern input cannot be empty.',\n  /**\n  *@description Error text for duplicate list widget input in Request Blocking tool\n  */\n  patternAlreadyExists: 'Pattern already exists.',\n  /**\n  *@description Message to be announced for a when list item is removed from list widget\n  */\n  itemDeleted: 'Item successfully deleted',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/network/BlockedURLsPane.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport let blockedURLsPaneInstance: BlockedURLsPane|null = null;\n\nexport class BlockedURLsPane extends UI.Widget.VBox implements\n    UI.ListWidget.Delegate<SDK.NetworkManager.BlockedPattern> {\n  private manager: SDK.NetworkManager.MultitargetNetworkManager;\n  private readonly toolbar: UI.Toolbar.Toolbar;\n  private readonly enabledCheckbox: UI.Toolbar.ToolbarCheckbox;\n  private readonly list: UI.ListWidget.ListWidget<SDK.NetworkManager.BlockedPattern>;\n  private editor: UI.ListWidget.Editor<SDK.NetworkManager.BlockedPattern>|null;\n  private blockedCountForUrl: Map<string, number>;\n  private readonly updateThrottler: Common.Throttler.Throttler;\n\n  constructor() {\n    super(true);\n\n    this.manager = SDK.NetworkManager.MultitargetNetworkManager.instance();\n    this.manager.addEventListener(SDK.NetworkManager.MultitargetNetworkManager.Events.BlockedPatternsChanged, () => {\n      void this.update();\n    }, this);\n\n    this.toolbar = new UI.Toolbar.Toolbar('', this.contentElement);\n    this.enabledCheckbox = new UI.Toolbar.ToolbarCheckbox(\n        i18nString(UIStrings.enableNetworkRequestBlocking), undefined, this.toggleEnabled.bind(this));\n    this.toolbar.appendToolbarItem(this.enabledCheckbox);\n    this.toolbar.appendSeparator();\n    const addButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.addPattern), 'largeicon-add');\n    addButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.addButtonClicked, this);\n    this.toolbar.appendToolbarItem(addButton);\n    const clearButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.removeAllPatterns), 'largeicon-clear');\n    clearButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.removeAll, this);\n    this.toolbar.appendToolbarItem(clearButton);\n\n    this.list = new UI.ListWidget.ListWidget(this);\n    this.list.element.classList.add('blocked-urls');\n\n    this.list.setEmptyPlaceholder(this.createEmptyPlaceholder());\n    this.list.show(this.contentElement);\n\n    this.editor = null;\n\n    this.blockedCountForUrl = new Map();\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.NetworkManager.NetworkManager, SDK.NetworkManager.Events.RequestFinished, this.onRequestFinished, this);\n\n    this.updateThrottler = new Common.Throttler.Throttler(200);\n\n    void this.update();\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): BlockedURLsPane {\n    const {forceNew} = opts;\n    if (!blockedURLsPaneInstance || forceNew) {\n      blockedURLsPaneInstance = new BlockedURLsPane();\n    }\n    return blockedURLsPaneInstance;\n  }\n\n  private createEmptyPlaceholder(): Element {\n    const element = this.contentElement.createChild('div', 'no-blocked-urls');\n    const addButton =\n        UI.UIUtils.createTextButton(i18nString(UIStrings.addPattern), this.addButtonClicked.bind(this), 'add-button');\n    UI.ARIAUtils.setAccessibleName(addButton, i18nString(UIStrings.addNetworkRequestBlockingPattern));\n    element.appendChild(\n        i18n.i18n.getFormatLocalizedString(str_, UIStrings.networkRequestsAreNotBlockedS, {PH1: addButton}));\n    return element;\n  }\n\n  static reset(): void {\n    if (blockedURLsPaneInstance) {\n      blockedURLsPaneInstance.reset();\n    }\n  }\n\n  private addButtonClicked(): void {\n    this.manager.setBlockingEnabled(true);\n    this.list.addNewItem(0, {url: Platform.DevToolsPath.EmptyUrlString, enabled: true});\n  }\n\n  renderItem(pattern: SDK.NetworkManager.BlockedPattern, editable: boolean): Element {\n    const count = this.blockedRequestsCount(pattern.url);\n    const element = document.createElement('div');\n    element.classList.add('blocked-url');\n    const checkbox = (element.createChild('input', 'blocked-url-checkbox') as HTMLInputElement);\n    checkbox.type = 'checkbox';\n    checkbox.checked = pattern.enabled;\n    checkbox.disabled = !editable;\n    element.createChild('div', 'blocked-url-label').textContent = pattern.url;\n    element.createChild('div', 'blocked-url-count').textContent = i18nString(UIStrings.dBlocked, {PH1: count});\n    if (editable) {\n      element.addEventListener('click', event => this.togglePattern(pattern, event));\n      checkbox.addEventListener('click', event => this.togglePattern(pattern, event));\n    }\n    return element;\n  }\n\n  private togglePattern(pattern: SDK.NetworkManager.BlockedPattern, event: Event): void {\n    event.consume(true);\n    const patterns = this.manager.blockedPatterns();\n    patterns.splice(patterns.indexOf(pattern), 1, {enabled: !pattern.enabled, url: pattern.url});\n    this.manager.setBlockedPatterns(patterns);\n  }\n\n  private toggleEnabled(): void {\n    this.manager.setBlockingEnabled(!this.manager.blockingEnabled());\n    void this.update();\n  }\n\n  removeItemRequested(pattern: SDK.NetworkManager.BlockedPattern, index: number): void {\n    const patterns = this.manager.blockedPatterns();\n    patterns.splice(index, 1);\n    this.manager.setBlockedPatterns(patterns);\n    UI.ARIAUtils.alert(UIStrings.itemDeleted);\n  }\n\n  beginEdit(pattern: SDK.NetworkManager.BlockedPattern): UI.ListWidget.Editor<SDK.NetworkManager.BlockedPattern> {\n    this.editor = this.createEditor();\n    this.editor.control('url').value = pattern.url;\n    return this.editor;\n  }\n\n  commitEdit(\n      item: SDK.NetworkManager.BlockedPattern, editor: UI.ListWidget.Editor<SDK.NetworkManager.BlockedPattern>,\n      isNew: boolean): void {\n    const url = editor.control('url').value as Platform.DevToolsPath.UrlString;\n    const patterns = this.manager.blockedPatterns();\n    if (isNew) {\n      patterns.push({enabled: true, url: url});\n    } else {\n      patterns.splice(patterns.indexOf(item), 1, {enabled: true, url: url});\n    }\n\n    this.manager.setBlockedPatterns(patterns);\n  }\n\n  private createEditor(): UI.ListWidget.Editor<SDK.NetworkManager.BlockedPattern> {\n    if (this.editor) {\n      return this.editor;\n    }\n\n    const editor = new UI.ListWidget.Editor<SDK.NetworkManager.BlockedPattern>();\n    const content = editor.contentElement();\n    const titles = content.createChild('div', 'blocked-url-edit-row');\n    titles.createChild('div').textContent = i18nString(UIStrings.textPatternToBlockMatching);\n    const fields = content.createChild('div', 'blocked-url-edit-row');\n    const validator = (_item: SDK.NetworkManager.BlockedPattern, _index: number, input: UI.ListWidget.EditorControl): {\n      valid: boolean,\n      errorMessage: Common.UIString.LocalizedString|undefined,\n    } => {\n      let valid = true;\n      let errorMessage;\n      if (!input.value) {\n        errorMessage = i18nString(UIStrings.patternInputCannotBeEmpty);\n        valid = false;\n      } else if (this.manager.blockedPatterns().find(pattern => pattern.url === input.value)) {\n        errorMessage = i18nString(UIStrings.patternAlreadyExists);\n        valid = false;\n      }\n      return {valid, errorMessage};\n    };\n    const urlInput = editor.createInput('url', 'text', '', validator);\n    fields.createChild('div', 'blocked-url-edit-value').appendChild(urlInput);\n    return editor;\n  }\n\n  private removeAll(): void {\n    this.manager.setBlockedPatterns([]);\n  }\n\n  private update(): Promise<void> {\n    const enabled = this.manager.blockingEnabled();\n    this.list.element.classList.toggle('blocking-disabled', !enabled && Boolean(this.manager.blockedPatterns().length));\n\n    this.enabledCheckbox.setChecked(enabled);\n    this.list.clear();\n    for (const pattern of this.manager.blockedPatterns()) {\n      this.list.appendItem(pattern, enabled);\n    }\n    return Promise.resolve();\n  }\n\n  private blockedRequestsCount(url: string): number {\n    if (!url) {\n      return 0;\n    }\n\n    let result = 0;\n    for (const blockedUrl of this.blockedCountForUrl.keys()) {\n      if (this.matches(url, blockedUrl)) {\n        result += (this.blockedCountForUrl.get(blockedUrl) as number);\n      }\n    }\n    return result;\n  }\n\n  private matches(pattern: string, url: string): boolean {\n    let pos = 0;\n    const parts = pattern.split('*');\n    for (let index = 0; index < parts.length; index++) {\n      const part = parts[index];\n      if (!part.length) {\n        continue;\n      }\n      pos = url.indexOf(part, pos);\n      if (pos === -1) {\n        return false;\n      }\n      pos += part.length;\n    }\n    return true;\n  }\n\n  reset(): void {\n    this.blockedCountForUrl.clear();\n    void this.updateThrottler.schedule(this.update.bind(this));\n  }\n\n  private onRequestFinished(event: Common.EventTarget.EventTargetEvent<SDK.NetworkRequest.NetworkRequest>): void {\n    const request = event.data;\n    if (request.wasBlocked()) {\n      const count = this.blockedCountForUrl.get(request.url()) || 0;\n      this.blockedCountForUrl.set(request.url(), count + 1);\n      void this.updateThrottler.schedule(this.update.bind(this));\n    }\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.list.registerCSSFiles([blockedURLsPaneStyles]);\n    this.registerCSSFiles([blockedURLsPaneStyles]);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
