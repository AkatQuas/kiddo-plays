{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/network/network-meta.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport * as NetworkForward from '../../panels/network/forward/forward.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type * as Network from './network.js';\n\nconst UIStrings = {\n  /**\n  *@description Command for showing the 'Network' tool\n  */\n  showNetwork: 'Show Network',\n  /**\n  *@description Title of the Network tool\n  */\n  network: 'Network',\n  /**\n  *@description Command for showing the 'Network request blocking' tool\n  */\n  showNetworkRequestBlocking: 'Show Network request blocking',\n  /**\n  *@description Title of the 'Network request blocking' tool in the bottom drawer\n  */\n  networkRequestBlocking: 'Network request blocking',\n  /**\n  *@description Command for showing the 'Network conditions' tool\n  */\n  showNetworkConditions: 'Show Network conditions',\n  /**\n  *@description Title of the 'Network conditions' tool in the bottom drawer\n  */\n  networkConditions: 'Network conditions',\n  /**\n  *@description A tag of Network Conditions tool that can be searched in the command menu\n  */\n  diskCache: 'disk cache',\n  /**\n  *@description A tag of Network Conditions tool that can be searched in the command menu\n  */\n  networkThrottling: 'network throttling',\n  /**\n  *@description Command for showing the 'Search' tool\n  */\n  showSearch: 'Show Search',\n  /**\n  *@description Title of a search bar or tool\n  */\n  search: 'Search',\n  /**\n  *@description Title of an action in the network tool to toggle recording\n  */\n  recordNetworkLog: 'Record network log',\n  /**\n  *@description Title of an action in the network tool to toggle recording\n  */\n  stopRecordingNetworkLog: 'Stop recording network log',\n  /**\n  *@description Title of an action that hides network request details\n  */\n  hideRequestDetails: 'Hide request details',\n  /**\n  *@description Title of a setting under the Network category in Settings\n  */\n  colorcodeResourceTypes: 'Color-code resource types',\n  /**\n  *@description A tag of Network color-code resource types that can be searched in the command menu\n  */\n  colorCode: 'color code',\n  /**\n  *@description A tag of Network color-code resource types that can be searched in the command menu\n  */\n  resourceType: 'resource type',\n  /**\n  *@description Title of a setting under the Network category that can be invoked through the Command Menu\n  */\n  colorCodeByResourceType: 'Color code by resource type',\n  /**\n  *@description Title of a setting under the Network category that can be invoked through the Command Menu\n  */\n  useDefaultColors: 'Use default colors',\n  /**\n  *@description Title of a setting under the Network category in Settings\n  */\n  groupNetworkLogByFrame: 'Group network log by frame',\n  /**\n  *@description A tag of Group Network by frame setting that can be searched in the command menu\n  */\n  netWork: 'network',\n  /**\n  *@description A tag of Group Network by frame setting that can be searched in the command menu\n  */\n  frame: 'frame',\n  /**\n  *@description A tag of Group Network by frame setting that can be searched in the command menu\n  */\n  group: 'group',\n  /**\n  *@description Title of a setting under the Network category that can be invoked through the Command Menu\n  */\n  groupNetworkLogItemsByFrame: 'Group network log items by frame',\n  /**\n  *@description Title of a setting under the Network category that can be invoked through the Command Menu\n  */\n  dontGroupNetworkLogItemsByFrame: 'Don\\'t group network log items by frame',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/network/network-meta.ts', UIStrings);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\nlet loadedNetworkModule: (typeof Network|undefined);\n\nasync function loadNetworkModule(): Promise<typeof Network> {\n  if (!loadedNetworkModule) {\n    loadedNetworkModule = await import('./network.js');\n  }\n  return loadedNetworkModule;\n}\n\nfunction maybeRetrieveContextTypes<T = unknown>(getClassCallBack: (loadedNetworkModule: typeof Network) => T[]): T[] {\n  if (loadedNetworkModule === undefined) {\n    return [];\n  }\n  return getClassCallBack(loadedNetworkModule);\n}\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.PANEL,\n  id: 'network',\n  commandPrompt: i18nLazyString(UIStrings.showNetwork),\n  title: i18nLazyString(UIStrings.network),\n  order: 40,\n  async loadView() {\n    const Network = await loadNetworkModule();\n    return Network.NetworkPanel.NetworkPanel.instance();\n  },\n});\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.DRAWER_VIEW,\n  id: 'network.blocked-urls',\n  commandPrompt: i18nLazyString(UIStrings.showNetworkRequestBlocking),\n  title: i18nLazyString(UIStrings.networkRequestBlocking),\n  persistence: UI.ViewManager.ViewPersistence.CLOSEABLE,\n  order: 60,\n  async loadView() {\n    const Network = await loadNetworkModule();\n    return Network.BlockedURLsPane.BlockedURLsPane.instance();\n  },\n});\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.DRAWER_VIEW,\n  id: 'network.config',\n  commandPrompt: i18nLazyString(UIStrings.showNetworkConditions),\n  title: i18nLazyString(UIStrings.networkConditions),\n  persistence: UI.ViewManager.ViewPersistence.CLOSEABLE,\n  order: 40,\n  tags: [\n    i18nLazyString(UIStrings.diskCache),\n    i18nLazyString(UIStrings.networkThrottling),\n    i18n.i18n.lockedLazyString('useragent'),\n    i18n.i18n.lockedLazyString('user agent'),\n    i18n.i18n.lockedLazyString('user-agent'),\n  ],\n  async loadView() {\n    const Network = await loadNetworkModule();\n    return Network.NetworkConfigView.NetworkConfigView.instance();\n  },\n});\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.NETWORK_SIDEBAR,\n  id: 'network.search-network-tab',\n  commandPrompt: i18nLazyString(UIStrings.showSearch),\n  title: i18nLazyString(UIStrings.search),\n  persistence: UI.ViewManager.ViewPersistence.PERMANENT,\n  async loadView() {\n    const Network = await loadNetworkModule();\n    return Network.NetworkPanel.SearchNetworkView.instance();\n  },\n});\n\nUI.ActionRegistration.registerActionExtension({\n  actionId: 'network.toggle-recording',\n  category: UI.ActionRegistration.ActionCategory.NETWORK,\n  iconClass: UI.ActionRegistration.IconClass.LARGEICON_START_RECORDING,\n  toggleable: true,\n  toggledIconClass: UI.ActionRegistration.IconClass.LARGEICON_STOP_RECORDING,\n  toggleWithRedColor: true,\n  contextTypes() {\n    return maybeRetrieveContextTypes(Network => [Network.NetworkPanel.NetworkPanel]);\n  },\n  async loadActionDelegate() {\n    const Network = await loadNetworkModule();\n    return Network.NetworkPanel.ActionDelegate.instance();\n  },\n  options: [\n    {\n      value: true,\n      title: i18nLazyString(UIStrings.recordNetworkLog),\n    },\n    {\n      value: false,\n      title: i18nLazyString(UIStrings.stopRecordingNetworkLog),\n    },\n  ],\n  bindings: [\n    {\n      shortcut: 'Ctrl+E',\n      platform: UI.ActionRegistration.Platforms.WindowsLinux,\n    },\n    {\n      shortcut: 'Meta+E',\n      platform: UI.ActionRegistration.Platforms.Mac,\n    },\n  ],\n});\n\nUI.ActionRegistration.registerActionExtension({\n  actionId: 'network.hide-request-details',\n  category: UI.ActionRegistration.ActionCategory.NETWORK,\n  title: i18nLazyString(UIStrings.hideRequestDetails),\n  contextTypes() {\n    return maybeRetrieveContextTypes(Network => [Network.NetworkPanel.NetworkPanel]);\n  },\n  async loadActionDelegate() {\n    const Network = await loadNetworkModule();\n    return Network.NetworkPanel.ActionDelegate.instance();\n  },\n  bindings: [\n    {\n      shortcut: 'Esc',\n    },\n  ],\n});\n\nUI.ActionRegistration.registerActionExtension({\n  actionId: 'network.search',\n  category: UI.ActionRegistration.ActionCategory.NETWORK,\n  title: i18nLazyString(UIStrings.search),\n  contextTypes() {\n    return maybeRetrieveContextTypes(Network => [Network.NetworkPanel.NetworkPanel]);\n  },\n  async loadActionDelegate() {\n    const Network = await loadNetworkModule();\n    return Network.NetworkPanel.ActionDelegate.instance();\n  },\n  bindings: [\n    {\n      platform: UI.ActionRegistration.Platforms.Mac,\n      shortcut: 'Meta+F',\n      keybindSets: [\n        UI.ActionRegistration.KeybindSet.DEVTOOLS_DEFAULT,\n        UI.ActionRegistration.KeybindSet.VS_CODE,\n      ],\n    },\n    {\n      platform: UI.ActionRegistration.Platforms.WindowsLinux,\n      shortcut: 'Ctrl+F',\n      keybindSets: [\n        UI.ActionRegistration.KeybindSet.DEVTOOLS_DEFAULT,\n        UI.ActionRegistration.KeybindSet.VS_CODE,\n      ],\n    },\n  ],\n});\n\nCommon.Settings.registerSettingExtension({\n  category: Common.Settings.SettingCategory.NETWORK,\n  storageType: Common.Settings.SettingStorageType.Synced,\n  title: i18nLazyString(UIStrings.colorcodeResourceTypes),\n  settingName: 'networkColorCodeResourceTypes',\n  settingType: Common.Settings.SettingType.BOOLEAN,\n  defaultValue: false,\n  tags: [\n    i18nLazyString(UIStrings.colorCode),\n    i18nLazyString(UIStrings.resourceType),\n  ],\n  options: [\n    {\n      value: true,\n      title: i18nLazyString(UIStrings.colorCodeByResourceType),\n    },\n    {\n      value: false,\n      title: i18nLazyString(UIStrings.useDefaultColors),\n    },\n  ],\n});\n\nCommon.Settings.registerSettingExtension({\n  category: Common.Settings.SettingCategory.NETWORK,\n  storageType: Common.Settings.SettingStorageType.Synced,\n  title: i18nLazyString(UIStrings.groupNetworkLogByFrame),\n  settingName: 'network.group-by-frame',\n  settingType: Common.Settings.SettingType.BOOLEAN,\n  defaultValue: false,\n  tags: [\n    i18nLazyString(UIStrings.netWork),\n    i18nLazyString(UIStrings.frame),\n    i18nLazyString(UIStrings.group),\n  ],\n  options: [\n    {\n      value: true,\n      title: i18nLazyString(UIStrings.groupNetworkLogItemsByFrame),\n    },\n    {\n      value: false,\n      title: i18nLazyString(UIStrings.dontGroupNetworkLogItemsByFrame),\n    },\n  ],\n});\n\nUI.ViewManager.registerLocationResolver({\n  name: UI.ViewManager.ViewLocationValues.NETWORK_SIDEBAR,\n  category: UI.ViewManager.ViewLocationCategoryValues.NETWORK,\n  async loadResolver() {\n    const Network = await loadNetworkModule();\n    return Network.NetworkPanel.NetworkPanel.instance();\n  },\n});\n\nUI.ContextMenu.registerProvider({\n  contextTypes() {\n    return [\n      SDK.NetworkRequest.NetworkRequest,\n      SDK.Resource.Resource,\n      Workspace.UISourceCode.UISourceCode,\n    ];\n  },\n  async loadProvider() {\n    const Network = await loadNetworkModule();\n    return Network.NetworkPanel.ContextMenuProvider.instance();\n  },\n  experiment: undefined,\n});\n\nCommon.Revealer.registerRevealer({\n  contextTypes() {\n    return [\n      SDK.NetworkRequest.NetworkRequest,\n    ];\n  },\n  destination: Common.Revealer.RevealerDestination.NETWORK_PANEL,\n  async loadRevealer() {\n    const Network = await loadNetworkModule();\n    return Network.NetworkPanel.RequestRevealer.instance();\n  },\n});\n\nCommon.Revealer.registerRevealer({\n  contextTypes() {\n    return [NetworkForward.UIRequestLocation.UIRequestLocation];\n  },\n  async loadRevealer() {\n    const Network = await loadNetworkModule();\n    return Network.NetworkPanel.RequestLocationRevealer.instance();\n  },\n  destination: undefined,\n});\n\nCommon.Revealer.registerRevealer({\n  contextTypes() {\n    return [NetworkForward.NetworkRequestId.NetworkRequestId];\n  },\n  destination: Common.Revealer.RevealerDestination.NETWORK_PANEL,\n  async loadRevealer() {\n    const Network = await loadNetworkModule();\n    return Network.NetworkPanel.RequestIdRevealer.instance();\n  },\n});\n\nCommon.Revealer.registerRevealer({\n  contextTypes() {\n    return [\n      NetworkForward.UIFilter.UIRequestFilter,\n    ];\n  },\n  destination: Common.Revealer.RevealerDestination.NETWORK_PANEL,\n  async loadRevealer() {\n    const Network = await loadNetworkModule();\n    return Network.NetworkPanel.NetworkLogWithFilterRevealer.instance();\n  },\n});\n"],
  "mappings": "AAIA;AACA;AACA;AACA;AACA;AACA;AAIA,MAAM,YAAY;AAAA,EAIhB,aAAa;AAAA,EAIb,SAAS;AAAA,EAIT,4BAA4B;AAAA,EAI5B,wBAAwB;AAAA,EAIxB,uBAAuB;AAAA,EAIvB,mBAAmB;AAAA,EAInB,WAAW;AAAA,EAIX,mBAAmB;AAAA,EAInB,YAAY;AAAA,EAIZ,QAAQ;AAAA,EAIR,kBAAkB;AAAA,EAIlB,yBAAyB;AAAA,EAIzB,oBAAoB;AAAA,EAIpB,wBAAwB;AAAA,EAIxB,WAAW;AAAA,EAIX,cAAc;AAAA,EAId,yBAAyB;AAAA,EAIzB,kBAAkB;AAAA,EAIlB,wBAAwB;AAAA,EAIxB,SAAS;AAAA,EAIT,OAAO;AAAA,EAIP,OAAO;AAAA,EAIP,6BAA6B;AAAA,EAI7B,iCAAiC;AAAA;AAEnC,MAAM,OAAO,KAAK,KAAK,kBAAkB,kCAAkC;AAC3E,MAAM,iBAAiB,KAAK,KAAK,iCAAiC,KAAK,QAAW;AAClF,IAAI;AAEJ,mCAA4D;AAC1D,MAAI,CAAC,qBAAqB;AACxB,0BAAsB,MAAM,OAAO;AAAA;AAErC,SAAO;AAAA;AAGT,mCAAgD,kBAAqE;AACnH,MAAI,wBAAwB,QAAW;AACrC,WAAO;AAAA;AAET,SAAO,iBAAiB;AAAA;AAG1B,GAAG,YAAY,sBAAsB;AAAA,EACnC,UAAU,GAAG,YAAY,mBAAmB;AAAA,EAC5C,IAAI;AAAA,EACJ,eAAe,eAAe,UAAU;AAAA,EACxC,OAAO,eAAe,UAAU;AAAA,EAChC,OAAO;AAAA,QACD,WAAW;AACf,UAAM,UAAU,MAAM;AACtB,WAAO,QAAQ,aAAa,aAAa;AAAA;AAAA;AAI7C,GAAG,YAAY,sBAAsB;AAAA,EACnC,UAAU,GAAG,YAAY,mBAAmB;AAAA,EAC5C,IAAI;AAAA,EACJ,eAAe,eAAe,UAAU;AAAA,EACxC,OAAO,eAAe,UAAU;AAAA,EAChC,aAAa,GAAG,YAAY,gBAAgB;AAAA,EAC5C,OAAO;AAAA,QACD,WAAW;AACf,UAAM,UAAU,MAAM;AACtB,WAAO,QAAQ,gBAAgB,gBAAgB;AAAA;AAAA;AAInD,GAAG,YAAY,sBAAsB;AAAA,EACnC,UAAU,GAAG,YAAY,mBAAmB;AAAA,EAC5C,IAAI;AAAA,EACJ,eAAe,eAAe,UAAU;AAAA,EACxC,OAAO,eAAe,UAAU;AAAA,EAChC,aAAa,GAAG,YAAY,gBAAgB;AAAA,EAC5C,OAAO;AAAA,EACP,MAAM;AAAA,IACJ,eAAe,UAAU;AAAA,IACzB,eAAe,UAAU;AAAA,IACzB,KAAK,KAAK,iBAAiB;AAAA,IAC3B,KAAK,KAAK,iBAAiB;AAAA,IAC3B,KAAK,KAAK,iBAAiB;AAAA;AAAA,QAEvB,WAAW;AACf,UAAM,UAAU,MAAM;AACtB,WAAO,QAAQ,kBAAkB,kBAAkB;AAAA;AAAA;AAIvD,GAAG,YAAY,sBAAsB;AAAA,EACnC,UAAU,GAAG,YAAY,mBAAmB;AAAA,EAC5C,IAAI;AAAA,EACJ,eAAe,eAAe,UAAU;AAAA,EACxC,OAAO,eAAe,UAAU;AAAA,EAChC,aAAa,GAAG,YAAY,gBAAgB;AAAA,QACtC,WAAW;AACf,UAAM,UAAU,MAAM;AACtB,WAAO,QAAQ,aAAa,kBAAkB;AAAA;AAAA;AAIlD,GAAG,mBAAmB,wBAAwB;AAAA,EAC5C,UAAU;AAAA,EACV,UAAU,GAAG,mBAAmB,eAAe;AAAA,EAC/C,WAAW,GAAG,mBAAmB,UAAU;AAAA,EAC3C,YAAY;AAAA,EACZ,kBAAkB,GAAG,mBAAmB,UAAU;AAAA,EAClD,oBAAoB;AAAA,EACpB,eAAe;AACb,WAAO,0BAA0B,aAAW,CAAC,QAAQ,aAAa;AAAA;AAAA,QAE9D,qBAAqB;AACzB,UAAM,UAAU,MAAM;AACtB,WAAO,QAAQ,aAAa,eAAe;AAAA;AAAA,EAE7C,SAAS;AAAA,IACP;AAAA,MACE,OAAO;AAAA,MACP,OAAO,eAAe,UAAU;AAAA;AAAA,IAElC;AAAA,MACE,OAAO;AAAA,MACP,OAAO,eAAe,UAAU;AAAA;AAAA;AAAA,EAGpC,UAAU;AAAA,IACR;AAAA,MACE,UAAU;AAAA,MACV,UAAU,GAAG,mBAAmB,UAAU;AAAA;AAAA,IAE5C;AAAA,MACE,UAAU;AAAA,MACV,UAAU,GAAG,mBAAmB,UAAU;AAAA;AAAA;AAAA;AAKhD,GAAG,mBAAmB,wBAAwB;AAAA,EAC5C,UAAU;AAAA,EACV,UAAU,GAAG,mBAAmB,eAAe;AAAA,EAC/C,OAAO,eAAe,UAAU;AAAA,EAChC,eAAe;AACb,WAAO,0BAA0B,aAAW,CAAC,QAAQ,aAAa;AAAA;AAAA,QAE9D,qBAAqB;AACzB,UAAM,UAAU,MAAM;AACtB,WAAO,QAAQ,aAAa,eAAe;AAAA;AAAA,EAE7C,UAAU;AAAA,IACR;AAAA,MACE,UAAU;AAAA;AAAA;AAAA;AAKhB,GAAG,mBAAmB,wBAAwB;AAAA,EAC5C,UAAU;AAAA,EACV,UAAU,GAAG,mBAAmB,eAAe;AAAA,EAC/C,OAAO,eAAe,UAAU;AAAA,EAChC,eAAe;AACb,WAAO,0BAA0B,aAAW,CAAC,QAAQ,aAAa;AAAA;AAAA,QAE9D,qBAAqB;AACzB,UAAM,UAAU,MAAM;AACtB,WAAO,QAAQ,aAAa,eAAe;AAAA;AAAA,EAE7C,UAAU;AAAA,IACR;AAAA,MACE,UAAU,GAAG,mBAAmB,UAAU;AAAA,MAC1C,UAAU;AAAA,MACV,aAAa;AAAA,QACX,GAAG,mBAAmB,WAAW;AAAA,QACjC,GAAG,mBAAmB,WAAW;AAAA;AAAA;AAAA,IAGrC;AAAA,MACE,UAAU,GAAG,mBAAmB,UAAU;AAAA,MAC1C,UAAU;AAAA,MACV,aAAa;AAAA,QACX,GAAG,mBAAmB,WAAW;AAAA,QACjC,GAAG,mBAAmB,WAAW;AAAA;AAAA;AAAA;AAAA;AAMzC,OAAO,SAAS,yBAAyB;AAAA,EACvC,UAAU,OAAO,SAAS,gBAAgB;AAAA,EAC1C,aAAa,OAAO,SAAS,mBAAmB;AAAA,EAChD,OAAO,eAAe,UAAU;AAAA,EAChC,aAAa;AAAA,EACb,aAAa,OAAO,SAAS,YAAY;AAAA,EACzC,cAAc;AAAA,EACd,MAAM;AAAA,IACJ,eAAe,UAAU;AAAA,IACzB,eAAe,UAAU;AAAA;AAAA,EAE3B,SAAS;AAAA,IACP;AAAA,MACE,OAAO;AAAA,MACP,OAAO,eAAe,UAAU;AAAA;AAAA,IAElC;AAAA,MACE,OAAO;AAAA,MACP,OAAO,eAAe,UAAU;AAAA;AAAA;AAAA;AAKtC,OAAO,SAAS,yBAAyB;AAAA,EACvC,UAAU,OAAO,SAAS,gBAAgB;AAAA,EAC1C,aAAa,OAAO,SAAS,mBAAmB;AAAA,EAChD,OAAO,eAAe,UAAU;AAAA,EAChC,aAAa;AAAA,EACb,aAAa,OAAO,SAAS,YAAY;AAAA,EACzC,cAAc;AAAA,EACd,MAAM;AAAA,IACJ,eAAe,UAAU;AAAA,IACzB,eAAe,UAAU;AAAA,IACzB,eAAe,UAAU;AAAA;AAAA,EAE3B,SAAS;AAAA,IACP;AAAA,MACE,OAAO;AAAA,MACP,OAAO,eAAe,UAAU;AAAA;AAAA,IAElC;AAAA,MACE,OAAO;AAAA,MACP,OAAO,eAAe,UAAU;AAAA;AAAA;AAAA;AAKtC,GAAG,YAAY,yBAAyB;AAAA,EACtC,MAAM,GAAG,YAAY,mBAAmB;AAAA,EACxC,UAAU,GAAG,YAAY,2BAA2B;AAAA,QAC9C,eAAe;AACnB,UAAM,UAAU,MAAM;AACtB,WAAO,QAAQ,aAAa,aAAa;AAAA;AAAA;AAI7C,GAAG,YAAY,iBAAiB;AAAA,EAC9B,eAAe;AACb,WAAO;AAAA,MACL,IAAI,eAAe;AAAA,MACnB,IAAI,SAAS;AAAA,MACb,UAAU,aAAa;AAAA;AAAA;AAAA,QAGrB,eAAe;AACnB,UAAM,UAAU,MAAM;AACtB,WAAO,QAAQ,aAAa,oBAAoB;AAAA;AAAA,EAElD,YAAY;AAAA;AAGd,OAAO,SAAS,iBAAiB;AAAA,EAC/B,eAAe;AACb,WAAO;AAAA,MACL,IAAI,eAAe;AAAA;AAAA;AAAA,EAGvB,aAAa,OAAO,SAAS,oBAAoB;AAAA,QAC3C,eAAe;AACnB,UAAM,UAAU,MAAM;AACtB,WAAO,QAAQ,aAAa,gBAAgB;AAAA;AAAA;AAIhD,OAAO,SAAS,iBAAiB;AAAA,EAC/B,eAAe;AACb,WAAO,CAAC,eAAe,kBAAkB;AAAA;AAAA,QAErC,eAAe;AACnB,UAAM,UAAU,MAAM;AACtB,WAAO,QAAQ,aAAa,wBAAwB;AAAA;AAAA,EAEtD,aAAa;AAAA;AAGf,OAAO,SAAS,iBAAiB;AAAA,EAC/B,eAAe;AACb,WAAO,CAAC,eAAe,iBAAiB;AAAA;AAAA,EAE1C,aAAa,OAAO,SAAS,oBAAoB;AAAA,QAC3C,eAAe;AACnB,UAAM,UAAU,MAAM;AACtB,WAAO,QAAQ,aAAa,kBAAkB;AAAA;AAAA;AAIlD,OAAO,SAAS,iBAAiB;AAAA,EAC/B,eAAe;AACb,WAAO;AAAA,MACL,eAAe,SAAS;AAAA;AAAA;AAAA,EAG5B,aAAa,OAAO,SAAS,oBAAoB;AAAA,QAC3C,eAAe;AACnB,UAAM,UAAU,MAAM;AACtB,WAAO,QAAQ,aAAa,6BAA6B;AAAA;AAAA;",
  "names": []
}
