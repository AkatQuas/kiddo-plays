{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/network/NetworkLogViewColumns.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as ThemeSupport from '../../ui/legacy/theme_support/theme_support.js';\n\nimport type {NetworkNode} from './NetworkDataGridNode.js';\nimport {NetworkRequestNode} from './NetworkDataGridNode.js';\nimport type {NetworkLogView} from './NetworkLogView.js';\nimport {NetworkManageCustomHeadersView} from './NetworkManageCustomHeadersView.js';\nimport type {\n  NetworkTimeCalculator, NetworkTransferDurationCalculator, NetworkTransferTimeCalculator} from\n  './NetworkTimeCalculator.js';\nimport {NetworkWaterfallColumn} from './NetworkWaterfallColumn.js';\nimport {RequestInitiatorView} from './RequestInitiatorView.js';\n\nconst UIStrings = {\n  /**\n  *@description Data grid name for Network Log data grids\n  */\n  networkLog: 'Network Log',\n  /**\n  *@description Inner element text content in Network Log View Columns of the Network panel\n  */\n  waterfall: 'Waterfall',\n  /**\n  *@description A context menu item in the Network Log View Columns of the Network panel\n  */\n  responseHeaders: 'Response Headers',\n  /**\n  *@description Text in Network Log View Columns of the Network panel\n  */\n  manageHeaderColumns: 'Manage Header Columns\u2026',\n  /**\n  *@description Text for the start time of an activity\n  */\n  startTime: 'Start Time',\n  /**\n  *@description Text in Network Log View Columns of the Network panel\n  */\n  responseTime: 'Response Time',\n  /**\n  *@description Text in Network Log View Columns of the Network panel\n  */\n  endTime: 'End Time',\n  /**\n  *@description Text in Network Log View Columns of the Network panel\n  */\n  totalDuration: 'Total Duration',\n  /**\n  *@description Text for the latency of a task\n  */\n  latency: 'Latency',\n  /**\n  *@description Text for the name of something\n  */\n  name: 'Name',\n  /**\n  *@description Text that refers to a file path\n  */\n  path: 'Path',\n  /**\n  *@description Text in Timeline UIUtils of the Performance panel\n  */\n  url: 'Url',\n  /**\n  *@description Text for one or a group of functions\n  */\n  method: 'Method',\n  /**\n  *@description Text for the status of something\n  */\n  status: 'Status',\n  /**\n  *@description Generic label for any text\n  */\n  text: 'Text',\n  /**\n  *@description Text for security or network protocol\n  */\n  protocol: 'Protocol',\n  /**\n  *@description Text in Network Log View Columns of the Network panel\n  */\n  scheme: 'Scheme',\n  /**\n  *@description Text for the domain of a website\n  */\n  domain: 'Domain',\n  /**\n  *@description Text in Network Log View Columns of the Network panel\n  */\n  remoteAddress: 'Remote Address',\n  /**\n  *@description Text that refers to some types\n  */\n  type: 'Type',\n  /**\n  *@description Text for the initiator of something\n  */\n  initiator: 'Initiator',\n  /**\n  *@description Column header in the Network log view of the Network panel\n  */\n  initiatorAddressSpace: 'Initiator Address Space',\n  /**\n  *@description Text for web cookies\n  */\n  cookies: 'Cookies',\n  /**\n  *@description Text in Network Log View Columns of the Network panel\n  */\n  setCookies: 'Set Cookies',\n  /**\n  *@description Text for the size of something\n  */\n  size: 'Size',\n  /**\n  *@description Text in Network Log View Columns of the Network panel\n  */\n  content: 'Content',\n  /**\n  *@description Text that refers to the time\n  */\n  time: 'Time',\n  /**\n  *@description Text to show the priority of an item\n  */\n  priority: 'Priority',\n  /**\n  *@description Text in Network Log View Columns of the Network panel\n  */\n  connectionId: 'Connection ID',\n  /**\n  *@description Text in Network Log View Columns of the Network panel\n  */\n  remoteAddressSpace: 'Remote Address Space',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/network/NetworkLogViewColumns.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nexport class NetworkLogViewColumns {\n  private networkLogView: NetworkLogView;\n  private readonly persistantSettings: Common.Settings.Setting<{\n    [x: string]: {\n      visible: boolean,\n      title: string,\n    },\n  }>;\n  private readonly networkLogLargeRowsSetting: Common.Settings.Setting<boolean>;\n  private readonly eventDividers: Map<string, number[]>;\n  private eventDividersShown: boolean;\n  private gridMode: boolean;\n  private columns: Descriptor[];\n  private waterfallRequestsAreStale: boolean;\n  private waterfallScrollerWidthIsStale: boolean;\n  private readonly popupLinkifier: Components.Linkifier.Linkifier;\n  private calculatorsMap: Map<string, NetworkTimeCalculator>;\n  private lastWheelTime: number;\n  private dataGridInternal!: DataGrid.SortableDataGrid.SortableDataGrid<NetworkNode>;\n  private splitWidget!: UI.SplitWidget.SplitWidget;\n  private waterfallColumn!: NetworkWaterfallColumn;\n  private activeScroller!: Element;\n  private dataGridScroller!: HTMLElement;\n  private waterfallScroller!: HTMLElement;\n  private waterfallScrollerContent!: HTMLDivElement;\n  private waterfallHeaderElement!: HTMLElement;\n  private waterfallColumnSortIcon!: UI.Icon.Icon;\n  private activeWaterfallSortId!: string;\n  private popoverHelper?: UI.PopoverHelper.PopoverHelper;\n  private hasScrollerTouchStarted?: boolean;\n  private scrollerTouchStartPos?: number;\n  constructor(\n      networkLogView: NetworkLogView, timeCalculator: NetworkTransferTimeCalculator,\n      durationCalculator: NetworkTransferDurationCalculator,\n      networkLogLargeRowsSetting: Common.Settings.Setting<boolean>) {\n    this.networkLogView = networkLogView;\n\n    this.persistantSettings = Common.Settings.Settings.instance().createSetting('networkLogColumns', {});\n\n    this.networkLogLargeRowsSetting = networkLogLargeRowsSetting;\n    this.networkLogLargeRowsSetting.addChangeListener(this.updateRowsSize, this);\n\n    this.eventDividers = new Map();\n    this.eventDividersShown = false;\n\n    this.gridMode = true;\n\n    this.columns = [];\n\n    this.waterfallRequestsAreStale = false;\n    this.waterfallScrollerWidthIsStale = true;\n\n    this.popupLinkifier = new Components.Linkifier.Linkifier();\n\n    this.calculatorsMap = new Map();\n    this.calculatorsMap.set(_calculatorTypes.Time, timeCalculator);\n    this.calculatorsMap.set(_calculatorTypes.Duration, durationCalculator);\n\n    this.lastWheelTime = 0;\n\n    this.setupDataGrid();\n    this.setupWaterfall();\n\n    ThemeSupport.ThemeSupport.instance().addEventListener(ThemeSupport.ThemeChangeEvent.eventName, () => {\n      this.scheduleRefresh();\n    });\n  }\n\n  private static convertToDataGridDescriptor(columnConfig: Descriptor): DataGrid.DataGrid.ColumnDescriptor {\n    const title = columnConfig.title instanceof Function ? columnConfig.title() : columnConfig.title;\n    return {\n      id: columnConfig.id,\n      title,\n      sortable: columnConfig.sortable,\n      align: columnConfig.align,\n      nonSelectable: columnConfig.nonSelectable,\n      weight: columnConfig.weight,\n      allowInSortByEvenWhenHidden: columnConfig.allowInSortByEvenWhenHidden,\n    } as DataGrid.DataGrid.ColumnDescriptor;\n  }\n\n  wasShown(): void {\n    this.updateRowsSize();\n  }\n\n  willHide(): void {\n    if (this.popoverHelper) {\n      this.popoverHelper.hidePopover();\n    }\n  }\n\n  reset(): void {\n    if (this.popoverHelper) {\n      this.popoverHelper.hidePopover();\n    }\n    this.eventDividers.clear();\n  }\n\n  private setupDataGrid(): void {\n    const defaultColumns = _defaultColumns;\n    const defaultColumnConfig = _defaultColumnConfig;\n    this.columns = ([] as Descriptor[]);\n    for (const currentConfigColumn of defaultColumns) {\n      const descriptor = Object.assign({}, defaultColumnConfig, currentConfigColumn);\n      const columnConfig = (descriptor as Descriptor);\n      columnConfig.id = columnConfig.id;\n      if (columnConfig.subtitle) {\n        const title = columnConfig.title instanceof Function ? columnConfig.title() : columnConfig.title;\n        const subtitle = columnConfig.subtitle instanceof Function ? columnConfig.subtitle() : columnConfig.subtitle;\n        columnConfig.titleDOMFragment = this.makeHeaderFragment(title, subtitle);\n      }\n      this.columns.push(columnConfig);\n    }\n    this.loadCustomColumnsAndSettings();\n\n    this.popoverHelper =\n        new UI.PopoverHelper.PopoverHelper(this.networkLogView.element, this.getPopoverRequest.bind(this));\n    this.popoverHelper.setHasPadding(true);\n    this.popoverHelper.setTimeout(300, 300);\n    this.dataGridInternal = new DataGrid.SortableDataGrid.SortableDataGrid<NetworkNode>(({\n      displayName: (i18nString(UIStrings.networkLog) as string),\n      columns: this.columns.map(NetworkLogViewColumns.convertToDataGridDescriptor),\n      editCallback: undefined,\n      deleteCallback: undefined,\n      refreshCallback: undefined,\n    }));\n    this.dataGridInternal.element.addEventListener('mousedown', event => {\n      if (!this.dataGridInternal.selectedNode && event.button) {\n        event.consume();\n      }\n    }, true);\n    this.dataGridScroller = (this.dataGridInternal.scrollContainer as HTMLDivElement);\n\n    this.updateColumns();\n    this.dataGridInternal.addEventListener(DataGrid.DataGrid.Events.SortingChanged, this.sortHandler, this);\n    this.dataGridInternal.setHeaderContextMenuCallback(this.innerHeaderContextMenu.bind(this));\n\n    this.activeWaterfallSortId = WaterfallSortIds.StartTime;\n    this.dataGridInternal.markColumnAsSortedBy(_initialSortColumn, DataGrid.DataGrid.Order.Ascending);\n\n    this.splitWidget = new UI.SplitWidget.SplitWidget(true, true, 'networkPanelSplitViewWaterfall', 200);\n    const widget = this.dataGridInternal.asWidget();\n    widget.setMinimumSize(150, 0);\n    this.splitWidget.setMainWidget(widget);\n  }\n\n  private setupWaterfall(): void {\n    this.waterfallColumn = new NetworkWaterfallColumn(this.networkLogView.calculator());\n\n    this.waterfallColumn.element.addEventListener('contextmenu', handleContextMenu.bind(this));\n    this.waterfallColumn.element.addEventListener('wheel', this.onMouseWheel.bind(this, false), {passive: true});\n    this.waterfallColumn.element.addEventListener('touchstart', this.onTouchStart.bind(this));\n    this.waterfallColumn.element.addEventListener('touchmove', this.onTouchMove.bind(this));\n    this.waterfallColumn.element.addEventListener('touchend', this.onTouchEnd.bind(this));\n\n    this.dataGridScroller.addEventListener('wheel', this.onMouseWheel.bind(this, true), true);\n    this.dataGridScroller.addEventListener('touchstart', this.onTouchStart.bind(this));\n    this.dataGridScroller.addEventListener('touchmove', this.onTouchMove.bind(this));\n    this.dataGridScroller.addEventListener('touchend', this.onTouchEnd.bind(this));\n    this.waterfallScroller =\n        (this.waterfallColumn.contentElement.createChild('div', 'network-waterfall-v-scroll') as HTMLDivElement);\n    this.waterfallScrollerContent =\n        (this.waterfallScroller.createChild('div', 'network-waterfall-v-scroll-content') as HTMLDivElement);\n\n    this.dataGridInternal.addEventListener(DataGrid.DataGrid.Events.PaddingChanged, () => {\n      this.waterfallScrollerWidthIsStale = true;\n      this.syncScrollers();\n    });\n    this.dataGridInternal.addEventListener(\n        DataGrid.ViewportDataGrid.Events.ViewportCalculated, this.redrawWaterfallColumn.bind(this));\n\n    this.createWaterfallHeader();\n    this.waterfallColumn.contentElement.classList.add('network-waterfall-view');\n\n    this.waterfallColumn.setMinimumSize(100, 0);\n    this.splitWidget.setSidebarWidget(this.waterfallColumn);\n\n    this.switchViewMode(false);\n\n    function handleContextMenu(this: NetworkLogViewColumns, ev: Event): void {\n      const event = (ev as MouseEvent);\n      const node = this.waterfallColumn.getNodeFromPoint(event.offsetX, event.offsetY);\n      if (!node) {\n        return;\n      }\n      const request = node.request();\n      if (!request) {\n        return;\n      }\n      const contextMenu = new UI.ContextMenu.ContextMenu(event);\n      this.networkLogView.handleContextMenuForRequest(contextMenu, request);\n      void contextMenu.show();\n    }\n  }\n\n  private onMouseWheel(shouldConsume: boolean, ev: Event): void {\n    if (shouldConsume) {\n      ev.consume(true);\n    }\n    const event = (ev as WheelEvent);\n    const hasRecentWheel = Date.now() - this.lastWheelTime < 80;\n    this.activeScroller.scrollBy({top: event.deltaY, behavior: hasRecentWheel ? 'auto' : 'smooth'});\n    this.syncScrollers();\n    this.lastWheelTime = Date.now();\n  }\n\n  private onTouchStart(ev: Event): void {\n    const event = (ev as TouchEvent);\n    this.hasScrollerTouchStarted = true;\n    this.scrollerTouchStartPos = event.changedTouches[0].pageY;\n  }\n\n  private onTouchMove(ev: Event): void {\n    if (!this.hasScrollerTouchStarted) {\n      return;\n    }\n\n    const event = (ev as TouchEvent);\n    const currentPos = event.changedTouches[0].pageY;\n    const delta = (this.scrollerTouchStartPos as number) - currentPos;\n\n    this.activeScroller.scrollBy({top: delta, behavior: 'auto'});\n    this.syncScrollers();\n\n    this.scrollerTouchStartPos = currentPos;\n  }\n\n  private onTouchEnd(): void {\n    this.hasScrollerTouchStarted = false;\n  }\n\n  private syncScrollers(): void {\n    if (!this.waterfallColumn.isShowing()) {\n      return;\n    }\n    this.waterfallScrollerContent.style.height = this.dataGridScroller.scrollHeight + 'px';\n    this.updateScrollerWidthIfNeeded();\n    this.dataGridScroller.scrollTop = this.waterfallScroller.scrollTop;\n  }\n\n  private updateScrollerWidthIfNeeded(): void {\n    if (this.waterfallScrollerWidthIsStale) {\n      this.waterfallScrollerWidthIsStale = false;\n      this.waterfallColumn.setRightPadding(\n          this.waterfallScroller.offsetWidth - this.waterfallScrollerContent.offsetWidth);\n    }\n  }\n\n  private redrawWaterfallColumn(): void {\n    if (!this.waterfallRequestsAreStale) {\n      this.updateScrollerWidthIfNeeded();\n      this.waterfallColumn.update(\n          this.activeScroller.scrollTop, this.eventDividersShown ? this.eventDividers : undefined);\n      return;\n    }\n    this.syncScrollers();\n    const nodes = this.networkLogView.flatNodesList();\n    this.waterfallColumn.update(this.activeScroller.scrollTop, this.eventDividers, nodes);\n  }\n\n  private createWaterfallHeader(): void {\n    this.waterfallHeaderElement =\n        (this.waterfallColumn.contentElement.createChild('div', 'network-waterfall-header') as HTMLElement);\n    this.waterfallHeaderElement.addEventListener('click', waterfallHeaderClicked.bind(this));\n    this.waterfallHeaderElement.addEventListener(\n        'contextmenu', event => this.innerHeaderContextMenu(new UI.ContextMenu.ContextMenu(event)));\n    const innerElement = this.waterfallHeaderElement.createChild('div');\n    innerElement.textContent = i18nString(UIStrings.waterfall);\n    this.waterfallColumnSortIcon = UI.Icon.Icon.create('', 'sort-order-icon');\n    this.waterfallHeaderElement.createChild('div', 'sort-order-icon-container')\n        .appendChild(this.waterfallColumnSortIcon);\n\n    function waterfallHeaderClicked(this: NetworkLogViewColumns): void {\n      const sortOrders = DataGrid.DataGrid.Order;\n      const wasSortedByWaterfall = this.dataGridInternal.sortColumnId() === 'waterfall';\n      const wasSortedAscending = this.dataGridInternal.isSortOrderAscending();\n      const sortOrder = wasSortedByWaterfall && wasSortedAscending ? sortOrders.Descending : sortOrders.Ascending;\n      this.dataGridInternal.markColumnAsSortedBy('waterfall', sortOrder);\n      this.sortHandler();\n    }\n  }\n\n  setCalculator(x: NetworkTimeCalculator): void {\n    this.waterfallColumn.setCalculator(x);\n  }\n\n  scheduleRefresh(): void {\n    this.waterfallColumn.scheduleDraw();\n  }\n  private updateRowsSize(): void {\n    const largeRows = Boolean(this.networkLogLargeRowsSetting.get());\n\n    this.dataGridInternal.element.classList.toggle('small', !largeRows);\n    this.dataGridInternal.scheduleUpdate();\n\n    this.waterfallScrollerWidthIsStale = true;\n    this.waterfallColumn.setRowHeight(largeRows ? 41 : 21);\n    this.waterfallScroller.classList.toggle('small', !largeRows);\n    this.waterfallHeaderElement.classList.toggle('small', !largeRows);\n\n    // Request an animation frame because under certain conditions\n    // (see crbug.com/1019723) this.waterfallScroller.offsetTop does\n    // not return the value it's supposed to return as of the applied\n    // css classes.\n    window.requestAnimationFrame(() => {\n      this.waterfallColumn.setHeaderHeight(this.waterfallScroller.offsetTop);\n      this.waterfallColumn.scheduleDraw();\n    });\n  }\n\n  show(element: Element): void {\n    this.splitWidget.show(element);\n  }\n\n  setHidden(value: boolean): void {\n    UI.ARIAUtils.setHidden(this.splitWidget.element, value);\n  }\n\n  dataGrid(): DataGrid.SortableDataGrid.SortableDataGrid<NetworkNode> {\n    return this.dataGridInternal;\n  }\n\n  sortByCurrentColumn(): void {\n    this.sortHandler();\n  }\n\n  private sortHandler(): void {\n    const columnId = this.dataGridInternal.sortColumnId();\n    this.networkLogView.removeAllNodeHighlights();\n    this.waterfallRequestsAreStale = true;\n    if (columnId === 'waterfall') {\n      if (this.dataGridInternal.sortOrder() === DataGrid.DataGrid.Order.Ascending) {\n        this.waterfallColumnSortIcon.setIconType('smallicon-triangle-up');\n      } else {\n        this.waterfallColumnSortIcon.setIconType('smallicon-triangle-down');\n      }\n\n      const sortFunction =\n          (NetworkRequestNode.RequestPropertyComparator.bind(null, this.activeWaterfallSortId) as\n               (arg0: DataGrid.SortableDataGrid.SortableDataGridNode<NetworkNode>,\n                arg1: DataGrid.SortableDataGrid.SortableDataGridNode<NetworkNode>) => number);\n      this.dataGridInternal.sortNodes(sortFunction, !this.dataGridInternal.isSortOrderAscending());\n      this.dataGridSortedForTest();\n      return;\n    }\n    this.waterfallColumnSortIcon.setIconType('');\n\n    const columnConfig = this.columns.find(columnConfig => columnConfig.id === columnId);\n    if (!columnConfig || !columnConfig.sortingFunction) {\n      return;\n    }\n    const sortingFunction =\n        (columnConfig.sortingFunction as\n             ((arg0: DataGrid.SortableDataGrid.SortableDataGridNode<NetworkNode>,\n               arg1: DataGrid.SortableDataGrid.SortableDataGridNode<NetworkNode>) => number) |\n         undefined);\n    if (!sortingFunction) {\n      return;\n    }\n    this.dataGridInternal.sortNodes(sortingFunction, !this.dataGridInternal.isSortOrderAscending());\n    this.dataGridSortedForTest();\n  }\n\n  private dataGridSortedForTest(): void {\n  }\n\n  private updateColumns(): void {\n    if (!this.dataGridInternal) {\n      return;\n    }\n    const visibleColumns = new Set<string>();\n    if (this.gridMode) {\n      for (const columnConfig of this.columns) {\n        if (columnConfig.visible) {\n          visibleColumns.add(columnConfig.id);\n        }\n      }\n    } else {\n      // Find the first visible column from the path group\n      const visibleColumn = this.columns.find(c => c.hideableGroup === 'path' && c.visible);\n      if (visibleColumn) {\n        visibleColumns.add(visibleColumn.id);\n      } else {\n        // This should not happen because inside a hideableGroup\n        // there should always be at least one column visible\n        // This is just in case.\n        visibleColumns.add('name');\n      }\n    }\n    this.dataGridInternal.setColumnsVisiblity(visibleColumns);\n  }\n\n  switchViewMode(gridMode: boolean): void {\n    if (this.gridMode === gridMode) {\n      return;\n    }\n    this.gridMode = gridMode;\n\n    if (gridMode) {\n      this.splitWidget.showBoth();\n      this.activeScroller = this.waterfallScroller;\n      this.waterfallScroller.scrollTop = this.dataGridScroller.scrollTop;\n      this.dataGridInternal.setScrollContainer(this.waterfallScroller);\n    } else {\n      this.networkLogView.removeAllNodeHighlights();\n      this.splitWidget.hideSidebar();\n      this.activeScroller = this.dataGridScroller;\n      this.dataGridInternal.setScrollContainer(this.dataGridScroller);\n    }\n    this.networkLogView.element.classList.toggle('brief-mode', !gridMode);\n    this.updateColumns();\n    this.updateRowsSize();\n  }\n\n  private toggleColumnVisibility(columnConfig: Descriptor): void {\n    this.loadCustomColumnsAndSettings();\n    columnConfig.visible = !columnConfig.visible;\n    this.saveColumnsSettings();\n    this.updateColumns();\n  }\n\n  private saveColumnsSettings(): void {\n    const saveableSettings: {\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      [x: string]: any,\n    } = {};\n    for (const columnConfig of this.columns) {\n      saveableSettings[columnConfig.id] = {visible: columnConfig.visible, title: columnConfig.title};\n    }\n\n    this.persistantSettings.set(saveableSettings);\n  }\n\n  private loadCustomColumnsAndSettings(): void {\n    const savedSettings = this.persistantSettings.get();\n    const columnIds = Object.keys(savedSettings);\n    for (const columnId of columnIds) {\n      const setting = savedSettings[columnId];\n      let columnConfig = this.columns.find(columnConfig => columnConfig.id === columnId);\n      if (!columnConfig) {\n        columnConfig = this.addCustomHeader(setting.title, columnId) || undefined;\n      }\n      if (columnConfig && columnConfig.hideable && typeof setting.visible === 'boolean') {\n        columnConfig.visible = Boolean(setting.visible);\n      }\n      if (columnConfig && typeof setting.title === 'string') {\n        columnConfig.title = setting.title;\n      }\n    }\n  }\n\n  private makeHeaderFragment(title: string, subtitle: string): DocumentFragment {\n    const fragment = document.createDocumentFragment();\n    UI.UIUtils.createTextChild(fragment, title);\n    const subtitleDiv = fragment.createChild('div', 'network-header-subtitle');\n    UI.UIUtils.createTextChild(subtitleDiv, subtitle);\n    return fragment;\n  }\n\n  private innerHeaderContextMenu(contextMenu: UI.ContextMenu.SubMenu): void {\n    const columnConfigs = this.columns.filter(columnConfig => columnConfig.hideable);\n    const nonResponseHeaders = columnConfigs.filter(columnConfig => !columnConfig.isResponseHeader);\n\n    const hideableGroups = new Map<string, Descriptor[]>();\n    const nonResponseHeadersWithoutGroup: Descriptor[] = [];\n\n    // Sort columns into their groups\n    for (const columnConfig of nonResponseHeaders) {\n      if (!columnConfig.hideableGroup) {\n        nonResponseHeadersWithoutGroup.push(columnConfig);\n      } else {\n        const name = columnConfig.hideableGroup;\n        let hideableGroup = hideableGroups.get(name);\n        if (!hideableGroup) {\n          hideableGroup = [];\n          hideableGroups.set(name, hideableGroup);\n        }\n\n        hideableGroup.push(columnConfig);\n      }\n    }\n\n    // Add all the groups first\n    for (const group of hideableGroups.values()) {\n      const visibleColumns = group.filter(columnConfig => columnConfig.visible);\n\n      for (const columnConfig of group) {\n        // Make sure that at least one item in every group is enabled\n        const isDisabled = visibleColumns.length === 1 && visibleColumns[0] === columnConfig;\n        const title = columnConfig.title instanceof Function ? columnConfig.title() : columnConfig.title;\n\n        contextMenu.headerSection().appendCheckboxItem(\n            title, this.toggleColumnVisibility.bind(this, columnConfig), columnConfig.visible, isDisabled);\n      }\n\n      contextMenu.headerSection().appendSeparator();\n    }\n\n    // Add normal columns not belonging to any group\n    for (const columnConfig of nonResponseHeadersWithoutGroup) {\n      const title = columnConfig.title instanceof Function ? columnConfig.title() : columnConfig.title;\n      contextMenu.headerSection().appendCheckboxItem(\n          title, this.toggleColumnVisibility.bind(this, columnConfig), columnConfig.visible);\n    }\n\n    const responseSubMenu = contextMenu.footerSection().appendSubMenuItem(i18nString(UIStrings.responseHeaders));\n    const responseHeaders = columnConfigs.filter(columnConfig => columnConfig.isResponseHeader);\n    for (const columnConfig of responseHeaders) {\n      const title = columnConfig.title instanceof Function ? columnConfig.title() : columnConfig.title;\n      responseSubMenu.defaultSection().appendCheckboxItem(\n          title, this.toggleColumnVisibility.bind(this, columnConfig), columnConfig.visible);\n    }\n\n    responseSubMenu.footerSection().appendItem(\n        i18nString(UIStrings.manageHeaderColumns), this.manageCustomHeaderDialog.bind(this));\n\n    const waterfallSortIds = WaterfallSortIds;\n    const waterfallSubMenu = contextMenu.footerSection().appendSubMenuItem(i18nString(UIStrings.waterfall));\n    waterfallSubMenu.defaultSection().appendCheckboxItem(\n        i18nString(UIStrings.startTime), setWaterfallMode.bind(this, waterfallSortIds.StartTime),\n        this.activeWaterfallSortId === waterfallSortIds.StartTime);\n    waterfallSubMenu.defaultSection().appendCheckboxItem(\n        i18nString(UIStrings.responseTime), setWaterfallMode.bind(this, waterfallSortIds.ResponseTime),\n        this.activeWaterfallSortId === waterfallSortIds.ResponseTime);\n    waterfallSubMenu.defaultSection().appendCheckboxItem(\n        i18nString(UIStrings.endTime), setWaterfallMode.bind(this, waterfallSortIds.EndTime),\n        this.activeWaterfallSortId === waterfallSortIds.EndTime);\n    waterfallSubMenu.defaultSection().appendCheckboxItem(\n        i18nString(UIStrings.totalDuration), setWaterfallMode.bind(this, waterfallSortIds.Duration),\n        this.activeWaterfallSortId === waterfallSortIds.Duration);\n    waterfallSubMenu.defaultSection().appendCheckboxItem(\n        i18nString(UIStrings.latency), setWaterfallMode.bind(this, waterfallSortIds.Latency),\n        this.activeWaterfallSortId === waterfallSortIds.Latency);\n\n    function setWaterfallMode(this: NetworkLogViewColumns, sortId: WaterfallSortIds): void {\n      let calculator = this.calculatorsMap.get(_calculatorTypes.Time);\n      const waterfallSortIds = WaterfallSortIds;\n      if (sortId === waterfallSortIds.Duration || sortId === waterfallSortIds.Latency) {\n        calculator = this.calculatorsMap.get(_calculatorTypes.Duration);\n      }\n      this.networkLogView.setCalculator((calculator as NetworkTimeCalculator));\n\n      this.activeWaterfallSortId = sortId;\n      this.dataGridInternal.markColumnAsSortedBy('waterfall', DataGrid.DataGrid.Order.Ascending);\n      this.sortHandler();\n    }\n  }\n\n  private manageCustomHeaderDialog(): void {\n    const customHeaders = [];\n    for (const columnConfig of this.columns) {\n      const title = columnConfig.title instanceof Function ? columnConfig.title() : columnConfig.title;\n      if (columnConfig.isResponseHeader) {\n        customHeaders.push({title, editable: columnConfig.isCustomHeader});\n      }\n    }\n    const manageCustomHeaders = new NetworkManageCustomHeadersView(\n        customHeaders, headerTitle => Boolean(this.addCustomHeader(headerTitle)), this.changeCustomHeader.bind(this),\n        this.removeCustomHeader.bind(this));\n    const dialog = new UI.Dialog.Dialog();\n    manageCustomHeaders.show(dialog.contentElement);\n    dialog.setSizeBehavior(UI.GlassPane.SizeBehavior.MeasureContent);\n    // @ts-ignore\n    // TypeScript somehow tries to appy the `WidgetElement` class to the\n    // `Document` type of the (Document|Element) union. WidgetElement inherits\n    // from HTMLElement so its valid to be passed here.\n    dialog.show(this.networkLogView.element);\n  }\n\n  private removeCustomHeader(headerId: string): boolean {\n    headerId = headerId.toLowerCase();\n    const index = this.columns.findIndex(columnConfig => columnConfig.id === headerId);\n    if (index === -1) {\n      return false;\n    }\n    this.columns.splice(index, 1);\n    this.dataGridInternal.removeColumn(headerId);\n    this.saveColumnsSettings();\n    this.updateColumns();\n    return true;\n  }\n\n  private addCustomHeader(headerTitle: string, headerId?: string, index?: number): Descriptor|null {\n    if (!headerId) {\n      headerId = headerTitle.toLowerCase();\n    }\n    if (index === undefined) {\n      index = this.columns.length - 1;\n    }\n\n    const currentColumnConfig = this.columns.find(columnConfig => columnConfig.id === headerId);\n    if (currentColumnConfig) {\n      return null;\n    }\n\n    const columnConfigBase = Object.assign({}, _defaultColumnConfig, {\n      id: headerId,\n      title: headerTitle,\n      isResponseHeader: true,\n      isCustomHeader: true,\n      visible: true,\n      sortingFunction: NetworkRequestNode.ResponseHeaderStringComparator.bind(null, headerId),\n    });\n\n    // Split out the column config from the typed version, as doing it in a single assignment causes\n    // issues with Closure compiler.\n    const columnConfig = (columnConfigBase as Descriptor);\n\n    this.columns.splice(index, 0, columnConfig);\n    if (this.dataGridInternal) {\n      this.dataGridInternal.addColumn(NetworkLogViewColumns.convertToDataGridDescriptor(columnConfig), index);\n    }\n    this.saveColumnsSettings();\n    this.updateColumns();\n    return columnConfig;\n  }\n\n  private changeCustomHeader(oldHeaderId: string, newHeaderTitle: string, newHeaderId?: string): boolean {\n    if (!newHeaderId) {\n      newHeaderId = newHeaderTitle.toLowerCase();\n    }\n    oldHeaderId = oldHeaderId.toLowerCase();\n\n    const oldIndex = this.columns.findIndex(columnConfig => columnConfig.id === oldHeaderId);\n    const oldColumnConfig = this.columns[oldIndex];\n    const currentColumnConfig = this.columns.find(columnConfig => columnConfig.id === newHeaderId);\n    if (!oldColumnConfig || (currentColumnConfig && oldHeaderId !== newHeaderId)) {\n      return false;\n    }\n\n    this.removeCustomHeader(oldHeaderId);\n    this.addCustomHeader(newHeaderTitle, newHeaderId, oldIndex);\n    return true;\n  }\n\n  private getPopoverRequest(event: Event): UI.PopoverHelper.PopoverRequest|null {\n    if (!this.gridMode) {\n      return null;\n    }\n    const hoveredNode = this.networkLogView.hoveredNode();\n    if (!hoveredNode || !event.target) {\n      return null;\n    }\n\n    const anchor = (event.target as HTMLElement).enclosingNodeOrSelfWithClass('network-script-initiated');\n    if (!anchor) {\n      return null;\n    }\n    const request = hoveredNode.request();\n    if (!request) {\n      return null;\n    }\n    return {\n      box: anchor.boxInWindow(),\n      show: async(popover: UI.GlassPane.GlassPane): Promise<boolean> => {\n        this.popupLinkifier.setLiveLocationUpdateCallback(() => {\n          popover.setSizeBehavior(UI.GlassPane.SizeBehavior.MeasureContent);\n        });\n        const content = RequestInitiatorView.createStackTracePreview(\n            (request as SDK.NetworkRequest.NetworkRequest), this.popupLinkifier, false);\n        if (!content) {\n          return false;\n        }\n        popover.contentElement.appendChild(content.element);\n        return true;\n      },\n      hide: this.popupLinkifier.reset.bind(this.popupLinkifier),\n    };\n  }\n\n  addEventDividers(times: number[], className: string): void {\n    // TODO(allada) Remove this and pass in the color.\n    let color = 'transparent';\n    switch (className) {\n      case 'network-dcl-divider':\n        color = '#0867CB';\n        break;\n      case 'network-load-divider':\n        color = '#B31412';\n        break;\n      default:\n        return;\n    }\n    const currentTimes = this.eventDividers.get(color) || [];\n    this.eventDividers.set(color, currentTimes.concat(times));\n    this.networkLogView.scheduleRefresh();\n  }\n\n  hideEventDividers(): void {\n    this.eventDividersShown = true;\n    this.redrawWaterfallColumn();\n  }\n\n  showEventDividers(): void {\n    this.eventDividersShown = false;\n    this.redrawWaterfallColumn();\n  }\n\n  selectFilmStripFrame(time: number): void {\n    this.eventDividers.set(_filmStripDividerColor, [time]);\n    this.redrawWaterfallColumn();\n  }\n\n  clearFilmStripFrame(): void {\n    this.eventDividers.delete(_filmStripDividerColor);\n    this.redrawWaterfallColumn();\n  }\n}\n\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const _initialSortColumn = 'waterfall';\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum, @typescript-eslint/naming-convention\nexport enum _calculatorTypes {\n  Duration = 'Duration',\n  Time = 'Time',\n}\n\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const _defaultColumnConfig: Object = {\n  subtitle: null,\n  visible: false,\n  weight: 6,\n  sortable: true,\n  hideable: true,\n  hideableGroup: null,\n  nonSelectable: false,\n  isResponseHeader: false,\n  isCustomHeader: false,\n  allowInSortByEvenWhenHidden: false,\n};\n\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst _temporaryDefaultColumns = [\n  {\n    id: 'name',\n    title: i18nLazyString(UIStrings.name),\n    subtitle: i18nLazyString(UIStrings.path),\n    visible: true,\n    weight: 20,\n    hideable: true,\n    hideableGroup: 'path',\n    sortingFunction: NetworkRequestNode.NameComparator,\n  },\n  {\n    id: 'path',\n    title: i18nLazyString(UIStrings.path),\n    hideable: true,\n    hideableGroup: 'path',\n    sortingFunction: NetworkRequestNode.RequestPropertyComparator.bind(null, 'pathname'),\n  },\n  {\n    id: 'url',\n    title: i18nLazyString(UIStrings.url),\n    hideable: true,\n    hideableGroup: 'path',\n    sortingFunction: NetworkRequestNode.RequestURLComparator,\n  },\n  {\n    id: 'method',\n    title: i18nLazyString(UIStrings.method),\n    sortingFunction: NetworkRequestNode.RequestPropertyComparator.bind(null, 'requestMethod'),\n  },\n  {\n    id: 'status',\n    title: i18nLazyString(UIStrings.status),\n    visible: true,\n    subtitle: i18nLazyString(UIStrings.text),\n    sortingFunction: NetworkRequestNode.RequestPropertyComparator.bind(null, 'statusCode'),\n  },\n  {\n    id: 'protocol',\n    title: i18nLazyString(UIStrings.protocol),\n    sortingFunction: NetworkRequestNode.RequestPropertyComparator.bind(null, 'protocol'),\n  },\n  {\n    id: 'scheme',\n    title: i18nLazyString(UIStrings.scheme),\n    sortingFunction: NetworkRequestNode.RequestPropertyComparator.bind(null, 'scheme'),\n  },\n  {\n    id: 'domain',\n    title: i18nLazyString(UIStrings.domain),\n    sortingFunction: NetworkRequestNode.RequestPropertyComparator.bind(null, 'domain'),\n  },\n  {\n    id: 'remoteaddress',\n    title: i18nLazyString(UIStrings.remoteAddress),\n    weight: 10,\n    align: DataGrid.DataGrid.Align.Right,\n    sortingFunction: NetworkRequestNode.RemoteAddressComparator,\n  },\n  {\n    id: 'remoteaddress-space',\n    title: i18nLazyString(UIStrings.remoteAddressSpace),\n    visible: false,\n    weight: 10,\n    sortingFunction: NetworkRequestNode.RemoteAddressSpaceComparator,\n  },\n  {\n    id: 'type',\n    title: i18nLazyString(UIStrings.type),\n    visible: true,\n    sortingFunction: NetworkRequestNode.TypeComparator,\n  },\n  {\n    id: 'initiator',\n    title: i18nLazyString(UIStrings.initiator),\n    visible: true,\n    weight: 10,\n    sortingFunction: NetworkRequestNode.InitiatorComparator,\n  },\n  {\n    id: 'initiator-address-space',\n    title: i18nLazyString(UIStrings.initiatorAddressSpace),\n    visible: false,\n    weight: 10,\n    sortingFunction: NetworkRequestNode.InitiatorAddressSpaceComparator,\n  },\n  {\n    id: 'cookies',\n    title: i18nLazyString(UIStrings.cookies),\n    align: DataGrid.DataGrid.Align.Right,\n    sortingFunction: NetworkRequestNode.RequestCookiesCountComparator,\n  },\n  {\n    id: 'setcookies',\n    title: i18nLazyString(UIStrings.setCookies),\n    align: DataGrid.DataGrid.Align.Right,\n    sortingFunction: NetworkRequestNode.ResponseCookiesCountComparator,\n  },\n  {\n    id: 'size',\n    title: i18nLazyString(UIStrings.size),\n    visible: true,\n    subtitle: i18nLazyString(UIStrings.content),\n    align: DataGrid.DataGrid.Align.Right,\n    sortingFunction: NetworkRequestNode.SizeComparator,\n  },\n  {\n    id: 'time',\n    title: i18nLazyString(UIStrings.time),\n    visible: true,\n    subtitle: i18nLazyString(UIStrings.latency),\n    align: DataGrid.DataGrid.Align.Right,\n    sortingFunction: NetworkRequestNode.RequestPropertyComparator.bind(null, 'duration'),\n  },\n  {id: 'priority', title: i18nLazyString(UIStrings.priority), sortingFunction: NetworkRequestNode.PriorityComparator},\n  {\n    id: 'connectionid',\n    title: i18nLazyString(UIStrings.connectionId),\n    sortingFunction: NetworkRequestNode.RequestPropertyComparator.bind(null, 'connectionId'),\n  },\n  {\n    id: 'cache-control',\n    isResponseHeader: true,\n    title: i18n.i18n.lockedLazyString('Cache-Control'),\n    sortingFunction: NetworkRequestNode.ResponseHeaderStringComparator.bind(null, 'cache-control'),\n  },\n  {\n    id: 'connection',\n    isResponseHeader: true,\n    title: i18n.i18n.lockedLazyString('Connection'),\n    sortingFunction: NetworkRequestNode.ResponseHeaderStringComparator.bind(null, 'connection'),\n  },\n  {\n    id: 'content-encoding',\n    isResponseHeader: true,\n    title: i18n.i18n.lockedLazyString('Content-Encoding'),\n    sortingFunction: NetworkRequestNode.ResponseHeaderStringComparator.bind(null, 'content-encoding'),\n  },\n  {\n    id: 'content-length',\n    isResponseHeader: true,\n    title: i18n.i18n.lockedLazyString('Content-Length'),\n    align: DataGrid.DataGrid.Align.Right,\n    sortingFunction: NetworkRequestNode.ResponseHeaderNumberComparator.bind(null, 'content-length'),\n  },\n  {\n    id: 'etag',\n    isResponseHeader: true,\n    title: i18n.i18n.lockedLazyString('ETag'),\n    sortingFunction: NetworkRequestNode.ResponseHeaderStringComparator.bind(null, 'etag'),\n  },\n  {\n    id: 'keep-alive',\n    isResponseHeader: true,\n    title: i18n.i18n.lockedLazyString('Keep-Alive'),\n    sortingFunction: NetworkRequestNode.ResponseHeaderStringComparator.bind(null, 'keep-alive'),\n  },\n  {\n    id: 'last-modified',\n    isResponseHeader: true,\n    title: i18n.i18n.lockedLazyString('Last-Modified'),\n    sortingFunction: NetworkRequestNode.ResponseHeaderDateComparator.bind(null, 'last-modified'),\n  },\n  {\n    id: 'server',\n    isResponseHeader: true,\n    title: i18n.i18n.lockedLazyString('Server'),\n    sortingFunction: NetworkRequestNode.ResponseHeaderStringComparator.bind(null, 'server'),\n  },\n  {\n    id: 'vary',\n    isResponseHeader: true,\n    title: i18n.i18n.lockedLazyString('Vary'),\n    sortingFunction: NetworkRequestNode.ResponseHeaderStringComparator.bind(null, 'vary'),\n  },\n  // This header is a placeholder to let datagrid know that it can be sorted by this column, but never shown.\n  {\n    id: 'waterfall',\n    title: i18nLazyString(UIStrings.waterfall),\n    visible: false,\n    hideable: false,\n    allowInSortByEvenWhenHidden: true,\n  },\n];\n\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-explicit-any\nconst _defaultColumns = (_temporaryDefaultColumns as any);\n\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const _filmStripDividerColor = '#fccc49';\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum WaterfallSortIds {\n  StartTime = 'startTime',\n  ResponseTime = 'responseReceivedTime',\n  EndTime = 'endTime',\n  Duration = 'duration',\n  Latency = 'latency',\n}\nexport interface Descriptor {\n  id: string;\n  title: string|(() => string);\n  titleDOMFragment?: DocumentFragment;\n  subtitle: string|(() => string)|null;\n  visible: boolean;\n  weight: number;\n  hideable: boolean;\n  hideableGroup: string|null;\n  nonSelectable: boolean;\n  sortable: boolean;\n  align?: string|null;\n  isResponseHeader: boolean;\n  sortingFunction: (arg0: NetworkNode, arg1: NetworkNode) => number | undefined;\n  isCustomHeader: boolean;\n  allowInSortByEvenWhenHidden: boolean;\n}\n"],
  "mappings": "AAIA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AAIA;AACA;AAEA,MAAM,YAAY;AAAA,EAIhB,YAAY;AAAA,EAIZ,WAAW;AAAA,EAIX,iBAAiB;AAAA,EAIjB,qBAAqB;AAAA,EAIrB,WAAW;AAAA,EAIX,cAAc;AAAA,EAId,SAAS;AAAA,EAIT,eAAe;AAAA,EAIf,SAAS;AAAA,EAIT,MAAM;AAAA,EAIN,MAAM;AAAA,EAIN,KAAK;AAAA,EAIL,QAAQ;AAAA,EAIR,QAAQ;AAAA,EAIR,MAAM;AAAA,EAIN,UAAU;AAAA,EAIV,QAAQ;AAAA,EAIR,QAAQ;AAAA,EAIR,eAAe;AAAA,EAIf,MAAM;AAAA,EAIN,WAAW;AAAA,EAIX,uBAAuB;AAAA,EAIvB,SAAS;AAAA,EAIT,YAAY;AAAA,EAIZ,MAAM;AAAA,EAIN,SAAS;AAAA,EAIT,MAAM;AAAA,EAIN,UAAU;AAAA,EAIV,cAAc;AAAA,EAId,oBAAoB;AAAA;AAEtB,MAAM,OAAO,KAAK,KAAK,kBAAkB,2CAA2C;AACpF,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAChE,MAAM,iBAAiB,KAAK,KAAK,iCAAiC,KAAK,QAAW;AAE3E,mCAA4B;AAAA,EACzB;AAAA,EACS;AAAA,EAMA;AAAA,EACA;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACS;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACR,YACI,gBAAgC,gBAChC,oBACA,4BAA8D;AAChE,SAAK,iBAAiB;AAEtB,SAAK,qBAAqB,OAAO,SAAS,SAAS,WAAW,cAAc,qBAAqB;AAEjG,SAAK,6BAA6B;AAClC,SAAK,2BAA2B,kBAAkB,KAAK,gBAAgB;AAEvE,SAAK,gBAAgB,oBAAI;AACzB,SAAK,qBAAqB;AAE1B,SAAK,WAAW;AAEhB,SAAK,UAAU;AAEf,SAAK,4BAA4B;AACjC,SAAK,gCAAgC;AAErC,SAAK,iBAAiB,IAAI,WAAW,UAAU;AAE/C,SAAK,iBAAiB,oBAAI;AAC1B,SAAK,eAAe,IAAI,iBAAiB,MAAM;AAC/C,SAAK,eAAe,IAAI,iBAAiB,UAAU;AAEnD,SAAK,gBAAgB;AAErB,SAAK;AACL,SAAK;AAEL,iBAAa,aAAa,WAAW,iBAAiB,aAAa,iBAAiB,WAAW,MAAM;AACnG,WAAK;AAAA;AAAA;AAAA,SAIM,4BAA4B,cAA8D;AACvG,UAAM,QAAQ,aAAa,iBAAiB,WAAW,aAAa,UAAU,aAAa;AAC3F,WAAO;AAAA,MACL,IAAI,aAAa;AAAA,MACjB;AAAA,MACA,UAAU,aAAa;AAAA,MACvB,OAAO,aAAa;AAAA,MACpB,eAAe,aAAa;AAAA,MAC5B,QAAQ,aAAa;AAAA,MACrB,6BAA6B,aAAa;AAAA;AAAA;AAAA,EAI9C,WAAiB;AACf,SAAK;AAAA;AAAA,EAGP,WAAiB;AACf,QAAI,KAAK,eAAe;AACtB,WAAK,cAAc;AAAA;AAAA;AAAA,EAIvB,QAAc;AACZ,QAAI,KAAK,eAAe;AACtB,WAAK,cAAc;AAAA;AAErB,SAAK,cAAc;AAAA;AAAA,EAGb,gBAAsB;AAC5B,UAAM,iBAAiB;AACvB,UAAM,sBAAsB;AAC5B,SAAK,UAAW;AAChB,eAAW,uBAAuB,gBAAgB;AAChD,YAAM,aAAa,OAAO,OAAO,IAAI,qBAAqB;AAC1D,YAAM,eAAgB;AACtB,mBAAa,KAAK,aAAa;AAC/B,UAAI,aAAa,UAAU;AACzB,cAAM,QAAQ,aAAa,iBAAiB,WAAW,aAAa,UAAU,aAAa;AAC3F,cAAM,WAAW,aAAa,oBAAoB,WAAW,aAAa,aAAa,aAAa;AACpG,qBAAa,mBAAmB,KAAK,mBAAmB,OAAO;AAAA;AAEjE,WAAK,QAAQ,KAAK;AAAA;AAEpB,SAAK;AAEL,SAAK,gBACD,IAAI,GAAG,cAAc,cAAc,KAAK,eAAe,SAAS,KAAK,kBAAkB,KAAK;AAChG,SAAK,cAAc,cAAc;AACjC,SAAK,cAAc,WAAW,KAAK;AACnC,SAAK,mBAAmB,IAAI,SAAS,iBAAiB,iBAA+B;AAAA,MACnF,aAAc,WAAW,UAAU;AAAA,MACnC,SAAS,KAAK,QAAQ,IAAI,sBAAsB;AAAA,MAChD,cAAc;AAAA,MACd,gBAAgB;AAAA,MAChB,iBAAiB;AAAA;AAEnB,SAAK,iBAAiB,QAAQ,iBAAiB,aAAa,WAAS;AACnE,UAAI,CAAC,KAAK,iBAAiB,gBAAgB,MAAM,QAAQ;AACvD,cAAM;AAAA;AAAA,OAEP;AACH,SAAK,mBAAoB,KAAK,iBAAiB;AAE/C,SAAK;AACL,SAAK,iBAAiB,iBAAiB,SAAS,SAAS,OAAO,gBAAgB,KAAK,aAAa;AAClG,SAAK,iBAAiB,6BAA6B,KAAK,uBAAuB,KAAK;AAEpF,SAAK,wBAAwB,iBAAiB;AAC9C,SAAK,iBAAiB,qBAAqB,oBAAoB,SAAS,SAAS,MAAM;AAEvF,SAAK,cAAc,IAAI,GAAG,YAAY,YAAY,MAAM,MAAM,kCAAkC;AAChG,UAAM,SAAS,KAAK,iBAAiB;AACrC,WAAO,eAAe,KAAK;AAC3B,SAAK,YAAY,cAAc;AAAA;AAAA,EAGzB,iBAAuB;AAC7B,SAAK,kBAAkB,IAAI,uBAAuB,KAAK,eAAe;AAEtE,SAAK,gBAAgB,QAAQ,iBAAiB,eAAe,kBAAkB,KAAK;AACpF,SAAK,gBAAgB,QAAQ,iBAAiB,SAAS,KAAK,aAAa,KAAK,MAAM,QAAQ,EAAC,SAAS;AACtG,SAAK,gBAAgB,QAAQ,iBAAiB,cAAc,KAAK,aAAa,KAAK;AACnF,SAAK,gBAAgB,QAAQ,iBAAiB,aAAa,KAAK,YAAY,KAAK;AACjF,SAAK,gBAAgB,QAAQ,iBAAiB,YAAY,KAAK,WAAW,KAAK;AAE/E,SAAK,iBAAiB,iBAAiB,SAAS,KAAK,aAAa,KAAK,MAAM,OAAO;AACpF,SAAK,iBAAiB,iBAAiB,cAAc,KAAK,aAAa,KAAK;AAC5E,SAAK,iBAAiB,iBAAiB,aAAa,KAAK,YAAY,KAAK;AAC1E,SAAK,iBAAiB,iBAAiB,YAAY,KAAK,WAAW,KAAK;AACxE,SAAK,oBACA,KAAK,gBAAgB,eAAe,YAAY,OAAO;AAC5D,SAAK,2BACA,KAAK,kBAAkB,YAAY,OAAO;AAE/C,SAAK,iBAAiB,iBAAiB,SAAS,SAAS,OAAO,gBAAgB,MAAM;AACpF,WAAK,gCAAgC;AACrC,WAAK;AAAA;AAEP,SAAK,iBAAiB,iBAClB,SAAS,iBAAiB,OAAO,oBAAoB,KAAK,sBAAsB,KAAK;AAEzF,SAAK;AACL,SAAK,gBAAgB,eAAe,UAAU,IAAI;AAElD,SAAK,gBAAgB,eAAe,KAAK;AACzC,SAAK,YAAY,iBAAiB,KAAK;AAEvC,SAAK,eAAe;AAEpB,+BAAwD,IAAiB;AACvE,YAAM,QAAS;AACf,YAAM,OAAO,KAAK,gBAAgB,iBAAiB,MAAM,SAAS,MAAM;AACxE,UAAI,CAAC,MAAM;AACT;AAAA;AAEF,YAAM,UAAU,KAAK;AACrB,UAAI,CAAC,SAAS;AACZ;AAAA;AAEF,YAAM,cAAc,IAAI,GAAG,YAAY,YAAY;AACnD,WAAK,eAAe,4BAA4B,aAAa;AAC7D,WAAK,YAAY;AAAA;AAAA;AAAA,EAIb,aAAa,eAAwB,IAAiB;AAC5D,QAAI,eAAe;AACjB,SAAG,QAAQ;AAAA;AAEb,UAAM,QAAS;AACf,UAAM,iBAAiB,KAAK,QAAQ,KAAK,gBAAgB;AACzD,SAAK,eAAe,SAAS,EAAC,KAAK,MAAM,QAAQ,UAAU,iBAAiB,SAAS;AACrF,SAAK;AACL,SAAK,gBAAgB,KAAK;AAAA;AAAA,EAGpB,aAAa,IAAiB;AACpC,UAAM,QAAS;AACf,SAAK,0BAA0B;AAC/B,SAAK,wBAAwB,MAAM,eAAe,GAAG;AAAA;AAAA,EAG/C,YAAY,IAAiB;AACnC,QAAI,CAAC,KAAK,yBAAyB;AACjC;AAAA;AAGF,UAAM,QAAS;AACf,UAAM,aAAa,MAAM,eAAe,GAAG;AAC3C,UAAM,QAAS,KAAK,wBAAmC;AAEvD,SAAK,eAAe,SAAS,EAAC,KAAK,OAAO,UAAU;AACpD,SAAK;AAEL,SAAK,wBAAwB;AAAA;AAAA,EAGvB,aAAmB;AACzB,SAAK,0BAA0B;AAAA;AAAA,EAGzB,gBAAsB;AAC5B,QAAI,CAAC,KAAK,gBAAgB,aAAa;AACrC;AAAA;AAEF,SAAK,yBAAyB,MAAM,SAAS,KAAK,iBAAiB,eAAe;AAClF,SAAK;AACL,SAAK,iBAAiB,YAAY,KAAK,kBAAkB;AAAA;AAAA,EAGnD,8BAAoC;AAC1C,QAAI,KAAK,+BAA+B;AACtC,WAAK,gCAAgC;AACrC,WAAK,gBAAgB,gBACjB,KAAK,kBAAkB,cAAc,KAAK,yBAAyB;AAAA;AAAA;AAAA,EAInE,wBAA8B;AACpC,QAAI,CAAC,KAAK,2BAA2B;AACnC,WAAK;AACL,WAAK,gBAAgB,OACjB,KAAK,eAAe,WAAW,KAAK,qBAAqB,KAAK,gBAAgB;AAClF;AAAA;AAEF,SAAK;AACL,UAAM,QAAQ,KAAK,eAAe;AAClC,SAAK,gBAAgB,OAAO,KAAK,eAAe,WAAW,KAAK,eAAe;AAAA;AAAA,EAGzE,wBAA8B;AACpC,SAAK,yBACA,KAAK,gBAAgB,eAAe,YAAY,OAAO;AAC5D,SAAK,uBAAuB,iBAAiB,SAAS,uBAAuB,KAAK;AAClF,SAAK,uBAAuB,iBACxB,eAAe,WAAS,KAAK,uBAAuB,IAAI,GAAG,YAAY,YAAY;AACvF,UAAM,eAAe,KAAK,uBAAuB,YAAY;AAC7D,iBAAa,cAAc,WAAW,UAAU;AAChD,SAAK,0BAA0B,GAAG,KAAK,KAAK,OAAO,IAAI;AACvD,SAAK,uBAAuB,YAAY,OAAO,6BAC1C,YAAY,KAAK;AAEtB,sCAAmE;AACjE,YAAM,aAAa,SAAS,SAAS;AACrC,YAAM,uBAAuB,KAAK,iBAAiB,mBAAmB;AACtE,YAAM,qBAAqB,KAAK,iBAAiB;AACjD,YAAM,YAAY,wBAAwB,qBAAqB,WAAW,aAAa,WAAW;AAClG,WAAK,iBAAiB,qBAAqB,aAAa;AACxD,WAAK;AAAA;AAAA;AAAA,EAIT,cAAc,GAAgC;AAC5C,SAAK,gBAAgB,cAAc;AAAA;AAAA,EAGrC,kBAAwB;AACtB,SAAK,gBAAgB;AAAA;AAAA,EAEf,iBAAuB;AAC7B,UAAM,YAAY,QAAQ,KAAK,2BAA2B;AAE1D,SAAK,iBAAiB,QAAQ,UAAU,OAAO,SAAS,CAAC;AACzD,SAAK,iBAAiB;AAEtB,SAAK,gCAAgC;AACrC,SAAK,gBAAgB,aAAa,YAAY,KAAK;AACnD,SAAK,kBAAkB,UAAU,OAAO,SAAS,CAAC;AAClD,SAAK,uBAAuB,UAAU,OAAO,SAAS,CAAC;AAMvD,WAAO,sBAAsB,MAAM;AACjC,WAAK,gBAAgB,gBAAgB,KAAK,kBAAkB;AAC5D,WAAK,gBAAgB;AAAA;AAAA;AAAA,EAIzB,KAAK,SAAwB;AAC3B,SAAK,YAAY,KAAK;AAAA;AAAA,EAGxB,UAAU,OAAsB;AAC9B,OAAG,UAAU,UAAU,KAAK,YAAY,SAAS;AAAA;AAAA,EAGnD,WAAoE;AAClE,WAAO,KAAK;AAAA;AAAA,EAGd,sBAA4B;AAC1B,SAAK;AAAA;AAAA,EAGC,cAAoB;AAC1B,UAAM,WAAW,KAAK,iBAAiB;AACvC,SAAK,eAAe;AACpB,SAAK,4BAA4B;AACjC,QAAI,aAAa,aAAa;AAC5B,UAAI,KAAK,iBAAiB,gBAAgB,SAAS,SAAS,MAAM,WAAW;AAC3E,aAAK,wBAAwB,YAAY;AAAA,aACpC;AACL,aAAK,wBAAwB,YAAY;AAAA;AAG3C,YAAM,eACD,mBAAmB,0BAA0B,KAAK,MAAM,KAAK;AAGlE,WAAK,iBAAiB,UAAU,cAAc,CAAC,KAAK,iBAAiB;AACrE,WAAK;AACL;AAAA;AAEF,SAAK,wBAAwB,YAAY;AAEzC,UAAM,eAAe,KAAK,QAAQ,KAAK,mBAAgB,cAAa,OAAO;AAC3E,QAAI,CAAC,gBAAgB,CAAC,aAAa,iBAAiB;AAClD;AAAA;AAEF,UAAM,kBACD,aAAa;AAIlB,QAAI,CAAC,iBAAiB;AACpB;AAAA;AAEF,SAAK,iBAAiB,UAAU,iBAAiB,CAAC,KAAK,iBAAiB;AACxE,SAAK;AAAA;AAAA,EAGC,wBAA8B;AAAA;AAAA,EAG9B,gBAAsB;AAC5B,QAAI,CAAC,KAAK,kBAAkB;AAC1B;AAAA;AAEF,UAAM,iBAAiB,oBAAI;AAC3B,QAAI,KAAK,UAAU;AACjB,iBAAW,gBAAgB,KAAK,SAAS;AACvC,YAAI,aAAa,SAAS;AACxB,yBAAe,IAAI,aAAa;AAAA;AAAA;AAAA,WAG/B;AAEL,YAAM,gBAAgB,KAAK,QAAQ,KAAK,OAAK,EAAE,kBAAkB,UAAU,EAAE;AAC7E,UAAI,eAAe;AACjB,uBAAe,IAAI,cAAc;AAAA,aAC5B;AAIL,uBAAe,IAAI;AAAA;AAAA;AAGvB,SAAK,iBAAiB,oBAAoB;AAAA;AAAA,EAG5C,eAAe,UAAyB;AACtC,QAAI,KAAK,aAAa,UAAU;AAC9B;AAAA;AAEF,SAAK,WAAW;AAEhB,QAAI,UAAU;AACZ,WAAK,YAAY;AACjB,WAAK,iBAAiB,KAAK;AAC3B,WAAK,kBAAkB,YAAY,KAAK,iBAAiB;AACzD,WAAK,iBAAiB,mBAAmB,KAAK;AAAA,WACzC;AACL,WAAK,eAAe;AACpB,WAAK,YAAY;AACjB,WAAK,iBAAiB,KAAK;AAC3B,WAAK,iBAAiB,mBAAmB,KAAK;AAAA;AAEhD,SAAK,eAAe,QAAQ,UAAU,OAAO,cAAc,CAAC;AAC5D,SAAK;AACL,SAAK;AAAA;AAAA,EAGC,uBAAuB,cAAgC;AAC7D,SAAK;AACL,iBAAa,UAAU,CAAC,aAAa;AACrC,SAAK;AACL,SAAK;AAAA;AAAA,EAGC,sBAA4B;AAClC,UAAM,mBAIF;AACJ,eAAW,gBAAgB,KAAK,SAAS;AACvC,uBAAiB,aAAa,MAAM,EAAC,SAAS,aAAa,SAAS,OAAO,aAAa;AAAA;AAG1F,SAAK,mBAAmB,IAAI;AAAA;AAAA,EAGtB,+BAAqC;AAC3C,UAAM,gBAAgB,KAAK,mBAAmB;AAC9C,UAAM,YAAY,OAAO,KAAK;AAC9B,eAAW,YAAY,WAAW;AAChC,YAAM,UAAU,cAAc;AAC9B,UAAI,eAAe,KAAK,QAAQ,KAAK,mBAAgB,cAAa,OAAO;AACzE,UAAI,CAAC,cAAc;AACjB,uBAAe,KAAK,gBAAgB,QAAQ,OAAO,aAAa;AAAA;AAElE,UAAI,gBAAgB,aAAa,YAAY,OAAO,QAAQ,YAAY,WAAW;AACjF,qBAAa,UAAU,QAAQ,QAAQ;AAAA;AAEzC,UAAI,gBAAgB,OAAO,QAAQ,UAAU,UAAU;AACrD,qBAAa,QAAQ,QAAQ;AAAA;AAAA;AAAA;AAAA,EAK3B,mBAAmB,OAAe,UAAoC;AAC5E,UAAM,WAAW,SAAS;AAC1B,OAAG,QAAQ,gBAAgB,UAAU;AACrC,UAAM,cAAc,SAAS,YAAY,OAAO;AAChD,OAAG,QAAQ,gBAAgB,aAAa;AACxC,WAAO;AAAA;AAAA,EAGD,uBAAuB,aAA2C;AACxE,UAAM,gBAAgB,KAAK,QAAQ,OAAO,kBAAgB,aAAa;AACvE,UAAM,qBAAqB,cAAc,OAAO,kBAAgB,CAAC,aAAa;AAE9E,UAAM,iBAAiB,oBAAI;AAC3B,UAAM,iCAA+C;AAGrD,eAAW,gBAAgB,oBAAoB;AAC7C,UAAI,CAAC,aAAa,eAAe;AAC/B,uCAA+B,KAAK;AAAA,aAC/B;AACL,cAAM,OAAO,aAAa;AAC1B,YAAI,gBAAgB,eAAe,IAAI;AACvC,YAAI,CAAC,eAAe;AAClB,0BAAgB;AAChB,yBAAe,IAAI,MAAM;AAAA;AAG3B,sBAAc,KAAK;AAAA;AAAA;AAKvB,eAAW,SAAS,eAAe,UAAU;AAC3C,YAAM,iBAAiB,MAAM,OAAO,kBAAgB,aAAa;AAEjE,iBAAW,gBAAgB,OAAO;AAEhC,cAAM,aAAa,eAAe,WAAW,KAAK,eAAe,OAAO;AACxE,cAAM,QAAQ,aAAa,iBAAiB,WAAW,aAAa,UAAU,aAAa;AAE3F,oBAAY,gBAAgB,mBACxB,OAAO,KAAK,uBAAuB,KAAK,MAAM,eAAe,aAAa,SAAS;AAAA;AAGzF,kBAAY,gBAAgB;AAAA;AAI9B,eAAW,gBAAgB,gCAAgC;AACzD,YAAM,QAAQ,aAAa,iBAAiB,WAAW,aAAa,UAAU,aAAa;AAC3F,kBAAY,gBAAgB,mBACxB,OAAO,KAAK,uBAAuB,KAAK,MAAM,eAAe,aAAa;AAAA;AAGhF,UAAM,kBAAkB,YAAY,gBAAgB,kBAAkB,WAAW,UAAU;AAC3F,UAAM,kBAAkB,cAAc,OAAO,kBAAgB,aAAa;AAC1E,eAAW,gBAAgB,iBAAiB;AAC1C,YAAM,QAAQ,aAAa,iBAAiB,WAAW,aAAa,UAAU,aAAa;AAC3F,sBAAgB,iBAAiB,mBAC7B,OAAO,KAAK,uBAAuB,KAAK,MAAM,eAAe,aAAa;AAAA;AAGhF,oBAAgB,gBAAgB,WAC5B,WAAW,UAAU,sBAAsB,KAAK,yBAAyB,KAAK;AAElF,UAAM,mBAAmB;AACzB,UAAM,mBAAmB,YAAY,gBAAgB,kBAAkB,WAAW,UAAU;AAC5F,qBAAiB,iBAAiB,mBAC9B,WAAW,UAAU,YAAY,iBAAiB,KAAK,MAAM,iBAAiB,YAC9E,KAAK,0BAA0B,iBAAiB;AACpD,qBAAiB,iBAAiB,mBAC9B,WAAW,UAAU,eAAe,iBAAiB,KAAK,MAAM,iBAAiB,eACjF,KAAK,0BAA0B,iBAAiB;AACpD,qBAAiB,iBAAiB,mBAC9B,WAAW,UAAU,UAAU,iBAAiB,KAAK,MAAM,iBAAiB,UAC5E,KAAK,0BAA0B,iBAAiB;AACpD,qBAAiB,iBAAiB,mBAC9B,WAAW,UAAU,gBAAgB,iBAAiB,KAAK,MAAM,iBAAiB,WAClF,KAAK,0BAA0B,iBAAiB;AACpD,qBAAiB,iBAAiB,mBAC9B,WAAW,UAAU,UAAU,iBAAiB,KAAK,MAAM,iBAAiB,UAC5E,KAAK,0BAA0B,iBAAiB;AAEpD,8BAAuD,QAAgC;AACrF,UAAI,aAAa,KAAK,eAAe,IAAI,iBAAiB;AAC1D,YAAM,oBAAmB;AACzB,UAAI,WAAW,kBAAiB,YAAY,WAAW,kBAAiB,SAAS;AAC/E,qBAAa,KAAK,eAAe,IAAI,iBAAiB;AAAA;AAExD,WAAK,eAAe,cAAe;AAEnC,WAAK,wBAAwB;AAC7B,WAAK,iBAAiB,qBAAqB,aAAa,SAAS,SAAS,MAAM;AAChF,WAAK;AAAA;AAAA;AAAA,EAID,2BAAiC;AACvC,UAAM,gBAAgB;AACtB,eAAW,gBAAgB,KAAK,SAAS;AACvC,YAAM,QAAQ,aAAa,iBAAiB,WAAW,aAAa,UAAU,aAAa;AAC3F,UAAI,aAAa,kBAAkB;AACjC,sBAAc,KAAK,EAAC,OAAO,UAAU,aAAa;AAAA;AAAA;AAGtD,UAAM,sBAAsB,IAAI,+BAC5B,eAAe,iBAAe,QAAQ,KAAK,gBAAgB,eAAe,KAAK,mBAAmB,KAAK,OACvG,KAAK,mBAAmB,KAAK;AACjC,UAAM,SAAS,IAAI,GAAG,OAAO;AAC7B,wBAAoB,KAAK,OAAO;AAChC,WAAO,gBAAgB,GAAG,UAAU,aAAa;AAKjD,WAAO,KAAK,KAAK,eAAe;AAAA;AAAA,EAG1B,mBAAmB,UAA2B;AACpD,eAAW,SAAS;AACpB,UAAM,QAAQ,KAAK,QAAQ,UAAU,kBAAgB,aAAa,OAAO;AACzE,QAAI,UAAU,IAAI;AAChB,aAAO;AAAA;AAET,SAAK,QAAQ,OAAO,OAAO;AAC3B,SAAK,iBAAiB,aAAa;AACnC,SAAK;AACL,SAAK;AACL,WAAO;AAAA;AAAA,EAGD,gBAAgB,aAAqB,UAAmB,OAAiC;AAC/F,QAAI,CAAC,UAAU;AACb,iBAAW,YAAY;AAAA;AAEzB,QAAI,UAAU,QAAW;AACvB,cAAQ,KAAK,QAAQ,SAAS;AAAA;AAGhC,UAAM,sBAAsB,KAAK,QAAQ,KAAK,mBAAgB,cAAa,OAAO;AAClF,QAAI,qBAAqB;AACvB,aAAO;AAAA;AAGT,UAAM,mBAAmB,OAAO,OAAO,IAAI,sBAAsB;AAAA,MAC/D,IAAI;AAAA,MACJ,OAAO;AAAA,MACP,kBAAkB;AAAA,MAClB,gBAAgB;AAAA,MAChB,SAAS;AAAA,MACT,iBAAiB,mBAAmB,+BAA+B,KAAK,MAAM;AAAA;AAKhF,UAAM,eAAgB;AAEtB,SAAK,QAAQ,OAAO,OAAO,GAAG;AAC9B,QAAI,KAAK,kBAAkB;AACzB,WAAK,iBAAiB,UAAU,sBAAsB,4BAA4B,eAAe;AAAA;AAEnG,SAAK;AACL,SAAK;AACL,WAAO;AAAA;AAAA,EAGD,mBAAmB,aAAqB,gBAAwB,aAA+B;AACrG,QAAI,CAAC,aAAa;AAChB,oBAAc,eAAe;AAAA;AAE/B,kBAAc,YAAY;AAE1B,UAAM,WAAW,KAAK,QAAQ,UAAU,kBAAgB,aAAa,OAAO;AAC5E,UAAM,kBAAkB,KAAK,QAAQ;AACrC,UAAM,sBAAsB,KAAK,QAAQ,KAAK,kBAAgB,aAAa,OAAO;AAClF,QAAI,CAAC,mBAAoB,uBAAuB,gBAAgB,aAAc;AAC5E,aAAO;AAAA;AAGT,SAAK,mBAAmB;AACxB,SAAK,gBAAgB,gBAAgB,aAAa;AAClD,WAAO;AAAA;AAAA,EAGD,kBAAkB,OAAoD;AAC5E,QAAI,CAAC,KAAK,UAAU;AAClB,aAAO;AAAA;AAET,UAAM,cAAc,KAAK,eAAe;AACxC,QAAI,CAAC,eAAe,CAAC,MAAM,QAAQ;AACjC,aAAO;AAAA;AAGT,UAAM,SAAU,MAAM,OAAuB,6BAA6B;AAC1E,QAAI,CAAC,QAAQ;AACX,aAAO;AAAA;AAET,UAAM,UAAU,YAAY;AAC5B,QAAI,CAAC,SAAS;AACZ,aAAO;AAAA;AAET,WAAO;AAAA,MACL,KAAK,OAAO;AAAA,MACZ,MAAM,OAAM,YAAsD;AAChE,aAAK,eAAe,8BAA8B,MAAM;AACtD,kBAAQ,gBAAgB,GAAG,UAAU,aAAa;AAAA;AAEpD,cAAM,UAAU,qBAAqB,wBAChC,SAA+C,KAAK,gBAAgB;AACzE,YAAI,CAAC,SAAS;AACZ,iBAAO;AAAA;AAET,gBAAQ,eAAe,YAAY,QAAQ;AAC3C,eAAO;AAAA;AAAA,MAET,MAAM,KAAK,eAAe,MAAM,KAAK,KAAK;AAAA;AAAA;AAAA,EAI9C,iBAAiB,OAAiB,WAAyB;AAEzD,QAAI,QAAQ;AACZ,YAAQ;AAAA,WACD;AACH,gBAAQ;AACR;AAAA,WACG;AACH,gBAAQ;AACR;AAAA;AAEA;AAAA;AAEJ,UAAM,eAAe,KAAK,cAAc,IAAI,UAAU;AACtD,SAAK,cAAc,IAAI,OAAO,aAAa,OAAO;AAClD,SAAK,eAAe;AAAA;AAAA,EAGtB,oBAA0B;AACxB,SAAK,qBAAqB;AAC1B,SAAK;AAAA;AAAA,EAGP,oBAA0B;AACxB,SAAK,qBAAqB;AAC1B,SAAK;AAAA;AAAA,EAGP,qBAAqB,MAAoB;AACvC,SAAK,cAAc,IAAI,wBAAwB,CAAC;AAChD,SAAK;AAAA;AAAA,EAGP,sBAA4B;AAC1B,SAAK,cAAc,OAAO;AAC1B,SAAK;AAAA;AAAA;AAMF,aAAM,qBAAqB;AAI3B,WAAK,mBAAL,kBAAK,sBAAL;AACL,kCAAW;AACX,8BAAO;AAFG;AAAA;AAOL,aAAM,uBAA+B;AAAA,EAC1C,UAAU;AAAA,EACV,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,UAAU;AAAA,EACV,eAAe;AAAA,EACf,eAAe;AAAA,EACf,kBAAkB;AAAA,EAClB,gBAAgB;AAAA,EAChB,6BAA6B;AAAA;AAK/B,MAAM,2BAA2B;AAAA,EAC/B;AAAA,IACE,IAAI;AAAA,IACJ,OAAO,eAAe,UAAU;AAAA,IAChC,UAAU,eAAe,UAAU;AAAA,IACnC,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,eAAe;AAAA,IACf,iBAAiB,mBAAmB;AAAA;AAAA,EAEtC;AAAA,IACE,IAAI;AAAA,IACJ,OAAO,eAAe,UAAU;AAAA,IAChC,UAAU;AAAA,IACV,eAAe;AAAA,IACf,iBAAiB,mBAAmB,0BAA0B,KAAK,MAAM;AAAA;AAAA,EAE3E;AAAA,IACE,IAAI;AAAA,IACJ,OAAO,eAAe,UAAU;AAAA,IAChC,UAAU;AAAA,IACV,eAAe;AAAA,IACf,iBAAiB,mBAAmB;AAAA;AAAA,EAEtC;AAAA,IACE,IAAI;AAAA,IACJ,OAAO,eAAe,UAAU;AAAA,IAChC,iBAAiB,mBAAmB,0BAA0B,KAAK,MAAM;AAAA;AAAA,EAE3E;AAAA,IACE,IAAI;AAAA,IACJ,OAAO,eAAe,UAAU;AAAA,IAChC,SAAS;AAAA,IACT,UAAU,eAAe,UAAU;AAAA,IACnC,iBAAiB,mBAAmB,0BAA0B,KAAK,MAAM;AAAA;AAAA,EAE3E;AAAA,IACE,IAAI;AAAA,IACJ,OAAO,eAAe,UAAU;AAAA,IAChC,iBAAiB,mBAAmB,0BAA0B,KAAK,MAAM;AAAA;AAAA,EAE3E;AAAA,IACE,IAAI;AAAA,IACJ,OAAO,eAAe,UAAU;AAAA,IAChC,iBAAiB,mBAAmB,0BAA0B,KAAK,MAAM;AAAA;AAAA,EAE3E;AAAA,IACE,IAAI;AAAA,IACJ,OAAO,eAAe,UAAU;AAAA,IAChC,iBAAiB,mBAAmB,0BAA0B,KAAK,MAAM;AAAA;AAAA,EAE3E;AAAA,IACE,IAAI;AAAA,IACJ,OAAO,eAAe,UAAU;AAAA,IAChC,QAAQ;AAAA,IACR,OAAO,SAAS,SAAS,MAAM;AAAA,IAC/B,iBAAiB,mBAAmB;AAAA;AAAA,EAEtC;AAAA,IACE,IAAI;AAAA,IACJ,OAAO,eAAe,UAAU;AAAA,IAChC,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,iBAAiB,mBAAmB;AAAA;AAAA,EAEtC;AAAA,IACE,IAAI;AAAA,IACJ,OAAO,eAAe,UAAU;AAAA,IAChC,SAAS;AAAA,IACT,iBAAiB,mBAAmB;AAAA;AAAA,EAEtC;AAAA,IACE,IAAI;AAAA,IACJ,OAAO,eAAe,UAAU;AAAA,IAChC,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,iBAAiB,mBAAmB;AAAA;AAAA,EAEtC;AAAA,IACE,IAAI;AAAA,IACJ,OAAO,eAAe,UAAU;AAAA,IAChC,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,iBAAiB,mBAAmB;AAAA;AAAA,EAEtC;AAAA,IACE,IAAI;AAAA,IACJ,OAAO,eAAe,UAAU;AAAA,IAChC,OAAO,SAAS,SAAS,MAAM;AAAA,IAC/B,iBAAiB,mBAAmB;AAAA;AAAA,EAEtC;AAAA,IACE,IAAI;AAAA,IACJ,OAAO,eAAe,UAAU;AAAA,IAChC,OAAO,SAAS,SAAS,MAAM;AAAA,IAC/B,iBAAiB,mBAAmB;AAAA;AAAA,EAEtC;AAAA,IACE,IAAI;AAAA,IACJ,OAAO,eAAe,UAAU;AAAA,IAChC,SAAS;AAAA,IACT,UAAU,eAAe,UAAU;AAAA,IACnC,OAAO,SAAS,SAAS,MAAM;AAAA,IAC/B,iBAAiB,mBAAmB;AAAA;AAAA,EAEtC;AAAA,IACE,IAAI;AAAA,IACJ,OAAO,eAAe,UAAU;AAAA,IAChC,SAAS;AAAA,IACT,UAAU,eAAe,UAAU;AAAA,IACnC,OAAO,SAAS,SAAS,MAAM;AAAA,IAC/B,iBAAiB,mBAAmB,0BAA0B,KAAK,MAAM;AAAA;AAAA,EAE3E,EAAC,IAAI,YAAY,OAAO,eAAe,UAAU,WAAW,iBAAiB,mBAAmB;AAAA,EAChG;AAAA,IACE,IAAI;AAAA,IACJ,OAAO,eAAe,UAAU;AAAA,IAChC,iBAAiB,mBAAmB,0BAA0B,KAAK,MAAM;AAAA;AAAA,EAE3E;AAAA,IACE,IAAI;AAAA,IACJ,kBAAkB;AAAA,IAClB,OAAO,KAAK,KAAK,iBAAiB;AAAA,IAClC,iBAAiB,mBAAmB,+BAA+B,KAAK,MAAM;AAAA;AAAA,EAEhF;AAAA,IACE,IAAI;AAAA,IACJ,kBAAkB;AAAA,IAClB,OAAO,KAAK,KAAK,iBAAiB;AAAA,IAClC,iBAAiB,mBAAmB,+BAA+B,KAAK,MAAM;AAAA;AAAA,EAEhF;AAAA,IACE,IAAI;AAAA,IACJ,kBAAkB;AAAA,IAClB,OAAO,KAAK,KAAK,iBAAiB;AAAA,IAClC,iBAAiB,mBAAmB,+BAA+B,KAAK,MAAM;AAAA;AAAA,EAEhF;AAAA,IACE,IAAI;AAAA,IACJ,kBAAkB;AAAA,IAClB,OAAO,KAAK,KAAK,iBAAiB;AAAA,IAClC,OAAO,SAAS,SAAS,MAAM;AAAA,IAC/B,iBAAiB,mBAAmB,+BAA+B,KAAK,MAAM;AAAA;AAAA,EAEhF;AAAA,IACE,IAAI;AAAA,IACJ,kBAAkB;AAAA,IAClB,OAAO,KAAK,KAAK,iBAAiB;AAAA,IAClC,iBAAiB,mBAAmB,+BAA+B,KAAK,MAAM;AAAA;AAAA,EAEhF;AAAA,IACE,IAAI;AAAA,IACJ,kBAAkB;AAAA,IAClB,OAAO,KAAK,KAAK,iBAAiB;AAAA,IAClC,iBAAiB,mBAAmB,+BAA+B,KAAK,MAAM;AAAA;AAAA,EAEhF;AAAA,IACE,IAAI;AAAA,IACJ,kBAAkB;AAAA,IAClB,OAAO,KAAK,KAAK,iBAAiB;AAAA,IAClC,iBAAiB,mBAAmB,6BAA6B,KAAK,MAAM;AAAA;AAAA,EAE9E;AAAA,IACE,IAAI;AAAA,IACJ,kBAAkB;AAAA,IAClB,OAAO,KAAK,KAAK,iBAAiB;AAAA,IAClC,iBAAiB,mBAAmB,+BAA+B,KAAK,MAAM;AAAA;AAAA,EAEhF;AAAA,IACE,IAAI;AAAA,IACJ,kBAAkB;AAAA,IAClB,OAAO,KAAK,KAAK,iBAAiB;AAAA,IAClC,iBAAiB,mBAAmB,+BAA+B,KAAK,MAAM;AAAA;AAAA,EAGhF;AAAA,IACE,IAAI;AAAA,IACJ,OAAO,eAAe,UAAU;AAAA,IAChC,SAAS;AAAA,IACT,UAAU;AAAA,IACV,6BAA6B;AAAA;AAAA;AAMjC,MAAM,kBAAmB;AAIlB,aAAM,yBAAyB;AAI/B,WAAK,mBAAL,kBAAK,sBAAL;AACL,mCAAY;AACZ,sCAAe;AACf,iCAAU;AACV,kCAAW;AACX,iCAAU;AALA;AAAA;",
  "names": []
}
