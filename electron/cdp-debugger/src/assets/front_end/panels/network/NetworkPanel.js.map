{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/network/NetworkPanel.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2007, 2008 Apple Inc.  All rights reserved.\n * Copyright (C) 2008, 2009 Anthony Ricaud <rik@webkit.org>\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as Logs from '../../models/logs/logs.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport * as NetworkForward from '../../panels/network/forward/forward.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as MobileThrottling from '../mobile_throttling/mobile_throttling.js';\nimport * as Search from '../search/search.js';\n\nimport {BlockedURLsPane} from './BlockedURLsPane.js';\nimport type {RequestActivatedEvent} from './NetworkDataGridNode.js';\nimport {Events} from './NetworkDataGridNode.js';\nimport {NetworkItemView} from './NetworkItemView.js';\nimport {NetworkLogView} from './NetworkLogView.js';\nimport {NetworkOverview} from './NetworkOverview.js';\nimport networkPanelStyles from './networkPanel.css.js';\nimport {NetworkSearchScope} from './NetworkSearchScope.js';\n\nimport type {NetworkTimeCalculator} from './NetworkTimeCalculator.js';\nimport {NetworkTransferTimeCalculator} from './NetworkTimeCalculator.js';\n\nconst UIStrings = {\n  /**\n  *@description Text to close something\n  */\n  close: 'Close',\n  /**\n  *@description Title of a search bar or tool\n  */\n  search: 'Search',\n  /**\n  *@description Text to clear content\n  */\n  clear: 'Clear',\n  /**\n  *@description Tooltip text that appears on the setting to preserve log when hovering over the item\n  */\n  doNotClearLogOnPageReload: 'Do not clear log on page reload / navigation',\n  /**\n  *@description Text to preserve the log after refreshing\n  */\n  preserveLog: 'Preserve log',\n  /**\n  *@description Text to disable cache while DevTools is open\n  */\n  disableCacheWhileDevtoolsIsOpen: 'Disable cache (while DevTools is open)',\n  /**\n  *@description Text in Network Config View of the Network panel\n  */\n  disableCache: 'Disable cache',\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon settings gear in show settings pane setting in network panel of the network panel\n  */\n  networkSettings: 'Network settings',\n  /**\n  *@description Tooltip for expanding network request row setting\n  */\n  showMoreInformationInRequestRows: 'Show more information in request rows',\n  /**\n  *@description Text in Network Panel of the Network panel\n  */\n  useLargeRequestRows: 'Use large request rows',\n  /**\n  *@description Tooltip text for network request overview setting\n  */\n  showOverviewOfNetworkRequests: 'Show overview of network requests',\n  /**\n  *@description Text in Network Panel of the Network panel\n  */\n  showOverview: 'Show overview',\n  /**\n  *@description Tooltip for group by frame network setting\n  */\n  groupRequestsByTopLevelRequest: 'Group requests by top level request frame',\n  /**\n  *@description Text in Network Panel of the Network panel\n  */\n  groupByFrame: 'Group by frame',\n  /**\n  *@description Tooltip for capture screenshot network setting\n  */\n  captureScreenshotsWhenLoadingA: 'Capture screenshots when loading a page',\n  /**\n  *@description Text to take screenshots\n  */\n  captureScreenshots: 'Capture screenshots',\n  /**\n  * @description Tooltip text that appears when hovering over the largeicon load button in the\n  * Network Panel. This action prompts the user to select a HAR file to upload to DevTools.\n  */\n  importHarFile: 'Import `HAR` file...',\n  /**\n  * @description Tooltip text that appears when hovering over the largeicon download button in the\n  * Network Panel. HAR is a file format (HTTP Archive) and should not be translated. This action\n  * triggers the download of a HAR file.\n  */\n  exportHar: 'Export `HAR`...',\n  /**\n  *@description Text for throttling the network\n  */\n  throttling: 'Throttling',\n  /**\n  *@description Text in Network Panel of the Network panel\n  *@example {Ctrl + R} PH1\n  */\n  hitSToReloadAndCaptureFilmstrip: 'Hit {PH1} to reload and capture filmstrip.',\n  /**\n  *@description A context menu item in the Network Panel of the Network panel\n  */\n  revealInNetworkPanel: 'Reveal in Network panel',\n  /**\n  *@description Text in Network Panel of the Network panel\n  */\n  recordingFrames: 'Recording frames...',\n  /**\n  *@description Text in Network Panel of the Network panel\n  */\n  fetchingFrames: 'Fetching frames...',\n  /**\n   * @description Text of a button in the Network panel's toolbar that open Network Conditions panel in the drawer.\n   */\n  moreNetworkConditions: 'More network conditions\u2026',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/network/NetworkPanel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet networkPanelInstance: NetworkPanel;\n\nexport class NetworkPanel extends UI.Panel.Panel implements UI.ContextMenu.Provider, UI.View.ViewLocationResolver {\n  private readonly networkLogShowOverviewSetting: Common.Settings.Setting<boolean>;\n  private readonly networkLogLargeRowsSetting: Common.Settings.Setting<boolean>;\n  private readonly networkRecordFilmStripSetting: Common.Settings.Setting<boolean>;\n  private readonly toggleRecordAction: UI.ActionRegistration.Action;\n  private pendingStopTimer!: number|undefined;\n  networkItemView: NetworkItemView|null;\n  private filmStripView: PerfUI.FilmStripView.FilmStripView|null;\n  private filmStripRecorder: FilmStripRecorder|null;\n  private currentRequest: SDK.NetworkRequest.NetworkRequest|null;\n  private readonly panelToolbar: UI.Toolbar.Toolbar;\n  private readonly rightToolbar: UI.Toolbar.Toolbar;\n  private readonly filterBar: UI.FilterBar.FilterBar;\n  private readonly settingsPane: UI.Widget.HBox;\n  private showSettingsPaneSetting: Common.Settings.Setting<boolean>;\n  private readonly filmStripPlaceholderElement: HTMLElement;\n  private readonly overviewPane: PerfUI.TimelineOverviewPane.TimelineOverviewPane;\n  private readonly networkOverview: NetworkOverview;\n  private readonly overviewPlaceholderElement: HTMLElement;\n  private readonly calculator: NetworkTransferTimeCalculator;\n  private splitWidget: UI.SplitWidget.SplitWidget;\n  private readonly sidebarLocation: UI.View.TabbedViewLocation;\n  private readonly progressBarContainer: HTMLDivElement;\n  networkLogView: NetworkLogView;\n  private readonly fileSelectorElement: HTMLElement;\n  private readonly detailsWidget: UI.Widget.VBox;\n  private readonly closeButtonElement: HTMLDivElement;\n  private preserveLogSetting: Common.Settings.Setting<boolean>;\n  recordLogSetting: Common.Settings.Setting<boolean>;\n  private readonly throttlingSelect: UI.Toolbar.ToolbarComboBox;\n\n  constructor() {\n    super('network');\n\n    this.networkLogShowOverviewSetting =\n        Common.Settings.Settings.instance().createSetting('networkLogShowOverview', true);\n    this.networkLogLargeRowsSetting = Common.Settings.Settings.instance().createSetting('networkLogLargeRows', false);\n    this.networkRecordFilmStripSetting =\n        Common.Settings.Settings.instance().createSetting('networkRecordFilmStripSetting', false);\n    this.toggleRecordAction =\n        (UI.ActionRegistry.ActionRegistry.instance().action('network.toggle-recording') as\n         UI.ActionRegistration.Action);\n    this.networkItemView = null;\n    this.filmStripView = null;\n    this.filmStripRecorder = null;\n    this.currentRequest = null;\n\n    const panel = new UI.Widget.VBox();\n\n    const networkToolbarContainer = panel.contentElement.createChild('div', 'network-toolbar-container');\n    this.panelToolbar = new UI.Toolbar.Toolbar('', networkToolbarContainer);\n    this.panelToolbar.makeWrappable(true);\n    this.rightToolbar = new UI.Toolbar.Toolbar('', networkToolbarContainer);\n\n    this.filterBar = new UI.FilterBar.FilterBar('networkPanel', true);\n    this.filterBar.show(panel.contentElement);\n    this.filterBar.addEventListener(UI.FilterBar.FilterBarEvents.Changed, this.handleFilterChanged.bind(this));\n\n    this.settingsPane = new UI.Widget.HBox();\n    this.settingsPane.element.classList.add('network-settings-pane');\n    this.settingsPane.show(panel.contentElement);\n    this.showSettingsPaneSetting =\n        Common.Settings.Settings.instance().createSetting('networkShowSettingsToolbar', false);\n    this.showSettingsPaneSetting.addChangeListener(this.updateSettingsPaneVisibility.bind(this));\n    this.updateSettingsPaneVisibility();\n\n    this.filmStripPlaceholderElement = panel.contentElement.createChild('div', 'network-film-strip-placeholder');\n\n    // Create top overview component.\n    this.overviewPane = new PerfUI.TimelineOverviewPane.TimelineOverviewPane('network');\n    this.overviewPane.addEventListener(\n        PerfUI.TimelineOverviewPane.Events.WindowChanged, this.onWindowChanged.bind(this));\n    this.overviewPane.element.id = 'network-overview-panel';\n    this.networkOverview = new NetworkOverview();\n    this.overviewPane.setOverviewControls([this.networkOverview]);\n    this.overviewPlaceholderElement = panel.contentElement.createChild('div');\n\n    this.calculator = new NetworkTransferTimeCalculator();\n\n    this.splitWidget = new UI.SplitWidget.SplitWidget(true, false, 'networkPanelSplitViewState');\n    this.splitWidget.hideMain();\n    this.splitWidget.show(panel.contentElement);\n\n    panel.setDefaultFocusedChild(this.filterBar);\n\n    const initialSidebarWidth = 225;\n    const splitWidget = new UI.SplitWidget.SplitWidget(true, false, 'networkPanelSidebarState', initialSidebarWidth);\n    splitWidget.hideSidebar();\n    splitWidget.enableShowModeSaving();\n    splitWidget.show(this.element);\n    this.sidebarLocation = UI.ViewManager.ViewManager.instance().createTabbedLocation(async () => {\n      void UI.ViewManager.ViewManager.instance().showView('network');\n      splitWidget.showBoth();\n    }, 'network-sidebar', true);\n    const tabbedPane = this.sidebarLocation.tabbedPane();\n    tabbedPane.setMinimumSize(100, 25);\n    tabbedPane.element.classList.add('network-tabbed-pane');\n    tabbedPane.element.addEventListener('keydown', event => {\n      if (event.key !== Platform.KeyboardUtilities.ESCAPE_KEY) {\n        return;\n      }\n      splitWidget.hideSidebar();\n      event.consume();\n    });\n    const closeSidebar = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.close), 'largeicon-delete');\n    closeSidebar.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, () => splitWidget.hideSidebar());\n    tabbedPane.rightToolbar().appendToolbarItem(closeSidebar);\n    splitWidget.setSidebarWidget(tabbedPane);\n    splitWidget.setMainWidget(panel);\n    splitWidget.setDefaultFocusedChild(panel);\n    this.setDefaultFocusedChild(splitWidget);\n\n    this.progressBarContainer = document.createElement('div');\n\n    this.networkLogView =\n        new NetworkLogView(this.filterBar, this.progressBarContainer, this.networkLogLargeRowsSetting);\n    this.splitWidget.setSidebarWidget(this.networkLogView);\n    this.fileSelectorElement =\n        (UI.UIUtils.createFileSelectorElement(this.networkLogView.onLoadFromFile.bind(this.networkLogView)) as\n         HTMLElement);\n    panel.element.appendChild(this.fileSelectorElement);\n\n    this.detailsWidget = new UI.Widget.VBox();\n    this.detailsWidget.element.classList.add('network-details-view');\n    this.splitWidget.setMainWidget(this.detailsWidget);\n\n    this.closeButtonElement = document.createElement('div', {is: 'dt-close-button'});\n    this.closeButtonElement.addEventListener('click', async () => {\n      const action = UI.ActionRegistry.ActionRegistry.instance().action('network.hide-request-details');\n      if (action) {\n        await action.execute();\n      }\n    }, false);\n    this.closeButtonElement.style.margin = '0 5px';\n\n    this.networkLogShowOverviewSetting.addChangeListener(this.toggleShowOverview, this);\n    this.networkLogLargeRowsSetting.addChangeListener(this.toggleLargerRequests, this);\n    this.networkRecordFilmStripSetting.addChangeListener(this.toggleRecordFilmStrip, this);\n\n    this.preserveLogSetting = Common.Settings.Settings.instance().moduleSetting('network_log.preserve-log');\n    this.recordLogSetting = Common.Settings.Settings.instance().moduleSetting('network_log.record-log');\n    this.recordLogSetting.addChangeListener(({data}) => this.toggleRecord(data));\n\n    this.throttlingSelect = this.createThrottlingConditionsSelect();\n    this.setupToolbarButtons(splitWidget);\n\n    this.toggleRecord(this.recordLogSetting.get());\n    this.toggleShowOverview();\n    this.toggleLargerRequests();\n    this.toggleRecordFilmStrip();\n    this.updateUI();\n\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.WillReloadPage, this.willReloadPage,\n        this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.Load, this.load, this);\n    this.networkLogView.addEventListener(Events.RequestSelected, this.onRequestSelected, this);\n    this.networkLogView.addEventListener(Events.RequestActivated, this.onRequestActivated, this);\n    Logs.NetworkLog.NetworkLog.instance().addEventListener(\n        Logs.NetworkLog.Events.RequestAdded, this.onUpdateRequest, this);\n    Logs.NetworkLog.NetworkLog.instance().addEventListener(\n        Logs.NetworkLog.Events.RequestUpdated, this.onUpdateRequest, this);\n    Logs.NetworkLog.NetworkLog.instance().addEventListener(Logs.NetworkLog.Events.Reset, this.onNetworkLogReset, this);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): NetworkPanel {\n    const {forceNew} = opts;\n    if (!networkPanelInstance || forceNew) {\n      networkPanelInstance = new NetworkPanel();\n    }\n\n    return networkPanelInstance;\n  }\n\n  static revealAndFilter(filters: {\n    filterType: NetworkForward.UIFilter.FilterType|null,\n    filterValue: string,\n  }[]): Promise<void> {\n    const panel = NetworkPanel.instance();\n    let filterString = '';\n    for (const filter of filters) {\n      if (filter.filterType) {\n        filterString += `${filter.filterType}:${filter.filterValue} `;\n      } else {\n        filterString += `${filter.filterValue} `;\n      }\n    }\n    panel.networkLogView.setTextFilterValue(filterString);\n    return UI.ViewManager.ViewManager.instance().showView('network');\n  }\n\n  static async selectAndShowRequest(\n      request: SDK.NetworkRequest.NetworkRequest, tab: NetworkForward.UIRequestLocation.UIRequestTabs,\n      options?: NetworkForward.UIRequestLocation.FilterOptions): Promise<void> {\n    const panel = NetworkPanel.instance();\n    await panel.selectAndActivateRequest(request, tab, options);\n  }\n\n  throttlingSelectForTest(): UI.Toolbar.ToolbarComboBox {\n    return this.throttlingSelect;\n  }\n\n  private onWindowChanged(event: Common.EventTarget.EventTargetEvent<PerfUI.TimelineOverviewPane.WindowChangedEvent>):\n      void {\n    const startTime = Math.max(this.calculator.minimumBoundary(), event.data.startTime / 1000);\n    const endTime = Math.min(this.calculator.maximumBoundary(), event.data.endTime / 1000);\n    this.networkLogView.setWindow(startTime, endTime);\n  }\n\n  private async searchToggleClick(): Promise<void> {\n    const action = UI.ActionRegistry.ActionRegistry.instance().action('network.search');\n    if (action) {\n      await action.execute();\n    }\n  }\n\n  private setupToolbarButtons(splitWidget: UI.SplitWidget.SplitWidget): void {\n    const searchToggle = new UI.Toolbar.ToolbarToggle(i18nString(UIStrings.search), 'largeicon-search');\n    function updateSidebarToggle(): void {\n      const isSidebarShowing = splitWidget.showMode() !== UI.SplitWidget.ShowMode.OnlyMain;\n      searchToggle.setToggled(isSidebarShowing);\n      if (!isSidebarShowing) {\n        (searchToggle.element as HTMLElement).focus();\n      }\n    }\n    this.panelToolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButton(this.toggleRecordAction));\n    const clearButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.clear), 'largeicon-clear');\n    clearButton.addEventListener(\n        UI.Toolbar.ToolbarButton.Events.Click, () => Logs.NetworkLog.NetworkLog.instance().reset(true), this);\n    this.panelToolbar.appendToolbarItem(clearButton);\n    this.panelToolbar.appendSeparator();\n\n    this.panelToolbar.appendToolbarItem(this.filterBar.filterButton());\n    updateSidebarToggle();\n    splitWidget.addEventListener(UI.SplitWidget.Events.ShowModeChanged, updateSidebarToggle);\n    searchToggle.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, () => {\n      void this.searchToggleClick();\n    });\n    this.panelToolbar.appendToolbarItem(searchToggle);\n    this.panelToolbar.appendSeparator();\n\n    this.panelToolbar.appendToolbarItem(new UI.Toolbar.ToolbarSettingCheckbox(\n        this.preserveLogSetting, i18nString(UIStrings.doNotClearLogOnPageReload), i18nString(UIStrings.preserveLog)));\n\n    this.panelToolbar.appendSeparator();\n    const disableCacheCheckbox = new UI.Toolbar.ToolbarSettingCheckbox(\n        Common.Settings.Settings.instance().moduleSetting('cacheDisabled'),\n        i18nString(UIStrings.disableCacheWhileDevtoolsIsOpen), i18nString(UIStrings.disableCache));\n    this.panelToolbar.appendToolbarItem(disableCacheCheckbox);\n\n    this.panelToolbar.appendToolbarItem(this.throttlingSelect);\n\n    const networkConditionsIcon = new IconButton.Icon.Icon();\n    networkConditionsIcon.data = {\n      iconName: 'network_conditions_icon',\n      color: 'rgb(110 110 110)',\n      width: '18px',\n      height: '18px',\n    };\n    const networkConditionsButton =\n        new UI.Toolbar.ToolbarButton(i18nString(UIStrings.moreNetworkConditions), networkConditionsIcon);\n    networkConditionsButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, () => {\n      void UI.ViewManager.ViewManager.instance().showView('network.config');\n    }, this);\n    this.panelToolbar.appendToolbarItem(networkConditionsButton);\n\n    this.rightToolbar.appendToolbarItem(new UI.Toolbar.ToolbarItem(this.progressBarContainer));\n    this.rightToolbar.appendSeparator();\n    this.rightToolbar.appendToolbarItem(new UI.Toolbar.ToolbarSettingToggle(\n        this.showSettingsPaneSetting, 'largeicon-settings-gear', i18nString(UIStrings.networkSettings)));\n\n    const settingsToolbarLeft = new UI.Toolbar.Toolbar('', this.settingsPane.element);\n    settingsToolbarLeft.makeVertical();\n    settingsToolbarLeft.appendToolbarItem(new UI.Toolbar.ToolbarSettingCheckbox(\n        this.networkLogLargeRowsSetting, i18nString(UIStrings.showMoreInformationInRequestRows),\n        i18nString(UIStrings.useLargeRequestRows)));\n    settingsToolbarLeft.appendToolbarItem(new UI.Toolbar.ToolbarSettingCheckbox(\n        this.networkLogShowOverviewSetting, i18nString(UIStrings.showOverviewOfNetworkRequests),\n        i18nString(UIStrings.showOverview)));\n\n    const settingsToolbarRight = new UI.Toolbar.Toolbar('', this.settingsPane.element);\n    settingsToolbarRight.makeVertical();\n    settingsToolbarRight.appendToolbarItem(new UI.Toolbar.ToolbarSettingCheckbox(\n        Common.Settings.Settings.instance().moduleSetting('network.group-by-frame'),\n        i18nString(UIStrings.groupRequestsByTopLevelRequest), i18nString(UIStrings.groupByFrame)));\n    settingsToolbarRight.appendToolbarItem(new UI.Toolbar.ToolbarSettingCheckbox(\n        this.networkRecordFilmStripSetting, i18nString(UIStrings.captureScreenshotsWhenLoadingA),\n        i18nString(UIStrings.captureScreenshots)));\n\n    this.panelToolbar.appendSeparator();\n    const importHarButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.importHarFile), 'largeicon-load');\n    importHarButton.addEventListener(\n        UI.Toolbar.ToolbarButton.Events.Click, () => this.fileSelectorElement.click(), this);\n    this.panelToolbar.appendToolbarItem(importHarButton);\n    const exportHarButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.exportHar), 'largeicon-download');\n    exportHarButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, _event => {\n      void this.networkLogView.exportAll();\n    }, this);\n    this.panelToolbar.appendToolbarItem(exportHarButton);\n  }\n\n  private updateSettingsPaneVisibility(): void {\n    this.settingsPane.element.classList.toggle('hidden', !this.showSettingsPaneSetting.get());\n  }\n\n  private createThrottlingConditionsSelect(): UI.Toolbar.ToolbarComboBox {\n    const toolbarItem = new UI.Toolbar.ToolbarComboBox(null, i18nString(UIStrings.throttling));\n    toolbarItem.setMaxWidth(160);\n    MobileThrottling.ThrottlingManager.throttlingManager().decorateSelectWithNetworkThrottling(\n        toolbarItem.selectElement());\n    return toolbarItem;\n  }\n\n  toggleRecord(toggled: boolean): void {\n    this.toggleRecordAction.setToggled(toggled);\n    if (this.recordLogSetting.get() !== toggled) {\n      this.recordLogSetting.set(toggled);\n    }\n\n    this.networkLogView.setRecording(toggled);\n    if (!toggled && this.filmStripRecorder) {\n      this.filmStripRecorder.stopRecording(this.filmStripAvailable.bind(this));\n    }\n  }\n\n  private filmStripAvailable(filmStripModel: SDK.FilmStripModel.FilmStripModel|null): void {\n    if (!filmStripModel) {\n      return;\n    }\n    const calculator = this.networkLogView.timeCalculator();\n    if (this.filmStripView) {\n      this.filmStripView.setModel(\n          filmStripModel, calculator.minimumBoundary() * 1000, calculator.boundarySpan() * 1000);\n    }\n    this.networkOverview.setFilmStripModel(filmStripModel);\n    const timestamps = filmStripModel.frames().map(mapTimestamp);\n\n    function mapTimestamp(frame: SDK.FilmStripModel.Frame): number {\n      return frame.timestamp / 1000;\n    }\n\n    this.networkLogView.addFilmStripFrames(timestamps);\n  }\n\n  private onNetworkLogReset(event: Common.EventTarget.EventTargetEvent<Logs.NetworkLog.ResetEvent>): void {\n    const {clearIfPreserved} = event.data;\n    BlockedURLsPane.reset();\n    if (!this.preserveLogSetting.get() || clearIfPreserved) {\n      this.calculator.reset();\n      this.overviewPane.reset();\n    }\n    if (this.filmStripView) {\n      this.resetFilmStripView();\n    }\n  }\n\n  private willReloadPage(): void {\n    if (this.pendingStopTimer) {\n      clearTimeout(this.pendingStopTimer);\n      delete this.pendingStopTimer;\n    }\n    if (this.isShowing() && this.filmStripRecorder) {\n      this.filmStripRecorder.startRecording();\n    }\n  }\n\n  private load(): void {\n    if (this.filmStripRecorder && this.filmStripRecorder.isRecording()) {\n      this.pendingStopTimer = window.setTimeout(this.stopFilmStripRecording.bind(this), displayScreenshotDelay);\n    }\n  }\n\n  private stopFilmStripRecording(): void {\n    if (this.filmStripRecorder) {\n      this.filmStripRecorder.stopRecording(this.filmStripAvailable.bind(this));\n    }\n    delete this.pendingStopTimer;\n  }\n\n  private toggleLargerRequests(): void {\n    this.updateUI();\n  }\n\n  private toggleShowOverview(): void {\n    const toggled = this.networkLogShowOverviewSetting.get();\n    if (toggled) {\n      this.overviewPane.show(this.overviewPlaceholderElement);\n    } else {\n      this.overviewPane.detach();\n    }\n    this.doResize();\n  }\n\n  private toggleRecordFilmStrip(): void {\n    const toggled = this.networkRecordFilmStripSetting.get();\n    if (toggled && !this.filmStripRecorder) {\n      this.filmStripView = new PerfUI.FilmStripView.FilmStripView();\n      this.filmStripView.setMode(PerfUI.FilmStripView.Modes.FrameBased);\n      this.filmStripView.element.classList.add('network-film-strip');\n      this.filmStripRecorder = new FilmStripRecorder(this.networkLogView.timeCalculator(), this.filmStripView);\n      this.filmStripView.show(this.filmStripPlaceholderElement);\n      this.filmStripView.addEventListener(PerfUI.FilmStripView.Events.FrameSelected, this.onFilmFrameSelected, this);\n      this.filmStripView.addEventListener(PerfUI.FilmStripView.Events.FrameEnter, this.onFilmFrameEnter, this);\n      this.filmStripView.addEventListener(PerfUI.FilmStripView.Events.FrameExit, this.onFilmFrameExit, this);\n      this.resetFilmStripView();\n    }\n\n    if (!toggled && this.filmStripRecorder) {\n      if (this.filmStripView) {\n        this.filmStripView.detach();\n      }\n      this.filmStripView = null;\n      this.filmStripRecorder = null;\n    }\n  }\n\n  private resetFilmStripView(): void {\n    const reloadShortcut =\n        UI.ShortcutRegistry.ShortcutRegistry.instance().shortcutsForAction('inspector_main.reload')[0];\n\n    if (this.filmStripView) {\n      this.filmStripView.reset();\n      if (reloadShortcut) {\n        this.filmStripView.setStatusText(\n            i18nString(UIStrings.hitSToReloadAndCaptureFilmstrip, {PH1: reloadShortcut.title()}));\n      }\n    }\n  }\n\n  elementsToRestoreScrollPositionsFor(): Element[] {\n    return this.networkLogView.elementsToRestoreScrollPositionsFor();\n  }\n\n  wasShown(): void {\n    UI.Context.Context.instance().setFlavor(NetworkPanel, this);\n    this.registerCSSFiles([networkPanelStyles]);\n\n    // Record the network tool load time after the panel has loaded.\n    Host.userMetrics.panelLoaded('network', 'DevTools.Launch.Network');\n  }\n\n  willHide(): void {\n    UI.Context.Context.instance().setFlavor(NetworkPanel, null);\n  }\n\n  revealAndHighlightRequest(request: SDK.NetworkRequest.NetworkRequest): void {\n    this.hideRequestPanel();\n    if (request) {\n      this.networkLogView.revealAndHighlightRequest(request);\n    }\n  }\n\n  revealAndHighlightRequestWithId(request: NetworkForward.NetworkRequestId.NetworkRequestId): void {\n    this.hideRequestPanel();\n    if (request) {\n      this.networkLogView.revealAndHighlightRequestWithId(request);\n    }\n  }\n\n  async selectAndActivateRequest(\n      request: SDK.NetworkRequest.NetworkRequest, shownTab?: NetworkForward.UIRequestLocation.UIRequestTabs,\n      options?: NetworkForward.UIRequestLocation.FilterOptions): Promise<NetworkItemView|null> {\n    await UI.ViewManager.ViewManager.instance().showView('network');\n    this.networkLogView.selectRequest(request, options);\n    this.showRequestPanel(shownTab);\n    return this.networkItemView;\n  }\n\n  private handleFilterChanged(): void {\n    this.hideRequestPanel();\n  }\n\n  private onRowSizeChanged(): void {\n    this.updateUI();\n  }\n\n  private onRequestSelected(event: Common.EventTarget.EventTargetEvent<SDK.NetworkRequest.NetworkRequest|null>): void {\n    const request = event.data;\n    this.currentRequest = request;\n    this.networkOverview.setHighlightedRequest(request);\n    this.updateNetworkItemView();\n  }\n\n  private onRequestActivated(event: Common.EventTarget.EventTargetEvent<RequestActivatedEvent>): void {\n    const {showPanel, tab, takeFocus} = event.data;\n    if (showPanel) {\n      this.showRequestPanel(tab, takeFocus);\n    } else {\n      this.hideRequestPanel();\n    }\n  }\n\n  private showRequestPanel(shownTab?: NetworkForward.UIRequestLocation.UIRequestTabs, takeFocus?: boolean): void {\n    if (this.splitWidget.showMode() === UI.SplitWidget.ShowMode.Both && !shownTab && !takeFocus) {\n      // If panel is already shown, and we are not forcing a specific tab, return.\n      return;\n    }\n    this.clearNetworkItemView();\n    if (this.currentRequest) {\n      const networkItemView = this.createNetworkItemView(shownTab);\n      if (networkItemView && takeFocus) {\n        networkItemView.focus();\n      }\n    }\n    this.updateUI();\n  }\n\n  hideRequestPanel(): void {\n    this.clearNetworkItemView();\n    this.splitWidget.hideMain();\n    this.updateUI();\n  }\n\n  private updateNetworkItemView(): void {\n    if (this.splitWidget.showMode() === UI.SplitWidget.ShowMode.Both) {\n      this.clearNetworkItemView();\n      this.createNetworkItemView();\n      this.updateUI();\n    }\n  }\n\n  private clearNetworkItemView(): void {\n    if (this.networkItemView) {\n      this.networkItemView.detach();\n      this.networkItemView = null;\n    }\n  }\n  private createNetworkItemView(initialTab?: NetworkForward.UIRequestLocation.UIRequestTabs): NetworkItemView\n      |undefined {\n    if (!this.currentRequest) {\n      return;\n    }\n    this.networkItemView = new NetworkItemView(this.currentRequest, this.networkLogView.timeCalculator(), initialTab);\n    this.networkItemView.leftToolbar().appendToolbarItem(new UI.Toolbar.ToolbarItem(this.closeButtonElement));\n    this.networkItemView.show(this.detailsWidget.element);\n    this.splitWidget.showBoth();\n    return this.networkItemView;\n  }\n\n  private updateUI(): void {\n    if (this.detailsWidget) {\n      this.detailsWidget.element.classList.toggle(\n          'network-details-view-tall-header', this.networkLogLargeRowsSetting.get());\n    }\n    if (this.networkLogView) {\n      this.networkLogView.switchViewMode(!this.splitWidget.isResizable());\n    }\n  }\n\n  appendApplicableItems(this: NetworkPanel, event: Event, contextMenu: UI.ContextMenu.ContextMenu, target: Object):\n      void {\n    function reveal(this: NetworkPanel, request: SDK.NetworkRequest.NetworkRequest): void {\n      void UI.ViewManager.ViewManager.instance()\n          .showView('network')\n          .then(this.networkLogView.resetFilter.bind(this.networkLogView))\n          .then(this.revealAndHighlightRequest.bind(this, request));\n    }\n\n    function appendRevealItem(this: NetworkPanel, request: SDK.NetworkRequest.NetworkRequest): void {\n      contextMenu.revealSection().appendItem(i18nString(UIStrings.revealInNetworkPanel), reveal.bind(this, request));\n    }\n    if ((event.target as Node).isSelfOrDescendant(this.element)) {\n      return;\n    }\n\n    if (target instanceof SDK.Resource.Resource) {\n      const resource = (target as SDK.Resource.Resource);\n      if (resource.request) {\n        appendRevealItem.call(this, resource.request);\n      }\n      return;\n    }\n    if (target instanceof Workspace.UISourceCode.UISourceCode) {\n      const uiSourceCode = (target as Workspace.UISourceCode.UISourceCode);\n      const resource = Bindings.ResourceUtils.resourceForURL(uiSourceCode.url());\n      if (resource && resource.request) {\n        appendRevealItem.call(this, resource.request);\n      }\n      return;\n    }\n\n    if (!(target instanceof SDK.NetworkRequest.NetworkRequest)) {\n      return;\n    }\n    const request = (target as SDK.NetworkRequest.NetworkRequest);\n    if (this.networkItemView && this.networkItemView.isShowing() && this.networkItemView.request() === request) {\n      return;\n    }\n\n    appendRevealItem.call(this, request);\n  }\n\n  private onFilmFrameSelected(event: Common.EventTarget.EventTargetEvent<number>): void {\n    const timestamp = event.data;\n    this.overviewPane.setWindowTimes(0, timestamp);\n  }\n\n  private onFilmFrameEnter(event: Common.EventTarget.EventTargetEvent<number>): void {\n    const timestamp = event.data;\n    this.networkOverview.selectFilmStripFrame(timestamp);\n    this.networkLogView.selectFilmStripFrame(timestamp / 1000);\n  }\n\n  private onFilmFrameExit(): void {\n    this.networkOverview.clearFilmStripFrame();\n    this.networkLogView.clearFilmStripFrame();\n  }\n\n  private onUpdateRequest(event: Common.EventTarget.EventTargetEvent<SDK.NetworkRequest.NetworkRequest>): void {\n    const request = event.data;\n    this.calculator.updateBoundaries(request);\n    // FIXME: Unify all time units across the frontend!\n    this.overviewPane.setBounds(this.calculator.minimumBoundary() * 1000, this.calculator.maximumBoundary() * 1000);\n    this.networkOverview.updateRequest(request);\n    this.overviewPane.scheduleUpdate();\n  }\n\n  resolveLocation(locationName: string): UI.View.ViewLocation|null {\n    if (locationName === 'network-sidebar') {\n      return this.sidebarLocation;\n    }\n    return null;\n  }\n}\n\nexport const displayScreenshotDelay = 1000;\n\nlet contextMenuProviderInstance: ContextMenuProvider;\n\nexport class ContextMenuProvider implements UI.ContextMenu.Provider {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ContextMenuProvider {\n    const {forceNew} = opts;\n    if (!contextMenuProviderInstance || forceNew) {\n      contextMenuProviderInstance = new ContextMenuProvider();\n    }\n\n    return contextMenuProviderInstance;\n  }\n  appendApplicableItems(event: Event, contextMenu: UI.ContextMenu.ContextMenu, target: Object): void {\n    NetworkPanel.instance().appendApplicableItems(event, contextMenu, target);\n  }\n}\nlet requestRevealerInstance: RequestRevealer;\nexport class RequestRevealer implements Common.Revealer.Revealer {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): RequestRevealer {\n    const {forceNew} = opts;\n    if (!requestRevealerInstance || forceNew) {\n      requestRevealerInstance = new RequestRevealer();\n    }\n\n    return requestRevealerInstance;\n  }\n\n  reveal(request: Object): Promise<void> {\n    if (!(request instanceof SDK.NetworkRequest.NetworkRequest)) {\n      return Promise.reject(new Error('Internal error: not a network request'));\n    }\n    const panel = NetworkPanel.instance();\n    return UI.ViewManager.ViewManager.instance().showView('network').then(\n        panel.revealAndHighlightRequest.bind(panel, request));\n  }\n}\n\nlet requestIdRevealerInstance: RequestIdRevealer;\nexport class RequestIdRevealer implements Common.Revealer.Revealer {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): RequestIdRevealer {\n    const {forceNew} = opts;\n    if (!requestIdRevealerInstance || forceNew) {\n      requestIdRevealerInstance = new RequestIdRevealer();\n    }\n\n    return requestIdRevealerInstance;\n  }\n\n  reveal(requestId: Object): Promise<void> {\n    if (!(requestId instanceof NetworkForward.NetworkRequestId.NetworkRequestId)) {\n      return Promise.reject(new Error('Internal error: not a network request ID'));\n    }\n    const panel = NetworkPanel.instance();\n    return UI.ViewManager.ViewManager.instance().showView('network').then(\n        panel.revealAndHighlightRequestWithId.bind(panel, requestId));\n  }\n}\n\nlet networkLogWithFilterRevealerInstance: NetworkLogWithFilterRevealer;\nexport class NetworkLogWithFilterRevealer implements Common.Revealer.Revealer {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): NetworkLogWithFilterRevealer {\n    const {forceNew} = opts;\n    if (!networkLogWithFilterRevealerInstance || forceNew) {\n      networkLogWithFilterRevealerInstance = new NetworkLogWithFilterRevealer();\n    }\n\n    return networkLogWithFilterRevealerInstance;\n  }\n\n  reveal(request: Object): Promise<void> {\n    if (!(request instanceof NetworkForward.UIFilter.UIRequestFilter)) {\n      return Promise.reject(new Error('Internal error: not a UIRequestFilter'));\n    }\n    return NetworkPanel.revealAndFilter(request.filters);\n  }\n}\n\nexport class FilmStripRecorder implements SDK.TracingManager.TracingManagerClient {\n  private tracingManager: SDK.TracingManager.TracingManager|null;\n  private resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel|null;\n  private readonly timeCalculator: NetworkTimeCalculator;\n  private readonly filmStripView: PerfUI.FilmStripView.FilmStripView;\n  private tracingModel: SDK.TracingModel.TracingModel|null;\n  private callback: ((arg0: SDK.FilmStripModel.FilmStripModel|null) => void)|null;\n\n  constructor(timeCalculator: NetworkTimeCalculator, filmStripView: PerfUI.FilmStripView.FilmStripView) {\n    this.tracingManager = null;\n    this.resourceTreeModel = null;\n    this.timeCalculator = timeCalculator;\n    this.filmStripView = filmStripView;\n    this.tracingModel = null;\n    this.callback = null;\n  }\n\n  traceEventsCollected(events: SDK.TracingManager.EventPayload[]): void {\n    if (this.tracingModel) {\n      this.tracingModel.addEvents(events);\n    }\n  }\n\n  tracingComplete(): void {\n    if (!this.tracingModel || !this.tracingManager) {\n      return;\n    }\n    this.tracingModel.tracingComplete();\n    this.tracingManager = null;\n    if (this.callback) {\n      this.callback(\n          new SDK.FilmStripModel.FilmStripModel(this.tracingModel, this.timeCalculator.minimumBoundary() * 1000));\n    }\n    this.callback = null;\n    if (this.resourceTreeModel) {\n      this.resourceTreeModel.resumeReload();\n    }\n    this.resourceTreeModel = null;\n  }\n\n  tracingBufferUsage(): void {\n  }\n\n  eventsRetrievalProgress(_progress: number): void {\n  }\n\n  startRecording(): void {\n    this.filmStripView.reset();\n    this.filmStripView.setStatusText(i18nString(UIStrings.recordingFrames));\n    const tracingManagers = SDK.TargetManager.TargetManager.instance().models(SDK.TracingManager.TracingManager);\n    if (this.tracingManager || !tracingManagers.length) {\n      return;\n    }\n\n    this.tracingManager = tracingManagers[0];\n    if (!this.tracingManager) {\n      return;\n    }\n    this.resourceTreeModel = this.tracingManager.target().model(SDK.ResourceTreeModel.ResourceTreeModel);\n    if (this.tracingModel) {\n      this.tracingModel.dispose();\n    }\n    this.tracingModel = new SDK.TracingModel.TracingModel(new Bindings.TempFile.TempFileBackingStorage());\n    void this.tracingManager.start(this, '-*,disabled-by-default-devtools.screenshot', '');\n\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.FilmStripStartedRecording);\n  }\n\n  isRecording(): boolean {\n    return Boolean(this.tracingManager);\n  }\n\n  stopRecording(callback: (arg0: SDK.FilmStripModel.FilmStripModel|null) => void): void {\n    if (!this.tracingManager) {\n      return;\n    }\n\n    this.tracingManager.stop();\n    if (this.resourceTreeModel) {\n      this.resourceTreeModel.suspendReload();\n    }\n    this.callback = callback;\n    this.filmStripView.setStatusText(i18nString(UIStrings.fetchingFrames));\n  }\n}\n\nlet networkActionDelegateInstance: ActionDelegate;\n\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  static instance(opts: {\n    forceNew: boolean|null,\n  }|undefined = {forceNew: null}): ActionDelegate {\n    const {forceNew} = opts;\n    if (!networkActionDelegateInstance || forceNew) {\n      networkActionDelegateInstance = new ActionDelegate();\n    }\n    return networkActionDelegateInstance;\n  }\n\n  handleAction(context: UI.Context.Context, actionId: string): boolean {\n    const panel = UI.Context.Context.instance().flavor(NetworkPanel);\n    console.assert(Boolean(panel && panel instanceof NetworkPanel));\n    if (!panel) {\n      return false;\n    }\n    switch (actionId) {\n      case 'network.toggle-recording': {\n        panel.toggleRecord(!panel.recordLogSetting.get());\n        return true;\n      }\n      case 'network.hide-request-details': {\n        if (!panel.networkItemView) {\n          return false;\n        }\n        panel.hideRequestPanel();\n        panel.networkLogView.resetFocus();\n        return true;\n      }\n      case 'network.search': {\n        const selection = UI.InspectorView.InspectorView.instance().element.window().getSelection();\n        if (selection) {\n          let queryCandidate = '';\n          if (selection.rangeCount) {\n            queryCandidate = selection.toString().replace(/\\r?\\n.*/, '');\n          }\n          void SearchNetworkView.openSearch(queryCandidate);\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n\nlet requestLocationRevealerInstance: RequestLocationRevealer;\n\nexport class RequestLocationRevealer implements Common.Revealer.Revealer {\n  static instance(opts: {\n    forceNew: boolean|null,\n  }|undefined = {forceNew: null}): RequestLocationRevealer {\n    const {forceNew} = opts;\n    if (!requestLocationRevealerInstance || forceNew) {\n      requestLocationRevealerInstance = new RequestLocationRevealer();\n    }\n    return requestLocationRevealerInstance;\n  }\n\n  async reveal(match: Object): Promise<void> {\n    const location = match as NetworkForward.UIRequestLocation.UIRequestLocation;\n    const view =\n        await NetworkPanel.instance().selectAndActivateRequest(location.request, location.tab, location.filterOptions);\n    if (!view) {\n      return;\n    }\n    if (location.searchMatch) {\n      await view.revealResponseBody(location.searchMatch.lineNumber);\n    }\n    if (location.header) {\n      view.revealHeader(location.header.section, location.header.header?.name);\n    }\n  }\n}\n\nlet searchNetworkViewInstance: SearchNetworkView;\n\nexport class SearchNetworkView extends Search.SearchView.SearchView {\n  private constructor() {\n    super('network');\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): SearchNetworkView {\n    const {forceNew} = opts;\n    if (!searchNetworkViewInstance || forceNew) {\n      searchNetworkViewInstance = new SearchNetworkView();\n    }\n\n    return searchNetworkViewInstance;\n  }\n\n  static async openSearch(query: string, searchImmediately?: boolean): Promise<Search.SearchView.SearchView> {\n    await UI.ViewManager.ViewManager.instance().showView('network.search-network-tab');\n    const searchView = SearchNetworkView.instance();\n    void searchView.toggle(query, Boolean(searchImmediately));\n    return searchView;\n  }\n\n  createScope(): Search.SearchConfig.SearchScope {\n    return new NetworkSearchScope();\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
