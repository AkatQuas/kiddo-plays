{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/network/EventSourceMessagesView.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport eventSourceMessagesViewStyles from './eventSourceMessagesView.css.js';\nimport type * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Event Source Messages View of the Network panel\n  */\n  id: 'Id',\n  /**\n  *@description Text that refers to some types\n  */\n  type: 'Type',\n  /**\n  *@description Text in Event Source Messages View of the Network panel\n  */\n  data: 'Data',\n  /**\n  *@description Text that refers to the time\n  */\n  time: 'Time',\n  /**\n  *@description Data grid name for Event Source data grids\n  */\n  eventSource: 'Event Source',\n  /**\n  *@description A context menu item in the Resource Web Socket Frame View of the Network panel\n  */\n  copyMessage: 'Copy message',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/network/EventSourceMessagesView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class EventSourceMessagesView extends UI.Widget.VBox {\n  private readonly request: SDK.NetworkRequest.NetworkRequest;\n  private dataGrid: DataGrid.SortableDataGrid.SortableDataGrid<EventSourceMessageNode>;\n\n  constructor(request: SDK.NetworkRequest.NetworkRequest) {\n    super();\n\n    this.element.classList.add('event-source-messages-view');\n    this.request = request;\n\n    const columns = ([\n      {id: 'id', title: i18nString(UIStrings.id), sortable: true, weight: 8},\n      {id: 'type', title: i18nString(UIStrings.type), sortable: true, weight: 8},\n      {id: 'data', title: i18nString(UIStrings.data), sortable: false, weight: 88},\n      {id: 'time', title: i18nString(UIStrings.time), sortable: true, weight: 8},\n    ] as DataGrid.DataGrid.ColumnDescriptor[]);\n\n    this.dataGrid = new DataGrid.SortableDataGrid.SortableDataGrid({\n      displayName: i18nString(UIStrings.eventSource),\n      columns,\n      editCallback: undefined,\n      deleteCallback: undefined,\n      refreshCallback: undefined,\n    });\n    this.dataGrid.setStriped(true);\n    this.dataGrid.setStickToBottom(true);\n    this.dataGrid.setRowContextMenuCallback(this.onRowContextMenu.bind(this));\n    this.dataGrid.markColumnAsSortedBy('time', DataGrid.DataGrid.Order.Ascending);\n    this.sortItems();\n    this.dataGrid.addEventListener(DataGrid.DataGrid.Events.SortingChanged, this.sortItems, this);\n\n    this.dataGrid.setName('EventSourceMessagesView');\n    this.dataGrid.asWidget().show(this.element);\n  }\n\n  wasShown(): void {\n    this.dataGrid.rootNode().removeChildren();\n    this.registerCSSFiles([eventSourceMessagesViewStyles]);\n    const messages = this.request.eventSourceMessages();\n    for (let i = 0; i < messages.length; ++i) {\n      this.dataGrid.insertChild(new EventSourceMessageNode(messages[i]));\n    }\n\n    this.request.addEventListener(SDK.NetworkRequest.Events.EventSourceMessageAdded, this.messageAdded, this);\n  }\n\n  willHide(): void {\n    this.request.removeEventListener(SDK.NetworkRequest.Events.EventSourceMessageAdded, this.messageAdded, this);\n  }\n\n  private messageAdded(event: Common.EventTarget.EventTargetEvent<SDK.NetworkRequest.EventSourceMessage>): void {\n    const message = event.data;\n    this.dataGrid.insertChild(new EventSourceMessageNode(message));\n  }\n\n  private sortItems(): void {\n    const sortColumnId = this.dataGrid.sortColumnId();\n    if (!sortColumnId) {\n      return;\n    }\n    const comparator =\n        (Comparators[sortColumnId] as\n             ((arg0: DataGrid.SortableDataGrid.SortableDataGridNode<EventSourceMessageNode>,\n               arg1: DataGrid.SortableDataGrid.SortableDataGridNode<EventSourceMessageNode>) => number) |\n         undefined);\n    if (!comparator) {\n      return;\n    }\n    this.dataGrid.sortNodes(comparator, !this.dataGrid.isSortOrderAscending());\n  }\n\n  private onRowContextMenu(\n      contextMenu: UI.ContextMenu.ContextMenu,\n      node: DataGrid.DataGrid.DataGridNode<DataGrid.ViewportDataGrid.ViewportDataGridNode<\n          DataGrid.SortableDataGrid.SortableDataGridNode<EventSourceMessageNode>>>): void {\n    contextMenu.clipboardSection().appendItem(\n        i18nString(UIStrings.copyMessage),\n        Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText.bind(\n            Host.InspectorFrontendHost.InspectorFrontendHostInstance, node.data.data));\n  }\n}\n\nexport class EventSourceMessageNode extends DataGrid.SortableDataGrid.SortableDataGridNode<EventSourceMessageNode> {\n  readonly message: SDK.NetworkRequest.EventSourceMessage;\n\n  constructor(message: SDK.NetworkRequest.EventSourceMessage) {\n    const time = new Date(message.time * 1000);\n    const timeText = ('0' + time.getHours()).substr(-2) + ':' + ('0' + time.getMinutes()).substr(-2) + ':' +\n        ('0' + time.getSeconds()).substr(-2) + '.' + ('00' + time.getMilliseconds()).substr(-3);\n    const timeNode = document.createElement('div');\n    UI.UIUtils.createTextChild(timeNode, timeText);\n    UI.Tooltip.Tooltip.install(timeNode, time.toLocaleString());\n    super({id: message.eventId, type: message.eventName, data: message.data, time: timeNode});\n    this.message = message;\n  }\n}\n\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function EventSourceMessageNodeComparator(\n    fieldGetter: (arg0: SDK.NetworkRequest.EventSourceMessage) => (number | string), a: EventSourceMessageNode,\n    b: EventSourceMessageNode): number {\n  const aValue = fieldGetter(a.message);\n  const bValue = fieldGetter(b.message);\n  return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;\n}\n\nexport const Comparators: {\n  [x: string]: (arg0: EventSourceMessageNode, arg1: EventSourceMessageNode) => number,\n} = {\n  'id': EventSourceMessageNodeComparator.bind(null, message => message.eventId),\n  'type': EventSourceMessageNodeComparator.bind(null, message => message.eventName),\n  'time': EventSourceMessageNodeComparator.bind(null, message => message.time),\n};\n"],
  "mappings": "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",
  "names": []
}
