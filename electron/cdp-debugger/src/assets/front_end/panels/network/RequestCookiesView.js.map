{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/network/RequestCookiesView.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as CookieTable from '../../ui/legacy/components/cookie_table/cookie_table.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport requestCookiesViewStyles from './requestCookiesView.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Request Cookies View of the Network panel\n  */\n  thisRequestHasNoCookies: 'This request has no cookies.',\n  /**\n  * @description Title for a table which shows all of the cookies associated with a selected network\n  * request, in the Network panel. Noun phrase.\n  */\n  requestCookies: 'Request Cookies',\n  /**\n  *@description Tooltip to explain what request cookies are\n  */\n  cookiesThatWereSentToTheServerIn: 'Cookies that were sent to the server in the \\'cookie\\' header of the request',\n  /**\n  *@description Label for showing request cookies that were not actually sent\n  */\n  showFilteredOutRequestCookies: 'show filtered out request cookies',\n  /**\n  *@description Text in Request Headers View of the Network Panel\n  */\n  noRequestCookiesWereSent: 'No request cookies were sent.',\n  /**\n  *@description Text in Request Cookies View of the Network panel\n  */\n  responseCookies: 'Response Cookies',\n  /**\n  *@description Tooltip to explain what response cookies are\n  */\n  cookiesThatWereReceivedFromThe:\n      'Cookies that were received from the server in the \\'`set-cookie`\\' header of the response',\n  /**\n  *@description Label for response cookies with invalid syntax\n  */\n  malformedResponseCookies: 'Malformed Response Cookies',\n  /**\n  * @description Tooltip to explain what malformed response cookies are. Malformed cookies are\n  * cookies that did not match the expected format and could not be interpreted, and are invalid.\n  */\n  cookiesThatWereReceivedFromTheServer:\n      'Cookies that were received from the server in the \\'`set-cookie`\\' header of the response but were malformed',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/network/RequestCookiesView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class RequestCookiesView extends UI.Widget.Widget {\n  private request: SDK.NetworkRequest.NetworkRequest;\n  private readonly showFilteredOutCookiesSetting: Common.Settings.Setting<boolean>;\n  private readonly emptyWidget: UI.EmptyWidget.EmptyWidget;\n  private readonly requestCookiesTitle: HTMLElement;\n  private readonly requestCookiesEmpty: HTMLElement;\n  private readonly requestCookiesTable: CookieTable.CookiesTable.CookiesTable;\n  private readonly responseCookiesTitle: HTMLElement;\n  private readonly responseCookiesTable: CookieTable.CookiesTable.CookiesTable;\n  private readonly malformedResponseCookiesTitle: HTMLElement;\n  private readonly malformedResponseCookiesList: HTMLElement;\n\n  constructor(request: SDK.NetworkRequest.NetworkRequest) {\n    super();\n\n    this.element.classList.add('request-cookies-view');\n\n    this.request = request;\n    this.showFilteredOutCookiesSetting = Common.Settings.Settings.instance().createSetting(\n        'show-filtered-out-request-cookies', /* defaultValue */ false);\n\n    this.emptyWidget = new UI.EmptyWidget.EmptyWidget(i18nString(UIStrings.thisRequestHasNoCookies));\n    this.emptyWidget.show(this.element);\n\n    this.requestCookiesTitle = this.element.createChild('div');\n    const titleText = this.requestCookiesTitle.createChild('span', 'request-cookies-title');\n    titleText.textContent = i18nString(UIStrings.requestCookies);\n    UI.Tooltip.Tooltip.install(titleText, i18nString(UIStrings.cookiesThatWereSentToTheServerIn));\n\n    const requestCookiesCheckbox =\n        (UI.SettingsUI.createSettingCheckbox(\n             i18nString(UIStrings.showFilteredOutRequestCookies), this.showFilteredOutCookiesSetting, true) as\n         UI.UIUtils.CheckboxLabel);\n    requestCookiesCheckbox.checkboxElement.addEventListener('change', () => {\n      this.refreshRequestCookiesView();\n    });\n    this.requestCookiesTitle.appendChild(requestCookiesCheckbox);\n\n    this.requestCookiesEmpty = this.element.createChild('div', 'cookies-panel-item');\n    this.requestCookiesEmpty.textContent = i18nString(UIStrings.noRequestCookiesWereSent);\n\n    this.requestCookiesTable = new CookieTable.CookiesTable.CookiesTable(/* renderInline */ true);\n    this.requestCookiesTable.contentElement.classList.add('cookie-table', 'cookies-panel-item');\n    this.requestCookiesTable.show(this.element);\n\n    this.responseCookiesTitle = this.element.createChild('div', 'request-cookies-title');\n    this.responseCookiesTitle.textContent = i18nString(UIStrings.responseCookies);\n    this.responseCookiesTitle.title = i18nString(UIStrings.cookiesThatWereReceivedFromThe);\n\n    this.responseCookiesTable = new CookieTable.CookiesTable.CookiesTable(/* renderInline */ true);\n    this.responseCookiesTable.contentElement.classList.add('cookie-table', 'cookies-panel-item');\n    this.responseCookiesTable.show(this.element);\n\n    this.malformedResponseCookiesTitle = this.element.createChild('div', 'request-cookies-title');\n    this.malformedResponseCookiesTitle.textContent = i18nString(UIStrings.malformedResponseCookies);\n    UI.Tooltip.Tooltip.install(\n        this.malformedResponseCookiesTitle, i18nString(UIStrings.cookiesThatWereReceivedFromTheServer));\n\n    this.malformedResponseCookiesList = this.element.createChild('div');\n  }\n\n  private getRequestCookies(): {\n    requestCookies: Array<SDK.Cookie.Cookie>,\n    requestCookieToBlockedReasons: Map<SDK.Cookie.Cookie, SDK.CookieModel.BlockedReason[]>,\n  } {\n    const requestCookieToBlockedReasons = new Map<SDK.Cookie.Cookie, SDK.CookieModel.BlockedReason[]>();\n    const requestCookies = this.request.includedRequestCookies().slice();\n\n    if (this.showFilteredOutCookiesSetting.get()) {\n      for (const blockedCookie of this.request.blockedRequestCookies()) {\n        requestCookieToBlockedReasons.set(blockedCookie.cookie, blockedCookie.blockedReasons.map(blockedReason => {\n          return {\n            attribute: SDK.NetworkRequest.cookieBlockedReasonToAttribute(blockedReason),\n            uiString: SDK.NetworkRequest.cookieBlockedReasonToUiString(blockedReason),\n          };\n        }));\n        requestCookies.push(blockedCookie.cookie);\n      }\n    }\n\n    return {requestCookies, requestCookieToBlockedReasons};\n  }\n\n  private getResponseCookies(): {\n    responseCookies: Array<SDK.Cookie.Cookie>,\n    responseCookieToBlockedReasons: Map<SDK.Cookie.Cookie, Array<SDK.CookieModel.BlockedReason>>,\n    malformedResponseCookies: Array<SDK.NetworkRequest.BlockedSetCookieWithReason>,\n  } {\n    let responseCookies: SDK.Cookie.Cookie[] = [];\n    const responseCookieToBlockedReasons = new Map<SDK.Cookie.Cookie, SDK.CookieModel.BlockedReason[]>();\n    const malformedResponseCookies: SDK.NetworkRequest.BlockedSetCookieWithReason[] = [];\n\n    if (this.request.responseCookies.length) {\n      const blockedCookieLines: (string|null)[] =\n          this.request.blockedResponseCookies().map(blockedCookie => blockedCookie.cookieLine);\n      responseCookies = this.request.responseCookies.filter(cookie => {\n        // remove the regular cookies that would overlap with blocked cookies\n        const index = blockedCookieLines.indexOf(cookie.getCookieLine());\n        if (index !== -1) {\n          blockedCookieLines[index] = null;\n          return false;\n        }\n        return true;\n      });\n\n      for (const blockedCookie of this.request.blockedResponseCookies()) {\n        const parsedCookies = SDK.CookieParser.CookieParser.parseSetCookie(blockedCookie.cookieLine);\n        if ((parsedCookies && !parsedCookies.length) ||\n            blockedCookie.blockedReasons.includes(Protocol.Network.SetCookieBlockedReason.SyntaxError) ||\n            blockedCookie.blockedReasons.includes(\n                Protocol.Network.SetCookieBlockedReason.NameValuePairExceedsMaxSize)) {\n          malformedResponseCookies.push(blockedCookie);\n          continue;\n        }\n\n        let cookie: SDK.Cookie.Cookie|(SDK.Cookie.Cookie | null) = blockedCookie.cookie;\n        if (!cookie && parsedCookies) {\n          cookie = parsedCookies[0];\n        }\n        if (cookie) {\n          responseCookieToBlockedReasons.set(cookie, blockedCookie.blockedReasons.map(blockedReason => {\n            return {\n              attribute: SDK.NetworkRequest.setCookieBlockedReasonToAttribute(blockedReason),\n              uiString: SDK.NetworkRequest.setCookieBlockedReasonToUiString(blockedReason),\n            };\n          }));\n          responseCookies.push(cookie);\n        }\n      }\n    }\n\n    return {responseCookies, responseCookieToBlockedReasons, malformedResponseCookies};\n  }\n\n  private refreshRequestCookiesView(): void {\n    if (!this.isShowing()) {\n      return;\n    }\n\n    const gotCookies = this.request.hasRequestCookies() || this.request.responseCookies.length;\n    if (gotCookies) {\n      this.emptyWidget.hideWidget();\n    } else {\n      this.emptyWidget.showWidget();\n    }\n\n    const {requestCookies, requestCookieToBlockedReasons} = this.getRequestCookies();\n    const {responseCookies, responseCookieToBlockedReasons, malformedResponseCookies} = this.getResponseCookies();\n\n    if (requestCookies.length) {\n      this.requestCookiesTitle.classList.remove('hidden');\n      this.requestCookiesEmpty.classList.add('hidden');\n      this.requestCookiesTable.showWidget();\n      this.requestCookiesTable.setCookies(requestCookies, requestCookieToBlockedReasons);\n\n    } else if (this.request.blockedRequestCookies().length) {\n      this.requestCookiesTitle.classList.remove('hidden');\n      this.requestCookiesEmpty.classList.remove('hidden');\n      this.requestCookiesTable.hideWidget();\n\n    } else {\n      this.requestCookiesTitle.classList.add('hidden');\n      this.requestCookiesEmpty.classList.add('hidden');\n      this.requestCookiesTable.hideWidget();\n    }\n\n    if (responseCookies.length) {\n      this.responseCookiesTitle.classList.remove('hidden');\n      this.responseCookiesTable.showWidget();\n      this.responseCookiesTable.setCookies(responseCookies, responseCookieToBlockedReasons);\n    } else {\n      this.responseCookiesTitle.classList.add('hidden');\n      this.responseCookiesTable.hideWidget();\n    }\n\n    if (malformedResponseCookies.length) {\n      this.malformedResponseCookiesTitle.classList.remove('hidden');\n      this.malformedResponseCookiesList.classList.remove('hidden');\n\n      this.malformedResponseCookiesList.removeChildren();\n      for (const malformedCookie of malformedResponseCookies) {\n        const listItem = this.malformedResponseCookiesList.createChild('span', 'cookie-line source-code');\n        const icon = UI.Icon.Icon.create('smallicon-error', 'cookie-warning-icon');\n        listItem.appendChild(icon);\n        UI.UIUtils.createTextChild(listItem, malformedCookie.cookieLine);\n\n        if (malformedCookie.blockedReasons.includes(\n                Protocol.Network.SetCookieBlockedReason.NameValuePairExceedsMaxSize)) {\n          listItem.title = SDK.NetworkRequest.setCookieBlockedReasonToUiString(\n              Protocol.Network.SetCookieBlockedReason.NameValuePairExceedsMaxSize);\n        } else {\n          listItem.title =\n              SDK.NetworkRequest.setCookieBlockedReasonToUiString(Protocol.Network.SetCookieBlockedReason.SyntaxError);\n        }\n      }\n    } else {\n      this.malformedResponseCookiesTitle.classList.add('hidden');\n      this.malformedResponseCookiesList.classList.add('hidden');\n    }\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([requestCookiesViewStyles]);\n    this.request.addEventListener(\n        SDK.NetworkRequest.Events.RequestHeadersChanged, this.refreshRequestCookiesView, this);\n    this.request.addEventListener(\n        SDK.NetworkRequest.Events.ResponseHeadersChanged, this.refreshRequestCookiesView, this);\n\n    this.refreshRequestCookiesView();\n  }\n\n  willHide(): void {\n    this.request.removeEventListener(\n        SDK.NetworkRequest.Events.RequestHeadersChanged, this.refreshRequestCookiesView, this);\n    this.request.removeEventListener(\n        SDK.NetworkRequest.Events.ResponseHeadersChanged, this.refreshRequestCookiesView, this);\n  }\n}\n"],
  "mappings": "AA8BA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,MAAM,YAAY;AAAA,EAIhB,yBAAyB;AAAA,EAKzB,gBAAgB;AAAA,EAIhB,kCAAkC;AAAA,EAIlC,+BAA+B;AAAA,EAI/B,0BAA0B;AAAA,EAI1B,iBAAiB;AAAA,EAIjB,gCACI;AAAA,EAIJ,0BAA0B;AAAA,EAK1B,sCACI;AAAA;AAEN,MAAM,OAAO,KAAK,KAAK,kBAAkB,wCAAwC;AACjF,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAEzD,wCAAiC,GAAG,OAAO,OAAO;AAAA,EAC/C;AAAA,EACS;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEjB,YAAY,SAA4C;AACtD;AAEA,SAAK,QAAQ,UAAU,IAAI;AAE3B,SAAK,UAAU;AACf,SAAK,gCAAgC,OAAO,SAAS,SAAS,WAAW,cACrE,qCAAwD;AAE5D,SAAK,cAAc,IAAI,GAAG,YAAY,YAAY,WAAW,UAAU;AACvE,SAAK,YAAY,KAAK,KAAK;AAE3B,SAAK,sBAAsB,KAAK,QAAQ,YAAY;AACpD,UAAM,YAAY,KAAK,oBAAoB,YAAY,QAAQ;AAC/D,cAAU,cAAc,WAAW,UAAU;AAC7C,OAAG,QAAQ,QAAQ,QAAQ,WAAW,WAAW,UAAU;AAE3D,UAAM,yBACD,GAAG,WAAW,sBACV,WAAW,UAAU,gCAAgC,KAAK,+BAA+B;AAElG,2BAAuB,gBAAgB,iBAAiB,UAAU,MAAM;AACtE,WAAK;AAAA;AAEP,SAAK,oBAAoB,YAAY;AAErC,SAAK,sBAAsB,KAAK,QAAQ,YAAY,OAAO;AAC3D,SAAK,oBAAoB,cAAc,WAAW,UAAU;AAE5D,SAAK,sBAAsB,IAAI,YAAY,aAAa,aAAgC;AACxF,SAAK,oBAAoB,eAAe,UAAU,IAAI,gBAAgB;AACtE,SAAK,oBAAoB,KAAK,KAAK;AAEnC,SAAK,uBAAuB,KAAK,QAAQ,YAAY,OAAO;AAC5D,SAAK,qBAAqB,cAAc,WAAW,UAAU;AAC7D,SAAK,qBAAqB,QAAQ,WAAW,UAAU;AAEvD,SAAK,uBAAuB,IAAI,YAAY,aAAa,aAAgC;AACzF,SAAK,qBAAqB,eAAe,UAAU,IAAI,gBAAgB;AACvE,SAAK,qBAAqB,KAAK,KAAK;AAEpC,SAAK,gCAAgC,KAAK,QAAQ,YAAY,OAAO;AACrE,SAAK,8BAA8B,cAAc,WAAW,UAAU;AACtE,OAAG,QAAQ,QAAQ,QACf,KAAK,+BAA+B,WAAW,UAAU;AAE7D,SAAK,+BAA+B,KAAK,QAAQ,YAAY;AAAA;AAAA,EAGvD,oBAGN;AACA,UAAM,gCAAgC,oBAAI;AAC1C,UAAM,iBAAiB,KAAK,QAAQ,yBAAyB;AAE7D,QAAI,KAAK,8BAA8B,OAAO;AAC5C,iBAAW,iBAAiB,KAAK,QAAQ,yBAAyB;AAChE,sCAA8B,IAAI,cAAc,QAAQ,cAAc,eAAe,IAAI,mBAAiB;AACxG,iBAAO;AAAA,YACL,WAAW,IAAI,eAAe,+BAA+B;AAAA,YAC7D,UAAU,IAAI,eAAe,8BAA8B;AAAA;AAAA;AAG/D,uBAAe,KAAK,cAAc;AAAA;AAAA;AAItC,WAAO,EAAC,gBAAgB;AAAA;AAAA,EAGlB,qBAIN;AACA,QAAI,kBAAuC;AAC3C,UAAM,iCAAiC,oBAAI;AAC3C,UAAM,2BAA4E;AAElF,QAAI,KAAK,QAAQ,gBAAgB,QAAQ;AACvC,YAAM,qBACF,KAAK,QAAQ,yBAAyB,IAAI,mBAAiB,cAAc;AAC7E,wBAAkB,KAAK,QAAQ,gBAAgB,OAAO,YAAU;AAE9D,cAAM,QAAQ,mBAAmB,QAAQ,OAAO;AAChD,YAAI,UAAU,IAAI;AAChB,6BAAmB,SAAS;AAC5B,iBAAO;AAAA;AAET,eAAO;AAAA;AAGT,iBAAW,iBAAiB,KAAK,QAAQ,0BAA0B;AACjE,cAAM,gBAAgB,IAAI,aAAa,aAAa,eAAe,cAAc;AACjF,YAAK,iBAAiB,CAAC,cAAc,UACjC,cAAc,eAAe,SAAS,SAAS,QAAQ,uBAAuB,gBAC9E,cAAc,eAAe,SACzB,SAAS,QAAQ,uBAAuB,8BAA8B;AAC5E,mCAAyB,KAAK;AAC9B;AAAA;AAGF,YAAI,SAAuD,cAAc;AACzE,YAAI,CAAC,UAAU,eAAe;AAC5B,mBAAS,cAAc;AAAA;AAEzB,YAAI,QAAQ;AACV,yCAA+B,IAAI,QAAQ,cAAc,eAAe,IAAI,mBAAiB;AAC3F,mBAAO;AAAA,cACL,WAAW,IAAI,eAAe,kCAAkC;AAAA,cAChE,UAAU,IAAI,eAAe,iCAAiC;AAAA;AAAA;AAGlE,0BAAgB,KAAK;AAAA;AAAA;AAAA;AAK3B,WAAO,EAAC,iBAAiB,gCAAgC;AAAA;AAAA,EAGnD,4BAAkC;AACxC,QAAI,CAAC,KAAK,aAAa;AACrB;AAAA;AAGF,UAAM,aAAa,KAAK,QAAQ,uBAAuB,KAAK,QAAQ,gBAAgB;AACpF,QAAI,YAAY;AACd,WAAK,YAAY;AAAA,WACZ;AACL,WAAK,YAAY;AAAA;AAGnB,UAAM,EAAC,gBAAgB,kCAAiC,KAAK;AAC7D,UAAM,EAAC,iBAAiB,gCAAgC,6BAA4B,KAAK;AAEzF,QAAI,eAAe,QAAQ;AACzB,WAAK,oBAAoB,UAAU,OAAO;AAC1C,WAAK,oBAAoB,UAAU,IAAI;AACvC,WAAK,oBAAoB;AACzB,WAAK,oBAAoB,WAAW,gBAAgB;AAAA,eAE3C,KAAK,QAAQ,wBAAwB,QAAQ;AACtD,WAAK,oBAAoB,UAAU,OAAO;AAC1C,WAAK,oBAAoB,UAAU,OAAO;AAC1C,WAAK,oBAAoB;AAAA,WAEpB;AACL,WAAK,oBAAoB,UAAU,IAAI;AACvC,WAAK,oBAAoB,UAAU,IAAI;AACvC,WAAK,oBAAoB;AAAA;AAG3B,QAAI,gBAAgB,QAAQ;AAC1B,WAAK,qBAAqB,UAAU,OAAO;AAC3C,WAAK,qBAAqB;AAC1B,WAAK,qBAAqB,WAAW,iBAAiB;AAAA,WACjD;AACL,WAAK,qBAAqB,UAAU,IAAI;AACxC,WAAK,qBAAqB;AAAA;AAG5B,QAAI,yBAAyB,QAAQ;AACnC,WAAK,8BAA8B,UAAU,OAAO;AACpD,WAAK,6BAA6B,UAAU,OAAO;AAEnD,WAAK,6BAA6B;AAClC,iBAAW,mBAAmB,0BAA0B;AACtD,cAAM,WAAW,KAAK,6BAA6B,YAAY,QAAQ;AACvE,cAAM,OAAO,GAAG,KAAK,KAAK,OAAO,mBAAmB;AACpD,iBAAS,YAAY;AACrB,WAAG,QAAQ,gBAAgB,UAAU,gBAAgB;AAErD,YAAI,gBAAgB,eAAe,SAC3B,SAAS,QAAQ,uBAAuB,8BAA8B;AAC5E,mBAAS,QAAQ,IAAI,eAAe,iCAChC,SAAS,QAAQ,uBAAuB;AAAA,eACvC;AACL,mBAAS,QACL,IAAI,eAAe,iCAAiC,SAAS,QAAQ,uBAAuB;AAAA;AAAA;AAAA,WAG/F;AACL,WAAK,8BAA8B,UAAU,IAAI;AACjD,WAAK,6BAA6B,UAAU,IAAI;AAAA;AAAA;AAAA,EAIpD,WAAiB;AACf,UAAM;AACN,SAAK,iBAAiB,CAAC;AACvB,SAAK,QAAQ,iBACT,IAAI,eAAe,OAAO,uBAAuB,KAAK,2BAA2B;AACrF,SAAK,QAAQ,iBACT,IAAI,eAAe,OAAO,wBAAwB,KAAK,2BAA2B;AAEtF,SAAK;AAAA;AAAA,EAGP,WAAiB;AACf,SAAK,QAAQ,oBACT,IAAI,eAAe,OAAO,uBAAuB,KAAK,2BAA2B;AACrF,SAAK,QAAQ,oBACT,IAAI,eAAe,OAAO,wBAAwB,KAAK,2BAA2B;AAAA;AAAA;",
  "names": []
}
