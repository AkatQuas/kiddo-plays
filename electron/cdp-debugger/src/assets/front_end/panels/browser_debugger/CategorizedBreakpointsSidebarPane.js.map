{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/browser_debugger/CategorizedBreakpointsSidebarPane.ts"],
  "sourcesContent": ["// Copyright (c) 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport categorizedBreakpointsSidebarPaneStyles from './categorizedBreakpointsSidebarPane.css.js';\n\nimport type * as Protocol from '../../generated/protocol.js';\n\nconst UIStrings = {\n  /**\n  *@description Screen reader description of a hit breakpoint in the Sources panel\n  */\n  breakpointHit: 'breakpoint hit',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/browser_debugger/CategorizedBreakpointsSidebarPane.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport abstract class CategorizedBreakpointsSidebarPane extends UI.Widget.VBox {\n  readonly #categoriesTreeOutline: UI.TreeOutline.TreeOutlineInShadow;\n  readonly #viewId: string;\n  readonly #detailsPausedReason: Protocol.Debugger.PausedEventReason;\n  readonly #categories: Map<string, Item>;\n  readonly #breakpoints: Map<SDK.CategorizedBreakpoint.CategorizedBreakpoint, Item>;\n  #highlightedElement?: HTMLLIElement;\n  constructor(\n      categories: string[], breakpoints: SDK.CategorizedBreakpoint.CategorizedBreakpoint[], viewId: string,\n      detailsPausedReason: Protocol.Debugger.PausedEventReason) {\n    super(true);\n    this.#categoriesTreeOutline = new UI.TreeOutline.TreeOutlineInShadow();\n\n    this.#categoriesTreeOutline.setShowSelectionOnKeyboardFocus(/* show */ true);\n    this.contentElement.appendChild(this.#categoriesTreeOutline.element);\n    this.#viewId = viewId;\n    this.#detailsPausedReason = detailsPausedReason;\n\n    this.#categories = new Map();\n    for (const category of categories) {\n      if (!this.#categories.has(category)) {\n        this.createCategory(category);\n      }\n    }\n    if (categories.length > 0) {\n      const firstCategory = this.#categories.get(categories[0]);\n      if (firstCategory) {\n        firstCategory.element.select();\n      }\n    }\n\n    this.#breakpoints = new Map();\n    for (const breakpoint of breakpoints) {\n      this.createBreakpoint(breakpoint);\n    }\n\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.DebuggerModel.DebuggerModel, SDK.DebuggerModel.Events.DebuggerPaused, this.update, this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.DebuggerModel.DebuggerModel, SDK.DebuggerModel.Events.DebuggerResumed, this.update, this);\n    UI.Context.Context.instance().addFlavorChangeListener(SDK.Target.Target, this.update, this);\n  }\n\n  get categories(): Map<string, Item> {\n    return this.#categories;\n  }\n\n  get breakpoints(): Map<SDK.CategorizedBreakpoint.CategorizedBreakpoint, Item> {\n    return this.#breakpoints;\n  }\n\n  focus(): void {\n    this.#categoriesTreeOutline.forceSelect();\n  }\n\n  private createCategory(name: string): void {\n    const labelNode = UI.UIUtils.CheckboxLabel.create(name);\n    labelNode.checkboxElement.addEventListener('click', this.categoryCheckboxClicked.bind(this, name), true);\n    labelNode.checkboxElement.tabIndex = -1;\n\n    const treeElement = new UI.TreeOutline.TreeElement(labelNode);\n    treeElement.listItemElement.addEventListener('keydown', event => {\n      if (event.key === ' ') {\n        const category = this.#categories.get(name);\n        if (category) {\n          category.checkbox.click();\n        }\n        event.consume(true);\n      }\n    });\n    labelNode.checkboxElement.addEventListener('focus', () => treeElement.listItemElement.focus());\n    UI.ARIAUtils.setChecked(treeElement.listItemElement, false);\n    this.#categoriesTreeOutline.appendChild(treeElement);\n\n    this.#categories.set(name, {element: treeElement, checkbox: labelNode.checkboxElement});\n  }\n\n  protected createBreakpoint(breakpoint: SDK.CategorizedBreakpoint.CategorizedBreakpoint): void {\n    const labelNode = UI.UIUtils.CheckboxLabel.create(breakpoint.title());\n    labelNode.classList.add('source-code');\n    labelNode.checkboxElement.addEventListener('click', this.breakpointCheckboxClicked.bind(this, breakpoint), true);\n    labelNode.checkboxElement.tabIndex = -1;\n\n    const treeElement = new UI.TreeOutline.TreeElement(labelNode);\n    treeElement.listItemElement.addEventListener('keydown', event => {\n      if (event.key === ' ') {\n        const breakpointToClick = this.#breakpoints.get(breakpoint);\n        if (breakpointToClick) {\n          breakpointToClick.checkbox.click();\n        }\n        event.consume(true);\n      }\n    });\n    labelNode.checkboxElement.addEventListener('focus', () => treeElement.listItemElement.focus());\n    UI.ARIAUtils.setChecked(treeElement.listItemElement, false);\n    treeElement.listItemElement.createChild('div', 'breakpoint-hit-marker');\n    const category = this.#categories.get(breakpoint.category());\n    if (category) {\n      category.element.appendChild(treeElement);\n    }\n    // Better to return that to produce a side-effect\n    this.#breakpoints.set(breakpoint, {element: treeElement, checkbox: labelNode.checkboxElement});\n  }\n\n  protected getBreakpointFromPausedDetails(_details: SDK.DebuggerModel.DebuggerPausedDetails):\n      SDK.CategorizedBreakpoint.CategorizedBreakpoint|null {\n    return null;\n  }\n\n  private update(): void {\n    const target = UI.Context.Context.instance().flavor(SDK.Target.Target);\n    const debuggerModel = target ? target.model(SDK.DebuggerModel.DebuggerModel) : null;\n    const details = debuggerModel ? debuggerModel.debuggerPausedDetails() : null;\n\n    if (!details || details.reason !== this.#detailsPausedReason || !details.auxData) {\n      if (this.#highlightedElement) {\n        UI.ARIAUtils.setDescription(this.#highlightedElement, '');\n        this.#highlightedElement.classList.remove('breakpoint-hit');\n        this.#highlightedElement = undefined;\n      }\n      return;\n    }\n    const breakpoint = this.getBreakpointFromPausedDetails(details);\n    if (!breakpoint) {\n      return;\n    }\n\n    void UI.ViewManager.ViewManager.instance().showView(this.#viewId);\n    const category = this.#categories.get(breakpoint.category());\n    if (category) {\n      category.element.expand();\n    }\n    const matchingBreakpoint = this.#breakpoints.get(breakpoint);\n    if (matchingBreakpoint) {\n      this.#highlightedElement = matchingBreakpoint.element.listItemElement;\n      UI.ARIAUtils.setDescription(this.#highlightedElement, i18nString(UIStrings.breakpointHit));\n      this.#highlightedElement.classList.add('breakpoint-hit');\n    }\n  }\n\n  // Probably can be kept although eventListener does not call this._breakpointCheckboxClicke\n  private categoryCheckboxClicked(category: string): void {\n    const item = this.#categories.get(category);\n    if (!item) {\n      return;\n    }\n\n    const enabled = item.checkbox.checked;\n    UI.ARIAUtils.setChecked(item.element.listItemElement, enabled);\n\n    for (const breakpoint of this.#breakpoints.keys()) {\n      if (breakpoint.category() === category) {\n        const matchingBreakpoint = this.#breakpoints.get(breakpoint);\n        if (matchingBreakpoint) {\n          matchingBreakpoint.checkbox.checked = enabled;\n          this.toggleBreakpoint(breakpoint, enabled);\n        }\n      }\n    }\n  }\n\n  protected toggleBreakpoint(breakpoint: SDK.CategorizedBreakpoint.CategorizedBreakpoint, enabled: boolean): void {\n    breakpoint.setEnabled(enabled);\n  }\n\n  private breakpointCheckboxClicked(breakpoint: SDK.CategorizedBreakpoint.CategorizedBreakpoint): void {\n    const item = this.#breakpoints.get(breakpoint);\n    if (!item) {\n      return;\n    }\n\n    this.toggleBreakpoint(breakpoint, item.checkbox.checked);\n    UI.ARIAUtils.setChecked(item.element.listItemElement, item.checkbox.checked);\n\n    // Put the rest in a separate function\n    let hasEnabled = false;\n    let hasDisabled = false;\n    for (const other of this.#breakpoints.keys()) {\n      if (other.category() === breakpoint.category()) {\n        if (other.enabled()) {\n          hasEnabled = true;\n        } else {\n          hasDisabled = true;\n        }\n      }\n    }\n\n    const category = this.#categories.get(breakpoint.category());\n    if (!category) {\n      return;\n    }\n    category.checkbox.checked = hasEnabled;\n    category.checkbox.indeterminate = hasEnabled && hasDisabled;\n    if (category.checkbox.indeterminate) {\n      UI.ARIAUtils.setCheckboxAsIndeterminate(category.element.listItemElement);\n    } else {\n      UI.ARIAUtils.setChecked(category.element.listItemElement, hasEnabled);\n    }\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.#categoriesTreeOutline.registerCSSFiles([categorizedBreakpointsSidebarPaneStyles]);\n  }\n}\nexport interface Item {\n  element: UI.TreeOutline.TreeElement;\n  checkbox: HTMLInputElement;\n}\n"],
  "mappings": "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",
  "names": []
}
