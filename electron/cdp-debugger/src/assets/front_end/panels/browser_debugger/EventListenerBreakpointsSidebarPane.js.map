{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/browser_debugger/EventListenerBreakpointsSidebarPane.ts"],
  "sourcesContent": ["// Copyright (c) 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport {CategorizedBreakpointsSidebarPane} from './CategorizedBreakpointsSidebarPane.js';\n\nlet eventListenerBreakpointsSidebarPaneInstance: EventListenerBreakpointsSidebarPane;\n\nexport class EventListenerBreakpointsSidebarPane extends CategorizedBreakpointsSidebarPane {\n  private constructor() {\n    let breakpoints: SDK.CategorizedBreakpoint.CategorizedBreakpoint[] =\n        SDK.DOMDebuggerModel.DOMDebuggerManager.instance().eventListenerBreakpoints();\n    const nonDomBreakpoints = SDK.EventBreakpointsModel.EventBreakpointsManager.instance().eventListenerBreakpoints();\n    breakpoints = breakpoints.concat(nonDomBreakpoints);\n\n    const categories = breakpoints.map(breakpoint => breakpoint.category());\n    categories.sort();\n    super(\n        categories, breakpoints, 'sources.eventListenerBreakpoints', Protocol.Debugger.PausedEventReason.EventListener);\n  }\n\n  static instance(): EventListenerBreakpointsSidebarPane {\n    if (!eventListenerBreakpointsSidebarPaneInstance) {\n      eventListenerBreakpointsSidebarPaneInstance = new EventListenerBreakpointsSidebarPane();\n    }\n    return eventListenerBreakpointsSidebarPaneInstance;\n  }\n\n  getBreakpointFromPausedDetails(details: SDK.DebuggerModel.DebuggerPausedDetails):\n      SDK.CategorizedBreakpoint.CategorizedBreakpoint|null {\n    const auxData = details.auxData as {\n      eventName: string,\n      targetName: string,\n    };\n    const domBreakpoint = SDK.DOMDebuggerModel.DOMDebuggerManager.instance().resolveEventListenerBreakpoint(auxData);\n    if (domBreakpoint) {\n      return domBreakpoint;\n    }\n    return SDK.EventBreakpointsModel.EventBreakpointsManager.instance().resolveEventListenerBreakpoint(auxData);\n  }\n}\n"],
  "mappings": "AAIA;AACA;AAEA;AAEA,IAAI;AAEG,yDAAkD,kCAAkC;AAAA,EACjF,cAAc;AACpB,QAAI,cACA,IAAI,iBAAiB,mBAAmB,WAAW;AACvD,UAAM,oBAAoB,IAAI,sBAAsB,wBAAwB,WAAW;AACvF,kBAAc,YAAY,OAAO;AAEjC,UAAM,aAAa,YAAY,IAAI,gBAAc,WAAW;AAC5D,eAAW;AACX,UACI,YAAY,aAAa,oCAAoC,SAAS,SAAS,kBAAkB;AAAA;AAAA,SAGhG,WAAgD;AACrD,QAAI,CAAC,6CAA6C;AAChD,oDAA8C,IAAI;AAAA;AAEpD,WAAO;AAAA;AAAA,EAGT,+BAA+B,SAC0B;AACvD,UAAM,UAAU,QAAQ;AAIxB,UAAM,gBAAgB,IAAI,iBAAiB,mBAAmB,WAAW,+BAA+B;AACxG,QAAI,eAAe;AACjB,aAAO;AAAA;AAET,WAAO,IAAI,sBAAsB,wBAAwB,WAAW,+BAA+B;AAAA;AAAA;",
  "names": []
}
