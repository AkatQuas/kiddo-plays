{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/browser_debugger/XHRBreakpointsSidebarPane.ts"],
  "sourcesContent": ["// Copyright (c) 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport xhrBreakpointsSidebarPaneStyles from './xhrBreakpointsSidebarPane.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Title of the 'XHR/fetch Breakpoints' tool in the bottom sidebar of the Sources tool\n  */\n  xhrfetchBreakpoints: 'XHR/fetch Breakpoints',\n  /**\n  *@description Text to indicate there are no breakpoints\n  */\n  noBreakpoints: 'No breakpoints',\n  /**\n  *@description Label for a button in the Sources panel that opens the input field to create a new XHR/fetch breakpoint.\n  */\n  addXhrfetchBreakpoint: 'Add XHR/fetch breakpoint',\n  /**\n  *@description Text to add a breakpoint\n  */\n  addBreakpoint: 'Add breakpoint',\n  /**\n  *@description Input element container text content in XHRBreakpoints Sidebar Pane of the JavaScript Debugging pane in the Sources panel or the DOM Breakpoints pane in the Elements panel\n  */\n  breakWhenUrlContains: 'Break when URL contains:',\n  /**\n  *@description Accessible label for XHR/fetch breakpoint text input\n  */\n  urlBreakpoint: 'URL Breakpoint',\n  /**\n  *@description Text in XHRBreakpoints Sidebar Pane of the JavaScript Debugging pane in the Sources panel or the DOM Breakpoints pane in the Elements panel\n  *@example {example.com} PH1\n  */\n  urlContainsS: 'URL contains \"{PH1}\"',\n  /**\n  *@description Text in XHRBreakpoints Sidebar Pane of the JavaScript Debugging pane in the Sources panel or the DOM Breakpoints pane in the Elements panel\n  */\n  anyXhrOrFetch: 'Any XHR or fetch',\n  /**\n  *@description Screen reader description of a hit breakpoint in the Sources panel\n  */\n  breakpointHit: 'breakpoint hit',\n  /**\n  *@description Text to remove all breakpoints\n  */\n  removeAllBreakpoints: 'Remove all breakpoints',\n  /**\n  *@description Text to remove a breakpoint\n  */\n  removeBreakpoint: 'Remove breakpoint',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/browser_debugger/XHRBreakpointsSidebarPane.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst containerToBreakpointEntry = new WeakMap<Element, HTMLElement>();\n\nconst breakpointEntryToCheckbox = new WeakMap<Element, HTMLInputElement>();\n\nlet xhrBreakpointsSidebarPaneInstance: XHRBreakpointsSidebarPane;\n\nexport class XHRBreakpointsSidebarPane extends UI.Widget.VBox implements UI.ContextFlavorListener.ContextFlavorListener,\n                                                                         UI.Toolbar.ItemsProvider,\n                                                                         UI.ListControl.ListDelegate<string> {\n  readonly #breakpoints: UI.ListModel.ListModel<string>;\n  #list: UI.ListControl.ListControl<string>;\n  readonly #emptyElement: HTMLElement;\n  readonly #breakpointElements: Map<string, Element>;\n  readonly #addButton: UI.Toolbar.ToolbarButton;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  #hitBreakpoint?: any;\n\n  private constructor() {\n    super(true);\n\n    this.#breakpoints = new UI.ListModel.ListModel();\n    this.#list = new UI.ListControl.ListControl(this.#breakpoints, this, UI.ListControl.ListMode.NonViewport);\n    this.contentElement.appendChild(this.#list.element);\n    this.#list.element.classList.add('breakpoint-list', 'hidden');\n    UI.ARIAUtils.markAsList(this.#list.element);\n    UI.ARIAUtils.setAccessibleName(this.#list.element, i18nString(UIStrings.xhrfetchBreakpoints));\n    this.#emptyElement = this.contentElement.createChild('div', 'gray-info-message');\n    this.#emptyElement.textContent = i18nString(UIStrings.noBreakpoints);\n\n    this.#breakpointElements = new Map();\n\n    this.#addButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.addXhrfetchBreakpoint), 'largeicon-add');\n    this.#addButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, () => {\n      void this.addButtonClicked();\n    });\n\n    this.#emptyElement.addEventListener('contextmenu', this.emptyElementContextMenu.bind(this), true);\n    this.#emptyElement.tabIndex = -1;\n    this.restoreBreakpoints();\n    this.update();\n  }\n\n  static instance(): XHRBreakpointsSidebarPane {\n    if (!xhrBreakpointsSidebarPaneInstance) {\n      xhrBreakpointsSidebarPaneInstance = new XHRBreakpointsSidebarPane();\n    }\n    return xhrBreakpointsSidebarPaneInstance;\n  }\n\n  toolbarItems(): UI.Toolbar.ToolbarItem[] {\n    return [this.#addButton];\n  }\n\n  private emptyElementContextMenu(event: Event): void {\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    contextMenu.defaultSection().appendItem(i18nString(UIStrings.addBreakpoint), this.addButtonClicked.bind(this));\n    void contextMenu.show();\n  }\n\n  private async addButtonClicked(): Promise<void> {\n    await UI.ViewManager.ViewManager.instance().showView('sources.xhrBreakpoints');\n\n    const inputElementContainer = document.createElement('p');\n    inputElementContainer.classList.add('breakpoint-condition');\n    inputElementContainer.textContent = i18nString(UIStrings.breakWhenUrlContains);\n\n    const inputElement = inputElementContainer.createChild('span', 'breakpoint-condition-input');\n    UI.ARIAUtils.setAccessibleName(inputElement, i18nString(UIStrings.urlBreakpoint));\n    this.addListElement(inputElementContainer, this.#list.element.firstChild as Element | null);\n\n    function finishEditing(this: XHRBreakpointsSidebarPane, accept: boolean, e: Element, text: string): void {\n      this.removeListElement(inputElementContainer);\n      if (accept) {\n        SDK.DOMDebuggerModel.DOMDebuggerManager.instance().addXHRBreakpoint(text, true);\n        this.setBreakpoint(text);\n      }\n      this.update();\n    }\n\n    const config = new UI.InplaceEditor.Config(finishEditing.bind(this, true), finishEditing.bind(this, false));\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    UI.InplaceEditor.InplaceEditor.startEditing(inputElement, config as UI.InplaceEditor.Config<any>);\n  }\n\n  heightForItem(_item: string): number {\n    return 0;\n  }\n\n  isItemSelectable(_item: string): boolean {\n    return true;\n  }\n\n  private setBreakpoint(breakKeyword: string): void {\n    if (this.#breakpoints.indexOf(breakKeyword) !== -1) {\n      this.#list.refreshItem(breakKeyword);\n    } else {\n      this.#breakpoints.insertWithComparator(breakKeyword, (a, b) => {\n        if (a > b) {\n          return 1;\n        }\n        if (a < b) {\n          return -1;\n        }\n        return 0;\n      });\n    }\n    if (!this.#list.selectedItem() || !this.hasFocus()) {\n      this.#list.selectItem(this.#breakpoints.at(0));\n    }\n  }\n\n  createElementForItem(item: string): Element {\n    const listItemElement = document.createElement('div');\n    UI.ARIAUtils.markAsListitem(listItemElement);\n    const element = listItemElement.createChild('div', 'breakpoint-entry') as HTMLElement;\n    containerToBreakpointEntry.set(listItemElement, element);\n    const enabled = SDK.DOMDebuggerModel.DOMDebuggerManager.instance().xhrBreakpoints().get(item) || false;\n    UI.ARIAUtils.markAsCheckbox(element);\n    UI.ARIAUtils.setChecked(element, enabled);\n    element.addEventListener('contextmenu', this.contextMenu.bind(this, item), true);\n\n    const title = item ? i18nString(UIStrings.urlContainsS, {PH1: item}) : i18nString(UIStrings.anyXhrOrFetch);\n    const label = UI.UIUtils.CheckboxLabel.create(title, enabled);\n    UI.ARIAUtils.markAsHidden(label);\n    UI.ARIAUtils.setAccessibleName(element, title);\n    element.appendChild(label);\n    label.checkboxElement.addEventListener('click', this.checkboxClicked.bind(this, item, enabled), false);\n    element.addEventListener('click', event => {\n      if (event.target === element) {\n        this.checkboxClicked(item, enabled);\n      }\n    }, false);\n    breakpointEntryToCheckbox.set(element, label.checkboxElement);\n    label.checkboxElement.tabIndex = -1;\n    element.tabIndex = -1;\n    if (item === this.#list.selectedItem()) {\n      element.tabIndex = 0;\n      this.setDefaultFocusedElement(element);\n    }\n    element.addEventListener('keydown', event => {\n      let handled = false;\n      if (event.key === ' ') {\n        this.checkboxClicked(item, enabled);\n        handled = true;\n      } else if (event.key === 'Enter') {\n        this.labelClicked(item);\n        handled = true;\n      }\n\n      if (handled) {\n        event.consume(true);\n      }\n    });\n\n    if (item === this.#hitBreakpoint) {\n      element.classList.add('breakpoint-hit');\n      UI.ARIAUtils.setDescription(element, i18nString(UIStrings.breakpointHit));\n    }\n\n    label.classList.add('cursor-auto');\n    label.textElement.addEventListener('dblclick', this.labelClicked.bind(this, item), false);\n    this.#breakpointElements.set(item, listItemElement);\n    return listItemElement;\n  }\n\n  selectedItemChanged(from: string|null, to: string|null, fromElement: HTMLElement|null, toElement: HTMLElement|null):\n      void {\n    if (fromElement) {\n      const breakpointEntryElement = containerToBreakpointEntry.get(fromElement);\n      if (!breakpointEntryElement) {\n        throw new Error('Expected breakpoint entry to be found for an element');\n      }\n      breakpointEntryElement.tabIndex = -1;\n    }\n    if (toElement) {\n      const breakpointEntryElement = containerToBreakpointEntry.get(toElement);\n      if (!breakpointEntryElement) {\n        throw new Error('Expected breakpoint entry to be found for an element');\n      }\n      this.setDefaultFocusedElement(breakpointEntryElement);\n      breakpointEntryElement.tabIndex = 0;\n      if (this.hasFocus()) {\n        breakpointEntryElement.focus();\n      }\n    }\n  }\n\n  updateSelectedItemARIA(_fromElement: Element|null, _toElement: Element|null): boolean {\n    return true;\n  }\n\n  private removeBreakpoint(breakKeyword: string): void {\n    const index = this.#breakpoints.indexOf(breakKeyword);\n    if (index >= 0) {\n      this.#breakpoints.remove(index);\n    }\n    this.#breakpointElements.delete(breakKeyword);\n    this.update();\n  }\n\n  private addListElement(element: Element, beforeNode: Node|null): void {\n    this.#list.element.insertBefore(element, beforeNode);\n    this.#emptyElement.classList.add('hidden');\n    this.#list.element.classList.remove('hidden');\n  }\n\n  private removeListElement(element: Element): void {\n    this.#list.element.removeChild(element);\n    if (!this.#list.element.firstElementChild) {\n      this.#emptyElement.classList.remove('hidden');\n      this.#list.element.classList.add('hidden');\n    }\n  }\n\n  private contextMenu(breakKeyword: string, event: Event): void {\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n\n    function removeBreakpoint(this: XHRBreakpointsSidebarPane): void {\n      SDK.DOMDebuggerModel.DOMDebuggerManager.instance().removeXHRBreakpoint(breakKeyword);\n      this.removeBreakpoint(breakKeyword);\n    }\n\n    function removeAllBreakpoints(this: XHRBreakpointsSidebarPane): void {\n      for (const url of this.#breakpointElements.keys()) {\n        SDK.DOMDebuggerModel.DOMDebuggerManager.instance().removeXHRBreakpoint(url);\n        this.removeBreakpoint(url);\n      }\n      this.update();\n    }\n    const removeAllTitle = i18nString(UIStrings.removeAllBreakpoints);\n\n    contextMenu.defaultSection().appendItem(i18nString(UIStrings.addBreakpoint), this.addButtonClicked.bind(this));\n    contextMenu.defaultSection().appendItem(i18nString(UIStrings.removeBreakpoint), removeBreakpoint.bind(this));\n    contextMenu.defaultSection().appendItem(removeAllTitle, removeAllBreakpoints.bind(this));\n    void contextMenu.show();\n  }\n\n  private checkboxClicked(breakKeyword: string, checked: boolean): void {\n    const hadFocus = this.hasFocus();\n    SDK.DOMDebuggerModel.DOMDebuggerManager.instance().toggleXHRBreakpoint(breakKeyword, !checked);\n    this.#list.refreshItem(breakKeyword);\n    this.#list.selectItem(breakKeyword);\n    if (hadFocus) {\n      this.focus();\n    }\n  }\n\n  private labelClicked(breakKeyword: string): void {\n    const element = this.#breakpointElements.get(breakKeyword);\n    const inputElement = document.createElement('span');\n    inputElement.classList.add('breakpoint-condition');\n    inputElement.textContent = breakKeyword;\n    if (element) {\n      this.#list.element.insertBefore(inputElement, element);\n      element.classList.add('hidden');\n    }\n\n    function finishEditing(this: XHRBreakpointsSidebarPane, accept: boolean, e: Element, text: string): void {\n      this.removeListElement(inputElement);\n      if (accept) {\n        SDK.DOMDebuggerModel.DOMDebuggerManager.instance().removeXHRBreakpoint(breakKeyword);\n        this.removeBreakpoint(breakKeyword);\n        let enabled = true;\n        if (element) {\n          const breakpointEntryElement = containerToBreakpointEntry.get(element);\n          const checkboxElement =\n              breakpointEntryElement ? breakpointEntryToCheckbox.get(breakpointEntryElement) : undefined;\n          if (checkboxElement) {\n            enabled = checkboxElement.checked;\n          }\n        }\n        SDK.DOMDebuggerModel.DOMDebuggerManager.instance().addXHRBreakpoint(text, enabled);\n        this.setBreakpoint(text);\n        this.#list.selectItem(text);\n      } else if (element) {\n        element.classList.remove('hidden');\n      }\n      this.focus();\n    }\n\n    const config = new UI.InplaceEditor.Config(finishEditing.bind(this, true), finishEditing.bind(this, false));\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    UI.InplaceEditor.InplaceEditor.startEditing(inputElement, config as UI.InplaceEditor.Config<any>);\n  }\n\n  flavorChanged(_object: Object|null): void {\n    this.update();\n  }\n\n  private update(): void {\n    const isEmpty = this.#breakpoints.length === 0;\n    this.#list.element.classList.toggle('hidden', isEmpty);\n    this.#emptyElement.classList.toggle('hidden', !isEmpty);\n\n    const details = UI.Context.Context.instance().flavor(SDK.DebuggerModel.DebuggerPausedDetails);\n    if (!details || details.reason !== Protocol.Debugger.PausedEventReason.XHR) {\n      if (this.#hitBreakpoint) {\n        const oldHitBreakpoint = this.#hitBreakpoint;\n        this.#hitBreakpoint = undefined;\n        if (this.#breakpoints.indexOf(oldHitBreakpoint) >= 0) {\n          this.#list.refreshItem(oldHitBreakpoint);\n        }\n      }\n      return;\n    }\n    const url = details.auxData && details.auxData['breakpointURL'];\n    this.#hitBreakpoint = url;\n    if (this.#breakpoints.indexOf(url) < 0) {\n      return;\n    }\n    this.#list.refreshItem(url);\n    void UI.ViewManager.ViewManager.instance().showView('sources.xhrBreakpoints');\n  }\n\n  private restoreBreakpoints(): void {\n    const breakpoints = SDK.DOMDebuggerModel.DOMDebuggerManager.instance().xhrBreakpoints();\n    for (const url of breakpoints.keys()) {\n      this.setBreakpoint(url);\n    }\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([xhrBreakpointsSidebarPaneStyles]);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
