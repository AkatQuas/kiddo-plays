{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/browser_debugger/ObjectEventListenersSidebarPane.ts"],
  "sourcesContent": ["// Copyright 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as EventListeners from '../event_listeners/event_listeners.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nconst UIStrings = {\n  /**\n  *@description Label for a button in the sources panel that refreshes the list of global event listeners.\n  */\n  refreshGlobalListeners: 'Refresh global listeners',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/browser_debugger/ObjectEventListenersSidebarPane.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet objectEventListenersSidebarPaneInstance: ObjectEventListenersSidebarPane;\n\nexport class ObjectEventListenersSidebarPane extends UI.Widget.VBox implements UI.Toolbar.ItemsProvider {\n  readonly #refreshButton: UI.Toolbar.ToolbarButton;\n  readonly #eventListenersView: EventListeners.EventListenersView.EventListenersView;\n  #lastRequestedContext?: SDK.RuntimeModel.ExecutionContext;\n  private constructor() {\n    super();\n    this.#refreshButton =\n        new UI.Toolbar.ToolbarButton(i18nString(UIStrings.refreshGlobalListeners), 'largeicon-refresh');\n    this.#refreshButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.refreshClick, this);\n    this.#refreshButton.setEnabled(false);\n\n    this.#eventListenersView = new EventListeners.EventListenersView.EventListenersView(\n        this.update.bind(this), /* enableDefaultTreeFocus */ true);\n    this.#eventListenersView.show(this.element);\n    this.setDefaultFocusedChild(this.#eventListenersView);\n  }\n\n  static instance(): ObjectEventListenersSidebarPane {\n    if (!objectEventListenersSidebarPaneInstance) {\n      objectEventListenersSidebarPaneInstance = new ObjectEventListenersSidebarPane();\n    }\n    return objectEventListenersSidebarPaneInstance;\n  }\n\n  get eventListenersView(): EventListeners.EventListenersView.EventListenersView {\n    return this.#eventListenersView;\n  }\n\n  toolbarItems(): UI.Toolbar.ToolbarItem[] {\n    return [this.#refreshButton];\n  }\n\n  update(): void {\n    if (this.#lastRequestedContext) {\n      this.#lastRequestedContext.runtimeModel.releaseObjectGroup(objectGroupName);\n      this.#lastRequestedContext = undefined;\n    }\n    const executionContext = UI.Context.Context.instance().flavor(SDK.RuntimeModel.ExecutionContext);\n    if (!executionContext) {\n      this.#eventListenersView.reset();\n      this.#eventListenersView.addEmptyHolderIfNeeded();\n      return;\n    }\n    this.#lastRequestedContext = executionContext;\n    void Promise.all([this.windowObjectInContext(executionContext)])\n        .then(this.#eventListenersView.addObjects.bind(this.#eventListenersView));\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    UI.Context.Context.instance().addFlavorChangeListener(SDK.RuntimeModel.ExecutionContext, this.update, this);\n    this.#refreshButton.setEnabled(true);\n    this.update();\n  }\n\n  willHide(): void {\n    super.willHide();\n    UI.Context.Context.instance().removeFlavorChangeListener(SDK.RuntimeModel.ExecutionContext, this.update, this);\n    this.#refreshButton.setEnabled(false);\n  }\n\n  private windowObjectInContext(executionContext: SDK.RuntimeModel.ExecutionContext):\n      Promise<SDK.RemoteObject.RemoteObject|null> {\n    return executionContext\n        .evaluate(\n            {\n              expression: 'self',\n              objectGroup: objectGroupName,\n              includeCommandLineAPI: false,\n              silent: true,\n              returnByValue: false,\n              generatePreview: false,\n              timeout: undefined,\n              throwOnSideEffect: undefined,\n              disableBreaks: undefined,\n              replMode: undefined,\n              allowUnsafeEvalBlockedByCSP: undefined,\n            },\n            /* userGesture */ false,\n            /* awaitPromise */ false)\n        .then(result => {\n          if ('error' in result || result.exceptionDetails) {\n            return null;\n          }\n          return result.object;\n        });\n  }\n\n  private refreshClick(event: Common.EventTarget.EventTargetEvent<Event>): void {\n    event.data.consume();\n    this.update();\n  }\n}\n\nexport const objectGroupName = 'object-event-listeners-sidebar-pane';\n"],
  "mappings": "AAKA;AACA;AACA;AACA;AAEA,MAAM,YAAY;AAAA,EAIhB,wBAAwB;AAAA;AAE1B,MAAM,OAAO,KAAK,KAAK,kBAAkB,8DAA8D;AACvG,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAChE,IAAI;AAEG,qDAA8C,GAAG,OAAO,KAAyC;AAAA;AAAA;AAAA;AAAA,EAI9F,cAAc;AACpB;AACA,0BACI,IAAI,GAAG,QAAQ,cAAc,WAAW,UAAU,yBAAyB;AAC/E,wBAAoB,iBAAiB,GAAG,QAAQ,cAAc,OAAO,OAAO,KAAK,cAAc;AAC/F,wBAAoB,WAAW;AAE/B,+BAA2B,IAAI,eAAe,mBAAmB,mBAC7D,KAAK,OAAO,KAAK,OAAoC;AACzD,6BAAyB,KAAK,KAAK;AACnC,SAAK,uBAAuB;AAAA;AAAA,SAGvB,WAA4C;AACjD,QAAI,CAAC,yCAAyC;AAC5C,gDAA0C,IAAI;AAAA;AAEhD,WAAO;AAAA;AAAA,MAGL,qBAA2E;AAC7E,WAAO;AAAA;AAAA,EAGT,eAAyC;AACvC,WAAO,CAAC;AAAA;AAAA,EAGV,SAAe;AACb,QAAI,4BAA4B;AAC9B,iCAA2B,aAAa,mBAAmB;AAC3D,mCAA6B;AAAA;AAE/B,UAAM,mBAAmB,GAAG,QAAQ,QAAQ,WAAW,OAAO,IAAI,aAAa;AAC/E,QAAI,CAAC,kBAAkB;AACrB,+BAAyB;AACzB,+BAAyB;AACzB;AAAA;AAEF,iCAA6B;AAC7B,SAAK,QAAQ,IAAI,CAAC,KAAK,sBAAsB,oBACxC,KAAK,yBAAyB,WAAW,KAAK;AAAA;AAAA,EAGrD,WAAiB;AACf,UAAM;AACN,OAAG,QAAQ,QAAQ,WAAW,wBAAwB,IAAI,aAAa,kBAAkB,KAAK,QAAQ;AACtG,wBAAoB,WAAW;AAC/B,SAAK;AAAA;AAAA,EAGP,WAAiB;AACf,UAAM;AACN,OAAG,QAAQ,QAAQ,WAAW,2BAA2B,IAAI,aAAa,kBAAkB,KAAK,QAAQ;AACzG,wBAAoB,WAAW;AAAA;AAAA,EAGzB,sBAAsB,kBACkB;AAC9C,WAAO,iBACF,SACG;AAAA,MACE,YAAY;AAAA,MACZ,aAAa;AAAA,MACb,uBAAuB;AAAA,MACvB,QAAQ;AAAA,MACR,eAAe;AAAA,MACf,iBAAiB;AAAA,MACjB,SAAS;AAAA,MACT,mBAAmB;AAAA,MACnB,eAAe;AAAA,MACf,UAAU;AAAA,MACV,6BAA6B;AAAA,OAEb,OACC,OACtB,KAAK,YAAU;AACd,UAAI,WAAW,UAAU,OAAO,kBAAkB;AAChD,eAAO;AAAA;AAET,aAAO,OAAO;AAAA;AAAA;AAAA,EAId,aAAa,OAAyD;AAC5E,UAAM,KAAK;AACX,SAAK;AAAA;AAAA;AAIF,aAAM,kBAAkB;",
  "names": []
}
