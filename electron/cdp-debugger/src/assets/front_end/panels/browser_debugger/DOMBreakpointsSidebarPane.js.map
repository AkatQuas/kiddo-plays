{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/browser_debugger/DOMBreakpointsSidebarPane.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Sources from '../sources/sources.js';\n\nimport domBreakpointsSidebarPaneStyles from './domBreakpointsSidebarPane.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Text to indicate there are no breakpoints\n  */\n  noBreakpoints: 'No breakpoints',\n  /**\n  *@description Accessibility label for the DOM breakpoints list in the Sources panel\n  */\n  domBreakpointsList: 'DOM Breakpoints list',\n  /**\n  *@description Text with two placeholders separated by a colon\n  *@example {Node removed} PH1\n  *@example {div#id1} PH2\n  */\n  sS: '{PH1}: {PH2}',\n  /**\n  *@description Text with three placeholders separated by a colon and a comma\n  *@example {Node removed} PH1\n  *@example {div#id1} PH2\n  *@example {checked} PH3\n  */\n  sSS: '{PH1}: {PH2}, {PH3}',\n  /**\n  *@description Text exposed to screen readers on checked items.\n  */\n  checked: 'checked',\n  /**\n  *@description Accessible text exposed to screen readers when the screen reader encounters an unchecked checkbox.\n  */\n  unchecked: 'unchecked',\n  /**\n  *@description Accessibility label for hit breakpoints in the Sources panel.\n  *@example {checked} PH1\n  */\n  sBreakpointHit: '{PH1} breakpoint hit',\n  /**\n  *@description Screen reader description of a hit breakpoint in the Sources panel\n  */\n  breakpointHit: 'breakpoint hit',\n  /**\n  *@description A context menu item in the DOM Breakpoints sidebar that reveals the node on which the current breakpoint is set.\n  */\n  revealDomNodeInElementsPanel: 'Reveal DOM node in Elements panel',\n  /**\n  *@description Text to remove a breakpoint\n  */\n  removeBreakpoint: 'Remove breakpoint',\n  /**\n  *@description A context menu item in the DOMBreakpoints Sidebar Pane of the JavaScript Debugging pane in the Sources panel or the DOM Breakpoints pane in the Elements panel\n  */\n  removeAllDomBreakpoints: 'Remove all DOM breakpoints',\n  /**\n  *@description Text in DOMBreakpoints Sidebar Pane of the JavaScript Debugging pane in the Sources panel or the DOM Breakpoints pane in the Elements panel\n  */\n  subtreeModified: 'Subtree modified',\n  /**\n  *@description Text in DOMBreakpoints Sidebar Pane of the JavaScript Debugging pane in the Sources panel or the DOM Breakpoints pane in the Elements panel\n  */\n  attributeModified: 'Attribute modified',\n  /**\n  *@description Text in DOMBreakpoints Sidebar Pane of the JavaScript Debugging pane in the Sources panel or the DOM Breakpoints pane in the Elements panel\n  */\n  nodeRemoved: 'Node removed',\n  /**\n  *@description Entry in context menu of the elements pane, allowing developers to select a DOM\n  * breakpoint for the element that they have right-clicked on. Short for the action 'set a\n  * breakpoint on this DOM Element'. A breakpoint pauses the website when the code reaches a\n  * specified line, or when a specific action happen (in this case, when the DOM Element is\n  * modified).\n  */\n  breakOn: 'Break on',\n  /**\n  *@description Screen reader description for removing a DOM breakpoint.\n  */\n  breakpointRemoved: 'Breakpoint removed',\n  /**\n  *@description Screen reader description for setting a DOM breakpoint.\n  */\n  breakpointSet: 'Breakpoint set',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/browser_debugger/DOMBreakpointsSidebarPane.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nlet domBreakpointsSidebarPaneInstance: DOMBreakpointsSidebarPane;\n\nexport class DOMBreakpointsSidebarPane extends UI.Widget.VBox implements\n    UI.ContextFlavorListener.ContextFlavorListener, UI.ListControl.ListDelegate<SDK.DOMDebuggerModel.DOMBreakpoint> {\n  elementToCheckboxes: WeakMap<Element, HTMLInputElement>;\n  readonly #emptyElement: HTMLElement;\n  readonly #breakpoints: UI.ListModel.ListModel<SDK.DOMDebuggerModel.DOMBreakpoint>;\n  #list: UI.ListControl.ListControl<SDK.DOMDebuggerModel.DOMBreakpoint>;\n  #highlightedBreakpoint: SDK.DOMDebuggerModel.DOMBreakpoint|null;\n\n  private constructor() {\n    super(true);\n\n    this.elementToCheckboxes = new WeakMap();\n\n    this.#emptyElement = this.contentElement.createChild('div', 'gray-info-message');\n    this.#emptyElement.textContent = i18nString(UIStrings.noBreakpoints);\n    this.#breakpoints = new UI.ListModel.ListModel();\n    this.#list = new UI.ListControl.ListControl(this.#breakpoints, this, UI.ListControl.ListMode.NonViewport);\n    this.contentElement.appendChild(this.#list.element);\n    this.#list.element.classList.add('breakpoint-list', 'hidden');\n    UI.ARIAUtils.markAsList(this.#list.element);\n    UI.ARIAUtils.setAccessibleName(this.#list.element, i18nString(UIStrings.domBreakpointsList));\n    this.#emptyElement.tabIndex = -1;\n\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.DOMDebuggerModel.DOMDebuggerModel, SDK.DOMDebuggerModel.Events.DOMBreakpointAdded, this.breakpointAdded,\n        this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.DOMDebuggerModel.DOMDebuggerModel, SDK.DOMDebuggerModel.Events.DOMBreakpointToggled, this.breakpointToggled,\n        this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.DOMDebuggerModel.DOMDebuggerModel, SDK.DOMDebuggerModel.Events.DOMBreakpointsRemoved,\n        this.breakpointsRemoved, this);\n\n    for (const domDebuggerModel of SDK.TargetManager.TargetManager.instance().models(\n             SDK.DOMDebuggerModel.DOMDebuggerModel)) {\n      domDebuggerModel.retrieveDOMBreakpoints();\n      for (const breakpoint of domDebuggerModel.domBreakpoints()) {\n        this.addBreakpoint(breakpoint);\n      }\n    }\n\n    this.#highlightedBreakpoint = null;\n    this.update();\n  }\n\n  static instance(): DOMBreakpointsSidebarPane {\n    if (!domBreakpointsSidebarPaneInstance) {\n      domBreakpointsSidebarPaneInstance = new DOMBreakpointsSidebarPane();\n    }\n    return domBreakpointsSidebarPaneInstance;\n  }\n\n  createElementForItem(item: SDK.DOMDebuggerModel.DOMBreakpoint): Element {\n    const element = document.createElement('div');\n    element.classList.add('breakpoint-entry');\n    element.addEventListener('contextmenu', this.contextMenu.bind(this, item), true);\n    UI.ARIAUtils.markAsListitem(element);\n    element.tabIndex = -1;\n\n    const checkboxLabel = UI.UIUtils.CheckboxLabel.create(/* title */ undefined, item.enabled);\n    const checkboxElement = checkboxLabel.checkboxElement;\n    checkboxElement.addEventListener('click', this.checkboxClicked.bind(this, item), false);\n    checkboxElement.tabIndex = -1;\n    this.elementToCheckboxes.set(element, checkboxElement);\n    element.appendChild(checkboxLabel);\n    element.addEventListener('keydown', event => {\n      if (event.key === ' ') {\n        checkboxLabel.checkboxElement.click();\n        event.consume(true);\n      }\n    });\n\n    const labelElement = document.createElement('div');\n    labelElement.classList.add('dom-breakpoint');\n    element.appendChild(labelElement);\n    const description = document.createElement('div');\n    const breakpointTypeLabel = BreakpointTypeLabels.get(item.type);\n    description.textContent = breakpointTypeLabel ? breakpointTypeLabel() : null;\n    const breakpointTypeText = breakpointTypeLabel ? breakpointTypeLabel() : '';\n    UI.ARIAUtils.setAccessibleName(checkboxElement, breakpointTypeText);\n    const checkedStateText = item.enabled ? i18nString(UIStrings.checked) : i18nString(UIStrings.unchecked);\n    const linkifiedNode = document.createElement('monospace');\n    linkifiedNode.style.display = 'block';\n    labelElement.appendChild(linkifiedNode);\n    void Common.Linkifier.Linkifier.linkify(item.node, {preventKeyboardFocus: true, tooltip: undefined})\n        .then(linkified => {\n          linkifiedNode.appendChild(linkified);\n          // Give the checkbox an aria-label as it is required for all form element\n          UI.ARIAUtils.setAccessibleName(\n              checkboxElement, i18nString(UIStrings.sS, {PH1: breakpointTypeText, PH2: linkified.deepTextContent()}));\n          // The parent list element is the one that actually gets focused.\n          // Assign it an aria-label with complete information for the screen reader to read out properly\n          UI.ARIAUtils.setAccessibleName(\n              element,\n              i18nString(\n                  UIStrings.sSS, {PH1: breakpointTypeText, PH2: linkified.deepTextContent(), PH3: checkedStateText}));\n        });\n\n    labelElement.appendChild(description);\n\n    if (item === this.#highlightedBreakpoint) {\n      element.classList.add('breakpoint-hit');\n      UI.ARIAUtils.setDescription(element, i18nString(UIStrings.sBreakpointHit, {PH1: checkedStateText}));\n      UI.ARIAUtils.setDescription(checkboxElement, i18nString(UIStrings.breakpointHit));\n    } else {\n      UI.ARIAUtils.setDescription(element, checkedStateText);\n    }\n\n    this.#emptyElement.classList.add('hidden');\n    this.#list.element.classList.remove('hidden');\n\n    return element;\n  }\n\n  heightForItem(_item: SDK.DOMDebuggerModel.DOMBreakpoint): number {\n    return 0;\n  }\n\n  isItemSelectable(_item: SDK.DOMDebuggerModel.DOMBreakpoint): boolean {\n    return true;\n  }\n\n  updateSelectedItemARIA(_fromElement: Element|null, _toElement: Element|null): boolean {\n    return true;\n  }\n\n  selectedItemChanged(\n      from: SDK.DOMDebuggerModel.DOMBreakpoint|null, to: SDK.DOMDebuggerModel.DOMBreakpoint|null,\n      fromElement: HTMLElement|null, toElement: HTMLElement|null): void {\n    if (fromElement) {\n      fromElement.tabIndex = -1;\n    }\n\n    if (toElement) {\n      this.setDefaultFocusedElement(toElement);\n      toElement.tabIndex = 0;\n      if (this.hasFocus()) {\n        toElement.focus();\n      }\n    }\n  }\n\n  private breakpointAdded(event: Common.EventTarget.EventTargetEvent<SDK.DOMDebuggerModel.DOMBreakpoint>): void {\n    this.addBreakpoint(event.data);\n  }\n\n  private breakpointToggled(event: Common.EventTarget.EventTargetEvent<SDK.DOMDebuggerModel.DOMBreakpoint>): void {\n    const hadFocus = this.hasFocus();\n    const breakpoint = event.data;\n    this.#list.refreshItem(breakpoint);\n    if (hadFocus) {\n      this.focus();\n    }\n  }\n\n  private breakpointsRemoved(event: Common.EventTarget.EventTargetEvent<SDK.DOMDebuggerModel.DOMBreakpoint[]>): void {\n    const hadFocus = this.hasFocus();\n    const breakpoints = event.data;\n    let lastIndex = -1;\n    for (const breakpoint of breakpoints) {\n      const index = this.#breakpoints.indexOf(breakpoint);\n      if (index >= 0) {\n        this.#breakpoints.remove(index);\n        lastIndex = index;\n      }\n    }\n    if (this.#breakpoints.length === 0) {\n      this.#emptyElement.classList.remove('hidden');\n      this.setDefaultFocusedElement(this.#emptyElement);\n      this.#list.element.classList.add('hidden');\n    } else if (lastIndex >= 0) {\n      const breakpointToSelect = this.#breakpoints.at(lastIndex);\n      if (breakpointToSelect) {\n        this.#list.selectItem(breakpointToSelect);\n      }\n    }\n    if (hadFocus) {\n      this.focus();\n    }\n  }\n\n  private addBreakpoint(breakpoint: SDK.DOMDebuggerModel.DOMBreakpoint): void {\n    this.#breakpoints.insertWithComparator(breakpoint, (breakpointA, breakpointB) => {\n      if (breakpointA.type > breakpointB.type) {\n        return -1;\n      }\n      if (breakpointA.type < breakpointB.type) {\n        return 1;\n      }\n      return 0;\n    });\n    if (!this.#list.selectedItem() || !this.hasFocus()) {\n      this.#list.selectItem(this.#breakpoints.at(0));\n    }\n  }\n\n  private contextMenu(breakpoint: SDK.DOMDebuggerModel.DOMBreakpoint, event: Event): void {\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    contextMenu.defaultSection().appendItem(\n        i18nString(UIStrings.revealDomNodeInElementsPanel), () => Common.Revealer.reveal(breakpoint.node));\n    contextMenu.defaultSection().appendItem(i18nString(UIStrings.removeBreakpoint), () => {\n      breakpoint.domDebuggerModel.removeDOMBreakpoint(breakpoint.node, breakpoint.type);\n    });\n    contextMenu.defaultSection().appendItem(i18nString(UIStrings.removeAllDomBreakpoints), () => {\n      breakpoint.domDebuggerModel.removeAllDOMBreakpoints();\n    });\n    void contextMenu.show();\n  }\n\n  private checkboxClicked(breakpoint: SDK.DOMDebuggerModel.DOMBreakpoint, event: Event): void {\n    breakpoint.domDebuggerModel.toggleDOMBreakpoint(\n        breakpoint, event.target ? (event.target as HTMLInputElement).checked : false);\n  }\n\n  flavorChanged(_object: Object|null): void {\n    this.update();\n  }\n\n  private update(): void {\n    const details = UI.Context.Context.instance().flavor(SDK.DebuggerModel.DebuggerPausedDetails);\n    if (this.#highlightedBreakpoint) {\n      const oldHighlightedBreakpoint = this.#highlightedBreakpoint;\n      this.#highlightedBreakpoint = null;\n      this.#list.refreshItem(oldHighlightedBreakpoint);\n    }\n    if (!details || !details.auxData || details.reason !== Protocol.Debugger.PausedEventReason.DOM) {\n      return;\n    }\n\n    const domDebuggerModel = details.debuggerModel.target().model(SDK.DOMDebuggerModel.DOMDebuggerModel);\n    if (!domDebuggerModel) {\n      return;\n    }\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const data = domDebuggerModel.resolveDOMBreakpointData(details.auxData as any);\n    if (!data) {\n      return;\n    }\n\n    for (const breakpoint of this.#breakpoints) {\n      if (breakpoint.node === data.node && breakpoint.type === data.type) {\n        this.#highlightedBreakpoint = breakpoint;\n      }\n    }\n    if (this.#highlightedBreakpoint) {\n      this.#list.refreshItem(this.#highlightedBreakpoint);\n    }\n    void UI.ViewManager.ViewManager.instance().showView('sources.domBreakpoints');\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([domBreakpointsSidebarPaneStyles]);\n  }\n}\n\nconst BreakpointTypeLabels = new Map([\n  [Protocol.DOMDebugger.DOMBreakpointType.SubtreeModified, i18nLazyString(UIStrings.subtreeModified)],\n  [Protocol.DOMDebugger.DOMBreakpointType.AttributeModified, i18nLazyString(UIStrings.attributeModified)],\n  [Protocol.DOMDebugger.DOMBreakpointType.NodeRemoved, i18nLazyString(UIStrings.nodeRemoved)],\n]);\n\nlet contextMenuProviderInstance: ContextMenuProvider;\n\nexport class ContextMenuProvider implements UI.ContextMenu.Provider {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ContextMenuProvider {\n    const {forceNew} = opts;\n    if (!contextMenuProviderInstance || forceNew) {\n      contextMenuProviderInstance = new ContextMenuProvider();\n    }\n\n    return contextMenuProviderInstance;\n  }\n  appendApplicableItems(event: Event, contextMenu: UI.ContextMenu.ContextMenu, object: Object): void {\n    const node = object as SDK.DOMModel.DOMNode;\n    if (node.pseudoType()) {\n      return;\n    }\n    const domDebuggerModel = node.domModel().target().model(SDK.DOMDebuggerModel.DOMDebuggerModel);\n    if (!domDebuggerModel) {\n      return;\n    }\n\n    function toggleBreakpoint(type: Protocol.DOMDebugger.DOMBreakpointType): void {\n      if (!domDebuggerModel) {\n        return;\n      }\n      const label = Sources.DebuggerPausedMessage.BreakpointTypeNouns.get(type);\n      const labelString = label ? label() : '';\n      if (domDebuggerModel.hasDOMBreakpoint(node, type)) {\n        domDebuggerModel.removeDOMBreakpoint(node, type);\n        UI.ARIAUtils.alert(`${i18nString(UIStrings.breakpointRemoved)}: ${labelString}`);\n      } else {\n        domDebuggerModel.setDOMBreakpoint(node, type);\n        UI.ARIAUtils.alert(`${i18nString(UIStrings.breakpointSet)}: ${labelString}`);\n      }\n    }\n\n    const breakpointsMenu = contextMenu.debugSection().appendSubMenuItem(i18nString(UIStrings.breakOn));\n    const allBreakpointTypes: Protocol.EnumerableEnum<typeof Protocol.DOMDebugger.DOMBreakpointType> = {\n      SubtreeModified: Protocol.DOMDebugger.DOMBreakpointType.SubtreeModified,\n      AttributeModified: Protocol.DOMDebugger.DOMBreakpointType.AttributeModified,\n      NodeRemoved: Protocol.DOMDebugger.DOMBreakpointType.NodeRemoved,\n    };\n    for (const type of Object.values(allBreakpointTypes)) {\n      const label = Sources.DebuggerPausedMessage.BreakpointTypeNouns.get(type);\n      if (label) {\n        breakpointsMenu.defaultSection().appendCheckboxItem(\n            label(), toggleBreakpoint.bind(null, type), domDebuggerModel.hasDOMBreakpoint(node, type));\n      }\n    }\n  }\n}\n"],
  "mappings": "AA8BA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,MAAM,YAAY;AAAA,EAIhB,eAAe;AAAA,EAIf,oBAAoB;AAAA,EAMpB,IAAI;AAAA,EAOJ,KAAK;AAAA,EAIL,SAAS;AAAA,EAIT,WAAW;AAAA,EAKX,gBAAgB;AAAA,EAIhB,eAAe;AAAA,EAIf,8BAA8B;AAAA,EAI9B,kBAAkB;AAAA,EAIlB,yBAAyB;AAAA,EAIzB,iBAAiB;AAAA,EAIjB,mBAAmB;AAAA,EAInB,aAAa;AAAA,EAQb,SAAS;AAAA,EAIT,mBAAmB;AAAA,EAInB,eAAe;AAAA;AAEjB,MAAM,OAAO,KAAK,KAAK,kBAAkB,wDAAwD;AACjG,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAChE,MAAM,iBAAiB,KAAK,KAAK,iCAAiC,KAAK,QAAW;AAElF,IAAI;AAEG,+CAAwC,GAAG,OAAO,KAC2D;AAAA,EAClH;AAAA;AAAA;AAAA;AAAA;AAAA,EAMQ,cAAc;AACpB,UAAM;AAEN,SAAK,sBAAsB,oBAAI;AAE/B,yBAAqB,KAAK,eAAe,YAAY,OAAO;AAC5D,uBAAmB,cAAc,WAAW,UAAU;AACtD,wBAAoB,IAAI,GAAG,UAAU;AACrC,iBAAa,IAAI,GAAG,YAAY,YAAY,mBAAmB,MAAM,GAAG,YAAY,SAAS;AAC7F,SAAK,eAAe,YAAY,WAAW;AAC3C,eAAW,QAAQ,UAAU,IAAI,mBAAmB;AACpD,OAAG,UAAU,WAAW,WAAW;AACnC,OAAG,UAAU,kBAAkB,WAAW,SAAS,WAAW,UAAU;AACxE,uBAAmB,WAAW;AAE9B,QAAI,cAAc,cAAc,WAAW,iBACvC,IAAI,iBAAiB,kBAAkB,IAAI,iBAAiB,OAAO,oBAAoB,KAAK,iBAC5F;AACJ,QAAI,cAAc,cAAc,WAAW,iBACvC,IAAI,iBAAiB,kBAAkB,IAAI,iBAAiB,OAAO,sBAAsB,KAAK,mBAC9F;AACJ,QAAI,cAAc,cAAc,WAAW,iBACvC,IAAI,iBAAiB,kBAAkB,IAAI,iBAAiB,OAAO,uBACnE,KAAK,oBAAoB;AAE7B,eAAW,oBAAoB,IAAI,cAAc,cAAc,WAAW,OACjE,IAAI,iBAAiB,mBAAmB;AAC/C,uBAAiB;AACjB,iBAAW,cAAc,iBAAiB,kBAAkB;AAC1D,aAAK,cAAc;AAAA;AAAA;AAIvB,kCAA8B;AAC9B,SAAK;AAAA;AAAA,SAGA,WAAsC;AAC3C,QAAI,CAAC,mCAAmC;AACtC,0CAAoC,IAAI;AAAA;AAE1C,WAAO;AAAA;AAAA,EAGT,qBAAqB,MAAmD;AACtE,UAAM,UAAU,SAAS,cAAc;AACvC,YAAQ,UAAU,IAAI;AACtB,YAAQ,iBAAiB,eAAe,KAAK,YAAY,KAAK,MAAM,OAAO;AAC3E,OAAG,UAAU,eAAe;AAC5B,YAAQ,WAAW;AAEnB,UAAM,gBAAgB,GAAG,QAAQ,cAAc,OAAmB,QAAW,KAAK;AAClF,UAAM,kBAAkB,cAAc;AACtC,oBAAgB,iBAAiB,SAAS,KAAK,gBAAgB,KAAK,MAAM,OAAO;AACjF,oBAAgB,WAAW;AAC3B,SAAK,oBAAoB,IAAI,SAAS;AACtC,YAAQ,YAAY;AACpB,YAAQ,iBAAiB,WAAW,WAAS;AAC3C,UAAI,MAAM,QAAQ,KAAK;AACrB,sBAAc,gBAAgB;AAC9B,cAAM,QAAQ;AAAA;AAAA;AAIlB,UAAM,eAAe,SAAS,cAAc;AAC5C,iBAAa,UAAU,IAAI;AAC3B,YAAQ,YAAY;AACpB,UAAM,cAAc,SAAS,cAAc;AAC3C,UAAM,sBAAsB,qBAAqB,IAAI,KAAK;AAC1D,gBAAY,cAAc,sBAAsB,wBAAwB;AACxE,UAAM,qBAAqB,sBAAsB,wBAAwB;AACzE,OAAG,UAAU,kBAAkB,iBAAiB;AAChD,UAAM,mBAAmB,KAAK,UAAU,WAAW,UAAU,WAAW,WAAW,UAAU;AAC7F,UAAM,gBAAgB,SAAS,cAAc;AAC7C,kBAAc,MAAM,UAAU;AAC9B,iBAAa,YAAY;AACzB,SAAK,OAAO,UAAU,UAAU,QAAQ,KAAK,MAAM,EAAC,sBAAsB,MAAM,SAAS,UACpF,KAAK,eAAa;AACjB,oBAAc,YAAY;AAE1B,SAAG,UAAU,kBACT,iBAAiB,WAAW,UAAU,IAAI,EAAC,KAAK,oBAAoB,KAAK,UAAU;AAGvF,SAAG,UAAU,kBACT,SACA,WACI,UAAU,KAAK,EAAC,KAAK,oBAAoB,KAAK,UAAU,mBAAmB,KAAK;AAAA;AAG9F,iBAAa,YAAY;AAEzB,QAAI,SAAS,6BAA6B;AACxC,cAAQ,UAAU,IAAI;AACtB,SAAG,UAAU,eAAe,SAAS,WAAW,UAAU,gBAAgB,EAAC,KAAK;AAChF,SAAG,UAAU,eAAe,iBAAiB,WAAW,UAAU;AAAA,WAC7D;AACL,SAAG,UAAU,eAAe,SAAS;AAAA;AAGvC,uBAAmB,UAAU,IAAI;AACjC,eAAW,QAAQ,UAAU,OAAO;AAEpC,WAAO;AAAA;AAAA,EAGT,cAAc,OAAmD;AAC/D,WAAO;AAAA;AAAA,EAGT,iBAAiB,OAAoD;AACnE,WAAO;AAAA;AAAA,EAGT,uBAAuB,cAA4B,YAAmC;AACpF,WAAO;AAAA;AAAA,EAGT,oBACI,MAA+C,IAC/C,aAA+B,WAAmC;AACpE,QAAI,aAAa;AACf,kBAAY,WAAW;AAAA;AAGzB,QAAI,WAAW;AACb,WAAK,yBAAyB;AAC9B,gBAAU,WAAW;AACrB,UAAI,KAAK,YAAY;AACnB,kBAAU;AAAA;AAAA;AAAA;AAAA,EAKR,gBAAgB,OAAsF;AAC5G,SAAK,cAAc,MAAM;AAAA;AAAA,EAGnB,kBAAkB,OAAsF;AAC9G,UAAM,WAAW,KAAK;AACtB,UAAM,aAAa,MAAM;AACzB,eAAW,YAAY;AACvB,QAAI,UAAU;AACZ,WAAK;AAAA;AAAA;AAAA,EAID,mBAAmB,OAAwF;AACjH,UAAM,WAAW,KAAK;AACtB,UAAM,cAAc,MAAM;AAC1B,QAAI,YAAY;AAChB,eAAW,cAAc,aAAa;AACpC,YAAM,QAAQ,kBAAkB,QAAQ;AACxC,UAAI,SAAS,GAAG;AACd,0BAAkB,OAAO;AACzB,oBAAY;AAAA;AAAA;AAGhB,QAAI,kBAAkB,WAAW,GAAG;AAClC,yBAAmB,UAAU,OAAO;AACpC,WAAK,yBAAyB;AAC9B,iBAAW,QAAQ,UAAU,IAAI;AAAA,eACxB,aAAa,GAAG;AACzB,YAAM,qBAAqB,kBAAkB,GAAG;AAChD,UAAI,oBAAoB;AACtB,mBAAW,WAAW;AAAA;AAAA;AAG1B,QAAI,UAAU;AACZ,WAAK;AAAA;AAAA;AAAA,EAID,cAAc,YAAsD;AAC1E,sBAAkB,qBAAqB,YAAY,CAAC,aAAa,gBAAgB;AAC/E,UAAI,YAAY,OAAO,YAAY,MAAM;AACvC,eAAO;AAAA;AAET,UAAI,YAAY,OAAO,YAAY,MAAM;AACvC,eAAO;AAAA;AAET,aAAO;AAAA;AAET,QAAI,CAAC,WAAW,kBAAkB,CAAC,KAAK,YAAY;AAClD,iBAAW,WAAW,kBAAkB,GAAG;AAAA;AAAA;AAAA,EAIvC,YAAY,YAAgD,OAAoB;AACtF,UAAM,cAAc,IAAI,GAAG,YAAY,YAAY;AACnD,gBAAY,iBAAiB,WACzB,WAAW,UAAU,+BAA+B,MAAM,OAAO,SAAS,OAAO,WAAW;AAChG,gBAAY,iBAAiB,WAAW,WAAW,UAAU,mBAAmB,MAAM;AACpF,iBAAW,iBAAiB,oBAAoB,WAAW,MAAM,WAAW;AAAA;AAE9E,gBAAY,iBAAiB,WAAW,WAAW,UAAU,0BAA0B,MAAM;AAC3F,iBAAW,iBAAiB;AAAA;AAE9B,SAAK,YAAY;AAAA;AAAA,EAGX,gBAAgB,YAAgD,OAAoB;AAC1F,eAAW,iBAAiB,oBACxB,YAAY,MAAM,SAAU,MAAM,OAA4B,UAAU;AAAA;AAAA,EAG9E,cAAc,SAA4B;AACxC,SAAK;AAAA;AAAA,EAGC,SAAe;AACrB,UAAM,UAAU,GAAG,QAAQ,QAAQ,WAAW,OAAO,IAAI,cAAc;AACvE,QAAI,6BAA6B;AAC/B,YAAM,2BAA2B;AACjC,oCAA8B;AAC9B,iBAAW,YAAY;AAAA;AAEzB,QAAI,CAAC,WAAW,CAAC,QAAQ,WAAW,QAAQ,WAAW,SAAS,SAAS,kBAAkB,KAAK;AAC9F;AAAA;AAGF,UAAM,mBAAmB,QAAQ,cAAc,SAAS,MAAM,IAAI,iBAAiB;AACnF,QAAI,CAAC,kBAAkB;AACrB;AAAA;AAIF,UAAM,OAAO,iBAAiB,yBAAyB,QAAQ;AAC/D,QAAI,CAAC,MAAM;AACT;AAAA;AAGF,eAAW,cAAc,mBAAmB;AAC1C,UAAI,WAAW,SAAS,KAAK,QAAQ,WAAW,SAAS,KAAK,MAAM;AAClE,sCAA8B;AAAA;AAAA;AAGlC,QAAI,6BAA6B;AAC/B,iBAAW,YAAY;AAAA;AAEzB,SAAK,GAAG,YAAY,YAAY,WAAW,SAAS;AAAA;AAAA,EAEtD,WAAiB;AACf,UAAM;AACN,SAAK,iBAAiB,CAAC;AAAA;AAAA;AAI3B,MAAM,uBAAuB,oBAAI,IAAI;AAAA,EACnC,CAAC,SAAS,YAAY,kBAAkB,iBAAiB,eAAe,UAAU;AAAA,EAClF,CAAC,SAAS,YAAY,kBAAkB,mBAAmB,eAAe,UAAU;AAAA,EACpF,CAAC,SAAS,YAAY,kBAAkB,aAAa,eAAe,UAAU;AAAA;AAGhF,IAAI;AAEG,iCAA6D;AAAA,SAC3D,SAAS,OAEZ,EAAC,UAAU,QAA4B;AACzC,UAAM,EAAC,aAAY;AACnB,QAAI,CAAC,+BAA+B,UAAU;AAC5C,oCAA8B,IAAI;AAAA;AAGpC,WAAO;AAAA;AAAA,EAET,sBAAsB,OAAc,aAAyC,QAAsB;AACjG,UAAM,OAAO;AACb,QAAI,KAAK,cAAc;AACrB;AAAA;AAEF,UAAM,mBAAmB,KAAK,WAAW,SAAS,MAAM,IAAI,iBAAiB;AAC7E,QAAI,CAAC,kBAAkB;AACrB;AAAA;AAGF,8BAA0B,MAAoD;AAC5E,UAAI,CAAC,kBAAkB;AACrB;AAAA;AAEF,YAAM,QAAQ,QAAQ,sBAAsB,oBAAoB,IAAI;AACpE,YAAM,cAAc,QAAQ,UAAU;AACtC,UAAI,iBAAiB,iBAAiB,MAAM,OAAO;AACjD,yBAAiB,oBAAoB,MAAM;AAC3C,WAAG,UAAU,MAAM,GAAG,WAAW,UAAU,uBAAuB;AAAA,aAC7D;AACL,yBAAiB,iBAAiB,MAAM;AACxC,WAAG,UAAU,MAAM,GAAG,WAAW,UAAU,mBAAmB;AAAA;AAAA;AAIlE,UAAM,kBAAkB,YAAY,eAAe,kBAAkB,WAAW,UAAU;AAC1F,UAAM,qBAA6F;AAAA,MACjG,iBAAiB,SAAS,YAAY,kBAAkB;AAAA,MACxD,mBAAmB,SAAS,YAAY,kBAAkB;AAAA,MAC1D,aAAa,SAAS,YAAY,kBAAkB;AAAA;AAEtD,eAAW,QAAQ,OAAO,OAAO,qBAAqB;AACpD,YAAM,QAAQ,QAAQ,sBAAsB,oBAAoB,IAAI;AACpE,UAAI,OAAO;AACT,wBAAgB,iBAAiB,mBAC7B,SAAS,iBAAiB,KAAK,MAAM,OAAO,iBAAiB,iBAAiB,MAAM;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
