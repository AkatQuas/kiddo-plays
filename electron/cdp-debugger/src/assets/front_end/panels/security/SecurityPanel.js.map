{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/security/SecurityPanel.ts"],
  "sourcesContent": ["// Copyright 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as NetworkForward from '../../panels/network/forward/forward.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport lockIconStyles from './lockIcon.css.js';\nimport mainViewStyles from './mainView.css.js';\nimport originViewStyles from './originView.css.js';\nimport sidebarStyles from './sidebar.css.js';\n\nimport type {PageVisibleSecurityState} from './SecurityModel.js';\nimport {Events, SecurityModel, SecurityStyleExplanation, SummaryMessages} from './SecurityModel.js';\n\nconst UIStrings = {\n  /**\n  *@description Title text content in Security Panel of the Security panel\n  */\n  overview: 'Overview',\n  /**\n  *@description Text in Security Panel of the Security panel\n  */\n  mainOrigin: 'Main origin',\n  /**\n  *@description Text in Security Panel of the Security panel\n  */\n  nonsecureOrigins: 'Non-secure origins',\n  /**\n  *@description Text in Security Panel of the Security panel\n  */\n  secureOrigins: 'Secure origins',\n  /**\n  *@description Text in Security Panel of the Security panel\n  */\n  unknownCanceled: 'Unknown / canceled',\n  /**\n  *@description Text in Security Panel of the Security panel\n  */\n  reloadToViewDetails: 'Reload to view details',\n  /**\n  *@description New parent title in Security Panel of the Security panel\n  */\n  mainOriginSecure: 'Main origin (secure)',\n  /**\n  *@description New parent title in Security Panel of the Security panel\n  */\n  mainOriginNonsecure: 'Main origin (non-secure)',\n  /**\n  *@description Summary div text content in Security Panel of the Security panel\n  */\n  securityOverview: 'Security overview',\n  /**\n  *@description Text to show something is secure\n  */\n  secure: 'Secure',\n  /**\n  *@description Sdk console message message level info of level Labels in Console View of the Console panel\n  */\n  info: 'Info',\n  /**\n  *@description Not secure div text content in Security Panel of the Security panel\n  */\n  notSecure: 'Not secure',\n  /**\n  *@description Text to view a security certificate\n  */\n  viewCertificate: 'View certificate',\n  /**\n  *@description Text in Security Panel of the Security panel\n  */\n  notSecureBroken: 'Not secure (broken)',\n  /**\n  *@description Main summary for page when it has been deemed unsafe by the SafeBrowsing service.\n  */\n  thisPageIsDangerousFlaggedBy: 'This page is dangerous (flagged by Google Safe Browsing).',\n  /**\n  *@description Summary phrase for a security problem where the site is deemed unsafe by the SafeBrowsing service.\n  */\n  flaggedByGoogleSafeBrowsing: 'Flagged by Google Safe Browsing',\n  /**\n  *@description Description of a security problem where the site is deemed unsafe by the SafeBrowsing service.\n  */\n  toCheckThisPagesStatusVisit: 'To check this page\\'s status, visit g.co/safebrowsingstatus.',\n  /**\n  *@description Main summary for a non cert error page.\n  */\n  thisIsAnErrorPage: 'This is an error page.',\n  /**\n  *@description Main summary for where the site is non-secure HTTP.\n  */\n  thisPageIsInsecureUnencrypted: 'This page is insecure (unencrypted HTTP).',\n  /**\n  *@description Main summary for where the site has a non-cryptographic secure origin.\n  */\n  thisPageHasANonhttpsSecureOrigin: 'This page has a non-HTTPS secure origin.',\n  /**\n  *@description Message to display in devtools security tab when the page you are on triggered a safety tip.\n  */\n  thisPageIsSuspicious: 'This page is suspicious',\n  /**\n  *@description Body of message to display in devtools security tab when you are viewing a page that triggered a safety tip.\n  */\n  chromeHasDeterminedThatThisSiteS: 'Chrome has determined that this site could be fake or fraudulent.',\n  /**\n  *@description Second part of the body of message to display in devtools security tab when you are viewing a page that triggered a safety tip.\n  */\n  ifYouBelieveThisIsShownIn:\n      'If you believe this is shown in error please visit https://g.co/chrome/lookalike-warnings.',\n  /**\n  *@description Summary of a warning when the user visits a page that triggered a Safety Tip because the domain looked like another domain.\n  */\n  possibleSpoofingUrl: 'Possible spoofing URL',\n  /**\n  *@description Body of a warning when the user visits a page that triggered a Safety Tip because the domain looked like another domain.\n  *@example {wikipedia.org} PH1\n  */\n  thisSitesHostnameLooksSimilarToP:\n      'This site\\'s hostname looks similar to {PH1}. Attackers sometimes mimic sites by making small, hard-to-see changes to the domain name.',\n  /**\n  *@description second part of body of a warning when the user visits a page that triggered a Safety Tip because the domain looked like another domain.\n  */\n  ifYouBelieveThisIsShownInErrorSafety:\n      'If you believe this is shown in error please visit https://g.co/chrome/lookalike-warnings.',\n  /**\n  *@description Title of the devtools security tab when the page you are on triggered a safety tip.\n  */\n  thisPageIsSuspiciousFlaggedBy: 'This page is suspicious (flagged by Chrome).',\n  /**\n  *@description Text for a security certificate\n  */\n  certificate: 'Certificate',\n  /**\n  *@description Summary phrase for a security problem where the site's certificate chain contains a SHA1 signature.\n  */\n  insecureSha: 'insecure (SHA-1)',\n  /**\n  *@description Description of a security problem where the site's certificate chain contains a SHA1 signature.\n  */\n  theCertificateChainForThisSite: 'The certificate chain for this site contains a certificate signed using SHA-1.',\n  /**\n  *@description Summary phrase for a security problem where the site's certificate is missing a subjectAltName extension.\n  */\n  subjectAlternativeNameMissing: '`Subject Alternative Name` missing',\n  /**\n  *@description Description of a security problem where the site's certificate is missing a subjectAltName extension.\n  */\n  theCertificateForThisSiteDoesNot:\n      'The certificate for this site does not contain a `Subject Alternative Name` extension containing a domain name or IP address.',\n  /**\n  *@description Summary phrase for a security problem with the site's certificate.\n  */\n  missing: 'missing',\n  /**\n  *@description Description of a security problem with the site's certificate.\n  *@example {net::ERR_CERT_AUTHORITY_INVALID} PH1\n  */\n  thisSiteIsMissingAValidTrusted: 'This site is missing a valid, trusted certificate ({PH1}).',\n  /**\n  *@description Summary phrase for a site that has a valid server certificate.\n  */\n  validAndTrusted: 'valid and trusted',\n  /**\n  *@description Description of a site that has a valid server certificate.\n  *@example {Let's Encrypt Authority X3} PH1\n  */\n  theConnectionToThisSiteIsUsingA:\n      'The connection to this site is using a valid, trusted server certificate issued by {PH1}.',\n  /**\n  *@description Summary phrase for a security state where Private Key Pinning is ignored because the certificate chains to a locally-trusted root.\n  */\n  publickeypinningBypassed: 'Public-Key-Pinning bypassed',\n  /**\n  *@description Description of a security state where Private Key Pinning is ignored because the certificate chains to a locally-trusted root.\n  */\n  publickeypinningWasBypassedByA: 'Public-Key-Pinning was bypassed by a local root certificate.',\n  /**\n  *@description Summary phrase for a site with a certificate that is expiring soon.\n  */\n  certificateExpiresSoon: 'Certificate expires soon',\n  /**\n  *@description Description for a site with a certificate that is expiring soon.\n  */\n  theCertificateForThisSiteExpires:\n      'The certificate for this site expires in less than 48 hours and needs to be renewed.',\n  /**\n  *@description Text that refers to the network connection\n  */\n  connection: 'Connection',\n  /**\n  *@description Summary phrase for a site that uses a modern, secure TLS protocol and cipher.\n  */\n  secureConnectionSettings: 'secure connection settings',\n  /**\n  *@description Description of a site's TLS settings.\n  *@example {TLS 1.2} PH1\n  *@example {ECDHE_RSA} PH2\n  *@example {AES_128_GCM} PH3\n  */\n  theConnectionToThisSiteIs:\n      'The connection to this site is encrypted and authenticated using {PH1}, {PH2}, and {PH3}.',\n  /**\n  *@description A recommendation to the site owner to use a modern TLS protocol\n  *@example {TLS 1.0} PH1\n  */\n  sIsObsoleteEnableTlsOrLater: '{PH1} is obsolete. Enable TLS 1.2 or later.',\n  /**\n  *@description A recommendation to the site owner to use a modern TLS key exchange\n  */\n  rsaKeyExchangeIsObsoleteEnableAn: 'RSA key exchange is obsolete. Enable an ECDHE-based cipher suite.',\n  /**\n  *@description A recommendation to the site owner to use a modern TLS cipher\n  *@example {3DES_EDE_CBC} PH1\n  */\n  sIsObsoleteEnableAnAesgcmbased: '{PH1} is obsolete. Enable an AES-GCM-based cipher suite.',\n  /**\n  *@description A recommendation to the site owner to use a modern TLS server signature\n  */\n  theServerSignatureUsesShaWhichIs:\n      'The server signature uses SHA-1, which is obsolete. Enable a SHA-2 signature algorithm instead. (Note this is different from the signature in the certificate.)',\n  /**\n  *@description Summary phrase for a site that uses an outdated SSL settings (protocol, key exchange, or cipher).\n  */\n  obsoleteConnectionSettings: 'obsolete connection settings',\n  /**\n  *@description A title of the 'Resources' action category\n  */\n  resources: 'Resources',\n  /**\n  *@description Summary for page when there is active mixed content\n  */\n  activeMixedContent: 'active mixed content',\n  /**\n  *@description Description for page when there is active mixed content\n  */\n  youHaveRecentlyAllowedNonsecure:\n      'You have recently allowed non-secure content (such as scripts or iframes) to run on this site.',\n  /**\n  *@description Summary for page when there is mixed content\n  */\n  mixedContent: 'mixed content',\n  /**\n  *@description Description for page when there is mixed content\n  */\n  thisPageIncludesHttpResources: 'This page includes HTTP resources.',\n  /**\n  *@description Summary for page when there is a non-secure form\n  */\n  nonsecureForm: 'non-secure form',\n  /**\n  *@description Description for page when there is a non-secure form\n  */\n  thisPageIncludesAFormWithA: 'This page includes a form with a non-secure \"action\" attribute.',\n  /**\n  *@description Summary for the page when it contains active content with certificate error\n  */\n  activeContentWithCertificate: 'active content with certificate errors',\n  /**\n  *@description Description for the page when it contains active content with certificate error\n  */\n  youHaveRecentlyAllowedContent:\n      'You have recently allowed content loaded with certificate errors (such as scripts or iframes) to run on this site.',\n  /**\n  *@description Summary for page when there is active content with certificate errors\n  */\n  contentWithCertificateErrors: 'content with certificate errors',\n  /**\n  *@description Description for page when there is content with certificate errors\n  */\n  thisPageIncludesResourcesThat: 'This page includes resources that were loaded with certificate errors.',\n  /**\n  *@description Summary for page when all resources are served securely\n  */\n  allServedSecurely: 'all served securely',\n  /**\n  *@description Description for page when all resources are served securely\n  */\n  allResourcesOnThisPageAreServed: 'All resources on this page are served securely.',\n  /**\n  *@description Text in Security Panel of the Security panel\n  */\n  blockedMixedContent: 'Blocked mixed content',\n  /**\n  *@description Text in Security Panel of the Security panel\n  */\n  yourPageRequestedNonsecure: 'Your page requested non-secure resources that were blocked.',\n  /**\n  *@description Refresh prompt text content in Security Panel of the Security panel\n  */\n  reloadThePageToRecordRequestsFor: 'Reload the page to record requests for HTTP resources.',\n  /**\n  * @description Link text in the Security Panel. Clicking the link navigates the user to the\n  * Network panel. Requests refers to network requests. Each request is a piece of data transmitted\n  * from the current user's browser to a remote server.\n  */\n  viewDRequestsInNetworkPanel:\n      '{n, plural, =1 {View # request in Network Panel} other {View # requests in Network Panel}}',\n  /**\n  *@description Text for the origin of something\n  */\n  origin: 'Origin',\n  /**\n  *@description Text in Security Panel of the Security panel\n  */\n  viewRequestsInNetworkPanel: 'View requests in Network Panel',\n  /**\n  *@description Text for security or network protocol\n  */\n  protocol: 'Protocol',\n  /**\n  *@description Text in Security Panel of the Security panel\n  */\n  keyExchange: 'Key exchange',\n  /**\n  *@description Text in Security Panel of the Security panel\n  */\n  keyExchangeGroup: 'Key exchange group',\n  /**\n  *@description Text in Security Panel of the Security panel\n  */\n  cipher: 'Cipher',\n  /**\n  *@description Sct div text content in Security Panel of the Security panel\n  */\n  certificateTransparency: 'Certificate Transparency',\n  /**\n  *@description Text that refers to the subject of a security certificate\n  */\n  subject: 'Subject',\n  /**\n  *@description Text to show since when an item is valid\n  */\n  validFrom: 'Valid from',\n  /**\n  *@description Text to indicate the expiry date\n  */\n  validUntil: 'Valid until',\n  /**\n  *@description Text for the issuer of an item\n  */\n  issuer: 'Issuer',\n  /**\n  *@description Text in Security Panel of the Security panel\n  */\n  openFullCertificateDetails: 'Open full certificate details',\n  /**\n  *@description Text in Security Panel of the Security panel\n  */\n  sct: 'SCT',\n  /**\n  *@description Text in Security Panel of the Security panel\n  */\n  logName: 'Log name',\n  /**\n  *@description Text in Security Panel of the Security panel\n  */\n  logId: 'Log ID',\n  /**\n  *@description Text in Security Panel of the Security panel\n  */\n  validationStatus: 'Validation status',\n  /**\n  *@description Text for the source of something\n  */\n  source: 'Source',\n  /**\n  * @description Label for a date/time string in the Security panel. It indicates the time at which\n  * a security certificate was issued (created by an authority and distributed).\n  */\n  issuedAt: 'Issued at',\n  /**\n  *@description Text in Security Panel of the Security panel\n  */\n  hashAlgorithm: 'Hash algorithm',\n  /**\n  *@description Text in Security Panel of the Security panel\n  */\n  signatureAlgorithm: 'Signature algorithm',\n  /**\n  *@description Text in Security Panel of the Security panel\n  */\n  signatureData: 'Signature data',\n  /**\n  *@description Toggle scts details link text content in Security Panel of the Security panel\n  */\n  showFullDetails: 'Show full details',\n  /**\n  *@description Toggle scts details link text content in Security Panel of the Security panel\n  */\n  hideFullDetails: 'Hide full details',\n  /**\n  *@description Text in Security Panel of the Security panel\n  */\n  thisRequestCompliesWithChromes: 'This request complies with `Chrome`\\'s Certificate Transparency policy.',\n  /**\n  *@description Text in Security Panel of the Security panel\n  */\n  thisRequestDoesNotComplyWith: 'This request does not comply with `Chrome`\\'s Certificate Transparency policy.',\n  /**\n  *@description Text in Security Panel of the Security panel\n  */\n  thisResponseWasLoadedFromCache: 'This response was loaded from cache. Some security details might be missing.',\n  /**\n  *@description Text in Security Panel of the Security panel\n  */\n  theSecurityDetailsAboveAreFrom: 'The security details above are from the first inspected response.',\n  /**\n  *@description Main summary for where the site has a non-cryptographic secure origin.\n  */\n  thisOriginIsANonhttpsSecure: 'This origin is a non-HTTPS secure origin.',\n  /**\n  *@description Text in Security Panel of the Security panel\n  */\n  yourConnectionToThisOriginIsNot: 'Your connection to this origin is not secure.',\n  /**\n  *@description No info div text content in Security Panel of the Security panel\n  */\n  noSecurityInformation: 'No security information',\n  /**\n  *@description Text in Security Panel of the Security panel\n  */\n  noSecurityDetailsAreAvailableFor: 'No security details are available for this origin.',\n  /**\n  *@description San div text content in Security Panel of the Security panel\n  */\n  na: '(n/a)',\n  /**\n  *@description Text to show less content\n  */\n  showLess: 'Show less',\n  /**\n  *@description Truncated santoggle text content in Security Panel of the Security panel\n  *@example {2} PH1\n  */\n  showMoreSTotal: 'Show more ({PH1} total)',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/security/SecurityPanel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet securityPanelInstance: SecurityPanel;\n\nexport class SecurityPanel extends UI.Panel.PanelWithSidebar implements\n    SDK.TargetManager.SDKModelObserver<SecurityModel> {\n  private readonly mainView: SecurityMainView;\n  private readonly sidebarMainViewElement: SecurityPanelSidebarTreeElement;\n  private readonly sidebarTree: SecurityPanelSidebarTree;\n  private readonly lastResponseReceivedForLoaderId: Map<string, SDK.NetworkRequest.NetworkRequest>;\n  private readonly origins: Map<string, OriginState>;\n  private readonly filterRequestCounts: Map<string, number>;\n  private visibleView: UI.Widget.VBox|null;\n  private eventListeners: Common.EventTarget.EventDescriptor[];\n  private securityModel: SecurityModel|null;\n\n  private constructor() {\n    super('security');\n\n    this.mainView = new SecurityMainView(this);\n\n    const title = document.createElement('span');\n    title.classList.add('title');\n    title.textContent = i18nString(UIStrings.overview);\n    this.sidebarMainViewElement = new SecurityPanelSidebarTreeElement(\n        title, this.setVisibleView.bind(this, this.mainView), 'security-main-view-sidebar-tree-item', 'lock-icon');\n    this.sidebarMainViewElement.tooltip = title.textContent;\n    this.sidebarTree = new SecurityPanelSidebarTree(this.sidebarMainViewElement, this.showOrigin.bind(this));\n    this.panelSidebarElement().appendChild(this.sidebarTree.element);\n\n    this.lastResponseReceivedForLoaderId = new Map();\n\n    this.origins = new Map();\n\n    this.filterRequestCounts = new Map();\n\n    SDK.TargetManager.TargetManager.instance().observeModels(SecurityModel, this);\n\n    this.visibleView = null;\n    this.eventListeners = [];\n    this.securityModel = null;\n  }\n\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): SecurityPanel {\n    const {forceNew} = opts;\n    if (!securityPanelInstance || forceNew) {\n      securityPanelInstance = new SecurityPanel();\n    }\n\n    return securityPanelInstance;\n  }\n\n  static createCertificateViewerButtonForOrigin(text: string, origin: string): Element {\n    const certificateButton = UI.UIUtils.createTextButton(text, async (e: Event) => {\n      e.consume();\n      const names = await SDK.NetworkManager.MultitargetNetworkManager.instance().getCertificate(origin);\n      if (names.length > 0) {\n        Host.InspectorFrontendHost.InspectorFrontendHostInstance.showCertificateViewer(names);\n      }\n    }, 'origin-button');\n    UI.ARIAUtils.markAsButton(certificateButton);\n    return certificateButton;\n  }\n\n  static createCertificateViewerButtonForCert(text: string, names: string[]): Element {\n    const certificateButton = UI.UIUtils.createTextButton(text, e => {\n      e.consume();\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.showCertificateViewer(names);\n    }, 'origin-button');\n    UI.ARIAUtils.markAsButton(certificateButton);\n    return certificateButton;\n  }\n\n  static createHighlightedUrl(url: Platform.DevToolsPath.UrlString, securityState: string): Element {\n    const schemeSeparator = '://';\n    const index = url.indexOf(schemeSeparator);\n\n    // If the separator is not found, just display the text without highlighting.\n    if (index === -1) {\n      const text = document.createElement('span');\n      text.textContent = url;\n      return text;\n    }\n\n    const highlightedUrl = document.createElement('span');\n\n    const scheme = url.substr(0, index);\n    const content = url.substr(index + schemeSeparator.length);\n    highlightedUrl.createChild('span', 'url-scheme-' + securityState).textContent = scheme;\n    highlightedUrl.createChild('span', 'url-scheme-separator').textContent = schemeSeparator;\n    highlightedUrl.createChild('span').textContent = content;\n\n    return highlightedUrl;\n  }\n\n  private updateVisibleSecurityState(visibleSecurityState: PageVisibleSecurityState): void {\n    this.sidebarMainViewElement.setSecurityState(visibleSecurityState.securityState);\n    this.mainView.updateVisibleSecurityState(visibleSecurityState);\n  }\n\n  private onVisibleSecurityStateChanged({data}: Common.EventTarget.EventTargetEvent<PageVisibleSecurityState>): void {\n    this.updateVisibleSecurityState(data);\n  }\n\n  selectAndSwitchToMainView(): void {\n    // The sidebar element will trigger displaying the main view. Rather than making a redundant call to display the main view, we rely on this.\n    this.sidebarMainViewElement.select(true);\n  }\n  showOrigin(origin: Platform.DevToolsPath.UrlString): void {\n    const originState = this.origins.get(origin);\n    if (!originState) {\n      return;\n    }\n    if (!originState.originView) {\n      originState.originView = new SecurityOriginView(this, origin, originState);\n    }\n\n    this.setVisibleView(originState.originView);\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    if (!this.visibleView) {\n      this.selectAndSwitchToMainView();\n    }\n  }\n\n  focus(): void {\n    this.sidebarTree.focus();\n  }\n\n  private setVisibleView(view: UI.Widget.VBox): void {\n    if (this.visibleView === view) {\n      return;\n    }\n\n    if (this.visibleView) {\n      this.visibleView.detach();\n    }\n\n    this.visibleView = view;\n\n    if (view) {\n      this.splitWidget().setMainWidget(view);\n    }\n  }\n\n  private onResponseReceived(event: Common.EventTarget.EventTargetEvent<SDK.NetworkManager.ResponseReceivedEvent>):\n      void {\n    const request = event.data.request;\n    if (request.resourceType() === Common.ResourceType.resourceTypes.Document && request.loaderId) {\n      this.lastResponseReceivedForLoaderId.set(request.loaderId, request);\n    }\n  }\n\n  private processRequest(request: SDK.NetworkRequest.NetworkRequest): void {\n    const origin = Common.ParsedURL.ParsedURL.extractOrigin(request.url());\n\n    if (!origin) {\n      // We don't handle resources like data: URIs. Most of them don't affect the lock icon.\n      return;\n    }\n\n    let securityState: Protocol.Security.SecurityState.Insecure|Protocol.Security.SecurityState =\n        request.securityState() as Protocol.Security.SecurityState;\n\n    if (request.mixedContentType === Protocol.Security.MixedContentType.Blockable ||\n        request.mixedContentType === Protocol.Security.MixedContentType.OptionallyBlockable) {\n      securityState = Protocol.Security.SecurityState.Insecure;\n    }\n\n    const originState = this.origins.get(origin);\n    if (originState) {\n      const oldSecurityState = originState.securityState;\n      originState.securityState = this.securityStateMin(oldSecurityState, securityState);\n      if (oldSecurityState !== originState.securityState) {\n        const securityDetails = request.securityDetails() as Protocol.Network.SecurityDetails | null;\n        if (securityDetails) {\n          originState.securityDetails = securityDetails;\n        }\n        this.sidebarTree.updateOrigin(origin, securityState);\n        if (originState.originView) {\n          originState.originView.setSecurityState(securityState);\n        }\n      }\n    } else {\n      // This stores the first security details we see for an origin, but we should\n      // eventually store a (deduplicated) list of all the different security\n      // details we have seen. https://crbug.com/503170\n      const newOriginState: OriginState = {\n        securityState,\n        securityDetails: request.securityDetails(),\n        loadedFromCache: request.cached(),\n        originView: undefined,\n      };\n      this.origins.set(origin, newOriginState);\n\n      this.sidebarTree.addOrigin(origin, securityState);\n\n      // Don't construct the origin view yet (let it happen lazily).\n    }\n  }\n\n  private onRequestFinished(event: Common.EventTarget.EventTargetEvent<SDK.NetworkRequest.NetworkRequest>): void {\n    const request = event.data;\n    this.updateFilterRequestCounts(request);\n    this.processRequest(request);\n  }\n\n  private updateFilterRequestCounts(request: SDK.NetworkRequest.NetworkRequest): void {\n    if (request.mixedContentType === Protocol.Security.MixedContentType.None) {\n      return;\n    }\n\n    let filterKey: string = NetworkForward.UIFilter.MixedContentFilterValues.All;\n    if (request.wasBlocked()) {\n      filterKey = NetworkForward.UIFilter.MixedContentFilterValues.Blocked;\n    } else if (request.mixedContentType === Protocol.Security.MixedContentType.Blockable) {\n      filterKey = NetworkForward.UIFilter.MixedContentFilterValues.BlockOverridden;\n    } else if (request.mixedContentType === Protocol.Security.MixedContentType.OptionallyBlockable) {\n      filterKey = NetworkForward.UIFilter.MixedContentFilterValues.Displayed;\n    }\n\n    const currentCount = this.filterRequestCounts.get(filterKey);\n    if (!currentCount) {\n      this.filterRequestCounts.set(filterKey, 1);\n    } else {\n      this.filterRequestCounts.set(filterKey, currentCount + 1);\n    }\n\n    this.mainView.refreshExplanations();\n  }\n\n  filterRequestCount(filterKey: string): number {\n    return this.filterRequestCounts.get(filterKey) || 0;\n  }\n\n  private securityStateMin(stateA: Protocol.Security.SecurityState, stateB: Protocol.Security.SecurityState):\n      Protocol.Security.SecurityState {\n    return SecurityModel.SecurityStateComparator(stateA, stateB) < 0 ? stateA : stateB;\n  }\n\n  modelAdded(securityModel: SecurityModel): void {\n    if (this.securityModel) {\n      return;\n    }\n\n    this.securityModel = securityModel;\n    const resourceTreeModel = securityModel.resourceTreeModel();\n    const networkManager = securityModel.networkManager();\n    this.eventListeners = [\n      securityModel.addEventListener(Events.VisibleSecurityStateChanged, this.onVisibleSecurityStateChanged, this),\n      resourceTreeModel.addEventListener(\n          SDK.ResourceTreeModel.Events.MainFrameNavigated, this.onMainFrameNavigated, this),\n      resourceTreeModel.addEventListener(\n          SDK.ResourceTreeModel.Events.InterstitialShown, this.onInterstitialShown, this),\n      resourceTreeModel.addEventListener(\n          SDK.ResourceTreeModel.Events.InterstitialHidden, this.onInterstitialHidden, this),\n      networkManager.addEventListener(SDK.NetworkManager.Events.ResponseReceived, this.onResponseReceived, this),\n      networkManager.addEventListener(SDK.NetworkManager.Events.RequestFinished, this.onRequestFinished, this),\n    ];\n\n    if (resourceTreeModel.isInterstitialShowing) {\n      this.onInterstitialShown();\n    }\n  }\n\n  modelRemoved(securityModel: SecurityModel): void {\n    if (this.securityModel !== securityModel) {\n      return;\n    }\n\n    this.securityModel = null;\n    Common.EventTarget.removeEventListeners(this.eventListeners);\n  }\n\n  private onMainFrameNavigated(event: Common.EventTarget.EventTargetEvent<SDK.ResourceTreeModel.ResourceTreeFrame>):\n      void {\n    const frame = event.data;\n    const request = this.lastResponseReceivedForLoaderId.get(frame.loaderId);\n\n    this.selectAndSwitchToMainView();\n    this.sidebarTree.clearOrigins();\n    this.origins.clear();\n    this.lastResponseReceivedForLoaderId.clear();\n    this.filterRequestCounts.clear();\n    // After clearing the filtered request counts, refresh the\n    // explanations to reflect the new counts.\n    this.mainView.refreshExplanations();\n\n    // If we could not find a matching request (as in the case of clicking\n    // through an interstitial, see https://crbug.com/669309), set the origin\n    // based upon the url data from the MainFrameNavigated event itself.\n    const origin = Common.ParsedURL.ParsedURL.extractOrigin(request ? request.url() : frame.url);\n    this.sidebarTree.setMainOrigin(origin);\n\n    if (request) {\n      this.processRequest(request);\n    }\n  }\n\n  private onInterstitialShown(): void {\n    // The panel might have been displaying the origin view on the\n    // previously loaded page. When showing an interstitial, switch\n    // back to the Overview view.\n    this.selectAndSwitchToMainView();\n    this.sidebarTree.toggleOriginsList(true /* hidden */);\n  }\n\n  private onInterstitialHidden(): void {\n    this.sidebarTree.toggleOriginsList(false /* hidden */);\n  }\n}\n\nexport class SecurityPanelSidebarTree extends UI.TreeOutline.TreeOutlineInShadow {\n  private readonly showOriginInPanel: (arg0: Origin) => void;\n  private mainOrigin: string|null;\n  private readonly originGroupTitles: Map<OriginGroup, string>;\n  private originGroups: Map<OriginGroup, UI.TreeOutline.TreeElement>;\n  private readonly elementsByOrigin: Map<string, SecurityPanelSidebarTreeElement>;\n  constructor(mainViewElement: SecurityPanelSidebarTreeElement, showOriginInPanel: (arg0: Origin) => void) {\n    super();\n\n    this.appendChild(mainViewElement);\n\n    this.registerCSSFiles([lockIconStyles, sidebarStyles]);\n\n    this.showOriginInPanel = showOriginInPanel;\n    this.mainOrigin = null;\n\n    this.originGroupTitles = new Map([\n      [OriginGroup.MainOrigin, i18nString(UIStrings.mainOrigin)],\n      [OriginGroup.NonSecure, i18nString(UIStrings.nonsecureOrigins)],\n      [OriginGroup.Secure, i18nString(UIStrings.secureOrigins)],\n      [OriginGroup.Unknown, i18nString(UIStrings.unknownCanceled)],\n    ]);\n\n    this.originGroups = new Map();\n    for (const group of Object.values(OriginGroup)) {\n      const element = this.createOriginGroupElement(this.originGroupTitles.get(group) as string);\n      this.originGroups.set(group, element);\n      this.appendChild(element);\n    }\n\n    this.clearOriginGroups();\n\n    // This message will be removed by clearOrigins() during the first new page load after the panel was opened.\n    const mainViewReloadMessage = new UI.TreeOutline.TreeElement(i18nString(UIStrings.reloadToViewDetails));\n    mainViewReloadMessage.selectable = false;\n    mainViewReloadMessage.listItemElement.classList.add('security-main-view-reload-message');\n    const treeElement = this.originGroups.get(OriginGroup.MainOrigin);\n    (treeElement as UI.TreeOutline.TreeElement).appendChild(mainViewReloadMessage);\n\n    this.elementsByOrigin = new Map();\n  }\n\n  private originGroupTitle(originGroup: OriginGroup): string {\n    return this.originGroupTitles.get(originGroup) as string;\n  }\n\n  private originGroupElement(originGroup: OriginGroup): UI.TreeOutline.TreeElement {\n    return this.originGroups.get(originGroup) as UI.TreeOutline.TreeElement;\n  }\n\n  private createOriginGroupElement(originGroupTitle: string): UI.TreeOutline.TreeElement {\n    const originGroup = new UI.TreeOutline.TreeElement(originGroupTitle, true);\n    originGroup.selectable = false;\n    originGroup.setCollapsible(false);\n    originGroup.expand();\n    originGroup.listItemElement.classList.add('security-sidebar-origins');\n    UI.ARIAUtils.setAccessibleName(originGroup.childrenListElement, originGroupTitle);\n    return originGroup;\n  }\n\n  toggleOriginsList(hidden: boolean): void {\n    for (const element of this.originGroups.values()) {\n      element.hidden = hidden;\n    }\n  }\n\n  addOrigin(origin: Platform.DevToolsPath.UrlString, securityState: Protocol.Security.SecurityState): void {\n    const originElement = new SecurityPanelSidebarTreeElement(\n        SecurityPanel.createHighlightedUrl(origin, securityState), this.showOriginInPanel.bind(this, origin),\n        'security-sidebar-tree-item', 'security-property');\n    originElement.tooltip = origin;\n    this.elementsByOrigin.set(origin, originElement);\n    this.updateOrigin(origin, securityState);\n  }\n\n  setMainOrigin(origin: string): void {\n    this.mainOrigin = origin;\n  }\n\n  updateOrigin(origin: string, securityState: Protocol.Security.SecurityState): void {\n    const originElement = this.elementsByOrigin.get(origin) as SecurityPanelSidebarTreeElement;\n    originElement.setSecurityState(securityState);\n\n    let newParent: UI.TreeOutline.TreeElement;\n    if (origin === this.mainOrigin) {\n      newParent = this.originGroups.get(OriginGroup.MainOrigin) as UI.TreeOutline.TreeElement;\n      if (securityState === Protocol.Security.SecurityState.Secure) {\n        newParent.title = i18nString(UIStrings.mainOriginSecure);\n      } else {\n        newParent.title = i18nString(UIStrings.mainOriginNonsecure);\n      }\n      UI.ARIAUtils.setAccessibleName(newParent.childrenListElement, newParent.title);\n    } else {\n      switch (securityState) {\n        case Protocol.Security.SecurityState.Secure:\n          newParent = this.originGroupElement(OriginGroup.Secure);\n          break;\n        case Protocol.Security.SecurityState.Unknown:\n          newParent = this.originGroupElement(OriginGroup.Unknown);\n          break;\n        default:\n          newParent = this.originGroupElement(OriginGroup.NonSecure);\n          break;\n      }\n    }\n\n    const oldParent = originElement.parent;\n    if (oldParent !== newParent) {\n      if (oldParent) {\n        oldParent.removeChild(originElement);\n        if (oldParent.childCount() === 0) {\n          oldParent.hidden = true;\n        }\n      }\n      newParent.appendChild(originElement);\n      newParent.hidden = false;\n    }\n  }\n\n  private clearOriginGroups(): void {\n    for (const originGroup of this.originGroups.values()) {\n      originGroup.removeChildren();\n      originGroup.hidden = true;\n    }\n    const mainOrigin = this.originGroupElement(OriginGroup.MainOrigin);\n    mainOrigin.title = this.originGroupTitle(OriginGroup.MainOrigin);\n    mainOrigin.hidden = false;\n  }\n\n  clearOrigins(): void {\n    this.clearOriginGroups();\n    this.elementsByOrigin.clear();\n  }\n  wasShown(): void {\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum OriginGroup {\n  MainOrigin = 'MainOrigin',\n  NonSecure = 'NonSecure',\n  Secure = 'Secure',\n  Unknown = 'Unknown',\n}\n\nexport class SecurityPanelSidebarTreeElement extends UI.TreeOutline.TreeElement {\n  private readonly selectCallback: () => void;\n  private readonly cssPrefix: string;\n  private readonly iconElement: HTMLElement;\n  private securityStateInternal: Protocol.Security.SecurityState|null;\n\n  constructor(textElement: Element, selectCallback: () => void, className: string, cssPrefix: string) {\n    super('', false);\n    this.selectCallback = selectCallback;\n    this.cssPrefix = cssPrefix;\n    this.listItemElement.classList.add(className);\n    this.iconElement = this.listItemElement.createChild('div', 'icon');\n    this.iconElement.classList.add(this.cssPrefix);\n    this.listItemElement.appendChild(textElement);\n    this.securityStateInternal = null;\n    this.setSecurityState(Protocol.Security.SecurityState.Unknown);\n  }\n\n  setSecurityState(newSecurityState: Protocol.Security.SecurityState): void {\n    if (this.securityStateInternal) {\n      this.iconElement.classList.remove(this.cssPrefix + '-' + this.securityStateInternal);\n    }\n\n    this.securityStateInternal = newSecurityState;\n    this.iconElement.classList.add(this.cssPrefix + '-' + newSecurityState);\n  }\n\n  securityState(): Protocol.Security.SecurityState|null {\n    return this.securityStateInternal;\n  }\n\n  onselect(): boolean {\n    this.selectCallback();\n    return true;\n  }\n}\n\nexport class SecurityMainView extends UI.Widget.VBox {\n  private readonly panel: SecurityPanel;\n  private readonly summarySection: HTMLElement;\n  private readonly securityExplanationsMain: HTMLElement;\n  private readonly securityExplanationsExtra: HTMLElement;\n  private readonly lockSpectrum: Map<Protocol.Security.SecurityState, HTMLElement>;\n  private summaryText: HTMLElement;\n  private explanations: (Protocol.Security.SecurityStateExplanation|SecurityStyleExplanation)[]|null;\n  private securityState: Protocol.Security.SecurityState|null;\n  constructor(panel: SecurityPanel) {\n    super(true);\n\n    this.setMinimumSize(200, 100);\n\n    this.contentElement.classList.add('security-main-view');\n\n    this.panel = panel;\n\n    this.summarySection = this.contentElement.createChild('div', 'security-summary');\n\n    // Info explanations should appear after all others.\n    this.securityExplanationsMain =\n        this.contentElement.createChild('div', 'security-explanation-list security-explanations-main');\n    this.securityExplanationsExtra =\n        this.contentElement.createChild('div', 'security-explanation-list security-explanations-extra');\n\n    // Fill the security summary section.\n    const summaryDiv = this.summarySection.createChild('div', 'security-summary-section-title');\n    summaryDiv.textContent = i18nString(UIStrings.securityOverview);\n    UI.ARIAUtils.markAsHeading(summaryDiv, 1);\n\n    const lockSpectrum = this.summarySection.createChild('div', 'lock-spectrum');\n    this.lockSpectrum = new Map([\n      [Protocol.Security.SecurityState.Secure, lockSpectrum.createChild('div', 'lock-icon lock-icon-secure')],\n      [Protocol.Security.SecurityState.Neutral, lockSpectrum.createChild('div', 'lock-icon lock-icon-neutral')],\n      [Protocol.Security.SecurityState.Insecure, lockSpectrum.createChild('div', 'lock-icon lock-icon-insecure')],\n    ]);\n    UI.Tooltip.Tooltip.install(\n        this.getLockSpectrumDiv(Protocol.Security.SecurityState.Secure), i18nString(UIStrings.secure));\n    UI.Tooltip.Tooltip.install(\n        this.getLockSpectrumDiv(Protocol.Security.SecurityState.Neutral), i18nString(UIStrings.info));\n    UI.Tooltip.Tooltip.install(\n        this.getLockSpectrumDiv(Protocol.Security.SecurityState.Insecure), i18nString(UIStrings.notSecure));\n\n    this.summarySection.createChild('div', 'triangle-pointer-container')\n        .createChild('div', 'triangle-pointer-wrapper')\n        .createChild('div', 'triangle-pointer');\n\n    this.summaryText = this.summarySection.createChild('div', 'security-summary-text');\n    UI.ARIAUtils.markAsHeading(this.summaryText, 2);\n\n    this.explanations = null;\n    this.securityState = null;\n  }\n\n  getLockSpectrumDiv(securityState: Protocol.Security.SecurityState): HTMLElement {\n    const element = this.lockSpectrum.get(securityState);\n    if (!element) {\n      throw new Error(`Invalid argument: ${securityState}`);\n    }\n    return element;\n  }\n\n  private addExplanation(\n      parent: Element, explanation: Protocol.Security.SecurityStateExplanation|SecurityStyleExplanation): Element {\n    const explanationSection = parent.createChild('div', 'security-explanation');\n    explanationSection.classList.add('security-explanation-' + explanation.securityState);\n\n    explanationSection.createChild('div', 'security-property')\n        .classList.add('security-property-' + explanation.securityState);\n    const text = explanationSection.createChild('div', 'security-explanation-text');\n\n    const explanationHeader = text.createChild('div', 'security-explanation-title');\n\n    if (explanation.title) {\n      explanationHeader.createChild('span').textContent = explanation.title + ' - ';\n      explanationHeader.createChild('span', 'security-explanation-title-' + explanation.securityState).textContent =\n          explanation.summary;\n    } else {\n      explanationHeader.textContent = explanation.summary;\n    }\n\n    text.createChild('div').textContent = explanation.description;\n\n    if (explanation.certificate.length) {\n      text.appendChild(SecurityPanel.createCertificateViewerButtonForCert(\n          i18nString(UIStrings.viewCertificate), explanation.certificate));\n    }\n\n    if (explanation.recommendations && explanation.recommendations.length) {\n      const recommendationList = text.createChild('ul', 'security-explanation-recommendations');\n      for (const recommendation of explanation.recommendations) {\n        recommendationList.createChild('li').textContent = recommendation;\n      }\n    }\n    return text;\n  }\n\n  updateVisibleSecurityState(visibleSecurityState: PageVisibleSecurityState): void {\n    // Remove old state.\n    // It's safe to call this even when this.securityState is undefined.\n    this.summarySection.classList.remove('security-summary-' + this.securityState);\n\n    // Add new state.\n    this.securityState = visibleSecurityState.securityState;\n    this.summarySection.classList.add('security-summary-' + this.securityState);\n\n    // Update the color and title of the triangle icon in the lock spectrum to\n    // match the security state.\n    if (this.securityState === Protocol.Security.SecurityState.Insecure) {\n      this.getLockSpectrumDiv(Protocol.Security.SecurityState.Insecure).classList.add('lock-icon-insecure');\n      this.getLockSpectrumDiv(Protocol.Security.SecurityState.Insecure).classList.remove('lock-icon-insecure-broken');\n      UI.Tooltip.Tooltip.install(\n          this.getLockSpectrumDiv(Protocol.Security.SecurityState.Insecure), i18nString(UIStrings.notSecure));\n    } else if (this.securityState === Protocol.Security.SecurityState.InsecureBroken) {\n      this.getLockSpectrumDiv(Protocol.Security.SecurityState.Insecure).classList.add('lock-icon-insecure-broken');\n      this.getLockSpectrumDiv(Protocol.Security.SecurityState.Insecure).classList.remove('lock-icon-insecure');\n      UI.Tooltip.Tooltip.install(\n          this.getLockSpectrumDiv(Protocol.Security.SecurityState.Insecure), i18nString(UIStrings.notSecureBroken));\n    }\n\n    const {summary, explanations} = this.getSecuritySummaryAndExplanations(visibleSecurityState);\n    // Use override summary if present, otherwise use base explanation\n    this.summaryText.textContent = summary || SummaryMessages[this.securityState]();\n\n    this.explanations = this.orderExplanations(explanations);\n\n    this.refreshExplanations();\n  }\n\n  private getSecuritySummaryAndExplanations(visibleSecurityState: PageVisibleSecurityState):\n      {summary: (string|undefined), explanations: Array<SecurityStyleExplanation>} {\n    const {securityState, securityStateIssueIds} = visibleSecurityState;\n    let summary;\n    const explanations: SecurityStyleExplanation[] = [];\n    summary = this.explainSafetyTipSecurity(visibleSecurityState, summary, explanations);\n    if (securityStateIssueIds.includes('malicious-content')) {\n      summary = i18nString(UIStrings.thisPageIsDangerousFlaggedBy);\n      // Always insert SafeBrowsing explanation at the front.\n      explanations.unshift(new SecurityStyleExplanation(\n          Protocol.Security.SecurityState.Insecure, undefined, i18nString(UIStrings.flaggedByGoogleSafeBrowsing),\n          i18nString(UIStrings.toCheckThisPagesStatusVisit)));\n    } else if (\n        securityStateIssueIds.includes('is-error-page') &&\n        (visibleSecurityState.certificateSecurityState === null ||\n         visibleSecurityState.certificateSecurityState.certificateNetworkError === null)) {\n      summary = i18nString(UIStrings.thisIsAnErrorPage);\n      // In the case of a non cert error page, we usually don't have a\n      // certificate, connection, or content that needs to be explained, e.g. in\n      // the case of a net error, so we can early return.\n      return {summary, explanations};\n    } else if (\n        securityState === Protocol.Security.SecurityState.InsecureBroken &&\n        securityStateIssueIds.includes('scheme-is-not-cryptographic')) {\n      summary = summary || i18nString(UIStrings.thisPageIsInsecureUnencrypted);\n    }\n\n    if (securityStateIssueIds.includes('scheme-is-not-cryptographic')) {\n      if (securityState === Protocol.Security.SecurityState.Neutral &&\n          !securityStateIssueIds.includes('insecure-origin')) {\n        summary = i18nString(UIStrings.thisPageHasANonhttpsSecureOrigin);\n      }\n      return {summary, explanations};\n    }\n\n    this.explainCertificateSecurity(visibleSecurityState, explanations);\n    this.explainConnectionSecurity(visibleSecurityState, explanations);\n    this.explainContentSecurity(visibleSecurityState, explanations);\n    return {summary, explanations};\n  }\n\n  private explainSafetyTipSecurity(\n      visibleSecurityState: PageVisibleSecurityState, summary: string|undefined,\n      explanations: SecurityStyleExplanation[]): string|undefined {\n    const {securityStateIssueIds, safetyTipInfo} = visibleSecurityState;\n    const currentExplanations = [];\n\n    if (securityStateIssueIds.includes('bad_reputation')) {\n      const formatedDescription = `${i18nString(UIStrings.chromeHasDeterminedThatThisSiteS)}\\n\\n${\n          i18nString(UIStrings.ifYouBelieveThisIsShownIn)}`;\n      currentExplanations.push({\n        summary: i18nString(UIStrings.thisPageIsSuspicious),\n        description: formatedDescription,\n      });\n    } else if (securityStateIssueIds.includes('lookalike') && safetyTipInfo && safetyTipInfo.safeUrl) {\n      const hostname = new URL(safetyTipInfo.safeUrl).hostname;\n      const hostnamePlaceholder = {PH1: hostname};\n      const formatedDescriptionSafety =\n          `${i18nString(UIStrings.thisSitesHostnameLooksSimilarToP, hostnamePlaceholder)}\\n\\n${\n              i18nString(UIStrings.ifYouBelieveThisIsShownInErrorSafety)}`;\n      currentExplanations.push(\n          {summary: i18nString(UIStrings.possibleSpoofingUrl), description: formatedDescriptionSafety});\n    }\n\n    if (currentExplanations.length > 0) {\n      // To avoid overwriting SafeBrowsing's title, set the main summary only if\n      // it's empty. The title set here can be overridden by later checks (e.g.\n      // bad HTTP).\n      summary = summary || i18nString(UIStrings.thisPageIsSuspiciousFlaggedBy);\n      explanations.push(new SecurityStyleExplanation(\n          Protocol.Security.SecurityState.Insecure, undefined, currentExplanations[0].summary,\n          currentExplanations[0].description));\n    }\n    return summary;\n  }\n\n  private explainCertificateSecurity(\n      visibleSecurityState: PageVisibleSecurityState, explanations: SecurityStyleExplanation[]): void {\n    const {certificateSecurityState, securityStateIssueIds} = visibleSecurityState;\n    const title = i18nString(UIStrings.certificate);\n    if (certificateSecurityState && certificateSecurityState.certificateHasSha1Signature) {\n      const explanationSummary = i18nString(UIStrings.insecureSha);\n      const description = i18nString(UIStrings.theCertificateChainForThisSite);\n      if (certificateSecurityState.certificateHasWeakSignature) {\n        explanations.push(new SecurityStyleExplanation(\n            Protocol.Security.SecurityState.Insecure, title, explanationSummary, description,\n            certificateSecurityState.certificate, Protocol.Security.MixedContentType.None));\n      } else {\n        explanations.push(new SecurityStyleExplanation(\n            Protocol.Security.SecurityState.Neutral, title, explanationSummary, description,\n            certificateSecurityState.certificate, Protocol.Security.MixedContentType.None));\n      }\n    }\n\n    if (certificateSecurityState && securityStateIssueIds.includes('cert-missing-subject-alt-name')) {\n      explanations.push(new SecurityStyleExplanation(\n          Protocol.Security.SecurityState.Insecure, title, i18nString(UIStrings.subjectAlternativeNameMissing),\n          i18nString(UIStrings.theCertificateForThisSiteDoesNot), certificateSecurityState.certificate,\n          Protocol.Security.MixedContentType.None));\n    }\n\n    if (certificateSecurityState && certificateSecurityState.certificateNetworkError !== null) {\n      explanations.push(new SecurityStyleExplanation(\n          Protocol.Security.SecurityState.Insecure, title, i18nString(UIStrings.missing),\n          i18nString(UIStrings.thisSiteIsMissingAValidTrusted, {PH1: certificateSecurityState.certificateNetworkError}),\n          certificateSecurityState.certificate, Protocol.Security.MixedContentType.None));\n    } else if (certificateSecurityState && !certificateSecurityState.certificateHasSha1Signature) {\n      explanations.push(new SecurityStyleExplanation(\n          Protocol.Security.SecurityState.Secure, title, i18nString(UIStrings.validAndTrusted),\n          i18nString(UIStrings.theConnectionToThisSiteIsUsingA, {PH1: certificateSecurityState.issuer}),\n          certificateSecurityState.certificate, Protocol.Security.MixedContentType.None));\n    }\n\n    if (securityStateIssueIds.includes('pkp-bypassed')) {\n      explanations.push(new SecurityStyleExplanation(\n          Protocol.Security.SecurityState.Info, title, i18nString(UIStrings.publickeypinningBypassed),\n          i18nString(UIStrings.publickeypinningWasBypassedByA)));\n    }\n\n    if (certificateSecurityState && certificateSecurityState.isCertificateExpiringSoon()) {\n      explanations.push(new SecurityStyleExplanation(\n          Protocol.Security.SecurityState.Info, undefined, i18nString(UIStrings.certificateExpiresSoon),\n          i18nString(UIStrings.theCertificateForThisSiteExpires)));\n    }\n  }\n\n  private explainConnectionSecurity(\n      visibleSecurityState: PageVisibleSecurityState, explanations: SecurityStyleExplanation[]): void {\n    const certificateSecurityState = visibleSecurityState.certificateSecurityState;\n    if (!certificateSecurityState) {\n      return;\n    }\n\n    const title = i18nString(UIStrings.connection);\n    if (certificateSecurityState.modernSSL) {\n      explanations.push(new SecurityStyleExplanation(\n          Protocol.Security.SecurityState.Secure, title, i18nString(UIStrings.secureConnectionSettings),\n          i18nString(UIStrings.theConnectionToThisSiteIs, {\n            PH1: certificateSecurityState.protocol,\n            PH2: certificateSecurityState.getKeyExchangeName(),\n            PH3: certificateSecurityState.getCipherFullName(),\n          })));\n      return;\n    }\n\n    const recommendations = [];\n    if (certificateSecurityState.obsoleteSslProtocol) {\n      recommendations.push(i18nString(UIStrings.sIsObsoleteEnableTlsOrLater, {PH1: certificateSecurityState.protocol}));\n    }\n    if (certificateSecurityState.obsoleteSslKeyExchange) {\n      recommendations.push(i18nString(UIStrings.rsaKeyExchangeIsObsoleteEnableAn));\n    }\n    if (certificateSecurityState.obsoleteSslCipher) {\n      recommendations.push(\n          i18nString(UIStrings.sIsObsoleteEnableAnAesgcmbased, {PH1: certificateSecurityState.cipher}));\n    }\n    if (certificateSecurityState.obsoleteSslSignature) {\n      recommendations.push(i18nString(UIStrings.theServerSignatureUsesShaWhichIs));\n    }\n\n    explanations.push(new SecurityStyleExplanation(\n        Protocol.Security.SecurityState.Info, title, i18nString(UIStrings.obsoleteConnectionSettings),\n        i18nString(UIStrings.theConnectionToThisSiteIs, {\n          PH1: certificateSecurityState.protocol,\n          PH2: certificateSecurityState.getKeyExchangeName(),\n          PH3: certificateSecurityState.getCipherFullName(),\n        }),\n        undefined, undefined, recommendations));\n  }\n\n  private explainContentSecurity(\n      visibleSecurityState: PageVisibleSecurityState, explanations: SecurityStyleExplanation[]): void {\n    // Add the secure explanation unless there is an issue.\n    let addSecureExplanation = true;\n    const title = i18nString(UIStrings.resources);\n    const securityStateIssueIds = visibleSecurityState.securityStateIssueIds;\n\n    if (securityStateIssueIds.includes('ran-mixed-content')) {\n      addSecureExplanation = false;\n      explanations.push(new SecurityStyleExplanation(\n          Protocol.Security.SecurityState.Insecure, title, i18nString(UIStrings.activeMixedContent),\n          i18nString(UIStrings.youHaveRecentlyAllowedNonsecure), [], Protocol.Security.MixedContentType.Blockable));\n    }\n\n    if (securityStateIssueIds.includes('displayed-mixed-content')) {\n      addSecureExplanation = false;\n      explanations.push(new SecurityStyleExplanation(\n          Protocol.Security.SecurityState.Neutral, title, i18nString(UIStrings.mixedContent),\n          i18nString(UIStrings.thisPageIncludesHttpResources), [],\n          Protocol.Security.MixedContentType.OptionallyBlockable));\n    }\n\n    if (securityStateIssueIds.includes('contained-mixed-form')) {\n      addSecureExplanation = false;\n      explanations.push(new SecurityStyleExplanation(\n          Protocol.Security.SecurityState.Neutral, title, i18nString(UIStrings.nonsecureForm),\n          i18nString(UIStrings.thisPageIncludesAFormWithA)));\n    }\n\n    if (visibleSecurityState.certificateSecurityState === null ||\n        visibleSecurityState.certificateSecurityState.certificateNetworkError === null) {\n      if (securityStateIssueIds.includes('ran-content-with-cert-error')) {\n        addSecureExplanation = false;\n        explanations.push(new SecurityStyleExplanation(\n            Protocol.Security.SecurityState.Insecure, title, i18nString(UIStrings.activeContentWithCertificate),\n            i18nString(UIStrings.youHaveRecentlyAllowedContent)));\n      }\n\n      if (securityStateIssueIds.includes('displayed-content-with-cert-errors')) {\n        addSecureExplanation = false;\n        explanations.push(new SecurityStyleExplanation(\n            Protocol.Security.SecurityState.Neutral, title, i18nString(UIStrings.contentWithCertificateErrors),\n            i18nString(UIStrings.thisPageIncludesResourcesThat)));\n      }\n    }\n\n    if (addSecureExplanation) {\n      if (!securityStateIssueIds.includes('scheme-is-not-cryptographic')) {\n        explanations.push(new SecurityStyleExplanation(\n            Protocol.Security.SecurityState.Secure, title, i18nString(UIStrings.allServedSecurely),\n            i18nString(UIStrings.allResourcesOnThisPageAreServed)));\n      }\n    }\n  }\n\n  private orderExplanations(explanations: SecurityStyleExplanation[]): SecurityStyleExplanation[] {\n    if (explanations.length === 0) {\n      return explanations;\n    }\n    const securityStateOrder = [\n      Protocol.Security.SecurityState.Insecure,\n      Protocol.Security.SecurityState.Neutral,\n      Protocol.Security.SecurityState.Secure,\n      Protocol.Security.SecurityState.Info,\n    ];\n    const orderedExplanations = [];\n    for (const securityState of securityStateOrder) {\n      orderedExplanations.push(...explanations.filter(explanation => explanation.securityState === securityState));\n    }\n    return orderedExplanations;\n  }\n\n  refreshExplanations(): void {\n    this.securityExplanationsMain.removeChildren();\n    this.securityExplanationsExtra.removeChildren();\n    if (!this.explanations) {\n      return;\n    }\n    for (const explanation of this.explanations) {\n      if (explanation.securityState === Protocol.Security.SecurityState.Info) {\n        this.addExplanation(this.securityExplanationsExtra, explanation);\n      } else {\n        switch (explanation.mixedContentType) {\n          case Protocol.Security.MixedContentType.Blockable:\n            this.addMixedContentExplanation(\n                this.securityExplanationsMain, explanation,\n                NetworkForward.UIFilter.MixedContentFilterValues.BlockOverridden);\n            break;\n          case Protocol.Security.MixedContentType.OptionallyBlockable:\n            this.addMixedContentExplanation(\n                this.securityExplanationsMain, explanation, NetworkForward.UIFilter.MixedContentFilterValues.Displayed);\n            break;\n          default:\n            this.addExplanation(this.securityExplanationsMain, explanation);\n            break;\n        }\n      }\n    }\n\n    if (this.panel.filterRequestCount(NetworkForward.UIFilter.MixedContentFilterValues.Blocked) > 0) {\n      const explanation = {\n        securityState: Protocol.Security.SecurityState.Info,\n        summary: i18nString(UIStrings.blockedMixedContent),\n        description: i18nString(UIStrings.yourPageRequestedNonsecure),\n        mixedContentType: Protocol.Security.MixedContentType.Blockable,\n        certificate: [],\n        title: '',\n      } as Protocol.Security.SecurityStateExplanation;\n      this.addMixedContentExplanation(\n          this.securityExplanationsMain, explanation, NetworkForward.UIFilter.MixedContentFilterValues.Blocked);\n    }\n  }\n\n  private addMixedContentExplanation(\n      parent: Element, explanation: Protocol.Security.SecurityStateExplanation|SecurityStyleExplanation,\n      filterKey: string): void {\n    const element = this.addExplanation(parent, explanation);\n\n    const filterRequestCount = this.panel.filterRequestCount(filterKey);\n    if (!filterRequestCount) {\n      // Network instrumentation might not have been enabled for the page\n      // load, so the security panel does not necessarily know a count of\n      // individual mixed requests at this point. Prompt them to refresh\n      // instead of pointing them to the Network panel to get prompted\n      // to refresh.\n      const refreshPrompt = element.createChild('div', 'security-mixed-content');\n      refreshPrompt.textContent = i18nString(UIStrings.reloadThePageToRecordRequestsFor);\n      return;\n    }\n\n    const requestsAnchor = element.createChild('div', 'security-mixed-content devtools-link') as HTMLElement;\n    UI.ARIAUtils.markAsLink(requestsAnchor);\n    requestsAnchor.tabIndex = 0;\n    requestsAnchor.textContent = i18nString(UIStrings.viewDRequestsInNetworkPanel, {n: filterRequestCount});\n\n    requestsAnchor.addEventListener('click', this.showNetworkFilter.bind(this, filterKey));\n    requestsAnchor.addEventListener('keydown', event => {\n      if (event.key === 'Enter') {\n        this.showNetworkFilter(filterKey, event);\n      }\n    });\n  }\n\n  showNetworkFilter(filterKey: string, e: Event): void {\n    e.consume();\n    void Common.Revealer.reveal(NetworkForward.UIFilter.UIRequestFilter.filters(\n        [{filterType: NetworkForward.UIFilter.FilterType.MixedContent, filterValue: filterKey}]));\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([lockIconStyles, mainViewStyles]);\n  }\n}\n\nexport class SecurityOriginView extends UI.Widget.VBox {\n  private readonly panel: SecurityPanel;\n  private readonly originLockIcon: HTMLElement;\n  constructor(panel: SecurityPanel, origin: Platform.DevToolsPath.UrlString, originState: OriginState) {\n    super();\n    this.panel = panel;\n    this.setMinimumSize(200, 100);\n\n    this.element.classList.add('security-origin-view');\n\n    const titleSection = this.element.createChild('div', 'title-section');\n    const titleDiv = titleSection.createChild('div', 'title-section-header');\n    titleDiv.textContent = i18nString(UIStrings.origin);\n    UI.ARIAUtils.markAsHeading(titleDiv, 1);\n\n    const originDisplay = titleSection.createChild('div', 'origin-display');\n    this.originLockIcon = originDisplay.createChild('span', 'security-property');\n    this.originLockIcon.classList.add('security-property-' + originState.securityState);\n\n    originDisplay.appendChild(SecurityPanel.createHighlightedUrl(origin, originState.securityState));\n\n    const originNetworkDiv = titleSection.createChild('div', 'view-network-button');\n    const originNetworkButton = UI.UIUtils.createTextButton(i18nString(UIStrings.viewRequestsInNetworkPanel), event => {\n      event.consume();\n      const parsedURL = new Common.ParsedURL.ParsedURL(origin);\n      void Common.Revealer.reveal(NetworkForward.UIFilter.UIRequestFilter.filters([\n        {filterType: NetworkForward.UIFilter.FilterType.Domain, filterValue: parsedURL.host},\n        {filterType: NetworkForward.UIFilter.FilterType.Scheme, filterValue: parsedURL.scheme},\n      ]));\n    });\n    originNetworkDiv.appendChild(originNetworkButton);\n    UI.ARIAUtils.markAsLink(originNetworkButton);\n\n    if (originState.securityDetails) {\n      const connectionSection = this.element.createChild('div', 'origin-view-section');\n      const connectionDiv = connectionSection.createChild('div', 'origin-view-section-title');\n      connectionDiv.textContent = i18nString(UIStrings.connection);\n      UI.ARIAUtils.markAsHeading(connectionDiv, 2);\n\n      let table: SecurityDetailsTable = new SecurityDetailsTable();\n      connectionSection.appendChild(table.element());\n      table.addRow(i18nString(UIStrings.protocol), originState.securityDetails.protocol);\n      if (originState.securityDetails.keyExchange) {\n        table.addRow(i18nString(UIStrings.keyExchange), originState.securityDetails.keyExchange);\n      }\n      if (originState.securityDetails.keyExchangeGroup) {\n        table.addRow(i18nString(UIStrings.keyExchangeGroup), originState.securityDetails.keyExchangeGroup);\n      }\n      table.addRow(\n          i18nString(UIStrings.cipher),\n          originState.securityDetails.cipher +\n              (originState.securityDetails.mac ? ' with ' + originState.securityDetails.mac : ''));\n\n      // Create the certificate section outside the callback, so that it appears in the right place.\n      const certificateSection = this.element.createChild('div', 'origin-view-section');\n      const certificateDiv = certificateSection.createChild('div', 'origin-view-section-title');\n      certificateDiv.textContent = i18nString(UIStrings.certificate);\n      UI.ARIAUtils.markAsHeading(certificateDiv, 2);\n\n      const sctListLength = originState.securityDetails.signedCertificateTimestampList.length;\n      const ctCompliance = originState.securityDetails.certificateTransparencyCompliance;\n      let sctSection;\n      if (sctListLength || ctCompliance !== Protocol.Network.CertificateTransparencyCompliance.Unknown) {\n        // Create the Certificate Transparency section outside the callback, so that it appears in the right place.\n        sctSection = this.element.createChild('div', 'origin-view-section');\n        const sctDiv = sctSection.createChild('div', 'origin-view-section-title');\n        sctDiv.textContent = i18nString(UIStrings.certificateTransparency);\n        UI.ARIAUtils.markAsHeading(sctDiv, 2);\n      }\n\n      const sanDiv = this.createSanDiv(originState.securityDetails.sanList);\n      const validFromString = new Date(1000 * originState.securityDetails.validFrom).toUTCString();\n      const validUntilString = new Date(1000 * originState.securityDetails.validTo).toUTCString();\n\n      table = new SecurityDetailsTable();\n      certificateSection.appendChild(table.element());\n      table.addRow(i18nString(UIStrings.subject), originState.securityDetails.subjectName);\n      table.addRow(i18n.i18n.lockedString('SAN'), sanDiv);\n      table.addRow(i18nString(UIStrings.validFrom), validFromString);\n      table.addRow(i18nString(UIStrings.validUntil), validUntilString);\n      table.addRow(i18nString(UIStrings.issuer), originState.securityDetails.issuer);\n\n      table.addRow(\n          '',\n          SecurityPanel.createCertificateViewerButtonForOrigin(\n              i18nString(UIStrings.openFullCertificateDetails), origin));\n\n      if (!sctSection) {\n        return;\n      }\n\n      // Show summary of SCT(s) of Certificate Transparency.\n      const sctSummaryTable = new SecurityDetailsTable();\n      sctSummaryTable.element().classList.add('sct-summary');\n      sctSection.appendChild(sctSummaryTable.element());\n      for (let i = 0; i < sctListLength; i++) {\n        const sct = originState.securityDetails.signedCertificateTimestampList[i];\n        sctSummaryTable.addRow(\n            i18nString(UIStrings.sct), sct.logDescription + ' (' + sct.origin + ', ' + sct.status + ')');\n      }\n\n      // Show detailed SCT(s) of Certificate Transparency.\n      const sctTableWrapper = sctSection.createChild('div', 'sct-details');\n      sctTableWrapper.classList.add('hidden');\n      for (let i = 0; i < sctListLength; i++) {\n        const sctTable = new SecurityDetailsTable();\n        sctTableWrapper.appendChild(sctTable.element());\n        const sct = originState.securityDetails.signedCertificateTimestampList[i];\n        sctTable.addRow(i18nString(UIStrings.logName), sct.logDescription);\n        sctTable.addRow(i18nString(UIStrings.logId), sct.logId.replace(/(.{2})/g, '$1 '));\n        sctTable.addRow(i18nString(UIStrings.validationStatus), sct.status);\n        sctTable.addRow(i18nString(UIStrings.source), sct.origin);\n        sctTable.addRow(i18nString(UIStrings.issuedAt), new Date(sct.timestamp).toUTCString());\n        sctTable.addRow(i18nString(UIStrings.hashAlgorithm), sct.hashAlgorithm);\n        sctTable.addRow(i18nString(UIStrings.signatureAlgorithm), sct.signatureAlgorithm);\n        sctTable.addRow(i18nString(UIStrings.signatureData), sct.signatureData.replace(/(.{2})/g, '$1 '));\n      }\n\n      // Add link to toggle between displaying of the summary of the SCT(s) and the detailed SCT(s).\n      if (sctListLength) {\n        function toggleSctDetailsDisplay(): void {\n          let buttonText;\n          const isDetailsShown = !sctTableWrapper.classList.contains('hidden');\n          if (isDetailsShown) {\n            buttonText = i18nString(UIStrings.showFullDetails);\n          } else {\n            buttonText = i18nString(UIStrings.hideFullDetails);\n          }\n          toggleSctsDetailsLink.textContent = buttonText;\n          UI.ARIAUtils.setAccessibleName(toggleSctsDetailsLink, buttonText);\n          UI.ARIAUtils.setExpanded(toggleSctsDetailsLink, !isDetailsShown);\n          sctSummaryTable.element().classList.toggle('hidden');\n          sctTableWrapper.classList.toggle('hidden');\n        }\n        const toggleSctsDetailsLink = UI.UIUtils.createTextButton(\n            i18nString(UIStrings.showFullDetails), toggleSctDetailsDisplay, 'details-toggle');\n        sctSection.appendChild(toggleSctsDetailsLink);\n      }\n\n      switch (ctCompliance) {\n        case Protocol.Network.CertificateTransparencyCompliance.Compliant:\n          sctSection.createChild('div', 'origin-view-section-notes').textContent =\n              i18nString(UIStrings.thisRequestCompliesWithChromes);\n          break;\n        case Protocol.Network.CertificateTransparencyCompliance.NotCompliant:\n          sctSection.createChild('div', 'origin-view-section-notes').textContent =\n              i18nString(UIStrings.thisRequestDoesNotComplyWith);\n          break;\n        case Protocol.Network.CertificateTransparencyCompliance.Unknown:\n          break;\n      }\n\n      const noteSection = this.element.createChild('div', 'origin-view-section origin-view-notes');\n      if (originState.loadedFromCache) {\n        noteSection.createChild('div').textContent = i18nString(UIStrings.thisResponseWasLoadedFromCache);\n      }\n      noteSection.createChild('div').textContent = i18nString(UIStrings.theSecurityDetailsAboveAreFrom);\n    } else if (originState.securityState === Protocol.Security.SecurityState.Secure) {\n      // If the security state is secure but there are no security details,\n      // this means that the origin is a non-cryptographic secure origin, e.g.\n      // chrome:// or about:.\n      const secureSection = this.element.createChild('div', 'origin-view-section');\n      const secureDiv = secureSection.createChild('div', 'origin-view-section-title');\n      secureDiv.textContent = i18nString(UIStrings.secure);\n      UI.ARIAUtils.markAsHeading(secureDiv, 2);\n      secureSection.createChild('div').textContent = i18nString(UIStrings.thisOriginIsANonhttpsSecure);\n    } else if (originState.securityState !== Protocol.Security.SecurityState.Unknown) {\n      const notSecureSection = this.element.createChild('div', 'origin-view-section');\n      const notSecureDiv = notSecureSection.createChild('div', 'origin-view-section-title');\n      notSecureDiv.textContent = i18nString(UIStrings.notSecure);\n      UI.ARIAUtils.markAsHeading(notSecureDiv, 2);\n      notSecureSection.createChild('div').textContent = i18nString(UIStrings.yourConnectionToThisOriginIsNot);\n    } else {\n      const noInfoSection = this.element.createChild('div', 'origin-view-section');\n      const noInfoDiv = noInfoSection.createChild('div', 'origin-view-section-title');\n      noInfoDiv.textContent = i18nString(UIStrings.noSecurityInformation);\n      UI.ARIAUtils.markAsHeading(noInfoDiv, 2);\n      noInfoSection.createChild('div').textContent = i18nString(UIStrings.noSecurityDetailsAreAvailableFor);\n    }\n  }\n\n  private createSanDiv(sanList: string[]): Element {\n    const sanDiv = document.createElement('div');\n    if (sanList.length === 0) {\n      sanDiv.textContent = i18nString(UIStrings.na);\n      sanDiv.classList.add('empty-san');\n    } else {\n      const truncatedNumToShow = 2;\n      const listIsTruncated = sanList.length > truncatedNumToShow + 1;\n      for (let i = 0; i < sanList.length; i++) {\n        const span = sanDiv.createChild('span', 'san-entry');\n        span.textContent = sanList[i];\n        if (listIsTruncated && i >= truncatedNumToShow) {\n          span.classList.add('truncated-entry');\n        }\n      }\n      if (listIsTruncated) {\n        function toggleSANTruncation(): void {\n          const isTruncated = sanDiv.classList.contains('truncated-san');\n          let buttonText;\n          if (isTruncated) {\n            sanDiv.classList.remove('truncated-san');\n            buttonText = i18nString(UIStrings.showLess);\n          } else {\n            sanDiv.classList.add('truncated-san');\n            buttonText = i18nString(UIStrings.showMoreSTotal, {PH1: sanList.length});\n          }\n          truncatedSANToggle.textContent = buttonText;\n          UI.ARIAUtils.setAccessibleName(truncatedSANToggle, buttonText);\n          UI.ARIAUtils.setExpanded(truncatedSANToggle, isTruncated);\n        }\n        const truncatedSANToggle = UI.UIUtils.createTextButton(\n            i18nString(UIStrings.showMoreSTotal, {PH1: sanList.length}), toggleSANTruncation);\n        sanDiv.appendChild(truncatedSANToggle);\n        toggleSANTruncation();\n      }\n    }\n    return sanDiv;\n  }\n\n  setSecurityState(newSecurityState: Protocol.Security.SecurityState): void {\n    for (const className of Array.prototype.slice.call(this.originLockIcon.classList)) {\n      if (className.startsWith('security-property-')) {\n        this.originLockIcon.classList.remove(className);\n      }\n    }\n\n    this.originLockIcon.classList.add('security-property-' + newSecurityState);\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([originViewStyles, lockIconStyles]);\n  }\n}\n\nexport class SecurityDetailsTable {\n  private readonly elementInternal: HTMLTableElement;\n\n  constructor() {\n    this.elementInternal = document.createElement('table');\n    this.elementInternal.classList.add('details-table');\n  }\n\n  element(): HTMLTableElement {\n    return this.elementInternal;\n  }\n\n  addRow(key: string, value: string|Node): void {\n    const row = this.elementInternal.createChild('div', 'details-table-row');\n    row.createChild('div').textContent = key;\n\n    const valueDiv = row.createChild('div');\n    if (typeof value === 'string') {\n      valueDiv.textContent = value;\n    } else {\n      valueDiv.appendChild(value);\n    }\n  }\n}\nexport interface OriginState {\n  securityState: Protocol.Security.SecurityState;\n  securityDetails: Protocol.Network.SecurityDetails|null;\n  loadedFromCache: boolean;\n  originView?: SecurityOriginView|null;\n}\n\nexport type Origin = Platform.DevToolsPath.UrlString;\n"],
  "mappings": "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",
  "names": []
}
