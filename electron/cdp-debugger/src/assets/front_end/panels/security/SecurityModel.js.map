{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/security/SecurityModel.ts"],
  "sourcesContent": ["// Copyright 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Security Panel of the Security panel\n  */\n  theSecurityOfThisPageIsUnknown: 'The security of this page is unknown.',\n  /**\n  *@description Text in Security Panel of the Security panel\n  */\n  thisPageIsNotSecure: 'This page is not secure.',\n  /**\n  *@description Text in Security Panel of the Security panel\n  */\n  thisPageIsSecureValidHttps: 'This page is secure (valid HTTPS).',\n  /**\n  *@description Text in Security Panel of the Security panel\n  */\n  thisPageIsNotSecureBrokenHttps: 'This page is not secure (broken HTTPS).',\n  /**\n  *@description Description of an SSL cipher that contains a separate (bulk) cipher and MAC.\n  *@example {AES_256_CBC} PH1\n  *@example {HMAC-SHA1} PH2\n  */\n  cipherWithMAC: '{PH1} with {PH2}',\n  /**\n  *@description Description of an SSL Key and its Key Exchange Group.\n  *@example {ECDHE_RSA} PH1\n  *@example {X25519} PH2\n  */\n  keyExchangeWithGroup: '{PH1} with {PH2}',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/security/SecurityModel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nexport class SecurityModel extends SDK.SDKModel.SDKModel<EventTypes> {\n  private readonly dispatcher: SecurityDispatcher;\n  private readonly securityAgent: ProtocolProxyApi.SecurityApi;\n  constructor(target: SDK.Target.Target) {\n    super(target);\n    this.dispatcher = new SecurityDispatcher(this);\n    this.securityAgent = target.securityAgent();\n    target.registerSecurityDispatcher(this.dispatcher);\n    void this.securityAgent.invoke_enable();\n  }\n\n  resourceTreeModel(): SDK.ResourceTreeModel.ResourceTreeModel {\n    return this.target().model(SDK.ResourceTreeModel.ResourceTreeModel) as SDK.ResourceTreeModel.ResourceTreeModel;\n  }\n\n  networkManager(): SDK.NetworkManager.NetworkManager {\n    return this.target().model(SDK.NetworkManager.NetworkManager) as SDK.NetworkManager.NetworkManager;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static SecurityStateComparator(a: Protocol.Security.SecurityState|null, b: Protocol.Security.SecurityState|null):\n      number {\n    const securityStateMap = getOrCreateSecurityStateOrdinalMap();\n    const aScore = a && securityStateMap.get(a) || 0;\n    const bScore = b && securityStateMap.get(b) || 0;\n\n    return aScore - bScore;\n  }\n}\nlet securityStateToOrdinal: Map<Protocol.Security.SecurityState, number>|null = null;\n\nconst getOrCreateSecurityStateOrdinalMap = (): Map<Protocol.Security.SecurityState, number> => {\n  if (!securityStateToOrdinal) {\n    securityStateToOrdinal = new Map();\n    const ordering = [\n      Protocol.Security.SecurityState.Info,\n      Protocol.Security.SecurityState.InsecureBroken,\n      Protocol.Security.SecurityState.Insecure,\n      Protocol.Security.SecurityState.Neutral,\n      Protocol.Security.SecurityState.Secure,\n      // Unknown is max so that failed/cancelled requests don't overwrite the origin security state for successful requests,\n      // and so that failed/cancelled requests appear at the bottom of the origins list.\n      Protocol.Security.SecurityState.Unknown,\n    ];\n    for (let i = 0; i < ordering.length; i++) {\n      securityStateToOrdinal.set(ordering[i], i + 1);\n    }\n  }\n  return securityStateToOrdinal;\n};\n\nSDK.SDKModel.SDKModel.register(SecurityModel, {capabilities: SDK.Target.Capability.Security, autostart: false});\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  VisibleSecurityStateChanged = 'VisibleSecurityStateChanged',\n}\n\nexport type EventTypes = {\n  [Events.VisibleSecurityStateChanged]: PageVisibleSecurityState,\n};\n\nexport const SummaryMessages: {[x: string]: () => string} = {\n  [Protocol.Security.SecurityState.Unknown]: i18nLazyString(UIStrings.theSecurityOfThisPageIsUnknown),\n  [Protocol.Security.SecurityState.Insecure]: i18nLazyString(UIStrings.thisPageIsNotSecure),\n  [Protocol.Security.SecurityState.Neutral]: i18nLazyString(UIStrings.thisPageIsNotSecure),\n  [Protocol.Security.SecurityState.Secure]: i18nLazyString(UIStrings.thisPageIsSecureValidHttps),\n  [Protocol.Security.SecurityState.InsecureBroken]: i18nLazyString(UIStrings.thisPageIsNotSecureBrokenHttps),\n};\n\nexport class PageVisibleSecurityState {\n  securityState: Protocol.Security.SecurityState;\n  certificateSecurityState: CertificateSecurityState|null;\n  safetyTipInfo: SafetyTipInfo|null;\n  securityStateIssueIds: string[];\n  constructor(\n      securityState: Protocol.Security.SecurityState,\n      certificateSecurityState: Protocol.Security.CertificateSecurityState|null,\n      safetyTipInfo: Protocol.Security.SafetyTipInfo|null, securityStateIssueIds: string[]) {\n    this.securityState = securityState;\n    this.certificateSecurityState =\n        certificateSecurityState ? new CertificateSecurityState(certificateSecurityState) : null;\n    this.safetyTipInfo = safetyTipInfo ? new SafetyTipInfo(safetyTipInfo) : null;\n    this.securityStateIssueIds = securityStateIssueIds;\n  }\n}\n\nexport class CertificateSecurityState {\n  protocol: string;\n  keyExchange: string;\n  keyExchangeGroup: string|null;\n  cipher: string;\n  mac: string|null;\n  certificate: string[];\n  subjectName: string;\n  issuer: string;\n  validFrom: number;\n  validTo: number;\n  certificateNetworkError: string|null;\n  certificateHasWeakSignature: boolean;\n  certificateHasSha1Signature: boolean;\n  modernSSL: boolean;\n  obsoleteSslProtocol: boolean;\n  obsoleteSslKeyExchange: boolean;\n  obsoleteSslCipher: boolean;\n  obsoleteSslSignature: boolean;\n  constructor(certificateSecurityState: Protocol.Security.CertificateSecurityState) {\n    this.protocol = certificateSecurityState.protocol;\n    this.keyExchange = certificateSecurityState.keyExchange;\n    this.keyExchangeGroup = certificateSecurityState.keyExchangeGroup || null;\n    this.cipher = certificateSecurityState.cipher;\n    this.mac = certificateSecurityState.mac || null;\n    this.certificate = certificateSecurityState.certificate;\n    this.subjectName = certificateSecurityState.subjectName;\n    this.issuer = certificateSecurityState.issuer;\n    this.validFrom = certificateSecurityState.validFrom;\n    this.validTo = certificateSecurityState.validTo;\n    this.certificateNetworkError = certificateSecurityState.certificateNetworkError || null;\n    this.certificateHasWeakSignature = certificateSecurityState.certificateHasWeakSignature;\n    this.certificateHasSha1Signature = certificateSecurityState.certificateHasSha1Signature;\n    this.modernSSL = certificateSecurityState.modernSSL;\n    this.obsoleteSslProtocol = certificateSecurityState.obsoleteSslProtocol;\n    this.obsoleteSslKeyExchange = certificateSecurityState.obsoleteSslKeyExchange;\n    this.obsoleteSslCipher = certificateSecurityState.obsoleteSslCipher;\n    this.obsoleteSslSignature = certificateSecurityState.obsoleteSslSignature;\n  }\n\n  isCertificateExpiringSoon(): boolean {\n    const expiryDate = new Date(this.validTo * 1000).getTime();\n    return (expiryDate < new Date(Date.now()).setHours(48)) && (expiryDate > Date.now());\n  }\n\n  getKeyExchangeName(): string {\n    if (this.keyExchangeGroup) {\n      return this.keyExchange ?\n          i18nString(UIStrings.keyExchangeWithGroup, {PH1: this.keyExchange, PH2: this.keyExchangeGroup}) :\n          this.keyExchangeGroup;\n    }\n    return this.keyExchange;\n  }\n\n  getCipherFullName(): string {\n    return this.mac ? i18nString(UIStrings.cipherWithMAC, {PH1: this.cipher, PH2: this.mac}) : this.cipher;\n  }\n}\n\nclass SafetyTipInfo {\n  safetyTipStatus: string;\n  safeUrl: string|null;\n  constructor(safetyTipInfo: Protocol.Security.SafetyTipInfo) {\n    this.safetyTipStatus = safetyTipInfo.safetyTipStatus;\n    this.safeUrl = safetyTipInfo.safeUrl || null;\n  }\n}\n\nexport class SecurityStyleExplanation {\n  securityState: Protocol.Security.SecurityState;\n  title: string|undefined;\n  summary: string;\n  description: string;\n  certificate: string[];\n  mixedContentType: Protocol.Security.MixedContentType;\n  recommendations: string[];\n  constructor(\n      securityState: Protocol.Security.SecurityState, title: string|undefined, summary: string, description: string,\n      certificate: string[]|undefined = [],\n      mixedContentType: Protocol.Security.MixedContentType|undefined = Protocol.Security.MixedContentType.None,\n      recommendations: string[]|undefined = []) {\n    this.securityState = securityState;\n    this.title = title;\n    this.summary = summary;\n    this.description = description;\n    this.certificate = certificate;\n    this.mixedContentType = mixedContentType;\n    this.recommendations = recommendations;\n  }\n}\n\nclass SecurityDispatcher implements ProtocolProxyApi.SecurityDispatcher {\n  private readonly model: SecurityModel;\n  constructor(model: SecurityModel) {\n    this.model = model;\n  }\n\n  securityStateChanged(_event: Protocol.Security.SecurityStateChangedEvent): void {\n  }\n\n  visibleSecurityStateChanged({visibleSecurityState}: Protocol.Security.VisibleSecurityStateChangedEvent): void {\n    const pageVisibleSecurityState = new PageVisibleSecurityState(\n        visibleSecurityState.securityState, visibleSecurityState.certificateSecurityState || null,\n        visibleSecurityState.safetyTipInfo || null, visibleSecurityState.securityStateIssueIds);\n    this.model.dispatchEventToListeners(Events.VisibleSecurityStateChanged, pageVisibleSecurityState);\n  }\n\n  certificateError(_event: Protocol.Security.CertificateErrorEvent): void {\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
