{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/timeline/TimelineFlameChartView.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as TimelineModel from '../../models/timeline_model/timeline_model.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {CountersGraph} from './CountersGraph.js';\nimport type {PerformanceModel, WindowChangedEvent} from './PerformanceModel.js';\nimport {Events as PerformanceModelEvents} from './PerformanceModel.js';\nimport {TimelineDetailsView} from './TimelineDetailsView.js';\nimport {TimelineRegExp} from './TimelineFilters.js';\nimport {\n  Events as TimelineFlameChartDataProviderEvents,\n  TimelineFlameChartDataProvider,\n} from './TimelineFlameChartDataProvider.js';\nimport {TimelineFlameChartNetworkDataProvider} from './TimelineFlameChartNetworkDataProvider.js';\nimport type {TimelineModeViewDelegate} from './TimelinePanel.js';\nimport {TimelineSelection} from './TimelinePanel.js';\nimport {AggregatedTimelineTreeView} from './TimelineTreeView.js';\nimport type {TimelineMarkerStyle} from './TimelineUIUtils.js';\nimport {TimelineUIUtils} from './TimelineUIUtils.js';\nimport {WebVitalsIntegrator} from './WebVitalsTimelineUtils.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Timeline Flame Chart View of the Performance panel\n  *@example {Frame} PH1\n  *@example {10ms} PH2\n  */\n  sAtS: '{PH1} at {PH2}',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/TimelineFlameChartView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nclass MainSplitWidget extends UI.SplitWidget.SplitWidget {\n  private webVitals!: WebVitalsIntegrator;\n  private model!: PerformanceModel|null;\n  constructor(\n      isVertical: boolean, secondIsSidebar: boolean, settingName?: string, defaultSidebarWidth?: number,\n      defaultSidebarHeight?: number, constraintsInDip?: boolean) {\n    super(isVertical, secondIsSidebar, settingName, defaultSidebarWidth, defaultSidebarHeight, constraintsInDip);\n  }\n\n  setWebVitals(webVitals: WebVitalsIntegrator): void {\n    this.webVitals = webVitals;\n    this.webVitals.setMinimumSize(0, 120);\n  }\n\n  setWindowTimes(left: number, right: number, animate: boolean): void {\n    if (!this.webVitals) {\n      return;\n    }\n\n    const startTime = left - (this.model ? this.model.timelineModel().minimumRecordTime() : 0);\n    this.webVitals.chartViewport.setWindowTimes(left, right, animate);\n    this.webVitals.webVitalsTimeline.data = {\n      startTime: startTime,\n      duration: right - left,\n      fcps: undefined,\n      lcps: undefined,\n      layoutShifts: undefined,\n      longTasks: undefined,\n      mainFrameNavigations: undefined,\n      maxDuration: undefined,\n    };\n  }\n\n  setModelAndUpdateBoundaries(model: PerformanceModel|null): void {\n    this.model = model;\n    if (!this.webVitals || !model) {\n      return;\n    }\n\n    const left = model.window().left;\n    const right = model.window().right;\n    const timelineModel = model.timelineModel();\n\n    const events: SDK.TracingModel.Event[] =\n        timelineModel.tracks().reduce((prev, curr) => prev.concat(curr.events), ([] as SDK.TracingModel.Event[]));\n    const minimumBoundary = model.timelineModel().minimumRecordTime();\n\n    const prepareEvents = (filterFunction: (arg0: SDK.TracingModel.Event) => boolean): number[] =>\n        events.filter(filterFunction).map(e => e.startTime - minimumBoundary);\n\n    const lcpEvents = events.filter(e => timelineModel.isLCPCandidateEvent(e) || timelineModel.isLCPInvalidateEvent(e));\n    const lcpEventsByNavigationId = new Map<string, SDK.TracingModel.Event>();\n    for (const e of lcpEvents) {\n      const navigationId = e.args['data']['navigationId'];\n      const previousLastEvent = lcpEventsByNavigationId.get(navigationId);\n      if (!previousLastEvent || previousLastEvent.args['data']['candidateIndex'] < e.args['data']['candidateIndex']) {\n        lcpEventsByNavigationId.set(navigationId, e);\n      }\n    }\n\n    const latestLcpCandidatesByNavigationId = Array.from(lcpEventsByNavigationId.values());\n    const latestLcpEvents = latestLcpCandidatesByNavigationId.filter(e => timelineModel.isLCPCandidateEvent(e));\n\n    const longTasks =\n        events.filter(e => SDK.TracingModel.TracingModel.isCompletePhase(e.phase) && timelineModel.isLongRunningTask(e))\n            .map(e => ({start: e.startTime - minimumBoundary, duration: e.duration || 0}));\n\n    this.webVitals.chartViewport.setBoundaries(left, right - left);\n\n    this.webVitals.chartViewport.setWindowTimes(left, right);\n\n    const startTime = left - (this.model ? this.model.timelineModel().minimumRecordTime() : 0);\n    this.webVitals.webVitalsTimeline.data = {\n      startTime: startTime,\n      duration: right - left,\n      maxDuration: timelineModel.maximumRecordTime(),\n      fcps: events.filter(e => timelineModel.isFCPEvent(e)).map(e => ({timestamp: e.startTime - minimumBoundary, e})),\n      lcps: latestLcpEvents.map(e => e.startTime).map(t => ({timestamp: t - minimumBoundary})),\n      layoutShifts: prepareEvents(e => timelineModel.isLayoutShiftEvent(e)).map(t => ({timestamp: t})),\n      longTasks,\n      mainFrameNavigations: prepareEvents(e => timelineModel.isMainFrameNavigationStartEvent(e)),\n    };\n  }\n}\n\nexport class TimelineFlameChartView extends UI.Widget.VBox implements PerfUI.FlameChart.FlameChartDelegate,\n                                                                      UI.SearchableView.Searchable {\n  private readonly delegate: TimelineModeViewDelegate;\n  private model: PerformanceModel|null;\n  private searchResults!: number[]|undefined;\n  private eventListeners: Common.EventTarget.EventDescriptor[];\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private readonly showMemoryGraphSetting: Common.Settings.Setting<any>;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private readonly showWebVitalsSetting: Common.Settings.Setting<any>;\n  private readonly networkSplitWidget: UI.SplitWidget.SplitWidget;\n  private mainDataProvider: TimelineFlameChartDataProvider;\n  private readonly mainFlameChart: PerfUI.FlameChart.FlameChart;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private readonly networkFlameChartGroupExpansionSetting: Common.Settings.Setting<any>;\n  private networkDataProvider: TimelineFlameChartNetworkDataProvider;\n  private readonly networkFlameChart: PerfUI.FlameChart.FlameChart;\n  private readonly networkPane: UI.Widget.VBox;\n  private readonly splitResizer: HTMLElement;\n  private readonly webVitals: WebVitalsIntegrator;\n  private readonly mainSplitWidget: MainSplitWidget;\n  private readonly chartSplitWidget: UI.SplitWidget.SplitWidget;\n  private readonly countersView: CountersGraph;\n  private readonly detailsSplitWidget: UI.SplitWidget.SplitWidget;\n  private readonly detailsView: TimelineDetailsView;\n  private readonly onMainEntrySelected: (event: Common.EventTarget.EventTargetEvent<number>) => void;\n  private readonly onNetworkEntrySelected: (event: Common.EventTarget.EventTargetEvent<number>) => void;\n  private nextExtensionIndex: number;\n  private readonly boundRefresh: () => void;\n  private selectedTrack: TimelineModel.TimelineModel.Track|null;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private readonly groupBySetting: Common.Settings.Setting<any>;\n  private searchableView!: UI.SearchableView.SearchableView;\n  private urlToColorCache?: Map<Platform.DevToolsPath.UrlString, string>;\n  private needsResizeToPreferredHeights?: boolean;\n  private selectedSearchResult?: number;\n  private searchRegex?: RegExp;\n  constructor(delegate: TimelineModeViewDelegate) {\n    super();\n    this.element.classList.add('timeline-flamechart');\n    this.delegate = delegate;\n    this.model = null;\n    this.eventListeners = [];\n\n    this.showMemoryGraphSetting = Common.Settings.Settings.instance().createSetting('timelineShowMemory', false);\n    this.showWebVitalsSetting = Common.Settings.Settings.instance().createSetting('timelineWebVitals', false);\n\n    // Create main and network flamecharts.\n    this.networkSplitWidget = new UI.SplitWidget.SplitWidget(false, false, 'timelineFlamechartMainView', 150);\n\n    // Ensure that the network panel & resizer appears above the web vitals / main thread.\n    this.networkSplitWidget.sidebarElement().style.zIndex = '120';\n\n    const mainViewGroupExpansionSetting =\n        Common.Settings.Settings.instance().createSetting('timelineFlamechartMainViewGroupExpansion', {});\n    this.mainDataProvider = new TimelineFlameChartDataProvider();\n    this.mainDataProvider.addEventListener(\n        TimelineFlameChartDataProviderEvents.DataChanged, () => this.mainFlameChart.scheduleUpdate());\n    this.mainFlameChart = new PerfUI.FlameChart.FlameChart(this.mainDataProvider, this, mainViewGroupExpansionSetting);\n    this.mainFlameChart.alwaysShowVerticalScroll();\n    this.mainFlameChart.enableRuler(false);\n\n    this.networkFlameChartGroupExpansionSetting =\n        Common.Settings.Settings.instance().createSetting('timelineFlamechartNetworkViewGroupExpansion', {});\n    this.networkDataProvider = new TimelineFlameChartNetworkDataProvider();\n    this.networkFlameChart =\n        new PerfUI.FlameChart.FlameChart(this.networkDataProvider, this, this.networkFlameChartGroupExpansionSetting);\n    this.networkFlameChart.alwaysShowVerticalScroll();\n    this.networkFlameChart.disableRangeSelection();\n\n    this.networkPane = new UI.Widget.VBox();\n    this.networkPane.setMinimumSize(23, 23);\n    this.networkFlameChart.show(this.networkPane.element);\n    this.splitResizer = this.networkPane.element.createChild('div', 'timeline-flamechart-resizer');\n    this.networkSplitWidget.hideDefaultResizer(true);\n    this.networkSplitWidget.installResizer(this.splitResizer);\n\n    this.webVitals = new WebVitalsIntegrator(this);\n\n    this.mainSplitWidget = new MainSplitWidget(false, false, 'timelineFlamechartMainAndVitalsView', undefined, 120);\n    this.mainSplitWidget.setWebVitals(this.webVitals);\n    this.mainSplitWidget.setMainWidget(this.mainFlameChart);\n    this.mainSplitWidget.setSidebarWidget(this.webVitals);\n    this.toggleWebVitalsLane();\n\n    this.networkSplitWidget.setMainWidget(this.mainSplitWidget);\n    this.networkSplitWidget.setSidebarWidget(this.networkPane);\n\n    // Create counters chart splitter.\n    this.chartSplitWidget = new UI.SplitWidget.SplitWidget(false, true, 'timelineCountersSplitViewState');\n    this.countersView = new CountersGraph(this.delegate);\n    this.chartSplitWidget.setMainWidget(this.networkSplitWidget);\n    this.chartSplitWidget.setSidebarWidget(this.countersView);\n    this.chartSplitWidget.hideDefaultResizer();\n    this.chartSplitWidget.installResizer((this.countersView.resizerElement() as Element));\n    this.updateCountersGraphToggle();\n\n    // Create top level properties splitter.\n    this.detailsSplitWidget = new UI.SplitWidget.SplitWidget(false, true, 'timelinePanelDetailsSplitViewState');\n    this.detailsSplitWidget.element.classList.add('timeline-details-split');\n    this.detailsView = new TimelineDetailsView(delegate);\n    this.detailsSplitWidget.installResizer(this.detailsView.headerElement());\n    this.detailsSplitWidget.setMainWidget(this.chartSplitWidget);\n    this.detailsSplitWidget.setSidebarWidget(this.detailsView);\n    this.detailsSplitWidget.show(this.element);\n\n    this.onMainEntrySelected = this.onEntrySelected.bind(this, this.mainDataProvider);\n    this.onNetworkEntrySelected = this.onEntrySelected.bind(this, this.networkDataProvider);\n    this.mainFlameChart.addEventListener(PerfUI.FlameChart.Events.EntrySelected, this.onMainEntrySelected, this);\n    this.mainFlameChart.addEventListener(PerfUI.FlameChart.Events.EntryInvoked, this.onMainEntrySelected, this);\n    this.networkFlameChart.addEventListener(PerfUI.FlameChart.Events.EntrySelected, this.onNetworkEntrySelected, this);\n    this.networkFlameChart.addEventListener(PerfUI.FlameChart.Events.EntryInvoked, this.onNetworkEntrySelected, this);\n    this.mainFlameChart.addEventListener(PerfUI.FlameChart.Events.EntryHighlighted, this.onEntryHighlighted, this);\n    this.nextExtensionIndex = 0;\n\n    this.boundRefresh = this.refresh.bind(this);\n    this.selectedTrack = null;\n\n    this.mainDataProvider.setEventColorMapping(TimelineUIUtils.eventColor);\n    this.groupBySetting = Common.Settings.Settings.instance().createSetting(\n        'timelineTreeGroupBy', AggregatedTimelineTreeView.GroupBy.None);\n    this.groupBySetting.addChangeListener(this.updateColorMapper, this);\n    this.updateColorMapper();\n  }\n\n  toggleWebVitalsLane(): void {\n    if (this.showWebVitalsSetting.get()) {\n      this.mainSplitWidget.showBoth();\n      this.mainSplitWidget.setSidebarSize(120);\n      this.mainSplitWidget.setResizable(false);\n      this.mainSplitWidget.hideDefaultResizer(true);\n    } else {\n      this.mainSplitWidget.hideSidebar();\n    }\n  }\n\n  private updateColorMapper(): void {\n    this.urlToColorCache = new Map();\n    if (!this.model) {\n      return;\n    }\n    this.mainDataProvider.setEventColorMapping(TimelineUIUtils.eventColor);\n    this.mainFlameChart.update();\n  }\n\n  private onWindowChanged(event: Common.EventTarget.EventTargetEvent<WindowChangedEvent>): void {\n    const {window, animate} = event.data;\n    this.mainFlameChart.setWindowTimes(window.left, window.right, animate);\n    this.networkFlameChart.setWindowTimes(window.left, window.right, animate);\n    this.networkDataProvider.setWindowTimes(window.left, window.right);\n    this.mainSplitWidget.setWindowTimes(window.left, window.right, Boolean(animate));\n    this.updateSearchResults(false, false);\n  }\n\n  windowChanged(windowStartTime: number, windowEndTime: number, animate: boolean): void {\n    if (this.model) {\n      this.model.setWindow({left: windowStartTime, right: windowEndTime}, animate);\n    }\n  }\n\n  updateRangeSelection(startTime: number, endTime: number): void {\n    this.delegate.select(TimelineSelection.fromRange(startTime, endTime));\n  }\n\n  updateSelectedGroup(flameChart: PerfUI.FlameChart.FlameChart, group: PerfUI.FlameChart.Group|null): void {\n    if (flameChart !== this.mainFlameChart) {\n      return;\n    }\n    const track = group ? this.mainDataProvider.groupTrack(group) : null;\n    this.selectedTrack = track;\n    this.updateTrack();\n  }\n\n  setModel(model: PerformanceModel|null): void {\n    if (model === this.model) {\n      return;\n    }\n    Common.EventTarget.removeEventListeners(this.eventListeners);\n    this.model = model;\n    this.selectedTrack = null;\n    this.mainDataProvider.setModel(this.model);\n    this.networkDataProvider.setModel(this.model);\n    if (this.model) {\n      this.eventListeners = [\n        this.model.addEventListener(PerformanceModelEvents.WindowChanged, this.onWindowChanged, this),\n        this.model.addEventListener(PerformanceModelEvents.ExtensionDataAdded, this.appendExtensionData, this),\n      ];\n      const window = this.model.window();\n      this.mainFlameChart.setWindowTimes(window.left, window.right);\n      this.networkFlameChart.setWindowTimes(window.left, window.right);\n      this.networkDataProvider.setWindowTimes(window.left, window.right);\n      this.mainSplitWidget.setModelAndUpdateBoundaries(model);\n      this.updateSearchResults(false, false);\n    }\n    this.updateColorMapper();\n    this.updateTrack();\n    this.nextExtensionIndex = 0;\n    this.appendExtensionData();\n    this.refresh();\n  }\n\n  private updateTrack(): void {\n    this.countersView.setModel(this.model, this.selectedTrack);\n    this.detailsView.setModel(this.model, this.selectedTrack);\n  }\n\n  private refresh(): void {\n    if (this.networkDataProvider.isEmpty()) {\n      this.mainFlameChart.enableRuler(true);\n      this.networkSplitWidget.hideSidebar();\n    } else {\n      this.mainFlameChart.enableRuler(false);\n      this.networkSplitWidget.showBoth();\n      this.resizeToPreferredHeights();\n    }\n    this.mainFlameChart.reset();\n    this.networkFlameChart.reset();\n    this.updateSearchResults(false, false);\n  }\n\n  private appendExtensionData(): void {\n    if (!this.model) {\n      return;\n    }\n    const extensions = this.model.extensionInfo();\n    while (this.nextExtensionIndex < extensions.length) {\n      this.mainDataProvider.appendExtensionEvents(extensions[this.nextExtensionIndex++]);\n    }\n    this.mainFlameChart.scheduleUpdate();\n  }\n\n  private onEntryHighlighted(commonEvent: Common.EventTarget.EventTargetEvent<number>): void {\n    SDK.OverlayModel.OverlayModel.hideDOMNodeHighlight();\n    const entryIndex = commonEvent.data;\n    const event = this.mainDataProvider.eventByIndex(entryIndex);\n    if (!event) {\n      return;\n    }\n    const target = this.model && this.model.timelineModel().targetByEvent(event);\n    if (!target) {\n      return;\n    }\n    const timelineData = TimelineModel.TimelineModel.TimelineData.forEvent(event);\n    const backendNodeIds = timelineData.backendNodeIds;\n    if (!backendNodeIds) {\n      return;\n    }\n    for (let i = 0; i < backendNodeIds.length; ++i) {\n      new SDK.DOMModel.DeferredDOMNode(target, backendNodeIds[i]).highlight();\n    }\n  }\n\n  highlightEvent(event: SDK.TracingModel.Event|null): void {\n    const entryIndex =\n        event ? this.mainDataProvider.entryIndexForSelection(TimelineSelection.fromTraceEvent(event)) : -1;\n    if (entryIndex >= 0) {\n      this.mainFlameChart.highlightEntry(entryIndex);\n    } else {\n      this.mainFlameChart.hideHighlight();\n    }\n  }\n\n  willHide(): void {\n    this.networkFlameChartGroupExpansionSetting.removeChangeListener(this.resizeToPreferredHeights, this);\n    this.showMemoryGraphSetting.removeChangeListener(this.updateCountersGraphToggle, this);\n    Bindings.IgnoreListManager.IgnoreListManager.instance().removeChangeListener(this.boundRefresh);\n  }\n\n  wasShown(): void {\n    this.networkFlameChartGroupExpansionSetting.addChangeListener(this.resizeToPreferredHeights, this);\n    this.showMemoryGraphSetting.addChangeListener(this.updateCountersGraphToggle, this);\n    Bindings.IgnoreListManager.IgnoreListManager.instance().addChangeListener(this.boundRefresh);\n    if (this.needsResizeToPreferredHeights) {\n      this.resizeToPreferredHeights();\n    }\n    this.mainFlameChart.scheduleUpdate();\n    this.networkFlameChart.scheduleUpdate();\n  }\n\n  private updateCountersGraphToggle(): void {\n    if (this.showMemoryGraphSetting.get()) {\n      this.chartSplitWidget.showBoth();\n    } else {\n      this.chartSplitWidget.hideSidebar();\n    }\n  }\n\n  setSelection(selection: TimelineSelection|null): void {\n    let index = this.mainDataProvider.entryIndexForSelection(selection);\n    this.mainFlameChart.setSelectedEntry(index);\n    index = this.networkDataProvider.entryIndexForSelection(selection);\n    this.networkFlameChart.setSelectedEntry(index);\n    if (this.detailsView) {\n      this.detailsView.setSelection(selection);\n    }\n  }\n\n  private onEntrySelected(\n      dataProvider: PerfUI.FlameChart.FlameChartDataProvider,\n      event: Common.EventTarget.EventTargetEvent<number>): void {\n    const entryIndex = event.data;\n    if (Root.Runtime.experiments.isEnabled('timelineEventInitiators') && dataProvider === this.mainDataProvider) {\n      if (this.mainDataProvider.buildFlowForInitiator(entryIndex)) {\n        this.mainFlameChart.scheduleUpdate();\n      }\n    }\n    this.delegate.select((dataProvider as TimelineFlameChartNetworkDataProvider).createSelection(entryIndex));\n  }\n\n  resizeToPreferredHeights(): void {\n    if (!this.isShowing()) {\n      this.needsResizeToPreferredHeights = true;\n      return;\n    }\n    this.needsResizeToPreferredHeights = false;\n    this.networkPane.element.classList.toggle(\n        'timeline-network-resizer-disabled', !this.networkDataProvider.isExpanded());\n    this.networkSplitWidget.setSidebarSize(\n        this.networkDataProvider.preferredHeight() + this.splitResizer.clientHeight + PerfUI.FlameChart.HeaderHeight +\n        2);\n  }\n\n  setSearchableView(searchableView: UI.SearchableView.SearchableView): void {\n    this.searchableView = searchableView;\n  }\n\n  // UI.SearchableView.Searchable implementation\n\n  jumpToNextSearchResult(): void {\n    if (!this.searchResults || !this.searchResults.length) {\n      return;\n    }\n    const index =\n        typeof this.selectedSearchResult !== 'undefined' ? this.searchResults.indexOf(this.selectedSearchResult) : -1;\n    this.selectSearchResult(Platform.NumberUtilities.mod(index + 1, this.searchResults.length));\n  }\n\n  jumpToPreviousSearchResult(): void {\n    if (!this.searchResults || !this.searchResults.length) {\n      return;\n    }\n    const index =\n        typeof this.selectedSearchResult !== 'undefined' ? this.searchResults.indexOf(this.selectedSearchResult) : 0;\n    this.selectSearchResult(Platform.NumberUtilities.mod(index - 1, this.searchResults.length));\n  }\n\n  supportsCaseSensitiveSearch(): boolean {\n    return true;\n  }\n\n  supportsRegexSearch(): boolean {\n    return true;\n  }\n\n  private selectSearchResult(index: number): void {\n    this.searchableView.updateCurrentMatchIndex(index);\n    if (this.searchResults) {\n      this.selectedSearchResult = this.searchResults[index];\n      this.delegate.select(this.mainDataProvider.createSelection(this.selectedSearchResult));\n    }\n  }\n\n  private updateSearchResults(shouldJump: boolean, jumpBackwards?: boolean): void {\n    const oldSelectedSearchResult = (this.selectedSearchResult as number);\n    delete this.selectedSearchResult;\n    this.searchResults = [];\n    if (!this.searchRegex || !this.model) {\n      return;\n    }\n    const regExpFilter = new TimelineRegExp(this.searchRegex);\n    const window = this.model.window();\n    this.searchResults = this.mainDataProvider.search(window.left, window.right, regExpFilter);\n    this.searchableView.updateSearchMatchesCount(this.searchResults.length);\n    if (!shouldJump || !this.searchResults.length) {\n      return;\n    }\n    let selectedIndex = this.searchResults.indexOf(oldSelectedSearchResult);\n    if (selectedIndex === -1) {\n      selectedIndex = jumpBackwards ? this.searchResults.length - 1 : 0;\n    }\n    this.selectSearchResult(selectedIndex);\n  }\n\n  searchCanceled(): void {\n    if (typeof this.selectedSearchResult !== 'undefined') {\n      this.delegate.select(null);\n    }\n    delete this.searchResults;\n    delete this.selectedSearchResult;\n    delete this.searchRegex;\n  }\n\n  performSearch(searchConfig: UI.SearchableView.SearchConfig, shouldJump: boolean, jumpBackwards?: boolean): void {\n    this.searchRegex = searchConfig.toSearchRegex().regex;\n    this.updateSearchResults(shouldJump, jumpBackwards);\n  }\n}\n\nexport class Selection {\n  timelineSelection: TimelineSelection;\n  entryIndex: number;\n  constructor(selection: TimelineSelection, entryIndex: number) {\n    this.timelineSelection = selection;\n    this.entryIndex = entryIndex;\n  }\n}\n\nexport const FlameChartStyle = {\n  textColor: '#333',\n};\n\nexport class TimelineFlameChartMarker implements PerfUI.FlameChart.FlameChartMarker {\n  private readonly startTimeInternal: number;\n  private readonly startOffset: number;\n  private style: TimelineMarkerStyle;\n  constructor(startTime: number, startOffset: number, style: TimelineMarkerStyle) {\n    this.startTimeInternal = startTime;\n    this.startOffset = startOffset;\n    this.style = style;\n  }\n\n  startTime(): number {\n    return this.startTimeInternal;\n  }\n\n  color(): string {\n    return this.style.color;\n  }\n\n  title(): string|null {\n    if (this.style.lowPriority) {\n      return null;\n    }\n    const startTime = i18n.TimeUtilities.millisToString(this.startOffset);\n    return i18nString(UIStrings.sAtS, {PH1: this.style.title, PH2: startTime});\n  }\n\n  draw(context: CanvasRenderingContext2D, x: number, height: number, pixelsPerMillisecond: number): void {\n    const lowPriorityVisibilityThresholdInPixelsPerMs = 4;\n\n    if (this.style.lowPriority && pixelsPerMillisecond < lowPriorityVisibilityThresholdInPixelsPerMs) {\n      return;\n    }\n\n    context.save();\n    if (this.style.tall) {\n      context.strokeStyle = this.style.color;\n      context.lineWidth = this.style.lineWidth;\n      context.translate(this.style.lineWidth < 1 || (this.style.lineWidth & 1) ? 0.5 : 0, 0.5);\n      context.beginPath();\n      context.moveTo(x, 0);\n      context.setLineDash(this.style.dashStyle);\n      context.lineTo(x, context.canvas.height);\n      context.stroke();\n    }\n    context.restore();\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum ColorBy {\n  URL = 'URL',\n}\n"],
  "mappings": "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",
  "names": []
}
