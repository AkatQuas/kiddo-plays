{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/timeline/TimelinePaintProfilerView.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport timelinePaintProfilerStyles from './timelinePaintProfiler.css.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as TimelineModel from '../../models/timeline_model/timeline_model.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as LayerViewer from '../layer_viewer/layer_viewer.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nexport class TimelinePaintProfilerView extends UI.SplitWidget.SplitWidget {\n  private frameModel: TimelineModel.TimelineFrameModel.TimelineFrameModel;\n  private readonly logAndImageSplitWidget: UI.SplitWidget.SplitWidget;\n  private readonly imageView: TimelinePaintImageView;\n  private readonly paintProfilerView: LayerViewer.PaintProfilerView.PaintProfilerView;\n  private readonly logTreeView: LayerViewer.PaintProfilerView.PaintProfilerCommandLogView;\n  private needsUpdateWhenVisible: boolean;\n  private pendingSnapshot: SDK.PaintProfiler.PaintProfilerSnapshot|null;\n  private event: SDK.TracingModel.Event|null;\n  private paintProfilerModel: SDK.PaintProfiler.PaintProfilerModel|null;\n  private lastLoadedSnapshot: SDK.PaintProfiler.PaintProfilerSnapshot|null;\n  constructor(frameModel: TimelineModel.TimelineFrameModel.TimelineFrameModel) {\n    super(false, false);\n    this.element.classList.add('timeline-paint-profiler-view');\n    this.setSidebarSize(60);\n    this.setResizable(false);\n\n    this.frameModel = frameModel;\n    this.logAndImageSplitWidget = new UI.SplitWidget.SplitWidget(true, false);\n    this.logAndImageSplitWidget.element.classList.add('timeline-paint-profiler-log-split');\n    this.setMainWidget(this.logAndImageSplitWidget);\n    this.imageView = new TimelinePaintImageView();\n    this.logAndImageSplitWidget.setMainWidget(this.imageView);\n\n    this.paintProfilerView =\n        new LayerViewer.PaintProfilerView.PaintProfilerView(this.imageView.showImage.bind(this.imageView));\n    this.paintProfilerView.addEventListener(\n        LayerViewer.PaintProfilerView.Events.WindowChanged, this.onWindowChanged, this);\n    this.setSidebarWidget(this.paintProfilerView);\n\n    this.logTreeView = new LayerViewer.PaintProfilerView.PaintProfilerCommandLogView();\n    this.logAndImageSplitWidget.setSidebarWidget(this.logTreeView);\n\n    this.needsUpdateWhenVisible = false;\n    this.pendingSnapshot = null;\n    this.event = null;\n    this.paintProfilerModel = null;\n    this.lastLoadedSnapshot = null;\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    if (this.needsUpdateWhenVisible) {\n      this.needsUpdateWhenVisible = false;\n      this.update();\n    }\n  }\n\n  setSnapshot(snapshot: SDK.PaintProfiler.PaintProfilerSnapshot): void {\n    this.releaseSnapshot();\n    this.pendingSnapshot = snapshot;\n    this.event = null;\n    this.updateWhenVisible();\n  }\n\n  setEvent(paintProfilerModel: SDK.PaintProfiler.PaintProfilerModel, event: SDK.TracingModel.Event): boolean {\n    this.releaseSnapshot();\n    this.paintProfilerModel = paintProfilerModel;\n    this.pendingSnapshot = null;\n    this.event = event;\n\n    this.updateWhenVisible();\n    if (this.event.name === TimelineModel.TimelineModel.RecordType.Paint) {\n      return Boolean(TimelineModel.TimelineModel.TimelineData.forEvent(event).picture);\n    }\n    if (this.event.name === TimelineModel.TimelineModel.RecordType.RasterTask) {\n      return this.frameModel.hasRasterTile(this.event);\n    }\n    return false;\n  }\n\n  private updateWhenVisible(): void {\n    if (this.isShowing()) {\n      this.update();\n    } else {\n      this.needsUpdateWhenVisible = true;\n    }\n  }\n\n  private update(): void {\n    this.logTreeView.setCommandLog([]);\n    void this.paintProfilerView.setSnapshotAndLog(null, [], null);\n\n    let snapshotPromise: Promise<{\n      rect: Protocol.DOM.Rect | null,\n      snapshot: SDK.PaintProfiler.PaintProfilerSnapshot,\n    }|null>;\n    if (this.pendingSnapshot) {\n      snapshotPromise = Promise.resolve({rect: null, snapshot: this.pendingSnapshot});\n    } else if (this.event && this.event.name === TimelineModel.TimelineModel.RecordType.Paint) {\n      const picture =\n          (TimelineModel.TimelineModel.TimelineData.forEvent(this.event).picture as SDK.TracingModel.ObjectSnapshot);\n      snapshotPromise =\n          picture.objectPromise()\n              .then(\n                  data =>\n                      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n                  // @ts-expect-error\n                  (this.paintProfilerModel as SDK.PaintProfiler.PaintProfilerModel).loadSnapshot(data['skp64']))\n              .then(snapshot => snapshot && {rect: null, snapshot: snapshot});\n    } else if (this.event && this.event.name === TimelineModel.TimelineModel.RecordType.RasterTask) {\n      snapshotPromise = this.frameModel.rasterTilePromise(this.event);\n    } else {\n      console.assert(false, 'Unexpected event type or no snapshot');\n      return;\n    }\n    void snapshotPromise.then(snapshotWithRect => {\n      this.releaseSnapshot();\n      if (!snapshotWithRect) {\n        this.imageView.showImage();\n        return;\n      }\n      const snapshot = snapshotWithRect.snapshot;\n      this.lastLoadedSnapshot = snapshot;\n      this.imageView.setMask(snapshotWithRect.rect);\n      void snapshot.commandLog().then(log => onCommandLogDone.call(this, snapshot, snapshotWithRect.rect, log || []));\n    });\n\n    function onCommandLogDone(\n        this: TimelinePaintProfilerView, snapshot: SDK.PaintProfiler.PaintProfilerSnapshot,\n        clipRect: Protocol.DOM.Rect|null, log?: SDK.PaintProfiler.PaintProfilerLogItem[]): void {\n      this.logTreeView.setCommandLog(log || []);\n      void this.paintProfilerView.setSnapshotAndLog(snapshot, log || [], clipRect);\n    }\n  }\n\n  private releaseSnapshot(): void {\n    if (!this.lastLoadedSnapshot) {\n      return;\n    }\n    this.lastLoadedSnapshot.release();\n    this.lastLoadedSnapshot = null;\n  }\n\n  private onWindowChanged(): void {\n    this.logTreeView.updateWindow(this.paintProfilerView.selectionWindow());\n  }\n}\n\nexport class TimelinePaintImageView extends UI.Widget.Widget {\n  private imageContainer: HTMLElement;\n  private imageElement: HTMLImageElement;\n  private readonly maskElement: HTMLElement;\n  private transformController: LayerViewer.TransformController.TransformController;\n  private maskRectangle?: Protocol.DOM.Rect|null;\n  constructor() {\n    super(true);\n\n    this.contentElement.classList.add('fill', 'paint-profiler-image-view');\n    this.imageContainer = this.contentElement.createChild('div', 'paint-profiler-image-container');\n    this.imageElement = (this.imageContainer.createChild('img') as HTMLImageElement);\n    this.maskElement = this.imageContainer.createChild('div');\n    this.imageElement.addEventListener('load', this.updateImagePosition.bind(this), false);\n    this.transformController =\n        new LayerViewer.TransformController.TransformController((this.contentElement as HTMLElement), true);\n    this.transformController.addEventListener(\n        LayerViewer.TransformController.Events.TransformChanged, this.updateImagePosition, this);\n  }\n\n  onResize(): void {\n    if (this.imageElement.src) {\n      this.updateImagePosition();\n    }\n  }\n\n  private updateImagePosition(): void {\n    const width = this.imageElement.naturalWidth;\n    const height = this.imageElement.naturalHeight;\n    const clientWidth = this.contentElement.clientWidth;\n    const clientHeight = this.contentElement.clientHeight;\n\n    const paddingFraction = 0.1;\n    const paddingX = clientWidth * paddingFraction;\n    const paddingY = clientHeight * paddingFraction;\n    const scaleX = (clientWidth - paddingX) / width;\n    const scaleY = (clientHeight - paddingY) / height;\n    const scale = Math.min(scaleX, scaleY);\n\n    if (this.maskRectangle) {\n      const style = this.maskElement.style;\n      style.width = width + 'px';\n      style.height = height + 'px';\n      style.borderLeftWidth = this.maskRectangle.x + 'px';\n      style.borderTopWidth = this.maskRectangle.y + 'px';\n      style.borderRightWidth = (width - this.maskRectangle.x - this.maskRectangle.width) + 'px';\n      style.borderBottomWidth = (height - this.maskRectangle.y - this.maskRectangle.height) + 'px';\n    }\n    this.transformController.setScaleConstraints(0.5, 10 / scale);\n    let matrix = new WebKitCSSMatrix()\n                     .scale(this.transformController.scale(), this.transformController.scale())\n                     .translate(clientWidth / 2, clientHeight / 2)\n                     .scale(scale, scale)\n                     .translate(-width / 2, -height / 2);\n    const bounds = UI.Geometry.boundsForTransformedPoints(matrix, [0, 0, 0, width, height, 0]);\n    this.transformController.clampOffsets(\n        paddingX - bounds.maxX, clientWidth - paddingX - bounds.minX, paddingY - bounds.maxY,\n        clientHeight - paddingY - bounds.minY);\n    matrix = new WebKitCSSMatrix()\n                 .translate(this.transformController.offsetX(), this.transformController.offsetY())\n                 .multiply(matrix);\n    this.imageContainer.style.webkitTransform = matrix.toString();\n  }\n\n  showImage(imageURL?: string): void {\n    this.imageContainer.classList.toggle('hidden', !imageURL);\n    if (imageURL) {\n      this.imageElement.src = imageURL;\n    }\n  }\n\n  setMask(maskRectangle: Protocol.DOM.Rect|null): void {\n    this.maskRectangle = maskRectangle;\n    this.maskElement.classList.toggle('hidden', !maskRectangle);\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([timelinePaintProfilerStyles]);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
