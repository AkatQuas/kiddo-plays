{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/timeline/TimelineLoader.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as TimelineModel from '../../models/timeline_model/timeline_model.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Timeline Loader of the Performance panel\n  */\n  malformedTimelineDataUnknownJson: 'Malformed timeline data: Unknown JSON format',\n  /**\n  *@description Text in Timeline Loader of the Performance panel\n  */\n  malformedTimelineInputWrongJson: 'Malformed timeline input, wrong JSON brackets balance',\n  /**\n  *@description Text in Timeline Loader of the Performance panel\n  *@example {Unknown JSON format} PH1\n  */\n  malformedTimelineDataS: 'Malformed timeline data: {PH1}',\n  /**\n  *@description Text in Timeline Loader of the Performance panel\n  */\n  legacyTimelineFormatIsNot: 'Legacy Timeline format is not supported.',\n  /**\n  *@description Text in Timeline Loader of the Performance panel\n  */\n  malformedCpuProfileFormat: 'Malformed CPU profile format',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/TimelineLoader.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class TimelineLoader implements Common.StringOutputStream.OutputStream {\n  private client: Client|null;\n  private readonly backingStorage: Bindings.TempFile.TempFileBackingStorage;\n  private tracingModel: SDK.TracingModel.TracingModel|null;\n  private canceledCallback: (() => void)|null;\n  private state: State;\n  private buffer: string;\n  private firstRawChunk: boolean;\n  private firstChunk: boolean;\n  private loadedBytes: number;\n  private totalSize!: number;\n  private readonly jsonTokenizer: TextUtils.TextUtils.BalancedJSONTokenizer;\n  constructor(client: Client) {\n    this.client = client;\n\n    this.backingStorage = new Bindings.TempFile.TempFileBackingStorage();\n    this.tracingModel = new SDK.TracingModel.TracingModel(this.backingStorage);\n\n    this.canceledCallback = null;\n    this.state = State.Initial;\n    this.buffer = '';\n    this.firstRawChunk = true;\n    this.firstChunk = true;\n    this.loadedBytes = 0;\n    this.jsonTokenizer = new TextUtils.TextUtils.BalancedJSONTokenizer(this.writeBalancedJSON.bind(this), true);\n  }\n\n  static loadFromFile(file: File, client: Client): TimelineLoader {\n    const loader = new TimelineLoader(client);\n    const fileReader = new Bindings.FileUtils.ChunkedFileReader(file, TransferChunkLengthBytes);\n    loader.canceledCallback = fileReader.cancel.bind(fileReader);\n    loader.totalSize = file.size;\n    void fileReader.read(loader).then(success => {\n      if (!success && fileReader.error()) {\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        loader.reportErrorAndCancelLoading((fileReader.error() as any).message);\n      }\n    });\n    return loader;\n  }\n\n  static loadFromEvents(events: SDK.TracingManager.EventPayload[], client: Client): TimelineLoader {\n    const loader = new TimelineLoader(client);\n\n    window.setTimeout(async () => {\n      const eventsPerChunk = 5000;\n      client.loadingStarted();\n      for (let i = 0; i < events.length; i += eventsPerChunk) {\n        const chunk = events.slice(i, i + eventsPerChunk);\n        (loader.tracingModel as SDK.TracingModel.TracingModel).addEvents(chunk);\n        client.loadingProgress((i + chunk.length) / events.length);\n        await new Promise(r => window.setTimeout(r));  // Yield event loop to paint.\n      }\n      void loader.close();\n    });\n\n    return loader;\n  }\n\n  static loadFromURL(url: Platform.DevToolsPath.UrlString, client: Client): TimelineLoader {\n    const loader = new TimelineLoader(client);\n    Host.ResourceLoader.loadAsStream(url, null, loader);\n    return loader;\n  }\n\n  cancel(): void {\n    this.tracingModel = null;\n    this.backingStorage.reset();\n    if (this.client) {\n      this.client.loadingComplete(null);\n      this.client = null;\n    }\n    if (this.canceledCallback) {\n      this.canceledCallback();\n    }\n  }\n\n  async write(chunk: string): Promise<void> {\n    if (!this.client) {\n      return Promise.resolve();\n    }\n    this.loadedBytes += chunk.length;\n    if (this.firstRawChunk) {\n      await this.client.loadingStarted();\n      // Ensure we paint the loading dialog before continuing\n      await new Promise(resolve => requestAnimationFrame(() => requestAnimationFrame(resolve)));\n    } else {\n      let progress = undefined;\n      if (this.totalSize) {\n        progress = this.loadedBytes / this.totalSize;\n        // For compressed traces, we can't provide a definite progress percentage. So, just keep it moving.\n        progress = progress > 1 ? progress - Math.floor(progress) : progress;\n      }\n      await this.client.loadingProgress(progress);\n    }\n    this.firstRawChunk = false;\n\n    if (this.state === State.Initial) {\n      if (chunk.startsWith('{\"nodes\":[')) {\n        this.state = State.LoadingCPUProfileFormat;\n      } else if (chunk[0] === '{') {\n        this.state = State.LookingForEvents;\n      } else if (chunk[0] === '[') {\n        this.state = State.ReadingEvents;\n      } else {\n        this.reportErrorAndCancelLoading(i18nString(UIStrings.malformedTimelineDataUnknownJson));\n        return Promise.resolve();\n      }\n    }\n\n    if (this.state === State.LoadingCPUProfileFormat) {\n      this.buffer += chunk;\n      return Promise.resolve();\n    }\n\n    if (this.state === State.LookingForEvents) {\n      const objectName = '\"traceEvents\":';\n      const startPos = this.buffer.length - objectName.length;\n      this.buffer += chunk;\n      const pos = this.buffer.indexOf(objectName, startPos);\n      if (pos === -1) {\n        return Promise.resolve();\n      }\n      chunk = this.buffer.slice(pos + objectName.length);\n      this.state = State.ReadingEvents;\n    }\n\n    if (this.state !== State.ReadingEvents) {\n      return Promise.resolve();\n    }\n    if (this.jsonTokenizer.write(chunk)) {\n      return Promise.resolve();\n    }\n    this.state = State.SkippingTail;\n    if (this.firstChunk) {\n      this.reportErrorAndCancelLoading(i18nString(UIStrings.malformedTimelineInputWrongJson));\n    }\n    return Promise.resolve();\n  }\n\n  private writeBalancedJSON(data: string): void {\n    let json: string = data + ']';\n\n    if (!this.firstChunk) {\n      const commaIndex = json.indexOf(',');\n      if (commaIndex !== -1) {\n        json = json.slice(commaIndex + 1);\n      }\n      json = '[' + json;\n    }\n\n    let items;\n    try {\n      items = (JSON.parse(json) as SDK.TracingManager.EventPayload[]);\n    } catch (e) {\n      this.reportErrorAndCancelLoading(i18nString(UIStrings.malformedTimelineDataS, {PH1: e.toString()}));\n      return;\n    }\n\n    if (this.firstChunk) {\n      this.firstChunk = false;\n      if (this.looksLikeAppVersion(items[0])) {\n        this.reportErrorAndCancelLoading(i18nString(UIStrings.legacyTimelineFormatIsNot));\n        return;\n      }\n    }\n\n    try {\n      (this.tracingModel as SDK.TracingModel.TracingModel).addEvents(items);\n    } catch (e) {\n      this.reportErrorAndCancelLoading(i18nString(UIStrings.malformedTimelineDataS, {PH1: e.toString()}));\n    }\n  }\n\n  private reportErrorAndCancelLoading(message?: string): void {\n    if (message) {\n      Common.Console.Console.instance().error(message);\n    }\n    this.cancel();\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private looksLikeAppVersion(item: any): boolean {\n    return typeof item === 'string' && item.indexOf('Chrome') !== -1;\n  }\n\n  async close(): Promise<void> {\n    if (!this.client) {\n      return;\n    }\n    this.client.processingStarted();\n    window.setTimeout(() => this.finalizeTrace(), 0);\n  }\n\n  private finalizeTrace(): void {\n    if (this.state === State.LoadingCPUProfileFormat) {\n      this.parseCPUProfileFormat(this.buffer);\n      this.buffer = '';\n    }\n    (this.tracingModel as SDK.TracingModel.TracingModel).tracingComplete();\n    (this.client as Client).loadingComplete(this.tracingModel);\n  }\n\n  private parseCPUProfileFormat(text: string): void {\n    let traceEvents;\n    try {\n      const profile = JSON.parse(text);\n      traceEvents = TimelineModel.TimelineJSProfile.TimelineJSProfileProcessor.buildTraceProfileFromCpuProfile(\n          profile, /* tid */ 1, /* injectPageEvent */ true);\n    } catch (e) {\n      this.reportErrorAndCancelLoading(i18nString(UIStrings.malformedCpuProfileFormat));\n      return;\n    }\n    (this.tracingModel as SDK.TracingModel.TracingModel).addEvents(traceEvents);\n  }\n}\n\nexport const TransferChunkLengthBytes = 5000000;\n\nexport interface Client {\n  loadingStarted(): void;\n\n  loadingProgress(progress?: number): void;\n\n  processingStarted(): void;\n\n  loadingComplete(tracingModel: SDK.TracingModel.TracingModel|null): void;\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum State {\n  Initial = 'Initial',\n  LookingForEvents = 'LookingForEvents',\n  ReadingEvents = 'ReadingEvents',\n  SkippingTail = 'SkippingTail',\n  LoadingCPUProfileFormat = 'LoadingCPUProfileFormat',\n}\n"],
  "mappings": "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",
  "names": []
}
