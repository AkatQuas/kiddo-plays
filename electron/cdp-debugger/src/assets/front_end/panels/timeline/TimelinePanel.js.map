{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/timeline/TimelinePanel.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n * Copyright (C) 2012 Intel Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as Extensions from '../../models/extensions/extensions.js';\nimport * as TimelineModel from '../../models/timeline_model/timeline_model.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport historyToolbarButtonStyles from './historyToolbarButton.css.js';\nimport timelinePanelStyles from './timelinePanel.css.js';\nimport timelineStatusDialogStyles from './timelineStatusDialog.css.js';\n\nimport type * as Coverage from '../coverage/coverage.js';\nimport * as MobileThrottling from '../mobile_throttling/mobile_throttling.js';\n\nimport type {WindowChangedEvent} from './PerformanceModel.js';\nimport {Events, PerformanceModel} from './PerformanceModel.js';\nimport type {Client} from './TimelineController.js';\nimport {TimelineController} from './TimelineController.js';\nimport type {TimelineEventOverview} from './TimelineEventOverview.js';\nimport {\n  TimelineEventOverviewCoverage,\n  TimelineEventOverviewCPUActivity,\n  TimelineEventOverviewInput,\n  TimelineEventOverviewMemory,\n  TimelineEventOverviewNetwork,\n  TimelineEventOverviewResponsiveness,\n  TimelineFilmStripOverview,\n} from './TimelineEventOverview.js';\nimport {TimelineFlameChartView} from './TimelineFlameChartView.js';\nimport {TimelineHistoryManager} from './TimelineHistoryManager.js';\nimport {TimelineLoader} from './TimelineLoader.js';\nimport {TimelineUIUtils} from './TimelineUIUtils.js';\nimport {UIDevtoolsController} from './UIDevtoolsController.js';\nimport {UIDevtoolsUtils} from './UIDevtoolsUtils.js';\n\nconst UIStrings = {\n  /**\n  *@description Text that appears when user drag and drop something (for example, a file) in Timeline Panel of the Performance panel\n  */\n  dropTimelineFileOrUrlHere: 'Drop timeline file or URL here',\n  /**\n  *@description Title of disable capture jsprofile setting in timeline panel of the performance panel\n  */\n  disableJavascriptSamples: 'Disable JavaScript samples',\n  /**\n  *@description Title of capture layers and pictures setting in timeline panel of the performance panel\n  */\n  enableAdvancedPaint: 'Enable advanced paint instrumentation (slow)',\n  /**\n  *@description Title of show screenshots setting in timeline panel of the performance panel\n  */\n  screenshots: 'Screenshots',\n  /**\n  *@description Title of the 'Coverage' tool in the bottom drawer\n  */\n  coverage: 'Coverage',\n  /**\n  *@description Text for the memory of the page\n  */\n  memory: 'Memory',\n  /**\n  *@description Text in Timeline for the Web Vitals lane\n  */\n  webVitals: 'Web Vitals',\n  /**\n  *@description Text to clear content\n  */\n  clear: 'Clear',\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon load button\n  */\n  loadProfile: 'Load profile\u2026',\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon download button\n  */\n  saveProfile: 'Save profile\u2026',\n  /**\n  *@description Text to take screenshots\n  */\n  captureScreenshots: 'Capture screenshots',\n  /**\n  *@description Text in Timeline Panel of the Performance panel\n  */\n  showMemoryTimeline: 'Show memory timeline',\n  /**\n  *@description Text in Timeline for the Web Vitals lane checkbox\n  */\n  showWebVitals: 'Show Web Vitals',\n  /**\n  *@description Text in Timeline Panel of the Performance panel\n  */\n  recordCoverageWithPerformance: 'Record coverage with performance trace',\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon settings gear in show settings pane setting in timeline panel of the performance panel\n  */\n  captureSettings: 'Capture settings',\n  /**\n  *@description Text in Timeline Panel of the Performance panel\n  */\n  disablesJavascriptSampling: 'Disables JavaScript sampling, reduces overhead when running against mobile devices',\n  /**\n  *@description Text in Timeline Panel of the Performance panel\n  */\n  capturesAdvancedPaint: 'Captures advanced paint instrumentation, introduces significant performance overhead',\n  /**\n  *@description Text in Timeline Panel of the Performance panel\n  */\n  network: 'Network:',\n  /**\n  *@description Text in Timeline Panel of the Performance panel\n  */\n  cpu: 'CPU:',\n  /**\n  *@description Title of the 'Network conditions' tool in the bottom drawer\n  */\n  networkConditions: 'Network conditions',\n  /**\n  *@description Text in Timeline Panel of the Performance panel\n  *@example {wrong format} PH1\n  *@example {ERROR_FILE_NOT_FOUND} PH2\n  *@example {2} PH3\n  */\n  failedToSaveTimelineSSS: 'Failed to save timeline: {PH1} ({PH2}, {PH3})',\n  /**\n  *@description Text in Timeline Panel of the Performance panel\n  */\n  CpuThrottlingIsEnabled: '- CPU throttling is enabled',\n  /**\n  *@description Text in Timeline Panel of the Performance panel\n  */\n  NetworkThrottlingIsEnabled: '- Network throttling is enabled',\n  /**\n  *@description Text in Timeline Panel of the Performance panel\n  */\n  HardwareConcurrencyIsEnabled: '- Hardware concurrency override is enabled',\n  /**\n  *@description Text in Timeline Panel of the Performance panel\n  */\n  SignificantOverheadDueToPaint: '- Significant overhead due to paint instrumentation',\n  /**\n  *@description Text in Timeline Panel of the Performance panel\n  */\n  JavascriptSamplingIsDisabled: '- JavaScript sampling is disabled',\n  /**\n  *@description Text in Timeline Panel of the Performance panel\n  */\n  stoppingTimeline: 'Stopping timeline\u2026',\n  /**\n  *@description Text in Timeline Panel of the Performance panel\n  */\n  received: 'Received',\n  /**\n  *@description Text to close something\n  */\n  close: 'Close',\n  /**\n  *@description Status text to indicate the recording has failed in the Performance panel\n  */\n  recordingFailed: 'Recording failed',\n  /**\n  * @description Text to indicate the progress of a profile. Informs the user that we are currently\n  * creating a peformance profile.\n  */\n  profiling: 'Profiling\u2026',\n  /**\n  *@description Text in Timeline Panel of the Performance panel\n  */\n  bufferUsage: 'Buffer usage',\n  /**\n  *@description Text for an option to learn more about something\n  */\n  learnmore: 'Learn\u00A0more',\n  /**\n  *@description Text in Timeline Panel of the Performance panel\n  */\n  wasd: 'WASD',\n  /**\n  *@description Text in Timeline Panel of the Performance panel\n  *@example {record} PH1\n  *@example {Ctrl + R} PH2\n  */\n  clickTheRecordButtonSOrHitSTo: 'Click the record button {PH1} or hit {PH2} to start a new recording.',\n  /**\n  * @description Text in Timeline Panel of the Performance panel\n  * @example {reload button} PH1\n  * @example {Ctrl + R} PH2\n  */\n  clickTheReloadButtonSOrHitSTo: 'Click the reload button {PH1} or hit {PH2} to record the page load.',\n  /**\n  *@description Text in Timeline Panel of the Performance panel\n  *@example {Ctrl + U} PH1\n  *@example {Learn more} PH2\n  */\n  afterRecordingSelectAnAreaOf:\n      'After recording, select an area of interest in the overview by dragging. Then, zoom and pan the timeline with the mousewheel or {PH1} keys. {PH2}',\n  /**\n  *@description Text in Timeline Panel of the Performance panel\n  */\n  loadingProfile: 'Loading profile\u2026',\n  /**\n  *@description Text in Timeline Panel of the Performance panel\n  */\n  processingProfile: 'Processing profile\u2026',\n  /**\n  *@description Text in Timeline Panel of the Performance panel\n  */\n  initializingProfiler: 'Initializing profiler\u2026',\n  /**\n  *@description Text for the status of something\n  */\n  status: 'Status',\n  /**\n  *@description Text that refers to the time\n  */\n  time: 'Time',\n  /**\n  *@description Text for the description of something\n  */\n  description: 'Description',\n  /**\n  *@description Text of an item that stops the running task\n  */\n  stop: 'Stop',\n  /**\n  *@description Time text content in Timeline Panel of the Performance panel\n  *@example {2.12} PH1\n  */\n  ssec: '{PH1}\u00A0sec',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/TimelinePanel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet timelinePanelInstance: TimelinePanel;\n\nexport class TimelinePanel extends UI.Panel.Panel implements Client, TimelineModeViewDelegate {\n  private readonly dropTarget: UI.DropTarget.DropTarget;\n  private readonly recordingOptionUIControls: UI.Toolbar.ToolbarItem[];\n  private state: State;\n  private recordingPageReload: boolean;\n  private readonly millisecondsToRecordAfterLoadEvent: number;\n  private readonly toggleRecordAction: UI.ActionRegistration.Action;\n  private readonly recordReloadAction: UI.ActionRegistration.Action;\n  private readonly historyManager: TimelineHistoryManager;\n  private performanceModel: PerformanceModel|null;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private readonly viewModeSetting: Common.Settings.Setting<any>;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private disableCaptureJSProfileSetting: Common.Settings.Setting<any>;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private readonly captureLayersAndPicturesSetting: Common.Settings.Setting<any>;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private showScreenshotsSetting: Common.Settings.Setting<any>;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private startCoverage: Common.Settings.Setting<any>;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private showMemorySetting: Common.Settings.Setting<any>;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private showWebVitalsSetting: Common.Settings.Setting<any>;\n  private readonly panelToolbar: UI.Toolbar.Toolbar;\n  private readonly panelRightToolbar: UI.Toolbar.Toolbar;\n  private readonly timelinePane: UI.Widget.VBox;\n  private readonly overviewPane: PerfUI.TimelineOverviewPane.TimelineOverviewPane;\n  private overviewControls: TimelineEventOverview[];\n  private readonly statusPaneContainer: HTMLElement;\n  private readonly flameChart: TimelineFlameChartView;\n  private readonly searchableViewInternal: UI.SearchableView.SearchableView;\n  private showSettingsPaneButton!: UI.Toolbar.ToolbarSettingToggle;\n  private showSettingsPaneSetting!: Common.Settings.Setting<boolean>;\n  private settingsPane!: UI.Widget.Widget;\n  private controller!: TimelineController|null;\n  private clearButton!: UI.Toolbar.ToolbarButton;\n  private loadButton!: UI.Toolbar.ToolbarButton;\n  private saveButton!: UI.Toolbar.ToolbarButton;\n  private statusPane!: StatusPane|null;\n  private landingPage!: UI.Widget.Widget;\n  private loader?: TimelineLoader;\n  private showScreenshotsToolbarCheckbox?: UI.Toolbar.ToolbarItem;\n  private showMemoryToolbarCheckbox?: UI.Toolbar.ToolbarItem;\n  private showWebVitalsToolbarCheckbox?: UI.Toolbar.ToolbarItem;\n  private startCoverageCheckbox?: UI.Toolbar.ToolbarItem;\n  private networkThrottlingSelect?: UI.Toolbar.ToolbarComboBox;\n  private cpuThrottlingSelect?: UI.Toolbar.ToolbarComboBox;\n  private fileSelectorElement?: HTMLInputElement;\n  private selection?: TimelineSelection|null;\n  constructor() {\n    super('timeline');\n    this.element.addEventListener('contextmenu', this.contextMenu.bind(this), false);\n    this.dropTarget = new UI.DropTarget.DropTarget(\n        this.element, [UI.DropTarget.Type.File, UI.DropTarget.Type.URI],\n        i18nString(UIStrings.dropTimelineFileOrUrlHere), this.handleDrop.bind(this));\n\n    this.recordingOptionUIControls = [];\n    this.state = State.Idle;\n    this.recordingPageReload = false;\n    this.millisecondsToRecordAfterLoadEvent = 5000;\n    this.toggleRecordAction =\n        (UI.ActionRegistry.ActionRegistry.instance().action('timeline.toggle-recording') as\n         UI.ActionRegistration.Action);\n    this.recordReloadAction =\n        (UI.ActionRegistry.ActionRegistry.instance().action('timeline.record-reload') as UI.ActionRegistration.Action);\n\n    this.historyManager = new TimelineHistoryManager();\n\n    this.performanceModel = null;\n\n    this.viewModeSetting = Common.Settings.Settings.instance().createSetting('timelineViewMode', ViewMode.FlameChart);\n\n    this.disableCaptureJSProfileSetting =\n        Common.Settings.Settings.instance().createSetting('timelineDisableJSSampling', false);\n    this.disableCaptureJSProfileSetting.setTitle(i18nString(UIStrings.disableJavascriptSamples));\n    this.captureLayersAndPicturesSetting =\n        Common.Settings.Settings.instance().createSetting('timelineCaptureLayersAndPictures', false);\n    this.captureLayersAndPicturesSetting.setTitle(i18nString(UIStrings.enableAdvancedPaint));\n\n    this.showScreenshotsSetting = Common.Settings.Settings.instance().createSetting('timelineShowScreenshots', true);\n    this.showScreenshotsSetting.setTitle(i18nString(UIStrings.screenshots));\n    this.showScreenshotsSetting.addChangeListener(this.updateOverviewControls, this);\n\n    this.startCoverage = Common.Settings.Settings.instance().createSetting('timelineStartCoverage', false);\n    this.startCoverage.setTitle(i18nString(UIStrings.coverage));\n\n    if (!Root.Runtime.experiments.isEnabled('recordCoverageWithPerformanceTracing')) {\n      this.startCoverage.set(false);\n    }\n\n    this.showMemorySetting = Common.Settings.Settings.instance().createSetting('timelineShowMemory', false);\n    this.showMemorySetting.setTitle(i18nString(UIStrings.memory));\n    this.showMemorySetting.addChangeListener(this.onModeChanged, this);\n\n    this.showWebVitalsSetting = Common.Settings.Settings.instance().createSetting('timelineWebVitals', false);\n    this.showWebVitalsSetting.setTitle(i18nString(UIStrings.webVitals));\n    this.showWebVitalsSetting.addChangeListener(this.onWebVitalsChanged, this);\n\n    const timelineToolbarContainer = this.element.createChild('div', 'timeline-toolbar-container');\n    this.panelToolbar = new UI.Toolbar.Toolbar('timeline-main-toolbar', timelineToolbarContainer);\n    this.panelToolbar.makeWrappable(true);\n    this.panelRightToolbar = new UI.Toolbar.Toolbar('', timelineToolbarContainer);\n    this.createSettingsPane();\n    this.updateShowSettingsToolbarButton();\n\n    this.timelinePane = new UI.Widget.VBox();\n    this.timelinePane.show(this.element);\n    const topPaneElement = this.timelinePane.element.createChild('div', 'hbox');\n    topPaneElement.id = 'timeline-overview-panel';\n\n    // Create top overview component.\n    this.overviewPane = new PerfUI.TimelineOverviewPane.TimelineOverviewPane('timeline');\n    this.overviewPane.addEventListener(\n        PerfUI.TimelineOverviewPane.Events.WindowChanged, this.onOverviewWindowChanged.bind(this));\n    this.overviewPane.show(topPaneElement);\n    this.overviewControls = [];\n\n    this.statusPaneContainer = this.timelinePane.element.createChild('div', 'status-pane-container fill');\n\n    this.createFileSelector();\n\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.Load, this.loadEventFired, this);\n\n    this.flameChart = new TimelineFlameChartView(this);\n    this.searchableViewInternal = new UI.SearchableView.SearchableView(this.flameChart, null);\n    this.searchableViewInternal.setMinimumSize(0, 100);\n    this.searchableViewInternal.element.classList.add('searchable-view');\n    this.searchableViewInternal.show(this.timelinePane.element);\n    this.flameChart.show(this.searchableViewInternal.element);\n    this.flameChart.setSearchableView(this.searchableViewInternal);\n    this.searchableViewInternal.hideWidget();\n\n    this.onModeChanged();\n    this.onWebVitalsChanged();\n    this.populateToolbar();\n    this.showLandingPage();\n    this.updateTimelineControls();\n\n    Extensions.ExtensionServer.ExtensionServer.instance().addEventListener(\n        Extensions.ExtensionServer.Events.TraceProviderAdded, this.appendExtensionsToToolbar, this);\n    SDK.TargetManager.TargetManager.instance().addEventListener(\n        SDK.TargetManager.Events.SuspendStateChanged, this.onSuspendStateChanged, this);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  }|undefined = {forceNew: null}): TimelinePanel {\n    const {forceNew} = opts;\n    if (!timelinePanelInstance || forceNew) {\n      timelinePanelInstance = new TimelinePanel();\n    }\n\n    return timelinePanelInstance;\n  }\n\n  searchableView(): UI.SearchableView.SearchableView|null {\n    return this.searchableViewInternal;\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    UI.Context.Context.instance().setFlavor(TimelinePanel, this);\n    this.registerCSSFiles([timelinePanelStyles]);\n    // Record the performance tool load time.\n    Host.userMetrics.panelLoaded('timeline', 'DevTools.Launch.Timeline');\n  }\n\n  willHide(): void {\n    UI.Context.Context.instance().setFlavor(TimelinePanel, null);\n    this.historyManager.cancelIfShowing();\n  }\n\n  loadFromEvents(events: SDK.TracingManager.EventPayload[]): void {\n    if (this.state !== State.Idle) {\n      return;\n    }\n    this.prepareToLoadTimeline();\n    this.loader = TimelineLoader.loadFromEvents(events, this);\n  }\n\n  private onOverviewWindowChanged(\n      event: Common.EventTarget.EventTargetEvent<PerfUI.TimelineOverviewPane.WindowChangedEvent>): void {\n    if (!this.performanceModel) {\n      return;\n    }\n    const left = event.data.startTime;\n    const right = event.data.endTime;\n    this.performanceModel.setWindow({left, right}, /* animate */ true);\n  }\n\n  private onModelWindowChanged(event: Common.EventTarget.EventTargetEvent<WindowChangedEvent>): void {\n    const window = event.data.window;\n    this.overviewPane.setWindowTimes(window.left, window.right);\n  }\n\n  private setState(state: State): void {\n    this.state = state;\n    this.updateTimelineControls();\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private createSettingCheckbox(setting: Common.Settings.Setting<any>, tooltip: string): UI.Toolbar.ToolbarItem {\n    const checkboxItem = new UI.Toolbar.ToolbarSettingCheckbox(setting, tooltip);\n    this.recordingOptionUIControls.push(checkboxItem);\n    return checkboxItem;\n  }\n\n  private populateToolbar(): void {\n    // Record\n    this.panelToolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButton(this.toggleRecordAction));\n    this.panelToolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButton(this.recordReloadAction));\n    this.clearButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.clear), 'largeicon-clear');\n    this.clearButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, () => this.onClearButton());\n    this.panelToolbar.appendToolbarItem(this.clearButton);\n\n    // Load / Save\n    this.loadButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.loadProfile), 'largeicon-load');\n    this.loadButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, () => {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.PerfPanelTraceImported);\n      this.selectFileToLoad();\n    });\n    this.saveButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.saveProfile), 'largeicon-download');\n    this.saveButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, _event => {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.PerfPanelTraceExported);\n      void this.saveToFile();\n    });\n    this.panelToolbar.appendSeparator();\n    this.panelToolbar.appendToolbarItem(this.loadButton);\n    this.panelToolbar.appendToolbarItem(this.saveButton);\n\n    // History\n    this.panelToolbar.appendSeparator();\n    this.panelToolbar.appendToolbarItem(this.historyManager.button());\n    this.panelToolbar.registerCSSFiles([historyToolbarButtonStyles]);\n    this.panelToolbar.appendSeparator();\n\n    // View\n    this.panelToolbar.appendSeparator();\n    this.showScreenshotsToolbarCheckbox =\n        this.createSettingCheckbox(this.showScreenshotsSetting, i18nString(UIStrings.captureScreenshots));\n    this.panelToolbar.appendToolbarItem(this.showScreenshotsToolbarCheckbox);\n\n    this.showMemoryToolbarCheckbox =\n        this.createSettingCheckbox(this.showMemorySetting, i18nString(UIStrings.showMemoryTimeline));\n    this.panelToolbar.appendToolbarItem(this.showMemoryToolbarCheckbox);\n\n    this.showWebVitalsToolbarCheckbox =\n        this.createSettingCheckbox(this.showWebVitalsSetting, i18nString(UIStrings.showWebVitals));\n    this.panelToolbar.appendToolbarItem(this.showWebVitalsToolbarCheckbox);\n\n    if (Root.Runtime.experiments.isEnabled('recordCoverageWithPerformanceTracing')) {\n      this.startCoverageCheckbox =\n          this.createSettingCheckbox(this.startCoverage, i18nString(UIStrings.recordCoverageWithPerformance));\n      this.panelToolbar.appendToolbarItem(this.startCoverageCheckbox);\n    }\n\n    // GC\n    this.panelToolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButtonForId('components.collect-garbage'));\n\n    // Settings\n    this.panelRightToolbar.appendSeparator();\n    this.panelRightToolbar.appendToolbarItem(this.showSettingsPaneButton);\n  }\n\n  private createSettingsPane(): void {\n    this.showSettingsPaneSetting =\n        Common.Settings.Settings.instance().createSetting('timelineShowSettingsToolbar', false);\n    this.showSettingsPaneButton = new UI.Toolbar.ToolbarSettingToggle(\n        this.showSettingsPaneSetting, 'largeicon-settings-gear', i18nString(UIStrings.captureSettings));\n    SDK.NetworkManager.MultitargetNetworkManager.instance().addEventListener(\n        SDK.NetworkManager.MultitargetNetworkManager.Events.ConditionsChanged, this.updateShowSettingsToolbarButton,\n        this);\n    SDK.CPUThrottlingManager.CPUThrottlingManager.instance().addEventListener(\n        SDK.CPUThrottlingManager.Events.RateChanged, this.updateShowSettingsToolbarButton, this);\n    SDK.CPUThrottlingManager.CPUThrottlingManager.instance().addEventListener(\n        SDK.CPUThrottlingManager.Events.HardwareConcurrencyChanged, this.updateShowSettingsToolbarButton, this);\n    this.disableCaptureJSProfileSetting.addChangeListener(this.updateShowSettingsToolbarButton, this);\n    this.captureLayersAndPicturesSetting.addChangeListener(this.updateShowSettingsToolbarButton, this);\n\n    this.settingsPane = new UI.Widget.HBox();\n    this.settingsPane.element.classList.add('timeline-settings-pane');\n    this.settingsPane.show(this.element);\n\n    const captureToolbar = new UI.Toolbar.Toolbar('', this.settingsPane.element);\n    captureToolbar.element.classList.add('flex-auto');\n    captureToolbar.makeVertical();\n    captureToolbar.appendToolbarItem(this.createSettingCheckbox(\n        this.disableCaptureJSProfileSetting, i18nString(UIStrings.disablesJavascriptSampling)));\n    captureToolbar.appendToolbarItem(\n        this.createSettingCheckbox(this.captureLayersAndPicturesSetting, i18nString(UIStrings.capturesAdvancedPaint)));\n\n    const throttlingPane = new UI.Widget.VBox();\n    throttlingPane.element.classList.add('flex-auto');\n    throttlingPane.show(this.settingsPane.element);\n\n    const cpuThrottlingToolbar = new UI.Toolbar.Toolbar('', throttlingPane.element);\n    cpuThrottlingToolbar.appendText(i18nString(UIStrings.cpu));\n    this.cpuThrottlingSelect = MobileThrottling.ThrottlingManager.throttlingManager().createCPUThrottlingSelector();\n    cpuThrottlingToolbar.appendToolbarItem(this.cpuThrottlingSelect);\n\n    const networkThrottlingToolbar = new UI.Toolbar.Toolbar('', throttlingPane.element);\n    networkThrottlingToolbar.appendText(i18nString(UIStrings.network));\n    this.networkThrottlingSelect = this.createNetworkConditionsSelect();\n    networkThrottlingToolbar.appendToolbarItem(this.networkThrottlingSelect);\n\n    const hardwareConcurrencyPane = new UI.Widget.VBox();\n    hardwareConcurrencyPane.element.classList.add('flex-auto');\n    hardwareConcurrencyPane.show(this.settingsPane.element);\n\n    const {toggle, input, reset, warning} =\n        MobileThrottling.ThrottlingManager.throttlingManager().createHardwareConcurrencySelector();\n    const concurrencyThrottlingToolbar = new UI.Toolbar.Toolbar('', hardwareConcurrencyPane.element);\n    concurrencyThrottlingToolbar.registerCSSFiles([timelinePanelStyles]);\n    input.element.classList.add('timeline-concurrency-input');\n    concurrencyThrottlingToolbar.appendToolbarItem(toggle);\n    concurrencyThrottlingToolbar.appendToolbarItem(input);\n    concurrencyThrottlingToolbar.appendToolbarItem(reset);\n    concurrencyThrottlingToolbar.appendToolbarItem(warning);\n\n    this.showSettingsPaneSetting.addChangeListener(this.updateSettingsPaneVisibility.bind(this));\n    this.updateSettingsPaneVisibility();\n  }\n\n  private appendExtensionsToToolbar(\n      event: Common.EventTarget.EventTargetEvent<Extensions.ExtensionTraceProvider.ExtensionTraceProvider>): void {\n    const provider = event.data;\n    const setting = TimelinePanel.settingForTraceProvider(provider);\n    const checkbox = this.createSettingCheckbox(setting, provider.longDisplayName());\n    this.panelToolbar.appendToolbarItem(checkbox);\n  }\n\n  private static settingForTraceProvider(traceProvider: Extensions.ExtensionTraceProvider.ExtensionTraceProvider):\n      Common.Settings.Setting<boolean> {\n    let setting = traceProviderToSetting.get(traceProvider);\n    if (!setting) {\n      const providerId = traceProvider.persistentIdentifier();\n      setting = Common.Settings.Settings.instance().createSetting(providerId, false);\n      setting.setTitle(traceProvider.shortDisplayName());\n      traceProviderToSetting.set(traceProvider, setting);\n    }\n    return setting;\n  }\n\n  private createNetworkConditionsSelect(): UI.Toolbar.ToolbarComboBox {\n    const toolbarItem = new UI.Toolbar.ToolbarComboBox(null, i18nString(UIStrings.networkConditions));\n    toolbarItem.setMaxWidth(140);\n    MobileThrottling.ThrottlingManager.throttlingManager().decorateSelectWithNetworkThrottling(\n        toolbarItem.selectElement());\n    return toolbarItem;\n  }\n\n  private prepareToLoadTimeline(): void {\n    console.assert(this.state === State.Idle);\n    this.setState(State.Loading);\n    if (this.performanceModel) {\n      this.performanceModel.dispose();\n      this.performanceModel = null;\n    }\n  }\n\n  private createFileSelector(): void {\n    if (this.fileSelectorElement) {\n      this.fileSelectorElement.remove();\n    }\n    this.fileSelectorElement = UI.UIUtils.createFileSelectorElement(this.loadFromFile.bind(this));\n    this.timelinePane.element.appendChild(this.fileSelectorElement);\n  }\n\n  private contextMenu(event: Event): void {\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    contextMenu.appendItemsAtLocation('timelineMenu');\n    void contextMenu.show();\n  }\n  async saveToFile(): Promise<void> {\n    if (this.state !== State.Idle) {\n      return;\n    }\n    const performanceModel = this.performanceModel;\n    if (!performanceModel) {\n      return;\n    }\n\n    const now = new Date();\n    const fileName =\n        'Profile-' + Platform.DateUtilities.toISO8601Compact(now) + '.json' as Platform.DevToolsPath.RawPathString;\n    const stream = new Bindings.FileUtils.FileOutputStream();\n\n    const accepted = await stream.open(fileName);\n    if (!accepted) {\n      return;\n    }\n\n    const error = (await performanceModel.save(stream) as {\n      message: string,\n      name: string,\n      code: number,\n    } | null);\n    if (!error) {\n      return;\n    }\n    Common.Console.Console.instance().error(\n        i18nString(UIStrings.failedToSaveTimelineSSS, {PH1: error.message, PH2: error.name, PH3: error.code}));\n  }\n\n  async showHistory(): Promise<void> {\n    const model = await this.historyManager.showHistoryDropDown();\n    if (model && model !== this.performanceModel) {\n      this.setModel(model);\n    }\n  }\n\n  navigateHistory(direction: number): boolean {\n    const model = this.historyManager.navigate(direction);\n    if (model && model !== this.performanceModel) {\n      this.setModel(model);\n    }\n    return true;\n  }\n\n  selectFileToLoad(): void {\n    if (this.fileSelectorElement) {\n      this.fileSelectorElement.click();\n    }\n  }\n\n  private loadFromFile(file: File): void {\n    if (this.state !== State.Idle) {\n      return;\n    }\n    this.prepareToLoadTimeline();\n    this.loader = TimelineLoader.loadFromFile(file, this);\n    this.createFileSelector();\n  }\n\n  loadFromURL(url: Platform.DevToolsPath.UrlString): void {\n    if (this.state !== State.Idle) {\n      return;\n    }\n    this.prepareToLoadTimeline();\n    this.loader = TimelineLoader.loadFromURL(url, this);\n  }\n\n  private updateOverviewControls(): void {\n    this.overviewControls = [];\n    this.overviewControls.push(new TimelineEventOverviewResponsiveness());\n    if (Root.Runtime.experiments.isEnabled('inputEventsOnTimelineOverview')) {\n      this.overviewControls.push(new TimelineEventOverviewInput());\n    }\n    this.overviewControls.push(new TimelineEventOverviewCPUActivity());\n    this.overviewControls.push(new TimelineEventOverviewNetwork());\n    if (this.showScreenshotsSetting.get() && this.performanceModel &&\n        this.performanceModel.filmStripModel().frames().length) {\n      this.overviewControls.push(new TimelineFilmStripOverview());\n    }\n    if (this.showMemorySetting.get()) {\n      this.overviewControls.push(new TimelineEventOverviewMemory());\n    }\n    if (this.startCoverage.get()) {\n      this.overviewControls.push(new TimelineEventOverviewCoverage());\n    }\n    for (const control of this.overviewControls) {\n      control.setModel(this.performanceModel);\n    }\n    this.overviewPane.setOverviewControls(this.overviewControls);\n  }\n\n  private onModeChanged(): void {\n    this.updateOverviewControls();\n    this.doResize();\n    this.select(null);\n  }\n\n  private onWebVitalsChanged(): void {\n    this.flameChart.toggleWebVitalsLane();\n  }\n\n  private updateSettingsPaneVisibility(): void {\n    if (this.showSettingsPaneSetting.get()) {\n      this.settingsPane.showWidget();\n    } else {\n      this.settingsPane.hideWidget();\n    }\n  }\n\n  private updateShowSettingsToolbarButton(): void {\n    const messages: string[] = [];\n    if (SDK.CPUThrottlingManager.CPUThrottlingManager.instance().cpuThrottlingRate() !== 1) {\n      messages.push(i18nString(UIStrings.CpuThrottlingIsEnabled));\n    }\n    if (MobileThrottling.ThrottlingManager.throttlingManager().hardwareConcurrencyOverrideEnabled) {\n      messages.push(i18nString(UIStrings.HardwareConcurrencyIsEnabled));\n    }\n    if (SDK.NetworkManager.MultitargetNetworkManager.instance().isThrottling()) {\n      messages.push(i18nString(UIStrings.NetworkThrottlingIsEnabled));\n    }\n    if (this.captureLayersAndPicturesSetting.get()) {\n      messages.push(i18nString(UIStrings.SignificantOverheadDueToPaint));\n    }\n    if (this.disableCaptureJSProfileSetting.get()) {\n      messages.push(i18nString(UIStrings.JavascriptSamplingIsDisabled));\n    }\n\n    this.showSettingsPaneButton.setDefaultWithRedColor(messages.length > 0);\n    this.showSettingsPaneButton.setToggleWithRedColor(messages.length > 0);\n\n    if (messages.length) {\n      const tooltipElement = document.createElement('div');\n      messages.forEach(message => {\n        tooltipElement.createChild('div').textContent = message;\n      });\n      this.showSettingsPaneButton.setTitle(tooltipElement.textContent || '');\n    } else {\n      this.showSettingsPaneButton.setTitle(i18nString(UIStrings.captureSettings));\n    }\n  }\n\n  private setUIControlsEnabled(enabled: boolean): void {\n    this.recordingOptionUIControls.forEach(control => control.setEnabled(enabled));\n  }\n\n  private async getCoverageViewWidget(): Promise<Coverage.CoverageView.CoverageView> {\n    const view = UI.ViewManager.ViewManager.instance().view('coverage');\n    return await view.widget() as Coverage.CoverageView.CoverageView;\n  }\n\n  private async startRecording(): Promise<void> {\n    console.assert(!this.statusPane, 'Status pane is already opened.');\n    this.setState(State.StartPending);\n\n    const recordingOptions = {\n      enableJSSampling: !this.disableCaptureJSProfileSetting.get(),\n      capturePictures: this.captureLayersAndPicturesSetting.get(),\n      captureFilmStrip: this.showScreenshotsSetting.get(),\n      startCoverage: this.startCoverage.get(),\n    };\n\n    if (recordingOptions.startCoverage) {\n      await UI.ViewManager.ViewManager.instance()\n          .showView('coverage')\n          .then(() => this.getCoverageViewWidget())\n          .then(widget => widget.ensureRecordingStarted());\n    }\n\n    this.showRecordingStarted();\n\n    const enabledTraceProviders = Extensions.ExtensionServer.ExtensionServer.instance().traceProviders().filter(\n        provider => TimelinePanel.settingForTraceProvider(provider).get());\n\n    const mainTarget = (SDK.TargetManager.TargetManager.instance().mainTarget() as SDK.Target.Target);\n    if (UIDevtoolsUtils.isUiDevTools()) {\n      this.controller = new UIDevtoolsController(mainTarget, this);\n    } else {\n      this.controller = new TimelineController(mainTarget, this);\n    }\n    this.setUIControlsEnabled(false);\n    this.hideLandingPage();\n    try {\n      const response = await this.controller.startRecording(recordingOptions, enabledTraceProviders);\n      if (response.getError()) {\n        throw new Error(response.getError());\n      } else {\n        this.recordingStarted();\n      }\n    } catch (e) {\n      this.recordingFailed(e.message);\n    }\n  }\n\n  private async stopRecording(): Promise<void> {\n    if (this.statusPane) {\n      this.statusPane.finish();\n      this.statusPane.updateStatus(i18nString(UIStrings.stoppingTimeline));\n      this.statusPane.updateProgressBar(i18nString(UIStrings.received), 0);\n    }\n    this.setState(State.StopPending);\n    if (this.startCoverage.get()) {\n      await UI.ViewManager.ViewManager.instance()\n          .showView('coverage')\n          .then(() => this.getCoverageViewWidget())\n          .then(widget => widget.stopRecording());\n    }\n    if (this.controller) {\n      const model = await this.controller.stopRecording();\n      this.performanceModel = model;\n      this.setUIControlsEnabled(true);\n      this.controller.dispose();\n      this.controller = null;\n    }\n  }\n\n  private recordingFailed(error: string): void {\n    if (this.statusPane) {\n      this.statusPane.remove();\n    }\n    this.statusPane = new StatusPane(\n        {\n          description: error,\n          buttonText: i18nString(UIStrings.close),\n          buttonDisabled: false,\n          showProgress: undefined,\n          showTimer: undefined,\n        },\n        () => this.loadingComplete(null));\n    this.statusPane.showPane(this.statusPaneContainer);\n    this.statusPane.updateStatus(i18nString(UIStrings.recordingFailed));\n\n    this.setState(State.RecordingFailed);\n    this.performanceModel = null;\n    this.setUIControlsEnabled(true);\n    if (this.controller) {\n      this.controller.dispose();\n      this.controller = null;\n    }\n  }\n\n  private onSuspendStateChanged(): void {\n    this.updateTimelineControls();\n  }\n\n  private updateTimelineControls(): void {\n    const state = State;\n    this.toggleRecordAction.setToggled(this.state === state.Recording);\n    this.toggleRecordAction.setEnabled(this.state === state.Recording || this.state === state.Idle);\n    this.recordReloadAction.setEnabled(this.state === state.Idle);\n    this.historyManager.setEnabled(this.state === state.Idle);\n    this.clearButton.setEnabled(this.state === state.Idle);\n    this.panelToolbar.setEnabled(this.state !== state.Loading);\n    this.panelRightToolbar.setEnabled(this.state !== state.Loading);\n    this.dropTarget.setEnabled(this.state === state.Idle);\n    this.loadButton.setEnabled(this.state === state.Idle);\n    this.saveButton.setEnabled(this.state === state.Idle && Boolean(this.performanceModel));\n  }\n\n  toggleRecording(): void {\n    if (this.state === State.Idle) {\n      this.recordingPageReload = false;\n      void this.startRecording();\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.TimelineStarted);\n    } else if (this.state === State.Recording) {\n      void this.stopRecording();\n    }\n  }\n\n  recordReload(): void {\n    if (this.state !== State.Idle) {\n      return;\n    }\n    this.recordingPageReload = true;\n    void this.startRecording();\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.TimelinePageReloadStarted);\n  }\n\n  private onClearButton(): void {\n    this.historyManager.clear();\n    this.clear();\n  }\n\n  private clear(): void {\n    this.showLandingPage();\n    this.reset();\n  }\n\n  private reset(): void {\n    PerfUI.LineLevelProfile.Performance.instance().reset();\n    this.setModel(null);\n  }\n\n  private applyFilters(model: PerformanceModel): void {\n    if (model.timelineModel().isGenericTrace() || Root.Runtime.experiments.isEnabled('timelineShowAllEvents')) {\n      return;\n    }\n    model.setFilters([TimelineUIUtils.visibleEventsFilter()]);\n  }\n\n  private setModel(model: PerformanceModel|null): void {\n    if (this.performanceModel) {\n      this.performanceModel.removeEventListener(Events.WindowChanged, this.onModelWindowChanged, this);\n    }\n    this.performanceModel = model;\n    if (model) {\n      this.searchableViewInternal.showWidget();\n      this.applyFilters(model);\n    } else {\n      this.searchableViewInternal.hideWidget();\n    }\n    this.flameChart.setModel(model);\n\n    this.updateOverviewControls();\n    this.overviewPane.reset();\n    if (model && this.performanceModel) {\n      this.performanceModel.addEventListener(Events.WindowChanged, this.onModelWindowChanged, this);\n      this.overviewPane.setNavStartTimes(model.timelineModel().navStartTimes());\n      this.overviewPane.setBounds(model.timelineModel().minimumRecordTime(), model.timelineModel().maximumRecordTime());\n      PerfUI.LineLevelProfile.Performance.instance().reset();\n      for (const profile of model.timelineModel().cpuProfiles()) {\n        PerfUI.LineLevelProfile.Performance.instance().appendCPUProfile(profile);\n      }\n      this.setMarkers(model.timelineModel());\n      this.flameChart.setSelection(null);\n      this.overviewPane.setWindowTimes(model.window().left, model.window().right);\n    }\n    for (const control of this.overviewControls) {\n      control.setModel(model);\n    }\n    if (this.flameChart) {\n      this.flameChart.resizeToPreferredHeights();\n    }\n    this.updateTimelineControls();\n  }\n\n  private recordingStarted(): void {\n    if (this.recordingPageReload && this.controller) {\n      const target = this.controller.mainTarget();\n      const resourceModel = target.model(SDK.ResourceTreeModel.ResourceTreeModel);\n      if (resourceModel) {\n        resourceModel.reloadPage();\n      }\n    }\n    this.reset();\n    this.setState(State.Recording);\n    this.showRecordingStarted();\n    if (this.statusPane) {\n      this.statusPane.enableAndFocusButton();\n      this.statusPane.updateStatus(i18nString(UIStrings.profiling));\n      this.statusPane.updateProgressBar(i18nString(UIStrings.bufferUsage), 0);\n      this.statusPane.startTimer();\n    }\n    this.hideLandingPage();\n  }\n\n  recordingProgress(usage: number): void {\n    if (this.statusPane) {\n      this.statusPane.updateProgressBar(i18nString(UIStrings.bufferUsage), usage * 100);\n    }\n  }\n\n  private showLandingPage(): void {\n    if (this.landingPage) {\n      this.landingPage.show(this.statusPaneContainer);\n      return;\n    }\n\n    function encloseWithTag(tagName: string, contents: string): HTMLElement {\n      const e = document.createElement(tagName);\n      e.textContent = contents;\n      return e;\n    }\n\n    const learnMoreNode = UI.XLink.XLink.create(\n        'https://developer.chrome.com/docs/devtools/evaluate-performance/', i18nString(UIStrings.learnmore));\n\n    const recordKey = encloseWithTag(\n        'b',\n        UI.ShortcutRegistry.ShortcutRegistry.instance().shortcutsForAction('timeline.toggle-recording')[0].title());\n    const reloadKey = encloseWithTag(\n        'b', UI.ShortcutRegistry.ShortcutRegistry.instance().shortcutsForAction('timeline.record-reload')[0].title());\n    const navigateNode = encloseWithTag('b', i18nString(UIStrings.wasd));\n\n    this.landingPage = new UI.Widget.VBox();\n    this.landingPage.contentElement.classList.add('timeline-landing-page', 'fill');\n    const centered = this.landingPage.contentElement.createChild('div');\n\n    const recordButton = UI.UIUtils.createInlineButton(UI.Toolbar.Toolbar.createActionButton(this.toggleRecordAction));\n    const reloadButton =\n        UI.UIUtils.createInlineButton(UI.Toolbar.Toolbar.createActionButtonForId('timeline.record-reload'));\n\n    centered.createChild('p').appendChild(i18n.i18n.getFormatLocalizedString(\n        str_, UIStrings.clickTheRecordButtonSOrHitSTo, {PH1: recordButton, PH2: recordKey}));\n\n    centered.createChild('p').appendChild(i18n.i18n.getFormatLocalizedString(\n        str_, UIStrings.clickTheReloadButtonSOrHitSTo, {PH1: reloadButton, PH2: reloadKey}));\n\n    centered.createChild('p').appendChild(i18n.i18n.getFormatLocalizedString(\n        str_, UIStrings.afterRecordingSelectAnAreaOf, {PH1: navigateNode, PH2: learnMoreNode}));\n\n    this.landingPage.show(this.statusPaneContainer);\n  }\n\n  private hideLandingPage(): void {\n    this.landingPage.detach();\n  }\n\n  loadingStarted(): void {\n    this.hideLandingPage();\n\n    if (this.statusPane) {\n      this.statusPane.remove();\n    }\n    this.statusPane = new StatusPane(\n        {\n          showProgress: true,\n          showTimer: undefined,\n          buttonDisabled: undefined,\n          buttonText: undefined,\n          description: undefined,\n        },\n        () => this.cancelLoading());\n    this.statusPane.showPane(this.statusPaneContainer);\n    this.statusPane.updateStatus(i18nString(UIStrings.loadingProfile));\n    // FIXME: make loading from backend cancelable as well.\n    if (!this.loader) {\n      this.statusPane.finish();\n    }\n    this.loadingProgress(0);\n  }\n\n  loadingProgress(progress?: number): void {\n    if (typeof progress === 'number' && this.statusPane) {\n      this.statusPane.updateProgressBar(i18nString(UIStrings.received), progress * 100);\n    }\n  }\n\n  processingStarted(): void {\n    if (this.statusPane) {\n      this.statusPane.updateStatus(i18nString(UIStrings.processingProfile));\n    }\n  }\n\n  loadingComplete(tracingModel: SDK.TracingModel.TracingModel|null): void {\n    delete this.loader;\n    this.setState(State.Idle);\n\n    if (this.statusPane) {\n      this.statusPane.remove();\n    }\n    this.statusPane = null;\n\n    if (!tracingModel) {\n      this.clear();\n      return;\n    }\n\n    if (!this.performanceModel) {\n      this.performanceModel = new PerformanceModel();\n    }\n    this.performanceModel.setTracingModel(tracingModel);\n    this.setModel(this.performanceModel);\n    this.historyManager.addRecording(this.performanceModel);\n\n    if (this.startCoverage.get()) {\n      void UI.ViewManager.ViewManager.instance()\n          .showView('coverage')\n          .then(() => this.getCoverageViewWidget())\n          .then(widget => widget.processBacklog())\n          .then(() => this.updateOverviewControls());\n    }\n  }\n\n  private showRecordingStarted(): void {\n    if (this.statusPane) {\n      return;\n    }\n    this.statusPane = new StatusPane(\n        {\n          showTimer: true,\n          showProgress: true,\n          buttonDisabled: true,\n          description: undefined,\n          buttonText: undefined,\n        },\n        () => this.stopRecording());\n    this.statusPane.showPane(this.statusPaneContainer);\n    this.statusPane.updateStatus(i18nString(UIStrings.initializingProfiler));\n  }\n\n  private cancelLoading(): void {\n    if (this.loader) {\n      this.loader.cancel();\n    }\n  }\n\n  private setMarkers(timelineModel: TimelineModel.TimelineModel.TimelineModelImpl): void {\n    const markers = new Map<number, Element>();\n    const recordTypes = TimelineModel.TimelineModel.RecordType;\n    const zeroTime = timelineModel.minimumRecordTime();\n    for (const event of timelineModel.timeMarkerEvents()) {\n      if (event.name === recordTypes.TimeStamp || event.name === recordTypes.ConsoleTime) {\n        continue;\n      }\n      markers.set(event.startTime, TimelineUIUtils.createEventDivider(event, zeroTime));\n    }\n\n    // Add markers for navigation start times.\n    for (const navStartTimeEvent of timelineModel.navStartTimes().values()) {\n      markers.set(navStartTimeEvent.startTime, TimelineUIUtils.createEventDivider(navStartTimeEvent, zeroTime));\n    }\n    this.overviewPane.setMarkers(markers);\n  }\n\n  private async loadEventFired(\n      event: Common.EventTarget\n          .EventTargetEvent<{resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel, loadTime: number}>):\n      Promise<void> {\n    if (this.state !== State.Recording || !this.recordingPageReload || !this.controller ||\n        this.controller.mainTarget() !== event.data.resourceTreeModel.target()) {\n      return;\n    }\n    const controller = this.controller;\n    await new Promise(r => window.setTimeout(r, this.millisecondsToRecordAfterLoadEvent));\n\n    // Check if we're still in the same recording session.\n    if (controller !== this.controller || this.state !== State.Recording) {\n      return;\n    }\n    void this.stopRecording();\n  }\n\n  private frameForSelection(selection: TimelineSelection): TimelineModel.TimelineFrameModel.TimelineFrame|null {\n    switch (selection.type()) {\n      case TimelineSelection.Type.Frame:\n        return selection.object() as TimelineModel.TimelineFrameModel.TimelineFrame;\n      case TimelineSelection.Type.Range:\n        return null;\n      case TimelineSelection.Type.TraceEvent:\n        if (!this.performanceModel) {\n          return null;\n        }\n        return this.performanceModel.frameModel().getFramesWithinWindow(\n            selection.endTimeInternal, selection.endTimeInternal)[0];\n      default:\n        console.assert(false, 'Should never be reached');\n        return null;\n    }\n  }\n\n  jumpToFrame(offset: number): true|undefined {\n    const currentFrame = this.selection && this.frameForSelection(this.selection);\n    if (!currentFrame || !this.performanceModel) {\n      return;\n    }\n    const frames = this.performanceModel.frames();\n    let index = frames.indexOf(currentFrame);\n    console.assert(index >= 0, 'Can\\'t find current frame in the frame list');\n    index = Platform.NumberUtilities.clamp(index + offset, 0, frames.length - 1);\n    const frame = frames[index];\n    this.revealTimeRange(frame.startTime, frame.endTime);\n    this.select(TimelineSelection.fromFrame(frame));\n    return true;\n  }\n\n  select(selection: TimelineSelection|null): void {\n    this.selection = selection;\n    this.flameChart.setSelection(selection);\n  }\n\n  selectEntryAtTime(events: SDK.TracingModel.Event[]|null, time: number): void {\n    if (!events) {\n      return;\n    }\n    // Find best match, then backtrack to the first visible entry.\n    for (let index = Platform.ArrayUtilities.upperBound(events, time, (time, event) => time - event.startTime) - 1;\n         index >= 0; --index) {\n      const event = events[index];\n      const endTime = event.endTime || event.startTime;\n      if (SDK.TracingModel.TracingModel.isTopLevelEvent(event) && endTime < time) {\n        break;\n      }\n      if (this.performanceModel && this.performanceModel.isVisible(event) && endTime >= time) {\n        this.select(TimelineSelection.fromTraceEvent(event));\n        return;\n      }\n    }\n    this.select(null);\n  }\n\n  highlightEvent(event: SDK.TracingModel.Event|null): void {\n    this.flameChart.highlightEvent(event);\n  }\n\n  private revealTimeRange(startTime: number, endTime: number): void {\n    if (!this.performanceModel) {\n      return;\n    }\n    const window = this.performanceModel.window();\n    let offset = 0;\n    if (window.right < endTime) {\n      offset = endTime - window.right;\n    } else if (window.left > startTime) {\n      offset = startTime - window.left;\n    }\n    this.performanceModel.setWindow({left: window.left + offset, right: window.right + offset}, /* animate */ true);\n  }\n\n  private handleDrop(dataTransfer: DataTransfer): void {\n    const items = dataTransfer.items;\n    if (!items.length) {\n      return;\n    }\n    const item = items[0];\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.PerfPanelTraceImported);\n    if (item.kind === 'string') {\n      const url = dataTransfer.getData('text/uri-list') as Platform.DevToolsPath.UrlString;\n      if (new Common.ParsedURL.ParsedURL(url).isValid) {\n        this.loadFromURL(url);\n      }\n    } else if (item.kind === 'file') {\n      const file = items[0].getAsFile();\n      if (!file) {\n        return;\n      }\n      this.loadFromFile(file);\n    }\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum State {\n  Idle = 'Idle',\n  StartPending = 'StartPending',\n  Recording = 'Recording',\n  StopPending = 'StopPending',\n  Loading = 'Loading',\n  RecordingFailed = 'RecordingFailed',\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum ViewMode {\n  FlameChart = 'FlameChart',\n  BottomUp = 'BottomUp',\n  CallTree = 'CallTree',\n  EventLog = 'EventLog',\n}\n\n// Define row and header height, should be in sync with styles for timeline graphs.\nexport const rowHeight = 18;\n\nexport const headerHeight = 20;\n\nexport class TimelineSelection {\n  private readonly typeInternal: string;\n  private readonly startTimeInternal: number;\n  readonly endTimeInternal: number;\n  private readonly objectInternal: Object|null;\n\n  constructor(type: string, startTime: number, endTime: number, object?: Object) {\n    this.typeInternal = type;\n    this.startTimeInternal = startTime;\n    this.endTimeInternal = endTime;\n    this.objectInternal = object || null;\n  }\n\n  static fromFrame(frame: TimelineModel.TimelineFrameModel.TimelineFrame): TimelineSelection {\n    return new TimelineSelection(TimelineSelection.Type.Frame, frame.startTime, frame.endTime, frame);\n  }\n\n  static fromNetworkRequest(request: TimelineModel.TimelineModel.NetworkRequest): TimelineSelection {\n    return new TimelineSelection(\n        TimelineSelection.Type.NetworkRequest, request.startTime, request.endTime || request.startTime, request);\n  }\n\n  static fromTraceEvent(event: SDK.TracingModel.Event): TimelineSelection {\n    return new TimelineSelection(\n        TimelineSelection.Type.TraceEvent, event.startTime, event.endTime || (event.startTime + 1), event);\n  }\n\n  static fromRange(startTime: number, endTime: number): TimelineSelection {\n    return new TimelineSelection(TimelineSelection.Type.Range, startTime, endTime);\n  }\n\n  type(): string {\n    return this.typeInternal;\n  }\n\n  object(): Object|null {\n    return this.objectInternal;\n  }\n\n  startTime(): number {\n    return this.startTimeInternal;\n  }\n\n  endTime(): number {\n    return this.endTimeInternal;\n  }\n}\n\nexport namespace TimelineSelection {\n  // TODO(crbug.com/1167717): Make this a const enum again\n  // eslint-disable-next-line rulesdir/const_enum\n  export enum Type {\n    Frame = 'Frame',\n    NetworkRequest = 'NetworkRequest',\n    TraceEvent = 'TraceEvent',\n    Range = 'Range',\n  }\n}\nexport interface TimelineModeViewDelegate {\n  select(selection: TimelineSelection|null): void;\n  selectEntryAtTime(events: SDK.TracingModel.Event[]|null, time: number): void;\n  highlightEvent(event: SDK.TracingModel.Event|null): void;\n}\n\nexport class StatusPane extends UI.Widget.VBox {\n  private status: HTMLElement;\n  private time!: Element;\n  private progressLabel!: Element;\n  private progressBar!: Element;\n  private readonly description: HTMLElement|undefined;\n  private button: HTMLButtonElement;\n  private startTime!: number;\n  private timeUpdateTimer?: number;\n\n  constructor(\n      options: {\n        showTimer?: boolean,\n        showProgress?: boolean,\n        description?: string,\n        buttonText?: string,\n        buttonDisabled?: boolean,\n      },\n      buttonCallback: () => (Promise<void>| void)) {\n    super(true);\n\n    this.contentElement.classList.add('timeline-status-dialog');\n\n    const statusLine = this.contentElement.createChild('div', 'status-dialog-line status');\n    statusLine.createChild('div', 'label').textContent = i18nString(UIStrings.status);\n    this.status = statusLine.createChild('div', 'content');\n    UI.ARIAUtils.markAsStatus(this.status);\n\n    if (options.showTimer) {\n      const timeLine = this.contentElement.createChild('div', 'status-dialog-line time');\n      timeLine.createChild('div', 'label').textContent = i18nString(UIStrings.time);\n      this.time = timeLine.createChild('div', 'content');\n    }\n\n    if (options.showProgress) {\n      const progressLine = this.contentElement.createChild('div', 'status-dialog-line progress');\n      this.progressLabel = progressLine.createChild('div', 'label');\n      this.progressBar = progressLine.createChild('div', 'indicator-container').createChild('div', 'indicator');\n      UI.ARIAUtils.markAsProgressBar(this.progressBar);\n    }\n\n    if (typeof options.description === 'string') {\n      const descriptionLine = this.contentElement.createChild('div', 'status-dialog-line description');\n      descriptionLine.createChild('div', 'label').textContent = i18nString(UIStrings.description);\n      this.description = descriptionLine.createChild('div', 'content');\n      this.description.innerText = options.description;\n    }\n\n    const buttonText = options.buttonText || i18nString(UIStrings.stop);\n    this.button = UI.UIUtils.createTextButton(buttonText, buttonCallback, '', true);\n    // Profiling can't be stopped during initialization.\n    this.button.disabled = !options.buttonDisabled === false;\n    this.contentElement.createChild('div', 'stop-button').appendChild(this.button);\n  }\n\n  finish(): void {\n    this.stopTimer();\n    this.button.disabled = true;\n  }\n\n  remove(): void {\n    (this.element.parentNode as HTMLElement).classList.remove('tinted');\n    this.arrangeDialog((this.element.parentNode as HTMLElement));\n    this.stopTimer();\n    this.element.remove();\n  }\n\n  showPane(parent: Element): void {\n    this.arrangeDialog(parent);\n    this.show(parent);\n    parent.classList.add('tinted');\n  }\n\n  enableAndFocusButton(): void {\n    this.button.disabled = false;\n    this.button.focus();\n  }\n\n  updateStatus(text: string): void {\n    this.status.textContent = text;\n  }\n\n  updateProgressBar(activity: string, percent: number): void {\n    this.progressLabel.textContent = activity;\n    (this.progressBar as HTMLElement).style.width = percent.toFixed(1) + '%';\n    UI.ARIAUtils.setValueNow(this.progressBar, percent);\n    this.updateTimer();\n  }\n\n  startTimer(): void {\n    this.startTime = Date.now();\n    this.timeUpdateTimer = window.setInterval(this.updateTimer.bind(this, false), 1000);\n    this.updateTimer();\n  }\n\n  private stopTimer(): void {\n    if (!this.timeUpdateTimer) {\n      return;\n    }\n    clearInterval(this.timeUpdateTimer);\n    this.updateTimer(true);\n    delete this.timeUpdateTimer;\n  }\n\n  private updateTimer(precise?: boolean): void {\n    this.arrangeDialog((this.element.parentNode as HTMLElement));\n    if (!this.timeUpdateTimer) {\n      return;\n    }\n    const elapsed = (Date.now() - this.startTime) / 1000;\n    this.time.textContent = i18nString(UIStrings.ssec, {PH1: elapsed.toFixed(precise ? 1 : 0)});\n  }\n\n  private arrangeDialog(parent: Element): void {\n    const isSmallDialog = parent.clientWidth < 325;\n    this.element.classList.toggle('small-dialog', isSmallDialog);\n    this.contentElement.classList.toggle('small-dialog', isSmallDialog);\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([timelineStatusDialogStyles]);\n  }\n}\n\nlet loadTimelineHandlerInstance: LoadTimelineHandler;\n\nexport class LoadTimelineHandler implements Common.QueryParamHandler.QueryParamHandler {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): LoadTimelineHandler {\n    const {forceNew} = opts;\n    if (!loadTimelineHandlerInstance || forceNew) {\n      loadTimelineHandlerInstance = new LoadTimelineHandler();\n    }\n\n    return loadTimelineHandlerInstance;\n  }\n\n  handleQueryParam(value: string): void {\n    void UI.ViewManager.ViewManager.instance().showView('timeline').then(() => {\n      TimelinePanel.instance().loadFromURL(window.decodeURIComponent(value) as Platform.DevToolsPath.UrlString);\n    });\n  }\n}\n\nlet actionDelegateInstance: ActionDelegate;\n\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  static instance(opts: {\n    forceNew: boolean|null,\n  }|undefined = {forceNew: null}): ActionDelegate {\n    const {forceNew} = opts;\n    if (!actionDelegateInstance || forceNew) {\n      actionDelegateInstance = new ActionDelegate();\n    }\n\n    return actionDelegateInstance;\n  }\n\n  handleAction(context: UI.Context.Context, actionId: string): boolean {\n    const panel = (UI.Context.Context.instance().flavor(TimelinePanel) as TimelinePanel);\n    console.assert(panel && panel instanceof TimelinePanel);\n    switch (actionId) {\n      case 'timeline.toggle-recording':\n        panel.toggleRecording();\n        return true;\n      case 'timeline.record-reload':\n        panel.recordReload();\n        return true;\n      case 'timeline.save-to-file':\n        void panel.saveToFile();\n        return true;\n      case 'timeline.load-from-file':\n        panel.selectFileToLoad();\n        return true;\n      case 'timeline.jump-to-previous-frame':\n        panel.jumpToFrame(-1);\n        return true;\n      case 'timeline.jump-to-next-frame':\n        panel.jumpToFrame(1);\n        return true;\n      case 'timeline.show-history':\n        void panel.showHistory();\n        return true;\n      case 'timeline.previous-recording':\n        panel.navigateHistory(1);\n        return true;\n      case 'timeline.next-recording':\n        panel.navigateHistory(-1);\n        return true;\n    }\n    return false;\n  }\n}\n\nconst traceProviderToSetting =\n    new WeakMap<Extensions.ExtensionTraceProvider.ExtensionTraceProvider, Common.Settings.Setting<boolean>>();\n"],
  "mappings": "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",
  "names": []
}
