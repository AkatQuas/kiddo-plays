{
  "version": 3,
  "sources": ["../../../../../../../front_end/panels/timeline/components/WebVitalsTimeline.ts"],
  "sourcesContent": ["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../../core/host/host.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as Coordinator from '../../../ui/components/render_coordinator/render_coordinator.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\nimport {WebVitalsEventLane, WebVitalsTimeboxLane} from './WebVitalsLane.js';\nimport type {WebVitalsTooltip} from './WebVitalsTooltip.js';\n\nconst UIStrings = {\n  /**\n  *@description Label for the First Contentful Paint lane\n  */\n  fcp: 'FCP',\n  /**\n  *@description Label for the Largest Contentful Paint lane\n  */\n  lcp: 'LCP',\n  /**\n  *@description Label for the Layout Shifts lane\n  */\n  ls: 'LS',\n  /**\n  *@description Label for the Long Tasks lane\n  */\n  longTasks: 'Long Tasks',\n  /**\n  *@description Label for the Long Tasks overlay\n  */\n  longTask: 'Long Task',\n  /**\n  *@description Label for the First Contentful Paint overlay\n  */\n  firstContentfulPaint: 'First Contentful Paint',\n  /**\n  *@description Label for the Largest Contentful Paint overlay\n  */\n  largestContentfulPaint: 'Largest Contentful Paint',\n  /**\n  *@description Label to describe the range in which the rating for the value is considered good\n  */\n  good: 'Good',\n  /**\n  *@description Label to describe the range in which the rating for the value is considered to need improvement\n  */\n  needsImprovement: 'Needs improvement',\n  /**\n  *@description Label to describe the range in which the rating for the value is considered poor\n  */\n  poor: 'Poor',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/components/WebVitalsTimeline.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-timeline-webvitals': WebVitalsTimeline;\n  }\n}\n\nexport interface Event {\n  timestamp: number;\n}\n\nexport interface Timebox {\n  start: number;\n  duration: number;\n}\n\nexport interface WebVitalsFCPEvent {\n  timestamp: number;\n}\n\nexport interface WebVitalsLCPEvent {\n  timestamp: number;\n}\n\nexport interface WebVitalsLayoutShiftEvent {\n  timestamp: number;\n}\n\ninterface WebVitalsTimelineTask {\n  start: number;\n  duration: number;\n}\n\ninterface WebVitalsTimelineData {\n  startTime: number;\n  duration: number;\n  fcps?: WebVitalsFCPEvent[];\n  lcps?: WebVitalsLCPEvent[];\n  layoutShifts?: WebVitalsLayoutShiftEvent[];\n  longTasks?: WebVitalsTimelineTask[];\n  mainFrameNavigations?: number[];\n  maxDuration?: number;\n}\n\nexport interface Marker {\n  type: MarkerType;\n  timestamp: number;\n  timestampLabel: string;\n  timestampMetrics: TextMetrics;\n  widthIncludingLabel: number;\n  widthIncludingTimestamp: number;\n}\n\nexport const enum MarkerType {\n  Good = 'Good',\n  Medium = 'Medium',\n  Bad = 'Bad',\n}\n\nexport const LINE_HEIGHT = 24;\nconst NUMBER_OF_LANES = 5;\nconst FCP_GOOD_TIMING = 2000;\nconst FCP_MEDIUM_TIMING = 4000;\nconst LCP_GOOD_TIMING = 2500;\nconst LCP_MEDIUM_TIMING = 4000;\nexport const LONG_TASK_THRESHOLD = 50;\n\ntype Constructor<T> = {\n  new (...args: unknown[]): T,\n};\n\n//  eslint-disable-next-line\nexport function assertInstanceOf<T>(instance: any, constructor: Constructor<T>): asserts instance is T {\n  if (!(instance instanceof constructor)) {\n    throw new TypeError(`Instance expected to be of type ${constructor.name} but got ${instance.constructor.name}`);\n  }\n}\n\nexport class WebVitalsTimeline extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-timeline-webvitals`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #mainFrameNavigations: readonly number[] = [];\n  #startTime = 0;\n  #duration = 1000;\n  #maxDuration = 1000;\n  #width = 0;\n  #height = 0;\n  #canvas: HTMLCanvasElement;\n  #hoverLane: number|null = null;\n\n  #fcpLane: WebVitalsEventLane;\n  #lcpLane: WebVitalsEventLane;\n  #layoutShiftsLane: WebVitalsEventLane;\n  #longTasksLane: WebVitalsTimeboxLane;\n\n  #context: CanvasRenderingContext2D;\n  #animationFrame: number|null = null;\n\n  #overlay: WebVitalsTooltip;\n\n  constructor() {\n    super();\n\n    this.#canvas = document.createElement('canvas');\n    this.#canvas.style.width = '100%';\n    this.#canvas.style.height = `${Math.max(LINE_HEIGHT * NUMBER_OF_LANES, 120)}px`;\n    this.#shadow.appendChild(this.#canvas);\n    this.#canvas.addEventListener('pointermove', this.#handlePointerMove.bind(this));\n    this.#canvas.addEventListener('pointerout', this.#handlePointerOut.bind(this));\n    this.#canvas.addEventListener('click', this.#handleClick.bind(this));\n\n    const context = this.#canvas.getContext('2d');\n\n    assertInstanceOf(context, CanvasRenderingContext2D);\n\n    this.#context = context;\n\n    this.#fcpLane = new WebVitalsEventLane(\n        this, i18nString(UIStrings.fcp), e => this.#getMarkerTypeForFCPEvent(e), this.#getFCPMarkerOverlay);\n    this.#lcpLane = new WebVitalsEventLane(\n        this, i18nString(UIStrings.lcp), e => this.#getMarkerTypeForLCPEvent(e), this.#getLCPMarkerOverlay);\n    this.#layoutShiftsLane = new WebVitalsEventLane(this, i18nString(UIStrings.ls), _ => MarkerType.Bad);\n    this.#longTasksLane = new WebVitalsTimeboxLane(this, i18nString(UIStrings.longTasks), this.#getLongTaskOverlay);\n\n    this.#overlay = document.createElement('devtools-timeline-webvitals-tooltip');\n    this.#overlay.style.position = 'absolute';\n    this.#overlay.style.visibility = 'hidden';\n\n    this.ownerDocument.body.appendChild(this.#overlay);\n  }\n\n  set data(data: WebVitalsTimelineData) {\n    this.#startTime = data.startTime || this.#startTime;\n    this.#duration = data.duration || this.#duration;\n    this.#maxDuration = data.maxDuration || this.#maxDuration;\n    this.#mainFrameNavigations = data.mainFrameNavigations || this.#mainFrameNavigations;\n\n    if (data.fcps) {\n      this.#fcpLane.setEvents(data.fcps);\n    }\n\n    if (data.lcps) {\n      this.#lcpLane.setEvents(data.lcps);\n    }\n\n    if (data.layoutShifts) {\n      this.#layoutShiftsLane.setEvents(data.layoutShifts);\n    }\n\n    if (data.longTasks) {\n      this.#longTasksLane.setTimeboxes(data.longTasks);\n    }\n\n    this.#scheduleRender();\n  }\n\n  getContext(): CanvasRenderingContext2D {\n    return this.#context;\n  }\n\n  getLineHeight(): number {\n    return LINE_HEIGHT;\n  }\n\n  hideOverlay(): void {\n    this.#overlay.style.visibility = 'hidden';\n  }\n\n  showOverlay(content: LitHtml.TemplateResult): void {\n    this.#overlay.data = {content};\n    this.#overlay.style.visibility = 'visible';\n  }\n\n  #handlePointerMove(e: MouseEvent): void {\n    this.#updateOverlayPosition(e.clientX, e.clientY);\n\n    const x = e.offsetX, y = e.offsetY;\n    const lane = Math.floor(y / LINE_HEIGHT);\n\n    this.#hoverLane = lane;\n    this.#fcpLane.handlePointerMove(this.#hoverLane === 1 ? x : null);\n    this.#lcpLane.handlePointerMove(this.#hoverLane === 2 ? x : null);\n    this.#layoutShiftsLane.handlePointerMove(this.#hoverLane === 3 ? x : null);\n    this.#longTasksLane.handlePointerMove(this.#hoverLane === 4 ? x : null);\n\n    this.#scheduleRender();\n  }\n\n  #updateOverlayPosition(clientX: number, clientY: number): void {\n    void coordinator.read(() => {\n      const bb1 = this.getBoundingClientRect();\n      const bb2 = this.#overlay.getBoundingClientRect();\n\n      const x = clientX + 10 + bb2.width > bb1.x + bb1.width ? clientX - bb2.width - 10 : clientX + 10;\n\n      void coordinator.write(() => {\n        this.#overlay.style.top = `${clientY + 10}px`;\n        this.#overlay.style.left = `${x}px`;\n      });\n    });\n  }\n\n  #handlePointerOut(_: MouseEvent): void {\n    this.#fcpLane.handlePointerMove(null);\n    this.#lcpLane.handlePointerMove(null);\n    this.#layoutShiftsLane.handlePointerMove(null);\n    this.#longTasksLane.handlePointerMove(null);\n\n    this.#scheduleRender();\n  }\n\n  #handleClick(e: MouseEvent): void {\n    const x = e.offsetX;\n\n    this.focus();\n    this.#fcpLane.handleClick(this.#hoverLane === 1 ? x : null);\n    this.#lcpLane.handleClick(this.#hoverLane === 2 ? x : null);\n    this.#layoutShiftsLane.handleClick(this.#hoverLane === 3 ? x : null);\n    this.#longTasksLane.handleClick(this.#hoverLane === 4 ? x : null);\n\n    this.#scheduleRender();\n  }\n\n  /**\n   * Transform from time to pixel offset\n   * @param x\n   */\n  tX(x: number): number {\n    return (x - this.#startTime) / this.#duration * this.#width;\n  }\n\n  /**\n   * Transform from duration to pixels\n   * @param duration\n   */\n  tD(duration: number): number {\n    return duration / this.#duration * this.#width;\n  }\n\n  setSize(width: number, height: number): void {\n    const scale = window.devicePixelRatio;\n\n    this.#width = width;\n    this.#height = Math.max(height, 120);\n\n    this.#canvas.width = Math.floor(this.#width * scale);\n    this.#canvas.height = Math.floor(this.#height * scale);\n    this.#context.scale(scale, scale);\n\n    this.style.width = this.#width + 'px';\n    this.style.height = this.#height + 'px';\n    this.render();\n  }\n\n  connectedCallback(): void {\n    this.style.display = 'block';\n    this.tabIndex = 0;\n\n    const boundingClientRect = this.#canvas.getBoundingClientRect();\n    const width = boundingClientRect.width;\n    const height = boundingClientRect.height;\n\n    this.setSize(width, height);\n    this.render();\n  }\n\n  disconnectedCallback(): void {\n    this.#overlay.remove();\n  }\n\n  #getMarkerTypeForFCPEvent(event: WebVitalsFCPEvent): MarkerType {\n    const t = this.getTimeSinceLastMainFrameNavigation(event.timestamp);\n    if (t <= FCP_GOOD_TIMING) {\n      return MarkerType.Good;\n    }\n    if (t <= FCP_MEDIUM_TIMING) {\n      return MarkerType.Medium;\n    }\n    return MarkerType.Bad;\n  }\n\n  #getMarkerTypeForLCPEvent(event: WebVitalsLCPEvent): MarkerType {\n    const t = this.getTimeSinceLastMainFrameNavigation(event.timestamp);\n    if (t <= LCP_GOOD_TIMING) {\n      return MarkerType.Good;\n    }\n    if (t <= LCP_MEDIUM_TIMING) {\n      return MarkerType.Medium;\n    }\n    return MarkerType.Bad;\n  }\n\n  #getFCPMarkerOverlay(): LitHtml.TemplateResult {\n    return LitHtml.html`\n      <table class=\"table\">\n        <thead>\n          <td colspan=\"3\" class=\"title\">${i18nString(UIStrings.firstContentfulPaint)}</td>\n        </thead>\n        <tbody>\n          <tr>\n            <td><span class=\"good\"></span></td>\n            <td>${i18nString(UIStrings.good)}</td>\n            <td>\n              \u2264 ${i18n.TimeUtilities.millisToString(FCP_GOOD_TIMING)}</td>\n          </tr>\n          <tr>\n            <td><span class=\"medium\"></span></td>\n            <td>${i18nString(UIStrings.needsImprovement)}</td>\n            <td></td>\n          </tr>\n          <tr>\n            <td><span class=\"bad\"></span></td>\n            <td>${i18nString(UIStrings.poor)}</td>\n            <td>> ${i18n.TimeUtilities.millisToString(FCP_MEDIUM_TIMING)}</td>\n          </tr>\n        </tbody>\n      </table>\n    `;\n  }\n\n  #getLCPMarkerOverlay(): LitHtml.TemplateResult {\n    return LitHtml.html`\n      <table class=\"table\">\n        <thead>\n          <td colspan=\"3\" class=\"title\">${i18nString(UIStrings.largestContentfulPaint)}</td>\n        </thead>\n        <tbody>\n          <tr>\n            <td><span class=\"good\"></span></td>\n            <td>${i18nString(UIStrings.good)}</td>\n            <td>\n            \u2264 ${i18n.TimeUtilities.millisToString(LCP_GOOD_TIMING)}</td>\n          </tr>\n          <tr>\n            <td><span class=\"medium\"></span></td>\n            <td>${i18nString(UIStrings.needsImprovement)}</td>\n            <td></td>\n          </tr>\n          <tr>\n            <td><span class=\"bad\"></span></td>\n            <td>${i18nString(UIStrings.poor)}</td>\n            <td>> ${i18n.TimeUtilities.millisToString(LCP_MEDIUM_TIMING)}</td>\n          </tr>\n        </tbody>\n      </table>\n    `;\n  }\n\n  #getLongTaskOverlay(timebox: Timebox): LitHtml.TemplateResult {\n    return LitHtml.html`\n        <table class=\"table\">\n          <thead>\n            <td colspan=\"3\" class=\"title\">\n              ${i18nString(UIStrings.longTask)}\n              <span class=\"small\">\n                ${i18n.TimeUtilities.millisToString(timebox.duration)}\n              </span>\n            </td>\n          </thead>\n          <tbody>\n            <tr>\n              <td><span class=\"good\"></span></td>\n              <td>${i18nString(UIStrings.good)}</td>\n              <td>\u2264 ${i18n.TimeUtilities.millisToString(LONG_TASK_THRESHOLD)}</td>\n            </tr>\n            <tr>\n              <td><span class=\"bad\"></span></td>\n              <td>${i18nString(UIStrings.poor)}</td>\n              <td>> ${i18n.TimeUtilities.millisToString(LONG_TASK_THRESHOLD)}</td>\n            </tr>\n          </tbody>\n        </table>\n    `;\n  }\n\n  #renderMainFrameNavigations(markers: readonly number[]): void {\n    this.#context.save();\n    this.#context.strokeStyle = 'blue';\n    this.#context.beginPath();\n    for (const marker of markers) {\n      this.#context.moveTo(this.tX(marker), 0);\n      this.#context.lineTo(this.tX(marker), this.#height);\n    }\n    this.#context.stroke();\n    this.#context.restore();\n  }\n\n  getTimeSinceLastMainFrameNavigation(time: number): number {\n    let i = 0, prev = 0;\n    while (i < this.#mainFrameNavigations.length && this.#mainFrameNavigations[i] <= time) {\n      prev = this.#mainFrameNavigations[i];\n      i++;\n    }\n    return time - prev;\n  }\n\n  render(): void {\n    this.#context.save();\n    this.#context.clearRect(0, 0, this.#width, this.#height);\n\n    this.#context.strokeStyle = '#dadce0';\n\n    // Render the grid in the background.\n    this.#context.beginPath();\n    for (let i = 0; i < NUMBER_OF_LANES; i++) {\n      this.#context.moveTo(0, (i * LINE_HEIGHT) + 0.5);\n      this.#context.lineTo(this.#width, (i * LINE_HEIGHT) + 0.5);\n    }\n    this.#context.moveTo(0, NUMBER_OF_LANES * LINE_HEIGHT - 0.5);\n    this.#context.lineTo(this.#width, NUMBER_OF_LANES * LINE_HEIGHT - 0.5);\n    this.#context.stroke();\n    this.#context.restore();\n\n    // Render the WebVitals label.\n    this.#context.save();\n    this.#context.font = '11px ' + Host.Platform.fontFamily();\n    const text = this.#context.measureText('Web Vitals');\n    const height = text.actualBoundingBoxAscent - text.actualBoundingBoxDescent;\n    this.#context.fillStyle = '#202124';\n    this.#context.fillText('Web Vitals', 6, 4 + height);\n    this.#context.restore();\n\n    // Render all the lanes.\n    this.#context.save();\n    this.#context.translate(0, Number(LINE_HEIGHT));\n    this.#fcpLane.render();\n    this.#context.translate(0, Number(LINE_HEIGHT));\n    this.#lcpLane.render();\n    this.#context.translate(0, Number(LINE_HEIGHT));\n    this.#layoutShiftsLane.render();\n    this.#context.translate(0, Number(LINE_HEIGHT));\n    this.#longTasksLane.render();\n    this.#context.restore();\n\n    this.#renderMainFrameNavigations(this.#mainFrameNavigations);\n  }\n\n  #scheduleRender(): void {\n    if (this.#animationFrame) {\n      return;\n    }\n\n    this.#animationFrame = window.requestAnimationFrame(() => {\n      this.#animationFrame = null;\n      this.render();\n    });\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-timeline-webvitals', WebVitalsTimeline);\n"],
  "mappings": "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",
  "names": []
}
