{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/timeline/CountersGraph.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as TimelineModel from '../../models/timeline_model/timeline_model.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type {PerformanceModel, WindowChangedEvent} from './PerformanceModel.js';\nimport {Events} from './PerformanceModel.js';\nimport type {TimelineModeViewDelegate} from './TimelinePanel.js';\n\nconst UIStrings = {\n  /**\n  *@description Text for a heap profile type\n  */\n  jsHeap: 'JS Heap',\n  /**\n  *@description Text for documents, a type of resources\n  */\n  documents: 'Documents',\n  /**\n  *@description Text in Counters Graph of the Performance panel\n  */\n  nodes: 'Nodes',\n  /**\n  *@description Text in Counters Graph of the Performance panel\n  */\n  listeners: 'Listeners',\n  /**\n  *@description Text in Counters Graph of the Performance panel\n  */\n  gpuMemory: 'GPU Memory',\n  /**\n  *@description Range text content in Counters Graph of the Performance panel\n  *@example {2} PH1\n  *@example {10} PH2\n  */\n  ss: '[{PH1}\u00A0\u2013\u00A0{PH2}]',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/CountersGraph.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class CountersGraph extends UI.Widget.VBox {\n  private readonly delegate: TimelineModeViewDelegate;\n  private readonly calculator: Calculator;\n  private model!: PerformanceModel|null;\n  private readonly header: UI.Widget.HBox;\n  readonly toolbar: UI.Toolbar.Toolbar;\n  private graphsContainer: UI.Widget.VBox;\n  canvasContainer: UI.Widget.WidgetElement;\n  private canvas: HTMLCanvasElement;\n  private readonly timelineGrid: PerfUI.TimelineGrid.TimelineGrid;\n  private readonly counters: Counter[];\n  private readonly counterUI: CounterUI[];\n  private readonly countersByName: Map<string, Counter>;\n  private readonly gpuMemoryCounter: Counter;\n  private track?: TimelineModel.TimelineModel.Track|null;\n  currentValuesBar?: HTMLElement;\n  private markerXPosition?: number;\n\n  constructor(delegate: TimelineModeViewDelegate) {\n    super();\n    this.element.id = 'memory-graphs-container';\n\n    this.delegate = delegate;\n    this.calculator = new Calculator();\n\n    // Create selectors\n    this.header = new UI.Widget.HBox();\n    this.header.element.classList.add('timeline-memory-header');\n    this.header.show(this.element);\n    this.toolbar = new UI.Toolbar.Toolbar('timeline-memory-toolbar');\n    this.header.element.appendChild(this.toolbar.element);\n\n    this.graphsContainer = new UI.Widget.VBox();\n    this.graphsContainer.show(this.element);\n    const canvasWidget = new UI.Widget.VBoxWithResizeCallback(this.resize.bind(this));\n    canvasWidget.show(this.graphsContainer.element);\n    this.createCurrentValuesBar();\n    this.canvasContainer = canvasWidget.element;\n    this.canvasContainer.id = 'memory-graphs-canvas-container';\n    this.canvas = document.createElement('canvas');\n    this.canvasContainer.appendChild(this.canvas);\n    this.canvas.id = 'memory-counters-graph';\n\n    this.canvasContainer.addEventListener('mouseover', this.onMouseMove.bind(this), true);\n    this.canvasContainer.addEventListener('mousemove', this.onMouseMove.bind(this), true);\n    this.canvasContainer.addEventListener('mouseleave', this.onMouseLeave.bind(this), true);\n    this.canvasContainer.addEventListener('click', this.onClick.bind(this), true);\n    // We create extra timeline grid here to reuse its event dividers.\n    this.timelineGrid = new PerfUI.TimelineGrid.TimelineGrid();\n    this.canvasContainer.appendChild(this.timelineGrid.dividersElement);\n\n    this.counters = [];\n    this.counterUI = [];\n\n    this.countersByName = new Map();\n    this.countersByName.set(\n        'jsHeapSizeUsed',\n        this.createCounter(i18nString(UIStrings.jsHeap), 'hsl(220, 90%, 43%)', Platform.NumberUtilities.bytesToString));\n    this.countersByName.set('documents', this.createCounter(i18nString(UIStrings.documents), 'hsl(0, 90%, 43%)'));\n    this.countersByName.set('nodes', this.createCounter(i18nString(UIStrings.nodes), 'hsl(120, 90%, 43%)'));\n    this.countersByName.set(\n        'jsEventListeners', this.createCounter(i18nString(UIStrings.listeners), 'hsl(38, 90%, 43%)'));\n\n    this.gpuMemoryCounter = this.createCounter(\n        i18nString(UIStrings.gpuMemory), 'hsl(300, 90%, 43%)', Platform.NumberUtilities.bytesToString);\n    this.countersByName.set('gpuMemoryUsedKB', this.gpuMemoryCounter);\n  }\n\n  setModel(model: PerformanceModel|null, track: TimelineModel.TimelineModel.Track|null): void {\n    if (this.model !== model) {\n      if (this.model) {\n        this.model.removeEventListener(Events.WindowChanged, this.onWindowChanged, this);\n      }\n      this.model = model;\n      if (this.model) {\n        this.model.addEventListener(Events.WindowChanged, this.onWindowChanged, this);\n      }\n    }\n    this.calculator.setZeroTime(model ? model.timelineModel().minimumRecordTime() : 0);\n    for (let i = 0; i < this.counters.length; ++i) {\n      this.counters[i].reset();\n      this.counterUI[i].reset();\n    }\n    this.scheduleRefresh();\n    this.track = track;\n    if (!track) {\n      return;\n    }\n    const events = track.syncEvents();\n    for (let i = 0; i < events.length; ++i) {\n      const event = events[i];\n      if (event.name !== TimelineModel.TimelineModel.RecordType.UpdateCounters) {\n        continue;\n      }\n\n      const counters = event.args.data;\n      if (!counters) {\n        return;\n      }\n      for (const name in counters) {\n        const counter = this.countersByName.get(name);\n        if (counter) {\n          counter.appendSample(event.startTime, counters[name]);\n        }\n      }\n\n      const gpuMemoryLimitCounterName = 'gpuMemoryLimitKB';\n      if (gpuMemoryLimitCounterName in counters) {\n        this.gpuMemoryCounter.setLimit(counters[gpuMemoryLimitCounterName]);\n      }\n    }\n  }\n\n  private createCurrentValuesBar(): void {\n    this.currentValuesBar = this.graphsContainer.element.createChild('div');\n    this.currentValuesBar.id = 'counter-values-bar';\n  }\n\n  private createCounter(uiName: string, color: string, formatter?: ((arg0: number) => string)): Counter {\n    const counter = new Counter();\n    this.counters.push(counter);\n    this.counterUI.push(new CounterUI(this, uiName, color, counter, formatter));\n    return counter;\n  }\n\n  resizerElement(): Element|null {\n    return this.header.element;\n  }\n\n  private resize(): void {\n    const parentElement = (this.canvas.parentElement as HTMLElement);\n    this.canvas.width = parentElement.clientWidth * window.devicePixelRatio;\n    this.canvas.height = parentElement.clientHeight * window.devicePixelRatio;\n    this.calculator.setDisplayWidth(this.canvas.width);\n    this.refresh();\n  }\n\n  private onWindowChanged(event: Common.EventTarget.EventTargetEvent<WindowChangedEvent>): void {\n    const window = event.data.window;\n    this.calculator.setWindow(window.left, window.right);\n    this.scheduleRefresh();\n  }\n\n  scheduleRefresh(): void {\n    UI.UIUtils.invokeOnceAfterBatchUpdate(this, this.refresh);\n  }\n\n  draw(): void {\n    this.clear();\n    for (const counter of this.counters) {\n      counter.calculateVisibleIndexes(this.calculator);\n      counter.calculateXValues(this.canvas.width);\n    }\n    for (const counterUI of this.counterUI) {\n      counterUI.drawGraph(this.canvas);\n    }\n  }\n\n  private onClick(event: Event): void {\n    const x = (event as MouseEvent).x - this.canvasContainer.totalOffsetLeft();\n    let minDistance: number = Infinity;\n    let bestTime;\n    for (const counterUI of this.counterUI) {\n      if (!counterUI.counter.times.length) {\n        continue;\n      }\n      const index = counterUI.recordIndexAt(x);\n      const distance = Math.abs(x * window.devicePixelRatio - counterUI.counter.x[index]);\n      if (distance < minDistance) {\n        minDistance = distance;\n        bestTime = counterUI.counter.times[index];\n      }\n    }\n    if (bestTime !== undefined && this.track) {\n      this.delegate.selectEntryAtTime(this.track.events.length ? this.track.events : this.track.asyncEvents, bestTime);\n    }\n  }\n\n  private onMouseLeave(_event: Event): void {\n    delete this.markerXPosition;\n    this.clearCurrentValueAndMarker();\n  }\n\n  private clearCurrentValueAndMarker(): void {\n    for (let i = 0; i < this.counterUI.length; i++) {\n      this.counterUI[i].clearCurrentValueAndMarker();\n    }\n  }\n\n  private onMouseMove(event: Event): void {\n    const x = (event as MouseEvent).x - this.canvasContainer.totalOffsetLeft();\n    this.markerXPosition = x;\n    this.refreshCurrentValues();\n  }\n\n  private refreshCurrentValues(): void {\n    if (this.markerXPosition === undefined) {\n      return;\n    }\n    for (let i = 0; i < this.counterUI.length; ++i) {\n      this.counterUI[i].updateCurrentValue(this.markerXPosition);\n    }\n  }\n\n  refresh(): void {\n    this.timelineGrid.updateDividers(this.calculator);\n    this.draw();\n    this.refreshCurrentValues();\n  }\n\n  private clear(): void {\n    const ctx = this.canvas.getContext('2d');\n    if (!ctx) {\n      throw new Error('Unable to get canvas context');\n    }\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  }\n}\n\nexport class Counter {\n  times: number[];\n  values: number[];\n  x: number[];\n  minimumIndex: number;\n  maximumIndex: number;\n  private maxTime: number;\n  private minTime: number;\n  limitValue?: number;\n\n  constructor() {\n    this.times = [];\n    this.values = [];\n    this.x = [];\n    this.minimumIndex = 0;\n    this.maximumIndex = 0;\n    this.maxTime = 0;\n    this.minTime = 0;\n  }\n\n  appendSample(time: number, value: number): void {\n    if (this.values.length && this.values[this.values.length - 1] === value) {\n      return;\n    }\n    this.times.push(time);\n    this.values.push(value);\n  }\n\n  reset(): void {\n    this.times = [];\n    this.values = [];\n  }\n\n  setLimit(value: number): void {\n    this.limitValue = value;\n  }\n\n  calculateBounds(): {\n    min: number,\n    max: number,\n  } {\n    let maxValue;\n    let minValue;\n    for (let i = this.minimumIndex; i <= this.maximumIndex; i++) {\n      const value = this.values[i];\n      if (minValue === undefined || value < minValue) {\n        minValue = value;\n      }\n      if (maxValue === undefined || value > maxValue) {\n        maxValue = value;\n      }\n    }\n    minValue = minValue || 0;\n    maxValue = maxValue || 1;\n    if (this.limitValue) {\n      if (maxValue > this.limitValue * 0.5) {\n        maxValue = Math.max(maxValue, this.limitValue);\n      }\n      minValue = Math.min(minValue, this.limitValue);\n    }\n    return {min: minValue, max: maxValue};\n  }\n\n  calculateVisibleIndexes(calculator: Calculator): void {\n    const start = calculator.minimumBoundary();\n    const end = calculator.maximumBoundary();\n\n    // Maximum index of element whose time <= start.\n    this.minimumIndex = Platform.NumberUtilities.clamp(\n        Platform.ArrayUtilities.upperBound(this.times, start, Platform.ArrayUtilities.DEFAULT_COMPARATOR) - 1, 0,\n        this.times.length - 1);\n\n    // Minimum index of element whose time >= end.\n    this.maximumIndex = Platform.NumberUtilities.clamp(\n        Platform.ArrayUtilities.lowerBound(this.times, end, Platform.ArrayUtilities.DEFAULT_COMPARATOR), 0,\n        this.times.length - 1);\n\n    // Current window bounds.\n    this.minTime = start;\n    this.maxTime = end;\n  }\n\n  calculateXValues(width: number): void {\n    if (!this.values.length) {\n      return;\n    }\n\n    const xFactor = width / (this.maxTime - this.minTime);\n\n    this.x = new Array(this.values.length);\n    for (let i = this.minimumIndex + 1; i <= this.maximumIndex; i++) {\n      this.x[i] = xFactor * (this.times[i] - this.minTime);\n    }\n  }\n}\n\nexport class CounterUI {\n  private readonly countersPane: CountersGraph;\n  counter: Counter;\n  private readonly formatter: (arg0: number) => string;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private readonly setting: Common.Settings.Setting<any>;\n  private filter: UI.Toolbar.ToolbarSettingCheckbox;\n  private range: HTMLElement;\n  private value: HTMLElement;\n  graphColor: string;\n  limitColor: string|null|undefined;\n  graphYValues: number[];\n  private readonly verticalPadding: number;\n  private currentValueLabel: string;\n  private marker: HTMLElement;\n\n  constructor(\n      countersPane: CountersGraph, title: string, graphColor: string, counter: Counter,\n      formatter?: (arg0: number) => string) {\n    this.countersPane = countersPane;\n    this.counter = counter;\n    this.formatter = formatter || Platform.NumberUtilities.withThousandsSeparator;\n\n    this.setting = Common.Settings.Settings.instance().createSetting('timelineCountersGraph-' + title, true);\n    this.setting.setTitle(title);\n    this.filter = new UI.Toolbar.ToolbarSettingCheckbox(this.setting, title);\n    this.filter.inputElement.classList.add('-theme-preserve-input');\n    const parsedColor = Common.Color.Color.parse(graphColor);\n    if (parsedColor) {\n      const colorWithAlpha = parsedColor.setAlpha(0.5).asString(Common.Color.Format.RGBA);\n      const htmlElement = (this.filter.element as HTMLElement);\n      if (colorWithAlpha) {\n        htmlElement.style.backgroundColor = colorWithAlpha;\n      }\n      htmlElement.style.borderColor = 'transparent';\n    }\n    this.filter.inputElement.addEventListener('click', this.toggleCounterGraph.bind(this));\n    countersPane.toolbar.appendToolbarItem(this.filter);\n    this.range = this.filter.element.createChild('span', 'range');\n\n    this.value = (countersPane.currentValuesBar as HTMLElement).createChild('span', 'memory-counter-value');\n    this.value.style.color = graphColor;\n    this.graphColor = graphColor;\n    if (parsedColor) {\n      this.limitColor = parsedColor.setAlpha(0.3).asString(Common.Color.Format.RGBA);\n    }\n    this.graphYValues = [];\n    this.verticalPadding = 10;\n\n    this.currentValueLabel = title;\n    this.marker = countersPane.canvasContainer.createChild('div', 'memory-counter-marker');\n    this.marker.style.backgroundColor = graphColor;\n    this.clearCurrentValueAndMarker();\n  }\n\n  reset(): void {\n    this.range.textContent = '';\n  }\n\n  setRange(minValue: number, maxValue: number): void {\n    const min = this.formatter(minValue);\n    const max = this.formatter(maxValue);\n    this.range.textContent = i18nString(UIStrings.ss, {PH1: min, PH2: max});\n  }\n\n  private toggleCounterGraph(): void {\n    this.value.classList.toggle('hidden', !this.filter.checked());\n    this.countersPane.refresh();\n  }\n\n  recordIndexAt(x: number): number {\n    return Platform.ArrayUtilities.upperBound(\n               this.counter.x, x * window.devicePixelRatio, Platform.ArrayUtilities.DEFAULT_COMPARATOR,\n               this.counter.minimumIndex + 1, this.counter.maximumIndex + 1) -\n        1;\n  }\n\n  updateCurrentValue(x: number): void {\n    if (!this.visible() || !this.counter.values.length || !this.counter.x) {\n      return;\n    }\n    const index = this.recordIndexAt(x);\n    const value = Platform.NumberUtilities.withThousandsSeparator(this.counter.values[index]);\n    this.value.textContent = `${this.currentValueLabel}: ${value}`;\n    const y = this.graphYValues[index] / window.devicePixelRatio;\n    this.marker.style.left = x + 'px';\n    this.marker.style.top = y + 'px';\n    this.marker.classList.remove('hidden');\n  }\n\n  clearCurrentValueAndMarker(): void {\n    this.value.textContent = '';\n    this.marker.classList.add('hidden');\n  }\n\n  drawGraph(canvas: HTMLCanvasElement): void {\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      throw new Error('Unable to get canvas context');\n    }\n    const width = canvas.width;\n    const height = canvas.height - 2 * this.verticalPadding;\n    if (height <= 0) {\n      this.graphYValues = [];\n      return;\n    }\n    const originY = this.verticalPadding;\n    const counter = this.counter;\n    const values = counter.values;\n\n    if (!values.length) {\n      return;\n    }\n\n    const bounds = counter.calculateBounds();\n    const minValue = bounds.min;\n    const maxValue = bounds.max;\n    this.setRange(minValue, maxValue);\n\n    if (!this.visible()) {\n      return;\n    }\n\n    const yValues = this.graphYValues;\n    const maxYRange = maxValue - minValue;\n    const yFactor = maxYRange ? height / (maxYRange) : 1;\n\n    ctx.save();\n    ctx.lineWidth = window.devicePixelRatio;\n    if (ctx.lineWidth % 2) {\n      ctx.translate(0.5, 0.5);\n    }\n    ctx.beginPath();\n    let value: number = values[counter.minimumIndex];\n    let currentY = Math.round(originY + height - (value - minValue) * yFactor);\n    ctx.moveTo(0, currentY);\n    let i = counter.minimumIndex;\n    for (; i <= counter.maximumIndex; i++) {\n      const x = Math.round(counter.x[i]);\n      ctx.lineTo(x, currentY);\n      const currentValue = values[i];\n      if (typeof currentValue !== 'undefined') {\n        value = currentValue;\n      }\n      currentY = Math.round(originY + height - (value - minValue) * yFactor);\n      ctx.lineTo(x, currentY);\n      yValues[i] = currentY;\n    }\n    yValues.length = i;\n    ctx.lineTo(width, currentY);\n    ctx.strokeStyle = this.graphColor;\n    ctx.stroke();\n    if (counter.limitValue) {\n      const limitLineY = Math.round(originY + height - (counter.limitValue - minValue) * yFactor);\n      ctx.moveTo(0, limitLineY);\n      ctx.lineTo(width, limitLineY);\n      if (this.limitColor) {\n        ctx.strokeStyle = this.limitColor;\n      }\n      ctx.stroke();\n    }\n    ctx.closePath();\n    ctx.restore();\n  }\n\n  visible(): boolean {\n    return this.filter.checked();\n  }\n}\n\nexport class Calculator implements PerfUI.TimelineGrid.Calculator {\n  private minimumBoundaryInternal: number;\n  private maximumBoundaryInternal: number;\n  private workingArea: number;\n  private zeroTimeInternal: number;\n\n  constructor() {\n    this.minimumBoundaryInternal = 0;\n    this.maximumBoundaryInternal = 0;\n    this.workingArea = 0;\n    this.zeroTimeInternal = 0;\n  }\n  setZeroTime(time: number): void {\n    this.zeroTimeInternal = time;\n  }\n\n  computePosition(time: number): number {\n    return (time - this.minimumBoundaryInternal) / this.boundarySpan() * this.workingArea;\n  }\n\n  setWindow(minimumBoundary: number, maximumBoundary: number): void {\n    this.minimumBoundaryInternal = minimumBoundary;\n    this.maximumBoundaryInternal = maximumBoundary;\n  }\n\n  setDisplayWidth(clientWidth: number): void {\n    this.workingArea = clientWidth;\n  }\n\n  formatValue(value: number, precision?: number): string {\n    return i18n.TimeUtilities.preciseMillisToString(value - this.zeroTime(), precision);\n  }\n\n  maximumBoundary(): number {\n    return this.maximumBoundaryInternal;\n  }\n\n  minimumBoundary(): number {\n    return this.minimumBoundaryInternal;\n  }\n\n  zeroTime(): number {\n    return this.zeroTimeInternal;\n  }\n\n  boundarySpan(): number {\n    return this.maximumBoundaryInternal - this.minimumBoundaryInternal;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
