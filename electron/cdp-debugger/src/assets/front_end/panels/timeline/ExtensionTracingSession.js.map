{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/timeline/ExtensionTracingSession.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../core/platform/platform.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport type * as Extensions from '../../models/extensions/extensions.js';\n\nimport type {PerformanceModel} from './PerformanceModel.js';\nimport type {Client} from './TimelineLoader.js';\nimport {TimelineLoader} from './TimelineLoader.js';\n\nexport class ExtensionTracingSession implements Extensions.ExtensionTraceProvider.TracingSession, Client {\n  private readonly provider: Extensions.ExtensionTraceProvider.ExtensionTraceProvider;\n  private readonly performanceModel: PerformanceModel;\n  private completionCallback!: () => void;\n  private readonly completionPromise: Promise<void>;\n  private timeOffset: number;\n\n  constructor(provider: Extensions.ExtensionTraceProvider.ExtensionTraceProvider, performanceModel: PerformanceModel) {\n    this.provider = provider;\n    this.performanceModel = performanceModel;\n    this.completionPromise = new Promise(fulfill => {\n      this.completionCallback = fulfill;\n    });\n    this.timeOffset = 0;\n  }\n\n  loadingStarted(): void {\n  }\n\n  processingStarted(): void {\n  }\n\n  loadingProgress(_progress?: number): void {\n  }\n\n  loadingComplete(tracingModel: SDK.TracingModel.TracingModel|null): void {\n    if (!tracingModel) {\n      return;\n    }\n    this.performanceModel.addExtensionEvents(this.provider.longDisplayName(), tracingModel, this.timeOffset);\n    this.completionCallback();\n  }\n\n  complete(url: Platform.DevToolsPath.UrlString, timeOffsetMicroseconds: number): void {\n    if (!url) {\n      this.completionCallback();\n      return;\n    }\n    this.timeOffset = timeOffsetMicroseconds;\n    TimelineLoader.loadFromURL(url, this);\n  }\n\n  start(): void {\n    this.provider.start(this);\n  }\n\n  stop(): Promise<void> {\n    this.provider.stop();\n    return this.completionPromise;\n  }\n}\n"],
  "mappings": "AAUA;AAEO,qCAAkG;AAAA,EACtF;AAAA,EACA;AAAA,EACT;AAAA,EACS;AAAA,EACT;AAAA,EAER,YAAY,UAAoE,kBAAoC;AAClH,SAAK,WAAW;AAChB,SAAK,mBAAmB;AACxB,SAAK,oBAAoB,IAAI,QAAQ,aAAW;AAC9C,WAAK,qBAAqB;AAAA;AAE5B,SAAK,aAAa;AAAA;AAAA,EAGpB,iBAAuB;AAAA;AAAA,EAGvB,oBAA0B;AAAA;AAAA,EAG1B,gBAAgB,WAA0B;AAAA;AAAA,EAG1C,gBAAgB,cAAwD;AACtE,QAAI,CAAC,cAAc;AACjB;AAAA;AAEF,SAAK,iBAAiB,mBAAmB,KAAK,SAAS,mBAAmB,cAAc,KAAK;AAC7F,SAAK;AAAA;AAAA,EAGP,SAAS,KAAsC,wBAAsC;AACnF,QAAI,CAAC,KAAK;AACR,WAAK;AACL;AAAA;AAEF,SAAK,aAAa;AAClB,mBAAe,YAAY,KAAK;AAAA;AAAA,EAGlC,QAAc;AACZ,SAAK,SAAS,MAAM;AAAA;AAAA,EAGtB,OAAsB;AACpB,SAAK,SAAS;AACd,WAAO,KAAK;AAAA;AAAA;",
  "names": []
}
