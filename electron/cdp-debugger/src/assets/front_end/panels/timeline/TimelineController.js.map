{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/timeline/TimelineController.ts"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as Extensions from '../../models/extensions/extensions.js';\nimport * as TimelineModel from '../../models/timeline_model/timeline_model.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport {ExtensionTracingSession} from './ExtensionTracingSession.js';\nimport {PerformanceModel} from './PerformanceModel.js';\n\nconst UIStrings = {\n  /**\n   * @description Text in Timeline Controller of the Performance panel.\n   * A \"CPU profile\" is a recorded performance measurement how a specific target behaves.\n   * \"Target\" in this context can mean a web page, service or normal worker.\n   * \"Not available\" is used as there are multiple things that can go wrong, but we do not\n   * know what exactly, just that the CPU profile was not correctly recorded.\n   */\n  cpuProfileForATargetIsNot: 'CPU profile for a target is not available.',\n  /**\n   *@description Text in Timeline Controller of the Performance panel indicating that the Performance Panel cannot\n   * record a performance trace because the type of target (where possible types are page, service worker and shared\n   * worker) doesn't support it.\n   */\n  tracingNotSupported: 'Performance trace recording not supported for this type of target',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/TimelineController.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class TimelineController implements SDK.TargetManager.SDKModelObserver<SDK.CPUProfilerModel.CPUProfilerModel>,\n                                           SDK.TracingManager.TracingManagerClient {\n  private readonly target: SDK.Target.Target;\n  private tracingManager: SDK.TracingManager.TracingManager|null;\n  private performanceModel: PerformanceModel;\n  private readonly client: Client;\n  private readonly tracingModel: SDK.TracingModel.TracingModel;\n  private extensionSessions: ExtensionTracingSession[];\n  private extensionTraceProviders?: Extensions.ExtensionTraceProvider.ExtensionTraceProvider[];\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private tracingCompleteCallback?: ((value: any) => void)|null;\n  private profiling?: boolean;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private cpuProfiles?: Map<any, any>|null;\n\n  constructor(target: SDK.Target.Target, client: Client) {\n    this.target = target;\n    this.tracingManager = target.model(SDK.TracingManager.TracingManager);\n    this.performanceModel = new PerformanceModel();\n    this.performanceModel.setMainTarget(target);\n    this.client = client;\n\n    const backingStorage = new Bindings.TempFile.TempFileBackingStorage();\n    this.tracingModel = new SDK.TracingModel.TracingModel(backingStorage);\n\n    this.extensionSessions = [];\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.CPUProfilerModel.CPUProfilerModel, this);\n  }\n\n  dispose(): void {\n    SDK.TargetManager.TargetManager.instance().unobserveModels(SDK.CPUProfilerModel.CPUProfilerModel, this);\n  }\n\n  mainTarget(): SDK.Target.Target {\n    return this.target;\n  }\n\n  async startRecording(\n      options: RecordingOptions, providers: Extensions.ExtensionTraceProvider.ExtensionTraceProvider[]):\n      Promise<Protocol.ProtocolResponseWithError> {\n    this.extensionTraceProviders = Extensions.ExtensionServer.ExtensionServer.instance().traceProviders().slice();\n\n    function disabledByDefault(category: string): string {\n      return 'disabled-by-default-' + category;\n    }\n\n    // The following categories are also used in other tools, but this panel\n    // offers the possibility of turning them off (see below).\n    // 'disabled-by-default-devtools.screenshot'\n    //   \u2514 default: on, option: captureFilmStrip\n    // 'disabled-by-default-devtools.timeline.invalidationTracking'\n    //   \u2514 default: off, experiment: timelineInvalidationTracking\n    // 'disabled-by-default-v8.cpu_profiler'\n    //   \u2514 default: on, option: enableJSSampling\n    const categoriesArray = [\n      Root.Runtime.experiments.isEnabled('timelineShowAllEvents') ? '*' : '-*',\n      TimelineModel.TimelineModel.TimelineModelImpl.Category.Console,\n      TimelineModel.TimelineModel.TimelineModelImpl.Category.UserTiming,\n      'devtools.timeline',\n      disabledByDefault('devtools.timeline'),\n      disabledByDefault('devtools.timeline.frame'),\n      disabledByDefault('devtools.timeline.stack'),\n      disabledByDefault('v8.compile'),\n      disabledByDefault('v8.cpu_profiler.hires'),\n      TimelineModel.TimelineModel.TimelineModelImpl.Category.LatencyInfo,\n      TimelineModel.TimelineModel.TimelineModelImpl.Category.Loading,\n      disabledByDefault('lighthouse'),\n      'v8.execute',\n      'v8',\n    ];\n\n    if (Root.Runtime.experiments.isEnabled('timelineV8RuntimeCallStats') && options.enableJSSampling) {\n      categoriesArray.push(disabledByDefault('v8.runtime_stats_sampling'));\n    }\n    if (!Root.Runtime.Runtime.queryParam('timelineTracingJSProfileDisabled') && options.enableJSSampling) {\n      categoriesArray.push(disabledByDefault('v8.cpu_profiler'));\n    }\n    if (Root.Runtime.experiments.isEnabled('timelineInvalidationTracking')) {\n      categoriesArray.push(disabledByDefault('devtools.timeline.invalidationTracking'));\n    }\n    if (options.capturePictures) {\n      categoriesArray.push(\n          disabledByDefault('devtools.timeline.layers'), disabledByDefault('devtools.timeline.picture'),\n          disabledByDefault('blink.graphics_context_annotations'));\n    }\n    if (options.captureFilmStrip) {\n      categoriesArray.push(disabledByDefault('devtools.screenshot'));\n    }\n\n    this.extensionSessions = providers.map(provider => new ExtensionTracingSession(provider, this.performanceModel));\n    this.extensionSessions.forEach(session => session.start());\n    this.performanceModel.setRecordStartTime(Date.now());\n    const response = await this.startRecordingWithCategories(categoriesArray.join(','), options.enableJSSampling);\n    if (response.getError()) {\n      await this.waitForTracingToStop(false);\n      await SDK.TargetManager.TargetManager.instance().resumeAllTargets();\n    }\n    return response;\n  }\n\n  async stopRecording(): Promise<PerformanceModel> {\n    if (this.tracingManager) {\n      this.tracingManager.stop();\n    }\n\n    this.client.loadingStarted();\n    await this.waitForTracingToStop(true);\n    this.allSourcesFinished();\n    return this.performanceModel;\n  }\n\n  private async waitForTracingToStop(awaitTracingCompleteCallback: boolean): Promise<void> {\n    const tracingStoppedPromises = [];\n    if (this.tracingManager && awaitTracingCompleteCallback) {\n      tracingStoppedPromises.push(new Promise(resolve => {\n        this.tracingCompleteCallback = resolve;\n      }));\n    }\n    tracingStoppedPromises.push(this.stopProfilingOnAllModels());\n\n    const extensionCompletionPromises = this.extensionSessions.map(session => session.stop());\n    if (extensionCompletionPromises.length) {\n      tracingStoppedPromises.push(\n          Promise.race([Promise.all(extensionCompletionPromises), new Promise(r => window.setTimeout(r, 5000))]));\n    }\n    await Promise.all(tracingStoppedPromises);\n  }\n\n  modelAdded(cpuProfilerModel: SDK.CPUProfilerModel.CPUProfilerModel): void {\n    if (this.profiling) {\n      void cpuProfilerModel.startRecording();\n    }\n  }\n\n  modelRemoved(_cpuProfilerModel: SDK.CPUProfilerModel.CPUProfilerModel): void {\n    // FIXME: We'd like to stop profiling on the target and retrieve a profile\n    // but it's too late. Backend connection is closed.\n  }\n\n  private async startProfilingOnAllModels(): Promise<void> {\n    this.profiling = true;\n    const models = SDK.TargetManager.TargetManager.instance().models(SDK.CPUProfilerModel.CPUProfilerModel);\n    await Promise.all(models.map(model => model.startRecording()));\n  }\n\n  private addCpuProfile(targetId: Protocol.Target.TargetID|'main', cpuProfile: Protocol.Profiler.Profile|null): void {\n    if (!cpuProfile) {\n      Common.Console.Console.instance().warn(i18nString(UIStrings.cpuProfileForATargetIsNot));\n      return;\n    }\n    if (!this.cpuProfiles) {\n      this.cpuProfiles = new Map();\n    }\n    this.cpuProfiles.set(targetId, cpuProfile);\n  }\n\n  private async stopProfilingOnAllModels(): Promise<void> {\n    const models =\n        this.profiling ? SDK.TargetManager.TargetManager.instance().models(SDK.CPUProfilerModel.CPUProfilerModel) : [];\n    this.profiling = false;\n    const promises = [];\n    for (const model of models) {\n      const targetId = model.target().id();\n      const modelPromise = model.stopRecording().then(this.addCpuProfile.bind(this, targetId));\n      promises.push(modelPromise);\n    }\n    await Promise.all(promises);\n  }\n\n  private async startRecordingWithCategories(categories: string, enableJSSampling?: boolean):\n      Promise<Protocol.ProtocolResponseWithError> {\n    if (!this.tracingManager) {\n      throw new Error(UIStrings.tracingNotSupported);\n    }\n    // There might be a significant delay in the beginning of timeline recording\n    // caused by starting CPU profiler, that needs to traverse JS heap to collect\n    // all the functions data.\n    await SDK.TargetManager.TargetManager.instance().suspendAllTargets('performance-timeline');\n    if (enableJSSampling && Root.Runtime.Runtime.queryParam('timelineTracingJSProfileDisabled')) {\n      await this.startProfilingOnAllModels();\n    }\n\n    return this.tracingManager.start(this, categories, '');\n  }\n\n  traceEventsCollected(events: SDK.TracingManager.EventPayload[]): void {\n    this.tracingModel.addEvents(events);\n  }\n\n  tracingComplete(): void {\n    if (!this.tracingCompleteCallback) {\n      return;\n    }\n    this.tracingCompleteCallback(undefined);\n    this.tracingCompleteCallback = null;\n  }\n\n  private allSourcesFinished(): void {\n    this.client.processingStarted();\n    window.setTimeout(() => this.finalizeTrace(), 0);\n  }\n\n  private async finalizeTrace(): Promise<void> {\n    this.injectCpuProfileEvents();\n    await SDK.TargetManager.TargetManager.instance().resumeAllTargets();\n    this.tracingModel.tracingComplete();\n    this.client.loadingComplete(this.tracingModel);\n  }\n\n  private injectCpuProfileEvent(pid: number, tid: number, cpuProfile: Protocol.Profiler.Profile|null): void {\n    if (!cpuProfile) {\n      return;\n    }\n    // TODO(crbug/1011811): This event type is not compatible with the SDK.TracingManager.EventPayload.\n    // EventPayload requires many properties to be defined but it's not clear if they will have\n    // any side effects.\n    const cpuProfileEvent = ({\n      cat: SDK.TracingModel.DevToolsMetadataEventCategory,\n      ph: SDK.TracingModel.Phase.Instant,\n      ts: this.tracingModel.maximumRecordTime() * 1000,\n      pid: pid,\n      tid: tid,\n      name: TimelineModel.TimelineModel.RecordType.CpuProfile,\n      args: {data: {cpuProfile: cpuProfile}},\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } as any);\n    this.tracingModel.addEvents([cpuProfileEvent]);\n  }\n\n  private buildTargetToProcessIdMap(): Map<string, number>|null {\n    const metadataEventTypes = TimelineModel.TimelineModel.TimelineModelImpl.DevToolsMetadataEvent;\n    const metadataEvents = this.tracingModel.devToolsMetadataEvents();\n    const browserMetaEvent = metadataEvents.find(e => e.name === metadataEventTypes.TracingStartedInBrowser);\n    if (!browserMetaEvent) {\n      return null;\n    }\n\n    const pseudoPidToFrames = new Platform.MapUtilities.Multimap<string, string>();\n    const targetIdToPid = new Map<string, number>();\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const frames: any[] = browserMetaEvent.args.data.frames;\n    for (const frameInfo of frames) {\n      targetIdToPid.set(frameInfo.frame, frameInfo.processId);\n    }\n    for (const event of metadataEvents) {\n      const data = event.args.data;\n      switch (event.name) {\n        case metadataEventTypes.FrameCommittedInBrowser:\n          if (data.processId) {\n            targetIdToPid.set(data.frame, data.processId);\n          } else {\n            pseudoPidToFrames.set(data.processPseudoId, data.frame);\n          }\n          break;\n        case metadataEventTypes.ProcessReadyInBrowser:\n          for (const frame of pseudoPidToFrames.get(data.processPseudoId) || []) {\n            targetIdToPid.set(frame, data.processId);\n          }\n          break;\n      }\n    }\n    const mainFrame = frames.find(frame => !frame.parent);\n    const mainRendererProcessId = mainFrame.processId;\n    const mainProcess = this.tracingModel.getProcessById(mainRendererProcessId);\n    if (mainProcess) {\n      const target = SDK.TargetManager.TargetManager.instance().mainTarget();\n      if (target) {\n        targetIdToPid.set(target.id(), mainProcess.id());\n      }\n    }\n    return targetIdToPid;\n  }\n\n  private injectCpuProfileEvents(): void {\n    if (!this.cpuProfiles) {\n      return;\n    }\n\n    const metadataEventTypes = TimelineModel.TimelineModel.TimelineModelImpl.DevToolsMetadataEvent;\n    const metadataEvents = this.tracingModel.devToolsMetadataEvents();\n\n    const targetIdToPid = this.buildTargetToProcessIdMap();\n    if (targetIdToPid) {\n      for (const [id, profile] of this.cpuProfiles) {\n        const pid = targetIdToPid.get(id);\n        if (!pid) {\n          continue;\n        }\n        const process = this.tracingModel.getProcessById(pid);\n        const thread =\n            process && process.threadByName(TimelineModel.TimelineModel.TimelineModelImpl.RendererMainThreadName);\n        if (thread) {\n          this.injectCpuProfileEvent(pid, thread.id(), profile);\n        }\n      }\n    } else {\n      // Legacy backends support.\n      const filteredEvents = metadataEvents.filter(event => event.name === metadataEventTypes.TracingStartedInPage);\n      const mainMetaEvent = filteredEvents[filteredEvents.length - 1];\n      if (mainMetaEvent) {\n        const pid = mainMetaEvent.thread.process().id();\n        if (this.tracingManager) {\n          const mainCpuProfile = this.cpuProfiles.get(this.tracingManager.target().id());\n          this.injectCpuProfileEvent(pid, mainMetaEvent.thread.id(), mainCpuProfile);\n        }\n      } else {\n        // Or there was no tracing manager in the main target at all, in this case build the model full\n        // of cpu profiles.\n        let tid = 0;\n        for (const pair of this.cpuProfiles) {\n          const target = SDK.TargetManager.TargetManager.instance().targetById(pair[0]);\n          const name = target && target.name();\n          this.tracingModel.addEvents(\n              TimelineModel.TimelineJSProfile.TimelineJSProfileProcessor.buildTraceProfileFromCpuProfile(\n                  pair[1], ++tid, /* injectPageEvent */ tid === 1, name));\n        }\n      }\n    }\n\n    const workerMetaEvents =\n        metadataEvents.filter(event => event.name === metadataEventTypes.TracingSessionIdForWorker);\n    for (const metaEvent of workerMetaEvents) {\n      const workerId = metaEvent.args['data']['workerId'];\n      const cpuProfile = this.cpuProfiles.get(workerId);\n      this.injectCpuProfileEvent(metaEvent.thread.process().id(), metaEvent.args['data']['workerThreadId'], cpuProfile);\n    }\n    this.cpuProfiles = null;\n  }\n\n  tracingBufferUsage(usage: number): void {\n    this.client.recordingProgress(usage);\n  }\n\n  eventsRetrievalProgress(progress: number): void {\n    this.client.loadingProgress(progress);\n  }\n}\n\nexport interface Client {\n  recordingProgress(usage: number): void;\n  loadingStarted(): void;\n  processingStarted(): void;\n  loadingProgress(progress?: number): void;\n  loadingComplete(tracingModel: SDK.TracingModel.TracingModel|null): void;\n}\nexport interface RecordingOptions {\n  enableJSSampling?: boolean;\n  capturePictures?: boolean;\n  captureFilmStrip?: boolean;\n  startCoverage?: boolean;\n}\n"],
  "mappings": "AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA,MAAM,YAAY;AAAA,EAQhB,2BAA2B;AAAA,EAM3B,qBAAqB;AAAA;AAEvB,MAAM,OAAO,KAAK,KAAK,kBAAkB,yCAAyC;AAClF,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AACzD,gCAC4E;AAAA,EAChE;AAAA,EACT;AAAA,EACA;AAAA,EACS;AAAA,EACA;AAAA,EACT;AAAA,EACA;AAAA,EAGA;AAAA,EACA;AAAA,EAGA;AAAA,EAER,YAAY,QAA2B,QAAgB;AACrD,SAAK,SAAS;AACd,SAAK,iBAAiB,OAAO,MAAM,IAAI,eAAe;AACtD,SAAK,mBAAmB,IAAI;AAC5B,SAAK,iBAAiB,cAAc;AACpC,SAAK,SAAS;AAEd,UAAM,iBAAiB,IAAI,SAAS,SAAS;AAC7C,SAAK,eAAe,IAAI,IAAI,aAAa,aAAa;AAEtD,SAAK,oBAAoB;AACzB,QAAI,cAAc,cAAc,WAAW,cAAc,IAAI,iBAAiB,kBAAkB;AAAA;AAAA,EAGlG,UAAgB;AACd,QAAI,cAAc,cAAc,WAAW,gBAAgB,IAAI,iBAAiB,kBAAkB;AAAA;AAAA,EAGpG,aAAgC;AAC9B,WAAO,KAAK;AAAA;AAAA,QAGR,eACF,SAA2B,WACiB;AAC9C,SAAK,0BAA0B,WAAW,gBAAgB,gBAAgB,WAAW,iBAAiB;AAEtG,+BAA2B,UAA0B;AACnD,aAAO,yBAAyB;AAAA;AAWlC,UAAM,kBAAkB;AAAA,MACtB,KAAK,QAAQ,YAAY,UAAU,2BAA2B,MAAM;AAAA,MACpE,cAAc,cAAc,kBAAkB,SAAS;AAAA,MACvD,cAAc,cAAc,kBAAkB,SAAS;AAAA,MACvD;AAAA,MACA,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,cAAc,cAAc,kBAAkB,SAAS;AAAA,MACvD,cAAc,cAAc,kBAAkB,SAAS;AAAA,MACvD,kBAAkB;AAAA,MAClB;AAAA,MACA;AAAA;AAGF,QAAI,KAAK,QAAQ,YAAY,UAAU,iCAAiC,QAAQ,kBAAkB;AAChG,sBAAgB,KAAK,kBAAkB;AAAA;AAEzC,QAAI,CAAC,KAAK,QAAQ,QAAQ,WAAW,uCAAuC,QAAQ,kBAAkB;AACpG,sBAAgB,KAAK,kBAAkB;AAAA;AAEzC,QAAI,KAAK,QAAQ,YAAY,UAAU,iCAAiC;AACtE,sBAAgB,KAAK,kBAAkB;AAAA;AAEzC,QAAI,QAAQ,iBAAiB;AAC3B,sBAAgB,KACZ,kBAAkB,6BAA6B,kBAAkB,8BACjE,kBAAkB;AAAA;AAExB,QAAI,QAAQ,kBAAkB;AAC5B,sBAAgB,KAAK,kBAAkB;AAAA;AAGzC,SAAK,oBAAoB,UAAU,IAAI,cAAY,IAAI,wBAAwB,UAAU,KAAK;AAC9F,SAAK,kBAAkB,QAAQ,aAAW,QAAQ;AAClD,SAAK,iBAAiB,mBAAmB,KAAK;AAC9C,UAAM,WAAW,MAAM,KAAK,6BAA6B,gBAAgB,KAAK,MAAM,QAAQ;AAC5F,QAAI,SAAS,YAAY;AACvB,YAAM,KAAK,qBAAqB;AAChC,YAAM,IAAI,cAAc,cAAc,WAAW;AAAA;AAEnD,WAAO;AAAA;AAAA,QAGH,gBAA2C;AAC/C,QAAI,KAAK,gBAAgB;AACvB,WAAK,eAAe;AAAA;AAGtB,SAAK,OAAO;AACZ,UAAM,KAAK,qBAAqB;AAChC,SAAK;AACL,WAAO,KAAK;AAAA;AAAA,QAGA,qBAAqB,8BAAsD;AACvF,UAAM,yBAAyB;AAC/B,QAAI,KAAK,kBAAkB,8BAA8B;AACvD,6BAAuB,KAAK,IAAI,QAAQ,aAAW;AACjD,aAAK,0BAA0B;AAAA;AAAA;AAGnC,2BAAuB,KAAK,KAAK;AAEjC,UAAM,8BAA8B,KAAK,kBAAkB,IAAI,aAAW,QAAQ;AAClF,QAAI,4BAA4B,QAAQ;AACtC,6BAAuB,KACnB,QAAQ,KAAK,CAAC,QAAQ,IAAI,8BAA8B,IAAI,QAAQ,OAAK,OAAO,WAAW,GAAG;AAAA;AAEpG,UAAM,QAAQ,IAAI;AAAA;AAAA,EAGpB,WAAW,kBAA+D;AACxE,QAAI,KAAK,WAAW;AAClB,WAAK,iBAAiB;AAAA;AAAA;AAAA,EAI1B,aAAa,mBAAgE;AAAA;AAAA,QAK/D,4BAA2C;AACvD,SAAK,YAAY;AACjB,UAAM,SAAS,IAAI,cAAc,cAAc,WAAW,OAAO,IAAI,iBAAiB;AACtF,UAAM,QAAQ,IAAI,OAAO,IAAI,WAAS,MAAM;AAAA;AAAA,EAGtC,cAAc,UAA2C,YAAkD;AACjH,QAAI,CAAC,YAAY;AACf,aAAO,QAAQ,QAAQ,WAAW,KAAK,WAAW,UAAU;AAC5D;AAAA;AAEF,QAAI,CAAC,KAAK,aAAa;AACrB,WAAK,cAAc,oBAAI;AAAA;AAEzB,SAAK,YAAY,IAAI,UAAU;AAAA;AAAA,QAGnB,2BAA0C;AACtD,UAAM,SACF,KAAK,YAAY,IAAI,cAAc,cAAc,WAAW,OAAO,IAAI,iBAAiB,oBAAoB;AAChH,SAAK,YAAY;AACjB,UAAM,WAAW;AACjB,eAAW,SAAS,QAAQ;AAC1B,YAAM,WAAW,MAAM,SAAS;AAChC,YAAM,eAAe,MAAM,gBAAgB,KAAK,KAAK,cAAc,KAAK,MAAM;AAC9E,eAAS,KAAK;AAAA;AAEhB,UAAM,QAAQ,IAAI;AAAA;AAAA,QAGN,6BAA6B,YAAoB,kBACf;AAC9C,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,UAAU;AAAA;AAK5B,UAAM,IAAI,cAAc,cAAc,WAAW,kBAAkB;AACnE,QAAI,oBAAoB,KAAK,QAAQ,QAAQ,WAAW,qCAAqC;AAC3F,YAAM,KAAK;AAAA;AAGb,WAAO,KAAK,eAAe,MAAM,MAAM,YAAY;AAAA;AAAA,EAGrD,qBAAqB,QAAiD;AACpE,SAAK,aAAa,UAAU;AAAA;AAAA,EAG9B,kBAAwB;AACtB,QAAI,CAAC,KAAK,yBAAyB;AACjC;AAAA;AAEF,SAAK,wBAAwB;AAC7B,SAAK,0BAA0B;AAAA;AAAA,EAGzB,qBAA2B;AACjC,SAAK,OAAO;AACZ,WAAO,WAAW,MAAM,KAAK,iBAAiB;AAAA;AAAA,QAGlC,gBAA+B;AAC3C,SAAK;AACL,UAAM,IAAI,cAAc,cAAc,WAAW;AACjD,SAAK,aAAa;AAClB,SAAK,OAAO,gBAAgB,KAAK;AAAA;AAAA,EAG3B,sBAAsB,KAAa,KAAa,YAAkD;AACxG,QAAI,CAAC,YAAY;AACf;AAAA;AAKF,UAAM,kBAAmB;AAAA,MACvB,KAAK,IAAI,aAAa;AAAA,MACtB,IAAI,IAAI,aAAa,MAAM;AAAA,MAC3B,IAAI,KAAK,aAAa,sBAAsB;AAAA,MAC5C;AAAA,MACA;AAAA,MACA,MAAM,cAAc,cAAc,WAAW;AAAA,MAC7C,MAAM,EAAC,MAAM,EAAC;AAAA;AAIhB,SAAK,aAAa,UAAU,CAAC;AAAA;AAAA,EAGvB,4BAAsD;AAC5D,UAAM,qBAAqB,cAAc,cAAc,kBAAkB;AACzE,UAAM,iBAAiB,KAAK,aAAa;AACzC,UAAM,mBAAmB,eAAe,KAAK,OAAK,EAAE,SAAS,mBAAmB;AAChF,QAAI,CAAC,kBAAkB;AACrB,aAAO;AAAA;AAGT,UAAM,oBAAoB,IAAI,SAAS,aAAa;AACpD,UAAM,gBAAgB,oBAAI;AAG1B,UAAM,SAAgB,iBAAiB,KAAK,KAAK;AACjD,eAAW,aAAa,QAAQ;AAC9B,oBAAc,IAAI,UAAU,OAAO,UAAU;AAAA;AAE/C,eAAW,SAAS,gBAAgB;AAClC,YAAM,OAAO,MAAM,KAAK;AACxB,cAAQ,MAAM;AAAA,aACP,mBAAmB;AACtB,cAAI,KAAK,WAAW;AAClB,0BAAc,IAAI,KAAK,OAAO,KAAK;AAAA,iBAC9B;AACL,8BAAkB,IAAI,KAAK,iBAAiB,KAAK;AAAA;AAEnD;AAAA,aACG,mBAAmB;AACtB,qBAAW,SAAS,kBAAkB,IAAI,KAAK,oBAAoB,IAAI;AACrE,0BAAc,IAAI,OAAO,KAAK;AAAA;AAEhC;AAAA;AAAA;AAGN,UAAM,YAAY,OAAO,KAAK,WAAS,CAAC,MAAM;AAC9C,UAAM,wBAAwB,UAAU;AACxC,UAAM,cAAc,KAAK,aAAa,eAAe;AACrD,QAAI,aAAa;AACf,YAAM,SAAS,IAAI,cAAc,cAAc,WAAW;AAC1D,UAAI,QAAQ;AACV,sBAAc,IAAI,OAAO,MAAM,YAAY;AAAA;AAAA;AAG/C,WAAO;AAAA;AAAA,EAGD,yBAA+B;AACrC,QAAI,CAAC,KAAK,aAAa;AACrB;AAAA;AAGF,UAAM,qBAAqB,cAAc,cAAc,kBAAkB;AACzE,UAAM,iBAAiB,KAAK,aAAa;AAEzC,UAAM,gBAAgB,KAAK;AAC3B,QAAI,eAAe;AACjB,iBAAW,CAAC,IAAI,YAAY,KAAK,aAAa;AAC5C,cAAM,MAAM,cAAc,IAAI;AAC9B,YAAI,CAAC,KAAK;AACR;AAAA;AAEF,cAAM,UAAU,KAAK,aAAa,eAAe;AACjD,cAAM,SACF,WAAW,QAAQ,aAAa,cAAc,cAAc,kBAAkB;AAClF,YAAI,QAAQ;AACV,eAAK,sBAAsB,KAAK,OAAO,MAAM;AAAA;AAAA;AAAA,WAG5C;AAEL,YAAM,iBAAiB,eAAe,OAAO,WAAS,MAAM,SAAS,mBAAmB;AACxF,YAAM,gBAAgB,eAAe,eAAe,SAAS;AAC7D,UAAI,eAAe;AACjB,cAAM,MAAM,cAAc,OAAO,UAAU;AAC3C,YAAI,KAAK,gBAAgB;AACvB,gBAAM,iBAAiB,KAAK,YAAY,IAAI,KAAK,eAAe,SAAS;AACzE,eAAK,sBAAsB,KAAK,cAAc,OAAO,MAAM;AAAA;AAAA,aAExD;AAGL,YAAI,MAAM;AACV,mBAAW,QAAQ,KAAK,aAAa;AACnC,gBAAM,SAAS,IAAI,cAAc,cAAc,WAAW,WAAW,KAAK;AAC1E,gBAAM,OAAO,UAAU,OAAO;AAC9B,eAAK,aAAa,UACd,cAAc,kBAAkB,2BAA2B,gCACvD,KAAK,IAAI,EAAE,KAA2B,QAAQ,GAAG;AAAA;AAAA;AAAA;AAK/D,UAAM,mBACF,eAAe,OAAO,WAAS,MAAM,SAAS,mBAAmB;AACrE,eAAW,aAAa,kBAAkB;AACxC,YAAM,WAAW,UAAU,KAAK,QAAQ;AACxC,YAAM,aAAa,KAAK,YAAY,IAAI;AACxC,WAAK,sBAAsB,UAAU,OAAO,UAAU,MAAM,UAAU,KAAK,QAAQ,mBAAmB;AAAA;AAExG,SAAK,cAAc;AAAA;AAAA,EAGrB,mBAAmB,OAAqB;AACtC,SAAK,OAAO,kBAAkB;AAAA;AAAA,EAGhC,wBAAwB,UAAwB;AAC9C,SAAK,OAAO,gBAAgB;AAAA;AAAA;",
  "names": []
}
