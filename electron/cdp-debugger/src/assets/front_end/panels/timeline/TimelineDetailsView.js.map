{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/timeline/TimelineDetailsView.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as TimelineModel from '../../models/timeline_model/timeline_model.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {EventsTimelineTreeView} from './EventsTimelineTreeView.js';\nimport type {PerformanceModel} from './PerformanceModel.js';\nimport {Events} from './PerformanceModel.js';\nimport {TimelineLayersView} from './TimelineLayersView.js';\nimport {TimelinePaintProfilerView} from './TimelinePaintProfilerView.js';\nimport type {TimelineModeViewDelegate} from './TimelinePanel.js';\nimport {TimelineSelection} from './TimelinePanel.js';\nimport type {TimelineTreeView} from './TimelineTreeView.js';\nimport {BottomUpTimelineTreeView, CallTreeTimelineTreeView} from './TimelineTreeView.js';\nimport {TimelineDetailsContentHelper, TimelineUIUtils} from './TimelineUIUtils.js';\n\nconst UIStrings = {\n  /**\n  *@description Text for the summary view\n  */\n  summary: 'Summary',\n  /**\n  *@description Text in Timeline Details View of the Performance panel\n  */\n  bottomup: 'Bottom-Up',\n  /**\n  *@description Text in Timeline Details View of the Performance panel\n  */\n  callTree: 'Call Tree',\n  /**\n  *@description Text in Timeline Details View of the Performance panel\n  */\n  eventLog: 'Event Log',\n  /**\n  *@description The label for estimated total blocking time in the performance panel\n  */\n  estimated: 'estimated',\n  /**\n  *@description Label for the total blocking time in the Performance Panel\n  *@example {320.23} PH1\n  *@example {(estimated)} PH2\n  */\n  totalBlockingTimeSmss: 'Total blocking time: {PH1}ms{PH2}',\n  /**\n  *@description Text that is usually a hyperlink to more documentation\n  */\n  learnMore: 'Learn more',\n  /**\n  *@description Title of the Layers tool\n  */\n  layers: 'Layers',\n  /**\n  *@description Title of the paint profiler, old name of the performance pane\n  */\n  paintProfiler: 'Paint Profiler',\n  /**\n  *@description Text in Timeline Details View of the Performance panel\n  *@example {1ms} PH1\n  *@example {10ms} PH2\n  */\n  rangeSS: 'Range:  {PH1} \u2013 {PH2}',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/TimelineDetailsView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class TimelineDetailsView extends UI.Widget.VBox {\n  private readonly detailsLinkifier: Components.Linkifier.Linkifier;\n  private tabbedPane: UI.TabbedPane.TabbedPane;\n  private readonly defaultDetailsWidget: UI.Widget.VBox;\n  private readonly defaultDetailsContentElement: HTMLElement;\n  private rangeDetailViews: Map<string, TimelineTreeView>;\n  private readonly additionalMetricsToolbar: UI.Toolbar.Toolbar;\n  private model!: PerformanceModel;\n  private track?: TimelineModel.TimelineModel.Track|null;\n  private lazyPaintProfilerView?: TimelinePaintProfilerView|null;\n  private lazyLayersView?: TimelineLayersView|null;\n  private preferredTabId?: string;\n  private selection?: TimelineSelection|null;\n\n  constructor(delegate: TimelineModeViewDelegate) {\n    super();\n    this.element.classList.add('timeline-details');\n\n    this.detailsLinkifier = new Components.Linkifier.Linkifier();\n\n    this.tabbedPane = new UI.TabbedPane.TabbedPane();\n    this.tabbedPane.show(this.element);\n\n    this.defaultDetailsWidget = new UI.Widget.VBox();\n    this.defaultDetailsWidget.element.classList.add('timeline-details-view');\n    this.defaultDetailsContentElement =\n        this.defaultDetailsWidget.element.createChild('div', 'timeline-details-view-body vbox');\n    this.appendTab(Tab.Details, i18nString(UIStrings.summary), this.defaultDetailsWidget);\n    this.setPreferredTab(Tab.Details);\n\n    this.rangeDetailViews = new Map();\n\n    const bottomUpView = new BottomUpTimelineTreeView();\n    this.appendTab(Tab.BottomUp, i18nString(UIStrings.bottomup), bottomUpView);\n    this.rangeDetailViews.set(Tab.BottomUp, bottomUpView);\n\n    const callTreeView = new CallTreeTimelineTreeView();\n    this.appendTab(Tab.CallTree, i18nString(UIStrings.callTree), callTreeView);\n    this.rangeDetailViews.set(Tab.CallTree, callTreeView);\n\n    const eventsView = new EventsTimelineTreeView(delegate);\n    this.appendTab(Tab.EventLog, i18nString(UIStrings.eventLog), eventsView);\n    this.rangeDetailViews.set(Tab.EventLog, eventsView);\n\n    this.additionalMetricsToolbar = new UI.Toolbar.Toolbar('timeline-additional-metrics');\n    this.element.appendChild(this.additionalMetricsToolbar.element);\n\n    this.tabbedPane.addEventListener(UI.TabbedPane.Events.TabSelected, this.tabSelected, this);\n  }\n\n  setModel(model: PerformanceModel|null, track: TimelineModel.TimelineModel.Track|null): void {\n    if (this.model !== model) {\n      if (this.model) {\n        this.model.removeEventListener(Events.WindowChanged, this.onWindowChanged, this);\n      }\n      this.model = (model as PerformanceModel);\n      if (this.model) {\n        this.model.addEventListener(Events.WindowChanged, this.onWindowChanged, this);\n      }\n    }\n    this.track = track;\n    this.tabbedPane.closeTabs([Tab.PaintProfiler, Tab.LayerViewer], false);\n    for (const view of this.rangeDetailViews.values()) {\n      view.setModel(model, track);\n    }\n    this.lazyPaintProfilerView = null;\n    this.lazyLayersView = null;\n    this.setSelection(null);\n\n    // Add TBT info to the footer.\n    this.additionalMetricsToolbar.removeToolbarItems();\n    if (model && model.timelineModel()) {\n      const {estimated, time} = model.timelineModel().totalBlockingTime();\n      const isEstimate = estimated ? ` (${i18nString(UIStrings.estimated)})` : '';\n      const message = i18nString(UIStrings.totalBlockingTimeSmss, {PH1: time.toFixed(2), PH2: isEstimate});\n\n      const warning = document.createElement('span');\n      const clsLink = UI.XLink.XLink.create('https://web.dev/tbt/', i18nString(UIStrings.learnMore));\n      // crbug.com/1103188: In dark mode the focus ring is hidden by the surrounding\n      // container of this link. For some additional spacing on the right to make\n      // sure the ring is fully visible.\n      clsLink.style.marginRight = '2px';\n      warning.appendChild(clsLink);\n\n      this.additionalMetricsToolbar.appendText(message);\n      this.additionalMetricsToolbar.appendToolbarItem(new UI.Toolbar.ToolbarItem(warning));\n    }\n  }\n\n  private setContent(node: Node): void {\n    const allTabs = this.tabbedPane.otherTabs(Tab.Details);\n    for (let i = 0; i < allTabs.length; ++i) {\n      if (!this.rangeDetailViews.has(allTabs[i])) {\n        this.tabbedPane.closeTab(allTabs[i]);\n      }\n    }\n    this.defaultDetailsContentElement.removeChildren();\n    this.defaultDetailsContentElement.appendChild(node);\n  }\n\n  private updateContents(): void {\n    const view = this.rangeDetailViews.get(this.tabbedPane.selectedTabId || '');\n    if (view) {\n      const window = this.model.window();\n      view.updateContents(this.selection || TimelineSelection.fromRange(window.left, window.right));\n    }\n  }\n\n  private appendTab(id: string, tabTitle: string, view: UI.Widget.Widget, isCloseable?: boolean): void {\n    this.tabbedPane.appendTab(id, tabTitle, view, undefined, undefined, isCloseable);\n    if (this.preferredTabId !== this.tabbedPane.selectedTabId) {\n      this.tabbedPane.selectTab(id);\n    }\n  }\n\n  headerElement(): Element {\n    return this.tabbedPane.headerElement();\n  }\n\n  setPreferredTab(tabId: string): void {\n    this.preferredTabId = tabId;\n  }\n\n  private onWindowChanged(): void {\n    if (!this.selection) {\n      this.updateContentsFromWindow();\n    }\n  }\n\n  private updateContentsFromWindow(): void {\n    if (!this.model) {\n      this.setContent(UI.Fragment.html`<div/>`);\n      return;\n    }\n    const window = this.model.window();\n    this.updateSelectedRangeStats(window.left, window.right);\n    this.updateContents();\n  }\n\n  setSelection(selection: TimelineSelection|null): void {\n    this.detailsLinkifier.reset();\n    this.selection = selection;\n    if (!this.selection) {\n      this.updateContentsFromWindow();\n      return;\n    }\n    switch (this.selection.type()) {\n      case TimelineSelection.Type.TraceEvent: {\n        const event = (this.selection.object() as SDK.TracingModel.Event);\n        void TimelineUIUtils.buildTraceEventDetails(event, this.model.timelineModel(), this.detailsLinkifier, true)\n            .then(fragment => this.appendDetailsTabsForTraceEventAndShowDetails(event, fragment));\n        break;\n      }\n      case TimelineSelection.Type.Frame: {\n        const frame = (this.selection.object() as TimelineModel.TimelineFrameModel.TimelineFrame);\n        const filmStripFrame = this.model.filmStripModelFrame(frame);\n        this.setContent(TimelineUIUtils.generateDetailsContentForFrame(frame, filmStripFrame));\n        if (frame.layerTree) {\n          const layersView = this.layersView();\n          layersView.showLayerTree(frame.layerTree);\n          if (!this.tabbedPane.hasTab(Tab.LayerViewer)) {\n            this.appendTab(Tab.LayerViewer, i18nString(UIStrings.layers), layersView);\n          }\n        }\n        break;\n      }\n      case TimelineSelection.Type.NetworkRequest: {\n        const request = (this.selection.object() as TimelineModel.TimelineModel.NetworkRequest);\n        void TimelineUIUtils.buildNetworkRequestDetails(request, this.model.timelineModel(), this.detailsLinkifier)\n            .then(this.setContent.bind(this));\n        break;\n      }\n      case TimelineSelection.Type.Range: {\n        this.updateSelectedRangeStats(this.selection.startTime(), this.selection.endTime());\n        break;\n      }\n    }\n\n    this.updateContents();\n  }\n\n  private tabSelected(event: Common.EventTarget.EventTargetEvent<UI.TabbedPane.EventData>): void {\n    if (!event.data.isUserGesture) {\n      return;\n    }\n    this.setPreferredTab(event.data.tabId);\n    this.updateContents();\n  }\n\n  private layersView(): TimelineLayersView {\n    if (this.lazyLayersView) {\n      return this.lazyLayersView;\n    }\n    this.lazyLayersView =\n        new TimelineLayersView(this.model.timelineModel(), this.showSnapshotInPaintProfiler.bind(this));\n    return this.lazyLayersView;\n  }\n\n  private paintProfilerView(): TimelinePaintProfilerView {\n    if (this.lazyPaintProfilerView) {\n      return this.lazyPaintProfilerView;\n    }\n    this.lazyPaintProfilerView = new TimelinePaintProfilerView(this.model.frameModel());\n    return this.lazyPaintProfilerView;\n  }\n\n  private showSnapshotInPaintProfiler(snapshot: SDK.PaintProfiler.PaintProfilerSnapshot): void {\n    const paintProfilerView = this.paintProfilerView();\n    paintProfilerView.setSnapshot(snapshot);\n    if (!this.tabbedPane.hasTab(Tab.PaintProfiler)) {\n      this.appendTab(Tab.PaintProfiler, i18nString(UIStrings.paintProfiler), paintProfilerView, true);\n    }\n    this.tabbedPane.selectTab(Tab.PaintProfiler, true);\n  }\n\n  private appendDetailsTabsForTraceEventAndShowDetails(event: SDK.TracingModel.Event, content: Node): void {\n    this.setContent(content);\n    if (event.name === TimelineModel.TimelineModel.RecordType.Paint ||\n        event.name === TimelineModel.TimelineModel.RecordType.RasterTask) {\n      this.showEventInPaintProfiler(event);\n    }\n  }\n\n  private showEventInPaintProfiler(event: SDK.TracingModel.Event): void {\n    const paintProfilerModel =\n        SDK.TargetManager.TargetManager.instance().models(SDK.PaintProfiler.PaintProfilerModel)[0];\n    if (!paintProfilerModel) {\n      return;\n    }\n    const paintProfilerView = this.paintProfilerView();\n    const hasProfileData = paintProfilerView.setEvent(paintProfilerModel, event);\n    if (!hasProfileData) {\n      return;\n    }\n    if (this.tabbedPane.hasTab(Tab.PaintProfiler)) {\n      return;\n    }\n    this.appendTab(Tab.PaintProfiler, i18nString(UIStrings.paintProfiler), paintProfilerView);\n  }\n\n  private updateSelectedRangeStats(startTime: number, endTime: number): void {\n    if (!this.model || !this.track) {\n      return;\n    }\n    const aggregatedStats = TimelineUIUtils.statsForTimeRange(this.track.syncEvents(), startTime, endTime);\n    const startOffset = startTime - this.model.timelineModel().minimumRecordTime();\n    const endOffset = endTime - this.model.timelineModel().minimumRecordTime();\n\n    const contentHelper = new TimelineDetailsContentHelper(null, null);\n    contentHelper.addSection(i18nString(\n        UIStrings.rangeSS,\n        {PH1: i18n.TimeUtilities.millisToString(startOffset), PH2: i18n.TimeUtilities.millisToString(endOffset)}));\n    const pieChart = TimelineUIUtils.generatePieChart(aggregatedStats);\n    contentHelper.appendElementRow('', pieChart);\n    this.setContent(contentHelper.fragment);\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Tab {\n  Details = 'Details',\n  EventLog = 'EventLog',\n  CallTree = 'CallTree',\n  BottomUp = 'BottomUp',\n  PaintProfiler = 'PaintProfiler',\n  LayerViewer = 'LayerViewer',\n}\n"],
  "mappings": "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",
  "names": []
}
