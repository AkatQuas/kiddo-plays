{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/timeline/EventsTimelineTreeView.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport type * as TimelineModel from '../../models/timeline_model/timeline_model.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {Category, IsLong} from './TimelineFilters.js';\nimport type {TimelineModeViewDelegate} from './TimelinePanel.js';\nimport {TimelineSelection} from './TimelinePanel.js';\nimport {TimelineTreeView} from './TimelineTreeView.js';\nimport {TimelineUIUtils} from './TimelineUIUtils.js';\n\nconst UIStrings = {\n  /**\n  *@description Aria-label for filter bar in Event Log view\n  */\n  filterEventLog: 'Filter event log',\n  /**\n  *@description Text for the start time of an activity\n  */\n  startTime: 'Start Time',\n  /**\n  *@description Screen reader label for a select box that filters the Performance panel Event Log by duration.\n  */\n  durationFilter: 'Duration filter',\n  /**\n  *@description Text in Events Timeline Tree View of the Performance panel\n  *@example {2} PH1\n  */\n  Dms: '{PH1}\u00A0ms',\n  /**\n  *@description Text for everything\n  */\n  all: 'All',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/EventsTimelineTreeView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class EventsTimelineTreeView extends TimelineTreeView {\n  private readonly filtersControl: Filters;\n  private readonly delegate: TimelineModeViewDelegate;\n  private currentTree!: TimelineModel.TimelineProfileTree.Node;\n  constructor(delegate: TimelineModeViewDelegate) {\n    super();\n    this.filtersControl = new Filters();\n    this.filtersControl.addEventListener(Events.FilterChanged, this.onFilterChanged, this);\n    this.init();\n    this.delegate = delegate;\n    this.dataGrid.markColumnAsSortedBy('startTime', DataGrid.DataGrid.Order.Ascending);\n    this.splitWidget.showBoth();\n  }\n\n  filters(): TimelineModel.TimelineModelFilter.TimelineModelFilter[] {\n    return [...super.filters(), ...this.filtersControl.filters()];\n  }\n\n  updateContents(selection: TimelineSelection): void {\n    super.updateContents(selection);\n    if (selection.type() === TimelineSelection.Type.TraceEvent) {\n      const event = (selection.object() as SDK.TracingModel.Event);\n      this.selectEvent(event, true);\n    }\n  }\n\n  getToolbarInputAccessiblePlaceHolder(): string {\n    return i18nString(UIStrings.filterEventLog);\n  }\n\n  buildTree(): TimelineModel.TimelineProfileTree.Node {\n    this.currentTree = this.buildTopDownTree(true, null);\n    return this.currentTree;\n  }\n\n  private onFilterChanged(): void {\n    const lastSelectedNode = this.lastSelectedNode();\n    const selectedEvent = lastSelectedNode && lastSelectedNode.event;\n    this.refreshTree();\n    if (selectedEvent) {\n      this.selectEvent(selectedEvent, false);\n    }\n  }\n\n  private findNodeWithEvent(event: SDK.TracingModel.Event): TimelineModel.TimelineProfileTree.Node|null {\n    const iterators = [this.currentTree.children().values()];\n    while (iterators.length) {\n      const {done, value: child} = iterators[iterators.length - 1].next();\n      if (done) {\n        iterators.pop();\n        continue;\n      }\n      if (child.event === event) {\n        return child;\n      }\n      iterators.push(child.children().values());\n    }\n    return null;\n  }\n\n  private selectEvent(event: SDK.TracingModel.Event, expand?: boolean): void {\n    const node = this.findNodeWithEvent(event);\n    if (!node) {\n      return;\n    }\n    this.selectProfileNode(node, false);\n    if (expand) {\n      const dataGridNode = this.dataGridNodeForTreeNode(node);\n      if (dataGridNode) {\n        dataGridNode.expand();\n      }\n    }\n  }\n\n  populateColumns(columns: DataGrid.DataGrid.ColumnDescriptor[]): void {\n    columns.push(({\n      id: 'startTime',\n      title: i18nString(UIStrings.startTime),\n      width: '80px',\n      fixedWidth: true,\n      sortable: true,\n    } as DataGrid.DataGrid.ColumnDescriptor));\n    super.populateColumns(columns);\n    columns.filter(c => c.fixedWidth).forEach(c => {\n      c.width = '80px';\n    });\n  }\n\n  populateToolbar(toolbar: UI.Toolbar.Toolbar): void {\n    super.populateToolbar(toolbar);\n    this.filtersControl.populateToolbar(toolbar);\n  }\n\n  showDetailsForNode(node: TimelineModel.TimelineProfileTree.Node): boolean {\n    const traceEvent = node.event;\n    if (!traceEvent) {\n      return false;\n    }\n    const model = this.model();\n    if (!model) {\n      return false;\n    }\n    void TimelineUIUtils.buildTraceEventDetails(traceEvent, model.timelineModel(), this.linkifier, false)\n        .then(fragment => this.detailsView.element.appendChild(fragment));\n    return true;\n  }\n\n  onHover(node: TimelineModel.TimelineProfileTree.Node|null): void {\n    this.delegate.highlightEvent(node && node.event);\n  }\n}\n\nexport class Filters extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  private readonly categoryFilter: Category;\n  private readonly durationFilter: IsLong;\n  private readonly filtersInternal: (IsLong|Category)[];\n  constructor() {\n    super();\n    this.categoryFilter = new Category();\n    this.durationFilter = new IsLong();\n    this.filtersInternal = [this.categoryFilter, this.durationFilter];\n  }\n\n  filters(): TimelineModel.TimelineModelFilter.TimelineModelFilter[] {\n    return this.filtersInternal;\n  }\n\n  populateToolbar(toolbar: UI.Toolbar.Toolbar): void {\n    const durationFilterUI =\n        new UI.Toolbar.ToolbarComboBox(durationFilterChanged.bind(this), i18nString(UIStrings.durationFilter));\n    for (const durationMs of Filters.durationFilterPresetsMs) {\n      durationFilterUI.addOption(durationFilterUI.createOption(\n          durationMs ? `\u2265 ${i18nString(UIStrings.Dms, {PH1: durationMs})}` : i18nString(UIStrings.all),\n          String(durationMs)));\n    }\n    toolbar.appendToolbarItem(durationFilterUI);\n\n    const categoryFiltersUI = new Map<string, UI.Toolbar.ToolbarCheckbox>();\n    const categories = TimelineUIUtils.categories();\n    for (const categoryName in categories) {\n      const category = categories[categoryName];\n      if (!category.visible) {\n        continue;\n      }\n      const checkbox =\n          new UI.Toolbar.ToolbarCheckbox(category.title, undefined, categoriesFilterChanged.bind(this, categoryName));\n      checkbox.setChecked(true);\n      checkbox.inputElement.style.backgroundColor = category.color;\n      categoryFiltersUI.set(category.name, checkbox);\n      toolbar.appendToolbarItem(checkbox);\n    }\n\n    function durationFilterChanged(this: Filters): void {\n      const duration = (durationFilterUI.selectedOption() as HTMLOptionElement).value;\n      const minimumRecordDuration = parseInt(duration, 10);\n      this.durationFilter.setMinimumRecordDuration(minimumRecordDuration);\n      this.notifyFiltersChanged();\n    }\n\n    function categoriesFilterChanged(this: Filters, name: string): void {\n      const categories = TimelineUIUtils.categories();\n      const checkBox = categoryFiltersUI.get(name);\n      categories[name].hidden = !checkBox || !checkBox.checked();\n      this.notifyFiltersChanged();\n    }\n  }\n\n  private notifyFiltersChanged(): void {\n    this.dispatchEventToListeners(Events.FilterChanged);\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  private static readonly durationFilterPresetsMs = [0, 1, 15];\n}\n\nconst enum Events {\n  FilterChanged = 'FilterChanged',\n}\n\ntype EventTypes = {\n  [Events.FilterChanged]: void,\n};\n"],
  "mappings": "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",
  "names": []
}
