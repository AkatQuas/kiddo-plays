{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/timeline/TimelineTreeView.ts"],
  "sourcesContent": ["// Copyright 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as TimelineModel from '../../models/timeline_model/timeline_model.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type {PerformanceModel} from './PerformanceModel.js';\nimport {TimelineRegExp} from './TimelineFilters.js';\nimport type {TimelineSelection} from './TimelinePanel.js';\nimport {TimelineUIUtils} from './TimelineUIUtils.js';\n\nconst UIStrings = {\n  /**\n  *@description Text for the performance of something\n  */\n  performance: 'Performance',\n  /**\n  *@description Text to filter result items\n  */\n  filter: 'Filter',\n  /**\n  *@description Time of a single activity, as opposed to the total time\n  */\n  selfTime: 'Self Time',\n  /**\n  *@description Text for the total time of something\n  */\n  totalTime: 'Total Time',\n  /**\n  *@description Text in Timeline Tree View of the Performance panel\n  */\n  activity: 'Activity',\n  /**\n  *@description Text of a DOM element in Timeline Tree View of the Performance panel\n  */\n  selectItemForDetails: 'Select item for details.',\n  /**\n  * @description This message is presented as a tooltip when developers investigate the performance\n  * of a page. The tooltip alerts developers that some parts of code in execution were not optimized\n  * (made to run faster) and that associated timing information must be considered with this in\n  * mind. The placeholder text is the reason the code was not optimized.\n  * @example {Optimized too many times} PH1\n  */\n  notOptimizedS: 'Not optimized: {PH1}',\n  /**\n  *@description Time in miliseconds\n  *@example {30.1} PH1\n  */\n  fms: '{PH1}\u00A0ms',\n  /**\n  *@description Number followed by percent sign\n  *@example {20} PH1\n  */\n  percentPlaceholder: '{PH1}\u00A0%',\n  /**\n  *@description Text in Timeline Tree View of the Performance panel\n  */\n  chromeExtensionsOverhead: '[`Chrome` extensions overhead]',\n  /**\n   * @description Text in Timeline Tree View of the Performance panel. The text is presented\n   * when developers investigate the performance of a page. 'V8 Runtime' labels the time\n   * spent in (i.e. runtime) the V8 JavaScript engine.\n   */\n  vRuntime: '[`V8` Runtime]',\n  /**\n  *@description Text in Timeline Tree View of the Performance panel\n  */\n  unattributed: '[unattributed]',\n  /**\n  *@description Text in Timeline Tree View of the Performance panel\n  */\n  javascript: 'JavaScript',\n  /**\n  *@description Text that refers to one or a group of webpages\n  */\n  page: 'Page',\n  /**\n  *@description Text in Timeline Tree View of the Performance panel\n  */\n  noGrouping: 'No Grouping',\n  /**\n  *@description Text in Timeline Tree View of the Performance panel\n  */\n  groupByActivity: 'Group by Activity',\n  /**\n  *@description Text in Timeline Tree View of the Performance panel\n  */\n  groupByCategory: 'Group by Category',\n  /**\n  *@description Text in Timeline Tree View of the Performance panel\n  */\n  groupByDomain: 'Group by Domain',\n  /**\n  *@description Text in Timeline Tree View of the Performance panel\n  */\n  groupByFrame: 'Group by Frame',\n  /**\n  *@description Text in Timeline Tree View of the Performance panel\n  */\n  groupBySubdomain: 'Group by Subdomain',\n  /**\n  *@description Text in Timeline Tree View of the Performance panel\n  */\n  groupByUrl: 'Group by URL',\n  /**\n  *@description Aria-label for grouping combo box in Timeline Details View\n  */\n  groupBy: 'Group by',\n  /**\n  *@description Aria-label for filter bar in Call Tree view\n  */\n  filterCallTree: 'Filter call tree',\n  /**\n  *@description Aria-label for the filter bar in Bottom-Up view\n  */\n  filterBottomup: 'Filter bottom-up',\n  /**\n  * @description Title of the sidebar pane in the Performance panel which shows the stack (call\n  * stack) where the program spent the most time (out of all the call stacks) while executing.\n  */\n  heaviestStack: 'Heaviest stack',\n  /**\n  * @description Tooltip for the the Heaviest stack sidebar toggle in the Timeline Tree View of the\n  * Performance panel. Command to open/show the sidebar.\n  */\n  showHeaviestStack: 'Show Heaviest stack',\n  /**\n  * @description Tooltip for the the Heaviest stack sidebar toggle in the Timeline Tree View of the\n  * Performance panel. Command to close/hide the sidebar.\n  */\n  hideHeaviestStack: 'Hide Heaviest stack',\n  /**\n   * @description Screen reader announcement when the heaviest stack sidebar is shown in the Performance panel.\n   */\n  heaviestStackShown: 'Heaviest stack sidebar shown',\n  /**\n   * @description Screen reader announcement when the heaviest stack sidebar is hidden in the Performance panel.\n   */\n  heaviestStackHidden: 'Heaviest stack sidebar hidden',\n  /**\n  *@description Data grid name for Timeline Stack data grids\n  */\n  timelineStack: 'Timeline Stack',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/TimelineTreeView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class TimelineTreeView extends UI.Widget.VBox implements UI.SearchableView.Searchable {\n  modelInternal: PerformanceModel|null;\n  private track: TimelineModel.TimelineModel.Track|null;\n  private readonly tree: TimelineModel.TimelineProfileTree.Node|null;\n  private searchResults: TimelineModel.TimelineProfileTree.Node[];\n  linkifier!: Components.Linkifier.Linkifier;\n  dataGrid!: DataGrid.SortableDataGrid.SortableDataGrid<GridNode>;\n  private lastHoveredProfileNode!: TimelineModel.TimelineProfileTree.Node|null;\n  private textFilterInternal!: TimelineRegExp;\n  private taskFilter!: TimelineModel.TimelineModelFilter.ExclusiveNameFilter;\n  protected startTime!: number;\n  protected endTime!: number;\n  splitWidget!: UI.SplitWidget.SplitWidget;\n  detailsView!: UI.Widget.Widget;\n  private searchableView!: UI.SearchableView.SearchableView;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private currentThreadSetting?: Common.Settings.Setting<any>;\n  private lastSelectedNodeInternal?: TimelineModel.TimelineProfileTree.Node|null;\n  private textFilterUI?: UI.Toolbar.ToolbarInput;\n  private root?: TimelineModel.TimelineProfileTree.Node;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private currentResult?: any;\n\n  constructor() {\n    super();\n    this.modelInternal = null;\n    this.track = null;\n    this.tree = null;\n    this.element.classList.add('timeline-tree-view');\n\n    this.searchResults = [];\n  }\n\n  static eventNameForSorting(event: SDK.TracingModel.Event): string {\n    if (event.name === TimelineModel.TimelineModel.RecordType.JSFrame) {\n      const data = event.args['data'];\n      return data['functionName'] + '@' + (data['scriptId'] || data['url'] || '');\n    }\n    return event.name + ':@' + TimelineModel.TimelineProfileTree.eventURL(event);\n  }\n\n  setSearchableView(searchableView: UI.SearchableView.SearchableView): void {\n    this.searchableView = searchableView;\n  }\n\n  setModel(model: PerformanceModel|null, track: TimelineModel.TimelineModel.Track|null): void {\n    this.modelInternal = model;\n    this.track = track;\n    this.refreshTree();\n  }\n\n  getToolbarInputAccessiblePlaceHolder(): string {\n    return '';\n  }\n\n  model(): PerformanceModel|null {\n    return this.modelInternal;\n  }\n\n  init(): void {\n    this.linkifier = new Components.Linkifier.Linkifier();\n\n    this.taskFilter =\n        new TimelineModel.TimelineModelFilter.ExclusiveNameFilter([TimelineModel.TimelineModel.RecordType.Task]);\n    this.textFilterInternal = new TimelineRegExp();\n\n    this.currentThreadSetting = Common.Settings.Settings.instance().createSetting('timelineTreeCurrentThread', 0);\n    this.currentThreadSetting.addChangeListener(this.refreshTree, this);\n\n    const columns = ([] as DataGrid.DataGrid.ColumnDescriptor[]);\n    this.populateColumns(columns);\n\n    this.splitWidget = new UI.SplitWidget.SplitWidget(true, true, 'timelineTreeViewDetailsSplitWidget');\n    const mainView = new UI.Widget.VBox();\n    const toolbar = new UI.Toolbar.Toolbar('', mainView.element);\n    toolbar.makeWrappable(true);\n    this.populateToolbar(toolbar);\n\n    this.dataGrid = new DataGrid.SortableDataGrid.SortableDataGrid({\n      displayName: i18nString(UIStrings.performance),\n      columns,\n      refreshCallback: undefined,\n      editCallback: undefined,\n      deleteCallback: undefined,\n    });\n    this.dataGrid.addEventListener(DataGrid.DataGrid.Events.SortingChanged, this.sortingChanged, this);\n    this.dataGrid.element.addEventListener('mousemove', this.onMouseMove.bind(this), true);\n    this.dataGrid.setResizeMethod(DataGrid.DataGrid.ResizeMethod.Last);\n    this.dataGrid.setRowContextMenuCallback(this.onContextMenu.bind(this));\n    this.dataGrid.asWidget().show(mainView.element);\n    this.dataGrid.addEventListener(DataGrid.DataGrid.Events.SelectedNode, this.updateDetailsForSelection, this);\n\n    this.detailsView = new UI.Widget.VBox();\n    this.detailsView.element.classList.add('timeline-details-view', 'timeline-details-view-body');\n    this.splitWidget.setMainWidget(mainView);\n    this.splitWidget.setSidebarWidget(this.detailsView);\n    this.splitWidget.hideSidebar();\n    this.splitWidget.show(this.element);\n    this.splitWidget.addEventListener(UI.SplitWidget.Events.ShowModeChanged, this.onShowModeChanged, this);\n\n    this.lastSelectedNodeInternal;\n  }\n\n  lastSelectedNode(): TimelineModel.TimelineProfileTree.Node|null|undefined {\n    return this.lastSelectedNodeInternal;\n  }\n\n  updateContents(selection: TimelineSelection): void {\n    this.setRange(selection.startTime(), selection.endTime());\n  }\n\n  setRange(startTime: number, endTime: number): void {\n    this.startTime = startTime;\n    this.endTime = endTime;\n    this.refreshTree();\n  }\n\n  filters(): TimelineModel.TimelineModelFilter.TimelineModelFilter[] {\n    return [this.taskFilter, this.textFilterInternal, ...(this.modelInternal ? this.modelInternal.filters() : [])];\n  }\n\n  filtersWithoutTextFilter(): TimelineModel.TimelineModelFilter.TimelineModelFilter[] {\n    return [this.taskFilter, ...(this.modelInternal ? this.modelInternal.filters() : [])];\n  }\n\n  textFilter(): TimelineRegExp {\n    return this.textFilterInternal;\n  }\n\n  exposePercentages(): boolean {\n    return false;\n  }\n\n  populateToolbar(toolbar: UI.Toolbar.Toolbar): void {\n    const textFilterUI =\n        new UI.Toolbar.ToolbarInput(i18nString(UIStrings.filter), this.getToolbarInputAccessiblePlaceHolder());\n    textFilterUI.addEventListener(UI.Toolbar.ToolbarInput.Event.TextChanged, () => {\n      const searchQuery = textFilterUI.value();\n      this.textFilterInternal.setRegExp(\n          searchQuery ? Platform.StringUtilities.createPlainTextSearchRegex(searchQuery, 'i') : null);\n      this.refreshTree();\n    }, this);\n    this.textFilterUI = textFilterUI;\n    toolbar.appendToolbarItem(textFilterUI);\n  }\n\n  modelEvents(): SDK.TracingModel.Event[] {\n    return this.track ? this.track.syncEvents() : [];\n  }\n\n  onHover(_node: TimelineModel.TimelineProfileTree.Node|null): void {\n  }\n\n  appendContextMenuItems(_contextMenu: UI.ContextMenu.ContextMenu, _node: TimelineModel.TimelineProfileTree.Node):\n      void {\n  }\n\n  linkifyLocation(event: SDK.TracingModel.Event): Element|null {\n    if (!this.modelInternal) {\n      return null;\n    }\n    const target = this.modelInternal.timelineModel().targetByEvent(event);\n    if (!target) {\n      return null;\n    }\n    const frame = TimelineModel.TimelineProfileTree.eventStackFrame(event);\n    if (!frame) {\n      return null;\n    }\n    return this.linkifier.maybeLinkifyConsoleCallFrame(target, frame, {showColumnNumber: true, inlineFrameIndex: 0});\n  }\n\n  selectProfileNode(treeNode: TimelineModel.TimelineProfileTree.Node, suppressSelectedEvent: boolean): void {\n    const pathToRoot = [];\n    let node: (TimelineModel.TimelineProfileTree.Node|null)|TimelineModel.TimelineProfileTree.Node = treeNode;\n    for (; node; node = node.parent) {\n      pathToRoot.push(node);\n    }\n    for (let i = pathToRoot.length - 1; i > 0; --i) {\n      const gridNode = this.dataGridNodeForTreeNode(pathToRoot[i]);\n      if (gridNode && gridNode.dataGrid) {\n        gridNode.expand();\n      }\n    }\n    const gridNode = this.dataGridNodeForTreeNode(treeNode);\n    if (gridNode && gridNode.dataGrid) {\n      gridNode.reveal();\n      gridNode.select(suppressSelectedEvent);\n    }\n  }\n\n  refreshTree(): void {\n    this.linkifier.reset();\n    this.dataGrid.rootNode().removeChildren();\n    if (!this.modelInternal) {\n      this.updateDetailsForSelection();\n      return;\n    }\n    this.root = this.buildTree();\n    const children = this.root.children();\n    let maxSelfTime = 0;\n    let maxTotalTime = 0;\n    const totalUsedTime = this.root.totalTime - this.root.selfTime;\n    for (const child of children.values()) {\n      maxSelfTime = Math.max(maxSelfTime, child.selfTime);\n      maxTotalTime = Math.max(maxTotalTime, child.totalTime);\n    }\n    for (const child of children.values()) {\n      // Exclude the idle time off the total calculation.\n      const gridNode = new TreeGridNode(child, totalUsedTime, maxSelfTime, maxTotalTime, this);\n      this.dataGrid.insertChild(gridNode);\n    }\n    this.sortingChanged();\n    this.updateDetailsForSelection();\n    if (this.searchableView) {\n      this.searchableView.refreshSearch();\n    }\n    const rootNode = this.dataGrid.rootNode();\n    if (rootNode.children.length > 0) {\n      rootNode.children[0].select(/* supressSelectedEvent */ true);\n    }\n  }\n\n  buildTree(): TimelineModel.TimelineProfileTree.Node {\n    throw new Error('Not Implemented');\n  }\n\n  buildTopDownTree(doNotAggregate: boolean, groupIdCallback: ((arg0: SDK.TracingModel.Event) => string)|null):\n      TimelineModel.TimelineProfileTree.Node {\n    return new TimelineModel.TimelineProfileTree.TopDownRootNode(\n        this.modelEvents(), this.filters(), this.startTime, this.endTime, doNotAggregate, groupIdCallback);\n  }\n\n  populateColumns(columns: DataGrid.DataGrid.ColumnDescriptor[]): void {\n    columns.push(\n        ({id: 'self', title: i18nString(UIStrings.selfTime), width: '120px', fixedWidth: true, sortable: true} as\n         DataGrid.DataGrid.ColumnDescriptor));\n    columns.push(\n        ({id: 'total', title: i18nString(UIStrings.totalTime), width: '120px', fixedWidth: true, sortable: true} as\n         DataGrid.DataGrid.ColumnDescriptor));\n    columns.push(\n        ({id: 'activity', title: i18nString(UIStrings.activity), disclosure: true, sortable: true} as\n         DataGrid.DataGrid.ColumnDescriptor));\n  }\n\n  private sortingChanged(): void {\n    const columnId = this.dataGrid.sortColumnId();\n    if (!columnId) {\n      return;\n    }\n    let sortFunction;\n    switch (columnId) {\n      case 'startTime':\n        sortFunction = compareStartTime;\n        break;\n      case 'self':\n        sortFunction = compareNumericField.bind(null, 'selfTime');\n        break;\n      case 'total':\n        sortFunction = compareNumericField.bind(null, 'totalTime');\n        break;\n      case 'activity':\n        sortFunction = compareName;\n        break;\n      default:\n        console.assert(false, 'Unknown sort field: ' + columnId);\n        return;\n    }\n    this.dataGrid.sortNodes(sortFunction, !this.dataGrid.isSortOrderAscending());\n\n    function compareNumericField(\n        field: string, a: DataGrid.SortableDataGrid.SortableDataGridNode<GridNode>,\n        b: DataGrid.SortableDataGrid.SortableDataGridNode<GridNode>): number {\n      const nodeA = (a as TreeGridNode);\n      const nodeB = (b as TreeGridNode);\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return (nodeA.profileNode as any)[field] - (nodeB.profileNode as any)[field];\n    }\n\n    function compareStartTime(\n        a: DataGrid.SortableDataGrid.SortableDataGridNode<GridNode>,\n        b: DataGrid.SortableDataGrid.SortableDataGridNode<GridNode>): number {\n      const nodeA = (a as TreeGridNode);\n      const nodeB = (b as TreeGridNode);\n      const eventA = (nodeA.profileNode.event as SDK.TracingModel.Event);\n      const eventB = (nodeB.profileNode.event as SDK.TracingModel.Event);\n      return eventA.startTime - eventB.startTime;\n    }\n\n    function compareName(\n        a: DataGrid.SortableDataGrid.SortableDataGridNode<GridNode>,\n        b: DataGrid.SortableDataGrid.SortableDataGridNode<GridNode>): number {\n      const nodeA = (a as TreeGridNode);\n      const nodeB = (b as TreeGridNode);\n      const eventA = (nodeA.profileNode.event as SDK.TracingModel.Event);\n      const eventB = (nodeB.profileNode.event as SDK.TracingModel.Event);\n      const nameA = TimelineTreeView.eventNameForSorting(eventA);\n      const nameB = TimelineTreeView.eventNameForSorting(eventB);\n      return nameA.localeCompare(nameB);\n    }\n  }\n\n  private onShowModeChanged(): void {\n    if (this.splitWidget.showMode() === UI.SplitWidget.ShowMode.OnlyMain) {\n      return;\n    }\n    this.lastSelectedNodeInternal = undefined;\n    this.updateDetailsForSelection();\n  }\n\n  private updateDetailsForSelection(): void {\n    const selectedNode = this.dataGrid.selectedNode ? (this.dataGrid.selectedNode as TreeGridNode).profileNode : null;\n    if (selectedNode === this.lastSelectedNodeInternal) {\n      return;\n    }\n    this.lastSelectedNodeInternal = selectedNode;\n    if (this.splitWidget.showMode() === UI.SplitWidget.ShowMode.OnlyMain) {\n      return;\n    }\n    this.detailsView.detachChildWidgets();\n    this.detailsView.element.removeChildren();\n    if (selectedNode && this.showDetailsForNode(selectedNode)) {\n      return;\n    }\n    const banner = this.detailsView.element.createChild('div', 'full-widget-dimmed-banner');\n    UI.UIUtils.createTextChild(banner, i18nString(UIStrings.selectItemForDetails));\n  }\n\n  showDetailsForNode(_node: TimelineModel.TimelineProfileTree.Node): boolean {\n    return false;\n  }\n\n  private onMouseMove(event: Event): void {\n    const gridNode = event.target && (event.target instanceof Node) ?\n        (this.dataGrid.dataGridNodeFromNode((event.target as Node))) :\n        null;\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // @ts-expect-error\n    const profileNode = gridNode && gridNode._profileNode;\n    if (profileNode === this.lastHoveredProfileNode) {\n      return;\n    }\n    this.lastHoveredProfileNode = profileNode;\n    this.onHover(profileNode);\n  }\n\n  private onContextMenu(\n      contextMenu: UI.ContextMenu.ContextMenu, eventGridNode: DataGrid.DataGrid.DataGridNode<GridNode>): void {\n    const gridNode = (eventGridNode as GridNode);\n    if (gridNode.linkElement && !contextMenu.containsTarget(gridNode.linkElement)) {\n      contextMenu.appendApplicableItems(gridNode.linkElement);\n    }\n    const profileNode = gridNode.profileNode;\n    if (profileNode) {\n      this.appendContextMenuItems(contextMenu, profileNode);\n    }\n  }\n\n  dataGridNodeForTreeNode(treeNode: TimelineModel.TimelineProfileTree.Node): GridNode|null {\n    return profileNodeToTreeGridNode.get(treeNode) || null;\n  }\n\n  // UI.SearchableView.Searchable implementation\n\n  searchCanceled(): void {\n    this.searchResults = [];\n    this.currentResult = 0;\n  }\n\n  performSearch(searchConfig: UI.SearchableView.SearchConfig, _shouldJump: boolean, _jumpBackwards?: boolean): void {\n    this.searchResults = [];\n    this.currentResult = 0;\n    if (!this.root) {\n      return;\n    }\n    const searchRegex = searchConfig.toSearchRegex();\n    this.searchResults = this.root.searchTree(event => TimelineUIUtils.testContentMatching(event, searchRegex.regex));\n    this.searchableView.updateSearchMatchesCount(this.searchResults.length);\n  }\n\n  jumpToNextSearchResult(): void {\n    if (!this.searchResults.length) {\n      return;\n    }\n    this.selectProfileNode(this.searchResults[this.currentResult], false);\n    this.currentResult = Platform.NumberUtilities.mod(this.currentResult + 1, this.searchResults.length);\n  }\n\n  jumpToPreviousSearchResult(): void {\n    if (!this.searchResults.length) {\n      return;\n    }\n    this.selectProfileNode(this.searchResults[this.currentResult], false);\n    this.currentResult = Platform.NumberUtilities.mod(this.currentResult - 1, this.searchResults.length);\n  }\n\n  supportsCaseSensitiveSearch(): boolean {\n    return true;\n  }\n\n  supportsRegexSearch(): boolean {\n    return true;\n  }\n}\n\nexport class GridNode extends DataGrid.SortableDataGrid.SortableDataGridNode<GridNode> {\n  protected populated: boolean;\n  profileNode: TimelineModel.TimelineProfileTree.Node;\n  protected treeView: TimelineTreeView;\n  protected grandTotalTime: number;\n  protected maxSelfTime: number;\n  protected maxTotalTime: number;\n  linkElement: Element|null;\n\n  constructor(\n      profileNode: TimelineModel.TimelineProfileTree.Node, grandTotalTime: number, maxSelfTime: number,\n      maxTotalTime: number, treeView: TimelineTreeView) {\n    super(null, false);\n    this.populated = false;\n    this.profileNode = profileNode;\n    this.treeView = treeView;\n    this.grandTotalTime = grandTotalTime;\n    this.maxSelfTime = maxSelfTime;\n    this.maxTotalTime = maxTotalTime;\n    this.linkElement = null;\n  }\n\n  createCell(columnId: string): HTMLElement {\n    if (columnId === 'activity') {\n      return this.createNameCell(columnId);\n    }\n    return this.createValueCell(columnId) || super.createCell(columnId);\n  }\n\n  private createNameCell(columnId: string): HTMLElement {\n    const cell = this.createTD(columnId);\n    const container = cell.createChild('div', 'name-container');\n    const iconContainer = container.createChild('div', 'activity-icon-container');\n    const icon = iconContainer.createChild('div', 'activity-icon');\n    const name = container.createChild('div', 'activity-name');\n    const event = this.profileNode.event;\n    if (this.profileNode.isGroupNode()) {\n      const treeView = (this.treeView as AggregatedTimelineTreeView);\n      const info = treeView.displayInfoForGroupNode(this.profileNode);\n      name.textContent = info.name;\n      icon.style.backgroundColor = info.color;\n      if (info.icon) {\n        iconContainer.insertBefore(info.icon, icon);\n      }\n    } else if (event) {\n      const data = event.args['data'];\n      const deoptReason = data && data['deoptReason'];\n      if (deoptReason) {\n        container.createChild('div', 'activity-warning').title =\n            i18nString(UIStrings.notOptimizedS, {PH1: deoptReason});\n      }\n\n      name.textContent = TimelineUIUtils.eventTitle(event);\n      this.linkElement = this.treeView.linkifyLocation(event);\n      if (this.linkElement) {\n        container.createChild('div', 'activity-link').appendChild(this.linkElement);\n      }\n      const eventStyle = TimelineUIUtils.eventStyle(event);\n      const eventCategory = eventStyle.category;\n      UI.ARIAUtils.setAccessibleName(icon, eventCategory.title);\n      icon.style.backgroundColor = eventCategory.color;\n    }\n    return cell;\n  }\n\n  private createValueCell(columnId: string): HTMLElement|null {\n    if (columnId !== 'self' && columnId !== 'total' && columnId !== 'startTime') {\n      return null;\n    }\n\n    let showPercents = false;\n    let value: number;\n    let maxTime: number|undefined;\n    let event: SDK.TracingModel.Event|null;\n    switch (columnId) {\n      case 'startTime': {\n        event = this.profileNode.event;\n        const model = this.treeView.model();\n        if (!model) {\n          throw new Error('Unable to find model for tree view');\n        }\n        value = (event ? event.startTime : 0) - model.timelineModel().minimumRecordTime();\n      } break;\n      case 'self':\n        value = this.profileNode.selfTime;\n        maxTime = this.maxSelfTime;\n        showPercents = true;\n        break;\n      case 'total':\n        value = this.profileNode.totalTime;\n        maxTime = this.maxTotalTime;\n        showPercents = true;\n        break;\n      default:\n        return null;\n    }\n    const cell = this.createTD(columnId);\n    cell.className = 'numeric-column';\n    cell.setAttribute('title', i18nString(UIStrings.fms, {PH1: value.toFixed(4)}));\n    const textDiv = cell.createChild('div');\n    textDiv.createChild('span').textContent = i18nString(UIStrings.fms, {PH1: value.toFixed(1)});\n\n    if (showPercents && this.treeView.exposePercentages()) {\n      textDiv.createChild('span', 'percent-column').textContent =\n          i18nString(UIStrings.percentPlaceholder, {PH1: (value / this.grandTotalTime * 100).toFixed(1)});\n    }\n    if (maxTime) {\n      textDiv.classList.add('background-percent-bar');\n      cell.createChild('div', 'background-bar-container').createChild('div', 'background-bar').style.width =\n          (value * 100 / maxTime).toFixed(1) + '%';\n    }\n    return cell;\n  }\n}\n\nexport class TreeGridNode extends GridNode {\n  constructor(\n      profileNode: TimelineModel.TimelineProfileTree.Node, grandTotalTime: number, maxSelfTime: number,\n      maxTotalTime: number, treeView: TimelineTreeView) {\n    super(profileNode, grandTotalTime, maxSelfTime, maxTotalTime, treeView);\n    this.setHasChildren(this.profileNode.hasChildren());\n    profileNodeToTreeGridNode.set(profileNode, this);\n  }\n\n  populate(): void {\n    if (this.populated) {\n      return;\n    }\n    this.populated = true;\n    if (!this.profileNode.children) {\n      return;\n    }\n    for (const node of this.profileNode.children().values()) {\n      const gridNode = new TreeGridNode(node, this.grandTotalTime, this.maxSelfTime, this.maxTotalTime, this.treeView);\n      this.insertChildOrdered(gridNode);\n    }\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  private static readonly gridNodeSymbol = Symbol('treeGridNode');\n}\n\nconst profileNodeToTreeGridNode = new WeakMap<TimelineModel.TimelineProfileTree.Node, TreeGridNode>();\n\nexport class AggregatedTimelineTreeView extends TimelineTreeView {\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  protected readonly groupBySetting: Common.Settings.Setting<any>;\n  private readonly stackView: TimelineStackView;\n  private readonly productByURLCache: Map<string, string>;\n  private readonly colorByURLCache: Map<string, string>;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private executionContextNamesByOrigin: Map<any, any>;\n\n  constructor() {\n    super();\n    this.groupBySetting = Common.Settings.Settings.instance().createSetting(\n        'timelineTreeGroupBy', AggregatedTimelineTreeView.GroupBy.None);\n    this.groupBySetting.addChangeListener(this.refreshTree.bind(this));\n    this.init();\n    this.stackView = new TimelineStackView(this);\n    this.stackView.addEventListener(TimelineStackView.Events.SelectionChanged, this.onStackViewSelectionChanged, this);\n    this.productByURLCache = new Map();\n    this.colorByURLCache = new Map();\n    this.executionContextNamesByOrigin = new Map();\n  }\n\n  setModel(model: PerformanceModel|null, track: TimelineModel.TimelineModel.Track|null): void {\n    super.setModel(model, track);\n  }\n\n  updateContents(selection: TimelineSelection): void {\n    this.updateExtensionResolver();\n    super.updateContents(selection);\n    const rootNode = this.dataGrid.rootNode();\n    if (rootNode.children.length) {\n      rootNode.children[0].select(/* suppressSelectedEvent */ true);\n    }\n  }\n\n  private updateExtensionResolver(): void {\n    this.executionContextNamesByOrigin = new Map();\n    for (const runtimeModel of SDK.TargetManager.TargetManager.instance().models(SDK.RuntimeModel.RuntimeModel)) {\n      for (const context of runtimeModel.executionContexts()) {\n        this.executionContextNamesByOrigin.set(context.origin, context.name);\n      }\n    }\n  }\n\n  private beautifyDomainName(this: AggregatedTimelineTreeView, name: string): string {\n    if (AggregatedTimelineTreeView.isExtensionInternalURL(name as Platform.DevToolsPath.UrlString)) {\n      name = i18nString(UIStrings.chromeExtensionsOverhead);\n    } else if (AggregatedTimelineTreeView.isV8NativeURL(name as Platform.DevToolsPath.UrlString)) {\n      name = i18nString(UIStrings.vRuntime);\n    } else if (name.startsWith('chrome-extension')) {\n      name = this.executionContextNamesByOrigin.get(name) || name;\n    }\n    return name;\n  }\n\n  displayInfoForGroupNode(node: TimelineModel.TimelineProfileTree.Node): {\n    name: string,\n    color: string,\n    icon: (Element|undefined),\n  } {\n    const categories = TimelineUIUtils.categories();\n    const color =\n        node.id ? TimelineUIUtils.eventColor((node.event as SDK.TracingModel.Event)) : categories['other'].color;\n    const unattributed = i18nString(UIStrings.unattributed);\n\n    const id = typeof node.id === 'symbol' ? undefined : node.id;\n\n    switch (this.groupBySetting.get()) {\n      case AggregatedTimelineTreeView.GroupBy.Category: {\n        const category = id ? categories[id] || categories['other'] : {title: unattributed, color: unattributed};\n        return {name: category.title, color: category.color, icon: undefined};\n      }\n\n      case AggregatedTimelineTreeView.GroupBy.Domain:\n      case AggregatedTimelineTreeView.GroupBy.Subdomain: {\n        const domainName = id ? this.beautifyDomainName(id) : undefined;\n        return {name: domainName || unattributed, color: color, icon: undefined};\n      }\n\n      case AggregatedTimelineTreeView.GroupBy.EventName: {\n        if (!node.event) {\n          throw new Error('Unable to find event for group by operation');\n        }\n        const name = node.event.name === TimelineModel.TimelineModel.RecordType.JSFrame ?\n            i18nString(UIStrings.javascript) :\n            TimelineUIUtils.eventTitle(node.event);\n        return {\n          name: name,\n          color: node.event.name === TimelineModel.TimelineModel.RecordType.JSFrame ?\n              TimelineUIUtils.eventStyle(node.event).category.color :\n              color,\n          icon: undefined,\n        };\n      }\n\n      case AggregatedTimelineTreeView.GroupBy.URL:\n        break;\n\n      case AggregatedTimelineTreeView.GroupBy.Frame: {\n        if (!this.modelInternal) {\n          throw new Error('Unable to find model for group by frame operation');\n        }\n        const frame = id ? this.modelInternal.timelineModel().pageFrameById(id as Protocol.Page.FrameId) : undefined;\n        const frameName = frame ? TimelineUIUtils.displayNameForFrame(frame, 80) : i18nString(UIStrings.page);\n        return {name: frameName, color: color, icon: undefined};\n      }\n\n      default:\n        console.assert(false, 'Unexpected grouping type');\n    }\n    return {name: id || unattributed, color: color, icon: undefined};\n  }\n\n  populateToolbar(toolbar: UI.Toolbar.Toolbar): void {\n    super.populateToolbar(toolbar);\n    const groupBy = AggregatedTimelineTreeView.GroupBy;\n    const options = [\n      {label: i18nString(UIStrings.noGrouping), value: groupBy.None},\n      {label: i18nString(UIStrings.groupByActivity), value: groupBy.EventName},\n      {label: i18nString(UIStrings.groupByCategory), value: groupBy.Category},\n      {label: i18nString(UIStrings.groupByDomain), value: groupBy.Domain},\n      {label: i18nString(UIStrings.groupByFrame), value: groupBy.Frame},\n      {label: i18nString(UIStrings.groupBySubdomain), value: groupBy.Subdomain},\n      {label: i18nString(UIStrings.groupByUrl), value: groupBy.URL},\n    ];\n    toolbar.appendToolbarItem(\n        new UI.Toolbar.ToolbarSettingComboBox(options, this.groupBySetting, i18nString(UIStrings.groupBy)));\n    toolbar.appendSpacer();\n    toolbar.appendToolbarItem(this.splitWidget.createShowHideSidebarButton(\n        i18nString(UIStrings.showHeaviestStack), i18nString(UIStrings.hideHeaviestStack),\n        i18nString(UIStrings.heaviestStackShown), i18nString(UIStrings.heaviestStackHidden)));\n  }\n\n  private buildHeaviestStack(treeNode: TimelineModel.TimelineProfileTree.Node):\n      TimelineModel.TimelineProfileTree.Node[] {\n    console.assert(Boolean(treeNode.parent), 'Attempt to build stack for tree root');\n    let result: TimelineModel.TimelineProfileTree.Node[] = [];\n    // Do not add root to the stack, as it's the tree itself.\n    for (let node: TimelineModel.TimelineProfileTree.Node = treeNode; node && node.parent; node = node.parent) {\n      result.push(node);\n    }\n    result = result.reverse();\n    for (let node: TimelineModel.TimelineProfileTree.Node = treeNode;\n         node && node.children() && node.children().size;) {\n      const children = Array.from(node.children().values());\n      node = children.reduce((a, b) => a.totalTime > b.totalTime ? a : b);\n      result.push(node);\n    }\n    return result;\n  }\n\n  exposePercentages(): boolean {\n    return true;\n  }\n\n  private onStackViewSelectionChanged(): void {\n    const treeNode = this.stackView.selectedTreeNode();\n    if (treeNode) {\n      this.selectProfileNode(treeNode, true);\n    }\n  }\n\n  showDetailsForNode(node: TimelineModel.TimelineProfileTree.Node): boolean {\n    const stack = this.buildHeaviestStack(node);\n    this.stackView.setStack(stack, node);\n    this.stackView.show(this.detailsView.element);\n    return true;\n  }\n\n  protected groupingFunction(groupBy: string): ((arg0: SDK.TracingModel.Event) => string)|null {\n    const GroupBy = AggregatedTimelineTreeView.GroupBy;\n    switch (groupBy) {\n      case GroupBy.None:\n        return null;\n      case GroupBy.EventName:\n        return (event: SDK.TracingModel.Event): string => TimelineUIUtils.eventStyle(event).title;\n      case GroupBy.Category:\n        return (event: SDK.TracingModel.Event): string => TimelineUIUtils.eventStyle(event).category.name;\n      case GroupBy.Subdomain:\n        return this.domainByEvent.bind(this, false);\n      case GroupBy.Domain:\n        return this.domainByEvent.bind(this, true);\n      case GroupBy.URL:\n        return (event: SDK.TracingModel.Event): string => TimelineModel.TimelineProfileTree.eventURL(event) || '';\n      case GroupBy.Frame:\n        return (event: SDK.TracingModel.Event): string =>\n                   TimelineModel.TimelineModel.TimelineData.forEvent(event).frameId || '';\n      default:\n        console.assert(false, `Unexpected aggregation setting: ${groupBy}`);\n        return null;\n    }\n  }\n\n  private domainByEvent(groupSubdomains: boolean, event: SDK.TracingModel.Event): string {\n    const url = TimelineModel.TimelineProfileTree.eventURL(event);\n    if (!url) {\n      return '';\n    }\n    if (AggregatedTimelineTreeView.isExtensionInternalURL(url)) {\n      return AggregatedTimelineTreeView.extensionInternalPrefix;\n    }\n    if (AggregatedTimelineTreeView.isV8NativeURL(url)) {\n      return AggregatedTimelineTreeView.v8NativePrefix;\n    }\n    const parsedURL = Common.ParsedURL.ParsedURL.fromString(url);\n    if (!parsedURL) {\n      return '';\n    }\n    if (parsedURL.scheme === 'chrome-extension') {\n      return parsedURL.scheme + '://' + parsedURL.host;\n    }\n    if (!groupSubdomains) {\n      return parsedURL.host;\n    }\n    if (/^[.0-9]+$/.test(parsedURL.host)) {\n      return parsedURL.host;\n    }\n    const domainMatch = /([^.]*\\.)?[^.]*$/.exec(parsedURL.host);\n    return domainMatch && domainMatch[0] || '';\n  }\n\n  appendContextMenuItems(contextMenu: UI.ContextMenu.ContextMenu, node: TimelineModel.TimelineProfileTree.Node): void {\n    if (this.groupBySetting.get() !== AggregatedTimelineTreeView.GroupBy.Frame) {\n      return;\n    }\n    if (!node.isGroupNode()) {\n      return;\n    }\n    if (!this.modelInternal) {\n      return;\n    }\n    const frame = this.modelInternal.timelineModel().pageFrameById((node.id as Protocol.Page.FrameId));\n    if (!frame || !frame.ownerNode) {\n      return;\n    }\n    contextMenu.appendApplicableItems(frame.ownerNode);\n  }\n\n  private static isExtensionInternalURL(url: Platform.DevToolsPath.UrlString): boolean {\n    return url.startsWith(AggregatedTimelineTreeView.extensionInternalPrefix);\n  }\n\n  private static isV8NativeURL(url: Platform.DevToolsPath.UrlString): boolean {\n    return url.startsWith(AggregatedTimelineTreeView.v8NativePrefix);\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  private static readonly extensionInternalPrefix = 'extensions::';\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  private static readonly v8NativePrefix = 'native ';\n}\nexport namespace AggregatedTimelineTreeView {\n  // TODO(crbug.com/1167717): Make this a const enum again\n  // eslint-disable-next-line rulesdir/const_enum\n  export enum GroupBy {\n    None = 'None',\n    EventName = 'EventName',\n    Category = 'Category',\n    Domain = 'Domain',\n    Subdomain = 'Subdomain',\n    URL = 'URL',\n    Frame = 'Frame',\n  }\n}\n\nexport class CallTreeTimelineTreeView extends AggregatedTimelineTreeView {\n  constructor() {\n    super();\n    this.dataGrid.markColumnAsSortedBy('total', DataGrid.DataGrid.Order.Descending);\n  }\n\n  getToolbarInputAccessiblePlaceHolder(): string {\n    return i18nString(UIStrings.filterCallTree);\n  }\n\n  buildTree(): TimelineModel.TimelineProfileTree.Node {\n    const grouping = this.groupBySetting.get();\n    return this.buildTopDownTree(false, this.groupingFunction(grouping));\n  }\n}\n\nexport class BottomUpTimelineTreeView extends AggregatedTimelineTreeView {\n  constructor() {\n    super();\n    this.dataGrid.markColumnAsSortedBy('self', DataGrid.DataGrid.Order.Descending);\n  }\n\n  getToolbarInputAccessiblePlaceHolder(): string {\n    return i18nString(UIStrings.filterBottomup);\n  }\n\n  buildTree(): TimelineModel.TimelineProfileTree.Node {\n    return new TimelineModel.TimelineProfileTree.BottomUpRootNode(\n        this.modelEvents(), this.textFilter(), this.filtersWithoutTextFilter(), this.startTime, this.endTime,\n        this.groupingFunction(this.groupBySetting.get()));\n  }\n}\n\nexport class TimelineStackView extends\n    Common.ObjectWrapper.eventMixin<TimelineStackView.EventTypes, typeof UI.Widget.VBox>(UI.Widget.VBox) {\n  private readonly treeView: TimelineTreeView;\n  private readonly dataGrid: DataGrid.ViewportDataGrid.ViewportDataGrid<unknown>;\n\n  constructor(treeView: TimelineTreeView) {\n    super();\n    const header = this.element.createChild('div', 'timeline-stack-view-header');\n    header.textContent = i18nString(UIStrings.heaviestStack);\n    this.treeView = treeView;\n    const columns = ([\n      {id: 'total', title: i18nString(UIStrings.totalTime), fixedWidth: true, width: '110px'},\n      {id: 'activity', title: i18nString(UIStrings.activity)},\n    ] as DataGrid.DataGrid.ColumnDescriptor[]);\n    this.dataGrid = new DataGrid.ViewportDataGrid.ViewportDataGrid({\n      displayName: i18nString(UIStrings.timelineStack),\n      columns,\n      deleteCallback: undefined,\n      editCallback: undefined,\n      refreshCallback: undefined,\n    });\n    this.dataGrid.setResizeMethod(DataGrid.DataGrid.ResizeMethod.Last);\n    this.dataGrid.addEventListener(DataGrid.DataGrid.Events.SelectedNode, this.onSelectionChanged, this);\n    this.dataGrid.asWidget().show(this.element);\n  }\n\n  setStack(stack: TimelineModel.TimelineProfileTree.Node[], selectedNode: TimelineModel.TimelineProfileTree.Node):\n      void {\n    const rootNode = this.dataGrid.rootNode();\n    rootNode.removeChildren();\n    let nodeToReveal: GridNode|null = null;\n    const totalTime = Math.max.apply(Math, stack.map(node => node.totalTime));\n    for (const node of stack) {\n      const gridNode = new GridNode(node, totalTime, totalTime, totalTime, this.treeView);\n      rootNode.appendChild(gridNode);\n      if (node === selectedNode) {\n        nodeToReveal = gridNode;\n      }\n    }\n    if (nodeToReveal) {\n      nodeToReveal.revealAndSelect();\n    }\n  }\n\n  selectedTreeNode(): TimelineModel.TimelineProfileTree.Node|null {\n    const selectedNode = this.dataGrid.selectedNode;\n    return selectedNode && (selectedNode as GridNode).profileNode;\n  }\n\n  private onSelectionChanged(): void {\n    this.dispatchEventToListeners(TimelineStackView.Events.SelectionChanged);\n  }\n}\n\nexport namespace TimelineStackView {\n  // TODO(crbug.com/1167717): Make this a const enum again\n  // eslint-disable-next-line rulesdir/const_enum\n  export enum Events {\n    SelectionChanged = 'SelectionChanged',\n  }\n\n  export type EventTypes = {\n    [Events.SelectionChanged]: void,\n  };\n}\n"],
  "mappings": "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",
  "names": []
}
