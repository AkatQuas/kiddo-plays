{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/mobile_throttling/ThrottlingManager.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {MobileThrottlingSelector} from './MobileThrottlingSelector.js';\nimport {NetworkThrottlingSelector} from './NetworkThrottlingSelector.js';\n\nimport type {\n  Conditions, ConditionsList, MobileThrottlingConditionsGroup, NetworkThrottlingConditionsGroup} from\n  './ThrottlingPresets.js';\nimport {ThrottlingPresets} from './ThrottlingPresets.js';\n\nconst UIStrings = {\n  /**\n  *@description Text with two placeholders separated by a colon\n  *@example {Node removed} PH1\n  *@example {div#id1} PH2\n  */\n  sS: '{PH1}: {PH2}',\n  /**\n  *@description Text in Throttling Manager of the Network panel\n  */\n  add: 'Add\u2026',\n  /**\n  *@description Accessibility label for custom add network throttling option\n  *@example {Custom} PH1\n  */\n  addS: 'Add {PH1}',\n  /**\n  *@description Text to indicate the network connectivity is offline\n  */\n  offline: 'Offline',\n  /**\n  *@description Text in Throttling Manager of the Network panel\n  */\n  forceDisconnectedFromNetwork: 'Force disconnected from network',\n  /**\n  *@description Text for throttling the network\n  */\n  throttling: 'Throttling',\n  /**\n  *@description Icon title in Throttling Manager of the Network panel\n  */\n  cpuThrottlingIsEnabled: 'CPU throttling is enabled',\n  /**\n  *@description Screen reader label for a select box that chooses the CPU throttling speed in the Performance panel\n  */\n  cpuThrottling: 'CPU throttling',\n  /**\n  *@description Text for no network throttling\n  */\n  noThrottling: 'No throttling',\n  /**\n  *@description Text in Throttling Manager of the Network panel\n  *@example {2} PH1\n  */\n  dSlowdown: '{PH1}\u00D7 slowdown',\n  /**\n  *@description Tooltip text in Throttling Manager of the Performance panel\n  */\n  excessConcurrency: 'Exceeding the default value may degrade system performance.',\n  /**\n  *@description Tooltip text in Throttling Manager of the Performance panel\n  */\n  resetConcurrency: 'Reset to the default value',\n  /**\n  *@description Screen reader label for an check box that neables overriding navigator.hardwareConcurrency\n  */\n  hardwareConcurrency: 'Hardware concurrency',\n  /**\n  *@description Screen reader label for an input box that overrides navigator.hardwareConcurrency\n  */\n  hardwareConcurrencyValue: 'Value of navigator.hardwareConcurrency',\n  /**\n  *@description Icon title in Throttling Manager of the Performance panel\n  */\n  hardwareConcurrencyIsEnabled: 'Hardware concurrency override is enabled',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/mobile_throttling/ThrottlingManager.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet throttlingManagerInstance: ThrottlingManager;\n\nexport class ThrottlingManager {\n  private readonly cpuThrottlingControls: Set<UI.Toolbar.ToolbarComboBox>;\n  private readonly cpuThrottlingRates: number[];\n  private readonly customNetworkConditionsSetting: Common.Settings.Setting<SDK.NetworkManager.Conditions[]>;\n  private readonly currentNetworkThrottlingConditionsSetting: Common.Settings.Setting<SDK.NetworkManager.Conditions>;\n  private lastNetworkThrottlingConditions!: SDK.NetworkManager.Conditions;\n  private readonly cpuThrottlingManager: SDK.CPUThrottlingManager.CPUThrottlingManager;\n  #hardwareConcurrencyOverrideEnabled = false;\n\n  get hardwareConcurrencyOverrideEnabled(): boolean {\n    return this.#hardwareConcurrencyOverrideEnabled;\n  }\n\n  private constructor() {\n    this.cpuThrottlingManager = SDK.CPUThrottlingManager.CPUThrottlingManager.instance();\n    this.cpuThrottlingControls = new Set();\n    this.cpuThrottlingRates = ThrottlingPresets.cpuThrottlingPresets;\n    this.customNetworkConditionsSetting = Common.Settings.Settings.instance().moduleSetting('customNetworkConditions');\n    this.currentNetworkThrottlingConditionsSetting = Common.Settings.Settings.instance().createSetting(\n        'preferredNetworkCondition', SDK.NetworkManager.NoThrottlingConditions);\n\n    this.currentNetworkThrottlingConditionsSetting.setSerializer(new SDK.NetworkManager.ConditionsSerializer());\n\n    SDK.NetworkManager.MultitargetNetworkManager.instance().addEventListener(\n        SDK.NetworkManager.MultitargetNetworkManager.Events.ConditionsChanged, () => {\n          this.lastNetworkThrottlingConditions = this.currentNetworkThrottlingConditionsSetting.get();\n          this.currentNetworkThrottlingConditionsSetting.set(\n              SDK.NetworkManager.MultitargetNetworkManager.instance().networkConditions());\n        });\n\n    if (this.isDirty()) {\n      SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(\n          this.currentNetworkThrottlingConditionsSetting.get());\n    }\n  }\n\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): ThrottlingManager {\n    const {forceNew} = opts;\n    if (!throttlingManagerInstance || forceNew) {\n      throttlingManagerInstance = new ThrottlingManager();\n    }\n\n    return throttlingManagerInstance;\n  }\n\n  decorateSelectWithNetworkThrottling(selectElement: HTMLSelectElement): NetworkThrottlingSelector {\n    let options: (SDK.NetworkManager.Conditions|null)[] = [];\n    const selector = new NetworkThrottlingSelector(populate, select, this.customNetworkConditionsSetting);\n    selectElement.addEventListener('change', optionSelected, false);\n    return selector;\n\n    function populate(groups: NetworkThrottlingConditionsGroup[]): (SDK.NetworkManager.Conditions|null)[] {\n      selectElement.removeChildren();\n      options = [];\n      for (let i = 0; i < groups.length; ++i) {\n        const group = groups[i];\n        const groupElement = selectElement.createChild('optgroup') as HTMLOptGroupElement;\n        groupElement.label = group.title;\n        for (const conditions of group.items) {\n          // The title is usually an i18nLazyString except for custom values that are stored in the local storage in the form of a string.\n          const title = typeof conditions.title === 'function' ? conditions.title() : conditions.title;\n          const option = new Option(title, title);\n          UI.ARIAUtils.setAccessibleName(option, i18nString(UIStrings.sS, {PH1: group.title, PH2: title}));\n          groupElement.appendChild(option);\n          options.push(conditions);\n        }\n        if (i === groups.length - 1) {\n          const option = new Option(i18nString(UIStrings.add), i18nString(UIStrings.add));\n          UI.ARIAUtils.setAccessibleName(option, i18nString(UIStrings.addS, {PH1: group.title}));\n          groupElement.appendChild(option);\n          options.push(null);\n        }\n      }\n      return options;\n    }\n\n    function optionSelected(): void {\n      if (selectElement.selectedIndex === selectElement.options.length - 1) {\n        selector.revealAndUpdate();\n      } else {\n        const option = options[selectElement.selectedIndex];\n        if (option) {\n          selector.optionSelected(option);\n        }\n      }\n    }\n\n    function select(index: number): void {\n      if (selectElement.selectedIndex !== index) {\n        selectElement.selectedIndex = index;\n      }\n    }\n  }\n\n  createOfflineToolbarCheckbox(): UI.Toolbar.ToolbarCheckbox {\n    const checkbox = new UI.Toolbar.ToolbarCheckbox(\n        i18nString(UIStrings.offline), i18nString(UIStrings.forceDisconnectedFromNetwork), forceOffline.bind(this));\n    SDK.NetworkManager.MultitargetNetworkManager.instance().addEventListener(\n        SDK.NetworkManager.MultitargetNetworkManager.Events.ConditionsChanged, networkConditionsChanged);\n    checkbox.setChecked(\n        SDK.NetworkManager.MultitargetNetworkManager.instance().networkConditions() ===\n        SDK.NetworkManager.OfflineConditions);\n\n    function forceOffline(this: ThrottlingManager): void {\n      if (checkbox.checked()) {\n        SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(\n            SDK.NetworkManager.OfflineConditions);\n      } else {\n        SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(\n            this.lastNetworkThrottlingConditions);\n      }\n    }\n\n    function networkConditionsChanged(): void {\n      checkbox.setChecked(\n          SDK.NetworkManager.MultitargetNetworkManager.instance().networkConditions() ===\n          SDK.NetworkManager.OfflineConditions);\n    }\n\n    return checkbox;\n  }\n\n  createMobileThrottlingButton(): UI.Toolbar.ToolbarMenuButton {\n    const button = new UI.Toolbar.ToolbarMenuButton(appendItems);\n    button.setTitle(i18nString(UIStrings.throttling));\n    button.setGlyph('');\n    button.turnIntoSelect();\n    button.setDarkText();\n\n    let options: ConditionsList = [];\n    let selectedIndex = -1;\n    const selector = new MobileThrottlingSelector(populate, select);\n    return button;\n\n    function appendItems(contextMenu: UI.ContextMenu.ContextMenu): void {\n      for (let index = 0; index < options.length; ++index) {\n        const conditions = options[index];\n        if (!conditions) {\n          continue;\n        }\n        if (conditions.title === ThrottlingPresets.getCustomConditions().title &&\n            conditions.description === ThrottlingPresets.getCustomConditions().description) {\n          continue;\n        }\n        contextMenu.defaultSection().appendCheckboxItem(\n            conditions.title, selector.optionSelected.bind(selector, conditions as Conditions),\n            selectedIndex === index);\n      }\n    }\n\n    function populate(groups: MobileThrottlingConditionsGroup[]): ConditionsList {\n      options = [];\n      for (const group of groups) {\n        for (const conditions of group.items) {\n          options.push(conditions);\n        }\n        options.push(null);\n      }\n      return options;\n    }\n\n    function select(index: number): void {\n      selectedIndex = index;\n      const option = options[index];\n      if (option) {\n        button.setText(option.title);\n        button.setTitle(option.description);\n      }\n    }\n  }\n\n  private updatePanelIcon(): void {\n    const cpuRate = this.cpuThrottlingManager.cpuThrottlingRate();\n\n    if (cpuRate === SDK.CPUThrottlingManager.CPUThrottlingRates.NoThrottling &&\n        !this.hardwareConcurrencyOverrideEnabled) {\n      UI.InspectorView.InspectorView.instance().setPanelIcon('timeline', null);\n      return;\n    }\n    const icon = UI.Icon.Icon.create('smallicon-warning');\n    const tooltips: string[] = [];\n    if (cpuRate !== SDK.CPUThrottlingManager.CPUThrottlingRates.NoThrottling) {\n      tooltips.push(i18nString(UIStrings.cpuThrottlingIsEnabled));\n    }\n    if (this.hardwareConcurrencyOverrideEnabled) {\n      tooltips.push(i18nString(UIStrings.hardwareConcurrencyIsEnabled));\n    }\n    icon.title = tooltips.join('\\n');\n    UI.InspectorView.InspectorView.instance().setPanelIcon('timeline', icon);\n  }\n\n  setCPUThrottlingRate(rate: number): void {\n    this.cpuThrottlingManager.setCPUThrottlingRate(rate);\n    if (rate !== SDK.CPUThrottlingManager.CPUThrottlingRates.NoThrottling) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.CpuThrottlingEnabled);\n    }\n    const index = this.cpuThrottlingRates.indexOf(rate);\n    for (const control of this.cpuThrottlingControls) {\n      control.setSelectedIndex(index);\n    }\n    this.updatePanelIcon();\n  }\n\n  createCPUThrottlingSelector(): UI.Toolbar.ToolbarComboBox {\n    const control = new UI.Toolbar.ToolbarComboBox(\n        event => this.setCPUThrottlingRate(this.cpuThrottlingRates[(event.target as HTMLSelectElement).selectedIndex]),\n        i18nString(UIStrings.cpuThrottling));\n    this.cpuThrottlingControls.add(control);\n    const currentRate = this.cpuThrottlingManager.cpuThrottlingRate();\n\n    for (let i = 0; i < this.cpuThrottlingRates.length; ++i) {\n      const rate = this.cpuThrottlingRates[i];\n      const title = rate === 1 ? i18nString(UIStrings.noThrottling) : i18nString(UIStrings.dSlowdown, {PH1: rate});\n      const option = control.createOption(title);\n      control.addOption(option);\n      if (currentRate === rate) {\n        control.setSelectedIndex(i);\n      }\n    }\n    return control;\n  }\n\n  createHardwareConcurrencySelector(): {\n    input: UI.Toolbar.ToolbarItem,\n    reset: UI.Toolbar.ToolbarButton,\n    warning: UI.Toolbar.ToolbarItem,\n    toggle: UI.Toolbar.ToolbarItem,\n  } {\n    const input = new UI.Toolbar.ToolbarItem(UI.UIUtils.createInput('devtools-text-input', 'number'));\n    input.setTitle(i18nString(UIStrings.hardwareConcurrencyValue));\n    const inputElement = input.element as HTMLInputElement;\n    inputElement.min = '1';\n    input.setEnabled(false);\n\n    const toggle = new UI.Toolbar.ToolbarCheckbox(i18nString(UIStrings.hardwareConcurrency));\n    const reset = new UI.Toolbar.ToolbarButton('Reset concurrency', 'largeicon-undo');\n    reset.setTitle(i18nString(UIStrings.resetConcurrency));\n    const warning = new UI.Toolbar.ToolbarItem(UI.Icon.Icon.create('smallicon-warning'));\n    warning.setTitle(i18nString(UIStrings.excessConcurrency));\n\n    toggle.inputElement.disabled = true;  // Prevent modification while still wiring things up asynchronously below\n    reset.element.classList.add('timeline-concurrency-hidden');\n    warning.element.classList.add('timeline-concurrency-hidden');\n\n    void this.cpuThrottlingManager.getHardwareConcurrency().then(defaultValue => {\n      if (defaultValue === undefined) {\n        return;\n      }\n\n      const setHardwareConcurrency = (value: number): void => {\n        if (value >= 1) {\n          this.cpuThrottlingManager.setHardwareConcurrency(value);\n        }\n        if (value > defaultValue) {\n          warning.element.classList.remove('timeline-concurrency-hidden');\n        } else {\n          warning.element.classList.add('timeline-concurrency-hidden');\n        }\n        if (value === defaultValue) {\n          reset.element.classList.add('timeline-concurrency-hidden');\n        } else {\n          reset.element.classList.remove('timeline-concurrency-hidden');\n        }\n      };\n\n      inputElement.value = `${defaultValue}`;\n      inputElement.oninput = (): void => setHardwareConcurrency(Number(inputElement.value));\n      toggle.inputElement.disabled = false;\n      toggle.inputElement.addEventListener('change', () => {\n        this.#hardwareConcurrencyOverrideEnabled = toggle.checked();\n        this.updatePanelIcon();\n\n        input.setEnabled(this.hardwareConcurrencyOverrideEnabled);\n        setHardwareConcurrency(this.hardwareConcurrencyOverrideEnabled ? Number(inputElement.value) : defaultValue);\n      });\n\n      reset.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, () => {\n        inputElement.value = `${defaultValue}`;\n        setHardwareConcurrency(defaultValue);\n      });\n    });\n\n    return {input, reset, warning, toggle};\n  }\n\n  setHardwareConcurrency(concurrency: number): void {\n    this.cpuThrottlingManager.setHardwareConcurrency(concurrency);\n  }\n\n  private isDirty(): boolean {\n    const networkConditions = SDK.NetworkManager.MultitargetNetworkManager.instance().networkConditions();\n    const knownCurrentConditions = this.currentNetworkThrottlingConditionsSetting.get();\n    return !SDK.NetworkManager.networkConditionsEqual(networkConditions, knownCurrentConditions);\n  }\n}\n\nlet actionDelegateInstance: ActionDelegate;\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): ActionDelegate {\n    const {forceNew} = opts;\n    if (!actionDelegateInstance || forceNew) {\n      actionDelegateInstance = new ActionDelegate();\n    }\n    return actionDelegateInstance;\n  }\n\n  handleAction(context: UI.Context.Context, actionId: string): boolean {\n    if (actionId === 'network-conditions.network-online') {\n      SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(\n          SDK.NetworkManager.NoThrottlingConditions);\n      return true;\n    }\n    if (actionId === 'network-conditions.network-low-end-mobile') {\n      SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(SDK.NetworkManager.Slow3GConditions);\n      return true;\n    }\n    if (actionId === 'network-conditions.network-mid-tier-mobile') {\n      SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(SDK.NetworkManager.Fast3GConditions);\n      return true;\n    }\n    if (actionId === 'network-conditions.network-offline') {\n      SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(\n          SDK.NetworkManager.OfflineConditions);\n      return true;\n    }\n    return false;\n  }\n}\n\nexport function throttlingManager(): ThrottlingManager {\n  return ThrottlingManager.instance();\n}\n"],
  "mappings": "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",
  "names": []
}
