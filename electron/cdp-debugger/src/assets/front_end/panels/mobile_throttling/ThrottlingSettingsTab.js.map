{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/mobile_throttling/ThrottlingSettingsTab.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\n\nimport throttlingSettingsTabStyles from './throttlingSettingsTab.css.js';\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Throttling Settings Tab of the Network panel\n  */\n  networkThrottlingProfiles: 'Network Throttling Profiles',\n  /**\n  *@description Text of add conditions button in Throttling Settings Tab of the Network panel\n  */\n  addCustomProfile: 'Add custom profile...',\n  /**\n  *@description A value in milliseconds\n  *@example {3} PH1\n  */\n  dms: '{PH1} `ms`',\n  /**\n  *@description Text in Throttling Settings Tab of the Network panel\n  */\n  profileName: 'Profile Name',\n  /**\n  * @description Label for a textbox that sets the download speed in the Throttling Settings Tab.\n  * Noun, short for 'download speed'.\n  */\n  download: 'Download',\n  /**\n  * @description Label for a textbox that sets the upload speed in the Throttling Settings Tab.\n  * Noun, short for 'upload speed'.\n  */\n  upload: 'Upload',\n  /**\n  * @description Label for a textbox that sets the latency in the Throttling Settings Tab.\n  */\n  latency: 'Latency',\n  /**\n  *@description Text in Throttling Settings Tab of the Network panel\n  */\n  optional: 'optional',\n  /**\n  *@description Error message for Profile Name input in Throtting pane of the Settings\n  *@example {49} PH1\n  */\n  profileNameCharactersLengthMust: 'Profile Name characters length must be between 1 to {PH1} inclusive',\n  /**\n  *@description Error message for Download and Upload inputs in Throttling pane of the Settings\n  *@example {Download} PH1\n  *@example {0} PH2\n  *@example {10000000} PH3\n  */\n  sMustBeANumberBetweenSkbsToSkbs: '{PH1} must be a number between {PH2} `kbit/s` to {PH3} `kbit/s` inclusive',\n  /**\n  *@description Error message for Latency input in Throttling pane of the Settings\n  *@example {0} PH1\n  *@example {1000000} PH2\n  */\n  latencyMustBeAnIntegerBetweenSms: 'Latency must be an integer between {PH1} `ms` to {PH2} `ms` inclusive',\n  /**\n  * @description Text in Throttling Settings Tab of the Network panel, indicating the download or\n  * upload speed that will be applied in kilobits per second.\n  * @example {25} PH1\n  */\n  dskbits: '{PH1} `kbit/s`',\n  /**\n  * @description Text in Throttling Settings Tab of the Network panel, indicating the download or\n  * upload speed that will be applied in megabits per second.\n  * @example {25.4} PH1\n  */\n  fsmbits: '{PH1} `Mbit/s`',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/mobile_throttling/ThrottlingSettingsTab.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet throttlingSettingsTabInstance: ThrottlingSettingsTab;\n\nexport class ThrottlingSettingsTab extends UI.Widget.VBox implements\n    UI.ListWidget.Delegate<SDK.NetworkManager.Conditions> {\n  private readonly list: UI.ListWidget.ListWidget<SDK.NetworkManager.Conditions>;\n  private readonly customSetting: Common.Settings.Setting<SDK.NetworkManager.Conditions[]>;\n  private editor?: UI.ListWidget.Editor<SDK.NetworkManager.Conditions>;\n  constructor() {\n    super(true);\n\n    const header = this.contentElement.createChild('div', 'header');\n    header.textContent = i18nString(UIStrings.networkThrottlingProfiles);\n    UI.ARIAUtils.markAsHeading(header, 1);\n\n    const addButton = UI.UIUtils.createTextButton(\n        i18nString(UIStrings.addCustomProfile), this.addButtonClicked.bind(this), 'add-conditions-button');\n    this.contentElement.appendChild(addButton);\n\n    this.list = new UI.ListWidget.ListWidget(this);\n    this.list.element.classList.add('conditions-list');\n\n    this.list.show(this.contentElement);\n\n    this.customSetting = Common.Settings.Settings.instance().moduleSetting('customNetworkConditions');\n    this.customSetting.addChangeListener(this.conditionsUpdated, this);\n\n    this.setDefaultFocusedElement(addButton);\n  }\n\n  static instance(opts = {forceNew: null}): ThrottlingSettingsTab {\n    const {forceNew} = opts;\n    if (!throttlingSettingsTabInstance || forceNew) {\n      throttlingSettingsTabInstance = new ThrottlingSettingsTab();\n    }\n\n    return throttlingSettingsTabInstance;\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    this.list.registerCSSFiles([throttlingSettingsTabStyles]);\n    this.registerCSSFiles([throttlingSettingsTabStyles]);\n    this.conditionsUpdated();\n  }\n\n  private conditionsUpdated(): void {\n    this.list.clear();\n\n    const conditions = this.customSetting.get();\n    for (let i = 0; i < conditions.length; ++i) {\n      this.list.appendItem(conditions[i], true);\n    }\n\n    this.list.appendSeparator();\n  }\n\n  private addButtonClicked(): void {\n    this.list.addNewItem(this.customSetting.get().length, {title: () => '', download: -1, upload: -1, latency: 0});\n  }\n\n  renderItem(conditions: SDK.NetworkManager.Conditions, _editable: boolean): Element {\n    const element = document.createElement('div');\n    element.classList.add('conditions-list-item');\n    const title = element.createChild('div', 'conditions-list-text conditions-list-title');\n    const titleText = title.createChild('div', 'conditions-list-title-text');\n    const castedTitle = this.retrieveOptionsTitle(conditions);\n    titleText.textContent = castedTitle;\n    UI.Tooltip.Tooltip.install(titleText, castedTitle);\n    element.createChild('div', 'conditions-list-separator');\n    element.createChild('div', 'conditions-list-text').textContent = throughputText(conditions.download);\n    element.createChild('div', 'conditions-list-separator');\n    element.createChild('div', 'conditions-list-text').textContent = throughputText(conditions.upload);\n    element.createChild('div', 'conditions-list-separator');\n    element.createChild('div', 'conditions-list-text').textContent =\n        i18nString(UIStrings.dms, {PH1: conditions.latency});\n    return element;\n  }\n\n  removeItemRequested(_item: SDK.NetworkManager.Conditions, index: number): void {\n    const list = this.customSetting.get();\n    list.splice(index, 1);\n    this.customSetting.set(list);\n  }\n\n  retrieveOptionsTitle(conditions: SDK.NetworkManager.Conditions): string {\n    // The title is usually an i18nLazyString except for custom values that are stored in the local storage in the form of a string.\n    const castedTitle = typeof conditions.title === 'function' ? conditions.title() : conditions.title;\n    return castedTitle;\n  }\n\n  commitEdit(\n      conditions: SDK.NetworkManager.Conditions, editor: UI.ListWidget.Editor<SDK.NetworkManager.Conditions>,\n      isNew: boolean): void {\n    conditions.title = editor.control('title').value.trim();\n    const download = editor.control('download').value.trim();\n    conditions.download = download ? parseInt(download, 10) * (1000 / 8) : -1;\n    const upload = editor.control('upload').value.trim();\n    conditions.upload = upload ? parseInt(upload, 10) * (1000 / 8) : -1;\n    const latency = editor.control('latency').value.trim();\n    conditions.latency = latency ? parseInt(latency, 10) : 0;\n\n    const list = this.customSetting.get();\n    if (isNew) {\n      list.push(conditions);\n    }\n\n    this.customSetting.set(list);\n  }\n\n  beginEdit(conditions: SDK.NetworkManager.Conditions): UI.ListWidget.Editor<SDK.NetworkManager.Conditions> {\n    const editor = this.createEditor();\n    editor.control('title').value = this.retrieveOptionsTitle(conditions);\n    editor.control('download').value = conditions.download <= 0 ? '' : String(conditions.download / (1000 / 8));\n    editor.control('upload').value = conditions.upload <= 0 ? '' : String(conditions.upload / (1000 / 8));\n    editor.control('latency').value = conditions.latency ? String(conditions.latency) : '';\n    return editor;\n  }\n\n  private createEditor(): UI.ListWidget.Editor<SDK.NetworkManager.Conditions> {\n    if (this.editor) {\n      return this.editor;\n    }\n\n    const editor = new UI.ListWidget.Editor<SDK.NetworkManager.Conditions>();\n    this.editor = editor;\n    const content = editor.contentElement();\n\n    const titles = content.createChild('div', 'conditions-edit-row');\n    const nameLabel = titles.createChild('div', 'conditions-list-text conditions-list-title');\n    const nameStr = i18nString(UIStrings.profileName);\n    const nameLabelText = nameLabel.createChild('div', 'conditions-list-title-text');\n    nameLabelText.textContent = nameStr;\n    titles.createChild('div', 'conditions-list-separator conditions-list-separator-invisible');\n    const downloadLabel = titles.createChild('div', 'conditions-list-text');\n    const downloadStr = i18nString(UIStrings.download);\n    const downloadLabelText = downloadLabel.createChild('div', 'conditions-list-title-text');\n    downloadLabelText.textContent = downloadStr;\n    titles.createChild('div', 'conditions-list-separator conditions-list-separator-invisible');\n    const uploadLabel = titles.createChild('div', 'conditions-list-text');\n    const uploadLabelText = uploadLabel.createChild('div', 'conditions-list-title-text');\n    const uploadStr = i18nString(UIStrings.upload);\n    uploadLabelText.textContent = uploadStr;\n    titles.createChild('div', 'conditions-list-separator conditions-list-separator-invisible');\n    const latencyLabel = titles.createChild('div', 'conditions-list-text');\n    const latencyStr = i18nString(UIStrings.latency);\n    const latencyLabelText = latencyLabel.createChild('div', 'conditions-list-title-text');\n    latencyLabelText.textContent = latencyStr;\n\n    const fields = content.createChild('div', 'conditions-edit-row');\n    const nameInput = editor.createInput('title', 'text', '', titleValidator);\n    UI.ARIAUtils.setAccessibleName(nameInput, nameStr);\n    fields.createChild('div', 'conditions-list-text conditions-list-title').appendChild(nameInput);\n    fields.createChild('div', 'conditions-list-separator conditions-list-separator-invisible');\n\n    let cell = fields.createChild('div', 'conditions-list-text');\n    const downloadInput = editor.createInput('download', 'text', i18n.i18n.lockedString('kbit/s'), throughputValidator);\n    cell.appendChild(downloadInput);\n    UI.ARIAUtils.setAccessibleName(downloadInput, downloadStr);\n    const downloadOptional = cell.createChild('div', 'conditions-edit-optional');\n    const optionalStr = i18nString(UIStrings.optional);\n    downloadOptional.textContent = optionalStr;\n    UI.ARIAUtils.setDescription(downloadInput, optionalStr);\n    fields.createChild('div', 'conditions-list-separator conditions-list-separator-invisible');\n\n    cell = fields.createChild('div', 'conditions-list-text');\n    const uploadInput = editor.createInput('upload', 'text', i18n.i18n.lockedString('kbit/s'), throughputValidator);\n    UI.ARIAUtils.setAccessibleName(uploadInput, uploadStr);\n    cell.appendChild(uploadInput);\n    const uploadOptional = cell.createChild('div', 'conditions-edit-optional');\n    uploadOptional.textContent = optionalStr;\n    UI.ARIAUtils.setDescription(uploadInput, optionalStr);\n    fields.createChild('div', 'conditions-list-separator conditions-list-separator-invisible');\n\n    cell = fields.createChild('div', 'conditions-list-text');\n    const latencyInput = editor.createInput('latency', 'text', i18n.i18n.lockedString('ms'), latencyValidator);\n    UI.ARIAUtils.setAccessibleName(latencyInput, latencyStr);\n    cell.appendChild(latencyInput);\n    const latencyOptional = cell.createChild('div', 'conditions-edit-optional');\n    latencyOptional.textContent = optionalStr;\n    UI.ARIAUtils.setDescription(latencyInput, optionalStr);\n\n    return editor;\n\n    function titleValidator(_item: SDK.NetworkManager.Conditions, _index: number, input: UI.ListWidget.EditorControl):\n        UI.ListWidget.ValidatorResult {\n      const maxLength = 49;\n      const value = input.value.trim();\n      const valid = value.length > 0 && value.length <= maxLength;\n      if (!valid) {\n        const errorMessage = i18nString(UIStrings.profileNameCharactersLengthMust, {PH1: maxLength});\n        return {valid, errorMessage};\n      }\n      return {valid, errorMessage: undefined};\n    }\n\n    function throughputValidator(\n        _item: SDK.NetworkManager.Conditions, _index: number,\n        input: UI.ListWidget.EditorControl): UI.ListWidget.ValidatorResult {\n      const minThroughput = 0;\n      const maxThroughput = 10000000;\n      const value = input.value.trim();\n      const parsedValue = Number(value);\n      const throughput = input.getAttribute('aria-label');\n      const valid = !Number.isNaN(parsedValue) && parsedValue >= minThroughput && parsedValue <= maxThroughput;\n      if (!valid) {\n        const errorMessage = i18nString(\n            UIStrings.sMustBeANumberBetweenSkbsToSkbs,\n            {PH1: String(throughput), PH2: minThroughput, PH3: maxThroughput});\n        return {valid, errorMessage};\n      }\n      return {valid, errorMessage: undefined};\n    }\n\n    function latencyValidator(_item: SDK.NetworkManager.Conditions, _index: number, input: UI.ListWidget.EditorControl):\n        UI.ListWidget.ValidatorResult {\n      const minLatency = 0;\n      const maxLatency = 1000000;\n      const value = input.value.trim();\n      const parsedValue = Number(value);\n      const valid = Number.isInteger(parsedValue) && parsedValue >= minLatency && parsedValue <= maxLatency;\n      if (!valid) {\n        const errorMessage = i18nString(UIStrings.latencyMustBeAnIntegerBetweenSms, {PH1: minLatency, PH2: maxLatency});\n        return {valid, errorMessage};\n      }\n      return {valid, errorMessage: undefined};\n    }\n  }\n}\n\nfunction throughputText(throughput: number): string {\n  if (throughput < 0) {\n    return '';\n  }\n  const throughputInKbps = throughput / (1000 / 8);\n  if (throughputInKbps < 1000) {\n    return i18nString(UIStrings.dskbits, {PH1: throughputInKbps});\n  }\n  if (throughputInKbps < 1000 * 10) {\n    const formattedResult = (throughputInKbps / 1000).toFixed(1);\n    return i18nString(UIStrings.fsmbits, {PH1: formattedResult});\n  }\n  // TODO(petermarshall): Figure out if there is a difference we need to tell i18n about\n  // for these two versions: one with decimal places and one without.\n  return i18nString(UIStrings.fsmbits, {PH1: (throughputInKbps / 1000) | 0});\n}\n"],
  "mappings": "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",
  "names": []
}
