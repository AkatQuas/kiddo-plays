{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/mobile_throttling/MobileThrottlingSelector.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\n\nimport {throttlingManager} from './ThrottlingManager.js';\n\nimport type {Conditions, ConditionsList, MobileThrottlingConditionsGroup} from './ThrottlingPresets.js';\nimport {ThrottlingPresets} from './ThrottlingPresets.js';\n\nconst UIStrings = {\n  /**\n  *@description Mobile throttling is disabled. The user can select this option to run mobile\n  *emulation at a normal speed instead of throttled.\n  */\n  disabled: 'Disabled',\n  /**\n  *@description Title for a group of pre-decided configuration options for mobile throttling. These\n  *are useful default options that users might want.\n  */\n  presets: 'Presets',\n  /**\n  *@description Title for a group of advanced configuration options for mobile throttling, which\n  *might not be applicable to every user or situation.\n  */\n  advanced: 'Advanced',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/mobile_throttling/MobileThrottlingSelector.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class MobileThrottlingSelector {\n  private readonly populateCallback: (arg0: Array<MobileThrottlingConditionsGroup>) => ConditionsList;\n  private readonly selectCallback: (arg0: number) => void;\n  private readonly options: ConditionsList;\n\n  constructor(\n      populateCallback: (arg0: Array<MobileThrottlingConditionsGroup>) => ConditionsList,\n      selectCallback: (arg0: number) => void) {\n    this.populateCallback = populateCallback;\n    this.selectCallback = selectCallback;\n    SDK.CPUThrottlingManager.CPUThrottlingManager.instance().addEventListener(\n        SDK.CPUThrottlingManager.Events.RateChanged, this.conditionsChanged, this);\n    SDK.NetworkManager.MultitargetNetworkManager.instance().addEventListener(\n        SDK.NetworkManager.MultitargetNetworkManager.Events.ConditionsChanged, this.conditionsChanged, this);\n    this.options = this.populateOptions();\n    this.conditionsChanged();\n  }\n\n  optionSelected(conditions: Conditions): void {\n    SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(conditions.network);\n    throttlingManager().setCPUThrottlingRate(conditions.cpuThrottlingRate);\n  }\n\n  private populateOptions(): ConditionsList {\n    const disabledGroup = {\n      title: i18nString(UIStrings.disabled),\n      items: [ThrottlingPresets.getNoThrottlingConditions()],\n    };\n    const presetsGroup = {title: i18nString(UIStrings.presets), items: ThrottlingPresets.getMobilePresets()};\n    const advancedGroup = {title: i18nString(UIStrings.advanced), items: ThrottlingPresets.getAdvancedMobilePresets()};\n    return this.populateCallback([disabledGroup, presetsGroup, advancedGroup]);\n  }\n\n  private conditionsChanged(): void {\n    const networkConditions = SDK.NetworkManager.MultitargetNetworkManager.instance().networkConditions();\n    const cpuThrottlingRate = SDK.CPUThrottlingManager.CPUThrottlingManager.instance().cpuThrottlingRate();\n    for (let index = 0; index < this.options.length; ++index) {\n      const option = this.options[index];\n      if (option && 'network' in option && option.network === networkConditions &&\n          option.cpuThrottlingRate === cpuThrottlingRate) {\n        this.selectCallback(index);\n        return;\n      }\n    }\n\n    const customConditions = ThrottlingPresets.getCustomConditions();\n    for (let index = 0; index < this.options.length; ++index) {\n      const item = this.options[index];\n      if (item && item.title === customConditions.title && item.description === customConditions.description) {\n        this.selectCallback(index);\n        return;\n      }\n    }\n  }\n}\n"],
  "mappings": "AAIA;AACA;AAEA;AAGA;AAEA,MAAM,YAAY;AAAA,EAKhB,UAAU;AAAA,EAKV,SAAS;AAAA,EAKT,UAAU;AAAA;AAEZ,MAAM,OAAO,KAAK,KAAK,kBAAkB,wDAAwD;AACjG,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAEzD,sCAA+B;AAAA,EACnB;AAAA,EACA;AAAA,EACA;AAAA,EAEjB,YACI,kBACA,gBAAwC;AAC1C,SAAK,mBAAmB;AACxB,SAAK,iBAAiB;AACtB,QAAI,qBAAqB,qBAAqB,WAAW,iBACrD,IAAI,qBAAqB,OAAO,aAAa,KAAK,mBAAmB;AACzE,QAAI,eAAe,0BAA0B,WAAW,iBACpD,IAAI,eAAe,0BAA0B,OAAO,mBAAmB,KAAK,mBAAmB;AACnG,SAAK,UAAU,KAAK;AACpB,SAAK;AAAA;AAAA,EAGP,eAAe,YAA8B;AAC3C,QAAI,eAAe,0BAA0B,WAAW,qBAAqB,WAAW;AACxF,wBAAoB,qBAAqB,WAAW;AAAA;AAAA,EAG9C,kBAAkC;AACxC,UAAM,gBAAgB;AAAA,MACpB,OAAO,WAAW,UAAU;AAAA,MAC5B,OAAO,CAAC,kBAAkB;AAAA;AAE5B,UAAM,eAAe,EAAC,OAAO,WAAW,UAAU,UAAU,OAAO,kBAAkB;AACrF,UAAM,gBAAgB,EAAC,OAAO,WAAW,UAAU,WAAW,OAAO,kBAAkB;AACvF,WAAO,KAAK,iBAAiB,CAAC,eAAe,cAAc;AAAA;AAAA,EAGrD,oBAA0B;AAChC,UAAM,oBAAoB,IAAI,eAAe,0BAA0B,WAAW;AAClF,UAAM,oBAAoB,IAAI,qBAAqB,qBAAqB,WAAW;AACnF,aAAS,QAAQ,GAAG,QAAQ,KAAK,QAAQ,QAAQ,EAAE,OAAO;AACxD,YAAM,SAAS,KAAK,QAAQ;AAC5B,UAAI,UAAU,aAAa,UAAU,OAAO,YAAY,qBACpD,OAAO,sBAAsB,mBAAmB;AAClD,aAAK,eAAe;AACpB;AAAA;AAAA;AAIJ,UAAM,mBAAmB,kBAAkB;AAC3C,aAAS,QAAQ,GAAG,QAAQ,KAAK,QAAQ,QAAQ,EAAE,OAAO;AACxD,YAAM,OAAO,KAAK,QAAQ;AAC1B,UAAI,QAAQ,KAAK,UAAU,iBAAiB,SAAS,KAAK,gBAAgB,iBAAiB,aAAa;AACtG,aAAK,eAAe;AACpB;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
