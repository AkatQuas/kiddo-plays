{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/mobile_throttling/NetworkThrottlingSelector.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\n\nimport type {NetworkThrottlingConditionsGroup} from './ThrottlingPresets.js';\nimport {ThrottlingPresets} from './ThrottlingPresets.js';\n\nconst UIStrings = {\n  /**\n  *@description Text to indicate something is not enabled\n  */\n  disabled: 'Disabled',\n  /**\n  *@description Title for a group of configuration options\n  */\n  presets: 'Presets',\n  /**\n  *@description Text in Network Throttling Selector of the Network panel\n  */\n  custom: 'Custom',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/mobile_throttling/NetworkThrottlingSelector.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class NetworkThrottlingSelector {\n  private populateCallback:\n      (arg0: Array<NetworkThrottlingConditionsGroup>) => Array<SDK.NetworkManager.Conditions|null>;\n  private readonly selectCallback: (arg0: number) => void;\n  private readonly customNetworkConditionsSetting: Common.Settings.Setting<SDK.NetworkManager.Conditions[]>;\n  private options!: (SDK.NetworkManager.Conditions|null)[];\n\n  constructor(\n      populateCallback: (arg0: Array<NetworkThrottlingConditionsGroup>) => Array<SDK.NetworkManager.Conditions|null>,\n      selectCallback: (arg0: number) => void,\n      customNetworkConditionsSetting: Common.Settings.Setting<SDK.NetworkManager.Conditions[]>) {\n    this.populateCallback = populateCallback;\n    this.selectCallback = selectCallback;\n    this.customNetworkConditionsSetting = customNetworkConditionsSetting;\n    this.customNetworkConditionsSetting.addChangeListener(this.populateOptions, this);\n    SDK.NetworkManager.MultitargetNetworkManager.instance().addEventListener(\n        SDK.NetworkManager.MultitargetNetworkManager.Events.ConditionsChanged, () => {\n          this.networkConditionsChanged();\n        }, this);\n    this.populateOptions();\n  }\n\n  revealAndUpdate(): void {\n    void Common.Revealer.reveal(this.customNetworkConditionsSetting);\n    this.networkConditionsChanged();\n  }\n\n  optionSelected(conditions: SDK.NetworkManager.Conditions): void {\n    SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(conditions);\n  }\n\n  private populateOptions(): void {\n    const disabledGroup = {title: i18nString(UIStrings.disabled), items: [SDK.NetworkManager.NoThrottlingConditions]};\n    const presetsGroup = {title: i18nString(UIStrings.presets), items: ThrottlingPresets.networkPresets};\n    const customGroup = {title: i18nString(UIStrings.custom), items: this.customNetworkConditionsSetting.get()};\n    this.options = this.populateCallback([disabledGroup, presetsGroup, customGroup]);\n    if (!this.networkConditionsChanged()) {\n      for (let i = this.options.length - 1; i >= 0; i--) {\n        if (this.options[i]) {\n          this.optionSelected(this.options[i] as SDK.NetworkManager.Conditions);\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * returns false if selected condition no longer exists\n   */\n  private networkConditionsChanged(): boolean {\n    const value = SDK.NetworkManager.MultitargetNetworkManager.instance().networkConditions();\n    for (let index = 0; index < this.options.length; ++index) {\n      const option = this.options[index];\n      if (option && SDK.NetworkManager.networkConditionsEqual(value, option)) {\n        this.selectCallback(index);\n        return true;\n      }\n    }\n    return false;\n  }\n}\n"],
  "mappings": "AAIA;AACA;AACA;AAGA;AAEA,MAAM,YAAY;AAAA,EAIhB,UAAU;AAAA,EAIV,SAAS;AAAA,EAIT,QAAQ;AAAA;AAEV,MAAM,OAAO,KAAK,KAAK,kBAAkB,yDAAyD;AAClG,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AACzD,uCAAgC;AAAA,EAC7B;AAAA,EAES;AAAA,EACA;AAAA,EACT;AAAA,EAER,YACI,kBACA,gBACA,gCAA0F;AAC5F,SAAK,mBAAmB;AACxB,SAAK,iBAAiB;AACtB,SAAK,iCAAiC;AACtC,SAAK,+BAA+B,kBAAkB,KAAK,iBAAiB;AAC5E,QAAI,eAAe,0BAA0B,WAAW,iBACpD,IAAI,eAAe,0BAA0B,OAAO,mBAAmB,MAAM;AAC3E,WAAK;AAAA,OACJ;AACP,SAAK;AAAA;AAAA,EAGP,kBAAwB;AACtB,SAAK,OAAO,SAAS,OAAO,KAAK;AACjC,SAAK;AAAA;AAAA,EAGP,eAAe,YAAiD;AAC9D,QAAI,eAAe,0BAA0B,WAAW,qBAAqB;AAAA;AAAA,EAGvE,kBAAwB;AAC9B,UAAM,gBAAgB,EAAC,OAAO,WAAW,UAAU,WAAW,OAAO,CAAC,IAAI,eAAe;AACzF,UAAM,eAAe,EAAC,OAAO,WAAW,UAAU,UAAU,OAAO,kBAAkB;AACrF,UAAM,cAAc,EAAC,OAAO,WAAW,UAAU,SAAS,OAAO,KAAK,+BAA+B;AACrG,SAAK,UAAU,KAAK,iBAAiB,CAAC,eAAe,cAAc;AACnE,QAAI,CAAC,KAAK,4BAA4B;AACpC,eAAS,IAAI,KAAK,QAAQ,SAAS,GAAG,KAAK,GAAG,KAAK;AACjD,YAAI,KAAK,QAAQ,IAAI;AACnB,eAAK,eAAe,KAAK,QAAQ;AACjC;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,2BAAoC;AAC1C,UAAM,QAAQ,IAAI,eAAe,0BAA0B,WAAW;AACtE,aAAS,QAAQ,GAAG,QAAQ,KAAK,QAAQ,QAAQ,EAAE,OAAO;AACxD,YAAM,SAAS,KAAK,QAAQ;AAC5B,UAAI,UAAU,IAAI,eAAe,uBAAuB,OAAO,SAAS;AACtE,aAAK,eAAe;AACpB,eAAO;AAAA;AAAA;AAGX,WAAO;AAAA;AAAA;",
  "names": []
}
