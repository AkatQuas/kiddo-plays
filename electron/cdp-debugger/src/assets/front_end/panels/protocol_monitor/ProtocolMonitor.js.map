{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/protocol_monitor/ProtocolMonitor.ts"],
  "sourcesContent": ["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as ProtocolClient from '../../core/protocol_client/protocol_client.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as DataGrid from '../../ui/components/data_grid/data_grid.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\nimport * as SourceFrame from '../../ui/legacy/components/source_frame/source_frame.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as LitHtml from '../../ui/lit-html/lit-html.js';\n\nimport protocolMonitorStyles from './protocolMonitor.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Text for one or a group of functions\n  */\n  method: 'Method',\n  /**\n  * @description Text in Protocol Monitor. Title for a table column which shows in which direction\n  * the particular protocol message was travelling. Values in this column will either be 'sent' or\n  * 'received'.\n  */\n  type: 'Type',\n  /**\n  * @description Text in Protocol Monitor of the Protocol Monitor tab. Noun relating to a network request.\n  */\n  request: 'Request',\n  /**\n  *@description Title of a cell content in protocol monitor. A Network response refers to the act of acknowledging a\n  network request. Should not be confused with answer.\n  */\n  response: 'Response',\n  /**\n  *@description Text for timestamps of items\n  */\n  timestamp: 'Timestamp',\n  /**\n  *@description Text in Protocol Monitor of the Protocol Monitor tab\n  */\n  target: 'Target',\n  /**\n  *@description Text to record a series of actions for analysis\n  */\n  record: 'Record',\n  /**\n  *@description Text to clear everything\n  */\n  clearAll: 'Clear all',\n  /**\n  *@description Text to filter result items\n  */\n  filter: 'Filter',\n  /**\n  *@description Text for the documentation of something\n  */\n  documentation: 'Documentation',\n  /**\n  *@description Cell text content in Protocol Monitor of the Protocol Monitor tab\n  *@example {30} PH1\n  */\n  sMs: '{PH1} ms',\n  /**\n  *@description Text in Protocol Monitor of the Protocol Monitor tab\n  */\n  noMessageSelected: 'No message selected',\n  /**\n  *@description Text in Protocol Monitor for the save button\n  */\n  save: 'Save',\n  /**\n  *@description Text in Protocol Monitor to describe the sessions column\n  */\n  session: 'Session',\n  /**\n  *@description A placeholder for an input in Protocol Monitor. The input accepts commands that are sent to the backend on Enter. CDP stands for Chrome DevTools Protocol.\n  */\n  sendRawCDPCommand: 'Send a raw `CDP` command',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/protocol_monitor/ProtocolMonitor.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst timestampRenderer = (value: DataGrid.DataGridUtils.CellValue): LitHtml.TemplateResult => {\n  return LitHtml.html`${i18nString(UIStrings.sMs, {PH1: String(value)})}`;\n};\n\nexport interface Message {\n  id?: number;\n  method: string;\n  error: Object;\n  result: Object;\n  params: Object;\n  sessionId?: string;\n}\n\nexport interface LogMessage {\n  id?: number;\n  domain: string;\n  method: string;\n  params: Object;\n  type: 'send'|'recv';\n}\n\nlet protocolMonitorImplInstance: ProtocolMonitorImpl;\nexport class ProtocolMonitorImpl extends UI.Widget.VBox {\n  private started: boolean;\n  private startTime: number;\n  private readonly dataGridRowForId: Map<number, DataGrid.DataGridUtils.Row>;\n  private readonly infoWidget: InfoWidget;\n  private readonly dataGridIntegrator: DataGrid.DataGridControllerIntegrator.DataGridControllerIntegrator;\n  private readonly filterParser: TextUtils.TextUtils.FilterParser;\n  private readonly suggestionBuilder: UI.FilterSuggestionBuilder.FilterSuggestionBuilder;\n  private readonly textFilterUI: UI.Toolbar.ToolbarInput;\n  private messages: LogMessage[] = [];\n  private isRecording: boolean = false;\n\n  constructor() {\n    super(true);\n    this.started = false;\n    this.startTime = 0;\n    this.dataGridRowForId = new Map();\n    const topToolbar = new UI.Toolbar.Toolbar('protocol-monitor-toolbar', this.contentElement);\n\n    this.contentElement.classList.add('protocol-monitor');\n    const recordButton = new UI.Toolbar.ToolbarToggle(\n        i18nString(UIStrings.record), 'largeicon-start-recording', 'largeicon-stop-recording');\n    recordButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, () => {\n      recordButton.setToggled(!recordButton.toggled());\n      this.setRecording(recordButton.toggled());\n    });\n    recordButton.setToggleWithRedColor(true);\n    topToolbar.appendToolbarItem(recordButton);\n    recordButton.setToggled(true);\n\n    const clearButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.clearAll), 'largeicon-clear');\n    clearButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, () => {\n      this.messages = [];\n      this.dataGridIntegrator.update({...this.dataGridIntegrator.data(), rows: []});\n      this.infoWidget.render(null);\n    });\n    topToolbar.appendToolbarItem(clearButton);\n\n    const saveButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.save), 'largeicon-download');\n    saveButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, () => {\n      void this.saveAsFile();\n    });\n    topToolbar.appendToolbarItem(saveButton);\n\n    const split = new UI.SplitWidget.SplitWidget(true, true, 'protocol-monitor-panel-split', 250);\n    split.show(this.contentElement);\n    this.infoWidget = new InfoWidget();\n\n    const dataGridInitialData: DataGrid.DataGridController.DataGridControllerData = {\n      columns: [\n        {\n          id: 'type',\n          title: i18nString(UIStrings.type),\n          sortable: true,\n          widthWeighting: 1,\n          visible: true,\n          hideable: true,\n          styles: {\n            'text-align': 'center',\n          },\n        },\n        {\n          id: 'method',\n          title: i18nString(UIStrings.method),\n          sortable: false,\n          widthWeighting: 5,\n          visible: true,\n          hideable: false,\n        },\n        {\n          id: 'request',\n          title: i18nString(UIStrings.request),\n          sortable: false,\n          widthWeighting: 5,\n          visible: true,\n          hideable: true,\n        },\n        {\n          id: 'response',\n          title: i18nString(UIStrings.response),\n          sortable: false,\n          widthWeighting: 5,\n          visible: true,\n          hideable: true,\n        },\n        {\n          id: 'timestamp',\n          title: i18nString(UIStrings.timestamp),\n          sortable: true,\n          widthWeighting: 5,\n          visible: false,\n          hideable: true,\n        },\n        {\n          id: 'target',\n          title: i18nString(UIStrings.target),\n          sortable: true,\n          widthWeighting: 5,\n          visible: false,\n          hideable: true,\n        },\n        {\n          id: 'session',\n          title: i18nString(UIStrings.session),\n          sortable: true,\n          widthWeighting: 5,\n          visible: false,\n          hideable: true,\n        },\n      ],\n      rows: [],\n      contextMenus: {\n        bodyRow:\n            (menu: UI.ContextMenu.ContextMenu, columns: readonly DataGrid.DataGridUtils.Column[],\n             row: Readonly<DataGrid.DataGridUtils.Row>): void => {\n              const methodColumn = DataGrid.DataGridUtils.getRowEntryForColumnId(row, 'method');\n              const typeColumn = DataGrid.DataGridUtils.getRowEntryForColumnId(row, 'type');\n\n              /**\n             * You can click the \"Filter\" item in the context menu to filter the\n             * protocol monitor entries to those that match the method of the\n             * current row.\n             */\n              menu.defaultSection().appendItem(i18nString(UIStrings.filter), () => {\n                const methodColumn = DataGrid.DataGridUtils.getRowEntryForColumnId(row, 'method');\n                this.textFilterUI.setValue(`method:${methodColumn.value}`, true);\n              });\n\n              /**\n             * You can click the \"Documentation\" item in the context menu to be\n             * taken to the CDP Documentation site entry for the given method.\n             */\n              menu.defaultSection().appendItem(i18nString(UIStrings.documentation), () => {\n                if (!methodColumn.value) {\n                  return;\n                }\n                const [domain, method] = String(methodColumn.value).split('.');\n                const type = typeColumn.value === 'sent' ? 'method' : 'event';\n                Host.InspectorFrontendHost.InspectorFrontendHostInstance.openInNewTab(\n                    `https://chromedevtools.github.io/devtools-protocol/tot/${domain}#${type}-${method}` as\n                    Platform.DevToolsPath.UrlString);\n              });\n            },\n      },\n    };\n\n    this.dataGridIntegrator =\n        new DataGrid.DataGridControllerIntegrator.DataGridControllerIntegrator(dataGridInitialData);\n\n    this.dataGridIntegrator.dataGrid.addEventListener('cellfocused', event => {\n      const focusedRow = event.data.row;\n      const infoWidgetData = {\n        request: DataGrid.DataGridUtils.getRowEntryForColumnId(focusedRow, 'request'),\n        response: DataGrid.DataGridUtils.getRowEntryForColumnId(focusedRow, 'response'),\n        type:\n            DataGrid.DataGridUtils.getRowEntryForColumnId(focusedRow, 'type').title as 'sent' | 'received' | undefined,\n      };\n      this.infoWidget.render(infoWidgetData);\n    });\n\n    this.dataGridIntegrator.dataGrid.addEventListener('newuserfiltertext', event => {\n      this.textFilterUI.setValue(event.data.filterText, /* notify listeners */ true);\n    });\n    split.setMainWidget(this.dataGridIntegrator);\n    split.setSidebarWidget(this.infoWidget);\n    const keys = ['method', 'request', 'response', 'type', 'target', 'session'];\n    this.filterParser = new TextUtils.TextUtils.FilterParser(keys);\n    this.suggestionBuilder = new UI.FilterSuggestionBuilder.FilterSuggestionBuilder(keys);\n\n    this.textFilterUI = new UI.Toolbar.ToolbarInput(\n        i18nString(UIStrings.filter), '', 1, .2, '', this.suggestionBuilder.completions.bind(this.suggestionBuilder),\n        true);\n    this.textFilterUI.addEventListener(UI.Toolbar.ToolbarInput.Event.TextChanged, event => {\n      const query = event.data as string;\n      const filters = this.filterParser.parse(query);\n      this.dataGridIntegrator.update({...this.dataGridIntegrator.data(), filters});\n    });\n    topToolbar.appendToolbarItem(this.textFilterUI);\n\n    const onSend = (): void => {\n      const value = input.value();\n      // If input cannot be parsed as json, we assume it's the command name\n      // for a command without parameters. Otherwise, we expect an object\n      // with \"command\" and \"parameters\" attributes.\n      let json = null;\n      try {\n        json = JSON.parse(value);\n      } catch (err) {\n      }\n      const command = json ? json.command : value;\n      const parameters = json ? json.parameters : null;\n      const test = ProtocolClient.InspectorBackend.test;\n      // TODO: TS thinks that properties are read-only because\n      // in TS test is defined as a namespace.\n      // @ts-ignore\n      test.sendRawMessage(command, parameters, () => {});\n    };\n    const input = new UI.Toolbar.ToolbarInput(i18nString(UIStrings.sendRawCDPCommand), '', 1, .2, '', undefined, false);\n    input.addEventListener(UI.Toolbar.ToolbarInput.Event.EnterPressed, onSend);\n    const bottomToolbar = new UI.Toolbar.Toolbar('protocol-monitor-bottom-toolbar', this.contentElement);\n    bottomToolbar.appendToolbarItem(input);\n  }\n\n  static instance(opts = {forceNew: null}): ProtocolMonitorImpl {\n    const {forceNew} = opts;\n    if (!protocolMonitorImplInstance || forceNew) {\n      protocolMonitorImplInstance = new ProtocolMonitorImpl();\n    }\n\n    return protocolMonitorImplInstance;\n  }\n\n  wasShown(): void {\n    if (this.started) {\n      return;\n    }\n    this.registerCSSFiles([protocolMonitorStyles]);\n    this.started = true;\n    this.startTime = Date.now();\n    this.setRecording(true);\n  }\n\n  private setRecording(recording: boolean): void {\n    this.isRecording = recording;\n    const test = ProtocolClient.InspectorBackend.test;\n    if (recording) {\n      // TODO: TS thinks that properties are read-only because\n      // in TS test is defined as a namespace.\n      // @ts-ignore\n      test.onMessageSent = this.messageSent.bind(this);\n      // @ts-ignore\n      test.onMessageReceived = this.messageReceived.bind(this);\n    } else {\n      // @ts-ignore\n      test.onMessageSent = null;\n      // @ts-ignore\n      test.onMessageReceived = null;\n    }\n  }\n\n  private targetToString(target: SDK.Target.Target|null): string {\n    if (!target) {\n      return '';\n    }\n    return target.decorateLabel(\n        `${target.name()} ${target === SDK.TargetManager.TargetManager.instance().mainTarget() ? '' : target.id()}`);\n  }\n\n  // eslint-disable\n  private messageReceived(message: Message, target: ProtocolClient.InspectorBackend.TargetBase|null): void {\n    if (this.isRecording) {\n      this.messages.push({...message, type: 'recv', domain: '-'});\n    }\n    if ('id' in message && message.id) {\n      const existingRow = this.dataGridRowForId.get(message.id);\n      if (!existingRow) {\n        return;\n      }\n      const allExistingRows = this.dataGridIntegrator.data().rows;\n      const matchingExistingRowIndex = allExistingRows.findIndex(r => existingRow === r);\n      const newRowWithUpdate = {\n        ...existingRow,\n        cells: existingRow.cells.map(cell => {\n          if (cell.columnId === 'response') {\n            return {\n              ...cell,\n              value: JSON.stringify(message.result || message.error),\n\n            };\n          }\n          return cell;\n        }),\n      };\n\n      const newRowsArray = [...this.dataGridIntegrator.data().rows];\n      newRowsArray[matchingExistingRowIndex] = newRowWithUpdate;\n\n      // Now we've updated the message, it won't be updated again, so we can delete it from the tracking map.\n      this.dataGridRowForId.delete(message.id);\n      this.dataGridIntegrator.update({\n        ...this.dataGridIntegrator.data(),\n        rows: newRowsArray,\n      });\n      return;\n    }\n\n    const sdkTarget = target as SDK.Target.Target | null;\n    const responseIcon = new IconButton.Icon.Icon();\n    responseIcon.data = {iconName: 'ic_response', color: 'var(--color-text-disabled)', width: '16px', height: '16px'};\n    const newRow: DataGrid.DataGridUtils.Row = {\n      cells: [\n        {columnId: 'method', value: message.method, title: message.method},\n        {columnId: 'request', value: '', renderer: DataGrid.DataGridRenderers.codeBlockRenderer},\n        {\n          columnId: 'response',\n          value: JSON.stringify(message.params),\n          renderer: DataGrid.DataGridRenderers.codeBlockRenderer,\n        },\n        {\n          columnId: 'timestamp',\n          value: Date.now() - this.startTime,\n          renderer: timestampRenderer,\n        },\n        {columnId: 'type', value: responseIcon, title: 'received'},\n        {columnId: 'target', value: this.targetToString(sdkTarget)},\n        {columnId: 'session', value: message.sessionId || ''},\n      ],\n      hidden: false,\n    };\n\n    this.dataGridIntegrator.update({\n      ...this.dataGridIntegrator.data(),\n      rows: this.dataGridIntegrator.data().rows.concat([newRow]),\n    });\n  }\n\n  private messageSent(\n      message: {domain: string, method: string, params: Object, id: number, sessionId?: string},\n      target: ProtocolClient.InspectorBackend.TargetBase|null): void {\n    if (this.isRecording) {\n      this.messages.push({...message, type: 'send'});\n    }\n\n    const sdkTarget = target as SDK.Target.Target | null;\n    const requestResponseIcon = new IconButton.Icon.Icon();\n    requestResponseIcon\n        .data = {iconName: 'ic_request_response', color: 'var(--color-primary)', width: '16px', height: '16px'};\n    const newRow: DataGrid.DataGridUtils.Row = {\n      styles: {\n        '--override-data-grid-row-background-color': 'var(--override-data-grid-sent-message-row-background-color)',\n      },\n      cells: [\n        {columnId: 'method', value: message.method, title: message.method},\n        {\n          columnId: 'request',\n          value: JSON.stringify(message.params),\n          renderer: DataGrid.DataGridRenderers.codeBlockRenderer,\n        },\n        {columnId: 'response', value: '(pending)', renderer: DataGrid.DataGridRenderers.codeBlockRenderer},\n        {\n          columnId: 'timestamp',\n          value: Date.now() - this.startTime,\n          renderer: timestampRenderer,\n        },\n        {columnId: 'type', value: requestResponseIcon, title: 'sent'},\n        {columnId: 'target', value: this.targetToString(sdkTarget)},\n        {columnId: 'session', value: message.sessionId || ''},\n      ],\n      hidden: false,\n    };\n    this.dataGridRowForId.set(message.id, newRow);\n    this.dataGridIntegrator.update({\n      ...this.dataGridIntegrator.data(),\n      rows: this.dataGridIntegrator.data().rows.concat([newRow]),\n    });\n  }\n\n  private async saveAsFile(): Promise<void> {\n    const now = new Date();\n    const fileName = 'ProtocolMonitor-' + Platform.DateUtilities.toISO8601Compact(now) + '.json' as\n        Platform.DevToolsPath.RawPathString;\n    const stream = new Bindings.FileUtils.FileOutputStream();\n\n    const accepted = await stream.open(fileName);\n    if (!accepted) {\n      return;\n    }\n\n    void stream.write(JSON.stringify(this.messages, null, '  '));\n    void stream.close();\n  }\n}\n\nexport class InfoWidget extends UI.Widget.VBox {\n  private readonly tabbedPane: UI.TabbedPane.TabbedPane;\n  constructor() {\n    super();\n    this.tabbedPane = new UI.TabbedPane.TabbedPane();\n    this.tabbedPane.appendTab('request', i18nString(UIStrings.request), new UI.Widget.Widget());\n    this.tabbedPane.appendTab('response', i18nString(UIStrings.response), new UI.Widget.Widget());\n    this.tabbedPane.show(this.contentElement);\n    this.tabbedPane.selectTab('response');\n    this.render(null);\n  }\n\n  render(data: {\n    request: DataGrid.DataGridUtils.Cell|undefined,\n    response: DataGrid.DataGridUtils.Cell|undefined,\n    type: 'sent'|'received'|undefined,\n  }|null): void {\n    if (!data || !data.request || !data.response) {\n      this.tabbedPane.changeTabView('request', new UI.EmptyWidget.EmptyWidget(i18nString(UIStrings.noMessageSelected)));\n      this.tabbedPane.changeTabView(\n          'response', new UI.EmptyWidget.EmptyWidget(i18nString(UIStrings.noMessageSelected)));\n      return;\n    }\n\n    const requestEnabled = data && data.type && data.type === 'sent';\n    this.tabbedPane.setTabEnabled('request', Boolean(requestEnabled));\n    if (!requestEnabled) {\n      this.tabbedPane.selectTab('response');\n    }\n\n    const requestParsed = JSON.parse(String(data.request.value) || 'null');\n    this.tabbedPane.changeTabView('request', SourceFrame.JSONView.JSONView.createViewSync(requestParsed));\n    const responseParsed =\n        data.response.value === '(pending)' ? null : JSON.parse(String(data.response.value) || 'null');\n    this.tabbedPane.changeTabView('response', SourceFrame.JSONView.JSONView.createViewSync(responseParsed));\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
