{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/protocol_monitor/protocol_monitor-meta.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type * as ProtocolMonitor from './protocol_monitor.js';\n\nconst UIStrings = {\n  /**\n  * @description Title of the 'Protocol monitor' tool in the bottom drawer. This is a tool for\n  * viewing and inspecting 'protocol' messages which are sent/received by DevTools. 'protocol' here\n  * could be left untranslated as this refers to the Chrome DevTools Protocol (CDP) which is a\n  * specific API name.\n  */\n  protocolMonitor: 'Protocol monitor',\n  /**\n  *@description Command for showing the 'Protocol monitor' tool in the bottom drawer\n  */\n  showProtocolMonitor: 'Show Protocol monitor',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/protocol_monitor/protocol_monitor-meta.ts', UIStrings);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nlet loadedProtocolMonitorModule: (typeof ProtocolMonitor|undefined);\n\nasync function loadProtocolMonitorModule(): Promise<typeof ProtocolMonitor> {\n  if (!loadedProtocolMonitorModule) {\n    loadedProtocolMonitorModule = await import('./protocol_monitor.js');\n  }\n  return loadedProtocolMonitorModule;\n}\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.DRAWER_VIEW,\n  id: 'protocol-monitor',\n  title: i18nLazyString(UIStrings.protocolMonitor),\n  commandPrompt: i18nLazyString(UIStrings.showProtocolMonitor),\n  order: 100,\n  persistence: UI.ViewManager.ViewPersistence.CLOSEABLE,\n  async loadView() {\n    const ProtocolMonitor = await loadProtocolMonitorModule();\n    return ProtocolMonitor.ProtocolMonitor.ProtocolMonitorImpl.instance();\n  },\n  experiment: Root.Runtime.ExperimentName.PROTOCOL_MONITOR,\n});\n"],
  "mappings": "AAIA;AACA;AACA;AAIA,MAAM,YAAY;AAAA,EAOhB,iBAAiB;AAAA,EAIjB,qBAAqB;AAAA;AAEvB,MAAM,OAAO,KAAK,KAAK,kBAAkB,oDAAoD;AAC7F,MAAM,iBAAiB,KAAK,KAAK,iCAAiC,KAAK,QAAW;AAElF,IAAI;AAEJ,2CAA4E;AAC1E,MAAI,CAAC,6BAA6B;AAChC,kCAA8B,MAAM,OAAO;AAAA;AAE7C,SAAO;AAAA;AAGT,GAAG,YAAY,sBAAsB;AAAA,EACnC,UAAU,GAAG,YAAY,mBAAmB;AAAA,EAC5C,IAAI;AAAA,EACJ,OAAO,eAAe,UAAU;AAAA,EAChC,eAAe,eAAe,UAAU;AAAA,EACxC,OAAO;AAAA,EACP,aAAa,GAAG,YAAY,gBAAgB;AAAA,QACtC,WAAW;AACf,UAAM,kBAAkB,MAAM;AAC9B,WAAO,gBAAgB,gBAAgB,oBAAoB;AAAA;AAAA,EAE7D,YAAY,KAAK,QAAQ,eAAe;AAAA;",
  "names": []
}
