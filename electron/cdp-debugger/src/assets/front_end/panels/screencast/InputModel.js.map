{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/screencast/InputModel.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nexport class InputModel extends SDK.SDKModel.SDKModel<void> {\n  private readonly inputAgent: ProtocolProxyApi.InputApi;\n  private activeTouchOffsetTop: number|null;\n  private activeTouchParams: Protocol.Input.EmulateTouchFromMouseEventRequest|null;\n\n  constructor(target: SDK.Target.Target) {\n    super(target);\n    this.inputAgent = target.inputAgent();\n    this.activeTouchOffsetTop = null;\n    this.activeTouchParams = null;\n  }\n\n  emitKeyEvent(event: Event): void {\n    let type: Protocol.Input.DispatchKeyEventRequestType;\n    switch (event.type) {\n      case 'keydown':\n        type = Protocol.Input.DispatchKeyEventRequestType.KeyDown;\n        break;\n      case 'keyup':\n        type = Protocol.Input.DispatchKeyEventRequestType.KeyUp;\n        break;\n      case 'keypress':\n        type = Protocol.Input.DispatchKeyEventRequestType.Char;\n        break;\n      default:\n        return;\n    }\n    const keyboardEvent = event as KeyboardEvent;\n    const text = event.type === 'keypress' ? String.fromCharCode(keyboardEvent.charCode) : undefined;\n    void this.inputAgent.invoke_dispatchKeyEvent({\n      type: type,\n      modifiers: this.modifiersForEvent(keyboardEvent),\n      text: text,\n      unmodifiedText: text ? text.toLowerCase() : undefined,\n      keyIdentifier: (keyboardEvent as {keyIdentifier?: string}).keyIdentifier,\n      code: keyboardEvent.code,\n      key: keyboardEvent.key,\n      windowsVirtualKeyCode: keyboardEvent.keyCode,\n      nativeVirtualKeyCode: keyboardEvent.keyCode,\n      autoRepeat: false,\n      isKeypad: false,\n      isSystemKey: false,\n    });\n  }\n\n  emitTouchFromMouseEvent(event: Event, offsetTop: number, zoom: number): void {\n    const buttons = ['none', 'left', 'middle', 'right'] as Protocol.Input.MouseButton[];\n    const types: {[key: string]: Protocol.Input.EmulateTouchFromMouseEventRequestType} = {\n      mousedown: Protocol.Input.EmulateTouchFromMouseEventRequestType.MousePressed,\n      mouseup: Protocol.Input.EmulateTouchFromMouseEventRequestType.MouseReleased,\n      mousemove: Protocol.Input.EmulateTouchFromMouseEventRequestType.MouseMoved,\n      mousewheel: Protocol.Input.EmulateTouchFromMouseEventRequestType.MouseWheel,\n    };\n\n    const eventType = event.type as string;\n    if (!(eventType in types)) {\n      return;\n    }\n\n    const mouseEvent = event as MouseEvent;\n\n    if (!(mouseEvent.which in buttons)) {\n      return;\n    }\n    if (eventType !== 'mousewheel' && buttons[mouseEvent.which] === 'none') {\n      return;\n    }\n\n    if (eventType === 'mousedown' || this.activeTouchOffsetTop === null) {\n      this.activeTouchOffsetTop = offsetTop;\n    }\n\n    const x = Math.round(mouseEvent.offsetX / zoom);\n    let y = Math.round(mouseEvent.offsetY / zoom);\n    y = Math.round(y - this.activeTouchOffsetTop);\n    const params: Protocol.Input.EmulateTouchFromMouseEventRequest = {\n      type: types[eventType],\n      x: x,\n      y: y,\n      modifiers: 0,\n      button: buttons[mouseEvent.which],\n      clickCount: 0,\n    };\n    if (event.type === 'mousewheel') {\n      const wheelEvent = mouseEvent as WheelEvent;\n      params.deltaX = wheelEvent.deltaX / zoom;\n      params.deltaY = -wheelEvent.deltaY / zoom;\n    } else {\n      this.activeTouchParams = params;\n    }\n    if (event.type === 'mouseup') {\n      this.activeTouchOffsetTop = null;\n    }\n    void this.inputAgent.invoke_emulateTouchFromMouseEvent(params);\n  }\n\n  cancelTouch(): void {\n    if (this.activeTouchParams !== null) {\n      const params = this.activeTouchParams;\n      this.activeTouchParams = null;\n      params.type = 'mouseReleased' as Protocol.Input.EmulateTouchFromMouseEventRequestType;\n      void this.inputAgent.invoke_emulateTouchFromMouseEvent(params);\n    }\n  }\n\n  private modifiersForEvent(event: KeyboardEvent): number {\n    return (event.altKey ? 1 : 0) | (event.ctrlKey ? 2 : 0) | (event.metaKey ? 4 : 0) | (event.shiftKey ? 8 : 0);\n  }\n}\n\nSDK.SDKModel.SDKModel.register(InputModel, {capabilities: SDK.Target.Capability.Input, autostart: false});\n"],
  "mappings": "AAIA;AAEA;AAEO,gCAAyB,IAAI,SAAS,SAAe;AAAA,EACzC;AAAA,EACT;AAAA,EACA;AAAA,EAER,YAAY,QAA2B;AACrC,UAAM;AACN,SAAK,aAAa,OAAO;AACzB,SAAK,uBAAuB;AAC5B,SAAK,oBAAoB;AAAA;AAAA,EAG3B,aAAa,OAAoB;AAC/B,QAAI;AACJ,YAAQ,MAAM;AAAA,WACP;AACH,eAAO,SAAS,MAAM,4BAA4B;AAClD;AAAA,WACG;AACH,eAAO,SAAS,MAAM,4BAA4B;AAClD;AAAA,WACG;AACH,eAAO,SAAS,MAAM,4BAA4B;AAClD;AAAA;AAEA;AAAA;AAEJ,UAAM,gBAAgB;AACtB,UAAM,OAAO,MAAM,SAAS,aAAa,OAAO,aAAa,cAAc,YAAY;AACvF,SAAK,KAAK,WAAW,wBAAwB;AAAA,MAC3C;AAAA,MACA,WAAW,KAAK,kBAAkB;AAAA,MAClC;AAAA,MACA,gBAAgB,OAAO,KAAK,gBAAgB;AAAA,MAC5C,eAAgB,cAA2C;AAAA,MAC3D,MAAM,cAAc;AAAA,MACpB,KAAK,cAAc;AAAA,MACnB,uBAAuB,cAAc;AAAA,MACrC,sBAAsB,cAAc;AAAA,MACpC,YAAY;AAAA,MACZ,UAAU;AAAA,MACV,aAAa;AAAA;AAAA;AAAA,EAIjB,wBAAwB,OAAc,WAAmB,MAAoB;AAC3E,UAAM,UAAU,CAAC,QAAQ,QAAQ,UAAU;AAC3C,UAAM,QAA+E;AAAA,MACnF,WAAW,SAAS,MAAM,sCAAsC;AAAA,MAChE,SAAS,SAAS,MAAM,sCAAsC;AAAA,MAC9D,WAAW,SAAS,MAAM,sCAAsC;AAAA,MAChE,YAAY,SAAS,MAAM,sCAAsC;AAAA;AAGnE,UAAM,YAAY,MAAM;AACxB,QAAI,CAAE,cAAa,QAAQ;AACzB;AAAA;AAGF,UAAM,aAAa;AAEnB,QAAI,CAAE,YAAW,SAAS,UAAU;AAClC;AAAA;AAEF,QAAI,cAAc,gBAAgB,QAAQ,WAAW,WAAW,QAAQ;AACtE;AAAA;AAGF,QAAI,cAAc,eAAe,KAAK,yBAAyB,MAAM;AACnE,WAAK,uBAAuB;AAAA;AAG9B,UAAM,IAAI,KAAK,MAAM,WAAW,UAAU;AAC1C,QAAI,IAAI,KAAK,MAAM,WAAW,UAAU;AACxC,QAAI,KAAK,MAAM,IAAI,KAAK;AACxB,UAAM,SAA2D;AAAA,MAC/D,MAAM,MAAM;AAAA,MACZ;AAAA,MACA;AAAA,MACA,WAAW;AAAA,MACX,QAAQ,QAAQ,WAAW;AAAA,MAC3B,YAAY;AAAA;AAEd,QAAI,MAAM,SAAS,cAAc;AAC/B,YAAM,aAAa;AACnB,aAAO,SAAS,WAAW,SAAS;AACpC,aAAO,SAAS,CAAC,WAAW,SAAS;AAAA,WAChC;AACL,WAAK,oBAAoB;AAAA;AAE3B,QAAI,MAAM,SAAS,WAAW;AAC5B,WAAK,uBAAuB;AAAA;AAE9B,SAAK,KAAK,WAAW,kCAAkC;AAAA;AAAA,EAGzD,cAAoB;AAClB,QAAI,KAAK,sBAAsB,MAAM;AACnC,YAAM,SAAS,KAAK;AACpB,WAAK,oBAAoB;AACzB,aAAO,OAAO;AACd,WAAK,KAAK,WAAW,kCAAkC;AAAA;AAAA;AAAA,EAInD,kBAAkB,OAA8B;AACtD,WAAQ,OAAM,SAAS,IAAI,KAAM,OAAM,UAAU,IAAI,KAAM,OAAM,UAAU,IAAI,KAAM,OAAM,WAAW,IAAI;AAAA;AAAA;AAI9G,IAAI,SAAS,SAAS,SAAS,YAAY,EAAC,cAAc,IAAI,OAAO,WAAW,OAAO,WAAW;",
  "names": []
}
