{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/screencast/ScreencastView.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {InputModel} from './InputModel.js';\nimport screencastViewStyles from './screencastView.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Accessible alt text for the screencast canvas rendering of the debug target webpage\n  */\n  screencastViewOfDebugTarget: 'Screencast view of debug target',\n  /**\n  *@description Glass pane element text content in Screencast View of the Remote Devices tab when toggling screencast\n  */\n  theTabIsInactive: 'The tab is inactive',\n  /**\n  *@description Glass pane element text content in Screencast View of the Remote Devices tab when toggling screencast\n  */\n  profilingInProgress: 'Profiling in progress',\n  /**\n  *@description Accessible text for the screencast back button\n  */\n  back: 'back',\n  /**\n  *@description Accessible text for the screencast forward button\n  */\n  forward: 'forward',\n  /**\n  *@description Accessible text for the screencast reload button\n  */\n  reload: 'reload',\n  /**\n  *@description Accessible text for the address bar in screencast view\n  */\n  addressBar: 'Address bar',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/screencast/ScreencastView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ninterface Point {\n  x: number;\n  y: number;\n}\n\nexport class ScreencastView extends UI.Widget.VBox implements SDK.OverlayModel.Highlighter {\n  private readonly screenCaptureModel: SDK.ScreenCaptureModel.ScreenCaptureModel;\n  private domModel: SDK.DOMModel.DOMModel|null;\n  private readonly overlayModel: SDK.OverlayModel.OverlayModel|null;\n  private resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel|null;\n  private networkManager: SDK.NetworkManager.NetworkManager|null;\n  private readonly inputModel: InputModel|null;\n  private shortcuts: {[x: number]: (arg0?: Event|undefined) => boolean};\n  private scrollOffsetX: number;\n  private scrollOffsetY: number;\n  private screenZoom: number;\n  private screenOffsetTop: number;\n  private pageScaleFactor: number;\n  private imageElement!: HTMLImageElement;\n  private viewportElement!: HTMLElement;\n  private glassPaneElement!: HTMLElement;\n  private canvasElement!: HTMLCanvasElement;\n  private titleElement!: HTMLElement;\n  private context!: CanvasRenderingContext2D;\n  private imageZoom: number;\n  private tagNameElement!: HTMLElement;\n  private attributeElement!: HTMLElement;\n  private nodeWidthElement!: HTMLElement;\n  private nodeHeightElement!: HTMLElement;\n  private model!: Protocol.DOM.BoxModel|null;\n  private highlightConfig!: Protocol.Overlay.HighlightConfig|null;\n  private navigationUrl!: HTMLInputElement;\n  private navigationBack!: HTMLButtonElement;\n  private navigationForward!: HTMLButtonElement;\n  private canvasContainerElement?: HTMLElement;\n  private isCasting?: boolean;\n  private checkerboardPattern?: CanvasPattern|null;\n  private targetInactive?: boolean;\n  private deferredCasting?: number;\n  private highlightNode?: SDK.DOMModel.DOMNode|null;\n  private config?: Protocol.Overlay.HighlightConfig|null;\n  private node?: SDK.DOMModel.DOMNode|null;\n  private inspectModeConfig?: Protocol.Overlay.HighlightConfig|null;\n  private navigationBar?: HTMLElement;\n  private navigationReload?: HTMLElement;\n  private navigationProgressBar?: ProgressTracker;\n  private historyIndex?: number;\n  private historyEntries?: Protocol.Page.NavigationEntry[];\n  constructor(screenCaptureModel: SDK.ScreenCaptureModel.ScreenCaptureModel) {\n    super();\n    this.screenCaptureModel = screenCaptureModel;\n    this.domModel = screenCaptureModel.target().model(SDK.DOMModel.DOMModel);\n    this.overlayModel = screenCaptureModel.target().model(SDK.OverlayModel.OverlayModel);\n    this.resourceTreeModel = screenCaptureModel.target().model(SDK.ResourceTreeModel.ResourceTreeModel);\n    this.networkManager = screenCaptureModel.target().model(SDK.NetworkManager.NetworkManager);\n    this.inputModel = screenCaptureModel.target().model(InputModel);\n\n    this.setMinimumSize(150, 150);\n\n    this.shortcuts = {} as {\n      [x: number]: (arg0?: Event|undefined) => boolean,\n    };\n    this.scrollOffsetX = 0;\n    this.scrollOffsetY = 0;\n    this.screenZoom = 1;\n    this.screenOffsetTop = 0;\n    this.pageScaleFactor = 1;\n    this.imageZoom = 1;\n  }\n\n  initialize(): void {\n    this.element.classList.add('screencast');\n\n    this.createNavigationBar();\n    this.viewportElement = this.element.createChild('div', 'screencast-viewport hidden') as HTMLElement;\n    this.canvasContainerElement = this.viewportElement.createChild('div', 'screencast-canvas-container') as HTMLElement;\n    this.glassPaneElement =\n        this.canvasContainerElement.createChild('div', 'screencast-glasspane fill hidden') as HTMLElement;\n    this.canvasElement = this.canvasContainerElement.createChild('canvas') as HTMLCanvasElement;\n    UI.ARIAUtils.setAccessibleName(this.canvasElement, i18nString(UIStrings.screencastViewOfDebugTarget));\n    this.canvasElement.tabIndex = 0;\n    this.canvasElement.addEventListener('mousedown', this.handleMouseEvent.bind(this), false);\n    this.canvasElement.addEventListener('mouseup', this.handleMouseEvent.bind(this), false);\n    this.canvasElement.addEventListener('mousemove', this.handleMouseEvent.bind(this), false);\n    this.canvasElement.addEventListener('mousewheel', this.handleMouseEvent.bind(this), false);\n    this.canvasElement.addEventListener('click', this.handleMouseEvent.bind(this), false);\n    this.canvasElement.addEventListener('contextmenu', this.handleContextMenuEvent.bind(this), false);\n    this.canvasElement.addEventListener('keydown', this.handleKeyEvent.bind(this), false);\n    this.canvasElement.addEventListener('keyup', this.handleKeyEvent.bind(this), false);\n    this.canvasElement.addEventListener('keypress', this.handleKeyEvent.bind(this), false);\n    this.canvasElement.addEventListener('blur', this.handleBlurEvent.bind(this), false);\n    this.titleElement =\n        this.canvasContainerElement.createChild('div', 'screencast-element-title monospace hidden') as HTMLElement;\n    this.tagNameElement = this.titleElement.createChild('span', 'screencast-tag-name') as HTMLElement;\n    this.attributeElement = this.titleElement.createChild('span', 'screencast-attribute') as HTMLElement;\n    UI.UIUtils.createTextChild(this.titleElement, ' ');\n    const dimension = this.titleElement.createChild('span', 'screencast-dimension') as HTMLElement;\n    this.nodeWidthElement = dimension.createChild('span') as HTMLElement;\n    UI.UIUtils.createTextChild(dimension, ' \u00D7 ');\n    this.nodeHeightElement = dimension.createChild('span') as HTMLElement;\n    this.titleElement.style.top = '0';\n    this.titleElement.style.left = '0';\n\n    this.imageElement = new Image();\n    this.isCasting = false;\n    this.context = this.canvasElement.getContext('2d') as CanvasRenderingContext2D;\n    this.checkerboardPattern = this.createCheckerboardPattern(this.context);\n\n    this.shortcuts[UI.KeyboardShortcut.KeyboardShortcut.makeKey('l', UI.KeyboardShortcut.Modifiers.Ctrl)] =\n        this.focusNavigationBar.bind(this);\n\n    SDK.TargetManager.TargetManager.instance().addEventListener(\n        SDK.TargetManager.Events.SuspendStateChanged, this.onSuspendStateChange, this);\n    this.updateGlasspane();\n  }\n\n  wasShown(): void {\n    this.startCasting();\n    this.registerCSSFiles([screencastViewStyles]);\n  }\n\n  willHide(): void {\n    this.stopCasting();\n  }\n\n  private startCasting(): void {\n    if (SDK.TargetManager.TargetManager.instance().allTargetsSuspended()) {\n      return;\n    }\n    if (this.isCasting) {\n      return;\n    }\n    this.isCasting = true;\n\n    const maxImageDimension = 2048;\n    const dimensions = this.viewportDimensions();\n    if (dimensions.width < 0 || dimensions.height < 0) {\n      this.isCasting = false;\n      return;\n    }\n    dimensions.width *= window.devicePixelRatio;\n    dimensions.height *= window.devicePixelRatio;\n    // Note: startScreencast width and height are expected to be integers so must be floored.\n    this.screenCaptureModel.startScreencast(\n        Protocol.Page.StartScreencastRequestFormat.Jpeg, 80, Math.floor(Math.min(maxImageDimension, dimensions.width)),\n        Math.floor(Math.min(maxImageDimension, dimensions.height)), undefined, this.screencastFrame.bind(this),\n        this.screencastVisibilityChanged.bind(this));\n    for (const emulationModel of SDK.TargetManager.TargetManager.instance().models(SDK.EmulationModel.EmulationModel)) {\n      void emulationModel.overrideEmulateTouch(true);\n    }\n    if (this.overlayModel) {\n      this.overlayModel.setHighlighter(this);\n    }\n  }\n\n  private stopCasting(): void {\n    if (!this.isCasting) {\n      return;\n    }\n    this.isCasting = false;\n    this.screenCaptureModel.stopScreencast();\n    for (const emulationModel of SDK.TargetManager.TargetManager.instance().models(SDK.EmulationModel.EmulationModel)) {\n      void emulationModel.overrideEmulateTouch(false);\n    }\n    if (this.overlayModel) {\n      this.overlayModel.setHighlighter(null);\n    }\n  }\n\n  private screencastFrame(base64Data: string, metadata: Protocol.Page.ScreencastFrameMetadata): void {\n    this.imageElement.onload = (): void => {\n      this.pageScaleFactor = metadata.pageScaleFactor;\n      this.screenOffsetTop = metadata.offsetTop;\n      this.scrollOffsetX = metadata.scrollOffsetX;\n      this.scrollOffsetY = metadata.scrollOffsetY;\n\n      const deviceSizeRatio = metadata.deviceHeight / metadata.deviceWidth;\n      const dimensionsCSS = this.viewportDimensions();\n\n      this.imageZoom = Math.min(\n          dimensionsCSS.width / this.imageElement.naturalWidth,\n          dimensionsCSS.height / (this.imageElement.naturalWidth * deviceSizeRatio));\n      this.viewportElement.classList.remove('hidden');\n      const bordersSize = BORDERS_SIZE;\n      if (this.imageZoom < 1.01 / window.devicePixelRatio) {\n        this.imageZoom = 1 / window.devicePixelRatio;\n      }\n      this.screenZoom = this.imageElement.naturalWidth * this.imageZoom / metadata.deviceWidth;\n      this.viewportElement.style.width = metadata.deviceWidth * this.screenZoom + bordersSize + 'px';\n      this.viewportElement.style.height = metadata.deviceHeight * this.screenZoom + bordersSize + 'px';\n\n      const data = this.highlightNode ? {node: this.highlightNode, selectorList: undefined} : {clear: true};\n      void this.updateHighlightInOverlayAndRepaint(data, this.highlightConfig);\n    };\n    this.imageElement.src = 'data:image/jpg;base64,' + base64Data;\n  }\n\n  private isGlassPaneActive(): boolean {\n    return !this.glassPaneElement.classList.contains('hidden');\n  }\n\n  private screencastVisibilityChanged(visible: boolean): void {\n    this.targetInactive = !visible;\n    this.updateGlasspane();\n  }\n\n  private onSuspendStateChange(): void {\n    if (SDK.TargetManager.TargetManager.instance().allTargetsSuspended()) {\n      this.stopCasting();\n    } else {\n      this.startCasting();\n    }\n    this.updateGlasspane();\n  }\n\n  private updateGlasspane(): void {\n    if (this.targetInactive) {\n      this.glassPaneElement.textContent = i18nString(UIStrings.theTabIsInactive);\n      this.glassPaneElement.classList.remove('hidden');\n    } else if (SDK.TargetManager.TargetManager.instance().allTargetsSuspended()) {\n      this.glassPaneElement.textContent = i18nString(UIStrings.profilingInProgress);\n      this.glassPaneElement.classList.remove('hidden');\n    } else {\n      this.glassPaneElement.classList.add('hidden');\n    }\n  }\n\n  private async handleMouseEvent(event: Event): Promise<void> {\n    if (this.isGlassPaneActive()) {\n      event.consume();\n      return;\n    }\n\n    if (!this.pageScaleFactor || !this.domModel) {\n      return;\n    }\n\n    if (!this.inspectModeConfig || event.type === 'mousewheel') {\n      if (this.inputModel) {\n        this.inputModel.emitTouchFromMouseEvent(event, this.screenOffsetTop, this.screenZoom);\n      }\n      event.preventDefault();\n      if (event.type === 'mousedown') {\n        this.canvasElement.focus();\n      }\n      return;\n    }\n\n    const position = this.convertIntoScreenSpace(event as MouseEvent);\n\n    const node = await this.domModel.nodeForLocation(\n        Math.floor(position.x / this.pageScaleFactor + this.scrollOffsetX),\n        Math.floor(position.y / this.pageScaleFactor + this.scrollOffsetY),\n        Common.Settings.Settings.instance().moduleSetting('showUAShadowDOM').get());\n\n    if (!node) {\n      return;\n    }\n\n    if (event.type === 'mousemove') {\n      void this.updateHighlightInOverlayAndRepaint({node, selectorList: undefined}, this.inspectModeConfig);\n      this.domModel.overlayModel().nodeHighlightRequested({nodeId: node.id});\n    } else if (event.type === 'click') {\n      this.domModel.overlayModel().inspectNodeRequested({backendNodeId: node.backendNodeId()});\n    }\n  }\n\n  private handleKeyEvent(event: Event): void {\n    if (this.isGlassPaneActive()) {\n      event.consume();\n      return;\n    }\n\n    const shortcutKey = UI.KeyboardShortcut.KeyboardShortcut.makeKeyFromEvent(event as KeyboardEvent);\n    const handler = this.shortcuts[shortcutKey];\n    if (handler && handler(event)) {\n      event.consume();\n      return;\n    }\n\n    if (this.inputModel) {\n      this.inputModel.emitKeyEvent(event);\n    }\n    event.consume();\n    this.canvasElement.focus();\n  }\n\n  private handleContextMenuEvent(event: Event): void {\n    event.consume(true);\n  }\n\n  private handleBlurEvent(_event: Event): void {\n    if (this.inputModel) {\n      this.inputModel.cancelTouch();\n    }\n  }\n\n  private convertIntoScreenSpace(event: MouseEvent): Point {\n    return {\n      x: Math.round(event.offsetX / this.screenZoom),\n      y: Math.round(event.offsetY / this.screenZoom - this.screenOffsetTop),\n    };\n  }\n\n  onResize(): void {\n    if (this.deferredCasting) {\n      clearTimeout(this.deferredCasting);\n      delete this.deferredCasting;\n    }\n\n    this.stopCasting();\n    this.deferredCasting = window.setTimeout(this.startCasting.bind(this), 100);\n  }\n\n  highlightInOverlay(data: SDK.OverlayModel.HighlightData, config: Protocol.Overlay.HighlightConfig|null): void {\n    void this.updateHighlightInOverlayAndRepaint(data, config);\n  }\n\n  private async updateHighlightInOverlayAndRepaint(\n      data: SDK.OverlayModel.HighlightData, config: Protocol.Overlay.HighlightConfig|null): Promise<void> {\n    let node: SDK.DOMModel.DOMNode|null = null;\n    if ('node' in data) {\n      node = data.node;\n    }\n    if (!node && 'deferredNode' in data) {\n      node = await data.deferredNode.resolvePromise();\n    }\n    if (!node && 'object' in data) {\n      const domModel = data.object.runtimeModel().target().model(SDK.DOMModel.DOMModel);\n      if (domModel) {\n        node = await domModel.pushObjectAsNodeToFrontend(data.object);\n      }\n    }\n\n    this.highlightNode = node;\n    this.highlightConfig = config;\n    if (!node) {\n      this.model = null;\n      this.config = null;\n      this.node = null;\n      this.titleElement.classList.add('hidden');\n      this.repaint();\n      return;\n    }\n\n    this.node = node;\n    void node.boxModel().then(model => {\n      if (!model || !this.pageScaleFactor) {\n        this.repaint();\n        return;\n      }\n      this.model = this.scaleModel(model);\n      this.config = config;\n      this.repaint();\n    });\n  }\n\n  private scaleModel(model: Protocol.DOM.BoxModel): Protocol.DOM.BoxModel {\n    function scaleQuad(this: ScreencastView, quad: Protocol.DOM.Quad): void {\n      for (let i = 0; i < quad.length; i += 2) {\n        quad[i] = quad[i] * this.pageScaleFactor * this.screenZoom;\n        quad[i + 1] = (quad[i + 1] * this.pageScaleFactor + this.screenOffsetTop) * this.screenZoom;\n      }\n    }\n\n    scaleQuad.call(this, model.content);\n    scaleQuad.call(this, model.padding);\n    scaleQuad.call(this, model.border);\n    scaleQuad.call(this, model.margin);\n    return model;\n  }\n\n  private repaint(): void {\n    const model = this.model;\n    const config = this.config;\n\n    const canvasWidth = this.canvasElement.getBoundingClientRect().width;\n    const canvasHeight = this.canvasElement.getBoundingClientRect().height;\n    this.canvasElement.width = window.devicePixelRatio * canvasWidth;\n    this.canvasElement.height = window.devicePixelRatio * canvasHeight;\n\n    this.context.save();\n    this.context.scale(window.devicePixelRatio, window.devicePixelRatio);\n\n    // Paint top and bottom gutter.\n    this.context.save();\n    if (this.checkerboardPattern) {\n      this.context.fillStyle = this.checkerboardPattern;\n    }\n    this.context.fillRect(0, 0, canvasWidth, this.screenOffsetTop * this.screenZoom);\n    this.context.fillRect(\n        0, this.screenOffsetTop * this.screenZoom + this.imageElement.naturalHeight * this.imageZoom, canvasWidth,\n        canvasHeight);\n    this.context.restore();\n\n    if (model && config) {\n      this.context.save();\n      const quads = [];\n      const isTransparent = (color: Protocol.DOM.RGBA): boolean => Boolean(color.a && color.a === 0);\n      if (model.content && config.contentColor && !isTransparent(config.contentColor)) {\n        quads.push({quad: model.content, color: config.contentColor});\n      }\n      if (model.padding && config.paddingColor && !isTransparent(config.paddingColor)) {\n        quads.push({quad: model.padding, color: config.paddingColor});\n      }\n      if (model.border && config.borderColor && !isTransparent(config.borderColor)) {\n        quads.push({quad: model.border, color: config.borderColor});\n      }\n      if (model.margin && config.marginColor && !isTransparent(config.marginColor)) {\n        quads.push({quad: model.margin, color: config.marginColor});\n      }\n\n      for (let i = quads.length - 1; i > 0; --i) {\n        this.drawOutlinedQuadWithClip(quads[i].quad, quads[i - 1].quad, quads[i].color);\n      }\n      if (quads.length > 0) {\n        this.drawOutlinedQuad(quads[0].quad, quads[0].color);\n      }\n      this.context.restore();\n\n      this.drawElementTitle();\n\n      this.context.globalCompositeOperation = 'destination-over';\n    }\n\n    this.context.drawImage(\n        this.imageElement, 0, this.screenOffsetTop * this.screenZoom, this.imageElement.naturalWidth * this.imageZoom,\n        this.imageElement.naturalHeight * this.imageZoom);\n    this.context.restore();\n  }\n\n  private cssColor(color: Protocol.DOM.RGBA): string {\n    if (!color) {\n      return 'transparent';\n    }\n    return Common.Color.Color.fromRGBA([color.r, color.g, color.b, color.a !== undefined ? color.a : 1])\n               .asString(Common.Color.Format.RGBA) ||\n        '';\n  }\n\n  private quadToPath(quad: Protocol.DOM.Quad): CanvasRenderingContext2D {\n    this.context.beginPath();\n    this.context.moveTo(quad[0], quad[1]);\n    this.context.lineTo(quad[2], quad[3]);\n    this.context.lineTo(quad[4], quad[5]);\n    this.context.lineTo(quad[6], quad[7]);\n    this.context.closePath();\n    return this.context;\n  }\n\n  private drawOutlinedQuad(quad: Protocol.DOM.Quad, fillColor: Protocol.DOM.RGBA): void {\n    this.context.save();\n    this.context.lineWidth = 2;\n    this.quadToPath(quad).clip();\n    this.context.fillStyle = this.cssColor(fillColor);\n    this.context.fill();\n    this.context.restore();\n  }\n\n  private drawOutlinedQuadWithClip(quad: Protocol.DOM.Quad, clipQuad: Protocol.DOM.Quad, fillColor: Protocol.DOM.RGBA):\n      void {\n    this.context.fillStyle = this.cssColor(fillColor);\n    this.context.save();\n    this.context.lineWidth = 0;\n    this.quadToPath(quad).fill();\n    this.context.globalCompositeOperation = 'destination-out';\n    this.context.fillStyle = 'red';\n    this.quadToPath(clipQuad).fill();\n    this.context.restore();\n  }\n\n  private drawElementTitle(): void {\n    if (!this.node) {\n      return;\n    }\n\n    const canvasWidth = this.canvasElement.getBoundingClientRect().width;\n    const canvasHeight = this.canvasElement.getBoundingClientRect().height;\n\n    const lowerCaseName = this.node.localName() || this.node.nodeName().toLowerCase();\n    this.tagNameElement.textContent = lowerCaseName;\n\n    this.attributeElement.textContent = getAttributesForElementTitle(this.node);\n    this.nodeWidthElement.textContent = String(this.model ? this.model.width : 0);\n    this.nodeHeightElement.textContent = String(this.model ? this.model.height : 0);\n\n    this.titleElement.classList.remove('hidden');\n    const titleWidth = this.titleElement.offsetWidth + 6;\n    const titleHeight = this.titleElement.offsetHeight + 4;\n\n    const anchorTop = this.model ? this.model.margin[1] : 0;\n    const anchorBottom = this.model ? this.model.margin[7] : 0;\n\n    const arrowHeight = 7;\n    let renderArrowUp = false;\n    let renderArrowDown = false;\n\n    let boxX = Math.max(2, this.model ? this.model.margin[0] : 0);\n    if (boxX + titleWidth > canvasWidth) {\n      boxX = canvasWidth - titleWidth - 2;\n    }\n\n    let boxY;\n    if (anchorTop > canvasHeight) {\n      boxY = canvasHeight - titleHeight - arrowHeight;\n      renderArrowDown = true;\n    } else if (anchorBottom < 0) {\n      boxY = arrowHeight;\n      renderArrowUp = true;\n    } else if (anchorBottom + titleHeight + arrowHeight < canvasHeight) {\n      boxY = anchorBottom + arrowHeight - 4;\n      renderArrowUp = true;\n    } else if (anchorTop - titleHeight - arrowHeight > 0) {\n      boxY = anchorTop - titleHeight - arrowHeight + 3;\n      renderArrowDown = true;\n    } else {\n      boxY = arrowHeight;\n    }\n\n    this.context.save();\n    this.context.translate(0.5, 0.5);\n    this.context.beginPath();\n    this.context.moveTo(boxX, boxY);\n    if (renderArrowUp) {\n      this.context.lineTo(boxX + 2 * arrowHeight, boxY);\n      this.context.lineTo(boxX + 3 * arrowHeight, boxY - arrowHeight);\n      this.context.lineTo(boxX + 4 * arrowHeight, boxY);\n    }\n    this.context.lineTo(boxX + titleWidth, boxY);\n    this.context.lineTo(boxX + titleWidth, boxY + titleHeight);\n    if (renderArrowDown) {\n      this.context.lineTo(boxX + 4 * arrowHeight, boxY + titleHeight);\n      this.context.lineTo(boxX + 3 * arrowHeight, boxY + titleHeight + arrowHeight);\n      this.context.lineTo(boxX + 2 * arrowHeight, boxY + titleHeight);\n    }\n    this.context.lineTo(boxX, boxY + titleHeight);\n    this.context.closePath();\n    this.context.fillStyle = 'rgb(255, 255, 194)';\n    this.context.fill();\n    this.context.strokeStyle = 'rgb(128, 128, 128)';\n    this.context.stroke();\n\n    this.context.restore();\n\n    this.titleElement.style.top = (boxY + 3) + 'px';\n    this.titleElement.style.left = (boxX + 3) + 'px';\n  }\n\n  private viewportDimensions(): {width: number, height: number} {\n    const gutterSize = 30;\n    const bordersSize = BORDERS_SIZE;\n    const width = this.element.offsetWidth - bordersSize - gutterSize;\n    const height = this.element.offsetHeight - bordersSize - gutterSize - NAVBAR_HEIGHT;\n    return {width: width, height: height};\n  }\n\n  setInspectMode(mode: Protocol.Overlay.InspectMode, config: Protocol.Overlay.HighlightConfig): Promise<void> {\n    this.inspectModeConfig = mode !== Protocol.Overlay.InspectMode.None ? config : null;\n    return Promise.resolve();\n  }\n\n  highlightFrame(_frameId: string): void {\n  }\n\n  private createCheckerboardPattern(context: CanvasRenderingContext2D): CanvasPattern|null {\n    const pattern = document.createElement('canvas') as HTMLCanvasElement;\n    const size = 32;\n    pattern.width = size * 2;\n    pattern.height = size * 2;\n    const pctx = pattern.getContext('2d') as CanvasRenderingContext2D;\n\n    pctx.fillStyle = 'rgb(195, 195, 195)';\n    pctx.fillRect(0, 0, size * 2, size * 2);\n\n    pctx.fillStyle = 'rgb(225, 225, 225)';\n    pctx.fillRect(0, 0, size, size);\n    pctx.fillRect(size, size, size, size);\n    return context.createPattern(pattern, 'repeat');\n  }\n\n  private createNavigationBar(): void {\n    this.navigationBar = this.element.createChild('div', 'screencast-navigation') as HTMLElement;\n    this.navigationBack = this.navigationBar.createChild('button', 'back') as HTMLButtonElement;\n    this.navigationBack.disabled = true;\n    UI.ARIAUtils.setAccessibleName(this.navigationBack, i18nString(UIStrings.back));\n    this.navigationForward = this.navigationBar.createChild('button', 'forward') as HTMLButtonElement;\n    this.navigationForward.disabled = true;\n    UI.ARIAUtils.setAccessibleName(this.navigationForward, i18nString(UIStrings.forward));\n    this.navigationReload = this.navigationBar.createChild('button', 'reload');\n    UI.ARIAUtils.setAccessibleName(this.navigationReload, i18nString(UIStrings.reload));\n    this.navigationUrl = UI.UIUtils.createInput() as HTMLInputElement;\n    UI.ARIAUtils.setAccessibleName(this.navigationUrl, i18nString(UIStrings.addressBar));\n    this.navigationBar.appendChild(this.navigationUrl);\n    this.navigationUrl.type = 'text';\n    this.navigationProgressBar = new ProgressTracker(\n        this.resourceTreeModel, this.networkManager, this.navigationBar.createChild('div', 'progress') as HTMLElement);\n\n    if (this.resourceTreeModel) {\n      this.navigationBack.addEventListener('click', this.navigateToHistoryEntry.bind(this, -1), false);\n      this.navigationForward.addEventListener('click', this.navigateToHistoryEntry.bind(this, 1), false);\n      this.navigationReload.addEventListener('click', this.navigateReload.bind(this), false);\n      this.navigationUrl.addEventListener('keyup', this.navigationUrlKeyUp.bind(this), true);\n      void this.requestNavigationHistory();\n      this.resourceTreeModel.addEventListener(\n          SDK.ResourceTreeModel.Events.MainFrameNavigated, this.requestNavigationHistoryEvent, this);\n      this.resourceTreeModel.addEventListener(\n          SDK.ResourceTreeModel.Events.CachedResourcesLoaded, this.requestNavigationHistoryEvent, this);\n    }\n  }\n\n  private navigateToHistoryEntry(offset: number): void {\n    if (!this.resourceTreeModel) {\n      return;\n    }\n    const newIndex = (this.historyIndex || 0) + offset;\n    if (!this.historyEntries || newIndex < 0 || newIndex >= this.historyEntries.length) {\n      return;\n    }\n    this.resourceTreeModel.navigateToHistoryEntry(this.historyEntries[newIndex]);\n    void this.requestNavigationHistory();\n  }\n\n  private navigateReload(): void {\n    if (!this.resourceTreeModel) {\n      return;\n    }\n    this.resourceTreeModel.reloadPage();\n  }\n\n  private navigationUrlKeyUp(event: KeyboardEvent): void {\n    if (event.key !== 'Enter') {\n      return;\n    }\n    let url: string = this.navigationUrl.value;\n    if (!url) {\n      return;\n    }\n    if (!url.match(SCHEME_REGEX)) {\n      url = 'http://' + url;\n    }\n\n    // Perform decodeURI in case the user enters an encoded string\n    // decodeURI has no effect on strings that are already decoded\n    // encodeURI ensures an encoded URL is always passed to the backend\n    // This allows the input field to support both encoded and decoded URLs\n    if (this.resourceTreeModel) {\n      void this.resourceTreeModel.navigate(encodeURI(decodeURI(url)) as Platform.DevToolsPath.UrlString);\n    }\n    this.canvasElement.focus();\n  }\n\n  private requestNavigationHistoryEvent(): void {\n    void this.requestNavigationHistory();\n  }\n\n  private async requestNavigationHistory(): Promise<void> {\n    const history = this.resourceTreeModel ? await this.resourceTreeModel.navigationHistory() : null;\n    if (!history) {\n      return;\n    }\n\n    this.historyIndex = history.currentIndex;\n    this.historyEntries = history.entries;\n\n    this.navigationBack.disabled = this.historyIndex === 0;\n    this.navigationForward.disabled = this.historyIndex === (this.historyEntries.length - 1);\n\n    let url: string = this.historyEntries[this.historyIndex].url;\n    const match = url.match(HTTP_REGEX);\n    if (match) {\n      url = match[1];\n    }\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.inspectedURLChanged(\n        url as Platform.DevToolsPath.UrlString);\n    this.navigationUrl.value = decodeURI(url);\n  }\n\n  private focusNavigationBar(): boolean {\n    this.navigationUrl.focus();\n    this.navigationUrl.select();\n    return true;\n  }\n}\n\nexport const BORDERS_SIZE = 44;\nexport const NAVBAR_HEIGHT = 29;\nexport const HTTP_REGEX = /^http:\\/\\/(.+)/;\nexport const SCHEME_REGEX = /^(https?|about|chrome):/;\n\nexport class ProgressTracker {\n  private element: HTMLElement;\n  private requestIds: Map<string, SDK.NetworkRequest.NetworkRequest>|null;\n  private startedRequests: number;\n  private finishedRequests: number;\n  private maxDisplayedProgress: number;\n\n  constructor(\n      resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel|null,\n      networkManager: SDK.NetworkManager.NetworkManager|null, element: HTMLElement) {\n    this.element = element;\n    if (resourceTreeModel) {\n      resourceTreeModel.addEventListener(\n          SDK.ResourceTreeModel.Events.MainFrameNavigated, this.onMainFrameNavigated, this);\n      resourceTreeModel.addEventListener(SDK.ResourceTreeModel.Events.Load, this.onLoad, this);\n    }\n    if (networkManager) {\n      networkManager.addEventListener(SDK.NetworkManager.Events.RequestStarted, this.onRequestStarted, this);\n      networkManager.addEventListener(SDK.NetworkManager.Events.RequestFinished, this.onRequestFinished, this);\n    }\n    this.requestIds = null;\n    this.startedRequests = 0;\n    this.finishedRequests = 0;\n    this.maxDisplayedProgress = 0;\n  }\n\n  private onMainFrameNavigated(): void {\n    this.requestIds = new Map();\n    this.startedRequests = 0;\n    this.finishedRequests = 0;\n    this.maxDisplayedProgress = 0;\n    this.updateProgress(0.1);  // Display first 10% on navigation start.\n  }\n\n  private onLoad(): void {\n    this.requestIds = null;\n    this.updateProgress(1);  // Display 100% progress on load, hide it in 0.5s.\n    window.setTimeout(() => {\n      if (!this.navigationProgressVisible()) {\n        this.displayProgress(0);\n      }\n    }, 500);\n  }\n\n  private navigationProgressVisible(): boolean {\n    return this.requestIds !== null;\n  }\n\n  private onRequestStarted(event: Common.EventTarget.EventTargetEvent<SDK.NetworkManager.RequestStartedEvent>): void {\n    if (!this.navigationProgressVisible()) {\n      return;\n    }\n    const request = event.data.request;\n    // Ignore long-living WebSockets for the sake of progress indicator, as we won't be waiting them anyway.\n    if (request.resourceType() === Common.ResourceType.resourceTypes.WebSocket) {\n      return;\n    }\n    if (this.requestIds) {\n      this.requestIds.set(request.requestId(), request);\n    }\n    ++this.startedRequests;\n  }\n\n  private onRequestFinished(event: Common.EventTarget.EventTargetEvent<SDK.NetworkRequest.NetworkRequest>): void {\n    if (!this.navigationProgressVisible()) {\n      return;\n    }\n    const request = event.data;\n    if (this.requestIds && !this.requestIds.has(request.requestId())) {\n      return;\n    }\n    ++this.finishedRequests;\n    window.setTimeout(() => {\n      this.updateProgress(\n          this.finishedRequests / this.startedRequests * 0.9);  // Finished requests drive the progress up to 90%.\n    }, 500);  // Delay to give the new requests time to start. This makes the progress smoother.\n  }\n\n  private updateProgress(progress: number): void {\n    if (!this.navigationProgressVisible()) {\n      return;\n    }\n    if (this.maxDisplayedProgress >= progress) {\n      return;\n    }\n    this.maxDisplayedProgress = progress;\n    this.displayProgress(progress);\n  }\n\n  private displayProgress(progress: number): void {\n    this.element.style.width = (100 * progress) + '%';\n  }\n}\n\nfunction getAttributesForElementTitle(node: SDK.DOMModel.DOMNode): string {\n  const id = node.getAttribute('id');\n  const className = node.getAttribute('class');\n\n  let selector: string = id ? '#' + id : '';\n  if (className) {\n    selector += '.' + className.trim().replace(/\\s+/g, '.');\n  }\n\n  if (selector.length > 50) {\n    selector = selector.substring(0, 50) + '\u2026';\n  }\n\n  return selector;\n}\n"],
  "mappings": "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",
  "names": []
}
