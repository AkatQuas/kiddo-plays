{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/screencast/ScreencastApp.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {ScreencastView} from './ScreencastView.js';\n\nconst UIStrings = {\n  /**\n  *@description Tooltip text that appears when hovering over largeicon phone button in Screencast App of the Remote Devices tab when toggling screencast\n  */\n  toggleScreencast: 'Toggle screencast',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/screencast/ScreencastApp.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet appInstance: ScreencastApp;\n\nexport class ScreencastApp implements Common.App.App,\n                                      SDK.TargetManager.SDKModelObserver<SDK.ScreenCaptureModel.ScreenCaptureModel> {\n  private readonly enabledSetting: Common.Settings.Setting<boolean>;\n  toggleButton: UI.Toolbar.ToolbarToggle;\n  private rootSplitWidget?: UI.SplitWidget.SplitWidget;\n  private screenCaptureModel?: SDK.ScreenCaptureModel.ScreenCaptureModel;\n  private screencastView?: ScreencastView;\n  constructor() {\n    this.enabledSetting = Common.Settings.Settings.instance().createSetting('screencastEnabled', true);\n    this.toggleButton = new UI.Toolbar.ToolbarToggle(i18nString(UIStrings.toggleScreencast), 'largeicon-phone');\n    this.toggleButton.setToggled(this.enabledSetting.get());\n    this.toggleButton.setEnabled(false);\n    this.toggleButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.toggleButtonClicked, this);\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.ScreenCaptureModel.ScreenCaptureModel, this);\n  }\n\n  static instance(): ScreencastApp {\n    if (!appInstance) {\n      appInstance = new ScreencastApp();\n    }\n    return appInstance;\n  }\n\n  presentUI(document: Document): void {\n    const rootView = new UI.RootView.RootView();\n\n    this.rootSplitWidget =\n        new UI.SplitWidget.SplitWidget(false, true, 'InspectorView.screencastSplitViewState', 300, 300);\n    this.rootSplitWidget.setVertical(true);\n    this.rootSplitWidget.setSecondIsSidebar(true);\n    this.rootSplitWidget.show(rootView.element);\n    this.rootSplitWidget.hideMain();\n\n    this.rootSplitWidget.setSidebarWidget(UI.InspectorView.InspectorView.instance());\n    UI.InspectorView.InspectorView.instance().setOwnerSplit(this.rootSplitWidget);\n    rootView.attachToDocument(document);\n    rootView.focus();\n  }\n\n  modelAdded(screenCaptureModel: SDK.ScreenCaptureModel.ScreenCaptureModel): void {\n    if (this.screenCaptureModel) {\n      return;\n    }\n    this.screenCaptureModel = screenCaptureModel;\n    this.toggleButton.setEnabled(true);\n    this.screencastView = new ScreencastView(screenCaptureModel);\n    if (this.rootSplitWidget) {\n      this.rootSplitWidget.setMainWidget(this.screencastView);\n    }\n    this.screencastView.initialize();\n    this.onScreencastEnabledChanged();\n  }\n\n  modelRemoved(screenCaptureModel: SDK.ScreenCaptureModel.ScreenCaptureModel): void {\n    if (this.screenCaptureModel !== screenCaptureModel) {\n      return;\n    }\n    delete this.screenCaptureModel;\n    this.toggleButton.setEnabled(false);\n    if (this.screencastView) {\n      this.screencastView.detach();\n      delete this.screencastView;\n    }\n    this.onScreencastEnabledChanged();\n  }\n\n  private toggleButtonClicked(): void {\n    const enabled = !this.toggleButton.toggled();\n    this.enabledSetting.set(enabled);\n    this.onScreencastEnabledChanged();\n  }\n\n  private onScreencastEnabledChanged(): void {\n    if (!this.rootSplitWidget) {\n      return;\n    }\n    const enabled = Boolean(this.enabledSetting.get() && this.screencastView);\n    this.toggleButton.setToggled(enabled);\n    if (enabled) {\n      this.rootSplitWidget.showBoth();\n    } else {\n      this.rootSplitWidget.hideMain();\n    }\n  }\n}\n\nlet toolbarButtonProviderInstance: ToolbarButtonProvider;\n\nexport class ToolbarButtonProvider implements UI.Toolbar.Provider {\n  static instance(opts: {forceNew: boolean} = {forceNew: false}): ToolbarButtonProvider {\n    const {forceNew} = opts;\n    if (!toolbarButtonProviderInstance || forceNew) {\n      toolbarButtonProviderInstance = new ToolbarButtonProvider();\n    }\n\n    return toolbarButtonProviderInstance;\n  }\n\n  item(): UI.Toolbar.ToolbarItem|null {\n    return ScreencastApp.instance().toggleButton;\n  }\n}\n\nlet screencastAppProviderInstance: ScreencastAppProvider;\n\nexport class ScreencastAppProvider implements Common.AppProvider.AppProvider {\n  static instance(opts: {forceNew: boolean} = {forceNew: false}): ScreencastAppProvider {\n    const {forceNew} = opts;\n    if (!screencastAppProviderInstance || forceNew) {\n      screencastAppProviderInstance = new ScreencastAppProvider();\n    }\n\n    return screencastAppProviderInstance;\n  }\n\n  createApp(): Common.App.App {\n    return ScreencastApp.instance();\n  }\n}\n"],
  "mappings": "AAIA;AACA;AACA;AACA;AAEA;AAEA,MAAM,YAAY;AAAA,EAIhB,kBAAkB;AAAA;AAEpB,MAAM,OAAO,KAAK,KAAK,kBAAkB,sCAAsC;AAC/E,MAAM,aAAa,KAAK,KAAK,mBAAmB,KAAK,QAAW;AAChE,IAAI;AAEG,2BAC6G;AAAA,EACjG;AAAA,EACjB;AAAA,EACQ;AAAA,EACA;AAAA,EACA;AAAA,EACR,cAAc;AACZ,SAAK,iBAAiB,OAAO,SAAS,SAAS,WAAW,cAAc,qBAAqB;AAC7F,SAAK,eAAe,IAAI,GAAG,QAAQ,cAAc,WAAW,UAAU,mBAAmB;AACzF,SAAK,aAAa,WAAW,KAAK,eAAe;AACjD,SAAK,aAAa,WAAW;AAC7B,SAAK,aAAa,iBAAiB,GAAG,QAAQ,cAAc,OAAO,OAAO,KAAK,qBAAqB;AACpG,QAAI,cAAc,cAAc,WAAW,cAAc,IAAI,mBAAmB,oBAAoB;AAAA;AAAA,SAG/F,WAA0B;AAC/B,QAAI,CAAC,aAAa;AAChB,oBAAc,IAAI;AAAA;AAEpB,WAAO;AAAA;AAAA,EAGT,UAAU,UAA0B;AAClC,UAAM,WAAW,IAAI,GAAG,SAAS;AAEjC,SAAK,kBACD,IAAI,GAAG,YAAY,YAAY,OAAO,MAAM,0CAA0C,KAAK;AAC/F,SAAK,gBAAgB,YAAY;AACjC,SAAK,gBAAgB,mBAAmB;AACxC,SAAK,gBAAgB,KAAK,SAAS;AACnC,SAAK,gBAAgB;AAErB,SAAK,gBAAgB,iBAAiB,GAAG,cAAc,cAAc;AACrE,OAAG,cAAc,cAAc,WAAW,cAAc,KAAK;AAC7D,aAAS,iBAAiB;AAC1B,aAAS;AAAA;AAAA,EAGX,WAAW,oBAAqE;AAC9E,QAAI,KAAK,oBAAoB;AAC3B;AAAA;AAEF,SAAK,qBAAqB;AAC1B,SAAK,aAAa,WAAW;AAC7B,SAAK,iBAAiB,IAAI,eAAe;AACzC,QAAI,KAAK,iBAAiB;AACxB,WAAK,gBAAgB,cAAc,KAAK;AAAA;AAE1C,SAAK,eAAe;AACpB,SAAK;AAAA;AAAA,EAGP,aAAa,oBAAqE;AAChF,QAAI,KAAK,uBAAuB,oBAAoB;AAClD;AAAA;AAEF,WAAO,KAAK;AACZ,SAAK,aAAa,WAAW;AAC7B,QAAI,KAAK,gBAAgB;AACvB,WAAK,eAAe;AACpB,aAAO,KAAK;AAAA;AAEd,SAAK;AAAA;AAAA,EAGC,sBAA4B;AAClC,UAAM,UAAU,CAAC,KAAK,aAAa;AACnC,SAAK,eAAe,IAAI;AACxB,SAAK;AAAA;AAAA,EAGC,6BAAmC;AACzC,QAAI,CAAC,KAAK,iBAAiB;AACzB;AAAA;AAEF,UAAM,UAAU,QAAQ,KAAK,eAAe,SAAS,KAAK;AAC1D,SAAK,aAAa,WAAW;AAC7B,QAAI,SAAS;AACX,WAAK,gBAAgB;AAAA,WAChB;AACL,WAAK,gBAAgB;AAAA;AAAA;AAAA;AAK3B,IAAI;AAEG,mCAA2D;AAAA,SACzD,SAAS,OAA4B,EAAC,UAAU,SAA+B;AACpF,UAAM,EAAC,aAAY;AACnB,QAAI,CAAC,iCAAiC,UAAU;AAC9C,sCAAgC,IAAI;AAAA;AAGtC,WAAO;AAAA;AAAA,EAGT,OAAoC;AAClC,WAAO,cAAc,WAAW;AAAA;AAAA;AAIpC,IAAI;AAEG,mCAAsE;AAAA,SACpE,SAAS,OAA4B,EAAC,UAAU,SAA+B;AACpF,UAAM,EAAC,aAAY;AACnB,QAAI,CAAC,iCAAiC,UAAU;AAC9C,sCAAgC,IAAI;AAAA;AAGtC,WAAO;AAAA;AAAA,EAGT,YAA4B;AAC1B,WAAO,cAAc;AAAA;AAAA;",
  "names": []
}
