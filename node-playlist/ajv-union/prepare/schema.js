const tsj = require('ts-json-schema-generator');
const fs = require('fs');
const path = require('path');

/** @type {import('ts-json-schema-generator/dist/src/Config').Config} */
const config = {
  path: path.resolve(__dirname, 'types.ts'),
  tsconfig: path.resolve(__dirname, '../tsconfig.json'),
  type: 'Troop', // Or <type-name> if you want to generate schema for that one type only
  extraTags: ['ignore', 'warning', 'detail', 'zh-cn'],
  expose: 'none', // 不生成 definitions
};

const outputSchemaJSON = path.resolve(__dirname, '../src/schema.json');
const outputSchemaJS = path.resolve(__dirname, '../src/schema.js');

const schema = tsj.createGenerator(config).createSchema(config.type);
Object.assign(schema, schema.definitions[config.type]);
delete schema.definitions[config.type];
delete schema.$ref;

const schemaString = JSON.stringify(schema, null, 2);
fs.writeFile(outputSchemaJSON, schemaString, (err) => {
  if (err) {
    throw err;
  }
});

fs.writeFile(
  outputSchemaJS,
  `// this file is auto generated by scripts/schema.js\nmodule.exports.schema = ${schemaString};\n`,
  'utf-8',
  (err) => {
    if (err) {
      throw err;
    }
  }
);
